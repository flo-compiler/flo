enum TokType {
    COL
    SEMICOL
    COMMA
    PLUS
    PLUS_PLUS
    MINUS
    MINUS_MINUS
    MULT
    DIV
    LPAR
    RPAR
    MOD
    LBRACE
    RBRACE
    LBRACKET
    RBRACKET
    INT
    FLOAT
    LN
    STR
    CHAR
    POW
    QUES
    AMP
    EQ
    EEQ
    NEQ
    GT
    LT
    LTE
    GTE
    ARROW
    EOF
    NOT
    SL
    SR
    DOT
    DOT_DOT
    DOT_DOT_DOT
    IDENTIFER
    AND_KW
    OR_KW
    XOR_KW
    CONST_KW
    LET_KW
    IF_KW
    ELSE_KW
    BOOL_KW
    I4_KW
    I8_KW
    I16_KW
    I32_KW
    I64_KW
    I128_KW
    INT_KW
    F16_KW
    F32_KW
    F64_KW
    FLOAT_KW
    VOID_KW
    FOR_KW
    WHILE_KW
    FNC_KW
    BREAK_KW
    CONTINUE_KW
    RETURN_KW
    IMPORT_KW
    TYPE_KW
    IN_KW
    CLASS_KW
    ENUM_KW
    NEW_KW
    AS_KW
    IS_KW
    EXTENDS_KW
}
enum TypeKind {
    BOOL
    I4
    I8
    I16
    I32
    I64
    I128
    INT
    F16
    F32
    F64
    FLOAT
    VOID
    ENUM
    OBJECT
    STRING
    PTR
    ARRAY
    FNC
    GENERIC_TEMPLATE
    RESOLVED_GENERIC
    UNKNOWN
}
enum StatementKind {
    IF
    VAR
    FOR
    WHILE
    CONTINUE
    BREAK
    RETURN
    EXPRESSION
}
enum ForKind {
    DEF
    IN
}
enum ExpressionKind {
    INT
    FLOAT
    STR
    CHAR
    BOOL
    NULL
    STRING
    ARRAY
    VAR
    BIN
    UNARY
    TYPEBOUND
    NEW
    MEMBER
    INDEX
    CALL
    TERNARY
}
enum VarIdKind {
    FNC
    VAR
}
enum BinaryOp {
    ADD
    SUB
    MUL
    DIV
    MOD
    POW
    GT
    GTE
    LT
    LTE
    EEQ
    NEQ
    SL
    SR
    OR
    AND
    XOR
    IN
    ASSIGN
    RANGE
}
enum UnaryOp {
    PREINCR
    PREDECR
    POSTINCR
    POSTDECR
    NEG
    NOT
    ADDROF
}
enum TypeExprOp {
    AS
    IS
}