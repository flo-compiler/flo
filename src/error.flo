import FloRange, COLORS, change_print_color, flo_println, flo_print in "utils"
enum ErrorKind {
    ILLEGALCHAR
    NAME
    SYNTAX
    IO
    GEN
    TYPE
}
class FloError {
    kind: ErrorKind
    message: String
    range: FloRange
    constructor(this, kind: ErrorKind, message: String, range: FloRange){
        this.kind = kind
        this.range = range
        this.message = message
    }
}
fnc get_next_line_index(text: String, start: uint): uint {
    while text.get_byte(start) != '\n' and start < text.length 
        start++
    return start
}
fnc print_error_line(text: String, range: FloRange){
    let end = get_next_line_index(text, range.end)
    let start_line = range.start - range.col
    let line = text.substring(start_line, end - start_line)
    flo_println(line)
    let space_num = range.col
    let arrow_num = range.end - range.start
    for _ in 0..space_num {
        flo_print(" ")
    }
    change_print_color(COLORS.RED)
    for _ in  0..arrow_num {
        flo_print("^")
    }
    change_print_color(COLORS.RESET)
    flo_print("\n")
}
fnc print_message_error(kind: ErrorKind, message: String){
    change_print_color(COLORS.RED)
    if kind == ErrorKind.ILLEGALCHAR {
        flo_print("[Illegal Character]: ")
    } else if kind == ErrorKind.SYNTAX {
        flo_print("[Syntax Error]: ")
    } else if kind == ErrorKind.IO {
        flo_print("[IO Error]: ")
    } else if kind == ErrorKind.TYPE {
        flo_print("[Type Error]: ")
    } else if kind == ErrorKind.NAME {
        flo_print("[Name Error]: ")
    } else {
        flo_print("[Error]: ")
    }
    change_print_color(COLORS.RESET)
    flo_println(message)
}
fnc print_error(error: FloError, filename: String, content: String){
    print_message_error(error.kind, error.message)
    flo_println("File '$filename', line $(error.range.line)")
    print_error_line(content, error.range)
}