import FloRange, color in "utils"
enum ErrorKind {
    ILLEGALCHAR
    NAME
    SYNTAX
    IO
    GEN
    TYPE
}

class FloError {
    kind: ErrorKind
    message: string
    range: FloRange
    constructor(this, kind: ErrorKind, message: string, range: FloRange){
        this.kind = kind
        this.range = range
        this.message = message
    }
}
fnc get_next_line_index(text: string, start: int): int {
    while text.get_byte(start) != '\n' and start < text.length 
        start++
    return start
}
fnc print_error_line(text: string, range: FloRange){
    let end = get_next_line_index(text, range.end)
    let start_line = range.start - range.col
    print(text.substring(start_line, end - start_line))
    print("\n")
    let space_num = range.col
    let arrow_num = range.end - range.start
    for let i = 0; i < space_num; i++ {
        print(" ")
    }
    change_print_color(COLORS.RED)
    for i = 0; i < arrow_num; i++ {
        print("^")
    }
    change_print_color(COLORS.RESET)
    print("\n")
}
fnc print_message_error(kind: ErrorKind, message: string){
    change_print_color(COLORS.RED)
    if kind == ErrorKind.ILLEGALCHAR {
        print("[Illegal Character]: ")
    } else if kind == ErrorKind.SYNTAX {
        print("[Syntax Error]: ")
    } else if kind == ErrorKind.IO {
        print("[IO Error]: ")
    } else if kind == ErrorKind.TYPE {
        print("[Type Error]: ")
    } else if kind == ErrorKind.NAME {
        print("[Name Error]: ")
    } else {
        print("[Error]: ")
    }
    change_print_color(COLORS.RESET)
    println(message)
}
fnc print_error(error: FloError, filename: string, content: string){
    print_message_error(error.kind, error.message)
    println("File \"$filename\", line $(error.range.line)")
    print_error_line(content, error.range)
}