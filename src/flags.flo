enum FlagType {
    INT
    BOOL
    STR
}
fnc add_flag(flag: Flag){
    if (flags_length < MAX_FLAGS_SIZE){
        flags_buffer[flags_length++] = flag
    }
}
class Flag {
    type: FlagType
    name: String
    description: String
    constructor(this, type: FlagType, name: String, description: String){
        this.type = type
        this.name = name
        this.description = description
        add_flag(this)
    }
}
const MAX_FLAGS_SIZE = 250
let flags_buffer: Flag[MAX_FLAGS_SIZE] = null /* Note to self ban const changes globally */
let flags_length = 0

class FlagString(Flag) {
    value: String
    constructor(this, name: String, description: String, default: String = null){
        super(FlagType.STR, name, description)
        this.value = default
    }
}
class FlagInt(Flag) {
    value: int
    constructor(this, name: String, description: String, default: int = 0){
        super(FlagType.INT, name, description)
        this.value = default
    }
}
class FlagBool(Flag) {
    value: bool
    constructor(this, name: String, description: String, default = false){
        super(FlagType.BOOL, name, description)
        this.value = default
    }
}
fnc parse_flags(argc: int, argv: u8**): String {
    let arg: String = null
    let i = 0
    while (++i < argc) {
        let raw_flag = argv[i]
        if (raw_flag[0] != '-'){
            if (arg == null)
                arg = String.from_cstring(raw_flag)
            continue
        } 
        let argname = String.from_cstring(raw_flag + 1)
        for j in 0..flags_length {
            let flag = flags_buffer[j]
            if (flag.name == argname) {
                if (flag.type == FlagType.BOOL) {
                    (flag as FlagBool).value = true
                    continue
                }
                if (i + 1 >= argc) {
                    println("Missing value after -$argname argument.")
                    return arg
                }
                let argvalue = String.from_cstring(argv[++i])
                if (flag.type == FlagType.INT) {
                    (flag as FlagInt).value = argvalue as int
                    del argvalue
                }
                if (flag.type == FlagType.STR) {
                    (flag as FlagString).value = argvalue
                }
                break
            }

        }
        del argname
    }
    return arg
}
fnc print_flags(){
    for i in 0..flags_length {
        let flag = flags_buffer[i]
        print("-$(flag.name)")
        if (flag.type == FlagType.INT){
            println(" <n>")
        } else if (flag.type == FlagType.STR){
            println(" <val>")
        } else {
            println(" ")
        }
        print("\t\t")
        println("$(flag.description)")
    }
}