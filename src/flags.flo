enum FlagType {
    INT
    BOOL
    STR
}
type Flag = { type: FlagType, name: String, description: String, value: u128 }
fnc add_flag(ftype: FlagType, fname: String, fdescription: String): u128* {
    if (flags_length < MAX_FLAGS_SIZE){
        flags_buffer[flags_length++] = { type: ftype, name: fname, description: fdescription, value: 0 }
    }
    return &flags_buffer[flags_length - 1].value
}
const MAX_FLAGS_SIZE = 20
let flags_buffer: Flag[MAX_FLAGS_SIZE] = null /* Note to self ban const changes globally */
let flags_length = 0

fnc FlagString(name: String, description: String, default: String = null): String* {
    let flag_value = add_flag(FlagType.STR, name, description) as String*
    flag_value[0] = default
    return flag_value
}
fnc FlagInt(name: String, description: String, default: int = 0): int* {
    let flag_value = add_flag(FlagType.INT, name, description) as int*
    flag_value[0] = default
    return flag_value
}
fnc FlagBool (name: String, description: String, default = false): bool* {
    let flag_value = add_flag(FlagType.BOOL, name, description) as bool*
    flag_value[0] = default
    return flag_value
}
fnc parse_flags(argc: int, argv: u8**): String {
    let arg: String = null
    for let i = 1; i < argc; i++ {
        let raw_flag = argv[i]
        if (raw_flag[0] != '-'){
            if (arg == null)
                arg = String.from_bytes(raw_flag, strlen(raw_flag))
            continue
        } 
        let argname = String.from_bytes(raw_flag + 1, strlen(raw_flag + 1))
        for let j = 0; j < flags_length; j++ {
            let flag = flags_buffer[j]
            if (flag.name == argname) {
                if (flag.type == FlagType.BOOL) {
                    let flag_value_ptr = &flags_buffer[j].value as bool*
                    flag_value_ptr[0] = true
                    continue
                }
                if (i + 1 >= argc) {
                    println("Missing value after -$argname argument.")
                    return arg
                }
                let argvalue = String.from_bytes(argv[++i], strlen(argv[i]))
                if (flag.type == FlagType.INT) {
                    let flag_value_ptr = &flags_buffer[j].value as int*
                    flag_value_ptr[0] = argvalue as int
                }
                if (flag.type == FlagType.STR) {
                    let flag_value_ptr = &flags_buffer[j].value as String*
                    flag_value_ptr[0] = argvalue
                }
                break
            }
        }
    }
    return arg
}
fnc print_flags(){
    for i in 0..flags_length {
        let flag = flags_buffer[i]
        print("-$(flag.name)")
        if (flag.type == FlagType.INT){
            println(" <n>")
        } else if (flag.type == FlagType.STR){
            println(" <val>")
        } else {
            println(" ")
        }
        print("\t\t")
        println("$(flag.description)")
    }
}