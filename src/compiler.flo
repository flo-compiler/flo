import "@io/file"
import "@path/path"
import  "error"
import FileId in "utils"
class FloFile {
    abspath: String
    relpath: String
    contents: String
    constructor(this, abspath: String, relpath: String){
        this.abspath = abspath
        this.relpath = relpath
        this.contents = null
    }
    private __del__(this){
        del this.abspath
        del this.relpath
    }
}
class Compiler {
    public current_file: FileId
    private std_dir_path: String
    public current_file_contents: String
    public builtin_path: String
    private files: FloFile []
    public errors: FloError []
    private file_ids: StringMap<FileId>
    constructor(this){
        this.files = []
        this.current_file = null
        this.current_file_contents = null
        this.errors = []
        this.file_ids = new StringMap<FileId>()
    }
    public set_std_path(this, std_dir_path: String): bool {
        if (!File.exists(std_dir_path)) return false
        this.std_dir_path = std_dir_path
        let builtins_file_path = "builtins/builtins.flo"
        this.builtin_path = Path.join(std_dir_path, builtins_file_path)
        del builtins_file_path
        return true
    }
    private find_module_path(this, fpath: String): String {
        let path = fpath.replace(String.from_bytes("@", 1), this.std_dir_path)
        let extension = String.from_bytes(".flo", 4)
        if !path.ends_with(extension){
            path += extension
        }
        return Path.abspath(path)
    }
    public register_file(this, fpath: String): FileId {
        let abspath = this.find_module_path(fpath)
        let file_id = this.file_ids[abspath]
        if file_id != null return file_id
        file_id = new FileId(this.files.length)
        this.file_ids[abspath] = file_id
        this.files << new FloFile(abspath, fpath)
        return file_id
    }
    public set_current_file(this, file_id: FileId): bool {
        if (file_id.id < 0 or file_id.id > this.files.length) return false
        let module = this.files[file_id.id]
        let file_contents = module.contents
        if (file_contents == null) {
            if !File.exists(module.abspath) return false
            let file = File.open_for_reading(module.abspath)
            if file == null return false
            file_contents = file.read_all()
            module.contents = file_contents
            this.current_file = file_id
            file.close()
        }
        this.current_file_contents = file_contents
        return true
    }
    public print_errors(this): bool {
        if this.errors.length > 0 {
            let error = this.errors[0]
            let error_file = this.files[error.range.fid.id]
            print_error(error, error_file.relpath, error_file.contents)
            return true
        }
        return false
    }
    public add_builtins(this): FileId {
        return this.register_file(this.builtin_path)
    }
    public __del__(this){
        for file in this.files {
            del file
        }
        del this.files
        for error in this.errors {
            del error
        }
        del this.errors
        for file_id in this.file_ids {
            del file_id
        }
        del this.file_ids
    }
}