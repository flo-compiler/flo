import "@io/file"
import "@path/path"
import  "error"
class FileId {
    id: uint
    constructor(this, id: uint){
        this.id = id
    }
}
class FloFile {
    abspath: string
    relpath: string
    constructor(this, abspath: string, relpath: string){
        this.abspath = abspath
        this.relpath = relpath
    }
}
class Compiler {
    public current_file: FileId
    private std_dir_path: string
    public current_file_contents: string
    public builtin_path: string
    private files: FloFile []
    public errors: FloError []
    private file_ids: [string: FileId]
    constructor(this){
        this.files = []
        this.current_file = null
        this.current_file_contents = null
        this.errors = []
        this.file_ids = new Map<string, FileId>()
        this.set_std_path("/usr/local/flo/lib/")
    }
    public set_std_path(this, std_dir_path: string){
        this.std_dir_path = std_dir_path
        this.builtin_path = Path.join(std_dir_path, "builtins/builtins.flo")
    }
    private find_module_path(this, fpath: string): string {
        let path = fpath.replace("@", this.std_dir_path)
        if !path.ends_with(".flo")
            path += ".flo"
        return Path.abspath(path)
    }
    public register_file(this, fpath: string): FileId {
        let abspath = this.find_module_path(fpath)
        let file_id = this.file_ids[abspath]
        if file_id != null return file_id
        file_id = new FileId(this.files.length)
        this.file_ids[abspath] = file_id
        this.files << new FloFile(abspath, fpath)
        return file_id
    }
    public set_current_file(this, file_id: FileId): bool {
        let file_path = this.files[file_id.id]
        if !File.exists(file_path.abspath) return false
        let file = File.open_for_reading(file_path.abspath)
        if this.current_file_contents != null {
            del this.current_file_contents
        }
        this.current_file_contents = file.read_all()
        this.current_file = file_id
        file.close()
        return true
    }
    public print_errors(this): bool {
        if this.errors.length > 0 {
            print_error(this.errors[0], this.files[this.current_file.id].relpath, this.current_file_contents)
            return true
        }
        return false
    }
    public add_builtins(this): FileId {
        return this.register_file(this.builtin_path)
    }   
}