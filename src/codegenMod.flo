import "llvm/analysis"
import "llvm/bitwriter"
import "llvm/executionEngine"
import "llvm/passManagerBuilder"
import "llvm/transforms"
import "llvm/target"
import "llvm/targetMachine"
class GeneratedModule {
    private llvm_mod: LLVMModuleRef
    private errors: i8*
    constructor(this, llvm_mod: LLVMModuleRef){
        this.llvm_mod = llvm_mod
        this.errors = null
        LLVMVerifyModule(this.llvm_mod, LLVMVerifierFailureAction.LLVMAbortProcessAction, &this.errors)
        this.check_errors()
        LLVM_InitializeAllTargetInfos()
        LLVM_InitializeAllTargets()
        LLVM_InitializeAllTargetMCs()
        LLVM_InitializeAllAsmParsers()
        LLVM_InitializeAllAsmPrinters()
    }
    private check_errors(this){
        if (this.errors[0] != 0) {
            println("error: $(string.from_cstring(this.errors))")
            LLVMDisposeMessage(this.errors)
        }
    }
    public run_passes(this, level: int){
        let pm = LLVMCreatePassManager()
        let pmp = LLVMPassManagerBuilderCreate()
        LLVMAddInternalizePass(pm, 1)
        LLVMAddGlobalDCEPass(pm)
        LLVMAddGlobalOptimizerPass(pm)
        LLVMAddInstructionCombiningPass(pm)
        LLVMAddScalarReplAggregatesPass(pm)
        LLVMAddFunctionInliningPass(pm)
        LLVMPassManagerBuilderSetOptLevel(pmp, level)
        LLVMPassManagerBuilderPopulateModulePassManager(pmp, pm)
        LLVMRunPassManager(pm, this.llvm_mod)
        LLVMPassManagerBuilderDispose(pmp)
        LLVMDisposePassManager(pm)
    }
    public exec(this){
        LLVMLinkInMCJIT()
        let module_copy = this.copy_llvm_module()
        let engine: LLVMExecutionEngineRef = null
        if (LLVMCreateExecutionEngineForModule(&engine, module_copy, &this.errors) != 0) {
            println("failed to create execution engine")
            return
        }
        let main_fnc = LLVMGetNamedFunction(module_copy, "main")
        if main_fnc == null {
            println("Main function not found in module; can't execute")
            LLVMDisposeExecutionEngine(engine)
            return
        }
        let ret = LLVMRunFunctionAsMain(engine, main_fnc, 0, null, null)
        println("Exited with code: $ret")
        LLVMDisposeExecutionEngine(engine)
    }
    public create_target_machine(this, triple_str: string): LLVMTargetMachineRef {
        let triple = triple_str == "" ? LLVMGetDefaultTargetTriple() : triple_str.to_cstring()
        let target: LLVMTargetRef = null
        if (LLVMGetTargetFromTriple(triple, &target, &this.errors) != 0) {
            println("failed to get target triple: $triple_str")
        }
        this.check_errors()
        let CPU: i8* = "generic"
        return LLVMCreateTargetMachine(target, triple, CPU, LLVMGetHostCPUFeatures(), LLVMCodeGenOptLevel.LLVMCodeGenLevelAggressive, LLVMRelocMode.LLVMRelocDefault, LLVMCodeModel.LLVMCodeModelDefault)
    }
    public write_object(this, fn: string, target: string){
        let tm = this.create_target_machine(target)
        let module_copy = this.copy_llvm_module()
        LLVMSetDataLayout(module_copy, LLVMCreateTargetDataLayout(tm))
        LLVMSetTarget(module_copy, LLVMGetTargetMachineTriple(tm))
        if (LLVMTargetMachineEmitToFile(tm, module_copy, fn.to_cstring(), LLVMCodeGenFileType.LLVMObjectFile, &this.errors) != 0) {
            println("target machine failed to emit object code")
        }
        this.check_errors()
        LLVMDisposeTargetMachine(tm)
    }
    public print(this){
        LLVMDumpModule(this.llvm_mod)
    }
    private copy_llvm_module(this): LLVMModuleRef{
        return LLVMCloneModule(this.llvm_mod)
    }
    public destroy(this){
        let ctx = LLVMGetModuleContext(this.llvm_mod)
        LLVMDisposeModule(this.llvm_mod)
        LLVMContextDispose(ctx)
        LLVMShutdown()
    }
}