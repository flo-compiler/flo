import "llvm/types"
import LLVMVerifyModule in "llvm/analysis"
import LLVMDisposeModule, LLVMContextDispose, LLVMShutdown, LLVMGetModuleContext, LLVMCloneModule, LLVMDumpModule, LLVMSetTarget, LLVMCreatePassManager, LLVMSetDataLayout, LLVMDisposeMessage, LLVMRunPassManager, LLVMDisposePassManager, LLVMGetNamedFunction in "llvm/core"
import LLVMRemoveModule, LLVMLinkInMCJIT, LLVMCreateExecutionEngineForModule, LLVMDisposeExecutionEngine, LLVMRunFunctionAsMain in "llvm/executionEngine"
import LLVMPassManagerBuilderDispose, LLVMPassManagerBuilderCreate, LLVMPassManagerBuilderSetOptLevel, LLVMPassManagerBuilderPopulateModulePassManager in "llvm/passManagerBuilder"
import LLVMAddInternalizePass, LLVMAddInstructionCombiningPass, LLVMAddGlobalDCEPass, LLVMAddGlobalOptimizerPass, LLVMAddScalarReplAggregatesPass, LLVMAddFunctionInliningPass in "llvm/transforms"
import LLVM_InitializeAllTargetInfos, LLVM_InitializeAllTargetMCs, LLVM_InitializeAllTargets, LLVM_InitializeAllAsmParsers, LLVM_InitializeAllAsmPrinters in "llvm/target"
import LLVMDisposeTargetMachine, LLVMTargetMachineEmitToFile, LLVMGetDefaultTargetTriple, LLVMGetTargetMachineTriple, LLVMCreateTargetDataLayout, LLVMCreateTargetMachine, LLVMGetTargetFromTriple, LLVMGetHostCPUFeatures in "llvm/targetMachine"
class GeneratedModule {
    private llvm_mod: LLVMModuleRef
    private errors: i8*
    constructor(this, llvm_mod: LLVMModuleRef){
        this.llvm_mod = llvm_mod
        this.errors = null
        LLVMVerifyModule(this.llvm_mod, LLVMVerifierFailureAction.LLVMAbortProcessAction, &this.errors)
        this.check_errors()
        LLVM_InitializeAllTargetInfos()
        LLVM_InitializeAllTargets()
        LLVM_InitializeAllTargetMCs()
        LLVM_InitializeAllAsmParsers()
        LLVM_InitializeAllAsmPrinters()
    }
    private check_errors(this){
        if (this.errors[0] != 0) {
            println("error: $(string.from_cstring(this.errors))")
            LLVMDisposeMessage(this.errors)
        }
    }
    public run_passes(this, level: int){
        let pm = LLVMCreatePassManager()
        let pmp = LLVMPassManagerBuilderCreate()
        LLVMAddInternalizePass(pm, 1)
        LLVMAddGlobalDCEPass(pm)
        LLVMAddGlobalOptimizerPass(pm)
        LLVMAddInstructionCombiningPass(pm)
        LLVMAddScalarReplAggregatesPass(pm)
        LLVMAddFunctionInliningPass(pm)
        LLVMPassManagerBuilderSetOptLevel(pmp, level)
        LLVMPassManagerBuilderPopulateModulePassManager(pmp, pm)
        LLVMRunPassManager(pm, this.llvm_mod)
        LLVMPassManagerBuilderDispose(pmp)
        LLVMDisposePassManager(pm)
    }
    public exec(this): int {
        LLVMLinkInMCJIT()
        let engine: LLVMExecutionEngineRef = null
        if (LLVMCreateExecutionEngineForModule(&engine, this.llvm_mod, &this.errors) != 0) {
            println("failed to create execution engine")
            return 1
        }
        let main_fnc = LLVMGetNamedFunction(this.llvm_mod, "main")
        if main_fnc == null {
            println("Main function not found in module; can't execute")
            LLVMDisposeExecutionEngine(engine)
            return 1
        }
        let ret = LLVMRunFunctionAsMain(engine, main_fnc, 0, null, null)
        if LLVMRemoveModule(engine, this.llvm_mod, &this.llvm_mod, &this.errors) {
            println("Failure to delete execution engine")
            return 1
        }
        LLVMDisposeExecutionEngine(engine)
        return ret
    }
    private create_target_machine(this, triple_str: string): LLVMTargetMachineRef {
        let triple = triple_str == "" ? LLVMGetDefaultTargetTriple() : triple_str.to_cstring()
        let target: LLVMTargetRef = null
        if (LLVMGetTargetFromTriple(triple, &target, &this.errors) != 0) {
            println("failed to get target triple: $triple_str")
        }
        this.check_errors()
        let CPU: i8* = "generic"
        return LLVMCreateTargetMachine(target, triple, CPU, LLVMGetHostCPUFeatures(), LLVMCodeGenOptLevel.LLVMCodeGenLevelAggressive, LLVMRelocMode.LLVMRelocDefault, LLVMCodeModel.LLVMCodeModelDefault)
    }
    public write_object(this, fn: string, target: string){
        let tm = this.create_target_machine(target)
        LLVMSetDataLayout(this.llvm_mod, LLVMCreateTargetDataLayout(tm))
        LLVMSetTarget(this.llvm_mod, LLVMGetTargetMachineTriple(tm))
        if (LLVMTargetMachineEmitToFile(tm, this.llvm_mod, fn.to_cstring(), LLVMCodeGenFileType.LLVMObjectFile, &this.errors) != 0) {
            println("target machine failed to emit object code")
        }
        this.check_errors()
        LLVMDisposeTargetMachine(tm)
    }
    public print(this){
        LLVMDumpModule(this.llvm_mod)
    }
    public llvm_shutdown(this){
        LLVMShutdown()
    }
}