import "utils"
import "error"
import "compiler"
import "lexer"
import "debug"
import "parser"
import "typechecker"
import "codegen"
fnc parse_args(size: int, args: i8**): string[] {
    let arr: string[] = []
    for let i = 0; i < size; i++
        arr << string.from_cstring(args[i])
    return arr
}
fnc help(exec_file: string){
    println("Usage: $exec_file <path> [OPTIONS]\n")
    println("OPTIONS:")
    println(" -h, --help\t\t\tShow this help message.")
    println(" --print-tokens\t\t\tPrint generated Tokens")
    println(" --print-ast\t\t\tPrint generated AST.")
    println(" -emit-llvm\t\t\tPrint generated LLVM-IR.")
    println(" -o <file>\t\t\tPlace the output into <file>.")
    println(" --target\t\t\tCompile to specific target triple.")
    println(" -O OPT_LEVEL\n \t\t\t\tSpecify the compiler's optimization level which is a\n \t\t\t\tvalue from 0-3.")
    println(" -v, --version\t\t\tShow version.")
}
fnc flag(args: string[], name: string): bool {
    return name in args
}
fnc flag_value_or(args: string[], name: string, default: string): string {
    let idx = args.find(name)
    if idx != -1 {
        if args.length > ++idx
            return args[idx]
        else {
            print_message_error(ErrorKind.GEN, "Missing value after '$name' argument.")
        }
    }
    return default
}
fnc main(argc: int, argv: i8**): int {
    let args = parse_args(argc, argv)
    if args.length >= 2 {
        if flag(args, "-v") or flag(args, "--version"){
            println("v0.01@test.selfhost")
            return 0
        }
        if flag(args, "-h") or flag(args, "--help"){
            help(args[0])
            return 0
        }
        let filename = args[1]
        let compiler = new Compiler()
        let file_id = compiler.register_file(filename)
        if (!compiler.set_current_file(file_id)) {
            print_message_error(ErrorKind.IO, "No such file or directory: '$filename'")
            return 1
        }
        /***** Lexing ******/
        let lexer = new Lexer()
        let tokens = lexer.tokenize(compiler.current_file_contents, compiler.errors)
        if (compiler.print_errors()) return 1
        if flag(args, "--print-tokens") print_tokens(tokens, compiler.current_file_contents)
        /***** Parsing *****/
        let parser = new Parser()
        let module_node = parser.parse(tokens, compiler.errors)
        if (compiler.print_errors()) return 1
        /**** Analyzing ****/
        let typechecker = new TypeChecker()
        let program = typechecker.check(module_node, compiler, filename)
        if (compiler.print_errors()) return 1       
        /**** Codegen ****/
        let codegen: CodeGen
        let flo_module = codegen.codegen(program)
        if flag(args, "--print-llvm") flo_module.print()
        flo_module.run_passes(flag_value_or(args, "-O", "1") as int)
        if flag(args, "-o") {
            flo_module.write_object(flag_value_or(args, "-o", "a.o"), flag_value_or(args, "--target", ""))
        } else {
            flo_module.exec()
        }
        // flo_module.destroy()
    } else {
        print_message_error(ErrorKind.GEN, "No input file specified.")
        return 1
    }
    return 0
}