import "@flo/collections/map"
import "llvm/core"
import "llvm/linker"
import "codegenDI"
import "codegenMod"

class IntrinsicResult {
    call: LLVMValueRef
    fnc_type: LLVMTypeRef
}
class CGClassType  {
    llvm_type: LLVMTypeRef
    vt_methods_pos_map: Map<string, int>
    fields_pos_map: Map<string, int>
    non_vt_methods_map: Map<string, LLVMValueRef>
    vtable: LLVMValueRef
    vtable_type: LLVMTypeRef
    constructor: LLVMValueRef
}
class CGEnumType {
    llvm_type: LLVMTypeRef
    field_map: Map<string, LLVMValueRef> 
}
fnc get_intrinsic(mod: LLVMModuleRef, name: string, params_types: LLVMTypeRef[], return_type: LLVMTypeRef, var_args = false): IntrinsicResult {
    let result: IntrinsicResult
    result.fnc_type = LLVMFunctionType(return_type, params_types.buffer, params_types.length, var_args)
    let fn_name = name.to_cstring()
    let fnc_in_mod = LLVMGetNamedFunction(mod, fn_name)
    if fnc_in_mod != null {
        result.call = fnc_in_mod
    } else {
        result.call = LLVMAddFunction(mod, fn_name, result.fnc_type)
    }
    return result
}
fnc is_terminated(block: Block): bool {
    return block.returns or block.continues or block.breaks
}
fnc create_var_key(var_id: VarId): string {
    return  "$(var_id.module_id);$(var_id.kind);$(var_id.id)"
}
fnc create_type_id_key(type_id: TypeId): string {
    return "$(type_id.module_id);$(type_id.kind);$(type_id.id)"
}
fnc create_type_key_from_var(var_id: VarId): string {
    return "$(var_id.module_id);$(var_id.kind - VarIdKind.CLASS);$(var_id.id)"
}
fnc create_prop_key(prop_id: PropId): string {
    return "$(create_type_id_key(prop_id.type_id));$(prop_id.kind);$(prop_id.id)"
}
fnc resize_type_array(array: LLVMTypeRef[], amt: int){
    for let i = array.length; i <= amt; i++ {
        array << null
    }
}
fnc resize_value_array(array: LLVMValueRef[], amt: int){
    for let i = array.length; i <= amt; i++ {
        array << null
    }
}
fnc get_format_from_type(ty: Type): string {
    if is_int(ty){
        if ty.kind == TypeKind.I128
            return "lld"
        if ty.kind == TypeKind.I64 
            return "ld"
        return "%d"
    }
    if ty.kind == TypeKind.F16 or ty.kind == TypeKind.F32 
        return "%f"
    if ty.kind == TypeKind.F64 or ty.kind == TypeKind.FLOAT
        return "%lf"
    if is_pointer(ty)
        return "%p"
    return "%s"
}
class CodeGen {
    modules: LLVMModuleRef[]
    module: LLVMModuleRef
    global_var_scope: Map<string, LLVMValueRef>
    module_intrinsic_scope: Map<string, IntrinsicResult>
    module_string_scope: Map<string, LLVMValueRef>
    module_classes: Map<string, CGClassType>
    module_enums: Map<string, CGEnumType>
    function: LLVMValueRef
    break_bb: LLVMBasicBlockRef
    continue_bb: LLVMBasicBlockRef
    program: Program
    in_static_ctx: bool
    program_ctx: LLVMContextRef
    debugInfoObj: DebugInfo
    codegen(this, program: Program): GeneratedModule{
        this.program = program
        this.modules = []
        this.continue_bb = null
        this.break_bb = null
        let global_var_map: Map<string, LLVMValueRef>
        this.program_ctx = LLVMContextCreate()
        this.global_var_scope = global_var_map
        for let i = 0; i < program.modules.length; ++i {
            this.modules << this.codegen_module(program.modules[i])
        }
        this.link_modules()
        return new GeneratedModule(this.modules[0])
    }
    private link_modules(this){
        for let i = 1; i < this.modules.length; ++i {
            LLVMLinkModules2(this.modules[0], this.modules[i])
        }
    }
    private get_var_from_varid(this, var_id: VarId): LLVMValueRef{
        return this.global_var_scope.get(create_var_key(var_id))
    }
    private get_class_from_typeid(this, type_id: TypeId): CGClassType {
        return this.module_classes.get(create_type_id_key(type_id))
    }
    private get_enum_from_typeid(this, type_id: TypeId): CGEnumType {
        return this.module_enums.get(create_type_id_key(type_id))
    }
    private get_class_from_varid(this, var_id: VarId): CGClassType {
        return this.module_classes.get(create_type_key_from_var(var_id))
    }
    private get_enum_from_varid(this, var_id: VarId): CGEnumType {
        return this.module_enums.get(create_type_key_from_var(var_id))
    }
    private add_class(this, type_id: TypeId, struct_class: CGClassType){
        this.module_classes.set(create_type_id_key(type_id), struct_class)
    }
    private add_enum(this, type_id: TypeId, enum_type: CGEnumType){
        this.module_enums.set(create_type_id_key(type_id), enum_type)
    }
    private add_var(this, var_id: VarId, value: LLVMValueRef){
        this.global_var_scope.set(create_var_key(var_id), value)
    }
    private neg_int(builder: LLVMBuilderRef, val: LLVMValueRef): LLVMValueRef {
        return LLVMIsConstant(val) ? LLVMConstNeg(val) : LLVMBuildNeg(builder, val, "")
    }
    private createLLVMBool(this, val: bool): LLVMValueRef{
        return LLVMConstInt(LLVMInt1TypeInContext(this.program_ctx), val as int, false)
    }
    private createLLVMInt(this, i: int): LLVMValueRef {
        return LLVMConstInt(LLVMIntTypeInContext(this.program_ctx, WORD_SIZE), i, false)
    }
    private codegen_module(this, module: Module): LLVMModuleRef {
        let module_string_scope: Map<string, LLVMValueRef>
        let module_intrinsic_scope: Map<string, IntrinsicResult>
        let module_classes: Map<string, CGClassType>
        let module_enums: Map<string, CGEnumType>
        this.module_string_scope = module_string_scope
        this.module_intrinsic_scope = module_intrinsic_scope
        this.module_classes = module_classes
        this.module_enums = module_enums
        this.module = LLVMModuleCreateWithNameInContext(module.name.to_cstring(), this.program_ctx)
        this.debugInfoObj = new DebugInfo(this.module, module.name)
        this.codegen_imported_symbols(module.imported_symbols)
        this.in_static_ctx = true
        for let i = 0; i < module.global_consts.length; ++i {
            this.codegen_const_declaration(null, module.global_consts[i])
        }
        for i = 0; i < module.global_vars.length; ++i {
            this.codegen_var_declaration(null, module.global_vars[i])
        }
        for i = 0; i < module.classes.length; ++i {
            this.declare_class(module.classes[i])
        }
        for i = 0; i < module.classes.length; ++i {
            this.declare_class_struct(module.classes[i])
        }
        for i = 0; i < module.enums.length; ++i {
            this.declare_enum(module.enums[i])
        }
        for i = 0; i < module.functions.length; ++i {
            this.declare_function(module.functions[i])
        }
        this.in_static_ctx = false
        for i = 0; i < module.classes.length; ++i {
            this.codegen_class(module.classes[i])
        }
        for i = 0; i < module.functions.length; ++i {
            this.codegen_function(module.functions[i])
        }
        this.debugInfoObj.finalize()
        return this.module
    }
    private codegen_imported_symbols(this, symbols: ImportedSymbols){
        for let i = 0; i < symbols.classes.length; i++ {
            let imported_class = get_class(this.program, symbols.classes[i])
            this.declare_class(imported_class)
            this.declare_class_struct(imported_class, false)
        }
        for i = 0; i < symbols.enums.length; i++ {
            let imported_enum = get_enum(this.program, symbols.enums[i])
            this.declare_enum(imported_enum)
        }
        for i = 0; i < symbols.vars.length; i++ {
            let var_decl = symbols.vars[i]
            let var = get_var(this.program, var_decl.var_id)
            let ty = this.codegen_type(var.value_type)
            let ptr = LLVMAddGlobal(this.module, ty, var_decl.name.to_cstring())
        }
        for i = 0; i < symbols.functions.length; i++ {
            let function = get_func(this.program, symbols.functions[i])
            this.declare_function(function)
        }
    }
    private codegen_type(this, tt: Type, as_pointer = true): LLVMTypeRef {
        if tt.kind == TypeKind.VOID
            return LLVMVoidTypeInContext(this.program_ctx)
        if tt.kind == TypeKind.BOOL
            return LLVMInt1TypeInContext(this.program_ctx)
        if tt.kind == TypeKind.I4
            return LLVMIntTypeInContext(this.program_ctx, 4)
        if tt.kind == TypeKind.I8
            return LLVMInt8TypeInContext(this.program_ctx)
        if tt.kind == TypeKind.I16
            return LLVMInt16TypeInContext(this.program_ctx)
        if tt.kind == TypeKind.I32 
            return LLVMInt32TypeInContext(this.program_ctx)
        if tt.kind == TypeKind.INT
            return LLVMIntTypeInContext(this.program_ctx, WORD_SIZE)
        if tt.kind == TypeKind.I64
            return LLVMInt64TypeInContext(this.program_ctx)
        if tt.kind == TypeKind.I128
            return LLVMInt128TypeInContext(this.program_ctx)
        if tt.kind == TypeKind.F16 
            return LLVMHalfTypeInContext(this.program_ctx)
        if tt.kind == TypeKind.F32 
            return LLVMFloatTypeInContext(this.program_ctx)
        if tt.kind == TypeKind.F64 or tt.kind == TypeKind.FLOAT
            return LLVMDoubleTypeInContext(this.program_ctx)
        if tt.kind == TypeKind.PTR
            return LLVMPointerType(this.codegen_type((tt as PointerType).pointee_type))
        if tt.kind == TypeKind.ARRAY {
            let arr_ty = tt as ArrayType
            let element_type = this.codegen_type(arr_ty.element_type)
            return LLVMArrayType(element_type, arr_ty.length)
        }
        if tt.kind == TypeKind.FNC {
            let param_types: LLVMTypeRef[] = []
            let func_ty = tt as FunctionType
            for let i = 0; i < func_ty.arg_types.length; i++ {
                param_types << this.codegen_type(func_ty.arg_types[i])
            }
            let ret_type = this.codegen_type(func_ty.return_type)
            let llvm_fnty = LLVMFunctionType(ret_type, param_types.buffer, param_types.length, false)
            return as_pointer ? LLVMPointerType(llvm_fnty) : llvm_fnty
        }
        if tt.kind == TypeKind.OBJECT {
            let obj_type = this.get_class_from_typeid((tt as ObjectType).class_id)
            if obj_type != null {
                return as_pointer ? LLVMPointerType(obj_type.llvm_type) : obj_type.llvm_type
            }
        }
        if tt.kind == TypeKind.ENUM {
            let enum_type = this.get_enum_from_typeid((tt as EnumType).enum_id)
            if enum_type != null {
                return enum_type.llvm_type
            }
        }
        // RESOLVED_GENERIC
        return null
    }
    private codegen_return_stmt(this, builder: LLVMBuilderRef, return_stmt: ReturnStatement){
        if return_stmt.return_value != null 
            LLVMBuildRet(builder, this.codegen_expression(builder, return_stmt.return_value))
        else
            LLVMBuildRetVoid(builder)
    }
    private codegen_int(this, int_exp: IntExpression): LLVMValueRef {
        return LLVMConstInt(this.codegen_type(int_exp.value_type), int_exp.value, true)
    }
    private codegen_float(this, float_exp: FloatExpression): LLVMValueRef {
        return LLVMConstReal(this.codegen_type(float_exp.value_type), float_exp.value)
    }
    private codegen_bool(this, bool_exp: BooleanExpression): LLVMValueRef {
        let val = bool_exp.value
        return LLVMConstInt(LLVMInt1TypeInContext(this.program_ctx), val, false)
    }
    private codegen_snprintf_call(this, builder: LLVMBuilderRef, vargs: LLVMValueRef[]): LLVMValueRef {
        let i8_ty = LLVMInt8TypeInContext(this.program_ctx)
        let i8_ptr_ty = LLVMPointerType(i8_ty)
        let int_ty = LLVMIntTypeInContext(this.program_ctx, WORD_SIZE)
        let args: LLVMValueRef[] = [LLVMConstNull(i8_ptr_ty), this.createLLVMInt(0)]
        let snprintf = get_intrinsic(this.module, "snprintf", [i8_ptr_ty, int_ty, i8_ptr_ty], int_ty, true)
        for let i = 0; i < vargs.length; i++ {
            args << vargs[i]
        }
        return LLVMBuildCall2(builder, snprintf.fnc_type, snprintf.call, args.buffer, args.length, "")
    }
    private codegen_realloc_call(this, builder: LLVMBuilderRef, args: LLVMValueRef[]): LLVMValueRef {
        let i8_ptr_ty = LLVMPointerType(LLVMInt8TypeInContext(this.program_ctx))
        let int_ty = LLVMIntTypeInContext(this.program_ctx, WORD_SIZE)
        let realloc = get_intrinsic(this.module, "realloc", [i8_ptr_ty, int_ty], i8_ptr_ty)
        return LLVMBuildCall2(builder, realloc.fnc_type, realloc.call, args.buffer, args.length, "")
    }
    private codegen_memcmp_call(this, builder: LLVMBuilderRef, args: LLVMValueRef[]): LLVMValueRef {
        let i8_ptr_ty = LLVMPointerType(LLVMInt8TypeInContext(this.program_ctx))
        let int_ty = LLVMIntTypeInContext(this.program_ctx, WORD_SIZE)
        let realloc = get_intrinsic(this.module, "memcmp", [i8_ptr_ty, i8_ptr_ty, int_ty], int_ty)
        return LLVMBuildCall2(builder, realloc.fnc_type, realloc.call, args.buffer, args.length, "")
    }
    private codegen_sprintf_call(this, builder: LLVMBuilderRef, vargs: LLVMValueRef[], size: LLVMValueRef, onheap: bool): LLVMValueRef {
        let i8_ty = LLVMInt8TypeInContext(this.program_ctx)
        let i8_ptr_ty = LLVMPointerType(i8_ty)
        let int_ty = LLVMIntTypeInContext(this.program_ctx, WORD_SIZE)
        let mem = onheap ? LLVMBuildArrayMalloc(builder, i8_ty, size, "") : LLVMBuildArrayAlloca(builder, i8_ty, size, "")
        let args: LLVMValueRef[] = [mem]
        for let i = 0; i < vargs.length; i++ {
            args << vargs[i]
        }
        let sprintf = get_intrinsic(this.module, "sprintf", [i8_ptr_ty, i8_ptr_ty], int_ty, true)
        LLVMBuildCall2(builder, sprintf.fnc_type, sprintf.call, args.buffer, args.length, "")
        return mem
    }
    private codegen_string(this, builder: LLVMBuilderRef, string_exp: StringExpression): LLVMValueRef {
        let str_value = string_exp.value
        let call_args: LLVMValueRef[] = []
        call_args << null
        for let i = 0; i < string_exp.template_args.length; i++ {
            let fmt = get_format_from_type(string_exp.template_args[i].value_type)
            call_args << this.codegen_expression(builder, string_exp.template_args[i])
            str_value = str_value.replace("\$", fmt)
        }
        let str_len = this.createLLVMInt(str_value.length)
        let str = this.module_string_scope.get(str_value)
        if str == null {
            str = LLVMBuildGlobalString(builder, str_value.to_cstring(), "")
            this.module_string_scope.set(str_value, str)
        }
        let is_string_object = is_object(string_exp.value_type)
        if call_args.length > 1 {
            call_args[0] = str
            str_len = this.codegen_snprintf_call(builder, call_args)
            str = this.codegen_sprintf_call(builder, call_args, str_len, is_string_object)
        }
        if is_string_object {
            let self = LLVMBuildMalloc(builder, this.codegen_type(string_exp.value_type), "")
            this.build_constructor_call(builder, string_exp.value_type as ObjectType, [self, str, str_len])
            str = self
        }
        return str
    }
    private store_array_elements(this, builder: LLVMBuilderRef, ptr: LLVMValueRef, array_exp: ArrayExpression): LLVMValueRef {
        let zero = this.createLLVMInt(0)
        let args: LLVMValueRef[2] = [zero, zero]
        let next_args = [this.createLLVMInt(1)]
        let array_type = this.codegen_type(array_exp.value_type)
        let elem_ty = LLVMPointerType(this.codegen_type((array_exp.value_type as ArrayType).element_type))
        let addr = LLVMBuildInBoundsGEP2(builder, array_type, ptr, &args[0], 2, "")
        for let i = 0; i < array_exp.value.length; ++i {
            LLVMBuildStore(builder, this.codegen_expression(builder, array_exp.value[i]), addr)
            addr = LLVMBuildInBoundsGEP2(builder, elem_ty, addr, &next_args[0], 1, "")
        }
        return addr
    }
    private codegen_array_exp(this, builder: LLVMBuilderRef, array_exp: ArrayExpression): LLVMValueRef {
        let elem_ty = this.codegen_type((array_exp.value_type as ArrayType).element_type)
        let elems: LLVMValueRef[] = []
        for let i = 0; i < array_exp.value.length; i++ {
            elems << this.codegen_expression(builder, array_exp.value[i])
        }
        return LLVMConstArray(elem_ty, elems.buffer, elems.length)
    }
    private get_var_expr_mem(this, builder: LLVMBuilderRef, var_exp: VarAccessExpression): LLVMValueRef {
        let ptr = this.get_var_from_varid(var_exp.value_id)
        if ptr == null {
            println("This should never happen! (get_expr_mem: var)")
        }
        return ptr
    }
    private get_index_expr_mem(this, builder: LLVMBuilderRef, index_exp: IndexExpression): LLVMValueRef {
        let index = this.codegen_expression(builder, index_exp.index)
        let ty = this.codegen_type(index_exp.expression.value_type)
        let ind_ptr: LLVMValueRef = null
        if index_exp.expression.value_type.kind == TypeKind.ARRAY {
            let indices: LLVMValueRef[2] = [this.createLLVMInt(0), index]
            ind_ptr = this.get_expr_mem(builder, index_exp.expression)
            return LLVMBuildInBoundsGEP2(builder, ty, ind_ptr, &indices[0], 2, "arrayidx")
        }
        let indices_1: LLVMValueRef[1] = [index]
        ind_ptr = this.codegen_expression(builder, index_exp.expression)
        return LLVMBuildInBoundsGEP2(builder, ty, ind_ptr, &indices_1[0], 1, "ptridx")
    }
    private get_member_expr_mem(this, builder: LLVMBuilderRef, member_expr: MemberExpression, ptr: LLVMValueRef): LLVMValueRef {
        let struct_class = this.get_class_from_typeid(member_expr.member_id.type_id)
        let is_function_type = member_expr.value_type.kind == TypeKind.FNC
        let prop_id_key = create_prop_key(member_expr.member_id)
        let class_type = LLVMPointerType(struct_class.llvm_type)
        let method = struct_class.non_vt_methods_map.get(prop_id_key)
        if method != null return method
        if ptr == null {
            ptr = this.codegen_expression(builder, member_expr.expression)
        }
        let indices: LLVMValueRef[] = [] 
        if !is_function_type {
            let vtoffset = struct_class.vtable_type == null ? 0 : 1
            indices << this.createLLVMInt(struct_class.fields_pos_map.get(prop_id_key) + vtoffset)
        } else {
            indices << this.createLLVMInt(0)
            ptr = LLVMBuildInBoundsGEP2(builder, class_type, ptr, indices.buffer, indices.length, "")
            ptr = LLVMBuildLoad2(builder, LLVMPointerType(struct_class.vtable_type), ptr, "")
            indices[0] = this.createLLVMInt(struct_class.vt_methods_pos_map.get(prop_id_key))
        }
        return LLVMBuildInBoundsGEP2(builder, class_type, ptr, indices.buffer, indices.length, "memberidx")
    }
    private get_expr_mem(this, builder: LLVMBuilderRef, exp: Expression): LLVMValueRef {
        if exp.expr_kind == ExpressionKind.ACCESS
            return this.get_var_expr_mem(builder, exp as VarAccessExpression)
        if exp.expr_kind == ExpressionKind.INDEX
            return this.get_index_expr_mem(builder, exp as IndexExpression)
        if exp.expr_kind == ExpressionKind.MEMBER
            return this.get_member_expr_mem(builder, exp as MemberExpression, null)
        return this.codegen_expression(builder, exp)
    }
    private store_expr_to_mem(this, builder: LLVMBuilderRef, ptr: LLVMValueRef, expr: Expression): LLVMValueRef {
        if expr.expr_kind == ExpressionKind.ARRAY and expr.is_constant == false
            return this.store_array_elements(builder, ptr, expr as ArrayExpression)
        let value = this.codegen_expression(builder, expr)
        LLVMBuildStore(builder, value, ptr)
        return value
    }
    private codegen_assignment(this, builder: LLVMBuilderRef, assign_exp: BinaryExpression): LLVMValueRef {
        let ptr = this.get_expr_mem(builder, assign_exp.lhs)
        return this.store_expr_to_mem(builder, ptr, assign_exp.rhs)
    }
    private codegen_pow_expr(this, builder: LLVMBuilderRef, ty: Type,  lhs: LLVMValueRef, rhs: LLVMValueRef): LLVMValueRef {
        let args: LLVMValueRef[2] = [lhs, rhs]
        let name = "llvm.pow.$(dump_type(ty, true))"
        let llvmty = this.codegen_type(ty)
        let cached_instrinsic = this.module_intrinsic_scope.get(name)
        let res = get_intrinsic(this.module, name, [llvmty, llvmty], llvmty)
        return LLVMBuildCall2(builder, res.fnc_type, res.call, &args[0], 2, "")
    }
    private codegen_bin_exp(this, builder: LLVMBuilderRef, bin_exp: BinaryExpression): LLVMValueRef {   
        let op = bin_exp.op
        if bin_exp.lhs.value_type != bin_exp.rhs.value_type {
            if op == BinaryOp.EEQ
                return this.createLLVMBool(false)
            else if op == BinaryOp.NEQ
                return this.createLLVMBool(true)
        }
        if op == BinaryOp.ASSIGN
            return this.codegen_assignment(builder, bin_exp)
        let lhs = this.codegen_expression(builder, bin_exp.lhs)
        let rhs = this.codegen_expression(builder, bin_exp.rhs)
        if is_null(bin_exp.rhs) and op == BinaryOp.EEQ or op == BinaryOp.NEQ {
            if LLVMIsConstant(lhs)
                return this.createLLVMBool(op == BinaryOp.EEQ ? LLVMIsNull(lhs) : LLVMIsNull(lhs))
            return op == BinaryOp.EEQ ? LLVMBuildIsNull(builder, lhs, "") : LLVMBuildIsNotNull(builder, lhs, "")
        }
        let lty = bin_exp.lhs.value_type
        let rty = bin_exp.rhs.value_type
        if is_numeric(rty) and op == BinaryOp.POW
            return this.codegen_pow_expr(builder, rty, lhs, rhs)
        if is_pointer(lty){
            let indices: LLVMValueRef[1] = [op == BinaryOp.ADD ? rhs: CodeGen.neg_int(builder, rhs)]
            let ptr_type = this.codegen_type(lty)
            return LLVMBuildInBoundsGEP2(builder, ptr_type, lhs, &indices[0], 1, "")
        }
        let pred = 0
        let is_const_expr = LLVMIsConstant(lhs) and LLVMIsConstant(rhs)
        if is_int(rty) {
            if op == BinaryOp.ADD {
                return is_const_expr ? LLVMConstAdd(lhs, rhs) : LLVMBuildAdd(builder, lhs, rhs, "")
            } else if op == BinaryOp.SUB {
                return is_const_expr ? LLVMConstSub(lhs, rhs) : LLVMBuildSub(builder, lhs, rhs, "")
            } else if op == BinaryOp.MUL {
                return is_const_expr ? LLVMConstMul(lhs, rhs) : LLVMBuildMul(builder, lhs, rhs, "")
            } else if op == BinaryOp.DIV {
                return LLVMBuildSDiv(builder, lhs, rhs, "")
            } else if op == BinaryOp.MOD {
                return LLVMBuildSRem(builder, lhs, rhs, "")
            } else if op >= BinaryOp.GT and op <= BinaryOp.LTE {
                pred = op - BinaryOp.GT + 38
                return is_const_expr ? LLVMConstICmp(pred, lhs, rhs) : LLVMBuildICmp(builder, pred, lhs, rhs, "")
            } else if op >= BinaryOp.EEQ and op <= BinaryOp.NEQ {
                pred = op - BinaryOp.EEQ + 32
                return is_const_expr ? LLVMConstICmp(pred, lhs, rhs) : LLVMBuildICmp(builder, pred, lhs, rhs, "")
            } else if op == BinaryOp.SL {
                return is_const_expr ? LLVMConstShl(lhs, rhs) : LLVMBuildShl(builder, lhs, rhs, "")
            } else if op == BinaryOp.SR {
                return is_const_expr ? LLVMConstAShr(lhs, rhs) : LLVMBuildAShr(builder, lhs, rhs, "")
            } else if op == BinaryOp.OR {
                return is_const_expr ? LLVMConstOr(lhs, rhs) : LLVMBuildOr(builder, lhs, rhs, "")
            } else if op == BinaryOp.AND {
                return is_const_expr ? LLVMConstAnd(lhs, rhs) : LLVMBuildAnd(builder, lhs, rhs, "")
            } else if op == BinaryOp.XOR {
                return is_const_expr ? LLVMConstXor(lhs, rhs) : LLVMBuildXor(builder, lhs, rhs, "")
            }
        } else if is_float(rty) {
            if op == BinaryOp.ADD { 
                return LLVMBuildFAdd(builder, lhs, rhs, "")
            } else if op == BinaryOp.SUB {
                return LLVMBuildFSub(builder, lhs, rhs, "")
            } else if op == BinaryOp.MUL {
                return LLVMBuildFMul(builder, lhs, rhs, "")
            } else if op == BinaryOp.DIV {
                return LLVMBuildFDiv(builder, lhs, rhs, "")
            } else if op == BinaryOp.MOD {
                return LLVMBuildFRem(builder, lhs, rhs, "")
            } else if op >= BinaryOp.GT and op <= BinaryOp.LTE {
                pred = op - BinaryOp.GT + LLVMRealPredicate.LLVMRealOGT
                return is_const_expr ? LLVMConstFCmp(pred, lhs, rhs) : LLVMBuildFCmp(builder, pred, lhs, rhs, "")
            } else if op >= BinaryOp.EEQ and op <= BinaryOp.NEQ {
                pred = op == BinaryOp.NEQ ? LLVMRealPredicate.LLVMRealONE : LLVMRealPredicate.LLVMRealOEQ
                return is_const_expr ? LLVMConstFCmp(pred, lhs, rhs) : LLVMBuildFCmp(builder, pred, lhs, rhs, "")
            }
        } else if is_bool(rty) {
            if op == BinaryOp.AND {
                return is_const_expr ? LLVMConstAnd(lhs, rhs) : LLVMBuildAnd(builder, lhs, rhs, "")
            } else if op == BinaryOp.OR {
                return is_const_expr ? LLVMConstOr(lhs, rhs) : LLVMBuildOr(builder, lhs, rhs, "")
            }
        }
        return lhs
    }
    private codegen_typecast_exp(this, builder: LLVMBuilderRef, type_exp: TypeCastExpression): LLVMValueRef {
        let exp = type_exp.expr
        let value_type = type_exp.value_type
        let val = this.codegen_expression(builder, exp)
        let ty = this.codegen_type(value_type)
        let is_const = LLVMIsConstant(val)
        if is_bool(value_type) {
            return is_const ? this.createLLVMBool(!LLVMIsNull(val)) : LLVMBuildIsNotNull(builder, val, "")
        }
        if is_int(exp.value_type) and is_float(value_type) {
            return is_const ? LLVMConstSIToFP(val, ty) : LLVMBuildSIToFP(builder, val, ty, "")
        } else if is_float(exp.value_type) and is_int(value_type) {
            return is_const ? LLVMConstFPToSI(val, ty) : LLVMBuildFPToSI(builder, val, ty, "")
        } else if is_int(exp.value_type) and is_int(value_type){
            return is_const ? LLVMConstIntCast(val, ty, true) : LLVMBuildIntCast2(builder, val, ty, true, "")
        } else if is_float(exp.value_type) and is_float(value_type){
            return is_const ? LLVMConstFPCast(val, ty) : LLVMBuildFPCast(builder, val, ty, "")
        }
        return is_const ? LLVMConstBitCast(val, ty) : LLVMBuildBitCast(builder, val, ty, "")
    }
    private codegen_unary_exp(this, builder: LLVMBuilderRef, unary_exp: UnaryExpression): LLVMValueRef {
        let op = unary_exp.op
        let exp = unary_exp.expression
        let val = this.codegen_expression(builder, exp)
        if op == UnaryOp.NEG {
            if is_int(exp.value_type){
                return CodeGen.neg_int(builder, val)
            } else if is_float(exp.value_type){
                return LLVMBuildFNeg(builder, val, "")
            }
        } 
        if op == UnaryOp.NOT {
            return LLVMIsConstant(val) ? LLVMConstNot(val) : LLVMBuildNot(builder, val, "")
        }
        if op >= UnaryOp.PREINCR and op <= UnaryOp.POSTDECR or op == UnaryOp.ADDROF {
            let ptr = this.get_expr_mem(builder, exp)
            if op == UnaryOp.ADDROF {
                return ptr
            }
            let alloc_ty = this.codegen_type(exp.value_type)
            let incr_value = op == UnaryOp.PREINCR or op == UnaryOp.POSTINCR ? 1 : -1
            let new_value: LLVMValueRef = null
            if is_pointer(exp.value_type) {
                let indices: LLVMValueRef[1] = [this.createLLVMInt(incr_value)]
                new_value = LLVMBuildInBoundsGEP2(builder, alloc_ty, val, &indices[0], 1, "incdec.ptr")
            } else if is_numeric(exp.value_type){
                let incr_amt = is_int(exp.value_type) ? LLVMConstInt(alloc_ty, incr_value, false) : LLVMConstReal(alloc_ty, incr_value * 1.0)
                new_value = LLVMBuildAdd(builder, val, incr_amt, "")
            }
            LLVMBuildStore(builder, new_value, ptr)
            return op >= UnaryOp.PREDECR ? val : new_value 
        }
        return val
    }
    private codegen_var_access_exp(this, builder: LLVMBuilderRef, var_exp: VarAccessExpression): LLVMValueRef {
        let val = this.get_var_from_varid(var_exp.value_id)
        let ty = this.codegen_type(var_exp.value_type)
        if val == null {
            println("This should never happen; (codegen_var_access_exp)")
        }
        if var_exp.value_id.kind == VarIdKind.FNC
            return val
        if this.in_static_ctx
            return LLVMGetInitializer(val)
        return LLVMBuildLoad2(builder, ty, val, "")
    }
    private codegen_null(this, null_exp: NullExpression): LLVMValueRef{
        return LLVMConstNull(this.codegen_type(null_exp.value_type))
    }
    private codegen_ternary_exp(this, builder: LLVMBuilderRef, ternary_exp: TernaryExpression): LLVMValueRef {
        let true_block = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "true_block")
        let false_block = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "false_block")
        let end = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "end")
        let cond = this.codegen_expression(builder, ternary_exp.cond)
        LLVMBuildCondBr(builder, cond, true_block, false_block)
        LLVMPositionBuilderAtEnd(builder, true_block)
        let is_true = this.codegen_expression(builder, ternary_exp.is_true)
        LLVMBuildBr(builder, end)
        LLVMPositionBuilderAtEnd(builder, false_block)
        let is_false = this.codegen_expression(builder, ternary_exp.is_false)
        LLVMBuildBr(builder, end)
        LLVMPositionBuilderAtEnd(builder, end)
        let phi_node = LLVMBuildPhi(builder, this.codegen_type(ternary_exp.is_true.value_type), "ternary")
        let incomming_vals = [is_true, is_false]
        let blocks: LLVMBasicBlockRef[2] = [true_block, false_block]
        LLVMAddIncoming(phi_node, &incomming_vals[0], &blocks[0], 2)
        return phi_node
    }
    private codegen_call_exp(this, builder: LLVMBuilderRef, call_exp: CallExpression): LLVMValueRef {
        let args: LLVMValueRef[] = []
        let func: LLVMValueRef = null
        let func_ty = this.codegen_type(call_exp.callee.value_type, false)
        if call_exp.callee.expr_kind == ExpressionKind.MEMBER {
            let member_exp = call_exp.callee as MemberExpression
            if member_exp.expression.value_type.kind == TypeKind.OBJECT  { 
                let struct_class = this.get_class_from_typeid(member_exp.member_id.type_id)
                let self = this.codegen_expression(builder, member_exp.expression)
                func = this.codegen_member_exp(builder, member_exp, self)
                args << self
            }
        }
        if args.length == 0 {
            func = this.codegen_expression(builder, call_exp.callee)
        }
        for let i = 0; i < call_exp.args.length; i++ {
            args << this.codegen_expression(builder, call_exp.args[i])
        }
        return LLVMBuildCall2(builder, func_ty, func, args.buffer, args.length, "")
    }
    private codegen_index_exp(this, builder: LLVMBuilderRef, index_exp: IndexExpression): LLVMValueRef {
        let ptr = this.get_expr_mem(builder, index_exp)
        return LLVMBuildLoad2(builder, this.codegen_type(index_exp.value_type), ptr, "")
    }
    private codegen_new_exp(this, builder: LLVMBuilderRef, new_expr: NewExpression): LLVMValueRef {
        let ptr: LLVMValueRef = null
        let alloc_ty = new_expr.memory_type
        let is_ptr_ty = is_pointer(alloc_ty)
        let llvm_type: LLVMTypeRef = null
        let args: LLVMValueRef[] = []
        if is_ptr_ty {
            llvm_type = this.codegen_type((alloc_ty as PointerType).pointee_type, false)
            this.evaluate_expression_list(builder, args, new_expr.args)
            if new_expr.onheap {
                ptr = LLVMBuildArrayMalloc(builder, llvm_type, args[0], "")
            } else {
                ptr = LLVMBuildArrayAlloca(builder, llvm_type, args[0], "")
            }
        } else if is_object(alloc_ty) {
            llvm_type = this.codegen_type(alloc_ty, false)
            if new_expr.onheap {
                ptr = LLVMBuildMalloc(builder, llvm_type, "")
            } else {
                ptr = LLVMBuildAlloca(builder, llvm_type, "")
            }
            args << ptr
            this.evaluate_expression_list(builder, args, new_expr.args)
            this.build_constructor_call(builder, alloc_ty as ObjectType, args)
        }
        return ptr
    }
    private codegen_member_exp(this, builder: LLVMBuilderRef, member_exp: MemberExpression, self: LLVMValueRef): LLVMValueRef {
        let type_kind = member_exp.expression.value_type.kind
        let var_id = (member_exp.expression as VarAccessExpression).value_id
        if type_kind == TypeKind.OBJECT {
            let ptr = this.get_member_expr_mem(builder, member_exp, self)
            if get_class_prop_visibility(this.program, member_exp.member_id) == ACCESS_ATTR.PRIVATE and member_exp.value_type.kind == TypeKind.FNC
                return ptr
            return LLVMBuildLoad2(builder, this.codegen_type(member_exp.value_type), ptr, "")
        }
        let prop_id_key = create_prop_key(member_exp.member_id)
        if var_id.kind == VarIdKind.CLASS {
            let struct_class = this.get_class_from_varid(var_id)
            if struct_class == null {
                println("this should not happen; (codegen_member_exp); class")
            }
            let prop = struct_class.non_vt_methods_map.get(prop_id_key)
            if prop == null {
                println("This should never happen; (codegen_member_expr; class prop)")
            }
            if member_exp.value_type.kind == TypeKind.FNC
                return prop
            return LLVMBuildLoad2(builder, this.codegen_type(member_exp.value_type), prop, "")
        }
        if var_id.kind == VarIdKind.ENUM {
           let enum_type = this.get_enum_from_varid(var_id) 
             if enum_type == null {
                println("this should not happen; (codegen_member_exp); enum")
            }
            return enum_type.field_map.get(prop_id_key)
        }
        return null
    }
    private codegen_intrinsic_exp(this, builder: LLVMBuilderRef, intrinsic_call_exp: IntrinsicCall): LLVMValueRef {
        let intrinsic_type = intrinsic_call_exp.intrinsic
        let args: LLVMValueRef[] = []
        this.evaluate_expression_list(builder, args, intrinsic_call_exp.args)
        let arg0_pointee_size = LLVMSizeOf(this.codegen_type((intrinsic_call_exp.args[0].value_type as PointerType).pointee_type))
        
        if intrinsic_type == Intrinsics.MEMRESIZE {
            args[1] = LLVMBuildMul(builder, args[1], arg0_pointee_size, "")
            return this.codegen_realloc_call(builder, args)
        }
        args[2] = LLVMBuildMul(builder, args[2], arg0_pointee_size, "")
        if intrinsic_type == Intrinsics.MEMCMP {
            return this.codegen_memcmp_call(builder, args)
        }

        let arg0_align = LLVMGetAlignment(args[0])
        if intrinsic_type == Intrinsics.MEMSET
            return LLVMBuildMemSet(builder, args[0], LLVMBuildIntCast2(builder, args[1], LLVMInt8TypeInContext(this.program_ctx), false, ""), args[2], arg0_align)

        let arg1_align = LLVMGetAlignment(args[1])
        if intrinsic_type == Intrinsics.MEMCPY 
            return LLVMBuildMemCpy(builder, args[0], arg0_align, args[1], arg1_align, args[2])
        if intrinsic_type == Intrinsics.MEMMOVE 
            return LLVMBuildMemMove(builder, args[0], arg0_align, args[1], arg1_align, args[2])

        return null
    }
    private codegen_expression(this, builder: LLVMBuilderRef, expression: Expression): LLVMValueRef {
        if expression.expr_kind == ExpressionKind.BOOL
            return this.codegen_bool(expression as BooleanExpression)
        if expression.expr_kind == ExpressionKind.INT
            return this.codegen_int(expression as IntExpression)
        if expression.expr_kind == ExpressionKind.FLOAT
            return this.codegen_float(expression as FloatExpression)
        if expression.expr_kind == ExpressionKind.NULL
            return this.codegen_null(expression as NullExpression)
        if expression.expr_kind == ExpressionKind.STRING
            return this.codegen_string(builder, expression as StringExpression)
        if expression.expr_kind == ExpressionKind.ACCESS 
              return this.codegen_var_access_exp(builder, expression as VarAccessExpression)
        if expression.expr_kind == ExpressionKind.BIN 
            return this.codegen_bin_exp(builder, expression as BinaryExpression)
        if expression.expr_kind == ExpressionKind.UNARY
             return this.codegen_unary_exp(builder, expression as UnaryExpression)
        if expression.expr_kind == ExpressionKind.CALL
            return this.codegen_call_exp(builder, expression as CallExpression)
        if expression.expr_kind == ExpressionKind.INDEX
            return this.codegen_index_exp(builder, expression as IndexExpression)
        if expression.expr_kind == ExpressionKind.MEMBER
            return this.codegen_member_exp(builder, expression as MemberExpression, null)
        if expression.expr_kind == ExpressionKind.NEW
            return this.codegen_new_exp(builder, expression as NewExpression)
        if expression.expr_kind == ExpressionKind.TERNARY
            return this.codegen_ternary_exp(builder, expression as TernaryExpression)
        if expression.expr_kind == ExpressionKind.CAST
            return this.codegen_typecast_exp(builder, expression as TypeCastExpression)
        if expression.expr_kind == ExpressionKind.ARRAY
            return this.codegen_array_exp(builder, expression as ArrayExpression)
        if expression.expr_kind == ExpressionKind.INTRINSIC
            return this.codegen_intrinsic_exp(builder, expression as IntrinsicCall)
        return LLVMConstInt(LLVMInt32Type(), 0, false)
    }
    private codegen_if_stmt(this, builder: LLVMBuilderRef, if_stmt: IfStatement){
        let condition = this.codegen_expression(builder, if_stmt.condition)
        let if_bb = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "if.entry")
        let else_bb = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "else")
        let merge_bb = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "ifend")
        LLVMBuildCondBr(builder, condition, if_bb, else_bb)
        LLVMPositionBuilderAtEnd(builder, if_bb)
        this.codegen_block(builder, if_stmt.block)
        let if_terminated = is_terminated(if_stmt.block)
        if !if_terminated
            LLVMBuildBr(builder, merge_bb)

        LLVMPositionBuilderAtEnd(builder, else_bb)
        let else_terminated = false
        if if_stmt.else_block != null {
            this.codegen_block(builder, if_stmt.else_block)
            else_terminated = is_terminated(if_stmt.else_block)
        }
        if !else_terminated
            LLVMBuildBr(builder, merge_bb)
        else if if_terminated
            LLVMDeleteBasicBlock(merge_bb)
    
        LLVMPositionBuilderAtEnd(builder, merge_bb)
    }
    private codegen_for_stmt(this, builder: LLVMBuilderRef, for_stmt: ForStatement){
        let for_entry_block = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "for.entry")
        LLVMBuildBr(builder, for_entry_block)
        LLVMPositionBuilderAtEnd(builder, for_entry_block)
        if for_stmt.initialization != null {
            this.codegen_statement(builder, for_stmt.initialization)
        }
        let for_cond_block = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "for.cond")
        let for_body_block = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "for.body")
        let for_incr_block = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "for.incr")
        let for_end_block = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "for.end")
        let prev_break_bb = this.break_bb
        let prev_continue_bb = this.continue_bb
        this.break_bb = for_end_block
        this.continue_bb = for_incr_block
        LLVMBuildBr(builder, for_cond_block)
        LLVMPositionBuilderAtEnd(builder, for_cond_block)
        let condition = this.createLLVMBool(true)
        if for_stmt.condition != null {
            condition = this.codegen_expression(builder, for_stmt.condition)
        }
        LLVMBuildCondBr(builder, condition, for_body_block, for_end_block)
        LLVMPositionBuilderAtEnd(builder, for_body_block)
        this.codegen_block(builder, for_stmt.block)
        if !is_terminated(for_stmt.block)
            LLVMBuildBr(builder, for_incr_block)
        LLVMPositionBuilderAtEnd(builder, for_incr_block)
        if for_stmt.incr_decr != null
            this.codegen_expression(builder, for_stmt.incr_decr)
        LLVMBuildBr(builder, for_cond_block)
        this.break_bb = prev_break_bb
        this.continue_bb = prev_continue_bb
        LLVMPositionBuilderAtEnd(builder, for_end_block)
    }
    private codegen_while_stmt(this, builder: LLVMBuilderRef, while_stmt: WhileStatement){
        let while_bb = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "while.entry")
        let while_end_bb = LLVMAppendBasicBlockInContext(this.program_ctx, this.function, "while.end")
        let prev_break_bb = this.break_bb
        let prev_continue_bb = this.continue_bb
        this.break_bb = while_end_bb
        this.continue_bb = while_bb
        let condition = this.codegen_expression(builder, while_stmt.condition)
        LLVMBuildCondBr(builder, condition, while_bb, while_end_bb)
        LLVMPositionBuilderAtEnd(builder, while_bb)
        this.codegen_block(builder, while_stmt.block)
        if !is_terminated(while_stmt.block) {
            condition = this.codegen_expression(builder, while_stmt.condition)
            LLVMBuildCondBr(builder, condition, while_bb, while_end_bb)
        }
        LLVMPositionBuilderAtEnd(builder, while_end_bb)
        this.break_bb = prev_break_bb
        this.continue_bb = prev_continue_bb
    }
    private evaluate_expression_list(this, builder: LLVMBuilderRef, evaluated_list: LLVMValueRef[], list: Expression[]){
        for let i = 0; i < list.length; i++ {
            evaluated_list << this.codegen_expression(builder, list[i])
        }
    }
    private build_constructor_call(this, builder: LLVMBuilderRef, obj_type: ObjectType, params: LLVMValueRef[]){
        let checked_class = get_class(this.program, obj_type.class_id)
        let constructor = this.get_class_from_typeid(obj_type.class_id).constructor
        let constructor_id = checked_class.constructor.id
        if constructor != null {
            let construct_type = this.codegen_type(checked_class.methods[constructor_id].method_type, false)
            LLVMBuildCall2(builder, construct_type, constructor, params.buffer, params.length, "")
        }
    }
    private codegen_var_declaration(this, builder: LLVMBuilderRef, var_decl: VarDeclaration){
        let var_id = var_decl.var_id
        let var = get_var(this.program, var_id)
        let expression = var.value
        let expression_val_type = var.value_type
        let ty = this.codegen_type(expression_val_type)
        let name = var_decl.name.to_cstring()
        let ptr: LLVMValueRef = null
        if var_decl.is_static {
            let value = this.codegen_expression(builder, expression)
            ptr = LLVMAddGlobal(this.module, ty, name)
            LLVMSetInitializer(ptr, value)
        } else {
            ptr = LLVMBuildAlloca(builder, ty, name)
            if expression != null {
                this.store_expr_to_mem(builder, ptr, expression)
            }
        }
        this.add_var(var_id, ptr)
    }
    private codegen_const_declaration(this, builder: LLVMBuilderRef, const_decl: ConstDeclaration){
        let const_id = const_decl.const_id
        let expression = get_const(this.program, const_id).value
        let ty = this.codegen_type(expression.value_type)
        let name = const_decl.name.to_cstring()
        let ptr: LLVMValueRef = null
        if const_decl.is_static {
            let value = this.codegen_expression(builder, expression)
            ptr = LLVMAddGlobal(this.module, ty, name)
            LLVMSetInitializer(ptr, value)
            LLVMSetGlobalConstant(ptr, true)
        } else {
            ptr = LLVMBuildAlloca(builder, ty, name)
            this.store_expr_to_mem(builder, ptr, expression)
        }
        this.add_var(const_id, ptr)
    }
    private codegen_statement(this, builder: LLVMBuilderRef, statement: Statement){
        if statement.kind == StatementKind.IF
            this.codegen_if_stmt(builder, statement as IfStatement)
        if statement.kind == StatementKind.FOR
            this.codegen_for_stmt(builder, statement as ForStatement)
        if statement.kind == StatementKind.WHILE
            this.codegen_while_stmt(builder, statement as WhileStatement)
        if statement.kind == StatementKind.CONTINUE
            LLVMBuildBr(builder, this.continue_bb)
        if statement.kind == StatementKind.BREAK
            LLVMBuildBr(builder, this.break_bb)
        if statement.kind == StatementKind.VAR
            this.codegen_var_declaration(builder, statement as VarDeclaration)
        if statement.kind == StatementKind.CONST
            this.codegen_const_declaration(builder, statement as ConstDeclaration)
        if statement.kind == StatementKind.RETURN
            this.codegen_return_stmt(builder, statement as ReturnStatement)
        if statement.kind == StatementKind.EXPRESSION
            this.codegen_expression(builder, statement as Expression)
    }
    private codegen_block(this, builder: LLVMBuilderRef, block: Block){
        for let i = 0; i < block.statements.length; ++i {
            this.codegen_statement(builder, block.statements[i])
        }
    }
    private codegen_function(this, func: Function){
        let llvm_fnc = this.get_var_from_varid(func.id)
        if func.is_external { 
            LLVMSetLinkage(llvm_fnc, LLVMLinkage.LLVMExternalLinkage)
            return
        }
        if llvm_fnc == null {
            println("This should never happen; (codegen_function)")
        }
        let entry_block: LLVMBasicBlockRef = LLVMAppendBasicBlockInContext(this.program_ctx, llvm_fnc, "")
        let func_builder: LLVMBuilderRef = LLVMCreateBuilderInContext(this.program_ctx)
        LLVMPositionBuilderAtEnd(func_builder, entry_block)
        for let i = 0; i < func.args.length; i++ {
            let arg = func.args[i]
            let param = LLVMGetParam(llvm_fnc, i)
            let alloc = LLVMBuildAlloca(func_builder, this.codegen_type(arg.value_type), arg.name.to_cstring())
            LLVMBuildStore(func_builder, param, alloc)
            this.add_var(arg.id, alloc)
        }
        this.function = llvm_fnc
        this.codegen_block(func_builder, func.block)
        LLVMDisposeBuilder(func_builder)
    }
    private codegen_class(this, checked_class: Class){
        for let i = 0; i < checked_class.methods.length; i++ {
            let struct_class = this.get_class_from_typeid(checked_class.id)
            let method = checked_class.methods[i]
            if method.is_abstract continue
            let prop_id_key = create_prop_key(method.id)
            let llvm_fnc = struct_class.non_vt_methods_map.get(prop_id_key)
            let is_constructor = method.name == "constructor"
            llvm_fnc = LLVMGetNamedFunction(this.module, "$(checked_class.name)_$(method.name)".to_cstring())
            let entry_block = LLVMAppendBasicBlockInContext(this.program_ctx, llvm_fnc, "")
            let func_builder = LLVMCreateBuilderInContext(this.program_ctx)
            LLVMPositionBuilderAtEnd(func_builder, entry_block)
            let offset = 0
            if !method.is_static {
                let object_type = LLVMPointerType(struct_class.llvm_type)
                let this_param = LLVMGetParam(llvm_fnc, 0)
                let this_alloc = LLVMBuildAlloca(func_builder, object_type, "this")
                let this_id = get_scope(this.program, method.scope).vars.get("this")
                LLVMBuildStore(func_builder, this_param, this_alloc)
                if is_constructor and struct_class.vtable != null {
                    let index: LLVMValueRef[1] = [this.createLLVMInt(0)]
                    let vt_ptr =  LLVMBuildInBoundsGEP2(func_builder, object_type, this_param, &index[0], 1, "")
                    LLVMBuildStore(func_builder, struct_class.vtable, vt_ptr)
                }
                this.add_var(this_id, this_alloc)
                offset = 1
            }
            for let j = 0; j < method.args.length; j++ {
                let arg = method.args[j]
                let param = LLVMGetParam(llvm_fnc, j + offset)
                let alloc = LLVMBuildAlloca(func_builder, this.codegen_type(arg.value_type), arg.name.to_cstring())
                LLVMBuildStore(func_builder, param, alloc)
                this.add_var(arg.id, alloc)
            }
            this.function = llvm_fnc
            this.codegen_block(func_builder, method.block)
            LLVMDisposeBuilder(func_builder)
        }
    }
    private declare_function(this, func: Function) {
        let fn_name = func.name.to_cstring()
        let llvm_fnc = LLVMGetNamedFunction(this.module, fn_name)
        if llvm_fnc == null {
            llvm_fnc = LLVMAddFunction(this.module, fn_name, this.codegen_type(func.fnc_type, false))
        }
        this.add_var(func.id, llvm_fnc)
    }
    private declare_method(this, method_name: string, method_type: LLVMTypeRef): LLVMValueRef {
        return LLVMAddFunction(this.module, method_name.to_cstring(), method_type)
    }
    private declare_static_props(this, struct_class: CGClassType, checked_class: Class, initializer_fields = true){
        let buckets = checked_class.static_prop_map.get_buckets()
        for let i = 0; i < buckets.length; i++ {
            let prop_id = buckets[i].value
            let prop_id_key = create_prop_key(prop_id)
            let prop_type = get_class_prop_type(this.program, prop_id)
            let static_prop_name = buckets[i].key
            let static_prop_type = this.codegen_type(prop_type, false)
            let static_prop_name_concat = "$(checked_class.name)_$static_prop_name"
            let static_prop_value: LLVMValueRef = null
            if prop_id.kind == PropIdKind.METHOD {
                static_prop_value = this.declare_method(static_prop_name_concat, static_prop_type)
            } else {
                static_prop_value = LLVMAddGlobal(this.module, static_prop_type, static_prop_name_concat.to_cstring())
                if (!initializer_fields) continue
                let global_prop_initializer = this.codegen_expression(null, checked_class.fields[prop_id.id].initializer)
                LLVMSetInitializer(static_prop_value, global_prop_initializer)
            }
            struct_class.non_vt_methods_map.set(prop_id_key, static_prop_value)
        }
    }
    private declare_class_props(this, struct_class: CGClassType, checked_class: Class, prop_types: LLVMTypeRef[], initialize_vtable = true){
        let buckets = checked_class.prop_map.get_buckets()
        let vtable_values: LLVMValueRef[] = []
        let vtable_types: LLVMTypeRef[] = []
        let field_types: LLVMTypeRef[] = []
        for let i = 0; i < buckets.length; i++ {
            let prop_id = buckets[i].value
            let prop_id_key = create_prop_key(prop_id)
            let prop_type = get_class_prop_type(this.program, prop_id)
            let prop_name = buckets[i].key
            let prop_index = get_vtable_index(this.program, prop_id)
            if prop_id.kind == PropIdKind.FIELD {
                let field_type = this.codegen_type(prop_type)
                struct_class.fields_pos_map.set(prop_id_key, prop_index)
                resize_type_array(field_types, prop_index)
                field_types[prop_index] = field_type
            } else {
                let method_type = prop_type as FunctionType
                let llvm_method_val: LLVMValueRef = null
                let llvm_method_type: LLVMTypeRef = null
                if prop_id.type_id == checked_class.id {
                    if !method_type.has_this {
                        let arg_types: Type[] = [new ObjectType(checked_class.id) as Type]
                        for let j = 0; j < method_type.arg_types.length; j++ {
                            arg_types << method_type.arg_types[j]
                        }
                        method_type.arg_types = arg_types
                    }
                    method_type.has_this = true
                    llvm_method_type = this.codegen_type(method_type, false)
                    if !checked_class.methods[prop_id.id].is_abstract {
                        llvm_method_val = this.declare_method("$(checked_class.name)_$prop_name", llvm_method_type)
                    }
                    if (get_class_prop_visibility(this.program, prop_id) == ACCESS_ATTR.PRIVATE){ 
                        struct_class.non_vt_methods_map.set(prop_id_key, llvm_method_val)
                        continue
                    }
                } else {
                    llvm_method_type = this.codegen_type(method_type, false)
                    let owner_classname = get_class(this.program, prop_id.type_id as ClassId).name
                    llvm_method_val = LLVMGetNamedFunction(this.module, "$(owner_classname)_$prop_name".to_cstring())
                }
                struct_class.vt_methods_pos_map.set(prop_id_key, prop_index)
                resize_type_array(vtable_types, prop_index)
                if !checked_class.methods[prop_id.id].is_abstract {
                    resize_value_array(vtable_values, prop_index)
                    vtable_values[prop_index] = llvm_method_val
                }
                vtable_types[prop_index] = LLVMPointerType(llvm_method_type)
            }
        }
        if vtable_types.length > 0 {
            let vtable_struct_ty = LLVMStructTypeInContext(this.program_ctx, vtable_types.buffer, vtable_types.length, true)
            if !checked_class.is_abstract and initialize_vtable {
                struct_class.vtable = LLVMAddGlobal(this.module, vtable_struct_ty, "VTable$(checked_class.name)".to_cstring())
                let vtable_intializer = LLVMConstStructInContext(this.program_ctx, vtable_values.buffer, vtable_values.length, true)
                LLVMSetInitializer(struct_class.vtable, vtable_intializer)
            }
            struct_class.vtable_type = vtable_struct_ty
            prop_types << LLVMPointerType(vtable_struct_ty)
        }
        for i = 0; i < field_types.length; i++ {
            prop_types << field_types[i]
        }
    }
    private declare_class(this, checked_class: Class){
        let struct_class: CGClassType
        struct_class.llvm_type = LLVMStructCreateNamed(this.program_ctx, checked_class.name.to_cstring())
        struct_class.vt_methods_pos_map = new Map<string, int>()
        struct_class.fields_pos_map = new Map<string, int>()
        struct_class.non_vt_methods_map = new Map<string, LLVMValueRef>()
        struct_class.vtable = null
        struct_class.vtable_type = null
        this.add_class(checked_class.id, struct_class)
    }
    private declare_class_struct(this, checked_class: Class, initialize_all = true) {
        let prop_types: LLVMTypeRef[] = []
        let struct_class = this.get_class_from_typeid(checked_class.id)
        // Taking care of static methods.
        this.declare_static_props(struct_class, checked_class, initialize_all)
        // creating a vtable
        this.declare_class_props(struct_class, checked_class, prop_types, initialize_all)
        LLVMStructSetBody(struct_class.llvm_type, prop_types.buffer, prop_types.length, true)
        // Now constructor
        if checked_class.constructor != null {
            let constructor_type = get_class_prop_type(this.program, checked_class.constructor) as FunctionType
            if !constructor_type.has_this {
                let arg_types: Type[] = [new ObjectType(checked_class.id) as Type]
                for let i = 0; i < constructor_type.arg_types.length; i++ {
                    arg_types << constructor_type.arg_types[i]
                }
                constructor_type.arg_types = arg_types
            }
            let constructor_llvm_method_type = this.codegen_type(constructor_type, false)
            struct_class.constructor = this.declare_method("$(checked_class.name)_constructor", constructor_llvm_method_type)
            constructor_type.has_this = true
        } else {
            struct_class.constructor = null
        }
    }
    private declare_enum(this, checked_enum: Enum){
        let enum_type: CGEnumType
        enum_type.field_map = new Map<string, LLVMValueRef>()
        if checked_enum.fields.length > 0 {
            enum_type.llvm_type = this.codegen_type(checked_enum.fields[0].initializer.value_type)
        } else {
            enum_type.llvm_type = LLVMIntTypeInContext(this.program_ctx, WORD_SIZE)
        }
        for let i = 0; i < checked_enum.fields.length; i++ {
            let enum_field = checked_enum.fields[i]
            let prop_id = enum_field.id
            enum_type.field_map.set(create_prop_key(prop_id), this.codegen_expression(null, enum_field.initializer))
        }
        this.add_enum(checked_enum.id, enum_type)
    }
}