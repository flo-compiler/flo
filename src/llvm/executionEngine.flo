import "types"
fnc LLVMLinkInMCJIT()
fnc LLVMLinkInInterpreter()
/*===-- Operations on generic values --------------------------------------===*/

fnc LLVMCreateGenericValueOfInt(Ty: LLVMTypeRef, N: i64, IsSigned: LLVMBool): LLVMGenericValueRef

fnc LLVMCreateGenericValueOfPointer(P: u8*): LLVMGenericValueRef

fnc LLVMCreateGenericValueOfFloat(Ty: LLVMTypeRef, N: f64): LLVMGenericValueRef

fnc LLVMGenericValueIntWidth(GenValRef: LLVMGenericValueRef): int

fnc LLVMGenericValueToInt(GenVal: LLVMGenericValueRef, IsSigned: LLVMBool): i64 

fnc LLVMGenericValueToPointer(GenVal: LLVMGenericValueRef): u8*

fnc LLVMGenericValueToFloat(TyRef: LLVMTypeRef, GenVal: LLVMGenericValueRef): f64 

fnc LLVMDisposeGenericValue(GenVal: LLVMGenericValueRef)


fnc LLVMRemoveModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef, OutMod: LLVMModuleRef*, OutError: u8**): LLVMBool
/*===-- Operations on execution engines -----------------------------------===*/
fnc LLVMCreateExecutionEngineForModule(OutEE: LLVMExecutionEngineRef*, M: LLVMModuleRef, OutError: u8**): LLVMBool
fnc LLVMCreateInterpreterForModule(OutInterp: LLVMExecutionEngineRef*, M: LLVMModuleRef, OutError: u8**): LLVMBool 
fnc LLVMCreateJITCompilerForModule(OutJIT: LLVMExecutionEngineRef*, M: LLVMModuleRef, OptLevel: int, OutError: u8**): LLVMBool 

fnc LLVMDisposeExecutionEngine(EE: LLVMExecutionEngineRef)
fnc LLVMRunFunctionAsMain(EE: LLVMExecutionEngineRef, F: LLVMValueRef, ArgC: int, ArgV: u8*, EnvP: u8*): int

fnc LLVMRunFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef, NumArgs: int, Args: LLVMGenericValueRef*): LLVMGenericValueRef

fnc LLVMGetFunctionAddress(EE: LLVMExecutionEngineRef, Name: u8*): u8*