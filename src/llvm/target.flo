
fnc  LLVMInitializeX86TargetInfo()
fnc LLVMInitializeX86Target()
fnc LLVMInitializeX86TargetMC()

fnc LLVMInitializeX86AsmPrinter()
fnc LLVMInitializeX86AsmParser()

fnc LLVMInitializeNativeTarget(): LLVMBool {
  LLVMInitializeX86TargetInfo()
  LLVMInitializeX86Target()
  LLVMInitializeX86TargetMC()
  return true
}
fnc LLVMInitializeNativeAsmParser(): LLVMBool {
  LLVMInitializeX86AsmParser()
  return true
}
fnc LLVMInitializeNativeAsmPrinter(): LLVMBool {
  LLVMInitializeX86AsmPrinter()
  return true
}

/*===-- Target ------------------------------------------------------------===*/
/** Returns the first llvm::Target in the registered targets list. */
fnc LLVMGetFirstTarget(): LLVMTargetRef
/** Finds the target corresponding to the given name and stores it in \p T.
  Returns 0 on success. */
fnc LLVMGetTargetFromName(Name: i8*): LLVMTargetRef
/** Emits an asm or object file for the given module to the filename. This
  wraps several c++ only classes (among them a file stream). Returns any
  error in ErrorMessage. Use LLVMDisposeMessage to dispose the message. */
  /** Finds the target corresponding to the given triple and stores it in \p T.
  Returns 0 on success. Optionally returns any error in ErrorMessage.
  Use LLVMDisposeMessage to dispose the message. */
fnc LLVMGetTargetFromTriple(Triple: i8*, T: LLVMTargetRef *, ErrorMessage: i8**): LLVMBool
/** Create a DataLayout based on the targetMachine. */
fnc LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef): i8*
fnc LLVMGetHostCPUFeatures(): i8*
fnc LLVMCreateTargetMachine(T: LLVMTargetRef, Triple: i8*, CPU: i8*, Features: i8*, Level: LLVMCodeGenOptLevel, Reloc: LLVMRelocMode, CodeModel: LLVMCodeModel): LLVMTargetMachineRef
/** Dispose the LLVMTargetMachineRef instance generated by
  LLVMCreateTargetMachine. */
fnc LLVMDisposeTargetMachine(T: LLVMTargetMachineRef)
fnc LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef): i8*
fnc LLVMTargetMachineEmitToFile(T: LLVMTargetMachineRef, M: LLVMModuleRef, Filename: i8*, codegen: LLVMCodeGenFileType, ErrorMessage: i8**): LLVMBool
/** Get a triple for the host machine as a string. The result needs to be
  disposed with LLVMDisposeMessage. */
fnc LLVMGetDefaultTargetTriple(): i8*