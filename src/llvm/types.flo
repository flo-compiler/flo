type LLVMBool = bool
class LLVMMemoryBufferRef {}

/**
 * The top-level container for all LLVM global data. See the LLVMContext class.
 */
class  LLVMContextRef {}

/**
 * The top-level container for all other LLVM Intermediate Representation (IR)
 * objects.
 *
 * @see llvm::Module
 */
class LLVMModuleRef {}

/**
 * Each value in the LLVM IR has a type, an LLVMTypeRef.
 *
 * @see llvm::Type
 */
class LLVMTypeRef {}

/**
 * Represents an individual value in LLVM IR.
 *
 * This models llvm::Value.
 */
class LLVMValueRef {}

/**
 * Represents a basic block of instructions in LLVM IR.
 *
 * This models llvm::BasicBlock.
 */
class LLVMBasicBlockRef {}

/**
 * Represents an LLVM Metadata.
 *
 * This models llvm::Metadata.
 */
class LLVMMetadataRef {}

/**
 * Represents an LLVM Named Metadata Node.
 *
 * This models llvm::NamedMDNode.
 */
class LLVMNamedMDNodeRef {}

/**
 * Represents an entry in a Global Object's metadata attachments.
 *
 * This models std::pair<unsigned, MDNode *>
 */
class LLVMValueMetadataEntry {}
/**
 * Represents an LLVM basic block builder.
 *
 * This models llvm::IRBuilder.
 */
class LLVMBuilderRef {}

/**
 * Represents an LLVM debug info builder.
 *
 * This models llvm::DIBuilder.
 */
class LLVMDIBuilderRef {}

/**
 * Interface used to provide a module to JIT or interpreter.
 * This is now just a synonym for llvm::Module, but we have to keep using the
 * different type to keep binary compatibility.
 */
class LLVMModuleProviderRef {}

/** @see llvm::PassManagerBase */
class LLVMPassManagerRef {}

/** @see llvm::PassRegistry */
class LLVMPassRegistryRef {}

/**
 * Used to get the users and usees of a Value.
 *
 * @see llvm::Use */
class LLVMUseRef {}

/**
 * Used to represent an attributes.
 *
 * @see llvm::Attribute
 */
class LLVMAttributeRef {}

/**
 * @see llvm::DiagnosticInfo
 */
class LLVMDiagnosticInfoRef {}

/**
 * @see llvm::Comdat
 */ 
class LLVMComdatRef {}

/**
 * @see llvm::Module::ModuleFlagEntry
 */
class LLVMModuleFlagEntry {}

/**
 * @see llvm::JITEventListener
 */
class LLVMJITEventListenerRef {}

/**
 * @see llvm::object::Binary
 */
class LLVMBinaryRef {}
class LLVMTargetRef {}
class LLVMTargetMachineRef {}

class LLVMPassManagerBuilderRef{}

class LLVMTargetDataRef{}

enum LLVMModuleFlagBehavior {
  /**
   * Emits an error if two values disagree, otherwise the resulting value is
   * that of the operands.
   *
   * @see Module::ModFlagBehavior::Error
   */
  LLVMModuleFlagBehaviorError
  /**
   * Emits a warning if two values disagree. The result value will be the
   * operand for the flag from the first module being linked.
   *
   * @see Module::ModFlagBehavior::Warning
   */
  LLVMModuleFlagBehaviorWarning
  /**
   * Adds a requirement that another module flag be present and have a
   * specified value after linking is performed. The value must be a metadata
   * pair, where the first element of the pair is the ID of the module flag
   * to be restricted, and the second element of the pair is the value the
   * module flag should be restricted to. This behavior can be used to
   * restrict the allowable results (via triggering of an error) of linking
   * IDs with the **Override** behavior.
   *
   * @see Module::ModFlagBehavior::Require
   */
  LLVMModuleFlagBehaviorRequire
  /**
   * Uses the specified value, regardless of the behavior or value of the
   * other module. If both modules specify **Override**, but the values
   * differ, an error will be emitted.
   *
   * @see Module::ModFlagBehavior::Override
   */
  LLVMModuleFlagBehaviorOverride
  /**
   * Appends the two values, which are required to be metadata nodes.
   *
   * @see Module::ModFlagBehavior::Append
   */
  LLVMModuleFlagBehaviorAppend
  /**
   * Appends the two values, which are required to be metadata
   * nodes. However, duplicate entries in the second list are dropped
   * during the append operation.
   *
   * @see Module::ModFlagBehavior::AppendUnique
   */
  LLVMModuleFlagBehaviorAppendUnique
}
enum LLVMInlineAsmDialect {
  LLVMInlineAsmDialectATT
  LLVMInlineAsmDialectIntel
}
enum LLVMTypeKind {
  LLVMVoidTypeKind      /**< type with no size */
  LLVMHalfTypeKind      /**< 16 bit floating point type */
  LLVMFloatTypeKind     /**< 32 bit floating point type */
  LLVMDoubleTypeKind    /**< 64 bit floating point type */
  LLVMX86_FP80TypeKind  /**< 80 bit floating point type (X87) */
  LLVMFP128TypeKind     /**< 128 bit floating point type (112-bit mantissa)*/
  LLVMPPC_FP128TypeKind /**< 128 bit floating point type (two 64-bits) */
  LLVMLabelTypeKind     /**< Labels */
  LLVMIntegerTypeKind   /**< Arbitrary bit width integers */
  LLVMFunctionTypeKind  /**< Functions */
  LLVMStructTypeKind    /**< Structures */
  LLVMArrayTypeKind     /**< Arrays */
  LLVMPointerTypeKind   /**< Pointers */
  LLVMVectorTypeKind    /**< Fixed width SIMD vector type */
  LLVMMetadataTypeKind  /**< Metadata */
  LLVMX86_MMXTypeKind   /**< X86 MMX */
  LLVMTokenTypeKind     /**< Tokens */
  LLVMScalableVectorTypeKind /**< Scalable SIMD vector type */
  LLVMBFloatTypeKind    /**< 16 bit brain floating point type */
  LLVMX86_AMXTypeKind   /**< X86 AMX */
  LLVMTargetExtTypeKind /**< Target extension type */
}
enum LLVMOpcode {
  /* Terminator Instructions */
  LLVMRet            // = 1,
  LLVMBr             // = 2,
  LLVMSwitch         // = 3,
  LLVMIndirectBr     // = 4,
  LLVMInvoke         // = 5,
  /* removed 6 due to API changes */
  LLVMUnreachable    // = 7,
  LLVMCallBr         // = 67,

  /* Standard Unary Operators */
  LLVMFNeg           // = 66,

  /* Standard Binary Operators */
  LLVMAdd            // = 8,
  LLVMFAdd           // = 9,
  LLVMSub            // = 10,
  LLVMFSub           // = 11,
  LLVMMul            // = 12,
  LLVMFMul           // = 13,
  LLVMUDiv           // = 14,
  LLVMSDiv           // = 15,
  LLVMFDiv           // = 16,
  LLVMURem           // = 17,
  LLVMSRem           // = 18,
  LLVMFRem           // = 19,

  /* Logical Operators */
  LLVMShl            // = 20,
  LLVMLShr           // = 21,
  LLVMAShr           // = 22,
  LLVMAnd            // = 23,
  LLVMOr             // = 24,
  LLVMXor            // = 25,

  /* Memory Operators */
  LLVMAlloca         // = 26,
  LLVMLoad           // = 27,
  LLVMStore          // = 28,
  LLVMGetElementPtr  // = 29,

  /* Cast Operators */
  LLVMTrunc          // = 30,
  LLVMZExt           // = 31,
  LLVMSExt           // = 32,
  LLVMFPToUI         // = 33,
  LLVMFPToSI         // = 34,
  LLVMUIToFP         // = 35,
  LLVMSIToFP         // = 36,
  LLVMFPTrunc        // = 37,
  LLVMFPExt          // = 38,
  LLVMPtrToInt       // = 39,
  LLVMIntToPtr       // = 40,
  LLVMBitCast        // = 41,
  LLVMAddrSpaceCast  // = 60,

  /* Other Operators */
  LLVMICmp           // = 42,
  LLVMFCmp           // = 43,
  LLVMPHI            // = 44,
  LLVMCall           // = 45,
  LLVMSelect         // = 46,
  LLVMUserOp1        // = 47,
  LLVMUserOp2        // = 48,
  LLVMVAArg          // = 49,
  LLVMExtractElement // = 50,
  LLVMInsertElement  // = 51,
  LLVMShuffleVector  // = 52,
  LLVMExtractValue   // = 53,
  LLVMInsertValue    // = 54,
  LLVMFreeze         // = 68,

  /* Atomic operators */
  LLVMFence          // = 55,
  LLVMAtomicCmpXchg  // = 56,
  LLVMAtomicRMW      // = 57,

  /* Exception Handling Operators */
  LLVMResume         // = 58,
  LLVMLandingPad     // = 59,
  LLVMCleanupRet     // = 61,
  LLVMCatchRet       // = 62,
  LLVMCatchPad       // = 63,
  LLVMCleanupPad     // = 64,
  LLVMCatchSwitch    // = 65
}
enum LLVMIntPredicate {
  LLVMIntEQ // = 32, /**< equal */
  LLVMIntNE      /**< not equal */
  LLVMIntUGT     /**< unsigned greater than */
  LLVMIntUGE     /**< unsigned greater or equal */
  LLVMIntULT     /**< unsigned less than */
  LLVMIntULE     /**< unsigned less or equal */
  LLVMIntSGT     /**< signed greater than */
  LLVMIntSGE     /**< signed greater or equal */
  LLVMIntSLT     /**< signed less than */
  LLVMIntSLE      /**< signed less or equal */
}
enum LLVMCodeGenOptLevel {
    LLVMCodeGenLevelNone
    LLVMCodeGenLevelLess
    LLVMCodeGenLevelDefault
    LLVMCodeGenLevelAggressive
}
enum LLVMRelocMode {
    LLVMRelocDefault
    LLVMRelocStatic
    LLVMRelocPIC
    LLVMRelocDynamicNoPic
    LLVMRelocROPI
    LLVMRelocRWPI
    LLVMRelocROPI_RWPI
}
enum LLVMCodeModel{
    LLVMCodeModelDefault
    LLVMCodeModelJITDefault
    LLVMCodeModelTiny
    LLVMCodeModelSmall
    LLVMCodeModelKernel
    LLVMCodeModelMedium
    LLVMCodeModelLarge
}
enum LLVMVerifierFailureAction {
  LLVMAbortProcessAction /* verifier will print to stderr and abort() */
  LLVMPrintMessageAction /* verifier will print to stderr and return 1 */
  LLVMReturnStatusAction  /* verifier will just return 1 */
}
enum LLVMCodeGenFileType {
    LLVMAssemblyFile
    LLVMObjectFile
}
enum LLVMLinkage {
  LLVMExternalLinkage    /**< Externally visible function */
  LLVMAvailableExternallyLinkage
  LLVMLinkOnceAnyLinkage /**< Keep one copy of function when linking (inline)*/
  LLVMLinkOnceODRLinkage /**< Same, but only replaced by something
                            equivalent. */
  LLVMLinkOnceODRAutoHideLinkage /**< Obsolete */
  LLVMWeakAnyLinkage     /**< Keep one copy of function when linking (weak) */
  LLVMWeakODRLinkage     /**< Same, but only replaced by something
                            equivalent. */
  LLVMAppendingLinkage   /**< Special purpose, only applies to global arrays */
  LLVMInternalLinkage    /**< Rename collisions when linking (static
                               functions) */
  LLVMPrivateLinkage     /**< Like Internal, but omit from symbol table */
  LLVMDLLImportLinkage   /**< Obsolete */
  LLVMDLLExportLinkage   /**< Obsolete */
  LLVMExternalWeakLinkage/**< ExternalWeak linkage description */
  LLVMGhostLinkage       /**< Obsolete */
  LLVMCommonLinkage      /**< Tentative definitions */
  LLVMLinkerPrivateLinkage /**< Like Private, but linker removes. */
  LLVMLinkerPrivateWeakLinkage /**< Like LinkerPrivate, but is weak. */
} 
enum LLVMRealPredicate {
  LLVMRealPredicateFalse /**< Always false (always folded) */
  LLVMRealOEQ            /**< True if ordered and equal */
  LLVMRealOGT            /**< True if ordered and greater than */
  LLVMRealOGE            /**< True if ordered and greater than or equal */
  LLVMRealOLT            /**< True if ordered and less than */
  LLVMRealOLE            /**< True if ordered and less than or equal */
  LLVMRealONE            /**< True if ordered and operands are unequal */
  LLVMRealORD            /**< True if ordered (no nans) */
  LLVMRealUNO            /**< True if unordered: isnan(X) | isnan(Y) */
  LLVMRealUEQ            /**< True if unordered or equal */
  LLVMRealUGT            /**< True if unordered or greater than */
  LLVMRealUGE            /**< True if unordered greater than, or equal */
  LLVMRealULT            /**< True if unordered or less than */
  LLVMRealULE            /**< True if unordered, less than, or equal */
  LLVMRealUNE            /**< True if unordered or not equal */
  LLVMRealPredicateTrue   /**< Always true (always folded) */
}
enum LLVMThreadLocalMode {
  LLVMNotThreadLocal //= 0,
  LLVMGeneralDynamicTLSModel
  LLVMLocalDynamicTLSModel
  LLVMInitialExecTLSModel
  LLVMLocalExecTLSModel
}
enum LLVMAtomicOrdering{
  LLVMAtomicOrderingNotAtomic //= 0, /**< A load or store which is not atomic */
  LLVMAtomicOrderingUnordered /**= 1, < Lowest level of atomicity, guarantees
                                     somewhat sane results, lock free. */
  LLVMAtomicOrderingMonotonic /**= 2, < guarantees that if you take all the
                                     operations affecting a specific address,
                                     a consistent ordering exists */
  LLVMAtomicOrderingAcquire /**= 4, < Acquire provides a barrier of the sort
                                   necessary to acquire a lock to access other
                                   memory with normal loads and stores. */
  LLVMAtomicOrderingRelease /**= 5, < Release is similar to Acquire, but with
                                   a barrier of the sort necessary to release
                                   a lock. */
  LLVMAtomicOrderingAcquireRelease /**= 6, < provides both an Acquire and a
                                          Release barrier (for fences and
                                          operations which both read and write
                                           memory). */
  LLVMAtomicOrderingSequentiallyConsistent /**= 7 < provides Acquire semantics
                                                 for loads and Release
                                                 semantics for stores.
                                                 Additionally, it guarantees
                                                 that a total ordering exists
                                                 between all
                                                 SequentiallyConsistent
                                                 operations. */
}

enum LLVMAtomicRMWBinOp {
    LLVMAtomicRMWBinOpXchg /**< Set the new value and return the one old */
    LLVMAtomicRMWBinOpAdd /**< Add a value and return the old one */
    LLVMAtomicRMWBinOpSub /**< Subtract a value and return the old one */
    LLVMAtomicRMWBinOpAnd /**< And a value and return the old one */
    LLVMAtomicRMWBinOpNand /**< Not-And a value and return the old one */
    LLVMAtomicRMWBinOpOr /**< OR a value and return the old one */
    LLVMAtomicRMWBinOpXor /**< Xor a value and return the old one */
    LLVMAtomicRMWBinOpMax /**< Sets the value if it's greater than the
                             original using a signed comparison and return
                             the old one */
    LLVMAtomicRMWBinOpMin /**< Sets the value if it's Smaller than the
                             original using a signed comparison and return
                             the old one */
    LLVMAtomicRMWBinOpUMax /**< Sets the value if it's greater than the
                             original using an unsigned comparison and return
                             the old one */
    LLVMAtomicRMWBinOpUMin /**< Sets the value if it's greater than the
                              original using an unsigned comparison and return
                              the old one */
    LLVMAtomicRMWBinOpFAdd /**< Add a floating point value and return the
                              old one */
    LLVMAtomicRMWBinOpFSub /**< Subtract a floating point value and return the
                             old one */
}

/* Execution engine */
class LLVMExecutionEngineRef{}
class LLVMGenericValueRef{}
class LLVMMCJITMemoryManagerRef{}

enum LLVMDIFlags {
  LLVMDIFlagZero = 0
  LLVMDIFlagPrivate = 1
  LLVMDIFlagProtected = 2
  LLVMDIFlagPublic = 3
  LLVMDIFlagFwdDecl = 1 << 2
  LLVMDIFlagAppleBlock = 1 << 3
  LLVMDIFlagReservedBit4 = 1 << 4
  LLVMDIFlagVirtual = 1 << 5
  LLVMDIFlagArtificial = 1 << 6
  LLVMDIFlagExplicit = 1 << 7
  LLVMDIFlagPrototyped = 1 << 8
  LLVMDIFlagObjcClassComplete = 1 << 9
  LLVMDIFlagObjectPointer = 1 << 10
  LLVMDIFlagVector = 1 << 11
  LLVMDIFlagStaticMember = 1 << 12
  LLVMDIFlagLValueReference = 1 << 13
  LLVMDIFlagRValueReference = 1 << 14
  LLVMDIFlagReserved = 1 << 15
  LLVMDIFlagSingleInheritance = 1 << 16
  LLVMDIFlagMultipleInheritance = 2 << 16
  LLVMDIFlagVirtualInheritance = 3 << 16
  LLVMDIFlagIntroducedVirtual = 1 << 18
  LLVMDIFlagBitField = 1 << 19
  LLVMDIFlagNoReturn = 1 << 20
  LLVMDIFlagTypePassByValue = 1 << 22
  LLVMDIFlagTypePassByReference = 1 << 23
  LLVMDIFlagEnumClass = 1 << 24
  LLVMDIFlagThunk = 1 << 25
  LLVMDIFlagNonTrivial = 1 << 26
  LLVMDIFlagBigEndian = 1 << 27
  LLVMDIFlagLittleEndian = 1 << 28
  LLVMDIFlagIndirectVirtualBase = (1 << 2) or (1 << 5)
  LLVMDIFlagAccessibility = 0 or 2 or 3
  LLVMDIFlagPtrToMemberRep = (1 << 16) or (2 << 16) or (3 << 16)
}