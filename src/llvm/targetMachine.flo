import "types"
/*===-- Target ------------------------------------------------------------===*/
/** Returns the first llvm::Target in the registered targets list. */
fnc LLVMGetFirstTarget(): LLVMTargetRef

/** Returns the next llvm::Target given a previous one (or null if there's none) */
fnc LLVMGetNextTarget(T: LLVMTargetRef  ): LLVMTargetRef

/** Finds the target corresponding to the given name and stores it in \p T.
  Returns 0 on success. */
fnc LLVMGetTargetFromName(Name: u8*): LLVMTargetRef

/** Finds the target corresponding to the given triple and stores it in \p T.
  Returns 0 on success. Optionally returns any error in ErrorMessage.
  Use LLVMDisposeMessage to dispose the message. */
fnc LLVMGetTargetFromTriple(Triple: u8*,  T: LLVMTargetRef*, ErrorMessage: u8**): LLVMBool

/** Returns the name of a target. See llvm::Target::getName */
fnc LLVMGetTargetName(T: LLVMTargetRef): u8*

/** Returns the description  of a target. See llvm::Target::getDescription */
fnc LLVMGetTargetDescription(T: LLVMTargetRef): u8*

/** Returns if the target has a JIT */
fnc LLVMTargetHasJIT(T: LLVMTargetRef): LLVMBool

/** Returns if the target has a TargetMachine associated */
fnc LLVMTargetHasTargetMachine(T: LLVMTargetRef): LLVMBool

/** Returns if the target as an ASM backend (required for emitting output) */
fnc LLVMTargetHasAsmBackend(T: LLVMTargetRef): LLVMBool


/*===-- Target Machine ----------------------------------------------------===*/
/** Creates a new llvm::TargetMachine. See llvm::Target::createTargetMachine */
fnc LLVMCreateTargetMachine(T: LLVMTargetRef, Triple: u8*, CPU: u8*, Features: u8*, Level: LLVMCodeGenOptLevel, Reloc: LLVMRelocMode, CodeModel: LLVMCodeModel): LLVMTargetMachineRef
/** Dispose the LLVMTargetMachineRef instance generated by
  LLVMCreateTargetMachine. */
/** Create a DataLayout based on the targetMachine. */
fnc LLVMDisposeTargetMachine(T: LLVMTargetMachineRef)

/** Returns the Target used in a TargetMachine */
fnc LLVMGetTargetMachineTarget(T: LLVMTargetMachineRef): LLVMTargetRef

/** Returns the triple used creating this target machine. See
  llvm::TargetMachine::getTriple. The result needs to be disposed with
  LLVMDisposeMessage. */
fnc LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef): u8*

/** Returns the cpu used creating this target machine. See
  llvm::TargetMachine::getCPU. The result needs to be disposed with
  LLVMDisposeMessage. */
fnc LLVMGetTargetMachineCPU(T: LLVMTargetMachineRef): u8*

/** Returns the feature string used creating this target machine. See
  llvm::TargetMachine::getFeatureString. The result needs to be disposed with
  LLVMDisposeMessage. */
fnc LLVMGetTargetMachineFeatureString(T: LLVMTargetMachineRef): u8*
/** Create a DataLayout based on the targetMachine. */
fnc LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef): u8*
/** Set the target machine's ASM verbosity. */
fnc LLVMSetTargetMachineAsmVerbosity(T: LLVMTargetMachineRef, VerboseAsm: LLVMBool)

/** Emits an asm or object file for the given module to the filename. This
  wraps several c++ only classes (among them a file stream). Returns any
  error in ErrorMessage. Use LLVMDisposeMessage to dispose the message. */
fnc LLVMTargetMachineEmitToFile(T: LLVMTargetMachineRef, M: LLVMModuleRef, Filename: u8*, codegen: LLVMCodeGenFileType, ErrorMessage: u8**): LLVMBool

/** Compile the LLVM IR stored in \p M and store the result in \p OutMemBuf. */
fnc LLVMTargetMachineEmitToMemoryBuffer(T: LLVMTargetMachineRef , M: LLVMModuleRef, codegen: LLVMCodeGenFileType, ErrorMessage: u8**, OutMemBuf: LLVMMemoryBufferRef*): LLVMBool


/*===-- Triple ------------------------------------------------------------===*/
/** Get a triple for the host machine as a string. The result needs to be
  disposed with LLVMDisposeMessage. */
fnc LLVMGetDefaultTargetTriple(): u8*
/** Normalize a target triple. The result needs to be disposed with
  LLVMDisposeMessage. */
fnc LLVMNormalizeTargetTriple(triple:  u8*): u8* 

/** Get the host CPU as a string. The result needs to be disposed with
  LLVMDisposeMessage. */
fnc LLVMGetHostCPUName(): u8* 

/** Get the host CPU's features as a string. The result needs to be disposed
  with LLVMDisposeMessage. */
fnc LLVMGetHostCPUFeatures(): u8* 

/** Adds the target-specific analysis passes to the pass manager. */
fnc LLVMAddAnalysisPasses(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef)
