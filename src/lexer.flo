fnc string_to_kw_token(word: string): TokType {
    if word == "and"
        return TokType.AND_KW
    if word == "or"
        return TokType.OR_KW
    if word == "xor"
        return TokType.XOR_KW
    if word == "const"
        return TokType.CONST_KW
    if word == "let"
        return TokType.LET_KW
    if word == "if" 
        return TokType.IF_KW
    if word == "else"
        return TokType.ELSE_KW
    if word == "bool"
        return TokType.BOOL_KW
    if word == "i4"
        return TokType.I4_KW
    if word == "i8"
        return TokType.I8_KW
    if word == "i16"
        return TokType.I16_KW
    if word == "i32"
        return TokType.I32_KW
    if word == "i64"
        return TokType.I64_KW
    if word == "i128"
        return TokType.I128_KW
    if word == "int"
        return TokType.INT_KW
    if word == "f16"
        return TokType.F16_KW
    if word == "f32"
        return TokType.F32_KW
    if word == "f64"
        return TokType.F64_KW
    if word == "float"
        return TokType.FLOAT_KW
    if word == "void"
        return TokType.VOID_KW
    if word == "for"
        return TokType.FOR_KW
    if word == "while"
        return TokType.WHILE_KW
    if word == "fnc"
        return TokType.FNC_KW
    if word == "break"
        return TokType.BREAK_KW
    if word == "continue"
        return TokType.CONTINUE_KW
    if word == "return"
        return TokType.RETURN_KW
    if word == "import"
        return TokType.IMPORT_KW
    if word == "private"
        return TokType.PRIVATE_KW
    if word == "public"
        return TokType.PUBLIC_KW
    if word == "protected"
        return TokType.PROTECTED_KW
    if word == "in"
        return TokType.IN_KW
    if word == "class"
        return TokType.CLASS_KW
    if word == "enum"
        return TokType.ENUM_KW
    if word == "new"
        return TokType.NEW_KW
    if word == "as"
        return TokType.AS_KW
    return -1
}
fnc is_identifier_char(char: i8): bool {
    return (char >= 'A' and char <= 'Z') or (char >= 'a' and char <= 'z') or (char == '_')
}
fnc is_number_char(char: i8): bool {
    return (char >= '0' and char <= '9')
}
fnc capitalize(char: i8): i8 {
    if char >= 'a' and char <= 'z'
        return char - ' '
    return char 
}
fnc in_base_range(char: i8, base: int): bool {
    if base < 10 
        return char >= '0' and char <= (base + 48)
    return (char >= '0' and char <= (base + 48)) or (char >= 'A' and char <= (base + 65))
}
fnc get_escape_char(char: i8): i8 {
    if (char == 'a') return '\a'
    if (char == 'b') return '\b'
    if (char == 't') return '\t'
    if (char == 'f') return '\f'
    if (char == 'n') return '\n'
    if (char == 'r') return '\r'
    if (char == 'v') return '\v'
    if (char == '0') return '\0'
    if (char == '\'') return '\''
    if (char == '\"') return '\"'
    if (char == '\\') return '\\'
    return char
}
fnc heap_string(size: int): string {
    let buffer = new i8[size]
    let new_string = new string(buffer, 0)
    new_string.size = size
    return new_string
}
fnc unescape(str: string): string {
    let new_string = heap_string(str.length)
    let char = '\0'
    let aval = &char
    for let i = 0; i < str.length; i++ {
        char = str.get_byte(i)
        if (char == '\\') {
            if i + 3 < str.length {
                aval = str.get_bytes() + i + 1
                if memcmp(aval, "033", 3) == 0 or memcmp(aval, "x1b", 3) == 0 {
                    new_string += "\033"
                    i += 3
                    continue
                }
                if i + 6 < str.length {
                    if memcmp(aval, "u001b", 5) == 0 {
                        new_string += "\033"
                        i += 5
                        continue
                    }
                }
            }
            char = get_escape_char(str.get_byte(++i))
        }
        new_string.add_byte(char)
    }
    return new_string
}
class Token {
    ttype: TokType
    range: FloRange
    constructor(ttype: TokType, range: FloRange){
        this.ttype = ttype
        this.range = range
    }
}
class IntToken (Token) {
    value: int
    constructor(value: int, range: FloRange){
        super(TokType.INT, range)
        this.value = value
    }
}
class FloatToken (Token) {
    value: float
    constructor(value: float, range: FloRange){
        super(TokType.FLOAT, range)
        this.value = value
    }
}
class CharToken (Token) {
    value: i8
    constructor(value: i8, range: FloRange){
        super(TokType.CHAR, range)
        this.value = value
    }
}
class StrToken (Token) {
    value: string
    args: Token[][]
    constructor(args: Token[][], value: string, range: FloRange){
        super(TokType.STR, range)
        this.value = value
        this.args = args
    }
}
class IdentifierToken (Token) {
    value: string
    constructor(value: string, range: FloRange){
        super(TokType.IDENTIFER, range)
        this.value = value
    }
}
class Lexer {
    current_char: i8
    text: string
    errors: FloError[]
    idx: int
    col: int
    line: int
    constructor(this){
        this.idx = -1
        this.line = 1
        this.col = 0
    }
    private eof(this): bool{
        return this.idx >= this.text.length
    }
    private peek(this, offset = 1): i8 {
        if this.idx + offset < this.text.length 
            return this.text.get_byte(this.idx + offset)
        return '\0'
    }
    private advance(this){
        if this.eof() {
            return
        }
        this.current_char = this.text.get_byte(++this.idx)
        if this.current_char == '\n' {
            this.col = 0
            this.line++
        } else
            this.col++
    }
    private get_range(this, back: int): FloRange {
        return new FloRange(this.idx - back + 1, this.idx + 1, this.col - back, this.line)
    }
    private plus_token(this): Token {
        if this.peek() == '+' {
            this.advance()
            return new Token(TokType.PLUS_PLUS, this.get_range(2))
        }
        return new Token(TokType.PLUS, this.get_range(1))
    }
    private skip_comment(this): bool{
        if this.peek() == '*' {
            this.advance()
            while !this.eof() {
                if this.peek() == '*' and this.peek(2) == '/' break
                this.advance()
            }
            this.advance()
            this.advance()
            return true
        } else if this.peek() == '/' {
            this.advance()
            while this.peek() != '\n' and !this.eof()
                this.advance()
            return true
        }
        return false
    }
    private minus_token(this): Token{
        if this.peek() == '-' {
            this.advance()
            return new Token(TokType.MINUS_MINUS, this.get_range(2))
        }
        return new Token(TokType.MINUS, this.get_range(2))
    }
    private eq_token(this): Token {
        if this.peek() == '='{
            this.advance()
            return new Token(TokType.EEQ, this.get_range(2))
        } 
        else if this.peek() == '>' {
            this.advance()
            return new Token(TokType.ARROW, this.get_range(2))
        }
        return new Token(TokType.EQ, this.get_range(1))
    }
    private neq_token(this): Token {
        if this.peek() == '=' {
            this.advance()
            return new Token(TokType.NEQ, this.get_range(2))
        }
        return new Token(TokType.NOT, this.get_range(1))
    }
    private gt_token(this): Token {
        if this.peek() == '=' {
            this.advance()
            return new Token(TokType.GTE, this.get_range(2))
        }
        else if this.peek() == '>' {
            this.advance()
            return new Token(TokType.SR, this.get_range(2))
        }
        return new Token(TokType.GT, this.get_range(1))
    }
    private lt_token(this): Token {
        if this.peek() == '=' {
            this.advance()
            return new Token(TokType.LTE, this.get_range(2))
        }
        else if this.peek() == '<' {
            this.advance()
            return new Token(TokType.SL, this.get_range(2))
        }
        return new Token(TokType.LT, this.get_range(1))
    }
    private dot_token(this): Token {
        let token = TokType.DOT
        let length = 1
        if this.peek() == '.'{
            token = TokType.DOT_DOT
            length++
            this.advance()
            if this.peek() == '.' {
                token = TokType.DOT_DOT_DOT
                length++
                this.advance()
            }
        }
        return new Token(token, this.get_range(length))
    }
    private base_int_token(this, base: int): IntToken{
        this.advance()
        let length = 3
        let value = 0
        let current_char = '\0'
        while in_base_range(current_char = capitalize(this.peek()), base) and !this.eof() {
            value *= base
            let add =  current_char - '0'
            if (current_char >= 'A') add = current_char - 'A' + 10
            value += add
            length++
            this.advance()
        }
        return new IntToken(value, this.get_range(length))
    }
    private numeric_token(this): Token {
        let length = 1
        let is_float = false
        let next_char = '\0'
        if this.current_char == '0' and this.peek() == 'b'
            return this.base_int_token(2)
        if this.current_char == '0' and this.peek() == 'o'
            return this.base_int_token(8)
        if this.current_char == '0' and this.peek() == 'x'
            return this.base_int_token(16)
        while (is_number_char(next_char = this.peek()) or next_char == '.') and !this.eof() {
            if next_char == '.' and (is_float or !is_number_char(this.peek(2))) break
            if this.current_char == '.' is_float = true
            length++
            this.advance()
        }
        let range = this.get_range(length)
        let str_value = this.text.substring(range.start, length)
        return is_float ? new FloatToken(str_value as float, range) as Token : new IntToken(str_value as int, range)
    }
    private identifier_token(this): Token {
        let length = 1
        let start = this.idx
        let next_char = this.peek()
        while (is_identifier_char(next_char = this.peek()) or is_number_char(next_char)) and !this.eof() {
            length++
            this.advance()
        }
        let value = this.text.substring(start, length)
        let range = this.get_range(length)
        let keyword = 0
        if (keyword = string_to_kw_token(value)) != -1 return new Token(keyword, range)
        return new IdentifierToken(value, range)
    }
    private string_token(this): StrToken {
        let length = 2
        let escape_next = false
        let args: Token[][] = []
        let aval: i8* = null
        this.advance()
        let str = heap_string(1)
        while !this.eof() {
            if (this.current_char == '"' and !escape_next) break
            if (this.current_char == '$' and !escape_next){
                str.add_byte(this.current_char)
                this.advance()
                let token_group: Token[] = []
                let active_open_pars = 0
                if this.current_char == '(' {
                    this.advance()
                    while (this.current_char != ')' or active_open_pars != 0) and !this.eof(){
                        if this.current_char == '(' active_open_pars++
                        if this.current_char == ')' active_open_pars--
                        token_group << this.lex_token()
                        this.advance()
                    }
                } else {
                    token_group << this.lex_token()
                }
                this.advance()
                token_group << new Token(TokType.EOF, new FloRange(0, 0, this.col, this.line))
                args << token_group
                continue
            }
            length++
            escape_next = this.current_char == '\\'
            str.add_byte(this.current_char)
            this.advance()
        }
        let range = this.get_range(length)
        let value = unescape(str)
        return new StrToken(args, value, range)
    }
    private char_token(this): CharToken {
        let length = 3
        this.advance()
        let value = this.current_char
        if this.current_char == '\\' {
            this.advance()
            value = get_escape_char(this.current_char)
            length += 2
        }
        this.advance()
        return new CharToken(value, this.get_range(length))
    }
    public lex_token(this): Token {
        let char = this.current_char
        if this.current_char == ' ' {
            this.advance()
            return this.lex_token()
        }
        if is_identifier_char(char) 
            return this.identifier_token()
        else if char == '"'
            return this.string_token()
        else if is_number_char(char)
            return this.numeric_token()
        else if char == ':' 
            return new Token(TokType.COL, this.get_range(1))
        else if char == ';'
            return new Token(TokType.SEMICOL, this.get_range(1))
        else if char == ','
            return new Token(TokType.COMMA, this.get_range(1))
        else if char == '+'
            return this.plus_token()
        else if char == '-'
            return this.minus_token()
        else if char == '*'
            return new Token(TokType.MULT, this.get_range(1))
        else if char == '('
            return new Token(TokType.LPAR, this.get_range(1))
        else if char == ')'
            return new Token(TokType.RPAR, this.get_range(1))
        else if char == '%'
            return new Token(TokType.MOD, this.get_range(1))
        else if char == '{'
            return new Token(TokType.LBRACE, this.get_range(1))
        else if char == '}'
            return new Token(TokType.RBRACE, this.get_range(1))
        else if char == '['
            return new Token(TokType.LBRACKET, this.get_range(1))
        else if char == ']'
            return new Token(TokType.RBRACKET, this.get_range(1))
        else if char == '\n' or char == '\r'
            return new Token(TokType.LN, this.get_range(1))
        else if char == '\''
            return (this.char_token() as Token)
        else if char == '^'
            return new Token(TokType.POW, this.get_range(1))
        else if char == '?'
            return new Token(TokType.QUES, this.get_range(1))
        else if char == '&'
            return new Token(TokType.AMP, this.get_range(1))
        else if char == '='
            return this.eq_token()
        else if char == '!'
            return this.neq_token()
        else if char == '>'
            return this.gt_token()
        else if char == '<'
            return this.lt_token()
        else if char == '.'
            return this.dot_token()
        else if char == '/' {
            if (!this.skip_comment())
                return new Token(TokType.DIV, this.get_range(1))
        } else {
            this.errors << new FloError(ErrorKind.ILLEGALCHAR, "Illegal character: '$(this.text.substring(this.idx, 1))'", this.get_range(1))
        }
        return null
    }
    public tokenize(this, text: string, errors: FloError[]): Token[] {
        this.text = text
        this.errors = errors
        this.advance()
        let tokens: Token[] = []
        while !this.eof() and this.errors.length == 0 {
            tokens << this.lex_token()
            this.advance()
        }
        tokens << new Token(TokType.EOF, new FloRange(0, 0, this.col, this.line))
        return tokens
    }
}