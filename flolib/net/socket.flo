import socket, connect, accept, bind, listen, close in "@flo/sys/lib"
fnc inet_addr(addr: i8*): int
fnc htons(x: int): int {
    let x1 = (x and 255) << 8
    let x2 = (x >> 8) and 255 
    return x1 or x2
}
fnc create_sockaddr_in (sin_family: int, sin_port: int, sin_addr: int): i8* {
    let sin_family_port = (sin_port << 16) or (sin_family and 0xFFFF)
    let socket_addr_in: int[2] = [sin_family_port, sin_addr]
    return &socket_addr_in[0] as i8*
}
class Socket {
    sockfd: int
    domain: int
    address: i8*
    constructor(this, domain: int, socktype: int, protocol: int){
        let sockfd = socket(domain, socktype, protocol)
        if sockfd < 1 {
            println("Error: could not create TCP socket")
            return
        }
        this.sockfd = sockfd
        this.domain = domain
    }
    bind(this, port: int, address: string = ""){
        let interface = inet_addr(address.to_cstring())
        this.address = create_sockaddr_in(this.domain, htons(port), interface)
        if bind(this.sockfd, this.address, 16) < 0 {
            println("Error: could not bind socket")
            return
        }
    }
    connect(this, port: int, address: string){
        let interface = inet_addr(address.to_cstring())
        this.address = create_sockaddr_in(this.domain, htons(port), interface)
        if connect(this.sockfd, this.address, 16) < 0 {
            println("Error: could not connect socket")
            return
        }
    }
    listen(this, backlog: int = 10){
        if listen(this.sockfd, backlog) < 0 {
            println("Error: could not start listening")
            return
        }
    }
    close(this){
        close(this.sockfd)
    }
    destroy(this){
        this.close()
    }
}