/*@extern*/
fnc strlen(str: i8*): int
fnc write(res: int, buf: i8*, len: int)
class Iterator<T> {
    public done: bool
    public __next__(this): T
}
const STDOUT = 1
// ----- string -------
class string {
    private buffer: i8*
    public length: int
    private size: int
    constructor(this, data: i8*, len: int){
        this.buffer = data
        this.length = len
        this.size = len
    }
    public __add__(this, data: string): string {
        let new_str_len = this.length + data.length
        let new_buffer = new i8*(new_str_len)
        new_buffer.copy_from(this.buffer, this.length)
        let trailing_buffer = new_buffer + this.length
        trailing_buffer.copy_from(data.buffer, data.length)
        return new string(new_buffer, new_str_len)   
    }
    public __adda__(this, other: string): string {
        let new_length = this.length + other.length
        this.buffer = this.buffer.resize(new_length)
        (this.buffer + this.length).copy_from(other.buffer, other.length)
        this.length = new_length
        return this
    }
    public __getitem__(this, index: int): string {
        let new_buffer = new i8*(1)
        new_buffer[0] = this.buffer[index]
        return new string(new_buffer, 2)
    }
    public __ne__(this, other: string): bool {
        return !(this.__eq__(other))
    }
    public __eq__(this, other: string): bool {
        if this.length != other.length return false
        return this.buffer.compare(other.buffer, this.length) == 0
    }
    public find(this, search: string, start: int = 0): int {
        for let i = start; i < this.length; i++ {
            if (search.buffer[0] == this.buffer[i]) {
                let x = search.length - 1
                let matches = true
                while x > 0 {
                    if (search.buffer[x] != this.buffer[x+i]){
                        return -1
                    }
                    x--
                }
                if matches return i
            }
        }
        return -1
    }
    public __in__(this, other: string): bool {
        return this.find(other) != -1
    }
    public substring (this, start: int, length: int): string {
        return new string(this.buffer + start, length)
    }
    public get_byte(this, index: int): i8 {
        return (this.buffer[index])
    }
    public get_bytes(this): i8* {
        return this.buffer
    }
    public replace(this, val: string, repl: string): string {
        let idx = this.find(val)
        if idx >= 0 {
            let nlen = this.length - val.length + repl.length
            let nbuff = new i8*(nlen)
            nbuff.copy_from(this.buffer, idx)
            (&nbuff[idx]).copy_from(repl.buffer, repl.length)
            (&nbuff[idx + repl.length]).copy_from(&this.buffer[idx + val.length], this.length - (idx + val.length))
            return new string(nbuff, nlen)
        } 
        return this
    }
    public to_cstring(this): i8* {
        let c_string = new i8*(this.length + 1)
        c_string.copy_from(this.buffer, this.length)
        c_string[this.length] = '\0'
        return c_string
    }
    public ends_with(this, suffix: string): bool {
        if (this.length < suffix.length) return false
        let end_buff = this.buffer + this.length - suffix.length
        return end_buff.compare(suffix.buffer, suffix.length) == 0
    }
    public starts_with(this, preffix: string): bool {
        if (this.length < preffix.length) return false
        return this.buffer.compare(preffix.buffer, preffix.length) == 0
    }
    public from_cstring(str: i8*): string {
        let len = strlen(str)
        let buf = new i8*(len)
        buf.copy_from(str, len)
        return new string(buf, len)
    }
    public from_bytes(bytes: i8*, len: int): string {
        let buf = new i8*(len)
        buf.copy_from(bytes, len)
        return new string(buf, len)
    }
}
class StringBuilder {
    private buffer: i8*
    private size: int
    private working_buffer: i8*
    length: int
    constructor(this, size: int){
        this.size = size
        this.buffer = new i8*(this.size)
        this.working_buffer = this.buffer
        this.length = 0
    }
    private resize(this){
        this.size *= 2
        this.buffer = this.buffer.resize(this.size)
        this.working_buffer = this.buffer + this.length
    }
    public add_bytes_length(this, bytes: i8*, length: int){
        if (this.size - this.length <= length) this.resize()
        this.working_buffer.copy_from(bytes, length)
        this.working_buffer += length
        this.length += length
    }
    public append_string(this, str: string){
        this.add_bytes_length(str.get_bytes(), str.length)
    }
    public add_byte(this, byte: i8){
        if (this.size - this.length <= 1) this.resize()
        this.working_buffer[0] = byte
        this.working_buffer += 1
        this.length += 1
    }
    public get_string(this): string {
        return new string(this.buffer, this.length)
    }
}
// ------- Range -------
class Range {
    private start: int
    private end: int
    constructor(this, start: int, end: int){
        this.start = start
        this.end = end
    }
    public __in__(this, num: int): bool {
        return num >= this.start and num < this.end
    }
    public __iter__(this): RangeIterator<int> {
        return new RangeIterator<int>(this.start, this.end)
    }
}
class RangeIterator<T>(Iterator<T>){
    public idx: T
    public end: T
    constructor(this, idx: T, end: T){
        this.idx = idx
        this.end = end
    }
    public __next__(this): T {
        this.done = this.idx >= this.end
        return this.idx++
    }
}
// ----- Array -------
class Array <T> {
    public buffer: T*
    public length: int
    private size: int
    constructor(this, size: int){
        this.length = 0
        this.size = size
        this.buffer = new T*(size)
    }
    resize(this){
        this.size *= 2
        this.buffer = this.buffer.resize(this.size)
    }
    swap(this, i1: int, i2: int){
        if (i1 in 0..this.length) and (i2 in 0..this.length) {
            let tmp = this.buffer[i1]
            this.buffer[i1] = this.buffer[i2]
            this.buffer[i2] = tmp 
        }
    }
    __iter__(this): ArrayIterator<T> {
        return new ArrayIterator<T>(this.buffer, this.length)
    } 
    __sl__(this, element: T){
        if (this.length >= this.size) this.resize()
        this.buffer[this.length++] = element
    }
    __setitem__(this, index: int, value: T){
        if index in 0..this.length {
            this.buffer[index] = value
        }
    }
    append(this, element: T){
        this.__sl__(element)
    }
    __getitem__(this, index: int): T {
        return this.buffer[index]
    }
    __eq__(this, other: T[]): bool {
        if this.length != other.length {
            return false
        } else {
           for let i = 0; i < this.length; i++ {
               if this[i] != other[i] return false
           }
        }
        return true
    }
    __in__(this, element: T): bool {
        for let i = 0; i < this.length; i++ {
            if this[i] == element return true 
        }
        return false
    }
    
    find(this, search: T): int{
        for let i = 0; i < this.length; i++ {
            if this.buffer[i] == search return i
        }
        return -1
    }
}
class ArrayIterator<T>(Iterator<T>) {
    private idx: int
    private end: int
    private bytes: T*
    constructor(this, bytes: T*, end: int){
        this.done = false
        this.idx = 0
        this.bytes = bytes
        this.end = end
    }
    public __next__(this): T {
        let next_elem = this.bytes[this.idx++]
        this.done = this.idx > this.end
        return next_elem
    }
}
fnc print(str: string){
    write(STDOUT, str.get_bytes(), str.length)
}
fnc println(str: string){
    print(str)
    write(STDOUT, "\n", 1)
}