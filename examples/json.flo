import println from "@flo/core"
enum JsonValue {
    Null
    Bool
    Number
    String
    Array
    Object
}
fnc is_white_space(candidate: i8): bool {
    return candidate == ' ' or candidate == '\t' or candidate == '\n'
}
class JsonParser {
    source: string
    idx: int
    fnc constructor(source: string) {
        this.idx = 0
        this.source = source
    }
    fnc eof(): bool {
        return this.idx < this.source.length
    }
    fnc get_current_char(): i8 {
        return this.source.get_byte(this.idx)
    }
    fnc skip_white_space() {
        index = this.idx
        while !this.eof() and is_white_space(this.source.get_byte(++index)) {
            this.idx++
        }
    }
    fnc parse(): JsonValue {
        // TODO: Use match in the future
        // TODO: Throw error
        while !this.eof(){
            this.skip_white_space()
            if this.get_current_char() == '{':
                return this.parse_object()
            else if this.get_current_char() == '[':
                return this.parse_array()
            else if this.get_current_char() == '"'
                return this.parse_string()
            else if this.source[this.idx] in "-0123456789."
                return this.parse_number()
            else if this.get_current_char() == 'f':
                return this.parse_false()
            else if this.get_current_char() == 't':
                return this.parse_true()
            else if this.get_current_char() == 'n':
                return this.parse_null()
            else:
                throw Error()
        }
    }
}
fnc parse_json(input: string): JsonValue {
    parser = new JsonParser(input)
    return parser.parse()
}
fnc main() {
    input = "{\"foo\": 123}"
    value = parse_json(input) as string
    println(value)
}