fnc printf(fmt: i8*, n: i32 = 0): i32
const VMSTACK_CAPACITY = 1000
let vmBuffer: int[VMSTACK_CAPACITY] = null
class StackVM {
    pc: int
    sp: int
    mem: int*
    typ: int
    dat: int
    running: bool
    constructor(this) {
        this.pc = 10
        this.sp = 0
        this.typ = 0
        this.mem = &vmBuffer[0]
        this.dat = 0
        this.running = true
    }
    private getType(instruction: int): int {
        return (0xc0000000 and instruction) >> 30
    }
    private getData(instruction: int): int {
        return (0x3fffffff and instruction)
    }
    private fetch(this){
        this.pc++
    }
    private decode(this){
        this.typ = StackVM.getType(this.mem[this.pc])
        this.dat = StackVM.getData(this.mem[this.pc])
    }
    private execute(this){
        if (this.typ == 0) or (this.typ == 2) {
            this.sp++
            printf("push (%d)\n", this.dat as i32)
            this.mem[this.sp] = this.dat
        } else {
            this.doPrimitive()
        }
    }
    private doPrimitive(this){
        let data = this.dat
        if data == 0 {
            printf("halt!\n")
            this.running = false
        } else if data ==  1 {
            printf("add\n")
            this.mem[this.sp - 1] = this.mem[this.sp - 1] + this.mem[this.sp]
            this.sp--
        } else if data ==  2 {
            printf("sub\n")
            this.mem[this.sp - 1] = this.mem[this.sp - 1] - this.mem[this.sp]
            this.sp--
        } else if data ==  3 {
            printf("mul\n")
            this.mem[this.sp - 1] = this.mem[this.sp - 1] * this.mem[this.sp]
            this.sp--
        } else if data ==  4 {
            printf("div\n")
            this.mem[this.sp - 1] = this.mem[this.sp - 1] / this.mem[this.sp]
            this.sp--
        }
    }
    run(this){
        this.pc--
        while this.running {
            this.fetch()
            this.decode()
            this.execute()
        }
        printf("output: %x\n", this.mem[this.sp] as i32)
    }
    loadProgram(this, prog: int*, size: int){
        (this.mem + this.pc).copy_from(prog, size)
    }
}