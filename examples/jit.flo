const PAGE_SIZE: int = 4096
const PROT_READ = 1
const PROT_WRITE = PROT_READ << 1
const PROT_EXEC = PROT_WRITE << 1
const MAP_PRIVATE = 2
const MAP_ANONYMOUS = 0x20

fnc new_jit_mem(num_pages = 1): i8*{
    let size = num_pages * PAGE_SIZE
    return mmap(null, size, PROT_EXEC or PROT_WRITE, MAP_PRIVATE or MAP_ANONYMOUS, -1, 0)
}

fnc create_jit_function(machine_code: i8*, len: int): () => i64 {
    let jit_mem = new_jit_mem()
    memcpy(jit_mem, machine_code, len)
    return jit_mem as () => i64
}
fnc main(argc: int, argv: i8**): int {
    const code_size = 6
    let machine_code: i8[code_size] = [0xb8, 0x00, 0x00, 0x00, 0x00, 0xc3]
    let num = atoi(argv[0])
    memcpy(&machine_code[1], &num, 4)
    let func = create_jit_function(&machine_code[0], code_size)
    func()
    return 0
}
fnc memcpy(src: i8*, dest: i8*, len: int) // stdlib
fnc atoi(str: i8*): int //c stdlib
fnc mmap(addr: i8*, len: int, prot: int, flags: int, fd: int, offset: i32): i8* // linux syscall