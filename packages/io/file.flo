import string, exit in "@flo/core"
import open, close, read, write, lseek, unlink, lstat, access, $O_RDONLY, $O_WRONLY, $O_CREAT, $SEEK_END, $SEEK_SET, $F_OK, $R_OK, $W_OK, $X_OK in "@flo/sys"
class File {
    path: string
    stat_struct: i8*
    constructor(path: string) {
        this.path = path
        this.stat_struct = new i8[144]
        lstat(path.to_cstring(), this.stat_struct)
    }
    get_file_size(): int {
        let size_offset = (this.stat_struct + 48) as int*
        return size_offset[0]
    }
    read(size: int): i8* {
        let fd = open(this.path.to_cstring(), $O_RDONLY)
        if fd < 0 {
            exit("Error: could not open file\n")
        }
        let file_contents = new i8[size]
        if read(fd, file_contents, size) < 0 {
            exit("Error: could not read the file\n")
        }
        close(fd)
        return file_contents
    }
    write(buffer: i8*, size: int){
        let fd = open(this.path.to_cstring(), $O_CREAT or $O_WRONLY)
        if fd < 0 {
            exit("Error: could not open file\n")
        }
        if write(fd, buffer, size) < 0 {
            exit("Error: could not write the file\n")
        }
        close(fd)
    }
    read_as_string(): string {
        let file_size = this.get_file_size()
        return new string(this.read(file_size), file_size)
    }
    write_as_string(data: string) {
        this.write(data.get_bytes(), data.length)
    }
    exists(): bool {
        return access(this.path.to_cstring(), $F_OK) >= 0
    }
    is_readable(): bool {
        return access(this.path.to_cstring(), $R_OK) >= 0
    }
    is_writable(): bool {
        return access(this.path.to_cstring(), $W_OK) >= 0
    }
    is_executable(): bool {
        return access(this.path.to_cstring(), $X_OK) >= 0
    }
    is_dir(): bool {
        let st_mode_offset = (this.stat_struct + 24) as int*
        let is_dir = (st_mode_offset[0] and 0o0170000) == 0o0040000
        return is_dir
    }
    delete(){
        unlink(this.path.to_cstring())
    }
}