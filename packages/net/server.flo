import exit in "@flo/core"
import accept, read, AF_INET, SOCK_STREAM in "@flo/sys"
import "socket"
import "response"
import "request"
type RequestHandler = (Request, Response)=>void
class Server {
    socket: Socket
    response: Response
    request: Request
    constructor(port: int, address: string = ""){
        this.socket = new Socket(AF_INET, SOCK_STREAM, 0)
        this.socket.bind(port, address)
        this.socket.listen()
        this.response = new Response(-1)
        this.request = new Request()
    }
    accept_connection(){
        let cli = new i8[16]
        let cli_len = 4
        let connfd = accept(this.socket.sockfd, cli, &cli_len)
        if connfd < 0 {
            exit("Error Accepting connection")
        }
        let size = read(connfd, this.request.raw_buffer, MAX_BUFFSIZE)
        this.request.set_size(size)
        this.response.set_connection(connfd)
    }
    listen(handler: RequestHandler){
        while true {
            this.accept_connection()
            handler(this.request, this.response)
        }
    }
    close(){
        this.socket.close()
    }
    destroy(){
        this.socket.destroy()
    }

}