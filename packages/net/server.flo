import exit, i8 from "@flo/core"
import accept, read, AF_INET, SOCK_STREAM from "@flo/sys"
import "socket"
import "response"
import "request"
type RequestHandler = (Request, Response)=>void
class Server {
    socket: Socket
    response: Response
    request: Request
    fnc constructor(port: int, address: string = ""){
        this.socket = new Socket(AF_INET, SOCK_STREAM, 0)
        this.socket.bind(port, address)
        this.socket.listen()
        this.response = new Response(-1)
        this.request = new Request()
    }
    fnc accept_connection(){
        cli: i8[16]
        cli_len = 4
        connfd = accept(this.socket.sockfd, &cli[0], &cli_len)
        if connfd < 0 {
            exit("Error Accepting connection")
        }
        size = read(connfd, this.request.raw_buffer, MAX_BUFFSIZE)
        this.request.set_size(size)
        this.response.set_connection(connfd)
    }
    fnc listen(handler: RequestHandler){
        while 1 {
            this.accept_connection()
            handler(this.request, this.response)
        }
    }
    fnc close(){
        this.socket.close()
    }
    fnc destroy(){
        this.socket.destroy()
    }

}