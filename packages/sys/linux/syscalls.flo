/* IO */
fnc read(fd: int, buff: byte*, size: int): int {
    return syscall(0x00, fd, buff, size)
}
fnc write(fd: int, buff: byte*, size: int): int {
    return syscall(0x01, fd, buff, size)
}
fnc open(filename: byte*, flags: int): int {
    return syscall(0x02, filename, flags)
}
fnc close(fd: int): int {
    return syscall(0x03, fd)
}
fnc lstat(filename: byte*, stat_struct: byte*): int {
    return syscall(0x06, filename, stat_struct)
}
fnc lseek(fd: int, offset: int, whence: int): int {
    return syscall(0x08, fd, offset, whence)
}
fnc access(filename: byte*, mode: int): int {
    return syscall(0x15, filename, mode)
}
fnc nanosleep(req: byte*, rem: byte*): int {
    return syscall(0x23, req, rem) 
}
/* net */
fnc socket(name: int, type: int, protocol: int): int {
    return syscall(0x29, name, type, protocol)
}
fnc connect(sockfd: int, socketaddr_in: byte*, size: int): int {
    return syscall(0x2a, sockfd, socketaddr_in, size)
}
fnc accept(sockfd: int, socketaddr_in: byte*, size_ptr: int*): int {
    return syscall(0x2b, sockfd, socketaddr_in, size_ptr)
}
fnc bind(sockfd: int, socketaddr_in: byte*, size: int): int {
    return syscall(0x31, sockfd, socketaddr_in, size)
}
fnc listen(sockfd: int, backlog: int): int {
    return syscall(0x32, sockfd, backlog)
}
fnc fcntl(fd: int, cmd: int, arg: int): int {
    return syscall(0x37, fd, cmd, arg)
}
fnc _exit (error_code: int){
    syscall(0x3c, error_code)
}
fnc rename(oldname: byte*, newname: byte*): int {
    return syscall(0x52, oldname, newname)
}
fnc unlink(pathname: byte*): int {
    return syscall(0x57, pathname)
}
/* IO consts */
const O_RDONLY = 0
const O_WRONLY = 1
const O_RDWR = 2
const O_CREAT = 100
const R_OK = 4		/* Test for read permission.  */
const W_OK = 2		/* Test for write permission.  */
const X_OK = 1		/* Test for execute permission.  */
const F_OK = 0      /* Test if file exists */
const O_NONBLOCK = 2048

const F_SETFL = 4
const F_GETFL = 3
/** SEEKS **/
const SEEK_SET = 0 
const SEEK_CUR = 1
const SEEK_END = 2

/* net consts */
/* Socket Framilies */
const AF_UNSPEC = 0 /* Unspecified Family */
const AF_INET = 2 /* IPV4*/
const AF_IPX = 6 /* IPX/SPX */
const AF_APPLETALK = 16 /* AppleTalk */
const AF_NETBIOS = 17 /* NetBIOS */
const AF_INET6 = 23 /* IPV6 */
const AF_IRDA = 23 /* IrDA (Infrared) */
const AF_BTH = 31 /* Bluetooth */
/* Socket types */
const SOCK_STREAM = 1 /* TCP & AF_INET or AF_INET6 */
const SOCK_DGRAM = 2 /* UDP & AF_INET or AF_INET6 */
const SOCK_RAW = 3 /* Header manipulation */
const SOCK_RDM = 4 /* Reliable multicast programming */
const SOCK_SEQPACKET = 5 /* Pseudo-stream packets */
