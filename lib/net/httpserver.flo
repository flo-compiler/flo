import accept, close, AF_INET, SOCK_STREAM, SOL_SOCKET, SO_REUSEADDR, SO_REUSEPORT, SOL_TCP, TCP_NODELAY in "@sys/lib"
import "socket"
import "uri"
class HTTPRequestStream {
    private conn: int
    constructor(this, conn: int){
        this.conn = conn
    }
    write(this, data: String): HTTPRequestStream {
        write(this.conn, data.get_bytes(), data.length)
        return this
    }
    read(this): String {
        let recieved_buff: u8[1024]
        let request_string = String.with_capacity(recieved_buff.size)
        while true {
            let recieved_size = read(this.conn, &recieved_buff[0], recieved_buff.size)
            request_string.append_bytes_length(&recieved_buff[0], recieved_size)
            if (recieved_size < recieved_buff.size) break
        }
        return request_string
    }
    close(this){   
        close(this.conn)
        del this
    }
}
class HTTPServer {
    private done: bool
    private socket: Socket
    constructor(this, socket: Socket){
        this.done = true
        this.socket = socket
    }
    public bind(address = "localhost"): HTTPServer {
        let url = URI.parse(address)
        let socket = new Socket(AF_INET, SOCK_STREAM, 0)
        let optval = 1
        socket.set_opt(SOL_SOCKET, SO_REUSEADDR, &optval as u8*, 4)
        socket.set_opt(SOL_SOCKET, SO_REUSEPORT, &optval as u8*, 4)
        socket.bind(url.hostname, url.port)
        del url
        return new HTTPServer(socket)
    }
    private next(this): HTTPRequestStream {
        let cli: u8[16]
        let cli_len = 4
        let connfd = accept(this.socket.sockfd, &cli[0], &cli_len)
        if connfd < 0 {
            perror("Accepting connection")
            return null
        }
        return new HTTPRequestStream(connfd)
    }
    private  __iter__(this): HTTPServer {
        this.socket.listen()
        this.done = false
        return this
    }
    public destroy(this){
        this.socket.close()
        this.done = true
        this.socket.destroy()
    }
}