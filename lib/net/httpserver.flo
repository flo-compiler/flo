import accept, AF_INET, SOCK_STREAM in "@sys/lib"
import "socket"
import "response"
import "request"
type RequestHandler = (Request, Response) -> void
class HTTPServer {
    private socket: Socket
    private response: Response
    private request: Request
    constructor(this, port: uint, address: string = ""){
        this.socket = new Socket(AF_INET as int, SOCK_STREAM as int, 0)
        this.socket.bind(port, address)
        this.socket.listen()
        this.response = new Response(-1)
        this.request = new Request()
    }
    private accept_connection(this){
        let cli: u8[16]
        let cli_len = 4
        let connfd = accept(this.socket.sockfd, &cli[0], &cli_len)
        if connfd < 0 {
            println("Error Accepting connection")
            return
        }
        let size = read(connfd, this.request.raw_buffer, MAX_BUFFSIZE)
        this.request.set_size(size)
        this.response.set_connection(connfd)
    }
    public listen(this, handler: RequestHandler){
        while true {
            this.accept_connection()
            handler(this.request, this.response)
        }
    }
    public close(this){
        this.socket.close()
    }
    public destroy(this){
        this.socket.destroy()
    }
}