import accept, lseek, AF_INET, SOCK_STREAM, SEEK_SET in "@sys/lib"
import "socket"
import "uri"
class HTTPClient {
    private socket: Socket
    private method: String
    private uri: URI
    private headers: StringMap<String>
    private _body: String
    constructor(this){
        this.uri = null
        this.method = null
        this._body = null
        this.headers = new StringMap<String>()
        this.header("Accept", "*/*")
        this.header("Connection", "keep-alive")
    }
    get(this, url: String): HTTPClient {
        this.socket = new Socket(AF_INET, SOCK_STREAM, 0)
        this.method = "GET"
        this.set_uri(url)
        return this
    }
    post(this, url: String): HTTPClient {
        this.method = "POST"
        this.set_uri(url)
        return this
    }
    body(this, body: String): HTTPClient {
        this._body = body
        return this
    }
    private set_uri(this, url: String){
        this.uri = URI.parse(url)
        this.header("Host", this.uri.hostname)
    }
    private build_request_string(this): String {
        let request_string = String.with_capacity(10)
        request_string += this.method
        request_string.append_bytes_length(" ", 1)
        request_string += this.uri.path
        request_string.append_bytes_length("\r\n", 2)
        for header in this.headers {
            request_string += header.key
            request_string.append_bytes_length(": ", 2)
            request_string += header.value
            request_string.append_bytes_length("\r\n", 2)
        }
        if (this._body != null){
            request_string += this._body
            request_string.append_bytes_length("\r\n", 2)
        }
        return request_string
    }
    public header(this, key: String, value: String): HTTPClient {
        this.headers[key] = value
        return this
    }
    public send(this): String {
        lseek(this.socket.sockfd, 0, SEEK_SET)
        this.socket.connect(this.uri.hostname, this.uri.port)
        let request_string = this.build_request_string()
        let buff: u8[1024]
        let response_string = String.with_capacity(buff.size)
        let recieved = 0
        if write(this.socket.sockfd, request_string.get_bytes(), request_string.length) >= 0 {
            while (recieved = read(this.socket.sockfd, &buff[0], buff.size)) != 0 {
                response_string.append_bytes_length(&buff[0], recieved)
            }
        }
        del request_string
        return response_string
    }
}
