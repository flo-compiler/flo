import access, F_OK in "@sys/lib"
// ------- File -------
fnc fopen(path: u8*, mode: u8*): int
fnc fclose(stream: int)
fnc fread(buf: u8*, size: uint, nmemb: uint, stream: int): uint
fnc fwrite(buf: u8*, size: uint, nmemb: uint, stream: int): uint
class File {
    fd: int
    constructor(this, fd: int){
        this.fd = fd
    }
    public open_for_reading(path: string): File {
        let fd = fopen(path.to_cstring(), "r")
        if fd == null return null
        return new File(fd)
    }
    public open_for_writing(path: string): File {
        let fd = fopen(path.to_cstring(), "wb")
        if fd == null return null
        return new File(fd)
    }
    public read_all(this): string {
        let size = 0
        let allocated_mem = new u8*(size)
        let buffer: u8[1024]
        while true {
            let read_len = fread(&buffer[0], 1, buffer.size, this.fd)
            if read_len == 0 {
                return new string(allocated_mem, size)
            }
            let prev_size = size
            size += read_len
            allocated_mem = allocated_mem.resize(size)
            (allocated_mem + prev_size).copy_from(&buffer[0], read_len)
        }
        return null
    }
    public write_bytes_length(this, buffer: u8*, length: uint): uint {
        return fwrite(buffer, 1, length, this.fd)
    }
    public write_string(this, s: string): uint {
        return fwrite(s.get_bytes(), 1, s.length, this.fd)
    }
    public exists(path: string): bool {
        return access(path.to_cstring(), F_OK) == 0
    }
    public close(this){
        fclose(this.fd)
    }
}