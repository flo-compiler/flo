import access, F_OK in "@sys/lib"
// ------- File -------
fnc fopen(path: i8*, mode: i8*): int
fnc fclose(stream: int)
fnc fread(buf: i8*, size: int, nmemb: int, stream: int): int
class File {
    fd: int
    constructor(this, fd: int){
        this.fd = fd
    }
    public open_for_reading(path: string): File {
        let fd = fopen(path.to_cstring(), "r")
        if fd == null return null
        return new File(fd)
    }
    public read_all(this): string {
        let size = 0
        let allocated_mem = new i8*(size)
        while true {
            let buffer: i8[1024]
            let read_len = fread(&buffer[0], 1, 1024, this.fd)
            if read_len == 0 {
                return new string(allocated_mem, size)
            }
            let prev_size = size
            size += read_len
            allocated_mem = allocated_mem.resize(size)
            (allocated_mem + prev_size).copy_from(&buffer[0], read_len)
        }
        return null
    }
    public exists(path: string): bool {
        return access(path.to_cstring(), F_OK) == 0
    }
    public close(this){
        fclose(this.fd)
    }
}