const STDIN: int = 0
const STDOUT: int = 1
const STDERR: int = 2
/*@extern*/
fnc strlen(str: u8*): uint
fnc write(fc: int, buf: u8*, len: uint): uint
fnc read(fd: int, buff: u8*, size: uint): uint 
// ----- functions -----
fnc print(str: String){
    write(STDOUT, str.get_bytes(), str.length)
}
fnc println(str: String){
    print(str)
    write(STDOUT, "\n", 1)
}
fnc eprint(str: String){
    write(STDERR, str.get_bytes(), str.length)
}
fnc eprintln(str: String){
    eprint(str)
    write(STDERR, "\n", 1)
}
fnc input(): String {
    let char: u8
    let string = ""
    while true {
        read(STDIN, &char, 1)
        if char == '\n' break
        string.append_byte(char)
    }
    return string
}
// ----- String -------
class String {
    private buffer: u8*
    public length: uint
    private capacity: uint
    constructor(this, data: u8*, len: uint){
        this.buffer = data
        this.length = len
        this.capacity = len
    }
    private __add__(this, data: String): String {
        let new_str_len = this.length + data.length
        let new_buffer = new u8*(new_str_len)
        new_buffer.copy_from(this.buffer, this.length)
        let trailing_buffer = new_buffer + this.length
        trailing_buffer.copy_from(data.buffer, data.length)
        return new String(new_buffer, new_str_len)   
    }
    private __adda__(this, other: String): String {
        this.append_bytes_length(other.get_bytes(), other.length)
        return this
    }
    private __getitem__(this, index: uint): String {
        let new_buffer = new u8*(1)
        new_buffer[0] = this.buffer[index]
        return new String(new_buffer, 2)
    }
    private __ne__(this, other: String): bool {
        return !(this.__eq__(other))
    }
    private __eq__(this, other: String): bool {
        if this.length != other.length return false
        return this.buffer.compare(other.buffer, this.length) == 0
    }
    private __in__(this, other: String): bool {
        return this.find(other) != -1
    }
    private __del__(this){
        del this.buffer
    }
    public find(this, search: String, start = 0): int {
        let end = this.length - search.length
        for let index = start; index <= end; index++ {
            if (search.buffer[0] == this.buffer[index]) {
                if (search.buffer.compare(this.buffer + index, search.length) == 0) {
                    return index as int
                }
            }
        }
        return -1
    }
    public substring (this, start: int, length: uint): String {
        let new_str_buff = new u8*(length)
        new_str_buff.copy_from(this.buffer + start, length)
        return new String(new_str_buff, length)
    }
    public get_byte(this, index: uint): u8 {
        return (this.buffer[index])
    }
    public get_bytes(this): u8* {
        return this.buffer
    }
    public replace(this, val: String, repl: String): String {
        let idx = this.find(val)
        if idx >= 0 {
            let nlen = this.length - val.length + repl.length
            let nbuff = new u8*(nlen)
            nbuff.copy_from(this.buffer, idx as uint)
            (&nbuff[idx]).copy_from(repl.buffer, repl.length)
            (&nbuff[idx + repl.length]).copy_from(&this.buffer[idx + val.length], this.length - (idx + val.length))
            return new String(nbuff, nlen)
        } 
        return this
    }
    public to_cstring(this): u8* {
        let c_string = new u8*(this.length + 1)
        c_string.copy_from(this.buffer, this.length)
        c_string[this.length] = '\0'
        return c_string
    }
    public ends_with(this, suffix: String): bool {
        if (this.length < suffix.length) return false
        let end_buff = this.buffer + this.length - suffix.length
        return end_buff.compare(suffix.buffer, suffix.length) == 0
    }
    public starts_with(this, preffix: String): bool {
        if (this.length < preffix.length) return false
        return this.buffer.compare(preffix.buffer, preffix.length) == 0
    }
    public from_cstring(str: u8*): String {
        let len = strlen(str)
        let buf = new u8*(len)
        buf.copy_from(str, len)
        return new String(buf, len)
    }
    public from_bytes(bytes: u8*, len: uint): String {
        let buf = new u8*(len)
        buf.copy_from(bytes, len)
        return new String(buf, len)
    }
    public with_capacity(capacity: uint): String {
        let buffer = new u8*(capacity)
        let str = new String(buffer, 0)
        str.capacity = capacity
        return str
    }
    public append_byte(this, byte: u8){
        let required_capacity = this.length + 1
        this.ensure_capacity(required_capacity)
        this.buffer[this.length] = byte
        this.length += 1
    }
    public ensure_capacity(this, capacity: uint){
        if (this.capacity < capacity){
            this.buffer = this.buffer.resize(capacity)
            this.capacity = capacity
        }
    }
    public append_bytes_length(this, bytes: u8*, length: uint){
        let required_capacity = this.length + length
        this.ensure_capacity(required_capacity)
        (this.buffer + this.length).copy_from(bytes, length)
        this.length += length
    }
}
// ------- Range -------
class RangeIterator {
    private done: bool
    private pos: int
    private end: int
    constructor(this, pos: int, end: int){
        this.pos = pos
        this.end = end
    }
    private next(this): int {
        this.done = this.pos >= this.end
        return this.pos++
    }
}
class Range {
    private start: int
    private end: int
    constructor(this, start: int, end: int){
        this.start = start
        this.end = end
    }
    private __in__(this, num: int): bool {
        return num >= this.start and num < this.end
    }
    private __iter__(this): RangeIterator{
        return new RangeIterator(this.start, this.end)
    }
}
// ----- Array -------
class Array <T> {
    public buffer: T*
    public length: uint
    public capacity: uint
    constructor(this, capacity: uint){
        this.length = 0
        this.capacity = capacity
        this.buffer = new T*(capacity)
    }
    private resize(this){
        this.capacity *= 2
        this.buffer = this.buffer.resize(this.capacity)
    }
    private __iter__(this): ArrayIterator<T> {
        return new ArrayIterator<T>(this.buffer, this.length)
    } 
    private __sl__(this, element: T){
        if (this.length >= this.capacity) this.resize()
        this.buffer[this.length++] = element
    }
    private __setitem__(this, index: uint, value: T){
        this.buffer[index] = value
    }
    private __getitem__(this, index: uint): T {
        return this.buffer[index]
    }
    private __add__(this, other: T[]): T[]{
        let arr: T[] = []
        arr.ensure_capacity(this.length + other.length)
        arr.buffer.copy_from(this.buffer, this.length)
        arr.length = this.length
        arr.__adda__(other)
        return arr
    }
    private __adda__(this, other: T[]): T[]{
        this.ensure_capacity(this.length + other.length)
        (this.buffer + this.length).copy_from(other.buffer, other.length)
        this.length += other.length
        return this as T[]
    }
    private __neq__(this, other: T[]): bool {
        return !this.__eq__(other)
    }
    private __eq__(this, other: T[]): bool {
        if this.length != other.length {
            return false
        } else {
           for let i = 0; i < this.length; i++ {
               if this[i] != other[i] return false
           }
        }
        return true
    }
    private __in__(this, element: T): bool {
        return this.find(element) != -1
    }    
    private __del__(this){
        del this.buffer
    }
    public pop(this): T {
        return this.buffer[--this.length]
    }
    public ensure_capacity(this, capacity: uint){
        while this.capacity < capacity {
            this.resize()
        }
    }
    public find(this, search: T): int {
        for let i: int = 0; i < this.length; i++ {
            if this.buffer[i] == search return i
        }
        return -1
    }
}
class ArrayIterator<T> {
    private done: bool
    private idx: uint
    private end: uint
    private bytes: T*
    constructor(this, bytes: T*, end: uint){
        this.done = false
        this.idx = 0
        this.bytes = bytes
        this.end = end
    }
    private next(this): T {
        let next_elem = this.bytes[this.idx++]
        this.done = this.idx > this.end
        return next_elem
    }
}
// ----- Map -------
class MapEntry<T, U> {
    public key: T
    public value: U
    constructor(this, key: T, value: U){
        this.key = key
        this.value = value
    }
}
class Map<T, U> {
    private entries: MapEntry<T, U>*
    private size: uint
    public length: uint
    constructor(this){
        let initial_capacity = 256
        this.entries = new MapEntry<T, U>*(initial_capacity)
        for let i = 0; i < initial_capacity; i++ {
            this.entries[i] = null
        }
        this.size = initial_capacity
        this.length = 0
    }
    private hash_fnc(this, key: T): uint {
        let str = "$key"
        let hash = 0
        for let i = 0; i < str.length; ++i {
            hash = (hash << 1) + str.get_byte(i)
        }
        del str
        return hash
    }
    private resize(this){
        let old_entries: MapEntry<T, U>*(this.size)
        let old_size = this.size
        old_entries.copy_from(this.entries, this.size)
        this.size *= 2
        this.length = 0
        this.entries = this.entries.resize(this.size)
        for let i = 0; i < this.size; i++{
            this.entries[i] = null
        }
        for let i = 0; i < old_size; i++ {
            let entry = old_entries[i]
            if (entry != null) this.__setitem__(entry.key, entry.value)
        }
    }
    private __setitem__(this, key: T, value: U){
        let ratio = this.length / (this.size as f64)
        if (ratio > 0.75) this.resize()
        let hash = this.hash_fnc(key) % this.size
        let should_add = true
        while this.entries[hash] != null {
            if this.entries[hash].key == key {
                should_add = false
                break
            }
            hash = (hash + 1) % this.size
        }
        if should_add {
            this.length++
        }
        this.entries[hash] = new MapEntry<T, U>(key, value)
    }
    private __getitem__(this, key: T): U {
        let hash = this.hash_fnc(key) % this.size
        while this.entries[hash] != null {
            if this.entries[hash].key == key
                break
            else
                hash = (hash + 1) % this.size
        }
        if this.entries[hash] != null
            return this.entries[hash].value
        return null
    }
    private __iter__(this): MapIterator<T, U> {
        return new MapIterator<T, U>(this.entries, this.size, this.length)
    }
    private __del__(this){
        del this.entries
    }
}
class MapIterator<T, U> {
    private done: bool
    private entries: MapEntry<T, U>*
    private remaining_size: uint
    private items_remaining: uint
    constructor(this, entries: MapEntry<T, U>*, remaining_size: uint, items_remaining: uint){
        this.done = false
        this.entries = entries
        this.remaining_size = remaining_size
        this.items_remaining = items_remaining
    }
    private next(this): MapEntry<T, U> {
        while this.remaining_size-- > 0 {
            this.entries++
            if this.entries[-1] != null break
        }
        this.done = this.items_remaining-- <= 0
        return this.entries[-1]
    }
}