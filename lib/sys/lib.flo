
const ARCH_WORD_SIZE = 64
/* IO */
fnc open(filename: u8*, flags: int, mode: uint): int 
fnc close(fd: int): int 
fnc lstat(filename: u8*, stat_struct: u8*): int 
fnc lseek(fd: int, offset: int, whence: int): int 
fnc access(filename: u8*, mode: int): int 
fnc nanosleep(req: u8*, rem: u8*): int 
/* net */
fnc socket(name: int, socktype: int, protocol: int): int 
fnc connect(sockfd: int, socketaddr_in: u8*, size: uint): int 
fnc accept(sockfd: int, socketaddr_in: u8*, size_ptr: uint*): int 
fnc bind(sockfd: int, socketaddr_in: u8*, size: uint): int 
fnc listen(sockfd: int, backlog: int): int
fnc fcntl(fd: int, cmd: int, arg: int): int 
fnc execve(filename: u8*, argv: u8**, envp: u8**): int
fnc exit (error_code: int)
fnc getcwd(buf: u8*, size: int): int
fnc rename(oldname: u8*, newname: u8*): int 
fnc unlink(pathname: u8*): int 

/* IO consts */
const O_RDONLY = 0o0
const O_WRONLY = 0o01
const O_RDWR = 0o2
const O_CREAT = 0o100
const O_NONBLOCK = 0o4000

const R_OK: int = 4 /* Test for read permission.  */
const W_OK: int = 2 /* Test for write permission.  */
const X_OK: int = 1 /* Test for execute permission.  */
const F_OK: int = 0 /* Test if file exists */

const F_SETFL = 4
const F_GETFL = 3
/** SEEKS **/
const SEEK_SET = 0 
const SEEK_CUR = 1
const SEEK_END = 2

/* net consts */
/* Socket Framilies */
const AF_UNSPEC = 0 /* Unspecified Family */
const AF_INET = 2 /* IPV4*/
const AF_IPX = 6 /* IPX/SPX */
const AF_APPLETALK = 16 /* AppleTalk */
const AF_NETBIOS = 17 /* NetBIOS */
const AF_INET6 = 23 /* IPV6 */
const AF_IRDA = 23 /* IrDA (Infrared) */
const AF_BTH = 31 /* Bluetooth */
/* Socket types */
const SOCK_STREAM = 1 /* TCP & AF_INET or AF_INET6 */
const SOCK_DGRAM = 2 /* UDP & AF_INET or AF_INET6 */
const SOCK_RAW = 3 /* Header manipulation */
const SOCK_RDM = 4 /* Reliable multicast programming */
const SOCK_SEQPACKET = 5 /* Pseudo-stream packets */
