

stmts: ln* stmt (newlines stmt)*

newlines: ln+

block: newlines (lbrace stmts rbrace | stmt)

stmt: import_stmt
      | if_stmt
      | for_stmt
      | foreach_stmt
      | while_stmt
      | fnc_def_stmt
      | change_flow_stmt
      | expr
      
import_stmt: import (identifier_list from)? string

if_stmt: if expr block newlines (else (if_stmt | block)) *

for_stmt: for (expr semicolumn expr semicolumn expr) block 

foreach_stmt: foreach (identifier in expr) block

while_stmt: while expr block

fnc_def_stmt: fnc identifier lpar param_list rpar column composite_type arrow (block | expr)

param_list: identifier (comma identifier)* 

param_list: (identifier column composite_type (comma identifier column composite_type)* )?

change_flow_stmt: return expr?
                  | continue
                  | break

expr: bit_expr (("as" | "is") composite_type)?

bit_expr: comp_expr (("and" | "or" | xor | in | sl | sr) comp_expr)?

comp_expr: exclamation_mark comp_expr 
         | arith_expr (comp_op arith_expr)?

arith_expr: arith_expr1 (( plus | minus ) eq? arith_expr1)?

arith_expr1: unary_expr ((times | div | mod | exp ) eq? unary_expr)?


unary_expr: (plus | minus ) unary_expr
      | (plus_plus | minus_minus) unary_expr
      | value_expr

value_expr: expr_value_op (
       | (plus_plus | minus_minus)
       | ((column composite_type)? eq (expr))
       | "as" composite_type
       )?

expr_list: (expr (comma expr)*)?
expr_value_op: expr_value ((lbracket expr lbracket) | (lpar expr_list rpar))*
expr_value:   number
            | identifier
            | string
            | rbracket expr_list lbracket
            | lbrace ((string col expr) (comma (string col expr))*)? rbrace
            | lpar expr rpar

composite_type:  type (lbracket expr rbracket)*
              |  lbrace composite_type rbrace

type:
    | "float"
    | "int"
    | "bool"
    | "str"
    | "void"


## tokens
lpar: "("
rpar: ")"
lbracket: "["
rbracket: "]"
lbrace: "{"
rbrace: "}"
plus: "+"
minus: "-"
eq: "="
times: "*"
div: "/"
exp: "^"
column: ":"
mod: "%"
question_mark: "?"
exclamation_mark: "!"
identifier: ([a-zA-Z]|_)[A-Za-z | 0-9 | _]*
sl: "<<"
sr: ">>"
semicolumn: ";"
comma: ","
ln: "\n"
number: /[0-9]+([0-9]*)+(.?)+([0-9]*)/
string: /"(*?)"/
      | /'(*?)'/
plus_plus: "++"
minus_minus: "--"
xor: "xor"



## keywords 
if: "if"
else: "else"
for: "for"
while: "while"
fnc: "fnc"
import: "import"
foreach: "foreach"
in: "in"

          

comp_op: ">"
       | "<"
       | "=="
       | ">="
       | "<="
       | "!="

bin_op: plus
      | minus
      | times
      | div
      | mod
      | exp

access: "pub"
      | "priv"



