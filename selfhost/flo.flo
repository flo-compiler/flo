import File from "@flo/io"
import "error"
import "lexer"
// import "parser"
// import "analyzer"
// import "codegen"
import "debug"

fnc strlen(str: i8*): int
fnc string_from_cstring(str: i8*): string {
    return new string(str, strlen(str))
}
fnc parse_args(size: int, args: i8**): Array<string> {
    arr: Array<string> = []
    for i = 0; i < size; i++ {
        arr << string_from_cstring(args[i])
    }
    return arr
}
fnc help(){
    println("Usage: flo <path> [OPTIONS]\n")
    println("Options:\n -h, --help\t\t\tShow this help message.\n --print-tokens\t\t\tPrint generated Tokens\n --print-ast\t\t\tPrint generated AST.\n --print-llvm\t\t\tPrint generated LLVM-IR.\n -o <file>\t\t\tPlace the output into <file>.\n --no-output\t\t\tCompile with no output.\n --opt-level=OPT_LEVEL\n \t\t\t\tSpecify the compiler's optimization level which is a\n \t\t\t\tvalue from 0-3.\n -e, --execute\t\t\tExecute file after compiling.\n -v, --version\t\t\tShow version.")
}
fnc flag(args: Array<string>, name: string): bool {
    return name in args
}
fnc main(size: int, ptr: i8**): int {
    args = parse_args(size, ptr)
    if args.length >= 2 {
        errors: Array<FloError> = []
        if flag(args, "-v") or flag(args, "--version"){
            println("v@0.01seflhost")
            return 0
        }
        if flag(args, "-h") or flag(args, "--help"){
            help()
            return 0
        }
        filename = args[1]
        file = new File(filename)
        text = file.read_as_string()
        /***** Lexing ******/
        lexer = new Lexer(text, errors)
        tokens = lexer.tokenize()
        print_errors(filename, errors, text)
        if flag(args, "--print-tokens")
            print_tokens(tokens, text)
        /***** Parsing *****/
        // parser = new Parser(tokens, errors)
        // module_node = parser.parse()
        // print_errors(filename, errors, text)
        /**** Analyzing ****/
        // analyzer = new Analyzer(module_node, errors)
        // program = analyzer.typecheck()
    } else help()
    return 0
}