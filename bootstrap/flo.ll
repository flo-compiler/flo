; ModuleID = 'src/main.flo'
source_filename = "src/main.flo"
target triple = "x86_64-pc-linux-gnu"

%string = type <{ ptr, ptr, i64, i64 }>
%Array_string_ = type <{ ptr, ptr, i64, i64 }>
%CodeGen = type <{ ptr, ptr, ptr, ptr, ptr, i1, ptr, ptr, ptr, ptr, ptr }>
%TypeChecker = type <{ ptr, i64, ptr, ptr, ptr, ptr, ptr, i1, i1, ptr }>
%Compiler = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_FloFile_ = type <{ ptr, ptr, i64, i64 }>
%Array_FloError_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_FileId_ = type <{ ptr, i64, i64 }>
%Program = type <{ i1, ptr }>
%Array_Module_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_Generic_ = type <{ ptr, i64, i64 }>
%Module = type <{ i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Map_string_LLVMValueRef_ = type <{ ptr, i64, i64 }>
%Map_string_CGClassType_ = type <{ ptr, i64, i64 }>
%Map_string_CGEnumType_ = type <{ ptr, i64, i64 }>
%Array_Enum_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Enum_ = type <{ i1, i64, i64, ptr }>
%Array_Class_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Class_ = type <{ i1, i64, i64, ptr }>
%Array_ConstDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ConstDeclaration_ = type <{ i1, i64, i64, ptr }>
%Array_VarDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_VarDeclaration_ = type <{ i1, i64, i64, ptr }>
%Array_Function_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Function_ = type <{ i1, i64, i64, ptr }>
%MapIterator_string_LLVMValueRef_ = type <{ i1, ptr, i64, i64 }>
%MapIterator_string_CGClassType_ = type <{ i1, ptr, i64, i64 }>
%MapEntry_string_CGClassType_ = type <{ ptr, ptr }>
%MapIterator_string_CGEnumType_ = type <{ i1, ptr, i64, i64 }>
%MapEntry_string_CGEnumType_ = type <{ ptr, ptr }>
%ArrayIterator_Module_ = type <{ i1, i64, i64, ptr }>
%Array_Var_ = type <{ ptr, ptr, i64, i64 }>
%Class = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, i1 }>
%Array_ClassField_ = type <{ ptr, ptr, i64, i64 }>
%Array_ClassMethod_ = type <{ ptr, ptr, i64, i64 }>
%Enum = type <{ ptr, ptr, ptr, ptr }>
%Array_EnumField_ = type <{ ptr, ptr, i64, i64 }>
%EnumField = type <{ ptr, ptr, ptr }>
%ScopeId = type <{ i64, i64 }>
%Array_Scope_ = type <{ ptr, ptr, i64, i64 }>
%Array_Const_ = type <{ ptr, ptr, i64, i64 }>
%GeneratedModule = type <{ ptr, ptr, ptr, ptr }>
%FloFile = type <{ ptr, ptr }>
%FloError = type <{ i64, ptr, ptr }>
%FloRange = type <{ i64, i64, i64, i64 }>
%Range = type <{ i64, i64 }>
%RangeIterator = type <{ i1, i64, i64 }>
%MapEntry_string_FileId_ = type <{ ptr, ptr }>
%File = type <{ ptr, i64 }>
%Array_Token_ = type <{ ptr, ptr, i64, i64 }>
%Lexer = type <{ i8, ptr, ptr, i64, i64, i64 }>
%Token = type <{ i64, ptr }>
%Array_Array_Token__ = type <{ ptr, ptr, i64, i64 }>
%Array_uint_ = type <{ ptr, ptr, i64, i64 }>
%StringBuilder = type <{ ptr, ptr, i64, ptr, i64 }>
%StrToken = type <{ i64, ptr, ptr, ptr, ptr }>
%IntToken = type <{ i64, ptr, i64 }>
%IdentifierToken = type <{ i64, ptr, ptr }>
%FloatToken = type <{ i64, ptr, double }>
%CharToken = type <{ i64, ptr, i8 }>
%Array_ImportClause_ = type <{ ptr, ptr, i64, i64 }>
%Array_ImportNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_VarDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%Array_EnumNodeField_ = type <{ ptr, ptr, i64, i64 }>
%Array_EnumNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_TypeAliasNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_ConstDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%Array_ArgNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_StatementNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_MethodNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_FieldNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_TypeNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_GenericParameterNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_ClassDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_FunctionDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%ModuleAST = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Parser = type <{ ptr, ptr, ptr, i64 }>
%FunctionDeclarationNode = type <{ ptr, ptr, ptr, ptr, i1 }>
%TypeNode = type <{ ptr, i64 }>
%RecordTypeNode = type <{ ptr, i64, ptr, ptr }>
%ClassDeclarationNode = type <{ ptr, ptr, ptr, ptr, ptr }>
%FieldNode = type <{ ptr, i64, ptr, ptr }>
%MethodNode = type <{ ptr, ptr, ptr, i64, ptr, i1, i1 }>
%EnumNode = type <{ ptr, ptr, ptr }>
%EnumNodeField = type <{ ptr, ptr }>
%ImportNode = type <{ ptr, ptr, ptr }>
%ImportClause = type <{ ptr, ptr }>
%TypeAliasNode = type <{ ptr, ptr }>
%BlockNode = type <{ ptr, ptr }>
%FunctionTypeNode = type <{ ptr, i64, ptr, ptr }>
%PointerTypeNode = type <{ ptr, i64, ptr }>
%ArrayTypeNode = type <{ ptr, i64, ptr, ptr }>
%Array_ExpressionNode_ = type <{ ptr, ptr, i64, i64 }>
%StatementNode = type <{ ptr, i64 }>
%ExpressionNode = type <{ ptr, i64, i64 }>
%StringExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%VarDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%NewExpressionNode = type <{ ptr, i64, i64, ptr, i1, ptr }>
%IfStatementNode = type <{ ptr, i64, ptr, ptr, ptr }>
%WhileStatementNode = type <{ ptr, i64, ptr, ptr }>
%ForStatementNode = type <{ ptr, i64, ptr, ptr, ptr, ptr, i64, ptr, ptr }>
%ReturnStatementNode = type <{ ptr, i64, ptr }>
%ConstDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%ArgNode = type <{ ptr, ptr, ptr }>
%IntExpressionNode = type <{ ptr, i64, i64, ptr }>
%FloatExpressionNode = type <{ ptr, i64, i64, ptr }>
%CharExpressionNode = type <{ ptr, i64, i64, ptr }>
%VarAccessExpressionNode = type <{ ptr, i64, i64, ptr }>
%ArrayExpressionNode = type <{ ptr, i64, i64, ptr }>
%CallExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%ExpressionIndexNode = type <{ ptr, i64, i64, ptr, ptr }>
%MemberExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%UnaryExpressionNode = type <{ ptr, i64, i64, i64, ptr }>
%BinaryExpressionNode = type <{ ptr, i64, i64, ptr, i64, ptr }>
%TypeCastExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%TernaryExpressionNode = type <{ ptr, i64, i64, ptr, ptr, ptr }>
%Map_string_VarId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_VarId_ = type <{ ptr, ptr }>
%Scope = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Map_string_EnumId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_EnumId_ = type <{ ptr, ptr }>
%Map_string_Type_ = type <{ ptr, i64, i64 }>
%MapEntry_string_Type_ = type <{ ptr, ptr }>
%Map_string_ClassId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_ClassId_ = type <{ ptr, ptr }>
%Map_string_PropId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_PropId_ = type <{ ptr, ptr }>
%Array_FunctionArg_ = type <{ ptr, ptr, i64, i64 }>
%Array_Statement_ = type <{ ptr, ptr, i64, i64 }>
%Array_Type_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ImportNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_EnumNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_ClassDeclarationNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_TypeAliasNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_ConstDeclarationStatement_ = type <{ i1, i64, i64, ptr }>
%ConstDeclaration = type <{ i64, ptr, ptr, i1 }>
%ArrayIterator_VarDeclarationStatement_ = type <{ i1, i64, i64, ptr }>
%VarDeclaration = type <{ i64, ptr, ptr, i1 }>
%VarId = type <{ i64, i64, i64 }>
%Var = type <{ ptr, ptr, ptr }>
%Expression = type <{ i64, i1, i64, ptr }>
%ArrayIterator_FunctionDeclarationNode_ = type <{ i1, i64, i64, ptr }>
%Function = type <{ ptr, ptr, ptr, ptr, ptr, ptr, i1 }>
%Block = type <{ ptr, i1, i1, i1 }>
%FunctionType = type <{ i64, ptr, ptr, i1 }>
%ReturnStatement = type <{ i64, ptr }>
%TypeId = type <{ i64, i64, i64 }>
%MapIterator_string_Type_ = type <{ i1, ptr, i64, i64 }>
%GenericType = type <{ i64, ptr, ptr, ptr }>
%ObjectType = type <{ i64, ptr }>
%Array_Expression_ = type <{ ptr, ptr, i64, i64 }>
%StringExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%IntrinsicCall = type <{ i64, i1, i64, ptr, i64, ptr }>
%TypeCastExpression = type <{ i64, i1, i64, ptr, ptr }>
%FunctionArg = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%MapIterator_string_PropId_ = type <{ i1, ptr, i64, i64 }>
%PropId = type <{ i64, ptr, i64 }>
%ClassMethod = type <{ ptr, i1, i64, ptr, ptr, ptr, ptr, i1, ptr, i64 }>
%ClassField = type <{ ptr, i1, i64, ptr, ptr, ptr, i64 }>
%Const = type <{ ptr, ptr, ptr }>
%EnumType = type <{ i64, ptr }>
%MemberExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%CallExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%BinaryExpression = type <{ i64, i1, i64, ptr, ptr, i64, ptr }>
%IntType = type <{ i64, i1 }>
%NewExpression = type <{ i64, i1, i64, ptr, ptr, i1, ptr }>
%VarAccessExpression = type <{ i64, i1, i64, ptr, ptr }>
%PointerType = type <{ i64, ptr }>
%ArrayType = type <{ i64, ptr, i64 }>
%ArrayIterator_TypeNode_ = type <{ i1, i64, i64, ptr }>
%ForStatement = type <{ i64, ptr, ptr, ptr, ptr, ptr }>
%UnaryExpression = type <{ i64, i1, i64, ptr, i64, ptr }>
%IfStatement = type <{ i64, ptr, ptr, ptr }>
%WhileStatement = type <{ i64, ptr, ptr }>
%TernaryExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%MapEntry_string_Generic_ = type <{ ptr, ptr }>
%Generic = type <{ i64, ptr }>
%IndexExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%ArrayIterator_StatementNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_ImportClause_ = type <{ i1, i64, i64, ptr }>
%ModuleVarId = type <{ i64, i64, i64, ptr }>
%ArrayIterator_ArgNode_ = type <{ i1, i64, i64, ptr }>
%ArrayExpression = type <{ i64, i1, i64, ptr, ptr }>
%IntExpression = type <{ i64, i1, i64, ptr, i64 }>
%FloatExpression = type <{ i64, i1, i64, ptr, double }>
%ArrayIterator_ExpressionNode_ = type <{ i1, i64, i64, ptr }>
%BooleanExpression = type <{ i64, i1, i64, ptr, i1 }>
%ArrayIterator_Expression_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_Statement_ = type <{ i1, i64, i64, ptr }>
%MapEntry_string_LLVMValueRef_ = type <{ ptr, ptr }>
%ArrayIterator_Type_ = type <{ i1, i64, i64, ptr }>
%Map_string_uint_ = type <{ ptr, i64, i64 }>
%MapEntry_string_uint_ = type <{ ptr, i64 }>
%ArrayIterator_ClassMethod_ = type <{ i1, i64, i64, ptr }>
%CGClassType = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_LLVMValueRef_ = type <{ ptr, ptr, i64, i64 }>
%CGEnumType = type <{ ptr, ptr, ptr }>
%Array_LLVMTypeRef_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_EnumField_ = type <{ i1, i64, i64, ptr }>
%IntrinsicResult = type <{ ptr, ptr }>
%ArrayIterator_LLVMValueRef_ = type <{ i1, i64, i64, ptr }>

@VTablestring = internal global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @string_find, ptr @string_substring, ptr @string_get_byte, ptr @string_get_bytes, ptr @string_replace, ptr @string_to_cstring, ptr @string_ends_with, ptr @string_starts_with }>
@VTableArray_string_ = internal global <{ ptr, ptr }> <{ ptr @Array_string__pop, ptr @Array_string__find }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [28 x i8] c"Usage: %s <path> [OPTIONS]\0A\00", align 1
@2 = private unnamed_addr constant [38 x i8] c" -h, --help\09\09\09Show this help message.\00", align 1
@3 = private unnamed_addr constant [36 x i8] c" --print-ast\09\09\09Print generated AST.\00", align 1
@4 = private unnamed_addr constant [294 x i8] c" --emit <format>\09\09Emit output in a particular format. Options are:\0A  \09\09\09\09\09exe - Generates an executable.\0A  \09\09\09\09\09llvm-ir - Generates a file containing LLVM IR.\0A  \09\09\09\09\09llvm-bc - Generates a file containing LLVM bitcode.\0A  \09\09\09\09\09obj - Generates an object file\0A  \09\09\09\09\09asm - Generates Assembly code.\00", align 1
@5 = private unnamed_addr constant [50 x i8] c" -o <file>\09\09\09Specify file to put the output into.\00", align 1
@6 = private unnamed_addr constant [55 x i8] c" --target <triple>\09\09Compile to specific target triple.\00", align 1
@7 = private unnamed_addr constant [47 x i8] c" -l <lib>\09\09\09Specify a library to link against.\00", align 1
@8 = private unnamed_addr constant [34 x i8] c" -I\09\09\09\09Specify runtime directory.\00", align 1
@9 = private unnamed_addr constant [91 x i8] c" -O OPT_LEVEL \09\09\09Specify the compiler's optimization level which is a\0A \09\09\09\09value from 0-3.\00", align 1
@10 = private unnamed_addr constant [31 x i8] c" -v, --version\09\09\09Show version.\00", align 1
@11 = private unnamed_addr constant [8 x i8] c"\1B[1;31m\00", align 1
@12 = private unnamed_addr constant [22 x i8] c"[Illegal Character]: \00", align 1
@13 = private unnamed_addr constant [17 x i8] c"[Syntax Error]: \00", align 1
@14 = private unnamed_addr constant [13 x i8] c"[IO Error]: \00", align 1
@15 = private unnamed_addr constant [15 x i8] c"[Type Error]: \00", align 1
@16 = private unnamed_addr constant [15 x i8] c"[Name Error]: \00", align 1
@17 = private unnamed_addr constant [10 x i8] c"[Error]: \00", align 1
@18 = private unnamed_addr constant [35 x i8] c"Missing value after '%s' argument.\00", align 1
@19 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@20 = private unnamed_addr constant [15 x i8] c"v0.01@selfhost\00", align 1
@21 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@VTableArray_FloError_ = internal global <{ ptr, ptr }> <{ ptr @Array_FloError__pop, ptr @Array_FloError__find }>
@VTableArray_FloFile_ = internal global <{ ptr, ptr }> <{ ptr @Array_FloFile__pop, ptr @Array_FloFile__find }>
@22 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@VTableCompiler = internal global <{ ptr, ptr, ptr, ptr, ptr }> <{ ptr @Compiler_set_std_path, ptr @Compiler_register_file, ptr @Compiler_set_current_file, ptr @Compiler_print_errors, ptr @Compiler_add_builtins }>
@23 = private unnamed_addr constant [20 x i8] c"/usr/local/flo/lib/\00", align 1
@24 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@25 = private unnamed_addr constant [22 x i8] c"builtins/builtins.flo\00", align 1
@VTableFile = internal global <{ ptr, ptr, ptr, ptr }> <{ ptr @File_read_all, ptr @File_write_bytes_length, ptr @File_write_string, ptr @File_close }>
@26 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@27 = private unnamed_addr constant [19 x i8] c"File '%s', line %d\00", align 1
@28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@29 = private unnamed_addr constant [32 x i8] c"No such file or directory: '%s'\00", align 1
@VTableArray_Token_ = internal global <{ ptr, ptr }> <{ ptr @Array_Token__pop, ptr @Array_Token__find }>
@VTableArray_Array_Token__ = internal global <{ ptr, ptr }> <{ ptr @Array_Array_Token___pop, ptr @Array_Array_Token___find }>
@VTableArray_uint_ = internal global <{ ptr, ptr }> <{ ptr @Array_uint__pop, ptr @Array_uint__find }>
@30 = private unnamed_addr constant [4 x i8] c"and\00", align 1
@31 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@32 = private unnamed_addr constant [4 x i8] c"let\00", align 1
@33 = private unnamed_addr constant [5 x i8] c"else\00", align 1
@34 = private unnamed_addr constant [4 x i8] c"for\00", align 1
@35 = private unnamed_addr constant [6 x i8] c"while\00", align 1
@36 = private unnamed_addr constant [4 x i8] c"fnc\00", align 1
@37 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@38 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@39 = private unnamed_addr constant [7 x i8] c"import\00", align 1
@40 = private unnamed_addr constant [8 x i8] c"private\00", align 1
@41 = private unnamed_addr constant [7 x i8] c"public\00", align 1
@42 = private unnamed_addr constant [10 x i8] c"protected\00", align 1
@43 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@44 = private unnamed_addr constant [4 x i8] c"new\00", align 1
@45 = private unnamed_addr constant [4 x i8] c"del\00", align 1
@VTableStringBuilder = internal global <{ ptr, ptr, ptr, ptr }> <{ ptr @StringBuilder_add_bytes_length, ptr @StringBuilder_append_string, ptr @StringBuilder_add_byte, ptr @StringBuilder_get_string }>
@46 = private unnamed_addr constant [4 x i8] c"033\00", align 1
@47 = private unnamed_addr constant [4 x i8] c"x1b\00", align 1
@48 = private unnamed_addr constant [6 x i8] c"u001b\00", align 1
@49 = private unnamed_addr constant [24 x i8] c"Illegal character: '%s'\00", align 1
@VTableArray_ImportClause_ = internal global <{ ptr, ptr }> <{ ptr @Array_ImportClause__pop, ptr @Array_ImportClause__find }>
@VTableArray_ImportNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_ImportNode__pop, ptr @Array_ImportNode__find }>
@VTableArray_VarDeclarationStatement_ = internal global <{ ptr, ptr }> <{ ptr @Array_VarDeclarationStatement__pop, ptr @Array_VarDeclarationStatement__find }>
@VTableArray_EnumNodeField_ = internal global <{ ptr, ptr }> <{ ptr @Array_EnumNodeField__pop, ptr @Array_EnumNodeField__find }>
@VTableArray_EnumNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_EnumNode__pop, ptr @Array_EnumNode__find }>
@VTableArray_TypeAliasNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_TypeAliasNode__pop, ptr @Array_TypeAliasNode__find }>
@VTableArray_ConstDeclarationStatement_ = internal global <{ ptr, ptr }> <{ ptr @Array_ConstDeclarationStatement__pop, ptr @Array_ConstDeclarationStatement__find }>
@VTableArray_ArgNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_ArgNode__pop, ptr @Array_ArgNode__find }>
@VTableArray_StatementNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_StatementNode__pop, ptr @Array_StatementNode__find }>
@VTableArray_MethodNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_MethodNode__pop, ptr @Array_MethodNode__find }>
@VTableArray_FieldNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_FieldNode__pop, ptr @Array_FieldNode__find }>
@VTableArray_TypeNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_TypeNode__pop, ptr @Array_TypeNode__find }>
@VTableArray_GenericParameterNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_GenericParameterNode__pop, ptr @Array_GenericParameterNode__find }>
@VTableArray_ClassDeclarationNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_ClassDeclarationNode__pop, ptr @Array_ClassDeclarationNode__find }>
@VTableArray_FunctionDeclarationNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_FunctionDeclarationNode__pop, ptr @Array_FunctionDeclarationNode__find }>
@VTableArray_ExpressionNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_ExpressionNode__pop, ptr @Array_ExpressionNode__find }>
@50 = private unnamed_addr constant [23 x i8] c"Expected an Identifier\00", align 1
@51 = private unnamed_addr constant [13 x i8] c"Expected '='\00", align 1
@52 = private unnamed_addr constant [13 x i8] c"Expected ':'\00", align 1
@53 = private unnamed_addr constant [13 x i8] c"Expected '('\00", align 1
@54 = private unnamed_addr constant [13 x i8] c"Expected ')'\00", align 1
@55 = private unnamed_addr constant [13 x i8] c"Expected '{'\00", align 1
@56 = private unnamed_addr constant [13 x i8] c"Expected '}'\00", align 1
@57 = private unnamed_addr constant [13 x i8] c"Expected ','\00", align 1
@58 = private unnamed_addr constant [13 x i8] c"Expected '<'\00", align 1
@59 = private unnamed_addr constant [13 x i8] c"Expected '>'\00", align 1
@60 = private unnamed_addr constant [14 x i8] c"Expected '->'\00", align 1
@61 = private unnamed_addr constant [4 x i8] c"Map\00", align 1
@62 = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@63 = private unnamed_addr constant [29 x i8] c"Expected an Expression value\00", align 1
@64 = private unnamed_addr constant [29 x i8] c"'%s' has no type information\00", align 1
@65 = private unnamed_addr constant [5 x i8] c"this\00", align 1
@66 = private unnamed_addr constant [20 x i8] c"Expected ':' or '('\00", align 1
@67 = private unnamed_addr constant [80 x i8] c"Illegal expression expected: 'fnc', 'class', 'enum', 'import', 'const' or 'let'\00", align 1
@VTableArray_Scope_ = internal global <{ ptr, ptr }> <{ ptr @Array_Scope__pop, ptr @Array_Scope__find }>
@VTableArray_VarDeclaration_ = internal global <{ ptr, ptr }> <{ ptr @Array_VarDeclaration__pop, ptr @Array_VarDeclaration__find }>
@VTableArray_Var_ = internal global <{ ptr, ptr }> <{ ptr @Array_Var__pop, ptr @Array_Var__find }>
@VTableArray_ConstDeclaration_ = internal global <{ ptr, ptr }> <{ ptr @Array_ConstDeclaration__pop, ptr @Array_ConstDeclaration__find }>
@VTableArray_EnumField_ = internal global <{ ptr, ptr }> <{ ptr @Array_EnumField__pop, ptr @Array_EnumField__find }>
@VTableArray_Enum_ = internal global <{ ptr, ptr }> <{ ptr @Array_Enum__pop, ptr @Array_Enum__find }>
@VTableArray_Const_ = internal global <{ ptr, ptr }> <{ ptr @Array_Const__pop, ptr @Array_Const__find }>
@VTableArray_FunctionArg_ = internal global <{ ptr, ptr }> <{ ptr @Array_FunctionArg__pop, ptr @Array_FunctionArg__find }>
@VTableArray_Statement_ = internal global <{ ptr, ptr }> <{ ptr @Array_Statement__pop, ptr @Array_Statement__find }>
@VTableArray_Type_ = internal global <{ ptr, ptr }> <{ ptr @Array_Type__pop, ptr @Array_Type__find }>
@VTableArray_ClassMethod_ = internal global <{ ptr, ptr }> <{ ptr @Array_ClassMethod__pop, ptr @Array_ClassMethod__find }>
@VTableArray_ClassField_ = internal global <{ ptr, ptr }> <{ ptr @Array_ClassField__pop, ptr @Array_ClassField__find }>
@VTableArray_Class_ = internal global <{ ptr, ptr }> <{ ptr @Array_Class__pop, ptr @Array_Class__find }>
@VTableArray_Function_ = internal global <{ ptr, ptr }> <{ ptr @Array_Function__pop, ptr @Array_Function__find }>
@VTableArray_Module_ = internal global <{ ptr, ptr }> <{ ptr @Array_Module__pop, ptr @Array_Module__find }>
@VTableArray_Expression_ = internal global <{ ptr, ptr }> <{ ptr @Array_Expression__pop, ptr @Array_Expression__find }>
@68 = private unnamed_addr constant [11 x i8] c"(%s) => %s\00", align 1
@69 = private unnamed_addr constant [4 x i8] c"%s*\00", align 1
@70 = private unnamed_addr constant [7 x i8] c"%s[%d]\00", align 1
@71 = private unnamed_addr constant [10 x i8] c"Namespace\00", align 1
@72 = private unnamed_addr constant [7 x i8] c"Record\00", align 1
@73 = private unnamed_addr constant [4 x i8] c"i%d\00", align 1
@74 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@75 = private unnamed_addr constant [4 x i8] c"%s4\00", align 1
@76 = private unnamed_addr constant [4 x i8] c"%s8\00", align 1
@77 = private unnamed_addr constant [5 x i8] c"%s16\00", align 1
@78 = private unnamed_addr constant [5 x i8] c"%s32\00", align 1
@79 = private unnamed_addr constant [5 x i8] c"%s64\00", align 1
@80 = private unnamed_addr constant [6 x i8] c"%s128\00", align 1
@81 = private unnamed_addr constant [4 x i8] c"f32\00", align 1
@82 = private unnamed_addr constant [4 x i8] c"f64\00", align 1
@83 = private unnamed_addr constant [7 x i8] c"record\00", align 1
@84 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@85 = private unnamed_addr constant [13 x i8] c"__generics__\00", align 1
@86 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@87 = private unnamed_addr constant [68 x i8] c"Name '%s' has already been used for another type. consider renaming\00", align 1
@88 = private unnamed_addr constant [41 x i8] c"Generic expects %d parameters but got %d\00", align 1
@89 = private unnamed_addr constant [4 x i8] c"%s_\00", align 1
@90 = private unnamed_addr constant [6 x i8] c"%s_%s\00", align 1
@91 = private unnamed_addr constant [55 x i8] c"Initilializer for global variable has to be a constant\00", align 1
@92 = private unnamed_addr constant [56 x i8] c"Expected type of '%s' but got type of '%s' on signature\00", align 1
@93 = private unnamed_addr constant [52 x i8] c"Import statement path can't be a a formatted string\00", align 1
@94 = private unnamed_addr constant [28 x i8] c"%s not found in module \22\22%s\00", align 1
@95 = private unnamed_addr constant [37 x i8] c"Illegal re-declaration of const '%s'\00", align 1
@96 = private unnamed_addr constant [48 x i8] c"Illegal re-declaration of type '%s' as function\00", align 1
@97 = private unnamed_addr constant [53 x i8] c"Expected an int type for enum type but got type '%s'\00", align 1
@98 = private unnamed_addr constant [38 x i8] c"Enum initializer has to be a constant\00", align 1
@99 = private unnamed_addr constant [36 x i8] c"Expected type '%s' but got type '%s\00", align 1
@100 = private unnamed_addr constant [7 x i8] c"__eq__\00", align 1
@101 = private unnamed_addr constant [8 x i8] c"__add__\00", align 1
@102 = private unnamed_addr constant [8 x i8] c"__sub__\00", align 1
@103 = private unnamed_addr constant [8 x i8] c"__mul__\00", align 1
@104 = private unnamed_addr constant [8 x i8] c"__div__\00", align 1
@105 = private unnamed_addr constant [7 x i8] c"__or__\00", align 1
@106 = private unnamed_addr constant [8 x i8] c"__ora__\00", align 1
@107 = private unnamed_addr constant [12 x i8] c"__getitem__\00", align 1
@108 = private unnamed_addr constant [12 x i8] c"__setitem__\00", align 1
@109 = private unnamed_addr constant [7 x i8] c"__sl__\00", align 1
@110 = private unnamed_addr constant [7 x i8] c"__sr__\00", align 1
@111 = private unnamed_addr constant [8 x i8] c"__sla__\00", align 1
@112 = private unnamed_addr constant [8 x i8] c"__sra__\00", align 1
@113 = private unnamed_addr constant [7 x i8] c"__in__\00", align 1
@114 = private unnamed_addr constant [7 x i8] c"__lt__\00", align 1
@115 = private unnamed_addr constant [7 x i8] c"__lg__\00", align 1
@116 = private unnamed_addr constant [7 x i8] c"__ne__\00", align 1
@117 = private unnamed_addr constant [7 x i8] c"__le__\00", align 1
@118 = private unnamed_addr constant [7 x i8] c"__ge__\00", align 1
@119 = private unnamed_addr constant [8 x i8] c"__pow__\00", align 1
@120 = private unnamed_addr constant [8 x i8] c"__mod__\00", align 1
@121 = private unnamed_addr constant [8 x i8] c"__del__\00", align 1
@122 = private unnamed_addr constant [76 x i8] c" is reserved only for operator overloads and cannot be used as a field name\00", align 1
@123 = private unnamed_addr constant [36 x i8] c"Field %s in class %s already exists\00", align 1
@124 = private unnamed_addr constant [89 x i8] c"Signature of inherited field %s in class %s does not match expected parent signature '%s\00", align 1
@125 = private unnamed_addr constant [49 x i8] c"Expected inherited field %s in class %s to be %s\00", align 1
@126 = private unnamed_addr constant [68 x i8] c"Expected type '%s' but got type '%s' on static field initialization\00", align 1
@127 = private unnamed_addr constant [46 x i8] c"Static field initializer has to be a constant\00", align 1
@128 = private unnamed_addr constant [65 x i8] c"Expected %d arguments for binary operator overload %s but got %d\00", align 1
@129 = private unnamed_addr constant [45 x i8] c"Binary operator overload %s cannot be static\00", align 1
@130 = private unnamed_addr constant [75 x i8] c"__iter__ method must return an iteratable object {done: bool, next(): any}\00", align 1
@131 = private unnamed_addr constant [37 x i8] c"Method %s in class %s already exists\00", align 1
@132 = private unnamed_addr constant [91 x i8] c"Signature of inherited method %s in class %s does not match expected parent signature '%s'\00", align 1
@133 = private unnamed_addr constant [50 x i8] c"Expected inherited method %s in class %s to be %s\00", align 1
@134 = private unnamed_addr constant [32 x i8] c"Static method can't be abstract\00", align 1
@135 = private unnamed_addr constant [12 x i8] c"constructor\00", align 1
@136 = private unnamed_addr constant [34 x i8] c"Class constructor can't be static\00", align 1
@137 = private unnamed_addr constant [36 x i8] c"Class constructor can't be abstract\00", align 1
@138 = private unnamed_addr constant [59 x i8] c"Can't have a abstract private method use protected instead\00", align 1
@139 = private unnamed_addr constant [6 x i8] c"super\00", align 1
@140 = private unnamed_addr constant [42 x i8] c"Can only inherit from class not type '%s'\00", align 1
@141 = private unnamed_addr constant [81 x i8] c"Class with constructor must implement all it's methods missing %s implementation\00", align 1
@142 = private unnamed_addr constant [39 x i8] c"Method missing ending return statement\00", align 1
@143 = private unnamed_addr constant [41 x i8] c"Function missing ending return statement\00", align 1
@144 = private unnamed_addr constant [24 x i8] c"length has to be an int\00", align 1
@145 = private unnamed_addr constant [24 x i8] c"length has to be a uint\00", align 1
@146 = private unnamed_addr constant [31 x i8] c"length is a non-constant value\00", align 1
@147 = private unnamed_addr constant [29 x i8] c"length should be an unsigned\00", align 1
@148 = private unnamed_addr constant [4 x i8] c"u16\00", align 1
@149 = private unnamed_addr constant [4 x i8] c"u32\00", align 1
@150 = private unnamed_addr constant [4 x i8] c"u64\00", align 1
@151 = private unnamed_addr constant [4 x i8] c"i16\00", align 1
@152 = private unnamed_addr constant [4 x i8] c"i32\00", align 1
@153 = private unnamed_addr constant [4 x i8] c"i64\00", align 1
@154 = private unnamed_addr constant [20 x i8] c"Undefined type '%s'\00", align 1
@155 = private unnamed_addr constant [48 x i8] c"Expected element type of '%s' but got type '%s'\00", align 1
@156 = private unnamed_addr constant [24 x i8] c"Undefined variable '%s'\00", align 1
@157 = private unnamed_addr constant [34 x i8] c"Cannot assign a value to a record\00", align 1
@158 = private unnamed_addr constant [36 x i8] c"Cannot assign a value to a constant\00", align 1
@159 = private unnamed_addr constant [52 x i8] c"Illegal assignment of variable of type '%s' to '%s'\00", align 1
@160 = private unnamed_addr constant [7 x i8] c"__gt__\00", align 1
@161 = private unnamed_addr constant [8 x i8] c"__and__\00", align 1
@162 = private unnamed_addr constant [8 x i8] c"__xor__\00", align 1
@163 = private unnamed_addr constant [37 x i8] c"Expected type '%s' but got type '%s'\00", align 1
@164 = private unnamed_addr constant [55 x i8] c"Unsupported binary operator overload for operator '%s'\00", align 1
@165 = private unnamed_addr constant [108 x i8] c"No binary operator overload for '%s' in object of class '%s' please implement the method %s to support this\00", align 1
@166 = private unnamed_addr constant [114 x i8] c"No operator overload for index set operator on %s object please implement method __setitem__ to use in this class\00", align 1
@167 = private unnamed_addr constant [6 x i8] c"Range\00", align 1
@168 = private unnamed_addr constant [58 x i8] c"Illegal binary operation '%s' between types '%s' and '%s'\00", align 1
@169 = private unnamed_addr constant [8 x i8] c"++(pre)\00", align 1
@170 = private unnamed_addr constant [8 x i8] c"--(pre)\00", align 1
@171 = private unnamed_addr constant [39 x i8] c"Illegal unary operation %s on constant\00", align 1
@172 = private unnamed_addr constant [40 x i8] c"Illegal unary operation %s on type '%s'\00", align 1
@173 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@174 = private unnamed_addr constant [30 x i8] c"Cannot cast type '%s' to '%s'\00", align 1
@175 = private unnamed_addr constant [45 x i8] c"Cannot construct an object of abstract class\00", align 1
@176 = private unnamed_addr constant [55 x i8] c"Expected %d argument(s) on constructor call but got %d\00", align 1
@177 = private unnamed_addr constant [71 x i8] c"Expected type '%s' but got type '%s' as constructor call argument (%d)\00", align 1
@178 = private unnamed_addr constant [68 x i8] c"New operator expects 1 argument for pointers but got %d argument(s)\00", align 1
@179 = private unnamed_addr constant [74 x i8] c"New operator for pointers expects argument of type '%s' but got type '%s'\00", align 1
@180 = private unnamed_addr constant [65 x i8] c"New operator expects either an a pointer or an object not a '%s'\00", align 1
@181 = private unnamed_addr constant [76 x i8] c"Property '%s' is defined as private and only accessible within the class %s\00", align 1
@182 = private unnamed_addr constant [71 x i8] c"Property '%s' is defined as %s and only accessible within the class %s\00", align 1
@183 = private unnamed_addr constant [52 x i8] c"Property '%s' doesn't exist in object of class '%s'\00", align 1
@184 = private unnamed_addr constant [50 x i8] c"Property '%s' is not a static member in class '%s\00", align 1
@185 = private unnamed_addr constant [40 x i8] c"'%s' is not an element of enum the '%s'\00", align 1
@186 = private unnamed_addr constant [10 x i8] c"copy_from\00", align 1
@187 = private unnamed_addr constant [10 x i8] c"move_from\00", align 1
@188 = private unnamed_addr constant [10 x i8] c"fill_with\00", align 1
@189 = private unnamed_addr constant [7 x i8] c"resize\00", align 1
@190 = private unnamed_addr constant [8 x i8] c"compare\00", align 1
@191 = private unnamed_addr constant [28 x i8] c"intrinsic %s is not defined\00", align 1
@192 = private unnamed_addr constant [38 x i8] c"Cannot get property '%s' of type '%s'\00", align 1
@193 = private unnamed_addr constant [53 x i8] c"Expected type '%s' from first case but got type '%s'\00", align 1
@194 = private unnamed_addr constant [122 x i8] c"No operator overload for indexing operator on %s object please implement method __getitem__ to use indexing in this class\00", align 1
@195 = private unnamed_addr constant [35 x i8] c"Expected an integer type for index\00", align 1
@196 = private unnamed_addr constant [39 x i8] c"Cannot index into a value of type '%s'\00", align 1
@197 = private unnamed_addr constant [47 x i8] c"Expected a function type for call but got '%s'\00", align 1
@198 = private unnamed_addr constant [52 x i8] c"Expected %d argument(s) on function call but got %d\00", align 1
@199 = private unnamed_addr constant [63 x i8] c"Expected type '%s' but got type '%s' as function call argument\00", align 1
@200 = private unnamed_addr constant [66 x i8] c"Expected argument 1 to be of type to be of a pointer but got '%s'\00", align 1
@201 = private unnamed_addr constant [49 x i8] c"Expected 2 arguments on function call but got %d\00", align 1
@202 = private unnamed_addr constant [63 x i8] c"Expected an int of but got type '%s' as function call argument\00", align 1
@203 = private unnamed_addr constant [49 x i8] c"Expected 3 arguments on function call but got %d\00", align 1
@204 = private unnamed_addr constant [66 x i8] c"Expected type '%s' of but got type '%s' as function call argument\00", align 1
@205 = private unnamed_addr constant [7 x i8] c"3.4E38\00", align 1
@206 = private unnamed_addr constant [26 x i8] c"Variable '%s' has no type\00", align 1
@207 = private unnamed_addr constant [70 x i8] c"Cannot declare a value as null without any type hint for future usage\00", align 1
@208 = private unnamed_addr constant [61 x i8] c"Expected type '%s' but got type '%s' on variable declaration\00", align 1
@209 = private unnamed_addr constant [57 x i8] c"Illegal re-declaration of already declared variable '%s'\00", align 1
@210 = private unnamed_addr constant [49 x i8] c"Cannot assign a non-constant value to a constant\00", align 1
@211 = private unnamed_addr constant [58 x i8] c"Expected type '%s' but got type '%s' on const declaration\00", align 1
@212 = private unnamed_addr constant [29 x i8] c"Iterator has to be an object\00", align 1
@213 = private unnamed_addr constant [47 x i8] c"Iterator type has to have __iter__ as property\00", align 1
@214 = private unnamed_addr constant [7 x i8] c"tmp_it\00", align 1
@215 = private unnamed_addr constant [30 x i8] c"Illegal break outside of loop\00", align 1
@216 = private unnamed_addr constant [33 x i8] c"Illegal continue outside of loop\00", align 1
@217 = private unnamed_addr constant [57 x i8] c"Expected return type of '%s' but got return type of '%s'\00", align 1
@218 = private unnamed_addr constant [33 x i8] c"Function return type is not void\00", align 1
@VTableGeneratedModule = internal global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @GeneratedModule_run_passes, ptr @GeneratedModule_exec, ptr @GeneratedModule_set_target_machine, ptr @GeneratedModule_write_obj, ptr @GeneratedModule_write_ir, ptr @GeneratedModule_write_bc, ptr @GeneratedModule_write_asm }>
@219 = private unnamed_addr constant [10 x i8] c"Panic: %s\00", align 1
@220 = private unnamed_addr constant [10 x i8] c"error: %s\00", align 1
@221 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@222 = private unnamed_addr constant [49 x i8] c"Main function not found in module; can't execute\00", align 1
@223 = private unnamed_addr constant [8 x i8] c"generic\00", align 1
@VTableArray_LLVMValueRef_ = internal global <{ ptr, ptr }> <{ ptr @Array_LLVMValueRef__pop, ptr @Array_LLVMValueRef__find }>
@VTableArray_LLVMTypeRef_ = internal global <{ ptr, ptr }> <{ ptr @Array_LLVMTypeRef__pop, ptr @Array_LLVMTypeRef__find }>
@224 = private unnamed_addr constant [9 x i8] c"%d;%d;%d\00", align 1
@225 = private unnamed_addr constant [33 x i8] c"Type could not be code generated\00", align 1
@226 = private unnamed_addr constant [8 x i8] c"realloc\00", align 1
@227 = private unnamed_addr constant [7 x i8] c"memcmp\00", align 1
@228 = private unnamed_addr constant [6 x i8] c"%s {\0A\00", align 1
@229 = private unnamed_addr constant [7 x i8] c" ... }\00", align 1
@230 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@231 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@232 = private unnamed_addr constant [13 x i8] c" '%s': %s, \0A\00", align 1
@233 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@234 = private unnamed_addr constant [18 x i8] c"string_from_bytes\00", align 1
@235 = private unnamed_addr constant [55 x i8] c"Could not find function 'string.from_bytes' in program\00", align 1
@236 = private unnamed_addr constant [55 x i8] c"Array expression is not a constant (codegen_array_exp)\00", align 1
@237 = private unnamed_addr constant [46 x i8] c"This should never happen! (get_expr_mem: var)\00", align 1
@238 = private unnamed_addr constant [9 x i8] c"arrayidx\00", align 1
@239 = private unnamed_addr constant [7 x i8] c"ptridx\00", align 1
@240 = private unnamed_addr constant [9 x i8] c"%s;%d;%d\00", align 1
@241 = private unnamed_addr constant [10 x i8] c"memberidx\00", align 1
@242 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@243 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@244 = private unnamed_addr constant [12 x i8] c"llvm.pow.%s\00", align 1
@245 = private unnamed_addr constant [34 x i8] c"Unknown bin expression case case!\00", align 1
@246 = private unnamed_addr constant [11 x i8] c"incdec.ptr\00", align 1
@247 = private unnamed_addr constant [51 x i8] c"This should never happen; (codegen_var_access_exp)\00", align 1
@248 = private unnamed_addr constant [11 x i8] c"true_block\00", align 1
@249 = private unnamed_addr constant [12 x i8] c"false_block\00", align 1
@250 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@251 = private unnamed_addr constant [8 x i8] c"ternary\00", align 1
@252 = private unnamed_addr constant [52 x i8] c"this should not happen; (codegen_member_exp); class\00", align 1
@253 = private unnamed_addr constant [60 x i8] c"This should never happen; (codegen_member_expr; class prop)\00", align 1
@254 = private unnamed_addr constant [51 x i8] c"this should not happen; (codegen_member_exp); enum\00", align 1
@255 = private unnamed_addr constant [11 x i8] c"to_cstring\00", align 1
@256 = private unnamed_addr constant [22 x i8] c"instrinsic not found!\00", align 1
@257 = private unnamed_addr constant [9 x i8] c"if.entry\00", align 1
@258 = private unnamed_addr constant [6 x i8] c"ifend\00", align 1
@259 = private unnamed_addr constant [10 x i8] c"for.entry\00", align 1
@260 = private unnamed_addr constant [9 x i8] c"for.cond\00", align 1
@261 = private unnamed_addr constant [9 x i8] c"for.body\00", align 1
@262 = private unnamed_addr constant [9 x i8] c"for.incr\00", align 1
@263 = private unnamed_addr constant [8 x i8] c"for.end\00", align 1
@264 = private unnamed_addr constant [12 x i8] c"while.entry\00", align 1
@265 = private unnamed_addr constant [10 x i8] c"while.end\00", align 1
@266 = private unnamed_addr constant [48 x i8] c"Could not find constructor for constructor call\00", align 1
@267 = private unnamed_addr constant [76 x i8] c"This should not happen: could not find function %s_%s (declare_class_props)\00", align 1
@268 = private unnamed_addr constant [9 x i8] c"VTable%s\00", align 1
@269 = private unnamed_addr constant [15 x i8] c"%s_constructor\00", align 1
@270 = private unnamed_addr constant [6 x i8] c"%s.%s\00", align 1
@271 = private unnamed_addr constant [9 x i8] c"%s_names\00", align 1
@272 = private unnamed_addr constant [7 x i8] c"--emit\00", align 1
@273 = private unnamed_addr constant [4 x i8] c"exe\00", align 1
@274 = private unnamed_addr constant [14 x i8] c"/tmp/output.o\00", align 1
@275 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@276 = private unnamed_addr constant [5 x i8] c"-l%s\00", align 1
@277 = private unnamed_addr constant [23 x i8] c"%s -no-pie %s %s -o %s\00", align 1
@278 = private unnamed_addr constant [8 x i8] c"llvm-ir\00", align 1
@279 = private unnamed_addr constant [10 x i8] c"output.ll\00", align 1
@280 = private unnamed_addr constant [8 x i8] c"llvm-bc\00", align 1
@281 = private unnamed_addr constant [10 x i8] c"output.bc\00", align 1
@282 = private unnamed_addr constant [4 x i8] c"obj\00", align 1
@283 = private unnamed_addr constant [4 x i8] c"asm\00", align 1
@284 = private unnamed_addr constant [25 x i8] c"No input file specified.\00", align 1

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @string_find(ptr nocapture readonly %0, ptr nocapture readonly %1, i64 %2) #0 {
for.entry:
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp sgt i64 %3, %2
  br i1 %4, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i8, ptr %5, align 1
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.026 = phi i64 [ %2, %for.body.lr.ph ], [ %13, %ifend ]
  %ptridx3 = getelementptr inbounds i8, ptr %7, i64 %i.026
  %8 = load i8, ptr %ptridx3, align 1
  %9 = icmp eq i8 %6, %8
  br i1 %9, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %ifend11, %while.entry, %for.entry, %if.entry
  %common.ret.op = phi i64 [ %i.026, %if.entry ], [ -1, %for.entry ], [ %i.026, %ifend11 ], [ -1, %while.entry ], [ -1, %ifend ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  %memberidx4 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %10 = load i64, ptr %memberidx4, align 4
  %11 = add i64 %10, -1
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %while.entry, label %common.ret

ifend:                                            ; preds = %for.body
  %13 = add nsw i64 %i.026, 1
  %14 = icmp slt i64 %13, %3
  br i1 %14, label %for.body, label %common.ret

while.entry:                                      ; preds = %if.entry, %ifend11
  %15 = phi i64 [ %19, %ifend11 ], [ %11, %if.entry ]
  %ptridx6 = getelementptr inbounds i8, ptr %5, i64 %15
  %16 = load i8, ptr %ptridx6, align 1
  %17 = add nuw i64 %15, %i.026
  %ptridx8 = getelementptr inbounds i8, ptr %7, i64 %17
  %18 = load i8, ptr %ptridx8, align 1
  %.not = icmp eq i8 %16, %18
  br i1 %.not, label %ifend11, label %common.ret

ifend11:                                          ; preds = %while.entry
  %19 = add nsw i64 %15, -1
  %20 = icmp sgt i64 %15, 1
  br i1 %20, label %while.entry, label %common.ret
}

define internal noalias ptr @string_substring(ptr nocapture readonly %0, i64 %1, i64 %2) {
  %4 = trunc i64 %2 to i32
  %5 = tail call ptr @malloc(i32 %4)
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 %1
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 2147483648 %7, i64 %2, i1 false)
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %5, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 %2, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 %2, ptr %memberidx2.i, align 4
  ret ptr %8
}

define internal ptr @string_replace(ptr %0, ptr %1, ptr nocapture readonly %2) {
  %4 = load ptr, ptr %0, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = tail call i64 %5(ptr nonnull %0, ptr %1, i64 0)
  %7 = icmp sgt i64 %6, -1
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %3, %if.entry
  %common.ret.op = phi ptr [ %23, %if.entry ], [ %0, %3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx1 = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = sub nuw i64 %8, %9
  %memberidx3 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  %11 = load i64, ptr %memberidx3, align 4
  %12 = add nuw i64 %10, %11
  %13 = trunc i64 %12 to i32
  %14 = tail call ptr @malloc(i32 %13)
  %memberidx4 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr align 8 %15, i64 %6, i1 false)
  %ptridx = getelementptr inbounds i8, ptr %14, i64 %6
  %memberidx6 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  %16 = load ptr, ptr %memberidx6, align 8
  %17 = load i64, ptr %memberidx3, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %ptridx, ptr align 8 %16, i64 %17, i1 false)
  %18 = add nsw i64 %17, %6
  %ptridx9 = getelementptr inbounds i8, ptr %14, i64 %18
  %19 = load i64, ptr %memberidx2, align 4
  %20 = add nsw i64 %19, %6
  %ptridx14 = getelementptr inbounds i8, ptr %15, i64 %20
  %21 = load i64, ptr %memberidx1, align 4
  %22 = sub nuw i64 %21, %20
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %ptridx9, ptr align 2147483648 %ptridx14, i64 %22, i1 false)
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %14, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i, align 4
  br label %common.ret
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn
define internal ptr @string_get_bytes(ptr nocapture readonly %0) #1 {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  ret ptr %2
}

define internal noalias ptr @string_to_cstring(ptr nocapture readonly %0) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = trunc i64 %2 to i32
  %4 = add i32 %3, 1
  %5 = tail call ptr @malloc(i32 %4)
  %memberidx1 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %memberidx, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %6, i64 %7, i1 false)
  %ptridx = getelementptr inbounds i8, ptr %5, i64 %7
  store i8 0, ptr %ptridx, align 1
  ret ptr %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly willreturn
define internal i8 @string_get_byte(ptr nocapture readonly %0, i64 %1) #2 {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds i8, ptr %3, i64 %1
  %4 = load i8, ptr %ptridx, align 1
  ret i8 %4
}

define internal i1 @string_ends_with(ptr nocapture readonly %0, ptr nocapture readonly %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp slt i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %12, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 %3
  %8 = sub i64 0, %4
  %9 = getelementptr inbounds i8, ptr %7, i64 %8
  %memberidx5 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %11 = tail call i64 @memcmp(ptr %9, ptr %10, i64 %4)
  %12 = icmp eq i64 %11, 0
  br label %common.ret
}

define internal i1 @string_starts_with(ptr nocapture readonly %0, ptr nocapture readonly %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp slt i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %9, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = tail call i64 @memcmp(ptr %6, ptr %7, i64 %4)
  %9 = icmp eq i64 %8, 0
  br label %common.ret
}

declare noalias ptr @malloc(i32) local_unnamed_addr

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("realloc") allocsize(1)
declare noalias noundef ptr @realloc(ptr allocptr nocapture, i64 noundef) local_unnamed_addr #4

declare i64 @memcmp(ptr, ptr, i64) local_unnamed_addr

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("free")
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(ptr nocapture) local_unnamed_addr #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_string__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

define internal i64 @Array_string__find(ptr nocapture readonly %0, ptr nocapture readonly %1) {
for.entry:
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 1
  %memberidx1.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %4 = phi i64 [ %2, %for.body.lr.ph ], [ %13, %ifend ]
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %14, %ifend ]
  %5 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %5, i64 %i.06
  %6 = load ptr, ptr %ptridx, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx.i, align 4
  %8 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp eq i64 %7, %8
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %for.body
  %memberidx2.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  %9 = load ptr, ptr %memberidx2.i, align 8
  %10 = load ptr, ptr %memberidx3.i, align 8
  %11 = tail call i64 @memcmp(ptr %9, ptr %10, i64 %7)
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %common.ret, label %ifend.i.ifend_crit_edge

ifend.i.ifend_crit_edge:                          ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  br label %ifend

common.ret:                                       ; preds = %ifend, %ifend.i, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %ifend.i ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %ifend.i.ifend_crit_edge, %for.body
  %13 = phi i64 [ %.pre, %ifend.i.ifend_crit_edge ], [ %4, %for.body ]
  %14 = add nuw nsw i64 %i.06, 1
  %15 = icmp slt i64 %14, %13
  br i1 %15, label %for.body, label %common.ret
}

; Function Attrs: nofree
declare void @system(ptr nocapture noundef readonly) local_unnamed_addr #8

; Function Attrs: nofree
declare void @write(i64 noundef, ptr nocapture noundef readonly, i64 noundef) local_unnamed_addr #8

declare i64 @asprintf(ptr, ptr, ...) local_unnamed_addr

define internal fastcc ptr @flag_value_or(ptr %0, ptr %1, ptr readnone %2) unnamed_addr {
  %4 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr }>, ptr %4, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = tail call i64 %5(ptr nonnull %0, ptr %1)
  %.not = icmp eq i64 %6, -1
  br i1 %.not, label %common.ret, label %if.entry

if.entry:                                         ; preds = %3
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  %8 = add nuw nsw i64 %6, 1
  %9 = icmp sgt i64 %7, %8
  br i1 %9, label %if.entry2, label %else3

common.ret:                                       ; preds = %else3, %3, %if.entry2
  %common.ret.op = phi ptr [ %11, %if.entry2 ], [ %2, %3 ], [ %2, %else3 ]
  ret ptr %common.ret.op

if.entry2:                                        ; preds = %if.entry
  %memberidx.i = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %10, i64 %8
  %11 = load ptr, ptr %ptridx.i, align 8
  br label %common.ret

else3:                                            ; preds = %if.entry
  %12 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i64 0, i32 5
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = tail call ptr %13(ptr nonnull %1)
  %15 = alloca ptr, align 8
  %16 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %15, ptr nonnull @18, ptr %14)
  %17 = load ptr, ptr %15, align 8
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %18, align 8
  %memberidx.i11 = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  store ptr %17, ptr %memberidx.i11, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  store i64 %16, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 3
  store i64 %16, ptr %memberidx2.i, align 4
  tail call void @free(ptr %14)
  call fastcc void @print_message_error(i64 4, ptr nonnull %18)
  br label %common.ret
}

define internal fastcc void @print_message_error(i64 %0, ptr %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @11, i64 7, i1 false)
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %4, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  store ptr %3, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i, align 4
  %5 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %6 = tail call ptr %5(ptr nonnull %4)
  %7 = load i64, ptr %memberidx1.i.i.i, align 4
  tail call void @write(i64 1, ptr %6, i64 %7)
  switch i64 %0, label %else11 [
    i64 0, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 5, label %if.entry7
    i64 1, label %if.entry10
  ]

if.entry:                                         ; preds = %2
  %8 = tail call ptr @malloc(i32 21)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(21) %8, ptr noundef nonnull align 8 dereferenceable(21) @12, i64 21, i1 false)
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i17 = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i17, align 8
  %memberidx1.i.i18 = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 21, ptr %memberidx1.i.i18, align 4
  br label %ifend

ifend:                                            ; preds = %if.entry10, %else11, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink51 = phi ptr [ %29, %if.entry10 ], [ %31, %else11 ], [ %27, %if.entry7 ], [ %25, %if.entry4 ], [ %23, %if.entry1 ], [ %9, %if.entry ]
  %.sink = phi i64 [ 14, %if.entry10 ], [ 9, %else11 ], [ 14, %if.entry7 ], [ 12, %if.entry4 ], [ 16, %if.entry1 ], [ 21, %if.entry ]
  %memberidx1.i.i39.sink = phi ptr [ %memberidx1.i.i39, %if.entry10 ], [ %memberidx1.i.i44, %else11 ], [ %memberidx1.i.i34, %if.entry7 ], [ %memberidx1.i.i29, %if.entry4 ], [ %memberidx1.i.i24, %if.entry1 ], [ %memberidx1.i.i18, %if.entry ]
  %memberidx2.i.i40 = getelementptr inbounds %string, ptr %.sink51, i64 0, i32 3
  store i64 %.sink, ptr %memberidx2.i.i40, align 4
  %10 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %11 = tail call ptr %10(ptr nonnull %.sink51)
  %12 = load i64, ptr %memberidx1.i.i39.sink, align 4
  tail call void @write(i64 1, ptr %11, i64 %12)
  %13 = tail call ptr @malloc(i32 4)
  store i32 1831885595, ptr %13, align 8
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i1.i, align 8
  %memberidx1.i.i2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i2.i, align 4
  %memberidx2.i.i3.i = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i3.i, align 4
  %15 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %16 = tail call ptr %15(ptr nonnull %14)
  %17 = load i64, ptr %memberidx1.i.i2.i, align 4
  tail call void @write(i64 1, ptr %16, i64 %17)
  %18 = load ptr, ptr %1, align 8
  %memberidx.i.i21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 3
  %19 = load ptr, ptr %memberidx.i.i21, align 8
  %20 = tail call ptr %19(ptr nonnull %1)
  %memberidx1.i.i22 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %21 = load i64, ptr %memberidx1.i.i22, align 4
  tail call void @write(i64 1, ptr %20, i64 %21)
  tail call void @write(i64 1, ptr nonnull @0, i64 1)
  ret void

if.entry1:                                        ; preds = %2
  %22 = tail call ptr @malloc(i32 16)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %22, ptr noundef nonnull align 8 dereferenceable(16) @13, i64 16, i1 false)
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i23 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i23, align 8
  %memberidx1.i.i24 = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 16, ptr %memberidx1.i.i24, align 4
  br label %ifend

if.entry4:                                        ; preds = %2
  %24 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %24, ptr noundef nonnull align 8 dereferenceable(12) @14, i64 12, i1 false)
  %25 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %25, align 8
  %memberidx.i.i28 = getelementptr inbounds %string, ptr %25, i64 0, i32 1
  store ptr %24, ptr %memberidx.i.i28, align 8
  %memberidx1.i.i29 = getelementptr inbounds %string, ptr %25, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i29, align 4
  br label %ifend

if.entry7:                                        ; preds = %2
  %26 = tail call ptr @malloc(i32 14)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %26, ptr noundef nonnull align 8 dereferenceable(14) @15, i64 14, i1 false)
  %27 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i33 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i33, align 8
  %memberidx1.i.i34 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i34, align 4
  br label %ifend

if.entry10:                                       ; preds = %2
  %28 = tail call ptr @malloc(i32 14)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %28, ptr noundef nonnull align 8 dereferenceable(14) @16, i64 14, i1 false)
  %29 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %29, align 8
  %memberidx.i.i38 = getelementptr inbounds %string, ptr %29, i64 0, i32 1
  store ptr %28, ptr %memberidx.i.i38, align 8
  %memberidx1.i.i39 = getelementptr inbounds %string, ptr %29, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i39, align 4
  br label %ifend

else11:                                           ; preds = %2
  %30 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %30, ptr noundef nonnull align 8 dereferenceable(9) @17, i64 9, i1 false)
  %31 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i43 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i43, align 8
  %memberidx1.i.i44 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i44, align 4
  br label %ifend
}

define i64 @main(i64 %0, ptr nocapture readonly %1) local_unnamed_addr {
  %3 = alloca %CodeGen, align 8
  %4 = alloca %TypeChecker, align 8
  %5 = alloca ptr, align 8
  %6 = icmp sgt i64 %0, 1
  br i1 %6, label %for.body.i.preheader, label %else

for.body.i.preheader:                             ; preds = %2
  %args = alloca ptr, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_string_, ptr %7, align 8
  %memberidx.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 1
  %8 = tail call ptr @malloc(i32 64)
  store ptr %8, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %Array_string____sl__.exit.i
  %i.0.i315 = phi i64 [ %23, %Array_string____sl__.exit.i ], [ 0, %for.body.i.preheader ]
  %ptridx.i = getelementptr inbounds ptr, ptr %1, i64 %i.0.i315
  %9 = load ptr, ptr %ptridx.i, align 8
  %10 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %9)
  %11 = trunc i64 %10 to i32
  %12 = tail call ptr @malloc(i32 %11)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %9, i64 %10, i1 false)
  %13 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %10, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %10, ptr %memberidx2.i.i.i, align 4
  %14 = load i64, ptr %memberidx.i.i, align 4
  %15 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp slt i64 %14, %15
  br i1 %.not.i.i, label %for.body.i.Array_string____sl__.exit.i_crit_edge, label %if.entry.i.i

for.body.i.Array_string____sl__.exit.i_crit_edge: ; preds = %for.body.i
  %.pre323 = load ptr, ptr %memberidx2.i.i, align 8
  br label %Array_string____sl__.exit.i

if.entry.i.i:                                     ; preds = %for.body.i
  %16 = shl nuw i64 %15, 1
  store i64 %16, ptr %memberidx1.i.i, align 4
  %17 = load ptr, ptr %memberidx2.i.i, align 8
  %18 = shl i64 %15, 4
  %19 = tail call ptr @realloc(ptr %17, i64 %18)
  store ptr %19, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %Array_string____sl__.exit.i

Array_string____sl__.exit.i:                      ; preds = %for.body.i.Array_string____sl__.exit.i_crit_edge, %if.entry.i.i
  %20 = phi ptr [ %19, %if.entry.i.i ], [ %.pre323, %for.body.i.Array_string____sl__.exit.i_crit_edge ]
  %21 = phi i64 [ %.pre, %if.entry.i.i ], [ %14, %for.body.i.Array_string____sl__.exit.i_crit_edge ]
  %22 = add nsw i64 %21, 1
  store i64 %22, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %20, i64 %21
  store ptr %13, ptr %ptridx.i.i, align 8
  %23 = add nuw nsw i64 %i.0.i315, 1
  %24 = icmp slt i64 %23, %0
  br i1 %24, label %for.body.i, label %parse_args.exit

parse_args.exit:                                  ; preds = %Array_string____sl__.exit.i
  store ptr %7, ptr %args, align 8
  %25 = tail call ptr @malloc(i32 2)
  store i16 30253, ptr %25, align 8
  %26 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %26, align 8
  %memberidx.i.i93 = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  store ptr %25, ptr %memberidx.i.i93, align 8
  %memberidx1.i.i94 = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i94, align 4
  %memberidx2.i.i95 = getelementptr inbounds %string, ptr %26, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i95, align 4
  %27 = load ptr, ptr %7, align 8
  %memberidx.i.i96 = getelementptr inbounds <{ ptr, ptr }>, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i96, align 8
  %29 = tail call i64 %28(ptr nonnull %7, ptr nonnull %26)
  %30 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %30, ptr noundef nonnull align 8 dereferenceable(9) @19, i64 9, i1 false)
  %31 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i97 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i97, align 8
  %memberidx1.i.i98 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i98, align 4
  %memberidx2.i.i99 = getelementptr inbounds %string, ptr %31, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i99, align 4
  %32 = load ptr, ptr %7, align 8
  %memberidx.i.i100 = getelementptr inbounds <{ ptr, ptr }>, ptr %32, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i100, align 8
  %34 = tail call i64 %33(ptr nonnull %7, ptr nonnull %31)
  %35 = and i64 %34, %29
  %.not280 = icmp eq i64 %35, -1
  br i1 %.not280, label %ifend3, label %if.entry1

common.ret:                                       ; preds = %TypeChecker_check.exit, %ifend24, %ifend17, %if.entry15, %if.entry4, %if.entry1, %ifend39, %else
  %common.ret.op = phi i64 [ 1, %else ], [ %code.0, %ifend39 ], [ 0, %if.entry1 ], [ 0, %if.entry4 ], [ 1, %if.entry15 ], [ 1, %ifend17 ], [ 1, %ifend24 ], [ 1, %TypeChecker_check.exit ]
  ret i64 %common.ret.op

else:                                             ; preds = %2
  %36 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %36, ptr noundef nonnull align 8 dereferenceable(24) @284, i64 24, i1 false)
  %37 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %37, align 8
  %memberidx.i.i101 = getelementptr inbounds %string, ptr %37, i64 0, i32 1
  store ptr %36, ptr %memberidx.i.i101, align 8
  %memberidx1.i.i102 = getelementptr inbounds %string, ptr %37, i64 0, i32 2
  store i64 24, ptr %memberidx1.i.i102, align 4
  %memberidx2.i.i103 = getelementptr inbounds %string, ptr %37, i64 0, i32 3
  store i64 24, ptr %memberidx2.i.i103, align 4
  tail call fastcc void @print_message_error(i64 4, ptr nonnull %37)
  br label %common.ret

if.entry1:                                        ; preds = %parse_args.exit
  %38 = tail call ptr @malloc(i32 14)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %38, ptr noundef nonnull align 8 dereferenceable(14) @20, i64 14, i1 false)
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i104 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i104, align 8
  %memberidx1.i.i105 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i105, align 4
  %memberidx2.i.i106 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 14, ptr %memberidx2.i.i106, align 4
  %40 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %41 = tail call ptr %40(ptr nonnull %39)
  %42 = load i64, ptr %memberidx1.i.i105, align 4
  tail call void @write(i64 1, ptr %41, i64 %42)
  tail call void @write(i64 1, ptr nonnull @0, i64 1)
  br label %common.ret

ifend3:                                           ; preds = %parse_args.exit
  %43 = tail call ptr @malloc(i32 2)
  store i16 26669, ptr %43, align 8
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i109 = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i109, align 8
  %memberidx1.i.i110 = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i110, align 4
  %memberidx2.i.i111 = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i111, align 4
  %45 = load ptr, ptr %7, align 8
  %memberidx.i.i112 = getelementptr inbounds <{ ptr, ptr }>, ptr %45, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i.i112, align 8
  %47 = tail call i64 %46(ptr nonnull %7, ptr nonnull %44)
  %48 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %48, ptr noundef nonnull align 8 dereferenceable(6) @21, i64 6, i1 false)
  %49 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %49, align 8
  %memberidx.i.i113 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  store ptr %48, ptr %memberidx.i.i113, align 8
  %memberidx1.i.i114 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i114, align 4
  %memberidx2.i.i115 = getelementptr inbounds %string, ptr %49, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i115, align 4
  %50 = load ptr, ptr %7, align 8
  %memberidx.i.i116 = getelementptr inbounds <{ ptr, ptr }>, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i.i116, align 8
  %52 = tail call i64 %51(ptr nonnull %7, ptr nonnull %49)
  %53 = and i64 %52, %47
  %.not281 = icmp eq i64 %53, -1
  %54 = load ptr, ptr %memberidx2.i.i, align 8
  br i1 %.not281, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend3
  %55 = load ptr, ptr %54, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %56 = load ptr, ptr %55, align 8
  %memberidx.i117 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx.i117, align 8
  %58 = tail call ptr %57(ptr nonnull %55)
  %59 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @1, ptr %58)
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i118 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i118, align 8
  %memberidx1.i.i119 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 %59, ptr %memberidx1.i.i119, align 4
  %memberidx2.i.i120 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 %59, ptr %memberidx2.i.i120, align 4
  call void @free(ptr %58)
  %62 = load ptr, ptr %61, align 8
  %memberidx.i.i1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 3
  %63 = load ptr, ptr %memberidx.i.i1.i, align 8
  %64 = call ptr %63(ptr nonnull %61)
  %65 = load i64, ptr %memberidx1.i.i119, align 4
  call void @write(i64 1, ptr %64, i64 %65)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %66 = call ptr @malloc(i32 8)
  store i64 4202788979706449999, ptr %66, align 8
  %67 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %67, align 8
  %memberidx.i.i3.i = getelementptr inbounds %string, ptr %67, i64 0, i32 1
  store ptr %66, ptr %memberidx.i.i3.i, align 8
  %memberidx1.i.i4.i = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i4.i, align 4
  %memberidx2.i.i.i121 = getelementptr inbounds %string, ptr %67, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i.i121, align 4
  %68 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %69 = call ptr %68(ptr nonnull %67)
  %70 = load i64, ptr %memberidx1.i.i4.i, align 4
  call void @write(i64 1, ptr %69, i64 %70)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %71 = call ptr @malloc(i32 37)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(37) %71, ptr noundef nonnull align 8 dereferenceable(37) @2, i64 37, i1 false)
  %72 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i.i7.i122 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i.i7.i122, align 8
  %memberidx1.i.i8.i = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 37, ptr %memberidx1.i.i8.i, align 4
  %memberidx2.i.i9.i = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 37, ptr %memberidx2.i.i9.i, align 4
  %73 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %74 = call ptr %73(ptr nonnull %72)
  %75 = load i64, ptr %memberidx1.i.i8.i, align 4
  call void @write(i64 1, ptr %74, i64 %75)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %76 = call ptr @malloc(i32 35)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %76, ptr noundef nonnull align 8 dereferenceable(35) @3, i64 35, i1 false)
  %77 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %77, align 8
  %memberidx.i.i12.i = getelementptr inbounds %string, ptr %77, i64 0, i32 1
  store ptr %76, ptr %memberidx.i.i12.i, align 8
  %memberidx1.i.i13.i = getelementptr inbounds %string, ptr %77, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i13.i, align 4
  %memberidx2.i.i14.i = getelementptr inbounds %string, ptr %77, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i14.i, align 4
  %78 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %79 = call ptr %78(ptr nonnull %77)
  %80 = load i64, ptr %memberidx1.i.i13.i, align 4
  call void @write(i64 1, ptr %79, i64 %80)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %81 = call ptr @malloc(i32 293)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(293) %81, ptr noundef nonnull align 8 dereferenceable(293) @4, i64 293, i1 false)
  %82 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %82, align 8
  %memberidx.i.i17.i = getelementptr inbounds %string, ptr %82, i64 0, i32 1
  store ptr %81, ptr %memberidx.i.i17.i, align 8
  %memberidx1.i.i18.i = getelementptr inbounds %string, ptr %82, i64 0, i32 2
  store i64 293, ptr %memberidx1.i.i18.i, align 4
  %memberidx2.i.i19.i = getelementptr inbounds %string, ptr %82, i64 0, i32 3
  store i64 293, ptr %memberidx2.i.i19.i, align 4
  %83 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %84 = call ptr %83(ptr nonnull %82)
  %85 = load i64, ptr %memberidx1.i.i18.i, align 4
  call void @write(i64 1, ptr %84, i64 %85)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %86 = call ptr @malloc(i32 49)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(49) %86, ptr noundef nonnull align 8 dereferenceable(49) @5, i64 49, i1 false)
  %87 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %87, align 8
  %memberidx.i.i22.i = getelementptr inbounds %string, ptr %87, i64 0, i32 1
  store ptr %86, ptr %memberidx.i.i22.i, align 8
  %memberidx1.i.i23.i = getelementptr inbounds %string, ptr %87, i64 0, i32 2
  store i64 49, ptr %memberidx1.i.i23.i, align 4
  %memberidx2.i.i24.i = getelementptr inbounds %string, ptr %87, i64 0, i32 3
  store i64 49, ptr %memberidx2.i.i24.i, align 4
  %88 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %89 = call ptr %88(ptr nonnull %87)
  %90 = load i64, ptr %memberidx1.i.i23.i, align 4
  call void @write(i64 1, ptr %89, i64 %90)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %91 = call ptr @malloc(i32 54)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %91, ptr noundef nonnull align 8 dereferenceable(54) @6, i64 54, i1 false)
  %92 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i.i27.i = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i.i27.i, align 8
  %memberidx1.i.i28.i = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i28.i, align 4
  %memberidx2.i.i29.i = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i29.i, align 4
  %93 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %94 = call ptr %93(ptr nonnull %92)
  %95 = load i64, ptr %memberidx1.i.i28.i, align 4
  call void @write(i64 1, ptr %94, i64 %95)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %96 = call ptr @malloc(i32 46)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(46) %96, ptr noundef nonnull align 8 dereferenceable(46) @7, i64 46, i1 false)
  %97 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i.i32.i = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i.i32.i, align 8
  %memberidx1.i.i33.i = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 46, ptr %memberidx1.i.i33.i, align 4
  %memberidx2.i.i34.i = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 46, ptr %memberidx2.i.i34.i, align 4
  %98 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %99 = call ptr %98(ptr nonnull %97)
  %100 = load i64, ptr %memberidx1.i.i33.i, align 4
  call void @write(i64 1, ptr %99, i64 %100)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %101 = call ptr @malloc(i32 33)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %101, ptr noundef nonnull align 8 dereferenceable(33) @8, i64 33, i1 false)
  %102 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i37.i = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %101, ptr %memberidx.i.i37.i, align 8
  %memberidx1.i.i38.i = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i38.i, align 4
  %memberidx2.i.i39.i = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i39.i, align 4
  %103 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %104 = call ptr %103(ptr nonnull %102)
  %105 = load i64, ptr %memberidx1.i.i38.i, align 4
  call void @write(i64 1, ptr %104, i64 %105)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %106 = call ptr @malloc(i32 90)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(90) %106, ptr noundef nonnull align 8 dereferenceable(90) @9, i64 90, i1 false)
  %107 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %107, align 8
  %memberidx.i.i42.i = getelementptr inbounds %string, ptr %107, i64 0, i32 1
  store ptr %106, ptr %memberidx.i.i42.i, align 8
  %memberidx1.i.i43.i = getelementptr inbounds %string, ptr %107, i64 0, i32 2
  store i64 90, ptr %memberidx1.i.i43.i, align 4
  %memberidx2.i.i44.i = getelementptr inbounds %string, ptr %107, i64 0, i32 3
  store i64 90, ptr %memberidx2.i.i44.i, align 4
  %108 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %109 = call ptr %108(ptr nonnull %107)
  %110 = load i64, ptr %memberidx1.i.i43.i, align 4
  call void @write(i64 1, ptr %109, i64 %110)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %111 = call ptr @malloc(i32 30)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(30) %111, ptr noundef nonnull align 8 dereferenceable(30) @10, i64 30, i1 false)
  %112 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i.i47.i = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i.i47.i, align 8
  %memberidx1.i.i48.i = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 30, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 30, ptr %memberidx2.i.i49.i, align 4
  %113 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %114 = call ptr %113(ptr nonnull %112)
  %115 = load i64, ptr %memberidx1.i.i48.i, align 4
  call void @write(i64 1, ptr %114, i64 %115)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  br label %common.ret

ifend6:                                           ; preds = %ifend3
  %ptridx.i126 = getelementptr inbounds ptr, ptr %54, i64 1
  %116 = load ptr, ptr %ptridx.i126, align 8
  %117 = alloca %Compiler, align 8
  store ptr @VTableCompiler, ptr %117, align 8
  %memberidx.i127 = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 5
  %118 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FloFile_, ptr %118, align 8
  %memberidx.i.i128 = getelementptr inbounds %Array_FloFile_, ptr %118, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i128, align 4
  %memberidx1.i.i129 = getelementptr inbounds %Array_FloFile_, ptr %118, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i129, align 4
  %memberidx2.i.i130 = getelementptr inbounds %Array_FloFile_, ptr %118, i64 0, i32 1
  %119 = tail call ptr @malloc(i32 64)
  store ptr %119, ptr %memberidx2.i.i130, align 8
  store i64 0, ptr %memberidx.i.i128, align 4
  store ptr %118, ptr %memberidx.i127, align 8
  %memberidx3.i = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 1
  store ptr null, ptr %memberidx3.i, align 8
  %memberidx4.i = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 3
  store ptr null, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 6
  %120 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FloError_, ptr %120, align 8
  %memberidx.i15.i = getelementptr inbounds %Array_FloError_, ptr %120, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx1.i16.i = getelementptr inbounds %Array_FloError_, ptr %120, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i, align 4
  %memberidx2.i17.i = getelementptr inbounds %Array_FloError_, ptr %120, i64 0, i32 1
  %121 = tail call ptr @malloc(i32 64)
  store ptr %121, ptr %memberidx2.i17.i, align 8
  store i64 0, ptr %memberidx.i15.i, align 4
  store ptr %120, ptr %memberidx5.i, align 8
  %122 = tail call ptr @malloc(i32 24)
  %123 = tail call ptr @malloc(i32 2048)
  store ptr %123, ptr %122, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %ifend6, %for.body.i.i
  %i.0.i.i314 = phi i64 [ 0, %ifend6 ], [ %125, %for.body.i.i ]
  %124 = load ptr, ptr %122, align 8
  %ptridx.i.i131 = getelementptr inbounds ptr, ptr %124, i64 %i.0.i.i314
  store ptr null, ptr %ptridx.i.i131, align 8
  %125 = add nuw nsw i64 %i.0.i.i314, 1
  %126 = icmp ult i64 %i.0.i.i314, 255
  br i1 %126, label %for.body.i.i, label %Compiler_constructor.exit

Compiler_constructor.exit:                        ; preds = %for.body.i.i
  %memberidx8.i = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 7
  %memberidx2.i18.i = getelementptr inbounds %Map_string_FileId_, ptr %122, i64 0, i32 1
  store i64 256, ptr %memberidx2.i18.i, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_FileId_, ptr %122, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %122, ptr %memberidx8.i, align 8
  %127 = load ptr, ptr %117, align 8
  %128 = load ptr, ptr %127, align 8
  %129 = tail call ptr @malloc(i32 19)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(19) %129, ptr noundef nonnull align 8 dereferenceable(19) @23, i64 19, i1 false)
  %130 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %130, align 8
  %memberidx.i.i.i132 = getelementptr inbounds %string, ptr %130, i64 0, i32 1
  store ptr %129, ptr %memberidx.i.i.i132, align 8
  %memberidx1.i.i.i133 = getelementptr inbounds %string, ptr %130, i64 0, i32 2
  store i64 19, ptr %memberidx1.i.i.i133, align 4
  %memberidx2.i.i.i134 = getelementptr inbounds %string, ptr %130, i64 0, i32 3
  store i64 19, ptr %memberidx2.i.i.i134, align 4
  call void %128(ptr nonnull %117, ptr nonnull %130)
  %131 = call ptr @malloc(i32 2)
  store i16 18733, ptr %131, align 8
  %132 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %132, align 8
  %memberidx.i.i135 = getelementptr inbounds %string, ptr %132, i64 0, i32 1
  store ptr %131, ptr %memberidx.i.i135, align 8
  %memberidx1.i.i136 = getelementptr inbounds %string, ptr %132, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i136, align 4
  %memberidx2.i.i137 = getelementptr inbounds %string, ptr %132, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i137, align 4
  %133 = load ptr, ptr %7, align 8
  %memberidx.i.i138 = getelementptr inbounds <{ ptr, ptr }>, ptr %133, i64 0, i32 1
  %134 = load ptr, ptr %memberidx.i.i138, align 8
  %135 = call i64 %134(ptr nonnull %7, ptr nonnull %132)
  %.not282 = icmp eq i64 %135, -1
  br i1 %.not282, label %ifend9, label %if.entry7

if.entry7:                                        ; preds = %Compiler_constructor.exit
  %136 = call ptr @malloc(i32 2)
  store i16 18733, ptr %136, align 8
  %137 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %137, align 8
  %memberidx.i.i139 = getelementptr inbounds %string, ptr %137, i64 0, i32 1
  store ptr %136, ptr %memberidx.i.i139, align 8
  %memberidx1.i.i140 = getelementptr inbounds %string, ptr %137, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i140, align 4
  %memberidx2.i.i141 = getelementptr inbounds %string, ptr %137, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i141, align 4
  %138 = call ptr @malloc(i32 0)
  %139 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %139, align 8
  %memberidx.i.i142 = getelementptr inbounds %string, ptr %139, i64 0, i32 1
  store ptr %138, ptr %memberidx.i.i142, align 8
  %memberidx1.i.i143 = getelementptr inbounds %string, ptr %139, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i143, i8 0, i64 16, i1 false)
  %140 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %137, ptr nonnull %139)
  %141 = call ptr @malloc(i32 0)
  %142 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %142, align 8
  %memberidx.i.i145 = getelementptr inbounds %string, ptr %142, i64 0, i32 1
  store ptr %141, ptr %memberidx.i.i145, align 8
  %memberidx1.i.i146 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  %memberidx.i.i148 = getelementptr inbounds %string, ptr %140, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i146, i8 0, i64 16, i1 false)
  %143 = load i64, ptr %memberidx.i.i148, align 4
  %.not.i.i150 = icmp eq i64 %143, 0
  br i1 %.not.i.i150, label %ifend.i.i, label %if.entry10

ifend.i.i:                                        ; preds = %if.entry7
  %memberidx2.i.i151 = getelementptr inbounds %string, ptr %140, i64 0, i32 1
  %144 = load ptr, ptr %memberidx2.i.i151, align 8
  %145 = call i64 @memcmp(ptr %144, ptr %141, i64 0)
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %ifend9, label %if.entry10

ifend9:                                           ; preds = %if.entry10, %ifend.i.i, %Compiler_constructor.exit
  %147 = load ptr, ptr %117, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %147, i64 0, i32 1
  %148 = load ptr, ptr %memberidx13, align 8
  %149 = call ptr %148(ptr nonnull %117, ptr %116)
  %150 = load ptr, ptr %117, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %150, i64 0, i32 2
  %151 = load ptr, ptr %memberidx14, align 8
  %152 = call i1 %151(ptr nonnull %117, ptr %149)
  br i1 %152, label %ifend17, label %if.entry15

if.entry10:                                       ; preds = %if.entry7, %ifend.i.i
  %153 = load ptr, ptr %117, align 8
  %154 = load ptr, ptr %153, align 8
  call void %154(ptr nonnull %117, ptr nonnull %140)
  br label %ifend9

if.entry15:                                       ; preds = %ifend9
  %155 = load ptr, ptr %116, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %155, i64 0, i32 5
  %156 = load ptr, ptr %memberidx18, align 8
  %157 = call ptr %156(ptr nonnull %116)
  %158 = alloca ptr, align 8
  %159 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %158, ptr nonnull @29, ptr %157)
  %160 = load ptr, ptr %158, align 8
  %161 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %161, align 8
  %memberidx.i153 = getelementptr inbounds %string, ptr %161, i64 0, i32 1
  store ptr %160, ptr %memberidx.i153, align 8
  %memberidx1.i154 = getelementptr inbounds %string, ptr %161, i64 0, i32 2
  store i64 %159, ptr %memberidx1.i154, align 4
  %memberidx2.i155 = getelementptr inbounds %string, ptr %161, i64 0, i32 3
  store i64 %159, ptr %memberidx2.i155, align 4
  tail call void @free(ptr %157)
  call fastcc void @print_message_error(i64 3, ptr nonnull %161)
  br label %common.ret

ifend17:                                          ; preds = %ifend9
  %162 = load ptr, ptr %memberidx4.i, align 8
  %163 = load ptr, ptr %memberidx5.i, align 8
  %164 = call fastcc ptr @Lexer_tokenize(ptr %162, ptr %163)
  %165 = load ptr, ptr %117, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %165, i64 0, i32 3
  %166 = load ptr, ptr %memberidx21, align 8
  %167 = call i1 %166(ptr nonnull %117)
  br i1 %167, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend17
  %module_node = alloca ptr, align 8
  %168 = load ptr, ptr %memberidx5.i, align 8
  %169 = call fastcc ptr @Parser_parse(ptr %164, ptr %168)
  store ptr %169, ptr %module_node, align 8
  %170 = load ptr, ptr %117, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %170, i64 0, i32 3
  %171 = load ptr, ptr %memberidx26, align 8
  %172 = call i1 %171(ptr nonnull %117)
  br i1 %172, label %common.ret, label %ifend29

ifend29:                                          ; preds = %ifend24
  call void @llvm.lifetime.start.p0(i64 66, ptr nonnull %4)
  %memberidx.i.i156 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 6
  store ptr %117, ptr %memberidx.i.i156, align 8
  %memberidx1.i.i157 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i157, align 8
  %memberidx2.i.i158 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 7
  store i1 false, ptr %memberidx2.i.i158, align 8
  %173 = call ptr @malloc(i32 9)
  store i1 false, ptr %173, align 1
  %memberidx1.i.i.i159 = getelementptr inbounds %Program, ptr %173, i64 0, i32 1
  %174 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Module_, ptr %174, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %174, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %174, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %174, i64 0, i32 1
  %175 = call ptr @malloc(i32 64)
  store ptr %175, ptr %memberidx2.i.i.i.i, align 8
  store i64 0, ptr %memberidx.i.i.i.i, align 4
  store ptr %174, ptr %memberidx1.i.i.i159, align 8
  store ptr %173, ptr %4, align 8
  %176 = call ptr @malloc(i32 24)
  %177 = call ptr @malloc(i32 2048)
  store ptr %177, ptr %176, align 8
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %ifend29, %for.body.i.i.i
  %i.0.i.i.i313 = phi i64 [ 0, %ifend29 ], [ %179, %for.body.i.i.i ]
  %178 = load ptr, ptr %176, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %178, i64 %i.0.i.i.i313
  store ptr null, ptr %ptridx.i.i.i, align 8
  %179 = add nuw nsw i64 %i.0.i.i.i313, 1
  %180 = icmp ult i64 %i.0.i.i.i313, 255
  br i1 %180, label %for.body.i.i.i, label %TypeChecker_constructor.exit.i

TypeChecker_constructor.exit.i:                   ; preds = %for.body.i.i.i
  %memberidx4.i.i160 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 9
  %memberidx2.i.i.i161 = getelementptr inbounds %Map_string_Generic_, ptr %176, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i.i161, align 4
  %memberidx3.i9.i.i = getelementptr inbounds %Map_string_Generic_, ptr %176, i64 0, i32 2
  store i64 0, ptr %memberidx3.i9.i.i, align 4
  store ptr %176, ptr %memberidx4.i.i160, align 8
  %181 = load ptr, ptr %memberidx.i.i156, align 8
  %182 = load ptr, ptr %181, align 8
  %memberidx1.i9.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %182, i64 0, i32 1
  %183 = load ptr, ptr %memberidx1.i9.i, align 8
  %184 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %184, ptr noundef nonnull align 8 dereferenceable(12) @85, i64 12, i1 false)
  %185 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %185, align 8
  %memberidx.i.i.i10.i = getelementptr inbounds %string, ptr %185, i64 0, i32 1
  store ptr %184, ptr %memberidx.i.i.i10.i, align 8
  %memberidx1.i.i.i11.i = getelementptr inbounds %string, ptr %185, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i.i11.i, align 4
  %memberidx2.i.i.i12.i = getelementptr inbounds %string, ptr %185, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i.i12.i, align 4
  %186 = call ptr %183(ptr nonnull %181, ptr nonnull %185)
  %187 = call ptr @malloc(i32 56)
  call fastcc void @ModuleAST_constructor(ptr %187)
  %188 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %188, ptr noundef nonnull align 8 dereferenceable(12) @85, i64 12, i1 false)
  %189 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %189, align 8
  %memberidx.i.i3.i.i = getelementptr inbounds %string, ptr %189, i64 0, i32 1
  store ptr %188, ptr %memberidx.i.i3.i.i, align 8
  %memberidx1.i.i4.i.i = getelementptr inbounds %string, ptr %189, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i4.i.i, align 4
  %memberidx2.i.i5.i.i = getelementptr inbounds %string, ptr %189, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i5.i.i, align 4
  %190 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %4, ptr %187, ptr nonnull %189)
  %191 = load ptr, ptr %memberidx.i.i156, align 8
  %memberidx1.i14.i = getelementptr inbounds %Compiler, ptr %191, i64 0, i32 4
  %192 = load ptr, ptr %memberidx1.i14.i, align 8
  %193 = call fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr nonnull %4, ptr %192, ptr null)
  store i64 0, ptr %memberidx1.i.i157, align 8
  %memberidx1.i16.i163 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 5
  %194 = load ptr, ptr %4, align 8
  %memberidx1.i.i17.i = getelementptr inbounds %Program, ptr %194, i64 0, i32 1
  %195 = load ptr, ptr %memberidx1.i.i17.i, align 8
  %memberidx.i.i.i18.i = getelementptr inbounds %Array_Module_, ptr %195, i64 0, i32 1
  %196 = load ptr, ptr %memberidx.i.i.i18.i, align 8
  %197 = load ptr, ptr %196, align 8
  %memberidx2.i19.i = getelementptr inbounds %Module, ptr %197, i64 0, i32 6
  %198 = load ptr, ptr %memberidx2.i19.i, align 8
  store ptr %198, ptr %memberidx1.i16.i163, align 8
  %199 = load ptr, ptr %memberidx1.i.i17.i, align 8
  %memberidx.i.i.i164 = getelementptr inbounds %Array_Module_, ptr %199, i64 0, i32 1
  %200 = load ptr, ptr %memberidx.i.i.i164, align 8
  %ptridx.i.i21.i = getelementptr inbounds ptr, ptr %200, i64 1
  %201 = load ptr, ptr %ptridx.i.i21.i, align 8
  call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %4, ptr %201)
  %202 = load ptr, ptr %memberidx.i.i156, align 8
  %memberidx1.i23.i = getelementptr inbounds %Compiler, ptr %202, i64 0, i32 6
  %203 = load ptr, ptr %memberidx1.i23.i, align 8
  %memberidx2.i24.i = getelementptr inbounds %Array_FloError_, ptr %203, i64 0, i32 2
  %204 = load i64, ptr %memberidx2.i24.i, align 4
  %205 = icmp sgt i64 %204, 0
  br i1 %205, label %TypeChecker_check.exit, label %ifend.i

ifend.i:                                          ; preds = %TypeChecker_constructor.exit.i
  %206 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %4, ptr %169, ptr %116)
  %207 = load ptr, ptr %4, align 8
  br label %TypeChecker_check.exit

TypeChecker_check.exit:                           ; preds = %TypeChecker_constructor.exit.i, %ifend.i
  %common.ret.op.i = phi ptr [ %207, %ifend.i ], [ null, %TypeChecker_constructor.exit.i ]
  call void @llvm.lifetime.end.p0(i64 66, ptr nonnull %4)
  %208 = load ptr, ptr %117, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %208, i64 0, i32 3
  %209 = load ptr, ptr %memberidx30, align 8
  %210 = call i1 %209(ptr nonnull %117)
  br i1 %210, label %common.ret, label %ifend33

ifend33:                                          ; preds = %TypeChecker_check.exit
  call void @llvm.lifetime.start.p0(i64 81, ptr nonnull %3)
  %memberidx.i283 = getelementptr inbounds %Program, ptr %common.ret.op.i, i64 0, i32 1
  %211 = load ptr, ptr %memberidx.i283, align 8
  %memberidx.i.i284 = getelementptr inbounds %Array_Module_, ptr %211, i64 0, i32 1
  %212 = load ptr, ptr %memberidx.i.i284, align 8
  %ptridx.i.i285 = getelementptr inbounds ptr, ptr %212, i64 2
  %213 = load ptr, ptr %ptridx.i.i285, align 8
  %memberidx1.i286 = getelementptr inbounds %Module, ptr %213, i64 0, i32 1
  %214 = load ptr, ptr %memberidx1.i286, align 8
  %memberidx.i69.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 4
  store ptr %common.ret.op.i, ptr %memberidx.i69.i, align 8
  %215 = call ptr @malloc(i32 24)
  %216 = call ptr @malloc(i32 2048)
  store ptr %216, ptr %215, align 8
  br label %for.body.i.i.i288

for.body.i.i.i288:                                ; preds = %for.body.i.i.i288, %ifend33
  %i.0.i.i219.i = phi i64 [ 0, %ifend33 ], [ %218, %for.body.i.i.i288 ]
  %217 = load ptr, ptr %215, align 8
  %ptridx.i.i.i287 = getelementptr inbounds ptr, ptr %217, i64 %i.0.i.i219.i
  store ptr null, ptr %ptridx.i.i.i287, align 8
  %218 = add nuw nsw i64 %i.0.i.i219.i, 1
  %219 = icmp ult i64 %i.0.i.i219.i, 255
  br i1 %219, label %for.body.i.i.i288, label %Map_string_LLVMValueRef__constructor.exit.i.i

Map_string_LLVMValueRef__constructor.exit.i.i:    ; preds = %for.body.i.i.i288
  %memberidx1.i70.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 6
  %memberidx2.i.i.i289 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %215, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i.i289, align 4
  %memberidx3.i.i.i290 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %215, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i.i290, align 4
  store ptr %215, ptr %memberidx1.i70.i, align 8
  %220 = call ptr @malloc(i32 24)
  %221 = call ptr @malloc(i32 2048)
  store ptr %221, ptr %220, align 8
  br label %for.body.i23.i.i

for.body.i23.i.i:                                 ; preds = %for.body.i23.i.i, %Map_string_LLVMValueRef__constructor.exit.i.i
  %i.0.i20.i218.i = phi i64 [ 0, %Map_string_LLVMValueRef__constructor.exit.i.i ], [ %223, %for.body.i23.i.i ]
  %222 = load ptr, ptr %220, align 8
  %ptridx.i22.i.i = getelementptr inbounds ptr, ptr %222, i64 %i.0.i20.i218.i
  store ptr null, ptr %ptridx.i22.i.i, align 8
  %223 = add nuw nsw i64 %i.0.i20.i218.i, 1
  %224 = icmp ult i64 %i.0.i20.i218.i, 255
  br i1 %224, label %for.body.i23.i.i, label %Map_string_LLVMValueRef__constructor.exit26.i.i

Map_string_LLVMValueRef__constructor.exit26.i.i:  ; preds = %for.body.i23.i.i
  %memberidx2.i.i291 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 7
  %memberidx2.i24.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %220, i64 0, i32 1
  store i64 256, ptr %memberidx2.i24.i.i, align 4
  %memberidx3.i25.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %220, i64 0, i32 2
  store i64 0, ptr %memberidx3.i25.i.i, align 4
  store ptr %220, ptr %memberidx2.i.i291, align 8
  %225 = call ptr @malloc(i32 24)
  %226 = call ptr @malloc(i32 2048)
  store ptr %226, ptr %225, align 8
  br label %for.body.i30.i.i

for.body.i30.i.i:                                 ; preds = %for.body.i30.i.i, %Map_string_LLVMValueRef__constructor.exit26.i.i
  %i.0.i27.i217.i = phi i64 [ 0, %Map_string_LLVMValueRef__constructor.exit26.i.i ], [ %228, %for.body.i30.i.i ]
  %227 = load ptr, ptr %225, align 8
  %ptridx.i29.i.i = getelementptr inbounds ptr, ptr %227, i64 %i.0.i27.i217.i
  store ptr null, ptr %ptridx.i29.i.i, align 8
  %228 = add nuw nsw i64 %i.0.i27.i217.i, 1
  %229 = icmp ult i64 %i.0.i27.i217.i, 255
  br i1 %229, label %for.body.i30.i.i, label %Map_string_CGClassType__constructor.exit.i.i

Map_string_CGClassType__constructor.exit.i.i:     ; preds = %for.body.i30.i.i
  %memberidx3.i.i292 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 8
  %memberidx2.i31.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %225, i64 0, i32 1
  store i64 256, ptr %memberidx2.i31.i.i, align 4
  %memberidx3.i32.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %225, i64 0, i32 2
  store i64 0, ptr %memberidx3.i32.i.i, align 4
  store ptr %225, ptr %memberidx3.i.i292, align 8
  %230 = call ptr @malloc(i32 24)
  %231 = call ptr @malloc(i32 2048)
  store ptr %231, ptr %230, align 8
  br label %for.body.i36.i.i

for.body.i36.i.i:                                 ; preds = %for.body.i36.i.i, %Map_string_CGClassType__constructor.exit.i.i
  %i.0.i33.i216.i = phi i64 [ 0, %Map_string_CGClassType__constructor.exit.i.i ], [ %233, %for.body.i36.i.i ]
  %232 = load ptr, ptr %230, align 8
  %ptridx.i35.i.i = getelementptr inbounds ptr, ptr %232, i64 %i.0.i33.i216.i
  store ptr null, ptr %ptridx.i35.i.i, align 8
  %233 = add nuw nsw i64 %i.0.i33.i216.i, 1
  %234 = icmp ult i64 %i.0.i33.i216.i, 255
  br i1 %234, label %for.body.i36.i.i, label %Map_string_CGEnumType__constructor.exit.i.i

Map_string_CGEnumType__constructor.exit.i.i:      ; preds = %for.body.i36.i.i
  %memberidx4.i.i293 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 9
  %memberidx2.i37.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %230, i64 0, i32 1
  store i64 256, ptr %memberidx2.i37.i.i, align 4
  %memberidx3.i38.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %230, i64 0, i32 2
  store i64 0, ptr %memberidx3.i38.i.i, align 4
  store ptr %230, ptr %memberidx4.i.i293, align 8
  %235 = call ptr @malloc(i32 24)
  %236 = call ptr @malloc(i32 2048)
  store ptr %236, ptr %235, align 8
  br label %for.body.i42.i.i

for.body.i42.i.i:                                 ; preds = %for.body.i42.i.i, %Map_string_CGEnumType__constructor.exit.i.i
  %i.0.i39.i215.i = phi i64 [ 0, %Map_string_CGEnumType__constructor.exit.i.i ], [ %238, %for.body.i42.i.i ]
  %237 = load ptr, ptr %235, align 8
  %ptridx.i41.i.i = getelementptr inbounds ptr, ptr %237, i64 %i.0.i39.i215.i
  store ptr null, ptr %ptridx.i41.i.i, align 8
  %238 = add nuw nsw i64 %i.0.i39.i215.i, 1
  %239 = icmp ult i64 %i.0.i39.i215.i, 255
  br i1 %239, label %for.body.i42.i.i, label %CodeGen_constructor.exit.i

CodeGen_constructor.exit.i:                       ; preds = %for.body.i42.i.i
  %memberidx5.i71.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 10
  %memberidx2.i43.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %235, i64 0, i32 1
  store i64 256, ptr %memberidx2.i43.i.i, align 4
  %memberidx3.i44.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %235, i64 0, i32 2
  store i64 0, ptr %memberidx3.i44.i.i, align 4
  store ptr %235, ptr %memberidx5.i71.i, align 8
  %memberidx6.i.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 5
  store i1 true, ptr %memberidx6.i.i, align 8
  %memberidx8.i.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx8.i.i, i8 0, i64 16, i1 false)
  %240 = load ptr, ptr %214, align 8
  %memberidx10.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %240, i64 0, i32 5
  %241 = load ptr, ptr %memberidx10.i.i, align 8
  %242 = call ptr %241(ptr nonnull %214)
  %243 = call ptr @LLVMModuleCreateWithName(ptr %242)
  store ptr %243, ptr %3, align 8
  %memberidx2.i294 = getelementptr inbounds %Module, ptr %213, i64 0, i32 7
  %244 = load ptr, ptr %memberidx2.i294, align 8
  %245 = call ptr @malloc(i32 25)
  %memberidx.i72.i = getelementptr inbounds %Array_Enum_, ptr %244, i64 0, i32 1
  %246 = load ptr, ptr %memberidx.i72.i, align 8
  %memberidx1.i73.i = getelementptr inbounds %Array_Enum_, ptr %244, i64 0, i32 2
  %247 = load i64, ptr %memberidx1.i73.i, align 4
  store i1 false, ptr %245, align 1
  %memberidx1.i.i.i295 = getelementptr inbounds %ArrayIterator_Enum_, ptr %245, i64 0, i32 1
  %memberidx2.i.i74.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %245, i64 0, i32 3
  store ptr %246, ptr %memberidx2.i.i74.i, align 8
  %memberidx3.i.i75.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %245, i64 0, i32 2
  store i64 %247, ptr %memberidx3.i.i75.i, align 4
  store i64 1, ptr %memberidx1.i.i.i295, align 4
  %248 = icmp slt i64 %247, 1
  br i1 %248, label %for.end.i, label %for.body.i297

for.body.i297:                                    ; preds = %CodeGen_constructor.exit.i, %for.body.i297
  %249 = phi i64 [ %250, %for.body.i297 ], [ 1, %CodeGen_constructor.exit.i ]
  %enum_.0213.in.i = phi ptr [ %ptridx.i82.i, %for.body.i297 ], [ %246, %CodeGen_constructor.exit.i ]
  %enum_.0213.i = load ptr, ptr %enum_.0213.in.i, align 8
  call fastcc void @CodeGen_declare_enum(ptr nonnull %3, ptr %enum_.0213.i)
  %250 = add nuw nsw i64 %249, 1
  store i64 %250, ptr %memberidx1.i.i.i295, align 4
  %ptridx.i82.i = getelementptr inbounds ptr, ptr %246, i64 %249
  %.not.i296 = icmp slt i64 %249, %247
  br i1 %.not.i296, label %for.body.i297, label %for.end.i

for.end.i:                                        ; preds = %for.body.i297, %CodeGen_constructor.exit.i
  call void @free(ptr nonnull %245)
  %memberidx6.i = getelementptr inbounds %Module, ptr %213, i64 0, i32 4
  %251 = load ptr, ptr %memberidx6.i, align 8
  %252 = call ptr @malloc(i32 25)
  %memberidx.i84.i = getelementptr inbounds %Array_Class_, ptr %251, i64 0, i32 1
  %253 = load ptr, ptr %memberidx.i84.i, align 8
  %memberidx1.i85.i = getelementptr inbounds %Array_Class_, ptr %251, i64 0, i32 2
  %254 = load i64, ptr %memberidx1.i85.i, align 4
  store i1 false, ptr %252, align 1
  %memberidx1.i.i86.i = getelementptr inbounds %ArrayIterator_Class_, ptr %252, i64 0, i32 1
  %memberidx2.i.i87.i = getelementptr inbounds %ArrayIterator_Class_, ptr %252, i64 0, i32 3
  store ptr %253, ptr %memberidx2.i.i87.i, align 8
  %memberidx3.i.i88.i = getelementptr inbounds %ArrayIterator_Class_, ptr %252, i64 0, i32 2
  store i64 %254, ptr %memberidx3.i.i88.i, align 4
  store i64 1, ptr %memberidx1.i.i86.i, align 4
  %255 = icmp slt i64 %254, 1
  br i1 %255, label %for.end10.i, label %for.body8.i

for.body8.i:                                      ; preds = %for.end.i, %for.body8.i
  %256 = phi i64 [ %257, %for.body8.i ], [ 1, %for.end.i ]
  %storemerge210.in.i = phi ptr [ %ptridx.i95.i, %for.body8.i ], [ %253, %for.end.i ]
  %storemerge210.i = load ptr, ptr %storemerge210.in.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %3, ptr %storemerge210.i)
  %257 = add nuw nsw i64 %256, 1
  store i64 %257, ptr %memberidx1.i.i86.i, align 4
  %ptridx.i95.i = getelementptr inbounds ptr, ptr %253, i64 %256
  %.not245.i = icmp slt i64 %256, %254
  br i1 %.not245.i, label %for.body8.i, label %for.end10.i

for.end10.i:                                      ; preds = %for.body8.i, %for.end.i
  call void @free(ptr nonnull %252)
  %memberidx14.i = getelementptr inbounds %Module, ptr %213, i64 0, i32 9
  %258 = load ptr, ptr %memberidx14.i, align 8
  %259 = call ptr @malloc(i32 25)
  %memberidx.i97.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %258, i64 0, i32 1
  %260 = load ptr, ptr %memberidx.i97.i, align 8
  %memberidx1.i98.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %258, i64 0, i32 2
  %261 = load i64, ptr %memberidx1.i98.i, align 4
  store i1 false, ptr %259, align 1
  %memberidx1.i.i99.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %259, i64 0, i32 1
  %memberidx2.i.i100.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %259, i64 0, i32 3
  store ptr %260, ptr %memberidx2.i.i100.i, align 8
  %memberidx3.i.i101.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %259, i64 0, i32 2
  store i64 %261, ptr %memberidx3.i.i101.i, align 4
  store i64 1, ptr %memberidx1.i.i99.i, align 4
  %262 = icmp slt i64 %261, 1
  br i1 %262, label %for.end18.i, label %for.body16.i

for.body16.i:                                     ; preds = %for.end10.i, %for.body16.i
  %263 = phi i64 [ %264, %for.body16.i ], [ 1, %for.end10.i ]
  %storemerge64207.in.i = phi ptr [ %ptridx.i108.i, %for.body16.i ], [ %260, %for.end10.i ]
  %storemerge64207.i = load ptr, ptr %storemerge64207.in.i, align 8
  call fastcc void @CodeGen_codegen_const_declaration(ptr nonnull %3, ptr null, ptr %storemerge64207.i)
  %264 = add nuw nsw i64 %263, 1
  store i64 %264, ptr %memberidx1.i.i99.i, align 4
  %ptridx.i108.i = getelementptr inbounds ptr, ptr %260, i64 %263
  %.not246.i = icmp slt i64 %263, %261
  br i1 %.not246.i, label %for.body16.i, label %for.end18.i

for.end18.i:                                      ; preds = %for.body16.i, %for.end10.i
  call void @free(ptr nonnull %259)
  %memberidx22.i = getelementptr inbounds %Module, ptr %213, i64 0, i32 10
  %265 = load ptr, ptr %memberidx22.i, align 8
  %266 = call ptr @malloc(i32 25)
  %memberidx.i110.i = getelementptr inbounds %Array_VarDeclaration_, ptr %265, i64 0, i32 1
  %267 = load ptr, ptr %memberidx.i110.i, align 8
  %memberidx1.i111.i = getelementptr inbounds %Array_VarDeclaration_, ptr %265, i64 0, i32 2
  %268 = load i64, ptr %memberidx1.i111.i, align 4
  store i1 false, ptr %266, align 1
  %memberidx1.i.i112.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %266, i64 0, i32 1
  %memberidx2.i.i113.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %266, i64 0, i32 3
  store ptr %267, ptr %memberidx2.i.i113.i, align 8
  %memberidx3.i.i114.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %266, i64 0, i32 2
  store i64 %268, ptr %memberidx3.i.i114.i, align 4
  store i64 1, ptr %memberidx1.i.i112.i, align 4
  %269 = icmp slt i64 %268, 1
  br i1 %269, label %for.end26.i, label %for.body24.i

for.body24.i:                                     ; preds = %for.end18.i, %for.body24.i
  %270 = phi i64 [ %271, %for.body24.i ], [ 1, %for.end18.i ]
  %storemerge65204.in.i = phi ptr [ %ptridx.i121.i, %for.body24.i ], [ %267, %for.end18.i ]
  %storemerge65204.i = load ptr, ptr %storemerge65204.in.i, align 8
  call fastcc void @CodeGen_codegen_var_declaration(ptr nonnull %3, ptr null, ptr %storemerge65204.i)
  %271 = add nuw nsw i64 %270, 1
  store i64 %271, ptr %memberidx1.i.i112.i, align 4
  %ptridx.i121.i = getelementptr inbounds ptr, ptr %267, i64 %270
  %.not247.i = icmp slt i64 %270, %268
  br i1 %.not247.i, label %for.body24.i, label %for.end26.i

for.end26.i:                                      ; preds = %for.body24.i, %for.end18.i
  call void @free(ptr nonnull %266)
  %272 = load ptr, ptr %memberidx6.i, align 8
  %273 = call ptr @malloc(i32 25)
  %memberidx.i123.i = getelementptr inbounds %Array_Class_, ptr %272, i64 0, i32 1
  %274 = load ptr, ptr %memberidx.i123.i, align 8
  %memberidx1.i124.i = getelementptr inbounds %Array_Class_, ptr %272, i64 0, i32 2
  %275 = load i64, ptr %memberidx1.i124.i, align 4
  store i1 false, ptr %273, align 1
  %memberidx1.i.i125.i = getelementptr inbounds %ArrayIterator_Class_, ptr %273, i64 0, i32 1
  %memberidx2.i.i126.i = getelementptr inbounds %ArrayIterator_Class_, ptr %273, i64 0, i32 3
  store ptr %274, ptr %memberidx2.i.i126.i, align 8
  %memberidx3.i.i127.i = getelementptr inbounds %ArrayIterator_Class_, ptr %273, i64 0, i32 2
  store i64 %275, ptr %memberidx3.i.i127.i, align 4
  store i64 1, ptr %memberidx1.i.i125.i, align 4
  %276 = icmp slt i64 %275, 1
  br i1 %276, label %for.end35.i, label %for.body33.i

for.body33.i:                                     ; preds = %for.end26.i, %for.body33.i
  %277 = phi i64 [ %278, %for.body33.i ], [ 1, %for.end26.i ]
  %storemerge66201.in.i = phi ptr [ %ptridx.i134.i, %for.body33.i ], [ %274, %for.end26.i ]
  %storemerge66201.i = load ptr, ptr %storemerge66201.in.i, align 8
  call fastcc void @CodeGen_codegen_class(ptr nonnull %3, ptr %storemerge66201.i)
  %278 = add nuw nsw i64 %277, 1
  store i64 %278, ptr %memberidx1.i.i125.i, align 4
  %ptridx.i134.i = getelementptr inbounds ptr, ptr %274, i64 %277
  %.not248.i = icmp slt i64 %277, %275
  br i1 %.not248.i, label %for.body33.i, label %for.end35.i

for.end35.i:                                      ; preds = %for.body33.i, %for.end26.i
  call void @free(ptr nonnull %273)
  %memberidx39.i = getelementptr inbounds %Module, ptr %213, i64 0, i32 5
  %279 = load ptr, ptr %memberidx39.i, align 8
  %280 = call ptr @malloc(i32 25)
  %memberidx.i136.i = getelementptr inbounds %Array_Function_, ptr %279, i64 0, i32 1
  %281 = load ptr, ptr %memberidx.i136.i, align 8
  %memberidx1.i137.i = getelementptr inbounds %Array_Function_, ptr %279, i64 0, i32 2
  %282 = load i64, ptr %memberidx1.i137.i, align 4
  store i1 false, ptr %280, align 1
  %memberidx1.i.i138.i = getelementptr inbounds %ArrayIterator_Function_, ptr %280, i64 0, i32 1
  %memberidx2.i.i139.i = getelementptr inbounds %ArrayIterator_Function_, ptr %280, i64 0, i32 3
  store ptr %281, ptr %memberidx2.i.i139.i, align 8
  %memberidx3.i.i140.i = getelementptr inbounds %ArrayIterator_Function_, ptr %280, i64 0, i32 2
  store i64 %282, ptr %memberidx3.i.i140.i, align 4
  store i64 1, ptr %memberidx1.i.i138.i, align 4
  %283 = icmp slt i64 %282, 1
  br i1 %283, label %for.end43.i, label %for.body41.i

for.body41.i:                                     ; preds = %for.end35.i, %for.body41.i
  %284 = phi i64 [ %285, %for.body41.i ], [ 1, %for.end35.i ]
  %storemerge67198.in.i = phi ptr [ %ptridx.i147.i, %for.body41.i ], [ %281, %for.end35.i ]
  %storemerge67198.i = load ptr, ptr %storemerge67198.in.i, align 8
  call fastcc void @CodeGen_codegen_function(ptr nonnull %3, ptr %storemerge67198.i)
  %285 = add nuw nsw i64 %284, 1
  store i64 %285, ptr %memberidx1.i.i138.i, align 4
  %ptridx.i147.i = getelementptr inbounds ptr, ptr %281, i64 %284
  %.not249.i = icmp slt i64 %284, %282
  br i1 %.not249.i, label %for.body41.i, label %for.end43.i

for.end43.i:                                      ; preds = %for.body41.i, %for.end35.i
  call void @free(ptr nonnull %280)
  %286 = load ptr, ptr %memberidx1.i70.i, align 8
  %287 = call ptr @malloc(i32 25)
  %288 = load ptr, ptr %286, align 8
  %memberidx1.i.i158.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %286, i64 0, i32 1
  %289 = load i64, ptr %memberidx1.i.i158.i, align 4
  %memberidx2.i.i159.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %286, i64 0, i32 2
  %290 = load i64, ptr %memberidx2.i.i159.i, align 4
  store i1 false, ptr %287, align 1
  %memberidx1.i.i.i160.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %287, i64 0, i32 1
  store ptr %288, ptr %memberidx1.i.i.i160.i, align 8
  %memberidx2.i.i.i161.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %287, i64 0, i32 2
  %memberidx3.i.i.i162.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %287, i64 0, i32 3
  store i64 %290, ptr %memberidx3.i.i.i162.i, align 4
  %291 = add nsw i64 %289, -1
  store i64 %291, ptr %memberidx2.i.i.i161.i, align 4
  %292 = icmp sgt i64 %289, 0
  br i1 %292, label %while.entry.i.i.preheader.i, label %MapIterator_string_LLVMValueRef__next.exit.i.i

while.entry.i.i.preheader.i:                      ; preds = %for.end43.i
  %293 = shl i64 %289, 3
  %uglygep240.i = getelementptr i8, ptr %288, i64 %293
  br label %while.entry.i.i.i

while.entry.i.i.i:                                ; preds = %ifend.i.i.i, %while.entry.i.i.preheader.i
  %294 = phi i64 [ %297, %ifend.i.i.i ], [ %291, %while.entry.i.i.preheader.i ]
  %295 = phi ptr [ %incdec.ptr.i.i.i, %ifend.i.i.i ], [ %288, %while.entry.i.i.preheader.i ]
  %incdec.ptr.i.i.i = getelementptr inbounds ptr, ptr %295, i64 1
  %296 = load ptr, ptr %295, align 8
  %.not.i.i.i = icmp eq ptr %296, null
  br i1 %.not.i.i.i, label %ifend.i.i.i, label %MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i

ifend.i.i.i:                                      ; preds = %while.entry.i.i.i
  %297 = add nsw i64 %294, -1
  store i64 %297, ptr %memberidx2.i.i.i161.i, align 4
  %298 = icmp sgt i64 %294, 0
  br i1 %298, label %while.entry.i.i.i, label %MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i

MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i: ; preds = %ifend.i.i.i, %while.entry.i.i.i
  %incdec.ptr.i.i.lcssa.i = phi ptr [ %uglygep240.i, %ifend.i.i.i ], [ %incdec.ptr.i.i.i, %while.entry.i.i.i ]
  %memberidx2.i.i.promoted252.i.i = phi i64 [ -1, %ifend.i.i.i ], [ %294, %while.entry.i.i.i ]
  store ptr %incdec.ptr.i.i.lcssa.i, ptr %memberidx1.i.i.i160.i, align 8
  br label %MapIterator_string_LLVMValueRef__next.exit.i.i

MapIterator_string_LLVMValueRef__next.exit.i.i:   ; preds = %MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i, %for.end43.i
  %memberidx2.i.i.promoted.i.i = phi i64 [ %memberidx2.i.i.promoted252.i.i, %MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i ], [ %291, %for.end43.i ]
  %memberidx1.i.i.promoted228.i.i = phi ptr [ %incdec.ptr.i.i.lcssa.i, %MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i ], [ %288, %for.end43.i ]
  %storemerge175224.i.i = icmp slt i64 %290, 1
  br i1 %storemerge175224.i.i, label %for.end.i.i, label %for.body.i163.i

for.body.i163.i:                                  ; preds = %MapIterator_string_LLVMValueRef__next.exit.i.i, %MapIterator_string_LLVMValueRef__next.exit72.i.i
  %299 = phi i64 [ %310, %MapIterator_string_LLVMValueRef__next.exit72.i.i ], [ %memberidx2.i.i.promoted.i.i, %MapIterator_string_LLVMValueRef__next.exit.i.i ]
  %incdec.ptr.i65.lcssa230.i.i = phi ptr [ %incdec.ptr.i65.lcssa229.i.i, %MapIterator_string_LLVMValueRef__next.exit72.i.i ], [ %memberidx1.i.i.promoted228.i.i, %MapIterator_string_LLVMValueRef__next.exit.i.i ]
  %storemerge184225.in.i.i = phi i64 [ %storemerge184225.i.i, %MapIterator_string_LLVMValueRef__next.exit72.i.i ], [ %290, %MapIterator_string_LLVMValueRef__next.exit.i.i ]
  %storemerge184225.i.i = add nsw i64 %storemerge184225.in.i.i, -1
  %var_entry.0.in.i.i = getelementptr inbounds ptr, ptr %incdec.ptr.i65.lcssa230.i.i, i64 -1
  %var_entry.0.i.i = load ptr, ptr %var_entry.0.in.i.i, align 8
  %300 = load ptr, ptr %var_entry.0.i.i, align 8
  %memberidx.i62.i.i = getelementptr inbounds %string, ptr %300, i64 0, i32 1
  %301 = load ptr, ptr %memberidx.i62.i.i, align 8
  call void @free(ptr %301)
  call void @free(ptr %300)
  %302 = add nsw i64 %299, -1
  %303 = icmp sgt i64 %299, 0
  br i1 %303, label %while.entry.i67.preheader.i.i, label %MapIterator_string_LLVMValueRef__next.exit72.i.i

while.entry.i67.preheader.i.i:                    ; preds = %for.body.i163.i
  %304 = shl i64 %299, 3
  %uglygep249.i.i = getelementptr i8, ptr %incdec.ptr.i65.lcssa230.i.i, i64 %304
  br label %while.entry.i67.i.i

while.entry.i67.i.i:                              ; preds = %ifend.i71.i.i, %while.entry.i67.preheader.i.i
  %305 = phi i64 [ %308, %ifend.i71.i.i ], [ %302, %while.entry.i67.preheader.i.i ]
  %306 = phi ptr [ %incdec.ptr.i65.i.i, %ifend.i71.i.i ], [ %incdec.ptr.i65.lcssa230.i.i, %while.entry.i67.preheader.i.i ]
  %incdec.ptr.i65.i.i = getelementptr inbounds ptr, ptr %306, i64 1
  %307 = load ptr, ptr %306, align 8
  %.not.i66.i.i = icmp eq ptr %307, null
  br i1 %.not.i66.i.i, label %ifend.i71.i.i, label %MapIterator_string_LLVMValueRef__next.exit72.i.i

ifend.i71.i.i:                                    ; preds = %while.entry.i67.i.i
  %308 = add nsw i64 %305, -1
  %309 = icmp sgt i64 %305, 0
  br i1 %309, label %while.entry.i67.i.i, label %MapIterator_string_LLVMValueRef__next.exit72.i.i

MapIterator_string_LLVMValueRef__next.exit72.i.i: ; preds = %ifend.i71.i.i, %while.entry.i67.i.i, %for.body.i163.i
  %310 = phi i64 [ %302, %for.body.i163.i ], [ %305, %while.entry.i67.i.i ], [ -1, %ifend.i71.i.i ]
  %incdec.ptr.i65.lcssa229.i.i = phi ptr [ %incdec.ptr.i65.lcssa230.i.i, %for.body.i163.i ], [ %incdec.ptr.i65.i.i, %while.entry.i67.i.i ], [ %uglygep249.i.i, %ifend.i71.i.i ]
  %storemerge175.i.i = icmp slt i64 %storemerge184225.in.i.i, 2
  br i1 %storemerge175.i.i, label %for.end.i.loopexit.i, label %for.body.i163.i

for.end.i.loopexit.i:                             ; preds = %MapIterator_string_LLVMValueRef__next.exit72.i.i
  %.pre.i = load ptr, ptr %286, align 8
  br label %for.end.i.i

for.end.i.i:                                      ; preds = %for.end.i.loopexit.i, %MapIterator_string_LLVMValueRef__next.exit.i.i
  %311 = phi ptr [ %.pre.i, %for.end.i.loopexit.i ], [ %288, %MapIterator_string_LLVMValueRef__next.exit.i.i ]
  call void @free(ptr nonnull %287)
  call void @free(ptr %311)
  call void @free(ptr %286)
  %312 = load ptr, ptr %memberidx2.i.i291, align 8
  %313 = call ptr @malloc(i32 25)
  %314 = load ptr, ptr %312, align 8
  %memberidx1.i83.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %312, i64 0, i32 1
  %315 = load i64, ptr %memberidx1.i83.i.i, align 4
  %memberidx2.i84.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %312, i64 0, i32 2
  %316 = load i64, ptr %memberidx2.i84.i.i, align 4
  store i1 false, ptr %313, align 1
  %memberidx1.i.i85.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %313, i64 0, i32 1
  store ptr %314, ptr %memberidx1.i.i85.i.i, align 8
  %memberidx2.i.i86.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %313, i64 0, i32 2
  %memberidx3.i.i87.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %313, i64 0, i32 3
  store i64 %316, ptr %memberidx3.i.i87.i.i, align 4
  %317 = add nsw i64 %315, -1
  store i64 %317, ptr %memberidx2.i.i86.i.i, align 4
  %318 = icmp sgt i64 %315, 0
  br i1 %318, label %while.entry.i92.i.preheader.i, label %MapIterator_string_LLVMValueRef__next.exit97.i.i

while.entry.i92.i.preheader.i:                    ; preds = %for.end.i.i
  %319 = shl i64 %315, 3
  %uglygep239.i = getelementptr i8, ptr %314, i64 %319
  br label %while.entry.i92.i.i

while.entry.i92.i.i:                              ; preds = %ifend.i96.i.i, %while.entry.i92.i.preheader.i
  %320 = phi i64 [ %323, %ifend.i96.i.i ], [ %317, %while.entry.i92.i.preheader.i ]
  %321 = phi ptr [ %incdec.ptr.i90.i.i, %ifend.i96.i.i ], [ %314, %while.entry.i92.i.preheader.i ]
  %incdec.ptr.i90.i.i = getelementptr inbounds ptr, ptr %321, i64 1
  %322 = load ptr, ptr %321, align 8
  %.not.i91.i.i = icmp eq ptr %322, null
  br i1 %.not.i91.i.i, label %ifend.i96.i.i, label %MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i

ifend.i96.i.i:                                    ; preds = %while.entry.i92.i.i
  %323 = add nsw i64 %320, -1
  store i64 %323, ptr %memberidx2.i.i86.i.i, align 4
  %324 = icmp sgt i64 %320, 0
  br i1 %324, label %while.entry.i92.i.i, label %MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i

MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i: ; preds = %ifend.i96.i.i, %while.entry.i92.i.i
  %incdec.ptr.i90.i.lcssa.i = phi ptr [ %uglygep239.i, %ifend.i96.i.i ], [ %incdec.ptr.i90.i.i, %while.entry.i92.i.i ]
  %memberidx2.i.i86.promoted255.i.i = phi i64 [ -1, %ifend.i96.i.i ], [ %320, %while.entry.i92.i.i ]
  store ptr %incdec.ptr.i90.i.lcssa.i, ptr %memberidx1.i.i85.i.i, align 8
  br label %MapIterator_string_LLVMValueRef__next.exit97.i.i

MapIterator_string_LLVMValueRef__next.exit97.i.i: ; preds = %MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i, %for.end.i.i
  %memberidx2.i.i86.promoted.i.i = phi i64 [ %memberidx2.i.i86.promoted255.i.i, %MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i ], [ %317, %for.end.i.i ]
  %.pn176.in.promoted.i.i = phi ptr [ %incdec.ptr.i90.i.lcssa.i, %MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i ], [ %314, %for.end.i.i ]
  %storemerge185217.i.i = icmp slt i64 %316, 1
  store i1 %storemerge185217.i.i, ptr %313, align 1
  br i1 %storemerge185217.i.i, label %for.end10.i.i, label %for.body8.i.i

for.body8.i.i:                                    ; preds = %MapIterator_string_LLVMValueRef__next.exit97.i.i, %MapIterator_string_LLVMValueRef__next.exit123.i.i
  %325 = phi i64 [ %336, %MapIterator_string_LLVMValueRef__next.exit123.i.i ], [ %memberidx2.i.i86.promoted.i.i, %MapIterator_string_LLVMValueRef__next.exit97.i.i ]
  %.pn176221.i.i = phi ptr [ %.pn176220.i.i, %MapIterator_string_LLVMValueRef__next.exit123.i.i ], [ %.pn176.in.promoted.i.i, %MapIterator_string_LLVMValueRef__next.exit97.i.i ]
  %storemerge189218.in.i.i = phi i64 [ %storemerge189218.i.i, %MapIterator_string_LLVMValueRef__next.exit123.i.i ], [ %316, %MapIterator_string_LLVMValueRef__next.exit97.i.i ]
  %storemerge189218.i.i = add nsw i64 %storemerge189218.in.i.i, -1
  %storemerge.in.i.i = getelementptr inbounds ptr, ptr %.pn176221.i.i, i64 -1
  %storemerge.i.i = load ptr, ptr %storemerge.in.i.i, align 8
  %326 = load ptr, ptr %storemerge.i.i, align 8
  %memberidx.i113.i.i = getelementptr inbounds %string, ptr %326, i64 0, i32 1
  %327 = load ptr, ptr %memberidx.i113.i.i, align 8
  call void @free(ptr %327)
  call void @free(ptr %326)
  %328 = add nsw i64 %325, -1
  %329 = icmp sgt i64 %325, 0
  br i1 %329, label %while.entry.i118.preheader.i.i, label %MapIterator_string_LLVMValueRef__next.exit123.i.i

while.entry.i118.preheader.i.i:                   ; preds = %for.body8.i.i
  %330 = shl i64 %325, 3
  %uglygep248.i.i = getelementptr i8, ptr %.pn176221.i.i, i64 %330
  br label %while.entry.i118.i.i

while.entry.i118.i.i:                             ; preds = %ifend.i122.i.i, %while.entry.i118.preheader.i.i
  %331 = phi i64 [ %334, %ifend.i122.i.i ], [ %328, %while.entry.i118.preheader.i.i ]
  %332 = phi ptr [ %incdec.ptr.i116.i.i, %ifend.i122.i.i ], [ %.pn176221.i.i, %while.entry.i118.preheader.i.i ]
  %incdec.ptr.i116.i.i = getelementptr inbounds ptr, ptr %332, i64 1
  %333 = load ptr, ptr %332, align 8
  %.not.i117.i.i = icmp eq ptr %333, null
  br i1 %.not.i117.i.i, label %ifend.i122.i.i, label %MapIterator_string_LLVMValueRef__next.exit123.i.i

ifend.i122.i.i:                                   ; preds = %while.entry.i118.i.i
  %334 = add nsw i64 %331, -1
  %335 = icmp sgt i64 %331, 0
  br i1 %335, label %while.entry.i118.i.i, label %MapIterator_string_LLVMValueRef__next.exit123.i.i

MapIterator_string_LLVMValueRef__next.exit123.i.i: ; preds = %ifend.i122.i.i, %while.entry.i118.i.i, %for.body8.i.i
  %336 = phi i64 [ %328, %for.body8.i.i ], [ %331, %while.entry.i118.i.i ], [ -1, %ifend.i122.i.i ]
  %.pn176220.i.i = phi ptr [ %.pn176221.i.i, %for.body8.i.i ], [ %incdec.ptr.i116.i.i, %while.entry.i118.i.i ], [ %uglygep248.i.i, %ifend.i122.i.i ]
  %storemerge185.i.i = icmp slt i64 %storemerge189218.in.i.i, 2
  br i1 %storemerge185.i.i, label %for.cond7.for.end10_crit_edge.i.i, label %for.body8.i.i

for.cond7.for.end10_crit_edge.i.i:                ; preds = %MapIterator_string_LLVMValueRef__next.exit123.i.i
  store ptr %.pn176220.i.i, ptr %memberidx1.i.i85.i.i, align 8
  store i64 %336, ptr %memberidx2.i.i86.i.i, align 4
  store i1 true, ptr %313, align 1
  %.pre241.i = load ptr, ptr %312, align 8
  br label %for.end10.i.i

for.end10.i.i:                                    ; preds = %for.cond7.for.end10_crit_edge.i.i, %MapIterator_string_LLVMValueRef__next.exit97.i.i
  %337 = phi ptr [ %.pre241.i, %for.cond7.for.end10_crit_edge.i.i ], [ %314, %MapIterator_string_LLVMValueRef__next.exit97.i.i ]
  call void @free(ptr nonnull %313)
  call void @free(ptr %337)
  call void @free(ptr %312)
  %338 = load ptr, ptr %memberidx5.i71.i, align 8
  %339 = call ptr @malloc(i32 25)
  %340 = load ptr, ptr %338, align 8
  %memberidx1.i124.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %338, i64 0, i32 1
  %341 = load i64, ptr %memberidx1.i124.i.i, align 4
  %memberidx2.i125.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %338, i64 0, i32 2
  %342 = load i64, ptr %memberidx2.i125.i.i, align 4
  store i1 false, ptr %339, align 1
  %memberidx1.i.i126.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %339, i64 0, i32 1
  store ptr %340, ptr %memberidx1.i.i126.i.i, align 8
  %memberidx2.i.i127.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %339, i64 0, i32 2
  %memberidx3.i.i128.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %339, i64 0, i32 3
  store i64 %342, ptr %memberidx3.i.i128.i.i, align 4
  %343 = add nsw i64 %341, -1
  store i64 %343, ptr %memberidx2.i.i127.i.i, align 4
  %344 = icmp sgt i64 %341, 0
  br i1 %344, label %while.entry.i133.i.preheader.i, label %MapIterator_string_LLVMValueRef__next.exit138.i.i

while.entry.i133.i.preheader.i:                   ; preds = %for.end10.i.i
  %345 = shl i64 %341, 3
  %uglygep238.i = getelementptr i8, ptr %340, i64 %345
  br label %while.entry.i133.i.i

while.entry.i133.i.i:                             ; preds = %ifend.i137.i.i, %while.entry.i133.i.preheader.i
  %346 = phi i64 [ %349, %ifend.i137.i.i ], [ %343, %while.entry.i133.i.preheader.i ]
  %347 = phi ptr [ %incdec.ptr.i131.i.i, %ifend.i137.i.i ], [ %340, %while.entry.i133.i.preheader.i ]
  %incdec.ptr.i131.i.i = getelementptr inbounds ptr, ptr %347, i64 1
  %348 = load ptr, ptr %347, align 8
  %.not.i132.i.i = icmp eq ptr %348, null
  br i1 %.not.i132.i.i, label %ifend.i137.i.i, label %MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i

ifend.i137.i.i:                                   ; preds = %while.entry.i133.i.i
  %349 = add nsw i64 %346, -1
  store i64 %349, ptr %memberidx2.i.i127.i.i, align 4
  %350 = icmp sgt i64 %346, 0
  br i1 %350, label %while.entry.i133.i.i, label %MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i

MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i: ; preds = %ifend.i137.i.i, %while.entry.i133.i.i
  %incdec.ptr.i131.i.lcssa.i = phi ptr [ %uglygep238.i, %ifend.i137.i.i ], [ %incdec.ptr.i131.i.i, %while.entry.i133.i.i ]
  %memberidx2.i.i127.promoted258.i.i = phi i64 [ -1, %ifend.i137.i.i ], [ %346, %while.entry.i133.i.i ]
  store ptr %incdec.ptr.i131.i.lcssa.i, ptr %memberidx1.i.i126.i.i, align 8
  br label %MapIterator_string_LLVMValueRef__next.exit138.i.i

MapIterator_string_LLVMValueRef__next.exit138.i.i: ; preds = %MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i, %for.end10.i.i
  %memberidx2.i.i127.promoted.i.i = phi i64 [ %memberidx2.i.i127.promoted258.i.i, %MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i ], [ %343, %for.end10.i.i ]
  %.pn178.in.promoted.i.i = phi ptr [ %incdec.ptr.i131.i.lcssa.i, %MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i ], [ %340, %for.end10.i.i ]
  %storemerge186209.i.i = icmp slt i64 %342, 1
  store i1 %storemerge186209.i.i, ptr %339, align 1
  br i1 %storemerge186209.i.i, label %for.end20.i.i, label %for.body18.i.i

for.body18.i.i:                                   ; preds = %MapIterator_string_LLVMValueRef__next.exit138.i.i, %MapIterator_string_LLVMValueRef__next.exit159.i.i
  %351 = phi i64 [ %362, %MapIterator_string_LLVMValueRef__next.exit159.i.i ], [ %memberidx2.i.i127.promoted.i.i, %MapIterator_string_LLVMValueRef__next.exit138.i.i ]
  %.pn178213.i.i = phi ptr [ %.pn178212.i.i, %MapIterator_string_LLVMValueRef__next.exit159.i.i ], [ %.pn178.in.promoted.i.i, %MapIterator_string_LLVMValueRef__next.exit138.i.i ]
  %storemerge190210.in.i.i = phi i64 [ %storemerge190210.i.i, %MapIterator_string_LLVMValueRef__next.exit159.i.i ], [ %342, %MapIterator_string_LLVMValueRef__next.exit138.i.i ]
  %storemerge190210.i.i = add nsw i64 %storemerge190210.in.i.i, -1
  %storemerge58.in.i.i = getelementptr inbounds ptr, ptr %.pn178213.i.i, i64 -1
  %storemerge58.i.i = load ptr, ptr %storemerge58.in.i.i, align 8
  %352 = load ptr, ptr %storemerge58.i.i, align 8
  %memberidx.i149.i.i = getelementptr inbounds %string, ptr %352, i64 0, i32 1
  %353 = load ptr, ptr %memberidx.i149.i.i, align 8
  call void @free(ptr %353)
  call void @free(ptr %352)
  %354 = add nsw i64 %351, -1
  %355 = icmp sgt i64 %351, 0
  br i1 %355, label %while.entry.i154.preheader.i.i, label %MapIterator_string_LLVMValueRef__next.exit159.i.i

while.entry.i154.preheader.i.i:                   ; preds = %for.body18.i.i
  %356 = shl i64 %351, 3
  %uglygep247.i.i = getelementptr i8, ptr %.pn178213.i.i, i64 %356
  br label %while.entry.i154.i.i

while.entry.i154.i.i:                             ; preds = %ifend.i158.i.i, %while.entry.i154.preheader.i.i
  %357 = phi i64 [ %360, %ifend.i158.i.i ], [ %354, %while.entry.i154.preheader.i.i ]
  %358 = phi ptr [ %incdec.ptr.i152.i.i, %ifend.i158.i.i ], [ %.pn178213.i.i, %while.entry.i154.preheader.i.i ]
  %incdec.ptr.i152.i.i = getelementptr inbounds ptr, ptr %358, i64 1
  %359 = load ptr, ptr %358, align 8
  %.not.i153.i.i = icmp eq ptr %359, null
  br i1 %.not.i153.i.i, label %ifend.i158.i.i, label %MapIterator_string_LLVMValueRef__next.exit159.i.i

ifend.i158.i.i:                                   ; preds = %while.entry.i154.i.i
  %360 = add nsw i64 %357, -1
  %361 = icmp sgt i64 %357, 0
  br i1 %361, label %while.entry.i154.i.i, label %MapIterator_string_LLVMValueRef__next.exit159.i.i

MapIterator_string_LLVMValueRef__next.exit159.i.i: ; preds = %ifend.i158.i.i, %while.entry.i154.i.i, %for.body18.i.i
  %362 = phi i64 [ %354, %for.body18.i.i ], [ %357, %while.entry.i154.i.i ], [ -1, %ifend.i158.i.i ]
  %.pn178212.i.i = phi ptr [ %.pn178213.i.i, %for.body18.i.i ], [ %incdec.ptr.i152.i.i, %while.entry.i154.i.i ], [ %uglygep247.i.i, %ifend.i158.i.i ]
  %storemerge186.i.i = icmp slt i64 %storemerge190210.in.i.i, 2
  br i1 %storemerge186.i.i, label %for.cond17.for.end20_crit_edge.i.i, label %for.body18.i.i

for.cond17.for.end20_crit_edge.i.i:               ; preds = %MapIterator_string_LLVMValueRef__next.exit159.i.i
  store ptr %.pn178212.i.i, ptr %memberidx1.i.i126.i.i, align 8
  store i64 %362, ptr %memberidx2.i.i127.i.i, align 4
  store i1 true, ptr %339, align 1
  %.pre242.i = load ptr, ptr %338, align 8
  br label %for.end20.i.i

for.end20.i.i:                                    ; preds = %for.cond17.for.end20_crit_edge.i.i, %MapIterator_string_LLVMValueRef__next.exit138.i.i
  %363 = phi ptr [ %.pre242.i, %for.cond17.for.end20_crit_edge.i.i ], [ %340, %MapIterator_string_LLVMValueRef__next.exit138.i.i ]
  call void @free(ptr nonnull %339)
  call void @free(ptr %363)
  call void @free(ptr %338)
  %364 = load ptr, ptr %memberidx3.i.i292, align 8
  %365 = call ptr @malloc(i32 25)
  %366 = load ptr, ptr %364, align 8
  %memberidx1.i170.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %364, i64 0, i32 1
  %367 = load i64, ptr %memberidx1.i170.i.i, align 4
  %memberidx2.i171.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %364, i64 0, i32 2
  %368 = load i64, ptr %memberidx2.i171.i.i, align 4
  store i1 false, ptr %365, align 1
  %memberidx1.i.i172.i.i = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %365, i64 0, i32 1
  store ptr %366, ptr %memberidx1.i.i172.i.i, align 8
  %memberidx2.i.i173.i.i = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %365, i64 0, i32 2
  %memberidx3.i.i174.i.i = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %365, i64 0, i32 3
  store i64 %368, ptr %memberidx3.i.i174.i.i, align 4
  %369 = add nsw i64 %367, -1
  store i64 %369, ptr %memberidx2.i.i173.i.i, align 4
  %370 = icmp sgt i64 %367, 0
  br i1 %370, label %while.entry.i164.i.preheader.i, label %MapIterator_string_CGClassType__next.exit169.i.i

while.entry.i164.i.preheader.i:                   ; preds = %for.end20.i.i
  %371 = shl i64 %367, 3
  %uglygep237.i = getelementptr i8, ptr %366, i64 %371
  br label %while.entry.i164.i.i

while.entry.i164.i.i:                             ; preds = %ifend.i168.i.i, %while.entry.i164.i.preheader.i
  %372 = phi i64 [ %375, %ifend.i168.i.i ], [ %369, %while.entry.i164.i.preheader.i ]
  %373 = phi ptr [ %incdec.ptr.i162.i.i, %ifend.i168.i.i ], [ %366, %while.entry.i164.i.preheader.i ]
  %incdec.ptr.i162.i.i = getelementptr inbounds ptr, ptr %373, i64 1
  %374 = load ptr, ptr %373, align 8
  %.not.i163.i.i = icmp eq ptr %374, null
  br i1 %.not.i163.i.i, label %ifend.i168.i.i, label %MapIterator_string_CGClassType__next.exit169.loopexit.i.i

ifend.i168.i.i:                                   ; preds = %while.entry.i164.i.i
  %375 = add nsw i64 %372, -1
  store i64 %375, ptr %memberidx2.i.i173.i.i, align 4
  %376 = icmp sgt i64 %372, 0
  br i1 %376, label %while.entry.i164.i.i, label %MapIterator_string_CGClassType__next.exit169.loopexit.i.i

MapIterator_string_CGClassType__next.exit169.loopexit.i.i: ; preds = %ifend.i168.i.i, %while.entry.i164.i.i
  %incdec.ptr.i162.i.lcssa.i = phi ptr [ %uglygep237.i, %ifend.i168.i.i ], [ %incdec.ptr.i162.i.i, %while.entry.i164.i.i ]
  %memberidx2.i.i173.promoted261.i.i = phi i64 [ -1, %ifend.i168.i.i ], [ %372, %while.entry.i164.i.i ]
  store ptr %incdec.ptr.i162.i.lcssa.i, ptr %memberidx1.i.i172.i.i, align 8
  br label %MapIterator_string_CGClassType__next.exit169.i.i

MapIterator_string_CGClassType__next.exit169.i.i: ; preds = %MapIterator_string_CGClassType__next.exit169.loopexit.i.i, %for.end20.i.i
  %memberidx2.i.i173.promoted.i.i = phi i64 [ %memberidx2.i.i173.promoted261.i.i, %MapIterator_string_CGClassType__next.exit169.loopexit.i.i ], [ %369, %for.end20.i.i ]
  %.pn180.in.promoted.i.i = phi ptr [ %incdec.ptr.i162.i.lcssa.i, %MapIterator_string_CGClassType__next.exit169.loopexit.i.i ], [ %366, %for.end20.i.i ]
  %storemerge187201.i.i = icmp slt i64 %368, 1
  store i1 %storemerge187201.i.i, ptr %365, align 1
  br i1 %storemerge187201.i.i, label %for.end30.i.i, label %for.body28.i.i

for.body28.i.i:                                   ; preds = %MapIterator_string_CGClassType__next.exit169.i.i, %MapIterator_string_CGClassType__next.exit.i.i
  %377 = phi i64 [ %389, %MapIterator_string_CGClassType__next.exit.i.i ], [ %memberidx2.i.i173.promoted.i.i, %MapIterator_string_CGClassType__next.exit169.i.i ]
  %.pn180205.i.i = phi ptr [ %.pn180204.i.i, %MapIterator_string_CGClassType__next.exit.i.i ], [ %.pn180.in.promoted.i.i, %MapIterator_string_CGClassType__next.exit169.i.i ]
  %storemerge191202.in.i.i = phi i64 [ %storemerge191202.i.i, %MapIterator_string_CGClassType__next.exit.i.i ], [ %368, %MapIterator_string_CGClassType__next.exit169.i.i ]
  %storemerge191202.i.i = add nsw i64 %storemerge191202.in.i.i, -1
  %storemerge59.in.i.i = getelementptr inbounds ptr, ptr %.pn180205.i.i, i64 -1
  %storemerge59.i.i = load ptr, ptr %storemerge59.in.i.i, align 8
  %378 = load ptr, ptr %storemerge59.i.i, align 8
  %memberidx.i148.i.i = getelementptr inbounds %string, ptr %378, i64 0, i32 1
  %379 = load ptr, ptr %memberidx.i148.i.i, align 8
  call void @free(ptr %379)
  call void @free(ptr %378)
  %memberidx33.i.i = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %storemerge59.i.i, i64 0, i32 1
  %380 = load ptr, ptr %memberidx33.i.i, align 8
  call void @free(ptr %380)
  %381 = add nsw i64 %377, -1
  %382 = icmp sgt i64 %377, 0
  br i1 %382, label %while.entry.i143.preheader.i.i, label %MapIterator_string_CGClassType__next.exit.i.i

while.entry.i143.preheader.i.i:                   ; preds = %for.body28.i.i
  %383 = shl i64 %377, 3
  %uglygep246.i.i = getelementptr i8, ptr %.pn180205.i.i, i64 %383
  br label %while.entry.i143.i.i

while.entry.i143.i.i:                             ; preds = %ifend.i147.i.i, %while.entry.i143.preheader.i.i
  %384 = phi i64 [ %387, %ifend.i147.i.i ], [ %381, %while.entry.i143.preheader.i.i ]
  %385 = phi ptr [ %incdec.ptr.i141.i.i, %ifend.i147.i.i ], [ %.pn180205.i.i, %while.entry.i143.preheader.i.i ]
  %incdec.ptr.i141.i.i = getelementptr inbounds ptr, ptr %385, i64 1
  %386 = load ptr, ptr %385, align 8
  %.not.i142.i.i = icmp eq ptr %386, null
  br i1 %.not.i142.i.i, label %ifend.i147.i.i, label %MapIterator_string_CGClassType__next.exit.i.i

ifend.i147.i.i:                                   ; preds = %while.entry.i143.i.i
  %387 = add nsw i64 %384, -1
  %388 = icmp sgt i64 %384, 0
  br i1 %388, label %while.entry.i143.i.i, label %MapIterator_string_CGClassType__next.exit.i.i

MapIterator_string_CGClassType__next.exit.i.i:    ; preds = %ifend.i147.i.i, %while.entry.i143.i.i, %for.body28.i.i
  %389 = phi i64 [ %381, %for.body28.i.i ], [ %384, %while.entry.i143.i.i ], [ -1, %ifend.i147.i.i ]
  %.pn180204.i.i = phi ptr [ %.pn180205.i.i, %for.body28.i.i ], [ %incdec.ptr.i141.i.i, %while.entry.i143.i.i ], [ %uglygep246.i.i, %ifend.i147.i.i ]
  %storemerge187.i.i = icmp slt i64 %storemerge191202.in.i.i, 2
  br i1 %storemerge187.i.i, label %for.cond27.for.end30_crit_edge.i.i, label %for.body28.i.i

for.cond27.for.end30_crit_edge.i.i:               ; preds = %MapIterator_string_CGClassType__next.exit.i.i
  store ptr %.pn180204.i.i, ptr %memberidx1.i.i172.i.i, align 8
  store i64 %389, ptr %memberidx2.i.i173.i.i, align 4
  store i1 true, ptr %365, align 1
  %.pre243.i = load ptr, ptr %364, align 8
  br label %for.end30.i.i

for.end30.i.i:                                    ; preds = %for.cond27.for.end30_crit_edge.i.i, %MapIterator_string_CGClassType__next.exit169.i.i
  %390 = phi ptr [ %.pre243.i, %for.cond27.for.end30_crit_edge.i.i ], [ %366, %MapIterator_string_CGClassType__next.exit169.i.i ]
  call void @free(ptr nonnull %365)
  call void @free(ptr %390)
  call void @free(ptr %364)
  %391 = load ptr, ptr %memberidx4.i.i293, align 8
  %392 = call ptr @malloc(i32 25)
  %393 = load ptr, ptr %391, align 8
  %memberidx1.i108.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %391, i64 0, i32 1
  %394 = load i64, ptr %memberidx1.i108.i.i, align 4
  %memberidx2.i109.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %391, i64 0, i32 2
  %395 = load i64, ptr %memberidx2.i109.i.i, align 4
  store i1 false, ptr %392, align 1
  %memberidx1.i.i110.i.i = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %392, i64 0, i32 1
  store ptr %393, ptr %memberidx1.i.i110.i.i, align 8
  %memberidx2.i.i111.i.i = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %392, i64 0, i32 2
  %memberidx3.i.i112.i.i = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %392, i64 0, i32 3
  store i64 %395, ptr %memberidx3.i.i112.i.i, align 4
  %396 = add nsw i64 %394, -1
  store i64 %396, ptr %memberidx2.i.i111.i.i, align 4
  %397 = icmp sgt i64 %394, 0
  br i1 %397, label %while.entry.i102.i.preheader.i, label %MapIterator_string_CGEnumType__next.exit107.i.i

while.entry.i102.i.preheader.i:                   ; preds = %for.end30.i.i
  %398 = shl i64 %394, 3
  %uglygep.i = getelementptr i8, ptr %393, i64 %398
  br label %while.entry.i102.i.i

while.entry.i102.i.i:                             ; preds = %ifend.i106.i.i, %while.entry.i102.i.preheader.i
  %399 = phi i64 [ %402, %ifend.i106.i.i ], [ %396, %while.entry.i102.i.preheader.i ]
  %400 = phi ptr [ %incdec.ptr.i100.i.i, %ifend.i106.i.i ], [ %393, %while.entry.i102.i.preheader.i ]
  %incdec.ptr.i100.i.i = getelementptr inbounds ptr, ptr %400, i64 1
  %401 = load ptr, ptr %400, align 8
  %.not.i101.i.i = icmp eq ptr %401, null
  br i1 %.not.i101.i.i, label %ifend.i106.i.i, label %MapIterator_string_CGEnumType__next.exit107.loopexit.i.i

ifend.i106.i.i:                                   ; preds = %while.entry.i102.i.i
  %402 = add nsw i64 %399, -1
  store i64 %402, ptr %memberidx2.i.i111.i.i, align 4
  %403 = icmp sgt i64 %399, 0
  br i1 %403, label %while.entry.i102.i.i, label %MapIterator_string_CGEnumType__next.exit107.loopexit.i.i

MapIterator_string_CGEnumType__next.exit107.loopexit.i.i: ; preds = %ifend.i106.i.i, %while.entry.i102.i.i
  %incdec.ptr.i100.i.lcssa.i = phi ptr [ %uglygep.i, %ifend.i106.i.i ], [ %incdec.ptr.i100.i.i, %while.entry.i102.i.i ]
  %memberidx2.i.i111.promoted264.i.i = phi i64 [ -1, %ifend.i106.i.i ], [ %399, %while.entry.i102.i.i ]
  store ptr %incdec.ptr.i100.i.lcssa.i, ptr %memberidx1.i.i110.i.i, align 8
  br label %MapIterator_string_CGEnumType__next.exit107.i.i

MapIterator_string_CGEnumType__next.exit107.i.i:  ; preds = %MapIterator_string_CGEnumType__next.exit107.loopexit.i.i, %for.end30.i.i
  %memberidx2.i.i111.promoted.i.i = phi i64 [ %memberidx2.i.i111.promoted264.i.i, %MapIterator_string_CGEnumType__next.exit107.loopexit.i.i ], [ %396, %for.end30.i.i ]
  %.pn182.in.promoted.i.i = phi ptr [ %incdec.ptr.i100.i.lcssa.i, %MapIterator_string_CGEnumType__next.exit107.loopexit.i.i ], [ %393, %for.end30.i.i ]
  %storemerge188195.i.i = icmp slt i64 %395, 1
  store i1 %storemerge188195.i.i, ptr %392, align 1
  br i1 %storemerge188195.i.i, label %CodeGen_destroy.exit.i, label %for.body39.i.i

for.body39.i.i:                                   ; preds = %MapIterator_string_CGEnumType__next.exit107.i.i, %MapIterator_string_CGEnumType__next.exit.i.i
  %404 = phi i64 [ %416, %MapIterator_string_CGEnumType__next.exit.i.i ], [ %memberidx2.i.i111.promoted.i.i, %MapIterator_string_CGEnumType__next.exit107.i.i ]
  %.pn182198.i.i = phi ptr [ %.pn182197.i.i, %MapIterator_string_CGEnumType__next.exit.i.i ], [ %.pn182.in.promoted.i.i, %MapIterator_string_CGEnumType__next.exit107.i.i ]
  %storemerge192196.in.i.i = phi i64 [ %storemerge192196.i.i, %MapIterator_string_CGEnumType__next.exit.i.i ], [ %395, %MapIterator_string_CGEnumType__next.exit107.i.i ]
  %storemerge192196.i.i = add nsw i64 %storemerge192196.in.i.i, -1
  %storemerge60.in.i.i = getelementptr inbounds ptr, ptr %.pn182198.i.i, i64 -1
  %storemerge60.i.i = load ptr, ptr %storemerge60.in.i.i, align 8
  %405 = load ptr, ptr %storemerge60.i.i, align 8
  %memberidx.i82.i.i = getelementptr inbounds %string, ptr %405, i64 0, i32 1
  %406 = load ptr, ptr %memberidx.i82.i.i, align 8
  call void @free(ptr %406)
  call void @free(ptr %405)
  %memberidx44.i.i = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %storemerge60.i.i, i64 0, i32 1
  %407 = load ptr, ptr %memberidx44.i.i, align 8
  call void @free(ptr %407)
  %408 = add nsw i64 %404, -1
  %409 = icmp sgt i64 %404, 0
  br i1 %409, label %while.entry.i77.preheader.i.i, label %MapIterator_string_CGEnumType__next.exit.i.i

while.entry.i77.preheader.i.i:                    ; preds = %for.body39.i.i
  %410 = shl i64 %404, 3
  %uglygep.i.i = getelementptr i8, ptr %.pn182198.i.i, i64 %410
  br label %while.entry.i77.i.i

while.entry.i77.i.i:                              ; preds = %ifend.i81.i.i, %while.entry.i77.preheader.i.i
  %411 = phi i64 [ %414, %ifend.i81.i.i ], [ %408, %while.entry.i77.preheader.i.i ]
  %412 = phi ptr [ %incdec.ptr.i75.i.i, %ifend.i81.i.i ], [ %.pn182198.i.i, %while.entry.i77.preheader.i.i ]
  %incdec.ptr.i75.i.i = getelementptr inbounds ptr, ptr %412, i64 1
  %413 = load ptr, ptr %412, align 8
  %.not.i76.i.i = icmp eq ptr %413, null
  br i1 %.not.i76.i.i, label %ifend.i81.i.i, label %MapIterator_string_CGEnumType__next.exit.i.i

ifend.i81.i.i:                                    ; preds = %while.entry.i77.i.i
  %414 = add nsw i64 %411, -1
  %415 = icmp sgt i64 %411, 0
  br i1 %415, label %while.entry.i77.i.i, label %MapIterator_string_CGEnumType__next.exit.i.i

MapIterator_string_CGEnumType__next.exit.i.i:     ; preds = %ifend.i81.i.i, %while.entry.i77.i.i, %for.body39.i.i
  %416 = phi i64 [ %408, %for.body39.i.i ], [ %411, %while.entry.i77.i.i ], [ -1, %ifend.i81.i.i ]
  %.pn182197.i.i = phi ptr [ %.pn182198.i.i, %for.body39.i.i ], [ %incdec.ptr.i75.i.i, %while.entry.i77.i.i ], [ %uglygep.i.i, %ifend.i81.i.i ]
  %storemerge188.i.i = icmp slt i64 %storemerge192196.in.i.i, 2
  br i1 %storemerge188.i.i, label %for.cond38.for.end41_crit_edge.i.i, label %for.body39.i.i

for.cond38.for.end41_crit_edge.i.i:               ; preds = %MapIterator_string_CGEnumType__next.exit.i.i
  store ptr %.pn182197.i.i, ptr %memberidx1.i.i110.i.i, align 8
  store i64 %416, ptr %memberidx2.i.i111.i.i, align 4
  store i1 true, ptr %392, align 1
  %.pre244.i = load ptr, ptr %391, align 8
  br label %CodeGen_destroy.exit.i

CodeGen_destroy.exit.i:                           ; preds = %for.cond38.for.end41_crit_edge.i.i, %MapIterator_string_CGEnumType__next.exit107.i.i
  %417 = phi ptr [ %393, %MapIterator_string_CGEnumType__next.exit107.i.i ], [ %.pre244.i, %for.cond38.for.end41_crit_edge.i.i ]
  call void @free(ptr nonnull %392)
  call void @free(ptr %417)
  call void @free(ptr %391)
  %418 = load ptr, ptr %memberidx.i283, align 8
  %419 = call ptr @malloc(i32 25)
  %memberidx.i.i.i298 = getelementptr inbounds %Array_Module_, ptr %418, i64 0, i32 1
  %420 = load ptr, ptr %memberidx.i.i.i298, align 8
  %memberidx1.i.i150.i = getelementptr inbounds %Array_Module_, ptr %418, i64 0, i32 2
  %421 = load i64, ptr %memberidx1.i.i150.i, align 4
  store i1 false, ptr %419, align 1
  %memberidx1.i.i.i151.i = getelementptr inbounds %ArrayIterator_Module_, ptr %419, i64 0, i32 1
  %memberidx2.i.i.i152.i = getelementptr inbounds %ArrayIterator_Module_, ptr %419, i64 0, i32 3
  store ptr %420, ptr %memberidx2.i.i.i152.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %ArrayIterator_Module_, ptr %419, i64 0, i32 2
  store i64 %421, ptr %memberidx3.i.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i151.i, align 4
  %422 = icmp slt i64 %421, 1
  br i1 %422, label %Program___del__.exit.i, label %for.body.i.i299

for.body.i.i299:                                  ; preds = %CodeGen_destroy.exit.i, %Module___del__.exit.i
  %423 = phi i64 [ %529, %Module___del__.exit.i ], [ 1, %CodeGen_destroy.exit.i ]
  %module.0.i196.in.i = phi ptr [ %ptridx.i11.i.i, %Module___del__.exit.i ], [ %420, %CodeGen_destroy.exit.i ]
  %module.0.i196.i = load ptr, ptr %module.0.i196.in.i, align 8
  %memberidx.i165.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 5
  %424 = load ptr, ptr %memberidx.i165.i, align 8
  %425 = call ptr @malloc(i32 25)
  %memberidx.i.i166.i = getelementptr inbounds %Array_Function_, ptr %424, i64 0, i32 1
  %426 = load ptr, ptr %memberidx.i.i166.i, align 8
  %memberidx1.i.i167.i = getelementptr inbounds %Array_Function_, ptr %424, i64 0, i32 2
  %427 = load i64, ptr %memberidx1.i.i167.i, align 4
  %428 = icmp slt i64 %427, 1
  br i1 %428, label %for.end.i170.i, label %for.body.i168.i

for.body.i168.i:                                  ; preds = %for.body.i.i299, %for.body.i168.i
  %429 = phi i64 [ %430, %for.body.i168.i ], [ 1, %for.body.i.i299 ]
  %func.0200.in.i.i = phi ptr [ %ptridx.i81.i.i, %for.body.i168.i ], [ %426, %for.body.i.i299 ]
  %func.0200.i.i = load ptr, ptr %func.0200.in.i.i, align 8
  call void @free(ptr %func.0200.i.i)
  %430 = add nuw nsw i64 %429, 1
  %ptridx.i81.i.i = getelementptr inbounds ptr, ptr %426, i64 %429
  %.not.i.i300 = icmp slt i64 %429, %427
  br i1 %.not.i.i300, label %for.body.i168.i, label %for.end.i170.i

for.end.i170.i:                                   ; preds = %for.body.i168.i, %for.body.i.i299
  call void @free(ptr nonnull %425)
  %memberidx4.i169.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 2
  %431 = load ptr, ptr %memberidx4.i169.i, align 8
  %432 = call ptr @malloc(i32 25)
  %memberidx.i84.i.i = getelementptr inbounds %Array_Var_, ptr %431, i64 0, i32 1
  %433 = load ptr, ptr %memberidx.i84.i.i, align 8
  %memberidx1.i85.i.i = getelementptr inbounds %Array_Var_, ptr %431, i64 0, i32 2
  %434 = load i64, ptr %memberidx1.i85.i.i, align 4
  %435 = icmp slt i64 %434, 1
  br i1 %435, label %for.end8.i.i, label %for.body6.i.i

for.body6.i.i:                                    ; preds = %for.end.i170.i, %for.body6.i.i
  %436 = phi i64 [ %437, %for.body6.i.i ], [ 1, %for.end.i170.i ]
  %storemerge196.in.i.i = phi ptr [ %ptridx.i96.i.i, %for.body6.i.i ], [ %433, %for.end.i170.i ]
  %storemerge196.i.i = load ptr, ptr %storemerge196.in.i.i, align 8
  call void @free(ptr %storemerge196.i.i)
  %437 = add nuw nsw i64 %436, 1
  %ptridx.i96.i.i = getelementptr inbounds ptr, ptr %433, i64 %436
  %.not216.i.i = icmp slt i64 %436, %434
  br i1 %.not216.i.i, label %for.body6.i.i, label %for.end8.i.i

for.end8.i.i:                                     ; preds = %for.body6.i.i, %for.end.i170.i
  call void @free(ptr nonnull %432)
  %memberidx12.i.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 4
  %438 = load ptr, ptr %memberidx12.i.i, align 8
  %439 = call ptr @malloc(i32 25)
  %memberidx.i99.i.i = getelementptr inbounds %Array_Class_, ptr %438, i64 0, i32 1
  %440 = load ptr, ptr %memberidx.i99.i.i, align 8
  %memberidx1.i100.i.i = getelementptr inbounds %Array_Class_, ptr %438, i64 0, i32 2
  %441 = load i64, ptr %memberidx1.i100.i.i, align 4
  %memberidx1.i.i101.i.i = getelementptr inbounds %ArrayIterator_Class_, ptr %439, i64 0, i32 1
  %442 = icmp slt i64 %441, 1
  br i1 %442, label %for.end16.i.i, label %for.body14.i.i

for.body14.i.i:                                   ; preds = %for.end8.i.i, %Class___del__.exit.i.i
  %443 = phi i64 [ %466, %Class___del__.exit.i.i ], [ 1, %for.end8.i.i ]
  %storemerge73193.in.i.i = phi ptr [ %ptridx.i111.i.i, %Class___del__.exit.i.i ], [ %440, %for.end8.i.i ]
  %storemerge73193.i.i = load ptr, ptr %storemerge73193.in.i.i, align 8
  %444 = load ptr, ptr %storemerge73193.i.i, align 8
  call void @free(ptr %444)
  %memberidx1.i165.i.i = getelementptr inbounds %Class, ptr %storemerge73193.i.i, i64 0, i32 1
  %445 = load ptr, ptr %memberidx1.i165.i.i, align 8
  %memberidx.i.i166.i.i = getelementptr inbounds %string, ptr %445, i64 0, i32 1
  %446 = load ptr, ptr %memberidx.i.i166.i.i, align 8
  call void @free(ptr %446)
  call void @free(ptr %445)
  %memberidx2.i.i171.i = getelementptr inbounds %Class, ptr %storemerge73193.i.i, i64 0, i32 2
  %447 = load ptr, ptr %memberidx2.i.i171.i, align 8
  %.not.i.i172.i = icmp eq ptr %447, null
  br i1 %.not.i.i172.i, label %for.entry.i.i.i, label %if.entry.i.i.i

if.entry.i.i.i:                                   ; preds = %for.body14.i.i
  call void @free(ptr nonnull %447)
  br label %for.entry.i.i.i

for.entry.i.i.i:                                  ; preds = %if.entry.i.i.i, %for.body14.i.i
  %memberidx4.i.i.i = getelementptr inbounds %Class, ptr %storemerge73193.i.i, i64 0, i32 4
  %448 = load ptr, ptr %memberidx4.i.i.i, align 8
  %449 = call ptr @malloc(i32 25)
  %memberidx.i24.i.i.i = getelementptr inbounds %Array_ClassField_, ptr %448, i64 0, i32 1
  %450 = load ptr, ptr %memberidx.i24.i.i.i, align 8
  %memberidx1.i.i167.i.i = getelementptr inbounds %Array_ClassField_, ptr %448, i64 0, i32 2
  %451 = load i64, ptr %memberidx1.i.i167.i.i, align 4
  %452 = icmp slt i64 %451, 1
  br i1 %452, label %for.end.i.i.i, label %for.body.i171.i.i

for.body.i171.i.i:                                ; preds = %for.entry.i.i.i, %for.body.i171.i.i
  %453 = phi i64 [ %454, %for.body.i171.i.i ], [ 1, %for.entry.i.i.i ]
  %storemerge48.in.i.i.i = phi ptr [ %ptridx.i28.i.i.i, %for.body.i171.i.i ], [ %450, %for.entry.i.i.i ]
  %storemerge48.i.i.i = load ptr, ptr %storemerge48.in.i.i.i, align 8
  call void @free(ptr %storemerge48.i.i.i)
  %454 = add nuw nsw i64 %453, 1
  %ptridx.i28.i.i.i = getelementptr inbounds ptr, ptr %450, i64 %453
  %.not54.i.i.i = icmp slt i64 %453, %451
  br i1 %.not54.i.i.i, label %for.body.i171.i.i, label %for.end.i.i.i

for.end.i.i.i:                                    ; preds = %for.body.i171.i.i, %for.entry.i.i.i
  call void @free(ptr nonnull %449)
  %memberidx8.i.i.i = getelementptr inbounds %Class, ptr %storemerge73193.i.i, i64 0, i32 5
  %455 = load ptr, ptr %memberidx8.i.i.i, align 8
  %456 = call ptr @malloc(i32 25)
  %memberidx.i30.i.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %455, i64 0, i32 1
  %457 = load ptr, ptr %memberidx.i30.i.i.i, align 8
  %memberidx1.i31.i.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %455, i64 0, i32 2
  %458 = load i64, ptr %memberidx1.i31.i.i.i, align 4
  %459 = icmp slt i64 %458, 1
  br i1 %459, label %Class___del__.exit.i.i, label %for.body10.i.i.i

for.body10.i.i.i:                                 ; preds = %for.end.i.i.i, %for.body10.i.i.i
  %460 = phi i64 [ %461, %for.body10.i.i.i ], [ 1, %for.end.i.i.i ]
  %storemerge2346.in.i.i.i = phi ptr [ %ptridx.i41.i.i.i, %for.body10.i.i.i ], [ %457, %for.end.i.i.i ]
  %storemerge2346.i.i.i = load ptr, ptr %storemerge2346.in.i.i.i, align 8
  call void @free(ptr %storemerge2346.i.i.i)
  %461 = add nuw nsw i64 %460, 1
  %ptridx.i41.i.i.i = getelementptr inbounds ptr, ptr %457, i64 %460
  %.not55.i.i.i = icmp slt i64 %460, %458
  br i1 %.not55.i.i.i, label %for.body10.i.i.i, label %Class___del__.exit.i.i

Class___del__.exit.i.i:                           ; preds = %for.body10.i.i.i, %for.end.i.i.i
  call void @free(ptr nonnull %456)
  %memberidx14.i.i.i = getelementptr inbounds %Class, ptr %storemerge73193.i.i, i64 0, i32 6
  %462 = load ptr, ptr %memberidx14.i.i.i, align 8
  %463 = load ptr, ptr %462, align 8
  call void @free(ptr %463)
  call void @free(ptr %462)
  %memberidx15.i.i.i = getelementptr inbounds %Class, ptr %storemerge73193.i.i, i64 0, i32 7
  %464 = load ptr, ptr %memberidx15.i.i.i, align 8
  %465 = load ptr, ptr %464, align 8
  call void @free(ptr %465)
  call void @free(ptr %464)
  call void @free(ptr %storemerge73193.i.i)
  %466 = add nuw nsw i64 %443, 1
  store i64 %466, ptr %memberidx1.i.i101.i.i, align 4
  %ptridx.i111.i.i = getelementptr inbounds ptr, ptr %440, i64 %443
  %.not217.i.i = icmp slt i64 %443, %441
  br i1 %.not217.i.i, label %for.body14.i.i, label %for.end16.i.i

for.end16.i.i:                                    ; preds = %Class___del__.exit.i.i, %for.end8.i.i
  call void @free(ptr nonnull %439)
  %memberidx20.i.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 7
  %467 = load ptr, ptr %memberidx20.i.i, align 8
  %468 = call ptr @malloc(i32 25)
  %memberidx.i114.i.i = getelementptr inbounds %Array_Enum_, ptr %467, i64 0, i32 1
  %469 = load ptr, ptr %memberidx.i114.i.i, align 8
  %memberidx1.i115.i.i = getelementptr inbounds %Array_Enum_, ptr %467, i64 0, i32 2
  %470 = load i64, ptr %memberidx1.i115.i.i, align 4
  %memberidx1.i.i116.i.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %468, i64 0, i32 1
  %471 = icmp slt i64 %470, 1
  br i1 %471, label %for.end24.i.i, label %for.body22.i.i

for.body22.i.i:                                   ; preds = %for.end16.i.i, %Enum___del__.exit.i.i
  %472 = phi i64 [ %491, %Enum___del__.exit.i.i ], [ 1, %for.end16.i.i ]
  %storemerge74190.in.i.i = phi ptr [ %ptridx.i131.i.i, %Enum___del__.exit.i.i ], [ %469, %for.end16.i.i ]
  %storemerge74190.i.i = load ptr, ptr %storemerge74190.in.i.i, align 8
  %473 = load ptr, ptr %storemerge74190.i.i, align 8
  call void @free(ptr %473)
  %memberidx1.i124.i173.i = getelementptr inbounds %Enum, ptr %storemerge74190.i.i, i64 0, i32 1
  %474 = load ptr, ptr %memberidx1.i124.i173.i, align 8
  %memberidx.i.i.i174.i = getelementptr inbounds %string, ptr %474, i64 0, i32 1
  %475 = load ptr, ptr %memberidx.i.i.i174.i, align 8
  call void @free(ptr %475)
  call void @free(ptr %474)
  %memberidx2.i125.i175.i = getelementptr inbounds %Enum, ptr %storemerge74190.i.i, i64 0, i32 2
  %476 = load ptr, ptr %memberidx2.i125.i175.i, align 8
  %477 = call ptr @malloc(i32 25)
  %memberidx.i13.i.i.i = getelementptr inbounds %Array_EnumField_, ptr %476, i64 0, i32 1
  %478 = load ptr, ptr %memberidx.i13.i.i.i, align 8
  %memberidx1.i.i126.i176.i = getelementptr inbounds %Array_EnumField_, ptr %476, i64 0, i32 2
  %479 = load i64, ptr %memberidx1.i.i126.i176.i, align 4
  %480 = icmp slt i64 %479, 1
  br i1 %480, label %Enum___del__.exit.i.i, label %for.body.i.i177.i

for.body.i.i177.i:                                ; preds = %for.body22.i.i, %for.body.i.i177.i
  %481 = phi i64 [ %486, %for.body.i.i177.i ], [ 1, %for.body22.i.i ]
  %field.0.i186.in.i.i = phi ptr [ %ptridx.i19.i.i.i, %for.body.i.i177.i ], [ %478, %for.body22.i.i ]
  %field.0.i186.i.i = load ptr, ptr %field.0.i186.in.i.i, align 8
  %482 = load ptr, ptr %field.0.i186.i.i, align 8
  call void @free(ptr %482)
  %memberidx1.i15.i.i.i = getelementptr inbounds %EnumField, ptr %field.0.i186.i.i, i64 0, i32 1
  %483 = load ptr, ptr %memberidx1.i15.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %string, ptr %483, i64 0, i32 1
  %484 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  call void @free(ptr %484)
  call void @free(ptr %483)
  %memberidx2.i16.i.i.i = getelementptr inbounds %EnumField, ptr %field.0.i186.i.i, i64 0, i32 2
  %485 = load ptr, ptr %memberidx2.i16.i.i.i, align 8
  call void @free(ptr %485)
  call void @free(ptr %field.0.i186.i.i)
  %486 = add nuw nsw i64 %481, 1
  %ptridx.i19.i.i.i = getelementptr inbounds ptr, ptr %478, i64 %481
  %.not218.i.i = icmp slt i64 %481, %479
  br i1 %.not218.i.i, label %for.body.i.i177.i, label %Enum___del__.exit.i.i

Enum___del__.exit.i.i:                            ; preds = %for.body.i.i177.i, %for.body22.i.i
  call void @free(ptr nonnull %477)
  %487 = load ptr, ptr %memberidx2.i125.i175.i, align 8
  %memberidx.i21.i.i.i = getelementptr inbounds %Array_EnumField_, ptr %487, i64 0, i32 1
  %488 = load ptr, ptr %memberidx.i21.i.i.i, align 8
  call void @free(ptr %488)
  call void @free(ptr %487)
  %memberidx5.i128.i.i = getelementptr inbounds %Enum, ptr %storemerge74190.i.i, i64 0, i32 3
  %489 = load ptr, ptr %memberidx5.i128.i.i, align 8
  %490 = load ptr, ptr %489, align 8
  call void @free(ptr %490)
  call void @free(ptr %489)
  call void @free(ptr %storemerge74190.i.i)
  %491 = add nuw nsw i64 %472, 1
  store i64 %491, ptr %memberidx1.i.i116.i.i, align 4
  %ptridx.i131.i.i = getelementptr inbounds ptr, ptr %469, i64 %472
  %.not219.i.i = icmp slt i64 %472, %470
  br i1 %.not219.i.i, label %for.body22.i.i, label %for.end24.i.i

for.end24.i.i:                                    ; preds = %Enum___del__.exit.i.i, %for.end16.i.i
  call void @free(ptr nonnull %468)
  %memberidx28.i.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 9
  %492 = load ptr, ptr %memberidx28.i.i, align 8
  %493 = call ptr @malloc(i32 25)
  %memberidx.i133.i.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %492, i64 0, i32 1
  %494 = load ptr, ptr %memberidx.i133.i.i, align 8
  %memberidx1.i134.i.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %492, i64 0, i32 2
  %495 = load i64, ptr %memberidx1.i134.i.i, align 4
  %496 = icmp slt i64 %495, 1
  br i1 %496, label %for.end32.i.i, label %for.body30.i.i

for.body30.i.i:                                   ; preds = %for.end24.i.i, %for.body30.i.i
  %497 = phi i64 [ %498, %for.body30.i.i ], [ 1, %for.end24.i.i ]
  %storemerge75182.in.i.i = phi ptr [ %ptridx.i144.i.i, %for.body30.i.i ], [ %494, %for.end24.i.i ]
  %storemerge75182.i.i = load ptr, ptr %storemerge75182.in.i.i, align 8
  call void @free(ptr %storemerge75182.i.i)
  %498 = add nuw nsw i64 %497, 1
  %ptridx.i144.i.i = getelementptr inbounds ptr, ptr %494, i64 %497
  %.not220.i.i = icmp slt i64 %497, %495
  br i1 %.not220.i.i, label %for.body30.i.i, label %for.end32.i.i

for.end32.i.i:                                    ; preds = %for.body30.i.i, %for.end24.i.i
  call void @free(ptr nonnull %493)
  %memberidx36.i.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 10
  %499 = load ptr, ptr %memberidx36.i.i, align 8
  %500 = call ptr @malloc(i32 25)
  %memberidx.i146.i.i = getelementptr inbounds %Array_VarDeclaration_, ptr %499, i64 0, i32 1
  %501 = load ptr, ptr %memberidx.i146.i.i, align 8
  %memberidx1.i147.i.i = getelementptr inbounds %Array_VarDeclaration_, ptr %499, i64 0, i32 2
  %502 = load i64, ptr %memberidx1.i147.i.i, align 4
  %503 = icmp slt i64 %502, 1
  br i1 %503, label %Module___del__.exit.i, label %for.body38.i.i

for.body38.i.i:                                   ; preds = %for.end32.i.i, %for.body38.i.i
  %504 = phi i64 [ %505, %for.body38.i.i ], [ 1, %for.end32.i.i ]
  %storemerge76179.in.i.i = phi ptr [ %ptridx.i157.i.i, %for.body38.i.i ], [ %501, %for.end32.i.i ]
  %storemerge76179.i.i = load ptr, ptr %storemerge76179.in.i.i, align 8
  call void @free(ptr %storemerge76179.i.i)
  %505 = add nuw nsw i64 %504, 1
  %ptridx.i157.i.i = getelementptr inbounds ptr, ptr %501, i64 %504
  %.not221.i.i = icmp slt i64 %504, %502
  br i1 %.not221.i.i, label %for.body38.i.i, label %Module___del__.exit.i

Module___del__.exit.i:                            ; preds = %for.body38.i.i, %for.end32.i.i
  call void @free(ptr nonnull %500)
  %memberidx42.i.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 8
  %506 = load ptr, ptr %memberidx42.i.i, align 8
  %memberidx43.i.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 6
  %507 = load ptr, ptr %memberidx43.i.i, align 8
  %memberidx44.i178.i = getelementptr inbounds %ScopeId, ptr %507, i64 0, i32 1
  %508 = load i64, ptr %memberidx44.i178.i, align 4
  %memberidx.i159.i.i = getelementptr inbounds %Array_Scope_, ptr %506, i64 0, i32 1
  %509 = load ptr, ptr %memberidx.i159.i.i, align 8
  %ptridx.i160.i.i = getelementptr inbounds ptr, ptr %509, i64 %508
  %510 = load ptr, ptr %ptridx.i160.i.i, align 8
  call fastcc void @Scope___del__(ptr %510)
  call void @free(ptr %510)
  %memberidx45.i.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 1
  %511 = load ptr, ptr %memberidx45.i.i, align 8
  %memberidx.i161.i.i = getelementptr inbounds %string, ptr %511, i64 0, i32 1
  %512 = load ptr, ptr %memberidx.i161.i.i, align 8
  call void @free(ptr %512)
  call void @free(ptr %511)
  %513 = load ptr, ptr %memberidx.i165.i, align 8
  %memberidx.i162.i.i = getelementptr inbounds %Array_Function_, ptr %513, i64 0, i32 1
  %514 = load ptr, ptr %memberidx.i162.i.i, align 8
  call void @free(ptr %514)
  call void @free(ptr %513)
  %515 = load ptr, ptr %memberidx4.i169.i, align 8
  %memberidx.i123.i.i = getelementptr inbounds %Array_Var_, ptr %515, i64 0, i32 1
  %516 = load ptr, ptr %memberidx.i123.i.i, align 8
  call void @free(ptr %516)
  call void @free(ptr %515)
  %517 = load ptr, ptr %memberidx12.i.i, align 8
  %memberidx.i113.i179.i = getelementptr inbounds %Array_Class_, ptr %517, i64 0, i32 1
  %518 = load ptr, ptr %memberidx.i113.i179.i, align 8
  call void @free(ptr %518)
  call void @free(ptr %517)
  %519 = load ptr, ptr %memberidx20.i.i, align 8
  %memberidx.i108.i.i = getelementptr inbounds %Array_Enum_, ptr %519, i64 0, i32 1
  %520 = load ptr, ptr %memberidx.i108.i.i, align 8
  call void @free(ptr %520)
  call void @free(ptr %519)
  %521 = load ptr, ptr %memberidx42.i.i, align 8
  %memberidx.i98.i.i = getelementptr inbounds %Array_Scope_, ptr %521, i64 0, i32 1
  %522 = load ptr, ptr %memberidx.i98.i.i, align 8
  call void @free(ptr %522)
  call void @free(ptr %521)
  %523 = load ptr, ptr %memberidx28.i.i, align 8
  %memberidx.i93.i.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %523, i64 0, i32 1
  %524 = load ptr, ptr %memberidx.i93.i.i, align 8
  call void @free(ptr %524)
  call void @free(ptr %523)
  %525 = load ptr, ptr %memberidx36.i.i, align 8
  %memberidx.i83.i.i = getelementptr inbounds %Array_VarDeclaration_, ptr %525, i64 0, i32 1
  %526 = load ptr, ptr %memberidx.i83.i.i, align 8
  call void @free(ptr %526)
  call void @free(ptr %525)
  %memberidx53.i.i = getelementptr inbounds %Module, ptr %module.0.i196.i, i64 0, i32 3
  %527 = load ptr, ptr %memberidx53.i.i, align 8
  %memberidx.i78.i.i = getelementptr inbounds %Array_Const_, ptr %527, i64 0, i32 1
  %528 = load ptr, ptr %memberidx.i78.i.i, align 8
  call void @free(ptr %528)
  call void @free(ptr %527)
  call void @free(ptr %module.0.i196.i)
  %529 = add nuw nsw i64 %423, 1
  store i64 %529, ptr %memberidx1.i.i.i151.i, align 4
  %ptridx.i11.i.i = getelementptr inbounds ptr, ptr %420, i64 %423
  %.not250.i = icmp slt i64 %423, %421
  br i1 %.not250.i, label %for.body.i.i299, label %Program___del__.exit.i

Program___del__.exit.i:                           ; preds = %Module___del__.exit.i, %CodeGen_destroy.exit.i
  call void @free(ptr nonnull %419)
  %530 = load ptr, ptr %memberidx.i283, align 8
  %memberidx.i8.i.i = getelementptr inbounds %Array_Module_, ptr %530, i64 0, i32 1
  %531 = load ptr, ptr %memberidx.i8.i.i, align 8
  call void @free(ptr %531)
  call void @free(ptr %530)
  call void @free(ptr %common.ret.op.i)
  %532 = call ptr @malloc(i32 32)
  %533 = load ptr, ptr %3, align 8
  store ptr @VTableGeneratedModule, ptr %532, align 8
  %memberidx.i68.i = getelementptr inbounds %GeneratedModule, ptr %532, i64 0, i32 1
  store ptr %533, ptr %memberidx.i68.i, align 8
  %memberidx1.i.i301 = getelementptr inbounds %GeneratedModule, ptr %532, i64 0, i32 2
  store ptr null, ptr %memberidx1.i.i301, align 8
  %534 = call i1 @LLVMVerifyModule(ptr %533, i64 1, ptr nonnull %memberidx1.i.i301)
  br i1 %534, label %if.entry.i.i305, label %CodeGen_codegen.exit

if.entry.i.i305:                                  ; preds = %Program___del__.exit.i
  %535 = load ptr, ptr %532, align 8
  %memberidx5.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %535, i64 0, i32 4
  %536 = load ptr, ptr %memberidx5.i.i, align 8
  %537 = call ptr @malloc(i32 8)
  store i64 7812670522611888741, ptr %537, align 8
  %538 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %538, align 8
  %memberidx.i.i.i.i302 = getelementptr inbounds %string, ptr %538, i64 0, i32 1
  store ptr %537, ptr %memberidx.i.i.i.i302, align 8
  %memberidx1.i.i.i.i303 = getelementptr inbounds %string, ptr %538, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i.i.i303, align 4
  %memberidx2.i.i.i.i304 = getelementptr inbounds %string, ptr %538, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i.i.i304, align 4
  call void %536(ptr nonnull %532, ptr nonnull %538)
  call fastcc void @GeneratedModule_print_errors(ptr nonnull %532)
  br label %CodeGen_codegen.exit

CodeGen_codegen.exit:                             ; preds = %Program___del__.exit.i, %if.entry.i.i305
  call void @LLVM_InitializeAllTargetInfos()
  call void @LLVM_InitializeAllTargets()
  call void @LLVM_InitializeAllTargetMCs()
  call void @LLVM_InitializeAllAsmParsers()
  call void @LLVM_InitializeAllAsmPrinters()
  call void @llvm.lifetime.end.p0(i64 81, ptr nonnull %3)
  %539 = load ptr, ptr %532, align 8
  %540 = load ptr, ptr %539, align 8
  %541 = call ptr @malloc(i32 2)
  store i16 20269, ptr %541, align 8
  %542 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %542, align 8
  %memberidx.i.i165 = getelementptr inbounds %string, ptr %542, i64 0, i32 1
  store ptr %541, ptr %memberidx.i.i165, align 8
  %memberidx1.i.i166 = getelementptr inbounds %string, ptr %542, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i166, align 4
  %memberidx2.i.i167 = getelementptr inbounds %string, ptr %542, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i167, align 4
  %543 = call ptr @malloc(i32 1)
  store i8 49, ptr %543, align 8
  %544 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %544, align 8
  %memberidx.i.i168 = getelementptr inbounds %string, ptr %544, i64 0, i32 1
  store ptr %543, ptr %memberidx.i.i168, align 8
  %memberidx1.i.i169 = getelementptr inbounds %string, ptr %544, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i169, align 4
  %memberidx2.i.i170 = getelementptr inbounds %string, ptr %544, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i170, align 4
  %545 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %542, ptr nonnull %544)
  %546 = load ptr, ptr %545, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %546, i64 0, i32 5
  %547 = load ptr, ptr %memberidx35, align 8
  %548 = call ptr %547(ptr nonnull %545)
  %549 = call i64 @atol(ptr nocapture %548)
  tail call void @free(ptr %548)
  call void %540(ptr nonnull %532, i64 %549)
  %550 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %550, ptr noundef nonnull align 8 dereferenceable(6) @272, i64 6, i1 false)
  %551 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %551, align 8
  %memberidx.i.i171 = getelementptr inbounds %string, ptr %551, i64 0, i32 1
  store ptr %550, ptr %memberidx.i.i171, align 8
  %memberidx1.i.i172 = getelementptr inbounds %string, ptr %551, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i172, align 4
  %memberidx2.i.i173 = getelementptr inbounds %string, ptr %551, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i173, align 4
  %552 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %551, ptr null)
  %553 = call ptr @malloc(i32 2)
  store i16 28461, ptr %553, align 8
  %554 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %554, align 8
  %memberidx.i.i174 = getelementptr inbounds %string, ptr %554, i64 0, i32 1
  store ptr %553, ptr %memberidx.i.i174, align 8
  %memberidx1.i.i175 = getelementptr inbounds %string, ptr %554, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i175, align 4
  %memberidx2.i.i176 = getelementptr inbounds %string, ptr %554, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i176, align 4
  %555 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %554, ptr null)
  %556 = call ptr @malloc(i32 2)
  store i16 27693, ptr %556, align 8
  %557 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %557, align 8
  %memberidx.i.i177 = getelementptr inbounds %string, ptr %557, i64 0, i32 1
  store ptr %556, ptr %memberidx.i.i177, align 8
  %memberidx1.i.i178 = getelementptr inbounds %string, ptr %557, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i178, align 4
  %memberidx2.i.i179 = getelementptr inbounds %string, ptr %557, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i179, align 4
  %558 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %557, ptr null)
  %559 = load ptr, ptr %532, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %559, i64 0, i32 2
  %560 = load ptr, ptr %memberidx36, align 8
  %561 = call ptr @malloc(i32 8)
  store i64 8387223622006353197, ptr %561, align 8
  %562 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %562, align 8
  %memberidx.i.i180 = getelementptr inbounds %string, ptr %562, i64 0, i32 1
  store ptr %561, ptr %memberidx.i.i180, align 8
  %memberidx1.i.i181 = getelementptr inbounds %string, ptr %562, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i181, align 4
  %memberidx2.i.i182 = getelementptr inbounds %string, ptr %562, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i182, align 4
  %563 = call ptr @malloc(i32 0)
  %564 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %564, align 8
  %memberidx.i.i183 = getelementptr inbounds %string, ptr %564, i64 0, i32 1
  store ptr %563, ptr %memberidx.i.i183, align 8
  %memberidx1.i.i184 = getelementptr inbounds %string, ptr %564, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i184, i8 0, i64 16, i1 false)
  %565 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %562, ptr nonnull %564)
  call void %560(ptr nonnull %532, ptr %565)
  %.not = icmp eq ptr %552, null
  br i1 %.not, label %else38, label %if.entry37

if.entry37:                                       ; preds = %CodeGen_codegen.exit
  %566 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %566, ptr noundef nonnull align 8 dereferenceable(3) @273, i64 3, i1 false)
  %567 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %567, align 8
  %memberidx.i.i186 = getelementptr inbounds %string, ptr %567, i64 0, i32 1
  store ptr %566, ptr %memberidx.i.i186, align 8
  %memberidx1.i.i187 = getelementptr inbounds %string, ptr %567, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i187, align 4
  %memberidx2.i.i188 = getelementptr inbounds %string, ptr %567, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i188, align 4
  %memberidx.i189 = getelementptr inbounds %string, ptr %552, i64 0, i32 2
  %568 = load i64, ptr %memberidx.i189, align 4
  %.not.i = icmp eq i64 %568, 3
  br i1 %.not.i, label %ifend.i194, label %else41

ifend.i194:                                       ; preds = %if.entry37
  %memberidx2.i192 = getelementptr inbounds %string, ptr %552, i64 0, i32 1
  %569 = load ptr, ptr %memberidx2.i192, align 8
  %570 = call i64 @memcmp(ptr %569, ptr nonnull %566, i64 3)
  %571 = icmp eq i64 %570, 0
  br i1 %571, label %if.entry40, label %else41

else38:                                           ; preds = %CodeGen_codegen.exit
  %572 = load ptr, ptr %532, align 8
  %memberidx85 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %572, i64 0, i32 1
  %573 = load ptr, ptr %memberidx85, align 8
  %574 = call i64 %573(ptr nonnull %532)
  br label %ifend39

ifend39:                                          ; preds = %else70, %end83, %ifend.i259, %end75, %end67, %end59, %end46, %else38
  %code.0 = phi i64 [ 0, %end46 ], [ 0, %end59 ], [ 0, %end67 ], [ 0, %end75 ], [ 0, %end83 ], [ 0, %ifend.i259 ], [ %574, %else38 ], [ 0, %else70 ]
  %575 = load ptr, ptr %args, align 8
  %memberidx.i195 = getelementptr inbounds %Array_string_, ptr %575, i64 0, i32 1
  %576 = load ptr, ptr %memberidx.i195, align 8
  call void @free(ptr %576)
  tail call void @free(ptr %575)
  %577 = load ptr, ptr %module_node, align 8
  tail call void @free(ptr %577)
  br label %common.ret

if.entry40:                                       ; preds = %ifend.i194
  %578 = call ptr @malloc(i32 13)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(13) %578, ptr noundef nonnull align 8 dereferenceable(13) @274, i64 13, i1 false)
  %579 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %579, align 8
  %memberidx.i.i196 = getelementptr inbounds %string, ptr %579, i64 0, i32 1
  store ptr %578, ptr %memberidx.i.i196, align 8
  %memberidx1.i.i197 = getelementptr inbounds %string, ptr %579, i64 0, i32 2
  store i64 13, ptr %memberidx1.i.i197, align 4
  %memberidx2.i.i198 = getelementptr inbounds %string, ptr %579, i64 0, i32 3
  store i64 13, ptr %memberidx2.i.i198, align 4
  %580 = load ptr, ptr %532, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %580, i64 0, i32 3
  %581 = load ptr, ptr %memberidx43, align 8
  call void %581(ptr nonnull %532, ptr nonnull %579)
  %.not91 = icmp eq ptr %555, null
  br i1 %.not91, label %false_block, label %end

else41:                                           ; preds = %if.entry37, %ifend.i194
  %582 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %582, ptr noundef nonnull align 8 dereferenceable(7) @278, i64 7, i1 false)
  %583 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %583, align 8
  %memberidx.i.i199 = getelementptr inbounds %string, ptr %583, i64 0, i32 1
  store ptr %582, ptr %memberidx.i.i199, align 8
  %memberidx1.i.i200 = getelementptr inbounds %string, ptr %583, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i200, align 4
  %memberidx2.i.i201 = getelementptr inbounds %string, ptr %583, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i201, align 4
  %584 = load i64, ptr %memberidx.i189, align 4
  %.not.i204 = icmp eq i64 %584, 7
  br i1 %.not.i204, label %ifend.i208, label %else54

ifend.i208:                                       ; preds = %else41
  %memberidx2.i206 = getelementptr inbounds %string, ptr %552, i64 0, i32 1
  %585 = load ptr, ptr %memberidx2.i206, align 8
  %586 = call i64 @memcmp(ptr %585, ptr nonnull %582, i64 7)
  %587 = icmp eq i64 %586, 0
  br i1 %587, label %if.entry53, label %else54

false_block:                                      ; preds = %if.entry40
  %588 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %588, ptr noundef nonnull align 8 dereferenceable(6) @275, i64 6, i1 false)
  %589 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %589, align 8
  %memberidx.i.i210 = getelementptr inbounds %string, ptr %589, i64 0, i32 1
  store ptr %588, ptr %memberidx.i.i210, align 8
  %memberidx1.i.i211 = getelementptr inbounds %string, ptr %589, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i211, align 4
  %memberidx2.i.i212 = getelementptr inbounds %string, ptr %589, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i212, align 4
  br label %end

end:                                              ; preds = %if.entry40, %false_block
  %ternary = phi ptr [ %589, %false_block ], [ %555, %if.entry40 ]
  %.not92 = icmp eq ptr %558, null
  br i1 %.not92, label %false_block45, label %true_block44

true_block44:                                     ; preds = %end
  %590 = load ptr, ptr %558, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %590, i64 0, i32 5
  %591 = load ptr, ptr %memberidx47, align 8
  %592 = call ptr %591(ptr nonnull %558)
  %593 = alloca ptr, align 8
  %594 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %593, ptr nonnull @276, ptr %592)
  %595 = load ptr, ptr %593, align 8
  %596 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %596, align 8
  %memberidx.i213 = getelementptr inbounds %string, ptr %596, i64 0, i32 1
  store ptr %595, ptr %memberidx.i213, align 8
  %memberidx1.i214 = getelementptr inbounds %string, ptr %596, i64 0, i32 2
  store i64 %594, ptr %memberidx1.i214, align 4
  %memberidx2.i215 = getelementptr inbounds %string, ptr %596, i64 0, i32 3
  store i64 %594, ptr %memberidx2.i215, align 4
  tail call void @free(ptr %592)
  br label %end46

false_block45:                                    ; preds = %end
  %597 = call ptr @malloc(i32 0)
  %598 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %598, align 8
  %memberidx.i.i216 = getelementptr inbounds %string, ptr %598, i64 0, i32 1
  store ptr %597, ptr %memberidx.i.i216, align 8
  %memberidx1.i.i217 = getelementptr inbounds %string, ptr %598, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i217, i8 0, i64 16, i1 false)
  br label %end46

end46:                                            ; preds = %false_block45, %true_block44
  %ternary48 = phi ptr [ %596, %true_block44 ], [ %598, %false_block45 ]
  %599 = call ptr @malloc(i32 8)
  store i64 3832894680125762659, ptr %599, align 8
  %600 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %600, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %600, i64 0, i32 1
  store ptr %599, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %600, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %600, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i221, align 4
  %601 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %602 = call ptr %601(ptr nonnull %600)
  %603 = load ptr, ptr %579, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %603, i64 0, i32 5
  %604 = load ptr, ptr %memberidx50, align 8
  %605 = call ptr %604(ptr nonnull %579)
  %606 = load ptr, ptr %ternary48, align 8
  %memberidx51 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %606, i64 0, i32 5
  %607 = load ptr, ptr %memberidx51, align 8
  %608 = call ptr %607(ptr nonnull %ternary48)
  %609 = load ptr, ptr %ternary, align 8
  %memberidx52 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %609, i64 0, i32 5
  %610 = load ptr, ptr %memberidx52, align 8
  %611 = call ptr %610(ptr nonnull %ternary)
  %612 = alloca ptr, align 8
  %613 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %612, ptr nonnull @277, ptr %602, ptr %605, ptr %608, ptr %611)
  %614 = load ptr, ptr %612, align 8
  tail call void @free(ptr %602)
  tail call void @free(ptr %605)
  tail call void @free(ptr %608)
  tail call void @free(ptr %611)
  call void @system(ptr %614)
  br label %ifend39

if.entry53:                                       ; preds = %ifend.i208
  %615 = load ptr, ptr %532, align 8
  %memberidx56 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %615, i64 0, i32 4
  %616 = load ptr, ptr %memberidx56, align 8
  %.not90 = icmp eq ptr %555, null
  br i1 %.not90, label %false_block58, label %end59

else54:                                           ; preds = %else41, %ifend.i208
  %617 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %617, ptr noundef nonnull align 8 dereferenceable(7) @280, i64 7, i1 false)
  %618 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %618, align 8
  %memberidx.i.i222 = getelementptr inbounds %string, ptr %618, i64 0, i32 1
  store ptr %617, ptr %memberidx.i.i222, align 8
  %memberidx1.i.i223 = getelementptr inbounds %string, ptr %618, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i223, align 4
  %memberidx2.i.i224 = getelementptr inbounds %string, ptr %618, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i224, align 4
  %619 = load i64, ptr %memberidx.i189, align 4
  %.not.i227 = icmp eq i64 %619, 7
  br i1 %.not.i227, label %ifend.i231, label %else62

ifend.i231:                                       ; preds = %else54
  %memberidx2.i229 = getelementptr inbounds %string, ptr %552, i64 0, i32 1
  %620 = load ptr, ptr %memberidx2.i229, align 8
  %621 = call i64 @memcmp(ptr %620, ptr nonnull %617, i64 7)
  %622 = icmp eq i64 %621, 0
  br i1 %622, label %if.entry61, label %else62

false_block58:                                    ; preds = %if.entry53
  %623 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %623, ptr noundef nonnull align 8 dereferenceable(9) @279, i64 9, i1 false)
  %624 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %624, align 8
  %memberidx.i.i233 = getelementptr inbounds %string, ptr %624, i64 0, i32 1
  store ptr %623, ptr %memberidx.i.i233, align 8
  %memberidx1.i.i234 = getelementptr inbounds %string, ptr %624, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i234, align 4
  %memberidx2.i.i235 = getelementptr inbounds %string, ptr %624, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i235, align 4
  br label %end59

end59:                                            ; preds = %if.entry53, %false_block58
  %ternary60 = phi ptr [ %624, %false_block58 ], [ %555, %if.entry53 ]
  call void %616(ptr nonnull %532, ptr nonnull %ternary60)
  br label %ifend39

if.entry61:                                       ; preds = %ifend.i231
  %625 = load ptr, ptr %532, align 8
  %memberidx64 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %625, i64 0, i32 5
  %626 = load ptr, ptr %memberidx64, align 8
  %.not89 = icmp eq ptr %555, null
  br i1 %.not89, label %false_block66, label %end67

else62:                                           ; preds = %else54, %ifend.i231
  %627 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %627, ptr noundef nonnull align 8 dereferenceable(3) @282, i64 3, i1 false)
  %628 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %628, align 8
  %memberidx.i.i236 = getelementptr inbounds %string, ptr %628, i64 0, i32 1
  store ptr %627, ptr %memberidx.i.i236, align 8
  %memberidx1.i.i237 = getelementptr inbounds %string, ptr %628, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i237, align 4
  %memberidx2.i.i238 = getelementptr inbounds %string, ptr %628, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i238, align 4
  %629 = load i64, ptr %memberidx.i189, align 4
  %.not.i241 = icmp eq i64 %629, 3
  br i1 %.not.i241, label %ifend.i245, label %else70

ifend.i245:                                       ; preds = %else62
  %memberidx2.i243 = getelementptr inbounds %string, ptr %552, i64 0, i32 1
  %630 = load ptr, ptr %memberidx2.i243, align 8
  %631 = call i64 @memcmp(ptr %630, ptr nonnull %627, i64 3)
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %if.entry69, label %else70

false_block66:                                    ; preds = %if.entry61
  %633 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %633, ptr noundef nonnull align 8 dereferenceable(9) @281, i64 9, i1 false)
  %634 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %634, align 8
  %memberidx.i.i247 = getelementptr inbounds %string, ptr %634, i64 0, i32 1
  store ptr %633, ptr %memberidx.i.i247, align 8
  %memberidx1.i.i248 = getelementptr inbounds %string, ptr %634, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i248, align 4
  %memberidx2.i.i249 = getelementptr inbounds %string, ptr %634, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i249, align 4
  br label %end67

end67:                                            ; preds = %if.entry61, %false_block66
  %ternary68 = phi ptr [ %634, %false_block66 ], [ %555, %if.entry61 ]
  call void %626(ptr nonnull %532, ptr nonnull %ternary68)
  br label %ifend39

if.entry69:                                       ; preds = %ifend.i245
  %635 = load ptr, ptr %532, align 8
  %memberidx72 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %635, i64 0, i32 3
  %636 = load ptr, ptr %memberidx72, align 8
  %.not88 = icmp eq ptr %555, null
  br i1 %.not88, label %false_block74, label %end75

else70:                                           ; preds = %else62, %ifend.i245
  %637 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %637, ptr noundef nonnull align 8 dereferenceable(3) @283, i64 3, i1 false)
  %638 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %638, align 8
  %memberidx.i.i250 = getelementptr inbounds %string, ptr %638, i64 0, i32 1
  store ptr %637, ptr %memberidx.i.i250, align 8
  %memberidx1.i.i251 = getelementptr inbounds %string, ptr %638, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i251, align 4
  %memberidx2.i.i252 = getelementptr inbounds %string, ptr %638, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i252, align 4
  %639 = load i64, ptr %memberidx.i189, align 4
  %.not.i255 = icmp eq i64 %639, 3
  br i1 %.not.i255, label %ifend.i259, label %ifend39

ifend.i259:                                       ; preds = %else70
  %memberidx2.i257 = getelementptr inbounds %string, ptr %552, i64 0, i32 1
  %640 = load ptr, ptr %memberidx2.i257, align 8
  %641 = call i64 @memcmp(ptr %640, ptr nonnull %637, i64 3)
  %642 = icmp eq i64 %641, 0
  br i1 %642, label %if.entry77, label %ifend39

false_block74:                                    ; preds = %if.entry69
  %643 = call ptr @malloc(i32 8)
  store i64 8011468834885367151, ptr %643, align 8
  %644 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %644, align 8
  %memberidx.i.i261 = getelementptr inbounds %string, ptr %644, i64 0, i32 1
  store ptr %643, ptr %memberidx.i.i261, align 8
  %memberidx1.i.i262 = getelementptr inbounds %string, ptr %644, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i262, align 4
  %memberidx2.i.i263 = getelementptr inbounds %string, ptr %644, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i263, align 4
  br label %end75

end75:                                            ; preds = %if.entry69, %false_block74
  %ternary76 = phi ptr [ %644, %false_block74 ], [ %555, %if.entry69 ]
  call void %636(ptr nonnull %532, ptr nonnull %ternary76)
  br label %ifend39

if.entry77:                                       ; preds = %ifend.i259
  %645 = load ptr, ptr %532, align 8
  %memberidx80 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %645, i64 0, i32 6
  %646 = load ptr, ptr %memberidx80, align 8
  %.not87 = icmp eq ptr %555, null
  br i1 %.not87, label %false_block82, label %end83

false_block82:                                    ; preds = %if.entry77
  %647 = call ptr @malloc(i32 8)
  store i64 8299699211037078895, ptr %647, align 8
  %648 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %648, align 8
  %memberidx.i.i264 = getelementptr inbounds %string, ptr %648, i64 0, i32 1
  store ptr %647, ptr %memberidx.i.i264, align 8
  %memberidx1.i.i265 = getelementptr inbounds %string, ptr %648, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i265, align 4
  %memberidx2.i.i266 = getelementptr inbounds %string, ptr %648, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i266, align 4
  br label %end83

end83:                                            ; preds = %if.entry77, %false_block82
  %ternary84 = phi ptr [ %648, %false_block82 ], [ %555, %if.entry77 ]
  call void %646(ptr nonnull %532, ptr nonnull %ternary84)
  br label %ifend39
}

define internal i1 @Compiler_print_errors(ptr nocapture readonly %0) {
  %2 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 6
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %if.entry, label %common.ret

common.ret:                                       ; preds = %1, %print_error_line.exit
  ret i1 %5

if.entry:                                         ; preds = %1
  %memberidx.i = getelementptr inbounds %Array_FloError_, ptr %3, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx3 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = load i64, ptr %9, align 4
  %memberidx.i12 = getelementptr inbounds %Array_FloFile_, ptr %8, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i12, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i, align 8
  %memberidx6 = getelementptr inbounds %FloFile, ptr %12, i64 0, i32 1
  %13 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %memberidx7, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %15 = load i64, ptr %7, align 4
  %memberidx1.i = getelementptr inbounds %FloError, ptr %7, i64 0, i32 1
  %16 = load ptr, ptr %memberidx1.i, align 8
  tail call fastcc void @print_message_error(i64 %15, ptr %16)
  %17 = load ptr, ptr %13, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i64 0, i32 5
  %18 = load ptr, ptr %memberidx2.i, align 8
  %19 = tail call ptr %18(ptr nonnull %13)
  %memberidx3.i = getelementptr inbounds %FloError, ptr %7, i64 0, i32 2
  %20 = load ptr, ptr %memberidx3.i, align 8
  %memberidx4.i = getelementptr inbounds %FloRange, ptr %20, i64 0, i32 3
  %21 = load i64, ptr %memberidx4.i, align 4
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @27, ptr %19, i64 %21)
  %23 = load ptr, ptr %2, align 8
  %24 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %22, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %22, ptr %memberidx2.i.i, align 4
  call void @free(ptr %19)
  %25 = load ptr, ptr %24, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx.i.i.i, align 8
  %27 = call ptr %26(ptr nonnull %24)
  %28 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %27, i64 %28)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %29 = load ptr, ptr %memberidx3.i, align 8
  %memberidx.i13 = getelementptr inbounds %FloRange, ptr %29, i64 0, i32 1
  %30 = load i64, ptr %memberidx.i13, align 4
  %31 = load ptr, ptr %14, align 8
  %memberidx.i.i14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 2
  %32 = load ptr, ptr %memberidx.i.i14, align 8
  %33 = call i8 %32(ptr nonnull %14, i64 %30)
  %34 = icmp ne i8 %33, 10
  %memberidx1.i.i15 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  %35 = load i64, ptr %memberidx1.i.i15, align 4
  %36 = icmp sgt i64 %35, %30
  %37 = and i1 %34, %36
  br i1 %37, label %while.entry.i.i, label %get_next_line_index.exit.i

while.entry.i.i:                                  ; preds = %if.entry, %while.entry.i.i
  %start.0.i.i = phi i64 [ %38, %while.entry.i.i ], [ %30, %if.entry ]
  %38 = add nsw i64 %start.0.i.i, 1
  %39 = load ptr, ptr %14, align 8
  %memberidx2.i.i16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i64 0, i32 2
  %40 = load ptr, ptr %memberidx2.i.i16, align 8
  %41 = call i8 %40(ptr nonnull %14, i64 %38)
  %42 = icmp ne i8 %41, 10
  %43 = load i64, ptr %memberidx1.i.i15, align 4
  %44 = icmp slt i64 %38, %43
  %45 = and i1 %42, %44
  br i1 %45, label %while.entry.i.i, label %get_next_line_index.exit.i

get_next_line_index.exit.i:                       ; preds = %while.entry.i.i, %if.entry
  %start.1.i.i = phi i64 [ %30, %if.entry ], [ %38, %while.entry.i.i ]
  %46 = load i64, ptr %29, align 4
  %memberidx2.i17 = getelementptr inbounds %FloRange, ptr %29, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i17, align 4
  %48 = sub nsw i64 %46, %47
  %49 = load ptr, ptr %14, align 8
  %memberidx3.i18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx3.i18, align 8
  %51 = sub nuw i64 %start.1.i.i, %48
  %52 = call ptr %50(ptr nonnull %14, i64 %48, i64 %51)
  %53 = load ptr, ptr %52, align 8
  %memberidx.i.i.i19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i64 0, i32 3
  %54 = load ptr, ptr %memberidx.i.i.i19, align 8
  %55 = call ptr %54(ptr nonnull %52)
  %memberidx1.i.i.i20 = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  %56 = load i64, ptr %memberidx1.i.i.i20, align 4
  call void @write(i64 1, ptr %55, i64 %56)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %57 = load i64, ptr %memberidx2.i17, align 4
  %58 = load i64, ptr %memberidx.i13, align 4
  %59 = load i64, ptr %29, align 4
  %60 = sub nuw i64 %58, %59
  %61 = call ptr @malloc(i32 16)
  store i64 0, ptr %61, align 4
  %memberidx1.i27.i = getelementptr inbounds %Range, ptr %61, i64 0, i32 1
  store i64 %57, ptr %memberidx1.i27.i, align 4
  %62 = call ptr @malloc(i32 17)
  %memberidx.i.i29.i = getelementptr inbounds %RangeIterator, ptr %62, i64 0, i32 1
  store i64 0, ptr %memberidx.i.i29.i, align 4
  %memberidx1.i.i30.i = getelementptr inbounds %RangeIterator, ptr %62, i64 0, i32 2
  store i64 %57, ptr %memberidx1.i.i30.i, align 4
  %63 = icmp slt i64 %57, 1
  store i1 %63, ptr %62, align 1
  br i1 %63, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %get_next_line_index.exit.i, %for.body.i
  %storemerge64.i = phi i64 [ %70, %for.body.i ], [ 1, %get_next_line_index.exit.i ]
  %64 = call ptr @malloc(i32 1)
  store i8 32, ptr %64, align 8
  %65 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %65, align 8
  %memberidx.i.i33.i = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  store ptr %64, ptr %memberidx.i.i33.i, align 8
  %memberidx1.i.i34.i = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i34.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %65, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i.i, align 4
  %66 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %67 = call ptr %66(ptr nonnull %65)
  %68 = load i64, ptr %memberidx1.i.i34.i, align 4
  call void @write(i64 1, ptr %67, i64 %68)
  %69 = icmp sge i64 %storemerge64.i, %57
  store i1 %69, ptr %62, align 1
  %70 = add nuw nsw i64 %storemerge64.i, 1
  br i1 %69, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.body.i, %get_next_line_index.exit.i
  call void @free(ptr nonnull %62)
  %71 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %71, ptr noundef nonnull align 8 dereferenceable(7) @11, i64 7, i1 false)
  %72 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i.i, align 4
  %73 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %74 = call ptr %73(ptr nonnull %72)
  %75 = load i64, ptr %memberidx1.i.i.i.i, align 4
  call void @write(i64 1, ptr %74, i64 %75)
  %76 = call ptr @malloc(i32 16)
  store i64 0, ptr %76, align 4
  %memberidx1.i41.i = getelementptr inbounds %Range, ptr %76, i64 0, i32 1
  store i64 %60, ptr %memberidx1.i41.i, align 4
  %77 = call ptr @malloc(i32 17)
  %memberidx.i.i43.i = getelementptr inbounds %RangeIterator, ptr %77, i64 0, i32 1
  store i64 0, ptr %memberidx.i.i43.i, align 4
  %memberidx1.i.i44.i = getelementptr inbounds %RangeIterator, ptr %77, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i.i44.i, align 4
  %78 = icmp slt i64 %60, 1
  store i1 %78, ptr %77, align 1
  br i1 %78, label %print_error_line.exit, label %for.body12.i

for.body12.i:                                     ; preds = %for.end.i, %for.body12.i
  %storemerge6263.i = phi i64 [ %85, %for.body12.i ], [ 1, %for.end.i ]
  %79 = call ptr @malloc(i32 1)
  store i8 94, ptr %79, align 8
  %80 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %80, align 8
  %memberidx.i.i47.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  store ptr %79, ptr %memberidx.i.i47.i, align 8
  %memberidx1.i.i48.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %string, ptr %80, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i49.i, align 4
  %81 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %82 = call ptr %81(ptr nonnull %80)
  %83 = load i64, ptr %memberidx1.i.i48.i, align 4
  call void @write(i64 1, ptr %82, i64 %83)
  %84 = icmp sge i64 %storemerge6263.i, %60
  store i1 %84, ptr %77, align 1
  %85 = add nuw nsw i64 %storemerge6263.i, 1
  br i1 %84, label %print_error_line.exit, label %for.body12.i

print_error_line.exit:                            ; preds = %for.body12.i, %for.end.i
  call void @free(ptr nonnull %77)
  %86 = call ptr @malloc(i32 4)
  store i32 1831885595, ptr %86, align 8
  %87 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %87, align 8
  %memberidx.i.i1.i.i = getelementptr inbounds %string, ptr %87, i64 0, i32 1
  store ptr %86, ptr %memberidx.i.i1.i.i, align 8
  %memberidx1.i.i2.i.i = getelementptr inbounds %string, ptr %87, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i2.i.i, align 4
  %memberidx2.i.i3.i.i = getelementptr inbounds %string, ptr %87, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i3.i.i, align 4
  %88 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %89 = call ptr %88(ptr nonnull %87)
  %90 = load i64, ptr %memberidx1.i.i2.i.i, align 4
  call void @write(i64 1, ptr %89, i64 %90)
  %91 = call ptr @malloc(i32 1)
  store i8 10, ptr %91, align 8
  %92 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i.i56.i = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i.i56.i, align 8
  %memberidx1.i.i57.i = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i57.i, align 4
  %memberidx2.i.i58.i = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i58.i, align 4
  %93 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %94 = call ptr %93(ptr nonnull %92)
  %95 = load i64, ptr %memberidx1.i.i57.i, align 4
  call void @write(i64 1, ptr %94, i64 %95)
  %memberidx.i61.i = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  %96 = load ptr, ptr %memberidx.i61.i, align 8
  call void @free(ptr %96)
  call void @free(ptr %52)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  br label %common.ret
}

define internal void @Compiler_set_std_path(ptr nocapture writeonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 4
  %4 = tail call ptr @malloc(i32 21)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(21) %4, ptr noundef nonnull align 8 dereferenceable(21) @25, i64 21, i1 false)
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %5, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  store ptr %4, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  store i64 21, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 3
  store i64 21, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %6 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 5
  %7 = load ptr, ptr %memberidx.i, align 8
  %8 = tail call ptr %7(ptr nonnull %1)
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %10 = tail call ptr %9(ptr nonnull %5)
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @24, ptr %8, ptr %10)
  %12 = load ptr, ptr %3, align 8
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i4 = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i4, align 8
  %memberidx1.i.i5 = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i.i5, align 4
  %memberidx2.i.i6 = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i.i6, align 4
  call void @free(ptr %8)
  call void @free(ptr %10)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  store ptr %13, ptr %memberidx1, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FloError__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FloError__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal ptr @Compiler_register_file(ptr nocapture readonly %0, ptr %1) {
  %buf.i.i = alloca [400 x i8], align 1
  %3 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i64 0, i32 4
  %4 = load ptr, ptr %memberidx.i, align 8
  %5 = tail call ptr @malloc(i32 1)
  store i8 64, ptr %5, align 8
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %5, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i.i, align 4
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1.i, align 8
  %8 = tail call ptr %4(ptr nonnull %1, ptr nonnull %6, ptr %7)
  %9 = load ptr, ptr %8, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i64 0, i32 6
  %10 = load ptr, ptr %memberidx2.i, align 8
  %11 = tail call ptr @malloc(i32 4)
  store i32 1869375022, ptr %11, align 8
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %12, align 8
  %memberidx.i.i5.i = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  store ptr %11, ptr %memberidx.i.i5.i, align 8
  %memberidx1.i.i6.i = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i6.i, align 4
  %memberidx2.i.i7.i = getelementptr inbounds %string, ptr %12, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i7.i, align 4
  %13 = tail call i1 %10(ptr nonnull %8, ptr nonnull %12)
  br i1 %13, label %Compiler_find_module_path.exit, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %14 = tail call ptr @malloc(i32 4)
  store i32 1869375022, ptr %14, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i8.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i8.i, align 8
  %memberidx1.i.i9.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i9.i, align 4
  %memberidx2.i.i10.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i10.i, align 4
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  %16 = load i64, ptr %memberidx.i.i, align 4
  %17 = add nuw i64 %16, 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2.i.i, align 8
  %19 = tail call ptr @realloc(ptr %18, i64 %17)
  store ptr %19, ptr %memberidx2.i.i, align 8
  %20 = load i64, ptr %memberidx.i.i, align 4
  %21 = getelementptr inbounds i8, ptr %19, i64 %20
  %22 = load i32, ptr %14, align 8
  store i32 %22, ptr %21, align 2147483648
  store i64 %17, ptr %memberidx.i.i, align 4
  br label %Compiler_find_module_path.exit

Compiler_find_module_path.exit:                   ; preds = %2, %if.entry.i
  call void @llvm.lifetime.start.p0(i64 400, ptr nonnull %buf.i.i)
  %23 = load ptr, ptr %8, align 8
  %memberidx.i11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i64 0, i32 5
  %24 = load ptr, ptr %memberidx.i11.i, align 8
  %25 = tail call ptr %24(ptr nonnull %8)
  %26 = call ptr @realpath(ptr %25, ptr nonnull %buf.i.i)
  %27 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %buf.i.i)
  %28 = trunc i64 %27 to i32
  %29 = call ptr @malloc(i32 %28)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %29, ptr nonnull align 8 %buf.i.i, i64 %27, i1 false)
  %30 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 %27, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 %27, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 400, ptr nonnull %buf.i.i)
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 7
  %31 = load ptr, ptr %memberidx, align 8
  %32 = call fastcc i64 @Map_string_FileId__hash_fnc(ptr nonnull %30)
  %memberidx.i15 = getelementptr inbounds %Map_string_FileId_, ptr %31, i64 0, i32 1
  %33 = load i64, ptr %memberidx.i15, align 4
  %34 = urem i64 %32, %33
  %35 = load ptr, ptr %31, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %36, null
  br i1 %.not.i, label %ifend, label %while.entry.i

while.entry.i:                                    ; preds = %Compiler_find_module_path.exit, %else.i
  %37 = phi ptr [ %47, %else.i ], [ %35, %Compiler_find_module_path.exit ]
  %38 = phi i64 [ %48, %else.i ], [ %33, %Compiler_find_module_path.exit ]
  %39 = phi ptr [ %51, %else.i ], [ %36, %Compiler_find_module_path.exit ]
  %hash.0.i = phi i64 [ %50, %else.i ], [ %34, %Compiler_find_module_path.exit ]
  %40 = load ptr, ptr %39, align 8
  %memberidx.i.i16 = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx.i.i16, align 4
  %42 = load i64, ptr %memberidx1.i.i.i.i, align 4
  %.not.i.i = icmp eq i64 %41, %42
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i18 = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  %43 = load ptr, ptr %memberidx2.i.i18, align 8
  %44 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %45 = call i64 @memcmp(ptr %43, ptr %44, i64 %41)
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i15, align 4
  %.pre30 = load ptr, ptr %31, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre31.pre = load ptr, ptr %31, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre31.pre, i64 %hash.0.i
  %.pre32.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre32.pre, null
  br i1 %.not29.i, label %ifend, label %Map_string_FileId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %47 = phi ptr [ %.pre30, %ifend.i.i.else.i_crit_edge ], [ %37, %while.entry.i ]
  %48 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %38, %while.entry.i ]
  %49 = add nuw i64 %hash.0.i, 1
  %50 = urem i64 %49, %48
  %ptridx7.i = getelementptr inbounds ptr, ptr %47, i64 %50
  %51 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %51, null
  br i1 %.not30.i, label %ifend, label %while.entry.i

Map_string_FileId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_FileId_, ptr %.pre32.pre, i64 0, i32 1
  %52 = load ptr, ptr %memberidx15.i, align 8
  %.not = icmp eq ptr %52, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %Map_string_FileId____getitem__.exit, %Array_FloFile____sl__.exit
  %common.ret.op = phi ptr [ %53, %Array_FloFile____sl__.exit ], [ %52, %Map_string_FileId____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else.i, %Compiler_find_module_path.exit, %while.end.i, %Map_string_FileId____getitem__.exit
  %53 = tail call ptr @malloc(i32 8)
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %54 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %54, i64 0, i32 2
  %55 = load i64, ptr %memberidx2, align 4
  store i64 %55, ptr %53, align 4
  %56 = load ptr, ptr %memberidx, align 8
  call fastcc void @Map_string_FileId____setitem__(ptr %56, ptr nonnull %30, ptr nonnull %53)
  %57 = load ptr, ptr %memberidx1, align 8
  %58 = tail call ptr @malloc(i32 16)
  store ptr %30, ptr %58, align 8
  %memberidx1.i19 = getelementptr inbounds %FloFile, ptr %58, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i19, align 8
  %memberidx.i20 = getelementptr inbounds %Array_FloFile_, ptr %57, i64 0, i32 2
  %59 = load i64, ptr %memberidx.i20, align 4
  %memberidx1.i21 = getelementptr inbounds %Array_FloFile_, ptr %57, i64 0, i32 3
  %60 = load i64, ptr %memberidx1.i21, align 4
  %.not.i22 = icmp slt i64 %59, %60
  br i1 %.not.i22, label %ifend.Array_FloFile____sl__.exit_crit_edge, label %if.entry.i25

ifend.Array_FloFile____sl__.exit_crit_edge:       ; preds = %ifend
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_FloFile_, ptr %57, i64 0, i32 1
  %.pre34 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_FloFile____sl__.exit

if.entry.i25:                                     ; preds = %ifend
  %61 = shl nuw i64 %60, 1
  store i64 %61, ptr %memberidx1.i21, align 4
  %memberidx2.i.i24 = getelementptr inbounds %Array_FloFile_, ptr %57, i64 0, i32 1
  %62 = load ptr, ptr %memberidx2.i.i24, align 8
  %63 = shl i64 %60, 4
  %64 = call ptr @realloc(ptr %62, i64 %63)
  store ptr %64, ptr %memberidx2.i.i24, align 8
  %.pre33 = load i64, ptr %memberidx.i20, align 4
  br label %Array_FloFile____sl__.exit

Array_FloFile____sl__.exit:                       ; preds = %ifend.Array_FloFile____sl__.exit_crit_edge, %if.entry.i25
  %65 = phi ptr [ %.pre34, %ifend.Array_FloFile____sl__.exit_crit_edge ], [ %64, %if.entry.i25 ]
  %66 = phi i64 [ %59, %ifend.Array_FloFile____sl__.exit_crit_edge ], [ %.pre33, %if.entry.i25 ]
  %67 = add nsw i64 %66, 1
  store i64 %67, ptr %memberidx.i20, align 4
  %ptridx.i26 = getelementptr inbounds ptr, ptr %65, i64 %66
  store ptr %58, ptr %ptridx.i26, align 8
  br label %common.ret
}

define internal i1 @Compiler_set_current_file(ptr nocapture %0, ptr %1) {
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %1, align 4
  %memberidx.i = getelementptr inbounds %Array_FloFile_, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %5, i64 %4
  %6 = load ptr, ptr %ptridx.i, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx.i19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 5
  %9 = load ptr, ptr %memberidx.i19, align 8
  %10 = tail call ptr %9(ptr nonnull %7)
  %11 = tail call i64 @access(ptr %10, i64 0)
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %ifend, label %common.ret

common.ret:                                       ; preds = %2, %ifend7
  ret i1 %12

ifend:                                            ; preds = %2
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx.i20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 5
  %15 = load ptr, ptr %memberidx.i20, align 8
  %16 = tail call ptr %15(ptr nonnull %13)
  %17 = tail call i64 @fopen(ptr %16, ptr nonnull @26)
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %File_open_for_reading.exit, label %ifend.i

ifend.i:                                          ; preds = %ifend
  %19 = tail call ptr @malloc(i32 16)
  store ptr @VTableFile, ptr %19, align 8
  %memberidx.i.i = getelementptr inbounds %File, ptr %19, i64 0, i32 1
  store i64 %17, ptr %memberidx.i.i, align 4
  br label %File_open_for_reading.exit

File_open_for_reading.exit:                       ; preds = %ifend, %ifend.i
  %common.ret.op.i = phi ptr [ %19, %ifend.i ], [ null, %ifend ]
  %memberidx4 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 3
  %20 = load ptr, ptr %memberidx4, align 8
  %.not = icmp eq ptr %20, null
  br i1 %.not, label %ifend7, label %if.entry5

if.entry5:                                        ; preds = %File_open_for_reading.exit
  %memberidx.i21 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i21, align 8
  tail call void @free(ptr %21)
  tail call void @free(ptr nonnull %20)
  br label %ifend7

ifend7:                                           ; preds = %File_open_for_reading.exit, %if.entry5
  %22 = load ptr, ptr %common.ret.op.i, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = tail call ptr %23(ptr nonnull %common.ret.op.i)
  store ptr %24, ptr %memberidx4, align 8
  %memberidx11 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx11, align 8
  %25 = load ptr, ptr %common.ret.op.i, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx12, align 8
  tail call void %26(ptr nonnull %common.ret.op.i)
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FloFile__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FloFile__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal ptr @Compiler_add_builtins(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = tail call ptr %3(ptr nonnull %0, ptr %4)
  ret ptr %5
}

define internal fastcc void @Map_string_FileId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_FileId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_FileId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_FileId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_FileId__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_FileId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_FileId_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_FileId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

; Function Attrs: nofree nounwind
declare noundef ptr @realpath(ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #9

declare ptr @dirname(ptr) local_unnamed_addr

define internal i64 @File_write_string(ptr nocapture readonly %0, ptr %1) {
  %3 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr %4(ptr nonnull %1)
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %7 = load i64, ptr %memberidx2, align 4
  %8 = tail call i64 @fwrite(ptr %5, i64 1, i64 %6, i64 %7)
  ret i64 %8
}

define internal noalias ptr @File_read_all(ptr nocapture readonly %0) {
  %2 = tail call ptr @malloc(i32 0)
  %memberidx = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %buffer10 = alloca [1024 x i8], align 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = call i64 @fread(ptr nonnull %buffer10, i64 1, i64 1024, i64 %3)
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %ifend, %1
  %size.0.lcssa = phi i64 [ 0, %1 ], [ %8, %ifend ]
  %allocated_mem.0.lcssa = phi ptr [ %2, %1 ], [ %9, %ifend ]
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %allocated_mem.0.lcssa, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 %size.0.lcssa, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 %size.0.lcssa, ptr %memberidx2.i, align 4
  ret ptr %6

ifend:                                            ; preds = %1, %ifend
  %7 = phi i64 [ %12, %ifend ], [ %4, %1 ]
  %buffer13 = phi ptr [ %buffer, %ifend ], [ %buffer10, %1 ]
  %allocated_mem.012 = phi ptr [ %9, %ifend ], [ %2, %1 ]
  %size.011 = phi i64 [ %8, %ifend ], [ 0, %1 ]
  %8 = add nuw i64 %7, %size.011
  %9 = call ptr @realloc(ptr %allocated_mem.012, i64 %8)
  %10 = getelementptr inbounds i8, ptr %9, i64 %size.011
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %10, ptr nonnull align 2147483648 %buffer13, i64 %7, i1 false)
  %buffer = alloca [1024 x i8], align 1
  %11 = load i64, ptr %memberidx, align 4
  %12 = call i64 @fread(ptr nonnull %buffer, i64 1, i64 1024, i64 %11)
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %if.entry, label %ifend
}

define internal i64 @File_write_bytes_length(ptr nocapture readonly %0, ptr %1, i64 %2) {
  %memberidx = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %4 = load i64, ptr %memberidx, align 4
  %5 = tail call i64 @fwrite(ptr %1, i64 1, i64 %2, i64 %4)
  ret i64 %5
}

define internal void @File_close(ptr nocapture readonly %0) {
  %memberidx = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %2 = load i64, ptr %memberidx, align 4
  tail call void @fclose(i64 %2)
  ret void
}

declare i64 @fopen(ptr, ptr) local_unnamed_addr

declare i64 @fread(ptr, i64, i64, i64) local_unnamed_addr

declare i64 @fwrite(ptr, i64, i64, i64) local_unnamed_addr

; Function Attrs: nofree nounwind
declare noundef i64 @access(ptr nocapture noundef readonly, i64 noundef) local_unnamed_addr #9

declare void @fclose(i64) local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Token__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Token__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @Lexer_tokenize(ptr %0, ptr %1) unnamed_addr {
  %3 = alloca %Lexer, align 8
  %memberidx.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 1
  store ptr %0, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 2
  store ptr %1, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 5
  store i64 1, ptr %memberidx3.i, align 4
  %memberidx4.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 4
  store i64 0, ptr %memberidx4.i, align 4
  %memberidx2.i.i24 = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx2.i.i24, align 4
  %5 = icmp slt i64 %4, 0
  br i1 %5, label %Lexer_advance.exit, label %ifend.i

ifend.i:                                          ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i26, align 8
  store i64 0, ptr %memberidx2.i, align 4
  %8 = tail call i8 %7(ptr nonnull %0, i64 0)
  store i8 %8, ptr %3, align 8
  %9 = icmp eq i8 %8, 10
  br i1 %9, label %if.entry6.i, label %else7.i

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx4.i, align 4
  store i64 2, ptr %memberidx3.i, align 4
  br label %Lexer_advance.exit

else7.i:                                          ; preds = %ifend.i
  store i64 1, ptr %memberidx4.i, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %2, %if.entry6.i, %else7.i
  %10 = phi i64 [ -1, %2 ], [ 0, %if.entry6.i ], [ 0, %else7.i ]
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Token_, ptr %11, align 8
  %memberidx.i28 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 2
  %memberidx1.i29 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 3
  store i64 8, ptr %memberidx1.i29, align 4
  %memberidx2.i30 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 1
  %12 = tail call ptr @malloc(i32 64)
  store ptr %12, ptr %memberidx2.i30, align 8
  store i64 0, ptr %memberidx.i28, align 4
  %13 = load i64, ptr %memberidx2.i.i24, align 4
  %14 = icmp sge i64 %10, %13
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %1, i64 0, i32 2
  %15 = load i64, ptr %memberidx3, align 4
  %16 = icmp ne i64 %15, 0
  %17 = or i1 %14, %16
  br i1 %17, label %while.end, label %while.entry

while.entry:                                      ; preds = %Lexer_advance.exit, %Lexer_advance.exit53
  %18 = phi ptr [ %25, %Lexer_advance.exit53 ], [ %12, %Lexer_advance.exit ]
  %19 = phi i64 [ %26, %Lexer_advance.exit53 ], [ 8, %Lexer_advance.exit ]
  %20 = phi i64 [ %27, %Lexer_advance.exit53 ], [ 0, %Lexer_advance.exit ]
  %21 = call fastcc ptr @Lexer_lex_token(ptr nonnull %3)
  %.not.i56 = icmp slt i64 %20, %19
  br i1 %.not.i56, label %Array_Token____sl__.exit63, label %if.entry.i59

if.entry.i59:                                     ; preds = %while.entry
  %22 = shl nuw i64 %19, 1
  store i64 %22, ptr %memberidx1.i29, align 4
  %23 = shl i64 %19, 4
  %24 = call ptr @realloc(ptr %18, i64 %23)
  store ptr %24, ptr %memberidx2.i30, align 8
  br label %Array_Token____sl__.exit63

Array_Token____sl__.exit63:                       ; preds = %while.entry, %if.entry.i59
  %25 = phi ptr [ %18, %while.entry ], [ %24, %if.entry.i59 ]
  %26 = phi i64 [ %19, %while.entry ], [ %22, %if.entry.i59 ]
  %27 = add nuw nsw i64 %20, 1
  store i64 %27, ptr %memberidx.i28, align 4
  %ptridx.i61 = getelementptr inbounds ptr, ptr %25, i64 %20
  store ptr %21, ptr %ptridx.i61, align 8
  %28 = load i64, ptr %memberidx2.i, align 4
  %29 = load ptr, ptr %memberidx.i, align 8
  %memberidx2.i.i43 = getelementptr inbounds %string, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i.i43, align 4
  %.not = icmp slt i64 %28, %30
  br i1 %.not, label %ifend.i47, label %Lexer_advance.exit53

ifend.i47:                                        ; preds = %Array_Token____sl__.exit63
  %31 = load ptr, ptr %29, align 8
  %memberidx2.i45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 2
  %32 = load ptr, ptr %memberidx2.i45, align 8
  %33 = add nsw i64 %28, 1
  store i64 %33, ptr %memberidx2.i, align 4
  %34 = call i8 %32(ptr nonnull %29, i64 %33)
  store i8 %34, ptr %3, align 8
  %35 = icmp eq i8 %34, 10
  br i1 %35, label %if.entry6.i50, label %Lexer_advance.exit53.sink.split

if.entry6.i50:                                    ; preds = %ifend.i47
  store i64 0, ptr %memberidx4.i, align 4
  br label %Lexer_advance.exit53.sink.split

Lexer_advance.exit53.sink.split:                  ; preds = %ifend.i47, %if.entry6.i50
  %memberidx3.i.sink67 = phi ptr [ %memberidx3.i, %if.entry6.i50 ], [ %memberidx4.i, %ifend.i47 ]
  %36 = load i64, ptr %memberidx3.i.sink67, align 4
  %37 = add nsw i64 %36, 1
  store i64 %37, ptr %memberidx3.i.sink67, align 4
  br label %Lexer_advance.exit53

Lexer_advance.exit53:                             ; preds = %Lexer_advance.exit53.sink.split, %Array_Token____sl__.exit63
  %38 = load i64, ptr %memberidx2.i, align 4
  %39 = load ptr, ptr %memberidx.i, align 8
  %memberidx2.i40 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i40, align 4
  %41 = icmp sge i64 %38, %40
  %42 = load ptr, ptr %memberidx1.i, align 8
  %memberidx5 = getelementptr inbounds %Array_FloError_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx5, align 4
  %44 = icmp ne i64 %43, 0
  %45 = or i1 %41, %44
  br i1 %45, label %while.end, label %while.entry

while.end:                                        ; preds = %Lexer_advance.exit53, %Lexer_advance.exit
  %46 = phi ptr [ %12, %Lexer_advance.exit ], [ %25, %Lexer_advance.exit53 ]
  %47 = phi i64 [ 8, %Lexer_advance.exit ], [ %26, %Lexer_advance.exit53 ]
  %48 = phi i64 [ 0, %Lexer_advance.exit ], [ %27, %Lexer_advance.exit53 ]
  %49 = tail call ptr @malloc(i32 16)
  %50 = tail call ptr @malloc(i32 32)
  %51 = load i64, ptr %memberidx4.i, align 4
  %52 = load i64, ptr %memberidx3.i, align 4
  %memberidx2.i36 = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %50, i8 0, i64 16, i1 false)
  store i64 %51, ptr %memberidx2.i36, align 4
  %memberidx3.i37 = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 3
  store i64 %52, ptr %memberidx3.i37, align 4
  store i64 46, ptr %49, align 4
  %memberidx1.i34 = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  store ptr %50, ptr %memberidx1.i34, align 8
  %.not.i = icmp slt i64 %48, %47
  br i1 %.not.i, label %Array_Token____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %while.end
  %53 = shl nuw i64 %47, 1
  store i64 %53, ptr %memberidx1.i29, align 4
  %54 = shl i64 %47, 4
  %55 = call ptr @realloc(ptr %46, i64 %54)
  store ptr %55, ptr %memberidx2.i30, align 8
  %.pre = load i64, ptr %memberidx.i28, align 4
  br label %Array_Token____sl__.exit

Array_Token____sl__.exit:                         ; preds = %while.end, %if.entry.i
  %56 = phi ptr [ %46, %while.end ], [ %55, %if.entry.i ]
  %57 = phi i64 [ %48, %while.end ], [ %.pre, %if.entry.i ]
  %58 = add nsw i64 %57, 1
  store i64 %58, ptr %memberidx.i28, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %56, i64 %57
  store ptr %49, ptr %ptridx.i, align 8
  ret ptr %11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Array_Token___pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Array_Token___find(ptr nocapture readonly %0, ptr nocapture readonly %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx1.i = getelementptr inbounds %Array_Token_, ptr %1, i64 0, i32 2
  %5 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i10.i = getelementptr inbounds %Array_Token_, ptr %1, i64 0, i32 1
  %6 = icmp sgt i64 %5, 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.09 = phi i64 [ 0, %for.body.lr.ph ], [ %15, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.09
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %8, %5
  br i1 %.not.i, label %for.cond.preheader.i, label %ifend

for.cond.preheader.i:                             ; preds = %for.body
  br i1 %6, label %for.body.lr.ph.i, label %common.ret

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %10 = load ptr, ptr %memberidx.i10.i, align 8
  br label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %11 = add nuw nsw i64 %storemerge12.i, 1
  %12 = icmp slt i64 %11, %5
  br i1 %12, label %for.body.i, label %common.ret

for.body.i:                                       ; preds = %for.cond.i, %for.body.lr.ph.i
  %storemerge12.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %11, %for.cond.i ]
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %storemerge12.i
  %13 = load ptr, ptr %ptridx.i.i, align 8
  %ptridx.i11.i = getelementptr inbounds ptr, ptr %10, i64 %storemerge12.i
  %14 = load ptr, ptr %ptridx.i11.i, align 8
  %.not9.i = icmp eq ptr %13, %14
  br i1 %.not9.i, label %for.cond.i, label %ifend

common.ret:                                       ; preds = %ifend, %for.cond.preheader.i, %for.cond.i, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.09, %for.cond.i ], [ -1, %ifend ], [ %i.09, %for.cond.preheader.i ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body.i, %for.body
  %15 = add nuw nsw i64 %i.09, 1
  %16 = icmp slt i64 %15, %2
  br i1 %16, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal i64 @Array_uint__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_uint_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_uint_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds i64, ptr %4, i64 %2
  %5 = load i64, ptr %ptridx, align 4
  ret i64 %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_uint__find(ptr nocapture readonly %0, i64 %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_uint_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds i64, ptr %4, i64 %i.06
  %5 = load i64, ptr %ptridx, align 4
  %6 = icmp eq i64 %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @Lexer_string_token(ptr %0) unnamed_addr {
  %2 = alloca %StringBuilder, align 8
  %3 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Array_Token__, ptr %3, align 8
  %memberidx.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 1
  %4 = tail call ptr @malloc(i32 64)
  store ptr %4, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_uint_, ptr %5, align 8
  %memberidx.i64 = getelementptr inbounds %Array_uint_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i64, align 4
  %memberidx1.i65 = getelementptr inbounds %Array_uint_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i65, align 4
  %memberidx2.i66 = getelementptr inbounds %Array_uint_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i66, align 8
  store i64 0, ptr %memberidx.i64, align 4
  %memberidx.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i, align 4
  %.not = icmp slt i64 %7, %9
  br i1 %.not, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %1
  %10 = load ptr, ptr %8, align 8
  %memberidx2.i68 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 2
  %11 = load ptr, ptr %memberidx2.i68, align 8
  %12 = add nsw i64 %7, 1
  store i64 %12, ptr %memberidx.i.i, align 4
  %13 = tail call i8 %11(ptr nonnull %8, i64 %12)
  store i8 %13, ptr %0, align 1
  %14 = icmp eq i8 %13, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %14, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink267 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %15 = load i64, ptr %memberidx10.i.sink267, align 4
  %16 = add nsw i64 %15, 1
  store i64 %16, ptr %memberidx10.i.sink267, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %1
  %17 = alloca %StringBuilder, align 8
  store ptr @VTableStringBuilder, ptr %17, align 8
  %memberidx.i69 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 2
  store i64 1, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 1
  %18 = tail call ptr @malloc(i32 1)
  store ptr %18, ptr %memberidx1.i70, align 8
  %memberidx3.i71 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 3
  store ptr %18, ptr %memberidx3.i71, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 4
  store i64 0, ptr %memberidx5.i, align 8
  %19 = load i64, ptr %memberidx.i.i, align 4
  %20 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i74 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2.i74, align 4
  %.not217 = icmp slt i64 %19, %21
  br i1 %.not217, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Lexer_advance.exit
  %memberidx12.i106 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i104 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.outer

while.entry.outer:                                ; preds = %while.entry.preheader, %Lexer_advance.exit124
  %escape_next.0.ph = phi i1 [ false, %while.entry.preheader ], [ %113, %Lexer_advance.exit124 ]
  %length.0.ph = phi i64 [ 2, %while.entry.preheader ], [ %112, %Lexer_advance.exit124 ]
  %22 = load i8, ptr %0, align 1
  %23 = icmp ne i8 %22, 34
  %24 = or i1 %escape_next.0.ph, %23
  br i1 %24, label %ifend.lr.ph, label %while.end

ifend.lr.ph:                                      ; preds = %while.entry.outer
  %25 = add nsw i64 %length.0.ph, -2
  br label %ifend

while.end:                                        ; preds = %while.entry.outer, %Lexer_advance.exit124, %Array_Array_Token_____sl__.exit, %Lexer_advance.exit
  %length.1 = phi i64 [ 2, %Lexer_advance.exit ], [ %length.0.ph, %Array_Array_Token_____sl__.exit ], [ %length.0.ph, %while.entry.outer ], [ %112, %Lexer_advance.exit124 ]
  %26 = call ptr @malloc(i32 32)
  %27 = load i64, ptr %memberidx.i.i, align 4
  %28 = sub i64 1, %length.1
  %29 = add i64 %28, %27
  %30 = add nsw i64 %27, 1
  %memberidx2.i76 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %31 = load i64, ptr %memberidx2.i76, align 4
  %32 = sub nuw i64 %31, %length.1
  %memberidx3.i77 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %33 = load i64, ptr %memberidx3.i77, align 4
  store i64 %29, ptr %26, align 4
  %memberidx1.i.i78 = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  store i64 %30, ptr %memberidx1.i.i78, align 4
  %memberidx2.i.i79 = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 2
  store i64 %32, ptr %memberidx2.i.i79, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  store i64 %33, ptr %memberidx3.i.i, align 4
  %34 = load ptr, ptr %17, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 3
  %35 = load ptr, ptr %memberidx32, align 8
  %36 = call ptr %35(ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %2)
  %memberidx.i80 = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx.i80, align 4
  store ptr @VTableStringBuilder, ptr %2, align 8
  %memberidx.i.i81 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 2
  store i64 %37, ptr %memberidx.i.i81, align 8
  %memberidx1.i.i82 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 1
  %38 = trunc i64 %37 to i32
  %39 = call ptr @malloc(i32 %38)
  store ptr %39, ptr %memberidx1.i.i82, align 8
  %memberidx3.i.i83 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 3
  store ptr %39, ptr %memberidx3.i.i83, align 8
  %memberidx5.i.i = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 4
  store i64 0, ptr %memberidx5.i.i, align 8
  %40 = load i64, ptr %memberidx.i80, align 4
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %for.body.i, label %unescape.exit

for.body.i:                                       ; preds = %while.end, %for.incr.i
  %i.0.i237 = phi i64 [ %46, %for.incr.i ], [ 0, %while.end ]
  %42 = load ptr, ptr %36, align 8
  %memberidx2.i84 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 2
  %43 = load ptr, ptr %memberidx2.i84, align 8
  %44 = call i8 %43(ptr nonnull %36, i64 %i.0.i237)
  %45 = icmp eq i8 %44, 92
  br i1 %45, label %if.entry.i, label %ifend.i85

for.incr.i:                                       ; preds = %if.entry16.i, %if.entry8.i, %ifend.i85
  %i.1.i = phi i64 [ %49, %if.entry8.i ], [ %81, %if.entry16.i ], [ %i.2.i, %ifend.i85 ]
  %46 = add nsw i64 %i.1.i, 1
  %47 = load i64, ptr %memberidx.i80, align 4
  %48 = icmp slt i64 %46, %47
  br i1 %48, label %for.body.i, label %unescape.exit.loopexit

if.entry.i:                                       ; preds = %for.body.i
  %49 = add nuw i64 %i.0.i237, 3
  %50 = load i64, ptr %memberidx.i80, align 4
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %if.entry4.i, label %ifend6.i

ifend.i85:                                        ; preds = %ifend27.i.i, %get_escape_char.exit.i.fold.split, %get_escape_char.exit.i.fold.split226, %get_escape_char.exit.i.fold.split227, %get_escape_char.exit.i.fold.split228, %get_escape_char.exit.i.fold.split229, %get_escape_char.exit.i.fold.split230, %get_escape_char.exit.i.fold.split231, %get_escape_char.exit.i.fold.split232, %get_escape_char.exit.i.fold.split233, %ifend6.i, %for.body.i
  %char.0.i = phi i8 [ %44, %for.body.i ], [ 7, %ifend6.i ], [ %67, %ifend27.i.i ], [ 8, %get_escape_char.exit.i.fold.split ], [ 9, %get_escape_char.exit.i.fold.split226 ], [ 12, %get_escape_char.exit.i.fold.split227 ], [ 10, %get_escape_char.exit.i.fold.split228 ], [ 13, %get_escape_char.exit.i.fold.split229 ], [ 11, %get_escape_char.exit.i.fold.split230 ], [ 0, %get_escape_char.exit.i.fold.split231 ], [ %67, %get_escape_char.exit.i.fold.split232 ], [ %67, %get_escape_char.exit.i.fold.split233 ]
  %i.2.i = phi i64 [ %i.0.i237, %for.body.i ], [ %66, %ifend6.i ], [ %66, %ifend27.i.i ], [ %66, %get_escape_char.exit.i.fold.split ], [ %66, %get_escape_char.exit.i.fold.split226 ], [ %66, %get_escape_char.exit.i.fold.split227 ], [ %66, %get_escape_char.exit.i.fold.split228 ], [ %66, %get_escape_char.exit.i.fold.split229 ], [ %66, %get_escape_char.exit.i.fold.split230 ], [ %66, %get_escape_char.exit.i.fold.split231 ], [ %66, %get_escape_char.exit.i.fold.split232 ], [ %66, %get_escape_char.exit.i.fold.split233 ]
  %52 = load ptr, ptr %2, align 8
  %memberidx21.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 2
  %53 = load ptr, ptr %memberidx21.i, align 8
  call void %53(ptr nonnull %2, i8 %char.0.i)
  br label %for.incr.i

if.entry4.i:                                      ; preds = %if.entry.i
  %54 = load ptr, ptr %36, align 8
  %memberidx7.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i64 0, i32 3
  %55 = load ptr, ptr %memberidx7.i, align 8
  %56 = call ptr %55(ptr nonnull %36)
  %57 = getelementptr i8, ptr %56, i64 1
  %58 = getelementptr i8, ptr %57, i64 %i.0.i237
  %59 = call i64 @memcmp(ptr %58, ptr nonnull @46, i64 3)
  %60 = icmp eq i64 %59, 0
  %61 = call i64 @memcmp(ptr %58, ptr nonnull @47, i64 3)
  %62 = icmp eq i64 %61, 0
  %63 = or i1 %60, %62
  br i1 %63, label %if.entry8.i, label %ifend10.i

ifend6.i:                                         ; preds = %if.entry13.i, %ifend10.i, %if.entry.i
  %64 = load ptr, ptr %36, align 8
  %memberidx20.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 2
  %65 = load ptr, ptr %memberidx20.i, align 8
  %66 = add nsw i64 %i.0.i237, 1
  %67 = call i8 %65(ptr nonnull %36, i64 %66)
  switch i8 %67, label %ifend27.i.i [
    i8 97, label %ifend.i85
    i8 98, label %get_escape_char.exit.i.fold.split
    i8 116, label %get_escape_char.exit.i.fold.split226
    i8 102, label %get_escape_char.exit.i.fold.split227
    i8 110, label %get_escape_char.exit.i.fold.split228
    i8 114, label %get_escape_char.exit.i.fold.split229
    i8 118, label %get_escape_char.exit.i.fold.split230
    i8 48, label %get_escape_char.exit.i.fold.split231
    i8 39, label %get_escape_char.exit.i.fold.split232
    i8 34, label %get_escape_char.exit.i.fold.split233
  ]

ifend27.i.i:                                      ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split:                ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split226:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split227:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split228:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split229:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split230:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split231:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split232:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split233:             ; preds = %ifend6.i
  br label %ifend.i85

if.entry8.i:                                      ; preds = %if.entry4.i
  %68 = load ptr, ptr %2, align 8
  %memberidx11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx11.i, align 8
  %70 = call ptr @malloc(i32 1)
  store i8 27, ptr %70, align 8
  %71 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %71, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 1
  store ptr %70, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i.i, align 4
  call void %69(ptr nonnull %2, ptr nonnull %71)
  br label %for.incr.i

ifend10.i:                                        ; preds = %if.entry4.i
  %72 = add nuw i64 %i.0.i237, 6
  %73 = load i64, ptr %memberidx.i80, align 4
  %74 = icmp slt i64 %72, %73
  br i1 %74, label %if.entry13.i, label %ifend6.i

if.entry13.i:                                     ; preds = %ifend10.i
  %75 = call i64 @memcmp(ptr %58, ptr nonnull @48, i64 5)
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %if.entry16.i, label %ifend6.i

if.entry16.i:                                     ; preds = %if.entry13.i
  %77 = load ptr, ptr %2, align 8
  %memberidx19.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx19.i, align 8
  %79 = call ptr @malloc(i32 1)
  store i8 27, ptr %79, align 8
  %80 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %80, align 8
  %memberidx.i.i44.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  store ptr %79, ptr %memberidx.i.i44.i, align 8
  %memberidx1.i.i45.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i45.i, align 4
  %memberidx2.i.i46.i = getelementptr inbounds %string, ptr %80, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i46.i, align 4
  call void %78(ptr nonnull %2, ptr nonnull %80)
  %81 = add nuw i64 %i.0.i237, 5
  br label %for.incr.i

unescape.exit.loopexit:                           ; preds = %for.incr.i
  %.pre259 = load ptr, ptr %2, align 8
  br label %unescape.exit

unescape.exit:                                    ; preds = %unescape.exit.loopexit, %while.end
  %82 = phi ptr [ %.pre259, %unescape.exit.loopexit ], [ @VTableStringBuilder, %while.end ]
  %memberidx22.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %82, i64 0, i32 3
  %83 = load ptr, ptr %memberidx22.i, align 8
  %84 = call ptr %83(ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %2)
  %85 = tail call ptr @malloc(i32 40)
  store i64 34, ptr %85, align 4
  %memberidx1.i.i86 = getelementptr inbounds %Token, ptr %85, i64 0, i32 1
  store ptr %26, ptr %memberidx1.i.i86, align 8
  %memberidx.i87 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 2
  store ptr %84, ptr %memberidx.i87, align 8
  %memberidx1.i88 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 3
  store ptr %5, ptr %memberidx1.i88, align 8
  %memberidx2.i89 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 4
  store ptr %3, ptr %memberidx2.i89, align 8
  ret ptr %85

ifend:                                            ; preds = %ifend.lr.ph, %Array_Array_Token_____sl__.exit
  %86 = phi i8 [ %22, %ifend.lr.ph ], [ %187, %Array_Array_Token_____sl__.exit ]
  %escape_next.0239 = phi i1 [ %escape_next.0.ph, %ifend.lr.ph ], [ false, %Array_Array_Token_____sl__.exit ]
  %87 = icmp ne i8 %86, 36
  %88 = or i1 %escape_next.0239, %87
  br i1 %88, label %ifend8, label %if.entry6

if.entry6:                                        ; preds = %ifend
  %89 = load i64, ptr %memberidx.i64, align 4
  %90 = load i64, ptr %memberidx1.i65, align 4
  %.not.i = icmp slt i64 %89, %90
  br i1 %.not.i, label %if.entry6.Array_uint____sl__.exit_crit_edge, label %if.entry.i94

if.entry6.Array_uint____sl__.exit_crit_edge:      ; preds = %if.entry6
  %.pre246 = load ptr, ptr %memberidx2.i66, align 8
  br label %Array_uint____sl__.exit

if.entry.i94:                                     ; preds = %if.entry6
  %91 = shl nuw i64 %90, 1
  store i64 %91, ptr %memberidx1.i65, align 4
  %92 = load ptr, ptr %memberidx2.i66, align 8
  %93 = shl i64 %90, 4
  %94 = call ptr @realloc(ptr %92, i64 %93)
  store ptr %94, ptr %memberidx2.i66, align 8
  %.pre = load i64, ptr %memberidx.i64, align 4
  br label %Array_uint____sl__.exit

Array_uint____sl__.exit:                          ; preds = %if.entry6.Array_uint____sl__.exit_crit_edge, %if.entry.i94
  %95 = phi ptr [ %.pre246, %if.entry6.Array_uint____sl__.exit_crit_edge ], [ %94, %if.entry.i94 ]
  %96 = phi i64 [ %89, %if.entry6.Array_uint____sl__.exit_crit_edge ], [ %.pre, %if.entry.i94 ]
  %97 = add nsw i64 %96, 1
  store i64 %97, ptr %memberidx.i64, align 4
  %ptridx.i = getelementptr inbounds i64, ptr %95, i64 %96
  store i64 %25, ptr %ptridx.i, align 4
  %98 = load i64, ptr %memberidx.i.i, align 4
  %99 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i98 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  %100 = load i64, ptr %memberidx2.i.i98, align 4
  %.not218 = icmp slt i64 %98, %100
  br i1 %.not218, label %ifend.i102, label %Lexer_advance.exit108

ifend.i102:                                       ; preds = %Array_uint____sl__.exit
  %101 = load ptr, ptr %99, align 8
  %memberidx2.i100 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %101, i64 0, i32 2
  %102 = load ptr, ptr %memberidx2.i100, align 8
  %103 = add nsw i64 %98, 1
  store i64 %103, ptr %memberidx.i.i, align 4
  %104 = call i8 %102(ptr nonnull %99, i64 %103)
  store i8 %104, ptr %0, align 1
  %105 = icmp eq i8 %104, 10
  br i1 %105, label %if.entry6.i105, label %Lexer_advance.exit108.sink.split

if.entry6.i105:                                   ; preds = %ifend.i102
  store i64 0, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit108.sink.split

Lexer_advance.exit108.sink.split:                 ; preds = %ifend.i102, %if.entry6.i105
  %memberidx10.i104.sink269 = phi ptr [ %memberidx10.i104, %if.entry6.i105 ], [ %memberidx12.i106, %ifend.i102 ]
  %106 = load i64, ptr %memberidx10.i104.sink269, align 4
  %107 = add nsw i64 %106, 1
  store i64 %107, ptr %memberidx10.i104.sink269, align 4
  br label %Lexer_advance.exit108

Lexer_advance.exit108:                            ; preds = %Lexer_advance.exit108.sink.split, %Array_uint____sl__.exit
  %108 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Token_, ptr %108, align 8
  %memberidx.i109 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 2
  store i64 0, ptr %memberidx.i109, align 4
  %memberidx1.i110 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 3
  store i64 8, ptr %memberidx1.i110, align 4
  %memberidx2.i111 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 1
  %109 = call ptr @malloc(i32 64)
  store ptr %109, ptr %memberidx2.i111, align 8
  store i64 0, ptr %memberidx.i109, align 4
  %110 = load i8, ptr %0, align 1
  %111 = icmp eq i8 %110, 40
  br i1 %111, label %if.entry12, label %else13

ifend8:                                           ; preds = %ifend
  %112 = add nuw nsw i64 %length.0.ph, 1
  %113 = icmp eq i8 %86, 92
  %114 = load ptr, ptr %17, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %114, i64 0, i32 2
  %115 = load ptr, ptr %memberidx30, align 8
  call void %115(ptr nonnull %17, i8 %86)
  %116 = load i64, ptr %memberidx.i.i, align 4
  %117 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i114 = getelementptr inbounds %string, ptr %117, i64 0, i32 2
  %118 = load i64, ptr %memberidx2.i.i114, align 4
  %.not224 = icmp slt i64 %116, %118
  br i1 %.not224, label %ifend.i118, label %Lexer_advance.exit124

ifend.i118:                                       ; preds = %ifend8
  %119 = load ptr, ptr %117, align 8
  %memberidx2.i116 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %119, i64 0, i32 2
  %120 = load ptr, ptr %memberidx2.i116, align 8
  %121 = add nsw i64 %116, 1
  store i64 %121, ptr %memberidx.i.i, align 4
  %122 = call i8 %120(ptr nonnull %117, i64 %121)
  store i8 %122, ptr %0, align 1
  %123 = icmp eq i8 %122, 10
  br i1 %123, label %if.entry6.i121, label %Lexer_advance.exit124.sink.split

if.entry6.i121:                                   ; preds = %ifend.i118
  store i64 0, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit124.sink.split

Lexer_advance.exit124.sink.split:                 ; preds = %ifend.i118, %if.entry6.i121
  %memberidx10.i104.sink272 = phi ptr [ %memberidx10.i104, %if.entry6.i121 ], [ %memberidx12.i106, %ifend.i118 ]
  %124 = load i64, ptr %memberidx10.i104.sink272, align 4
  %125 = add nsw i64 %124, 1
  store i64 %125, ptr %memberidx10.i104.sink272, align 4
  br label %Lexer_advance.exit124

Lexer_advance.exit124:                            ; preds = %Lexer_advance.exit124.sink.split, %ifend8
  %126 = load i64, ptr %memberidx.i.i, align 4
  %127 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i127 = getelementptr inbounds %string, ptr %127, i64 0, i32 2
  %128 = load i64, ptr %memberidx2.i127, align 4
  %.not225 = icmp slt i64 %126, %128
  br i1 %.not225, label %while.entry.outer, label %while.end

if.entry12:                                       ; preds = %Lexer_advance.exit108
  %129 = load i64, ptr %memberidx.i.i, align 4
  %130 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i130 = getelementptr inbounds %string, ptr %130, i64 0, i32 2
  %131 = load i64, ptr %memberidx2.i.i130, align 4
  %.not220 = icmp slt i64 %129, %131
  br i1 %.not220, label %ifend.i134, label %Lexer_advance.exit140

ifend.i134:                                       ; preds = %if.entry12
  %132 = load ptr, ptr %130, align 8
  %memberidx2.i132 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %132, i64 0, i32 2
  %133 = load ptr, ptr %memberidx2.i132, align 8
  %134 = add nsw i64 %129, 1
  store i64 %134, ptr %memberidx.i.i, align 4
  %135 = call i8 %133(ptr nonnull %130, i64 %134)
  store i8 %135, ptr %0, align 1
  %136 = icmp eq i8 %135, 10
  br i1 %136, label %if.entry6.i137, label %Lexer_advance.exit140.sink.split

if.entry6.i137:                                   ; preds = %ifend.i134
  store i64 0, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit140.sink.split

Lexer_advance.exit140.sink.split:                 ; preds = %ifend.i134, %if.entry6.i137
  %memberidx10.i104.sink275 = phi ptr [ %memberidx10.i104, %if.entry6.i137 ], [ %memberidx12.i106, %ifend.i134 ]
  %.ph = phi i8 [ 10, %if.entry6.i137 ], [ %135, %ifend.i134 ]
  %137 = load i64, ptr %memberidx10.i104.sink275, align 4
  %138 = add nsw i64 %137, 1
  store i64 %138, ptr %memberidx10.i104.sink275, align 4
  br label %Lexer_advance.exit140

Lexer_advance.exit140:                            ; preds = %Lexer_advance.exit140.sink.split, %if.entry12
  %139 = phi i8 [ 40, %if.entry12 ], [ %.ph, %Lexer_advance.exit140.sink.split ]
  %140 = icmp ne i8 %139, 41
  %141 = load i64, ptr %memberidx.i.i, align 4
  %142 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i143 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  %143 = load i64, ptr %memberidx2.i143, align 4
  %.not221 = icmp slt i64 %141, %143
  %144 = and i1 %140, %.not221
  br i1 %144, label %while.entry15, label %ifend14

else13:                                           ; preds = %Lexer_advance.exit108
  %145 = call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  %146 = load i64, ptr %memberidx.i109, align 4
  %147 = load i64, ptr %memberidx1.i110, align 4
  %.not.i146 = icmp slt i64 %146, %147
  br i1 %.not.i146, label %else13.Array_Token____sl__.exit_crit_edge, label %if.entry.i149

else13.Array_Token____sl__.exit_crit_edge:        ; preds = %else13
  %.pre248 = load ptr, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit

if.entry.i149:                                    ; preds = %else13
  %148 = shl nuw i64 %147, 1
  store i64 %148, ptr %memberidx1.i110, align 4
  %149 = load ptr, ptr %memberidx2.i111, align 8
  %150 = shl i64 %147, 4
  %151 = call ptr @realloc(ptr %149, i64 %150)
  store ptr %151, ptr %memberidx2.i111, align 8
  %.pre247 = load i64, ptr %memberidx.i109, align 4
  br label %Array_Token____sl__.exit

Array_Token____sl__.exit:                         ; preds = %else13.Array_Token____sl__.exit_crit_edge, %if.entry.i149
  %152 = phi ptr [ %.pre248, %else13.Array_Token____sl__.exit_crit_edge ], [ %151, %if.entry.i149 ]
  %153 = phi i64 [ %146, %else13.Array_Token____sl__.exit_crit_edge ], [ %.pre247, %if.entry.i149 ]
  %154 = add nsw i64 %153, 1
  store i64 %154, ptr %memberidx.i109, align 4
  %ptridx.i151 = getelementptr inbounds ptr, ptr %152, i64 %153
  store ptr %145, ptr %ptridx.i151, align 8
  %.pre252 = load i64, ptr %memberidx.i.i, align 4
  %.pre253 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i155.phi.trans.insert = getelementptr inbounds %string, ptr %.pre253, i64 0, i32 2
  %.pre254 = load i64, ptr %memberidx2.i.i155.phi.trans.insert, align 4
  br label %ifend14

ifend14:                                          ; preds = %Lexer_advance.exit211, %Lexer_advance.exit140, %Array_Token____sl__.exit
  %155 = phi i64 [ %143, %Lexer_advance.exit140 ], [ %.pre254, %Array_Token____sl__.exit ], [ %221, %Lexer_advance.exit211 ]
  %156 = phi ptr [ %142, %Lexer_advance.exit140 ], [ %.pre253, %Array_Token____sl__.exit ], [ %220, %Lexer_advance.exit211 ]
  %157 = phi i64 [ %141, %Lexer_advance.exit140 ], [ %.pre252, %Array_Token____sl__.exit ], [ %219, %Lexer_advance.exit211 ]
  %.not219 = icmp slt i64 %157, %155
  br i1 %.not219, label %ifend.i159, label %Lexer_advance.exit165

ifend.i159:                                       ; preds = %ifend14
  %158 = load ptr, ptr %156, align 8
  %memberidx2.i157 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %158, i64 0, i32 2
  %159 = load ptr, ptr %memberidx2.i157, align 8
  %160 = add nsw i64 %157, 1
  store i64 %160, ptr %memberidx.i.i, align 4
  %161 = call i8 %159(ptr nonnull %156, i64 %160)
  store i8 %161, ptr %0, align 1
  %162 = icmp eq i8 %161, 10
  br i1 %162, label %if.entry6.i162, label %Lexer_advance.exit165.sink.split

if.entry6.i162:                                   ; preds = %ifend.i159
  store i64 0, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit165.sink.split

Lexer_advance.exit165.sink.split:                 ; preds = %ifend.i159, %if.entry6.i162
  %memberidx10.i104.sink278 = phi ptr [ %memberidx10.i104, %if.entry6.i162 ], [ %memberidx12.i106, %ifend.i159 ]
  %163 = load i64, ptr %memberidx10.i104.sink278, align 4
  %164 = add nsw i64 %163, 1
  store i64 %164, ptr %memberidx10.i104.sink278, align 4
  br label %Lexer_advance.exit165

Lexer_advance.exit165:                            ; preds = %Lexer_advance.exit165.sink.split, %ifend14
  %165 = tail call ptr @malloc(i32 16)
  %166 = tail call ptr @malloc(i32 32)
  %167 = load i64, ptr %memberidx12.i106, align 4
  %168 = load i64, ptr %memberidx10.i104, align 4
  %memberidx2.i167 = getelementptr inbounds %FloRange, ptr %166, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %166, i8 0, i64 16, i1 false)
  store i64 %167, ptr %memberidx2.i167, align 4
  %memberidx3.i168 = getelementptr inbounds %FloRange, ptr %166, i64 0, i32 3
  store i64 %168, ptr %memberidx3.i168, align 4
  store i64 46, ptr %165, align 4
  %memberidx1.i169 = getelementptr inbounds %Token, ptr %165, i64 0, i32 1
  store ptr %166, ptr %memberidx1.i169, align 8
  %169 = load i64, ptr %memberidx.i109, align 4
  %170 = load i64, ptr %memberidx1.i110, align 4
  %.not.i172 = icmp slt i64 %169, %170
  br i1 %.not.i172, label %Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge, label %if.entry.i175

Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge: ; preds = %Lexer_advance.exit165
  %.pre256 = load ptr, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit179

if.entry.i175:                                    ; preds = %Lexer_advance.exit165
  %171 = shl nuw i64 %170, 1
  store i64 %171, ptr %memberidx1.i110, align 4
  %172 = load ptr, ptr %memberidx2.i111, align 8
  %173 = shl i64 %170, 4
  %174 = call ptr @realloc(ptr %172, i64 %173)
  store ptr %174, ptr %memberidx2.i111, align 8
  %.pre255 = load i64, ptr %memberidx.i109, align 4
  br label %Array_Token____sl__.exit179

Array_Token____sl__.exit179:                      ; preds = %Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge, %if.entry.i175
  %175 = phi ptr [ %.pre256, %Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge ], [ %174, %if.entry.i175 ]
  %176 = phi i64 [ %169, %Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge ], [ %.pre255, %if.entry.i175 ]
  %177 = add nsw i64 %176, 1
  store i64 %177, ptr %memberidx.i109, align 4
  %ptridx.i177 = getelementptr inbounds ptr, ptr %175, i64 %176
  store ptr %165, ptr %ptridx.i177, align 8
  %178 = load i64, ptr %memberidx.i, align 4
  %179 = load i64, ptr %memberidx1.i, align 4
  %.not.i182 = icmp slt i64 %178, %179
  br i1 %.not.i182, label %Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge, label %if.entry.i185

Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge: ; preds = %Array_Token____sl__.exit179
  %.pre258 = load ptr, ptr %memberidx2.i, align 8
  br label %Array_Array_Token_____sl__.exit

if.entry.i185:                                    ; preds = %Array_Token____sl__.exit179
  %180 = shl nuw i64 %179, 1
  store i64 %180, ptr %memberidx1.i, align 4
  %181 = load ptr, ptr %memberidx2.i, align 8
  %182 = shl i64 %179, 4
  %183 = call ptr @realloc(ptr %181, i64 %182)
  store ptr %183, ptr %memberidx2.i, align 8
  %.pre257 = load i64, ptr %memberidx.i, align 4
  br label %Array_Array_Token_____sl__.exit

Array_Array_Token_____sl__.exit:                  ; preds = %Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge, %if.entry.i185
  %184 = phi ptr [ %.pre258, %Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge ], [ %183, %if.entry.i185 ]
  %185 = phi i64 [ %178, %Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge ], [ %.pre257, %if.entry.i185 ]
  %186 = add nsw i64 %185, 1
  store i64 %186, ptr %memberidx.i, align 4
  %ptridx.i187 = getelementptr inbounds ptr, ptr %184, i64 %185
  store ptr %108, ptr %ptridx.i187, align 8
  %187 = load i8, ptr %0, align 1
  %.not241 = icmp eq i8 %187, 34
  br i1 %.not241, label %while.end, label %ifend

while.entry15:                                    ; preds = %Lexer_advance.exit140, %Lexer_advance.exit211
  %188 = phi i8 [ %215, %Lexer_advance.exit211 ], [ %139, %Lexer_advance.exit140 ]
  %189 = phi i64 [ %192, %Lexer_advance.exit211 ], [ 0, %Lexer_advance.exit140 ]
  switch i8 %188, label %ifend25 [
    i8 40, label %ifend21.thread
    i8 41, label %if.entry23
  ]

ifend21.thread:                                   ; preds = %while.entry15
  %190 = add nsw i64 %189, 1
  br label %ifend25

if.entry23:                                       ; preds = %while.entry15
  %191 = add nsw i64 %189, -1
  br label %ifend25

ifend25:                                          ; preds = %while.entry15, %ifend21.thread, %if.entry23
  %192 = phi i64 [ %189, %while.entry15 ], [ %190, %ifend21.thread ], [ %191, %if.entry23 ]
  %193 = call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  %194 = load i64, ptr %memberidx.i109, align 4
  %195 = load i64, ptr %memberidx1.i110, align 4
  %.not.i191 = icmp slt i64 %194, %195
  br i1 %.not.i191, label %ifend25.Array_Token____sl__.exit198_crit_edge, label %if.entry.i194

ifend25.Array_Token____sl__.exit198_crit_edge:    ; preds = %ifend25
  %.pre250 = load ptr, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit198

if.entry.i194:                                    ; preds = %ifend25
  %196 = shl nuw i64 %195, 1
  store i64 %196, ptr %memberidx1.i110, align 4
  %197 = load ptr, ptr %memberidx2.i111, align 8
  %198 = shl i64 %195, 4
  %199 = call ptr @realloc(ptr %197, i64 %198)
  store ptr %199, ptr %memberidx2.i111, align 8
  %.pre249 = load i64, ptr %memberidx.i109, align 4
  br label %Array_Token____sl__.exit198

Array_Token____sl__.exit198:                      ; preds = %ifend25.Array_Token____sl__.exit198_crit_edge, %if.entry.i194
  %200 = phi ptr [ %.pre250, %ifend25.Array_Token____sl__.exit198_crit_edge ], [ %199, %if.entry.i194 ]
  %201 = phi i64 [ %194, %ifend25.Array_Token____sl__.exit198_crit_edge ], [ %.pre249, %if.entry.i194 ]
  %202 = add nsw i64 %201, 1
  store i64 %202, ptr %memberidx.i109, align 4
  %ptridx.i196 = getelementptr inbounds ptr, ptr %200, i64 %201
  store ptr %193, ptr %ptridx.i196, align 8
  %203 = load i64, ptr %memberidx.i.i, align 4
  %204 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i201 = getelementptr inbounds %string, ptr %204, i64 0, i32 2
  %205 = load i64, ptr %memberidx2.i.i201, align 4
  %.not222 = icmp slt i64 %203, %205
  br i1 %.not222, label %ifend.i205, label %Array_Token____sl__.exit198.Lexer_advance.exit211_crit_edge

Array_Token____sl__.exit198.Lexer_advance.exit211_crit_edge: ; preds = %Array_Token____sl__.exit198
  %.pre251 = load i8, ptr %0, align 1
  br label %Lexer_advance.exit211

ifend.i205:                                       ; preds = %Array_Token____sl__.exit198
  %206 = load ptr, ptr %204, align 8
  %memberidx2.i203 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %206, i64 0, i32 2
  %207 = load ptr, ptr %memberidx2.i203, align 8
  %208 = add nsw i64 %203, 1
  store i64 %208, ptr %memberidx.i.i, align 4
  %209 = call i8 %207(ptr nonnull %204, i64 %208)
  store i8 %209, ptr %0, align 1
  %210 = icmp eq i8 %209, 10
  br i1 %210, label %if.entry6.i208, label %else7.i210

if.entry6.i208:                                   ; preds = %ifend.i205
  store i64 0, ptr %memberidx12.i106, align 4
  %211 = load i64, ptr %memberidx10.i104, align 4
  %212 = add nsw i64 %211, 1
  store i64 %212, ptr %memberidx10.i104, align 4
  br label %Lexer_advance.exit211

else7.i210:                                       ; preds = %ifend.i205
  %213 = load i64, ptr %memberidx12.i106, align 4
  %214 = add nsw i64 %213, 1
  store i64 %214, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit211

Lexer_advance.exit211:                            ; preds = %Array_Token____sl__.exit198.Lexer_advance.exit211_crit_edge, %if.entry6.i208, %else7.i210
  %215 = phi i8 [ %.pre251, %Array_Token____sl__.exit198.Lexer_advance.exit211_crit_edge ], [ 10, %if.entry6.i208 ], [ %209, %else7.i210 ]
  %216 = icmp ne i8 %215, 41
  %217 = icmp ne i64 %192, 0
  %218 = or i1 %216, %217
  %219 = load i64, ptr %memberidx.i.i, align 4
  %220 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i214 = getelementptr inbounds %string, ptr %220, i64 0, i32 2
  %221 = load i64, ptr %memberidx2.i214, align 4
  %.not223 = icmp slt i64 %219, %221
  %222 = and i1 %218, %.not223
  br i1 %222, label %while.entry15, label %ifend14
}

define internal fastcc ptr @Lexer_base_int_token(ptr nocapture %0, i64 %1) unnamed_addr {
  %memberidx.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2.i.i, align 4
  %.not = icmp slt i64 %3, %5
  br i1 %.not, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %2
  %6 = load ptr, ptr %4, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i, align 8
  %8 = add nsw i64 %3, 1
  store i64 %8, ptr %memberidx.i.i, align 4
  %9 = tail call i8 %7(ptr nonnull %4, i64 %8)
  store i8 %9, ptr %0, align 1
  %10 = icmp eq i8 %9, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %10, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink67 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %11 = load i64, ptr %memberidx10.i.sink67, align 4
  %12 = add nsw i64 %11, 1
  store i64 %12, ptr %memberidx10.i.sink67, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %2
  %13 = load i64, ptr %memberidx.i.i, align 4
  %14 = add nsw i64 %13, 1
  %15 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i15 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx2.i15, align 4
  %17 = icmp slt i64 %14, %16
  br i1 %17, label %if.entry.i, label %Lexer_peek.exit

if.entry.i:                                       ; preds = %Lexer_advance.exit
  %18 = load ptr, ptr %15, align 8
  %memberidx4.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 2
  %19 = load ptr, ptr %memberidx4.i, align 8
  %20 = tail call i8 %19(ptr nonnull %15, i64 %14)
  br label %Lexer_peek.exit

Lexer_peek.exit:                                  ; preds = %Lexer_advance.exit, %if.entry.i
  %common.ret.op.i = phi i8 [ %20, %if.entry.i ], [ 0, %Lexer_advance.exit ]
  %21 = add i8 %common.ret.op.i, -97
  %22 = icmp ult i8 %21, 26
  %23 = add i8 %common.ret.op.i, -32
  %common.ret.op.i16 = select i1 %22, i8 %23, i8 %common.ret.op.i
  %24 = icmp slt i64 %1, 10
  %25 = icmp sgt i8 %common.ret.op.i16, 47
  %26 = sext i8 %common.ret.op.i16 to i64
  %27 = add nsw i64 %1, 48
  %28 = icmp sge i64 %27, %26
  %29 = and i1 %25, %28
  br i1 %24, label %in_base_range.exit34, label %ifend.i33

ifend.i33:                                        ; preds = %Lexer_peek.exit
  %30 = icmp sgt i8 %common.ret.op.i16, 64
  %31 = add nuw nsw i64 %1, 65
  %32 = icmp sge i64 %31, %26
  %33 = and i1 %30, %32
  %34 = or i1 %29, %33
  br label %in_base_range.exit34

in_base_range.exit34:                             ; preds = %Lexer_peek.exit, %ifend.i33
  %common.ret.op.i31 = phi i1 [ %34, %ifend.i33 ], [ %29, %Lexer_peek.exit ]
  %35 = load i64, ptr %memberidx.i.i, align 4
  %36 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i50 = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx2.i50, align 4
  %.not60 = icmp slt i64 %35, %37
  %38 = and i1 %common.ret.op.i31, %.not60
  br i1 %38, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %in_base_range.exit34
  %memberidx12.i45 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i43 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %39 = add nsw i64 %1, 48
  %40 = add nuw nsw i64 %1, 65
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %in_base_range.exit
  %41 = phi i64 [ %86, %in_base_range.exit ], [ %37, %while.entry.preheader ]
  %42 = phi ptr [ %85, %in_base_range.exit ], [ %36, %while.entry.preheader ]
  %43 = phi i64 [ %84, %in_base_range.exit ], [ %35, %while.entry.preheader ]
  %length.0 = phi i64 [ %48, %in_base_range.exit ], [ 3, %while.entry.preheader ]
  %value.0 = phi i64 [ %47, %in_base_range.exit ], [ 0, %while.entry.preheader ]
  %current_char.0 = phi i8 [ %common.ret.op.i23, %in_base_range.exit ], [ %common.ret.op.i16, %while.entry.preheader ]
  %44 = mul nuw i64 %value.0, %1
  %45 = icmp sgt i8 %current_char.0, 64
  %spec.select.v = select i1 %45, i8 -55, i8 -48
  %spec.select = add i8 %spec.select.v, %current_char.0
  %46 = zext i8 %spec.select to i64
  %47 = add nuw i64 %44, %46
  %48 = add nuw nsw i64 %length.0, 1
  %.not61 = icmp slt i64 %43, %41
  br i1 %.not61, label %ifend.i41, label %Lexer_advance.exit47

while.end:                                        ; preds = %in_base_range.exit, %in_base_range.exit34
  %length.1 = phi i64 [ 3, %in_base_range.exit34 ], [ %48, %in_base_range.exit ]
  %value.1 = phi i64 [ 0, %in_base_range.exit34 ], [ %47, %in_base_range.exit ]
  %49 = tail call ptr @malloc(i32 24)
  %50 = tail call ptr @malloc(i32 32)
  %51 = load i64, ptr %memberidx.i.i, align 4
  %52 = sub i64 1, %length.1
  %53 = add i64 %52, %51
  %54 = add nsw i64 %51, 1
  %memberidx2.i54 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %55 = load i64, ptr %memberidx2.i54, align 4
  %56 = sub nuw i64 %55, %length.1
  %memberidx3.i55 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %57 = load i64, ptr %memberidx3.i55, align 4
  store i64 %53, ptr %50, align 4
  %memberidx1.i.i56 = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 1
  store i64 %54, ptr %memberidx1.i.i56, align 4
  %memberidx2.i.i57 = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 2
  store i64 %56, ptr %memberidx2.i.i57, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 3
  store i64 %57, ptr %memberidx3.i.i, align 4
  store i64 31, ptr %49, align 4
  %memberidx1.i.i51 = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  store ptr %50, ptr %memberidx1.i.i51, align 8
  %memberidx.i52 = getelementptr inbounds %IntToken, ptr %49, i64 0, i32 2
  store i64 %value.1, ptr %memberidx.i52, align 4
  ret ptr %49

ifend.i41:                                        ; preds = %while.entry
  %58 = load ptr, ptr %42, align 8
  %memberidx2.i39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i64 0, i32 2
  %59 = load ptr, ptr %memberidx2.i39, align 8
  %60 = add nsw i64 %43, 1
  store i64 %60, ptr %memberidx.i.i, align 4
  %61 = tail call i8 %59(ptr nonnull %42, i64 %60)
  store i8 %61, ptr %0, align 1
  %62 = icmp eq i8 %61, 10
  br i1 %62, label %if.entry6.i44, label %Lexer_advance.exit47.sink.split

if.entry6.i44:                                    ; preds = %ifend.i41
  store i64 0, ptr %memberidx12.i45, align 4
  br label %Lexer_advance.exit47.sink.split

Lexer_advance.exit47.sink.split:                  ; preds = %ifend.i41, %if.entry6.i44
  %memberidx10.i43.sink69 = phi ptr [ %memberidx10.i43, %if.entry6.i44 ], [ %memberidx12.i45, %ifend.i41 ]
  %63 = load i64, ptr %memberidx10.i43.sink69, align 4
  %64 = add nsw i64 %63, 1
  store i64 %64, ptr %memberidx10.i43.sink69, align 4
  br label %Lexer_advance.exit47

Lexer_advance.exit47:                             ; preds = %Lexer_advance.exit47.sink.split, %while.entry
  %65 = load i64, ptr %memberidx.i.i, align 4
  %66 = add nsw i64 %65, 1
  %67 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i26 = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  %68 = load i64, ptr %memberidx2.i26, align 4
  %69 = icmp slt i64 %66, %68
  br i1 %69, label %if.entry.i29, label %Lexer_peek.exit30

if.entry.i29:                                     ; preds = %Lexer_advance.exit47
  %70 = load ptr, ptr %67, align 8
  %memberidx4.i28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i64 0, i32 2
  %71 = load ptr, ptr %memberidx4.i28, align 8
  %72 = tail call i8 %71(ptr nonnull %67, i64 %66)
  br label %Lexer_peek.exit30

Lexer_peek.exit30:                                ; preds = %Lexer_advance.exit47, %if.entry.i29
  %common.ret.op.i27 = phi i8 [ %72, %if.entry.i29 ], [ 0, %Lexer_advance.exit47 ]
  %73 = add i8 %common.ret.op.i27, -97
  %74 = icmp ult i8 %73, 26
  %75 = add i8 %common.ret.op.i27, -32
  %common.ret.op.i23 = select i1 %74, i8 %75, i8 %common.ret.op.i27
  %76 = icmp sgt i8 %common.ret.op.i23, 47
  %77 = sext i8 %common.ret.op.i23 to i64
  %78 = icmp sge i64 %39, %77
  %79 = and i1 %76, %78
  br i1 %24, label %in_base_range.exit, label %ifend.i22

ifend.i22:                                        ; preds = %Lexer_peek.exit30
  %80 = icmp sgt i8 %common.ret.op.i23, 64
  %81 = icmp sge i64 %40, %77
  %82 = and i1 %80, %81
  %83 = or i1 %79, %82
  br label %in_base_range.exit

in_base_range.exit:                               ; preds = %Lexer_peek.exit30, %ifend.i22
  %common.ret.op.i20 = phi i1 [ %83, %ifend.i22 ], [ %79, %Lexer_peek.exit30 ]
  %84 = load i64, ptr %memberidx.i.i, align 4
  %85 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i19 = getelementptr inbounds %string, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx2.i19, align 4
  %.not62 = icmp slt i64 %84, %86
  %87 = and i1 %common.ret.op.i20, %.not62
  br i1 %87, label %while.entry, label %while.end
}

define internal fastcc ptr @Lexer_lex_token(ptr %0) unnamed_addr {
  %2 = load i8, ptr %0, align 1
  switch i8 %2, label %ifend [
    i8 32, label %if.entry
    i8 9, label %if.entry
  ]

common.ret:                                       ; preds = %end.i, %if.entry6.i957, %if.entry2.i, %if.entry.i954, %ifend5.i, %ifend.i940, %ifend6.i796, %Lexer_advance.exit84.i788, %ifend3.i767, %Lexer_advance.exit.i730, %ifend6.i701, %Lexer_advance.exit84.i693, %ifend3.i672, %Lexer_advance.exit.i635, %ifend.i606, %Lexer_advance.exit.i598, %ifend.i569, %Lexer_advance.exit.i561, %ifend.i444, %Lexer_advance.exit.i436, %ifend.i360, %Lexer_advance.exit.i352, %ifend.i323, %Lexer_advance.exit.i322, %ifend6.i301, %Lexer_advance.exit84.i293, %ifend3.i278, %Lexer_advance.exit.i254, %ifend6.i, %Lexer_advance.exit84.i, %Lexer_advance.exit50.i, %Lexer_advance.exit.i222, %ifend3.i, %Lexer_advance.exit44.i, %Lexer_advance.exit.i, %Array_FloError____sl__.exit, %if.entry87, %Lexer_dot_token.exit, %if.entry69, %if.entry66, %Lexer_char_token.exit, %if.entry60, %if.entry57, %if.entry54, %if.entry51, %if.entry48, %if.entry45, %if.entry42, %Lexer_advance.exit404, %if.entry18, %if.entry15, %if.entry12, %if.entry6, %Lexer_advance.exit
  %common.ret.op = phi ptr [ %13, %Lexer_advance.exit ], [ %253, %if.entry6 ], [ %366, %if.entry12 ], [ %373, %if.entry15 ], [ %380, %if.entry18 ], [ %812, %Lexer_advance.exit404 ], [ %844, %if.entry42 ], [ %851, %if.entry45 ], [ %858, %if.entry48 ], [ %865, %if.entry51 ], [ %872, %if.entry54 ], [ %879, %if.entry57 ], [ %886, %if.entry60 ], [ %929, %Lexer_char_token.exit ], [ %938, %if.entry66 ], [ %945, %if.entry69 ], [ %1220, %Lexer_dot_token.exit ], [ %1229, %if.entry87 ], [ null, %Array_FloError____sl__.exit ], [ %405, %Lexer_advance.exit.i ], [ %437, %ifend3.i ], [ %429, %Lexer_advance.exit44.i ], [ %462, %Lexer_advance.exit.i222 ], [ %518, %ifend6.i ], [ %486, %Lexer_advance.exit50.i ], [ %510, %Lexer_advance.exit84.i ], [ %544, %Lexer_advance.exit.i254 ], [ %576, %ifend3.i278 ], [ %593, %Lexer_advance.exit84.i293 ], [ %601, %ifend6.i301 ], [ %627, %Lexer_advance.exit.i322 ], [ %635, %ifend.i323 ], [ %660, %Lexer_advance.exit.i352 ], [ %668, %ifend.i360 ], [ %829, %Lexer_advance.exit.i436 ], [ %837, %ifend.i444 ], [ %970, %Lexer_advance.exit.i561 ], [ %978, %ifend.i569 ], [ %1003, %Lexer_advance.exit.i598 ], [ %1011, %ifend.i606 ], [ %1036, %Lexer_advance.exit.i635 ], [ %1068, %ifend3.i672 ], [ %1085, %Lexer_advance.exit84.i693 ], [ %1093, %ifend6.i701 ], [ %1119, %Lexer_advance.exit.i730 ], [ %1151, %ifend3.i767 ], [ %1168, %Lexer_advance.exit84.i788 ], [ %1176, %ifend6.i796 ], [ %231, %ifend.i940 ], [ %235, %ifend5.i ], [ %266, %if.entry.i954 ], [ %277, %if.entry2.i ], [ %288, %if.entry6.i957 ], [ %329, %end.i ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1, %1
  %memberidx.i.i166 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx.i.i166, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i167 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2.i.i167, align 4
  %.not918 = icmp slt i64 %3, %5
  br i1 %.not918, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %if.entry
  %6 = load ptr, ptr %4, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i, align 8
  %8 = add nsw i64 %3, 1
  store i64 %8, ptr %memberidx.i.i166, align 4
  %9 = tail call i8 %7(ptr nonnull %4, i64 %8)
  store i8 %9, ptr %0, align 1
  %10 = icmp eq i8 %9, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %10, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink1049 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %11 = load i64, ptr %memberidx10.i.sink1049, align 4
  %12 = add nsw i64 %11, 1
  store i64 %12, ptr %memberidx10.i.sink1049, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %if.entry
  %13 = tail call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  br label %common.ret

ifend:                                            ; preds = %1
  %14 = and i8 %2, -33
  %15 = add i8 %14, -65
  %16 = icmp ult i8 %15, 26
  %17 = icmp eq i8 %2, 95
  %18 = or i1 %17, %16
  br i1 %18, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %memberidx.i928 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %19 = load i64, ptr %memberidx.i928, align 4
  %20 = add nsw i64 %19, 1
  %memberidx1.i.i929 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %21 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i.i930 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i.i930, align 4
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %if.entry.i.i932, label %Lexer_peek.exit.i

if.entry.i.i932:                                  ; preds = %if.entry3
  %24 = load ptr, ptr %21, align 8
  %memberidx4.i.i931 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i64 0, i32 2
  %25 = load ptr, ptr %memberidx4.i.i931, align 8
  %26 = tail call i8 %25(ptr nonnull %21, i64 %20)
  %.pre.i = load i64, ptr %memberidx.i928, align 4
  %.pre128.i = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i28.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre128.i, i64 0, i32 2
  %.pre129.i = load i64, ptr %memberidx2.i28.phi.trans.insert.i, align 4
  %.pre136.i = add nsw i64 %.pre.i, 1
  br label %Lexer_peek.exit.i

Lexer_peek.exit.i:                                ; preds = %if.entry.i.i932, %if.entry3
  %.pre-phi.i = phi i64 [ %20, %if.entry3 ], [ %.pre136.i, %if.entry.i.i932 ]
  %27 = phi i64 [ %22, %if.entry3 ], [ %.pre129.i, %if.entry.i.i932 ]
  %28 = phi ptr [ %21, %if.entry3 ], [ %.pre128.i, %if.entry.i.i932 ]
  %29 = phi i64 [ %19, %if.entry3 ], [ %.pre.i, %if.entry.i.i932 ]
  %30 = icmp slt i64 %.pre-phi.i, %27
  br i1 %30, label %if.entry.i31.i, label %Lexer_peek.exit32.i

if.entry.i31.i:                                   ; preds = %Lexer_peek.exit.i
  %31 = load ptr, ptr %28, align 8
  %memberidx4.i30.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 2
  %32 = load ptr, ptr %memberidx4.i30.i, align 8
  %33 = tail call i8 %32(ptr nonnull %28, i64 %.pre-phi.i)
  %.pre130.i = load i64, ptr %memberidx.i928, align 4
  %.pre131.i = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i50.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre131.i, i64 0, i32 2
  %.pre132.i = load i64, ptr %memberidx2.i50.phi.trans.insert.i, align 4
  br label %Lexer_peek.exit32.i

Lexer_peek.exit32.i:                              ; preds = %if.entry.i31.i, %Lexer_peek.exit.i
  %34 = phi i64 [ %.pre132.i, %if.entry.i31.i ], [ %27, %Lexer_peek.exit.i ]
  %35 = phi ptr [ %.pre131.i, %if.entry.i31.i ], [ %28, %Lexer_peek.exit.i ]
  %36 = phi i64 [ %.pre130.i, %if.entry.i31.i ], [ %29, %Lexer_peek.exit.i ]
  %common.ret.op.i29.i = phi i8 [ %33, %if.entry.i31.i ], [ 0, %Lexer_peek.exit.i ]
  %37 = and i8 %common.ret.op.i29.i, -33
  %38 = add i8 %37, -65
  %39 = icmp ult i8 %38, 26
  %40 = icmp eq i8 %common.ret.op.i29.i, 95
  %41 = or i1 %40, %39
  %42 = add i8 %common.ret.op.i29.i, -48
  %43 = icmp ult i8 %42, 10
  %44 = or i1 %43, %41
  %.not120.i = icmp slt i64 %36, %34
  %45 = and i1 %.not120.i, %44
  br i1 %45, label %while.entry.preheader.i, label %while.end.i937

while.entry.preheader.i:                          ; preds = %Lexer_peek.exit32.i
  %memberidx12.i71.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i69.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.i934

while.entry.i934:                                 ; preds = %Lexer_peek.exit80.i, %while.entry.preheader.i
  %46 = phi ptr [ %65, %Lexer_peek.exit80.i ], [ %35, %while.entry.preheader.i ]
  %47 = phi i64 [ %66, %Lexer_peek.exit80.i ], [ %36, %while.entry.preheader.i ]
  %48 = phi i64 [ %67, %Lexer_peek.exit80.i ], [ %34, %while.entry.preheader.i ]
  %length.0.i933 = phi i64 [ %49, %Lexer_peek.exit80.i ], [ 1, %while.entry.preheader.i ]
  %49 = add nuw nsw i64 %length.0.i933, 1
  %.not123.i = icmp slt i64 %47, %48
  br i1 %.not123.i, label %ifend.i67.i, label %Lexer_advance.exit73.i

ifend.i67.i:                                      ; preds = %while.entry.i934
  %50 = load ptr, ptr %46, align 8
  %memberidx2.i65.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i64 0, i32 2
  %51 = load ptr, ptr %memberidx2.i65.i, align 8
  %52 = add nsw i64 %47, 1
  store i64 %52, ptr %memberidx.i928, align 4
  %53 = tail call i8 %51(ptr nonnull %46, i64 %52)
  store i8 %53, ptr %0, align 1
  %54 = icmp eq i8 %53, 10
  br i1 %54, label %if.entry6.i70.i, label %Lexer_advance.exit73.sink.split.i

if.entry6.i70.i:                                  ; preds = %ifend.i67.i
  store i64 0, ptr %memberidx12.i71.i, align 4
  br label %Lexer_advance.exit73.sink.split.i

Lexer_advance.exit73.sink.split.i:                ; preds = %if.entry6.i70.i, %ifend.i67.i
  %memberidx10.i69.sink139.i = phi ptr [ %memberidx10.i69.i, %if.entry6.i70.i ], [ %memberidx12.i71.i, %ifend.i67.i ]
  %55 = load i64, ptr %memberidx10.i69.sink139.i, align 4
  %56 = add nsw i64 %55, 1
  store i64 %56, ptr %memberidx10.i69.sink139.i, align 4
  %.pre1023 = load i64, ptr %memberidx.i928, align 4
  %.pre1024 = load ptr, ptr %memberidx1.i.i929, align 8
  br label %Lexer_advance.exit73.i

Lexer_advance.exit73.i:                           ; preds = %Lexer_advance.exit73.sink.split.i, %while.entry.i934
  %57 = phi ptr [ %.pre1024, %Lexer_advance.exit73.sink.split.i ], [ %46, %while.entry.i934 ]
  %58 = phi i64 [ %.pre1023, %Lexer_advance.exit73.sink.split.i ], [ %47, %while.entry.i934 ]
  %59 = add nsw i64 %58, 1
  %memberidx2.i76.i935 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  %60 = load i64, ptr %memberidx2.i76.i935, align 4
  %61 = icmp slt i64 %59, %60
  br i1 %61, label %if.entry.i79.i, label %Lexer_peek.exit80.i

if.entry.i79.i:                                   ; preds = %Lexer_advance.exit73.i
  %62 = load ptr, ptr %57, align 8
  %memberidx4.i78.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 2
  %63 = load ptr, ptr %memberidx4.i78.i, align 8
  %64 = tail call i8 %63(ptr nonnull %57, i64 %59)
  %.pre133.i = load i64, ptr %memberidx.i928, align 4
  %.pre134.i = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i88.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre134.i, i64 0, i32 2
  %.pre135.i = load i64, ptr %memberidx2.i88.phi.trans.insert.i, align 4
  br label %Lexer_peek.exit80.i

Lexer_peek.exit80.i:                              ; preds = %if.entry.i79.i, %Lexer_advance.exit73.i
  %65 = phi ptr [ %.pre134.i, %if.entry.i79.i ], [ %57, %Lexer_advance.exit73.i ]
  %66 = phi i64 [ %.pre133.i, %if.entry.i79.i ], [ %58, %Lexer_advance.exit73.i ]
  %67 = phi i64 [ %.pre135.i, %if.entry.i79.i ], [ %60, %Lexer_advance.exit73.i ]
  %common.ret.op.i77.i = phi i8 [ %64, %if.entry.i79.i ], [ 0, %Lexer_advance.exit73.i ]
  %68 = and i8 %common.ret.op.i77.i, -33
  %69 = add i8 %68, -65
  %70 = icmp ult i8 %69, 26
  %71 = icmp eq i8 %common.ret.op.i77.i, 95
  %72 = or i1 %71, %70
  %73 = add i8 %common.ret.op.i77.i, -48
  %74 = icmp ult i8 %73, 10
  %75 = or i1 %74, %72
  %.not124.i = icmp slt i64 %66, %67
  %76 = and i1 %.not124.i, %75
  br i1 %76, label %while.entry.i934, label %while.end.i937

while.end.i937:                                   ; preds = %Lexer_peek.exit80.i, %Lexer_peek.exit32.i
  %77 = phi ptr [ %35, %Lexer_peek.exit32.i ], [ %65, %Lexer_peek.exit80.i ]
  %length.1.i = phi i64 [ 1, %Lexer_peek.exit32.i ], [ %49, %Lexer_peek.exit80.i ]
  %78 = load ptr, ptr %77, align 8
  %memberidx2.i936 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %78, i64 0, i32 1
  %79 = load ptr, ptr %memberidx2.i936, align 8
  %80 = tail call ptr %79(ptr nonnull %77, i64 %19, i64 %length.1.i)
  %81 = tail call ptr @malloc(i32 32)
  %82 = load i64, ptr %memberidx.i928, align 4
  %83 = sub i64 1, %length.1.i
  %84 = add i64 %83, %82
  %85 = add nsw i64 %82, 1
  %memberidx2.i90.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %86 = load i64, ptr %memberidx2.i90.i, align 4
  %87 = sub nuw i64 %86, %length.1.i
  %memberidx3.i91.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %88 = load i64, ptr %memberidx3.i91.i, align 4
  store i64 %84, ptr %81, align 4
  %memberidx1.i.i92.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 1
  store i64 %85, ptr %memberidx1.i.i92.i, align 4
  %memberidx2.i.i93.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 2
  store i64 %87, ptr %memberidx2.i.i93.i, align 4
  %memberidx3.i.i94.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 3
  store i64 %88, ptr %memberidx3.i.i94.i, align 4
  %89 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %89, ptr noundef nonnull align 8 dereferenceable(3) @30, i64 3, i1 false)
  %90 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i.i.i, align 4
  %memberidx.i.i81.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  %91 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i.i.i = icmp eq i64 %91, 3
  br i1 %.not.i.i.i, label %ifend.i.i.i, label %ifend.i85.i

ifend.i.i.i:                                      ; preds = %while.end.i937
  %memberidx2.i.i83.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %92 = load ptr, ptr %memberidx2.i.i83.i, align 8
  %93 = tail call i64 @memcmp(ptr %92, ptr nonnull %89, i64 3)
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %if.entry.i939, label %ifend.i85.i

ifend.i85.i:                                      ; preds = %ifend.i.i.i, %while.end.i937
  %95 = tail call ptr @malloc(i32 2)
  store i16 29295, ptr %95, align 8
  %96 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %96, align 8
  %memberidx.i.i85.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 1
  store ptr %95, ptr %memberidx.i.i85.i.i, align 8
  %memberidx1.i.i86.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i86.i.i, align 4
  %memberidx2.i.i87.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i87.i.i, align 4
  %97 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i90.i.i = icmp eq i64 %97, 2
  br i1 %.not.i90.i.i, label %ifend.i94.i.i, label %ifend3.i.i

ifend.i94.i.i:                                    ; preds = %ifend.i85.i
  %memberidx2.i92.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %98 = load ptr, ptr %memberidx2.i92.i.i, align 8
  %99 = tail call i64 @memcmp(ptr %98, ptr nonnull %95, i64 2)
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %if.entry.i939, label %ifend3.i.i

ifend3.i.i:                                       ; preds = %ifend.i94.i.i, %ifend.i85.i
  %101 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %101, ptr noundef nonnull align 8 dereferenceable(5) @31, i64 5, i1 false)
  %102 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i96.i.i = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %101, ptr %memberidx.i.i96.i.i, align 8
  %memberidx1.i.i97.i.i = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i97.i.i, align 4
  %memberidx2.i.i98.i.i = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i98.i.i, align 4
  %103 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i101.i.i = icmp eq i64 %103, 5
  br i1 %.not.i101.i.i, label %ifend.i105.i.i, label %ifend6.i.i

ifend.i105.i.i:                                   ; preds = %ifend3.i.i
  %memberidx2.i103.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %104 = load ptr, ptr %memberidx2.i103.i.i, align 8
  %105 = tail call i64 @memcmp(ptr %104, ptr nonnull %101, i64 5)
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %if.entry.i939, label %ifend6.i.i

ifend6.i.i:                                       ; preds = %ifend.i105.i.i, %ifend3.i.i
  %107 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %107, ptr noundef nonnull align 8 dereferenceable(3) @32, i64 3, i1 false)
  %108 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %108, align 8
  %memberidx.i.i107.i.i = getelementptr inbounds %string, ptr %108, i64 0, i32 1
  store ptr %107, ptr %memberidx.i.i107.i.i, align 8
  %memberidx1.i.i108.i.i = getelementptr inbounds %string, ptr %108, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i108.i.i, align 4
  %memberidx2.i.i109.i.i = getelementptr inbounds %string, ptr %108, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i109.i.i, align 4
  %109 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i112.i.i = icmp eq i64 %109, 3
  br i1 %.not.i112.i.i, label %ifend.i116.i.i, label %ifend9.i.i

ifend.i116.i.i:                                   ; preds = %ifend6.i.i
  %memberidx2.i114.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i114.i.i, align 8
  %111 = tail call i64 @memcmp(ptr %110, ptr nonnull %107, i64 3)
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %if.entry.i939, label %ifend9.i.i

ifend9.i.i:                                       ; preds = %ifend.i116.i.i, %ifend6.i.i
  %113 = tail call ptr @malloc(i32 2)
  store i16 26217, ptr %113, align 8
  %114 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %114, align 8
  %memberidx.i.i118.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 1
  store ptr %113, ptr %memberidx.i.i118.i.i, align 8
  %memberidx1.i.i119.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i119.i.i, align 4
  %memberidx2.i.i120.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i120.i.i, align 4
  %115 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i123.i.i = icmp eq i64 %115, 2
  br i1 %.not.i123.i.i, label %ifend.i127.i.i, label %ifend12.i.i

ifend.i127.i.i:                                   ; preds = %ifend9.i.i
  %memberidx2.i125.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %116 = load ptr, ptr %memberidx2.i125.i.i, align 8
  %117 = tail call i64 @memcmp(ptr %116, ptr nonnull %113, i64 2)
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %if.entry.i939, label %ifend12.i.i

ifend12.i.i:                                      ; preds = %ifend.i127.i.i, %ifend9.i.i
  %119 = tail call ptr @malloc(i32 4)
  store i32 1702063205, ptr %119, align 8
  %120 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %120, align 8
  %memberidx.i.i129.i.i = getelementptr inbounds %string, ptr %120, i64 0, i32 1
  store ptr %119, ptr %memberidx.i.i129.i.i, align 8
  %memberidx1.i.i130.i.i = getelementptr inbounds %string, ptr %120, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i130.i.i, align 4
  %memberidx2.i.i131.i.i = getelementptr inbounds %string, ptr %120, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i131.i.i, align 4
  %121 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i134.i.i = icmp eq i64 %121, 4
  br i1 %.not.i134.i.i, label %ifend.i138.i.i, label %ifend15.i.i

ifend.i138.i.i:                                   ; preds = %ifend12.i.i
  %memberidx2.i136.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %122 = load ptr, ptr %memberidx2.i136.i.i, align 8
  %123 = tail call i64 @memcmp(ptr %122, ptr nonnull %119, i64 4)
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %if.entry.i939, label %ifend15.i.i

ifend15.i.i:                                      ; preds = %ifend.i138.i.i, %ifend12.i.i
  %125 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %125, ptr noundef nonnull align 8 dereferenceable(3) @34, i64 3, i1 false)
  %126 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %126, align 8
  %memberidx.i.i140.i.i = getelementptr inbounds %string, ptr %126, i64 0, i32 1
  store ptr %125, ptr %memberidx.i.i140.i.i, align 8
  %memberidx1.i.i141.i.i = getelementptr inbounds %string, ptr %126, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i141.i.i, align 4
  %memberidx2.i.i142.i.i = getelementptr inbounds %string, ptr %126, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i142.i.i, align 4
  %127 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i145.i.i = icmp eq i64 %127, 3
  br i1 %.not.i145.i.i, label %ifend.i149.i.i, label %ifend18.i.i

ifend.i149.i.i:                                   ; preds = %ifend15.i.i
  %memberidx2.i147.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %128 = load ptr, ptr %memberidx2.i147.i.i, align 8
  %129 = tail call i64 @memcmp(ptr %128, ptr nonnull %125, i64 3)
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %if.entry.i939, label %ifend18.i.i

ifend18.i.i:                                      ; preds = %ifend.i149.i.i, %ifend15.i.i
  %131 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %131, ptr noundef nonnull align 8 dereferenceable(5) @35, i64 5, i1 false)
  %132 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %132, align 8
  %memberidx.i.i151.i.i = getelementptr inbounds %string, ptr %132, i64 0, i32 1
  store ptr %131, ptr %memberidx.i.i151.i.i, align 8
  %memberidx1.i.i152.i.i = getelementptr inbounds %string, ptr %132, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i152.i.i, align 4
  %memberidx2.i.i153.i.i = getelementptr inbounds %string, ptr %132, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i153.i.i, align 4
  %133 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i156.i.i = icmp eq i64 %133, 5
  br i1 %.not.i156.i.i, label %ifend.i160.i.i, label %ifend21.i.i

ifend.i160.i.i:                                   ; preds = %ifend18.i.i
  %memberidx2.i158.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %134 = load ptr, ptr %memberidx2.i158.i.i, align 8
  %135 = tail call i64 @memcmp(ptr %134, ptr nonnull %131, i64 5)
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %if.entry.i939, label %ifend21.i.i

ifend21.i.i:                                      ; preds = %ifend.i160.i.i, %ifend18.i.i
  %137 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %137, ptr noundef nonnull align 8 dereferenceable(3) @36, i64 3, i1 false)
  %138 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %138, align 8
  %memberidx.i.i162.i.i = getelementptr inbounds %string, ptr %138, i64 0, i32 1
  store ptr %137, ptr %memberidx.i.i162.i.i, align 8
  %memberidx1.i.i163.i.i = getelementptr inbounds %string, ptr %138, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i163.i.i, align 4
  %memberidx2.i.i164.i.i = getelementptr inbounds %string, ptr %138, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i164.i.i, align 4
  %139 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i167.i.i = icmp eq i64 %139, 3
  br i1 %.not.i167.i.i, label %ifend.i171.i.i, label %ifend24.i.i

ifend.i171.i.i:                                   ; preds = %ifend21.i.i
  %memberidx2.i169.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %140 = load ptr, ptr %memberidx2.i169.i.i, align 8
  %141 = tail call i64 @memcmp(ptr %140, ptr nonnull %137, i64 3)
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %if.entry.i939, label %ifend24.i.i

ifend24.i.i:                                      ; preds = %ifend.i171.i.i, %ifend21.i.i
  %143 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %143, ptr noundef nonnull align 8 dereferenceable(5) @37, i64 5, i1 false)
  %144 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %144, align 8
  %memberidx.i.i173.i.i = getelementptr inbounds %string, ptr %144, i64 0, i32 1
  store ptr %143, ptr %memberidx.i.i173.i.i, align 8
  %memberidx1.i.i174.i.i = getelementptr inbounds %string, ptr %144, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i174.i.i, align 4
  %memberidx2.i.i175.i.i = getelementptr inbounds %string, ptr %144, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i175.i.i, align 4
  %145 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i178.i.i = icmp eq i64 %145, 5
  br i1 %.not.i178.i.i, label %ifend.i182.i.i, label %ifend27.i.i938

ifend.i182.i.i:                                   ; preds = %ifend24.i.i
  %memberidx2.i180.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %146 = load ptr, ptr %memberidx2.i180.i.i, align 8
  %147 = tail call i64 @memcmp(ptr %146, ptr nonnull %143, i64 5)
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %if.entry.i939, label %ifend27.i.i938

ifend27.i.i938:                                   ; preds = %ifend.i182.i.i, %ifend24.i.i
  %149 = tail call ptr @malloc(i32 8)
  store i64 7310870969309884259, ptr %149, align 8
  %150 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %150, align 8
  %memberidx.i.i184.i.i = getelementptr inbounds %string, ptr %150, i64 0, i32 1
  store ptr %149, ptr %memberidx.i.i184.i.i, align 8
  %memberidx1.i.i185.i.i = getelementptr inbounds %string, ptr %150, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i185.i.i, align 4
  %memberidx2.i.i186.i.i = getelementptr inbounds %string, ptr %150, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i186.i.i, align 4
  %151 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i189.i.i = icmp eq i64 %151, 8
  br i1 %.not.i189.i.i, label %ifend.i193.i.i, label %ifend30.i.i

ifend.i193.i.i:                                   ; preds = %ifend27.i.i938
  %memberidx2.i191.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %152 = load ptr, ptr %memberidx2.i191.i.i, align 8
  %153 = tail call i64 @memcmp(ptr %152, ptr nonnull %149, i64 8)
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %if.entry.i939, label %ifend30.i.i

ifend30.i.i:                                      ; preds = %ifend.i193.i.i, %ifend27.i.i938
  %155 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %155, ptr noundef nonnull align 8 dereferenceable(6) @38, i64 6, i1 false)
  %156 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %156, align 8
  %memberidx.i.i195.i.i = getelementptr inbounds %string, ptr %156, i64 0, i32 1
  store ptr %155, ptr %memberidx.i.i195.i.i, align 8
  %memberidx1.i.i196.i.i = getelementptr inbounds %string, ptr %156, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i196.i.i, align 4
  %memberidx2.i.i197.i.i = getelementptr inbounds %string, ptr %156, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i197.i.i, align 4
  %157 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i200.i.i = icmp eq i64 %157, 6
  br i1 %.not.i200.i.i, label %ifend.i204.i.i, label %ifend33.i.i

ifend.i204.i.i:                                   ; preds = %ifend30.i.i
  %memberidx2.i202.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %158 = load ptr, ptr %memberidx2.i202.i.i, align 8
  %159 = tail call i64 @memcmp(ptr %158, ptr nonnull %155, i64 6)
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %if.entry.i939, label %ifend33.i.i

ifend33.i.i:                                      ; preds = %ifend.i204.i.i, %ifend30.i.i
  %161 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %161, ptr noundef nonnull align 8 dereferenceable(6) @39, i64 6, i1 false)
  %162 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %162, align 8
  %memberidx.i.i206.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 1
  store ptr %161, ptr %memberidx.i.i206.i.i, align 8
  %memberidx1.i.i207.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i207.i.i, align 4
  %memberidx2.i.i208.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i208.i.i, align 4
  %163 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i211.i.i = icmp eq i64 %163, 6
  br i1 %.not.i211.i.i, label %ifend.i215.i.i, label %ifend36.i.i

ifend.i215.i.i:                                   ; preds = %ifend33.i.i
  %memberidx2.i213.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %164 = load ptr, ptr %memberidx2.i213.i.i, align 8
  %165 = tail call i64 @memcmp(ptr %164, ptr nonnull %161, i64 6)
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %if.entry.i939, label %ifend36.i.i

ifend36.i.i:                                      ; preds = %ifend.i215.i.i, %ifend33.i.i
  %167 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %167, ptr noundef nonnull align 8 dereferenceable(7) @40, i64 7, i1 false)
  %168 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %168, align 8
  %memberidx.i.i217.i.i = getelementptr inbounds %string, ptr %168, i64 0, i32 1
  store ptr %167, ptr %memberidx.i.i217.i.i, align 8
  %memberidx1.i.i218.i.i = getelementptr inbounds %string, ptr %168, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i218.i.i, align 4
  %memberidx2.i.i219.i.i = getelementptr inbounds %string, ptr %168, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i219.i.i, align 4
  %169 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i222.i.i = icmp eq i64 %169, 7
  br i1 %.not.i222.i.i, label %ifend.i226.i.i, label %ifend39.i.i

ifend.i226.i.i:                                   ; preds = %ifend36.i.i
  %memberidx2.i224.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %170 = load ptr, ptr %memberidx2.i224.i.i, align 8
  %171 = tail call i64 @memcmp(ptr %170, ptr nonnull %167, i64 7)
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %if.entry.i939, label %ifend39.i.i

ifend39.i.i:                                      ; preds = %ifend.i226.i.i, %ifend36.i.i
  %173 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %173, ptr noundef nonnull align 8 dereferenceable(6) @41, i64 6, i1 false)
  %174 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %174, align 8
  %memberidx.i.i228.i.i = getelementptr inbounds %string, ptr %174, i64 0, i32 1
  store ptr %173, ptr %memberidx.i.i228.i.i, align 8
  %memberidx1.i.i229.i.i = getelementptr inbounds %string, ptr %174, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i229.i.i, align 4
  %memberidx2.i.i230.i.i = getelementptr inbounds %string, ptr %174, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i230.i.i, align 4
  %175 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i233.i.i = icmp eq i64 %175, 6
  br i1 %.not.i233.i.i, label %ifend.i237.i.i, label %ifend42.i.i

ifend.i237.i.i:                                   ; preds = %ifend39.i.i
  %memberidx2.i235.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %176 = load ptr, ptr %memberidx2.i235.i.i, align 8
  %177 = tail call i64 @memcmp(ptr %176, ptr nonnull %173, i64 6)
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %if.entry.i939, label %ifend42.i.i

ifend42.i.i:                                      ; preds = %ifend.i237.i.i, %ifend39.i.i
  %179 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %179, ptr noundef nonnull align 8 dereferenceable(9) @42, i64 9, i1 false)
  %180 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %180, align 8
  %memberidx.i.i239.i.i = getelementptr inbounds %string, ptr %180, i64 0, i32 1
  store ptr %179, ptr %memberidx.i.i239.i.i, align 8
  %memberidx1.i.i240.i.i = getelementptr inbounds %string, ptr %180, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i240.i.i, align 4
  %memberidx2.i.i241.i.i = getelementptr inbounds %string, ptr %180, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i241.i.i, align 4
  %181 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i244.i.i = icmp eq i64 %181, 9
  br i1 %.not.i244.i.i, label %ifend.i248.i.i, label %ifend45.i.i

ifend.i248.i.i:                                   ; preds = %ifend42.i.i
  %memberidx2.i246.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %182 = load ptr, ptr %memberidx2.i246.i.i, align 8
  %183 = tail call i64 @memcmp(ptr %182, ptr nonnull %179, i64 9)
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %if.entry.i939, label %ifend45.i.i

ifend45.i.i:                                      ; preds = %ifend.i248.i.i, %ifend42.i.i
  %185 = tail call ptr @malloc(i32 2)
  store i16 28265, ptr %185, align 8
  %186 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %186, align 8
  %memberidx.i.i250.i.i = getelementptr inbounds %string, ptr %186, i64 0, i32 1
  store ptr %185, ptr %memberidx.i.i250.i.i, align 8
  %memberidx1.i.i251.i.i = getelementptr inbounds %string, ptr %186, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i251.i.i, align 4
  %memberidx2.i.i252.i.i = getelementptr inbounds %string, ptr %186, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i252.i.i, align 4
  %187 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i255.i.i = icmp eq i64 %187, 2
  br i1 %.not.i255.i.i, label %ifend.i259.i.i, label %ifend48.i.i

ifend.i259.i.i:                                   ; preds = %ifend45.i.i
  %memberidx2.i257.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %188 = load ptr, ptr %memberidx2.i257.i.i, align 8
  %189 = tail call i64 @memcmp(ptr %188, ptr nonnull %185, i64 2)
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %if.entry.i939, label %ifend48.i.i

ifend48.i.i:                                      ; preds = %ifend.i259.i.i, %ifend45.i.i
  %191 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %191, ptr noundef nonnull align 8 dereferenceable(5) @43, i64 5, i1 false)
  %192 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %192, align 8
  %memberidx.i.i261.i.i = getelementptr inbounds %string, ptr %192, i64 0, i32 1
  store ptr %191, ptr %memberidx.i.i261.i.i, align 8
  %memberidx1.i.i262.i.i = getelementptr inbounds %string, ptr %192, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i262.i.i, align 4
  %memberidx2.i.i263.i.i = getelementptr inbounds %string, ptr %192, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i263.i.i, align 4
  %193 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i266.i.i = icmp eq i64 %193, 5
  br i1 %.not.i266.i.i, label %ifend.i270.i.i, label %ifend51.i.i

ifend.i270.i.i:                                   ; preds = %ifend48.i.i
  %memberidx2.i268.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %194 = load ptr, ptr %memberidx2.i268.i.i, align 8
  %195 = tail call i64 @memcmp(ptr %194, ptr nonnull %191, i64 5)
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %if.entry.i939, label %ifend51.i.i

ifend51.i.i:                                      ; preds = %ifend.i270.i.i, %ifend48.i.i
  %197 = tail call ptr @malloc(i32 4)
  store i32 1836412517, ptr %197, align 8
  %198 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %198, align 8
  %memberidx.i.i272.i.i = getelementptr inbounds %string, ptr %198, i64 0, i32 1
  store ptr %197, ptr %memberidx.i.i272.i.i, align 8
  %memberidx1.i.i273.i.i = getelementptr inbounds %string, ptr %198, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i273.i.i, align 4
  %memberidx2.i.i274.i.i = getelementptr inbounds %string, ptr %198, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i274.i.i, align 4
  %199 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i277.i.i = icmp eq i64 %199, 4
  br i1 %.not.i277.i.i, label %ifend.i281.i.i, label %ifend54.i.i

ifend.i281.i.i:                                   ; preds = %ifend51.i.i
  %memberidx2.i279.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %200 = load ptr, ptr %memberidx2.i279.i.i, align 8
  %201 = tail call i64 @memcmp(ptr %200, ptr nonnull %197, i64 4)
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %if.entry.i939, label %ifend54.i.i

ifend54.i.i:                                      ; preds = %ifend.i281.i.i, %ifend51.i.i
  %203 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %203, ptr noundef nonnull align 8 dereferenceable(3) @44, i64 3, i1 false)
  %204 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %204, align 8
  %memberidx.i.i283.i.i = getelementptr inbounds %string, ptr %204, i64 0, i32 1
  store ptr %203, ptr %memberidx.i.i283.i.i, align 8
  %memberidx1.i.i284.i.i = getelementptr inbounds %string, ptr %204, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i284.i.i, align 4
  %memberidx2.i.i285.i.i = getelementptr inbounds %string, ptr %204, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i285.i.i, align 4
  %205 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i288.i.i = icmp eq i64 %205, 3
  br i1 %.not.i288.i.i, label %ifend.i292.i.i, label %ifend57.i.i

ifend.i292.i.i:                                   ; preds = %ifend54.i.i
  %memberidx2.i290.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %206 = load ptr, ptr %memberidx2.i290.i.i, align 8
  %207 = tail call i64 @memcmp(ptr %206, ptr nonnull %203, i64 3)
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %if.entry.i939, label %ifend57.i.i

ifend57.i.i:                                      ; preds = %ifend.i292.i.i, %ifend54.i.i
  %209 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %209, ptr noundef nonnull align 8 dereferenceable(3) @45, i64 3, i1 false)
  %210 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %210, align 8
  %memberidx.i.i294.i.i = getelementptr inbounds %string, ptr %210, i64 0, i32 1
  store ptr %209, ptr %memberidx.i.i294.i.i, align 8
  %memberidx1.i.i295.i.i = getelementptr inbounds %string, ptr %210, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i295.i.i, align 4
  %memberidx2.i.i296.i.i = getelementptr inbounds %string, ptr %210, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i296.i.i, align 4
  %211 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i299.i.i = icmp eq i64 %211, 3
  br i1 %.not.i299.i.i, label %ifend.i303.i.i, label %ifend60.i.i

ifend.i303.i.i:                                   ; preds = %ifend57.i.i
  %memberidx2.i301.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %212 = load ptr, ptr %memberidx2.i301.i.i, align 8
  %213 = tail call i64 @memcmp(ptr %212, ptr nonnull %209, i64 3)
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %if.entry.i939, label %ifend60.i.i

ifend60.i.i:                                      ; preds = %ifend.i303.i.i, %ifend57.i.i
  %215 = tail call ptr @malloc(i32 2)
  store i16 29537, ptr %215, align 8
  %216 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %216, align 8
  %memberidx.i.i305.i.i = getelementptr inbounds %string, ptr %216, i64 0, i32 1
  store ptr %215, ptr %memberidx.i.i305.i.i, align 8
  %memberidx1.i.i306.i.i = getelementptr inbounds %string, ptr %216, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i306.i.i, align 4
  %memberidx2.i.i307.i.i = getelementptr inbounds %string, ptr %216, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i307.i.i, align 4
  %217 = load i64, ptr %memberidx.i.i81.i, align 4
  %.not.i310.i.i = icmp eq i64 %217, 2
  br i1 %.not.i310.i.i, label %ifend.i314.i.i, label %ifend.i940

ifend.i314.i.i:                                   ; preds = %ifend60.i.i
  %memberidx2.i312.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %218 = load ptr, ptr %memberidx2.i312.i.i, align 8
  %219 = tail call i64 @memcmp(ptr %218, ptr nonnull %215, i64 2)
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %if.entry.i939, label %ifend.i940

if.entry.i939:                                    ; preds = %ifend.i314.i.i, %ifend.i303.i.i, %ifend.i292.i.i, %ifend.i281.i.i, %ifend.i270.i.i, %ifend.i259.i.i, %ifend.i248.i.i, %ifend.i237.i.i, %ifend.i226.i.i, %ifend.i215.i.i, %ifend.i204.i.i, %ifend.i193.i.i, %ifend.i182.i.i, %ifend.i171.i.i, %ifend.i160.i.i, %ifend.i149.i.i, %ifend.i138.i.i, %ifend.i127.i.i, %ifend.i116.i.i, %ifend.i105.i.i, %ifend.i94.i.i, %ifend.i.i.i
  %221 = phi i1 [ false, %ifend.i314.i.i ], [ true, %ifend.i.i.i ], [ false, %ifend.i94.i.i ], [ false, %ifend.i105.i.i ], [ false, %ifend.i116.i.i ], [ false, %ifend.i127.i.i ], [ false, %ifend.i138.i.i ], [ false, %ifend.i149.i.i ], [ false, %ifend.i160.i.i ], [ false, %ifend.i171.i.i ], [ false, %ifend.i182.i.i ], [ false, %ifend.i193.i.i ], [ false, %ifend.i204.i.i ], [ false, %ifend.i215.i.i ], [ false, %ifend.i226.i.i ], [ false, %ifend.i237.i.i ], [ false, %ifend.i248.i.i ], [ false, %ifend.i259.i.i ], [ false, %ifend.i270.i.i ], [ false, %ifend.i281.i.i ], [ false, %ifend.i292.i.i ], [ false, %ifend.i303.i.i ]
  %222 = phi i1 [ false, %ifend.i314.i.i ], [ false, %ifend.i.i.i ], [ true, %ifend.i94.i.i ], [ false, %ifend.i105.i.i ], [ false, %ifend.i116.i.i ], [ false, %ifend.i127.i.i ], [ false, %ifend.i138.i.i ], [ false, %ifend.i149.i.i ], [ false, %ifend.i160.i.i ], [ false, %ifend.i171.i.i ], [ false, %ifend.i182.i.i ], [ false, %ifend.i193.i.i ], [ false, %ifend.i204.i.i ], [ false, %ifend.i215.i.i ], [ false, %ifend.i226.i.i ], [ false, %ifend.i237.i.i ], [ false, %ifend.i248.i.i ], [ false, %ifend.i259.i.i ], [ false, %ifend.i270.i.i ], [ false, %ifend.i281.i.i ], [ false, %ifend.i292.i.i ], [ false, %ifend.i303.i.i ]
  %.pr.i = phi i64 [ 74, %ifend.i314.i.i ], [ 8, %ifend.i.i.i ], [ 9, %ifend.i94.i.i ], [ 55, %ifend.i105.i.i ], [ 56, %ifend.i116.i.i ], [ 57, %ifend.i127.i.i ], [ 58, %ifend.i138.i.i ], [ 59, %ifend.i149.i.i ], [ 60, %ifend.i160.i.i ], [ 61, %ifend.i171.i.i ], [ 62, %ifend.i182.i.i ], [ 63, %ifend.i193.i.i ], [ 64, %ifend.i204.i.i ], [ 65, %ifend.i215.i.i ], [ 66, %ifend.i226.i.i ], [ 67, %ifend.i237.i.i ], [ 68, %ifend.i248.i.i ], [ 69, %ifend.i259.i.i ], [ 70, %ifend.i270.i.i ], [ 71, %ifend.i281.i.i ], [ 72, %ifend.i292.i.i ], [ 73, %ifend.i303.i.i ]
  %223 = load i64, ptr %memberidx.i928, align 4
  %224 = add nsw i64 %223, 1
  %225 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i56.i = getelementptr inbounds %string, ptr %225, i64 0, i32 2
  %226 = load i64, ptr %memberidx2.i56.i, align 4
  %227 = icmp slt i64 %224, %226
  br i1 %227, label %if.entry.i59.i, label %ifend5.i

if.entry.i59.i:                                   ; preds = %if.entry.i939
  %228 = load ptr, ptr %225, align 8
  %memberidx4.i58.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %228, i64 0, i32 2
  %229 = load ptr, ptr %memberidx4.i58.i, align 8
  %230 = tail call i8 %229(ptr nonnull %225, i64 %224)
  %phi.cmp.i = icmp eq i8 %230, 61
  br i1 %phi.cmp.i, label %if.entry3.i, label %ifend5.i

ifend.i940:                                       ; preds = %ifend.i314.i.i, %ifend60.i.i
  %231 = tail call ptr @malloc(i32 24)
  store i64 54, ptr %231, align 4
  %memberidx1.i.i52.i = getelementptr inbounds %Token, ptr %231, i64 0, i32 1
  store ptr %81, ptr %memberidx1.i.i52.i, align 8
  %memberidx.i53.i = getelementptr inbounds %IdentifierToken, ptr %231, i64 0, i32 2
  store ptr %80, ptr %memberidx.i53.i, align 8
  br label %common.ret

if.entry3.i:                                      ; preds = %if.entry.i59.i
  br i1 %221, label %if.entry6.i942, label %ifend8.i

ifend5.sink.split.sink.split.i:                   ; preds = %ifend.i.i945, %ifend.i41.i
  %.ph.ph.i = phi i64 [ 18, %ifend.i41.i ], [ 19, %ifend.i.i945 ]
  store i64 0, ptr %memberidx2.i90.i, align 4
  br label %ifend5.sink.split.i

ifend5.sink.split.i:                              ; preds = %ifend.i.i945, %ifend.i41.i, %ifend5.sink.split.sink.split.i
  %memberidx2.i90.sink141.i = phi ptr [ %memberidx2.i90.i, %ifend.i41.i ], [ %memberidx2.i90.i, %ifend.i.i945 ], [ %memberidx3.i91.i, %ifend5.sink.split.sink.split.i ]
  %.ph.i = phi i64 [ 18, %ifend.i41.i ], [ 19, %ifend.i.i945 ], [ %.ph.ph.i, %ifend5.sink.split.sink.split.i ]
  %232 = load i64, ptr %memberidx2.i90.sink141.i, align 4
  %233 = add nsw i64 %232, 1
  store i64 %233, ptr %memberidx2.i90.sink141.i, align 4
  br label %ifend5.i

ifend5.i:                                         ; preds = %if.entry9.i, %ifend8.i, %if.entry6.i942, %ifend5.sink.split.i, %if.entry.i59.i, %if.entry.i939
  %234 = phi i64 [ %.pr.i, %if.entry.i939 ], [ %.pr.i, %ifend8.i ], [ %.pr.i, %if.entry.i59.i ], [ 18, %if.entry6.i942 ], [ 19, %if.entry9.i ], [ %.ph.i, %ifend5.sink.split.i ]
  %235 = tail call ptr @malloc(i32 16)
  store i64 %234, ptr %235, align 4
  %memberidx1.i51.i941 = getelementptr inbounds %Token, ptr %235, i64 0, i32 1
  store ptr %81, ptr %memberidx1.i51.i941, align 8
  br label %common.ret

if.entry6.i942:                                   ; preds = %if.entry3.i
  %236 = load i64, ptr %memberidx.i928, align 4
  %237 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i.i37.i = getelementptr inbounds %string, ptr %237, i64 0, i32 2
  %238 = load i64, ptr %memberidx2.i.i37.i, align 4
  %.not122.i = icmp slt i64 %236, %238
  br i1 %.not122.i, label %ifend.i41.i, label %ifend5.i

ifend.i41.i:                                      ; preds = %if.entry6.i942
  %239 = load ptr, ptr %237, align 8
  %memberidx2.i39.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %239, i64 0, i32 2
  %240 = load ptr, ptr %memberidx2.i39.i, align 8
  %241 = add nsw i64 %236, 1
  store i64 %241, ptr %memberidx.i928, align 4
  %242 = tail call i8 %240(ptr nonnull %237, i64 %241)
  store i8 %242, ptr %0, align 1
  %243 = icmp eq i8 %242, 10
  br i1 %243, label %ifend5.sink.split.sink.split.i, label %ifend5.sink.split.i

ifend8.i:                                         ; preds = %if.entry3.i
  br i1 %222, label %if.entry9.i, label %ifend5.i

if.entry9.i:                                      ; preds = %ifend8.i
  %244 = load i64, ptr %memberidx.i928, align 4
  %245 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i.i.i943 = getelementptr inbounds %string, ptr %245, i64 0, i32 2
  %246 = load i64, ptr %memberidx2.i.i.i943, align 4
  %.not121.i = icmp slt i64 %244, %246
  br i1 %.not121.i, label %ifend.i.i945, label %ifend5.i

ifend.i.i945:                                     ; preds = %if.entry9.i
  %247 = load ptr, ptr %245, align 8
  %memberidx2.i34.i944 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %247, i64 0, i32 2
  %248 = load ptr, ptr %memberidx2.i34.i944, align 8
  %249 = add nsw i64 %244, 1
  store i64 %249, ptr %memberidx.i928, align 4
  %250 = tail call i8 %248(ptr nonnull %245, i64 %249)
  store i8 %250, ptr %0, align 1
  %251 = icmp eq i8 %250, 10
  br i1 %251, label %ifend5.sink.split.sink.split.i, label %ifend5.sink.split.i

ifend5:                                           ; preds = %ifend
  %252 = icmp eq i8 %2, 34
  br i1 %252, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend5
  %253 = tail call fastcc ptr @Lexer_string_token(ptr nonnull %0)
  br label %common.ret

ifend8:                                           ; preds = %ifend5
  %254 = add i8 %2, -48
  %255 = icmp ult i8 %254, 10
  br i1 %255, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend8
  %memberidx.i.i946 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %256 = load i64, ptr %memberidx.i.i946, align 4
  %257 = add nsw i64 %256, 1
  %memberidx1.i.i947 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %258 = load ptr, ptr %memberidx1.i.i947, align 8
  %memberidx2.i.i948 = getelementptr inbounds %string, ptr %258, i64 0, i32 2
  %259 = load i64, ptr %memberidx2.i.i948, align 4
  %260 = icmp slt i64 %257, %259
  br i1 %260, label %Lexer_peek.exit.i951, label %ifend.i956

Lexer_peek.exit.i951:                             ; preds = %if.entry9
  %261 = icmp eq i8 %2, 48
  %262 = load ptr, ptr %258, align 8
  %memberidx4.i.i949 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %262, i64 0, i32 2
  %263 = load ptr, ptr %memberidx4.i.i949, align 8
  %264 = tail call i8 %263(ptr nonnull %258, i64 %257)
  %phi.cmp.i950 = icmp eq i8 %264, 98
  %265 = and i1 %261, %phi.cmp.i950
  br i1 %265, label %if.entry.i954, label %Lexer_peek.exit.ifend_crit_edge.i

Lexer_peek.exit.ifend_crit_edge.i:                ; preds = %Lexer_peek.exit.i951
  %.pre.i952 = load i64, ptr %memberidx.i.i946, align 4
  %.pre108.i = load ptr, ptr %memberidx1.i.i947, align 8
  %memberidx2.i45.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre108.i, i64 0, i32 2
  %.pre109.i = load i64, ptr %memberidx2.i45.phi.trans.insert.i, align 4
  %.pre122.i = add nsw i64 %.pre.i952, 1
  br label %ifend.i956

if.entry.i954:                                    ; preds = %Lexer_peek.exit.i951
  %266 = tail call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 2)
  br label %common.ret

ifend.i956:                                       ; preds = %Lexer_peek.exit.ifend_crit_edge.i, %if.entry9
  %.pre-phi.i955 = phi i64 [ %.pre122.i, %Lexer_peek.exit.ifend_crit_edge.i ], [ %257, %if.entry9 ]
  %267 = phi i64 [ %.pre109.i, %Lexer_peek.exit.ifend_crit_edge.i ], [ %259, %if.entry9 ]
  %268 = phi ptr [ %.pre108.i, %Lexer_peek.exit.ifend_crit_edge.i ], [ %258, %if.entry9 ]
  %269 = phi i64 [ %.pre.i952, %Lexer_peek.exit.ifend_crit_edge.i ], [ %256, %if.entry9 ]
  %270 = icmp slt i64 %.pre-phi.i955, %267
  br i1 %270, label %Lexer_peek.exit49.i, label %ifend4.i

Lexer_peek.exit49.i:                              ; preds = %ifend.i956
  %271 = load i8, ptr %0, align 1
  %272 = icmp eq i8 %271, 48
  %273 = load ptr, ptr %268, align 8
  %memberidx4.i47.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %273, i64 0, i32 2
  %274 = load ptr, ptr %memberidx4.i47.i, align 8
  %275 = tail call i8 %274(ptr nonnull %268, i64 %.pre-phi.i955)
  %phi.cmp101.i = icmp eq i8 %275, 111
  %276 = and i1 %272, %phi.cmp101.i
  br i1 %276, label %if.entry2.i, label %Lexer_peek.exit49.ifend4_crit_edge.i

Lexer_peek.exit49.ifend4_crit_edge.i:             ; preds = %Lexer_peek.exit49.i
  %.pre110.i = load i64, ptr %memberidx.i.i946, align 4
  %.pre111.i = load ptr, ptr %memberidx1.i.i947, align 8
  %memberidx2.i52.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre111.i, i64 0, i32 2
  %.pre112.i = load i64, ptr %memberidx2.i52.phi.trans.insert.i, align 4
  %.pre123.i = add nsw i64 %.pre110.i, 1
  br label %ifend4.i

if.entry2.i:                                      ; preds = %Lexer_peek.exit49.i
  %277 = tail call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 8)
  br label %common.ret

ifend4.i:                                         ; preds = %Lexer_peek.exit49.ifend4_crit_edge.i, %ifend.i956
  %.pre-phi124.i = phi i64 [ %.pre123.i, %Lexer_peek.exit49.ifend4_crit_edge.i ], [ %.pre-phi.i955, %ifend.i956 ]
  %278 = phi i64 [ %.pre112.i, %Lexer_peek.exit49.ifend4_crit_edge.i ], [ %267, %ifend.i956 ]
  %279 = phi ptr [ %.pre111.i, %Lexer_peek.exit49.ifend4_crit_edge.i ], [ %268, %ifend.i956 ]
  %280 = phi i64 [ %.pre110.i, %Lexer_peek.exit49.ifend4_crit_edge.i ], [ %269, %ifend.i956 ]
  %281 = icmp slt i64 %.pre-phi124.i, %278
  br i1 %281, label %Lexer_peek.exit56.i, label %ifend8.i958

Lexer_peek.exit56.i:                              ; preds = %ifend4.i
  %282 = load i8, ptr %0, align 1
  %283 = icmp eq i8 %282, 48
  %284 = load ptr, ptr %279, align 8
  %memberidx4.i54.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %284, i64 0, i32 2
  %285 = load ptr, ptr %memberidx4.i54.i, align 8
  %286 = tail call i8 %285(ptr nonnull %279, i64 %.pre-phi124.i)
  %phi.cmp102.i = icmp eq i8 %286, 120
  %287 = and i1 %283, %phi.cmp102.i
  br i1 %287, label %if.entry6.i957, label %Lexer_peek.exit56.ifend8_crit_edge.i

Lexer_peek.exit56.ifend8_crit_edge.i:             ; preds = %Lexer_peek.exit56.i
  %.pre113.i = load i64, ptr %memberidx.i.i946, align 4
  %.pre114.i = load ptr, ptr %memberidx1.i.i947, align 8
  %memberidx2.i59.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre114.i, i64 0, i32 2
  %.pre115.i = load i64, ptr %memberidx2.i59.phi.trans.insert.i, align 4
  %.pre125.i = add nsw i64 %.pre113.i, 1
  br label %ifend8.i958

if.entry6.i957:                                   ; preds = %Lexer_peek.exit56.i
  %288 = tail call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 16)
  br label %common.ret

ifend8.i958:                                      ; preds = %Lexer_peek.exit56.ifend8_crit_edge.i, %ifend4.i
  %.pre-phi126.i = phi i64 [ %.pre125.i, %Lexer_peek.exit56.ifend8_crit_edge.i ], [ %.pre-phi124.i, %ifend4.i ]
  %289 = phi i64 [ %.pre115.i, %Lexer_peek.exit56.ifend8_crit_edge.i ], [ %278, %ifend4.i ]
  %290 = phi ptr [ %.pre114.i, %Lexer_peek.exit56.ifend8_crit_edge.i ], [ %279, %ifend4.i ]
  %291 = phi i64 [ %.pre113.i, %Lexer_peek.exit56.ifend8_crit_edge.i ], [ %280, %ifend4.i ]
  %292 = icmp slt i64 %.pre-phi126.i, %289
  br i1 %292, label %if.entry.i62.i, label %Lexer_peek.exit63.i

if.entry.i62.i:                                   ; preds = %ifend8.i958
  %293 = load ptr, ptr %290, align 8
  %memberidx4.i61.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %293, i64 0, i32 2
  %294 = load ptr, ptr %memberidx4.i61.i, align 8
  %295 = tail call i8 %294(ptr nonnull %290, i64 %.pre-phi126.i)
  %.pre116.i = load i64, ptr %memberidx.i.i946, align 4
  %.pre117.i = load ptr, ptr %memberidx1.i.i947, align 8
  %memberidx2.i67.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre117.i, i64 0, i32 2
  %.pre118.i = load i64, ptr %memberidx2.i67.phi.trans.insert.i, align 4
  br label %Lexer_peek.exit63.i

Lexer_peek.exit63.i:                              ; preds = %if.entry.i62.i, %ifend8.i958
  %296 = phi i64 [ %.pre118.i, %if.entry.i62.i ], [ %289, %ifend8.i958 ]
  %297 = phi ptr [ %.pre117.i, %if.entry.i62.i ], [ %290, %ifend8.i958 ]
  %298 = phi i64 [ %.pre116.i, %if.entry.i62.i ], [ %291, %ifend8.i958 ]
  %common.ret.op.i60.i = phi i8 [ %295, %if.entry.i62.i ], [ 0, %ifend8.i958 ]
  %299 = add i8 %common.ret.op.i60.i, -48
  %300 = icmp ult i8 %299, 10
  %301 = icmp eq i8 %common.ret.op.i60.i, 46
  %302 = or i1 %301, %300
  %.not.i959 = icmp slt i64 %298, %296
  %303 = and i1 %.not.i959, %302
  br i1 %303, label %while.entry.preheader.i962, label %while.end.i970

while.entry.preheader.i962:                       ; preds = %Lexer_peek.exit63.i
  %memberidx12.i.i960 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i.i961 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.i964

while.entry.i964:                                 ; preds = %Lexer_peek.exit92.i, %while.entry.preheader.i962
  %304 = phi i64 [ %354, %Lexer_peek.exit92.i ], [ %296, %while.entry.preheader.i962 ]
  %305 = phi ptr [ %355, %Lexer_peek.exit92.i ], [ %297, %while.entry.preheader.i962 ]
  %306 = phi i64 [ %356, %Lexer_peek.exit92.i ], [ %298, %while.entry.preheader.i962 ]
  %length.0.i963 = phi i64 [ %335, %Lexer_peek.exit92.i ], [ 1, %while.entry.preheader.i962 ]
  %is_float.0.i = phi i1 [ %spec.select.i, %Lexer_peek.exit92.i ], [ false, %while.entry.preheader.i962 ]
  %next_char.0.i = phi i8 [ %common.ret.op.i89.i, %Lexer_peek.exit92.i ], [ %common.ret.op.i60.i, %while.entry.preheader.i962 ]
  %307 = icmp eq i8 %next_char.0.i, 46
  %308 = add nsw i64 %306, 2
  %309 = icmp slt i64 %308, %304
  br i1 %309, label %if.entry.i74.i, label %Lexer_peek.exit75.i

if.entry.i74.i:                                   ; preds = %while.entry.i964
  %310 = load ptr, ptr %305, align 8
  %memberidx4.i73.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %310, i64 0, i32 2
  %311 = load ptr, ptr %memberidx4.i73.i, align 8
  %312 = tail call i8 %311(ptr nonnull %305, i64 %308)
  br label %Lexer_peek.exit75.i

Lexer_peek.exit75.i:                              ; preds = %if.entry.i74.i, %while.entry.i964
  %common.ret.op.i72.i = phi i8 [ %312, %if.entry.i74.i ], [ 0, %while.entry.i964 ]
  %313 = add i8 %common.ret.op.i72.i, -58
  %314 = icmp ult i8 %313, -10
  %315 = or i1 %is_float.0.i, %314
  %316 = and i1 %307, %315
  br i1 %316, label %while.end.i970, label %ifend11.i

while.end.i970:                                   ; preds = %Lexer_peek.exit92.i, %Lexer_peek.exit75.i, %Lexer_peek.exit63.i
  %length.1.i965 = phi i64 [ 1, %Lexer_peek.exit63.i ], [ %length.0.i963, %Lexer_peek.exit75.i ], [ %335, %Lexer_peek.exit92.i ]
  %is_float.1.i = phi i1 [ false, %Lexer_peek.exit63.i ], [ %is_float.0.i, %Lexer_peek.exit75.i ], [ %spec.select.i, %Lexer_peek.exit92.i ]
  %317 = tail call ptr @malloc(i32 32)
  %318 = load i64, ptr %memberidx.i.i946, align 4
  %319 = sub nsw i64 %318, %length.1.i965
  %320 = add nsw i64 %319, 1
  %321 = add nsw i64 %318, 1
  %memberidx2.i79.i966 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %322 = load i64, ptr %memberidx2.i79.i966, align 4
  %323 = sub nuw i64 %322, %length.1.i965
  %memberidx3.i.i967 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %324 = load i64, ptr %memberidx3.i.i967, align 4
  store i64 %320, ptr %317, align 4
  %memberidx1.i.i80.i = getelementptr inbounds %FloRange, ptr %317, i64 0, i32 1
  store i64 %321, ptr %memberidx1.i.i80.i, align 4
  %memberidx2.i.i.i968 = getelementptr inbounds %FloRange, ptr %317, i64 0, i32 2
  store i64 %323, ptr %memberidx2.i.i.i968, align 4
  %memberidx3.i.i.i969 = getelementptr inbounds %FloRange, ptr %317, i64 0, i32 3
  store i64 %324, ptr %memberidx3.i.i.i969, align 4
  %325 = load ptr, ptr %memberidx1.i.i947, align 8
  %326 = load ptr, ptr %325, align 8
  %memberidx17.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %326, i64 0, i32 1
  %327 = load ptr, ptr %memberidx17.i, align 8
  %328 = tail call ptr %327(ptr nonnull %325, i64 %320, i64 %length.1.i965)
  %329 = tail call ptr @malloc(i32 24)
  %330 = load ptr, ptr %328, align 8
  %memberidx19.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %330, i64 0, i32 5
  %331 = load ptr, ptr %memberidx19.i, align 8
  %332 = tail call ptr %331(ptr nonnull %328)
  br i1 %is_float.1.i, label %true_block.i, label %false_block.i

ifend11.i:                                        ; preds = %Lexer_peek.exit75.i
  %333 = load i8, ptr %0, align 1
  %334 = icmp eq i8 %333, 46
  %spec.select.i = select i1 %334, i1 true, i1 %is_float.0.i
  %335 = add nuw nsw i64 %length.0.i963, 1
  %336 = load i64, ptr %memberidx.i.i946, align 4
  %337 = load ptr, ptr %memberidx1.i.i947, align 8
  %memberidx2.i.i82.i = getelementptr inbounds %string, ptr %337, i64 0, i32 2
  %338 = load i64, ptr %memberidx2.i.i82.i, align 4
  %.not103.i = icmp slt i64 %336, %338
  br i1 %.not103.i, label %ifend.i.i971, label %Lexer_advance.exit.i973

ifend.i.i971:                                     ; preds = %ifend11.i
  %339 = load ptr, ptr %337, align 8
  %memberidx2.i84.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %339, i64 0, i32 2
  %340 = load ptr, ptr %memberidx2.i84.i, align 8
  %341 = add nsw i64 %336, 1
  store i64 %341, ptr %memberidx.i.i946, align 4
  %342 = tail call i8 %340(ptr nonnull %337, i64 %341)
  store i8 %342, ptr %0, align 1
  %343 = icmp eq i8 %342, 10
  br i1 %343, label %if.entry6.i.i972, label %Lexer_advance.exit.sink.split.i

if.entry6.i.i972:                                 ; preds = %ifend.i.i971
  store i64 0, ptr %memberidx12.i.i960, align 4
  br label %Lexer_advance.exit.sink.split.i

Lexer_advance.exit.sink.split.i:                  ; preds = %if.entry6.i.i972, %ifend.i.i971
  %memberidx10.i.sink128.i = phi ptr [ %memberidx10.i.i961, %if.entry6.i.i972 ], [ %memberidx12.i.i960, %ifend.i.i971 ]
  %344 = load i64, ptr %memberidx10.i.sink128.i, align 4
  %345 = add nsw i64 %344, 1
  store i64 %345, ptr %memberidx10.i.sink128.i, align 4
  %.pre1020 = load i64, ptr %memberidx.i.i946, align 4
  %.pre1021 = load ptr, ptr %memberidx1.i.i947, align 8
  %memberidx2.i88.i.phi.trans.insert = getelementptr inbounds %string, ptr %.pre1021, i64 0, i32 2
  %.pre1022 = load i64, ptr %memberidx2.i88.i.phi.trans.insert, align 4
  br label %Lexer_advance.exit.i973

Lexer_advance.exit.i973:                          ; preds = %Lexer_advance.exit.sink.split.i, %ifend11.i
  %346 = phi i64 [ %.pre1022, %Lexer_advance.exit.sink.split.i ], [ %338, %ifend11.i ]
  %347 = phi ptr [ %.pre1021, %Lexer_advance.exit.sink.split.i ], [ %337, %ifend11.i ]
  %348 = phi i64 [ %.pre1020, %Lexer_advance.exit.sink.split.i ], [ %336, %ifend11.i ]
  %349 = add nsw i64 %348, 1
  %350 = icmp slt i64 %349, %346
  br i1 %350, label %if.entry.i91.i, label %Lexer_peek.exit92.i

if.entry.i91.i:                                   ; preds = %Lexer_advance.exit.i973
  %351 = load ptr, ptr %347, align 8
  %memberidx4.i90.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %351, i64 0, i32 2
  %352 = load ptr, ptr %memberidx4.i90.i, align 8
  %353 = tail call i8 %352(ptr nonnull %347, i64 %349)
  %.pre119.i = load i64, ptr %memberidx.i.i946, align 4
  %.pre120.i = load ptr, ptr %memberidx1.i.i947, align 8
  %memberidx2.i95.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre120.i, i64 0, i32 2
  %.pre121.i = load i64, ptr %memberidx2.i95.phi.trans.insert.i, align 4
  br label %Lexer_peek.exit92.i

Lexer_peek.exit92.i:                              ; preds = %if.entry.i91.i, %Lexer_advance.exit.i973
  %354 = phi i64 [ %.pre121.i, %if.entry.i91.i ], [ %346, %Lexer_advance.exit.i973 ]
  %355 = phi ptr [ %.pre120.i, %if.entry.i91.i ], [ %347, %Lexer_advance.exit.i973 ]
  %356 = phi i64 [ %.pre119.i, %if.entry.i91.i ], [ %348, %Lexer_advance.exit.i973 ]
  %common.ret.op.i89.i = phi i8 [ %353, %if.entry.i91.i ], [ 0, %Lexer_advance.exit.i973 ]
  %357 = add i8 %common.ret.op.i89.i, -48
  %358 = icmp ult i8 %357, 10
  %359 = icmp eq i8 %common.ret.op.i89.i, 46
  %360 = or i1 %359, %358
  %.not104.i = icmp slt i64 %356, %354
  %361 = and i1 %.not104.i, %360
  br i1 %361, label %while.entry.i964, label %while.end.i970

true_block.i:                                     ; preds = %while.end.i970
  %362 = tail call double @atof(ptr %332)
  tail call void @free(ptr %332)
  store i64 32, ptr %329, align 4
  %memberidx.i77.i = getelementptr inbounds %FloatToken, ptr %329, i64 0, i32 2
  store double %362, ptr %memberidx.i77.i, align 8
  br label %end.i

false_block.i:                                    ; preds = %while.end.i970
  %363 = tail call i64 @atol(ptr nocapture %332)
  tail call void @free(ptr %332)
  store i64 31, ptr %329, align 4
  %memberidx.i68.i = getelementptr inbounds %IntToken, ptr %329, i64 0, i32 2
  store i64 %363, ptr %memberidx.i68.i, align 4
  br label %end.i

end.i:                                            ; preds = %false_block.i, %true_block.i
  %364 = getelementptr inbounds %Token, ptr %329, i64 0, i32 1
  store ptr %317, ptr %364, align 8
  %memberidx.i64.i = getelementptr inbounds %string, ptr %328, i64 0, i32 1
  %365 = load ptr, ptr %memberidx.i64.i, align 8
  tail call void @free(ptr %365)
  tail call void @free(ptr nonnull %328)
  br label %common.ret

ifend11:                                          ; preds = %ifend8
  switch i8 %2, label %ifend89 [
    i8 58, label %if.entry12
    i8 59, label %if.entry15
    i8 44, label %if.entry18
    i8 43, label %if.entry21
    i8 45, label %if.entry24
    i8 42, label %if.entry27
    i8 37, label %if.entry30
    i8 94, label %if.entry33
    i8 47, label %if.entry36
    i8 40, label %if.entry42
    i8 41, label %if.entry45
    i8 123, label %if.entry48
    i8 125, label %if.entry51
    i8 91, label %if.entry54
    i8 93, label %if.entry57
    i8 13, label %if.entry60
    i8 10, label %if.entry60
    i8 39, label %if.entry63
    i8 63, label %if.entry66
    i8 38, label %if.entry69
    i8 61, label %if.entry72
    i8 33, label %if.entry75
    i8 62, label %if.entry78
    i8 60, label %if.entry81
    i8 46, label %if.entry84
    i8 0, label %if.entry87
  ]

if.entry12:                                       ; preds = %ifend11
  %366 = tail call ptr @malloc(i32 16)
  %367 = tail call ptr @malloc(i32 32)
  %memberidx.i176 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %368 = load i64, ptr %memberidx.i176, align 4
  %369 = add nsw i64 %368, 1
  %memberidx2.i177 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %370 = load i64, ptr %memberidx2.i177, align 4
  %371 = add i64 %370, -1
  %memberidx3.i178 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %372 = load i64, ptr %memberidx3.i178, align 4
  store i64 %368, ptr %367, align 4
  %memberidx1.i.i179 = getelementptr inbounds %FloRange, ptr %367, i64 0, i32 1
  store i64 %369, ptr %memberidx1.i.i179, align 4
  %memberidx2.i.i180 = getelementptr inbounds %FloRange, ptr %367, i64 0, i32 2
  store i64 %371, ptr %memberidx2.i.i180, align 4
  %memberidx3.i.i181 = getelementptr inbounds %FloRange, ptr %367, i64 0, i32 3
  store i64 %372, ptr %memberidx3.i.i181, align 4
  store i64 1, ptr %366, align 4
  %memberidx1.i182 = getelementptr inbounds %Token, ptr %366, i64 0, i32 1
  store ptr %367, ptr %memberidx1.i182, align 8
  br label %common.ret

if.entry15:                                       ; preds = %ifend11
  %373 = tail call ptr @malloc(i32 16)
  %374 = tail call ptr @malloc(i32 32)
  %memberidx.i183 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %375 = load i64, ptr %memberidx.i183, align 4
  %376 = add nsw i64 %375, 1
  %memberidx2.i184 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %377 = load i64, ptr %memberidx2.i184, align 4
  %378 = add i64 %377, -1
  %memberidx3.i185 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %379 = load i64, ptr %memberidx3.i185, align 4
  store i64 %375, ptr %374, align 4
  %memberidx1.i.i186 = getelementptr inbounds %FloRange, ptr %374, i64 0, i32 1
  store i64 %376, ptr %memberidx1.i.i186, align 4
  %memberidx2.i.i187 = getelementptr inbounds %FloRange, ptr %374, i64 0, i32 2
  store i64 %378, ptr %memberidx2.i.i187, align 4
  %memberidx3.i.i188 = getelementptr inbounds %FloRange, ptr %374, i64 0, i32 3
  store i64 %379, ptr %memberidx3.i.i188, align 4
  store i64 2, ptr %373, align 4
  %memberidx1.i189 = getelementptr inbounds %Token, ptr %373, i64 0, i32 1
  store ptr %374, ptr %memberidx1.i189, align 8
  br label %common.ret

if.entry18:                                       ; preds = %ifend11
  %380 = tail call ptr @malloc(i32 16)
  %381 = tail call ptr @malloc(i32 32)
  %memberidx.i190 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %382 = load i64, ptr %memberidx.i190, align 4
  %383 = add nsw i64 %382, 1
  %memberidx2.i191 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %384 = load i64, ptr %memberidx2.i191, align 4
  %385 = add i64 %384, -1
  %memberidx3.i192 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %386 = load i64, ptr %memberidx3.i192, align 4
  store i64 %382, ptr %381, align 4
  %memberidx1.i.i193 = getelementptr inbounds %FloRange, ptr %381, i64 0, i32 1
  store i64 %383, ptr %memberidx1.i.i193, align 4
  %memberidx2.i.i194 = getelementptr inbounds %FloRange, ptr %381, i64 0, i32 2
  store i64 %385, ptr %memberidx2.i.i194, align 4
  %memberidx3.i.i195 = getelementptr inbounds %FloRange, ptr %381, i64 0, i32 3
  store i64 %386, ptr %memberidx3.i.i195, align 4
  store i64 3, ptr %380, align 4
  %memberidx1.i196 = getelementptr inbounds %Token, ptr %380, i64 0, i32 1
  store ptr %381, ptr %memberidx1.i196, align 8
  br label %common.ret

if.entry21:                                       ; preds = %ifend11
  %memberidx.i.i197 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %387 = load i64, ptr %memberidx.i.i197, align 4
  %388 = add nsw i64 %387, 1
  %memberidx1.i.i198 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %389 = load ptr, ptr %memberidx1.i.i198, align 8
  %memberidx2.i.i199 = getelementptr inbounds %string, ptr %389, i64 0, i32 2
  %390 = load i64, ptr %memberidx2.i.i199, align 4
  %391 = icmp slt i64 %388, %390
  br i1 %391, label %if.entry.i.i, label %else.i

if.entry.i.i:                                     ; preds = %if.entry21
  %392 = load ptr, ptr %389, align 8
  %memberidx4.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %392, i64 0, i32 2
  %393 = load ptr, ptr %memberidx4.i.i, align 8
  %394 = tail call i8 %393(ptr nonnull %389, i64 %388)
  %phi.cmp914 = icmp eq i8 %394, 43
  %395 = load i64, ptr %memberidx.i.i197, align 4
  %396 = load ptr, ptr %memberidx1.i.i198, align 8
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %396, i64 0, i32 2
  %397 = load i64, ptr %memberidx2.i.i.i, align 4
  br i1 %phi.cmp914, label %if.entry.i200, label %if.entry.i.i.else.i_crit_edge

if.entry.i.i.else.i_crit_edge:                    ; preds = %if.entry.i.i
  %.pre1028 = add nsw i64 %395, 1
  br label %else.i

if.entry.i200:                                    ; preds = %if.entry.i.i
  %.not917 = icmp slt i64 %395, %397
  br i1 %.not917, label %ifend.i.i, label %Lexer_advance.exit.i

ifend.i.i:                                        ; preds = %if.entry.i200
  %398 = load ptr, ptr %396, align 8
  %memberidx2.i11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %398, i64 0, i32 2
  %399 = load ptr, ptr %memberidx2.i11.i, align 8
  %400 = add nsw i64 %395, 1
  store i64 %400, ptr %memberidx.i.i197, align 4
  %401 = tail call i8 %399(ptr nonnull %396, i64 %400)
  store i8 %401, ptr %0, align 1
  %402 = icmp eq i8 %401, 10
  %memberidx9.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %402, label %if.entry6.i.i, label %Lexer_advance.exit.i.sink.split

if.entry6.i.i:                                    ; preds = %ifend.i.i
  store i64 0, ptr %memberidx9.i.i, align 4
  %memberidx10.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i.sink.split

Lexer_advance.exit.i.sink.split:                  ; preds = %ifend.i.i, %if.entry6.i.i
  %memberidx9.i.i.sink1051 = phi ptr [ %memberidx10.i.i, %if.entry6.i.i ], [ %memberidx9.i.i, %ifend.i.i ]
  %403 = load i64, ptr %memberidx9.i.i.sink1051, align 4
  %404 = add nsw i64 %403, 1
  store i64 %404, ptr %memberidx9.i.i.sink1051, align 4
  br label %Lexer_advance.exit.i

Lexer_advance.exit.i:                             ; preds = %Lexer_advance.exit.i.sink.split, %if.entry.i200
  %405 = tail call ptr @malloc(i32 16)
  %406 = tail call ptr @malloc(i32 32)
  %407 = load i64, ptr %memberidx.i.i197, align 4
  %408 = add nsw i64 %407, -1
  %409 = add nsw i64 %407, 1
  %memberidx2.i13.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %410 = load i64, ptr %memberidx2.i13.i, align 4
  %411 = add i64 %410, -2
  %memberidx3.i14.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %412 = load i64, ptr %memberidx3.i14.i, align 4
  store i64 %408, ptr %406, align 4
  %memberidx1.i.i15.i = getelementptr inbounds %FloRange, ptr %406, i64 0, i32 1
  store i64 %409, ptr %memberidx1.i.i15.i, align 4
  %memberidx2.i.i16.i = getelementptr inbounds %FloRange, ptr %406, i64 0, i32 2
  store i64 %411, ptr %memberidx2.i.i16.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %406, i64 0, i32 3
  store i64 %412, ptr %memberidx3.i.i.i, align 4
  store i64 23, ptr %405, align 4
  %memberidx1.i17.i = getelementptr inbounds %Token, ptr %405, i64 0, i32 1
  store ptr %406, ptr %memberidx1.i17.i, align 8
  br label %common.ret

else.i:                                           ; preds = %if.entry.i.i.else.i_crit_edge, %if.entry21
  %.pre-phi = phi i64 [ %.pre1028, %if.entry.i.i.else.i_crit_edge ], [ %388, %if.entry21 ]
  %413 = phi i64 [ %397, %if.entry.i.i.else.i_crit_edge ], [ %390, %if.entry21 ]
  %414 = phi ptr [ %396, %if.entry.i.i.else.i_crit_edge ], [ %389, %if.entry21 ]
  %415 = icmp slt i64 %.pre-phi, %413
  br i1 %415, label %if.entry.i30.i, label %ifend3.i

if.entry.i30.i:                                   ; preds = %else.i
  %416 = load ptr, ptr %414, align 8
  %memberidx4.i29.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %416, i64 0, i32 2
  %417 = load ptr, ptr %memberidx4.i29.i, align 8
  %418 = tail call i8 %417(ptr nonnull %414, i64 %.pre-phi)
  %phi.cmp915 = icmp eq i8 %418, 61
  br i1 %phi.cmp915, label %if.entry1.i, label %ifend3.i

if.entry1.i:                                      ; preds = %if.entry.i30.i
  %419 = load i64, ptr %memberidx.i.i197, align 4
  %420 = load ptr, ptr %memberidx1.i.i198, align 8
  %memberidx2.i.i34.i = getelementptr inbounds %string, ptr %420, i64 0, i32 2
  %421 = load i64, ptr %memberidx2.i.i34.i, align 4
  %.not916 = icmp slt i64 %419, %421
  br i1 %.not916, label %ifend.i38.i, label %Lexer_advance.exit44.i

ifend.i38.i:                                      ; preds = %if.entry1.i
  %422 = load ptr, ptr %420, align 8
  %memberidx2.i36.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %422, i64 0, i32 2
  %423 = load ptr, ptr %memberidx2.i36.i, align 8
  %424 = add nsw i64 %419, 1
  store i64 %424, ptr %memberidx.i.i197, align 4
  %425 = tail call i8 %423(ptr nonnull %420, i64 %424)
  store i8 %425, ptr %0, align 1
  %426 = icmp eq i8 %425, 10
  %memberidx9.i39.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %426, label %if.entry6.i41.i, label %Lexer_advance.exit44.i.sink.split

if.entry6.i41.i:                                  ; preds = %ifend.i38.i
  store i64 0, ptr %memberidx9.i39.i, align 4
  %memberidx10.i40.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit44.i.sink.split

Lexer_advance.exit44.i.sink.split:                ; preds = %ifend.i38.i, %if.entry6.i41.i
  %memberidx9.i39.i.sink1053 = phi ptr [ %memberidx10.i40.i, %if.entry6.i41.i ], [ %memberidx9.i39.i, %ifend.i38.i ]
  %427 = load i64, ptr %memberidx9.i39.i.sink1053, align 4
  %428 = add nsw i64 %427, 1
  store i64 %428, ptr %memberidx9.i39.i.sink1053, align 4
  br label %Lexer_advance.exit44.i

Lexer_advance.exit44.i:                           ; preds = %Lexer_advance.exit44.i.sink.split, %if.entry1.i
  %429 = tail call ptr @malloc(i32 16)
  %430 = tail call ptr @malloc(i32 32)
  %431 = load i64, ptr %memberidx.i.i197, align 4
  %432 = add nsw i64 %431, -1
  %433 = add nsw i64 %431, 1
  %memberidx2.i46.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %434 = load i64, ptr %memberidx2.i46.i, align 4
  %435 = add i64 %434, -2
  %memberidx3.i47.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %436 = load i64, ptr %memberidx3.i47.i, align 4
  store i64 %432, ptr %430, align 4
  %memberidx1.i.i48.i = getelementptr inbounds %FloRange, ptr %430, i64 0, i32 1
  store i64 %433, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %FloRange, ptr %430, i64 0, i32 2
  store i64 %435, ptr %memberidx2.i.i49.i, align 4
  %memberidx3.i.i50.i = getelementptr inbounds %FloRange, ptr %430, i64 0, i32 3
  store i64 %436, ptr %memberidx3.i.i50.i, align 4
  store i64 14, ptr %429, align 4
  %memberidx1.i51.i = getelementptr inbounds %Token, ptr %429, i64 0, i32 1
  store ptr %430, ptr %memberidx1.i51.i, align 8
  br label %common.ret

ifend3.i:                                         ; preds = %else.i, %if.entry.i30.i
  %437 = tail call ptr @malloc(i32 16)
  %438 = tail call ptr @malloc(i32 32)
  %439 = load i64, ptr %memberidx.i.i197, align 4
  %440 = add nsw i64 %439, 1
  %memberidx2.i20.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %441 = load i64, ptr %memberidx2.i20.i, align 4
  %442 = add i64 %441, -1
  %memberidx3.i21.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %443 = load i64, ptr %memberidx3.i21.i, align 4
  store i64 %439, ptr %438, align 4
  %memberidx1.i.i22.i = getelementptr inbounds %FloRange, ptr %438, i64 0, i32 1
  store i64 %440, ptr %memberidx1.i.i22.i, align 4
  %memberidx2.i.i23.i = getelementptr inbounds %FloRange, ptr %438, i64 0, i32 2
  store i64 %442, ptr %memberidx2.i.i23.i, align 4
  %memberidx3.i.i24.i = getelementptr inbounds %FloRange, ptr %438, i64 0, i32 3
  store i64 %443, ptr %memberidx3.i.i24.i, align 4
  store i64 6, ptr %437, align 4
  %memberidx1.i18.i = getelementptr inbounds %Token, ptr %437, i64 0, i32 1
  store ptr %438, ptr %memberidx1.i18.i, align 8
  br label %common.ret

if.entry24:                                       ; preds = %ifend11
  %memberidx.i.i202 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %444 = load i64, ptr %memberidx.i.i202, align 4
  %445 = add nsw i64 %444, 1
  %memberidx1.i.i203 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %446 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i.i204 = getelementptr inbounds %string, ptr %446, i64 0, i32 2
  %447 = load i64, ptr %memberidx2.i.i204, align 4
  %448 = icmp slt i64 %445, %447
  br i1 %448, label %if.entry.i.i206, label %else.i223

if.entry.i.i206:                                  ; preds = %if.entry24
  %449 = load ptr, ptr %446, align 8
  %memberidx4.i.i205 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %449, i64 0, i32 2
  %450 = load ptr, ptr %memberidx4.i.i205, align 8
  %451 = tail call i8 %450(ptr nonnull %446, i64 %445)
  %phi.cmp908 = icmp eq i8 %451, 45
  %452 = load i64, ptr %memberidx.i.i202, align 4
  %453 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i.i.i212 = getelementptr inbounds %string, ptr %453, i64 0, i32 2
  %454 = load i64, ptr %memberidx2.i.i.i212, align 4
  br i1 %phi.cmp908, label %if.entry.i213, label %if.entry.i.i206.else.i223_crit_edge

if.entry.i.i206.else.i223_crit_edge:              ; preds = %if.entry.i.i206
  %.pre1029 = add nsw i64 %452, 1
  br label %else.i223

if.entry.i213:                                    ; preds = %if.entry.i.i206
  %.not913 = icmp slt i64 %452, %454
  br i1 %.not913, label %ifend.i.i215, label %Lexer_advance.exit.i222

ifend.i.i215:                                     ; preds = %if.entry.i213
  %455 = load ptr, ptr %453, align 8
  %memberidx2.i17.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %455, i64 0, i32 2
  %456 = load ptr, ptr %memberidx2.i17.i, align 8
  %457 = add nsw i64 %452, 1
  store i64 %457, ptr %memberidx.i.i202, align 4
  %458 = tail call i8 %456(ptr nonnull %453, i64 %457)
  store i8 %458, ptr %0, align 1
  %459 = icmp eq i8 %458, 10
  %memberidx9.i.i216 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %459, label %if.entry6.i.i218, label %Lexer_advance.exit.i222.sink.split

if.entry6.i.i218:                                 ; preds = %ifend.i.i215
  store i64 0, ptr %memberidx9.i.i216, align 4
  %memberidx10.i.i217 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i222.sink.split

Lexer_advance.exit.i222.sink.split:               ; preds = %ifend.i.i215, %if.entry6.i.i218
  %memberidx9.i.i216.sink1055 = phi ptr [ %memberidx10.i.i217, %if.entry6.i.i218 ], [ %memberidx9.i.i216, %ifend.i.i215 ]
  %460 = load i64, ptr %memberidx9.i.i216.sink1055, align 4
  %461 = add nsw i64 %460, 1
  store i64 %461, ptr %memberidx9.i.i216.sink1055, align 4
  br label %Lexer_advance.exit.i222

Lexer_advance.exit.i222:                          ; preds = %Lexer_advance.exit.i222.sink.split, %if.entry.i213
  %462 = tail call ptr @malloc(i32 16)
  %463 = tail call ptr @malloc(i32 32)
  %464 = load i64, ptr %memberidx.i.i202, align 4
  %465 = add nsw i64 %464, -1
  %466 = add nsw i64 %464, 1
  %memberidx2.i19.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %467 = load i64, ptr %memberidx2.i19.i, align 4
  %468 = add i64 %467, -2
  %memberidx3.i20.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %469 = load i64, ptr %memberidx3.i20.i, align 4
  store i64 %465, ptr %463, align 4
  %memberidx1.i.i21.i = getelementptr inbounds %FloRange, ptr %463, i64 0, i32 1
  store i64 %466, ptr %memberidx1.i.i21.i, align 4
  %memberidx2.i.i22.i = getelementptr inbounds %FloRange, ptr %463, i64 0, i32 2
  store i64 %468, ptr %memberidx2.i.i22.i, align 4
  %memberidx3.i.i.i221 = getelementptr inbounds %FloRange, ptr %463, i64 0, i32 3
  store i64 %469, ptr %memberidx3.i.i.i221, align 4
  store i64 24, ptr %462, align 4
  %memberidx1.i23.i = getelementptr inbounds %Token, ptr %462, i64 0, i32 1
  store ptr %463, ptr %memberidx1.i23.i, align 8
  br label %common.ret

else.i223:                                        ; preds = %if.entry.i.i206.else.i223_crit_edge, %if.entry24
  %.pre-phi1030 = phi i64 [ %.pre1029, %if.entry.i.i206.else.i223_crit_edge ], [ %445, %if.entry24 ]
  %470 = phi i64 [ %454, %if.entry.i.i206.else.i223_crit_edge ], [ %447, %if.entry24 ]
  %471 = phi ptr [ %453, %if.entry.i.i206.else.i223_crit_edge ], [ %446, %if.entry24 ]
  %472 = icmp slt i64 %.pre-phi1030, %470
  br i1 %472, label %if.entry.i36.i, label %else2.i

if.entry.i36.i:                                   ; preds = %else.i223
  %473 = load ptr, ptr %471, align 8
  %memberidx4.i35.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %473, i64 0, i32 2
  %474 = load ptr, ptr %memberidx4.i35.i, align 8
  %475 = tail call i8 %474(ptr nonnull %471, i64 %.pre-phi1030)
  %phi.cmp909 = icmp eq i8 %475, 61
  %476 = load i64, ptr %memberidx.i.i202, align 4
  %477 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i.i40.i = getelementptr inbounds %string, ptr %477, i64 0, i32 2
  %478 = load i64, ptr %memberidx2.i.i40.i, align 4
  br i1 %phi.cmp909, label %if.entry1.i224, label %if.entry.i36.i.else2.i_crit_edge

if.entry.i36.i.else2.i_crit_edge:                 ; preds = %if.entry.i36.i
  %.pre1031 = add nsw i64 %476, 1
  br label %else2.i

if.entry1.i224:                                   ; preds = %if.entry.i36.i
  %.not912 = icmp slt i64 %476, %478
  br i1 %.not912, label %ifend.i44.i, label %Lexer_advance.exit50.i

ifend.i44.i:                                      ; preds = %if.entry1.i224
  %479 = load ptr, ptr %477, align 8
  %memberidx2.i42.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %479, i64 0, i32 2
  %480 = load ptr, ptr %memberidx2.i42.i, align 8
  %481 = add nsw i64 %476, 1
  store i64 %481, ptr %memberidx.i.i202, align 4
  %482 = tail call i8 %480(ptr nonnull %477, i64 %481)
  store i8 %482, ptr %0, align 1
  %483 = icmp eq i8 %482, 10
  %memberidx9.i45.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %483, label %if.entry6.i47.i, label %Lexer_advance.exit50.i.sink.split

if.entry6.i47.i:                                  ; preds = %ifend.i44.i
  store i64 0, ptr %memberidx9.i45.i, align 4
  %memberidx10.i46.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i.sink.split

Lexer_advance.exit50.i.sink.split:                ; preds = %ifend.i44.i, %if.entry6.i47.i
  %memberidx9.i45.i.sink1057 = phi ptr [ %memberidx10.i46.i, %if.entry6.i47.i ], [ %memberidx9.i45.i, %ifend.i44.i ]
  %484 = load i64, ptr %memberidx9.i45.i.sink1057, align 4
  %485 = add nsw i64 %484, 1
  store i64 %485, ptr %memberidx9.i45.i.sink1057, align 4
  br label %Lexer_advance.exit50.i

Lexer_advance.exit50.i:                           ; preds = %Lexer_advance.exit50.i.sink.split, %if.entry1.i224
  %486 = tail call ptr @malloc(i32 16)
  %487 = tail call ptr @malloc(i32 32)
  %488 = load i64, ptr %memberidx.i.i202, align 4
  %489 = add nsw i64 %488, -1
  %490 = add nsw i64 %488, 1
  %memberidx2.i52.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %491 = load i64, ptr %memberidx2.i52.i, align 4
  %492 = add i64 %491, -2
  %memberidx3.i53.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %493 = load i64, ptr %memberidx3.i53.i, align 4
  store i64 %489, ptr %487, align 4
  %memberidx1.i.i54.i = getelementptr inbounds %FloRange, ptr %487, i64 0, i32 1
  store i64 %490, ptr %memberidx1.i.i54.i, align 4
  %memberidx2.i.i55.i = getelementptr inbounds %FloRange, ptr %487, i64 0, i32 2
  store i64 %492, ptr %memberidx2.i.i55.i, align 4
  %memberidx3.i.i56.i = getelementptr inbounds %FloRange, ptr %487, i64 0, i32 3
  store i64 %493, ptr %memberidx3.i.i56.i, align 4
  store i64 13, ptr %486, align 4
  %memberidx1.i57.i = getelementptr inbounds %Token, ptr %486, i64 0, i32 1
  store ptr %487, ptr %memberidx1.i57.i, align 8
  br label %common.ret

else2.i:                                          ; preds = %if.entry.i36.i.else2.i_crit_edge, %else.i223
  %.pre-phi1032 = phi i64 [ %.pre1031, %if.entry.i36.i.else2.i_crit_edge ], [ %.pre-phi1030, %else.i223 ]
  %494 = phi i64 [ %478, %if.entry.i36.i.else2.i_crit_edge ], [ %470, %else.i223 ]
  %495 = phi ptr [ %477, %if.entry.i36.i.else2.i_crit_edge ], [ %471, %else.i223 ]
  %496 = icmp slt i64 %.pre-phi1032, %494
  br i1 %496, label %if.entry.i70.i, label %ifend6.i

if.entry.i70.i:                                   ; preds = %else2.i
  %497 = load ptr, ptr %495, align 8
  %memberidx4.i69.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %497, i64 0, i32 2
  %498 = load ptr, ptr %memberidx4.i69.i, align 8
  %499 = tail call i8 %498(ptr nonnull %495, i64 %.pre-phi1032)
  %phi.cmp910 = icmp eq i8 %499, 62
  br i1 %phi.cmp910, label %if.entry4.i, label %ifend6.i

if.entry4.i:                                      ; preds = %if.entry.i70.i
  %500 = load i64, ptr %memberidx.i.i202, align 4
  %501 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i.i74.i = getelementptr inbounds %string, ptr %501, i64 0, i32 2
  %502 = load i64, ptr %memberidx2.i.i74.i, align 4
  %.not911 = icmp slt i64 %500, %502
  br i1 %.not911, label %ifend.i78.i, label %Lexer_advance.exit84.i

ifend.i78.i:                                      ; preds = %if.entry4.i
  %503 = load ptr, ptr %501, align 8
  %memberidx2.i76.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %503, i64 0, i32 2
  %504 = load ptr, ptr %memberidx2.i76.i, align 8
  %505 = add nsw i64 %500, 1
  store i64 %505, ptr %memberidx.i.i202, align 4
  %506 = tail call i8 %504(ptr nonnull %501, i64 %505)
  store i8 %506, ptr %0, align 1
  %507 = icmp eq i8 %506, 10
  %memberidx9.i79.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %507, label %if.entry6.i81.i, label %Lexer_advance.exit84.i.sink.split

if.entry6.i81.i:                                  ; preds = %ifend.i78.i
  store i64 0, ptr %memberidx9.i79.i, align 4
  %memberidx10.i80.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i.sink.split

Lexer_advance.exit84.i.sink.split:                ; preds = %ifend.i78.i, %if.entry6.i81.i
  %memberidx9.i79.i.sink1059 = phi ptr [ %memberidx10.i80.i, %if.entry6.i81.i ], [ %memberidx9.i79.i, %ifend.i78.i ]
  %508 = load i64, ptr %memberidx9.i79.i.sink1059, align 4
  %509 = add nsw i64 %508, 1
  store i64 %509, ptr %memberidx9.i79.i.sink1059, align 4
  br label %Lexer_advance.exit84.i

Lexer_advance.exit84.i:                           ; preds = %Lexer_advance.exit84.i.sink.split, %if.entry4.i
  %510 = tail call ptr @malloc(i32 16)
  %511 = tail call ptr @malloc(i32 32)
  %512 = load i64, ptr %memberidx.i.i202, align 4
  %513 = add nsw i64 %512, -1
  %514 = add nsw i64 %512, 1
  %memberidx2.i60.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %515 = load i64, ptr %memberidx2.i60.i, align 4
  %516 = add i64 %515, -2
  %memberidx3.i61.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %517 = load i64, ptr %memberidx3.i61.i, align 4
  store i64 %513, ptr %511, align 4
  %memberidx1.i.i62.i = getelementptr inbounds %FloRange, ptr %511, i64 0, i32 1
  store i64 %514, ptr %memberidx1.i.i62.i, align 4
  %memberidx2.i.i63.i = getelementptr inbounds %FloRange, ptr %511, i64 0, i32 2
  store i64 %516, ptr %memberidx2.i.i63.i, align 4
  %memberidx3.i.i64.i = getelementptr inbounds %FloRange, ptr %511, i64 0, i32 3
  store i64 %517, ptr %memberidx3.i.i64.i, align 4
  store i64 45, ptr %510, align 4
  %memberidx1.i58.i = getelementptr inbounds %Token, ptr %510, i64 0, i32 1
  store ptr %511, ptr %memberidx1.i58.i, align 8
  br label %common.ret

ifend6.i:                                         ; preds = %else2.i, %if.entry.i70.i
  %518 = tail call ptr @malloc(i32 16)
  %519 = tail call ptr @malloc(i32 32)
  %520 = load i64, ptr %memberidx.i.i202, align 4
  %521 = add nsw i64 %520, -1
  %522 = add nsw i64 %520, 1
  %memberidx2.i26.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %523 = load i64, ptr %memberidx2.i26.i, align 4
  %524 = add i64 %523, -2
  %memberidx3.i27.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %525 = load i64, ptr %memberidx3.i27.i, align 4
  store i64 %521, ptr %519, align 4
  %memberidx1.i.i28.i = getelementptr inbounds %FloRange, ptr %519, i64 0, i32 1
  store i64 %522, ptr %memberidx1.i.i28.i, align 4
  %memberidx2.i.i29.i = getelementptr inbounds %FloRange, ptr %519, i64 0, i32 2
  store i64 %524, ptr %memberidx2.i.i29.i, align 4
  %memberidx3.i.i30.i = getelementptr inbounds %FloRange, ptr %519, i64 0, i32 3
  store i64 %525, ptr %memberidx3.i.i30.i, align 4
  store i64 5, ptr %518, align 4
  %memberidx1.i24.i = getelementptr inbounds %Token, ptr %518, i64 0, i32 1
  store ptr %519, ptr %memberidx1.i24.i, align 8
  br label %common.ret

if.entry27:                                       ; preds = %ifend11
  %memberidx.i.i226 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %526 = load i64, ptr %memberidx.i.i226, align 4
  %527 = add nsw i64 %526, 1
  %memberidx1.i.i227 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %528 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i.i228 = getelementptr inbounds %string, ptr %528, i64 0, i32 2
  %529 = load i64, ptr %memberidx2.i.i228, align 4
  %530 = icmp slt i64 %527, %529
  br i1 %530, label %if.entry.i.i230, label %else.i258

if.entry.i.i230:                                  ; preds = %if.entry27
  %531 = load ptr, ptr %528, align 8
  %memberidx4.i.i229 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %531, i64 0, i32 2
  %532 = load ptr, ptr %memberidx4.i.i229, align 8
  %533 = tail call i8 %532(ptr nonnull %528, i64 %527)
  %phi.cmp902 = icmp eq i8 %533, 61
  %534 = load i64, ptr %memberidx.i.i226, align 4
  %535 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i.i.i236 = getelementptr inbounds %string, ptr %535, i64 0, i32 2
  %536 = load i64, ptr %memberidx2.i.i.i236, align 4
  br i1 %phi.cmp902, label %if.entry.i237, label %if.entry.i.i230.else.i258_crit_edge

if.entry.i.i230.else.i258_crit_edge:              ; preds = %if.entry.i.i230
  %.pre1033 = add nsw i64 %534, 1
  br label %else.i258

if.entry.i237:                                    ; preds = %if.entry.i.i230
  %.not907 = icmp slt i64 %534, %536
  br i1 %.not907, label %ifend.i.i241, label %Lexer_advance.exit.i254

ifend.i.i241:                                     ; preds = %if.entry.i237
  %537 = load ptr, ptr %535, align 8
  %memberidx2.i17.i239 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %537, i64 0, i32 2
  %538 = load ptr, ptr %memberidx2.i17.i239, align 8
  %539 = add nsw i64 %534, 1
  store i64 %539, ptr %memberidx.i.i226, align 4
  %540 = tail call i8 %538(ptr nonnull %535, i64 %539)
  store i8 %540, ptr %0, align 1
  %541 = icmp eq i8 %540, 10
  %memberidx9.i.i242 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %541, label %if.entry6.i.i244, label %Lexer_advance.exit.i254.sink.split

if.entry6.i.i244:                                 ; preds = %ifend.i.i241
  store i64 0, ptr %memberidx9.i.i242, align 4
  %memberidx10.i.i243 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i254.sink.split

Lexer_advance.exit.i254.sink.split:               ; preds = %ifend.i.i241, %if.entry6.i.i244
  %memberidx9.i.i242.sink1061 = phi ptr [ %memberidx10.i.i243, %if.entry6.i.i244 ], [ %memberidx9.i.i242, %ifend.i.i241 ]
  %542 = load i64, ptr %memberidx9.i.i242.sink1061, align 4
  %543 = add nsw i64 %542, 1
  store i64 %543, ptr %memberidx9.i.i242.sink1061, align 4
  br label %Lexer_advance.exit.i254

Lexer_advance.exit.i254:                          ; preds = %Lexer_advance.exit.i254.sink.split, %if.entry.i237
  %544 = tail call ptr @malloc(i32 16)
  %545 = tail call ptr @malloc(i32 32)
  %546 = load i64, ptr %memberidx.i.i226, align 4
  %547 = add nsw i64 %546, -1
  %548 = add nsw i64 %546, 1
  %memberidx2.i19.i248 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %549 = load i64, ptr %memberidx2.i19.i248, align 4
  %550 = add i64 %549, -2
  %memberidx3.i20.i249 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %551 = load i64, ptr %memberidx3.i20.i249, align 4
  store i64 %547, ptr %545, align 4
  %memberidx1.i.i21.i250 = getelementptr inbounds %FloRange, ptr %545, i64 0, i32 1
  store i64 %548, ptr %memberidx1.i.i21.i250, align 4
  %memberidx2.i.i22.i251 = getelementptr inbounds %FloRange, ptr %545, i64 0, i32 2
  store i64 %550, ptr %memberidx2.i.i22.i251, align 4
  %memberidx3.i.i.i252 = getelementptr inbounds %FloRange, ptr %545, i64 0, i32 3
  store i64 %551, ptr %memberidx3.i.i.i252, align 4
  store i64 12, ptr %544, align 4
  %memberidx1.i23.i253 = getelementptr inbounds %Token, ptr %544, i64 0, i32 1
  store ptr %545, ptr %memberidx1.i23.i253, align 8
  br label %common.ret

else.i258:                                        ; preds = %if.entry.i.i230.else.i258_crit_edge, %if.entry27
  %.pre-phi1034 = phi i64 [ %.pre1033, %if.entry.i.i230.else.i258_crit_edge ], [ %527, %if.entry27 ]
  %552 = phi i64 [ %536, %if.entry.i.i230.else.i258_crit_edge ], [ %529, %if.entry27 ]
  %553 = phi ptr [ %535, %if.entry.i.i230.else.i258_crit_edge ], [ %528, %if.entry27 ]
  %554 = icmp slt i64 %.pre-phi1034, %552
  br i1 %554, label %if.entry.i36.i260, label %ifend3.i278

if.entry.i36.i260:                                ; preds = %else.i258
  %555 = load ptr, ptr %553, align 8
  %memberidx4.i35.i259 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %555, i64 0, i32 2
  %556 = load ptr, ptr %memberidx4.i35.i259, align 8
  %557 = tail call i8 %556(ptr nonnull %553, i64 %.pre-phi1034)
  %phi.cmp903 = icmp eq i8 %557, 42
  br i1 %phi.cmp903, label %if.entry1.i266, label %ifend3.i278

if.entry1.i266:                                   ; preds = %if.entry.i36.i260
  %558 = load i64, ptr %memberidx.i.i226, align 4
  %559 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i.i40.i265 = getelementptr inbounds %string, ptr %559, i64 0, i32 2
  %560 = load i64, ptr %memberidx2.i.i40.i265, align 4
  %.not904 = icmp slt i64 %558, %560
  br i1 %.not904, label %ifend.i44.i270, label %Lexer_advance.exit50.i277

ifend.i44.i270:                                   ; preds = %if.entry1.i266
  %561 = load ptr, ptr %559, align 8
  %memberidx2.i42.i268 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %561, i64 0, i32 2
  %562 = load ptr, ptr %memberidx2.i42.i268, align 8
  %563 = add nsw i64 %558, 1
  store i64 %563, ptr %memberidx.i.i226, align 4
  %564 = tail call i8 %562(ptr nonnull %559, i64 %563)
  store i8 %564, ptr %0, align 1
  %565 = icmp eq i8 %564, 10
  %memberidx9.i45.i271 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %565, label %if.entry6.i47.i273, label %Lexer_advance.exit50.i277.sink.split

if.entry6.i47.i273:                               ; preds = %ifend.i44.i270
  store i64 0, ptr %memberidx9.i45.i271, align 4
  %memberidx10.i46.i272 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i277.sink.split

Lexer_advance.exit50.i277.sink.split:             ; preds = %ifend.i44.i270, %if.entry6.i47.i273
  %memberidx9.i45.i271.sink1063 = phi ptr [ %memberidx10.i46.i272, %if.entry6.i47.i273 ], [ %memberidx9.i45.i271, %ifend.i44.i270 ]
  %566 = load i64, ptr %memberidx9.i45.i271.sink1063, align 4
  %567 = add nsw i64 %566, 1
  store i64 %567, ptr %memberidx9.i45.i271.sink1063, align 4
  br label %Lexer_advance.exit50.i277

Lexer_advance.exit50.i277:                        ; preds = %Lexer_advance.exit50.i277.sink.split, %if.entry1.i266
  %568 = load i64, ptr %memberidx.i.i226, align 4
  %569 = add nsw i64 %568, 1
  %570 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i53.i = getelementptr inbounds %string, ptr %570, i64 0, i32 2
  %571 = load i64, ptr %memberidx2.i53.i, align 4
  %572 = icmp slt i64 %569, %571
  br i1 %572, label %if.entry.i56.i, label %ifend6.i301

if.entry.i56.i:                                   ; preds = %Lexer_advance.exit50.i277
  %573 = load ptr, ptr %570, align 8
  %memberidx4.i55.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %573, i64 0, i32 2
  %574 = load ptr, ptr %memberidx4.i55.i, align 8
  %575 = tail call i8 %574(ptr nonnull %570, i64 %569)
  %phi.cmp905 = icmp eq i8 %575, 61
  br i1 %phi.cmp905, label %if.entry4.i282, label %ifend6.i301

ifend3.i278:                                      ; preds = %else.i258, %if.entry.i36.i260
  %576 = tail call ptr @malloc(i32 16)
  %577 = tail call ptr @malloc(i32 32)
  %578 = load i64, ptr %memberidx.i.i226, align 4
  %579 = add nsw i64 %578, 1
  %memberidx2.i59.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %580 = load i64, ptr %memberidx2.i59.i, align 4
  %581 = add i64 %580, -1
  %memberidx3.i60.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %582 = load i64, ptr %memberidx3.i60.i, align 4
  store i64 %578, ptr %577, align 4
  %memberidx1.i.i61.i = getelementptr inbounds %FloRange, ptr %577, i64 0, i32 1
  store i64 %579, ptr %memberidx1.i.i61.i, align 4
  %memberidx2.i.i62.i = getelementptr inbounds %FloRange, ptr %577, i64 0, i32 2
  store i64 %581, ptr %memberidx2.i.i62.i, align 4
  %memberidx3.i.i63.i = getelementptr inbounds %FloRange, ptr %577, i64 0, i32 3
  store i64 %582, ptr %memberidx3.i.i63.i, align 4
  store i64 4, ptr %576, align 4
  %memberidx1.i64.i = getelementptr inbounds %Token, ptr %576, i64 0, i32 1
  store ptr %577, ptr %memberidx1.i64.i, align 8
  br label %common.ret

if.entry4.i282:                                   ; preds = %if.entry.i56.i
  %583 = load i64, ptr %memberidx.i.i226, align 4
  %584 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i.i74.i281 = getelementptr inbounds %string, ptr %584, i64 0, i32 2
  %585 = load i64, ptr %memberidx2.i.i74.i281, align 4
  %.not906 = icmp slt i64 %583, %585
  br i1 %.not906, label %ifend.i78.i286, label %Lexer_advance.exit84.i293

ifend.i78.i286:                                   ; preds = %if.entry4.i282
  %586 = load ptr, ptr %584, align 8
  %memberidx2.i76.i284 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %586, i64 0, i32 2
  %587 = load ptr, ptr %memberidx2.i76.i284, align 8
  %588 = add nsw i64 %583, 1
  store i64 %588, ptr %memberidx.i.i226, align 4
  %589 = tail call i8 %587(ptr nonnull %584, i64 %588)
  store i8 %589, ptr %0, align 1
  %590 = icmp eq i8 %589, 10
  %memberidx9.i79.i287 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %590, label %if.entry6.i81.i289, label %Lexer_advance.exit84.i293.sink.split

if.entry6.i81.i289:                               ; preds = %ifend.i78.i286
  store i64 0, ptr %memberidx9.i79.i287, align 4
  %memberidx10.i80.i288 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i293.sink.split

Lexer_advance.exit84.i293.sink.split:             ; preds = %ifend.i78.i286, %if.entry6.i81.i289
  %memberidx9.i79.i287.sink1065 = phi ptr [ %memberidx10.i80.i288, %if.entry6.i81.i289 ], [ %memberidx9.i79.i287, %ifend.i78.i286 ]
  %591 = load i64, ptr %memberidx9.i79.i287.sink1065, align 4
  %592 = add nsw i64 %591, 1
  store i64 %592, ptr %memberidx9.i79.i287.sink1065, align 4
  br label %Lexer_advance.exit84.i293

Lexer_advance.exit84.i293:                        ; preds = %Lexer_advance.exit84.i293.sink.split, %if.entry4.i282
  %593 = tail call ptr @malloc(i32 16)
  %594 = tail call ptr @malloc(i32 32)
  %595 = load i64, ptr %memberidx.i.i226, align 4
  %596 = add nsw i64 %595, -2
  %597 = add nsw i64 %595, 1
  %memberidx2.i67.i292 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %598 = load i64, ptr %memberidx2.i67.i292, align 4
  %599 = add i64 %598, -3
  %memberidx3.i68.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %600 = load i64, ptr %memberidx3.i68.i, align 4
  store i64 %596, ptr %594, align 4
  %memberidx1.i.i69.i = getelementptr inbounds %FloRange, ptr %594, i64 0, i32 1
  store i64 %597, ptr %memberidx1.i.i69.i, align 4
  %memberidx2.i.i70.i = getelementptr inbounds %FloRange, ptr %594, i64 0, i32 2
  store i64 %599, ptr %memberidx2.i.i70.i, align 4
  %memberidx3.i.i71.i = getelementptr inbounds %FloRange, ptr %594, i64 0, i32 3
  store i64 %600, ptr %memberidx3.i.i71.i, align 4
  store i64 17, ptr %593, align 4
  %memberidx1.i65.i = getelementptr inbounds %Token, ptr %593, i64 0, i32 1
  store ptr %594, ptr %memberidx1.i65.i, align 8
  br label %common.ret

ifend6.i301:                                      ; preds = %Lexer_advance.exit50.i277, %if.entry.i56.i
  %601 = tail call ptr @malloc(i32 16)
  %602 = tail call ptr @malloc(i32 32)
  %603 = load i64, ptr %memberidx.i.i226, align 4
  %604 = add nsw i64 %603, -1
  %605 = add nsw i64 %603, 1
  %memberidx2.i26.i295 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %606 = load i64, ptr %memberidx2.i26.i295, align 4
  %607 = add i64 %606, -2
  %memberidx3.i27.i296 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %608 = load i64, ptr %memberidx3.i27.i296, align 4
  store i64 %604, ptr %602, align 4
  %memberidx1.i.i28.i297 = getelementptr inbounds %FloRange, ptr %602, i64 0, i32 1
  store i64 %605, ptr %memberidx1.i.i28.i297, align 4
  %memberidx2.i.i29.i298 = getelementptr inbounds %FloRange, ptr %602, i64 0, i32 2
  store i64 %607, ptr %memberidx2.i.i29.i298, align 4
  %memberidx3.i.i30.i299 = getelementptr inbounds %FloRange, ptr %602, i64 0, i32 3
  store i64 %608, ptr %memberidx3.i.i30.i299, align 4
  store i64 11, ptr %601, align 4
  %memberidx1.i24.i300 = getelementptr inbounds %Token, ptr %601, i64 0, i32 1
  store ptr %602, ptr %memberidx1.i24.i300, align 8
  br label %common.ret

if.entry30:                                       ; preds = %ifend11
  %memberidx.i.i302 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %609 = load i64, ptr %memberidx.i.i302, align 4
  %610 = add nsw i64 %609, 1
  %memberidx1.i.i303 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %611 = load ptr, ptr %memberidx1.i.i303, align 8
  %memberidx2.i.i304 = getelementptr inbounds %string, ptr %611, i64 0, i32 2
  %612 = load i64, ptr %memberidx2.i.i304, align 4
  %613 = icmp slt i64 %610, %612
  br i1 %613, label %if.entry.i.i306, label %ifend.i323

if.entry.i.i306:                                  ; preds = %if.entry30
  %614 = load ptr, ptr %611, align 8
  %memberidx4.i.i305 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %614, i64 0, i32 2
  %615 = load ptr, ptr %memberidx4.i.i305, align 8
  %616 = tail call i8 %615(ptr nonnull %611, i64 %610)
  %phi.cmp900 = icmp eq i8 %616, 61
  br i1 %phi.cmp900, label %if.entry.i313, label %ifend.i323

if.entry.i313:                                    ; preds = %if.entry.i.i306
  %617 = load i64, ptr %memberidx.i.i302, align 4
  %618 = load ptr, ptr %memberidx1.i.i303, align 8
  %memberidx2.i.i.i312 = getelementptr inbounds %string, ptr %618, i64 0, i32 2
  %619 = load i64, ptr %memberidx2.i.i.i312, align 4
  %.not901 = icmp slt i64 %617, %619
  br i1 %.not901, label %ifend.i.i315, label %Lexer_advance.exit.i322

ifend.i.i315:                                     ; preds = %if.entry.i313
  %620 = load ptr, ptr %618, align 8
  %memberidx2.i5.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %620, i64 0, i32 2
  %621 = load ptr, ptr %memberidx2.i5.i, align 8
  %622 = add nsw i64 %617, 1
  store i64 %622, ptr %memberidx.i.i302, align 4
  %623 = tail call i8 %621(ptr nonnull %618, i64 %622)
  store i8 %623, ptr %0, align 1
  %624 = icmp eq i8 %623, 10
  %memberidx9.i.i316 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %624, label %if.entry6.i.i318, label %Lexer_advance.exit.i322.sink.split

if.entry6.i.i318:                                 ; preds = %ifend.i.i315
  store i64 0, ptr %memberidx9.i.i316, align 4
  %memberidx10.i.i317 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i322.sink.split

Lexer_advance.exit.i322.sink.split:               ; preds = %ifend.i.i315, %if.entry6.i.i318
  %memberidx9.i.i316.sink1067 = phi ptr [ %memberidx10.i.i317, %if.entry6.i.i318 ], [ %memberidx9.i.i316, %ifend.i.i315 ]
  %625 = load i64, ptr %memberidx9.i.i316.sink1067, align 4
  %626 = add nsw i64 %625, 1
  store i64 %626, ptr %memberidx9.i.i316.sink1067, align 4
  br label %Lexer_advance.exit.i322

Lexer_advance.exit.i322:                          ; preds = %Lexer_advance.exit.i322.sink.split, %if.entry.i313
  %627 = tail call ptr @malloc(i32 16)
  %628 = tail call ptr @malloc(i32 32)
  %629 = load i64, ptr %memberidx.i.i302, align 4
  %630 = add nsw i64 %629, -1
  %631 = add nsw i64 %629, 1
  %memberidx2.i7.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %632 = load i64, ptr %memberidx2.i7.i, align 4
  %633 = add i64 %632, -2
  %memberidx3.i8.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %634 = load i64, ptr %memberidx3.i8.i, align 4
  store i64 %630, ptr %628, align 4
  %memberidx1.i.i9.i = getelementptr inbounds %FloRange, ptr %628, i64 0, i32 1
  store i64 %631, ptr %memberidx1.i.i9.i, align 4
  %memberidx2.i.i10.i = getelementptr inbounds %FloRange, ptr %628, i64 0, i32 2
  store i64 %633, ptr %memberidx2.i.i10.i, align 4
  %memberidx3.i.i.i321 = getelementptr inbounds %FloRange, ptr %628, i64 0, i32 3
  store i64 %634, ptr %memberidx3.i.i.i321, align 4
  store i64 16, ptr %627, align 4
  %memberidx1.i11.i = getelementptr inbounds %Token, ptr %627, i64 0, i32 1
  store ptr %628, ptr %memberidx1.i11.i, align 8
  br label %common.ret

ifend.i323:                                       ; preds = %if.entry30, %if.entry.i.i306
  %635 = tail call ptr @malloc(i32 16)
  %636 = tail call ptr @malloc(i32 32)
  %637 = load i64, ptr %memberidx.i.i302, align 4
  %638 = add nsw i64 %637, 1
  %memberidx2.i14.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %639 = load i64, ptr %memberidx2.i14.i, align 4
  %640 = add i64 %639, -1
  %memberidx3.i15.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %641 = load i64, ptr %memberidx3.i15.i, align 4
  store i64 %637, ptr %636, align 4
  %memberidx1.i.i16.i = getelementptr inbounds %FloRange, ptr %636, i64 0, i32 1
  store i64 %638, ptr %memberidx1.i.i16.i, align 4
  %memberidx2.i.i17.i = getelementptr inbounds %FloRange, ptr %636, i64 0, i32 2
  store i64 %640, ptr %memberidx2.i.i17.i, align 4
  %memberidx3.i.i18.i = getelementptr inbounds %FloRange, ptr %636, i64 0, i32 3
  store i64 %641, ptr %memberidx3.i.i18.i, align 4
  store i64 10, ptr %635, align 4
  %memberidx1.i12.i = getelementptr inbounds %Token, ptr %635, i64 0, i32 1
  store ptr %636, ptr %memberidx1.i12.i, align 8
  br label %common.ret

if.entry33:                                       ; preds = %ifend11
  %memberidx.i.i324 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %642 = load i64, ptr %memberidx.i.i324, align 4
  %643 = add nsw i64 %642, 1
  %memberidx1.i.i325 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %644 = load ptr, ptr %memberidx1.i.i325, align 8
  %memberidx2.i.i326 = getelementptr inbounds %string, ptr %644, i64 0, i32 2
  %645 = load i64, ptr %memberidx2.i.i326, align 4
  %646 = icmp slt i64 %643, %645
  br i1 %646, label %if.entry.i.i328, label %ifend.i360

if.entry.i.i328:                                  ; preds = %if.entry33
  %647 = load ptr, ptr %644, align 8
  %memberidx4.i.i327 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %647, i64 0, i32 2
  %648 = load ptr, ptr %memberidx4.i.i327, align 8
  %649 = tail call i8 %648(ptr nonnull %644, i64 %643)
  %phi.cmp898 = icmp eq i8 %649, 61
  br i1 %phi.cmp898, label %if.entry.i335, label %ifend.i360

if.entry.i335:                                    ; preds = %if.entry.i.i328
  %650 = load i64, ptr %memberidx.i.i324, align 4
  %651 = load ptr, ptr %memberidx1.i.i325, align 8
  %memberidx2.i.i.i334 = getelementptr inbounds %string, ptr %651, i64 0, i32 2
  %652 = load i64, ptr %memberidx2.i.i.i334, align 4
  %.not899 = icmp slt i64 %650, %652
  br i1 %.not899, label %ifend.i.i339, label %Lexer_advance.exit.i352

ifend.i.i339:                                     ; preds = %if.entry.i335
  %653 = load ptr, ptr %651, align 8
  %memberidx2.i5.i337 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %653, i64 0, i32 2
  %654 = load ptr, ptr %memberidx2.i5.i337, align 8
  %655 = add nsw i64 %650, 1
  store i64 %655, ptr %memberidx.i.i324, align 4
  %656 = tail call i8 %654(ptr nonnull %651, i64 %655)
  store i8 %656, ptr %0, align 1
  %657 = icmp eq i8 %656, 10
  %memberidx9.i.i340 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %657, label %if.entry6.i.i342, label %Lexer_advance.exit.i352.sink.split

if.entry6.i.i342:                                 ; preds = %ifend.i.i339
  store i64 0, ptr %memberidx9.i.i340, align 4
  %memberidx10.i.i341 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i352.sink.split

Lexer_advance.exit.i352.sink.split:               ; preds = %ifend.i.i339, %if.entry6.i.i342
  %memberidx9.i.i340.sink1069 = phi ptr [ %memberidx10.i.i341, %if.entry6.i.i342 ], [ %memberidx9.i.i340, %ifend.i.i339 ]
  %658 = load i64, ptr %memberidx9.i.i340.sink1069, align 4
  %659 = add nsw i64 %658, 1
  store i64 %659, ptr %memberidx9.i.i340.sink1069, align 4
  br label %Lexer_advance.exit.i352

Lexer_advance.exit.i352:                          ; preds = %Lexer_advance.exit.i352.sink.split, %if.entry.i335
  %660 = tail call ptr @malloc(i32 16)
  %661 = tail call ptr @malloc(i32 32)
  %662 = load i64, ptr %memberidx.i.i324, align 4
  %663 = add nsw i64 %662, -1
  %664 = add nsw i64 %662, 1
  %memberidx2.i7.i346 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %665 = load i64, ptr %memberidx2.i7.i346, align 4
  %666 = add i64 %665, -2
  %memberidx3.i8.i347 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %667 = load i64, ptr %memberidx3.i8.i347, align 4
  store i64 %663, ptr %661, align 4
  %memberidx1.i.i9.i348 = getelementptr inbounds %FloRange, ptr %661, i64 0, i32 1
  store i64 %664, ptr %memberidx1.i.i9.i348, align 4
  %memberidx2.i.i10.i349 = getelementptr inbounds %FloRange, ptr %661, i64 0, i32 2
  store i64 %666, ptr %memberidx2.i.i10.i349, align 4
  %memberidx3.i.i.i350 = getelementptr inbounds %FloRange, ptr %661, i64 0, i32 3
  store i64 %667, ptr %memberidx3.i.i.i350, align 4
  store i64 20, ptr %660, align 4
  %memberidx1.i11.i351 = getelementptr inbounds %Token, ptr %660, i64 0, i32 1
  store ptr %661, ptr %memberidx1.i11.i351, align 8
  br label %common.ret

ifend.i360:                                       ; preds = %if.entry33, %if.entry.i.i328
  %668 = tail call ptr @malloc(i32 16)
  %669 = tail call ptr @malloc(i32 32)
  %670 = load i64, ptr %memberidx.i.i324, align 4
  %671 = add nsw i64 %670, 1
  %memberidx2.i14.i354 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %672 = load i64, ptr %memberidx2.i14.i354, align 4
  %673 = add i64 %672, -1
  %memberidx3.i15.i355 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %674 = load i64, ptr %memberidx3.i15.i355, align 4
  store i64 %670, ptr %669, align 4
  %memberidx1.i.i16.i356 = getelementptr inbounds %FloRange, ptr %669, i64 0, i32 1
  store i64 %671, ptr %memberidx1.i.i16.i356, align 4
  %memberidx2.i.i17.i357 = getelementptr inbounds %FloRange, ptr %669, i64 0, i32 2
  store i64 %673, ptr %memberidx2.i.i17.i357, align 4
  %memberidx3.i.i18.i358 = getelementptr inbounds %FloRange, ptr %669, i64 0, i32 3
  store i64 %674, ptr %memberidx3.i.i18.i358, align 4
  store i64 51, ptr %668, align 4
  %memberidx1.i12.i359 = getelementptr inbounds %Token, ptr %668, i64 0, i32 1
  store ptr %669, ptr %memberidx1.i12.i359, align 8
  br label %common.ret

if.entry36:                                       ; preds = %ifend11
  %memberidx.i.i361 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %675 = load i64, ptr %memberidx.i.i361, align 4
  %676 = add nsw i64 %675, 1
  %memberidx1.i.i362 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %677 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i363 = getelementptr inbounds %string, ptr %677, i64 0, i32 2
  %678 = load i64, ptr %memberidx2.i.i363, align 4
  %679 = icmp slt i64 %676, %678
  br i1 %679, label %Lexer_peek.exit.i367, label %else.i382

Lexer_peek.exit.i367:                             ; preds = %if.entry36
  %680 = load ptr, ptr %677, align 8
  %memberidx4.i.i364 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %680, i64 0, i32 2
  %681 = load ptr, ptr %memberidx4.i.i364, align 8
  %682 = tail call i8 %681(ptr nonnull %677, i64 %676)
  %683 = icmp eq i8 %682, 42
  %684 = load i64, ptr %memberidx.i.i361, align 4
  %685 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i.i370 = getelementptr inbounds %string, ptr %685, i64 0, i32 2
  %686 = load i64, ptr %memberidx2.i.i.i370, align 4
  br i1 %683, label %if.entry.i371, label %Lexer_peek.exit.i367.else.i382_crit_edge

Lexer_peek.exit.i367.else.i382_crit_edge:         ; preds = %Lexer_peek.exit.i367
  %.pre1035 = add nsw i64 %684, 1
  br label %else.i382

if.entry.i371:                                    ; preds = %Lexer_peek.exit.i367
  %.not892 = icmp slt i64 %684, %686
  br i1 %.not892, label %ifend.i.i375, label %Lexer_advance.exit.i381

ifend.i.i375:                                     ; preds = %if.entry.i371
  %687 = load ptr, ptr %685, align 8
  %memberidx2.i27.i373 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %687, i64 0, i32 2
  %688 = load ptr, ptr %memberidx2.i27.i373, align 8
  %689 = add nsw i64 %684, 1
  store i64 %689, ptr %memberidx.i.i361, align 4
  %690 = tail call i8 %688(ptr nonnull %685, i64 %689)
  store i8 %690, ptr %0, align 1
  %691 = icmp eq i8 %690, 10
  %memberidx9.i.i376 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %691, label %if.entry6.i.i378, label %Lexer_advance.exit.i381.sink.split

if.entry6.i.i378:                                 ; preds = %ifend.i.i375
  store i64 0, ptr %memberidx9.i.i376, align 4
  %memberidx10.i.i377 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i381.sink.split

Lexer_advance.exit.i381.sink.split:               ; preds = %ifend.i.i375, %if.entry6.i.i378
  %memberidx9.i.i376.sink1071 = phi ptr [ %memberidx10.i.i377, %if.entry6.i.i378 ], [ %memberidx9.i.i376, %ifend.i.i375 ]
  %692 = load i64, ptr %memberidx9.i.i376.sink1071, align 4
  %693 = add nsw i64 %692, 1
  store i64 %693, ptr %memberidx9.i.i376.sink1071, align 4
  br label %Lexer_advance.exit.i381

Lexer_advance.exit.i381:                          ; preds = %Lexer_advance.exit.i381.sink.split, %if.entry.i371
  %694 = load i64, ptr %memberidx.i.i361, align 4
  %695 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i30.i = getelementptr inbounds %string, ptr %695, i64 0, i32 2
  %696 = load i64, ptr %memberidx2.i30.i, align 4
  %.not893 = icmp slt i64 %694, %696
  br i1 %.not893, label %while.entry.i.preheader, label %while.end.i

while.entry.i.preheader:                          ; preds = %Lexer_advance.exit.i381
  %memberidx12.i98.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i96.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.i

else.i382:                                        ; preds = %Lexer_peek.exit.i367.else.i382_crit_edge, %if.entry36
  %.pre-phi1036 = phi i64 [ %.pre1035, %Lexer_peek.exit.i367.else.i382_crit_edge ], [ %676, %if.entry36 ]
  %697 = phi i64 [ %686, %Lexer_peek.exit.i367.else.i382_crit_edge ], [ %678, %if.entry36 ]
  %698 = phi ptr [ %685, %Lexer_peek.exit.i367.else.i382_crit_edge ], [ %677, %if.entry36 ]
  %699 = icmp slt i64 %.pre-phi1036, %697
  br i1 %699, label %if.entry.i46.i, label %ifend41

if.entry.i46.i:                                   ; preds = %else.i382
  %700 = load ptr, ptr %698, align 8
  %memberidx4.i45.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %700, i64 0, i32 2
  %701 = load ptr, ptr %memberidx4.i45.i, align 8
  %702 = tail call i8 %701(ptr nonnull %698, i64 %.pre-phi1036)
  %phi.cmp885 = icmp eq i8 %702, 47
  %703 = load i64, ptr %memberidx.i.i361, align 4
  %704 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i119.i = getelementptr inbounds %string, ptr %704, i64 0, i32 2
  %705 = load i64, ptr %memberidx2.i.i119.i, align 4
  br i1 %phi.cmp885, label %if.entry4.i386, label %if.entry.i46.i.ifend41_crit_edge

if.entry.i46.i.ifend41_crit_edge:                 ; preds = %if.entry.i46.i
  %.pre1037 = add nsw i64 %703, 1
  br label %ifend41

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Lexer_advance.exit100.i
  %706 = phi i64 [ %696, %while.entry.i.preheader ], [ %755, %Lexer_advance.exit100.i ]
  %707 = phi ptr [ %695, %while.entry.i.preheader ], [ %754, %Lexer_advance.exit100.i ]
  %708 = phi i64 [ %694, %while.entry.i.preheader ], [ %753, %Lexer_advance.exit100.i ]
  %709 = add nsw i64 %708, 1
  %710 = icmp slt i64 %709, %706
  br i1 %710, label %if.entry.i53.i, label %Lexer_peek.exit54.i

if.entry.i53.i:                                   ; preds = %while.entry.i
  %711 = load ptr, ptr %707, align 8
  %memberidx4.i52.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %711, i64 0, i32 2
  %712 = load ptr, ptr %memberidx4.i52.i, align 8
  %713 = tail call i8 %712(ptr nonnull %707, i64 %709)
  %.pre997 = load i64, ptr %memberidx.i.i361, align 4
  %.pre998 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i57.i.phi.trans.insert = getelementptr inbounds %string, ptr %.pre998, i64 0, i32 2
  %.pre999 = load i64, ptr %memberidx2.i57.i.phi.trans.insert, align 4
  br label %Lexer_peek.exit54.i

Lexer_peek.exit54.i:                              ; preds = %if.entry.i53.i, %while.entry.i
  %714 = phi i64 [ %.pre999, %if.entry.i53.i ], [ %706, %while.entry.i ]
  %715 = phi ptr [ %.pre998, %if.entry.i53.i ], [ %707, %while.entry.i ]
  %716 = phi i64 [ %.pre997, %if.entry.i53.i ], [ %708, %while.entry.i ]
  %common.ret.op.i51.i = phi i8 [ %713, %if.entry.i53.i ], [ 0, %while.entry.i ]
  %717 = add nsw i64 %716, 2
  %718 = icmp slt i64 %717, %714
  br i1 %718, label %Lexer_peek.exit61.i, label %ifend3.i385

Lexer_peek.exit61.i:                              ; preds = %Lexer_peek.exit54.i
  %719 = icmp eq i8 %common.ret.op.i51.i, 42
  %720 = load ptr, ptr %715, align 8
  %memberidx4.i59.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %720, i64 0, i32 2
  %721 = load ptr, ptr %memberidx4.i59.i, align 8
  %722 = tail call i8 %721(ptr nonnull %715, i64 %717)
  %723 = icmp eq i8 %722, 47
  %724 = and i1 %719, %723
  %.pre1003.pre = load i64, ptr %memberidx.i.i361, align 4
  %.pre1004.pre = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i64.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds %string, ptr %.pre1004.pre, i64 0, i32 2
  %.pre1005.pre = load i64, ptr %memberidx2.i.i64.i.phi.trans.insert.phi.trans.insert, align 4
  br i1 %724, label %while.end.i, label %ifend3.i385

while.end.i:                                      ; preds = %Lexer_advance.exit100.i, %Lexer_peek.exit61.i, %Lexer_advance.exit.i381
  %725 = phi i64 [ %696, %Lexer_advance.exit.i381 ], [ %.pre1005.pre, %Lexer_peek.exit61.i ], [ %755, %Lexer_advance.exit100.i ]
  %726 = phi ptr [ %695, %Lexer_advance.exit.i381 ], [ %.pre1004.pre, %Lexer_peek.exit61.i ], [ %754, %Lexer_advance.exit100.i ]
  %727 = phi i64 [ %694, %Lexer_advance.exit.i381 ], [ %.pre1003.pre, %Lexer_peek.exit61.i ], [ %753, %Lexer_advance.exit100.i ]
  %.not896 = icmp slt i64 %727, %725
  br i1 %.not896, label %ifend.i68.i, label %Lexer_advance.exit74.i

ifend.i68.i:                                      ; preds = %while.end.i
  %728 = load ptr, ptr %726, align 8
  %memberidx2.i66.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %728, i64 0, i32 2
  %729 = load ptr, ptr %memberidx2.i66.i, align 8
  %730 = add nsw i64 %727, 1
  store i64 %730, ptr %memberidx.i.i361, align 4
  %731 = tail call i8 %729(ptr nonnull %726, i64 %730)
  store i8 %731, ptr %0, align 1
  %732 = icmp eq i8 %731, 10
  %memberidx9.i69.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %732, label %if.entry6.i71.i, label %Lexer_advance.exit74.i.sink.split

if.entry6.i71.i:                                  ; preds = %ifend.i68.i
  store i64 0, ptr %memberidx9.i69.i, align 4
  %memberidx10.i70.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit74.i.sink.split

Lexer_advance.exit74.i.sink.split:                ; preds = %ifend.i68.i, %if.entry6.i71.i
  %memberidx9.i69.i.sink1073 = phi ptr [ %memberidx10.i70.i, %if.entry6.i71.i ], [ %memberidx9.i69.i, %ifend.i68.i ]
  %733 = load i64, ptr %memberidx9.i69.i.sink1073, align 4
  %734 = add nsw i64 %733, 1
  store i64 %734, ptr %memberidx9.i69.i.sink1073, align 4
  br label %Lexer_advance.exit74.i

Lexer_advance.exit74.i:                           ; preds = %Lexer_advance.exit74.i.sink.split, %while.end.i
  %735 = load i64, ptr %memberidx.i.i361, align 4
  %736 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i77.i = getelementptr inbounds %string, ptr %736, i64 0, i32 2
  %737 = load i64, ptr %memberidx2.i.i77.i, align 4
  %.not897 = icmp slt i64 %735, %737
  br i1 %.not897, label %ifend.i81.i, label %if.entry39

ifend.i81.i:                                      ; preds = %Lexer_advance.exit74.i
  %738 = load ptr, ptr %736, align 8
  %memberidx2.i79.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %738, i64 0, i32 2
  %739 = load ptr, ptr %memberidx2.i79.i, align 8
  %740 = add nsw i64 %735, 1
  store i64 %740, ptr %memberidx.i.i361, align 4
  %741 = tail call i8 %739(ptr nonnull %736, i64 %740)
  store i8 %741, ptr %0, align 1
  %742 = icmp eq i8 %741, 10
  %memberidx9.i82.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %742, label %if.entry6.i84.i, label %if.entry39.sink.split

if.entry6.i84.i:                                  ; preds = %ifend.i81.i
  store i64 0, ptr %memberidx9.i82.i, align 4
  %memberidx10.i83.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %if.entry39.sink.split

ifend3.i385:                                      ; preds = %Lexer_peek.exit61.i, %Lexer_peek.exit54.i
  %743 = phi i64 [ %714, %Lexer_peek.exit54.i ], [ %.pre1005.pre, %Lexer_peek.exit61.i ]
  %744 = phi ptr [ %715, %Lexer_peek.exit54.i ], [ %.pre1004.pre, %Lexer_peek.exit61.i ]
  %745 = phi i64 [ %716, %Lexer_peek.exit54.i ], [ %.pre1003.pre, %Lexer_peek.exit61.i ]
  %.not894 = icmp slt i64 %745, %743
  br i1 %.not894, label %ifend.i94.i, label %Lexer_advance.exit100.i

ifend.i94.i:                                      ; preds = %ifend3.i385
  %746 = load ptr, ptr %744, align 8
  %memberidx2.i92.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %746, i64 0, i32 2
  %747 = load ptr, ptr %memberidx2.i92.i, align 8
  %748 = add nsw i64 %745, 1
  store i64 %748, ptr %memberidx.i.i361, align 4
  %749 = tail call i8 %747(ptr nonnull %744, i64 %748)
  store i8 %749, ptr %0, align 1
  %750 = icmp eq i8 %749, 10
  br i1 %750, label %if.entry6.i97.i, label %Lexer_advance.exit100.i.sink.split

if.entry6.i97.i:                                  ; preds = %ifend.i94.i
  store i64 0, ptr %memberidx12.i98.i, align 4
  br label %Lexer_advance.exit100.i.sink.split

Lexer_advance.exit100.i.sink.split:               ; preds = %ifend.i94.i, %if.entry6.i97.i
  %memberidx12.i98.i.sink1075 = phi ptr [ %memberidx10.i96.i, %if.entry6.i97.i ], [ %memberidx12.i98.i, %ifend.i94.i ]
  %751 = load i64, ptr %memberidx12.i98.i.sink1075, align 4
  %752 = add nsw i64 %751, 1
  store i64 %752, ptr %memberidx12.i98.i.sink1075, align 4
  br label %Lexer_advance.exit100.i

Lexer_advance.exit100.i:                          ; preds = %Lexer_advance.exit100.i.sink.split, %ifend3.i385
  %753 = load i64, ptr %memberidx.i.i361, align 4
  %754 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i103.i = getelementptr inbounds %string, ptr %754, i64 0, i32 2
  %755 = load i64, ptr %memberidx2.i103.i, align 4
  %.not895 = icmp slt i64 %753, %755
  br i1 %.not895, label %while.entry.i, label %while.end.i

if.entry4.i386:                                   ; preds = %if.entry.i46.i
  %.not889 = icmp slt i64 %703, %705
  br i1 %.not889, label %ifend.i123.i, label %Lexer_advance.exit129.i

ifend.i123.i:                                     ; preds = %if.entry4.i386
  %756 = load ptr, ptr %704, align 8
  %memberidx2.i121.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %756, i64 0, i32 2
  %757 = load ptr, ptr %memberidx2.i121.i, align 8
  %758 = add nsw i64 %703, 1
  store i64 %758, ptr %memberidx.i.i361, align 4
  %759 = tail call i8 %757(ptr nonnull %704, i64 %758)
  store i8 %759, ptr %0, align 1
  %760 = icmp eq i8 %759, 10
  %memberidx9.i124.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %760, label %if.entry6.i126.i, label %Lexer_advance.exit129.i.sink.split

if.entry6.i126.i:                                 ; preds = %ifend.i123.i
  store i64 0, ptr %memberidx9.i124.i, align 4
  %memberidx10.i125.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit129.i.sink.split

Lexer_advance.exit129.i.sink.split:               ; preds = %ifend.i123.i, %if.entry6.i126.i
  %memberidx9.i124.i.sink1077 = phi ptr [ %memberidx10.i125.i, %if.entry6.i126.i ], [ %memberidx9.i124.i, %ifend.i123.i ]
  %761 = load i64, ptr %memberidx9.i124.i.sink1077, align 4
  %762 = add nsw i64 %761, 1
  store i64 %762, ptr %memberidx9.i124.i.sink1077, align 4
  br label %Lexer_advance.exit129.i

Lexer_advance.exit129.i:                          ; preds = %Lexer_advance.exit129.i.sink.split, %if.entry4.i386
  %763 = load i64, ptr %memberidx.i.i361, align 4
  %764 = add nsw i64 %763, 1
  %765 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i132.i = getelementptr inbounds %string, ptr %765, i64 0, i32 2
  %766 = load i64, ptr %memberidx2.i132.i, align 4
  %767 = icmp slt i64 %764, %766
  br i1 %767, label %if.entry.i135.i, label %Lexer_peek.exit136.i

if.entry.i135.i:                                  ; preds = %Lexer_advance.exit129.i
  %768 = load ptr, ptr %765, align 8
  %memberidx4.i134.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %768, i64 0, i32 2
  %769 = load ptr, ptr %memberidx4.i134.i, align 8
  %770 = tail call i8 %769(ptr nonnull %765, i64 %764)
  %phi.cmp890 = icmp eq i8 %770, 10
  %.pre991 = load i64, ptr %memberidx.i.i361, align 4
  %.pre992 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i139.i.phi.trans.insert = getelementptr inbounds %string, ptr %.pre992, i64 0, i32 2
  %.pre993 = load i64, ptr %memberidx2.i139.i.phi.trans.insert, align 4
  br label %Lexer_peek.exit136.i

Lexer_peek.exit136.i:                             ; preds = %if.entry.i135.i, %Lexer_advance.exit129.i
  %771 = phi i64 [ %.pre993, %if.entry.i135.i ], [ %766, %Lexer_advance.exit129.i ]
  %772 = phi ptr [ %.pre992, %if.entry.i135.i ], [ %765, %Lexer_advance.exit129.i ]
  %773 = phi i64 [ %.pre991, %if.entry.i135.i ], [ %763, %Lexer_advance.exit129.i ]
  %common.ret.op.i133.i = phi i1 [ %phi.cmp890, %if.entry.i135.i ], [ false, %Lexer_advance.exit129.i ]
  %774 = icmp sge i64 %773, %771
  %775 = or i1 %common.ret.op.i133.i, %774
  br i1 %775, label %if.entry39, label %while.entry7.i.preheader

while.entry7.i.preheader:                         ; preds = %Lexer_peek.exit136.i
  %memberidx12.i114.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i112.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry7.i

while.entry7.i:                                   ; preds = %while.entry7.i.preheader, %Lexer_peek.exit40.i
  %776 = phi i64 [ %771, %while.entry7.i.preheader ], [ %794, %Lexer_peek.exit40.i ]
  %777 = phi ptr [ %772, %while.entry7.i.preheader ], [ %795, %Lexer_peek.exit40.i ]
  %778 = phi i64 [ %773, %while.entry7.i.preheader ], [ %796, %Lexer_peek.exit40.i ]
  %.not891 = icmp slt i64 %778, %776
  br i1 %.not891, label %ifend.i110.i, label %Lexer_advance.exit116.i

ifend.i110.i:                                     ; preds = %while.entry7.i
  %779 = load ptr, ptr %777, align 8
  %memberidx2.i108.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %779, i64 0, i32 2
  %780 = load ptr, ptr %memberidx2.i108.i, align 8
  %781 = add nsw i64 %778, 1
  store i64 %781, ptr %memberidx.i.i361, align 4
  %782 = tail call i8 %780(ptr nonnull %777, i64 %781)
  store i8 %782, ptr %0, align 1
  %783 = icmp eq i8 %782, 10
  br i1 %783, label %if.entry6.i113.i, label %Lexer_advance.exit116.i.sink.split

if.entry6.i113.i:                                 ; preds = %ifend.i110.i
  store i64 0, ptr %memberidx12.i114.i, align 4
  br label %Lexer_advance.exit116.i.sink.split

Lexer_advance.exit116.i.sink.split:               ; preds = %ifend.i110.i, %if.entry6.i113.i
  %memberidx12.i114.i.sink1079 = phi ptr [ %memberidx10.i112.i, %if.entry6.i113.i ], [ %memberidx12.i114.i, %ifend.i110.i ]
  %784 = load i64, ptr %memberidx12.i114.i.sink1079, align 4
  %785 = add nsw i64 %784, 1
  store i64 %785, ptr %memberidx12.i114.i.sink1079, align 4
  br label %Lexer_advance.exit116.i

Lexer_advance.exit116.i:                          ; preds = %Lexer_advance.exit116.i.sink.split, %while.entry7.i
  %786 = load i64, ptr %memberidx.i.i361, align 4
  %787 = add nsw i64 %786, 1
  %788 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i36.i388 = getelementptr inbounds %string, ptr %788, i64 0, i32 2
  %789 = load i64, ptr %memberidx2.i36.i388, align 4
  %790 = icmp slt i64 %787, %789
  br i1 %790, label %if.entry.i39.i, label %Lexer_peek.exit40.i

if.entry.i39.i:                                   ; preds = %Lexer_advance.exit116.i
  %791 = load ptr, ptr %788, align 8
  %memberidx4.i38.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %791, i64 0, i32 2
  %792 = load ptr, ptr %memberidx4.i38.i, align 8
  %793 = tail call i8 %792(ptr nonnull %788, i64 %787)
  %.pre994 = load i64, ptr %memberidx.i.i361, align 4
  %.pre995 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i33.i391.phi.trans.insert = getelementptr inbounds %string, ptr %.pre995, i64 0, i32 2
  %.pre996 = load i64, ptr %memberidx2.i33.i391.phi.trans.insert, align 4
  br label %Lexer_peek.exit40.i

Lexer_peek.exit40.i:                              ; preds = %if.entry.i39.i, %Lexer_advance.exit116.i
  %794 = phi i64 [ %.pre996, %if.entry.i39.i ], [ %789, %Lexer_advance.exit116.i ]
  %795 = phi ptr [ %.pre995, %if.entry.i39.i ], [ %788, %Lexer_advance.exit116.i ]
  %796 = phi i64 [ %.pre994, %if.entry.i39.i ], [ %786, %Lexer_advance.exit116.i ]
  %common.ret.op.i37.i = phi i8 [ %793, %if.entry.i39.i ], [ 0, %Lexer_advance.exit116.i ]
  %797 = icmp eq i8 %common.ret.op.i37.i, 10
  %798 = icmp sge i64 %796, %794
  %799 = or i1 %797, %798
  br i1 %799, label %if.entry39, label %while.entry7.i

if.entry39.sink.split:                            ; preds = %ifend.i81.i, %if.entry6.i84.i
  %memberidx9.i82.i.sink1081 = phi ptr [ %memberidx10.i83.i, %if.entry6.i84.i ], [ %memberidx9.i82.i, %ifend.i81.i ]
  %800 = load i64, ptr %memberidx9.i82.i.sink1081, align 4
  %801 = add nsw i64 %800, 1
  store i64 %801, ptr %memberidx9.i82.i.sink1081, align 4
  br label %if.entry39

if.entry39:                                       ; preds = %Lexer_peek.exit40.i, %if.entry39.sink.split, %Lexer_peek.exit136.i, %Lexer_advance.exit74.i
  %802 = load i64, ptr %memberidx.i.i361, align 4
  %803 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i394 = getelementptr inbounds %string, ptr %803, i64 0, i32 2
  %804 = load i64, ptr %memberidx2.i.i394, align 4
  %.not888 = icmp slt i64 %802, %804
  br i1 %.not888, label %ifend.i398, label %Lexer_advance.exit404

ifend.i398:                                       ; preds = %if.entry39
  %805 = load ptr, ptr %803, align 8
  %memberidx2.i396 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %805, i64 0, i32 2
  %806 = load ptr, ptr %memberidx2.i396, align 8
  %807 = add nsw i64 %802, 1
  store i64 %807, ptr %memberidx.i.i361, align 4
  %808 = tail call i8 %806(ptr nonnull %803, i64 %807)
  store i8 %808, ptr %0, align 1
  %809 = icmp eq i8 %808, 10
  %memberidx9.i399 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %809, label %if.entry6.i401, label %Lexer_advance.exit404.sink.split

if.entry6.i401:                                   ; preds = %ifend.i398
  store i64 0, ptr %memberidx9.i399, align 4
  %memberidx10.i400 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit404.sink.split

Lexer_advance.exit404.sink.split:                 ; preds = %ifend.i398, %if.entry6.i401
  %memberidx10.i400.sink1083 = phi ptr [ %memberidx10.i400, %if.entry6.i401 ], [ %memberidx9.i399, %ifend.i398 ]
  %810 = load i64, ptr %memberidx10.i400.sink1083, align 4
  %811 = add nsw i64 %810, 1
  store i64 %811, ptr %memberidx10.i400.sink1083, align 4
  br label %Lexer_advance.exit404

Lexer_advance.exit404:                            ; preds = %Lexer_advance.exit404.sink.split, %if.entry39
  %812 = tail call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  br label %common.ret

ifend41:                                          ; preds = %if.entry.i46.i.ifend41_crit_edge, %else.i382
  %.pre-phi1038 = phi i64 [ %.pre1037, %if.entry.i46.i.ifend41_crit_edge ], [ %.pre-phi1036, %else.i382 ]
  %813 = phi i64 [ %705, %if.entry.i46.i.ifend41_crit_edge ], [ %697, %else.i382 ]
  %814 = phi ptr [ %704, %if.entry.i46.i.ifend41_crit_edge ], [ %698, %else.i382 ]
  %815 = icmp slt i64 %.pre-phi1038, %813
  br i1 %815, label %if.entry.i.i412, label %ifend.i444

if.entry.i.i412:                                  ; preds = %ifend41
  %816 = load ptr, ptr %814, align 8
  %memberidx4.i.i411 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %816, i64 0, i32 2
  %817 = load ptr, ptr %memberidx4.i.i411, align 8
  %818 = tail call i8 %817(ptr nonnull %814, i64 %.pre-phi1038)
  %phi.cmp886 = icmp eq i8 %818, 61
  br i1 %phi.cmp886, label %if.entry.i419, label %ifend.i444

if.entry.i419:                                    ; preds = %if.entry.i.i412
  %819 = load i64, ptr %memberidx.i.i361, align 4
  %820 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i.i418 = getelementptr inbounds %string, ptr %820, i64 0, i32 2
  %821 = load i64, ptr %memberidx2.i.i.i418, align 4
  %.not887 = icmp slt i64 %819, %821
  br i1 %.not887, label %ifend.i.i423, label %Lexer_advance.exit.i436

ifend.i.i423:                                     ; preds = %if.entry.i419
  %822 = load ptr, ptr %820, align 8
  %memberidx2.i5.i421 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %822, i64 0, i32 2
  %823 = load ptr, ptr %memberidx2.i5.i421, align 8
  %824 = add nsw i64 %819, 1
  store i64 %824, ptr %memberidx.i.i361, align 4
  %825 = tail call i8 %823(ptr nonnull %820, i64 %824)
  store i8 %825, ptr %0, align 1
  %826 = icmp eq i8 %825, 10
  %memberidx9.i.i424 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %826, label %if.entry6.i.i426, label %Lexer_advance.exit.i436.sink.split

if.entry6.i.i426:                                 ; preds = %ifend.i.i423
  store i64 0, ptr %memberidx9.i.i424, align 4
  %memberidx10.i.i425 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i436.sink.split

Lexer_advance.exit.i436.sink.split:               ; preds = %ifend.i.i423, %if.entry6.i.i426
  %memberidx9.i.i424.sink1085 = phi ptr [ %memberidx10.i.i425, %if.entry6.i.i426 ], [ %memberidx9.i.i424, %ifend.i.i423 ]
  %827 = load i64, ptr %memberidx9.i.i424.sink1085, align 4
  %828 = add nsw i64 %827, 1
  store i64 %828, ptr %memberidx9.i.i424.sink1085, align 4
  br label %Lexer_advance.exit.i436

Lexer_advance.exit.i436:                          ; preds = %Lexer_advance.exit.i436.sink.split, %if.entry.i419
  %829 = tail call ptr @malloc(i32 16)
  %830 = tail call ptr @malloc(i32 32)
  %831 = load i64, ptr %memberidx.i.i361, align 4
  %832 = add nsw i64 %831, -1
  %833 = add nsw i64 %831, 1
  %memberidx2.i7.i430 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %834 = load i64, ptr %memberidx2.i7.i430, align 4
  %835 = add i64 %834, -2
  %memberidx3.i8.i431 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %836 = load i64, ptr %memberidx3.i8.i431, align 4
  store i64 %832, ptr %830, align 4
  %memberidx1.i.i9.i432 = getelementptr inbounds %FloRange, ptr %830, i64 0, i32 1
  store i64 %833, ptr %memberidx1.i.i9.i432, align 4
  %memberidx2.i.i10.i433 = getelementptr inbounds %FloRange, ptr %830, i64 0, i32 2
  store i64 %835, ptr %memberidx2.i.i10.i433, align 4
  %memberidx3.i.i.i434 = getelementptr inbounds %FloRange, ptr %830, i64 0, i32 3
  store i64 %836, ptr %memberidx3.i.i.i434, align 4
  store i64 15, ptr %829, align 4
  %memberidx1.i11.i435 = getelementptr inbounds %Token, ptr %829, i64 0, i32 1
  store ptr %830, ptr %memberidx1.i11.i435, align 8
  br label %common.ret

ifend.i444:                                       ; preds = %ifend41, %if.entry.i.i412
  %837 = tail call ptr @malloc(i32 16)
  %838 = tail call ptr @malloc(i32 32)
  %839 = load i64, ptr %memberidx.i.i361, align 4
  %840 = add nsw i64 %839, 1
  %memberidx2.i14.i438 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %841 = load i64, ptr %memberidx2.i14.i438, align 4
  %842 = add i64 %841, -1
  %memberidx3.i15.i439 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %843 = load i64, ptr %memberidx3.i15.i439, align 4
  store i64 %839, ptr %838, align 4
  %memberidx1.i.i16.i440 = getelementptr inbounds %FloRange, ptr %838, i64 0, i32 1
  store i64 %840, ptr %memberidx1.i.i16.i440, align 4
  %memberidx2.i.i17.i441 = getelementptr inbounds %FloRange, ptr %838, i64 0, i32 2
  store i64 %842, ptr %memberidx2.i.i17.i441, align 4
  %memberidx3.i.i18.i442 = getelementptr inbounds %FloRange, ptr %838, i64 0, i32 3
  store i64 %843, ptr %memberidx3.i.i18.i442, align 4
  store i64 7, ptr %837, align 4
  %memberidx1.i12.i443 = getelementptr inbounds %Token, ptr %837, i64 0, i32 1
  store ptr %838, ptr %memberidx1.i12.i443, align 8
  br label %common.ret

if.entry42:                                       ; preds = %ifend11
  %844 = tail call ptr @malloc(i32 16)
  %845 = tail call ptr @malloc(i32 32)
  %memberidx.i445 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %846 = load i64, ptr %memberidx.i445, align 4
  %847 = add nsw i64 %846, 1
  %memberidx2.i446 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %848 = load i64, ptr %memberidx2.i446, align 4
  %849 = add i64 %848, -1
  %memberidx3.i447 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %850 = load i64, ptr %memberidx3.i447, align 4
  store i64 %846, ptr %845, align 4
  %memberidx1.i.i448 = getelementptr inbounds %FloRange, ptr %845, i64 0, i32 1
  store i64 %847, ptr %memberidx1.i.i448, align 4
  %memberidx2.i.i449 = getelementptr inbounds %FloRange, ptr %845, i64 0, i32 2
  store i64 %849, ptr %memberidx2.i.i449, align 4
  %memberidx3.i.i450 = getelementptr inbounds %FloRange, ptr %845, i64 0, i32 3
  store i64 %850, ptr %memberidx3.i.i450, align 4
  store i64 25, ptr %844, align 4
  %memberidx1.i451 = getelementptr inbounds %Token, ptr %844, i64 0, i32 1
  store ptr %845, ptr %memberidx1.i451, align 8
  br label %common.ret

if.entry45:                                       ; preds = %ifend11
  %851 = tail call ptr @malloc(i32 16)
  %852 = tail call ptr @malloc(i32 32)
  %memberidx.i452 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %853 = load i64, ptr %memberidx.i452, align 4
  %854 = add nsw i64 %853, 1
  %memberidx2.i453 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %855 = load i64, ptr %memberidx2.i453, align 4
  %856 = add i64 %855, -1
  %memberidx3.i454 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %857 = load i64, ptr %memberidx3.i454, align 4
  store i64 %853, ptr %852, align 4
  %memberidx1.i.i455 = getelementptr inbounds %FloRange, ptr %852, i64 0, i32 1
  store i64 %854, ptr %memberidx1.i.i455, align 4
  %memberidx2.i.i456 = getelementptr inbounds %FloRange, ptr %852, i64 0, i32 2
  store i64 %856, ptr %memberidx2.i.i456, align 4
  %memberidx3.i.i457 = getelementptr inbounds %FloRange, ptr %852, i64 0, i32 3
  store i64 %857, ptr %memberidx3.i.i457, align 4
  store i64 26, ptr %851, align 4
  %memberidx1.i458 = getelementptr inbounds %Token, ptr %851, i64 0, i32 1
  store ptr %852, ptr %memberidx1.i458, align 8
  br label %common.ret

if.entry48:                                       ; preds = %ifend11
  %858 = tail call ptr @malloc(i32 16)
  %859 = tail call ptr @malloc(i32 32)
  %memberidx.i459 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %860 = load i64, ptr %memberidx.i459, align 4
  %861 = add nsw i64 %860, 1
  %memberidx2.i460 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %862 = load i64, ptr %memberidx2.i460, align 4
  %863 = add i64 %862, -1
  %memberidx3.i461 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %864 = load i64, ptr %memberidx3.i461, align 4
  store i64 %860, ptr %859, align 4
  %memberidx1.i.i462 = getelementptr inbounds %FloRange, ptr %859, i64 0, i32 1
  store i64 %861, ptr %memberidx1.i.i462, align 4
  %memberidx2.i.i463 = getelementptr inbounds %FloRange, ptr %859, i64 0, i32 2
  store i64 %863, ptr %memberidx2.i.i463, align 4
  %memberidx3.i.i464 = getelementptr inbounds %FloRange, ptr %859, i64 0, i32 3
  store i64 %864, ptr %memberidx3.i.i464, align 4
  store i64 27, ptr %858, align 4
  %memberidx1.i465 = getelementptr inbounds %Token, ptr %858, i64 0, i32 1
  store ptr %859, ptr %memberidx1.i465, align 8
  br label %common.ret

if.entry51:                                       ; preds = %ifend11
  %865 = tail call ptr @malloc(i32 16)
  %866 = tail call ptr @malloc(i32 32)
  %memberidx.i466 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %867 = load i64, ptr %memberidx.i466, align 4
  %868 = add nsw i64 %867, 1
  %memberidx2.i467 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %869 = load i64, ptr %memberidx2.i467, align 4
  %870 = add i64 %869, -1
  %memberidx3.i468 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %871 = load i64, ptr %memberidx3.i468, align 4
  store i64 %867, ptr %866, align 4
  %memberidx1.i.i469 = getelementptr inbounds %FloRange, ptr %866, i64 0, i32 1
  store i64 %868, ptr %memberidx1.i.i469, align 4
  %memberidx2.i.i470 = getelementptr inbounds %FloRange, ptr %866, i64 0, i32 2
  store i64 %870, ptr %memberidx2.i.i470, align 4
  %memberidx3.i.i471 = getelementptr inbounds %FloRange, ptr %866, i64 0, i32 3
  store i64 %871, ptr %memberidx3.i.i471, align 4
  store i64 28, ptr %865, align 4
  %memberidx1.i472 = getelementptr inbounds %Token, ptr %865, i64 0, i32 1
  store ptr %866, ptr %memberidx1.i472, align 8
  br label %common.ret

if.entry54:                                       ; preds = %ifend11
  %872 = tail call ptr @malloc(i32 16)
  %873 = tail call ptr @malloc(i32 32)
  %memberidx.i473 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %874 = load i64, ptr %memberidx.i473, align 4
  %875 = add nsw i64 %874, 1
  %memberidx2.i474 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %876 = load i64, ptr %memberidx2.i474, align 4
  %877 = add i64 %876, -1
  %memberidx3.i475 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %878 = load i64, ptr %memberidx3.i475, align 4
  store i64 %874, ptr %873, align 4
  %memberidx1.i.i476 = getelementptr inbounds %FloRange, ptr %873, i64 0, i32 1
  store i64 %875, ptr %memberidx1.i.i476, align 4
  %memberidx2.i.i477 = getelementptr inbounds %FloRange, ptr %873, i64 0, i32 2
  store i64 %877, ptr %memberidx2.i.i477, align 4
  %memberidx3.i.i478 = getelementptr inbounds %FloRange, ptr %873, i64 0, i32 3
  store i64 %878, ptr %memberidx3.i.i478, align 4
  store i64 29, ptr %872, align 4
  %memberidx1.i479 = getelementptr inbounds %Token, ptr %872, i64 0, i32 1
  store ptr %873, ptr %memberidx1.i479, align 8
  br label %common.ret

if.entry57:                                       ; preds = %ifend11
  %879 = tail call ptr @malloc(i32 16)
  %880 = tail call ptr @malloc(i32 32)
  %memberidx.i480 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %881 = load i64, ptr %memberidx.i480, align 4
  %882 = add nsw i64 %881, 1
  %memberidx2.i481 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %883 = load i64, ptr %memberidx2.i481, align 4
  %884 = add i64 %883, -1
  %memberidx3.i482 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %885 = load i64, ptr %memberidx3.i482, align 4
  store i64 %881, ptr %880, align 4
  %memberidx1.i.i483 = getelementptr inbounds %FloRange, ptr %880, i64 0, i32 1
  store i64 %882, ptr %memberidx1.i.i483, align 4
  %memberidx2.i.i484 = getelementptr inbounds %FloRange, ptr %880, i64 0, i32 2
  store i64 %884, ptr %memberidx2.i.i484, align 4
  %memberidx3.i.i485 = getelementptr inbounds %FloRange, ptr %880, i64 0, i32 3
  store i64 %885, ptr %memberidx3.i.i485, align 4
  store i64 30, ptr %879, align 4
  %memberidx1.i486 = getelementptr inbounds %Token, ptr %879, i64 0, i32 1
  store ptr %880, ptr %memberidx1.i486, align 8
  br label %common.ret

if.entry60:                                       ; preds = %ifend11, %ifend11
  %886 = tail call ptr @malloc(i32 16)
  %887 = tail call ptr @malloc(i32 32)
  %memberidx.i487 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %888 = load i64, ptr %memberidx.i487, align 4
  %889 = add nsw i64 %888, 1
  %memberidx2.i488 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %890 = load i64, ptr %memberidx2.i488, align 4
  %891 = add i64 %890, -1
  %memberidx3.i489 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %892 = load i64, ptr %memberidx3.i489, align 4
  store i64 %888, ptr %887, align 4
  %memberidx1.i.i490 = getelementptr inbounds %FloRange, ptr %887, i64 0, i32 1
  store i64 %889, ptr %memberidx1.i.i490, align 4
  %memberidx2.i.i491 = getelementptr inbounds %FloRange, ptr %887, i64 0, i32 2
  store i64 %891, ptr %memberidx2.i.i491, align 4
  %memberidx3.i.i492 = getelementptr inbounds %FloRange, ptr %887, i64 0, i32 3
  store i64 %892, ptr %memberidx3.i.i492, align 4
  store i64 33, ptr %886, align 4
  %memberidx1.i493 = getelementptr inbounds %Token, ptr %886, i64 0, i32 1
  store ptr %887, ptr %memberidx1.i493, align 8
  br label %common.ret

if.entry63:                                       ; preds = %ifend11
  %memberidx.i.i.i494 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %893 = load i64, ptr %memberidx.i.i.i494, align 4
  %memberidx1.i.i.i495 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %894 = load ptr, ptr %memberidx1.i.i.i495, align 8
  %memberidx2.i.i.i496 = getelementptr inbounds %string, ptr %894, i64 0, i32 2
  %895 = load i64, ptr %memberidx2.i.i.i496, align 4
  %.not882 = icmp slt i64 %893, %895
  br i1 %.not882, label %ifend.i.i500, label %ifend.i511

ifend.i.i500:                                     ; preds = %if.entry63
  %896 = load ptr, ptr %894, align 8
  %memberidx2.i.i498 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %896, i64 0, i32 2
  %897 = load ptr, ptr %memberidx2.i.i498, align 8
  %898 = add nsw i64 %893, 1
  store i64 %898, ptr %memberidx.i.i.i494, align 4
  %899 = tail call i8 %897(ptr nonnull %894, i64 %898)
  store i8 %899, ptr %0, align 1
  %900 = icmp eq i8 %899, 10
  %memberidx9.i.i501 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %900, label %if.entry6.i.i503, label %Lexer_advance.exit.i506

if.entry6.i.i503:                                 ; preds = %ifend.i.i500
  store i64 0, ptr %memberidx9.i.i501, align 4
  %memberidx10.i.i502 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %901 = load i64, ptr %memberidx10.i.i502, align 4
  %902 = add nsw i64 %901, 1
  store i64 %902, ptr %memberidx10.i.i502, align 4
  br label %ifend.i511

Lexer_advance.exit.i506:                          ; preds = %ifend.i.i500
  %903 = load i64, ptr %memberidx9.i.i501, align 4
  %904 = add nsw i64 %903, 1
  store i64 %904, ptr %memberidx9.i.i501, align 4
  %905 = icmp eq i8 %899, 92
  br i1 %905, label %if.entry.i507, label %ifend.i511

if.entry.i507:                                    ; preds = %Lexer_advance.exit.i506
  %906 = load i64, ptr %memberidx.i.i.i494, align 4
  %907 = load ptr, ptr %memberidx1.i.i.i495, align 8
  %memberidx2.i.i12.i = getelementptr inbounds %string, ptr %907, i64 0, i32 2
  %908 = load i64, ptr %memberidx2.i.i12.i, align 4
  %.not884 = icmp slt i64 %906, %908
  br i1 %.not884, label %ifend.i16.i, label %ifend27.i.i

ifend.i16.i:                                      ; preds = %if.entry.i507
  %909 = load ptr, ptr %907, align 8
  %memberidx2.i14.i508 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %909, i64 0, i32 2
  %910 = load ptr, ptr %memberidx2.i14.i508, align 8
  %911 = add nsw i64 %906, 1
  store i64 %911, ptr %memberidx.i.i.i494, align 4
  %912 = tail call i8 %910(ptr nonnull %907, i64 %911)
  store i8 %912, ptr %0, align 1
  %913 = icmp eq i8 %912, 10
  %memberidx9.i17.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %913, label %if.entry6.i19.i, label %Lexer_advance.exit22.i

if.entry6.i19.i:                                  ; preds = %ifend.i16.i
  store i64 0, ptr %memberidx9.i17.i, align 4
  %memberidx10.i18.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %914 = load i64, ptr %memberidx10.i18.i, align 4
  %915 = add nsw i64 %914, 1
  store i64 %915, ptr %memberidx10.i18.i, align 4
  br label %ifend27.i.i

Lexer_advance.exit22.i:                           ; preds = %ifend.i16.i
  %916 = load i64, ptr %memberidx9.i17.i, align 4
  %917 = add nsw i64 %916, 1
  store i64 %917, ptr %memberidx9.i17.i, align 4
  switch i8 %912, label %ifend27.i.i [
    i8 97, label %ifend.i511
    i8 98, label %get_escape_char.exit.i.fold.split
    i8 116, label %get_escape_char.exit.i.fold.split919
    i8 102, label %get_escape_char.exit.i.fold.split920
    i8 110, label %get_escape_char.exit.i.fold.split921
    i8 114, label %get_escape_char.exit.i.fold.split922
    i8 118, label %get_escape_char.exit.i.fold.split923
    i8 48, label %get_escape_char.exit.i.fold.split924
    i8 39, label %get_escape_char.exit.i.fold.split925
    i8 34, label %get_escape_char.exit.i.fold.split926
  ]

ifend27.i.i:                                      ; preds = %if.entry.i507, %if.entry6.i19.i, %Lexer_advance.exit22.i
  %918 = phi i8 [ %912, %Lexer_advance.exit22.i ], [ 92, %if.entry.i507 ], [ 10, %if.entry6.i19.i ]
  br label %ifend.i511

get_escape_char.exit.i.fold.split:                ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split919:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split920:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split921:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split922:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split923:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split924:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split925:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split926:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

ifend.i511:                                       ; preds = %if.entry63, %if.entry6.i.i503, %ifend27.i.i, %get_escape_char.exit.i.fold.split, %get_escape_char.exit.i.fold.split919, %get_escape_char.exit.i.fold.split920, %get_escape_char.exit.i.fold.split921, %get_escape_char.exit.i.fold.split922, %get_escape_char.exit.i.fold.split923, %get_escape_char.exit.i.fold.split924, %get_escape_char.exit.i.fold.split925, %get_escape_char.exit.i.fold.split926, %Lexer_advance.exit22.i, %Lexer_advance.exit.i506
  %length.0.i = phi i64 [ 3, %Lexer_advance.exit.i506 ], [ 5, %Lexer_advance.exit22.i ], [ 5, %get_escape_char.exit.i.fold.split926 ], [ 5, %get_escape_char.exit.i.fold.split925 ], [ 5, %get_escape_char.exit.i.fold.split924 ], [ 5, %get_escape_char.exit.i.fold.split923 ], [ 5, %get_escape_char.exit.i.fold.split922 ], [ 5, %get_escape_char.exit.i.fold.split921 ], [ 5, %get_escape_char.exit.i.fold.split920 ], [ 5, %get_escape_char.exit.i.fold.split919 ], [ 5, %get_escape_char.exit.i.fold.split ], [ 5, %ifend27.i.i ], [ 3, %if.entry6.i.i503 ], [ 3, %if.entry63 ]
  %value.0.i = phi i8 [ %899, %Lexer_advance.exit.i506 ], [ 7, %Lexer_advance.exit22.i ], [ %912, %get_escape_char.exit.i.fold.split926 ], [ %912, %get_escape_char.exit.i.fold.split925 ], [ 0, %get_escape_char.exit.i.fold.split924 ], [ 11, %get_escape_char.exit.i.fold.split923 ], [ 13, %get_escape_char.exit.i.fold.split922 ], [ 10, %get_escape_char.exit.i.fold.split921 ], [ 12, %get_escape_char.exit.i.fold.split920 ], [ 9, %get_escape_char.exit.i.fold.split919 ], [ 8, %get_escape_char.exit.i.fold.split ], [ %918, %ifend27.i.i ], [ 10, %if.entry6.i.i503 ], [ 39, %if.entry63 ]
  %919 = load i64, ptr %memberidx.i.i.i494, align 4
  %920 = load ptr, ptr %memberidx1.i.i.i495, align 8
  %memberidx2.i.i32.i = getelementptr inbounds %string, ptr %920, i64 0, i32 2
  %921 = load i64, ptr %memberidx2.i.i32.i, align 4
  %.not883 = icmp slt i64 %919, %921
  br i1 %.not883, label %ifend.i36.i, label %Lexer_char_token.exit

ifend.i36.i:                                      ; preds = %ifend.i511
  %922 = load ptr, ptr %920, align 8
  %memberidx2.i34.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %922, i64 0, i32 2
  %923 = load ptr, ptr %memberidx2.i34.i, align 8
  %924 = add nsw i64 %919, 1
  store i64 %924, ptr %memberidx.i.i.i494, align 4
  %925 = tail call i8 %923(ptr nonnull %920, i64 %924)
  store i8 %925, ptr %0, align 1
  %926 = icmp eq i8 %925, 10
  %memberidx9.i37.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %926, label %if.entry6.i39.i, label %Lexer_char_token.exit.sink.split

if.entry6.i39.i:                                  ; preds = %ifend.i36.i
  store i64 0, ptr %memberidx9.i37.i, align 4
  %memberidx10.i38.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_char_token.exit.sink.split

Lexer_char_token.exit.sink.split:                 ; preds = %ifend.i36.i, %if.entry6.i39.i
  %memberidx10.i38.i.sink1087 = phi ptr [ %memberidx10.i38.i, %if.entry6.i39.i ], [ %memberidx9.i37.i, %ifend.i36.i ]
  %927 = load i64, ptr %memberidx10.i38.i.sink1087, align 4
  %928 = add nsw i64 %927, 1
  store i64 %928, ptr %memberidx10.i38.i.sink1087, align 4
  br label %Lexer_char_token.exit

Lexer_char_token.exit:                            ; preds = %Lexer_char_token.exit.sink.split, %ifend.i511
  %929 = tail call ptr @malloc(i32 17)
  %930 = tail call ptr @malloc(i32 32)
  %931 = load i64, ptr %memberidx.i.i.i494, align 4
  %932 = sub nsw i64 1, %length.0.i
  %933 = add i64 %932, %931
  %934 = add nsw i64 %931, 1
  %memberidx2.i26.i513 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %935 = load i64, ptr %memberidx2.i26.i513, align 4
  %936 = sub nuw i64 %935, %length.0.i
  %memberidx3.i27.i514 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %937 = load i64, ptr %memberidx3.i27.i514, align 4
  store i64 %933, ptr %930, align 4
  %memberidx1.i.i28.i515 = getelementptr inbounds %FloRange, ptr %930, i64 0, i32 1
  store i64 %934, ptr %memberidx1.i.i28.i515, align 4
  %memberidx2.i.i29.i516 = getelementptr inbounds %FloRange, ptr %930, i64 0, i32 2
  store i64 %936, ptr %memberidx2.i.i29.i516, align 4
  %memberidx3.i.i.i517 = getelementptr inbounds %FloRange, ptr %930, i64 0, i32 3
  store i64 %937, ptr %memberidx3.i.i.i517, align 4
  store i64 35, ptr %929, align 4
  %memberidx1.i.i24.i = getelementptr inbounds %Token, ptr %929, i64 0, i32 1
  store ptr %930, ptr %memberidx1.i.i24.i, align 8
  %memberidx.i.i518 = getelementptr inbounds %CharToken, ptr %929, i64 0, i32 2
  store i8 %value.0.i, ptr %memberidx.i.i518, align 1
  br label %common.ret

if.entry66:                                       ; preds = %ifend11
  %938 = tail call ptr @malloc(i32 16)
  %939 = tail call ptr @malloc(i32 32)
  %memberidx.i519 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %940 = load i64, ptr %memberidx.i519, align 4
  %941 = add nsw i64 %940, 1
  %memberidx2.i520 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %942 = load i64, ptr %memberidx2.i520, align 4
  %943 = add i64 %942, -1
  %memberidx3.i521 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %944 = load i64, ptr %memberidx3.i521, align 4
  store i64 %940, ptr %939, align 4
  %memberidx1.i.i522 = getelementptr inbounds %FloRange, ptr %939, i64 0, i32 1
  store i64 %941, ptr %memberidx1.i.i522, align 4
  %memberidx2.i.i523 = getelementptr inbounds %FloRange, ptr %939, i64 0, i32 2
  store i64 %943, ptr %memberidx2.i.i523, align 4
  %memberidx3.i.i524 = getelementptr inbounds %FloRange, ptr %939, i64 0, i32 3
  store i64 %944, ptr %memberidx3.i.i524, align 4
  store i64 36, ptr %938, align 4
  %memberidx1.i525 = getelementptr inbounds %Token, ptr %938, i64 0, i32 1
  store ptr %939, ptr %memberidx1.i525, align 8
  br label %common.ret

if.entry69:                                       ; preds = %ifend11
  %945 = tail call ptr @malloc(i32 16)
  %946 = tail call ptr @malloc(i32 32)
  %memberidx.i526 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %947 = load i64, ptr %memberidx.i526, align 4
  %948 = add nsw i64 %947, 1
  %memberidx2.i527 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %949 = load i64, ptr %memberidx2.i527, align 4
  %950 = add i64 %949, -1
  %memberidx3.i528 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %951 = load i64, ptr %memberidx3.i528, align 4
  store i64 %947, ptr %946, align 4
  %memberidx1.i.i529 = getelementptr inbounds %FloRange, ptr %946, i64 0, i32 1
  store i64 %948, ptr %memberidx1.i.i529, align 4
  %memberidx2.i.i530 = getelementptr inbounds %FloRange, ptr %946, i64 0, i32 2
  store i64 %950, ptr %memberidx2.i.i530, align 4
  %memberidx3.i.i531 = getelementptr inbounds %FloRange, ptr %946, i64 0, i32 3
  store i64 %951, ptr %memberidx3.i.i531, align 4
  store i64 37, ptr %945, align 4
  %memberidx1.i532 = getelementptr inbounds %Token, ptr %945, i64 0, i32 1
  store ptr %946, ptr %memberidx1.i532, align 8
  br label %common.ret

if.entry72:                                       ; preds = %ifend11
  %memberidx.i.i533 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %952 = load i64, ptr %memberidx.i.i533, align 4
  %953 = add nsw i64 %952, 1
  %memberidx1.i.i534 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %954 = load ptr, ptr %memberidx1.i.i534, align 8
  %memberidx2.i.i535 = getelementptr inbounds %string, ptr %954, i64 0, i32 2
  %955 = load i64, ptr %memberidx2.i.i535, align 4
  %956 = icmp slt i64 %953, %955
  br i1 %956, label %if.entry.i.i537, label %ifend.i569

if.entry.i.i537:                                  ; preds = %if.entry72
  %957 = load ptr, ptr %954, align 8
  %memberidx4.i.i536 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %957, i64 0, i32 2
  %958 = load ptr, ptr %memberidx4.i.i536, align 8
  %959 = tail call i8 %958(ptr nonnull %954, i64 %953)
  %phi.cmp880 = icmp eq i8 %959, 61
  br i1 %phi.cmp880, label %if.entry.i544, label %ifend.i569

if.entry.i544:                                    ; preds = %if.entry.i.i537
  %960 = load i64, ptr %memberidx.i.i533, align 4
  %961 = load ptr, ptr %memberidx1.i.i534, align 8
  %memberidx2.i.i.i543 = getelementptr inbounds %string, ptr %961, i64 0, i32 2
  %962 = load i64, ptr %memberidx2.i.i.i543, align 4
  %.not881 = icmp slt i64 %960, %962
  br i1 %.not881, label %ifend.i.i548, label %Lexer_advance.exit.i561

ifend.i.i548:                                     ; preds = %if.entry.i544
  %963 = load ptr, ptr %961, align 8
  %memberidx2.i5.i546 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %963, i64 0, i32 2
  %964 = load ptr, ptr %memberidx2.i5.i546, align 8
  %965 = add nsw i64 %960, 1
  store i64 %965, ptr %memberidx.i.i533, align 4
  %966 = tail call i8 %964(ptr nonnull %961, i64 %965)
  store i8 %966, ptr %0, align 1
  %967 = icmp eq i8 %966, 10
  %memberidx9.i.i549 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %967, label %if.entry6.i.i551, label %Lexer_advance.exit.i561.sink.split

if.entry6.i.i551:                                 ; preds = %ifend.i.i548
  store i64 0, ptr %memberidx9.i.i549, align 4
  %memberidx10.i.i550 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i561.sink.split

Lexer_advance.exit.i561.sink.split:               ; preds = %ifend.i.i548, %if.entry6.i.i551
  %memberidx9.i.i549.sink1089 = phi ptr [ %memberidx10.i.i550, %if.entry6.i.i551 ], [ %memberidx9.i.i549, %ifend.i.i548 ]
  %968 = load i64, ptr %memberidx9.i.i549.sink1089, align 4
  %969 = add nsw i64 %968, 1
  store i64 %969, ptr %memberidx9.i.i549.sink1089, align 4
  br label %Lexer_advance.exit.i561

Lexer_advance.exit.i561:                          ; preds = %Lexer_advance.exit.i561.sink.split, %if.entry.i544
  %970 = tail call ptr @malloc(i32 16)
  %971 = tail call ptr @malloc(i32 32)
  %972 = load i64, ptr %memberidx.i.i533, align 4
  %973 = add nsw i64 %972, -1
  %974 = add nsw i64 %972, 1
  %memberidx2.i7.i555 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %975 = load i64, ptr %memberidx2.i7.i555, align 4
  %976 = add i64 %975, -2
  %memberidx3.i8.i556 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %977 = load i64, ptr %memberidx3.i8.i556, align 4
  store i64 %973, ptr %971, align 4
  %memberidx1.i.i9.i557 = getelementptr inbounds %FloRange, ptr %971, i64 0, i32 1
  store i64 %974, ptr %memberidx1.i.i9.i557, align 4
  %memberidx2.i.i10.i558 = getelementptr inbounds %FloRange, ptr %971, i64 0, i32 2
  store i64 %976, ptr %memberidx2.i.i10.i558, align 4
  %memberidx3.i.i.i559 = getelementptr inbounds %FloRange, ptr %971, i64 0, i32 3
  store i64 %977, ptr %memberidx3.i.i.i559, align 4
  store i64 39, ptr %970, align 4
  %memberidx1.i11.i560 = getelementptr inbounds %Token, ptr %970, i64 0, i32 1
  store ptr %971, ptr %memberidx1.i11.i560, align 8
  br label %common.ret

ifend.i569:                                       ; preds = %if.entry72, %if.entry.i.i537
  %978 = tail call ptr @malloc(i32 16)
  %979 = tail call ptr @malloc(i32 32)
  %980 = load i64, ptr %memberidx.i.i533, align 4
  %981 = add nsw i64 %980, 1
  %memberidx2.i14.i563 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %982 = load i64, ptr %memberidx2.i14.i563, align 4
  %983 = add i64 %982, -1
  %memberidx3.i15.i564 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %984 = load i64, ptr %memberidx3.i15.i564, align 4
  store i64 %980, ptr %979, align 4
  %memberidx1.i.i16.i565 = getelementptr inbounds %FloRange, ptr %979, i64 0, i32 1
  store i64 %981, ptr %memberidx1.i.i16.i565, align 4
  %memberidx2.i.i17.i566 = getelementptr inbounds %FloRange, ptr %979, i64 0, i32 2
  store i64 %983, ptr %memberidx2.i.i17.i566, align 4
  %memberidx3.i.i18.i567 = getelementptr inbounds %FloRange, ptr %979, i64 0, i32 3
  store i64 %984, ptr %memberidx3.i.i18.i567, align 4
  store i64 38, ptr %978, align 4
  %memberidx1.i12.i568 = getelementptr inbounds %Token, ptr %978, i64 0, i32 1
  store ptr %979, ptr %memberidx1.i12.i568, align 8
  br label %common.ret

if.entry75:                                       ; preds = %ifend11
  %memberidx.i.i570 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %985 = load i64, ptr %memberidx.i.i570, align 4
  %986 = add nsw i64 %985, 1
  %memberidx1.i.i571 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %987 = load ptr, ptr %memberidx1.i.i571, align 8
  %memberidx2.i.i572 = getelementptr inbounds %string, ptr %987, i64 0, i32 2
  %988 = load i64, ptr %memberidx2.i.i572, align 4
  %989 = icmp slt i64 %986, %988
  br i1 %989, label %if.entry.i.i574, label %ifend.i606

if.entry.i.i574:                                  ; preds = %if.entry75
  %990 = load ptr, ptr %987, align 8
  %memberidx4.i.i573 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %990, i64 0, i32 2
  %991 = load ptr, ptr %memberidx4.i.i573, align 8
  %992 = tail call i8 %991(ptr nonnull %987, i64 %986)
  %phi.cmp878 = icmp eq i8 %992, 61
  br i1 %phi.cmp878, label %if.entry.i581, label %ifend.i606

if.entry.i581:                                    ; preds = %if.entry.i.i574
  %993 = load i64, ptr %memberidx.i.i570, align 4
  %994 = load ptr, ptr %memberidx1.i.i571, align 8
  %memberidx2.i.i.i580 = getelementptr inbounds %string, ptr %994, i64 0, i32 2
  %995 = load i64, ptr %memberidx2.i.i.i580, align 4
  %.not879 = icmp slt i64 %993, %995
  br i1 %.not879, label %ifend.i.i585, label %Lexer_advance.exit.i598

ifend.i.i585:                                     ; preds = %if.entry.i581
  %996 = load ptr, ptr %994, align 8
  %memberidx2.i5.i583 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %996, i64 0, i32 2
  %997 = load ptr, ptr %memberidx2.i5.i583, align 8
  %998 = add nsw i64 %993, 1
  store i64 %998, ptr %memberidx.i.i570, align 4
  %999 = tail call i8 %997(ptr nonnull %994, i64 %998)
  store i8 %999, ptr %0, align 1
  %1000 = icmp eq i8 %999, 10
  %memberidx9.i.i586 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1000, label %if.entry6.i.i588, label %Lexer_advance.exit.i598.sink.split

if.entry6.i.i588:                                 ; preds = %ifend.i.i585
  store i64 0, ptr %memberidx9.i.i586, align 4
  %memberidx10.i.i587 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i598.sink.split

Lexer_advance.exit.i598.sink.split:               ; preds = %ifend.i.i585, %if.entry6.i.i588
  %memberidx9.i.i586.sink1091 = phi ptr [ %memberidx10.i.i587, %if.entry6.i.i588 ], [ %memberidx9.i.i586, %ifend.i.i585 ]
  %1001 = load i64, ptr %memberidx9.i.i586.sink1091, align 4
  %1002 = add nsw i64 %1001, 1
  store i64 %1002, ptr %memberidx9.i.i586.sink1091, align 4
  br label %Lexer_advance.exit.i598

Lexer_advance.exit.i598:                          ; preds = %Lexer_advance.exit.i598.sink.split, %if.entry.i581
  %1003 = tail call ptr @malloc(i32 16)
  %1004 = tail call ptr @malloc(i32 32)
  %1005 = load i64, ptr %memberidx.i.i570, align 4
  %1006 = add nsw i64 %1005, -1
  %1007 = add nsw i64 %1005, 1
  %memberidx2.i7.i592 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1008 = load i64, ptr %memberidx2.i7.i592, align 4
  %1009 = add i64 %1008, -2
  %memberidx3.i8.i593 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1010 = load i64, ptr %memberidx3.i8.i593, align 4
  store i64 %1006, ptr %1004, align 4
  %memberidx1.i.i9.i594 = getelementptr inbounds %FloRange, ptr %1004, i64 0, i32 1
  store i64 %1007, ptr %memberidx1.i.i9.i594, align 4
  %memberidx2.i.i10.i595 = getelementptr inbounds %FloRange, ptr %1004, i64 0, i32 2
  store i64 %1009, ptr %memberidx2.i.i10.i595, align 4
  %memberidx3.i.i.i596 = getelementptr inbounds %FloRange, ptr %1004, i64 0, i32 3
  store i64 %1010, ptr %memberidx3.i.i.i596, align 4
  store i64 40, ptr %1003, align 4
  %memberidx1.i11.i597 = getelementptr inbounds %Token, ptr %1003, i64 0, i32 1
  store ptr %1004, ptr %memberidx1.i11.i597, align 8
  br label %common.ret

ifend.i606:                                       ; preds = %if.entry75, %if.entry.i.i574
  %1011 = tail call ptr @malloc(i32 16)
  %1012 = tail call ptr @malloc(i32 32)
  %1013 = load i64, ptr %memberidx.i.i570, align 4
  %1014 = add nsw i64 %1013, 1
  %memberidx2.i14.i600 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1015 = load i64, ptr %memberidx2.i14.i600, align 4
  %1016 = add i64 %1015, -1
  %memberidx3.i15.i601 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1017 = load i64, ptr %memberidx3.i15.i601, align 4
  store i64 %1013, ptr %1012, align 4
  %memberidx1.i.i16.i602 = getelementptr inbounds %FloRange, ptr %1012, i64 0, i32 1
  store i64 %1014, ptr %memberidx1.i.i16.i602, align 4
  %memberidx2.i.i17.i603 = getelementptr inbounds %FloRange, ptr %1012, i64 0, i32 2
  store i64 %1016, ptr %memberidx2.i.i17.i603, align 4
  %memberidx3.i.i18.i604 = getelementptr inbounds %FloRange, ptr %1012, i64 0, i32 3
  store i64 %1017, ptr %memberidx3.i.i18.i604, align 4
  store i64 47, ptr %1011, align 4
  %memberidx1.i12.i605 = getelementptr inbounds %Token, ptr %1011, i64 0, i32 1
  store ptr %1012, ptr %memberidx1.i12.i605, align 8
  br label %common.ret

if.entry78:                                       ; preds = %ifend11
  %memberidx.i.i607 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1018 = load i64, ptr %memberidx.i.i607, align 4
  %1019 = add nsw i64 %1018, 1
  %memberidx1.i.i608 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1020 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i.i609 = getelementptr inbounds %string, ptr %1020, i64 0, i32 2
  %1021 = load i64, ptr %memberidx2.i.i609, align 4
  %1022 = icmp slt i64 %1019, %1021
  br i1 %1022, label %if.entry.i.i611, label %else.i639

if.entry.i.i611:                                  ; preds = %if.entry78
  %1023 = load ptr, ptr %1020, align 8
  %memberidx4.i.i610 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1023, i64 0, i32 2
  %1024 = load ptr, ptr %memberidx4.i.i610, align 8
  %1025 = tail call i8 %1024(ptr nonnull %1020, i64 %1019)
  %phi.cmp872 = icmp eq i8 %1025, 61
  %1026 = load i64, ptr %memberidx.i.i607, align 4
  %1027 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i.i.i617 = getelementptr inbounds %string, ptr %1027, i64 0, i32 2
  %1028 = load i64, ptr %memberidx2.i.i.i617, align 4
  br i1 %phi.cmp872, label %if.entry.i618, label %if.entry.i.i611.else.i639_crit_edge

if.entry.i.i611.else.i639_crit_edge:              ; preds = %if.entry.i.i611
  %.pre1039 = add nsw i64 %1026, 1
  br label %else.i639

if.entry.i618:                                    ; preds = %if.entry.i.i611
  %.not877 = icmp slt i64 %1026, %1028
  br i1 %.not877, label %ifend.i.i622, label %Lexer_advance.exit.i635

ifend.i.i622:                                     ; preds = %if.entry.i618
  %1029 = load ptr, ptr %1027, align 8
  %memberidx2.i17.i620 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1029, i64 0, i32 2
  %1030 = load ptr, ptr %memberidx2.i17.i620, align 8
  %1031 = add nsw i64 %1026, 1
  store i64 %1031, ptr %memberidx.i.i607, align 4
  %1032 = tail call i8 %1030(ptr nonnull %1027, i64 %1031)
  store i8 %1032, ptr %0, align 1
  %1033 = icmp eq i8 %1032, 10
  %memberidx9.i.i623 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1033, label %if.entry6.i.i625, label %Lexer_advance.exit.i635.sink.split

if.entry6.i.i625:                                 ; preds = %ifend.i.i622
  store i64 0, ptr %memberidx9.i.i623, align 4
  %memberidx10.i.i624 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i635.sink.split

Lexer_advance.exit.i635.sink.split:               ; preds = %ifend.i.i622, %if.entry6.i.i625
  %memberidx9.i.i623.sink1093 = phi ptr [ %memberidx10.i.i624, %if.entry6.i.i625 ], [ %memberidx9.i.i623, %ifend.i.i622 ]
  %1034 = load i64, ptr %memberidx9.i.i623.sink1093, align 4
  %1035 = add nsw i64 %1034, 1
  store i64 %1035, ptr %memberidx9.i.i623.sink1093, align 4
  br label %Lexer_advance.exit.i635

Lexer_advance.exit.i635:                          ; preds = %Lexer_advance.exit.i635.sink.split, %if.entry.i618
  %1036 = tail call ptr @malloc(i32 16)
  %1037 = tail call ptr @malloc(i32 32)
  %1038 = load i64, ptr %memberidx.i.i607, align 4
  %1039 = add nsw i64 %1038, -1
  %1040 = add nsw i64 %1038, 1
  %memberidx2.i19.i629 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1041 = load i64, ptr %memberidx2.i19.i629, align 4
  %1042 = add i64 %1041, -2
  %memberidx3.i20.i630 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1043 = load i64, ptr %memberidx3.i20.i630, align 4
  store i64 %1039, ptr %1037, align 4
  %memberidx1.i.i21.i631 = getelementptr inbounds %FloRange, ptr %1037, i64 0, i32 1
  store i64 %1040, ptr %memberidx1.i.i21.i631, align 4
  %memberidx2.i.i22.i632 = getelementptr inbounds %FloRange, ptr %1037, i64 0, i32 2
  store i64 %1042, ptr %memberidx2.i.i22.i632, align 4
  %memberidx3.i.i.i633 = getelementptr inbounds %FloRange, ptr %1037, i64 0, i32 3
  store i64 %1043, ptr %memberidx3.i.i.i633, align 4
  store i64 44, ptr %1036, align 4
  %memberidx1.i23.i634 = getelementptr inbounds %Token, ptr %1036, i64 0, i32 1
  store ptr %1037, ptr %memberidx1.i23.i634, align 8
  br label %common.ret

else.i639:                                        ; preds = %if.entry.i.i611.else.i639_crit_edge, %if.entry78
  %.pre-phi1040 = phi i64 [ %.pre1039, %if.entry.i.i611.else.i639_crit_edge ], [ %1019, %if.entry78 ]
  %1044 = phi i64 [ %1028, %if.entry.i.i611.else.i639_crit_edge ], [ %1021, %if.entry78 ]
  %1045 = phi ptr [ %1027, %if.entry.i.i611.else.i639_crit_edge ], [ %1020, %if.entry78 ]
  %1046 = icmp slt i64 %.pre-phi1040, %1044
  br i1 %1046, label %if.entry.i36.i641, label %ifend3.i672

if.entry.i36.i641:                                ; preds = %else.i639
  %1047 = load ptr, ptr %1045, align 8
  %memberidx4.i35.i640 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1047, i64 0, i32 2
  %1048 = load ptr, ptr %memberidx4.i35.i640, align 8
  %1049 = tail call i8 %1048(ptr nonnull %1045, i64 %.pre-phi1040)
  %phi.cmp873 = icmp eq i8 %1049, 62
  br i1 %phi.cmp873, label %if.entry1.i647, label %ifend3.i672

if.entry1.i647:                                   ; preds = %if.entry.i36.i641
  %1050 = load i64, ptr %memberidx.i.i607, align 4
  %1051 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i.i40.i646 = getelementptr inbounds %string, ptr %1051, i64 0, i32 2
  %1052 = load i64, ptr %memberidx2.i.i40.i646, align 4
  %.not874 = icmp slt i64 %1050, %1052
  br i1 %.not874, label %ifend.i44.i651, label %Lexer_advance.exit50.i660

ifend.i44.i651:                                   ; preds = %if.entry1.i647
  %1053 = load ptr, ptr %1051, align 8
  %memberidx2.i42.i649 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1053, i64 0, i32 2
  %1054 = load ptr, ptr %memberidx2.i42.i649, align 8
  %1055 = add nsw i64 %1050, 1
  store i64 %1055, ptr %memberidx.i.i607, align 4
  %1056 = tail call i8 %1054(ptr nonnull %1051, i64 %1055)
  store i8 %1056, ptr %0, align 1
  %1057 = icmp eq i8 %1056, 10
  %memberidx9.i45.i652 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1057, label %if.entry6.i47.i654, label %Lexer_advance.exit50.i660.sink.split

if.entry6.i47.i654:                               ; preds = %ifend.i44.i651
  store i64 0, ptr %memberidx9.i45.i652, align 4
  %memberidx10.i46.i653 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i660.sink.split

Lexer_advance.exit50.i660.sink.split:             ; preds = %ifend.i44.i651, %if.entry6.i47.i654
  %memberidx9.i45.i652.sink1095 = phi ptr [ %memberidx10.i46.i653, %if.entry6.i47.i654 ], [ %memberidx9.i45.i652, %ifend.i44.i651 ]
  %1058 = load i64, ptr %memberidx9.i45.i652.sink1095, align 4
  %1059 = add nsw i64 %1058, 1
  store i64 %1059, ptr %memberidx9.i45.i652.sink1095, align 4
  br label %Lexer_advance.exit50.i660

Lexer_advance.exit50.i660:                        ; preds = %Lexer_advance.exit50.i660.sink.split, %if.entry1.i647
  %1060 = load i64, ptr %memberidx.i.i607, align 4
  %1061 = add nsw i64 %1060, 1
  %1062 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i53.i659 = getelementptr inbounds %string, ptr %1062, i64 0, i32 2
  %1063 = load i64, ptr %memberidx2.i53.i659, align 4
  %1064 = icmp slt i64 %1061, %1063
  br i1 %1064, label %if.entry.i56.i662, label %ifend6.i701

if.entry.i56.i662:                                ; preds = %Lexer_advance.exit50.i660
  %1065 = load ptr, ptr %1062, align 8
  %memberidx4.i55.i661 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1065, i64 0, i32 2
  %1066 = load ptr, ptr %memberidx4.i55.i661, align 8
  %1067 = tail call i8 %1066(ptr nonnull %1062, i64 %1061)
  %phi.cmp875 = icmp eq i8 %1067, 61
  br i1 %phi.cmp875, label %if.entry4.i676, label %ifend6.i701

ifend3.i672:                                      ; preds = %else.i639, %if.entry.i36.i641
  %1068 = tail call ptr @malloc(i32 16)
  %1069 = tail call ptr @malloc(i32 32)
  %1070 = load i64, ptr %memberidx.i.i607, align 4
  %1071 = add nsw i64 %1070, 1
  %memberidx2.i59.i666 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1072 = load i64, ptr %memberidx2.i59.i666, align 4
  %1073 = add i64 %1072, -1
  %memberidx3.i60.i667 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1074 = load i64, ptr %memberidx3.i60.i667, align 4
  store i64 %1070, ptr %1069, align 4
  %memberidx1.i.i61.i668 = getelementptr inbounds %FloRange, ptr %1069, i64 0, i32 1
  store i64 %1071, ptr %memberidx1.i.i61.i668, align 4
  %memberidx2.i.i62.i669 = getelementptr inbounds %FloRange, ptr %1069, i64 0, i32 2
  store i64 %1073, ptr %memberidx2.i.i62.i669, align 4
  %memberidx3.i.i63.i670 = getelementptr inbounds %FloRange, ptr %1069, i64 0, i32 3
  store i64 %1074, ptr %memberidx3.i.i63.i670, align 4
  store i64 41, ptr %1068, align 4
  %memberidx1.i64.i671 = getelementptr inbounds %Token, ptr %1068, i64 0, i32 1
  store ptr %1069, ptr %memberidx1.i64.i671, align 8
  br label %common.ret

if.entry4.i676:                                   ; preds = %if.entry.i56.i662
  %1075 = load i64, ptr %memberidx.i.i607, align 4
  %1076 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i.i74.i675 = getelementptr inbounds %string, ptr %1076, i64 0, i32 2
  %1077 = load i64, ptr %memberidx2.i.i74.i675, align 4
  %.not876 = icmp slt i64 %1075, %1077
  br i1 %.not876, label %ifend.i78.i680, label %Lexer_advance.exit84.i693

ifend.i78.i680:                                   ; preds = %if.entry4.i676
  %1078 = load ptr, ptr %1076, align 8
  %memberidx2.i76.i678 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1078, i64 0, i32 2
  %1079 = load ptr, ptr %memberidx2.i76.i678, align 8
  %1080 = add nsw i64 %1075, 1
  store i64 %1080, ptr %memberidx.i.i607, align 4
  %1081 = tail call i8 %1079(ptr nonnull %1076, i64 %1080)
  store i8 %1081, ptr %0, align 1
  %1082 = icmp eq i8 %1081, 10
  %memberidx9.i79.i681 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1082, label %if.entry6.i81.i683, label %Lexer_advance.exit84.i693.sink.split

if.entry6.i81.i683:                               ; preds = %ifend.i78.i680
  store i64 0, ptr %memberidx9.i79.i681, align 4
  %memberidx10.i80.i682 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i693.sink.split

Lexer_advance.exit84.i693.sink.split:             ; preds = %ifend.i78.i680, %if.entry6.i81.i683
  %memberidx9.i79.i681.sink1097 = phi ptr [ %memberidx10.i80.i682, %if.entry6.i81.i683 ], [ %memberidx9.i79.i681, %ifend.i78.i680 ]
  %1083 = load i64, ptr %memberidx9.i79.i681.sink1097, align 4
  %1084 = add nsw i64 %1083, 1
  store i64 %1084, ptr %memberidx9.i79.i681.sink1097, align 4
  br label %Lexer_advance.exit84.i693

Lexer_advance.exit84.i693:                        ; preds = %Lexer_advance.exit84.i693.sink.split, %if.entry4.i676
  %1085 = tail call ptr @malloc(i32 16)
  %1086 = tail call ptr @malloc(i32 32)
  %1087 = load i64, ptr %memberidx.i.i607, align 4
  %1088 = add nsw i64 %1087, -2
  %1089 = add nsw i64 %1087, 1
  %memberidx2.i67.i687 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1090 = load i64, ptr %memberidx2.i67.i687, align 4
  %1091 = add i64 %1090, -3
  %memberidx3.i68.i688 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1092 = load i64, ptr %memberidx3.i68.i688, align 4
  store i64 %1088, ptr %1086, align 4
  %memberidx1.i.i69.i689 = getelementptr inbounds %FloRange, ptr %1086, i64 0, i32 1
  store i64 %1089, ptr %memberidx1.i.i69.i689, align 4
  %memberidx2.i.i70.i690 = getelementptr inbounds %FloRange, ptr %1086, i64 0, i32 2
  store i64 %1091, ptr %memberidx2.i.i70.i690, align 4
  %memberidx3.i.i71.i691 = getelementptr inbounds %FloRange, ptr %1086, i64 0, i32 3
  store i64 %1092, ptr %memberidx3.i.i71.i691, align 4
  store i64 21, ptr %1085, align 4
  %memberidx1.i65.i692 = getelementptr inbounds %Token, ptr %1085, i64 0, i32 1
  store ptr %1086, ptr %memberidx1.i65.i692, align 8
  br label %common.ret

ifend6.i701:                                      ; preds = %Lexer_advance.exit50.i660, %if.entry.i56.i662
  %1093 = tail call ptr @malloc(i32 16)
  %1094 = tail call ptr @malloc(i32 32)
  %1095 = load i64, ptr %memberidx.i.i607, align 4
  %1096 = add nsw i64 %1095, -1
  %1097 = add nsw i64 %1095, 1
  %memberidx2.i26.i695 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1098 = load i64, ptr %memberidx2.i26.i695, align 4
  %1099 = add i64 %1098, -2
  %memberidx3.i27.i696 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1100 = load i64, ptr %memberidx3.i27.i696, align 4
  store i64 %1096, ptr %1094, align 4
  %memberidx1.i.i28.i697 = getelementptr inbounds %FloRange, ptr %1094, i64 0, i32 1
  store i64 %1097, ptr %memberidx1.i.i28.i697, align 4
  %memberidx2.i.i29.i698 = getelementptr inbounds %FloRange, ptr %1094, i64 0, i32 2
  store i64 %1099, ptr %memberidx2.i.i29.i698, align 4
  %memberidx3.i.i30.i699 = getelementptr inbounds %FloRange, ptr %1094, i64 0, i32 3
  store i64 %1100, ptr %memberidx3.i.i30.i699, align 4
  store i64 49, ptr %1093, align 4
  %memberidx1.i24.i700 = getelementptr inbounds %Token, ptr %1093, i64 0, i32 1
  store ptr %1094, ptr %memberidx1.i24.i700, align 8
  br label %common.ret

if.entry81:                                       ; preds = %ifend11
  %memberidx.i.i702 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1101 = load i64, ptr %memberidx.i.i702, align 4
  %1102 = add nsw i64 %1101, 1
  %memberidx1.i.i703 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1103 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i.i704 = getelementptr inbounds %string, ptr %1103, i64 0, i32 2
  %1104 = load i64, ptr %memberidx2.i.i704, align 4
  %1105 = icmp slt i64 %1102, %1104
  br i1 %1105, label %if.entry.i.i706, label %else.i734

if.entry.i.i706:                                  ; preds = %if.entry81
  %1106 = load ptr, ptr %1103, align 8
  %memberidx4.i.i705 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1106, i64 0, i32 2
  %1107 = load ptr, ptr %memberidx4.i.i705, align 8
  %1108 = tail call i8 %1107(ptr nonnull %1103, i64 %1102)
  %phi.cmp866 = icmp eq i8 %1108, 61
  %1109 = load i64, ptr %memberidx.i.i702, align 4
  %1110 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i.i.i712 = getelementptr inbounds %string, ptr %1110, i64 0, i32 2
  %1111 = load i64, ptr %memberidx2.i.i.i712, align 4
  br i1 %phi.cmp866, label %if.entry.i713, label %if.entry.i.i706.else.i734_crit_edge

if.entry.i.i706.else.i734_crit_edge:              ; preds = %if.entry.i.i706
  %.pre1041 = add nsw i64 %1109, 1
  br label %else.i734

if.entry.i713:                                    ; preds = %if.entry.i.i706
  %.not871 = icmp slt i64 %1109, %1111
  br i1 %.not871, label %ifend.i.i717, label %Lexer_advance.exit.i730

ifend.i.i717:                                     ; preds = %if.entry.i713
  %1112 = load ptr, ptr %1110, align 8
  %memberidx2.i17.i715 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1112, i64 0, i32 2
  %1113 = load ptr, ptr %memberidx2.i17.i715, align 8
  %1114 = add nsw i64 %1109, 1
  store i64 %1114, ptr %memberidx.i.i702, align 4
  %1115 = tail call i8 %1113(ptr nonnull %1110, i64 %1114)
  store i8 %1115, ptr %0, align 1
  %1116 = icmp eq i8 %1115, 10
  %memberidx9.i.i718 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1116, label %if.entry6.i.i720, label %Lexer_advance.exit.i730.sink.split

if.entry6.i.i720:                                 ; preds = %ifend.i.i717
  store i64 0, ptr %memberidx9.i.i718, align 4
  %memberidx10.i.i719 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i730.sink.split

Lexer_advance.exit.i730.sink.split:               ; preds = %ifend.i.i717, %if.entry6.i.i720
  %memberidx9.i.i718.sink1099 = phi ptr [ %memberidx10.i.i719, %if.entry6.i.i720 ], [ %memberidx9.i.i718, %ifend.i.i717 ]
  %1117 = load i64, ptr %memberidx9.i.i718.sink1099, align 4
  %1118 = add nsw i64 %1117, 1
  store i64 %1118, ptr %memberidx9.i.i718.sink1099, align 4
  br label %Lexer_advance.exit.i730

Lexer_advance.exit.i730:                          ; preds = %Lexer_advance.exit.i730.sink.split, %if.entry.i713
  %1119 = tail call ptr @malloc(i32 16)
  %1120 = tail call ptr @malloc(i32 32)
  %1121 = load i64, ptr %memberidx.i.i702, align 4
  %1122 = add nsw i64 %1121, -1
  %1123 = add nsw i64 %1121, 1
  %memberidx2.i19.i724 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1124 = load i64, ptr %memberidx2.i19.i724, align 4
  %1125 = add i64 %1124, -2
  %memberidx3.i20.i725 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1126 = load i64, ptr %memberidx3.i20.i725, align 4
  store i64 %1122, ptr %1120, align 4
  %memberidx1.i.i21.i726 = getelementptr inbounds %FloRange, ptr %1120, i64 0, i32 1
  store i64 %1123, ptr %memberidx1.i.i21.i726, align 4
  %memberidx2.i.i22.i727 = getelementptr inbounds %FloRange, ptr %1120, i64 0, i32 2
  store i64 %1125, ptr %memberidx2.i.i22.i727, align 4
  %memberidx3.i.i.i728 = getelementptr inbounds %FloRange, ptr %1120, i64 0, i32 3
  store i64 %1126, ptr %memberidx3.i.i.i728, align 4
  store i64 43, ptr %1119, align 4
  %memberidx1.i23.i729 = getelementptr inbounds %Token, ptr %1119, i64 0, i32 1
  store ptr %1120, ptr %memberidx1.i23.i729, align 8
  br label %common.ret

else.i734:                                        ; preds = %if.entry.i.i706.else.i734_crit_edge, %if.entry81
  %.pre-phi1042 = phi i64 [ %.pre1041, %if.entry.i.i706.else.i734_crit_edge ], [ %1102, %if.entry81 ]
  %1127 = phi i64 [ %1111, %if.entry.i.i706.else.i734_crit_edge ], [ %1104, %if.entry81 ]
  %1128 = phi ptr [ %1110, %if.entry.i.i706.else.i734_crit_edge ], [ %1103, %if.entry81 ]
  %1129 = icmp slt i64 %.pre-phi1042, %1127
  br i1 %1129, label %if.entry.i36.i736, label %ifend3.i767

if.entry.i36.i736:                                ; preds = %else.i734
  %1130 = load ptr, ptr %1128, align 8
  %memberidx4.i35.i735 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1130, i64 0, i32 2
  %1131 = load ptr, ptr %memberidx4.i35.i735, align 8
  %1132 = tail call i8 %1131(ptr nonnull %1128, i64 %.pre-phi1042)
  %phi.cmp867 = icmp eq i8 %1132, 60
  br i1 %phi.cmp867, label %if.entry1.i742, label %ifend3.i767

if.entry1.i742:                                   ; preds = %if.entry.i36.i736
  %1133 = load i64, ptr %memberidx.i.i702, align 4
  %1134 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i.i40.i741 = getelementptr inbounds %string, ptr %1134, i64 0, i32 2
  %1135 = load i64, ptr %memberidx2.i.i40.i741, align 4
  %.not868 = icmp slt i64 %1133, %1135
  br i1 %.not868, label %ifend.i44.i746, label %Lexer_advance.exit50.i755

ifend.i44.i746:                                   ; preds = %if.entry1.i742
  %1136 = load ptr, ptr %1134, align 8
  %memberidx2.i42.i744 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1136, i64 0, i32 2
  %1137 = load ptr, ptr %memberidx2.i42.i744, align 8
  %1138 = add nsw i64 %1133, 1
  store i64 %1138, ptr %memberidx.i.i702, align 4
  %1139 = tail call i8 %1137(ptr nonnull %1134, i64 %1138)
  store i8 %1139, ptr %0, align 1
  %1140 = icmp eq i8 %1139, 10
  %memberidx9.i45.i747 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1140, label %if.entry6.i47.i749, label %Lexer_advance.exit50.i755.sink.split

if.entry6.i47.i749:                               ; preds = %ifend.i44.i746
  store i64 0, ptr %memberidx9.i45.i747, align 4
  %memberidx10.i46.i748 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i755.sink.split

Lexer_advance.exit50.i755.sink.split:             ; preds = %ifend.i44.i746, %if.entry6.i47.i749
  %memberidx9.i45.i747.sink1101 = phi ptr [ %memberidx10.i46.i748, %if.entry6.i47.i749 ], [ %memberidx9.i45.i747, %ifend.i44.i746 ]
  %1141 = load i64, ptr %memberidx9.i45.i747.sink1101, align 4
  %1142 = add nsw i64 %1141, 1
  store i64 %1142, ptr %memberidx9.i45.i747.sink1101, align 4
  br label %Lexer_advance.exit50.i755

Lexer_advance.exit50.i755:                        ; preds = %Lexer_advance.exit50.i755.sink.split, %if.entry1.i742
  %1143 = load i64, ptr %memberidx.i.i702, align 4
  %1144 = add nsw i64 %1143, 1
  %1145 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i53.i754 = getelementptr inbounds %string, ptr %1145, i64 0, i32 2
  %1146 = load i64, ptr %memberidx2.i53.i754, align 4
  %1147 = icmp slt i64 %1144, %1146
  br i1 %1147, label %if.entry.i56.i757, label %ifend6.i796

if.entry.i56.i757:                                ; preds = %Lexer_advance.exit50.i755
  %1148 = load ptr, ptr %1145, align 8
  %memberidx4.i55.i756 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1148, i64 0, i32 2
  %1149 = load ptr, ptr %memberidx4.i55.i756, align 8
  %1150 = tail call i8 %1149(ptr nonnull %1145, i64 %1144)
  %phi.cmp869 = icmp eq i8 %1150, 61
  br i1 %phi.cmp869, label %if.entry4.i771, label %ifend6.i796

ifend3.i767:                                      ; preds = %else.i734, %if.entry.i36.i736
  %1151 = tail call ptr @malloc(i32 16)
  %1152 = tail call ptr @malloc(i32 32)
  %1153 = load i64, ptr %memberidx.i.i702, align 4
  %1154 = add nsw i64 %1153, 1
  %memberidx2.i59.i761 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1155 = load i64, ptr %memberidx2.i59.i761, align 4
  %1156 = add i64 %1155, -1
  %memberidx3.i60.i762 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1157 = load i64, ptr %memberidx3.i60.i762, align 4
  store i64 %1153, ptr %1152, align 4
  %memberidx1.i.i61.i763 = getelementptr inbounds %FloRange, ptr %1152, i64 0, i32 1
  store i64 %1154, ptr %memberidx1.i.i61.i763, align 4
  %memberidx2.i.i62.i764 = getelementptr inbounds %FloRange, ptr %1152, i64 0, i32 2
  store i64 %1156, ptr %memberidx2.i.i62.i764, align 4
  %memberidx3.i.i63.i765 = getelementptr inbounds %FloRange, ptr %1152, i64 0, i32 3
  store i64 %1157, ptr %memberidx3.i.i63.i765, align 4
  store i64 42, ptr %1151, align 4
  %memberidx1.i64.i766 = getelementptr inbounds %Token, ptr %1151, i64 0, i32 1
  store ptr %1152, ptr %memberidx1.i64.i766, align 8
  br label %common.ret

if.entry4.i771:                                   ; preds = %if.entry.i56.i757
  %1158 = load i64, ptr %memberidx.i.i702, align 4
  %1159 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i.i74.i770 = getelementptr inbounds %string, ptr %1159, i64 0, i32 2
  %1160 = load i64, ptr %memberidx2.i.i74.i770, align 4
  %.not870 = icmp slt i64 %1158, %1160
  br i1 %.not870, label %ifend.i78.i775, label %Lexer_advance.exit84.i788

ifend.i78.i775:                                   ; preds = %if.entry4.i771
  %1161 = load ptr, ptr %1159, align 8
  %memberidx2.i76.i773 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1161, i64 0, i32 2
  %1162 = load ptr, ptr %memberidx2.i76.i773, align 8
  %1163 = add nsw i64 %1158, 1
  store i64 %1163, ptr %memberidx.i.i702, align 4
  %1164 = tail call i8 %1162(ptr nonnull %1159, i64 %1163)
  store i8 %1164, ptr %0, align 1
  %1165 = icmp eq i8 %1164, 10
  %memberidx9.i79.i776 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1165, label %if.entry6.i81.i778, label %Lexer_advance.exit84.i788.sink.split

if.entry6.i81.i778:                               ; preds = %ifend.i78.i775
  store i64 0, ptr %memberidx9.i79.i776, align 4
  %memberidx10.i80.i777 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i788.sink.split

Lexer_advance.exit84.i788.sink.split:             ; preds = %ifend.i78.i775, %if.entry6.i81.i778
  %memberidx9.i79.i776.sink1103 = phi ptr [ %memberidx10.i80.i777, %if.entry6.i81.i778 ], [ %memberidx9.i79.i776, %ifend.i78.i775 ]
  %1166 = load i64, ptr %memberidx9.i79.i776.sink1103, align 4
  %1167 = add nsw i64 %1166, 1
  store i64 %1167, ptr %memberidx9.i79.i776.sink1103, align 4
  br label %Lexer_advance.exit84.i788

Lexer_advance.exit84.i788:                        ; preds = %Lexer_advance.exit84.i788.sink.split, %if.entry4.i771
  %1168 = tail call ptr @malloc(i32 16)
  %1169 = tail call ptr @malloc(i32 32)
  %1170 = load i64, ptr %memberidx.i.i702, align 4
  %1171 = add nsw i64 %1170, -2
  %1172 = add nsw i64 %1170, 1
  %memberidx2.i67.i782 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1173 = load i64, ptr %memberidx2.i67.i782, align 4
  %1174 = add i64 %1173, -3
  %memberidx3.i68.i783 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1175 = load i64, ptr %memberidx3.i68.i783, align 4
  store i64 %1171, ptr %1169, align 4
  %memberidx1.i.i69.i784 = getelementptr inbounds %FloRange, ptr %1169, i64 0, i32 1
  store i64 %1172, ptr %memberidx1.i.i69.i784, align 4
  %memberidx2.i.i70.i785 = getelementptr inbounds %FloRange, ptr %1169, i64 0, i32 2
  store i64 %1174, ptr %memberidx2.i.i70.i785, align 4
  %memberidx3.i.i71.i786 = getelementptr inbounds %FloRange, ptr %1169, i64 0, i32 3
  store i64 %1175, ptr %memberidx3.i.i71.i786, align 4
  store i64 22, ptr %1168, align 4
  %memberidx1.i65.i787 = getelementptr inbounds %Token, ptr %1168, i64 0, i32 1
  store ptr %1169, ptr %memberidx1.i65.i787, align 8
  br label %common.ret

ifend6.i796:                                      ; preds = %Lexer_advance.exit50.i755, %if.entry.i56.i757
  %1176 = tail call ptr @malloc(i32 16)
  %1177 = tail call ptr @malloc(i32 32)
  %1178 = load i64, ptr %memberidx.i.i702, align 4
  %1179 = add nsw i64 %1178, -1
  %1180 = add nsw i64 %1178, 1
  %memberidx2.i26.i790 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1181 = load i64, ptr %memberidx2.i26.i790, align 4
  %1182 = add i64 %1181, -2
  %memberidx3.i27.i791 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1183 = load i64, ptr %memberidx3.i27.i791, align 4
  store i64 %1179, ptr %1177, align 4
  %memberidx1.i.i28.i792 = getelementptr inbounds %FloRange, ptr %1177, i64 0, i32 1
  store i64 %1180, ptr %memberidx1.i.i28.i792, align 4
  %memberidx2.i.i29.i793 = getelementptr inbounds %FloRange, ptr %1177, i64 0, i32 2
  store i64 %1182, ptr %memberidx2.i.i29.i793, align 4
  %memberidx3.i.i30.i794 = getelementptr inbounds %FloRange, ptr %1177, i64 0, i32 3
  store i64 %1183, ptr %memberidx3.i.i30.i794, align 4
  store i64 48, ptr %1176, align 4
  %memberidx1.i24.i795 = getelementptr inbounds %Token, ptr %1176, i64 0, i32 1
  store ptr %1177, ptr %memberidx1.i24.i795, align 8
  br label %common.ret

if.entry84:                                       ; preds = %ifend11
  %memberidx.i.i797 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1184 = load i64, ptr %memberidx.i.i797, align 4
  %1185 = add nsw i64 %1184, 1
  %memberidx1.i.i798 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1186 = load ptr, ptr %memberidx1.i.i798, align 8
  %memberidx2.i.i799 = getelementptr inbounds %string, ptr %1186, i64 0, i32 2
  %1187 = load i64, ptr %memberidx2.i.i799, align 4
  %1188 = icmp slt i64 %1185, %1187
  br i1 %1188, label %if.entry.i.i801, label %Lexer_dot_token.exit

if.entry.i.i801:                                  ; preds = %if.entry84
  %1189 = load ptr, ptr %1186, align 8
  %memberidx4.i.i800 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1189, i64 0, i32 2
  %1190 = load ptr, ptr %memberidx4.i.i800, align 8
  %1191 = tail call i8 %1190(ptr nonnull %1186, i64 %1185)
  %phi.cmp = icmp eq i8 %1191, 46
  br i1 %phi.cmp, label %if.entry.i807, label %Lexer_dot_token.exit

if.entry.i807:                                    ; preds = %if.entry.i.i801
  %1192 = load i64, ptr %memberidx.i.i797, align 4
  %1193 = load ptr, ptr %memberidx1.i.i798, align 8
  %memberidx2.i.i.i806 = getelementptr inbounds %string, ptr %1193, i64 0, i32 2
  %1194 = load i64, ptr %memberidx2.i.i.i806, align 4
  %.not = icmp slt i64 %1192, %1194
  br i1 %.not, label %ifend.i.i811, label %Lexer_advance.exit.i820

ifend.i.i811:                                     ; preds = %if.entry.i807
  %1195 = load ptr, ptr %1193, align 8
  %memberidx2.i11.i809 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1195, i64 0, i32 2
  %1196 = load ptr, ptr %memberidx2.i11.i809, align 8
  %1197 = add nsw i64 %1192, 1
  store i64 %1197, ptr %memberidx.i.i797, align 4
  %1198 = tail call i8 %1196(ptr nonnull %1193, i64 %1197)
  store i8 %1198, ptr %0, align 1
  %1199 = icmp eq i8 %1198, 10
  %memberidx9.i.i812 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1199, label %if.entry6.i.i814, label %Lexer_advance.exit.i820.sink.split

if.entry6.i.i814:                                 ; preds = %ifend.i.i811
  store i64 0, ptr %memberidx9.i.i812, align 4
  %memberidx10.i.i813 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i820.sink.split

Lexer_advance.exit.i820.sink.split:               ; preds = %ifend.i.i811, %if.entry6.i.i814
  %memberidx9.i.i812.sink1105 = phi ptr [ %memberidx10.i.i813, %if.entry6.i.i814 ], [ %memberidx9.i.i812, %ifend.i.i811 ]
  %1200 = load i64, ptr %memberidx9.i.i812.sink1105, align 4
  %1201 = add nsw i64 %1200, 1
  store i64 %1201, ptr %memberidx9.i.i812.sink1105, align 4
  br label %Lexer_advance.exit.i820

Lexer_advance.exit.i820:                          ; preds = %Lexer_advance.exit.i820.sink.split, %if.entry.i807
  %1202 = load i64, ptr %memberidx.i.i797, align 4
  %1203 = add nsw i64 %1202, 1
  %1204 = load ptr, ptr %memberidx1.i.i798, align 8
  %memberidx2.i14.i819 = getelementptr inbounds %string, ptr %1204, i64 0, i32 2
  %1205 = load i64, ptr %memberidx2.i14.i819, align 4
  %1206 = icmp slt i64 %1203, %1205
  br i1 %1206, label %if.entry.i17.i, label %Lexer_dot_token.exit

if.entry.i17.i:                                   ; preds = %Lexer_advance.exit.i820
  %1207 = load ptr, ptr %1204, align 8
  %memberidx4.i16.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1207, i64 0, i32 2
  %1208 = load ptr, ptr %memberidx4.i16.i, align 8
  %1209 = tail call i8 %1208(ptr nonnull %1204, i64 %1203)
  %phi.cmp864 = icmp eq i8 %1209, 46
  br i1 %phi.cmp864, label %if.entry1.i830, label %Lexer_dot_token.exit

if.entry1.i830:                                   ; preds = %if.entry.i17.i
  %1210 = load i64, ptr %memberidx.i.i797, align 4
  %1211 = load ptr, ptr %memberidx1.i.i798, align 8
  %memberidx2.i.i27.i = getelementptr inbounds %string, ptr %1211, i64 0, i32 2
  %1212 = load i64, ptr %memberidx2.i.i27.i, align 4
  %.not865 = icmp slt i64 %1210, %1212
  br i1 %.not865, label %ifend.i31.i, label %Lexer_dot_token.exit

ifend.i31.i:                                      ; preds = %if.entry1.i830
  %1213 = load ptr, ptr %1211, align 8
  %memberidx2.i29.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1213, i64 0, i32 2
  %1214 = load ptr, ptr %memberidx2.i29.i, align 8
  %1215 = add nsw i64 %1210, 1
  store i64 %1215, ptr %memberidx.i.i797, align 4
  %1216 = tail call i8 %1214(ptr nonnull %1211, i64 %1215)
  store i8 %1216, ptr %0, align 1
  %1217 = icmp eq i8 %1216, 10
  %memberidx9.i32.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1217, label %if.entry6.i34.i, label %Lexer_dot_token.exit.sink.split

if.entry6.i34.i:                                  ; preds = %ifend.i31.i
  store i64 0, ptr %memberidx9.i32.i, align 4
  %memberidx10.i33.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_dot_token.exit.sink.split

Lexer_dot_token.exit.sink.split:                  ; preds = %ifend.i31.i, %if.entry6.i34.i
  %memberidx10.i33.i.sink1107 = phi ptr [ %memberidx10.i33.i, %if.entry6.i34.i ], [ %memberidx9.i32.i, %ifend.i31.i ]
  %1218 = load i64, ptr %memberidx10.i33.i.sink1107, align 4
  %1219 = add nsw i64 %1218, 1
  store i64 %1219, ptr %memberidx10.i33.i.sink1107, align 4
  br label %Lexer_dot_token.exit

Lexer_dot_token.exit:                             ; preds = %Lexer_dot_token.exit.sink.split, %Lexer_advance.exit.i820, %if.entry84, %if.entry1.i830, %if.entry.i.i801, %if.entry.i17.i
  %token.0.i = phi i64 [ 52, %if.entry.i17.i ], [ 50, %if.entry.i.i801 ], [ 53, %if.entry1.i830 ], [ 50, %if.entry84 ], [ 52, %Lexer_advance.exit.i820 ], [ 53, %Lexer_dot_token.exit.sink.split ]
  %length.0.i821 = phi i64 [ 2, %if.entry.i17.i ], [ 1, %if.entry.i.i801 ], [ 3, %if.entry1.i830 ], [ 1, %if.entry84 ], [ 2, %Lexer_advance.exit.i820 ], [ 3, %Lexer_dot_token.exit.sink.split ]
  %1220 = tail call ptr @malloc(i32 16)
  %1221 = tail call ptr @malloc(i32 32)
  %1222 = load i64, ptr %memberidx.i.i797, align 4
  %1223 = sub nsw i64 1, %length.0.i821
  %1224 = add i64 %1223, %1222
  %1225 = add nsw i64 %1222, 1
  %memberidx2.i20.i823 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1226 = load i64, ptr %memberidx2.i20.i823, align 4
  %1227 = sub nuw i64 %1226, %length.0.i821
  %memberidx3.i21.i824 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1228 = load i64, ptr %memberidx3.i21.i824, align 4
  store i64 %1224, ptr %1221, align 4
  %memberidx1.i.i22.i825 = getelementptr inbounds %FloRange, ptr %1221, i64 0, i32 1
  store i64 %1225, ptr %memberidx1.i.i22.i825, align 4
  %memberidx2.i.i23.i826 = getelementptr inbounds %FloRange, ptr %1221, i64 0, i32 2
  store i64 %1227, ptr %memberidx2.i.i23.i826, align 4
  %memberidx3.i.i.i827 = getelementptr inbounds %FloRange, ptr %1221, i64 0, i32 3
  store i64 %1228, ptr %memberidx3.i.i.i827, align 4
  store i64 %token.0.i, ptr %1220, align 4
  %memberidx1.i24.i828 = getelementptr inbounds %Token, ptr %1220, i64 0, i32 1
  store ptr %1221, ptr %memberidx1.i24.i828, align 8
  br label %common.ret

if.entry87:                                       ; preds = %ifend11
  %1229 = tail call ptr @malloc(i32 16)
  %1230 = tail call ptr @malloc(i32 32)
  %memberidx90 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1231 = load i64, ptr %memberidx90, align 4
  %memberidx91 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1232 = load i64, ptr %memberidx91, align 4
  %memberidx2.i832 = getelementptr inbounds %FloRange, ptr %1230, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %1230, i8 0, i64 16, i1 false)
  store i64 %1231, ptr %memberidx2.i832, align 4
  %memberidx3.i833 = getelementptr inbounds %FloRange, ptr %1230, i64 0, i32 3
  store i64 %1232, ptr %memberidx3.i833, align 4
  store i64 46, ptr %1229, align 4
  %memberidx1.i834 = getelementptr inbounds %Token, ptr %1229, i64 0, i32 1
  store ptr %1230, ptr %memberidx1.i834, align 8
  br label %common.ret

ifend89:                                          ; preds = %ifend11
  %memberidx92 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1233 = load ptr, ptr %memberidx92, align 8
  %1234 = load ptr, ptr %1233, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1234, i64 0, i32 1
  %1235 = load ptr, ptr %memberidx93, align 8
  %memberidx94 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1236 = load i64, ptr %memberidx94, align 4
  %1237 = tail call ptr %1235(ptr nonnull %1233, i64 %1236, i64 1)
  %memberidx95 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 2
  %1238 = load ptr, ptr %memberidx95, align 8
  %1239 = tail call ptr @malloc(i32 24)
  %1240 = load ptr, ptr %1237, align 8
  %memberidx96 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1240, i64 0, i32 5
  %1241 = load ptr, ptr %memberidx96, align 8
  %1242 = tail call ptr %1241(ptr nonnull %1237)
  %1243 = alloca ptr, align 8
  %1244 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %1243, ptr nonnull @49, ptr %1242)
  %1245 = load ptr, ptr %1243, align 8
  %1246 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %1246, align 8
  %memberidx.i405 = getelementptr inbounds %string, ptr %1246, i64 0, i32 1
  store ptr %1245, ptr %memberidx.i405, align 8
  %memberidx1.i406 = getelementptr inbounds %string, ptr %1246, i64 0, i32 2
  store i64 %1244, ptr %memberidx1.i406, align 4
  %memberidx2.i407 = getelementptr inbounds %string, ptr %1246, i64 0, i32 3
  store i64 %1244, ptr %memberidx2.i407, align 4
  tail call void @free(ptr %1242)
  %1247 = call ptr @malloc(i32 32)
  %1248 = load i64, ptr %memberidx94, align 4
  %1249 = add nsw i64 %1248, 1
  %memberidx2.i172 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1250 = load i64, ptr %memberidx2.i172, align 4
  %1251 = add i64 %1250, -1
  %memberidx3.i173 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1252 = load i64, ptr %memberidx3.i173, align 4
  store i64 %1248, ptr %1247, align 4
  %memberidx1.i.i174 = getelementptr inbounds %FloRange, ptr %1247, i64 0, i32 1
  store i64 %1249, ptr %memberidx1.i.i174, align 4
  %memberidx2.i.i175 = getelementptr inbounds %FloRange, ptr %1247, i64 0, i32 2
  store i64 %1251, ptr %memberidx2.i.i175, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %1247, i64 0, i32 3
  store i64 %1252, ptr %memberidx3.i.i, align 4
  store i64 0, ptr %1239, align 4
  %memberidx1.i169 = getelementptr inbounds %FloError, ptr %1239, i64 0, i32 2
  store ptr %1247, ptr %memberidx1.i169, align 8
  %memberidx2.i170 = getelementptr inbounds %FloError, ptr %1239, i64 0, i32 1
  store ptr %1246, ptr %memberidx2.i170, align 8
  %memberidx.i165 = getelementptr inbounds %Array_FloError_, ptr %1238, i64 0, i32 2
  %1253 = load i64, ptr %memberidx.i165, align 4
  %memberidx1.i = getelementptr inbounds %Array_FloError_, ptr %1238, i64 0, i32 3
  %1254 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %1253, %1254
  br i1 %.not.i, label %ifend89.Array_FloError____sl__.exit_crit_edge, label %if.entry.i

ifend89.Array_FloError____sl__.exit_crit_edge:    ; preds = %ifend89
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %1238, i64 0, i32 1
  %.pre1019 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_FloError____sl__.exit

if.entry.i:                                       ; preds = %ifend89
  %1255 = shl nuw i64 %1254, 1
  store i64 %1255, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_FloError_, ptr %1238, i64 0, i32 1
  %1256 = load ptr, ptr %memberidx2.i.i, align 8
  %1257 = shl i64 %1254, 4
  %1258 = call ptr @realloc(ptr %1256, i64 %1257)
  store ptr %1258, ptr %memberidx2.i.i, align 8
  %.pre1018 = load i64, ptr %memberidx.i165, align 4
  br label %Array_FloError____sl__.exit

Array_FloError____sl__.exit:                      ; preds = %ifend89.Array_FloError____sl__.exit_crit_edge, %if.entry.i
  %1259 = phi ptr [ %.pre1019, %ifend89.Array_FloError____sl__.exit_crit_edge ], [ %1258, %if.entry.i ]
  %1260 = phi i64 [ %1253, %ifend89.Array_FloError____sl__.exit_crit_edge ], [ %.pre1018, %if.entry.i ]
  %1261 = add nsw i64 %1260, 1
  store i64 %1261, ptr %memberidx.i165, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %1259, i64 %1260
  store ptr %1239, ptr %ptridx.i, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %1237, i64 0, i32 1
  %1262 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %1262)
  tail call void @free(ptr nonnull %1237)
  br label %common.ret
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare double @atof(ptr nocapture) local_unnamed_addr #10

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare i64 @atol(ptr nocapture) local_unnamed_addr #10

; Function Attrs: mustprogress nounwind willreturn
define internal void @StringBuilder_add_byte(ptr nocapture %0, i8 %1) #11 {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  %5 = sub nuw i64 %3, %4
  %6 = icmp slt i64 %5, 2
  br i1 %6, label %if.entry, label %.ifend_crit_edge

.ifend_crit_edge:                                 ; preds = %2
  %memberidx2.phi.trans.insert = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %.pre = load ptr, ptr %memberidx2.phi.trans.insert, align 8
  br label %ifend

if.entry:                                         ; preds = %2
  %7 = shl nuw i64 %3, 1
  store i64 %7, ptr %memberidx, align 4
  %memberidx2.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %9 = tail call ptr @realloc(ptr %8, i64 %7)
  store ptr %9, ptr %memberidx2.i, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx1, align 4
  %11 = getelementptr inbounds i8, ptr %9, i64 %10
  store ptr %11, ptr %memberidx5.i, align 8
  br label %ifend

ifend:                                            ; preds = %.ifend_crit_edge, %if.entry
  %12 = phi ptr [ %.pre, %.ifend_crit_edge ], [ %11, %if.entry ]
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  store i8 %1, ptr %12, align 1
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 1
  store ptr %14, ptr %memberidx2, align 8
  %15 = load i64, ptr %memberidx1, align 4
  %16 = add nuw i64 %15, 1
  store i64 %16, ptr %memberidx1, align 4
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define internal void @StringBuilder_add_bytes_length(ptr nocapture %0, ptr nocapture readonly %1, i64 %2) #11 {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %5 = load i64, ptr %memberidx1, align 4
  %6 = sub nuw i64 %4, %5
  %.not = icmp sgt i64 %6, %2
  br i1 %.not, label %.ifend_crit_edge, label %if.entry

.ifend_crit_edge:                                 ; preds = %3
  %memberidx2.phi.trans.insert = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %.pre = load ptr, ptr %memberidx2.phi.trans.insert, align 8
  br label %ifend

if.entry:                                         ; preds = %3
  %7 = shl nuw i64 %4, 1
  store i64 %7, ptr %memberidx, align 4
  %memberidx2.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %9 = tail call ptr @realloc(ptr %8, i64 %7)
  store ptr %9, ptr %memberidx2.i, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx1, align 4
  %11 = getelementptr inbounds i8, ptr %9, i64 %10
  store ptr %11, ptr %memberidx5.i, align 8
  br label %ifend

ifend:                                            ; preds = %.ifend_crit_edge, %if.entry
  %12 = phi ptr [ %.pre, %.ifend_crit_edge ], [ %11, %if.entry ]
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %1, i64 %2, i1 false)
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 %2
  store ptr %14, ptr %memberidx2, align 8
  %15 = load i64, ptr %memberidx1, align 4
  %16 = add nuw i64 %15, %2
  store i64 %16, ptr %memberidx1, align 4
  ret void
}

define internal void @StringBuilder_append_string(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = tail call ptr %6(ptr nonnull %1)
  %memberidx2 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  tail call void %4(ptr nonnull %0, ptr %7, i64 %8)
  ret void
}

define internal noalias ptr @StringBuilder_get_string(ptr nocapture readonly %0) {
  %2 = tail call ptr @malloc(i32 32)
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %3, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %4, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %4, ptr %memberidx2.i, align 4
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ImportClause__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ImportClause__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ImportNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ImportNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_VarDeclarationStatement__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_VarDeclarationStatement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_EnumNodeField__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumNodeField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_EnumNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_TypeAliasNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_TypeAliasNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ConstDeclarationStatement__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ConstDeclarationStatement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ArgNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ArgNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_StatementNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_StatementNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_MethodNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_MethodNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FieldNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FieldNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_TypeNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_TypeNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_GenericParameterNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_GenericParameterNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ClassDeclarationNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassDeclarationNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FunctionDeclarationNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FunctionDeclarationNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc void @ModuleAST_constructor(ptr nocapture writeonly %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionDeclarationNode_, ptr %2, align 8
  %memberidx.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 1
  %3 = tail call ptr @malloc(i32 64)
  store ptr %3, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  store ptr %2, ptr %0, align 8
  %memberidx3 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 1
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassDeclarationNode_, ptr %4, align 8
  %memberidx.i27 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i27, align 4
  %memberidx1.i28 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i28, align 4
  %memberidx2.i29 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i29, align 8
  store i64 0, ptr %memberidx.i27, align 4
  store ptr %4, ptr %memberidx3, align 8
  %memberidx6 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 3
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ImportNode_, ptr %6, align 8
  %memberidx.i30 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx.i30, align 4
  %memberidx1.i31 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 3
  store i64 8, ptr %memberidx1.i31, align 4
  %memberidx2.i32 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 1
  %7 = tail call ptr @malloc(i32 64)
  store ptr %7, ptr %memberidx2.i32, align 8
  store i64 0, ptr %memberidx.i30, align 4
  store ptr %6, ptr %memberidx6, align 8
  %memberidx9 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 4
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ConstDeclarationStatement_, ptr %8, align 8
  %memberidx.i33 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i33, align 4
  %memberidx1.i34 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i34, align 4
  %memberidx2.i35 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 1
  %9 = tail call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i35, align 8
  store i64 0, ptr %memberidx.i33, align 4
  store ptr %8, ptr %memberidx9, align 8
  %memberidx12 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 5
  %10 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_VarDeclarationStatement_, ptr %10, align 8
  %memberidx.i36 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 2
  store i64 0, ptr %memberidx.i36, align 4
  %memberidx1.i37 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 3
  store i64 8, ptr %memberidx1.i37, align 4
  %memberidx2.i38 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 1
  %11 = tail call ptr @malloc(i32 64)
  store ptr %11, ptr %memberidx2.i38, align 8
  store i64 0, ptr %memberidx.i36, align 4
  store ptr %10, ptr %memberidx12, align 8
  %memberidx15 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 2
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumNode_, ptr %12, align 8
  %memberidx.i39 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx.i39, align 4
  %memberidx1.i40 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 3
  store i64 8, ptr %memberidx1.i40, align 4
  %memberidx2.i41 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 1
  %13 = tail call ptr @malloc(i32 64)
  store ptr %13, ptr %memberidx2.i41, align 8
  store i64 0, ptr %memberidx.i39, align 4
  store ptr %12, ptr %memberidx15, align 8
  %memberidx18 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 6
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeAliasNode_, ptr %14, align 8
  %memberidx.i42 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 2
  store i64 0, ptr %memberidx.i42, align 4
  %memberidx1.i43 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 3
  store i64 8, ptr %memberidx1.i43, align 4
  %memberidx2.i44 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 1
  %15 = tail call ptr @malloc(i32 64)
  store ptr %15, ptr %memberidx2.i44, align 8
  store i64 0, ptr %memberidx.i42, align 4
  store ptr %14, ptr %memberidx18, align 8
  ret void
}

define internal fastcc noalias ptr @Parser_parse(ptr %0, ptr %1) unnamed_addr {
  %3 = alloca %Parser, align 8
  store ptr %0, ptr %3, align 8
  %memberidx1.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 8
  %memberidx2.i72 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx2.i72, align 4
  %5 = icmp sgt i64 %4, -1
  br i1 %5, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %2
  %memberidx3.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 2
  store i64 0, ptr %memberidx2.i, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i.i73, align 8
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %memberidx3.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %2, %if.entry.i
  %8 = phi i64 [ -1, %2 ], [ 0, %if.entry.i ]
  %9 = phi ptr [ undef, %2 ], [ %7, %if.entry.i ]
  %10 = tail call ptr @malloc(i32 56)
  tail call fastcc void @ModuleAST_constructor(ptr %10)
  %memberidx.i75 = getelementptr inbounds %Parser, ptr %3, i64 0, i32 2
  %11 = load i64, ptr %9, align 4
  %12 = icmp eq i64 %11, 33
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %1, i64 0, i32 2
  %13 = load i64, ptr %memberidx3.i.i, align 4
  %14 = icmp eq i64 %13, 0
  %15 = and i1 %12, %14
  br i1 %15, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %Parser_advance.exit
  %memberidx.i.i.i78 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %16 = load i64, ptr %memberidx2.i72, align 4
  %17 = icmp slt i64 %8, %16
  br i1 %17, label %while.entry.i, label %while.entry.i.us

while.entry.i.us:                                 ; preds = %while.entry.i.preheader, %while.entry.i.us
  br label %while.entry.i.us

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %18 = phi i64 [ %25, %Parser_advance.exit.i ], [ 33, %while.entry.i.preheader ]
  %19 = phi ptr [ %27, %Parser_advance.exit.i ], [ %9, %while.entry.i.preheader ]
  %20 = phi i64 [ %28, %Parser_advance.exit.i ], [ %8, %while.entry.i.preheader ]
  %21 = icmp slt i64 %20, %16
  br i1 %21, label %if.entry.i.i79, label %Parser_advance.exit.i

if.entry.i.i79:                                   ; preds = %while.entry.i
  %22 = add nsw i64 %20, 1
  store i64 %22, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx.i.i.i78, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %24, ptr %memberidx.i75, align 8
  %.pre = load i64, ptr %24, align 4
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i79, %while.entry.i
  %25 = phi i64 [ %.pre, %if.entry.i.i79 ], [ %18, %while.entry.i ]
  %26 = phi i64 [ %.pre, %if.entry.i.i79 ], [ 33, %while.entry.i ]
  %27 = phi ptr [ %24, %if.entry.i.i79 ], [ %19, %while.entry.i ]
  %28 = phi i64 [ %22, %if.entry.i.i79 ], [ %20, %while.entry.i ]
  %29 = icmp eq i64 %26, 33
  br i1 %29, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %Parser_advance.exit
  %30 = phi i64 [ %11, %Parser_advance.exit ], [ %25, %Parser_advance.exit.i ]
  %31 = phi ptr [ %9, %Parser_advance.exit ], [ %27, %Parser_advance.exit.i ]
  %32 = icmp ne i64 %30, 46
  %33 = and i1 %32, %14
  br i1 %33, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_new_lines.exit
  %memberidx32 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 5
  %memberidx26 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 4
  %memberidx20 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 3
  %memberidx14 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 2
  %memberidx8 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 1
  %memberidx40 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 6
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_new_lines.exit135
  %34 = phi i64 [ %30, %while.entry.preheader ], [ %112, %Parser_new_lines.exit135 ]
  %35 = phi ptr [ %31, %while.entry.preheader ], [ %113, %Parser_new_lines.exit135 ]
  switch i64 %34, label %else30 [
    i64 61, label %if.entry
    i64 70, label %if.entry5
    i64 71, label %if.entry11
    i64 65, label %if.entry17
    i64 55, label %if.entry23
    i64 56, label %if.entry29
  ]

while.end:                                        ; preds = %Parser_new_lines.exit135, %Parser_new_lines.exit
  ret ptr %10

if.entry:                                         ; preds = %while.entry
  %36 = load i64, ptr %memberidx2.i, align 8
  %37 = load ptr, ptr %3, align 8
  %memberidx2.i87 = getelementptr inbounds %Array_Token_, ptr %37, i64 0, i32 2
  %38 = load i64, ptr %memberidx2.i87, align 4
  %39 = icmp slt i64 %36, %38
  br i1 %39, label %if.entry.i91, label %Parser_advance.exit92

if.entry.i91:                                     ; preds = %if.entry
  %40 = add nsw i64 %36, 1
  store i64 %40, ptr %memberidx2.i, align 8
  %memberidx.i.i89 = getelementptr inbounds %Array_Token_, ptr %37, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i.i89, align 8
  %ptridx.i.i90 = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i.i90, align 8
  store ptr %42, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit92

Parser_advance.exit92:                            ; preds = %if.entry, %if.entry.i91
  %43 = load ptr, ptr %10, align 8
  %44 = call ptr @malloc(i32 33)
  %memberidx.i.i98 = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 1
  %45 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ArgNode_, ptr %45, align 8
  %memberidx.i.i.i99 = getelementptr inbounds %Array_ArgNode_, ptr %45, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i99, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Array_ArgNode_, ptr %45, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i100 = getelementptr inbounds %Array_ArgNode_, ptr %45, i64 0, i32 1
  %46 = call ptr @malloc(i32 64)
  store ptr %46, ptr %memberidx2.i.i.i100, align 8
  store i64 0, ptr %memberidx.i.i.i99, align 4
  store ptr %45, ptr %memberidx.i.i98, align 8
  %memberidx3.i.i102 = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 4
  store i1 false, ptr %memberidx3.i.i102, align 1
  %47 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %47, ptr %44, align 8
  %48 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 25)
  %49 = load ptr, ptr %memberidx.i75, align 8
  %50 = load i64, ptr %49, align 4
  %.not.i104 = icmp eq i64 %50, 26
  br i1 %.not.i104, label %ifend.i, label %if.entry.i106

if.entry.i106:                                    ; preds = %Parser_advance.exit92
  %51 = load ptr, ptr %memberidx.i.i98, align 8
  call fastcc void @Parser_parse_args(ptr nonnull %3, ptr %51)
  br label %ifend.i

ifend.i:                                          ; preds = %if.entry.i106, %Parser_advance.exit92
  %52 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  %53 = load ptr, ptr %memberidx.i75, align 8
  %54 = load i64, ptr %53, align 4
  %55 = icmp eq i64 %54, 1
  br i1 %55, label %if.entry6.i, label %else7.i

if.entry6.i:                                      ; preds = %ifend.i
  %56 = load i64, ptr %memberidx2.i, align 8
  %57 = load ptr, ptr %3, align 8
  %memberidx2.i35.i = getelementptr inbounds %Array_Token_, ptr %57, i64 0, i32 2
  %58 = load i64, ptr %memberidx2.i35.i, align 4
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %if.entry.i.i108, label %Parser_advance.exit.i109

if.entry.i.i108:                                  ; preds = %if.entry6.i
  %60 = add nsw i64 %56, 1
  store i64 %60, ptr %memberidx2.i, align 8
  %memberidx.i.i37.i = getelementptr inbounds %Array_Token_, ptr %57, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i.i37.i, align 8
  %ptridx.i.i.i107 = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i.i.i107, align 8
  store ptr %62, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i109

Parser_advance.exit.i109:                         ; preds = %if.entry.i.i108, %if.entry6.i
  %memberidx9.i = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 3
  %63 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %63, ptr %memberidx9.i, align 8
  br label %ifend8.i

else7.i:                                          ; preds = %ifend.i
  %64 = call ptr @malloc(i32 24)
  %65 = call ptr @malloc(i32 4)
  store i32 1684631414, ptr %65, align 8
  %66 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %66, align 8
  %memberidx.i.i38.i = getelementptr inbounds %string, ptr %66, i64 0, i32 1
  store ptr %65, ptr %memberidx.i.i38.i, align 8
  %memberidx1.i.i39.i = getelementptr inbounds %string, ptr %66, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i39.i, align 4
  %memberidx2.i.i40.i = getelementptr inbounds %string, ptr %66, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i40.i, align 4
  %67 = call ptr @malloc(i32 32)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %67, i8 0, i64 32, i1 false)
  store i64 54, ptr %64, align 4
  %memberidx1.i.i43.i = getelementptr inbounds %Token, ptr %64, i64 0, i32 1
  store ptr %67, ptr %memberidx1.i.i43.i, align 8
  %memberidx.i44.i = getelementptr inbounds %IdentifierToken, ptr %64, i64 0, i32 2
  store ptr %66, ptr %memberidx.i44.i, align 8
  %memberidx10.i = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 3
  %68 = call ptr @malloc(i32 32)
  %69 = load ptr, ptr %memberidx1.i.i43.i, align 8
  store ptr %69, ptr %68, align 8
  %memberidx.i.i45.i = getelementptr inbounds %TypeNode, ptr %68, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i45.i, align 4
  %memberidx.i46.i = getelementptr inbounds %RecordTypeNode, ptr %68, i64 0, i32 2
  store ptr %64, ptr %memberidx.i46.i, align 8
  %memberidx1.i47.i = getelementptr inbounds %RecordTypeNode, ptr %68, i64 0, i32 3
  %70 = call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %70, align 8
  %memberidx.i5.i.i = getelementptr inbounds %Array_TypeNode_, ptr %70, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i.i, align 4
  %memberidx1.i.i48.i = getelementptr inbounds %Array_TypeNode_, ptr %70, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %Array_TypeNode_, ptr %70, i64 0, i32 1
  %71 = call ptr @malloc(i32 64)
  store ptr %71, ptr %memberidx2.i.i49.i, align 8
  store i64 0, ptr %memberidx.i5.i.i, align 4
  store ptr %70, ptr %memberidx1.i47.i, align 8
  store ptr %68, ptr %memberidx10.i, align 8
  br label %ifend8.i

ifend8.i:                                         ; preds = %else7.i, %Parser_advance.exit.i109
  %72 = load ptr, ptr %memberidx.i75, align 8
  %73 = load i64, ptr %72, align 4
  %74 = icmp eq i64 %73, 27
  br i1 %74, label %if.entry14.i, label %else15.i

if.entry14.i:                                     ; preds = %ifend8.i
  %memberidx17.i = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 2
  %75 = call fastcc ptr @Parser_parse_block(ptr nonnull %3)
  store ptr %75, ptr %memberidx17.i, align 8
  br label %Parser_parse_function.exit

else15.i:                                         ; preds = %ifend8.i
  store i1 true, ptr %memberidx3.i.i102, align 1
  br label %Parser_parse_function.exit

Parser_parse_function.exit:                       ; preds = %if.entry14.i, %else15.i
  %memberidx.i111 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %43, i64 0, i32 2
  %76 = load i64, ptr %memberidx.i111, align 4
  %memberidx1.i112 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %43, i64 0, i32 3
  %77 = load i64, ptr %memberidx1.i112, align 4
  %.not.i113 = icmp slt i64 %76, %77
  br i1 %.not.i113, label %Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge, label %if.entry.i116

Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge: ; preds = %Parser_parse_function.exit
  %memberidx4.i117.phi.trans.insert = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %43, i64 0, i32 1
  %.pre353 = load ptr, ptr %memberidx4.i117.phi.trans.insert, align 8
  br label %Array_FunctionDeclarationNode____sl__.exit

if.entry.i116:                                    ; preds = %Parser_parse_function.exit
  %78 = shl nuw i64 %77, 1
  store i64 %78, ptr %memberidx1.i112, align 4
  %memberidx2.i.i115 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %43, i64 0, i32 1
  %79 = load ptr, ptr %memberidx2.i.i115, align 8
  %80 = shl i64 %77, 4
  %81 = call ptr @realloc(ptr %79, i64 %80)
  store ptr %81, ptr %memberidx2.i.i115, align 8
  %.pre352 = load i64, ptr %memberidx.i111, align 4
  br label %Array_FunctionDeclarationNode____sl__.exit

Array_FunctionDeclarationNode____sl__.exit:       ; preds = %Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge, %if.entry.i116
  %82 = phi ptr [ %.pre353, %Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge ], [ %81, %if.entry.i116 ]
  %83 = phi i64 [ %76, %Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge ], [ %.pre352, %if.entry.i116 ]
  %84 = add nsw i64 %83, 1
  store i64 %84, ptr %memberidx.i111, align 4
  %ptridx.i118 = getelementptr inbounds ptr, ptr %82, i64 %83
  store ptr %44, ptr %ptridx.i118, align 8
  br label %ifend

ifend:                                            ; preds = %Array_TypeAliasNode____sl__.exit, %Parser_error.exit, %Array_VarDeclarationStatement____sl__.exit, %Array_ConstDeclarationStatement____sl__.exit, %Array_ImportNode____sl__.exit, %Array_EnumNode____sl__.exit, %Array_ClassDeclarationNode____sl__.exit, %Array_FunctionDeclarationNode____sl__.exit
  %85 = load ptr, ptr %memberidx.i75, align 8
  %86 = load i64, ptr %85, align 4
  %87 = icmp eq i64 %86, 33
  %88 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i123 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 2
  %89 = load i64, ptr %memberidx3.i.i123, align 4
  %90 = icmp eq i64 %89, 0
  %91 = and i1 %87, %90
  br i1 %91, label %while.entry.i126.preheader, label %Parser_new_lines.exit135

while.entry.i126.preheader:                       ; preds = %ifend
  %92 = load ptr, ptr %3, align 8
  %memberidx2.i12.i125 = getelementptr inbounds %Array_Token_, ptr %92, i64 0, i32 2
  %memberidx.i.i.i128 = getelementptr inbounds %Array_Token_, ptr %92, i64 0, i32 1
  %.pre358 = load i64, ptr %memberidx2.i, align 8
  br label %while.entry.i126

while.entry.i126:                                 ; preds = %while.entry.i126.preheader, %Parser_advance.exit.i134
  %93 = phi i64 [ 0, %while.entry.i126.preheader ], [ %102, %Parser_advance.exit.i134 ]
  %94 = phi i64 [ 33, %while.entry.i126.preheader ], [ %103, %Parser_advance.exit.i134 ]
  %95 = phi ptr [ %85, %while.entry.i126.preheader ], [ %106, %Parser_advance.exit.i134 ]
  %96 = phi i64 [ %.pre358, %while.entry.i126.preheader ], [ %107, %Parser_advance.exit.i134 ]
  %97 = load i64, ptr %memberidx2.i12.i125, align 4
  %98 = icmp slt i64 %96, %97
  br i1 %98, label %if.entry.i.i130, label %Parser_advance.exit.i134

if.entry.i.i130:                                  ; preds = %while.entry.i126
  %99 = add nsw i64 %96, 1
  store i64 %99, ptr %memberidx2.i, align 8
  %100 = load ptr, ptr %memberidx.i.i.i128, align 8
  %ptridx.i.i.i129 = getelementptr inbounds ptr, ptr %100, i64 %99
  %101 = load ptr, ptr %ptridx.i.i.i129, align 8
  store ptr %101, ptr %memberidx.i75, align 8
  %.pre359 = load i64, ptr %101, align 4
  %.pre360 = load i64, ptr %memberidx3.i.i123, align 4
  br label %Parser_advance.exit.i134

Parser_advance.exit.i134:                         ; preds = %if.entry.i.i130, %while.entry.i126
  %102 = phi i64 [ %.pre360, %if.entry.i.i130 ], [ %93, %while.entry.i126 ]
  %103 = phi i64 [ %.pre359, %if.entry.i.i130 ], [ %94, %while.entry.i126 ]
  %104 = phi i64 [ %.pre360, %if.entry.i.i130 ], [ 0, %while.entry.i126 ]
  %105 = phi i64 [ %.pre359, %if.entry.i.i130 ], [ 33, %while.entry.i126 ]
  %106 = phi ptr [ %101, %if.entry.i.i130 ], [ %95, %while.entry.i126 ]
  %107 = phi i64 [ %99, %if.entry.i.i130 ], [ %96, %while.entry.i126 ]
  %108 = icmp eq i64 %105, 33
  %109 = icmp eq i64 %104, 0
  %110 = and i1 %108, %109
  br i1 %110, label %while.entry.i126, label %Parser_new_lines.exit135

Parser_new_lines.exit135:                         ; preds = %Parser_advance.exit.i134, %ifend
  %111 = phi i64 [ %89, %ifend ], [ %102, %Parser_advance.exit.i134 ]
  %112 = phi i64 [ %86, %ifend ], [ %103, %Parser_advance.exit.i134 ]
  %113 = phi ptr [ %85, %ifend ], [ %106, %Parser_advance.exit.i134 ]
  %114 = icmp ne i64 %112, 46
  %115 = icmp eq i64 %111, 0
  %116 = and i1 %114, %115
  br i1 %116, label %while.entry, label %while.end

if.entry5:                                        ; preds = %while.entry
  %117 = load ptr, ptr %memberidx8, align 8
  %118 = load i64, ptr %memberidx2.i, align 8
  %119 = load ptr, ptr %3, align 8
  %memberidx2.i.i140 = getelementptr inbounds %Array_Token_, ptr %119, i64 0, i32 2
  %120 = load i64, ptr %memberidx2.i.i140, align 4
  %121 = icmp slt i64 %118, %120
  br i1 %121, label %if.entry.i.i144, label %Parser_advance.exit.i150

if.entry.i.i144:                                  ; preds = %if.entry5
  %122 = add nsw i64 %118, 1
  store i64 %122, ptr %memberidx2.i, align 8
  %memberidx.i.i.i142 = getelementptr inbounds %Array_Token_, ptr %119, i64 0, i32 1
  %123 = load ptr, ptr %memberidx.i.i.i142, align 8
  %ptridx.i.i.i143 = getelementptr inbounds ptr, ptr %123, i64 %122
  %124 = load ptr, ptr %ptridx.i.i.i143, align 8
  store ptr %124, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i150

Parser_advance.exit.i150:                         ; preds = %if.entry.i.i144, %if.entry5
  %125 = call ptr @malloc(i32 40)
  %126 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %126, ptr %125, align 8
  %memberidx1.i.i145 = getelementptr inbounds %ClassDeclarationNode, ptr %125, i64 0, i32 3
  %127 = call ptr @malloc(i32 32)
  store ptr @VTableArray_FieldNode_, ptr %127, align 8
  %memberidx.i.i21.i = getelementptr inbounds %Array_FieldNode_, ptr %127, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i21.i, align 4
  %memberidx1.i.i.i146 = getelementptr inbounds %Array_FieldNode_, ptr %127, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i146, align 4
  %memberidx2.i.i.i147 = getelementptr inbounds %Array_FieldNode_, ptr %127, i64 0, i32 1
  %128 = call ptr @malloc(i32 64)
  store ptr %128, ptr %memberidx2.i.i.i147, align 8
  store i64 0, ptr %memberidx.i.i21.i, align 4
  store ptr %127, ptr %memberidx1.i.i145, align 8
  %memberidx4.i.i148 = getelementptr inbounds %ClassDeclarationNode, ptr %125, i64 0, i32 4
  %129 = call ptr @malloc(i32 32)
  store ptr @VTableArray_MethodNode_, ptr %129, align 8
  %memberidx.i15.i.i = getelementptr inbounds %Array_MethodNode_, ptr %129, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i.i, align 4
  %memberidx1.i16.i.i = getelementptr inbounds %Array_MethodNode_, ptr %129, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i.i, align 4
  %memberidx2.i17.i.i = getelementptr inbounds %Array_MethodNode_, ptr %129, i64 0, i32 1
  %130 = call ptr @malloc(i32 64)
  store ptr %130, ptr %memberidx2.i17.i.i, align 8
  store i64 0, ptr %memberidx.i15.i.i, align 4
  store ptr %129, ptr %memberidx4.i.i148, align 8
  %memberidx7.i.i = getelementptr inbounds %ClassDeclarationNode, ptr %125, i64 0, i32 1
  %131 = call ptr @malloc(i32 32)
  store ptr @VTableArray_GenericParameterNode_, ptr %131, align 8
  %memberidx.i18.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %131, i64 0, i32 2
  store i64 0, ptr %memberidx.i18.i.i, align 4
  %memberidx1.i19.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %131, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19.i.i, align 4
  %memberidx2.i20.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %131, i64 0, i32 1
  %132 = call ptr @malloc(i32 64)
  store ptr %132, ptr %memberidx2.i20.i.i, align 8
  store i64 0, ptr %memberidx.i18.i.i, align 4
  store ptr %131, ptr %memberidx7.i.i, align 8
  %memberidx10.i.i = getelementptr inbounds %ClassDeclarationNode, ptr %125, i64 0, i32 2
  store ptr null, ptr %memberidx10.i.i, align 8
  %133 = load ptr, ptr %memberidx.i75, align 8
  %134 = load i64, ptr %133, align 4
  %135 = icmp eq i64 %134, 42
  br i1 %135, label %if.entry.i152, label %ifend.i153

if.entry.i152:                                    ; preds = %Parser_advance.exit.i150
  %136 = load i64, ptr %memberidx2.i, align 8
  %137 = load ptr, ptr %3, align 8
  %memberidx2.i.i24.i = getelementptr inbounds %Array_Token_, ptr %137, i64 0, i32 2
  %138 = load i64, ptr %memberidx2.i.i24.i, align 4
  %139 = icmp slt i64 %136, %138
  br i1 %139, label %if.entry.i.i.i, label %Parser_advance.exit.i.i

if.entry.i.i.i:                                   ; preds = %if.entry.i152
  %140 = add nsw i64 %136, 1
  store i64 %140, ptr %memberidx2.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %137, i64 0, i32 1
  %141 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %141, i64 %140
  %142 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %142, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i.i.i, %if.entry.i152
  %143 = call ptr @malloc(i32 8)
  %144 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %144, ptr %143, align 8
  %145 = load i64, ptr %memberidx.i18.i.i, align 4
  %146 = load i64, ptr %memberidx1.i19.i.i, align 4
  %.not.i21.i.i = icmp slt i64 %145, %146
  br i1 %.not.i21.i.i, label %Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge, label %if.entry.i24.i.i

Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge: ; preds = %Parser_advance.exit.i.i
  %.pre340 = load ptr, ptr %memberidx2.i20.i.i, align 8
  br label %Array_GenericParameterNode____sl__.exit27.i.i

if.entry.i24.i.i:                                 ; preds = %Parser_advance.exit.i.i
  %147 = shl nuw i64 %146, 1
  store i64 %147, ptr %memberidx1.i19.i.i, align 4
  %148 = load ptr, ptr %memberidx2.i20.i.i, align 8
  %149 = shl i64 %146, 4
  %150 = call ptr @realloc(ptr %148, i64 %149)
  store ptr %150, ptr %memberidx2.i20.i.i, align 8
  %.pre339 = load i64, ptr %memberidx.i18.i.i, align 4
  br label %Array_GenericParameterNode____sl__.exit27.i.i

Array_GenericParameterNode____sl__.exit27.i.i:    ; preds = %Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge, %if.entry.i24.i.i
  %151 = phi ptr [ %150, %if.entry.i24.i.i ], [ %.pre340, %Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge ]
  %152 = phi i64 [ %.pre339, %if.entry.i24.i.i ], [ %145, %Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge ]
  %153 = add nsw i64 %152, 1
  store i64 %153, ptr %memberidx.i18.i.i, align 4
  %ptridx.i26.i.i = getelementptr inbounds ptr, ptr %151, i64 %152
  store ptr %143, ptr %ptridx.i26.i.i, align 8
  %154 = load ptr, ptr %memberidx.i75, align 8
  %155 = load i64, ptr %154, align 4
  %156 = icmp eq i64 %155, 3
  %157 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i30.i.i = getelementptr inbounds %Array_FloError_, ptr %157, i64 0, i32 2
  %158 = load i64, ptr %memberidx3.i30.i.i, align 4
  %159 = icmp eq i64 %158, 0
  %160 = and i1 %156, %159
  br i1 %160, label %while.entry.i.i, label %Parser_parse_generic_parameters.exit.i

while.entry.i.i:                                  ; preds = %Array_GenericParameterNode____sl__.exit27.i.i, %Array_GenericParameterNode____sl__.exit.i.i
  %161 = load i64, ptr %memberidx2.i, align 8
  %162 = load ptr, ptr %3, align 8
  %memberidx2.i32.i.i = getelementptr inbounds %Array_Token_, ptr %162, i64 0, i32 2
  %163 = load i64, ptr %memberidx2.i32.i.i, align 4
  %164 = icmp slt i64 %161, %163
  br i1 %164, label %if.entry.i36.i.i, label %Parser_advance.exit37.i.i

if.entry.i36.i.i:                                 ; preds = %while.entry.i.i
  %165 = add nsw i64 %161, 1
  store i64 %165, ptr %memberidx2.i, align 8
  %memberidx.i.i34.i.i = getelementptr inbounds %Array_Token_, ptr %162, i64 0, i32 1
  %166 = load ptr, ptr %memberidx.i.i34.i.i, align 8
  %ptridx.i.i35.i.i = getelementptr inbounds ptr, ptr %166, i64 %165
  %167 = load ptr, ptr %ptridx.i.i35.i.i, align 8
  store ptr %167, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit37.i.i

Parser_advance.exit37.i.i:                        ; preds = %if.entry.i36.i.i, %while.entry.i.i
  %168 = call ptr @malloc(i32 8)
  %169 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %169, ptr %168, align 8
  %170 = load i64, ptr %memberidx.i18.i.i, align 4
  %171 = load i64, ptr %memberidx1.i19.i.i, align 4
  %.not.i.i.i = icmp slt i64 %170, %171
  br i1 %.not.i.i.i, label %Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge, label %if.entry.i18.i.i

Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge: ; preds = %Parser_advance.exit37.i.i
  %.pre342 = load ptr, ptr %memberidx2.i20.i.i, align 8
  br label %Array_GenericParameterNode____sl__.exit.i.i

if.entry.i18.i.i:                                 ; preds = %Parser_advance.exit37.i.i
  %172 = shl nuw i64 %171, 1
  store i64 %172, ptr %memberidx1.i19.i.i, align 4
  %173 = load ptr, ptr %memberidx2.i20.i.i, align 8
  %174 = shl i64 %171, 4
  %175 = call ptr @realloc(ptr %173, i64 %174)
  store ptr %175, ptr %memberidx2.i20.i.i, align 8
  %.pre341 = load i64, ptr %memberidx.i18.i.i, align 4
  br label %Array_GenericParameterNode____sl__.exit.i.i

Array_GenericParameterNode____sl__.exit.i.i:      ; preds = %Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge, %if.entry.i18.i.i
  %176 = phi ptr [ %175, %if.entry.i18.i.i ], [ %.pre342, %Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge ]
  %177 = phi i64 [ %.pre341, %if.entry.i18.i.i ], [ %170, %Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge ]
  %178 = add nsw i64 %177, 1
  store i64 %178, ptr %memberidx.i18.i.i, align 4
  %ptridx.i.i27.i = getelementptr inbounds ptr, ptr %176, i64 %177
  store ptr %168, ptr %ptridx.i.i27.i, align 8
  %179 = load ptr, ptr %memberidx.i75, align 8
  %180 = load i64, ptr %179, align 4
  %181 = icmp eq i64 %180, 3
  %182 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i15.i.i = getelementptr inbounds %Array_FloError_, ptr %182, i64 0, i32 2
  %183 = load i64, ptr %memberidx3.i15.i.i, align 4
  %184 = icmp eq i64 %183, 0
  %185 = and i1 %181, %184
  br i1 %185, label %while.entry.i.i, label %Parser_parse_generic_parameters.exit.i

Parser_parse_generic_parameters.exit.i:           ; preds = %Array_GenericParameterNode____sl__.exit.i.i, %Array_GenericParameterNode____sl__.exit27.i.i
  %186 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 41)
  %.pre343 = load ptr, ptr %memberidx.i75, align 8
  %.pre344 = load i64, ptr %.pre343, align 4
  br label %ifend.i153

ifend.i153:                                       ; preds = %Parser_parse_generic_parameters.exit.i, %Parser_advance.exit.i150
  %187 = phi i64 [ %.pre344, %Parser_parse_generic_parameters.exit.i ], [ %134, %Parser_advance.exit.i150 ]
  %188 = icmp eq i64 %187, 25
  br i1 %188, label %if.entry5.i, label %ifend7.i

if.entry5.i:                                      ; preds = %ifend.i153
  %189 = load i64, ptr %memberidx2.i, align 8
  %190 = load ptr, ptr %3, align 8
  %memberidx2.i29.i = getelementptr inbounds %Array_Token_, ptr %190, i64 0, i32 2
  %191 = load i64, ptr %memberidx2.i29.i, align 4
  %192 = icmp slt i64 %189, %191
  br i1 %192, label %if.entry.i33.i, label %Parser_advance.exit34.i

if.entry.i33.i:                                   ; preds = %if.entry5.i
  %193 = add nsw i64 %189, 1
  store i64 %193, ptr %memberidx2.i, align 8
  %memberidx.i.i31.i = getelementptr inbounds %Array_Token_, ptr %190, i64 0, i32 1
  %194 = load ptr, ptr %memberidx.i.i31.i, align 8
  %ptridx.i.i32.i = getelementptr inbounds ptr, ptr %194, i64 %193
  %195 = load ptr, ptr %ptridx.i.i32.i, align 8
  store ptr %195, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit34.i

Parser_advance.exit34.i:                          ; preds = %if.entry.i33.i, %if.entry5.i
  %196 = call fastcc ptr @Parser_parse_object_type(ptr nonnull %3)
  store ptr %196, ptr %memberidx10.i.i, align 8
  %197 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  %.pre345 = load ptr, ptr %memberidx.i75, align 8
  %.pre346 = load i64, ptr %.pre345, align 4
  br label %ifend7.i

ifend7.i:                                         ; preds = %Parser_advance.exit34.i, %ifend.i153
  %198 = phi i64 [ %.pre346, %Parser_advance.exit34.i ], [ %187, %ifend.i153 ]
  %199 = icmp eq i64 %198, 33
  %200 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i38.i = getelementptr inbounds %Array_FloError_, ptr %200, i64 0, i32 2
  %201 = load i64, ptr %memberidx3.i.i38.i, align 4
  %202 = icmp eq i64 %201, 0
  %203 = and i1 %199, %202
  br i1 %203, label %while.entry.i39.i.preheader, label %Parser_parse_class.exit

while.entry.i39.i.preheader:                      ; preds = %ifend7.i
  %204 = load ptr, ptr %3, align 8
  %memberidx2.i12.i.i = getelementptr inbounds %Array_Token_, ptr %204, i64 0, i32 2
  %memberidx.i.i.i40.i = getelementptr inbounds %Array_Token_, ptr %204, i64 0, i32 1
  %.pre347 = load i64, ptr %memberidx2.i, align 8
  br label %while.entry.i39.i

while.entry.i39.i:                                ; preds = %while.entry.i39.i.preheader, %Parser_advance.exit.i43.i
  %205 = phi i64 [ %.pre347, %while.entry.i39.i.preheader ], [ %213, %Parser_advance.exit.i43.i ]
  %206 = load i64, ptr %memberidx2.i12.i.i, align 4
  %207 = icmp slt i64 %205, %206
  br i1 %207, label %if.entry.i.i42.i, label %Parser_advance.exit.i43.i

if.entry.i.i42.i:                                 ; preds = %while.entry.i39.i
  %208 = add nsw i64 %205, 1
  store i64 %208, ptr %memberidx2.i, align 8
  %209 = load ptr, ptr %memberidx.i.i.i40.i, align 8
  %ptridx.i.i.i41.i = getelementptr inbounds ptr, ptr %209, i64 %208
  %210 = load ptr, ptr %ptridx.i.i.i41.i, align 8
  store ptr %210, ptr %memberidx.i75, align 8
  %.pre348 = load i64, ptr %210, align 4
  %.pre349 = load i64, ptr %memberidx3.i.i38.i, align 4
  br label %Parser_advance.exit.i43.i

Parser_advance.exit.i43.i:                        ; preds = %if.entry.i.i42.i, %while.entry.i39.i
  %211 = phi i64 [ %.pre349, %if.entry.i.i42.i ], [ 0, %while.entry.i39.i ]
  %212 = phi i64 [ %.pre348, %if.entry.i.i42.i ], [ 33, %while.entry.i39.i ]
  %213 = phi i64 [ %208, %if.entry.i.i42.i ], [ %205, %while.entry.i39.i ]
  %214 = icmp eq i64 %212, 33
  %215 = icmp eq i64 %211, 0
  %216 = and i1 %214, %215
  br i1 %216, label %while.entry.i39.i, label %Parser_parse_class.exit

Parser_parse_class.exit:                          ; preds = %Parser_advance.exit.i43.i, %ifend7.i
  %217 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 27)
  %218 = load ptr, ptr %memberidx.i75, align 8
  %219 = load i64, ptr %218, align 4
  %220 = icmp eq i64 %219, 33
  %221 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i.i261 = getelementptr inbounds %Array_FloError_, ptr %221, i64 0, i32 2
  %222 = load i64, ptr %memberidx3.i.i.i261, align 4
  %223 = icmp eq i64 %222, 0
  %224 = and i1 %220, %223
  br i1 %224, label %while.entry.i.preheader.i, label %Parser_new_lines.exit.i

while.entry.i.preheader.i:                        ; preds = %Parser_parse_class.exit
  %225 = load ptr, ptr %3, align 8
  %memberidx2.i12.i.i263 = getelementptr inbounds %Array_Token_, ptr %225, i64 0, i32 2
  %memberidx.i.i.i.i264 = getelementptr inbounds %Array_Token_, ptr %225, i64 0, i32 1
  %226 = load i64, ptr %memberidx2.i, align 8
  %227 = load i64, ptr %memberidx2.i12.i.i263, align 4
  %228 = icmp slt i64 %226, %227
  br i1 %228, label %while.entry.i.i265, label %while.entry.i.us.i

while.entry.i.us.i:                               ; preds = %while.entry.i.preheader.i, %while.entry.i.us.i
  br label %while.entry.i.us.i

while.entry.i.i265:                               ; preds = %while.entry.i.preheader.i, %Parser_advance.exit.i.i268
  %229 = phi i64 [ %236, %Parser_advance.exit.i.i268 ], [ 33, %while.entry.i.preheader.i ]
  %230 = phi i64 [ %239, %Parser_advance.exit.i.i268 ], [ %226, %while.entry.i.preheader.i ]
  %231 = load i64, ptr %memberidx2.i12.i.i263, align 4
  %232 = icmp slt i64 %230, %231
  br i1 %232, label %if.entry.i.i.i267, label %Parser_advance.exit.i.i268

if.entry.i.i.i267:                                ; preds = %while.entry.i.i265
  %233 = add nsw i64 %230, 1
  store i64 %233, ptr %memberidx2.i, align 8
  %234 = load ptr, ptr %memberidx.i.i.i.i264, align 8
  %ptridx.i.i.i.i266 = getelementptr inbounds ptr, ptr %234, i64 %233
  %235 = load ptr, ptr %ptridx.i.i.i.i266, align 8
  store ptr %235, ptr %memberidx.i75, align 8
  %.pre.i = load i64, ptr %235, align 4
  %.pre161.i = load i64, ptr %memberidx3.i.i.i261, align 4
  br label %Parser_advance.exit.i.i268

Parser_advance.exit.i.i268:                       ; preds = %if.entry.i.i.i267, %while.entry.i.i265
  %236 = phi i64 [ %.pre.i, %if.entry.i.i.i267 ], [ %229, %while.entry.i.i265 ]
  %237 = phi i64 [ %.pre161.i, %if.entry.i.i.i267 ], [ 0, %while.entry.i.i265 ]
  %238 = phi i64 [ %.pre.i, %if.entry.i.i.i267 ], [ 33, %while.entry.i.i265 ]
  %239 = phi i64 [ %233, %if.entry.i.i.i267 ], [ %230, %while.entry.i.i265 ]
  %240 = icmp eq i64 %238, 33
  %241 = icmp eq i64 %237, 0
  %242 = and i1 %241, %240
  br i1 %242, label %while.entry.i.i265, label %Parser_new_lines.exit.i

Parser_new_lines.exit.i:                          ; preds = %Parser_advance.exit.i.i268, %Parser_parse_class.exit
  %243 = phi i64 [ %219, %Parser_parse_class.exit ], [ %236, %Parser_advance.exit.i.i268 ]
  %244 = phi i64 [ %222, %Parser_parse_class.exit ], [ %237, %Parser_advance.exit.i.i268 ]
  %.fr.i = freeze i64 %244
  %245 = icmp eq i64 %.fr.i, 0
  br i1 %245, label %switch.early.test.i, label %while.end.i271

switch.early.test.i:                              ; preds = %Parser_new_lines.exit.i
  switch i64 %243, label %while.entry.i270 [
    i64 46, label %while.end.i271
    i64 28, label %while.end.i271
  ]

while.entry.i270:                                 ; preds = %switch.early.test.i, %switch.early.test147.i
  %246 = phi i64 [ %302, %switch.early.test147.i ], [ %243, %switch.early.test.i ]
  switch i64 %246, label %if.entry.i272 [
    i64 67, label %else.i
    i64 66, label %Parser_parse_access_modifier.exit.fold.split.i
    i64 68, label %else.fold.split.i
  ]

Parser_parse_access_modifier.exit.fold.split.i:   ; preds = %while.entry.i270
  br label %else.i

while.end.i271:                                   ; preds = %switch.early.test147.i, %switch.early.test147.i, %Parser_new_lines.exit115.i, %switch.early.test.i, %switch.early.test.i, %Parser_new_lines.exit.i
  %247 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 28)
  br label %Parser_parse_class_block.exit

if.entry.i272:                                    ; preds = %while.entry.i270
  %.pre162.i = load i64, ptr %memberidx2.i, align 8
  %.pre163.i = load ptr, ptr %3, align 8
  br label %ifend.i274

else.fold.split.i:                                ; preds = %while.entry.i270
  br label %else.i

else.i:                                           ; preds = %else.fold.split.i, %Parser_parse_access_modifier.exit.fold.split.i, %while.entry.i270
  %common.ret.op.i.ph.i = phi i64 [ 1, %Parser_parse_access_modifier.exit.fold.split.i ], [ 2, %while.entry.i270 ], [ 3, %else.fold.split.i ]
  %248 = load i64, ptr %memberidx2.i, align 8
  %249 = load ptr, ptr %3, align 8
  %memberidx2.i55.i = getelementptr inbounds %Array_Token_, ptr %249, i64 0, i32 2
  %250 = load i64, ptr %memberidx2.i55.i, align 4
  %251 = icmp slt i64 %248, %250
  br i1 %251, label %if.entry.i.i273, label %ifend.i274

if.entry.i.i273:                                  ; preds = %else.i
  %252 = add nsw i64 %248, 1
  store i64 %252, ptr %memberidx2.i, align 8
  %memberidx.i.i57.i = getelementptr inbounds %Array_Token_, ptr %249, i64 0, i32 1
  %253 = load ptr, ptr %memberidx.i.i57.i, align 8
  %ptridx.i.i58.i = getelementptr inbounds ptr, ptr %253, i64 %252
  %254 = load ptr, ptr %ptridx.i.i58.i, align 8
  store ptr %254, ptr %memberidx.i75, align 8
  br label %ifend.i274

ifend.i274:                                       ; preds = %if.entry.i.i273, %else.i, %if.entry.i272
  %255 = phi i64 [ %common.ret.op.i.ph.i, %if.entry.i.i273 ], [ %common.ret.op.i.ph.i, %else.i ], [ 2, %if.entry.i272 ]
  %256 = phi ptr [ %249, %if.entry.i.i273 ], [ %249, %else.i ], [ %.pre163.i, %if.entry.i272 ]
  %257 = phi i64 [ %252, %if.entry.i.i273 ], [ %248, %else.i ], [ %.pre162.i, %if.entry.i272 ]
  %258 = add nsw i64 %257, 1
  %memberidx2.i61.i = getelementptr inbounds %Array_Token_, ptr %256, i64 0, i32 2
  %259 = load i64, ptr %memberidx2.i61.i, align 4
  %260 = icmp slt i64 %258, %259
  br i1 %260, label %Parser_peek.exit.i, label %Parser_peek.exit.thread.i

Parser_peek.exit.i:                               ; preds = %ifend.i274
  %memberidx.i.i63.i = getelementptr inbounds %Array_Token_, ptr %256, i64 0, i32 1
  %261 = load ptr, ptr %memberidx.i.i63.i, align 8
  %ptridx.i.i64.i = getelementptr inbounds ptr, ptr %261, i64 %258
  %common.ret.op.i62.i = load ptr, ptr %ptridx.i.i64.i, align 8
  %262 = load i64, ptr %common.ret.op.i62.i, align 4
  %263 = icmp eq i64 %262, 1
  br i1 %263, label %if.entry3.i, label %Parser_peek.exit99.i

Parser_peek.exit.thread.i:                        ; preds = %ifend.i274
  %264 = add i64 %259, -1
  %memberidx.i12.i.i = getelementptr inbounds %Array_Token_, ptr %256, i64 0, i32 1
  %265 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %265, i64 %264
  %common.ret.op.i62150.i = load ptr, ptr %ptridx.i13.i.i, align 8
  %266 = load i64, ptr %common.ret.op.i62150.i, align 4
  %267 = icmp eq i64 %266, 1
  br i1 %267, label %if.entry3.i, label %Parser_peek.exit99.i

if.entry3.i:                                      ; preds = %Parser_peek.exit.thread.i, %Parser_peek.exit.i
  %268 = call ptr @malloc(i32 32)
  %269 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %269, ptr %268, align 8
  %memberidx1.i73.i = getelementptr inbounds %FieldNode, ptr %268, i64 0, i32 2
  store ptr null, ptr %memberidx1.i73.i, align 8
  %270 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 1)
  %memberidx6.i = getelementptr inbounds %FieldNode, ptr %268, i64 0, i32 3
  %271 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %271, ptr %memberidx6.i, align 8
  %272 = load ptr, ptr %memberidx.i75, align 8
  %273 = load i64, ptr %272, align 4
  %274 = icmp eq i64 %273, 38
  br i1 %274, label %if.entry9.i, label %ifend11.i

Parser_peek.exit99.i:                             ; preds = %Parser_peek.exit.thread.i, %Parser_peek.exit.i
  %275 = phi i64 [ %262, %Parser_peek.exit.i ], [ %266, %Parser_peek.exit.thread.i ]
  %276 = icmp eq i64 %275, 25
  br i1 %276, label %if.entry16.i, label %else17.i

ifend5.i:                                         ; preds = %Array_MethodNode____sl__.exit.i, %Array_FieldNode____sl__.exit.i
  %277 = load ptr, ptr %memberidx.i75, align 8
  %278 = load i64, ptr %277, align 4
  %279 = icmp eq i64 %278, 33
  %280 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i103.i = getelementptr inbounds %Array_FloError_, ptr %280, i64 0, i32 2
  %281 = load i64, ptr %memberidx3.i.i103.i, align 4
  %282 = icmp eq i64 %281, 0
  %283 = and i1 %279, %282
  br i1 %283, label %while.entry.i106.preheader.i, label %Parser_new_lines.exit115.i

while.entry.i106.preheader.i:                     ; preds = %ifend5.i
  %284 = load ptr, ptr %3, align 8
  %memberidx2.i12.i105.i = getelementptr inbounds %Array_Token_, ptr %284, i64 0, i32 2
  %memberidx.i.i.i108.i = getelementptr inbounds %Array_Token_, ptr %284, i64 0, i32 1
  %285 = load i64, ptr %memberidx2.i, align 8
  %286 = load i64, ptr %memberidx2.i12.i105.i, align 4
  %287 = icmp slt i64 %285, %286
  br i1 %287, label %while.entry.i106.i, label %while.entry.i106.us.i

while.entry.i106.us.i:                            ; preds = %while.entry.i106.preheader.i, %while.entry.i106.us.i
  br label %while.entry.i106.us.i

while.entry.i106.i:                               ; preds = %while.entry.i106.preheader.i, %Parser_advance.exit.i114.i
  %288 = phi i64 [ %295, %Parser_advance.exit.i114.i ], [ 33, %while.entry.i106.preheader.i ]
  %289 = phi i64 [ %298, %Parser_advance.exit.i114.i ], [ %285, %while.entry.i106.preheader.i ]
  %290 = load i64, ptr %memberidx2.i12.i105.i, align 4
  %291 = icmp slt i64 %289, %290
  br i1 %291, label %if.entry.i.i110.i, label %Parser_advance.exit.i114.i

if.entry.i.i110.i:                                ; preds = %while.entry.i106.i
  %292 = add nsw i64 %289, 1
  store i64 %292, ptr %memberidx2.i, align 8
  %293 = load ptr, ptr %memberidx.i.i.i108.i, align 8
  %ptridx.i.i.i109.i = getelementptr inbounds ptr, ptr %293, i64 %292
  %294 = load ptr, ptr %ptridx.i.i.i109.i, align 8
  store ptr %294, ptr %memberidx.i75, align 8
  %.pre171.i = load i64, ptr %294, align 4
  %.pre172.i = load i64, ptr %memberidx3.i.i103.i, align 4
  br label %Parser_advance.exit.i114.i

Parser_advance.exit.i114.i:                       ; preds = %if.entry.i.i110.i, %while.entry.i106.i
  %295 = phi i64 [ %.pre171.i, %if.entry.i.i110.i ], [ %288, %while.entry.i106.i ]
  %296 = phi i64 [ %.pre172.i, %if.entry.i.i110.i ], [ 0, %while.entry.i106.i ]
  %297 = phi i64 [ %.pre171.i, %if.entry.i.i110.i ], [ 33, %while.entry.i106.i ]
  %298 = phi i64 [ %292, %if.entry.i.i110.i ], [ %289, %while.entry.i106.i ]
  %299 = icmp eq i64 %297, 33
  %300 = icmp eq i64 %296, 0
  %301 = and i1 %300, %299
  br i1 %301, label %while.entry.i106.i, label %Parser_new_lines.exit115.i

Parser_new_lines.exit115.i:                       ; preds = %Parser_advance.exit.i114.i, %ifend5.i
  %302 = phi i64 [ %278, %ifend5.i ], [ %295, %Parser_advance.exit.i114.i ]
  %303 = phi i64 [ %281, %ifend5.i ], [ %296, %Parser_advance.exit.i114.i ]
  %.fr151.i = freeze i64 %303
  %304 = icmp eq i64 %.fr151.i, 0
  br i1 %304, label %switch.early.test147.i, label %while.end.i271

switch.early.test147.i:                           ; preds = %Parser_new_lines.exit115.i
  switch i64 %302, label %while.entry.i270 [
    i64 46, label %while.end.i271
    i64 28, label %while.end.i271
  ]

if.entry9.i:                                      ; preds = %if.entry3.i
  %305 = load i64, ptr %memberidx2.i, align 8
  %306 = load ptr, ptr %3, align 8
  %memberidx2.i120.i = getelementptr inbounds %Array_Token_, ptr %306, i64 0, i32 2
  %307 = load i64, ptr %memberidx2.i120.i, align 4
  %308 = icmp slt i64 %305, %307
  br i1 %308, label %if.entry.i124.i, label %Parser_advance.exit126.i

if.entry.i124.i:                                  ; preds = %if.entry9.i
  %309 = add nsw i64 %305, 1
  store i64 %309, ptr %memberidx2.i, align 8
  %memberidx.i.i122.i = getelementptr inbounds %Array_Token_, ptr %306, i64 0, i32 1
  %310 = load ptr, ptr %memberidx.i.i122.i, align 8
  %ptridx.i.i123.i = getelementptr inbounds ptr, ptr %310, i64 %309
  %311 = load ptr, ptr %ptridx.i.i123.i, align 8
  store ptr %311, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit126.i

Parser_advance.exit126.i:                         ; preds = %if.entry.i124.i, %if.entry9.i
  %312 = call fastcc ptr @Parser_parse_expression(ptr nonnull %3)
  store ptr %312, ptr %memberidx1.i73.i, align 8
  br label %ifend11.i

ifend11.i:                                        ; preds = %Parser_advance.exit126.i, %if.entry3.i
  %memberidx13.i = getelementptr inbounds %FieldNode, ptr %268, i64 0, i32 1
  store i64 %255, ptr %memberidx13.i, align 4
  %313 = load ptr, ptr %memberidx1.i.i145, align 8
  %memberidx.i127.i = getelementptr inbounds %Array_FieldNode_, ptr %313, i64 0, i32 2
  %314 = load i64, ptr %memberidx.i127.i, align 4
  %memberidx1.i128.i = getelementptr inbounds %Array_FieldNode_, ptr %313, i64 0, i32 3
  %315 = load i64, ptr %memberidx1.i128.i, align 4
  %.not.i129.i = icmp slt i64 %314, %315
  br i1 %.not.i129.i, label %ifend11.Array_FieldNode____sl__.exit_crit_edge.i, label %if.entry.i132.i

ifend11.Array_FieldNode____sl__.exit_crit_edge.i: ; preds = %ifend11.i
  %memberidx4.i133.phi.trans.insert.i = getelementptr inbounds %Array_FieldNode_, ptr %313, i64 0, i32 1
  %.pre170.i = load ptr, ptr %memberidx4.i133.phi.trans.insert.i, align 8
  br label %Array_FieldNode____sl__.exit.i

if.entry.i132.i:                                  ; preds = %ifend11.i
  %316 = shl nuw i64 %315, 1
  store i64 %316, ptr %memberidx1.i128.i, align 4
  %memberidx2.i.i131.i = getelementptr inbounds %Array_FieldNode_, ptr %313, i64 0, i32 1
  %317 = load ptr, ptr %memberidx2.i.i131.i, align 8
  %318 = shl i64 %315, 4
  %319 = call ptr @realloc(ptr %317, i64 %318)
  store ptr %319, ptr %memberidx2.i.i131.i, align 8
  %.pre169.i = load i64, ptr %memberidx.i127.i, align 4
  br label %Array_FieldNode____sl__.exit.i

Array_FieldNode____sl__.exit.i:                   ; preds = %if.entry.i132.i, %ifend11.Array_FieldNode____sl__.exit_crit_edge.i
  %320 = phi ptr [ %.pre170.i, %ifend11.Array_FieldNode____sl__.exit_crit_edge.i ], [ %319, %if.entry.i132.i ]
  %321 = phi i64 [ %314, %ifend11.Array_FieldNode____sl__.exit_crit_edge.i ], [ %.pre169.i, %if.entry.i132.i ]
  %322 = add nsw i64 %321, 1
  store i64 %322, ptr %memberidx.i127.i, align 4
  %ptridx.i134.i = getelementptr inbounds ptr, ptr %320, i64 %321
  store ptr %268, ptr %ptridx.i134.i, align 8
  br label %ifend5.i

if.entry16.i:                                     ; preds = %Parser_peek.exit99.i
  %323 = call ptr @malloc(i32 42)
  %324 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %324, ptr %323, align 8
  %memberidx1.i.i74.i = getelementptr inbounds %MethodNode, ptr %323, i64 0, i32 1
  %325 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ArgNode_, ptr %325, align 8
  %memberidx.i.i.i75.i = getelementptr inbounds %Array_ArgNode_, ptr %325, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i75.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Array_ArgNode_, ptr %325, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i76.i = getelementptr inbounds %Array_ArgNode_, ptr %325, i64 0, i32 1
  %326 = call ptr @malloc(i32 64)
  store ptr %326, ptr %memberidx2.i.i.i76.i, align 8
  store i64 0, ptr %memberidx.i.i.i75.i, align 4
  store ptr %325, ptr %memberidx1.i.i74.i, align 8
  %memberidx4.i.i78.i = getelementptr inbounds %MethodNode, ptr %323, i64 0, i32 5
  store i1 true, ptr %memberidx4.i.i78.i, align 1
  %memberidx5.i.i.i = getelementptr inbounds %MethodNode, ptr %323, i64 0, i32 6
  store i1 false, ptr %memberidx5.i.i.i, align 1
  %327 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 25)
  %328 = load ptr, ptr %memberidx.i75, align 8
  %329 = load i64, ptr %328, align 4
  %.not.i80.i = icmp eq i64 %329, 26
  br i1 %.not.i80.i, label %ifend.i86.i, label %if.entry.i84.i

if.entry.i84.i:                                   ; preds = %if.entry16.i
  %memberidx3.i81.i = getelementptr inbounds %IdentifierToken, ptr %328, i64 0, i32 2
  %330 = load ptr, ptr %memberidx3.i81.i, align 8
  %331 = call ptr @malloc(i32 4)
  store i32 1936287860, ptr %331, align 8
  %332 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %332, align 8
  %memberidx.i.i54.i.i = getelementptr inbounds %string, ptr %332, i64 0, i32 1
  store ptr %331, ptr %memberidx.i.i54.i.i, align 8
  %memberidx1.i.i55.i.i = getelementptr inbounds %string, ptr %332, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i55.i.i, align 4
  %memberidx2.i.i56.i.i = getelementptr inbounds %string, ptr %332, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i56.i.i, align 4
  %memberidx.i.i82.i = getelementptr inbounds %string, ptr %330, i64 0, i32 2
  %333 = load i64, ptr %memberidx.i.i82.i, align 4
  %.not.i.i83.i = icmp eq i64 %333, 4
  br i1 %.not.i.i83.i, label %ifend.i.i.i, label %ifend.i86.i

ifend.i.i.i:                                      ; preds = %if.entry.i84.i
  %memberidx2.i.i85.i = getelementptr inbounds %string, ptr %330, i64 0, i32 1
  %334 = load ptr, ptr %memberidx2.i.i85.i, align 8
  %335 = call i64 @memcmp(ptr %334, ptr nonnull %331, i64 4)
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %if.entry4.i.i, label %ifend.i86.i

ifend.i86.i:                                      ; preds = %if.entry.i.i88.i, %if.entry4.i.i, %ifend.i.i.i, %if.entry.i84.i, %if.entry16.i
  %337 = load ptr, ptr %memberidx.i75, align 8
  %338 = load i64, ptr %337, align 4
  %.not53.i.i = icmp eq i64 %338, 26
  br i1 %.not53.i.i, label %ifend12.i.i, label %if.entry10.i.i

if.entry4.i.i:                                    ; preds = %ifend.i.i.i
  store i1 false, ptr %memberidx4.i.i78.i, align 1
  %339 = load i64, ptr %memberidx2.i, align 8
  %340 = load ptr, ptr %3, align 8
  %memberidx2.i60.i.i = getelementptr inbounds %Array_Token_, ptr %340, i64 0, i32 2
  %341 = load i64, ptr %memberidx2.i60.i.i, align 4
  %342 = icmp slt i64 %339, %341
  br i1 %342, label %if.entry.i.i88.i, label %ifend.i86.i

if.entry.i.i88.i:                                 ; preds = %if.entry4.i.i
  %343 = add nsw i64 %339, 1
  store i64 %343, ptr %memberidx2.i, align 8
  %memberidx.i.i62.i.i = getelementptr inbounds %Array_Token_, ptr %340, i64 0, i32 1
  %344 = load ptr, ptr %memberidx.i.i62.i.i, align 8
  %ptridx.i.i.i87.i = getelementptr inbounds ptr, ptr %344, i64 %343
  %345 = load ptr, ptr %ptridx.i.i.i87.i, align 8
  store ptr %345, ptr %memberidx.i75, align 8
  br label %ifend.i86.i

if.entry10.i.i:                                   ; preds = %ifend.i86.i
  %346 = load i1, ptr %memberidx4.i.i78.i, align 1
  br i1 %346, label %ifend16.i.i, label %if.entry14.i.i

ifend12.i.i:                                      ; preds = %ifend16.i.i, %ifend.i86.i
  %347 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  %348 = load ptr, ptr %memberidx.i75, align 8
  %349 = load i64, ptr %348, align 4
  %350 = icmp eq i64 %349, 1
  br i1 %350, label %if.entry20.i.i, label %else21.i.i

if.entry14.i.i:                                   ; preds = %if.entry10.i.i
  %351 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 3)
  br label %ifend16.i.i

ifend16.i.i:                                      ; preds = %if.entry14.i.i, %if.entry10.i.i
  %352 = load ptr, ptr %memberidx1.i.i74.i, align 8
  call fastcc void @Parser_parse_args(ptr nonnull %3, ptr %352)
  br label %ifend12.i.i

if.entry20.i.i:                                   ; preds = %ifend12.i.i
  %353 = load i64, ptr %memberidx2.i, align 8
  %354 = load ptr, ptr %3, align 8
  %memberidx2.i65.i.i = getelementptr inbounds %Array_Token_, ptr %354, i64 0, i32 2
  %355 = load i64, ptr %memberidx2.i65.i.i, align 4
  %356 = icmp slt i64 %353, %355
  br i1 %356, label %if.entry.i69.i.i, label %Parser_advance.exit71.i.i

if.entry.i69.i.i:                                 ; preds = %if.entry20.i.i
  %357 = add nsw i64 %353, 1
  store i64 %357, ptr %memberidx2.i, align 8
  %memberidx.i.i67.i.i = getelementptr inbounds %Array_Token_, ptr %354, i64 0, i32 1
  %358 = load ptr, ptr %memberidx.i.i67.i.i, align 8
  %ptridx.i.i68.i.i = getelementptr inbounds ptr, ptr %358, i64 %357
  %359 = load ptr, ptr %ptridx.i.i68.i.i, align 8
  store ptr %359, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit71.i.i

Parser_advance.exit71.i.i:                        ; preds = %if.entry.i69.i.i, %if.entry20.i.i
  %memberidx23.i.i = getelementptr inbounds %MethodNode, ptr %323, i64 0, i32 4
  %360 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %360, ptr %memberidx23.i.i, align 8
  br label %ifend22.i.i

else21.i.i:                                       ; preds = %ifend12.i.i
  %361 = call ptr @malloc(i32 24)
  %362 = call ptr @malloc(i32 4)
  store i32 1684631414, ptr %362, align 8
  %363 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %363, align 8
  %memberidx.i.i72.i.i = getelementptr inbounds %string, ptr %363, i64 0, i32 1
  store ptr %362, ptr %memberidx.i.i72.i.i, align 8
  %memberidx1.i.i73.i.i = getelementptr inbounds %string, ptr %363, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i73.i.i, align 4
  %memberidx2.i.i74.i.i = getelementptr inbounds %string, ptr %363, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i74.i.i, align 4
  %364 = call ptr @malloc(i32 32)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %364, i8 0, i64 32, i1 false)
  store i64 54, ptr %361, align 4
  %memberidx1.i.i78.i.i = getelementptr inbounds %Token, ptr %361, i64 0, i32 1
  store ptr %364, ptr %memberidx1.i.i78.i.i, align 8
  %memberidx.i79.i.i = getelementptr inbounds %IdentifierToken, ptr %361, i64 0, i32 2
  store ptr %363, ptr %memberidx.i79.i.i, align 8
  %memberidx24.i.i = getelementptr inbounds %MethodNode, ptr %323, i64 0, i32 4
  %365 = call ptr @malloc(i32 32)
  %366 = load ptr, ptr %memberidx1.i.i78.i.i, align 8
  store ptr %366, ptr %365, align 8
  %memberidx.i.i80.i.i = getelementptr inbounds %TypeNode, ptr %365, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i80.i.i, align 4
  %memberidx.i81.i.i = getelementptr inbounds %RecordTypeNode, ptr %365, i64 0, i32 2
  store ptr %361, ptr %memberidx.i81.i.i, align 8
  %memberidx1.i82.i.i275 = getelementptr inbounds %RecordTypeNode, ptr %365, i64 0, i32 3
  %367 = call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %367, align 8
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_TypeNode_, ptr %367, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i.i.i, align 4
  %memberidx1.i.i83.i.i = getelementptr inbounds %Array_TypeNode_, ptr %367, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i83.i.i, align 4
  %memberidx2.i.i84.i.i = getelementptr inbounds %Array_TypeNode_, ptr %367, i64 0, i32 1
  %368 = call ptr @malloc(i32 64)
  store ptr %368, ptr %memberidx2.i.i84.i.i, align 8
  store i64 0, ptr %memberidx.i5.i.i.i, align 4
  store ptr %367, ptr %memberidx1.i82.i.i275, align 8
  store ptr %365, ptr %memberidx24.i.i, align 8
  br label %ifend22.i.i

ifend22.i.i:                                      ; preds = %else21.i.i, %Parser_advance.exit71.i.i
  %369 = load ptr, ptr %memberidx.i75, align 8
  %370 = load i64, ptr %369, align 4
  %371 = icmp eq i64 %370, 27
  br i1 %371, label %if.entry28.i.i, label %else29.i.i

if.entry28.i.i:                                   ; preds = %ifend22.i.i
  %memberidx31.i.i = getelementptr inbounds %MethodNode, ptr %323, i64 0, i32 2
  %372 = call fastcc ptr @Parser_parse_block(ptr nonnull %3)
  store ptr %372, ptr %memberidx31.i.i, align 8
  br label %Parser_parse_method.exit.i

else29.i.i:                                       ; preds = %ifend22.i.i
  store i1 true, ptr %memberidx5.i.i.i, align 1
  br label %Parser_parse_method.exit.i

Parser_parse_method.exit.i:                       ; preds = %else29.i.i, %if.entry28.i.i
  %memberidx19.i = getelementptr inbounds %MethodNode, ptr %323, i64 0, i32 3
  store i64 %255, ptr %memberidx19.i, align 4
  %373 = load ptr, ptr %memberidx4.i.i148, align 8
  %memberidx.i67.i = getelementptr inbounds %Array_MethodNode_, ptr %373, i64 0, i32 2
  %374 = load i64, ptr %memberidx.i67.i, align 4
  %memberidx1.i68.i = getelementptr inbounds %Array_MethodNode_, ptr %373, i64 0, i32 3
  %375 = load i64, ptr %memberidx1.i68.i, align 4
  %.not.i.i276 = icmp slt i64 %374, %375
  br i1 %.not.i.i276, label %Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i, label %if.entry.i71.i

Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i: ; preds = %Parser_parse_method.exit.i
  %memberidx4.i.phi.trans.insert.i = getelementptr inbounds %Array_MethodNode_, ptr %373, i64 0, i32 1
  %.pre168.i = load ptr, ptr %memberidx4.i.phi.trans.insert.i, align 8
  br label %Array_MethodNode____sl__.exit.i

if.entry.i71.i:                                   ; preds = %Parser_parse_method.exit.i
  %376 = shl nuw i64 %375, 1
  store i64 %376, ptr %memberidx1.i68.i, align 4
  %memberidx2.i.i70.i = getelementptr inbounds %Array_MethodNode_, ptr %373, i64 0, i32 1
  %377 = load ptr, ptr %memberidx2.i.i70.i, align 8
  %378 = shl i64 %375, 4
  %379 = call ptr @realloc(ptr %377, i64 %378)
  store ptr %379, ptr %memberidx2.i.i70.i, align 8
  %.pre167.i = load i64, ptr %memberidx.i67.i, align 4
  br label %Array_MethodNode____sl__.exit.i

Array_MethodNode____sl__.exit.i:                  ; preds = %if.entry.i71.i, %Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i
  %380 = phi ptr [ %.pre168.i, %Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i ], [ %379, %if.entry.i71.i ]
  %381 = phi i64 [ %374, %Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i ], [ %.pre167.i, %if.entry.i71.i ]
  %382 = add nsw i64 %381, 1
  store i64 %382, ptr %memberidx.i67.i, align 4
  %ptridx.i.i277 = getelementptr inbounds ptr, ptr %380, i64 %381
  store ptr %323, ptr %ptridx.i.i277, align 8
  br label %ifend5.i

else17.i:                                         ; preds = %Parser_peek.exit99.i
  %383 = call ptr @malloc(i32 19)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(19) %383, ptr noundef nonnull align 8 dereferenceable(19) @66, i64 19, i1 false)
  %384 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %384, align 8
  %memberidx.i.i51.i = getelementptr inbounds %string, ptr %384, i64 0, i32 1
  store ptr %383, ptr %memberidx.i.i51.i, align 8
  %memberidx1.i.i52.i = getelementptr inbounds %string, ptr %384, i64 0, i32 2
  store i64 19, ptr %memberidx1.i.i52.i, align 4
  %memberidx2.i.i53.i = getelementptr inbounds %string, ptr %384, i64 0, i32 3
  store i64 19, ptr %memberidx2.i.i53.i, align 4
  %385 = load ptr, ptr %memberidx1.i, align 8
  %386 = call ptr @malloc(i32 24)
  %387 = load ptr, ptr %memberidx.i75, align 8
  %memberidx2.i.i278 = getelementptr inbounds %Token, ptr %387, i64 0, i32 1
  %388 = load ptr, ptr %memberidx2.i.i278, align 8
  store i64 2, ptr %386, align 4
  %memberidx1.i.i.i279 = getelementptr inbounds %FloError, ptr %386, i64 0, i32 2
  store ptr %388, ptr %memberidx1.i.i.i279, align 8
  %memberidx2.i.i44.i = getelementptr inbounds %FloError, ptr %386, i64 0, i32 1
  store ptr %384, ptr %memberidx2.i.i44.i, align 8
  %memberidx.i.i45.i280 = getelementptr inbounds %Array_FloError_, ptr %385, i64 0, i32 2
  %389 = load i64, ptr %memberidx.i.i45.i280, align 4
  %memberidx1.i4.i.i = getelementptr inbounds %Array_FloError_, ptr %385, i64 0, i32 3
  %390 = load i64, ptr %memberidx1.i4.i.i, align 4
  %.not.i.i.i281 = icmp slt i64 %389, %390
  br i1 %.not.i.i.i281, label %else17.Parser_error.exit_crit_edge.i, label %if.entry.i.i47.i

else17.Parser_error.exit_crit_edge.i:             ; preds = %else17.i
  %memberidx4.i.i.phi.trans.insert.i = getelementptr inbounds %Array_FloError_, ptr %385, i64 0, i32 1
  %.pre166.i = load ptr, ptr %memberidx4.i.i.phi.trans.insert.i, align 8
  br label %Parser_error.exit.i

if.entry.i.i47.i:                                 ; preds = %else17.i
  %391 = shl nuw i64 %390, 1
  store i64 %391, ptr %memberidx1.i4.i.i, align 4
  %memberidx2.i.i.i.i282 = getelementptr inbounds %Array_FloError_, ptr %385, i64 0, i32 1
  %392 = load ptr, ptr %memberidx2.i.i.i.i282, align 8
  %393 = shl i64 %390, 4
  %394 = call ptr @realloc(ptr %392, i64 %393)
  store ptr %394, ptr %memberidx2.i.i.i.i282, align 8
  %.pre165.i = load i64, ptr %memberidx.i.i45.i280, align 4
  br label %Parser_error.exit.i

Parser_error.exit.i:                              ; preds = %if.entry.i.i47.i, %else17.Parser_error.exit_crit_edge.i
  %395 = phi ptr [ %.pre166.i, %else17.Parser_error.exit_crit_edge.i ], [ %394, %if.entry.i.i47.i ]
  %396 = phi i64 [ %389, %else17.Parser_error.exit_crit_edge.i ], [ %.pre165.i, %if.entry.i.i47.i ]
  %397 = add nsw i64 %396, 1
  store i64 %397, ptr %memberidx.i.i45.i280, align 4
  %ptridx.i.i.i283 = getelementptr inbounds ptr, ptr %395, i64 %396
  store ptr %386, ptr %ptridx.i.i.i283, align 8
  br label %Parser_parse_class_block.exit

Parser_parse_class_block.exit:                    ; preds = %while.end.i271, %Parser_error.exit.i
  %memberidx.i154 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %117, i64 0, i32 2
  %398 = load i64, ptr %memberidx.i154, align 4
  %memberidx1.i155 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %117, i64 0, i32 3
  %399 = load i64, ptr %memberidx1.i155, align 4
  %.not.i156 = icmp slt i64 %398, %399
  br i1 %.not.i156, label %Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge, label %if.entry.i159

Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge: ; preds = %Parser_parse_class_block.exit
  %memberidx4.i160.phi.trans.insert = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %117, i64 0, i32 1
  %.pre351 = load ptr, ptr %memberidx4.i160.phi.trans.insert, align 8
  br label %Array_ClassDeclarationNode____sl__.exit

if.entry.i159:                                    ; preds = %Parser_parse_class_block.exit
  %400 = shl nuw i64 %399, 1
  store i64 %400, ptr %memberidx1.i155, align 4
  %memberidx2.i.i158 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %117, i64 0, i32 1
  %401 = load ptr, ptr %memberidx2.i.i158, align 8
  %402 = shl i64 %399, 4
  %403 = call ptr @realloc(ptr %401, i64 %402)
  store ptr %403, ptr %memberidx2.i.i158, align 8
  %.pre350 = load i64, ptr %memberidx.i154, align 4
  br label %Array_ClassDeclarationNode____sl__.exit

Array_ClassDeclarationNode____sl__.exit:          ; preds = %Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge, %if.entry.i159
  %404 = phi ptr [ %.pre351, %Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge ], [ %403, %if.entry.i159 ]
  %405 = phi i64 [ %398, %Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge ], [ %.pre350, %if.entry.i159 ]
  %406 = add nsw i64 %405, 1
  store i64 %406, ptr %memberidx.i154, align 4
  %ptridx.i161 = getelementptr inbounds ptr, ptr %404, i64 %405
  store ptr %125, ptr %ptridx.i161, align 8
  br label %ifend

if.entry11:                                       ; preds = %while.entry
  %407 = load ptr, ptr %memberidx14, align 8
  %408 = load i64, ptr %memberidx2.i, align 8
  %409 = load ptr, ptr %3, align 8
  %memberidx2.i.i285 = getelementptr inbounds %Array_Token_, ptr %409, i64 0, i32 2
  %410 = load i64, ptr %memberidx2.i.i285, align 4
  %411 = icmp slt i64 %408, %410
  br i1 %411, label %if.entry.i.i289, label %Parser_advance.exit.i293

if.entry.i.i289:                                  ; preds = %if.entry11
  %412 = add nsw i64 %408, 1
  store i64 %412, ptr %memberidx2.i, align 8
  %memberidx.i.i.i287 = getelementptr inbounds %Array_Token_, ptr %409, i64 0, i32 1
  %413 = load ptr, ptr %memberidx.i.i.i287, align 8
  %ptridx.i.i.i288 = getelementptr inbounds ptr, ptr %413, i64 %412
  %414 = load ptr, ptr %ptridx.i.i.i288, align 8
  store ptr %414, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i293

Parser_advance.exit.i293:                         ; preds = %if.entry.i.i289, %if.entry11
  %415 = call ptr @malloc(i32 24)
  %416 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %416, ptr %415, align 8
  %memberidx1.i38.i = getelementptr inbounds %EnumNode, ptr %415, i64 0, i32 1
  %417 = call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumNodeField_, ptr %417, align 8
  %memberidx.i.i39.i = getelementptr inbounds %Array_EnumNodeField_, ptr %417, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i39.i, align 4
  %memberidx1.i.i.i290 = getelementptr inbounds %Array_EnumNodeField_, ptr %417, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i290, align 4
  %memberidx2.i.i40.i291 = getelementptr inbounds %Array_EnumNodeField_, ptr %417, i64 0, i32 1
  %418 = call ptr @malloc(i32 64)
  store ptr %418, ptr %memberidx2.i.i40.i291, align 8
  store i64 0, ptr %memberidx.i.i39.i, align 4
  store ptr %417, ptr %memberidx1.i38.i, align 8
  %memberidx4.i42.i = getelementptr inbounds %EnumNode, ptr %415, i64 0, i32 2
  store ptr null, ptr %memberidx4.i42.i, align 8
  %419 = load ptr, ptr %memberidx.i75, align 8
  %420 = load i64, ptr %419, align 4
  %421 = icmp eq i64 %420, 25
  br i1 %421, label %if.entry.i294, label %ifend.i296

if.entry.i294:                                    ; preds = %Parser_advance.exit.i293
  %422 = load i64, ptr %memberidx2.i, align 8
  %423 = load ptr, ptr %3, align 8
  %memberidx2.i44.i = getelementptr inbounds %Array_Token_, ptr %423, i64 0, i32 2
  %424 = load i64, ptr %memberidx2.i44.i, align 4
  %425 = icmp slt i64 %422, %424
  br i1 %425, label %if.entry.i48.i, label %Parser_advance.exit49.i

if.entry.i48.i:                                   ; preds = %if.entry.i294
  %426 = add nsw i64 %422, 1
  store i64 %426, ptr %memberidx2.i, align 8
  %memberidx.i.i46.i = getelementptr inbounds %Array_Token_, ptr %423, i64 0, i32 1
  %427 = load ptr, ptr %memberidx.i.i46.i, align 8
  %ptridx.i.i47.i = getelementptr inbounds ptr, ptr %427, i64 %426
  %428 = load ptr, ptr %ptridx.i.i47.i, align 8
  store ptr %428, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit49.i

Parser_advance.exit49.i:                          ; preds = %if.entry.i48.i, %if.entry.i294
  %429 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %429, ptr %memberidx4.i42.i, align 8
  %430 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  %.pre.i295 = load ptr, ptr %memberidx.i75, align 8
  %.pre101.i = load i64, ptr %.pre.i295, align 4
  br label %ifend.i296

ifend.i296:                                       ; preds = %Parser_advance.exit49.i, %Parser_advance.exit.i293
  %431 = phi i64 [ %420, %Parser_advance.exit.i293 ], [ %.pre101.i, %Parser_advance.exit49.i ]
  %432 = icmp eq i64 %431, 33
  %433 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i53.i = getelementptr inbounds %Array_FloError_, ptr %433, i64 0, i32 2
  %434 = load i64, ptr %memberidx3.i.i53.i, align 4
  %435 = icmp eq i64 %434, 0
  %436 = and i1 %432, %435
  br i1 %436, label %while.entry.i56.preheader.i, label %Parser_new_lines.exit65.i

while.entry.i56.preheader.i:                      ; preds = %ifend.i296
  %437 = load ptr, ptr %3, align 8
  %memberidx2.i12.i55.i = getelementptr inbounds %Array_Token_, ptr %437, i64 0, i32 2
  %memberidx.i.i.i58.i = getelementptr inbounds %Array_Token_, ptr %437, i64 0, i32 1
  %438 = load i64, ptr %memberidx2.i, align 8
  %439 = load i64, ptr %memberidx2.i12.i55.i, align 4
  %440 = icmp slt i64 %438, %439
  br i1 %440, label %while.entry.i56.i, label %while.entry.i56.us.i

while.entry.i56.us.i:                             ; preds = %while.entry.i56.preheader.i, %while.entry.i56.us.i
  br label %while.entry.i56.us.i

while.entry.i56.i:                                ; preds = %while.entry.i56.preheader.i, %Parser_advance.exit.i64.i
  %441 = phi i64 [ %449, %Parser_advance.exit.i64.i ], [ %438, %while.entry.i56.preheader.i ]
  %442 = load i64, ptr %memberidx2.i12.i55.i, align 4
  %443 = icmp slt i64 %441, %442
  br i1 %443, label %if.entry.i.i60.i, label %Parser_advance.exit.i64.i

if.entry.i.i60.i:                                 ; preds = %while.entry.i56.i
  %444 = add nsw i64 %441, 1
  store i64 %444, ptr %memberidx2.i, align 8
  %445 = load ptr, ptr %memberidx.i.i.i58.i, align 8
  %ptridx.i.i.i59.i = getelementptr inbounds ptr, ptr %445, i64 %444
  %446 = load ptr, ptr %ptridx.i.i.i59.i, align 8
  store ptr %446, ptr %memberidx.i75, align 8
  %.pre102.i = load i64, ptr %446, align 4
  %.pre103.i = load i64, ptr %memberidx3.i.i53.i, align 4
  br label %Parser_advance.exit.i64.i

Parser_advance.exit.i64.i:                        ; preds = %if.entry.i.i60.i, %while.entry.i56.i
  %447 = phi i64 [ %.pre103.i, %if.entry.i.i60.i ], [ 0, %while.entry.i56.i ]
  %448 = phi i64 [ %.pre102.i, %if.entry.i.i60.i ], [ 33, %while.entry.i56.i ]
  %449 = phi i64 [ %444, %if.entry.i.i60.i ], [ %441, %while.entry.i56.i ]
  %450 = icmp eq i64 %448, 33
  %451 = icmp eq i64 %447, 0
  %452 = and i1 %451, %450
  br i1 %452, label %while.entry.i56.i, label %Parser_new_lines.exit65.i

Parser_new_lines.exit65.i:                        ; preds = %Parser_advance.exit.i64.i, %ifend.i296
  %453 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 27)
  %454 = load ptr, ptr %memberidx.i75, align 8
  %455 = load i64, ptr %454, align 4
  %456 = icmp eq i64 %455, 33
  %457 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i69.i297 = getelementptr inbounds %Array_FloError_, ptr %457, i64 0, i32 2
  %458 = load i64, ptr %memberidx3.i.i69.i297, align 4
  %459 = icmp eq i64 %458, 0
  %460 = and i1 %456, %459
  br i1 %460, label %while.entry.i72.preheader.i, label %Parser_new_lines.exit81.i

while.entry.i72.preheader.i:                      ; preds = %Parser_new_lines.exit65.i
  %461 = load ptr, ptr %3, align 8
  %memberidx2.i12.i71.i = getelementptr inbounds %Array_Token_, ptr %461, i64 0, i32 2
  %memberidx.i.i.i74.i = getelementptr inbounds %Array_Token_, ptr %461, i64 0, i32 1
  %462 = load i64, ptr %memberidx2.i, align 8
  %463 = load i64, ptr %memberidx2.i12.i71.i, align 4
  %464 = icmp slt i64 %462, %463
  br i1 %464, label %while.entry.i72.i, label %while.entry.i72.us.i

while.entry.i72.us.i:                             ; preds = %while.entry.i72.preheader.i, %while.entry.i72.us.i
  br label %while.entry.i72.us.i

while.entry.i72.i:                                ; preds = %while.entry.i72.preheader.i, %Parser_advance.exit.i80.i
  %465 = phi i64 [ %472, %Parser_advance.exit.i80.i ], [ 33, %while.entry.i72.preheader.i ]
  %466 = phi i64 [ %475, %Parser_advance.exit.i80.i ], [ %462, %while.entry.i72.preheader.i ]
  %467 = load i64, ptr %memberidx2.i12.i71.i, align 4
  %468 = icmp slt i64 %466, %467
  br i1 %468, label %if.entry.i.i76.i, label %Parser_advance.exit.i80.i

if.entry.i.i76.i:                                 ; preds = %while.entry.i72.i
  %469 = add nsw i64 %466, 1
  store i64 %469, ptr %memberidx2.i, align 8
  %470 = load ptr, ptr %memberidx.i.i.i74.i, align 8
  %ptridx.i.i.i75.i = getelementptr inbounds ptr, ptr %470, i64 %469
  %471 = load ptr, ptr %ptridx.i.i.i75.i, align 8
  store ptr %471, ptr %memberidx.i75, align 8
  %.pre104.i = load i64, ptr %471, align 4
  %.pre105.i = load i64, ptr %memberidx3.i.i69.i297, align 4
  br label %Parser_advance.exit.i80.i

Parser_advance.exit.i80.i:                        ; preds = %if.entry.i.i76.i, %while.entry.i72.i
  %472 = phi i64 [ %.pre104.i, %if.entry.i.i76.i ], [ %465, %while.entry.i72.i ]
  %473 = phi i64 [ %.pre105.i, %if.entry.i.i76.i ], [ 0, %while.entry.i72.i ]
  %474 = phi i64 [ %.pre104.i, %if.entry.i.i76.i ], [ 33, %while.entry.i72.i ]
  %475 = phi i64 [ %469, %if.entry.i.i76.i ], [ %466, %while.entry.i72.i ]
  %476 = icmp eq i64 %474, 33
  %477 = icmp eq i64 %473, 0
  %478 = and i1 %477, %476
  br i1 %478, label %while.entry.i72.i, label %Parser_new_lines.exit81.i

Parser_new_lines.exit81.i:                        ; preds = %Parser_advance.exit.i80.i, %Parser_new_lines.exit65.i
  %479 = phi i64 [ %455, %Parser_new_lines.exit65.i ], [ %472, %Parser_advance.exit.i80.i ]
  %480 = icmp eq i64 %479, 54
  br i1 %480, label %while.entry.i298, label %Parser_parse_enum.exit

while.entry.i298:                                 ; preds = %Parser_new_lines.exit81.i, %Parser_new_lines.exit.i311
  %481 = call ptr @malloc(i32 16)
  %482 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %482, ptr %481, align 8
  %memberidx1.i89.i = getelementptr inbounds %EnumNodeField, ptr %481, i64 0, i32 1
  store ptr null, ptr %memberidx1.i89.i, align 8
  %483 = load ptr, ptr %memberidx.i75, align 8
  %484 = load i64, ptr %483, align 4
  %485 = icmp eq i64 %484, 38
  br i1 %485, label %if.entry7.i, label %ifend9.i

if.entry7.i:                                      ; preds = %while.entry.i298
  %486 = load i64, ptr %memberidx2.i, align 8
  %487 = load ptr, ptr %3, align 8
  %memberidx2.i83.i = getelementptr inbounds %Array_Token_, ptr %487, i64 0, i32 2
  %488 = load i64, ptr %memberidx2.i83.i, align 4
  %489 = icmp slt i64 %486, %488
  br i1 %489, label %if.entry.i87.i, label %Parser_advance.exit88.i

if.entry.i87.i:                                   ; preds = %if.entry7.i
  %490 = add nsw i64 %486, 1
  store i64 %490, ptr %memberidx2.i, align 8
  %memberidx.i.i85.i = getelementptr inbounds %Array_Token_, ptr %487, i64 0, i32 1
  %491 = load ptr, ptr %memberidx.i.i85.i, align 8
  %ptridx.i.i86.i = getelementptr inbounds ptr, ptr %491, i64 %490
  %492 = load ptr, ptr %ptridx.i.i86.i, align 8
  store ptr %492, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit88.i

Parser_advance.exit88.i:                          ; preds = %if.entry.i87.i, %if.entry7.i
  %493 = call fastcc ptr @Parser_parse_expression(ptr nonnull %3)
  store ptr %493, ptr %memberidx1.i89.i, align 8
  br label %ifend9.i

ifend9.i:                                         ; preds = %Parser_advance.exit88.i, %while.entry.i298
  %494 = load i64, ptr %memberidx.i.i39.i, align 4
  %495 = load i64, ptr %memberidx1.i.i.i290, align 4
  %.not.i.i300 = icmp slt i64 %494, %495
  br i1 %.not.i.i300, label %ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i, label %if.entry.i37.i

ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i: ; preds = %ifend9.i
  %.pre107.i = load ptr, ptr %memberidx2.i.i40.i291, align 8
  br label %Array_EnumNodeField____sl__.exit.i

if.entry.i37.i:                                   ; preds = %ifend9.i
  %496 = shl nuw i64 %495, 1
  store i64 %496, ptr %memberidx1.i.i.i290, align 4
  %497 = load ptr, ptr %memberidx2.i.i40.i291, align 8
  %498 = shl i64 %495, 4
  %499 = call ptr @realloc(ptr %497, i64 %498)
  store ptr %499, ptr %memberidx2.i.i40.i291, align 8
  %.pre106.i = load i64, ptr %memberidx.i.i39.i, align 4
  br label %Array_EnumNodeField____sl__.exit.i

Array_EnumNodeField____sl__.exit.i:               ; preds = %if.entry.i37.i, %ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i
  %500 = phi ptr [ %.pre107.i, %ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i ], [ %499, %if.entry.i37.i ]
  %501 = phi i64 [ %494, %ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i ], [ %.pre106.i, %if.entry.i37.i ]
  %502 = add nsw i64 %501, 1
  store i64 %502, ptr %memberidx.i.i39.i, align 4
  %ptridx.i.i301 = getelementptr inbounds ptr, ptr %500, i64 %501
  store ptr %481, ptr %ptridx.i.i301, align 8
  %503 = load ptr, ptr %memberidx.i75, align 8
  %504 = load i64, ptr %503, align 4
  %505 = icmp eq i64 %504, 33
  %506 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i.i302 = getelementptr inbounds %Array_FloError_, ptr %506, i64 0, i32 2
  %507 = load i64, ptr %memberidx3.i.i.i302, align 4
  %508 = icmp eq i64 %507, 0
  %509 = and i1 %505, %508
  br i1 %509, label %while.entry.i.preheader.i305, label %Parser_new_lines.exit.i311

while.entry.i.preheader.i305:                     ; preds = %Array_EnumNodeField____sl__.exit.i
  %510 = load ptr, ptr %3, align 8
  %memberidx2.i12.i.i303 = getelementptr inbounds %Array_Token_, ptr %510, i64 0, i32 2
  %memberidx.i.i.i.i304 = getelementptr inbounds %Array_Token_, ptr %510, i64 0, i32 1
  %511 = load i64, ptr %memberidx2.i, align 8
  %512 = load i64, ptr %memberidx2.i12.i.i303, align 4
  %513 = icmp slt i64 %511, %512
  br i1 %513, label %while.entry.i.i307, label %while.entry.i.us.i306

while.entry.i.us.i306:                            ; preds = %while.entry.i.preheader.i305, %while.entry.i.us.i306
  br label %while.entry.i.us.i306

while.entry.i.i307:                               ; preds = %while.entry.i.preheader.i305, %Parser_advance.exit.i.i310
  %514 = phi i64 [ %521, %Parser_advance.exit.i.i310 ], [ 33, %while.entry.i.preheader.i305 ]
  %515 = phi i64 [ %524, %Parser_advance.exit.i.i310 ], [ %511, %while.entry.i.preheader.i305 ]
  %516 = load i64, ptr %memberidx2.i12.i.i303, align 4
  %517 = icmp slt i64 %515, %516
  br i1 %517, label %if.entry.i.i.i309, label %Parser_advance.exit.i.i310

if.entry.i.i.i309:                                ; preds = %while.entry.i.i307
  %518 = add nsw i64 %515, 1
  store i64 %518, ptr %memberidx2.i, align 8
  %519 = load ptr, ptr %memberidx.i.i.i.i304, align 8
  %ptridx.i.i.i.i308 = getelementptr inbounds ptr, ptr %519, i64 %518
  %520 = load ptr, ptr %ptridx.i.i.i.i308, align 8
  store ptr %520, ptr %memberidx.i75, align 8
  %.pre108.i = load i64, ptr %520, align 4
  %.pre109.i = load i64, ptr %memberidx3.i.i.i302, align 4
  br label %Parser_advance.exit.i.i310

Parser_advance.exit.i.i310:                       ; preds = %if.entry.i.i.i309, %while.entry.i.i307
  %521 = phi i64 [ %.pre108.i, %if.entry.i.i.i309 ], [ %514, %while.entry.i.i307 ]
  %522 = phi i64 [ %.pre109.i, %if.entry.i.i.i309 ], [ 0, %while.entry.i.i307 ]
  %523 = phi i64 [ %.pre108.i, %if.entry.i.i.i309 ], [ 33, %while.entry.i.i307 ]
  %524 = phi i64 [ %518, %if.entry.i.i.i309 ], [ %515, %while.entry.i.i307 ]
  %525 = icmp eq i64 %523, 33
  %526 = icmp eq i64 %522, 0
  %527 = and i1 %526, %525
  br i1 %527, label %while.entry.i.i307, label %Parser_new_lines.exit.i311

Parser_new_lines.exit.i311:                       ; preds = %Parser_advance.exit.i.i310, %Array_EnumNodeField____sl__.exit.i
  %528 = phi i64 [ %504, %Array_EnumNodeField____sl__.exit.i ], [ %521, %Parser_advance.exit.i.i310 ]
  %529 = icmp eq i64 %528, 54
  br i1 %529, label %while.entry.i298, label %Parser_parse_enum.exit

Parser_parse_enum.exit:                           ; preds = %Parser_new_lines.exit.i311, %Parser_new_lines.exit81.i
  %530 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 28)
  %memberidx.i163 = getelementptr inbounds %Array_EnumNode_, ptr %407, i64 0, i32 2
  %531 = load i64, ptr %memberidx.i163, align 4
  %memberidx1.i164 = getelementptr inbounds %Array_EnumNode_, ptr %407, i64 0, i32 3
  %532 = load i64, ptr %memberidx1.i164, align 4
  %.not.i165 = icmp slt i64 %531, %532
  br i1 %.not.i165, label %Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge, label %if.entry.i168

Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge: ; preds = %Parser_parse_enum.exit
  %memberidx4.i169.phi.trans.insert = getelementptr inbounds %Array_EnumNode_, ptr %407, i64 0, i32 1
  %.pre338 = load ptr, ptr %memberidx4.i169.phi.trans.insert, align 8
  br label %Array_EnumNode____sl__.exit

if.entry.i168:                                    ; preds = %Parser_parse_enum.exit
  %533 = shl nuw i64 %532, 1
  store i64 %533, ptr %memberidx1.i164, align 4
  %memberidx2.i.i167 = getelementptr inbounds %Array_EnumNode_, ptr %407, i64 0, i32 1
  %534 = load ptr, ptr %memberidx2.i.i167, align 8
  %535 = shl i64 %532, 4
  %536 = call ptr @realloc(ptr %534, i64 %535)
  store ptr %536, ptr %memberidx2.i.i167, align 8
  %.pre337 = load i64, ptr %memberidx.i163, align 4
  br label %Array_EnumNode____sl__.exit

Array_EnumNode____sl__.exit:                      ; preds = %Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge, %if.entry.i168
  %537 = phi ptr [ %.pre338, %Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge ], [ %536, %if.entry.i168 ]
  %538 = phi i64 [ %531, %Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge ], [ %.pre337, %if.entry.i168 ]
  %539 = add nsw i64 %538, 1
  store i64 %539, ptr %memberidx.i163, align 4
  %ptridx.i170 = getelementptr inbounds ptr, ptr %537, i64 %538
  store ptr %415, ptr %ptridx.i170, align 8
  br label %ifend

if.entry17:                                       ; preds = %while.entry
  %540 = load ptr, ptr %memberidx20, align 8
  %541 = load i64, ptr %memberidx2.i, align 8
  %542 = load ptr, ptr %3, align 8
  %memberidx2.i.i173 = getelementptr inbounds %Array_Token_, ptr %542, i64 0, i32 2
  %543 = load i64, ptr %memberidx2.i.i173, align 4
  %544 = icmp slt i64 %541, %543
  br i1 %544, label %if.entry.i.i177, label %Parser_advance.exit.i181

if.entry.i.i177:                                  ; preds = %if.entry17
  %545 = add nsw i64 %541, 1
  store i64 %545, ptr %memberidx2.i, align 8
  %memberidx.i.i.i175 = getelementptr inbounds %Array_Token_, ptr %542, i64 0, i32 1
  %546 = load ptr, ptr %memberidx.i.i.i175, align 8
  %ptridx.i.i.i176 = getelementptr inbounds ptr, ptr %546, i64 %545
  %547 = load ptr, ptr %ptridx.i.i.i176, align 8
  store ptr %547, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i181

Parser_advance.exit.i181:                         ; preds = %if.entry.i.i177, %if.entry17
  %548 = call ptr @malloc(i32 24)
  %549 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ImportClause_, ptr %549, align 8
  %memberidx.i.i32.i = getelementptr inbounds %Array_ImportClause_, ptr %549, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i32.i, align 4
  %memberidx1.i.i.i178 = getelementptr inbounds %Array_ImportClause_, ptr %549, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i178, align 4
  %memberidx2.i.i.i179 = getelementptr inbounds %Array_ImportClause_, ptr %549, i64 0, i32 1
  %550 = call ptr @malloc(i32 64)
  store ptr %550, ptr %memberidx2.i.i.i179, align 8
  store i64 0, ptr %memberidx.i.i32.i, align 4
  store ptr %549, ptr %548, align 8
  %memberidx3.i34.i = getelementptr inbounds %ImportNode, ptr %548, i64 0, i32 2
  store ptr null, ptr %memberidx3.i34.i, align 8
  %551 = load ptr, ptr %memberidx.i75, align 8
  %552 = load i64, ptr %551, align 4
  %553 = icmp eq i64 %552, 54
  br i1 %553, label %if.entry.i182, label %ifend.i194

if.entry.i182:                                    ; preds = %Parser_advance.exit.i181
  %554 = call ptr @malloc(i32 16)
  %555 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %555, ptr %554, align 8
  %memberidx1.i.i35.i = getelementptr inbounds %ImportClause, ptr %554, i64 0, i32 1
  store ptr null, ptr %memberidx1.i.i35.i, align 8
  %556 = load ptr, ptr %memberidx.i75, align 8
  %557 = load i64, ptr %556, align 4
  %558 = icmp eq i64 %557, 74
  br i1 %558, label %if.entry.i39.i, label %Parser_parse_import_clause.exit.i

if.entry.i39.i:                                   ; preds = %if.entry.i182
  %559 = load i64, ptr %memberidx2.i, align 8
  %560 = load ptr, ptr %3, align 8
  %memberidx2.i.i38.i = getelementptr inbounds %Array_Token_, ptr %560, i64 0, i32 2
  %561 = load i64, ptr %memberidx2.i.i38.i, align 4
  %562 = icmp slt i64 %559, %561
  br i1 %562, label %if.entry.i.i.i187, label %Parser_advance.exit.i.i188

if.entry.i.i.i187:                                ; preds = %if.entry.i39.i
  %563 = add nsw i64 %559, 1
  store i64 %563, ptr %memberidx2.i, align 8
  %memberidx.i.i.i.i185 = getelementptr inbounds %Array_Token_, ptr %560, i64 0, i32 1
  %564 = load ptr, ptr %memberidx.i.i.i.i185, align 8
  %ptridx.i.i.i.i186 = getelementptr inbounds ptr, ptr %564, i64 %563
  %565 = load ptr, ptr %ptridx.i.i.i.i186, align 8
  store ptr %565, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i.i188

Parser_advance.exit.i.i188:                       ; preds = %if.entry.i.i.i187, %if.entry.i39.i
  %566 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %566, ptr %memberidx1.i.i35.i, align 8
  br label %Parser_parse_import_clause.exit.i

Parser_parse_import_clause.exit.i:                ; preds = %Parser_advance.exit.i.i188, %if.entry.i182
  %567 = load i64, ptr %memberidx.i.i32.i, align 4
  %568 = load i64, ptr %memberidx1.i.i.i178, align 4
  %.not.i.i190 = icmp slt i64 %567, %568
  br i1 %.not.i.i190, label %Parser_parse_import_clause.exit.i.Array_ImportClause____sl__.exit.i_crit_edge, label %if.entry.i44.i

Parser_parse_import_clause.exit.i.Array_ImportClause____sl__.exit.i_crit_edge: ; preds = %Parser_parse_import_clause.exit.i
  %.pre330 = load ptr, ptr %memberidx2.i.i.i179, align 8
  br label %Array_ImportClause____sl__.exit.i

if.entry.i44.i:                                   ; preds = %Parser_parse_import_clause.exit.i
  %569 = shl nuw i64 %568, 1
  store i64 %569, ptr %memberidx1.i.i.i178, align 4
  %570 = load ptr, ptr %memberidx2.i.i.i179, align 8
  %571 = shl i64 %568, 4
  %572 = call ptr @realloc(ptr %570, i64 %571)
  store ptr %572, ptr %memberidx2.i.i.i179, align 8
  %.pre329 = load i64, ptr %memberidx.i.i32.i, align 4
  br label %Array_ImportClause____sl__.exit.i

Array_ImportClause____sl__.exit.i:                ; preds = %Parser_parse_import_clause.exit.i.Array_ImportClause____sl__.exit.i_crit_edge, %if.entry.i44.i
  %573 = phi ptr [ %572, %if.entry.i44.i ], [ %.pre330, %Parser_parse_import_clause.exit.i.Array_ImportClause____sl__.exit.i_crit_edge ]
  %574 = phi i64 [ %.pre329, %if.entry.i44.i ], [ %567, %Parser_parse_import_clause.exit.i.Array_ImportClause____sl__.exit.i_crit_edge ]
  %575 = add nsw i64 %574, 1
  store i64 %575, ptr %memberidx.i.i32.i, align 4
  %ptridx.i.i192 = getelementptr inbounds ptr, ptr %573, i64 %574
  store ptr %554, ptr %ptridx.i.i192, align 8
  %576 = load ptr, ptr %memberidx.i75, align 8
  %577 = load i64, ptr %576, align 4
  %578 = icmp eq i64 %577, 3
  %579 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i47.i = getelementptr inbounds %Array_FloError_, ptr %579, i64 0, i32 2
  %580 = load i64, ptr %memberidx3.i47.i, align 4
  %581 = icmp eq i64 %580, 0
  %582 = and i1 %578, %581
  br i1 %582, label %while.entry.i195, label %while.end.i

ifend.i194thread-pre-split:                       ; preds = %if.entry.i92.i, %if.entry.i.i96.i, %else.i98.i
  %.ph = phi ptr [ %636, %if.entry.i92.i ], [ %644, %if.entry.i.i96.i ], [ %.pre333, %else.i98.i ]
  %.pr = load i64, ptr %.ph, align 4
  br label %ifend.i194

ifend.i194:                                       ; preds = %ifend.i194thread-pre-split, %Parser_advance.exit.i181
  %583 = phi i64 [ %.pr, %ifend.i194thread-pre-split ], [ %552, %Parser_advance.exit.i181 ]
  %584 = phi ptr [ %.ph, %ifend.i194thread-pre-split ], [ %551, %Parser_advance.exit.i181 ]
  %memberidx8.i193 = getelementptr inbounds %ImportNode, ptr %548, i64 0, i32 1
  %585 = icmp eq i64 %583, 34
  br i1 %585, label %if.entry.i51.i, label %else.i.i

if.entry.i51.i:                                   ; preds = %ifend.i194
  %586 = load i64, ptr %memberidx2.i, align 8
  %587 = load ptr, ptr %3, align 8
  %memberidx2.i.i50.i = getelementptr inbounds %Array_Token_, ptr %587, i64 0, i32 2
  %588 = load i64, ptr %memberidx2.i.i50.i, align 4
  %589 = icmp slt i64 %586, %588
  br i1 %589, label %if.entry.i.i55.i, label %Parser_eat.exit.i

if.entry.i.i55.i:                                 ; preds = %if.entry.i51.i
  %590 = add nsw i64 %586, 1
  store i64 %590, ptr %memberidx2.i, align 8
  %memberidx.i.i.i53.i = getelementptr inbounds %Array_Token_, ptr %587, i64 0, i32 1
  %591 = load ptr, ptr %memberidx.i.i.i53.i, align 8
  %ptridx.i.i.i54.i = getelementptr inbounds ptr, ptr %591, i64 %590
  %592 = load ptr, ptr %ptridx.i.i.i54.i, align 8
  store ptr %592, ptr %memberidx.i75, align 8
  br label %Parser_eat.exit.i

else.i.i:                                         ; preds = %ifend.i194
  %593 = call ptr @malloc(i32 16)
  %memberidx35.i.i = getelementptr inbounds %Token, ptr %584, i64 0, i32 1
  %594 = load ptr, ptr %memberidx35.i.i, align 8
  store i64 46, ptr %593, align 4
  %memberidx1.i82.i.i = getelementptr inbounds %Token, ptr %593, i64 0, i32 1
  store ptr %594, ptr %memberidx1.i82.i.i, align 8
  %.pre334 = load ptr, ptr %memberidx.i75, align 8
  br label %Parser_eat.exit.i

Parser_eat.exit.i:                                ; preds = %if.entry.i51.i, %if.entry.i.i55.i, %else.i.i
  %595 = phi ptr [ %.pre334, %else.i.i ], [ %592, %if.entry.i.i55.i ], [ %584, %if.entry.i51.i ]
  %common.ret.op.i.i = phi ptr [ %593, %else.i.i ], [ %584, %if.entry.i.i55.i ], [ %584, %if.entry.i51.i ]
  store ptr %common.ret.op.i.i, ptr %memberidx8.i193, align 8
  %596 = load i64, ptr %595, align 4
  %597 = icmp eq i64 %596, 74
  br i1 %597, label %if.entry11.i, label %Parser_parse_import.exit

while.entry.i195:                                 ; preds = %Array_ImportClause____sl__.exit.i, %Array_ImportClause____sl__.exit84.i
  %598 = load i64, ptr %memberidx2.i, align 8
  %599 = load ptr, ptr %3, align 8
  %memberidx2.i58.i = getelementptr inbounds %Array_Token_, ptr %599, i64 0, i32 2
  %600 = load i64, ptr %memberidx2.i58.i, align 4
  %601 = icmp slt i64 %598, %600
  br i1 %601, label %if.entry.i62.i, label %Parser_advance.exit63.i

if.entry.i62.i:                                   ; preds = %while.entry.i195
  %602 = add nsw i64 %598, 1
  store i64 %602, ptr %memberidx2.i, align 8
  %memberidx.i.i60.i = getelementptr inbounds %Array_Token_, ptr %599, i64 0, i32 1
  %603 = load ptr, ptr %memberidx.i.i60.i, align 8
  %ptridx.i.i61.i = getelementptr inbounds ptr, ptr %603, i64 %602
  %604 = load ptr, ptr %ptridx.i.i61.i, align 8
  store ptr %604, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit63.i

Parser_advance.exit63.i:                          ; preds = %if.entry.i62.i, %while.entry.i195
  %605 = load ptr, ptr %548, align 8
  %606 = call ptr @malloc(i32 16)
  %607 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %607, ptr %606, align 8
  %memberidx1.i.i64.i = getelementptr inbounds %ImportClause, ptr %606, i64 0, i32 1
  store ptr null, ptr %memberidx1.i.i64.i, align 8
  %608 = load ptr, ptr %memberidx.i75, align 8
  %609 = load i64, ptr %608, align 4
  %610 = icmp eq i64 %609, 74
  br i1 %610, label %if.entry.i68.i, label %Parser_parse_import_clause.exit75.i

if.entry.i68.i:                                   ; preds = %Parser_advance.exit63.i
  %611 = load i64, ptr %memberidx2.i, align 8
  %612 = load ptr, ptr %3, align 8
  %memberidx2.i.i67.i = getelementptr inbounds %Array_Token_, ptr %612, i64 0, i32 2
  %613 = load i64, ptr %memberidx2.i.i67.i, align 4
  %614 = icmp slt i64 %611, %613
  br i1 %614, label %if.entry.i.i72.i, label %Parser_advance.exit.i74.i

if.entry.i.i72.i:                                 ; preds = %if.entry.i68.i
  %615 = add nsw i64 %611, 1
  store i64 %615, ptr %memberidx2.i, align 8
  %memberidx.i.i.i70.i = getelementptr inbounds %Array_Token_, ptr %612, i64 0, i32 1
  %616 = load ptr, ptr %memberidx.i.i.i70.i, align 8
  %ptridx.i.i.i71.i = getelementptr inbounds ptr, ptr %616, i64 %615
  %617 = load ptr, ptr %ptridx.i.i.i71.i, align 8
  store ptr %617, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i74.i

Parser_advance.exit.i74.i:                        ; preds = %if.entry.i.i72.i, %if.entry.i68.i
  %618 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %618, ptr %memberidx1.i.i64.i, align 8
  br label %Parser_parse_import_clause.exit75.i

Parser_parse_import_clause.exit75.i:              ; preds = %Parser_advance.exit.i74.i, %Parser_advance.exit63.i
  %memberidx.i76.i = getelementptr inbounds %Array_ImportClause_, ptr %605, i64 0, i32 2
  %619 = load i64, ptr %memberidx.i76.i, align 4
  %memberidx1.i77.i = getelementptr inbounds %Array_ImportClause_, ptr %605, i64 0, i32 3
  %620 = load i64, ptr %memberidx1.i77.i, align 4
  %.not.i78.i = icmp slt i64 %619, %620
  br i1 %.not.i78.i, label %Parser_parse_import_clause.exit75.i.Array_ImportClause____sl__.exit84.i_crit_edge, label %if.entry.i81.i

Parser_parse_import_clause.exit75.i.Array_ImportClause____sl__.exit84.i_crit_edge: ; preds = %Parser_parse_import_clause.exit75.i
  %memberidx4.i82.i.phi.trans.insert = getelementptr inbounds %Array_ImportClause_, ptr %605, i64 0, i32 1
  %.pre332 = load ptr, ptr %memberidx4.i82.i.phi.trans.insert, align 8
  br label %Array_ImportClause____sl__.exit84.i

if.entry.i81.i:                                   ; preds = %Parser_parse_import_clause.exit75.i
  %621 = shl nuw i64 %620, 1
  store i64 %621, ptr %memberidx1.i77.i, align 4
  %memberidx2.i.i80.i = getelementptr inbounds %Array_ImportClause_, ptr %605, i64 0, i32 1
  %622 = load ptr, ptr %memberidx2.i.i80.i, align 8
  %623 = shl i64 %620, 4
  %624 = call ptr @realloc(ptr %622, i64 %623)
  store ptr %624, ptr %memberidx2.i.i80.i, align 8
  %.pre331 = load i64, ptr %memberidx.i76.i, align 4
  br label %Array_ImportClause____sl__.exit84.i

Array_ImportClause____sl__.exit84.i:              ; preds = %Parser_parse_import_clause.exit75.i.Array_ImportClause____sl__.exit84.i_crit_edge, %if.entry.i81.i
  %625 = phi ptr [ %624, %if.entry.i81.i ], [ %.pre332, %Parser_parse_import_clause.exit75.i.Array_ImportClause____sl__.exit84.i_crit_edge ]
  %626 = phi i64 [ %.pre331, %if.entry.i81.i ], [ %619, %Parser_parse_import_clause.exit75.i.Array_ImportClause____sl__.exit84.i_crit_edge ]
  %627 = add nsw i64 %626, 1
  store i64 %627, ptr %memberidx.i76.i, align 4
  %ptridx.i83.i = getelementptr inbounds ptr, ptr %625, i64 %626
  store ptr %606, ptr %ptridx.i83.i, align 8
  %628 = load ptr, ptr %memberidx.i75, align 8
  %629 = load i64, ptr %628, align 4
  %630 = icmp eq i64 %629, 3
  %631 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i87.i = getelementptr inbounds %Array_FloError_, ptr %631, i64 0, i32 2
  %632 = load i64, ptr %memberidx3.i87.i, align 4
  %633 = icmp eq i64 %632, 0
  %634 = and i1 %630, %633
  br i1 %634, label %while.entry.i195, label %while.end.i

while.end.i:                                      ; preds = %Array_ImportClause____sl__.exit84.i, %Array_ImportClause____sl__.exit.i
  %635 = phi i64 [ %577, %Array_ImportClause____sl__.exit.i ], [ %629, %Array_ImportClause____sl__.exit84.i ]
  %636 = phi ptr [ %576, %Array_ImportClause____sl__.exit.i ], [ %628, %Array_ImportClause____sl__.exit84.i ]
  %637 = icmp eq i64 %635, 69
  br i1 %637, label %if.entry.i92.i, label %else.i98.i

if.entry.i92.i:                                   ; preds = %while.end.i
  %638 = load i64, ptr %memberidx2.i, align 8
  %639 = load ptr, ptr %3, align 8
  %memberidx2.i.i91.i = getelementptr inbounds %Array_Token_, ptr %639, i64 0, i32 2
  %640 = load i64, ptr %memberidx2.i.i91.i, align 4
  %641 = icmp slt i64 %638, %640
  br i1 %641, label %if.entry.i.i96.i, label %ifend.i194thread-pre-split

if.entry.i.i96.i:                                 ; preds = %if.entry.i92.i
  %642 = add nsw i64 %638, 1
  store i64 %642, ptr %memberidx2.i, align 8
  %memberidx.i.i.i94.i = getelementptr inbounds %Array_Token_, ptr %639, i64 0, i32 1
  %643 = load ptr, ptr %memberidx.i.i.i94.i, align 8
  %ptridx.i.i.i95.i = getelementptr inbounds ptr, ptr %643, i64 %642
  %644 = load ptr, ptr %ptridx.i.i.i95.i, align 8
  store ptr %644, ptr %memberidx.i75, align 8
  br label %ifend.i194thread-pre-split

else.i98.i:                                       ; preds = %while.end.i
  %645 = call ptr @malloc(i32 16)
  %memberidx35.i99.i = getelementptr inbounds %Token, ptr %636, i64 0, i32 1
  %646 = load ptr, ptr %memberidx35.i99.i, align 8
  store i64 46, ptr %645, align 4
  %memberidx1.i82.i100.i = getelementptr inbounds %Token, ptr %645, i64 0, i32 1
  store ptr %646, ptr %memberidx1.i82.i100.i, align 8
  %.pre333 = load ptr, ptr %memberidx.i75, align 8
  br label %ifend.i194thread-pre-split

if.entry11.i:                                     ; preds = %Parser_eat.exit.i
  %647 = load i64, ptr %memberidx2.i, align 8
  %648 = load ptr, ptr %3, align 8
  %memberidx2.i103.i = getelementptr inbounds %Array_Token_, ptr %648, i64 0, i32 2
  %649 = load i64, ptr %memberidx2.i103.i, align 4
  %650 = icmp slt i64 %647, %649
  br i1 %650, label %if.entry.i107.i, label %Parser_advance.exit108.i

if.entry.i107.i:                                  ; preds = %if.entry11.i
  %651 = add nsw i64 %647, 1
  store i64 %651, ptr %memberidx2.i, align 8
  %memberidx.i.i105.i = getelementptr inbounds %Array_Token_, ptr %648, i64 0, i32 1
  %652 = load ptr, ptr %memberidx.i.i105.i, align 8
  %ptridx.i.i106.i = getelementptr inbounds ptr, ptr %652, i64 %651
  %653 = load ptr, ptr %ptridx.i.i106.i, align 8
  store ptr %653, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit108.i

Parser_advance.exit108.i:                         ; preds = %if.entry.i107.i, %if.entry11.i
  %654 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %654, ptr %memberidx3.i34.i, align 8
  br label %Parser_parse_import.exit

Parser_parse_import.exit:                         ; preds = %Parser_eat.exit.i, %Parser_advance.exit108.i
  %memberidx.i196 = getelementptr inbounds %Array_ImportNode_, ptr %540, i64 0, i32 2
  %655 = load i64, ptr %memberidx.i196, align 4
  %memberidx1.i197 = getelementptr inbounds %Array_ImportNode_, ptr %540, i64 0, i32 3
  %656 = load i64, ptr %memberidx1.i197, align 4
  %.not.i198 = icmp slt i64 %655, %656
  br i1 %.not.i198, label %Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge, label %if.entry.i201

Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge: ; preds = %Parser_parse_import.exit
  %memberidx4.i202.phi.trans.insert = getelementptr inbounds %Array_ImportNode_, ptr %540, i64 0, i32 1
  %.pre336 = load ptr, ptr %memberidx4.i202.phi.trans.insert, align 8
  br label %Array_ImportNode____sl__.exit

if.entry.i201:                                    ; preds = %Parser_parse_import.exit
  %657 = shl nuw i64 %656, 1
  store i64 %657, ptr %memberidx1.i197, align 4
  %memberidx2.i.i200 = getelementptr inbounds %Array_ImportNode_, ptr %540, i64 0, i32 1
  %658 = load ptr, ptr %memberidx2.i.i200, align 8
  %659 = shl i64 %656, 4
  %660 = call ptr @realloc(ptr %658, i64 %659)
  store ptr %660, ptr %memberidx2.i.i200, align 8
  %.pre335 = load i64, ptr %memberidx.i196, align 4
  br label %Array_ImportNode____sl__.exit

Array_ImportNode____sl__.exit:                    ; preds = %Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge, %if.entry.i201
  %661 = phi ptr [ %.pre336, %Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge ], [ %660, %if.entry.i201 ]
  %662 = phi i64 [ %655, %Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge ], [ %.pre335, %if.entry.i201 ]
  %663 = add nsw i64 %662, 1
  store i64 %663, ptr %memberidx.i196, align 4
  %ptridx.i203 = getelementptr inbounds ptr, ptr %661, i64 %662
  store ptr %548, ptr %ptridx.i203, align 8
  br label %ifend

if.entry23:                                       ; preds = %while.entry
  %664 = load ptr, ptr %memberidx26, align 8
  %665 = call fastcc ptr @Parser_parse_const_declaration_statement(ptr nonnull %3)
  %memberidx.i205 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %664, i64 0, i32 2
  %666 = load i64, ptr %memberidx.i205, align 4
  %memberidx1.i206 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %664, i64 0, i32 3
  %667 = load i64, ptr %memberidx1.i206, align 4
  %.not.i207 = icmp slt i64 %666, %667
  br i1 %.not.i207, label %if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge, label %if.entry.i210

if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge: ; preds = %if.entry23
  %memberidx4.i211.phi.trans.insert = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %664, i64 0, i32 1
  %.pre328 = load ptr, ptr %memberidx4.i211.phi.trans.insert, align 8
  br label %Array_ConstDeclarationStatement____sl__.exit

if.entry.i210:                                    ; preds = %if.entry23
  %668 = shl nuw i64 %667, 1
  store i64 %668, ptr %memberidx1.i206, align 4
  %memberidx2.i.i209 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %664, i64 0, i32 1
  %669 = load ptr, ptr %memberidx2.i.i209, align 8
  %670 = shl i64 %667, 4
  %671 = call ptr @realloc(ptr %669, i64 %670)
  store ptr %671, ptr %memberidx2.i.i209, align 8
  %.pre327 = load i64, ptr %memberidx.i205, align 4
  br label %Array_ConstDeclarationStatement____sl__.exit

Array_ConstDeclarationStatement____sl__.exit:     ; preds = %if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge, %if.entry.i210
  %672 = phi ptr [ %.pre328, %if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge ], [ %671, %if.entry.i210 ]
  %673 = phi i64 [ %666, %if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge ], [ %.pre327, %if.entry.i210 ]
  %674 = add nsw i64 %673, 1
  store i64 %674, ptr %memberidx.i205, align 4
  %ptridx.i212 = getelementptr inbounds ptr, ptr %672, i64 %673
  store ptr %665, ptr %ptridx.i212, align 8
  br label %ifend

if.entry29:                                       ; preds = %while.entry
  %675 = load ptr, ptr %memberidx32, align 8
  %676 = call fastcc ptr @Parser_parse_variable_declaration_statement(ptr nonnull %3)
  %memberidx.i214 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %675, i64 0, i32 2
  %677 = load i64, ptr %memberidx.i214, align 4
  %memberidx1.i215 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %675, i64 0, i32 3
  %678 = load i64, ptr %memberidx1.i215, align 4
  %.not.i216 = icmp slt i64 %677, %678
  br i1 %.not.i216, label %if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge, label %if.entry.i219

if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge: ; preds = %if.entry29
  %memberidx4.i220.phi.trans.insert = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %675, i64 0, i32 1
  %.pre326 = load ptr, ptr %memberidx4.i220.phi.trans.insert, align 8
  br label %Array_VarDeclarationStatement____sl__.exit

if.entry.i219:                                    ; preds = %if.entry29
  %679 = shl nuw i64 %678, 1
  store i64 %679, ptr %memberidx1.i215, align 4
  %memberidx2.i.i218 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %675, i64 0, i32 1
  %680 = load ptr, ptr %memberidx2.i.i218, align 8
  %681 = shl i64 %678, 4
  %682 = call ptr @realloc(ptr %680, i64 %681)
  store ptr %682, ptr %memberidx2.i.i218, align 8
  %.pre325 = load i64, ptr %memberidx.i214, align 4
  br label %Array_VarDeclarationStatement____sl__.exit

Array_VarDeclarationStatement____sl__.exit:       ; preds = %if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge, %if.entry.i219
  %683 = phi ptr [ %.pre326, %if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge ], [ %682, %if.entry.i219 ]
  %684 = phi i64 [ %677, %if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge ], [ %.pre325, %if.entry.i219 ]
  %685 = add nsw i64 %684, 1
  store i64 %685, ptr %memberidx.i214, align 4
  %ptridx.i221 = getelementptr inbounds ptr, ptr %683, i64 %684
  store ptr %676, ptr %ptridx.i221, align 8
  br label %ifend

else30:                                           ; preds = %while.entry
  %memberidx36 = getelementptr inbounds %IdentifierToken, ptr %35, i64 0, i32 2
  %686 = load ptr, ptr %memberidx36, align 8
  %687 = call ptr @malloc(i32 4)
  store i32 1701869940, ptr %687, align 8
  %688 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %688, align 8
  %memberidx.i.i223 = getelementptr inbounds %string, ptr %688, i64 0, i32 1
  store ptr %687, ptr %memberidx.i.i223, align 8
  %memberidx1.i.i224 = getelementptr inbounds %string, ptr %688, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i224, align 4
  %memberidx2.i.i225 = getelementptr inbounds %string, ptr %688, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i225, align 4
  %memberidx.i226 = getelementptr inbounds %string, ptr %686, i64 0, i32 2
  %689 = load i64, ptr %memberidx.i226, align 4
  %.not.i228 = icmp eq i64 %689, 4
  br i1 %.not.i228, label %string___eq__.exit, label %else38

string___eq__.exit:                               ; preds = %else30
  %690 = icmp eq i64 %34, 54
  %memberidx2.i229 = getelementptr inbounds %string, ptr %686, i64 0, i32 1
  %691 = load ptr, ptr %memberidx2.i229, align 8
  %692 = call i64 @memcmp(ptr %691, ptr nonnull %687, i64 4)
  %693 = icmp eq i64 %692, 0
  %694 = and i1 %690, %693
  br i1 %694, label %if.entry37, label %else38

if.entry37:                                       ; preds = %string___eq__.exit
  %695 = load ptr, ptr %memberidx40, align 8
  %696 = load i64, ptr %memberidx2.i, align 8
  %697 = load ptr, ptr %3, align 8
  %memberidx2.i.i233 = getelementptr inbounds %Array_Token_, ptr %697, i64 0, i32 2
  %698 = load i64, ptr %memberidx2.i.i233, align 4
  %699 = icmp slt i64 %696, %698
  br i1 %699, label %if.entry.i.i237, label %Parser_parse_type_alias.exit

if.entry.i.i237:                                  ; preds = %if.entry37
  %700 = add nsw i64 %696, 1
  store i64 %700, ptr %memberidx2.i, align 8
  %memberidx.i.i.i235 = getelementptr inbounds %Array_Token_, ptr %697, i64 0, i32 1
  %701 = load ptr, ptr %memberidx.i.i.i235, align 8
  %ptridx.i.i.i236 = getelementptr inbounds ptr, ptr %701, i64 %700
  %702 = load ptr, ptr %ptridx.i.i.i236, align 8
  store ptr %702, ptr %memberidx.i75, align 8
  br label %Parser_parse_type_alias.exit

Parser_parse_type_alias.exit:                     ; preds = %if.entry37, %if.entry.i.i237
  %703 = call ptr @malloc(i32 16)
  %704 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %704, ptr %703, align 8
  %705 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 38)
  %memberidx.i238 = getelementptr inbounds %TypeAliasNode, ptr %703, i64 0, i32 1
  %706 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %706, ptr %memberidx.i238, align 8
  %memberidx.i93 = getelementptr inbounds %Array_TypeAliasNode_, ptr %695, i64 0, i32 2
  %707 = load i64, ptr %memberidx.i93, align 4
  %memberidx1.i94 = getelementptr inbounds %Array_TypeAliasNode_, ptr %695, i64 0, i32 3
  %708 = load i64, ptr %memberidx1.i94, align 4
  %.not.i = icmp slt i64 %707, %708
  br i1 %.not.i, label %Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge, label %if.entry.i97

Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge: ; preds = %Parser_parse_type_alias.exit
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_TypeAliasNode_, ptr %695, i64 0, i32 1
  %.pre357 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_TypeAliasNode____sl__.exit

if.entry.i97:                                     ; preds = %Parser_parse_type_alias.exit
  %709 = shl nuw i64 %708, 1
  store i64 %709, ptr %memberidx1.i94, align 4
  %memberidx2.i.i96 = getelementptr inbounds %Array_TypeAliasNode_, ptr %695, i64 0, i32 1
  %710 = load ptr, ptr %memberidx2.i.i96, align 8
  %711 = shl i64 %708, 4
  %712 = call ptr @realloc(ptr %710, i64 %711)
  store ptr %712, ptr %memberidx2.i.i96, align 8
  %.pre356 = load i64, ptr %memberidx.i93, align 4
  br label %Array_TypeAliasNode____sl__.exit

Array_TypeAliasNode____sl__.exit:                 ; preds = %Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge, %if.entry.i97
  %713 = phi ptr [ %.pre357, %Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge ], [ %712, %if.entry.i97 ]
  %714 = phi i64 [ %707, %Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge ], [ %.pre356, %if.entry.i97 ]
  %715 = add nsw i64 %714, 1
  store i64 %715, ptr %memberidx.i93, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %713, i64 %714
  store ptr %703, ptr %ptridx.i, align 8
  br label %ifend

else38:                                           ; preds = %else30, %string___eq__.exit
  %716 = call ptr @malloc(i32 79)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(79) %716, ptr noundef nonnull align 8 dereferenceable(79) @67, i64 79, i1 false)
  %717 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %717, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %717, i64 0, i32 1
  store ptr %716, ptr %memberidx.i.i80, align 8
  %memberidx1.i.i81 = getelementptr inbounds %string, ptr %717, i64 0, i32 2
  store i64 79, ptr %memberidx1.i.i81, align 4
  %memberidx2.i.i82 = getelementptr inbounds %string, ptr %717, i64 0, i32 3
  store i64 79, ptr %memberidx2.i.i82, align 4
  %718 = load ptr, ptr %memberidx1.i, align 8
  %719 = call ptr @malloc(i32 24)
  %720 = load ptr, ptr %memberidx.i75, align 8
  %memberidx2.i70 = getelementptr inbounds %Token, ptr %720, i64 0, i32 1
  %721 = load ptr, ptr %memberidx2.i70, align 8
  store i64 2, ptr %719, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %719, i64 0, i32 2
  store ptr %721, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %719, i64 0, i32 1
  store ptr %717, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %718, i64 0, i32 2
  %722 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %718, i64 0, i32 3
  %723 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %722, %723
  br i1 %.not.i.i, label %else38.Parser_error.exit_crit_edge, label %if.entry.i.i

else38.Parser_error.exit_crit_edge:               ; preds = %else38
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %718, i64 0, i32 1
  %.pre355 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit

if.entry.i.i:                                     ; preds = %else38
  %724 = shl nuw i64 %723, 1
  store i64 %724, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %718, i64 0, i32 1
  %725 = load ptr, ptr %memberidx2.i.i.i, align 8
  %726 = shl i64 %723, 4
  %727 = call ptr @realloc(ptr %725, i64 %726)
  store ptr %727, ptr %memberidx2.i.i.i, align 8
  %.pre354 = load i64, ptr %memberidx.i.i, align 4
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %else38.Parser_error.exit_crit_edge, %if.entry.i.i
  %728 = phi ptr [ %.pre355, %else38.Parser_error.exit_crit_edge ], [ %727, %if.entry.i.i ]
  %729 = phi i64 [ %722, %else38.Parser_error.exit_crit_edge ], [ %.pre354, %if.entry.i.i ]
  %730 = add nsw i64 %729, 1
  store i64 %730, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %728, i64 %729
  store ptr %719, ptr %ptridx.i.i, align 8
  br label %ifend
}

define internal fastcc ptr @Parser_parse_block(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 16)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i77 = getelementptr inbounds %BlockNode, ptr %2, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_StatementNode_, ptr %5, align 8
  %memberidx.i.i78 = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i78, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i79 = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i.i79, align 8
  store i64 0, ptr %memberidx.i.i78, align 4
  store ptr %5, ptr %memberidx.i77, align 8
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 33
  %memberidx2.i.i63 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx2.i.i63, align 8
  %memberidx3.i.i64 = getelementptr inbounds %Array_FloError_, ptr %10, i64 0, i32 2
  %11 = load i64, ptr %memberidx3.i.i64, align 4
  %12 = icmp eq i64 %11, 0
  %13 = and i1 %9, %12
  br i1 %13, label %while.entry.i67.preheader, label %Parser_new_lines.exit76

while.entry.i67.preheader:                        ; preds = %1
  %memberidx.i11.i65 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12.i66 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %memberidx.i.i.i69 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %15 = load i64, ptr %memberidx.i11.i65, align 4
  %16 = load i64, ptr %memberidx2.i12.i66, align 4
  %17 = icmp slt i64 %15, %16
  br i1 %17, label %while.entry.i67, label %while.entry.i67.us

while.entry.i67.us:                               ; preds = %while.entry.i67.preheader, %while.entry.i67.us
  br label %while.entry.i67.us

while.entry.i67:                                  ; preds = %while.entry.i67.preheader, %Parser_advance.exit.i75
  %18 = phi i64 [ %26, %Parser_advance.exit.i75 ], [ 0, %while.entry.i67.preheader ]
  %19 = phi i64 [ %27, %Parser_advance.exit.i75 ], [ 33, %while.entry.i67.preheader ]
  %20 = phi i64 [ %30, %Parser_advance.exit.i75 ], [ %15, %while.entry.i67.preheader ]
  %21 = load i64, ptr %memberidx2.i12.i66, align 4
  %22 = icmp slt i64 %20, %21
  br i1 %22, label %if.entry.i.i71, label %Parser_advance.exit.i75

if.entry.i.i71:                                   ; preds = %while.entry.i67
  %23 = add nsw i64 %20, 1
  store i64 %23, ptr %memberidx.i11.i65, align 4
  %24 = load ptr, ptr %memberidx.i.i.i69, align 8
  %ptridx.i.i.i70 = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx.i.i.i70, align 8
  store ptr %25, ptr %memberidx, align 8
  %.pre = load i64, ptr %25, align 4
  %.pre92 = load i64, ptr %memberidx3.i.i64, align 4
  br label %Parser_advance.exit.i75

Parser_advance.exit.i75:                          ; preds = %if.entry.i.i71, %while.entry.i67
  %26 = phi i64 [ %.pre92, %if.entry.i.i71 ], [ %18, %while.entry.i67 ]
  %27 = phi i64 [ %.pre, %if.entry.i.i71 ], [ %19, %while.entry.i67 ]
  %28 = phi i64 [ %.pre92, %if.entry.i.i71 ], [ 0, %while.entry.i67 ]
  %29 = phi i64 [ %.pre, %if.entry.i.i71 ], [ 33, %while.entry.i67 ]
  %30 = phi i64 [ %23, %if.entry.i.i71 ], [ %20, %while.entry.i67 ]
  %31 = icmp eq i64 %29, 33
  %32 = icmp eq i64 %28, 0
  %33 = and i1 %31, %32
  br i1 %33, label %while.entry.i67, label %Parser_new_lines.exit76

Parser_new_lines.exit76:                          ; preds = %Parser_advance.exit.i75, %1
  %34 = phi i64 [ %11, %1 ], [ %26, %Parser_advance.exit.i75 ]
  %35 = phi i64 [ %8, %1 ], [ %27, %Parser_advance.exit.i75 ]
  %36 = icmp eq i64 %35, 27
  br i1 %36, label %if.entry, label %else

if.entry:                                         ; preds = %Parser_new_lines.exit76
  %memberidx.i56 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %37 = load i64, ptr %memberidx.i56, align 4
  %38 = load ptr, ptr %0, align 8
  %memberidx2.i57 = getelementptr inbounds %Array_Token_, ptr %38, i64 0, i32 2
  %39 = load i64, ptr %memberidx2.i57, align 4
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %Parser_advance.exit, label %Parser_new_lines.exit55

Parser_advance.exit:                              ; preds = %if.entry
  %41 = add nsw i64 %37, 1
  store i64 %41, ptr %memberidx.i56, align 4
  %memberidx.i.i59 = getelementptr inbounds %Array_Token_, ptr %38, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i.i59, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %42, i64 %41
  %43 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %43, ptr %memberidx, align 8
  %.pre95 = load i64, ptr %43, align 4
  %.pre96 = load i64, ptr %memberidx3.i.i64, align 4
  %44 = icmp eq i64 %.pre95, 33
  %45 = icmp eq i64 %.pre96, 0
  %46 = and i1 %44, %45
  br i1 %46, label %while.entry.i46.preheader, label %Parser_new_lines.exit55

while.entry.i46.preheader:                        ; preds = %Parser_advance.exit
  %memberidx.i.i.i48 = getelementptr inbounds %Array_Token_, ptr %38, i64 0, i32 1
  %47 = load i64, ptr %memberidx2.i57, align 4
  %48 = icmp slt i64 %41, %47
  br i1 %48, label %while.entry.i46, label %while.entry.i46.us

while.entry.i46.us:                               ; preds = %while.entry.i46.preheader, %while.entry.i46.us
  br label %while.entry.i46.us

while.entry.i46:                                  ; preds = %while.entry.i46.preheader, %Parser_advance.exit.i54
  %49 = phi i64 [ %57, %Parser_advance.exit.i54 ], [ 33, %while.entry.i46.preheader ]
  %50 = phi i64 [ %58, %Parser_advance.exit.i54 ], [ 0, %while.entry.i46.preheader ]
  %51 = phi i64 [ %61, %Parser_advance.exit.i54 ], [ %41, %while.entry.i46.preheader ]
  %52 = load i64, ptr %memberidx2.i57, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %if.entry.i.i50, label %Parser_advance.exit.i54

if.entry.i.i50:                                   ; preds = %while.entry.i46
  %54 = add nsw i64 %51, 1
  store i64 %54, ptr %memberidx.i56, align 4
  %55 = load ptr, ptr %memberidx.i.i.i48, align 8
  %ptridx.i.i.i49 = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i.i.i49, align 8
  store ptr %56, ptr %memberidx, align 8
  %.pre97 = load i64, ptr %56, align 4
  %.pre98 = load i64, ptr %memberidx3.i.i64, align 4
  br label %Parser_advance.exit.i54

Parser_advance.exit.i54:                          ; preds = %if.entry.i.i50, %while.entry.i46
  %57 = phi i64 [ %.pre97, %if.entry.i.i50 ], [ %49, %while.entry.i46 ]
  %58 = phi i64 [ %.pre98, %if.entry.i.i50 ], [ %50, %while.entry.i46 ]
  %59 = phi i64 [ %.pre98, %if.entry.i.i50 ], [ 0, %while.entry.i46 ]
  %60 = phi i64 [ %.pre97, %if.entry.i.i50 ], [ 33, %while.entry.i46 ]
  %61 = phi i64 [ %54, %if.entry.i.i50 ], [ %51, %while.entry.i46 ]
  %62 = icmp eq i64 %60, 33
  %63 = icmp eq i64 %59, 0
  %64 = and i1 %62, %63
  br i1 %64, label %while.entry.i46, label %Parser_new_lines.exit55

Parser_new_lines.exit55:                          ; preds = %Parser_advance.exit.i54, %if.entry, %Parser_advance.exit
  %65 = phi i64 [ %.pre95, %Parser_advance.exit ], [ 27, %if.entry ], [ %57, %Parser_advance.exit.i54 ]
  %66 = phi i64 [ %.pre96, %Parser_advance.exit ], [ %34, %if.entry ], [ %58, %Parser_advance.exit.i54 ]
  %.fr = freeze i64 %66
  %67 = icmp eq i64 %.fr, 0
  br i1 %67, label %switch.early.test, label %while.end

switch.early.test:                                ; preds = %Parser_new_lines.exit55
  switch i64 %65, label %while.entry [
    i64 46, label %while.end
    i64 28, label %while.end
  ]

else:                                             ; preds = %Parser_new_lines.exit76
  %68 = tail call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  %69 = load i64, ptr %memberidx.i.i78, align 4
  %70 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i30 = icmp slt i64 %69, %70
  br i1 %.not.i30, label %else.Array_StatementNode____sl__.exit36_crit_edge, label %if.entry.i33

else.Array_StatementNode____sl__.exit36_crit_edge: ; preds = %else
  %.pre94 = load ptr, ptr %memberidx2.i.i79, align 8
  br label %Array_StatementNode____sl__.exit36

if.entry.i33:                                     ; preds = %else
  %71 = shl nuw i64 %70, 1
  store i64 %71, ptr %memberidx1.i.i, align 4
  %72 = load ptr, ptr %memberidx2.i.i79, align 8
  %73 = shl i64 %70, 4
  %74 = tail call ptr @realloc(ptr %72, i64 %73)
  store ptr %74, ptr %memberidx2.i.i79, align 8
  %.pre93 = load i64, ptr %memberidx.i.i78, align 4
  br label %Array_StatementNode____sl__.exit36

Array_StatementNode____sl__.exit36:               ; preds = %else.Array_StatementNode____sl__.exit36_crit_edge, %if.entry.i33
  %75 = phi ptr [ %.pre94, %else.Array_StatementNode____sl__.exit36_crit_edge ], [ %74, %if.entry.i33 ]
  %76 = phi i64 [ %69, %else.Array_StatementNode____sl__.exit36_crit_edge ], [ %.pre93, %if.entry.i33 ]
  %77 = add nsw i64 %76, 1
  store i64 %77, ptr %memberidx.i.i78, align 4
  %ptridx.i35 = getelementptr inbounds ptr, ptr %75, i64 %76
  store ptr %68, ptr %ptridx.i35, align 8
  br label %ifend

ifend:                                            ; preds = %Array_StatementNode____sl__.exit36, %while.end
  ret ptr %2

while.entry:                                      ; preds = %switch.early.test, %switch.early.test84
  %78 = tail call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  %79 = load i64, ptr %memberidx.i.i78, align 4
  %80 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i = icmp slt i64 %79, %80
  br i1 %.not.i, label %while.entry.Array_StatementNode____sl__.exit_crit_edge, label %if.entry.i

while.entry.Array_StatementNode____sl__.exit_crit_edge: ; preds = %while.entry
  %.pre100 = load ptr, ptr %memberidx2.i.i79, align 8
  br label %Array_StatementNode____sl__.exit

if.entry.i:                                       ; preds = %while.entry
  %81 = shl nuw i64 %80, 1
  store i64 %81, ptr %memberidx1.i.i, align 4
  %82 = load ptr, ptr %memberidx2.i.i79, align 8
  %83 = shl i64 %80, 4
  %84 = tail call ptr @realloc(ptr %82, i64 %83)
  store ptr %84, ptr %memberidx2.i.i79, align 8
  %.pre99 = load i64, ptr %memberidx.i.i78, align 4
  br label %Array_StatementNode____sl__.exit

Array_StatementNode____sl__.exit:                 ; preds = %while.entry.Array_StatementNode____sl__.exit_crit_edge, %if.entry.i
  %85 = phi ptr [ %.pre100, %while.entry.Array_StatementNode____sl__.exit_crit_edge ], [ %84, %if.entry.i ]
  %86 = phi i64 [ %79, %while.entry.Array_StatementNode____sl__.exit_crit_edge ], [ %.pre99, %if.entry.i ]
  %87 = add nsw i64 %86, 1
  store i64 %87, ptr %memberidx.i.i78, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %85, i64 %86
  store ptr %78, ptr %ptridx.i, align 8
  %88 = load ptr, ptr %memberidx, align 8
  %89 = load i64, ptr %88, align 4
  %90 = icmp eq i64 %89, 33
  %91 = load ptr, ptr %memberidx2.i.i63, align 8
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %91, i64 0, i32 2
  %92 = load i64, ptr %memberidx3.i.i, align 4
  %93 = icmp eq i64 %92, 0
  %94 = and i1 %90, %93
  br i1 %94, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %Array_StatementNode____sl__.exit
  %95 = load ptr, ptr %0, align 8
  %memberidx2.i12.i = getelementptr inbounds %Array_Token_, ptr %95, i64 0, i32 2
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %95, i64 0, i32 1
  %96 = load i64, ptr %memberidx.i56, align 4
  %97 = load i64, ptr %memberidx2.i12.i, align 4
  %98 = icmp slt i64 %96, %97
  br i1 %98, label %while.entry.i, label %while.entry.i.us

while.entry.i.us:                                 ; preds = %while.entry.i.preheader, %while.entry.i.us
  br label %while.entry.i.us

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %99 = phi i64 [ %107, %Parser_advance.exit.i ], [ 33, %while.entry.i.preheader ]
  %100 = phi i64 [ %108, %Parser_advance.exit.i ], [ 0, %while.entry.i.preheader ]
  %101 = phi i64 [ %111, %Parser_advance.exit.i ], [ %96, %while.entry.i.preheader ]
  %102 = load i64, ptr %memberidx2.i12.i, align 4
  %103 = icmp slt i64 %101, %102
  br i1 %103, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %while.entry.i
  %104 = add nsw i64 %101, 1
  store i64 %104, ptr %memberidx.i56, align 4
  %105 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %105, i64 %104
  %106 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %106, ptr %memberidx, align 8
  %.pre101 = load i64, ptr %106, align 4
  %.pre102 = load i64, ptr %memberidx3.i.i, align 4
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %while.entry.i
  %107 = phi i64 [ %.pre101, %if.entry.i.i ], [ %99, %while.entry.i ]
  %108 = phi i64 [ %.pre102, %if.entry.i.i ], [ %100, %while.entry.i ]
  %109 = phi i64 [ %.pre102, %if.entry.i.i ], [ 0, %while.entry.i ]
  %110 = phi i64 [ %.pre101, %if.entry.i.i ], [ 33, %while.entry.i ]
  %111 = phi i64 [ %104, %if.entry.i.i ], [ %101, %while.entry.i ]
  %112 = icmp eq i64 %110, 33
  %113 = icmp eq i64 %109, 0
  %114 = and i1 %112, %113
  br i1 %114, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %Array_StatementNode____sl__.exit
  %115 = phi i64 [ %89, %Array_StatementNode____sl__.exit ], [ %107, %Parser_advance.exit.i ]
  %116 = phi i64 [ %92, %Array_StatementNode____sl__.exit ], [ %108, %Parser_advance.exit.i ]
  %.fr85 = freeze i64 %116
  %117 = icmp eq i64 %.fr85, 0
  br i1 %117, label %switch.early.test84, label %while.end

switch.early.test84:                              ; preds = %Parser_new_lines.exit
  switch i64 %115, label %while.entry [
    i64 46, label %while.end
    i64 28, label %while.end
  ]

while.end:                                        ; preds = %switch.early.test84, %switch.early.test84, %Parser_new_lines.exit, %switch.early.test, %switch.early.test, %Parser_new_lines.exit55
  %118 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 28)
  br label %ifend
}

define internal fastcc ptr @Parser_parse_type(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  switch i64 %3, label %ifend [
    i64 54, label %if.entry
    i64 25, label %if.entry4
    i64 29, label %if.entry9
  ]

if.entry:                                         ; preds = %1
  %4 = tail call fastcc ptr @Parser_parse_object_type(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %else.i178, %if.entry.i.i176, %if.entry.i172, %1, %Parser_parse_function_type.exit, %if.entry
  %type_node.0 = phi ptr [ %4, %if.entry ], [ %16, %Parser_parse_function_type.exit ], [ null, %1 ], [ %39, %if.entry.i172 ], [ %39, %if.entry.i.i176 ], [ %39, %else.i178 ]
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 29
  %8 = icmp eq i64 %6, 11
  %9 = or i1 %7, %8
  %10 = icmp eq i64 %6, 4
  %11 = or i1 %10, %9
  %memberidx2.i220 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %12 = load ptr, ptr %memberidx2.i220, align 8
  %memberidx3.i221 = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx3.i221, align 4
  %14 = icmp eq i64 %13, 0
  %15 = and i1 %11, %14
  br i1 %15, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %ifend
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

if.entry4:                                        ; preds = %1
  %16 = tail call ptr @malloc(i32 32)
  %17 = load ptr, ptr %memberidx, align 8
  %memberidx1.i223 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx1.i223, align 8
  store ptr %18, ptr %16, align 8
  %memberidx.i.i23.i = getelementptr inbounds %TypeNode, ptr %16, i64 0, i32 1
  store i64 15, ptr %memberidx.i.i23.i, align 4
  %memberidx.i24.i = getelementptr inbounds %FunctionTypeNode, ptr %16, i64 0, i32 2
  %19 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %19, align 8
  %memberidx.i3.i.i = getelementptr inbounds %Array_TypeNode_, ptr %19, i64 0, i32 2
  store i64 0, ptr %memberidx.i3.i.i, align 4
  %memberidx1.i.i25.i = getelementptr inbounds %Array_TypeNode_, ptr %19, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i25.i, align 4
  %memberidx2.i.i26.i = getelementptr inbounds %Array_TypeNode_, ptr %19, i64 0, i32 1
  %20 = tail call ptr @malloc(i32 64)
  store ptr %20, ptr %memberidx2.i.i26.i, align 8
  store i64 0, ptr %memberidx.i3.i.i, align 4
  store ptr %19, ptr %memberidx.i24.i, align 8
  %memberidx.i.i224 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %21 = load i64, ptr %memberidx.i.i224, align 4
  %22 = load ptr, ptr %0, align 8
  %memberidx2.i21.i = getelementptr inbounds %Array_Token_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx2.i21.i, align 4
  %24 = icmp slt i64 %21, %23
  br i1 %24, label %if.entry.i.i227, label %if.entry4.Parser_advance.exit.i229_crit_edge

if.entry4.Parser_advance.exit.i229_crit_edge:     ; preds = %if.entry4
  %.pre245 = load ptr, ptr %memberidx, align 8
  br label %Parser_advance.exit.i229

if.entry.i.i227:                                  ; preds = %if.entry4
  %25 = add nsw i64 %21, 1
  store i64 %25, ptr %memberidx.i.i224, align 4
  %memberidx.i.i.i225 = getelementptr inbounds %Array_Token_, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %memberidx.i.i.i225, align 8
  %ptridx.i.i.i226 = getelementptr inbounds ptr, ptr %26, i64 %25
  %27 = load ptr, ptr %ptridx.i.i.i226, align 8
  store ptr %27, ptr %memberidx, align 8
  br label %Parser_advance.exit.i229

Parser_advance.exit.i229:                         ; preds = %if.entry4.Parser_advance.exit.i229_crit_edge, %if.entry.i.i227
  %28 = phi ptr [ %.pre245, %if.entry4.Parser_advance.exit.i229_crit_edge ], [ %27, %if.entry.i.i227 ]
  %29 = load i64, ptr %28, align 4
  %.not.i228 = icmp eq i64 %29, 26
  br i1 %.not.i228, label %Parser_parse_function_type.exit, label %if.entry.i231

if.entry.i231:                                    ; preds = %Parser_advance.exit.i229
  tail call fastcc void @Parser_parse_type_list(ptr nonnull %0, ptr nonnull %19)
  br label %Parser_parse_function_type.exit

Parser_parse_function_type.exit:                  ; preds = %Parser_advance.exit.i229, %if.entry.i231
  %30 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  %31 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 45)
  %memberidx5.i = getelementptr inbounds %FunctionTypeNode, ptr %16, i64 0, i32 3
  %32 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %32, ptr %memberidx5.i, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = tail call ptr @malloc(i32 32)
  %35 = load i64, ptr %18, align 4
  %memberidx1.i.i232 = getelementptr inbounds %FloRange, ptr %33, i64 0, i32 1
  %36 = load i64, ptr %memberidx1.i.i232, align 4
  %memberidx2.i.i233 = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 2
  %37 = load i64, ptr %memberidx2.i.i233, align 4
  %memberidx3.i.i234 = getelementptr inbounds %FloRange, ptr %33, i64 0, i32 3
  %38 = load i64, ptr %memberidx3.i.i234, align 4
  store i64 %35, ptr %34, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %34, i64 0, i32 1
  store i64 %36, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %34, i64 0, i32 2
  store i64 %37, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %34, i64 0, i32 3
  store i64 %38, ptr %memberidx3.i.i.i, align 4
  store ptr %34, ptr %16, align 8
  br label %ifend

if.entry9:                                        ; preds = %1
  %39 = tail call ptr @malloc(i32 32)
  %40 = tail call ptr @malloc(i32 24)
  %41 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %41, ptr noundef nonnull align 8 dereferenceable(3) @61, i64 3, i1 false)
  %42 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i216 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i216, align 8
  %memberidx1.i.i217 = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i217, align 4
  %memberidx2.i.i218 = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i218, align 4
  %43 = load ptr, ptr %memberidx, align 8
  %memberidx13 = getelementptr inbounds %Token, ptr %43, i64 0, i32 1
  %44 = load ptr, ptr %memberidx13, align 8
  store i64 54, ptr %40, align 4
  %memberidx1.i.i214 = getelementptr inbounds %Token, ptr %40, i64 0, i32 1
  store ptr %44, ptr %memberidx1.i.i214, align 8
  %memberidx.i215 = getelementptr inbounds %IdentifierToken, ptr %40, i64 0, i32 2
  store ptr %42, ptr %memberidx.i215, align 8
  %45 = load ptr, ptr %memberidx13, align 8
  store ptr %45, ptr %39, align 8
  %memberidx.i.i207 = getelementptr inbounds %TypeNode, ptr %39, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i207, align 4
  %memberidx.i208 = getelementptr inbounds %RecordTypeNode, ptr %39, i64 0, i32 2
  store ptr %40, ptr %memberidx.i208, align 8
  %memberidx1.i209 = getelementptr inbounds %RecordTypeNode, ptr %39, i64 0, i32 3
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %46, align 8
  %memberidx.i5.i210 = getelementptr inbounds %Array_TypeNode_, ptr %46, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i210, align 4
  %memberidx1.i.i211 = getelementptr inbounds %Array_TypeNode_, ptr %46, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i211, align 4
  %memberidx2.i.i212 = getelementptr inbounds %Array_TypeNode_, ptr %46, i64 0, i32 1
  %47 = tail call ptr @malloc(i32 64)
  store ptr %47, ptr %memberidx2.i.i212, align 8
  store i64 0, ptr %memberidx.i5.i210, align 4
  store ptr %46, ptr %memberidx1.i209, align 8
  %memberidx.i200 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %48 = load i64, ptr %memberidx.i200, align 4
  %49 = load ptr, ptr %0, align 8
  %memberidx2.i201 = getelementptr inbounds %Array_Token_, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i201, align 4
  %51 = icmp slt i64 %48, %50
  br i1 %51, label %if.entry.i205, label %Parser_advance.exit206

if.entry.i205:                                    ; preds = %if.entry9
  %52 = add nsw i64 %48, 1
  store i64 %52, ptr %memberidx.i200, align 4
  %memberidx.i.i203 = getelementptr inbounds %Array_Token_, ptr %49, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i.i203, align 8
  %ptridx.i.i204 = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i.i204, align 8
  store ptr %54, ptr %memberidx, align 8
  br label %Parser_advance.exit206

Parser_advance.exit206:                           ; preds = %if.entry9, %if.entry.i205
  %55 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %56 = load i64, ptr %memberidx.i5.i210, align 4
  %57 = load i64, ptr %memberidx1.i.i211, align 4
  %.not.i193 = icmp slt i64 %56, %57
  br i1 %.not.i193, label %Parser_advance.exit206.Array_TypeNode____sl__.exit199_crit_edge, label %if.entry.i196

Parser_advance.exit206.Array_TypeNode____sl__.exit199_crit_edge: ; preds = %Parser_advance.exit206
  %.pre242 = load ptr, ptr %memberidx2.i.i212, align 8
  br label %Array_TypeNode____sl__.exit199

if.entry.i196:                                    ; preds = %Parser_advance.exit206
  %58 = shl nuw i64 %57, 1
  store i64 %58, ptr %memberidx1.i.i211, align 4
  %59 = load ptr, ptr %memberidx2.i.i212, align 8
  %60 = shl i64 %57, 4
  %61 = tail call ptr @realloc(ptr %59, i64 %60)
  store ptr %61, ptr %memberidx2.i.i212, align 8
  %.pre = load i64, ptr %memberidx.i5.i210, align 4
  br label %Array_TypeNode____sl__.exit199

Array_TypeNode____sl__.exit199:                   ; preds = %Parser_advance.exit206.Array_TypeNode____sl__.exit199_crit_edge, %if.entry.i196
  %62 = phi ptr [ %.pre242, %Parser_advance.exit206.Array_TypeNode____sl__.exit199_crit_edge ], [ %61, %if.entry.i196 ]
  %63 = phi i64 [ %56, %Parser_advance.exit206.Array_TypeNode____sl__.exit199_crit_edge ], [ %.pre, %if.entry.i196 ]
  %64 = add nsw i64 %63, 1
  store i64 %64, ptr %memberidx.i5.i210, align 4
  %ptridx.i198 = getelementptr inbounds ptr, ptr %62, i64 %63
  store ptr %55, ptr %ptridx.i198, align 8
  %65 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 1)
  %66 = load ptr, ptr %memberidx1.i209, align 8
  %67 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %memberidx.i182 = getelementptr inbounds %Array_TypeNode_, ptr %66, i64 0, i32 2
  %68 = load i64, ptr %memberidx.i182, align 4
  %memberidx1.i183 = getelementptr inbounds %Array_TypeNode_, ptr %66, i64 0, i32 3
  %69 = load i64, ptr %memberidx1.i183, align 4
  %.not.i184 = icmp slt i64 %68, %69
  br i1 %.not.i184, label %Array_TypeNode____sl__.exit199.Array_TypeNode____sl__.exit190_crit_edge, label %if.entry.i187

Array_TypeNode____sl__.exit199.Array_TypeNode____sl__.exit190_crit_edge: ; preds = %Array_TypeNode____sl__.exit199
  %memberidx4.i188.phi.trans.insert = getelementptr inbounds %Array_TypeNode_, ptr %66, i64 0, i32 1
  %.pre244 = load ptr, ptr %memberidx4.i188.phi.trans.insert, align 8
  br label %Array_TypeNode____sl__.exit190

if.entry.i187:                                    ; preds = %Array_TypeNode____sl__.exit199
  %70 = shl nuw i64 %69, 1
  store i64 %70, ptr %memberidx1.i183, align 4
  %memberidx2.i.i186 = getelementptr inbounds %Array_TypeNode_, ptr %66, i64 0, i32 1
  %71 = load ptr, ptr %memberidx2.i.i186, align 8
  %72 = shl i64 %69, 4
  %73 = tail call ptr @realloc(ptr %71, i64 %72)
  store ptr %73, ptr %memberidx2.i.i186, align 8
  %.pre243 = load i64, ptr %memberidx.i182, align 4
  br label %Array_TypeNode____sl__.exit190

Array_TypeNode____sl__.exit190:                   ; preds = %Array_TypeNode____sl__.exit199.Array_TypeNode____sl__.exit190_crit_edge, %if.entry.i187
  %74 = phi ptr [ %.pre244, %Array_TypeNode____sl__.exit199.Array_TypeNode____sl__.exit190_crit_edge ], [ %73, %if.entry.i187 ]
  %75 = phi i64 [ %68, %Array_TypeNode____sl__.exit199.Array_TypeNode____sl__.exit190_crit_edge ], [ %.pre243, %if.entry.i187 ]
  %76 = add nsw i64 %75, 1
  store i64 %76, ptr %memberidx.i182, align 4
  %ptridx.i189 = getelementptr inbounds ptr, ptr %74, i64 %75
  store ptr %67, ptr %ptridx.i189, align 8
  %77 = load ptr, ptr %memberidx, align 8
  %78 = load i64, ptr %77, align 4
  %79 = icmp eq i64 %78, 30
  br i1 %79, label %if.entry.i172, label %else.i178

if.entry.i172:                                    ; preds = %Array_TypeNode____sl__.exit190
  %80 = load i64, ptr %memberidx.i200, align 4
  %81 = load ptr, ptr %0, align 8
  %memberidx2.i.i171 = getelementptr inbounds %Array_Token_, ptr %81, i64 0, i32 2
  %82 = load i64, ptr %memberidx2.i.i171, align 4
  %83 = icmp slt i64 %80, %82
  br i1 %83, label %if.entry.i.i176, label %ifend

if.entry.i.i176:                                  ; preds = %if.entry.i172
  %84 = add nsw i64 %80, 1
  store i64 %84, ptr %memberidx.i200, align 4
  %memberidx.i.i.i174 = getelementptr inbounds %Array_Token_, ptr %81, i64 0, i32 1
  %85 = load ptr, ptr %memberidx.i.i.i174, align 8
  %ptridx.i.i.i175 = getelementptr inbounds ptr, ptr %85, i64 %84
  %86 = load ptr, ptr %ptridx.i.i.i175, align 8
  store ptr %86, ptr %memberidx, align 8
  br label %ifend

else.i178:                                        ; preds = %Array_TypeNode____sl__.exit190
  %87 = tail call ptr @malloc(i32 16)
  %memberidx35.i179 = getelementptr inbounds %Token, ptr %77, i64 0, i32 1
  %88 = load ptr, ptr %memberidx35.i179, align 8
  store i64 46, ptr %87, align 4
  %memberidx1.i82.i180 = getelementptr inbounds %Token, ptr %87, i64 0, i32 1
  store ptr %88, ptr %memberidx1.i82.i180, align 8
  br label %ifend

while.entry:                                      ; preds = %while.entry.preheader, %ifend28
  %89 = phi i64 [ %112, %ifend28 ], [ %6, %while.entry.preheader ]
  %type_node.1 = phi ptr [ %type_node.3, %ifend28 ], [ %type_node.0, %while.entry.preheader ]
  %90 = icmp eq i64 %89, 29
  br i1 %90, label %if.entry26, label %else27

while.end:                                        ; preds = %ifend28, %ifend
  %type_node.2 = phi ptr [ %type_node.0, %ifend ], [ %type_node.3, %ifend28 ]
  ret ptr %type_node.2

if.entry26:                                       ; preds = %while.entry
  %91 = load i64, ptr %memberidx.i, align 4
  %92 = load ptr, ptr %0, align 8
  %memberidx2.i162 = getelementptr inbounds %Array_Token_, ptr %92, i64 0, i32 2
  %93 = load i64, ptr %memberidx2.i162, align 4
  %94 = icmp slt i64 %91, %93
  br i1 %94, label %Parser_advance.exit167, label %else32

Parser_advance.exit167:                           ; preds = %if.entry26
  %95 = add nsw i64 %91, 1
  store i64 %95, ptr %memberidx.i, align 4
  %memberidx.i.i164 = getelementptr inbounds %Array_Token_, ptr %92, i64 0, i32 1
  %96 = load ptr, ptr %memberidx.i.i164, align 8
  %ptridx.i.i165 = getelementptr inbounds ptr, ptr %96, i64 %95
  %97 = load ptr, ptr %ptridx.i.i165, align 8
  store ptr %97, ptr %memberidx, align 8
  %.pre246 = load i64, ptr %97, align 4
  %98 = icmp eq i64 %.pre246, 30
  br i1 %98, label %if.entry31, label %else32

else27:                                           ; preds = %while.entry
  %99 = tail call ptr @malloc(i32 24)
  %100 = load ptr, ptr %type_node.1, align 8
  %101 = load ptr, ptr %memberidx, align 8
  %memberidx48 = getelementptr inbounds %Token, ptr %101, i64 0, i32 1
  %102 = load ptr, ptr %memberidx48, align 8
  %103 = tail call ptr @malloc(i32 32)
  %104 = load i64, ptr %100, align 4
  %memberidx1.i155 = getelementptr inbounds %FloRange, ptr %102, i64 0, i32 1
  %105 = load i64, ptr %memberidx1.i155, align 4
  %memberidx2.i156 = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 2
  %106 = load i64, ptr %memberidx2.i156, align 4
  %memberidx3.i157 = getelementptr inbounds %FloRange, ptr %102, i64 0, i32 3
  %107 = load i64, ptr %memberidx3.i157, align 4
  store i64 %104, ptr %103, align 4
  %memberidx1.i.i158 = getelementptr inbounds %FloRange, ptr %103, i64 0, i32 1
  store i64 %105, ptr %memberidx1.i.i158, align 4
  %memberidx2.i.i159 = getelementptr inbounds %FloRange, ptr %103, i64 0, i32 2
  store i64 %106, ptr %memberidx2.i.i159, align 4
  %memberidx3.i.i160 = getelementptr inbounds %FloRange, ptr %103, i64 0, i32 3
  store i64 %107, ptr %memberidx3.i.i160, align 4
  store ptr %103, ptr %99, align 8
  %memberidx.i.i153 = getelementptr inbounds %TypeNode, ptr %99, i64 0, i32 1
  store i64 13, ptr %memberidx.i.i153, align 4
  %memberidx.i154 = getelementptr inbounds %PointerTypeNode, ptr %99, i64 0, i32 2
  store ptr %type_node.1, ptr %memberidx.i154, align 8
  %108 = load ptr, ptr %memberidx, align 8
  %109 = load i64, ptr %108, align 4
  %110 = icmp eq i64 %109, 11
  br i1 %110, label %if.entry51, label %else52

ifend28:                                          ; preds = %if.entry.i, %else52, %else.i121, %if.entry.i.i119, %if.entry.i115, %Parser_eat.exit
  %type_node.3 = phi ptr [ %160, %Parser_eat.exit ], [ %type_node.4, %if.entry.i115 ], [ %type_node.4, %if.entry.i.i119 ], [ %type_node.4, %else.i121 ], [ %99, %else52 ], [ %99, %if.entry.i ]
  %111 = load ptr, ptr %memberidx, align 8
  %112 = load i64, ptr %111, align 4
  %113 = icmp eq i64 %112, 29
  %114 = icmp eq i64 %112, 11
  %115 = or i1 %113, %114
  %116 = icmp eq i64 %112, 4
  %117 = or i1 %116, %115
  %118 = load ptr, ptr %memberidx2.i220, align 8
  %memberidx3.i152 = getelementptr inbounds %Array_FloError_, ptr %118, i64 0, i32 2
  %119 = load i64, ptr %memberidx3.i152, align 4
  %120 = icmp eq i64 %119, 0
  %121 = and i1 %117, %120
  br i1 %121, label %while.entry, label %while.end

if.entry31:                                       ; preds = %Parser_advance.exit167
  %122 = tail call ptr @malloc(i32 32)
  %123 = tail call ptr @malloc(i32 24)
  %124 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %124, ptr noundef nonnull align 8 dereferenceable(5) @62, i64 5, i1 false)
  %125 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %125, align 8
  %memberidx.i.i147 = getelementptr inbounds %string, ptr %125, i64 0, i32 1
  store ptr %124, ptr %memberidx.i.i147, align 8
  %memberidx1.i.i148 = getelementptr inbounds %string, ptr %125, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i148, align 4
  %memberidx2.i.i149 = getelementptr inbounds %string, ptr %125, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i149, align 4
  %126 = load ptr, ptr %memberidx, align 8
  %memberidx36 = getelementptr inbounds %Token, ptr %126, i64 0, i32 1
  %127 = load ptr, ptr %memberidx36, align 8
  store i64 54, ptr %123, align 4
  %memberidx1.i.i145 = getelementptr inbounds %Token, ptr %123, i64 0, i32 1
  store ptr %127, ptr %memberidx1.i.i145, align 8
  %memberidx.i146 = getelementptr inbounds %IdentifierToken, ptr %123, i64 0, i32 2
  store ptr %125, ptr %memberidx.i146, align 8
  %128 = load ptr, ptr %memberidx36, align 8
  store ptr %128, ptr %122, align 8
  %memberidx.i.i139 = getelementptr inbounds %TypeNode, ptr %122, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i139, align 4
  %memberidx.i140 = getelementptr inbounds %RecordTypeNode, ptr %122, i64 0, i32 2
  store ptr %123, ptr %memberidx.i140, align 8
  %memberidx1.i141 = getelementptr inbounds %RecordTypeNode, ptr %122, i64 0, i32 3
  %129 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %129, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_TypeNode_, ptr %129, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i, align 4
  %memberidx1.i.i142 = getelementptr inbounds %Array_TypeNode_, ptr %129, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i142, align 4
  %memberidx2.i.i143 = getelementptr inbounds %Array_TypeNode_, ptr %129, i64 0, i32 1
  %130 = tail call ptr @malloc(i32 64)
  store ptr %130, ptr %memberidx2.i.i143, align 8
  store ptr %129, ptr %memberidx1.i141, align 8
  %131 = load i64, ptr %memberidx1.i.i142, align 4
  %.not.i = icmp sgt i64 %131, 0
  br i1 %.not.i, label %Array_TypeNode____sl__.exit, label %if.entry.i138

if.entry.i138:                                    ; preds = %if.entry31
  %132 = shl nuw i64 %131, 1
  store i64 %132, ptr %memberidx1.i.i142, align 4
  %133 = shl i64 %131, 4
  %134 = tail call ptr @realloc(ptr %130, i64 %133)
  store ptr %134, ptr %memberidx2.i.i143, align 8
  br label %Array_TypeNode____sl__.exit

Array_TypeNode____sl__.exit:                      ; preds = %if.entry31, %if.entry.i138
  %135 = phi ptr [ %130, %if.entry31 ], [ %134, %if.entry.i138 ]
  store i64 1, ptr %memberidx.i5.i, align 4
  store ptr %type_node.1, ptr %135, align 8
  %.pre247 = load ptr, ptr %122, align 8
  %.pre248 = load ptr, ptr %memberidx, align 8
  br label %ifend33

else32:                                           ; preds = %if.entry26, %Parser_advance.exit167
  %136 = tail call ptr @malloc(i32 32)
  %137 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %138 = load ptr, ptr %memberidx, align 8
  %memberidx41 = getelementptr inbounds %Token, ptr %138, i64 0, i32 1
  %139 = load ptr, ptr %memberidx41, align 8
  store ptr %139, ptr %136, align 8
  %memberidx.i.i131 = getelementptr inbounds %TypeNode, ptr %136, i64 0, i32 1
  store i64 14, ptr %memberidx.i.i131, align 4
  %memberidx.i132 = getelementptr inbounds %ArrayTypeNode, ptr %136, i64 0, i32 2
  store ptr %type_node.1, ptr %memberidx.i132, align 8
  %memberidx1.i133 = getelementptr inbounds %ArrayTypeNode, ptr %136, i64 0, i32 3
  store ptr %137, ptr %memberidx1.i133, align 8
  br label %ifend33

ifend33:                                          ; preds = %else32, %Array_TypeNode____sl__.exit
  %140 = phi ptr [ %.pre248, %Array_TypeNode____sl__.exit ], [ %138, %else32 ]
  %141 = phi ptr [ %.pre247, %Array_TypeNode____sl__.exit ], [ %139, %else32 ]
  %type_node.4 = phi ptr [ %122, %Array_TypeNode____sl__.exit ], [ %136, %else32 ]
  %memberidx45 = getelementptr inbounds %Token, ptr %140, i64 0, i32 1
  %142 = load ptr, ptr %memberidx45, align 8
  %143 = tail call ptr @malloc(i32 32)
  %144 = load i64, ptr %141, align 4
  %memberidx1.i125 = getelementptr inbounds %FloRange, ptr %142, i64 0, i32 1
  %145 = load i64, ptr %memberidx1.i125, align 4
  %memberidx2.i126 = getelementptr inbounds %FloRange, ptr %141, i64 0, i32 2
  %146 = load i64, ptr %memberidx2.i126, align 4
  %memberidx3.i127 = getelementptr inbounds %FloRange, ptr %142, i64 0, i32 3
  %147 = load i64, ptr %memberidx3.i127, align 4
  store i64 %144, ptr %143, align 4
  %memberidx1.i.i128 = getelementptr inbounds %FloRange, ptr %143, i64 0, i32 1
  store i64 %145, ptr %memberidx1.i.i128, align 4
  %memberidx2.i.i129 = getelementptr inbounds %FloRange, ptr %143, i64 0, i32 2
  store i64 %146, ptr %memberidx2.i.i129, align 4
  %memberidx3.i.i130 = getelementptr inbounds %FloRange, ptr %143, i64 0, i32 3
  store i64 %147, ptr %memberidx3.i.i130, align 4
  store ptr %143, ptr %type_node.4, align 8
  %148 = load ptr, ptr %memberidx, align 8
  %149 = load i64, ptr %148, align 4
  %150 = icmp eq i64 %149, 30
  br i1 %150, label %if.entry.i115, label %else.i121

if.entry.i115:                                    ; preds = %ifend33
  %151 = load i64, ptr %memberidx.i, align 4
  %152 = load ptr, ptr %0, align 8
  %memberidx2.i.i114 = getelementptr inbounds %Array_Token_, ptr %152, i64 0, i32 2
  %153 = load i64, ptr %memberidx2.i.i114, align 4
  %154 = icmp slt i64 %151, %153
  br i1 %154, label %if.entry.i.i119, label %ifend28

if.entry.i.i119:                                  ; preds = %if.entry.i115
  %155 = add nsw i64 %151, 1
  store i64 %155, ptr %memberidx.i, align 4
  %memberidx.i.i.i117 = getelementptr inbounds %Array_Token_, ptr %152, i64 0, i32 1
  %156 = load ptr, ptr %memberidx.i.i.i117, align 8
  %ptridx.i.i.i118 = getelementptr inbounds ptr, ptr %156, i64 %155
  %157 = load ptr, ptr %ptridx.i.i.i118, align 8
  store ptr %157, ptr %memberidx, align 8
  br label %ifend28

else.i121:                                        ; preds = %ifend33
  %158 = tail call ptr @malloc(i32 16)
  %memberidx35.i122 = getelementptr inbounds %Token, ptr %148, i64 0, i32 1
  %159 = load ptr, ptr %memberidx35.i122, align 8
  store i64 46, ptr %158, align 4
  %memberidx1.i82.i123 = getelementptr inbounds %Token, ptr %158, i64 0, i32 1
  store ptr %159, ptr %memberidx1.i82.i123, align 8
  br label %ifend28

if.entry51:                                       ; preds = %else27
  %160 = tail call ptr @malloc(i32 24)
  %161 = load ptr, ptr %99, align 8
  %162 = load ptr, ptr %memberidx, align 8
  %163 = load i64, ptr %162, align 4
  %164 = icmp eq i64 %163, 11
  br i1 %164, label %if.entry.i109, label %else.i

if.entry.i109:                                    ; preds = %if.entry51
  %165 = load i64, ptr %memberidx.i, align 4
  %166 = load ptr, ptr %0, align 8
  %memberidx2.i.i108 = getelementptr inbounds %Array_Token_, ptr %166, i64 0, i32 2
  %167 = load i64, ptr %memberidx2.i.i108, align 4
  %168 = icmp slt i64 %165, %167
  br i1 %168, label %if.entry.i.i, label %Parser_eat.exit

if.entry.i.i:                                     ; preds = %if.entry.i109
  %169 = add nsw i64 %165, 1
  store i64 %169, ptr %memberidx.i, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %166, i64 0, i32 1
  %170 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %170, i64 %169
  %171 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %171, ptr %memberidx, align 8
  br label %Parser_eat.exit

else.i:                                           ; preds = %if.entry51
  %172 = tail call ptr @malloc(i32 16)
  %memberidx35.i = getelementptr inbounds %Token, ptr %162, i64 0, i32 1
  %173 = load ptr, ptr %memberidx35.i, align 8
  store i64 46, ptr %172, align 4
  %memberidx1.i82.i = getelementptr inbounds %Token, ptr %172, i64 0, i32 1
  store ptr %173, ptr %memberidx1.i82.i, align 8
  br label %Parser_eat.exit

Parser_eat.exit:                                  ; preds = %if.entry.i109, %if.entry.i.i, %else.i
  %common.ret.op.i = phi ptr [ %172, %else.i ], [ %162, %if.entry.i.i ], [ %162, %if.entry.i109 ]
  %memberidx55 = getelementptr inbounds %Token, ptr %common.ret.op.i, i64 0, i32 1
  %174 = load ptr, ptr %memberidx55, align 8
  %175 = tail call ptr @malloc(i32 32)
  %176 = load i64, ptr %161, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %174, i64 0, i32 1
  %177 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i104 = getelementptr inbounds %FloRange, ptr %161, i64 0, i32 2
  %178 = load i64, ptr %memberidx2.i104, align 4
  %memberidx3.i105 = getelementptr inbounds %FloRange, ptr %174, i64 0, i32 3
  %179 = load i64, ptr %memberidx3.i105, align 4
  store i64 %176, ptr %175, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %175, i64 0, i32 1
  store i64 %177, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %175, i64 0, i32 2
  store i64 %178, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %175, i64 0, i32 3
  store i64 %179, ptr %memberidx3.i.i, align 4
  store ptr %175, ptr %160, align 8
  %memberidx.i.i102 = getelementptr inbounds %TypeNode, ptr %160, i64 0, i32 1
  store i64 13, ptr %memberidx.i.i102, align 4
  %memberidx.i103 = getelementptr inbounds %PointerTypeNode, ptr %160, i64 0, i32 2
  store ptr %99, ptr %memberidx.i103, align 8
  br label %ifend28

else52:                                           ; preds = %else27
  %180 = load i64, ptr %memberidx.i, align 4
  %181 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %181, i64 0, i32 2
  %182 = load i64, ptr %memberidx2.i, align 4
  %183 = icmp slt i64 %180, %182
  br i1 %183, label %if.entry.i, label %ifend28

if.entry.i:                                       ; preds = %else52
  %184 = add nsw i64 %180, 1
  store i64 %184, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %181, i64 0, i32 1
  %185 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %185, i64 %184
  %186 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %186, ptr %memberidx, align 8
  br label %ifend28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ExpressionNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ExpressionNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc void @Parser_parse_expression_list(ptr %0, ptr nocapture %1) unnamed_addr {
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, 33
  %memberidx2.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx3.i.i, align 4
  %8 = icmp eq i64 %7, 0
  %9 = and i1 %5, %8
  br i1 %9, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %2
  %memberidx.i11.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %10 = load ptr, ptr %0, align 8
  %memberidx2.i12.i = getelementptr inbounds %Array_Token_, ptr %10, i64 0, i32 2
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %10, i64 0, i32 1
  %11 = load i64, ptr %memberidx.i11.i, align 4
  %12 = load i64, ptr %memberidx2.i12.i, align 4
  %13 = icmp slt i64 %11, %12
  br i1 %13, label %while.entry.i, label %while.entry.i.us

while.entry.i.us:                                 ; preds = %while.entry.i.preheader, %while.entry.i.us
  br label %while.entry.i.us

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %14 = phi i64 [ %22, %Parser_advance.exit.i ], [ %11, %while.entry.i.preheader ]
  %15 = load i64, ptr %memberidx2.i12.i, align 4
  %16 = icmp slt i64 %14, %15
  br i1 %16, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %while.entry.i
  %17 = add nsw i64 %14, 1
  store i64 %17, ptr %memberidx.i11.i, align 4
  %18 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  %.pre = load i64, ptr %19, align 4
  %.pre96 = load i64, ptr %memberidx3.i.i, align 4
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %while.entry.i
  %20 = phi i64 [ %.pre96, %if.entry.i.i ], [ 0, %while.entry.i ]
  %21 = phi i64 [ %.pre, %if.entry.i.i ], [ 33, %while.entry.i ]
  %22 = phi i64 [ %17, %if.entry.i.i ], [ %14, %while.entry.i ]
  %23 = icmp eq i64 %21, 33
  %24 = icmp eq i64 %20, 0
  %25 = and i1 %23, %24
  br i1 %25, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %2
  %26 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %memberidx.i15 = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i15, align 4
  %memberidx1.i = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 3
  %28 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %27, %28
  br i1 %.not.i, label %Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge, label %if.entry.i

Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge: ; preds = %Parser_new_lines.exit
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 1
  %.pre98 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_ExpressionNode____sl__.exit

if.entry.i:                                       ; preds = %Parser_new_lines.exit
  %29 = shl nuw i64 %28, 1
  store i64 %29, ptr %memberidx1.i, align 4
  %memberidx2.i.i17 = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 1
  %30 = load ptr, ptr %memberidx2.i.i17, align 8
  %31 = shl i64 %28, 4
  %32 = tail call ptr @realloc(ptr %30, i64 %31)
  store ptr %32, ptr %memberidx2.i.i17, align 8
  %.pre97 = load i64, ptr %memberidx.i15, align 4
  br label %Array_ExpressionNode____sl__.exit

Array_ExpressionNode____sl__.exit:                ; preds = %Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge, %if.entry.i
  %33 = phi ptr [ %.pre98, %Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge ], [ %32, %if.entry.i ]
  %34 = phi i64 [ %27, %Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge ], [ %.pre97, %if.entry.i ]
  %35 = add nsw i64 %34, 1
  store i64 %35, ptr %memberidx.i15, align 4
  %memberidx4.i = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 1
  %ptridx.i = getelementptr inbounds ptr, ptr %33, i64 %34
  store ptr %26, ptr %ptridx.i, align 8
  %36 = load ptr, ptr %memberidx.i, align 8
  %37 = load i64, ptr %36, align 4
  %38 = icmp eq i64 %37, 33
  %39 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i21 = getelementptr inbounds %Array_FloError_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx3.i.i21, align 4
  %41 = icmp eq i64 %40, 0
  %42 = and i1 %38, %41
  br i1 %42, label %while.entry.i24.preheader, label %Parser_new_lines.exit33

while.entry.i24.preheader:                        ; preds = %Array_ExpressionNode____sl__.exit
  %memberidx.i11.i22 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %43 = load ptr, ptr %0, align 8
  %memberidx2.i12.i23 = getelementptr inbounds %Array_Token_, ptr %43, i64 0, i32 2
  %memberidx.i.i.i26 = getelementptr inbounds %Array_Token_, ptr %43, i64 0, i32 1
  %44 = load i64, ptr %memberidx.i11.i22, align 4
  %45 = load i64, ptr %memberidx2.i12.i23, align 4
  %46 = icmp slt i64 %44, %45
  br i1 %46, label %while.entry.i24, label %while.entry.i24.us

while.entry.i24.us:                               ; preds = %while.entry.i24.preheader, %while.entry.i24.us
  br label %while.entry.i24.us

while.entry.i24:                                  ; preds = %while.entry.i24.preheader, %Parser_advance.exit.i32
  %47 = phi i64 [ %55, %Parser_advance.exit.i32 ], [ 0, %while.entry.i24.preheader ]
  %48 = phi i64 [ %56, %Parser_advance.exit.i32 ], [ 33, %while.entry.i24.preheader ]
  %49 = phi i64 [ %59, %Parser_advance.exit.i32 ], [ %44, %while.entry.i24.preheader ]
  %50 = load i64, ptr %memberidx2.i12.i23, align 4
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %if.entry.i.i28, label %Parser_advance.exit.i32

if.entry.i.i28:                                   ; preds = %while.entry.i24
  %52 = add nsw i64 %49, 1
  store i64 %52, ptr %memberidx.i11.i22, align 4
  %53 = load ptr, ptr %memberidx.i.i.i26, align 8
  %ptridx.i.i.i27 = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i.i.i27, align 8
  store ptr %54, ptr %memberidx.i, align 8
  %.pre99 = load i64, ptr %54, align 4
  %.pre100 = load i64, ptr %memberidx3.i.i21, align 4
  br label %Parser_advance.exit.i32

Parser_advance.exit.i32:                          ; preds = %if.entry.i.i28, %while.entry.i24
  %55 = phi i64 [ %.pre100, %if.entry.i.i28 ], [ %47, %while.entry.i24 ]
  %56 = phi i64 [ %.pre99, %if.entry.i.i28 ], [ %48, %while.entry.i24 ]
  %57 = phi i64 [ %.pre100, %if.entry.i.i28 ], [ 0, %while.entry.i24 ]
  %58 = phi i64 [ %.pre99, %if.entry.i.i28 ], [ 33, %while.entry.i24 ]
  %59 = phi i64 [ %52, %if.entry.i.i28 ], [ %49, %while.entry.i24 ]
  %60 = icmp eq i64 %58, 33
  %61 = icmp eq i64 %57, 0
  %62 = and i1 %60, %61
  br i1 %62, label %while.entry.i24, label %Parser_new_lines.exit33

Parser_new_lines.exit33:                          ; preds = %Parser_advance.exit.i32, %Array_ExpressionNode____sl__.exit
  %63 = phi i64 [ %40, %Array_ExpressionNode____sl__.exit ], [ %55, %Parser_advance.exit.i32 ]
  %64 = phi i64 [ %37, %Array_ExpressionNode____sl__.exit ], [ %56, %Parser_advance.exit.i32 ]
  %65 = icmp eq i64 %64, 3
  %66 = icmp eq i64 %63, 0
  %67 = and i1 %65, %66
  br i1 %67, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_new_lines.exit33
  %memberidx.i35 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Array_ExpressionNode____sl__.exit64
  %68 = phi ptr [ %39, %while.entry.preheader ], [ %106, %Array_ExpressionNode____sl__.exit64 ]
  %69 = load i64, ptr %memberidx.i35, align 4
  %70 = load ptr, ptr %0, align 8
  %memberidx2.i36 = getelementptr inbounds %Array_Token_, ptr %70, i64 0, i32 2
  %71 = load i64, ptr %memberidx2.i36, align 4
  %72 = icmp slt i64 %69, %71
  br i1 %72, label %Parser_advance.exit, label %Parser_new_lines.exit55

Parser_advance.exit:                              ; preds = %while.entry
  %73 = add nsw i64 %69, 1
  store i64 %73, ptr %memberidx.i35, align 4
  %memberidx.i.i38 = getelementptr inbounds %Array_Token_, ptr %70, i64 0, i32 1
  %74 = load ptr, ptr %memberidx.i.i38, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %74, i64 %73
  %75 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %75, ptr %memberidx.i, align 8
  %.pre101 = load i64, ptr %75, align 4
  %memberidx3.i.i43.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %68, i64 0, i32 2
  %.pre102 = load i64, ptr %memberidx3.i.i43.phi.trans.insert, align 4
  %76 = icmp eq i64 %.pre101, 33
  %memberidx3.i.i43 = getelementptr inbounds %Array_FloError_, ptr %68, i64 0, i32 2
  %77 = icmp eq i64 %.pre102, 0
  %78 = and i1 %76, %77
  br i1 %78, label %while.entry.i46.preheader, label %Parser_new_lines.exit55

while.entry.i46.preheader:                        ; preds = %Parser_advance.exit
  %memberidx.i.i.i48 = getelementptr inbounds %Array_Token_, ptr %70, i64 0, i32 1
  %79 = load i64, ptr %memberidx2.i36, align 4
  %80 = icmp slt i64 %73, %79
  br i1 %80, label %while.entry.i46, label %while.entry.i46.us

while.entry.i46.us:                               ; preds = %while.entry.i46.preheader, %while.entry.i46.us
  br label %while.entry.i46.us

while.entry.i46:                                  ; preds = %while.entry.i46.preheader, %Parser_advance.exit.i54
  %81 = phi i64 [ %89, %Parser_advance.exit.i54 ], [ %73, %while.entry.i46.preheader ]
  %82 = load i64, ptr %memberidx2.i36, align 4
  %83 = icmp slt i64 %81, %82
  br i1 %83, label %if.entry.i.i50, label %Parser_advance.exit.i54

if.entry.i.i50:                                   ; preds = %while.entry.i46
  %84 = add nsw i64 %81, 1
  store i64 %84, ptr %memberidx.i35, align 4
  %85 = load ptr, ptr %memberidx.i.i.i48, align 8
  %ptridx.i.i.i49 = getelementptr inbounds ptr, ptr %85, i64 %84
  %86 = load ptr, ptr %ptridx.i.i.i49, align 8
  store ptr %86, ptr %memberidx.i, align 8
  %.pre104 = load i64, ptr %86, align 4
  %.pre105 = load i64, ptr %memberidx3.i.i43, align 4
  br label %Parser_advance.exit.i54

Parser_advance.exit.i54:                          ; preds = %if.entry.i.i50, %while.entry.i46
  %87 = phi i64 [ %.pre105, %if.entry.i.i50 ], [ 0, %while.entry.i46 ]
  %88 = phi i64 [ %.pre104, %if.entry.i.i50 ], [ 33, %while.entry.i46 ]
  %89 = phi i64 [ %84, %if.entry.i.i50 ], [ %81, %while.entry.i46 ]
  %90 = icmp eq i64 %88, 33
  %91 = icmp eq i64 %87, 0
  %92 = and i1 %90, %91
  br i1 %92, label %while.entry.i46, label %Parser_new_lines.exit55

Parser_new_lines.exit55:                          ; preds = %Parser_advance.exit.i54, %while.entry, %Parser_advance.exit
  %93 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %94 = load i64, ptr %memberidx.i15, align 4
  %95 = load i64, ptr %memberidx1.i, align 4
  %.not.i58 = icmp slt i64 %94, %95
  br i1 %.not.i58, label %Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge, label %if.entry.i61

Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge: ; preds = %Parser_new_lines.exit55
  %.pre107 = load ptr, ptr %memberidx4.i, align 8
  br label %Array_ExpressionNode____sl__.exit64

if.entry.i61:                                     ; preds = %Parser_new_lines.exit55
  %96 = shl nuw i64 %95, 1
  store i64 %96, ptr %memberidx1.i, align 4
  %97 = load ptr, ptr %memberidx4.i, align 8
  %98 = shl i64 %95, 4
  %99 = tail call ptr @realloc(ptr %97, i64 %98)
  store ptr %99, ptr %memberidx4.i, align 8
  %.pre106 = load i64, ptr %memberidx.i15, align 4
  br label %Array_ExpressionNode____sl__.exit64

Array_ExpressionNode____sl__.exit64:              ; preds = %Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge, %if.entry.i61
  %100 = phi ptr [ %.pre107, %Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge ], [ %99, %if.entry.i61 ]
  %101 = phi i64 [ %94, %Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge ], [ %.pre106, %if.entry.i61 ]
  %102 = add nsw i64 %101, 1
  store i64 %102, ptr %memberidx.i15, align 4
  %ptridx.i63 = getelementptr inbounds ptr, ptr %100, i64 %101
  store ptr %93, ptr %ptridx.i63, align 8
  %103 = load ptr, ptr %memberidx.i, align 8
  %104 = load i64, ptr %103, align 4
  %105 = icmp eq i64 %104, 3
  %106 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i67 = getelementptr inbounds %Array_FloError_, ptr %106, i64 0, i32 2
  %107 = load i64, ptr %memberidx3.i67, align 4
  %108 = icmp eq i64 %107, 0
  %109 = and i1 %105, %108
  br i1 %109, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_ExpressionNode____sl__.exit64, %Parser_new_lines.exit33
  %110 = phi i64 [ %63, %Parser_new_lines.exit33 ], [ %107, %Array_ExpressionNode____sl__.exit64 ]
  %111 = phi ptr [ %39, %Parser_new_lines.exit33 ], [ %106, %Array_ExpressionNode____sl__.exit64 ]
  %112 = phi i64 [ %64, %Parser_new_lines.exit33 ], [ %104, %Array_ExpressionNode____sl__.exit64 ]
  %113 = icmp eq i64 %112, 33
  %memberidx3.i.i71 = getelementptr inbounds %Array_FloError_, ptr %111, i64 0, i32 2
  %114 = icmp eq i64 %110, 0
  %115 = and i1 %113, %114
  br i1 %115, label %while.entry.i74.preheader, label %Parser_new_lines.exit83

while.entry.i74.preheader:                        ; preds = %while.end
  %memberidx.i11.i72 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %116 = load ptr, ptr %0, align 8
  %memberidx2.i12.i73 = getelementptr inbounds %Array_Token_, ptr %116, i64 0, i32 2
  %memberidx.i.i.i76 = getelementptr inbounds %Array_Token_, ptr %116, i64 0, i32 1
  %117 = load i64, ptr %memberidx.i11.i72, align 4
  %118 = load i64, ptr %memberidx2.i12.i73, align 4
  %119 = icmp slt i64 %117, %118
  br i1 %119, label %while.entry.i74, label %while.entry.i74.us

while.entry.i74.us:                               ; preds = %while.entry.i74.preheader, %while.entry.i74.us
  br label %while.entry.i74.us

while.entry.i74:                                  ; preds = %while.entry.i74.preheader, %Parser_advance.exit.i82
  %120 = phi i64 [ %128, %Parser_advance.exit.i82 ], [ %117, %while.entry.i74.preheader ]
  %121 = load i64, ptr %memberidx2.i12.i73, align 4
  %122 = icmp slt i64 %120, %121
  br i1 %122, label %if.entry.i.i78, label %Parser_advance.exit.i82

if.entry.i.i78:                                   ; preds = %while.entry.i74
  %123 = add nsw i64 %120, 1
  store i64 %123, ptr %memberidx.i11.i72, align 4
  %124 = load ptr, ptr %memberidx.i.i.i76, align 8
  %ptridx.i.i.i77 = getelementptr inbounds ptr, ptr %124, i64 %123
  %125 = load ptr, ptr %ptridx.i.i.i77, align 8
  store ptr %125, ptr %memberidx.i, align 8
  %.pre108 = load i64, ptr %125, align 4
  %.pre109 = load i64, ptr %memberidx3.i.i71, align 4
  br label %Parser_advance.exit.i82

Parser_advance.exit.i82:                          ; preds = %if.entry.i.i78, %while.entry.i74
  %126 = phi i64 [ %.pre109, %if.entry.i.i78 ], [ 0, %while.entry.i74 ]
  %127 = phi i64 [ %.pre108, %if.entry.i.i78 ], [ 33, %while.entry.i74 ]
  %128 = phi i64 [ %123, %if.entry.i.i78 ], [ %120, %while.entry.i74 ]
  %129 = icmp eq i64 %127, 33
  %130 = icmp eq i64 %126, 0
  %131 = and i1 %129, %130
  br i1 %131, label %while.entry.i74, label %Parser_new_lines.exit83

Parser_new_lines.exit83:                          ; preds = %Parser_advance.exit.i82, %while.end
  ret void
}

define internal fastcc ptr @Parser_parse_string(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %1 = load ptr, ptr %memberidx.i, align 8
  %2 = load i64, ptr %1, align 4
  %3 = icmp eq i64 %2, 34
  br i1 %3, label %if.entry.i, label %else.i

if.entry.i:                                       ; preds = %for.entry
  %memberidx.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %4 = load i64, ptr %memberidx.i.i, align 4
  %5 = load ptr, ptr %0, align 8
  %memberidx2.i.i = getelementptr inbounds %Array_Token_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx2.i.i, align 4
  %7 = icmp slt i64 %4, %6
  br i1 %7, label %if.entry.i.i, label %Parser_eat.exit

if.entry.i.i:                                     ; preds = %if.entry.i
  %8 = add nsw i64 %4, 1
  store i64 %8, ptr %memberidx.i.i, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %5, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %10, ptr %memberidx.i, align 8
  br label %Parser_eat.exit

else.i:                                           ; preds = %for.entry
  %11 = tail call ptr @malloc(i32 16)
  %memberidx35.i = getelementptr inbounds %Token, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %memberidx35.i, align 8
  store i64 46, ptr %11, align 4
  %memberidx1.i82.i = getelementptr inbounds %Token, ptr %11, i64 0, i32 1
  store ptr %12, ptr %memberidx1.i82.i, align 8
  br label %Parser_eat.exit

Parser_eat.exit:                                  ; preds = %if.entry.i, %if.entry.i.i, %else.i
  %common.ret.op.i = phi ptr [ %11, %else.i ], [ %1, %if.entry.i.i ], [ %1, %if.entry.i ]
  %13 = alloca %Parser, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %14 = load ptr, ptr %memberidx, align 8
  store ptr null, ptr %13, align 8
  %memberidx1.i = getelementptr inbounds %Parser, ptr %13, i64 0, i32 1
  store ptr %14, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Parser, ptr %13, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %15, align 8
  %memberidx.i18 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 2
  store i64 0, ptr %memberidx.i18, align 4
  %memberidx1.i19 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19, align 4
  %memberidx2.i20 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 1
  %16 = tail call ptr @malloc(i32 64)
  store ptr %16, ptr %memberidx2.i20, align 8
  store i64 0, ptr %memberidx.i18, align 4
  %memberidx3 = getelementptr inbounds %StrToken, ptr %common.ret.op.i, i64 0, i32 4
  %17 = load ptr, ptr %memberidx3, align 8
  %memberidx441 = getelementptr inbounds %Array_Array_Token__, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx441, align 4
  %19 = icmp sgt i64 %18, 0
  %20 = load ptr, ptr %memberidx.i, align 8
  %21 = load i64, ptr %20, align 4
  %22 = icmp ne i64 %21, 46
  %23 = load ptr, ptr %memberidx, align 8
  %memberidx3.i42 = getelementptr inbounds %Array_FloError_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx3.i42, align 4
  %25 = icmp eq i64 %24, 0
  %26 = and i1 %22, %25
  %27 = and i1 %19, %26
  br i1 %27, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %Parser_eat.exit
  %memberidx3.i26 = getelementptr inbounds %Parser, ptr %13, i64 0, i32 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ExpressionNode____sl__.exit
  %28 = phi ptr [ %17, %for.body.lr.ph ], [ %46, %Array_ExpressionNode____sl__.exit ]
  %i.043 = phi i64 [ 0, %for.body.lr.ph ], [ %45, %Array_ExpressionNode____sl__.exit ]
  %memberidx.i23 = getelementptr inbounds %Array_Array_Token__, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i23, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %29, i64 %i.043
  %30 = load ptr, ptr %ptridx.i, align 8
  store ptr %30, ptr %13, align 8
  store i64 -1, ptr %memberidx2.i, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i25, align 4
  %32 = icmp sgt i64 %31, -1
  br i1 %32, label %if.entry.i28, label %Parser_advance.exit

if.entry.i28:                                     ; preds = %for.body
  store i64 0, ptr %memberidx2.i, align 8
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i27, align 8
  %34 = load ptr, ptr %33, align 8
  store ptr %34, ptr %memberidx3.i26, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %for.body, %if.entry.i28
  %35 = call fastcc ptr @Parser_parse_expression(ptr nonnull %13)
  %36 = load i64, ptr %memberidx.i18, align 4
  %37 = load i64, ptr %memberidx1.i19, align 4
  %.not.i = icmp slt i64 %36, %37
  br i1 %.not.i, label %Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge, label %if.entry.i33

Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge: ; preds = %Parser_advance.exit
  %.pre44 = load ptr, ptr %memberidx2.i20, align 8
  br label %Array_ExpressionNode____sl__.exit

if.entry.i33:                                     ; preds = %Parser_advance.exit
  %38 = shl nuw i64 %37, 1
  store i64 %38, ptr %memberidx1.i19, align 4
  %39 = load ptr, ptr %memberidx2.i20, align 8
  %40 = shl i64 %37, 4
  %41 = call ptr @realloc(ptr %39, i64 %40)
  store ptr %41, ptr %memberidx2.i20, align 8
  %.pre = load i64, ptr %memberidx.i18, align 4
  br label %Array_ExpressionNode____sl__.exit

Array_ExpressionNode____sl__.exit:                ; preds = %Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge, %if.entry.i33
  %42 = phi ptr [ %.pre44, %Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge ], [ %41, %if.entry.i33 ]
  %43 = phi i64 [ %36, %Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge ], [ %.pre, %if.entry.i33 ]
  %44 = add nsw i64 %43, 1
  store i64 %44, ptr %memberidx.i18, align 4
  %ptridx.i34 = getelementptr inbounds ptr, ptr %42, i64 %43
  store ptr %35, ptr %ptridx.i34, align 8
  %45 = add nuw nsw i64 %i.043, 1
  %46 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %46, i64 0, i32 2
  %47 = load i64, ptr %memberidx4, align 4
  %48 = icmp slt i64 %45, %47
  %49 = load ptr, ptr %memberidx.i, align 8
  %50 = load i64, ptr %49, align 4
  %51 = icmp ne i64 %50, 46
  %52 = load ptr, ptr %memberidx, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx3.i, align 4
  %54 = icmp eq i64 %53, 0
  %55 = and i1 %51, %54
  %56 = and i1 %48, %55
  br i1 %56, label %for.body, label %for.end

for.end:                                          ; preds = %Array_ExpressionNode____sl__.exit, %Parser_eat.exit
  %57 = tail call ptr @malloc(i32 40)
  %memberidx.i35 = getelementptr inbounds %Token, ptr %common.ret.op.i, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i35, align 8
  store ptr %58, ptr %57, align 8
  %memberidx.i.i.i36 = getelementptr inbounds %StatementNode, ptr %57, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i36, align 4
  %memberidx.i.i37 = getelementptr inbounds %ExpressionNode, ptr %57, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i37, align 4
  %memberidx1.i38 = getelementptr inbounds %StringExpressionNode, ptr %57, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx1.i38, align 8
  %memberidx2.i39 = getelementptr inbounds %StringExpressionNode, ptr %57, i64 0, i32 4
  store ptr %15, ptr %memberidx2.i39, align 8
  ret ptr %57
}

define internal fastcc noalias ptr @Parser_parse_variable_declaration_statement(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 40)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i.i = getelementptr inbounds %StatementNode, ptr %2, i64 0, i32 1
  store i64 1, ptr %memberidx.i.i, align 4
  %memberidx.i = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 3
  %memberidx1.i = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 4
  %memberidx.i63 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx.i, i8 0, i64 16, i1 false)
  %5 = load i64, ptr %memberidx.i63, align 4
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i64 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i64, align 4
  %8 = icmp slt i64 %5, %7
  br i1 %8, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %1
  %9 = add nsw i64 %5, 1
  store i64 %9, ptr %memberidx.i63, align 4
  %memberidx.i.i66 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i66, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %11, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %1, %if.entry.i
  %memberidx2 = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 2
  %12 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %if.entry, label %ifend

if.entry:                                         ; preds = %Parser_advance.exit
  %16 = load i64, ptr %memberidx.i63, align 4
  %17 = load ptr, ptr %0, align 8
  %memberidx2.i68 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i68, align 4
  %19 = icmp slt i64 %16, %18
  br i1 %19, label %if.entry.i72, label %Parser_advance.exit73

if.entry.i72:                                     ; preds = %if.entry
  %20 = add nsw i64 %16, 1
  store i64 %20, ptr %memberidx.i63, align 4
  %memberidx.i.i70 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i.i70, align 8
  %ptridx.i.i71 = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i.i71, align 8
  store ptr %22, ptr %memberidx, align 8
  br label %Parser_advance.exit73

Parser_advance.exit73:                            ; preds = %if.entry, %if.entry.i72
  %23 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %23, ptr %memberidx.i, align 8
  %.pre = load ptr, ptr %memberidx, align 8
  %.pre104 = load i64, ptr %.pre, align 4
  br label %ifend

ifend:                                            ; preds = %Parser_advance.exit, %Parser_advance.exit73
  %24 = phi ptr [ null, %Parser_advance.exit ], [ %23, %Parser_advance.exit73 ]
  %25 = phi i64 [ %14, %Parser_advance.exit ], [ %.pre104, %Parser_advance.exit73 ]
  %26 = phi ptr [ %13, %Parser_advance.exit ], [ %.pre, %Parser_advance.exit73 ]
  %memberidx7 = getelementptr inbounds %Token, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx7, align 8
  %28 = icmp eq i64 %25, 38
  br i1 %28, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend
  %29 = load i64, ptr %memberidx.i63, align 4
  %30 = load ptr, ptr %0, align 8
  %memberidx2.i75 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i75, align 4
  %32 = icmp slt i64 %29, %31
  br i1 %32, label %if.entry.i79, label %Parser_advance.exit80

if.entry.i79:                                     ; preds = %if.entry10
  %33 = add nsw i64 %29, 1
  store i64 %33, ptr %memberidx.i63, align 4
  %memberidx.i.i77 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i77, align 8
  %ptridx.i.i78 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i.i78, align 8
  store ptr %35, ptr %memberidx, align 8
  br label %Parser_advance.exit80

Parser_advance.exit80:                            ; preds = %if.entry10, %if.entry.i79
  %36 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %36, ptr %memberidx1.i, align 8
  %37 = load ptr, ptr %36, align 8
  br label %ifend12

else11:                                           ; preds = %ifend
  %38 = icmp ne ptr %24, null
  %39 = icmp eq i64 %25, 25
  %40 = and i1 %39, %38
  br i1 %40, label %if.entry19, label %ifend12

ifend12:                                          ; preds = %ifend30, %else11, %Parser_advance.exit80
  %41 = phi ptr [ %27, %ifend30 ], [ %27, %else11 ], [ %37, %Parser_advance.exit80 ]
  %42 = tail call ptr @malloc(i32 32)
  %43 = load i64, ptr %4, align 4
  %memberidx1.i94 = getelementptr inbounds %FloRange, ptr %41, i64 0, i32 1
  %44 = load i64, ptr %memberidx1.i94, align 4
  %memberidx2.i95 = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %45 = load i64, ptr %memberidx2.i95, align 4
  %memberidx3.i96 = getelementptr inbounds %FloRange, ptr %41, i64 0, i32 3
  %46 = load i64, ptr %memberidx3.i96, align 4
  store i64 %43, ptr %42, align 4
  %memberidx1.i.i97 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 1
  store i64 %44, ptr %memberidx1.i.i97, align 4
  %memberidx2.i.i98 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 2
  store i64 %45, ptr %memberidx2.i.i98, align 4
  %memberidx3.i.i99 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 3
  store i64 %46, ptr %memberidx3.i.i99, align 4
  store ptr %42, ptr %2, align 8
  ret ptr %2

if.entry19:                                       ; preds = %else11
  %47 = tail call ptr @malloc(i32 41)
  %48 = load ptr, ptr %24, align 8
  %memberidx.i88 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 3
  store ptr %24, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 4
  store i1 true, ptr %memberidx1.i89, align 1
  store ptr %48, ptr %47, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %47, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i90 = getelementptr inbounds %ExpressionNode, ptr %47, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 5
  %49 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %49, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i.i92 = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i92, align 4
  %memberidx2.i.i93 = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 1
  %50 = tail call ptr @malloc(i32 64)
  store ptr %50, ptr %memberidx2.i.i93, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %49, ptr %memberidx2.i91, align 8
  store i1 false, ptr %memberidx1.i89, align 1
  %51 = load i64, ptr %memberidx.i63, align 4
  %52 = load ptr, ptr %0, align 8
  %memberidx2.i82 = getelementptr inbounds %Array_Token_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx2.i82, align 4
  %54 = icmp slt i64 %51, %53
  br i1 %54, label %if.entry.i86, label %if.entry19.Parser_advance.exit87_crit_edge

if.entry19.Parser_advance.exit87_crit_edge:       ; preds = %if.entry19
  %.pre105 = load ptr, ptr %memberidx, align 8
  br label %Parser_advance.exit87

if.entry.i86:                                     ; preds = %if.entry19
  %55 = add nsw i64 %51, 1
  store i64 %55, ptr %memberidx.i63, align 4
  %memberidx.i.i84 = getelementptr inbounds %Array_Token_, ptr %52, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i84, align 8
  %ptridx.i.i85 = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i.i85, align 8
  store ptr %57, ptr %memberidx, align 8
  br label %Parser_advance.exit87

Parser_advance.exit87:                            ; preds = %if.entry19.Parser_advance.exit87_crit_edge, %if.entry.i86
  %58 = phi ptr [ %.pre105, %if.entry19.Parser_advance.exit87_crit_edge ], [ %57, %if.entry.i86 ]
  %59 = load i64, ptr %58, align 4
  %.not = icmp eq i64 %59, 26
  br i1 %.not, label %ifend30, label %if.entry28

if.entry28:                                       ; preds = %Parser_advance.exit87
  tail call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %49)
  br label %ifend30

ifend30:                                          ; preds = %Parser_advance.exit87, %if.entry28
  %60 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  %memberidx34 = getelementptr inbounds %Token, ptr %60, i64 0, i32 1
  %61 = load ptr, ptr %memberidx34, align 8
  %62 = tail call ptr @malloc(i32 32)
  %63 = load i64, ptr %48, align 4
  %memberidx1.i62 = getelementptr inbounds %FloRange, ptr %61, i64 0, i32 1
  %64 = load i64, ptr %memberidx1.i62, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %48, i64 0, i32 2
  %65 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %61, i64 0, i32 3
  %66 = load i64, ptr %memberidx3.i, align 4
  store i64 %63, ptr %62, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %62, i64 0, i32 1
  store i64 %64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %62, i64 0, i32 2
  store i64 %65, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %62, i64 0, i32 3
  store i64 %66, ptr %memberidx3.i.i, align 4
  store ptr %62, ptr %47, align 8
  store ptr %47, ptr %memberidx1.i, align 8
  br label %ifend12
}

define internal fastcc ptr @Parser_parse_statement(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load i64, ptr %2, align 4
  switch i64 %4, label %ifend38 [
    i64 57, label %if.entry
    i64 60, label %if.entry6
    i64 59, label %if.entry11
    i64 64, label %if.entry16
    i64 56, label %if.entry21
    i64 55, label %if.entry26
    i64 63, label %if.entry31
    i64 62, label %if.entry36
  ]

common.ret:                                       ; preds = %switch.early.test, %switch.early.test, %switch.early.test, %Parser_advance.exit.i, %if.entry.i, %if.entry28.i, %ifend.i, %Parser_advance.exit38.i, %Parser_new_lines.exit.i, %Parser_advance.exit67, %Parser_advance.exit, %if.entry26, %if.entry21, %Parser_parse_while_statement.exit, %ifend38
  %common.ret.op = phi ptr [ %191, %ifend38 ], [ %58, %Parser_parse_while_statement.exit ], [ %173, %if.entry21 ], [ %174, %if.entry26 ], [ %182, %Parser_advance.exit ], [ %190, %Parser_advance.exit67 ], [ %5, %Parser_new_lines.exit.i ], [ %5, %Parser_advance.exit38.i ], [ %76, %ifend.i ], [ %76, %if.entry28.i ], [ %151, %switch.early.test ], [ %151, %if.entry.i ], [ %151, %Parser_advance.exit.i ], [ %151, %switch.early.test ], [ %151, %switch.early.test ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %5 = tail call ptr @malloc(i32 40)
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1.i98 = getelementptr inbounds %Token, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx1.i98, align 8
  store ptr %7, ptr %5, align 8
  %memberidx.i.i.i99 = getelementptr inbounds %StatementNode, ptr %5, i64 0, i32 1
  store i64 0, ptr %memberidx.i.i.i99, align 4
  %memberidx.i.i100 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 4
  store ptr null, ptr %memberidx.i.i100, align 8
  %memberidx.i24.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %8 = load i64, ptr %memberidx.i24.i, align 4
  %9 = load ptr, ptr %0, align 8
  %memberidx2.i.i101 = getelementptr inbounds %Array_Token_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx2.i.i101, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %if.entry.i.i104, label %Parser_advance.exit.i111

if.entry.i.i104:                                  ; preds = %if.entry
  %12 = add nsw i64 %8, 1
  store i64 %12, ptr %memberidx.i24.i, align 4
  %memberidx.i.i25.i = getelementptr inbounds %Array_Token_, ptr %9, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i25.i, align 8
  %ptridx.i.i.i103 = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i.i.i103, align 8
  store ptr %14, ptr %memberidx, align 8
  br label %Parser_advance.exit.i111

Parser_advance.exit.i111:                         ; preds = %if.entry.i.i104, %if.entry
  %memberidx2.i105 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 2
  %15 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %15, ptr %memberidx2.i105, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = tail call ptr @malloc(i32 32)
  %18 = load i64, ptr %7, align 4
  %memberidx1.i.i106 = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 1
  %19 = load i64, ptr %memberidx1.i.i106, align 4
  %memberidx2.i26.i = getelementptr inbounds %FloRange, ptr %7, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i26.i, align 4
  %memberidx3.i27.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 3
  %21 = load i64, ptr %memberidx3.i27.i, align 4
  store i64 %18, ptr %17, align 4
  %memberidx1.i.i.i107 = getelementptr inbounds %FloRange, ptr %17, i64 0, i32 1
  store i64 %19, ptr %memberidx1.i.i.i107, align 4
  %memberidx2.i.i.i108 = getelementptr inbounds %FloRange, ptr %17, i64 0, i32 2
  store i64 %20, ptr %memberidx2.i.i.i108, align 4
  %memberidx3.i.i.i109 = getelementptr inbounds %FloRange, ptr %17, i64 0, i32 3
  store i64 %21, ptr %memberidx3.i.i.i109, align 4
  store ptr %17, ptr %5, align 8
  %memberidx7.i110 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 3
  %22 = tail call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %22, ptr %memberidx7.i110, align 8
  %23 = load ptr, ptr %memberidx, align 8
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 33
  %memberidx2.i.i30.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i.i30.i, align 8
  %memberidx3.i.i31.i = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx3.i.i31.i, align 4
  %28 = icmp eq i64 %27, 0
  %29 = and i1 %25, %28
  br i1 %29, label %while.entry.i.i.preheader, label %Parser_new_lines.exit.i

while.entry.i.i.preheader:                        ; preds = %Parser_advance.exit.i111
  %30 = load ptr, ptr %0, align 8
  %memberidx2.i12.i.i = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 2
  %memberidx.i.i.i.i112 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 1
  %31 = load i64, ptr %memberidx.i24.i, align 4
  %32 = load i64, ptr %memberidx2.i12.i.i, align 4
  %33 = icmp slt i64 %31, %32
  br i1 %33, label %while.entry.i.i, label %while.entry.i.i.us

while.entry.i.i.us:                               ; preds = %while.entry.i.i.preheader, %while.entry.i.i.us
  br label %while.entry.i.i.us

while.entry.i.i:                                  ; preds = %while.entry.i.i.preheader, %Parser_advance.exit.i.i115
  %34 = phi i64 [ %41, %Parser_advance.exit.i.i115 ], [ 33, %while.entry.i.i.preheader ]
  %35 = phi i64 [ %44, %Parser_advance.exit.i.i115 ], [ %31, %while.entry.i.i.preheader ]
  %36 = load i64, ptr %memberidx2.i12.i.i, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %if.entry.i.i.i114, label %Parser_advance.exit.i.i115

if.entry.i.i.i114:                                ; preds = %while.entry.i.i
  %38 = add nsw i64 %35, 1
  store i64 %38, ptr %memberidx.i24.i, align 4
  %39 = load ptr, ptr %memberidx.i.i.i.i112, align 8
  %ptridx.i.i.i.i113 = getelementptr inbounds ptr, ptr %39, i64 %38
  %40 = load ptr, ptr %ptridx.i.i.i.i113, align 8
  store ptr %40, ptr %memberidx, align 8
  %.pre139 = load i64, ptr %40, align 4
  %.pre140 = load i64, ptr %memberidx3.i.i31.i, align 4
  br label %Parser_advance.exit.i.i115

Parser_advance.exit.i.i115:                       ; preds = %if.entry.i.i.i114, %while.entry.i.i
  %41 = phi i64 [ %.pre139, %if.entry.i.i.i114 ], [ %34, %while.entry.i.i ]
  %42 = phi i64 [ %.pre140, %if.entry.i.i.i114 ], [ 0, %while.entry.i.i ]
  %43 = phi i64 [ %.pre139, %if.entry.i.i.i114 ], [ 33, %while.entry.i.i ]
  %44 = phi i64 [ %38, %if.entry.i.i.i114 ], [ %35, %while.entry.i.i ]
  %45 = icmp eq i64 %43, 33
  %46 = icmp eq i64 %42, 0
  %47 = and i1 %45, %46
  br i1 %47, label %while.entry.i.i, label %Parser_new_lines.exit.i

Parser_new_lines.exit.i:                          ; preds = %Parser_advance.exit.i.i115, %Parser_advance.exit.i111
  %48 = phi i64 [ %24, %Parser_advance.exit.i111 ], [ %41, %Parser_advance.exit.i.i115 ]
  %49 = icmp eq i64 %48, 58
  br i1 %49, label %if.entry.i116, label %common.ret

if.entry.i116:                                    ; preds = %Parser_new_lines.exit.i
  %50 = load i64, ptr %memberidx.i24.i, align 4
  %51 = load ptr, ptr %0, align 8
  %memberidx2.i33.i = getelementptr inbounds %Array_Token_, ptr %51, i64 0, i32 2
  %52 = load i64, ptr %memberidx2.i33.i, align 4
  %53 = icmp slt i64 %50, %52
  br i1 %53, label %if.entry.i37.i, label %Parser_advance.exit38.i

if.entry.i37.i:                                   ; preds = %if.entry.i116
  %54 = add nsw i64 %50, 1
  store i64 %54, ptr %memberidx.i24.i, align 4
  %memberidx.i.i35.i = getelementptr inbounds %Array_Token_, ptr %51, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i.i35.i, align 8
  %ptridx.i.i36.i = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i.i36.i, align 8
  store ptr %56, ptr %memberidx, align 8
  br label %Parser_advance.exit38.i

Parser_advance.exit38.i:                          ; preds = %if.entry.i37.i, %if.entry.i116
  %57 = tail call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %57, ptr %memberidx.i.i100, align 8
  br label %common.ret

if.entry6:                                        ; preds = %1
  %58 = tail call ptr @malloc(i32 32)
  %59 = load ptr, ptr %memberidx, align 8
  %memberidx1.i84 = getelementptr inbounds %Token, ptr %59, i64 0, i32 1
  %60 = load ptr, ptr %memberidx1.i84, align 8
  store ptr %60, ptr %58, align 8
  %memberidx.i.i.i85 = getelementptr inbounds %StatementNode, ptr %58, i64 0, i32 1
  store i64 4, ptr %memberidx.i.i.i85, align 4
  %memberidx.i.i86 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %61 = load i64, ptr %memberidx.i.i86, align 4
  %62 = load ptr, ptr %0, align 8
  %memberidx2.i.i87 = getelementptr inbounds %Array_Token_, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx2.i.i87, align 4
  %64 = icmp slt i64 %61, %63
  br i1 %64, label %if.entry.i.i90, label %Parser_parse_while_statement.exit

if.entry.i.i90:                                   ; preds = %if.entry6
  %65 = add nsw i64 %61, 1
  store i64 %65, ptr %memberidx.i.i86, align 4
  %memberidx.i.i16.i = getelementptr inbounds %Array_Token_, ptr %62, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i16.i, align 8
  %ptridx.i.i.i89 = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx.i.i.i89, align 8
  store ptr %67, ptr %memberidx, align 8
  br label %Parser_parse_while_statement.exit

Parser_parse_while_statement.exit:                ; preds = %if.entry6, %if.entry.i.i90
  %memberidx2.i91 = getelementptr inbounds %WhileStatementNode, ptr %58, i64 0, i32 2
  %68 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %68, ptr %memberidx2.i91, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = tail call ptr @malloc(i32 32)
  %71 = load i64, ptr %60, align 4
  %memberidx1.i.i92 = getelementptr inbounds %FloRange, ptr %69, i64 0, i32 1
  %72 = load i64, ptr %memberidx1.i.i92, align 4
  %memberidx2.i17.i = getelementptr inbounds %FloRange, ptr %60, i64 0, i32 2
  %73 = load i64, ptr %memberidx2.i17.i, align 4
  %memberidx3.i18.i = getelementptr inbounds %FloRange, ptr %69, i64 0, i32 3
  %74 = load i64, ptr %memberidx3.i18.i, align 4
  store i64 %71, ptr %70, align 4
  %memberidx1.i.i.i93 = getelementptr inbounds %FloRange, ptr %70, i64 0, i32 1
  store i64 %72, ptr %memberidx1.i.i.i93, align 4
  %memberidx2.i.i.i94 = getelementptr inbounds %FloRange, ptr %70, i64 0, i32 2
  store i64 %73, ptr %memberidx2.i.i.i94, align 4
  %memberidx3.i.i.i95 = getelementptr inbounds %FloRange, ptr %70, i64 0, i32 3
  store i64 %74, ptr %memberidx3.i.i.i95, align 4
  store ptr %70, ptr %58, align 8
  %memberidx7.i = getelementptr inbounds %WhileStatementNode, ptr %58, i64 0, i32 3
  %75 = tail call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %75, ptr %memberidx7.i, align 8
  br label %common.ret

if.entry11:                                       ; preds = %1
  %76 = tail call ptr @malloc(i32 72)
  %77 = load ptr, ptr %memberidx, align 8
  %memberidx1.i70 = getelementptr inbounds %Token, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx1.i70, align 8
  %memberidx.i.i71 = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 2
  %memberidx1.i.i72 = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 3
  %memberidx2.i.i73 = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 4
  %memberidx3.i.i74 = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 6
  store i64 0, ptr %memberidx3.i.i74, align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %memberidx.i.i71, i8 0, i64 24, i1 false)
  store ptr %78, ptr %76, align 8
  %memberidx.i.i.i75 = getelementptr inbounds %StatementNode, ptr %76, i64 0, i32 1
  store i64 3, ptr %memberidx.i.i.i75, align 4
  %memberidx.i60.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %79 = load i64, ptr %memberidx.i60.i, align 4
  %80 = load ptr, ptr %0, align 8
  %memberidx2.i61.i = getelementptr inbounds %Array_Token_, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx2.i61.i, align 4
  %82 = icmp slt i64 %79, %81
  br i1 %82, label %if.entry.i.i77, label %Parser_advance.exit.i78

if.entry.i.i77:                                   ; preds = %if.entry11
  %83 = add nsw i64 %79, 1
  store i64 %83, ptr %memberidx.i60.i, align 4
  %memberidx.i.i63.i = getelementptr inbounds %Array_Token_, ptr %80, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i.i63.i, align 8
  %ptridx.i.i.i76 = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx.i.i.i76, align 8
  store ptr %85, ptr %memberidx, align 8
  %.pre = load i64, ptr %memberidx2.i61.i, align 4
  br label %Parser_advance.exit.i78

Parser_advance.exit.i78:                          ; preds = %if.entry.i.i77, %if.entry11
  %86 = phi ptr [ %85, %if.entry.i.i77 ], [ %77, %if.entry11 ]
  %87 = phi i64 [ %.pre, %if.entry.i.i77 ], [ %81, %if.entry11 ]
  %88 = phi i64 [ %83, %if.entry.i.i77 ], [ %79, %if.entry11 ]
  %89 = add nsw i64 %88, 1
  %90 = icmp slt i64 %89, %87
  %91 = add i64 %87, -1
  %.sink142 = select i1 %90, i64 %89, i64 %91
  %memberidx.i12.i.i = getelementptr inbounds %Array_Token_, ptr %80, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %92, i64 %.sink142
  %common.ret.op.i.i = load ptr, ptr %ptridx.i13.i.i, align 8
  %93 = load i64, ptr %common.ret.op.i.i, align 4
  %.not.i = icmp eq i64 %93, 69
  br i1 %.not.i, label %else.i, label %if.entry.i79

if.entry.i79:                                     ; preds = %Parser_advance.exit.i78
  %94 = load i64, ptr %86, align 4
  %.not57.i = icmp eq i64 %94, 2
  br i1 %.not57.i, label %if.entry.i85.i, label %ifend7.i

else.i:                                           ; preds = %Parser_advance.exit.i78
  store i64 1, ptr %memberidx3.i.i74, align 4
  %memberidx22.i = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 7
  %95 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  store ptr %95, ptr %memberidx22.i, align 8
  %96 = load ptr, ptr %memberidx, align 8
  %97 = load i64, ptr %96, align 4
  %98 = icmp eq i64 %97, 69
  br i1 %98, label %if.entry.i72.i, label %else.i.i

if.entry.i72.i:                                   ; preds = %else.i
  %99 = load i64, ptr %memberidx.i60.i, align 4
  %100 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i80 = getelementptr inbounds %Array_Token_, ptr %100, i64 0, i32 2
  %101 = load i64, ptr %memberidx2.i.i.i80, align 4
  %102 = icmp slt i64 %99, %101
  br i1 %102, label %if.entry.i.i.i, label %Parser_eat.exit.i

if.entry.i.i.i:                                   ; preds = %if.entry.i72.i
  %103 = add nsw i64 %99, 1
  store i64 %103, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %100, i64 0, i32 1
  %104 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %104, i64 %103
  %105 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %105, ptr %memberidx, align 8
  br label %Parser_eat.exit.i

else.i.i:                                         ; preds = %else.i
  %106 = tail call ptr @malloc(i32 16)
  %memberidx35.i.i = getelementptr inbounds %Token, ptr %96, i64 0, i32 1
  %107 = load ptr, ptr %memberidx35.i.i, align 8
  store i64 46, ptr %106, align 4
  %memberidx1.i82.i.i = getelementptr inbounds %Token, ptr %106, i64 0, i32 1
  store ptr %107, ptr %memberidx1.i82.i.i, align 8
  br label %Parser_eat.exit.i

Parser_eat.exit.i:                                ; preds = %if.entry.i72.i, %if.entry.i.i.i, %else.i.i
  %memberidx23.i = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 5
  %108 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %108, ptr %memberidx23.i, align 8
  br label %ifend.i

ifend.i:                                          ; preds = %if.entry17.i, %Parser_eat.exit108.i, %Parser_eat.exit.i
  %109 = load ptr, ptr %memberidx, align 8
  %memberidx27.i = getelementptr inbounds %Token, ptr %109, i64 0, i32 1
  %110 = load ptr, ptr %memberidx27.i, align 8
  %111 = tail call ptr @malloc(i32 32)
  %112 = load i64, ptr %78, align 4
  %memberidx1.i73.i = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 1
  %113 = load i64, ptr %memberidx1.i73.i, align 4
  %memberidx2.i74.i = getelementptr inbounds %FloRange, ptr %78, i64 0, i32 2
  %114 = load i64, ptr %memberidx2.i74.i, align 4
  %memberidx3.i75.i = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 3
  %115 = load i64, ptr %memberidx3.i75.i, align 4
  store i64 %112, ptr %111, align 4
  %memberidx1.i.i.i82 = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 1
  store i64 %113, ptr %memberidx1.i.i.i82, align 4
  %memberidx2.i.i76.i = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 2
  store i64 %114, ptr %memberidx2.i.i76.i, align 4
  %memberidx3.i.i77.i = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 3
  store i64 %115, ptr %memberidx3.i.i77.i, align 4
  store ptr %111, ptr %76, align 8
  %116 = load ptr, ptr %memberidx, align 8
  %117 = load i64, ptr %116, align 4
  %118 = icmp ne i64 %117, 46
  %memberidx2.i79.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i79.i, align 8
  %memberidx3.i80.i = getelementptr inbounds %Array_FloError_, ptr %119, i64 0, i32 2
  %120 = load i64, ptr %memberidx3.i80.i, align 4
  %121 = icmp eq i64 %120, 0
  %122 = and i1 %118, %121
  br i1 %122, label %if.entry28.i, label %common.ret

ifend7.i:                                         ; preds = %if.entry.i79
  %123 = tail call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  store ptr %123, ptr %memberidx.i.i71, align 8
  %.pre133 = load ptr, ptr %memberidx, align 8
  %.pre134 = load i64, ptr %.pre133, align 4
  %phi.cmp = icmp eq i64 %.pre134, 2
  br i1 %phi.cmp, label %if.entry.i85.i, label %else.i91.i

if.entry.i85.i:                                   ; preds = %if.entry.i79, %ifend7.i
  %124 = phi ptr [ %.pre133, %ifend7.i ], [ %86, %if.entry.i79 ]
  %125 = load i64, ptr %memberidx.i60.i, align 4
  %126 = load ptr, ptr %0, align 8
  %memberidx2.i.i84.i = getelementptr inbounds %Array_Token_, ptr %126, i64 0, i32 2
  %127 = load i64, ptr %memberidx2.i.i84.i, align 4
  %128 = icmp slt i64 %125, %127
  br i1 %128, label %if.entry.i.i89.i, label %Parser_eat.exit94.i

if.entry.i.i89.i:                                 ; preds = %if.entry.i85.i
  %129 = add nsw i64 %125, 1
  store i64 %129, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i87.i = getelementptr inbounds %Array_Token_, ptr %126, i64 0, i32 1
  %130 = load ptr, ptr %memberidx.i.i.i87.i, align 8
  %ptridx.i.i.i88.i = getelementptr inbounds ptr, ptr %130, i64 %129
  %131 = load ptr, ptr %ptridx.i.i.i88.i, align 8
  store ptr %131, ptr %memberidx, align 8
  br label %Parser_eat.exit94.i

else.i91.i:                                       ; preds = %ifend7.i
  %132 = tail call ptr @malloc(i32 16)
  %memberidx35.i92.i = getelementptr inbounds %Token, ptr %.pre133, i64 0, i32 1
  %133 = load ptr, ptr %memberidx35.i92.i, align 8
  store i64 46, ptr %132, align 4
  %memberidx1.i82.i93.i = getelementptr inbounds %Token, ptr %132, i64 0, i32 1
  store ptr %133, ptr %memberidx1.i82.i93.i, align 8
  %.pre135 = load ptr, ptr %memberidx, align 8
  br label %Parser_eat.exit94.i

Parser_eat.exit94.i:                              ; preds = %if.entry.i85.i, %if.entry.i.i89.i, %else.i91.i
  %134 = phi ptr [ %124, %if.entry.i85.i ], [ %131, %if.entry.i.i89.i ], [ %.pre135, %else.i91.i ]
  %135 = load i64, ptr %134, align 4
  %.not58.i = icmp eq i64 %135, 2
  br i1 %.not58.i, label %if.entry.i99.i, label %ifend13.i

ifend13.i:                                        ; preds = %Parser_eat.exit94.i
  %136 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %136, ptr %memberidx1.i.i72, align 8
  %.pre136 = load ptr, ptr %memberidx, align 8
  %.pre137 = load i64, ptr %.pre136, align 4
  %phi.cmp141 = icmp eq i64 %.pre137, 2
  br i1 %phi.cmp141, label %if.entry.i99.i, label %else.i105.i

if.entry.i99.i:                                   ; preds = %Parser_eat.exit94.i, %ifend13.i
  %137 = phi ptr [ %.pre136, %ifend13.i ], [ %134, %Parser_eat.exit94.i ]
  %138 = load i64, ptr %memberidx.i60.i, align 4
  %139 = load ptr, ptr %0, align 8
  %memberidx2.i.i98.i = getelementptr inbounds %Array_Token_, ptr %139, i64 0, i32 2
  %140 = load i64, ptr %memberidx2.i.i98.i, align 4
  %141 = icmp slt i64 %138, %140
  br i1 %141, label %if.entry.i.i103.i, label %Parser_eat.exit108.i

if.entry.i.i103.i:                                ; preds = %if.entry.i99.i
  %142 = add nsw i64 %138, 1
  store i64 %142, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i101.i = getelementptr inbounds %Array_Token_, ptr %139, i64 0, i32 1
  %143 = load ptr, ptr %memberidx.i.i.i101.i, align 8
  %ptridx.i.i.i102.i = getelementptr inbounds ptr, ptr %143, i64 %142
  %144 = load ptr, ptr %ptridx.i.i.i102.i, align 8
  store ptr %144, ptr %memberidx, align 8
  br label %Parser_eat.exit108.i

else.i105.i:                                      ; preds = %ifend13.i
  %145 = tail call ptr @malloc(i32 16)
  %memberidx35.i106.i = getelementptr inbounds %Token, ptr %.pre136, i64 0, i32 1
  %146 = load ptr, ptr %memberidx35.i106.i, align 8
  store i64 46, ptr %145, align 4
  %memberidx1.i82.i107.i = getelementptr inbounds %Token, ptr %145, i64 0, i32 1
  store ptr %146, ptr %memberidx1.i82.i107.i, align 8
  %.pre138 = load ptr, ptr %memberidx, align 8
  br label %Parser_eat.exit108.i

Parser_eat.exit108.i:                             ; preds = %if.entry.i99.i, %if.entry.i.i103.i, %else.i105.i
  %147 = phi ptr [ %137, %if.entry.i99.i ], [ %144, %if.entry.i.i103.i ], [ %.pre138, %else.i105.i ]
  %148 = load i64, ptr %147, align 4
  %.not59.i = icmp eq i64 %148, 27
  br i1 %.not59.i, label %ifend.i, label %if.entry17.i

if.entry17.i:                                     ; preds = %Parser_eat.exit108.i
  %149 = tail call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  store ptr %149, ptr %memberidx2.i.i73, align 8
  br label %ifend.i

if.entry28.i:                                     ; preds = %ifend.i
  %memberidx31.i = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 8
  %150 = tail call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %150, ptr %memberidx31.i, align 8
  br label %common.ret

if.entry16:                                       ; preds = %1
  %151 = tail call ptr @malloc(i32 24)
  %152 = load ptr, ptr %memberidx, align 8
  %memberidx1.i = getelementptr inbounds %Token, ptr %152, i64 0, i32 1
  %153 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %ReturnStatementNode, ptr %151, i64 0, i32 2
  store ptr null, ptr %memberidx.i.i, align 8
  store ptr %153, ptr %151, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %151, i64 0, i32 1
  store i64 7, ptr %memberidx.i.i.i, align 4
  %memberidx.i18.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %154 = load i64, ptr %memberidx.i18.i, align 4
  %155 = load ptr, ptr %0, align 8
  %memberidx2.i19.i = getelementptr inbounds %Array_Token_, ptr %155, i64 0, i32 2
  %156 = load i64, ptr %memberidx2.i19.i, align 4
  %157 = icmp slt i64 %154, %156
  br i1 %157, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %if.entry16
  %158 = add nsw i64 %154, 1
  store i64 %158, ptr %memberidx.i18.i, align 4
  %memberidx.i.i21.i = getelementptr inbounds %Array_Token_, ptr %155, i64 0, i32 1
  %159 = load ptr, ptr %memberidx.i.i21.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %159, i64 %158
  %160 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %160, ptr %memberidx, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %if.entry16
  %161 = phi ptr [ %160, %if.entry.i.i ], [ %152, %if.entry16 ]
  %memberidx2.i23.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %162 = load ptr, ptr %memberidx2.i23.i, align 8
  %memberidx3.i24.i = getelementptr inbounds %Array_FloError_, ptr %162, i64 0, i32 2
  %163 = load i64, ptr %memberidx3.i24.i, align 4
  %.fr = freeze i64 %163
  %164 = icmp eq i64 %.fr, 0
  br i1 %164, label %switch.early.test, label %common.ret

switch.early.test:                                ; preds = %Parser_advance.exit.i
  %165 = load i64, ptr %161, align 4
  switch i64 %165, label %if.entry.i [
    i64 46, label %common.ret
    i64 33, label %common.ret
    i64 28, label %common.ret
  ]

if.entry.i:                                       ; preds = %switch.early.test
  %166 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %167 = load ptr, ptr %166, align 8
  %168 = tail call ptr @malloc(i32 32)
  %169 = load i64, ptr %153, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %167, i64 0, i32 1
  %170 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %153, i64 0, i32 2
  %171 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %167, i64 0, i32 3
  %172 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %169, ptr %168, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %168, i64 0, i32 1
  store i64 %170, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %168, i64 0, i32 2
  store i64 %171, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %168, i64 0, i32 3
  store i64 %172, ptr %memberidx3.i.i.i, align 4
  store ptr %168, ptr %151, align 8
  store ptr %166, ptr %memberidx.i.i, align 8
  br label %common.ret

if.entry21:                                       ; preds = %1
  %173 = tail call fastcc ptr @Parser_parse_variable_declaration_statement(ptr nonnull %0)
  br label %common.ret

if.entry26:                                       ; preds = %1
  %174 = tail call fastcc ptr @Parser_parse_const_declaration_statement(ptr nonnull %0)
  br label %common.ret

if.entry31:                                       ; preds = %1
  %memberidx.i57 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %175 = load i64, ptr %memberidx.i57, align 4
  %176 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %176, i64 0, i32 2
  %177 = load i64, ptr %memberidx2.i, align 4
  %178 = icmp slt i64 %175, %177
  br i1 %178, label %if.entry.i59, label %Parser_advance.exit

if.entry.i59:                                     ; preds = %if.entry31
  %179 = add nsw i64 %175, 1
  store i64 %179, ptr %memberidx.i57, align 4
  %memberidx.i.i58 = getelementptr inbounds %Array_Token_, ptr %176, i64 0, i32 1
  %180 = load ptr, ptr %memberidx.i.i58, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %180, i64 %179
  %181 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %181, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry31, %if.entry.i59
  %182 = tail call ptr @malloc(i32 16)
  store ptr %3, ptr %182, align 8
  %memberidx.i60 = getelementptr inbounds %StatementNode, ptr %182, i64 0, i32 1
  store i64 5, ptr %memberidx.i60, align 4
  br label %common.ret

if.entry36:                                       ; preds = %1
  %memberidx.i61 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %183 = load i64, ptr %memberidx.i61, align 4
  %184 = load ptr, ptr %0, align 8
  %memberidx2.i62 = getelementptr inbounds %Array_Token_, ptr %184, i64 0, i32 2
  %185 = load i64, ptr %memberidx2.i62, align 4
  %186 = icmp slt i64 %183, %185
  br i1 %186, label %if.entry.i66, label %Parser_advance.exit67

if.entry.i66:                                     ; preds = %if.entry36
  %187 = add nsw i64 %183, 1
  store i64 %187, ptr %memberidx.i61, align 4
  %memberidx.i.i64 = getelementptr inbounds %Array_Token_, ptr %184, i64 0, i32 1
  %188 = load ptr, ptr %memberidx.i.i64, align 8
  %ptridx.i.i65 = getelementptr inbounds ptr, ptr %188, i64 %187
  %189 = load ptr, ptr %ptridx.i.i65, align 8
  store ptr %189, ptr %memberidx, align 8
  br label %Parser_advance.exit67

Parser_advance.exit67:                            ; preds = %if.entry36, %if.entry.i66
  %190 = tail call ptr @malloc(i32 16)
  store ptr %3, ptr %190, align 8
  %memberidx.i68 = getelementptr inbounds %StatementNode, ptr %190, i64 0, i32 1
  store i64 6, ptr %memberidx.i68, align 4
  br label %common.ret

ifend38:                                          ; preds = %1
  %191 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  br label %common.ret
}

define internal fastcc void @Parser_parse_args(ptr %0, ptr nocapture %1) unnamed_addr {
  %3 = tail call fastcc ptr @Parser_parse_arg(ptr %0)
  %memberidx.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 3
  %5 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %4, %5
  br i1 %.not.i, label %.Array_ArgNode____sl__.exit_crit_edge, label %if.entry.i

.Array_ArgNode____sl__.exit_crit_edge:            ; preds = %2
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %.pre24 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_ArgNode____sl__.exit

if.entry.i:                                       ; preds = %2
  %6 = shl nuw i64 %5, 1
  store i64 %6, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i.i, align 8
  %8 = shl i64 %5, 4
  %9 = tail call ptr @realloc(ptr %7, i64 %8)
  store ptr %9, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i, align 4
  br label %Array_ArgNode____sl__.exit

Array_ArgNode____sl__.exit:                       ; preds = %.Array_ArgNode____sl__.exit_crit_edge, %if.entry.i
  %10 = phi ptr [ %.pre24, %.Array_ArgNode____sl__.exit_crit_edge ], [ %9, %if.entry.i ]
  %11 = phi i64 [ %4, %.Array_ArgNode____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %12 = add nsw i64 %11, 1
  store i64 %12, ptr %memberidx.i, align 4
  %memberidx4.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %ptridx.i = getelementptr inbounds ptr, ptr %10, i64 %11
  store ptr %3, ptr %ptridx.i, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 3
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i, align 4
  %18 = icmp eq i64 %17, 0
  %19 = and i1 %15, %18
  br i1 %19, label %while.entry, label %while.end

while.entry:                                      ; preds = %Array_ArgNode____sl__.exit, %Array_ArgNode____sl__.exit23
  %20 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 3)
  %21 = tail call fastcc ptr @Parser_parse_arg(ptr nonnull %0)
  %22 = load i64, ptr %memberidx.i, align 4
  %23 = load i64, ptr %memberidx1.i, align 4
  %.not.i17 = icmp slt i64 %22, %23
  br i1 %.not.i17, label %while.entry.Array_ArgNode____sl__.exit23_crit_edge, label %if.entry.i20

while.entry.Array_ArgNode____sl__.exit23_crit_edge: ; preds = %while.entry
  %.pre26 = load ptr, ptr %memberidx4.i, align 8
  br label %Array_ArgNode____sl__.exit23

if.entry.i20:                                     ; preds = %while.entry
  %24 = shl nuw i64 %23, 1
  store i64 %24, ptr %memberidx1.i, align 4
  %25 = load ptr, ptr %memberidx4.i, align 8
  %26 = shl i64 %23, 4
  %27 = tail call ptr @realloc(ptr %25, i64 %26)
  store ptr %27, ptr %memberidx4.i, align 8
  %.pre25 = load i64, ptr %memberidx.i, align 4
  br label %Array_ArgNode____sl__.exit23

Array_ArgNode____sl__.exit23:                     ; preds = %while.entry.Array_ArgNode____sl__.exit23_crit_edge, %if.entry.i20
  %28 = phi ptr [ %.pre26, %while.entry.Array_ArgNode____sl__.exit23_crit_edge ], [ %27, %if.entry.i20 ]
  %29 = phi i64 [ %22, %while.entry.Array_ArgNode____sl__.exit23_crit_edge ], [ %.pre25, %if.entry.i20 ]
  %30 = add nsw i64 %29, 1
  store i64 %30, ptr %memberidx.i, align 4
  %ptridx.i22 = getelementptr inbounds ptr, ptr %28, i64 %29
  store ptr %21, ptr %ptridx.i22, align 8
  %31 = load ptr, ptr %memberidx, align 8
  %32 = load i64, ptr %31, align 4
  %33 = icmp eq i64 %32, 3
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i14 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i14, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  br i1 %37, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_ArgNode____sl__.exit23, %Array_ArgNode____sl__.exit
  ret void
}

define internal fastcc noalias ptr @Parser_parse_const_declaration_statement(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 40)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx.i.i = getelementptr inbounds %StatementNode, ptr %2, i64 0, i32 1
  store i64 2, ptr %memberidx.i.i, align 4
  %memberidx.i = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 3
  store ptr null, ptr %memberidx.i, align 8
  %memberidx.i24 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %5 = load i64, ptr %memberidx.i24, align 4
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i25, align 4
  %8 = icmp slt i64 %5, %7
  br i1 %8, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %1
  %9 = add nsw i64 %5, 1
  store i64 %9, ptr %memberidx.i24, align 4
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i27, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %11, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %1, %if.entry.i
  %memberidx2 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 2
  %12 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %if.entry, label %ifend

if.entry:                                         ; preds = %Parser_advance.exit
  %16 = load i64, ptr %memberidx.i24, align 4
  %17 = load ptr, ptr %0, align 8
  %memberidx2.i29 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i29, align 4
  %19 = icmp slt i64 %16, %18
  br i1 %19, label %if.entry.i33, label %Parser_advance.exit34

if.entry.i33:                                     ; preds = %if.entry
  %20 = add nsw i64 %16, 1
  store i64 %20, ptr %memberidx.i24, align 4
  %memberidx.i.i31 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i.i31, align 8
  %ptridx.i.i32 = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i.i32, align 8
  store ptr %22, ptr %memberidx, align 8
  br label %Parser_advance.exit34

Parser_advance.exit34:                            ; preds = %if.entry, %if.entry.i33
  %23 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %23, ptr %memberidx.i, align 8
  br label %ifend

ifend:                                            ; preds = %Parser_advance.exit, %Parser_advance.exit34
  %24 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 38)
  %memberidx6 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 4
  %25 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %25, ptr %memberidx6, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = tail call ptr @malloc(i32 32)
  %28 = load i64, ptr %4, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  %29 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  %31 = load i64, ptr %memberidx3.i, align 4
  store i64 %28, ptr %27, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 1
  store i64 %29, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 2
  store i64 %30, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 3
  store i64 %31, ptr %memberidx3.i.i, align 4
  store ptr %27, ptr %2, align 8
  ret ptr %2
}

define internal fastcc void @Parser_parse_type_list(ptr %0, ptr nocapture %1) unnamed_addr {
  %3 = tail call fastcc ptr @Parser_parse_type(ptr %0)
  %memberidx.i20 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i20, align 4
  %memberidx1.i21 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 3
  %5 = load i64, ptr %memberidx1.i21, align 4
  %.not.i22 = icmp slt i64 %4, %5
  br i1 %.not.i22, label %.Array_TypeNode____sl__.exit28_crit_edge, label %if.entry.i25

.Array_TypeNode____sl__.exit28_crit_edge:         ; preds = %2
  %memberidx4.i26.phi.trans.insert = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 1
  %.pre29 = load ptr, ptr %memberidx4.i26.phi.trans.insert, align 8
  br label %Array_TypeNode____sl__.exit28

if.entry.i25:                                     ; preds = %2
  %6 = shl nuw i64 %5, 1
  store i64 %6, ptr %memberidx1.i21, align 4
  %memberidx2.i.i24 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i.i24, align 8
  %8 = shl i64 %5, 4
  %9 = tail call ptr @realloc(ptr %7, i64 %8)
  store ptr %9, ptr %memberidx2.i.i24, align 8
  %.pre = load i64, ptr %memberidx.i20, align 4
  br label %Array_TypeNode____sl__.exit28

Array_TypeNode____sl__.exit28:                    ; preds = %.Array_TypeNode____sl__.exit28_crit_edge, %if.entry.i25
  %10 = phi ptr [ %.pre29, %.Array_TypeNode____sl__.exit28_crit_edge ], [ %9, %if.entry.i25 ]
  %11 = phi i64 [ %4, %.Array_TypeNode____sl__.exit28_crit_edge ], [ %.pre, %if.entry.i25 ]
  %12 = add nsw i64 %11, 1
  store i64 %12, ptr %memberidx.i20, align 4
  %memberidx4.i26 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 1
  %ptridx.i27 = getelementptr inbounds ptr, ptr %10, i64 %11
  store ptr %3, ptr %ptridx.i27, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 3
  %memberidx2.i18 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx2.i18, align 8
  %memberidx3.i19 = getelementptr inbounds %Array_FloError_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i19, align 4
  %18 = icmp eq i64 %17, 0
  %19 = and i1 %15, %18
  br i1 %19, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Array_TypeNode____sl__.exit28
  %memberidx.i12 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Array_TypeNode____sl__.exit
  %20 = load i64, ptr %memberidx.i12, align 4
  %21 = load ptr, ptr %0, align 8
  %memberidx2.i13 = getelementptr inbounds %Array_Token_, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i13, align 4
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %if.entry.i16, label %Parser_advance.exit

if.entry.i16:                                     ; preds = %while.entry
  %24 = add nsw i64 %20, 1
  store i64 %24, ptr %memberidx.i12, align 4
  %memberidx.i.i15 = getelementptr inbounds %Array_Token_, ptr %21, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i.i15, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %25, i64 %24
  %26 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %26, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i16
  %27 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %28 = load i64, ptr %memberidx.i20, align 4
  %29 = load i64, ptr %memberidx1.i21, align 4
  %.not.i = icmp slt i64 %28, %29
  br i1 %.not.i, label %Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge, label %if.entry.i

Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge: ; preds = %Parser_advance.exit
  %.pre31 = load ptr, ptr %memberidx4.i26, align 8
  br label %Array_TypeNode____sl__.exit

if.entry.i:                                       ; preds = %Parser_advance.exit
  %30 = shl nuw i64 %29, 1
  store i64 %30, ptr %memberidx1.i21, align 4
  %31 = load ptr, ptr %memberidx4.i26, align 8
  %32 = shl i64 %29, 4
  %33 = tail call ptr @realloc(ptr %31, i64 %32)
  store ptr %33, ptr %memberidx4.i26, align 8
  %.pre30 = load i64, ptr %memberidx.i20, align 4
  br label %Array_TypeNode____sl__.exit

Array_TypeNode____sl__.exit:                      ; preds = %Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge, %if.entry.i
  %34 = phi ptr [ %.pre31, %Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge ], [ %33, %if.entry.i ]
  %35 = phi i64 [ %28, %Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge ], [ %.pre30, %if.entry.i ]
  %36 = add nsw i64 %35, 1
  store i64 %36, ptr %memberidx.i20, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %34, i64 %35
  store ptr %27, ptr %ptridx.i, align 8
  %37 = load ptr, ptr %memberidx, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 3
  %40 = load ptr, ptr %memberidx2.i18, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx3.i, align 4
  %42 = icmp eq i64 %41, 0
  %43 = and i1 %39, %42
  br i1 %43, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_TypeNode____sl__.exit, %Array_TypeNode____sl__.exit28
  ret void
}

define internal fastcc ptr @Parser_parse_arg(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 24)
  %3 = tail call fastcc ptr @Parser_eat(ptr %0, i64 54)
  store ptr %3, ptr %2, align 8
  %memberidx1.i = getelementptr inbounds %ArgNode, ptr %2, i64 0, i32 1
  %memberidx2.i = getelementptr inbounds %ArgNode, ptr %2, i64 0, i32 2
  %memberidx.i51 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx1.i, i8 0, i64 16, i1 false)
  %4 = load ptr, ptr %memberidx.i51, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp ne i64 %5, 46
  %memberidx2.i52 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx3.i, align 4
  %9 = icmp eq i64 %8, 0
  %10 = and i1 %6, %9
  br i1 %10, label %ifend, label %common.ret

common.ret:                                       ; preds = %Parser_error.exit, %ifend13, %Parser_advance.exit, %1
  ret ptr %2

ifend:                                            ; preds = %1
  %11 = icmp eq i64 %5, 1
  br i1 %11, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %memberidx.i53 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %12 = load i64, ptr %memberidx.i53, align 4
  %13 = load ptr, ptr %0, align 8
  %memberidx2.i54 = getelementptr inbounds %Array_Token_, ptr %13, i64 0, i32 2
  %14 = load i64, ptr %memberidx2.i54, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry2
  %16 = add nsw i64 %12, 1
  store i64 %16, ptr %memberidx.i53, align 4
  %memberidx.i.i56 = getelementptr inbounds %Array_Token_, ptr %13, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i56, align 8
  %ptridx.i.i57 = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i.i57, align 8
  store ptr %18, ptr %memberidx.i51, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry2, %if.entry.i
  %19 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %19, ptr %memberidx1.i, align 8
  %20 = load ptr, ptr %memberidx.i51, align 8
  %21 = load i64, ptr %20, align 4
  %22 = icmp ne i64 %21, 46
  %23 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx3.i63 = getelementptr inbounds %Array_FloError_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx3.i63, align 4
  %25 = icmp eq i64 %24, 0
  %26 = and i1 %22, %25
  br i1 %26, label %ifend4, label %common.ret

ifend4:                                           ; preds = %Parser_advance.exit, %ifend
  %27 = phi ptr [ %19, %Parser_advance.exit ], [ null, %ifend ]
  %28 = phi i64 [ %21, %Parser_advance.exit ], [ %5, %ifend ]
  %29 = icmp eq i64 %28, 38
  br i1 %29, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend4
  %memberidx.i64 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %30 = load i64, ptr %memberidx.i64, align 4
  %31 = load ptr, ptr %0, align 8
  %memberidx2.i65 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 2
  %32 = load i64, ptr %memberidx2.i65, align 4
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %if.entry.i69, label %Parser_advance.exit70

if.entry.i69:                                     ; preds = %if.entry11
  %34 = add nsw i64 %30, 1
  store i64 %34, ptr %memberidx.i64, align 4
  %memberidx.i.i67 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i67, align 8
  %ptridx.i.i68 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i.i68, align 8
  store ptr %36, ptr %memberidx.i51, align 8
  br label %Parser_advance.exit70

Parser_advance.exit70:                            ; preds = %if.entry11, %if.entry.i69
  %37 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %37, ptr %memberidx2.i, align 8
  %phi.cmp = icmp eq ptr %37, null
  br label %ifend13

ifend13:                                          ; preds = %ifend4, %Parser_advance.exit70
  %38 = phi i1 [ true, %ifend4 ], [ %phi.cmp, %Parser_advance.exit70 ]
  %39 = icmp eq ptr %27, null
  %40 = and i1 %39, %38
  br i1 %40, label %if.entry17, label %common.ret

if.entry17:                                       ; preds = %ifend13
  %memberidx21 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %41 = load ptr, ptr %memberidx21, align 8
  %42 = load ptr, ptr %41, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 5
  %43 = load ptr, ptr %memberidx22, align 8
  %44 = tail call ptr %43(ptr nonnull %41)
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %45, ptr nonnull @64, ptr %44)
  %47 = load ptr, ptr %45, align 8
  %48 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i58 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i58, align 8
  %memberidx1.i59 = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 %46, ptr %memberidx1.i59, align 4
  %memberidx2.i60 = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 %46, ptr %memberidx2.i60, align 4
  tail call void @free(ptr %44)
  %49 = load ptr, ptr %memberidx2.i52, align 8
  %50 = call ptr @malloc(i32 24)
  %51 = load ptr, ptr %memberidx.i51, align 8
  %memberidx2.i50 = getelementptr inbounds %Token, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i50, align 8
  store i64 2, ptr %50, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %50, i64 0, i32 2
  store ptr %52, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %50, i64 0, i32 1
  store ptr %48, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 2
  %53 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 3
  %54 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %53, %54
  br i1 %.not.i.i, label %if.entry17.Parser_error.exit_crit_edge, label %if.entry.i.i

if.entry17.Parser_error.exit_crit_edge:           ; preds = %if.entry17
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 1
  %.pre72 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit

if.entry.i.i:                                     ; preds = %if.entry17
  %55 = shl nuw i64 %54, 1
  store i64 %55, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 1
  %56 = load ptr, ptr %memberidx2.i.i.i, align 8
  %57 = shl i64 %54, 4
  %58 = call ptr @realloc(ptr %56, i64 %57)
  store ptr %58, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %if.entry17.Parser_error.exit_crit_edge, %if.entry.i.i
  %59 = phi ptr [ %.pre72, %if.entry17.Parser_error.exit_crit_edge ], [ %58, %if.entry.i.i ]
  %60 = phi i64 [ %53, %if.entry17.Parser_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %61 = add nsw i64 %60, 1
  store i64 %61, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %60
  store ptr %50, ptr %ptridx.i.i, align 8
  %62 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx25 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx25, align 4
  %64 = add i64 %63, -1
  %memberidx.i = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %65, i64 %64
  %66 = load ptr, ptr %ptridx.i, align 8
  %memberidx26 = getelementptr inbounds %FloError, ptr %66, i64 0, i32 2
  %memberidx28 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %67 = load ptr, ptr %memberidx28, align 8
  store ptr %67, ptr %memberidx26, align 8
  br label %common.ret
}

define internal fastcc ptr @Parser_parse_object_type(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_eat(ptr %0, i64 54)
  %3 = tail call ptr @malloc(i32 32)
  %memberidx = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  store ptr %4, ptr %3, align 8
  %memberidx.i.i28 = getelementptr inbounds %TypeNode, ptr %3, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i28, align 4
  %memberidx.i29 = getelementptr inbounds %RecordTypeNode, ptr %3, i64 0, i32 2
  store ptr %2, ptr %memberidx.i29, align 8
  %memberidx1.i30 = getelementptr inbounds %RecordTypeNode, ptr %3, i64 0, i32 3
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %5, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i, align 4
  %memberidx1.i.i31 = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i31, align 4
  %memberidx2.i.i32 = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i.i32, align 8
  store i64 0, ptr %memberidx.i5.i, align 4
  store ptr %5, ptr %memberidx1.i30, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 42
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx.i, align 4
  %11 = load ptr, ptr %0, align 8
  %memberidx2.i26 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx2.i26, align 4
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry
  %14 = add nsw i64 %10, 1
  store i64 %14, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %16, ptr %memberidx1, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i
  tail call fastcc void @Parser_parse_type_list(ptr nonnull %0, ptr nonnull %5)
  %17 = load ptr, ptr %memberidx1, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load i64, ptr %17, align 4
  %20 = icmp eq i64 %19, 49
  br i1 %20, label %if.entry8, label %else9

ifend:                                            ; preds = %1, %ifend10
  ret ptr %3

if.entry8:                                        ; preds = %Parser_advance.exit
  store i64 41, ptr %17, align 4
  br label %ifend10

else9:                                            ; preds = %Parser_advance.exit
  %21 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 41)
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  %22 = tail call ptr @malloc(i32 32)
  %23 = load i64, ptr %4, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 1
  %24 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 3
  %26 = load i64, ptr %memberidx3.i, align 4
  store i64 %23, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 1
  store i64 %24, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  store i64 %25, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 3
  store i64 %26, ptr %memberidx3.i.i, align 4
  store ptr %22, ptr %3, align 8
  br label %ifend
}

define internal fastcc ptr @Parser_parse_unary_expression_pre(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load i64, ptr %2, align 4
  switch i64 %4, label %else35.i.i [
    i64 23, label %ifend
    i64 24, label %Parser_is_unary_op.exit.fold.split
    i64 5, label %Parser_is_unary_op.exit.fold.split27
    i64 37, label %Parser_is_unary_op.exit.fold.split28
    i64 73, label %ifend.fold.split
    i64 34, label %if.entry.i58.i
    i64 31, label %if.entry4.i.i
    i64 32, label %if.entry9.i.i
    i64 35, label %if.entry14.i.i
    i64 54, label %if.entry19.i.i
    i64 29, label %if.entry24.i.i
    i64 72, label %if.entry29.i.i
    i64 25, label %if.entry34.i.i
  ]

Parser_is_unary_op.exit.fold.split:               ; preds = %1
  br label %ifend

Parser_is_unary_op.exit.fold.split27:             ; preds = %1
  br label %ifend

Parser_is_unary_op.exit.fold.split28:             ; preds = %1
  br label %ifend

common.ret42.sink.split:                          ; preds = %Parser_advance.exit, %Parser_advance.exit.i
  %.sink48 = phi ptr [ %218, %Parser_advance.exit.i ], [ %234, %Parser_advance.exit ]
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %.sink48, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i18.i = getelementptr inbounds %ExpressionNode, ptr %.sink48, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i18.i, align 4
  br label %common.ret42

common.ret42:                                     ; preds = %common.ret42.sink.split, %Parser_parse_lhs_expression_allow_call.exit
  %common.ret42.op = phi ptr [ %expression.1.i, %Parser_parse_lhs_expression_allow_call.exit ], [ %.sink48, %common.ret42.sink.split ]
  ret ptr %common.ret42.op

if.entry.i58.i:                                   ; preds = %1
  %5 = tail call fastcc ptr @Parser_parse_string(ptr nonnull %0)
  br label %Parser_parse_atom.exit.i

if.entry4.i.i:                                    ; preds = %1
  %6 = tail call ptr @malloc(i32 32)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 31
  br i1 %9, label %if.entry.i.i62.i, label %else.i.i70.i

if.entry.i.i62.i:                                 ; preds = %if.entry4.i.i
  %memberidx.i.i.i60.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx.i.i.i60.i, align 4
  %11 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i61.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx2.i.i.i61.i, align 4
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %if.entry.i.i.i66.i, label %Parser_eat.exit.i73.i

if.entry.i.i.i66.i:                               ; preds = %if.entry.i.i62.i
  %14 = add nsw i64 %10, 1
  store i64 %14, ptr %memberidx.i.i.i60.i, align 4
  %memberidx.i.i.i.i64.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i.i.i.i64.i, align 8
  %ptridx.i.i.i.i65.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i.i.i.i65.i, align 8
  store ptr %16, ptr %memberidx, align 8
  br label %Parser_eat.exit.i73.i

else.i.i70.i:                                     ; preds = %if.entry4.i.i
  %17 = tail call ptr @malloc(i32 16)
  %memberidx35.i.i68.i = getelementptr inbounds %Token, ptr %7, i64 0, i32 1
  %18 = load ptr, ptr %memberidx35.i.i68.i, align 8
  store i64 46, ptr %17, align 4
  %memberidx1.i82.i.i69.i = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  store ptr %18, ptr %memberidx1.i82.i.i69.i, align 8
  br label %Parser_eat.exit.i73.i

Parser_eat.exit.i73.i:                            ; preds = %else.i.i70.i, %if.entry.i.i.i66.i, %if.entry.i.i62.i
  %common.ret.op.i.i71.i = phi ptr [ %17, %else.i.i70.i ], [ %7, %if.entry.i.i.i66.i ], [ %7, %if.entry.i.i62.i ]
  %memberidx.i58.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i.i71.i, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i58.i.i, align 8
  store ptr %19, ptr %6, align 8
  %memberidx.i.i.i59.i.i = getelementptr inbounds %StatementNode, ptr %6, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i59.i.i, align 4
  %memberidx.i.i60.i.i = getelementptr inbounds %ExpressionNode, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i60.i.i, align 4
  %memberidx1.i.i72.i = getelementptr inbounds %IntExpressionNode, ptr %6, i64 0, i32 3
  store ptr %common.ret.op.i.i71.i, ptr %memberidx1.i.i72.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry9.i.i:                                    ; preds = %1
  %20 = tail call ptr @malloc(i32 32)
  %21 = load ptr, ptr %memberidx, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 32
  br i1 %23, label %if.entry.i65.i.i, label %else.i71.i.i

if.entry.i65.i.i:                                 ; preds = %if.entry9.i.i
  %memberidx.i.i63.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %24 = load i64, ptr %memberidx.i.i63.i.i, align 4
  %25 = load ptr, ptr %0, align 8
  %memberidx2.i.i64.i.i = getelementptr inbounds %Array_Token_, ptr %25, i64 0, i32 2
  %26 = load i64, ptr %memberidx2.i.i64.i.i, align 4
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %if.entry.i.i69.i.i, label %Parser_eat.exit74.i.i

if.entry.i.i69.i.i:                               ; preds = %if.entry.i65.i.i
  %28 = add nsw i64 %24, 1
  store i64 %28, ptr %memberidx.i.i63.i.i, align 4
  %memberidx.i.i.i67.i.i = getelementptr inbounds %Array_Token_, ptr %25, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i.i.i67.i.i, align 8
  %ptridx.i.i.i68.i.i = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx.i.i.i68.i.i, align 8
  store ptr %30, ptr %memberidx, align 8
  br label %Parser_eat.exit74.i.i

else.i71.i.i:                                     ; preds = %if.entry9.i.i
  %31 = tail call ptr @malloc(i32 16)
  %memberidx35.i72.i.i = getelementptr inbounds %Token, ptr %21, i64 0, i32 1
  %32 = load ptr, ptr %memberidx35.i72.i.i, align 8
  store i64 46, ptr %31, align 4
  %memberidx1.i82.i73.i.i = getelementptr inbounds %Token, ptr %31, i64 0, i32 1
  store ptr %32, ptr %memberidx1.i82.i73.i.i, align 8
  br label %Parser_eat.exit74.i.i

Parser_eat.exit74.i.i:                            ; preds = %else.i71.i.i, %if.entry.i.i69.i.i, %if.entry.i65.i.i
  %common.ret.op.i62.i.i = phi ptr [ %31, %else.i71.i.i ], [ %21, %if.entry.i.i69.i.i ], [ %21, %if.entry.i65.i.i ]
  %memberidx.i75.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i62.i.i, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i75.i.i, align 8
  store ptr %33, ptr %20, align 8
  %memberidx.i.i.i76.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i76.i.i, align 4
  %memberidx.i.i77.i.i = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 1, ptr %memberidx.i.i77.i.i, align 4
  %memberidx1.i78.i.i = getelementptr inbounds %FloatExpressionNode, ptr %20, i64 0, i32 3
  store ptr %common.ret.op.i62.i.i, ptr %memberidx1.i78.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry14.i.i:                                   ; preds = %1
  %34 = tail call ptr @malloc(i32 32)
  %35 = load ptr, ptr %memberidx, align 8
  %36 = load i64, ptr %35, align 4
  %37 = icmp eq i64 %36, 35
  br i1 %37, label %if.entry.i83.i.i, label %else.i89.i.i

if.entry.i83.i.i:                                 ; preds = %if.entry14.i.i
  %memberidx.i.i81.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %38 = load i64, ptr %memberidx.i.i81.i.i, align 4
  %39 = load ptr, ptr %0, align 8
  %memberidx2.i.i82.i.i = getelementptr inbounds %Array_Token_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i.i82.i.i, align 4
  %41 = icmp slt i64 %38, %40
  br i1 %41, label %if.entry.i.i87.i.i, label %Parser_eat.exit92.i.i

if.entry.i.i87.i.i:                               ; preds = %if.entry.i83.i.i
  %42 = add nsw i64 %38, 1
  store i64 %42, ptr %memberidx.i.i81.i.i, align 4
  %memberidx.i.i.i85.i.i = getelementptr inbounds %Array_Token_, ptr %39, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i.i85.i.i, align 8
  %ptridx.i.i.i86.i.i = getelementptr inbounds ptr, ptr %43, i64 %42
  %44 = load ptr, ptr %ptridx.i.i.i86.i.i, align 8
  store ptr %44, ptr %memberidx, align 8
  br label %Parser_eat.exit92.i.i

else.i89.i.i:                                     ; preds = %if.entry14.i.i
  %45 = tail call ptr @malloc(i32 16)
  %memberidx35.i90.i.i = getelementptr inbounds %Token, ptr %35, i64 0, i32 1
  %46 = load ptr, ptr %memberidx35.i90.i.i, align 8
  store i64 46, ptr %45, align 4
  %memberidx1.i82.i91.i.i = getelementptr inbounds %Token, ptr %45, i64 0, i32 1
  store ptr %46, ptr %memberidx1.i82.i91.i.i, align 8
  br label %Parser_eat.exit92.i.i

Parser_eat.exit92.i.i:                            ; preds = %else.i89.i.i, %if.entry.i.i87.i.i, %if.entry.i83.i.i
  %common.ret.op.i80.i.i = phi ptr [ %45, %else.i89.i.i ], [ %35, %if.entry.i.i87.i.i ], [ %35, %if.entry.i83.i.i ]
  %memberidx.i93.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i80.i.i, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i93.i.i, align 8
  store ptr %47, ptr %34, align 8
  %memberidx.i.i.i94.i.i = getelementptr inbounds %StatementNode, ptr %34, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i94.i.i, align 4
  %memberidx.i.i95.i.i = getelementptr inbounds %ExpressionNode, ptr %34, i64 0, i32 2
  store i64 3, ptr %memberidx.i.i95.i.i, align 4
  %memberidx1.i96.i.i = getelementptr inbounds %CharExpressionNode, ptr %34, i64 0, i32 3
  store ptr %common.ret.op.i80.i.i, ptr %memberidx1.i96.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry19.i.i:                                   ; preds = %1
  %48 = tail call ptr @malloc(i32 32)
  %49 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  %memberidx.i97.i.i = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i97.i.i, align 8
  store ptr %50, ptr %48, align 8
  %memberidx.i.i.i98.i.i = getelementptr inbounds %StatementNode, ptr %48, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i98.i.i, align 4
  %memberidx.i.i99.i.i = getelementptr inbounds %ExpressionNode, ptr %48, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i99.i.i, align 4
  %memberidx1.i100.i.i = getelementptr inbounds %VarAccessExpressionNode, ptr %48, i64 0, i32 3
  store ptr %49, ptr %memberidx1.i100.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry24.i.i:                                   ; preds = %1
  %51 = tail call ptr @malloc(i32 32)
  %52 = load ptr, ptr %memberidx, align 8
  %memberidx1.i104.i = getelementptr inbounds %Token, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx1.i104.i, align 8
  store ptr %53, ptr %51, align 8
  %memberidx.i.i.i.i105.i = getelementptr inbounds %StatementNode, ptr %51, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i105.i, align 4
  %memberidx.i.i.i106.i = getelementptr inbounds %ExpressionNode, ptr %51, i64 0, i32 2
  store i64 6, ptr %memberidx.i.i.i106.i, align 4
  %memberidx.i.i107.i = getelementptr inbounds %ArrayExpressionNode, ptr %51, i64 0, i32 3
  %54 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %54, align 8
  %memberidx.i3.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %54, i64 0, i32 2
  store i64 0, ptr %memberidx.i3.i.i.i, align 4
  %memberidx1.i.i.i108.i = getelementptr inbounds %Array_ExpressionNode_, ptr %54, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i108.i, align 4
  %memberidx2.i.i.i109.i = getelementptr inbounds %Array_ExpressionNode_, ptr %54, i64 0, i32 1
  %55 = tail call ptr @malloc(i32 64)
  store ptr %55, ptr %memberidx2.i.i.i109.i, align 8
  store i64 0, ptr %memberidx.i3.i.i.i, align 4
  store ptr %54, ptr %memberidx.i.i107.i, align 8
  %memberidx.i15.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %56 = load i64, ptr %memberidx.i15.i.i, align 4
  %57 = load ptr, ptr %0, align 8
  %memberidx2.i16.i.i = getelementptr inbounds %Array_Token_, ptr %57, i64 0, i32 2
  %58 = load i64, ptr %memberidx2.i16.i.i, align 4
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %if.entry.i.i113.i, label %if.entry24.i.i.Parser_advance.exit.i115.i_crit_edge

if.entry24.i.i.Parser_advance.exit.i115.i_crit_edge: ; preds = %if.entry24.i.i
  %.pre = load ptr, ptr %memberidx, align 8
  br label %Parser_advance.exit.i115.i

if.entry.i.i113.i:                                ; preds = %if.entry24.i.i
  %60 = add nsw i64 %56, 1
  store i64 %60, ptr %memberidx.i15.i.i, align 4
  %memberidx.i.i17.i.i = getelementptr inbounds %Array_Token_, ptr %57, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i.i17.i.i, align 8
  %ptridx.i.i.i112.i = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i.i.i112.i, align 8
  store ptr %62, ptr %memberidx, align 8
  br label %Parser_advance.exit.i115.i

Parser_advance.exit.i115.i:                       ; preds = %if.entry24.i.i.Parser_advance.exit.i115.i_crit_edge, %if.entry.i.i113.i
  %63 = phi ptr [ %.pre, %if.entry24.i.i.Parser_advance.exit.i115.i_crit_edge ], [ %62, %if.entry.i.i113.i ]
  %64 = load i64, ptr %63, align 4
  %.not.i114.i = icmp eq i64 %64, 30
  br i1 %.not.i114.i, label %if.entry.i21.i.i, label %ifend.i.i

ifend.i.i:                                        ; preds = %Parser_advance.exit.i115.i
  tail call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %54)
  %.pre43 = load ptr, ptr %memberidx, align 8
  %.pre44 = load i64, ptr %.pre43, align 4
  %phi.cmp = icmp eq i64 %.pre44, 30
  br i1 %phi.cmp, label %if.entry.i21.i.i, label %else.i.i125.i

if.entry.i21.i.i:                                 ; preds = %Parser_advance.exit.i115.i, %ifend.i.i
  %65 = phi ptr [ %.pre43, %ifend.i.i ], [ %63, %Parser_advance.exit.i115.i ]
  %66 = load i64, ptr %memberidx.i15.i.i, align 4
  %67 = load ptr, ptr %0, align 8
  %memberidx2.i.i20.i.i = getelementptr inbounds %Array_Token_, ptr %67, i64 0, i32 2
  %68 = load i64, ptr %memberidx2.i.i20.i.i, align 4
  %69 = icmp slt i64 %66, %68
  br i1 %69, label %if.entry.i.i.i122.i, label %Parser_parse_array_expression.exit.i

if.entry.i.i.i122.i:                              ; preds = %if.entry.i21.i.i
  %70 = add nsw i64 %66, 1
  store i64 %70, ptr %memberidx.i15.i.i, align 4
  %memberidx.i.i.i22.i.i = getelementptr inbounds %Array_Token_, ptr %67, i64 0, i32 1
  %71 = load ptr, ptr %memberidx.i.i.i22.i.i, align 8
  %ptridx.i.i.i.i121.i = getelementptr inbounds ptr, ptr %71, i64 %70
  %72 = load ptr, ptr %ptridx.i.i.i.i121.i, align 8
  store ptr %72, ptr %memberidx, align 8
  br label %Parser_parse_array_expression.exit.i

else.i.i125.i:                                    ; preds = %ifend.i.i
  %73 = tail call ptr @malloc(i32 16)
  %memberidx35.i.i123.i = getelementptr inbounds %Token, ptr %.pre43, i64 0, i32 1
  %74 = load ptr, ptr %memberidx35.i.i123.i, align 8
  store i64 46, ptr %73, align 4
  %memberidx1.i82.i.i124.i = getelementptr inbounds %Token, ptr %73, i64 0, i32 1
  store ptr %74, ptr %memberidx1.i82.i.i124.i, align 8
  br label %Parser_parse_array_expression.exit.i

Parser_parse_array_expression.exit.i:             ; preds = %else.i.i125.i, %if.entry.i.i.i122.i, %if.entry.i21.i.i
  %common.ret.op.i.i.i = phi ptr [ %73, %else.i.i125.i ], [ %65, %if.entry.i.i.i122.i ], [ %65, %if.entry.i21.i.i ]
  %memberidx7.i126.i = getelementptr inbounds %Token, ptr %common.ret.op.i.i.i, i64 0, i32 1
  %75 = load ptr, ptr %memberidx7.i126.i, align 8
  %76 = tail call ptr @malloc(i32 32)
  %77 = load i64, ptr %53, align 4
  %memberidx1.i.i127.i = getelementptr inbounds %FloRange, ptr %75, i64 0, i32 1
  %78 = load i64, ptr %memberidx1.i.i127.i, align 4
  %memberidx2.i23.i.i = getelementptr inbounds %FloRange, ptr %53, i64 0, i32 2
  %79 = load i64, ptr %memberidx2.i23.i.i, align 4
  %memberidx3.i24.i.i = getelementptr inbounds %FloRange, ptr %75, i64 0, i32 3
  %80 = load i64, ptr %memberidx3.i24.i.i, align 4
  store i64 %77, ptr %76, align 4
  %memberidx1.i.i25.i.i = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 1
  store i64 %78, ptr %memberidx1.i.i25.i.i, align 4
  %memberidx2.i.i26.i.i = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 2
  store i64 %79, ptr %memberidx2.i.i26.i.i, align 4
  %memberidx3.i.i27.i.i = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 3
  store i64 %80, ptr %memberidx3.i.i27.i.i, align 4
  store ptr %76, ptr %51, align 8
  br label %Parser_parse_atom.exit.i

if.entry29.i.i:                                   ; preds = %1
  %memberidx.i.i87.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %81 = load i64, ptr %memberidx.i.i87.i, align 4
  %82 = load ptr, ptr %0, align 8
  %memberidx2.i.i88.i = getelementptr inbounds %Array_Token_, ptr %82, i64 0, i32 2
  %83 = load i64, ptr %memberidx2.i.i88.i, align 4
  %84 = icmp slt i64 %81, %83
  br i1 %84, label %if.entry.i.i92.i, label %Parser_advance.exit.i97.i

if.entry.i.i92.i:                                 ; preds = %if.entry29.i.i
  %85 = add nsw i64 %81, 1
  store i64 %85, ptr %memberidx.i.i87.i, align 4
  %memberidx.i.i.i90.i = getelementptr inbounds %Array_Token_, ptr %82, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i.i.i90.i, align 8
  %ptridx.i.i.i91.i = getelementptr inbounds ptr, ptr %86, i64 %85
  %87 = load ptr, ptr %ptridx.i.i.i91.i, align 8
  store ptr %87, ptr %memberidx, align 8
  br label %Parser_advance.exit.i97.i

Parser_advance.exit.i97.i:                        ; preds = %if.entry.i.i92.i, %if.entry29.i.i
  %88 = tail call ptr @malloc(i32 41)
  %89 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %memberidx.i18.i.i = getelementptr inbounds %NewExpressionNode, ptr %88, i64 0, i32 3
  store ptr %89, ptr %memberidx.i18.i.i, align 8
  %memberidx1.i.i93.i = getelementptr inbounds %NewExpressionNode, ptr %88, i64 0, i32 4
  store i1 true, ptr %memberidx1.i.i93.i, align 1
  store ptr %3, ptr %88, align 8
  %memberidx.i.i.i.i94.i = getelementptr inbounds %StatementNode, ptr %88, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i94.i, align 4
  %memberidx.i.i19.i.i = getelementptr inbounds %ExpressionNode, ptr %88, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i19.i.i, align 4
  %memberidx2.i20.i.i = getelementptr inbounds %NewExpressionNode, ptr %88, i64 0, i32 5
  %90 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %90, align 8
  %memberidx.i7.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %90, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i.i.i, align 4
  %memberidx1.i.i.i95.i = getelementptr inbounds %Array_ExpressionNode_, ptr %90, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i95.i, align 4
  %memberidx2.i.i.i96.i = getelementptr inbounds %Array_ExpressionNode_, ptr %90, i64 0, i32 1
  %91 = tail call ptr @malloc(i32 64)
  store ptr %91, ptr %memberidx2.i.i.i96.i, align 8
  store i64 0, ptr %memberidx.i7.i.i.i, align 4
  store ptr %90, ptr %memberidx2.i20.i.i, align 8
  %92 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 25)
  %memberidx2.i22.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %93 = load ptr, ptr %memberidx2.i22.i.i, align 8
  %memberidx3.i23.i.i = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 2
  %94 = load i64, ptr %memberidx3.i23.i.i, align 4
  %.fr = freeze i64 %94
  %95 = icmp eq i64 %.fr, 0
  br i1 %95, label %switch.early.test.i.i, label %Parser_parse_new_expression.exit.i

switch.early.test.i.i:                            ; preds = %Parser_advance.exit.i97.i
  %96 = load ptr, ptr %memberidx, align 8
  %97 = load i64, ptr %96, align 4
  switch i64 %97, label %if.entry.i99.i [
    i64 46, label %Parser_parse_new_expression.exit.i
    i64 26, label %Parser_parse_new_expression.exit.i
  ]

if.entry.i99.i:                                   ; preds = %switch.early.test.i.i
  tail call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %90)
  br label %Parser_parse_new_expression.exit.i

Parser_parse_new_expression.exit.i:               ; preds = %if.entry.i99.i, %switch.early.test.i.i, %switch.early.test.i.i, %Parser_advance.exit.i97.i
  %98 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  %memberidx7.i100.i = getelementptr inbounds %Token, ptr %98, i64 0, i32 1
  %99 = load ptr, ptr %memberidx7.i100.i, align 8
  %100 = tail call ptr @malloc(i32 32)
  %101 = load i64, ptr %3, align 4
  %memberidx1.i24.i.i = getelementptr inbounds %FloRange, ptr %99, i64 0, i32 1
  %102 = load i64, ptr %memberidx1.i24.i.i, align 4
  %memberidx2.i25.i.i = getelementptr inbounds %FloRange, ptr %3, i64 0, i32 2
  %103 = load i64, ptr %memberidx2.i25.i.i, align 4
  %memberidx3.i26.i.i = getelementptr inbounds %FloRange, ptr %99, i64 0, i32 3
  %104 = load i64, ptr %memberidx3.i26.i.i, align 4
  store i64 %101, ptr %100, align 4
  %memberidx1.i.i27.i.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 1
  store i64 %102, ptr %memberidx1.i.i27.i.i, align 4
  %memberidx2.i.i28.i101.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 2
  store i64 %103, ptr %memberidx2.i.i28.i101.i, align 4
  %memberidx3.i.i.i102.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 3
  store i64 %104, ptr %memberidx3.i.i.i102.i, align 4
  store ptr %100, ptr %88, align 8
  br label %Parser_parse_atom.exit.i

if.entry34.i.i:                                   ; preds = %1
  %memberidx.i101.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %105 = load i64, ptr %memberidx.i101.i.i, align 4
  %106 = load ptr, ptr %0, align 8
  %memberidx2.i.i74.i = getelementptr inbounds %Array_Token_, ptr %106, i64 0, i32 2
  %107 = load i64, ptr %memberidx2.i.i74.i, align 4
  %108 = icmp slt i64 %105, %107
  br i1 %108, label %if.entry.i103.i.i, label %Parser_advance.exit.i.i

if.entry.i103.i.i:                                ; preds = %if.entry34.i.i
  %109 = add nsw i64 %105, 1
  store i64 %109, ptr %memberidx.i101.i.i, align 4
  %memberidx.i.i102.i.i = getelementptr inbounds %Array_Token_, ptr %106, i64 0, i32 1
  %110 = load ptr, ptr %memberidx.i.i102.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %110, i64 %109
  %111 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %111, ptr %memberidx, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i103.i.i, %if.entry34.i.i
  %112 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %113 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  br label %Parser_parse_atom.exit.i

else35.i.i:                                       ; preds = %1
  %114 = tail call ptr @malloc(i32 28)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %114, ptr noundef nonnull align 8 dereferenceable(28) @63, i64 28, i1 false)
  %115 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %115, align 8
  %memberidx.i.i104.i.i = getelementptr inbounds %string, ptr %115, i64 0, i32 1
  store ptr %114, ptr %memberidx.i.i104.i.i, align 8
  %memberidx1.i.i.i76.i = getelementptr inbounds %string, ptr %115, i64 0, i32 2
  store i64 28, ptr %memberidx1.i.i.i76.i, align 4
  %memberidx2.i.i105.i.i = getelementptr inbounds %string, ptr %115, i64 0, i32 3
  store i64 28, ptr %memberidx2.i.i105.i.i, align 4
  %memberidx.i106.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %116 = load ptr, ptr %memberidx.i106.i.i, align 8
  %117 = tail call ptr @malloc(i32 24)
  %118 = load ptr, ptr %memberidx, align 8
  %memberidx2.i108.i.i = getelementptr inbounds %Token, ptr %118, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i108.i.i, align 8
  store i64 2, ptr %117, align 4
  %memberidx1.i.i109.i.i = getelementptr inbounds %FloError, ptr %117, i64 0, i32 2
  store ptr %119, ptr %memberidx1.i.i109.i.i, align 8
  %memberidx2.i.i110.i.i = getelementptr inbounds %FloError, ptr %117, i64 0, i32 1
  store ptr %115, ptr %memberidx2.i.i110.i.i, align 8
  %memberidx.i.i111.i.i = getelementptr inbounds %Array_FloError_, ptr %116, i64 0, i32 2
  %120 = load i64, ptr %memberidx.i.i111.i.i, align 4
  %memberidx1.i4.i.i.i = getelementptr inbounds %Array_FloError_, ptr %116, i64 0, i32 3
  %121 = load i64, ptr %memberidx1.i4.i.i.i, align 4
  %.not.i.i.i.i = icmp slt i64 %120, %121
  br i1 %.not.i.i.i.i, label %else35.i.i.Parser_error.exit.i.i_crit_edge, label %if.entry.i.i113.i.i

else35.i.i.Parser_error.exit.i.i_crit_edge:       ; preds = %else35.i.i
  %memberidx4.i.i.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %116, i64 0, i32 1
  %.pre46 = load ptr, ptr %memberidx4.i.i.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit.i.i

if.entry.i.i113.i.i:                              ; preds = %else35.i.i
  %122 = shl nuw i64 %121, 1
  store i64 %122, ptr %memberidx1.i4.i.i.i, align 4
  %memberidx2.i.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %116, i64 0, i32 1
  %123 = load ptr, ptr %memberidx2.i.i.i.i.i, align 8
  %124 = shl i64 %121, 4
  %125 = tail call ptr @realloc(ptr %123, i64 %124)
  store ptr %125, ptr %memberidx2.i.i.i.i.i, align 8
  %.pre45 = load i64, ptr %memberidx.i.i111.i.i, align 4
  br label %Parser_error.exit.i.i

Parser_error.exit.i.i:                            ; preds = %else35.i.i.Parser_error.exit.i.i_crit_edge, %if.entry.i.i113.i.i
  %126 = phi ptr [ %125, %if.entry.i.i113.i.i ], [ %.pre46, %else35.i.i.Parser_error.exit.i.i_crit_edge ]
  %127 = phi i64 [ %.pre45, %if.entry.i.i113.i.i ], [ %120, %else35.i.i.Parser_error.exit.i.i_crit_edge ]
  %128 = add nsw i64 %127, 1
  store i64 %128, ptr %memberidx.i.i111.i.i, align 4
  %ptridx.i.i114.i.i = getelementptr inbounds ptr, ptr %126, i64 %127
  store ptr %117, ptr %ptridx.i.i114.i.i, align 8
  %129 = tail call ptr @malloc(i32 24)
  %130 = load ptr, ptr %memberidx, align 8
  %memberidx38.i.i = getelementptr inbounds %Token, ptr %130, i64 0, i32 1
  %131 = load ptr, ptr %memberidx38.i.i, align 8
  store ptr %131, ptr %129, align 8
  %memberidx.i.i115.i.i = getelementptr inbounds %StatementNode, ptr %129, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i115.i.i, align 4
  %memberidx.i116.i.i = getelementptr inbounds %ExpressionNode, ptr %129, i64 0, i32 2
  store i64 7, ptr %memberidx.i116.i.i, align 4
  br label %Parser_parse_atom.exit.i

Parser_parse_atom.exit.i:                         ; preds = %Parser_error.exit.i.i, %Parser_advance.exit.i.i, %Parser_parse_new_expression.exit.i, %Parser_parse_array_expression.exit.i, %if.entry19.i.i, %Parser_eat.exit92.i.i, %Parser_eat.exit74.i.i, %Parser_eat.exit.i73.i, %if.entry.i58.i
  %common.ret.op.i.i = phi ptr [ %5, %if.entry.i58.i ], [ %129, %Parser_error.exit.i.i ], [ %6, %Parser_eat.exit.i73.i ], [ %20, %Parser_eat.exit74.i.i ], [ %34, %Parser_eat.exit92.i.i ], [ %48, %if.entry19.i.i ], [ %51, %Parser_parse_array_expression.exit.i ], [ %88, %Parser_parse_new_expression.exit.i ], [ %112, %Parser_advance.exit.i.i ]
  %132 = load ptr, ptr %memberidx, align 8
  %133 = load i64, ptr %132, align 4
  %134 = icmp ne i64 %133, 46
  %memberidx2.i.i30 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %135 = load ptr, ptr %memberidx2.i.i30, align 8
  %memberidx3.i.i31 = getelementptr inbounds %Array_FloError_, ptr %135, i64 0, i32 2
  %136 = load i64, ptr %memberidx3.i.i31, align 4
  %137 = icmp eq i64 %136, 0
  %138 = and i1 %134, %137
  br i1 %138, label %while.entry.i.preheader, label %Parser_parse_lhs_expression_allow_call.exit

while.entry.i.preheader:                          ; preds = %Parser_parse_atom.exit.i
  %memberidx.i.i.i.i35 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %ifend.i
  %139 = phi i64 [ %158, %ifend.i ], [ %133, %while.entry.i.preheader ]
  %140 = phi ptr [ %157, %ifend.i ], [ %132, %while.entry.i.preheader ]
  %expression.0.i = phi ptr [ %expression.2.i, %ifend.i ], [ %common.ret.op.i.i, %while.entry.i.preheader ]
  switch i64 %139, label %Parser_parse_lhs_expression_allow_call.exit [
    i64 25, label %if.entry.i32
    i64 29, label %if.entry.i.i29.i
    i64 50, label %if.entry.i.i.i
  ]

if.entry.i32:                                     ; preds = %while.entry.i
  %141 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 25)
  %142 = tail call ptr @malloc(i32 40)
  %143 = load ptr, ptr %memberidx, align 8
  %memberidx1.i46.i = getelementptr inbounds %Token, ptr %143, i64 0, i32 1
  %144 = load ptr, ptr %memberidx1.i46.i, align 8
  store ptr %144, ptr %142, align 8
  %memberidx.i.i.i.i47.i = getelementptr inbounds %StatementNode, ptr %142, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i47.i, align 4
  %memberidx.i.i.i48.i = getelementptr inbounds %ExpressionNode, ptr %142, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i.i48.i, align 4
  %memberidx.i.i49.i = getelementptr inbounds %CallExpressionNode, ptr %142, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i.i49.i, align 8
  %memberidx1.i.i50.i = getelementptr inbounds %CallExpressionNode, ptr %142, i64 0, i32 4
  %145 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %145, align 8
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %145, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i.i.i, align 4
  %memberidx1.i.i.i51.i = getelementptr inbounds %Array_ExpressionNode_, ptr %145, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i51.i, align 4
  %memberidx2.i.i.i52.i = getelementptr inbounds %Array_ExpressionNode_, ptr %145, i64 0, i32 1
  %146 = tail call ptr @malloc(i32 64)
  store ptr %146, ptr %memberidx2.i.i.i52.i, align 8
  store i64 0, ptr %memberidx.i5.i.i.i, align 4
  store ptr %145, ptr %memberidx1.i.i50.i, align 8
  %147 = load ptr, ptr %memberidx, align 8
  %148 = load i64, ptr %147, align 4
  %.not.i.i = icmp eq i64 %148, 26
  br i1 %.not.i.i, label %Parser_parse_call_expression.exit.i, label %if.entry.i.i33

if.entry.i.i33:                                   ; preds = %if.entry.i32
  tail call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %145)
  br label %Parser_parse_call_expression.exit.i

Parser_parse_call_expression.exit.i:              ; preds = %if.entry.i.i33, %if.entry.i32
  %149 = load ptr, ptr %expression.0.i, align 8
  %150 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  %memberidx7.i.i = getelementptr inbounds %Token, ptr %150, i64 0, i32 1
  %151 = load ptr, ptr %memberidx7.i.i, align 8
  %152 = tail call ptr @malloc(i32 32)
  %153 = load i64, ptr %149, align 4
  %memberidx1.i15.i.i = getelementptr inbounds %FloRange, ptr %151, i64 0, i32 1
  %154 = load i64, ptr %memberidx1.i15.i.i, align 4
  %memberidx2.i.i55.i = getelementptr inbounds %FloRange, ptr %149, i64 0, i32 2
  %155 = load i64, ptr %memberidx2.i.i55.i, align 4
  %memberidx3.i16.i.i = getelementptr inbounds %FloRange, ptr %151, i64 0, i32 3
  %156 = load i64, ptr %memberidx3.i16.i.i, align 4
  store i64 %153, ptr %152, align 4
  %memberidx1.i.i17.i.i = getelementptr inbounds %FloRange, ptr %152, i64 0, i32 1
  store i64 %154, ptr %memberidx1.i.i17.i.i, align 4
  %memberidx2.i.i18.i.i = getelementptr inbounds %FloRange, ptr %152, i64 0, i32 2
  store i64 %155, ptr %memberidx2.i.i18.i.i, align 4
  %memberidx3.i.i.i56.i = getelementptr inbounds %FloRange, ptr %152, i64 0, i32 3
  store i64 %156, ptr %memberidx3.i.i.i56.i, align 4
  store ptr %152, ptr %142, align 8
  br label %ifend.i

ifend.i:                                          ; preds = %Parser_parse_member_expression.exit.i, %Parser_parse_index_expression.exit.i, %Parser_parse_call_expression.exit.i
  %expression.2.i = phi ptr [ %142, %Parser_parse_call_expression.exit.i ], [ %171, %Parser_parse_index_expression.exit.i ], [ %201, %Parser_parse_member_expression.exit.i ]
  %157 = load ptr, ptr %memberidx, align 8
  %158 = load i64, ptr %157, align 4
  %159 = icmp ne i64 %158, 46
  %160 = load ptr, ptr %memberidx2.i.i30, align 8
  %memberidx3.i25.i = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 2
  %161 = load i64, ptr %memberidx3.i25.i, align 4
  %162 = icmp eq i64 %161, 0
  %163 = and i1 %159, %162
  br i1 %163, label %while.entry.i, label %Parser_parse_lhs_expression_allow_call.exit

if.entry.i.i29.i:                                 ; preds = %while.entry.i
  %164 = load i64, ptr %memberidx.i.i.i.i35, align 4
  %165 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i28.i = getelementptr inbounds %Array_Token_, ptr %165, i64 0, i32 2
  %166 = load i64, ptr %memberidx2.i.i.i28.i, align 4
  %167 = icmp slt i64 %164, %166
  br i1 %167, label %if.entry.i.i.i33.i, label %Parser_eat.exit.i.i

if.entry.i.i.i33.i:                               ; preds = %if.entry.i.i29.i
  %168 = add nsw i64 %164, 1
  store i64 %168, ptr %memberidx.i.i.i.i35, align 4
  %memberidx.i.i.i.i31.i = getelementptr inbounds %Array_Token_, ptr %165, i64 0, i32 1
  %169 = load ptr, ptr %memberidx.i.i.i.i31.i, align 8
  %ptridx.i.i.i.i32.i = getelementptr inbounds ptr, ptr %169, i64 %168
  %170 = load ptr, ptr %ptridx.i.i.i.i32.i, align 8
  store ptr %170, ptr %memberidx, align 8
  br label %Parser_eat.exit.i.i

Parser_eat.exit.i.i:                              ; preds = %if.entry.i.i.i33.i, %if.entry.i.i29.i
  %171 = tail call ptr @malloc(i32 40)
  %172 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %173 = load ptr, ptr %memberidx, align 8
  %memberidx1.i40.i = getelementptr inbounds %Token, ptr %173, i64 0, i32 1
  %174 = load ptr, ptr %memberidx1.i40.i, align 8
  %memberidx.i10.i.i = getelementptr inbounds %ExpressionIndexNode, ptr %171, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i10.i.i, align 8
  %memberidx1.i.i41.i = getelementptr inbounds %ExpressionIndexNode, ptr %171, i64 0, i32 4
  store ptr %172, ptr %memberidx1.i.i41.i, align 8
  store ptr %174, ptr %171, align 8
  %memberidx.i.i.i11.i.i = getelementptr inbounds %StatementNode, ptr %171, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i11.i.i, align 4
  %memberidx.i.i12.i.i = getelementptr inbounds %ExpressionNode, ptr %171, i64 0, i32 2
  store i64 13, ptr %memberidx.i.i12.i.i, align 4
  %175 = load ptr, ptr %expression.0.i, align 8
  %176 = load i64, ptr %173, align 4
  %177 = icmp eq i64 %176, 30
  br i1 %177, label %if.entry.i17.i.i, label %else.i23.i.i

if.entry.i17.i.i:                                 ; preds = %Parser_eat.exit.i.i
  %178 = load i64, ptr %memberidx.i.i.i.i35, align 4
  %179 = load ptr, ptr %0, align 8
  %memberidx2.i.i16.i.i = getelementptr inbounds %Array_Token_, ptr %179, i64 0, i32 2
  %180 = load i64, ptr %memberidx2.i.i16.i.i, align 4
  %181 = icmp slt i64 %178, %180
  br i1 %181, label %if.entry.i.i21.i.i, label %Parser_parse_index_expression.exit.i

if.entry.i.i21.i.i:                               ; preds = %if.entry.i17.i.i
  %182 = add nsw i64 %178, 1
  store i64 %182, ptr %memberidx.i.i.i.i35, align 4
  %memberidx.i.i.i19.i.i = getelementptr inbounds %Array_Token_, ptr %179, i64 0, i32 1
  %183 = load ptr, ptr %memberidx.i.i.i19.i.i, align 8
  %ptridx.i.i.i20.i.i = getelementptr inbounds ptr, ptr %183, i64 %182
  %184 = load ptr, ptr %ptridx.i.i.i20.i.i, align 8
  store ptr %184, ptr %memberidx, align 8
  br label %Parser_parse_index_expression.exit.i

else.i23.i.i:                                     ; preds = %Parser_eat.exit.i.i
  %185 = tail call ptr @malloc(i32 16)
  %186 = load ptr, ptr %memberidx1.i40.i, align 8
  store i64 46, ptr %185, align 4
  %memberidx1.i82.i25.i.i = getelementptr inbounds %Token, ptr %185, i64 0, i32 1
  store ptr %186, ptr %memberidx1.i82.i25.i.i, align 8
  br label %Parser_parse_index_expression.exit.i

Parser_parse_index_expression.exit.i:             ; preds = %else.i23.i.i, %if.entry.i.i21.i.i, %if.entry.i17.i.i
  %common.ret.op.i14.i.i = phi ptr [ %185, %else.i23.i.i ], [ %173, %if.entry.i.i21.i.i ], [ %173, %if.entry.i17.i.i ]
  %memberidx4.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i14.i.i, i64 0, i32 1
  %187 = load ptr, ptr %memberidx4.i.i, align 8
  %188 = tail call ptr @malloc(i32 32)
  %189 = load i64, ptr %175, align 4
  %memberidx1.i27.i.i = getelementptr inbounds %FloRange, ptr %187, i64 0, i32 1
  %190 = load i64, ptr %memberidx1.i27.i.i, align 4
  %memberidx2.i.i42.i = getelementptr inbounds %FloRange, ptr %175, i64 0, i32 2
  %191 = load i64, ptr %memberidx2.i.i42.i, align 4
  %memberidx3.i.i43.i = getelementptr inbounds %FloRange, ptr %187, i64 0, i32 3
  %192 = load i64, ptr %memberidx3.i.i43.i, align 4
  store i64 %189, ptr %188, align 4
  %memberidx1.i.i.i44.i = getelementptr inbounds %FloRange, ptr %188, i64 0, i32 1
  store i64 %190, ptr %memberidx1.i.i.i44.i, align 4
  %memberidx2.i.i28.i.i = getelementptr inbounds %FloRange, ptr %188, i64 0, i32 2
  store i64 %191, ptr %memberidx2.i.i28.i.i, align 4
  %memberidx3.i.i29.i.i = getelementptr inbounds %FloRange, ptr %188, i64 0, i32 3
  store i64 %192, ptr %memberidx3.i.i29.i.i, align 4
  store ptr %188, ptr %171, align 8
  br label %ifend.i

if.entry.i.i.i:                                   ; preds = %while.entry.i
  %193 = load i64, ptr %memberidx.i.i.i.i35, align 4
  %194 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %194, i64 0, i32 2
  %195 = load i64, ptr %memberidx2.i.i.i.i, align 4
  %196 = icmp slt i64 %193, %195
  br i1 %196, label %if.entry.i.i.i.i, label %Parser_parse_member_expression.exit.i

if.entry.i.i.i.i:                                 ; preds = %if.entry.i.i.i
  %197 = add nsw i64 %193, 1
  store i64 %197, ptr %memberidx.i.i.i.i35, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %194, i64 0, i32 1
  %198 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %198, i64 %197
  %199 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  store ptr %199, ptr %memberidx, align 8
  br label %Parser_parse_member_expression.exit.i

Parser_parse_member_expression.exit.i:            ; preds = %if.entry.i.i.i.i, %if.entry.i.i.i
  %200 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  %201 = tail call ptr @malloc(i32 40)
  %202 = load ptr, ptr %expression.0.i, align 8
  %memberidx1.i.i36 = getelementptr inbounds %Token, ptr %200, i64 0, i32 1
  %203 = load ptr, ptr %memberidx1.i.i36, align 8
  %204 = tail call ptr @malloc(i32 32)
  %205 = load i64, ptr %202, align 4
  %memberidx1.i.i.i37 = getelementptr inbounds %FloRange, ptr %203, i64 0, i32 1
  %206 = load i64, ptr %memberidx1.i.i.i37, align 4
  %memberidx2.i.i.i38 = getelementptr inbounds %FloRange, ptr %202, i64 0, i32 2
  %207 = load i64, ptr %memberidx2.i.i.i38, align 4
  %memberidx3.i.i.i39 = getelementptr inbounds %FloRange, ptr %203, i64 0, i32 3
  %208 = load i64, ptr %memberidx3.i.i.i39, align 4
  store i64 %205, ptr %204, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %204, i64 0, i32 1
  store i64 %206, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i5.i.i = getelementptr inbounds %FloRange, ptr %204, i64 0, i32 2
  store i64 %207, ptr %memberidx2.i.i5.i.i, align 4
  %memberidx3.i.i6.i.i = getelementptr inbounds %FloRange, ptr %204, i64 0, i32 3
  store i64 %208, ptr %memberidx3.i.i6.i.i, align 4
  store ptr %204, ptr %201, align 8
  %memberidx.i.i.i7.i.i = getelementptr inbounds %StatementNode, ptr %201, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i7.i.i, align 4
  %memberidx.i.i8.i.i = getelementptr inbounds %ExpressionNode, ptr %201, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i8.i.i, align 4
  %memberidx.i9.i.i = getelementptr inbounds %MemberExpressionNode, ptr %201, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i9.i.i, align 8
  %memberidx1.i10.i.i = getelementptr inbounds %MemberExpressionNode, ptr %201, i64 0, i32 4
  store ptr %200, ptr %memberidx1.i10.i.i, align 8
  br label %ifend.i

Parser_parse_lhs_expression_allow_call.exit:      ; preds = %while.entry.i, %ifend.i, %Parser_parse_atom.exit.i
  %209 = phi i64 [ %133, %Parser_parse_atom.exit.i ], [ %139, %while.entry.i ], [ %158, %ifend.i ]
  %210 = phi ptr [ %132, %Parser_parse_atom.exit.i ], [ %140, %while.entry.i ], [ %157, %ifend.i ]
  %expression.1.i = phi ptr [ %common.ret.op.i.i, %Parser_parse_atom.exit.i ], [ %expression.0.i, %while.entry.i ], [ %expression.2.i, %ifend.i ]
  switch i64 %209, label %common.ret42 [
    i64 23, label %ifend.i20
    i64 24, label %if.entry3.i
  ]

ifend.i20:                                        ; preds = %Parser_parse_lhs_expression_allow_call.exit, %if.entry3.i
  %op.0.i = phi i64 [ 5, %if.entry3.i ], [ 4, %Parser_parse_lhs_expression_allow_call.exit ]
  %memberidx.i.i18 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %211 = load i64, ptr %memberidx.i.i18, align 4
  %212 = load ptr, ptr %0, align 8
  %memberidx2.i.i19 = getelementptr inbounds %Array_Token_, ptr %212, i64 0, i32 2
  %213 = load i64, ptr %memberidx2.i.i19, align 4
  %214 = icmp slt i64 %211, %213
  br i1 %214, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %ifend.i20
  %215 = add nsw i64 %211, 1
  store i64 %215, ptr %memberidx.i.i18, align 4
  %memberidx.i.i.i22 = getelementptr inbounds %Array_Token_, ptr %212, i64 0, i32 1
  %216 = load ptr, ptr %memberidx.i.i.i22, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %216, i64 %215
  %217 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %217, ptr %memberidx, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %ifend.i20
  %218 = tail call ptr @malloc(i32 40)
  %219 = load ptr, ptr %expression.1.i, align 8
  %memberidx7.i = getelementptr inbounds %Token, ptr %210, i64 0, i32 1
  %220 = load ptr, ptr %memberidx7.i, align 8
  %221 = tail call ptr @malloc(i32 32)
  %222 = load i64, ptr %219, align 4
  %memberidx1.i.i23 = getelementptr inbounds %FloRange, ptr %220, i64 0, i32 1
  %223 = load i64, ptr %memberidx1.i.i23, align 4
  %memberidx2.i14.i = getelementptr inbounds %FloRange, ptr %219, i64 0, i32 2
  %224 = load i64, ptr %memberidx2.i14.i, align 4
  %memberidx3.i15.i = getelementptr inbounds %FloRange, ptr %220, i64 0, i32 3
  %225 = load i64, ptr %memberidx3.i15.i, align 4
  store i64 %222, ptr %221, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %221, i64 0, i32 1
  store i64 %223, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %221, i64 0, i32 2
  store i64 %224, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %221, i64 0, i32 3
  store i64 %225, ptr %memberidx3.i.i.i, align 4
  %memberidx.i16.i = getelementptr inbounds %UnaryExpressionNode, ptr %218, i64 0, i32 3
  store i64 %op.0.i, ptr %memberidx.i16.i, align 4
  %memberidx1.i17.i = getelementptr inbounds %UnaryExpressionNode, ptr %218, i64 0, i32 4
  store ptr %expression.1.i, ptr %memberidx1.i17.i, align 8
  store ptr %221, ptr %218, align 8
  br label %common.ret42.sink.split

if.entry3.i:                                      ; preds = %Parser_parse_lhs_expression_allow_call.exit
  br label %ifend.i20

ifend.fold.split:                                 ; preds = %1
  br label %ifend

ifend:                                            ; preds = %1, %ifend.fold.split, %Parser_is_unary_op.exit.fold.split28, %Parser_is_unary_op.exit.fold.split27, %Parser_is_unary_op.exit.fold.split
  %common.ret.op.i41 = phi i64 [ 8, %Parser_is_unary_op.exit.fold.split28 ], [ 6, %Parser_is_unary_op.exit.fold.split27 ], [ 3, %Parser_is_unary_op.exit.fold.split ], [ 2, %1 ], [ 1, %ifend.fold.split ]
  %memberidx.i8 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %226 = load i64, ptr %memberidx.i8, align 4
  %227 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %227, i64 0, i32 2
  %228 = load i64, ptr %memberidx2.i, align 4
  %229 = icmp slt i64 %226, %228
  br i1 %229, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %ifend
  %230 = add nsw i64 %226, 1
  store i64 %230, ptr %memberidx.i8, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %227, i64 0, i32 1
  %231 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %231, i64 %230
  %232 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %232, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %ifend, %if.entry.i
  %233 = tail call fastcc ptr @Parser_parse_unary_expression_pre(ptr nonnull %0)
  %234 = tail call ptr @malloc(i32 40)
  %235 = load ptr, ptr %233, align 8
  %236 = tail call ptr @malloc(i32 32)
  %237 = load i64, ptr %3, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %235, i64 0, i32 1
  %238 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i10 = getelementptr inbounds %FloRange, ptr %3, i64 0, i32 2
  %239 = load i64, ptr %memberidx2.i10, align 4
  %memberidx3.i11 = getelementptr inbounds %FloRange, ptr %235, i64 0, i32 3
  %240 = load i64, ptr %memberidx3.i11, align 4
  store i64 %237, ptr %236, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %236, i64 0, i32 1
  store i64 %238, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %236, i64 0, i32 2
  store i64 %239, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %236, i64 0, i32 3
  store i64 %240, ptr %memberidx3.i.i, align 4
  %memberidx.i12 = getelementptr inbounds %UnaryExpressionNode, ptr %234, i64 0, i32 3
  store i64 %common.ret.op.i41, ptr %memberidx.i12, align 4
  %memberidx1.i13 = getelementptr inbounds %UnaryExpressionNode, ptr %234, i64 0, i32 4
  store ptr %233, ptr %memberidx1.i13, align 8
  store ptr %236, ptr %234, align 8
  br label %common.ret42.sink.split
}

define internal fastcc ptr @Parser_eat(ptr nocapture %0, i64 %1) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, %1
  br i1 %5, label %if.entry, label %else

common.ret:                                       ; preds = %if.entry.i, %if.entry, %ifend4
  %common.ret.op = phi ptr [ %28, %ifend4 ], [ %3, %if.entry ], [ %3, %if.entry.i ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp slt i64 %6, %8
  br i1 %9, label %if.entry.i, label %common.ret

if.entry.i:                                       ; preds = %if.entry
  %10 = add nsw i64 %6, 1
  store i64 %10, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %12, ptr %memberidx, align 8
  br label %common.ret

else:                                             ; preds = %2
  switch i64 %1, label %ifend4 [
    i64 54, label %if.entry2
    i64 38, label %if.entry5
    i64 1, label %if.entry8
    i64 25, label %if.entry11
    i64 26, label %if.entry14
    i64 27, label %if.entry17
    i64 28, label %if.entry20
    i64 3, label %if.entry23
    i64 42, label %if.entry26
    i64 41, label %if.entry29
    i64 45, label %if.entry32
  ]

if.entry2:                                        ; preds = %else
  %13 = tail call ptr @malloc(i32 22)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(22) %13, ptr noundef nonnull align 8 dereferenceable(22) @50, i64 22, i1 false)
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i65 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i65, align 8
  %memberidx1.i.i66 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 22, ptr %memberidx1.i.i66, align 4
  %memberidx2.i.i67 = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 22, ptr %memberidx2.i.i67, align 4
  %memberidx.i68 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i68, align 8
  %16 = tail call ptr @malloc(i32 24)
  %17 = load ptr, ptr %memberidx, align 8
  %memberidx2.i70 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2.i70, align 8
  store i64 2, ptr %16, align 4
  %memberidx1.i.i71 = getelementptr inbounds %FloError, ptr %16, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i71, align 8
  %memberidx2.i.i72 = getelementptr inbounds %FloError, ptr %16, i64 0, i32 1
  store ptr %14, ptr %memberidx2.i.i72, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i.i73, align 4
  %memberidx1.i4.i74 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 3
  %20 = load i64, ptr %memberidx1.i4.i74, align 4
  %.not.i.i75 = icmp slt i64 %19, %20
  br i1 %.not.i.i75, label %if.entry2.Parser_error.exit81_crit_edge, label %if.entry.i.i78

if.entry2.Parser_error.exit81_crit_edge:          ; preds = %if.entry2
  %memberidx4.i.i79.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 1
  %.pre260 = load ptr, ptr %memberidx4.i.i79.phi.trans.insert, align 8
  br label %Parser_error.exit81

if.entry.i.i78:                                   ; preds = %if.entry2
  %21 = shl nuw i64 %20, 1
  store i64 %21, ptr %memberidx1.i4.i74, align 4
  %memberidx2.i.i.i77 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i.i77, align 8
  %23 = shl i64 %20, 4
  %24 = tail call ptr @realloc(ptr %22, i64 %23)
  store ptr %24, ptr %memberidx2.i.i.i77, align 8
  %.pre259 = load i64, ptr %memberidx.i.i73, align 4
  br label %Parser_error.exit81

Parser_error.exit81:                              ; preds = %if.entry2.Parser_error.exit81_crit_edge, %if.entry.i.i78
  %25 = phi ptr [ %.pre260, %if.entry2.Parser_error.exit81_crit_edge ], [ %24, %if.entry.i.i78 ]
  %26 = phi i64 [ %19, %if.entry2.Parser_error.exit81_crit_edge ], [ %.pre259, %if.entry.i.i78 ]
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %memberidx.i.i73, align 4
  %ptridx.i.i80 = getelementptr inbounds ptr, ptr %25, i64 %26
  store ptr %16, ptr %ptridx.i.i80, align 8
  br label %ifend4

ifend4:                                           ; preds = %else, %Parser_error.exit, %Parser_error.exit235, %Parser_error.exit218, %Parser_error.exit201, %Parser_error.exit184, %Parser_error.exit167, %Parser_error.exit150, %Parser_error.exit133, %Parser_error.exit116, %Parser_error.exit99, %Parser_error.exit81
  %28 = tail call ptr @malloc(i32 16)
  %memberidx35 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %29 = load ptr, ptr %memberidx35, align 8
  store i64 46, ptr %28, align 4
  %memberidx1.i82 = getelementptr inbounds %Token, ptr %28, i64 0, i32 1
  store ptr %29, ptr %memberidx1.i82, align 8
  br label %common.ret

if.entry5:                                        ; preds = %else
  %30 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %30, ptr noundef nonnull align 8 dereferenceable(12) @51, i64 12, i1 false)
  %31 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i83 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i83, align 8
  %memberidx1.i.i84 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i84, align 4
  %memberidx2.i.i85 = getelementptr inbounds %string, ptr %31, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i85, align 4
  %memberidx.i86 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i86, align 8
  %33 = tail call ptr @malloc(i32 24)
  %34 = load ptr, ptr %memberidx, align 8
  %memberidx2.i88 = getelementptr inbounds %Token, ptr %34, i64 0, i32 1
  %35 = load ptr, ptr %memberidx2.i88, align 8
  store i64 2, ptr %33, align 4
  %memberidx1.i.i89 = getelementptr inbounds %FloError, ptr %33, i64 0, i32 2
  store ptr %35, ptr %memberidx1.i.i89, align 8
  %memberidx2.i.i90 = getelementptr inbounds %FloError, ptr %33, i64 0, i32 1
  store ptr %31, ptr %memberidx2.i.i90, align 8
  %memberidx.i.i91 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 2
  %36 = load i64, ptr %memberidx.i.i91, align 4
  %memberidx1.i4.i92 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 3
  %37 = load i64, ptr %memberidx1.i4.i92, align 4
  %.not.i.i93 = icmp slt i64 %36, %37
  br i1 %.not.i.i93, label %if.entry5.Parser_error.exit99_crit_edge, label %if.entry.i.i96

if.entry5.Parser_error.exit99_crit_edge:          ; preds = %if.entry5
  %memberidx4.i.i97.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 1
  %.pre258 = load ptr, ptr %memberidx4.i.i97.phi.trans.insert, align 8
  br label %Parser_error.exit99

if.entry.i.i96:                                   ; preds = %if.entry5
  %38 = shl nuw i64 %37, 1
  store i64 %38, ptr %memberidx1.i4.i92, align 4
  %memberidx2.i.i.i95 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 1
  %39 = load ptr, ptr %memberidx2.i.i.i95, align 8
  %40 = shl i64 %37, 4
  %41 = tail call ptr @realloc(ptr %39, i64 %40)
  store ptr %41, ptr %memberidx2.i.i.i95, align 8
  %.pre257 = load i64, ptr %memberidx.i.i91, align 4
  br label %Parser_error.exit99

Parser_error.exit99:                              ; preds = %if.entry5.Parser_error.exit99_crit_edge, %if.entry.i.i96
  %42 = phi ptr [ %.pre258, %if.entry5.Parser_error.exit99_crit_edge ], [ %41, %if.entry.i.i96 ]
  %43 = phi i64 [ %36, %if.entry5.Parser_error.exit99_crit_edge ], [ %.pre257, %if.entry.i.i96 ]
  %44 = add nsw i64 %43, 1
  store i64 %44, ptr %memberidx.i.i91, align 4
  %ptridx.i.i98 = getelementptr inbounds ptr, ptr %42, i64 %43
  store ptr %33, ptr %ptridx.i.i98, align 8
  br label %ifend4

if.entry8:                                        ; preds = %else
  %45 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %45, ptr noundef nonnull align 8 dereferenceable(12) @52, i64 12, i1 false)
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i100 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i100, align 8
  %memberidx1.i.i101 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i101, align 4
  %memberidx2.i.i102 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i102, align 4
  %memberidx.i103 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i103, align 8
  %48 = tail call ptr @malloc(i32 24)
  %49 = load ptr, ptr %memberidx, align 8
  %memberidx2.i105 = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx2.i105, align 8
  store i64 2, ptr %48, align 4
  %memberidx1.i.i106 = getelementptr inbounds %FloError, ptr %48, i64 0, i32 2
  store ptr %50, ptr %memberidx1.i.i106, align 8
  %memberidx2.i.i107 = getelementptr inbounds %FloError, ptr %48, i64 0, i32 1
  store ptr %46, ptr %memberidx2.i.i107, align 8
  %memberidx.i.i108 = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %51 = load i64, ptr %memberidx.i.i108, align 4
  %memberidx1.i4.i109 = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 3
  %52 = load i64, ptr %memberidx1.i4.i109, align 4
  %.not.i.i110 = icmp slt i64 %51, %52
  br i1 %.not.i.i110, label %if.entry8.Parser_error.exit116_crit_edge, label %if.entry.i.i113

if.entry8.Parser_error.exit116_crit_edge:         ; preds = %if.entry8
  %memberidx4.i.i114.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %.pre256 = load ptr, ptr %memberidx4.i.i114.phi.trans.insert, align 8
  br label %Parser_error.exit116

if.entry.i.i113:                                  ; preds = %if.entry8
  %53 = shl nuw i64 %52, 1
  store i64 %53, ptr %memberidx1.i4.i109, align 4
  %memberidx2.i.i.i112 = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %54 = load ptr, ptr %memberidx2.i.i.i112, align 8
  %55 = shl i64 %52, 4
  %56 = tail call ptr @realloc(ptr %54, i64 %55)
  store ptr %56, ptr %memberidx2.i.i.i112, align 8
  %.pre255 = load i64, ptr %memberidx.i.i108, align 4
  br label %Parser_error.exit116

Parser_error.exit116:                             ; preds = %if.entry8.Parser_error.exit116_crit_edge, %if.entry.i.i113
  %57 = phi ptr [ %.pre256, %if.entry8.Parser_error.exit116_crit_edge ], [ %56, %if.entry.i.i113 ]
  %58 = phi i64 [ %51, %if.entry8.Parser_error.exit116_crit_edge ], [ %.pre255, %if.entry.i.i113 ]
  %59 = add nsw i64 %58, 1
  store i64 %59, ptr %memberidx.i.i108, align 4
  %ptridx.i.i115 = getelementptr inbounds ptr, ptr %57, i64 %58
  store ptr %48, ptr %ptridx.i.i115, align 8
  br label %ifend4

if.entry11:                                       ; preds = %else
  %60 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %60, ptr noundef nonnull align 8 dereferenceable(12) @53, i64 12, i1 false)
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i117 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i117, align 8
  %memberidx1.i.i118 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i118, align 4
  %memberidx2.i.i119 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i119, align 4
  %memberidx.i120 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i120, align 8
  %63 = tail call ptr @malloc(i32 24)
  %64 = load ptr, ptr %memberidx, align 8
  %memberidx2.i122 = getelementptr inbounds %Token, ptr %64, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i122, align 8
  store i64 2, ptr %63, align 4
  %memberidx1.i.i123 = getelementptr inbounds %FloError, ptr %63, i64 0, i32 2
  store ptr %65, ptr %memberidx1.i.i123, align 8
  %memberidx2.i.i124 = getelementptr inbounds %FloError, ptr %63, i64 0, i32 1
  store ptr %61, ptr %memberidx2.i.i124, align 8
  %memberidx.i.i125 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 2
  %66 = load i64, ptr %memberidx.i.i125, align 4
  %memberidx1.i4.i126 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 3
  %67 = load i64, ptr %memberidx1.i4.i126, align 4
  %.not.i.i127 = icmp slt i64 %66, %67
  br i1 %.not.i.i127, label %if.entry11.Parser_error.exit133_crit_edge, label %if.entry.i.i130

if.entry11.Parser_error.exit133_crit_edge:        ; preds = %if.entry11
  %memberidx4.i.i131.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 1
  %.pre254 = load ptr, ptr %memberidx4.i.i131.phi.trans.insert, align 8
  br label %Parser_error.exit133

if.entry.i.i130:                                  ; preds = %if.entry11
  %68 = shl nuw i64 %67, 1
  store i64 %68, ptr %memberidx1.i4.i126, align 4
  %memberidx2.i.i.i129 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 1
  %69 = load ptr, ptr %memberidx2.i.i.i129, align 8
  %70 = shl i64 %67, 4
  %71 = tail call ptr @realloc(ptr %69, i64 %70)
  store ptr %71, ptr %memberidx2.i.i.i129, align 8
  %.pre253 = load i64, ptr %memberidx.i.i125, align 4
  br label %Parser_error.exit133

Parser_error.exit133:                             ; preds = %if.entry11.Parser_error.exit133_crit_edge, %if.entry.i.i130
  %72 = phi ptr [ %.pre254, %if.entry11.Parser_error.exit133_crit_edge ], [ %71, %if.entry.i.i130 ]
  %73 = phi i64 [ %66, %if.entry11.Parser_error.exit133_crit_edge ], [ %.pre253, %if.entry.i.i130 ]
  %74 = add nsw i64 %73, 1
  store i64 %74, ptr %memberidx.i.i125, align 4
  %ptridx.i.i132 = getelementptr inbounds ptr, ptr %72, i64 %73
  store ptr %63, ptr %ptridx.i.i132, align 8
  br label %ifend4

if.entry14:                                       ; preds = %else
  %75 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %75, ptr noundef nonnull align 8 dereferenceable(12) @54, i64 12, i1 false)
  %76 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %76, align 8
  %memberidx.i.i134 = getelementptr inbounds %string, ptr %76, i64 0, i32 1
  store ptr %75, ptr %memberidx.i.i134, align 8
  %memberidx1.i.i135 = getelementptr inbounds %string, ptr %76, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i135, align 4
  %memberidx2.i.i136 = getelementptr inbounds %string, ptr %76, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i136, align 4
  %memberidx.i137 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i137, align 8
  %78 = tail call ptr @malloc(i32 24)
  %79 = load ptr, ptr %memberidx, align 8
  %memberidx2.i139 = getelementptr inbounds %Token, ptr %79, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i139, align 8
  store i64 2, ptr %78, align 4
  %memberidx1.i.i140 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 2
  store ptr %80, ptr %memberidx1.i.i140, align 8
  %memberidx2.i.i141 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 1
  store ptr %76, ptr %memberidx2.i.i141, align 8
  %memberidx.i.i142 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 2
  %81 = load i64, ptr %memberidx.i.i142, align 4
  %memberidx1.i4.i143 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 3
  %82 = load i64, ptr %memberidx1.i4.i143, align 4
  %.not.i.i144 = icmp slt i64 %81, %82
  br i1 %.not.i.i144, label %if.entry14.Parser_error.exit150_crit_edge, label %if.entry.i.i147

if.entry14.Parser_error.exit150_crit_edge:        ; preds = %if.entry14
  %memberidx4.i.i148.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 1
  %.pre252 = load ptr, ptr %memberidx4.i.i148.phi.trans.insert, align 8
  br label %Parser_error.exit150

if.entry.i.i147:                                  ; preds = %if.entry14
  %83 = shl nuw i64 %82, 1
  store i64 %83, ptr %memberidx1.i4.i143, align 4
  %memberidx2.i.i.i146 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 1
  %84 = load ptr, ptr %memberidx2.i.i.i146, align 8
  %85 = shl i64 %82, 4
  %86 = tail call ptr @realloc(ptr %84, i64 %85)
  store ptr %86, ptr %memberidx2.i.i.i146, align 8
  %.pre251 = load i64, ptr %memberidx.i.i142, align 4
  br label %Parser_error.exit150

Parser_error.exit150:                             ; preds = %if.entry14.Parser_error.exit150_crit_edge, %if.entry.i.i147
  %87 = phi ptr [ %.pre252, %if.entry14.Parser_error.exit150_crit_edge ], [ %86, %if.entry.i.i147 ]
  %88 = phi i64 [ %81, %if.entry14.Parser_error.exit150_crit_edge ], [ %.pre251, %if.entry.i.i147 ]
  %89 = add nsw i64 %88, 1
  store i64 %89, ptr %memberidx.i.i142, align 4
  %ptridx.i.i149 = getelementptr inbounds ptr, ptr %87, i64 %88
  store ptr %78, ptr %ptridx.i.i149, align 8
  br label %ifend4

if.entry17:                                       ; preds = %else
  %90 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %90, ptr noundef nonnull align 8 dereferenceable(12) @55, i64 12, i1 false)
  %91 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %91, align 8
  %memberidx.i.i151 = getelementptr inbounds %string, ptr %91, i64 0, i32 1
  store ptr %90, ptr %memberidx.i.i151, align 8
  %memberidx1.i.i152 = getelementptr inbounds %string, ptr %91, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i152, align 4
  %memberidx2.i.i153 = getelementptr inbounds %string, ptr %91, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i153, align 4
  %memberidx.i154 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i154, align 8
  %93 = tail call ptr @malloc(i32 24)
  %94 = load ptr, ptr %memberidx, align 8
  %memberidx2.i156 = getelementptr inbounds %Token, ptr %94, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i156, align 8
  store i64 2, ptr %93, align 4
  %memberidx1.i.i157 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 2
  store ptr %95, ptr %memberidx1.i.i157, align 8
  %memberidx2.i.i158 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 1
  store ptr %91, ptr %memberidx2.i.i158, align 8
  %memberidx.i.i159 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 2
  %96 = load i64, ptr %memberidx.i.i159, align 4
  %memberidx1.i4.i160 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 3
  %97 = load i64, ptr %memberidx1.i4.i160, align 4
  %.not.i.i161 = icmp slt i64 %96, %97
  br i1 %.not.i.i161, label %if.entry17.Parser_error.exit167_crit_edge, label %if.entry.i.i164

if.entry17.Parser_error.exit167_crit_edge:        ; preds = %if.entry17
  %memberidx4.i.i165.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %.pre250 = load ptr, ptr %memberidx4.i.i165.phi.trans.insert, align 8
  br label %Parser_error.exit167

if.entry.i.i164:                                  ; preds = %if.entry17
  %98 = shl nuw i64 %97, 1
  store i64 %98, ptr %memberidx1.i4.i160, align 4
  %memberidx2.i.i.i163 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %99 = load ptr, ptr %memberidx2.i.i.i163, align 8
  %100 = shl i64 %97, 4
  %101 = tail call ptr @realloc(ptr %99, i64 %100)
  store ptr %101, ptr %memberidx2.i.i.i163, align 8
  %.pre249 = load i64, ptr %memberidx.i.i159, align 4
  br label %Parser_error.exit167

Parser_error.exit167:                             ; preds = %if.entry17.Parser_error.exit167_crit_edge, %if.entry.i.i164
  %102 = phi ptr [ %.pre250, %if.entry17.Parser_error.exit167_crit_edge ], [ %101, %if.entry.i.i164 ]
  %103 = phi i64 [ %96, %if.entry17.Parser_error.exit167_crit_edge ], [ %.pre249, %if.entry.i.i164 ]
  %104 = add nsw i64 %103, 1
  store i64 %104, ptr %memberidx.i.i159, align 4
  %ptridx.i.i166 = getelementptr inbounds ptr, ptr %102, i64 %103
  store ptr %93, ptr %ptridx.i.i166, align 8
  br label %ifend4

if.entry20:                                       ; preds = %else
  %105 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %105, ptr noundef nonnull align 8 dereferenceable(12) @56, i64 12, i1 false)
  %106 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %106, align 8
  %memberidx.i.i168 = getelementptr inbounds %string, ptr %106, i64 0, i32 1
  store ptr %105, ptr %memberidx.i.i168, align 8
  %memberidx1.i.i169 = getelementptr inbounds %string, ptr %106, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i169, align 4
  %memberidx2.i.i170 = getelementptr inbounds %string, ptr %106, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i170, align 4
  %memberidx.i171 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i171, align 8
  %108 = tail call ptr @malloc(i32 24)
  %109 = load ptr, ptr %memberidx, align 8
  %memberidx2.i173 = getelementptr inbounds %Token, ptr %109, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i173, align 8
  store i64 2, ptr %108, align 4
  %memberidx1.i.i174 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 2
  store ptr %110, ptr %memberidx1.i.i174, align 8
  %memberidx2.i.i175 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 1
  store ptr %106, ptr %memberidx2.i.i175, align 8
  %memberidx.i.i176 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 2
  %111 = load i64, ptr %memberidx.i.i176, align 4
  %memberidx1.i4.i177 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 3
  %112 = load i64, ptr %memberidx1.i4.i177, align 4
  %.not.i.i178 = icmp slt i64 %111, %112
  br i1 %.not.i.i178, label %if.entry20.Parser_error.exit184_crit_edge, label %if.entry.i.i181

if.entry20.Parser_error.exit184_crit_edge:        ; preds = %if.entry20
  %memberidx4.i.i182.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %.pre248 = load ptr, ptr %memberidx4.i.i182.phi.trans.insert, align 8
  br label %Parser_error.exit184

if.entry.i.i181:                                  ; preds = %if.entry20
  %113 = shl nuw i64 %112, 1
  store i64 %113, ptr %memberidx1.i4.i177, align 4
  %memberidx2.i.i.i180 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %114 = load ptr, ptr %memberidx2.i.i.i180, align 8
  %115 = shl i64 %112, 4
  %116 = tail call ptr @realloc(ptr %114, i64 %115)
  store ptr %116, ptr %memberidx2.i.i.i180, align 8
  %.pre247 = load i64, ptr %memberidx.i.i176, align 4
  br label %Parser_error.exit184

Parser_error.exit184:                             ; preds = %if.entry20.Parser_error.exit184_crit_edge, %if.entry.i.i181
  %117 = phi ptr [ %.pre248, %if.entry20.Parser_error.exit184_crit_edge ], [ %116, %if.entry.i.i181 ]
  %118 = phi i64 [ %111, %if.entry20.Parser_error.exit184_crit_edge ], [ %.pre247, %if.entry.i.i181 ]
  %119 = add nsw i64 %118, 1
  store i64 %119, ptr %memberidx.i.i176, align 4
  %ptridx.i.i183 = getelementptr inbounds ptr, ptr %117, i64 %118
  store ptr %108, ptr %ptridx.i.i183, align 8
  br label %ifend4

if.entry23:                                       ; preds = %else
  %120 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %120, ptr noundef nonnull align 8 dereferenceable(12) @57, i64 12, i1 false)
  %121 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %121, align 8
  %memberidx.i.i185 = getelementptr inbounds %string, ptr %121, i64 0, i32 1
  store ptr %120, ptr %memberidx.i.i185, align 8
  %memberidx1.i.i186 = getelementptr inbounds %string, ptr %121, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i186, align 4
  %memberidx2.i.i187 = getelementptr inbounds %string, ptr %121, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i187, align 4
  %memberidx.i188 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %122 = load ptr, ptr %memberidx.i188, align 8
  %123 = tail call ptr @malloc(i32 24)
  %124 = load ptr, ptr %memberidx, align 8
  %memberidx2.i190 = getelementptr inbounds %Token, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx2.i190, align 8
  store i64 2, ptr %123, align 4
  %memberidx1.i.i191 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 2
  store ptr %125, ptr %memberidx1.i.i191, align 8
  %memberidx2.i.i192 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 1
  store ptr %121, ptr %memberidx2.i.i192, align 8
  %memberidx.i.i193 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 2
  %126 = load i64, ptr %memberidx.i.i193, align 4
  %memberidx1.i4.i194 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 3
  %127 = load i64, ptr %memberidx1.i4.i194, align 4
  %.not.i.i195 = icmp slt i64 %126, %127
  br i1 %.not.i.i195, label %if.entry23.Parser_error.exit201_crit_edge, label %if.entry.i.i198

if.entry23.Parser_error.exit201_crit_edge:        ; preds = %if.entry23
  %memberidx4.i.i199.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %.pre246 = load ptr, ptr %memberidx4.i.i199.phi.trans.insert, align 8
  br label %Parser_error.exit201

if.entry.i.i198:                                  ; preds = %if.entry23
  %128 = shl nuw i64 %127, 1
  store i64 %128, ptr %memberidx1.i4.i194, align 4
  %memberidx2.i.i.i197 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %129 = load ptr, ptr %memberidx2.i.i.i197, align 8
  %130 = shl i64 %127, 4
  %131 = tail call ptr @realloc(ptr %129, i64 %130)
  store ptr %131, ptr %memberidx2.i.i.i197, align 8
  %.pre245 = load i64, ptr %memberidx.i.i193, align 4
  br label %Parser_error.exit201

Parser_error.exit201:                             ; preds = %if.entry23.Parser_error.exit201_crit_edge, %if.entry.i.i198
  %132 = phi ptr [ %.pre246, %if.entry23.Parser_error.exit201_crit_edge ], [ %131, %if.entry.i.i198 ]
  %133 = phi i64 [ %126, %if.entry23.Parser_error.exit201_crit_edge ], [ %.pre245, %if.entry.i.i198 ]
  %134 = add nsw i64 %133, 1
  store i64 %134, ptr %memberidx.i.i193, align 4
  %ptridx.i.i200 = getelementptr inbounds ptr, ptr %132, i64 %133
  store ptr %123, ptr %ptridx.i.i200, align 8
  br label %ifend4

if.entry26:                                       ; preds = %else
  %135 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %135, ptr noundef nonnull align 8 dereferenceable(12) @58, i64 12, i1 false)
  %136 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %136, align 8
  %memberidx.i.i202 = getelementptr inbounds %string, ptr %136, i64 0, i32 1
  store ptr %135, ptr %memberidx.i.i202, align 8
  %memberidx1.i.i203 = getelementptr inbounds %string, ptr %136, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i203, align 4
  %memberidx2.i.i204 = getelementptr inbounds %string, ptr %136, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i204, align 4
  %memberidx.i205 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %137 = load ptr, ptr %memberidx.i205, align 8
  %138 = tail call ptr @malloc(i32 24)
  %139 = load ptr, ptr %memberidx, align 8
  %memberidx2.i207 = getelementptr inbounds %Token, ptr %139, i64 0, i32 1
  %140 = load ptr, ptr %memberidx2.i207, align 8
  store i64 2, ptr %138, align 4
  %memberidx1.i.i208 = getelementptr inbounds %FloError, ptr %138, i64 0, i32 2
  store ptr %140, ptr %memberidx1.i.i208, align 8
  %memberidx2.i.i209 = getelementptr inbounds %FloError, ptr %138, i64 0, i32 1
  store ptr %136, ptr %memberidx2.i.i209, align 8
  %memberidx.i.i210 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 2
  %141 = load i64, ptr %memberidx.i.i210, align 4
  %memberidx1.i4.i211 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 3
  %142 = load i64, ptr %memberidx1.i4.i211, align 4
  %.not.i.i212 = icmp slt i64 %141, %142
  br i1 %.not.i.i212, label %if.entry26.Parser_error.exit218_crit_edge, label %if.entry.i.i215

if.entry26.Parser_error.exit218_crit_edge:        ; preds = %if.entry26
  %memberidx4.i.i216.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 1
  %.pre244 = load ptr, ptr %memberidx4.i.i216.phi.trans.insert, align 8
  br label %Parser_error.exit218

if.entry.i.i215:                                  ; preds = %if.entry26
  %143 = shl nuw i64 %142, 1
  store i64 %143, ptr %memberidx1.i4.i211, align 4
  %memberidx2.i.i.i214 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 1
  %144 = load ptr, ptr %memberidx2.i.i.i214, align 8
  %145 = shl i64 %142, 4
  %146 = tail call ptr @realloc(ptr %144, i64 %145)
  store ptr %146, ptr %memberidx2.i.i.i214, align 8
  %.pre243 = load i64, ptr %memberidx.i.i210, align 4
  br label %Parser_error.exit218

Parser_error.exit218:                             ; preds = %if.entry26.Parser_error.exit218_crit_edge, %if.entry.i.i215
  %147 = phi ptr [ %.pre244, %if.entry26.Parser_error.exit218_crit_edge ], [ %146, %if.entry.i.i215 ]
  %148 = phi i64 [ %141, %if.entry26.Parser_error.exit218_crit_edge ], [ %.pre243, %if.entry.i.i215 ]
  %149 = add nsw i64 %148, 1
  store i64 %149, ptr %memberidx.i.i210, align 4
  %ptridx.i.i217 = getelementptr inbounds ptr, ptr %147, i64 %148
  store ptr %138, ptr %ptridx.i.i217, align 8
  br label %ifend4

if.entry29:                                       ; preds = %else
  %150 = tail call ptr @malloc(i32 12)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %150, ptr noundef nonnull align 8 dereferenceable(12) @59, i64 12, i1 false)
  %151 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %151, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %151, i64 0, i32 1
  store ptr %150, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %151, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %151, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i221, align 4
  %memberidx.i222 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %152 = load ptr, ptr %memberidx.i222, align 8
  %153 = tail call ptr @malloc(i32 24)
  %154 = load ptr, ptr %memberidx, align 8
  %memberidx2.i224 = getelementptr inbounds %Token, ptr %154, i64 0, i32 1
  %155 = load ptr, ptr %memberidx2.i224, align 8
  store i64 2, ptr %153, align 4
  %memberidx1.i.i225 = getelementptr inbounds %FloError, ptr %153, i64 0, i32 2
  store ptr %155, ptr %memberidx1.i.i225, align 8
  %memberidx2.i.i226 = getelementptr inbounds %FloError, ptr %153, i64 0, i32 1
  store ptr %151, ptr %memberidx2.i.i226, align 8
  %memberidx.i.i227 = getelementptr inbounds %Array_FloError_, ptr %152, i64 0, i32 2
  %156 = load i64, ptr %memberidx.i.i227, align 4
  %memberidx1.i4.i228 = getelementptr inbounds %Array_FloError_, ptr %152, i64 0, i32 3
  %157 = load i64, ptr %memberidx1.i4.i228, align 4
  %.not.i.i229 = icmp slt i64 %156, %157
  br i1 %.not.i.i229, label %if.entry29.Parser_error.exit235_crit_edge, label %if.entry.i.i232

if.entry29.Parser_error.exit235_crit_edge:        ; preds = %if.entry29
  %memberidx4.i.i233.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %152, i64 0, i32 1
  %.pre242 = load ptr, ptr %memberidx4.i.i233.phi.trans.insert, align 8
  br label %Parser_error.exit235

if.entry.i.i232:                                  ; preds = %if.entry29
  %158 = shl nuw i64 %157, 1
  store i64 %158, ptr %memberidx1.i4.i228, align 4
  %memberidx2.i.i.i231 = getelementptr inbounds %Array_FloError_, ptr %152, i64 0, i32 1
  %159 = load ptr, ptr %memberidx2.i.i.i231, align 8
  %160 = shl i64 %157, 4
  %161 = tail call ptr @realloc(ptr %159, i64 %160)
  store ptr %161, ptr %memberidx2.i.i.i231, align 8
  %.pre241 = load i64, ptr %memberidx.i.i227, align 4
  br label %Parser_error.exit235

Parser_error.exit235:                             ; preds = %if.entry29.Parser_error.exit235_crit_edge, %if.entry.i.i232
  %162 = phi ptr [ %.pre242, %if.entry29.Parser_error.exit235_crit_edge ], [ %161, %if.entry.i.i232 ]
  %163 = phi i64 [ %156, %if.entry29.Parser_error.exit235_crit_edge ], [ %.pre241, %if.entry.i.i232 ]
  %164 = add nsw i64 %163, 1
  store i64 %164, ptr %memberidx.i.i227, align 4
  %ptridx.i.i234 = getelementptr inbounds ptr, ptr %162, i64 %163
  store ptr %153, ptr %ptridx.i.i234, align 8
  br label %ifend4

if.entry32:                                       ; preds = %else
  %165 = tail call ptr @malloc(i32 13)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(13) %165, ptr noundef nonnull align 8 dereferenceable(13) @60, i64 13, i1 false)
  %166 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %166, align 8
  %memberidx.i.i236 = getelementptr inbounds %string, ptr %166, i64 0, i32 1
  store ptr %165, ptr %memberidx.i.i236, align 8
  %memberidx1.i.i237 = getelementptr inbounds %string, ptr %166, i64 0, i32 2
  store i64 13, ptr %memberidx1.i.i237, align 4
  %memberidx2.i.i238 = getelementptr inbounds %string, ptr %166, i64 0, i32 3
  store i64 13, ptr %memberidx2.i.i238, align 4
  %memberidx.i61 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %167 = load ptr, ptr %memberidx.i61, align 8
  %168 = tail call ptr @malloc(i32 24)
  %169 = load ptr, ptr %memberidx, align 8
  %memberidx2.i62 = getelementptr inbounds %Token, ptr %169, i64 0, i32 1
  %170 = load ptr, ptr %memberidx2.i62, align 8
  store i64 2, ptr %168, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %168, i64 0, i32 2
  store ptr %170, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %168, i64 0, i32 1
  store ptr %166, ptr %memberidx2.i.i, align 8
  %memberidx.i.i63 = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 2
  %171 = load i64, ptr %memberidx.i.i63, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 3
  %172 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %171, %172
  br i1 %.not.i.i, label %if.entry32.Parser_error.exit_crit_edge, label %if.entry.i.i

if.entry32.Parser_error.exit_crit_edge:           ; preds = %if.entry32
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 1
  %.pre240 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit

if.entry.i.i:                                     ; preds = %if.entry32
  %173 = shl nuw i64 %172, 1
  store i64 %173, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 1
  %174 = load ptr, ptr %memberidx2.i.i.i, align 8
  %175 = shl i64 %172, 4
  %176 = tail call ptr @realloc(ptr %174, i64 %175)
  store ptr %176, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i63, align 4
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %if.entry32.Parser_error.exit_crit_edge, %if.entry.i.i
  %177 = phi ptr [ %.pre240, %if.entry32.Parser_error.exit_crit_edge ], [ %176, %if.entry.i.i ]
  %178 = phi i64 [ %171, %if.entry32.Parser_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %179 = add nsw i64 %178, 1
  store i64 %179, ptr %memberidx.i.i63, align 4
  %ptridx.i.i64 = getelementptr inbounds ptr, ptr %177, i64 %178
  store ptr %168, ptr %ptridx.i.i64, align 8
  br label %ifend4
}

define internal fastcc ptr @Parser_parse_term_expression(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_parse_unary_expression_pre(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  switch i64 %4, label %ifend7.i [
    i64 4, label %Parser_is_term_expr_op.exit
    i64 7, label %Parser_is_term_expr_op.exit.fold.split
    i64 10, label %Parser_is_term_expr_op.exit.fold.split30
  ]

ifend7.i:                                         ; preds = %1
  %5 = icmp eq i64 %4, 11
  %spec.select.i = select i1 %5, i64 6, i64 0
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit.fold.split:           ; preds = %1
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit.fold.split30:         ; preds = %1
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit:                      ; preds = %1, %Parser_is_term_expr_op.exit.fold.split30, %Parser_is_term_expr_op.exit.fold.split, %ifend7.i
  %common.ret.op.i = phi i64 [ 3, %1 ], [ %spec.select.i, %ifend7.i ], [ 4, %Parser_is_term_expr_op.exit.fold.split ], [ 5, %Parser_is_term_expr_op.exit.fold.split30 ]
  %6 = icmp ne i64 %common.ret.op.i, 0
  %7 = icmp ne i64 %4, 46
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_is_term_expr_op.exit
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_term_expr_op.exit24
  %unary.0 = phi ptr [ %20, %Parser_is_term_expr_op.exit24 ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_is_term_expr_op.exit24 ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = tail call fastcc ptr @Parser_parse_unary_expression_pre(ptr nonnull %0)
  %22 = load ptr, ptr %unary.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i15 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i15, align 4
  %memberidx2.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %unary.0, ptr %memberidx2.i16, align 8
  %memberidx3.i17 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i17, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  switch i64 %30, label %ifend7.i23 [
    i64 4, label %Parser_is_term_expr_op.exit24
    i64 7, label %Parser_is_term_expr_op.exit24.fold.split
    i64 10, label %Parser_is_term_expr_op.exit24.fold.split31
  ]

ifend7.i23:                                       ; preds = %Parser_advance.exit
  %31 = icmp eq i64 %30, 11
  %spec.select.i22 = select i1 %31, i64 6, i64 0
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24.fold.split:         ; preds = %Parser_advance.exit
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24.fold.split31:       ; preds = %Parser_advance.exit
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24:                    ; preds = %Parser_advance.exit, %Parser_is_term_expr_op.exit24.fold.split31, %Parser_is_term_expr_op.exit24.fold.split, %ifend7.i23
  %common.ret.op.i19 = phi i64 [ 3, %Parser_advance.exit ], [ %spec.select.i22, %ifend7.i23 ], [ 4, %Parser_is_term_expr_op.exit24.fold.split ], [ 5, %Parser_is_term_expr_op.exit24.fold.split31 ]
  %32 = icmp ne i64 %common.ret.op.i19, 0
  %33 = icmp ne i64 %30, 46
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i27 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i27, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  %38 = and i1 %32, %37
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_is_term_expr_op.exit24, %Parser_is_term_expr_op.exit
  %unary.1 = phi ptr [ %2, %Parser_is_term_expr_op.exit ], [ %20, %Parser_is_term_expr_op.exit24 ]
  ret ptr %unary.1
}

define internal fastcc ptr @Parser_parse_arithmetic_expression(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_parse_term_expression(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx3.i, align 4
  %7 = icmp eq i64 %6, 0
  %8 = add i64 %4, -5
  %9 = icmp ult i64 %8, 2
  %10 = and i1 %9, %7
  br i1 %10, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %1
  %11 = icmp eq i64 %4, 6
  %12 = icmp eq i64 %4, 5
  %spec.select.i = select i1 %12, i64 2, i64 0
  %common.ret.op.i = select i1 %11, i64 1, i64 %spec.select.i
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_advance.exit
  %term.0 = phi ptr [ %20, %Parser_advance.exit ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_advance.exit ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = tail call fastcc ptr @Parser_parse_term_expression(ptr nonnull %0)
  %22 = load ptr, ptr %term.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i14 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i14, align 4
  %memberidx2.i15 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %term.0, ptr %memberidx2.i15, align 8
  %memberidx3.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i16, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp eq i64 %30, 6
  %32 = icmp eq i64 %30, 5
  %spec.select.i18 = select i1 %32, i64 2, i64 0
  %common.ret.op.i19 = select i1 %31, i64 1, i64 %spec.select.i18
  %33 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i22 = getelementptr inbounds %Array_FloError_, ptr %33, i64 0, i32 2
  %34 = load i64, ptr %memberidx3.i22, align 4
  %35 = icmp eq i64 %34, 0
  %36 = add i64 %30, -5
  %37 = icmp ult i64 %36, 2
  %38 = and i1 %37, %35
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_advance.exit, %1
  %term.1 = phi ptr [ %2, %1 ], [ %20, %Parser_advance.exit ]
  ret ptr %term.1
}

define internal fastcc ptr @Parser_parse_bitshift_expression(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_parse_arithmetic_expression(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  switch i64 %4, label %ifend4.i [
    i64 48, label %Parser_is_bitshift_expr_op.exit
    i64 49, label %Parser_is_bitshift_expr_op.exit.fold.split
  ]

ifend4.i:                                         ; preds = %1
  %5 = icmp eq i64 %4, 51
  %spec.select.i = select i1 %5, i64 17, i64 0
  br label %Parser_is_bitshift_expr_op.exit

Parser_is_bitshift_expr_op.exit.fold.split:       ; preds = %1
  br label %Parser_is_bitshift_expr_op.exit

Parser_is_bitshift_expr_op.exit:                  ; preds = %1, %Parser_is_bitshift_expr_op.exit.fold.split, %ifend4.i
  %common.ret.op.i = phi i64 [ 13, %1 ], [ %spec.select.i, %ifend4.i ], [ 14, %Parser_is_bitshift_expr_op.exit.fold.split ]
  %6 = icmp ne i64 %common.ret.op.i, 0
  %7 = icmp ne i64 %4, 46
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_is_bitshift_expr_op.exit
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_bitshift_expr_op.exit23
  %arith.0 = phi ptr [ %20, %Parser_is_bitshift_expr_op.exit23 ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_is_bitshift_expr_op.exit23 ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = tail call fastcc ptr @Parser_parse_arithmetic_expression(ptr nonnull %0)
  %22 = load ptr, ptr %arith.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i15 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i15, align 4
  %memberidx2.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %arith.0, ptr %memberidx2.i16, align 8
  %memberidx3.i17 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i17, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  switch i64 %30, label %ifend4.i22 [
    i64 48, label %Parser_is_bitshift_expr_op.exit23
    i64 49, label %Parser_is_bitshift_expr_op.exit23.fold.split
  ]

ifend4.i22:                                       ; preds = %Parser_advance.exit
  %31 = icmp eq i64 %30, 51
  %spec.select.i21 = select i1 %31, i64 17, i64 0
  br label %Parser_is_bitshift_expr_op.exit23

Parser_is_bitshift_expr_op.exit23.fold.split:     ; preds = %Parser_advance.exit
  br label %Parser_is_bitshift_expr_op.exit23

Parser_is_bitshift_expr_op.exit23:                ; preds = %Parser_advance.exit, %Parser_is_bitshift_expr_op.exit23.fold.split, %ifend4.i22
  %common.ret.op.i19 = phi i64 [ 13, %Parser_advance.exit ], [ %spec.select.i21, %ifend4.i22 ], [ 14, %Parser_is_bitshift_expr_op.exit23.fold.split ]
  %32 = icmp ne i64 %common.ret.op.i19, 0
  %33 = icmp ne i64 %30, 46
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i26 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i26, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  %38 = and i1 %32, %37
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_is_bitshift_expr_op.exit23, %Parser_is_bitshift_expr_op.exit
  %arith.1 = phi ptr [ %2, %Parser_is_bitshift_expr_op.exit ], [ %20, %Parser_is_bitshift_expr_op.exit23 ]
  ret ptr %arith.1
}

define internal fastcc ptr @Parser_parse_comparasion_expression(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 47
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %Parser_is_comp_expr_op.exit47, %Parser_is_comp_expr_op.exit, %Parser_advance.exit
  %common.ret.op = phi ptr [ %14, %Parser_advance.exit ], [ %21, %Parser_is_comp_expr_op.exit ], [ %40, %Parser_is_comp_expr_op.exit47 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp slt i64 %6, %8
  br i1 %9, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry
  %10 = add nsw i64 %6, 1
  store i64 %10, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %12, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i
  %13 = tail call fastcc ptr @Parser_parse_comparasion_expression(ptr nonnull %0)
  %14 = tail call ptr @malloc(i32 40)
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 32)
  %17 = load i64, ptr %5, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %15, i64 0, i32 1
  %18 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i15 = getelementptr inbounds %FloRange, ptr %5, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i15, align 4
  %memberidx3.i16 = getelementptr inbounds %FloRange, ptr %15, i64 0, i32 3
  %20 = load i64, ptr %memberidx3.i16, align 4
  store i64 %17, ptr %16, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 1
  store i64 %18, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 2
  store i64 %19, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 3
  store i64 %20, ptr %memberidx3.i.i, align 4
  %memberidx.i17 = getelementptr inbounds %UnaryExpressionNode, ptr %14, i64 0, i32 3
  store i64 7, ptr %memberidx.i17, align 4
  %memberidx1.i18 = getelementptr inbounds %UnaryExpressionNode, ptr %14, i64 0, i32 4
  store ptr %13, ptr %memberidx1.i18, align 8
  store ptr %16, ptr %14, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %14, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i19 = getelementptr inbounds %ExpressionNode, ptr %14, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i19, align 4
  br label %common.ret

ifend:                                            ; preds = %1
  %21 = tail call fastcc ptr @Parser_parse_bitshift_expression(ptr nonnull %0)
  %22 = load ptr, ptr %memberidx, align 8
  %23 = load i64, ptr %22, align 4
  switch i64 %23, label %ifend13.i [
    i64 41, label %Parser_is_comp_expr_op.exit
    i64 42, label %Parser_is_comp_expr_op.exit.fold.split
    i64 44, label %Parser_is_comp_expr_op.exit.fold.split54
    i64 43, label %Parser_is_comp_expr_op.exit.fold.split55
    i64 39, label %Parser_is_comp_expr_op.exit.fold.split56
  ]

ifend13.i:                                        ; preds = %ifend
  %24 = icmp eq i64 %23, 40
  %spec.select.i = select i1 %24, i64 12, i64 0
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split:           ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split54:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split55:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split56:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit:                      ; preds = %ifend, %Parser_is_comp_expr_op.exit.fold.split56, %Parser_is_comp_expr_op.exit.fold.split55, %Parser_is_comp_expr_op.exit.fold.split54, %Parser_is_comp_expr_op.exit.fold.split, %ifend13.i
  %op.promoted = phi i64 [ 7, %ifend ], [ %spec.select.i, %ifend13.i ], [ 9, %Parser_is_comp_expr_op.exit.fold.split ], [ 8, %Parser_is_comp_expr_op.exit.fold.split54 ], [ 10, %Parser_is_comp_expr_op.exit.fold.split55 ], [ 11, %Parser_is_comp_expr_op.exit.fold.split56 ]
  %25 = icmp ne i64 %op.promoted, 0
  %26 = icmp ne i64 %23, 46
  %memberidx2.i22 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %27 = load ptr, ptr %memberidx2.i22, align 8
  %memberidx3.i23 = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx3.i23, align 4
  %29 = icmp eq i64 %28, 0
  %30 = and i1 %26, %29
  %31 = and i1 %25, %30
  br i1 %31, label %while.entry.preheader, label %common.ret

while.entry.preheader:                            ; preds = %Parser_is_comp_expr_op.exit
  %memberidx.i24 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_comp_expr_op.exit47
  %common.ret.op.i4060 = phi i64 [ %op.promoted, %while.entry.preheader ], [ %common.ret.op.i40, %Parser_is_comp_expr_op.exit47 ]
  %32 = phi ptr [ %21, %while.entry.preheader ], [ %40, %Parser_is_comp_expr_op.exit47 ]
  %33 = load i64, ptr %memberidx.i24, align 4
  %34 = load ptr, ptr %0, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx2.i25, align 4
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %if.entry.i29, label %Parser_advance.exit31

if.entry.i29:                                     ; preds = %while.entry
  %37 = add nsw i64 %33, 1
  store i64 %37, ptr %memberidx.i24, align 4
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %34, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i.i27, align 8
  %ptridx.i.i28 = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i.i28, align 8
  store ptr %39, ptr %memberidx, align 8
  br label %Parser_advance.exit31

Parser_advance.exit31:                            ; preds = %while.entry, %if.entry.i29
  %40 = tail call ptr @malloc(i32 48)
  %41 = tail call fastcc ptr @Parser_parse_bitshift_expression(ptr nonnull %0)
  %42 = load ptr, ptr %32, align 8
  %43 = load ptr, ptr %41, align 8
  %44 = tail call ptr @malloc(i32 32)
  %45 = load i64, ptr %42, align 4
  %memberidx1.i.i32 = getelementptr inbounds %FloRange, ptr %43, i64 0, i32 1
  %46 = load i64, ptr %memberidx1.i.i32, align 4
  %memberidx2.i.i33 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i.i33, align 4
  %memberidx3.i.i34 = getelementptr inbounds %FloRange, ptr %43, i64 0, i32 3
  %48 = load i64, ptr %memberidx3.i.i34, align 4
  store i64 %45, ptr %44, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 1
  store i64 %46, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 2
  store i64 %47, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 3
  store i64 %48, ptr %memberidx3.i.i.i, align 4
  store ptr %44, ptr %40, align 8
  %memberidx.i.i.i35 = getelementptr inbounds %StatementNode, ptr %40, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i35, align 4
  %memberidx.i.i36 = getelementptr inbounds %ExpressionNode, ptr %40, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i36, align 4
  %memberidx2.i37 = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 3
  store ptr %32, ptr %memberidx2.i37, align 8
  %memberidx3.i38 = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 4
  store i64 %common.ret.op.i4060, ptr %memberidx3.i38, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 5
  store ptr %41, ptr %memberidx4.i, align 8
  %49 = load ptr, ptr %memberidx, align 8
  %50 = load i64, ptr %49, align 4
  switch i64 %50, label %ifend13.i46 [
    i64 41, label %Parser_is_comp_expr_op.exit47
    i64 42, label %Parser_is_comp_expr_op.exit47.fold.split
    i64 44, label %Parser_is_comp_expr_op.exit47.fold.split57
    i64 43, label %Parser_is_comp_expr_op.exit47.fold.split58
    i64 39, label %Parser_is_comp_expr_op.exit47.fold.split59
  ]

ifend13.i46:                                      ; preds = %Parser_advance.exit31
  %51 = icmp eq i64 %50, 40
  %spec.select.i45 = select i1 %51, i64 12, i64 0
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split:         ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split57:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split58:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split59:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47:                    ; preds = %Parser_advance.exit31, %Parser_is_comp_expr_op.exit47.fold.split59, %Parser_is_comp_expr_op.exit47.fold.split58, %Parser_is_comp_expr_op.exit47.fold.split57, %Parser_is_comp_expr_op.exit47.fold.split, %ifend13.i46
  %common.ret.op.i40 = phi i64 [ 7, %Parser_advance.exit31 ], [ %spec.select.i45, %ifend13.i46 ], [ 9, %Parser_is_comp_expr_op.exit47.fold.split ], [ 8, %Parser_is_comp_expr_op.exit47.fold.split57 ], [ 10, %Parser_is_comp_expr_op.exit47.fold.split58 ], [ 11, %Parser_is_comp_expr_op.exit47.fold.split59 ]
  %52 = icmp ne i64 %common.ret.op.i40, 0
  %53 = icmp ne i64 %50, 46
  %54 = load ptr, ptr %memberidx2.i22, align 8
  %memberidx3.i50 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 2
  %55 = load i64, ptr %memberidx3.i50, align 4
  %56 = icmp eq i64 %55, 0
  %57 = and i1 %53, %56
  %58 = and i1 %52, %57
  br i1 %58, label %while.entry, label %common.ret
}

define internal fastcc ptr @Parser_parse_expression(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_parse_comparasion_expression(ptr %0)
  %memberidx.i.i19.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i.i19.i, align 8
  %4 = load i64, ptr %3, align 4
  %5 = and i64 %4, -2
  %6 = icmp eq i64 %5, 8
  %7 = icmp ne i64 %4, 46
  %memberidx2.i.i20.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i.i21.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i.i21.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.i.i.preheader, label %Parser_parse_bit_expression.exit.i

while.entry.i.i.preheader:                        ; preds = %1
  %13 = icmp eq i64 %4, 9
  %14 = icmp eq i64 %4, 8
  %spec.select.i.i.i = select i1 %14, i64 16, i64 0
  %common.ret.op.i.i.i = select i1 %13, i64 15, i64 %spec.select.i.i.i
  %memberidx.i11.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry.i.i

while.entry.i.i:                                  ; preds = %while.entry.i.i.preheader, %Parser_advance.exit.i35.i
  %cmp.0.i.i = phi ptr [ %22, %Parser_advance.exit.i35.i ], [ %2, %while.entry.i.i.preheader ]
  %op.0.i.i = phi i64 [ %common.ret.op.i19.i.i, %Parser_advance.exit.i35.i ], [ %common.ret.op.i.i.i, %while.entry.i.i.preheader ]
  %15 = load i64, ptr %memberidx.i11.i.i, align 4
  %16 = load ptr, ptr %0, align 8
  %memberidx2.i12.i22.i = getelementptr inbounds %Array_Token_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i12.i22.i, align 4
  %18 = icmp slt i64 %15, %17
  br i1 %18, label %if.entry.i.i26.i, label %Parser_advance.exit.i35.i

if.entry.i.i26.i:                                 ; preds = %while.entry.i.i
  %19 = add nsw i64 %15, 1
  store i64 %19, ptr %memberidx.i11.i.i, align 4
  %memberidx.i.i.i24.i = getelementptr inbounds %Array_Token_, ptr %16, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i.i.i24.i, align 8
  %ptridx.i.i.i25.i = getelementptr inbounds ptr, ptr %20, i64 %19
  %21 = load ptr, ptr %ptridx.i.i.i25.i, align 8
  store ptr %21, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i35.i

Parser_advance.exit.i35.i:                        ; preds = %if.entry.i.i26.i, %while.entry.i.i
  %22 = tail call ptr @malloc(i32 48)
  %23 = tail call fastcc ptr @Parser_parse_comparasion_expression(ptr nonnull %0)
  %24 = load ptr, ptr %cmp.0.i.i, align 8
  %25 = load ptr, ptr %23, align 8
  %26 = tail call ptr @malloc(i32 32)
  %27 = load i64, ptr %24, align 4
  %memberidx1.i.i.i27.i = getelementptr inbounds %FloRange, ptr %25, i64 0, i32 1
  %28 = load i64, ptr %memberidx1.i.i.i27.i, align 4
  %memberidx2.i.i.i28.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  %29 = load i64, ptr %memberidx2.i.i.i28.i, align 4
  %memberidx3.i.i.i29.i = getelementptr inbounds %FloRange, ptr %25, i64 0, i32 3
  %30 = load i64, ptr %memberidx3.i.i.i29.i, align 4
  store i64 %27, ptr %26, align 4
  %memberidx1.i.i.i.i30.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  store i64 %28, ptr %memberidx1.i.i.i.i30.i, align 4
  %memberidx2.i.i.i.i31.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 2
  store i64 %29, ptr %memberidx2.i.i.i.i31.i, align 4
  %memberidx3.i.i.i.i32.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  store i64 %30, ptr %memberidx3.i.i.i.i32.i, align 4
  store ptr %26, ptr %22, align 8
  %memberidx.i.i.i.i33.i = getelementptr inbounds %StatementNode, ptr %22, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i33.i, align 4
  %memberidx.i.i14.i.i = getelementptr inbounds %ExpressionNode, ptr %22, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i14.i.i, align 4
  %memberidx2.i15.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 3
  store ptr %cmp.0.i.i, ptr %memberidx2.i15.i.i, align 8
  %memberidx3.i16.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 4
  store i64 %op.0.i.i, ptr %memberidx3.i16.i.i, align 4
  %memberidx4.i.i34.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 5
  store ptr %23, ptr %memberidx4.i.i34.i, align 8
  %31 = load ptr, ptr %memberidx.i.i19.i, align 8
  %32 = load i64, ptr %31, align 4
  %33 = icmp eq i64 %32, 9
  %34 = icmp eq i64 %32, 8
  %spec.select.i18.i.i = select i1 %34, i64 16, i64 0
  %common.ret.op.i19.i.i = select i1 %33, i64 15, i64 %spec.select.i18.i.i
  %35 = and i64 %32, -2
  %36 = icmp eq i64 %35, 8
  %37 = icmp ne i64 %32, 46
  %38 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i22.i.i = getelementptr inbounds %Array_FloError_, ptr %38, i64 0, i32 2
  %39 = load i64, ptr %memberidx3.i22.i.i, align 4
  %40 = icmp eq i64 %39, 0
  %41 = and i1 %37, %40
  %42 = and i1 %36, %41
  br i1 %42, label %while.entry.i.i, label %Parser_parse_bit_expression.exit.i

Parser_parse_bit_expression.exit.i:               ; preds = %Parser_advance.exit.i35.i, %1
  %43 = phi i64 [ %9, %1 ], [ %39, %Parser_advance.exit.i35.i ]
  %44 = phi i64 [ %4, %1 ], [ %32, %Parser_advance.exit.i35.i ]
  %cmp.1.i.i = phi ptr [ %2, %1 ], [ %22, %Parser_advance.exit.i35.i ]
  %45 = icmp eq i64 %44, 52
  %46 = icmp eq i64 %43, 0
  %47 = and i1 %45, %46
  br i1 %47, label %ifend.i.i, label %Parser_parse_range_expression.exit.i

ifend.i.i:                                        ; preds = %Parser_parse_bit_expression.exit.i
  %memberidx.i8.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %48 = load i64, ptr %memberidx.i8.i.i, align 4
  %49 = load ptr, ptr %0, align 8
  %memberidx2.i9.i.i = getelementptr inbounds %Array_Token_, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i9.i.i, align 4
  %51 = icmp slt i64 %48, %50
  br i1 %51, label %if.entry.i.i.i, label %Parser_advance.exit.i.i

if.entry.i.i.i:                                   ; preds = %ifend.i.i
  %52 = add nsw i64 %48, 1
  store i64 %52, ptr %memberidx.i8.i.i, align 4
  %memberidx.i.i.i14.i = getelementptr inbounds %Array_Token_, ptr %49, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i.i.i14.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %54, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i.i.i, %ifend.i.i
  %55 = tail call ptr @malloc(i32 48)
  %56 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %57 = load ptr, ptr %cmp.1.i.i, align 8
  %58 = load ptr, ptr %56, align 8
  %59 = tail call ptr @malloc(i32 32)
  %60 = load i64, ptr %57, align 4
  %memberidx1.i.i.i15.i = getelementptr inbounds %FloRange, ptr %58, i64 0, i32 1
  %61 = load i64, ptr %memberidx1.i.i.i15.i, align 4
  %memberidx2.i.i.i16.i = getelementptr inbounds %FloRange, ptr %57, i64 0, i32 2
  %62 = load i64, ptr %memberidx2.i.i.i16.i, align 4
  %memberidx3.i.i.i17.i = getelementptr inbounds %FloRange, ptr %58, i64 0, i32 3
  %63 = load i64, ptr %memberidx3.i.i.i17.i, align 4
  store i64 %60, ptr %59, align 4
  %memberidx1.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %59, i64 0, i32 1
  store i64 %61, ptr %memberidx1.i.i.i.i.i, align 4
  %memberidx2.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %59, i64 0, i32 2
  store i64 %62, ptr %memberidx2.i.i.i.i.i, align 4
  %memberidx3.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %59, i64 0, i32 3
  store i64 %63, ptr %memberidx3.i.i.i.i.i, align 4
  store ptr %59, ptr %55, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %StatementNode, ptr %55, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i.i, align 4
  %memberidx.i.i11.i.i = getelementptr inbounds %ExpressionNode, ptr %55, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i11.i.i, align 4
  %memberidx2.i12.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %55, i64 0, i32 3
  store ptr %cmp.1.i.i, ptr %memberidx2.i12.i.i, align 8
  %memberidx3.i13.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %55, i64 0, i32 4
  store i64 31, ptr %memberidx3.i13.i.i, align 4
  %memberidx4.i.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %55, i64 0, i32 5
  store ptr %56, ptr %memberidx4.i.i.i, align 8
  %.pre = load ptr, ptr %memberidx.i.i19.i, align 8
  %.pre84 = load i64, ptr %.pre, align 4
  br label %Parser_parse_range_expression.exit.i

Parser_parse_range_expression.exit.i:             ; preds = %Parser_advance.exit.i.i, %Parser_parse_bit_expression.exit.i
  %64 = phi i64 [ %.pre84, %Parser_advance.exit.i.i ], [ %44, %Parser_parse_bit_expression.exit.i ]
  %common.ret.op.i.i = phi ptr [ %55, %Parser_advance.exit.i.i ], [ %cmp.1.i.i, %Parser_parse_bit_expression.exit.i ]
  %.not.i = icmp eq i64 %64, 74
  br i1 %.not.i, label %ifend.i, label %Parser_parse_typecast_expression.exit

ifend.i:                                          ; preds = %Parser_parse_range_expression.exit.i
  %memberidx.i.i69 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %65 = load i64, ptr %memberidx.i.i69, align 4
  %66 = load ptr, ptr %0, align 8
  %memberidx2.i.i70 = getelementptr inbounds %Array_Token_, ptr %66, i64 0, i32 2
  %67 = load i64, ptr %memberidx2.i.i70, align 4
  %68 = icmp slt i64 %65, %67
  br i1 %68, label %if.entry.i.i74, label %Parser_advance.exit.i82

if.entry.i.i74:                                   ; preds = %ifend.i
  %69 = add nsw i64 %65, 1
  store i64 %69, ptr %memberidx.i.i69, align 4
  %memberidx.i.i.i72 = getelementptr inbounds %Array_Token_, ptr %66, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i.i.i72, align 8
  %ptridx.i.i.i73 = getelementptr inbounds ptr, ptr %70, i64 %69
  %71 = load ptr, ptr %ptridx.i.i.i73, align 8
  store ptr %71, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i82

Parser_advance.exit.i82:                          ; preds = %if.entry.i.i74, %ifend.i
  %72 = tail call ptr @malloc(i32 40)
  %73 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %74 = load ptr, ptr %common.ret.op.i.i, align 8
  %75 = load ptr, ptr %73, align 8
  %76 = tail call ptr @malloc(i32 32)
  %77 = load i64, ptr %74, align 4
  %memberidx1.i.i.i75 = getelementptr inbounds %FloRange, ptr %75, i64 0, i32 1
  %78 = load i64, ptr %memberidx1.i.i.i75, align 4
  %memberidx2.i.i.i76 = getelementptr inbounds %FloRange, ptr %74, i64 0, i32 2
  %79 = load i64, ptr %memberidx2.i.i.i76, align 4
  %memberidx3.i.i.i77 = getelementptr inbounds %FloRange, ptr %75, i64 0, i32 3
  %80 = load i64, ptr %memberidx3.i.i.i77, align 4
  store i64 %77, ptr %76, align 4
  %memberidx1.i.i.i.i78 = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 1
  store i64 %78, ptr %memberidx1.i.i.i.i78, align 4
  %memberidx2.i.i.i.i79 = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 2
  store i64 %79, ptr %memberidx2.i.i.i.i79, align 4
  %memberidx3.i.i.i.i80 = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 3
  store i64 %80, ptr %memberidx3.i.i.i.i80, align 4
  store ptr %76, ptr %72, align 8
  %memberidx.i.i.i.i81 = getelementptr inbounds %StatementNode, ptr %72, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i81, align 4
  %memberidx.i.i6.i = getelementptr inbounds %ExpressionNode, ptr %72, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %TypeCastExpressionNode, ptr %72, i64 0, i32 3
  store ptr %common.ret.op.i.i, ptr %memberidx2.i7.i, align 8
  %memberidx3.i8.i = getelementptr inbounds %TypeCastExpressionNode, ptr %72, i64 0, i32 4
  store ptr %73, ptr %memberidx3.i8.i, align 8
  %.pre85 = load ptr, ptr %memberidx.i.i19.i, align 8
  %.pre86 = load i64, ptr %.pre85, align 4
  br label %Parser_parse_typecast_expression.exit

Parser_parse_typecast_expression.exit:            ; preds = %Parser_parse_range_expression.exit.i, %Parser_advance.exit.i82
  %81 = phi i64 [ %.pre86, %Parser_advance.exit.i82 ], [ %64, %Parser_parse_range_expression.exit.i ]
  %common.ret.op.i68 = phi ptr [ %72, %Parser_advance.exit.i82 ], [ %common.ret.op.i.i, %Parser_parse_range_expression.exit.i ]
  %82 = icmp eq i64 %81, 36
  %83 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i.i48 = getelementptr inbounds %Array_FloError_, ptr %83, i64 0, i32 2
  %84 = load i64, ptr %memberidx3.i.i48, align 4
  %85 = icmp eq i64 %84, 0
  %86 = and i1 %82, %85
  br i1 %86, label %ifend.i51, label %Parser_parse_ternary_expression.exit

ifend.i51:                                        ; preds = %Parser_parse_typecast_expression.exit
  %memberidx.i10.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %87 = load i64, ptr %memberidx.i10.i, align 4
  %88 = load ptr, ptr %0, align 8
  %memberidx2.i11.i = getelementptr inbounds %Array_Token_, ptr %88, i64 0, i32 2
  %89 = load i64, ptr %memberidx2.i11.i, align 4
  %90 = icmp slt i64 %87, %89
  br i1 %90, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %ifend.i51
  %91 = add nsw i64 %87, 1
  store i64 %91, ptr %memberidx.i10.i, align 4
  %memberidx.i.i.i52 = getelementptr inbounds %Array_Token_, ptr %88, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i.i.i52, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %92, i64 %91
  %93 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %93, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %ifend.i51
  %94 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %95 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 1)
  %96 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %97 = tail call ptr @malloc(i32 48)
  %98 = load ptr, ptr %common.ret.op.i68, align 8
  %99 = load ptr, ptr %96, align 8
  %100 = tail call ptr @malloc(i32 32)
  %101 = load i64, ptr %98, align 4
  %memberidx1.i.i.i53 = getelementptr inbounds %FloRange, ptr %99, i64 0, i32 1
  %102 = load i64, ptr %memberidx1.i.i.i53, align 4
  %memberidx2.i.i.i54 = getelementptr inbounds %FloRange, ptr %98, i64 0, i32 2
  %103 = load i64, ptr %memberidx2.i.i.i54, align 4
  %memberidx3.i.i.i55 = getelementptr inbounds %FloRange, ptr %99, i64 0, i32 3
  %104 = load i64, ptr %memberidx3.i.i.i55, align 4
  store i64 %101, ptr %100, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 1
  store i64 %102, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 2
  store i64 %103, ptr %memberidx2.i.i.i.i, align 4
  %memberidx3.i.i.i.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 3
  store i64 %104, ptr %memberidx3.i.i.i.i, align 4
  store ptr %100, ptr %97, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %97, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i13.i = getelementptr inbounds %ExpressionNode, ptr %97, i64 0, i32 2
  store i64 15, ptr %memberidx.i.i13.i, align 4
  %memberidx2.i14.i = getelementptr inbounds %TernaryExpressionNode, ptr %97, i64 0, i32 3
  store ptr %common.ret.op.i68, ptr %memberidx2.i14.i, align 8
  %memberidx3.i15.i = getelementptr inbounds %TernaryExpressionNode, ptr %97, i64 0, i32 4
  store ptr %94, ptr %memberidx3.i15.i, align 8
  %memberidx4.i.i = getelementptr inbounds %TernaryExpressionNode, ptr %97, i64 0, i32 5
  store ptr %96, ptr %memberidx4.i.i, align 8
  %105 = load ptr, ptr %94, align 8
  %106 = load ptr, ptr %96, align 8
  %107 = tail call ptr @malloc(i32 32)
  %108 = load i64, ptr %105, align 4
  %memberidx1.i15.i.i = getelementptr inbounds %FloRange, ptr %106, i64 0, i32 1
  %109 = load i64, ptr %memberidx1.i15.i.i, align 4
  %memberidx2.i16.i.i = getelementptr inbounds %FloRange, ptr %105, i64 0, i32 2
  %110 = load i64, ptr %memberidx2.i16.i.i, align 4
  %memberidx3.i17.i.i = getelementptr inbounds %FloRange, ptr %106, i64 0, i32 3
  %111 = load i64, ptr %memberidx3.i17.i.i, align 4
  store i64 %108, ptr %107, align 4
  %memberidx1.i.i18.i.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 1
  store i64 %109, ptr %memberidx1.i.i18.i.i, align 4
  %memberidx2.i.i19.i.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 2
  store i64 %110, ptr %memberidx2.i.i19.i.i, align 4
  %memberidx3.i.i20.i.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 3
  store i64 %111, ptr %memberidx3.i.i20.i.i, align 4
  store ptr %107, ptr %97, align 8
  %.pre87 = load ptr, ptr %memberidx.i.i19.i, align 8
  %.pre88 = load i64, ptr %.pre87, align 4
  %.pre89 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %.pre89, i64 0, i32 2
  %.pre90 = load i64, ptr %memberidx3.i.phi.trans.insert, align 4
  br label %Parser_parse_ternary_expression.exit

Parser_parse_ternary_expression.exit:             ; preds = %Parser_parse_typecast_expression.exit, %Parser_advance.exit.i
  %112 = phi i64 [ %.pre90, %Parser_advance.exit.i ], [ %84, %Parser_parse_typecast_expression.exit ]
  %113 = phi i64 [ %.pre88, %Parser_advance.exit.i ], [ %81, %Parser_parse_typecast_expression.exit ]
  %common.ret.op.i49 = phi ptr [ %97, %Parser_advance.exit.i ], [ %common.ret.op.i68, %Parser_parse_typecast_expression.exit ]
  %114 = icmp eq i64 %113, 69
  %115 = icmp eq i64 %112, 0
  %116 = and i1 %114, %115
  br i1 %116, label %if.entry, label %ifend

common.ret83.sink.split:                          ; preds = %Parser_advance.exit, %Parser_advance.exit33
  %.sink97 = phi ptr [ %145, %Parser_advance.exit33 ], [ %124, %Parser_advance.exit ]
  %common.ret.op.i.sink = phi i64 [ %common.ret.op.i, %Parser_advance.exit33 ], [ 18, %Parser_advance.exit ]
  %.sink = phi ptr [ %146, %Parser_advance.exit33 ], [ %125, %Parser_advance.exit ]
  %memberidx.i.i.i40 = getelementptr inbounds %StatementNode, ptr %.sink97, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i40, align 4
  %memberidx.i.i41 = getelementptr inbounds %ExpressionNode, ptr %.sink97, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i41, align 4
  %memberidx2.i42 = getelementptr inbounds %BinaryExpressionNode, ptr %.sink97, i64 0, i32 3
  store ptr %common.ret.op.i49, ptr %memberidx2.i42, align 8
  %memberidx3.i43 = getelementptr inbounds %BinaryExpressionNode, ptr %.sink97, i64 0, i32 4
  store i64 %common.ret.op.i.sink, ptr %memberidx3.i43, align 4
  %memberidx4.i44 = getelementptr inbounds %BinaryExpressionNode, ptr %.sink97, i64 0, i32 5
  store ptr %.sink, ptr %memberidx4.i44, align 8
  br label %common.ret83

common.ret83:                                     ; preds = %common.ret83.sink.split, %Parser_is_assign_op.exit
  %common.ret83.op = phi ptr [ %common.ret.op.i49, %Parser_is_assign_op.exit ], [ %.sink97, %common.ret83.sink.split ]
  ret ptr %common.ret83.op

if.entry:                                         ; preds = %Parser_parse_ternary_expression.exit
  %memberidx.i16 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %117 = load i64, ptr %memberidx.i16, align 4
  %118 = load ptr, ptr %0, align 8
  %memberidx2.i17 = getelementptr inbounds %Array_Token_, ptr %118, i64 0, i32 2
  %119 = load i64, ptr %memberidx2.i17, align 4
  %120 = icmp slt i64 %117, %119
  br i1 %120, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry
  %121 = add nsw i64 %117, 1
  store i64 %121, ptr %memberidx.i16, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %118, i64 0, i32 1
  %122 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %122, i64 %121
  %123 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %123, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i
  %124 = tail call ptr @malloc(i32 48)
  %125 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %126 = load ptr, ptr %common.ret.op.i49, align 8
  %127 = load ptr, ptr %125, align 8
  %128 = tail call ptr @malloc(i32 32)
  %129 = load i64, ptr %126, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %127, i64 0, i32 1
  %130 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %126, i64 0, i32 2
  %131 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %127, i64 0, i32 3
  %132 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %129, ptr %128, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %128, i64 0, i32 1
  store i64 %130, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %128, i64 0, i32 2
  store i64 %131, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %128, i64 0, i32 3
  store i64 %132, ptr %memberidx3.i.i.i, align 4
  store ptr %128, ptr %124, align 8
  br label %common.ret83.sink.split

ifend:                                            ; preds = %Parser_parse_ternary_expression.exit
  switch i64 %113, label %ifend51.i [
    i64 38, label %Parser_is_assign_op.exit
    i64 12, label %Parser_is_assign_op.exit.fold.split
    i64 13, label %Parser_is_assign_op.exit.fold.split59
    i64 14, label %Parser_is_assign_op.exit.fold.split60
    i64 15, label %Parser_is_assign_op.exit.fold.split61
    i64 16, label %Parser_is_assign_op.exit.fold.split62
    i64 17, label %Parser_is_assign_op.exit.fold.split63
    i64 18, label %Parser_is_assign_op.exit.fold.split64
    i64 19, label %Parser_is_assign_op.exit.fold.split65
    i64 20, label %Parser_is_assign_op.exit.fold.split66
    i64 22, label %Parser_is_assign_op.exit.fold.split67
  ]

ifend51.i:                                        ; preds = %ifend
  %133 = icmp eq i64 %113, 21
  %spec.select.i = select i1 %133, i64 30, i64 0
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split:              ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split59:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split60:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split61:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split62:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split63:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split64:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split65:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split66:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split67:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit:                         ; preds = %ifend, %Parser_is_assign_op.exit.fold.split67, %Parser_is_assign_op.exit.fold.split66, %Parser_is_assign_op.exit.fold.split65, %Parser_is_assign_op.exit.fold.split64, %Parser_is_assign_op.exit.fold.split63, %Parser_is_assign_op.exit.fold.split62, %Parser_is_assign_op.exit.fold.split61, %Parser_is_assign_op.exit.fold.split60, %Parser_is_assign_op.exit.fold.split59, %Parser_is_assign_op.exit.fold.split, %ifend51.i
  %common.ret.op.i = phi i64 [ 19, %ifend ], [ %spec.select.i, %ifend51.i ], [ 22, %Parser_is_assign_op.exit.fold.split ], [ 21, %Parser_is_assign_op.exit.fold.split59 ], [ 20, %Parser_is_assign_op.exit.fold.split60 ], [ 23, %Parser_is_assign_op.exit.fold.split61 ], [ 24, %Parser_is_assign_op.exit.fold.split62 ], [ 25, %Parser_is_assign_op.exit.fold.split63 ], [ 26, %Parser_is_assign_op.exit.fold.split64 ], [ 27, %Parser_is_assign_op.exit.fold.split65 ], [ 28, %Parser_is_assign_op.exit.fold.split66 ], [ 29, %Parser_is_assign_op.exit.fold.split67 ]
  %134 = icmp ne i64 %common.ret.op.i, 0
  %135 = icmp ne i64 %113, 46
  %136 = and i1 %135, %115
  %137 = and i1 %136, %134
  br i1 %137, label %ifend4, label %common.ret83

ifend4:                                           ; preds = %Parser_is_assign_op.exit
  %memberidx.i26 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %138 = load i64, ptr %memberidx.i26, align 4
  %139 = load ptr, ptr %0, align 8
  %memberidx2.i27 = getelementptr inbounds %Array_Token_, ptr %139, i64 0, i32 2
  %140 = load i64, ptr %memberidx2.i27, align 4
  %141 = icmp slt i64 %138, %140
  br i1 %141, label %if.entry.i31, label %Parser_advance.exit33

if.entry.i31:                                     ; preds = %ifend4
  %142 = add nsw i64 %138, 1
  store i64 %142, ptr %memberidx.i26, align 4
  %memberidx.i.i29 = getelementptr inbounds %Array_Token_, ptr %139, i64 0, i32 1
  %143 = load ptr, ptr %memberidx.i.i29, align 8
  %ptridx.i.i30 = getelementptr inbounds ptr, ptr %143, i64 %142
  %144 = load ptr, ptr %ptridx.i.i30, align 8
  store ptr %144, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit33

Parser_advance.exit33:                            ; preds = %ifend4, %if.entry.i31
  %145 = tail call ptr @malloc(i32 48)
  %146 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %147 = load ptr, ptr %common.ret.op.i49, align 8
  %148 = load ptr, ptr %146, align 8
  %149 = tail call ptr @malloc(i32 32)
  %150 = load i64, ptr %147, align 4
  %memberidx1.i.i34 = getelementptr inbounds %FloRange, ptr %148, i64 0, i32 1
  %151 = load i64, ptr %memberidx1.i.i34, align 4
  %memberidx2.i.i35 = getelementptr inbounds %FloRange, ptr %147, i64 0, i32 2
  %152 = load i64, ptr %memberidx2.i.i35, align 4
  %memberidx3.i.i36 = getelementptr inbounds %FloRange, ptr %148, i64 0, i32 3
  %153 = load i64, ptr %memberidx3.i.i36, align 4
  store i64 %150, ptr %149, align 4
  %memberidx1.i.i.i37 = getelementptr inbounds %FloRange, ptr %149, i64 0, i32 1
  store i64 %151, ptr %memberidx1.i.i.i37, align 4
  %memberidx2.i.i.i38 = getelementptr inbounds %FloRange, ptr %149, i64 0, i32 2
  store i64 %152, ptr %memberidx2.i.i.i38, align 4
  %memberidx3.i.i.i39 = getelementptr inbounds %FloRange, ptr %149, i64 0, i32 3
  store i64 %153, ptr %memberidx3.i.i.i39, align 4
  store ptr %149, ptr %145, align 8
  br label %common.ret83.sink.split
}

define internal fastcc void @Map_string_VarId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_VarId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_VarId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_VarId__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_VarId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_VarId_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_VarId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

; Function Attrs: mustprogress nounwind willreturn
define internal fastcc void @Scope___del__(ptr nocapture readonly %0) unnamed_addr #11 {
  %2 = load ptr, ptr %0, align 8
  tail call void @free(ptr %2)
  %memberidx1 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load ptr, ptr %3, align 8
  tail call void @free(ptr %4)
  tail call void @free(ptr %3)
  %memberidx2 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %memberidx2, align 8
  %6 = load ptr, ptr %5, align 8
  tail call void @free(ptr %6)
  tail call void @free(ptr %5)
  %memberidx3 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 3
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = load ptr, ptr %7, align 8
  tail call void @free(ptr %8)
  tail call void @free(ptr %7)
  %memberidx4 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 4
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = load ptr, ptr %9, align 8
  tail call void @free(ptr %10)
  tail call void @free(ptr %9)
  %memberidx5 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 6
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = load ptr, ptr %11, align 8
  tail call void @free(ptr %12)
  tail call void @free(ptr %11)
  ret void
}

define internal fastcc void @Map_string_EnumId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_EnumId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_EnumId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_EnumId__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_EnumId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_EnumId_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_EnumId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

define internal fastcc void @Map_string_Type__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_Type_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_Type____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_Type____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_Type__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_Type__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_Type_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_Type__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

define internal fastcc void @Map_string_ClassId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_ClassId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_ClassId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_ClassId__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_ClassId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_ClassId_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_ClassId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Scope__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Scope__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_VarDeclaration__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_VarDeclaration__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Var__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Var__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ConstDeclaration__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ConstDeclaration__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc void @Map_string_PropId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_PropId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_PropId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_PropId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_PropId__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_PropId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_EnumField__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Enum__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Enum__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Const__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Const__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FunctionArg__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FunctionArg__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Statement__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Statement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Type__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Type__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ClassMethod__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassMethod__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ClassField__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Class__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Class__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Function__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Function__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Module__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Module__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @TypeChecker_check_module(ptr %0, ptr nocapture readonly %1, ptr %2) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 8
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %3 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = tail call ptr @malloc(i32 88)
  %memberidx.i188 = getelementptr inbounds %Module, ptr %5, i64 0, i32 1
  store ptr %2, ptr %memberidx.i188, align 8
  %memberidx1.i189 = getelementptr inbounds %Module, ptr %5, i64 0, i32 5
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Function_, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 1
  %7 = tail call ptr @malloc(i32 64)
  store ptr %7, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %6, ptr %memberidx1.i189, align 8
  %memberidx4.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 2
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Var_, ptr %8, align 8
  %memberidx.i33.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i33.i, align 4
  %memberidx1.i34.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i34.i, align 4
  %memberidx2.i35.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 1
  %9 = tail call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i35.i, align 8
  store i64 0, ptr %memberidx.i33.i, align 4
  store ptr %8, ptr %memberidx4.i, align 8
  %memberidx7.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 4
  %10 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Class_, ptr %10, align 8
  %memberidx.i36.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 2
  store i64 0, ptr %memberidx.i36.i, align 4
  %memberidx1.i37.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 3
  store i64 8, ptr %memberidx1.i37.i, align 4
  %memberidx2.i38.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 1
  %11 = tail call ptr @malloc(i32 64)
  store ptr %11, ptr %memberidx2.i38.i, align 8
  store i64 0, ptr %memberidx.i36.i, align 4
  store ptr %10, ptr %memberidx7.i, align 8
  %memberidx10.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 7
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Enum_, ptr %12, align 8
  %memberidx.i39.i = getelementptr inbounds %Array_Enum_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx.i39.i, align 4
  %memberidx1.i40.i = getelementptr inbounds %Array_Enum_, ptr %12, i64 0, i32 3
  store i64 8, ptr %memberidx1.i40.i, align 4
  %memberidx2.i41.i = getelementptr inbounds %Array_Enum_, ptr %12, i64 0, i32 1
  %13 = tail call ptr @malloc(i32 64)
  store ptr %13, ptr %memberidx2.i41.i, align 8
  store i64 0, ptr %memberidx.i39.i, align 4
  store ptr %12, ptr %memberidx10.i, align 8
  %memberidx13.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 8
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Scope_, ptr %14, align 8
  %memberidx.i42.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 2
  store i64 0, ptr %memberidx.i42.i, align 4
  %memberidx1.i43.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 3
  store i64 8, ptr %memberidx1.i43.i, align 4
  %memberidx2.i44.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 1
  %15 = tail call ptr @malloc(i32 64)
  store ptr %15, ptr %memberidx2.i44.i, align 8
  store i64 0, ptr %memberidx.i42.i, align 4
  store ptr %14, ptr %memberidx13.i, align 8
  %memberidx16.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 9
  %16 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ConstDeclaration_, ptr %16, align 8
  %memberidx.i45.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %16, i64 0, i32 2
  store i64 0, ptr %memberidx.i45.i, align 4
  %memberidx1.i46.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %16, i64 0, i32 3
  store i64 8, ptr %memberidx1.i46.i, align 4
  %memberidx2.i47.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %16, i64 0, i32 1
  %17 = tail call ptr @malloc(i32 64)
  store ptr %17, ptr %memberidx2.i47.i, align 8
  store i64 0, ptr %memberidx.i45.i, align 4
  store ptr %16, ptr %memberidx16.i, align 8
  %memberidx19.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 10
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_VarDeclaration_, ptr %18, align 8
  %memberidx.i48.i = getelementptr inbounds %Array_VarDeclaration_, ptr %18, i64 0, i32 2
  store i64 0, ptr %memberidx.i48.i, align 4
  %memberidx1.i49.i = getelementptr inbounds %Array_VarDeclaration_, ptr %18, i64 0, i32 3
  store i64 8, ptr %memberidx1.i49.i, align 4
  %memberidx2.i50.i = getelementptr inbounds %Array_VarDeclaration_, ptr %18, i64 0, i32 1
  %19 = tail call ptr @malloc(i32 64)
  store ptr %19, ptr %memberidx2.i50.i, align 8
  store i64 0, ptr %memberidx.i48.i, align 4
  store ptr %18, ptr %memberidx19.i, align 8
  %memberidx22.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 3
  %20 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Const_, ptr %20, align 8
  %memberidx.i51.i = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 2
  store i64 0, ptr %memberidx.i51.i, align 4
  %memberidx1.i52.i = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 3
  store i64 8, ptr %memberidx1.i52.i, align 4
  %memberidx2.i53.i = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 1
  %21 = tail call ptr @malloc(i32 64)
  store ptr %21, ptr %memberidx2.i53.i, align 8
  store i64 0, ptr %memberidx.i51.i, align 4
  store ptr %20, ptr %memberidx22.i, align 8
  %22 = load ptr, ptr %0, align 8
  %memberidx5 = getelementptr inbounds %Program, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_Module_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx6, align 4
  store i64 %24, ptr %memberidx1, align 4
  %25 = load ptr, ptr %memberidx5, align 8
  %memberidx.i190 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 2
  %26 = load i64, ptr %memberidx.i190, align 4
  %memberidx1.i191 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 3
  %27 = load i64, ptr %memberidx1.i191, align 4
  %.not.i = icmp slt i64 %26, %27
  br i1 %.not.i, label %for.entry.Array_Module____sl__.exit_crit_edge, label %if.entry.i

for.entry.Array_Module____sl__.exit_crit_edge:    ; preds = %for.entry
  %memberidx4.i194.phi.trans.insert = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 1
  %.pre449 = load ptr, ptr %memberidx4.i194.phi.trans.insert, align 8
  br label %Array_Module____sl__.exit

if.entry.i:                                       ; preds = %for.entry
  %28 = shl nuw i64 %27, 1
  store i64 %28, ptr %memberidx1.i191, align 4
  %memberidx2.i.i193 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i193, align 8
  %30 = shl i64 %27, 4
  %31 = tail call ptr @realloc(ptr %29, i64 %30)
  store ptr %31, ptr %memberidx2.i.i193, align 8
  %.pre = load i64, ptr %memberidx.i190, align 4
  br label %Array_Module____sl__.exit

Array_Module____sl__.exit:                        ; preds = %for.entry.Array_Module____sl__.exit_crit_edge, %if.entry.i
  %32 = phi ptr [ %.pre449, %for.entry.Array_Module____sl__.exit_crit_edge ], [ %31, %if.entry.i ]
  %33 = phi i64 [ %26, %for.entry.Array_Module____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx.i190, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %32, i64 %33
  store ptr %5, ptr %ptridx.i, align 8
  %35 = tail call fastcc ptr @TypeChecker_create_scope(ptr nonnull %0)
  %memberidx9 = getelementptr inbounds %Module, ptr %5, i64 0, i32 6
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %memberidx9, align 8
  %memberidx11 = getelementptr inbounds %Scope, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx11, align 8
  %38 = tail call ptr @malloc(i32 4)
  store i32 1702195828, ptr %38, align 8
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i195 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i195, align 8
  %memberidx1.i.i196 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i196, align 4
  %memberidx2.i.i197 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i197, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %37, ptr nonnull %39, ptr null)
  %40 = load ptr, ptr %memberidx11, align 8
  %41 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %41, ptr noundef nonnull align 8 dereferenceable(5) @86, i64 5, i1 false)
  %42 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i198 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i198, align 8
  %memberidx1.i.i199 = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i199, align 4
  %memberidx2.i.i200 = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i200, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %40, ptr nonnull %42, ptr null)
  %43 = load ptr, ptr %memberidx11, align 8
  %44 = tail call ptr @malloc(i32 4)
  store i32 1819047278, ptr %44, align 8
  %45 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i.i201 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i.i201, align 8
  %memberidx1.i.i202 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i202, align 4
  %memberidx2.i.i203 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i203, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %43, ptr nonnull %45, ptr null)
  %46 = load ptr, ptr %35, align 8
  store ptr %46, ptr %memberidx2, align 8
  %memberidx17 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %memberidx18 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 3
  %memberidx19 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %memberidx17, i8 0, i64 24, i1 false)
  %47 = load ptr, ptr %memberidx19, align 8
  %48 = tail call ptr @malloc(i32 25)
  %memberidx.i204 = getelementptr inbounds %Array_ImportNode_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i204, align 8
  %memberidx1.i205 = getelementptr inbounds %Array_ImportNode_, ptr %47, i64 0, i32 2
  %50 = load i64, ptr %memberidx1.i205, align 4
  store i1 false, ptr %48, align 1
  %memberidx1.i.i206 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %48, i64 0, i32 1
  %memberidx2.i.i207 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %48, i64 0, i32 3
  store ptr %49, ptr %memberidx2.i.i207, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %48, i64 0, i32 2
  store i64 %50, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i206, align 4
  %51 = icmp slt i64 %50, 1
  br i1 %51, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %Array_Module____sl__.exit
  %memberidx.i215 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %52 = phi i64 [ 1, %for.body.lr.ph ], [ %62, %ifend ]
  %module_import.0435.in = phi ptr [ %49, %for.body.lr.ph ], [ %ptridx.i229, %ifend ]
  %module_import.0435 = load ptr, ptr %module_import.0435.in, align 8
  tail call fastcc void @TypeChecker_check_module_import(ptr nonnull %0, ptr %module_import.0435)
  %53 = load ptr, ptr %memberidx.i215, align 8
  %memberidx1.i216 = getelementptr inbounds %Compiler, ptr %53, i64 0, i32 6
  %54 = load ptr, ptr %memberidx1.i216, align 8
  %memberidx2.i217 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 2
  %55 = load i64, ptr %memberidx2.i217, align 4
  %56 = icmp sgt i64 %55, 0
  br i1 %56, label %common.ret.loopexit, label %ifend

for.end:                                          ; preds = %ifend, %Array_Module____sl__.exit
  tail call void @free(ptr nonnull %48)
  %memberidx23 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 2
  %57 = load ptr, ptr %memberidx23, align 8
  %58 = tail call ptr @malloc(i32 25)
  %memberidx.i218 = getelementptr inbounds %Array_EnumNode_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i218, align 8
  %memberidx1.i219 = getelementptr inbounds %Array_EnumNode_, ptr %57, i64 0, i32 2
  %60 = load i64, ptr %memberidx1.i219, align 4
  store i1 false, ptr %58, align 1
  %memberidx1.i.i220 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %58, i64 0, i32 1
  %memberidx2.i.i221 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %58, i64 0, i32 3
  store ptr %59, ptr %memberidx2.i.i221, align 8
  %memberidx3.i.i222 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %58, i64 0, i32 2
  store i64 %60, ptr %memberidx3.i.i222, align 4
  store i64 1, ptr %memberidx1.i.i220, align 4
  %61 = icmp slt i64 %60, 1
  br i1 %61, label %for.end27, label %for.body25

common.ret.loopexit:                              ; preds = %for.body
  store i1 false, ptr %48, align 1
  br label %common.ret

common.ret:                                       ; preds = %common.ret.loopexit, %ifend118, %for.end81, %for.end35, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %for.end35 ], [ null, %for.end81 ], [ %spec.select, %ifend118 ], [ null, %common.ret.loopexit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %for.body
  %62 = add nuw nsw i64 %52, 1
  store i64 %62, ptr %memberidx1.i.i206, align 4
  %ptridx.i229 = getelementptr inbounds ptr, ptr %49, i64 %52
  %.not462 = icmp slt i64 %52, %50
  br i1 %.not462, label %for.body, label %for.end

for.body25:                                       ; preds = %for.end, %for.body25
  %63 = phi i64 [ %64, %for.body25 ], [ 1, %for.end ]
  %storemerge430.in = phi ptr [ %ptridx.i233, %for.body25 ], [ %59, %for.end ]
  %storemerge430 = load ptr, ptr %storemerge430.in, align 8
  tail call fastcc void @TypeChecker_declare_enum_within_module(ptr nonnull %0, ptr %storemerge430)
  %64 = add nuw nsw i64 %63, 1
  store i64 %64, ptr %memberidx1.i.i220, align 4
  %ptridx.i233 = getelementptr inbounds ptr, ptr %59, i64 %63
  %.not463 = icmp slt i64 %63, %60
  br i1 %.not463, label %for.body25, label %for.end27

for.end27:                                        ; preds = %for.body25, %for.end
  tail call void @free(ptr nonnull %58)
  %memberidx31 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 1
  %65 = load ptr, ptr %memberidx31, align 8
  %66 = tail call ptr @malloc(i32 25)
  %memberidx.i235 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i235, align 8
  %memberidx1.i236 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %65, i64 0, i32 2
  %68 = load i64, ptr %memberidx1.i236, align 4
  store i1 false, ptr %66, align 1
  %memberidx1.i.i237 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %66, i64 0, i32 1
  %memberidx2.i.i238 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %66, i64 0, i32 3
  store ptr %67, ptr %memberidx2.i.i238, align 8
  %memberidx3.i.i239 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %66, i64 0, i32 2
  store i64 %68, ptr %memberidx3.i.i239, align 4
  store i64 1, ptr %memberidx1.i.i237, align 4
  %69 = icmp slt i64 %68, 1
  br i1 %69, label %for.end35, label %for.body33

for.body33:                                       ; preds = %for.end27, %for.body33
  %70 = phi i64 [ %71, %for.body33 ], [ 1, %for.end27 ]
  %storemerge180427.in = phi ptr [ %ptridx.i246, %for.body33 ], [ %67, %for.end27 ]
  %storemerge180427 = load ptr, ptr %storemerge180427.in, align 8
  tail call fastcc void @TypeChecker_declare_class_within_module(ptr nonnull %0, ptr %storemerge180427)
  %71 = add nuw nsw i64 %70, 1
  store i64 %71, ptr %memberidx1.i.i237, align 4
  %ptridx.i246 = getelementptr inbounds ptr, ptr %67, i64 %70
  %.not464 = icmp slt i64 %70, %68
  br i1 %.not464, label %for.body33, label %for.end35

for.end35:                                        ; preds = %for.body33, %for.end27
  tail call void @free(ptr nonnull %66)
  %memberidx.i248 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %72 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i249 = getelementptr inbounds %Compiler, ptr %72, i64 0, i32 6
  %73 = load ptr, ptr %memberidx1.i249, align 8
  %memberidx2.i250 = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 2
  %74 = load i64, ptr %memberidx2.i250, align 4
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %common.ret, label %for.entry40

for.entry40:                                      ; preds = %for.end35
  %memberidx42 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 6
  %76 = load ptr, ptr %memberidx42, align 8
  %77 = tail call ptr @malloc(i32 25)
  %memberidx.i251 = getelementptr inbounds %Array_TypeAliasNode_, ptr %76, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i251, align 8
  %memberidx1.i252 = getelementptr inbounds %Array_TypeAliasNode_, ptr %76, i64 0, i32 2
  %79 = load i64, ptr %memberidx1.i252, align 4
  store i1 false, ptr %77, align 1
  %memberidx1.i.i253 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %77, i64 0, i32 1
  %memberidx2.i.i254 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %77, i64 0, i32 3
  store ptr %78, ptr %memberidx2.i.i254, align 8
  %memberidx3.i.i255 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %77, i64 0, i32 2
  store i64 %79, ptr %memberidx3.i.i255, align 4
  store i64 1, ptr %memberidx1.i.i253, align 4
  %80 = icmp slt i64 %79, 1
  br i1 %80, label %for.end46, label %for.body44.lr.ph

for.body44.lr.ph:                                 ; preds = %for.entry40
  %memberidx58 = getelementptr inbounds %Scope, ptr %35, i64 0, i32 6
  br label %for.body44

for.body44:                                       ; preds = %for.body44.lr.ph, %ifend54
  %81 = phi i64 [ 1, %for.body44.lr.ph ], [ %115, %ifend54 ]
  %storemerge181424.in = phi ptr [ %78, %for.body44.lr.ph ], [ %ptridx.i280, %ifend54 ]
  %storemerge181424 = load ptr, ptr %storemerge181424.in, align 8
  %memberidx48 = getelementptr inbounds %TypeAliasNode, ptr %storemerge181424, i64 0, i32 1
  %82 = load ptr, ptr %memberidx48, align 8
  %83 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr %82)
  %84 = load ptr, ptr %storemerge181424, align 8
  %memberidx50 = getelementptr inbounds %IdentifierToken, ptr %84, i64 0, i32 2
  %85 = load ptr, ptr %memberidx50, align 8
  %86 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %85)
  %87 = load i64, ptr %86, align 4
  %.not = icmp eq i64 %87, 20
  br i1 %.not, label %ifend54, label %if.entry52

for.end46:                                        ; preds = %ifend54, %for.entry40
  tail call void @free(ptr nonnull %77)
  %memberidx61 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 4
  %88 = load ptr, ptr %memberidx61, align 8
  %89 = tail call ptr @malloc(i32 25)
  %memberidx.i260 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i260, align 8
  %memberidx1.i261 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %88, i64 0, i32 2
  %91 = load i64, ptr %memberidx1.i261, align 4
  store i1 false, ptr %89, align 1
  %memberidx1.i.i262 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %89, i64 0, i32 1
  %memberidx2.i.i263 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %89, i64 0, i32 3
  store ptr %90, ptr %memberidx2.i.i263, align 8
  %memberidx3.i.i264 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %89, i64 0, i32 2
  store i64 %91, ptr %memberidx3.i.i264, align 4
  store i64 1, ptr %memberidx1.i.i262, align 4
  %92 = icmp slt i64 %91, 1
  br i1 %92, label %for.end65, label %for.body63

if.entry52:                                       ; preds = %for.body44
  store i1 false, ptr %77, align 1
  %93 = load ptr, ptr %85, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %93, i64 0, i32 5
  %94 = load ptr, ptr %memberidx55, align 8
  %95 = tail call ptr %94(ptr nonnull %85)
  %96 = alloca ptr, align 8
  %97 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %96, ptr nonnull @87, ptr %95)
  %98 = load ptr, ptr %96, align 8
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i269 = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i269, align 8
  %memberidx1.i270 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 %97, ptr %memberidx1.i270, align 4
  %memberidx2.i271 = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 %97, ptr %memberidx2.i271, align 4
  tail call void @free(ptr %95)
  %100 = load ptr, ptr %storemerge181424, align 8
  %memberidx57 = getelementptr inbounds %Token, ptr %100, i64 0, i32 1
  %101 = load ptr, ptr %memberidx57, align 8
  %102 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i273 = getelementptr inbounds %Compiler, ptr %102, i64 0, i32 6
  %103 = load ptr, ptr %memberidx1.i273, align 8
  %104 = call ptr @malloc(i32 24)
  store i64 1, ptr %104, align 4
  %memberidx1.i.i274 = getelementptr inbounds %FloError, ptr %104, i64 0, i32 2
  store ptr %101, ptr %memberidx1.i.i274, align 8
  %memberidx2.i.i275 = getelementptr inbounds %FloError, ptr %104, i64 0, i32 1
  store ptr %99, ptr %memberidx2.i.i275, align 8
  %memberidx.i.i276 = getelementptr inbounds %Array_FloError_, ptr %103, i64 0, i32 2
  %105 = load i64, ptr %memberidx.i.i276, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %103, i64 0, i32 3
  %106 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %105, %106
  br i1 %.not.i.i, label %if.entry52.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry52.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry52
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %103, i64 0, i32 1
  %.pre451 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry52
  %107 = shl nuw i64 %106, 1
  store i64 %107, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %103, i64 0, i32 1
  %108 = load ptr, ptr %memberidx2.i.i.i, align 8
  %109 = shl i64 %106, 4
  %110 = call ptr @realloc(ptr %108, i64 %109)
  store ptr %110, ptr %memberidx2.i.i.i, align 8
  %.pre450 = load i64, ptr %memberidx.i.i276, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry52.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %111 = phi ptr [ %.pre451, %if.entry52.TypeChecker_error.exit_crit_edge ], [ %110, %if.entry.i.i ]
  %112 = phi i64 [ %105, %if.entry52.TypeChecker_error.exit_crit_edge ], [ %.pre450, %if.entry.i.i ]
  %113 = add nsw i64 %112, 1
  store i64 %113, ptr %memberidx.i.i276, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %111, i64 %112
  store ptr %104, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend54:                                          ; preds = %for.body44
  %114 = load ptr, ptr %memberidx58, align 8
  tail call fastcc void @Map_string_Type____setitem__(ptr %114, ptr %85, ptr %83)
  %115 = add nuw nsw i64 %81, 1
  store i64 %115, ptr %memberidx1.i.i253, align 4
  %ptridx.i280 = getelementptr inbounds ptr, ptr %78, i64 %81
  %.not465 = icmp slt i64 %81, %79
  br i1 %.not465, label %for.body44, label %for.end46

for.body63:                                       ; preds = %for.end46, %TypeChecker_declare_global_const.exit
  %116 = phi i64 [ %137, %TypeChecker_declare_global_const.exit ], [ 1, %for.end46 ]
  %storemerge182419.in = phi ptr [ %ptridx.i295, %TypeChecker_declare_global_const.exit ], [ %90, %for.end46 ]
  %storemerge182419 = load ptr, ptr %storemerge182419.in, align 8
  %117 = tail call fastcc ptr @TypeChecker_check_const_declaration(ptr nonnull %0, ptr %storemerge182419)
  %118 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i.i283 = getelementptr inbounds %Compiler, ptr %118, i64 0, i32 6
  %119 = load ptr, ptr %memberidx1.i.i283, align 8
  %memberidx2.i.i284 = getelementptr inbounds %Array_FloError_, ptr %119, i64 0, i32 2
  %120 = load i64, ptr %memberidx2.i.i284, align 4
  %121 = icmp sgt i64 %120, 0
  br i1 %121, label %TypeChecker_declare_global_const.exit, label %ifend.i

ifend.i:                                          ; preds = %for.body63
  %memberidx.i285 = getelementptr inbounds %ConstDeclaration, ptr %117, i64 0, i32 3
  store i1 true, ptr %memberidx.i285, align 1
  %122 = load i64, ptr %memberidx1, align 4
  %123 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %123, i64 0, i32 1
  %124 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %125, i64 %122
  %126 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i286 = getelementptr inbounds %Module, ptr %126, i64 0, i32 9
  %127 = load ptr, ptr %memberidx1.i286, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %127, i64 0, i32 2
  %128 = load i64, ptr %memberidx.i5.i, align 4
  %memberidx1.i6.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %127, i64 0, i32 3
  %129 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i287 = icmp slt i64 %128, %129
  br i1 %.not.i.i287, label %ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge, label %if.entry.i.i290

ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge: ; preds = %ifend.i
  %memberidx4.i.i291.phi.trans.insert = getelementptr inbounds %Array_ConstDeclaration_, ptr %127, i64 0, i32 1
  %.pre453 = load ptr, ptr %memberidx4.i.i291.phi.trans.insert, align 8
  br label %Array_ConstDeclaration____sl__.exit.i

if.entry.i.i290:                                  ; preds = %ifend.i
  %130 = shl nuw i64 %129, 1
  store i64 %130, ptr %memberidx1.i6.i, align 4
  %memberidx2.i.i.i289 = getelementptr inbounds %Array_ConstDeclaration_, ptr %127, i64 0, i32 1
  %131 = load ptr, ptr %memberidx2.i.i.i289, align 8
  %132 = shl i64 %129, 4
  %133 = tail call ptr @realloc(ptr %131, i64 %132)
  store ptr %133, ptr %memberidx2.i.i.i289, align 8
  %.pre452 = load i64, ptr %memberidx.i5.i, align 4
  br label %Array_ConstDeclaration____sl__.exit.i

Array_ConstDeclaration____sl__.exit.i:            ; preds = %ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge, %if.entry.i.i290
  %134 = phi ptr [ %133, %if.entry.i.i290 ], [ %.pre453, %ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge ]
  %135 = phi i64 [ %.pre452, %if.entry.i.i290 ], [ %128, %ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge ]
  %136 = add nsw i64 %135, 1
  store i64 %136, ptr %memberidx.i5.i, align 4
  %ptridx.i.i292 = getelementptr inbounds ptr, ptr %134, i64 %135
  store ptr %117, ptr %ptridx.i.i292, align 8
  br label %TypeChecker_declare_global_const.exit

TypeChecker_declare_global_const.exit:            ; preds = %for.body63, %Array_ConstDeclaration____sl__.exit.i
  %137 = add nuw nsw i64 %116, 1
  store i64 %137, ptr %memberidx1.i.i262, align 4
  %ptridx.i295 = getelementptr inbounds ptr, ptr %90, i64 %116
  %.not466 = icmp slt i64 %116, %91
  br i1 %.not466, label %for.body63, label %for.end65

for.end65:                                        ; preds = %TypeChecker_declare_global_const.exit, %for.end46
  tail call void @free(ptr nonnull %89)
  %memberidx69 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 5
  %138 = load ptr, ptr %memberidx69, align 8
  %139 = tail call ptr @malloc(i32 25)
  %memberidx.i297 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %138, i64 0, i32 1
  %140 = load ptr, ptr %memberidx.i297, align 8
  %memberidx1.i298 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %138, i64 0, i32 2
  %141 = load i64, ptr %memberidx1.i298, align 4
  store i1 false, ptr %139, align 1
  %memberidx1.i.i299 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %139, i64 0, i32 1
  %memberidx2.i.i300 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %139, i64 0, i32 3
  store ptr %140, ptr %memberidx2.i.i300, align 8
  %memberidx3.i.i301 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %139, i64 0, i32 2
  store i64 %141, ptr %memberidx3.i.i301, align 4
  store i64 1, ptr %memberidx1.i.i299, align 4
  %142 = icmp slt i64 %141, 1
  br i1 %142, label %for.end73, label %for.body71

for.body71:                                       ; preds = %for.end65, %TypeChecker_declare_global_var.exit
  %143 = phi i64 [ %192, %TypeChecker_declare_global_var.exit ], [ 1, %for.end65 ]
  %storemerge183416.in = phi ptr [ %ptridx.i329, %TypeChecker_declare_global_var.exit ], [ %140, %for.end65 ]
  %storemerge183416 = load ptr, ptr %storemerge183416.in, align 8
  %144 = tail call fastcc ptr @TypeChecker_check_var_declaration(ptr nonnull %0, ptr %storemerge183416)
  %145 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i.i307 = getelementptr inbounds %Compiler, ptr %145, i64 0, i32 6
  %146 = load ptr, ptr %memberidx1.i.i307, align 8
  %memberidx2.i.i308 = getelementptr inbounds %Array_FloError_, ptr %146, i64 0, i32 2
  %147 = load i64, ptr %memberidx2.i.i308, align 4
  %148 = icmp sgt i64 %147, 0
  br i1 %148, label %TypeChecker_declare_global_var.exit, label %ifend.i313

ifend.i313:                                       ; preds = %for.body71
  %149 = load ptr, ptr %0, align 8
  %memberidx1.i309 = getelementptr inbounds %VarDeclaration, ptr %144, i64 0, i32 2
  %150 = load ptr, ptr %memberidx1.i309, align 8
  %memberidx.i23.i = getelementptr inbounds %Program, ptr %149, i64 0, i32 1
  %151 = load ptr, ptr %memberidx.i23.i, align 8
  %memberidx1.i24.i = getelementptr inbounds %VarId, ptr %150, i64 0, i32 1
  %152 = load i64, ptr %memberidx1.i24.i, align 4
  %memberidx.i.i25.i = getelementptr inbounds %Array_Module_, ptr %151, i64 0, i32 1
  %153 = load ptr, ptr %memberidx.i.i25.i, align 8
  %ptridx.i.i26.i = getelementptr inbounds ptr, ptr %153, i64 %152
  %154 = load ptr, ptr %ptridx.i.i26.i, align 8
  %memberidx2.i27.i = getelementptr inbounds %Module, ptr %154, i64 0, i32 2
  %155 = load ptr, ptr %memberidx2.i27.i, align 8
  %memberidx3.i.i310 = getelementptr inbounds %VarId, ptr %150, i64 0, i32 2
  %156 = load i64, ptr %memberidx3.i.i310, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Var_, ptr %155, i64 0, i32 1
  %157 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %157, i64 %156
  %158 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx2.i311 = getelementptr inbounds %Var, ptr %158, i64 0, i32 2
  %159 = load ptr, ptr %memberidx2.i311, align 8
  %.not.i312 = icmp eq ptr %159, null
  br i1 %.not.i312, label %ifend5.i, label %if.entry3.i

if.entry3.i:                                      ; preds = %ifend.i313
  %memberidx6.i314 = getelementptr inbounds %Expression, ptr %159, i64 0, i32 1
  %160 = load i1, ptr %memberidx6.i314, align 1
  br i1 %160, label %ifend5.i, label %if.entry7.i

ifend5.i:                                         ; preds = %if.entry3.i, %ifend.i313
  %memberidx12.i315 = getelementptr inbounds %VarDeclaration, ptr %144, i64 0, i32 3
  store i1 true, ptr %memberidx12.i315, align 1
  %161 = load i64, ptr %memberidx1, align 4
  %162 = load ptr, ptr %0, align 8
  %memberidx1.i.i29.i = getelementptr inbounds %Program, ptr %162, i64 0, i32 1
  %163 = load ptr, ptr %memberidx1.i.i29.i, align 8
  %memberidx.i.i.i30.i = getelementptr inbounds %Array_Module_, ptr %163, i64 0, i32 1
  %164 = load ptr, ptr %memberidx.i.i.i30.i, align 8
  %ptridx.i.i.i.i316 = getelementptr inbounds ptr, ptr %164, i64 %161
  %165 = load ptr, ptr %ptridx.i.i.i.i316, align 8
  %memberidx13.i317 = getelementptr inbounds %Module, ptr %165, i64 0, i32 10
  %166 = load ptr, ptr %memberidx13.i317, align 8
  %memberidx.i34.i = getelementptr inbounds %Array_VarDeclaration_, ptr %166, i64 0, i32 2
  %167 = load i64, ptr %memberidx.i34.i, align 4
  %memberidx1.i35.i = getelementptr inbounds %Array_VarDeclaration_, ptr %166, i64 0, i32 3
  %168 = load i64, ptr %memberidx1.i35.i, align 4
  %.not.i.i318 = icmp slt i64 %167, %168
  br i1 %.not.i.i318, label %ifend5.i.Array_VarDeclaration____sl__.exit.i_crit_edge, label %if.entry.i.i319

ifend5.i.Array_VarDeclaration____sl__.exit.i_crit_edge: ; preds = %ifend5.i
  %memberidx4.i.i320.phi.trans.insert = getelementptr inbounds %Array_VarDeclaration_, ptr %166, i64 0, i32 1
  %.pre457 = load ptr, ptr %memberidx4.i.i320.phi.trans.insert, align 8
  br label %Array_VarDeclaration____sl__.exit.i

if.entry.i.i319:                                  ; preds = %ifend5.i
  %169 = shl nuw i64 %168, 1
  store i64 %169, ptr %memberidx1.i35.i, align 4
  %memberidx2.i.i37.i = getelementptr inbounds %Array_VarDeclaration_, ptr %166, i64 0, i32 1
  %170 = load ptr, ptr %memberidx2.i.i37.i, align 8
  %171 = shl i64 %168, 4
  %172 = tail call ptr @realloc(ptr %170, i64 %171)
  store ptr %172, ptr %memberidx2.i.i37.i, align 8
  %.pre456 = load i64, ptr %memberidx.i34.i, align 4
  br label %Array_VarDeclaration____sl__.exit.i

Array_VarDeclaration____sl__.exit.i:              ; preds = %ifend5.i.Array_VarDeclaration____sl__.exit.i_crit_edge, %if.entry.i.i319
  %173 = phi ptr [ %172, %if.entry.i.i319 ], [ %.pre457, %ifend5.i.Array_VarDeclaration____sl__.exit.i_crit_edge ]
  %174 = phi i64 [ %.pre456, %if.entry.i.i319 ], [ %167, %ifend5.i.Array_VarDeclaration____sl__.exit.i_crit_edge ]
  %175 = add nsw i64 %174, 1
  store i64 %175, ptr %memberidx.i34.i, align 4
  %ptridx.i.i321 = getelementptr inbounds ptr, ptr %173, i64 %174
  store ptr %144, ptr %ptridx.i.i321, align 8
  br label %TypeChecker_declare_global_var.exit

if.entry7.i:                                      ; preds = %if.entry3.i
  %176 = tail call ptr @malloc(i32 54)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %176, ptr noundef nonnull align 8 dereferenceable(54) @91, i64 54, i1 false)
  %177 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %177, align 8
  %memberidx.i.i31.i = getelementptr inbounds %string, ptr %177, i64 0, i32 1
  store ptr %176, ptr %memberidx.i.i31.i, align 8
  %memberidx1.i.i32.i = getelementptr inbounds %string, ptr %177, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i32.i, align 4
  %memberidx2.i.i33.i = getelementptr inbounds %string, ptr %177, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i33.i, align 4
  %memberidx10.i322 = getelementptr inbounds %VarDeclarationStatement, ptr %storemerge183416, i64 0, i32 4
  %178 = load ptr, ptr %memberidx10.i322, align 8
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i22.i = getelementptr inbounds %Compiler, ptr %180, i64 0, i32 6
  %181 = load ptr, ptr %memberidx1.i22.i, align 8
  %182 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %182, align 4
  %memberidx1.i.i.i323 = getelementptr inbounds %FloError, ptr %182, i64 0, i32 2
  store ptr %179, ptr %memberidx1.i.i.i323, align 8
  %memberidx2.i.i.i324 = getelementptr inbounds %FloError, ptr %182, i64 0, i32 1
  store ptr %177, ptr %memberidx2.i.i.i324, align 8
  %memberidx.i.i.i325 = getelementptr inbounds %Array_FloError_, ptr %181, i64 0, i32 2
  %183 = load i64, ptr %memberidx.i.i.i325, align 4
  %memberidx1.i2.i.i = getelementptr inbounds %Array_FloError_, ptr %181, i64 0, i32 3
  %184 = load i64, ptr %memberidx1.i2.i.i, align 4
  %.not.i.i.i = icmp slt i64 %183, %184
  br i1 %.not.i.i.i, label %if.entry7.i.TypeChecker_error.exit.i_crit_edge, label %if.entry.i.i.i

if.entry7.i.TypeChecker_error.exit.i_crit_edge:   ; preds = %if.entry7.i
  %memberidx4.i.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %181, i64 0, i32 1
  %.pre455 = load ptr, ptr %memberidx4.i.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit.i

if.entry.i.i.i:                                   ; preds = %if.entry7.i
  %185 = shl nuw i64 %184, 1
  store i64 %185, ptr %memberidx1.i2.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %181, i64 0, i32 1
  %186 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %187 = shl i64 %184, 4
  %188 = tail call ptr @realloc(ptr %186, i64 %187)
  store ptr %188, ptr %memberidx2.i.i.i.i, align 8
  %.pre454 = load i64, ptr %memberidx.i.i.i325, align 4
  br label %TypeChecker_error.exit.i

TypeChecker_error.exit.i:                         ; preds = %if.entry7.i.TypeChecker_error.exit.i_crit_edge, %if.entry.i.i.i
  %189 = phi ptr [ %188, %if.entry.i.i.i ], [ %.pre455, %if.entry7.i.TypeChecker_error.exit.i_crit_edge ]
  %190 = phi i64 [ %.pre454, %if.entry.i.i.i ], [ %183, %if.entry7.i.TypeChecker_error.exit.i_crit_edge ]
  %191 = add nsw i64 %190, 1
  store i64 %191, ptr %memberidx.i.i.i325, align 4
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %189, i64 %190
  store ptr %182, ptr %ptridx.i.i.i, align 8
  br label %TypeChecker_declare_global_var.exit

TypeChecker_declare_global_var.exit:              ; preds = %for.body71, %Array_VarDeclaration____sl__.exit.i, %TypeChecker_error.exit.i
  %192 = add nuw nsw i64 %143, 1
  store i64 %192, ptr %memberidx1.i.i299, align 4
  %ptridx.i329 = getelementptr inbounds ptr, ptr %140, i64 %143
  %.not467 = icmp slt i64 %143, %141
  br i1 %.not467, label %for.body71, label %for.end73

for.end73:                                        ; preds = %TypeChecker_declare_global_var.exit, %for.end65
  tail call void @free(ptr nonnull %139)
  %193 = load ptr, ptr %1, align 8
  %194 = tail call ptr @malloc(i32 25)
  %memberidx.i331 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %193, i64 0, i32 1
  %195 = load ptr, ptr %memberidx.i331, align 8
  %memberidx1.i332 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %193, i64 0, i32 2
  %196 = load i64, ptr %memberidx1.i332, align 4
  store i1 false, ptr %194, align 1
  %memberidx1.i.i333 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %194, i64 0, i32 1
  %memberidx2.i.i334 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %194, i64 0, i32 3
  store ptr %195, ptr %memberidx2.i.i334, align 8
  %memberidx3.i.i335 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %194, i64 0, i32 2
  store i64 %196, ptr %memberidx3.i.i335, align 4
  store i64 1, ptr %memberidx1.i.i333, align 4
  %197 = icmp slt i64 %196, 1
  br i1 %197, label %for.end81, label %for.body79

for.body79:                                       ; preds = %for.end73, %for.body79
  %198 = phi i64 [ %199, %for.body79 ], [ 1, %for.end73 ]
  %storemerge184413.in = phi ptr [ %ptridx.i342, %for.body79 ], [ %195, %for.end73 ]
  %storemerge184413 = load ptr, ptr %storemerge184413.in, align 8
  tail call fastcc void @TypeChecker_declare_function_within_module(ptr nonnull %0, ptr %storemerge184413)
  %199 = add nuw nsw i64 %198, 1
  store i64 %199, ptr %memberidx1.i.i333, align 4
  %ptridx.i342 = getelementptr inbounds ptr, ptr %195, i64 %198
  %.not468 = icmp slt i64 %198, %196
  br i1 %.not468, label %for.body79, label %for.end81

for.end81:                                        ; preds = %for.body79, %for.end73
  tail call void @free(ptr nonnull %194)
  %200 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i345 = getelementptr inbounds %Compiler, ptr %200, i64 0, i32 6
  %201 = load ptr, ptr %memberidx1.i345, align 8
  %memberidx2.i346 = getelementptr inbounds %Array_FloError_, ptr %201, i64 0, i32 2
  %202 = load i64, ptr %memberidx2.i346, align 4
  %203 = icmp sgt i64 %202, 0
  br i1 %203, label %common.ret, label %for.cond87.preheader

for.cond87.preheader:                             ; preds = %for.end81
  %204 = load ptr, ptr %memberidx23, align 8
  %memberidx92410 = getelementptr inbounds %Array_EnumNode_, ptr %204, i64 0, i32 2
  %205 = load i64, ptr %memberidx92410, align 4
  %206 = icmp sgt i64 %205, 0
  br i1 %206, label %for.body88, label %for.entry95

for.body88:                                       ; preds = %for.cond87.preheader, %for.body88
  %207 = phi ptr [ %214, %for.body88 ], [ %204, %for.cond87.preheader ]
  %storemerge187411 = phi i64 [ %213, %for.body88 ], [ 0, %for.cond87.preheader ]
  %208 = load ptr, ptr %memberidx10.i, align 8
  %memberidx.i347 = getelementptr inbounds %Array_Enum_, ptr %208, i64 0, i32 1
  %209 = load ptr, ptr %memberidx.i347, align 8
  %ptridx.i348 = getelementptr inbounds ptr, ptr %209, i64 %storemerge187411
  %210 = load ptr, ptr %ptridx.i348, align 8
  %memberidx.i349 = getelementptr inbounds %Array_EnumNode_, ptr %207, i64 0, i32 1
  %211 = load ptr, ptr %memberidx.i349, align 8
  %ptridx.i350 = getelementptr inbounds ptr, ptr %211, i64 %storemerge187411
  %212 = load ptr, ptr %ptridx.i350, align 8
  tail call fastcc void @TypeChecker_check_enum_body(ptr nonnull %0, ptr %210, ptr %212)
  %213 = add nuw nsw i64 %storemerge187411, 1
  %214 = load ptr, ptr %memberidx23, align 8
  %memberidx92 = getelementptr inbounds %Array_EnumNode_, ptr %214, i64 0, i32 2
  %215 = load i64, ptr %memberidx92, align 4
  %216 = icmp slt i64 %213, %215
  br i1 %216, label %for.body88, label %for.entry95

for.entry95:                                      ; preds = %for.body88, %for.cond87.preheader
  %217 = load ptr, ptr %memberidx31, align 8
  %218 = tail call ptr @malloc(i32 25)
  %memberidx.i351 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %217, i64 0, i32 1
  %219 = load ptr, ptr %memberidx.i351, align 8
  %memberidx1.i352 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %217, i64 0, i32 2
  %220 = load i64, ptr %memberidx1.i352, align 4
  store i1 false, ptr %218, align 1
  %memberidx1.i.i353 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %218, i64 0, i32 1
  %memberidx2.i.i354 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %218, i64 0, i32 3
  store ptr %219, ptr %memberidx2.i.i354, align 8
  %memberidx3.i.i355 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %218, i64 0, i32 2
  store i64 %220, ptr %memberidx3.i.i355, align 4
  store i64 1, ptr %memberidx1.i.i353, align 4
  %221 = icmp slt i64 %220, 1
  br i1 %221, label %for.end102, label %for.body100

for.body100:                                      ; preds = %for.entry95, %for.body100
  %222 = phi i64 [ %223, %for.body100 ], [ 1, %for.entry95 ]
  %storemerge185409.in = phi ptr [ %ptridx.i362, %for.body100 ], [ %219, %for.entry95 ]
  %storemerge185409 = load ptr, ptr %storemerge185409.in, align 8
  tail call fastcc void @TypeChecker_check_class_body(ptr nonnull %0, ptr %storemerge185409)
  %223 = add nuw nsw i64 %222, 1
  store i64 %223, ptr %memberidx1.i.i353, align 4
  %ptridx.i362 = getelementptr inbounds ptr, ptr %219, i64 %222
  %.not469 = icmp slt i64 %222, %220
  br i1 %.not469, label %for.body100, label %for.end102

for.end102:                                       ; preds = %for.body100, %for.entry95
  tail call void @free(ptr nonnull %218)
  %224 = load ptr, ptr %1, align 8
  %memberidx111406 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %224, i64 0, i32 2
  %225 = load i64, ptr %memberidx111406, align 4
  %226 = icmp sgt i64 %225, 0
  br i1 %226, label %for.body107, label %for.end109

for.body107:                                      ; preds = %for.end102, %TypeChecker_check_function_body.exit
  %227 = phi ptr [ %286, %TypeChecker_check_function_body.exit ], [ %224, %for.end102 ]
  %storemerge186407 = phi i64 [ %285, %TypeChecker_check_function_body.exit ], [ 0, %for.end102 ]
  %228 = load ptr, ptr %memberidx1.i189, align 8
  %memberidx.i364 = getelementptr inbounds %Array_Function_, ptr %228, i64 0, i32 1
  %229 = load ptr, ptr %memberidx.i364, align 8
  %ptridx.i365 = getelementptr inbounds ptr, ptr %229, i64 %storemerge186407
  %230 = load ptr, ptr %ptridx.i365, align 8
  %memberidx.i366 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %227, i64 0, i32 1
  %231 = load ptr, ptr %memberidx.i366, align 8
  %ptridx.i367 = getelementptr inbounds ptr, ptr %231, i64 %storemerge186407
  %232 = load ptr, ptr %ptridx.i367, align 8
  %memberidx.i368 = getelementptr inbounds %Function, ptr %230, i64 0, i32 6
  %233 = load i1, ptr %memberidx.i368, align 1
  br i1 %233, label %TypeChecker_check_function_body.exit, label %ifend.i376

ifend.i376:                                       ; preds = %for.body107
  %234 = load ptr, ptr %230, align 8
  store ptr %234, ptr %memberidx18, align 8
  %memberidx6.i371 = getelementptr inbounds %Function, ptr %230, i64 0, i32 5
  %235 = load ptr, ptr %memberidx6.i371, align 8
  store ptr %235, ptr %memberidx2, align 8
  %memberidx7.i372 = getelementptr inbounds %Function, ptr %230, i64 0, i32 3
  %memberidx8.i = getelementptr inbounds %FunctionDeclarationNode, ptr %232, i64 0, i32 2
  %236 = load ptr, ptr %memberidx8.i, align 8
  %237 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %236, ptr null)
  store ptr %237, ptr %memberidx7.i372, align 8
  %238 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i.i374 = getelementptr inbounds %Compiler, ptr %238, i64 0, i32 6
  %239 = load ptr, ptr %memberidx1.i.i374, align 8
  %memberidx2.i.i375 = getelementptr inbounds %Array_FloError_, ptr %239, i64 0, i32 2
  %240 = load i64, ptr %memberidx2.i.i375, align 4
  %241 = icmp sgt i64 %240, 0
  br i1 %241, label %TypeChecker_check_function_body.exit, label %ifend11.i

ifend11.i:                                        ; preds = %ifend.i376
  %memberidx13.i377 = getelementptr inbounds %Block, ptr %237, i64 0, i32 1
  %242 = load i1, ptr %memberidx13.i377, align 1
  br i1 %242, label %ifend16.i, label %if.entry14.i

if.entry14.i:                                     ; preds = %ifend11.i
  %memberidx17.i = getelementptr inbounds %Function, ptr %230, i64 0, i32 4
  %243 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i378 = getelementptr inbounds %FunctionType, ptr %243, i64 0, i32 2
  %244 = load ptr, ptr %memberidx18.i378, align 8
  %245 = load i64, ptr %244, align 4
  %246 = icmp eq i64 %245, 10
  br i1 %246, label %if.entry20.i, label %else21.i

ifend16.i:                                        ; preds = %Array_Statement____sl__.exit.i, %ifend11.i
  %247 = load ptr, ptr %0, align 8
  %248 = load ptr, ptr %memberidx6.i371, align 8
  %memberidx.i49.i = getelementptr inbounds %Program, ptr %247, i64 0, i32 1
  %249 = load ptr, ptr %memberidx.i49.i, align 8
  %250 = load i64, ptr %248, align 4
  %memberidx.i.i50.i = getelementptr inbounds %Array_Module_, ptr %249, i64 0, i32 1
  %251 = load ptr, ptr %memberidx.i.i50.i, align 8
  %ptridx.i.i51.i = getelementptr inbounds ptr, ptr %251, i64 %250
  %252 = load ptr, ptr %ptridx.i.i51.i, align 8
  %memberidx2.i52.i = getelementptr inbounds %Module, ptr %252, i64 0, i32 8
  %253 = load ptr, ptr %memberidx2.i52.i, align 8
  %memberidx3.i.i379 = getelementptr inbounds %ScopeId, ptr %248, i64 0, i32 1
  %254 = load i64, ptr %memberidx3.i.i379, align 4
  %memberidx.i5.i.i380 = getelementptr inbounds %Array_Scope_, ptr %253, i64 0, i32 1
  %255 = load ptr, ptr %memberidx.i5.i.i380, align 8
  %ptridx.i6.i.i381 = getelementptr inbounds ptr, ptr %255, i64 %254
  %256 = load ptr, ptr %ptridx.i6.i.i381, align 8
  %memberidx30.i = getelementptr inbounds %Scope, ptr %256, i64 0, i32 5
  %257 = load ptr, ptr %memberidx30.i, align 8
  store ptr %257, ptr %memberidx2, align 8
  br label %TypeChecker_check_function_body.exit

if.entry20.i:                                     ; preds = %if.entry14.i
  %258 = load ptr, ptr %237, align 8
  %259 = tail call ptr @malloc(i32 16)
  store i64 7, ptr %259, align 4
  %memberidx.i53.i = getelementptr inbounds %ReturnStatement, ptr %259, i64 0, i32 1
  store ptr null, ptr %memberidx.i53.i, align 8
  %memberidx.i57.i = getelementptr inbounds %Array_Statement_, ptr %258, i64 0, i32 2
  %260 = load i64, ptr %memberidx.i57.i, align 4
  %memberidx1.i58.i = getelementptr inbounds %Array_Statement_, ptr %258, i64 0, i32 3
  %261 = load i64, ptr %memberidx1.i58.i, align 4
  %.not.i.i382 = icmp slt i64 %260, %261
  br i1 %.not.i.i382, label %if.entry20.i.Array_Statement____sl__.exit.i_crit_edge, label %if.entry.i.i383

if.entry20.i.Array_Statement____sl__.exit.i_crit_edge: ; preds = %if.entry20.i
  %memberidx4.i.i384.phi.trans.insert = getelementptr inbounds %Array_Statement_, ptr %258, i64 0, i32 1
  %.pre461 = load ptr, ptr %memberidx4.i.i384.phi.trans.insert, align 8
  br label %Array_Statement____sl__.exit.i

if.entry.i.i383:                                  ; preds = %if.entry20.i
  %262 = shl nuw i64 %261, 1
  store i64 %262, ptr %memberidx1.i58.i, align 4
  %memberidx2.i.i60.i = getelementptr inbounds %Array_Statement_, ptr %258, i64 0, i32 1
  %263 = load ptr, ptr %memberidx2.i.i60.i, align 8
  %264 = shl i64 %261, 4
  %265 = tail call ptr @realloc(ptr %263, i64 %264)
  store ptr %265, ptr %memberidx2.i.i60.i, align 8
  %.pre460 = load i64, ptr %memberidx.i57.i, align 4
  br label %Array_Statement____sl__.exit.i

Array_Statement____sl__.exit.i:                   ; preds = %if.entry20.i.Array_Statement____sl__.exit.i_crit_edge, %if.entry.i.i383
  %266 = phi ptr [ %265, %if.entry.i.i383 ], [ %.pre461, %if.entry20.i.Array_Statement____sl__.exit.i_crit_edge ]
  %267 = phi i64 [ %.pre460, %if.entry.i.i383 ], [ %260, %if.entry20.i.Array_Statement____sl__.exit.i_crit_edge ]
  %268 = add nsw i64 %267, 1
  store i64 %268, ptr %memberidx.i57.i, align 4
  %ptridx.i.i385 = getelementptr inbounds ptr, ptr %266, i64 %267
  store ptr %259, ptr %ptridx.i.i385, align 8
  br label %ifend16.i

else21.i:                                         ; preds = %if.entry14.i
  %269 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %269, ptr noundef nonnull align 8 dereferenceable(40) @143, i64 40, i1 false)
  %270 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %270, align 8
  %memberidx.i.i54.i = getelementptr inbounds %string, ptr %270, i64 0, i32 1
  store ptr %269, ptr %memberidx.i.i54.i, align 8
  %memberidx1.i.i55.i = getelementptr inbounds %string, ptr %270, i64 0, i32 2
  store i64 40, ptr %memberidx1.i.i55.i, align 4
  %memberidx2.i.i56.i = getelementptr inbounds %string, ptr %270, i64 0, i32 3
  store i64 40, ptr %memberidx2.i.i56.i, align 4
  %memberidx25.i = getelementptr inbounds %FunctionDeclarationNode, ptr %232, i64 0, i32 3
  %271 = load ptr, ptr %memberidx25.i, align 8
  %272 = load ptr, ptr %271, align 8
  %273 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i48.i = getelementptr inbounds %Compiler, ptr %273, i64 0, i32 6
  %274 = load ptr, ptr %memberidx1.i48.i, align 8
  %275 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %275, align 4
  %memberidx1.i.i.i386 = getelementptr inbounds %FloError, ptr %275, i64 0, i32 2
  store ptr %272, ptr %memberidx1.i.i.i386, align 8
  %memberidx2.i.i.i387 = getelementptr inbounds %FloError, ptr %275, i64 0, i32 1
  store ptr %270, ptr %memberidx2.i.i.i387, align 8
  %memberidx.i.i.i388 = getelementptr inbounds %Array_FloError_, ptr %274, i64 0, i32 2
  %276 = load i64, ptr %memberidx.i.i.i388, align 4
  %memberidx1.i2.i.i389 = getelementptr inbounds %Array_FloError_, ptr %274, i64 0, i32 3
  %277 = load i64, ptr %memberidx1.i2.i.i389, align 4
  %.not.i.i.i390 = icmp slt i64 %276, %277
  br i1 %.not.i.i.i390, label %else21.i.TypeChecker_error.exit.i396_crit_edge, label %if.entry.i.i.i393

else21.i.TypeChecker_error.exit.i396_crit_edge:   ; preds = %else21.i
  %memberidx4.i.i.i394.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %274, i64 0, i32 1
  %.pre459 = load ptr, ptr %memberidx4.i.i.i394.phi.trans.insert, align 8
  br label %TypeChecker_error.exit.i396

if.entry.i.i.i393:                                ; preds = %else21.i
  %278 = shl nuw i64 %277, 1
  store i64 %278, ptr %memberidx1.i2.i.i389, align 4
  %memberidx2.i.i.i.i392 = getelementptr inbounds %Array_FloError_, ptr %274, i64 0, i32 1
  %279 = load ptr, ptr %memberidx2.i.i.i.i392, align 8
  %280 = shl i64 %277, 4
  %281 = tail call ptr @realloc(ptr %279, i64 %280)
  store ptr %281, ptr %memberidx2.i.i.i.i392, align 8
  %.pre458 = load i64, ptr %memberidx.i.i.i388, align 4
  br label %TypeChecker_error.exit.i396

TypeChecker_error.exit.i396:                      ; preds = %else21.i.TypeChecker_error.exit.i396_crit_edge, %if.entry.i.i.i393
  %282 = phi ptr [ %281, %if.entry.i.i.i393 ], [ %.pre459, %else21.i.TypeChecker_error.exit.i396_crit_edge ]
  %283 = phi i64 [ %.pre458, %if.entry.i.i.i393 ], [ %276, %else21.i.TypeChecker_error.exit.i396_crit_edge ]
  %284 = add nsw i64 %283, 1
  store i64 %284, ptr %memberidx.i.i.i388, align 4
  %ptridx.i.i.i395 = getelementptr inbounds ptr, ptr %282, i64 %283
  store ptr %275, ptr %ptridx.i.i.i395, align 8
  br label %TypeChecker_check_function_body.exit

TypeChecker_check_function_body.exit:             ; preds = %for.body107, %ifend.i376, %ifend16.i, %TypeChecker_error.exit.i396
  %285 = add nuw nsw i64 %storemerge186407, 1
  %286 = load ptr, ptr %1, align 8
  %memberidx111 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %286, i64 0, i32 2
  %287 = load i64, ptr %memberidx111, align 4
  %288 = icmp slt i64 %285, %287
  br i1 %288, label %for.body107, label %for.end109

for.end109:                                       ; preds = %TypeChecker_check_function_body.exit, %for.end102
  %289 = load i1, ptr %memberidx, align 1
  %290 = load i64, ptr %memberidx1, align 4
  %291 = icmp ne i64 %290, 0
  %292 = and i1 %289, %291
  br i1 %292, label %if.entry116, label %ifend118

if.entry116:                                      ; preds = %for.end109
  store i64 0, ptr %memberidx1, align 4
  %293 = load ptr, ptr %0, align 8
  %memberidx1.i.i213 = getelementptr inbounds %Program, ptr %293, i64 0, i32 1
  %294 = load ptr, ptr %memberidx1.i.i213, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %294, i64 0, i32 1
  %295 = load ptr, ptr %memberidx.i.i.i, align 8
  %296 = load ptr, ptr %295, align 8
  %memberidx2.i214 = getelementptr inbounds %Module, ptr %296, i64 0, i32 6
  %297 = load ptr, ptr %memberidx2.i214, align 8
  store ptr %297, ptr %memberidx2, align 8
  tail call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %0, ptr %5)
  br label %ifend118

ifend118:                                         ; preds = %for.end109, %if.entry116
  store ptr %4, ptr %memberidx2, align 8
  store i64 %3, ptr %memberidx1, align 4
  %298 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %298, i64 0, i32 6
  %299 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %299, i64 0, i32 2
  %300 = load i64, ptr %memberidx2.i, align 4
  %301 = icmp sgt i64 %300, 0
  %spec.select = select i1 %301, ptr null, ptr %5
  br label %common.ret
}

define internal fastcc void @TypeChecker_import_all_from_module(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
for.entry:
  %2 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %Module, ptr %1, i64 0, i32 6
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %memberidx.i, align 8
  %5 = load i64, ptr %3, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %7, i64 0, i32 8
  %8 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %3, i64 0, i32 1
  %9 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx2 = getelementptr inbounds %Module, ptr %1, i64 0, i32 10
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = tail call ptr @malloc(i32 25)
  %memberidx.i78 = getelementptr inbounds %Array_VarDeclaration_, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i78, align 8
  %memberidx1.i = getelementptr inbounds %Array_VarDeclaration_, ptr %12, i64 0, i32 2
  %15 = load i64, ptr %memberidx1.i, align 4
  %16 = icmp slt i64 %15, 1
  br i1 %16, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx.i.i.i97 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %17 = phi i64 [ 1, %for.body.lr.ph ], [ %33, %for.body ]
  %imported_var.0250.in = phi ptr [ %14, %for.body.lr.ph ], [ %ptridx.i112, %for.body ]
  %imported_var.0250 = load ptr, ptr %imported_var.0250.in, align 8
  %memberidx4 = getelementptr inbounds %VarDeclaration, ptr %imported_var.0250, i64 0, i32 1
  %18 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %VarDeclaration, ptr %imported_var.0250, i64 0, i32 2
  %19 = load ptr, ptr %memberidx5, align 8
  %20 = load ptr, ptr %0, align 8
  %21 = load i64, ptr %memberidx.i.i.i97, align 4
  %memberidx1.i.i.i.i98 = getelementptr inbounds %Program, ptr %20, i64 0, i32 1
  %22 = load ptr, ptr %memberidx1.i.i.i.i98, align 8
  %memberidx.i.i.i.i.i99 = getelementptr inbounds %Array_Module_, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i.i.i.i.i99, align 8
  %ptridx.i.i.i.i.i100 = getelementptr inbounds ptr, ptr %23, i64 %21
  %24 = load ptr, ptr %ptridx.i.i.i.i.i100, align 8
  %memberidx1.i.i101 = getelementptr inbounds %Module, ptr %24, i64 0, i32 6
  %25 = load ptr, ptr %memberidx1.i.i101, align 8
  %26 = load i64, ptr %25, align 4
  %ptridx.i.i.i.i104 = getelementptr inbounds ptr, ptr %23, i64 %26
  %27 = load ptr, ptr %ptridx.i.i.i.i104, align 8
  %memberidx2.i.i.i105 = getelementptr inbounds %Module, ptr %27, i64 0, i32 8
  %28 = load ptr, ptr %memberidx2.i.i.i105, align 8
  %memberidx3.i.i.i106 = getelementptr inbounds %ScopeId, ptr %25, i64 0, i32 1
  %29 = load i64, ptr %memberidx3.i.i.i106, align 4
  %memberidx.i5.i.i.i107 = getelementptr inbounds %Array_Scope_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i5.i.i.i107, align 8
  %ptridx.i6.i.i.i108 = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx.i6.i.i.i108, align 8
  %memberidx.i109 = getelementptr inbounds %Scope, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i109, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %32, ptr %18, ptr %19)
  %33 = add nuw nsw i64 %17, 1
  %ptridx.i112 = getelementptr inbounds ptr, ptr %14, i64 %17
  %.not = icmp slt i64 %17, %15
  br i1 %.not, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  tail call void @free(ptr nonnull %13)
  %memberidx8 = getelementptr inbounds %Module, ptr %1, i64 0, i32 9
  %34 = load ptr, ptr %memberidx8, align 8
  %35 = tail call ptr @malloc(i32 25)
  %memberidx.i132 = getelementptr inbounds %Array_ConstDeclaration_, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %memberidx.i132, align 8
  %memberidx1.i133 = getelementptr inbounds %Array_ConstDeclaration_, ptr %34, i64 0, i32 2
  %37 = load i64, ptr %memberidx1.i133, align 4
  store i1 false, ptr %35, align 1
  %memberidx1.i.i134 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %35, i64 0, i32 1
  %memberidx2.i.i135 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %35, i64 0, i32 3
  store ptr %36, ptr %memberidx2.i.i135, align 8
  %memberidx3.i.i136 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %35, i64 0, i32 2
  store i64 %37, ptr %memberidx3.i.i136, align 4
  store i64 1, ptr %memberidx1.i.i134, align 4
  %38 = icmp slt i64 %37, 1
  br i1 %38, label %for.end12, label %for.body10.lr.ph

for.body10.lr.ph:                                 ; preds = %for.end
  %memberidx.i.i.i141 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body10

for.body10:                                       ; preds = %for.body10.lr.ph, %for.body10
  %39 = phi i64 [ 1, %for.body10.lr.ph ], [ %55, %for.body10 ]
  %storemerge247.in = phi ptr [ %36, %for.body10.lr.ph ], [ %ptridx.i156, %for.body10 ]
  %storemerge247 = load ptr, ptr %storemerge247.in, align 8
  %memberidx14 = getelementptr inbounds %ConstDeclaration, ptr %storemerge247, i64 0, i32 1
  %40 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %ConstDeclaration, ptr %storemerge247, i64 0, i32 2
  %41 = load ptr, ptr %memberidx15, align 8
  %42 = load ptr, ptr %0, align 8
  %43 = load i64, ptr %memberidx.i.i.i141, align 4
  %memberidx1.i.i.i.i142 = getelementptr inbounds %Program, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %memberidx1.i.i.i.i142, align 8
  %memberidx.i.i.i.i.i143 = getelementptr inbounds %Array_Module_, ptr %44, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i.i.i143, align 8
  %ptridx.i.i.i.i.i144 = getelementptr inbounds ptr, ptr %45, i64 %43
  %46 = load ptr, ptr %ptridx.i.i.i.i.i144, align 8
  %memberidx1.i.i145 = getelementptr inbounds %Module, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i.i145, align 8
  %48 = load i64, ptr %47, align 4
  %ptridx.i.i.i.i148 = getelementptr inbounds ptr, ptr %45, i64 %48
  %49 = load ptr, ptr %ptridx.i.i.i.i148, align 8
  %memberidx2.i.i.i149 = getelementptr inbounds %Module, ptr %49, i64 0, i32 8
  %50 = load ptr, ptr %memberidx2.i.i.i149, align 8
  %memberidx3.i.i.i150 = getelementptr inbounds %ScopeId, ptr %47, i64 0, i32 1
  %51 = load i64, ptr %memberidx3.i.i.i150, align 4
  %memberidx.i5.i.i.i151 = getelementptr inbounds %Array_Scope_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i5.i.i.i151, align 8
  %ptridx.i6.i.i.i152 = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i6.i.i.i152, align 8
  %memberidx.i153 = getelementptr inbounds %Scope, ptr %53, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i153, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %54, ptr %40, ptr %41)
  %55 = add nuw nsw i64 %39, 1
  store i64 %55, ptr %memberidx1.i.i134, align 4
  %ptridx.i156 = getelementptr inbounds ptr, ptr %36, i64 %39
  %.not258 = icmp slt i64 %39, %37
  br i1 %.not258, label %for.body10, label %for.end12

for.end12:                                        ; preds = %for.body10, %for.end
  tail call void @free(ptr nonnull %35)
  %memberidx18 = getelementptr inbounds %Module, ptr %1, i64 0, i32 5
  %56 = load ptr, ptr %memberidx18, align 8
  %57 = tail call ptr @malloc(i32 25)
  %memberidx.i158 = getelementptr inbounds %Array_Function_, ptr %56, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i158, align 8
  %memberidx1.i159 = getelementptr inbounds %Array_Function_, ptr %56, i64 0, i32 2
  %59 = load i64, ptr %memberidx1.i159, align 4
  store i1 false, ptr %57, align 1
  %memberidx1.i.i160 = getelementptr inbounds %ArrayIterator_Function_, ptr %57, i64 0, i32 1
  %memberidx2.i.i161 = getelementptr inbounds %ArrayIterator_Function_, ptr %57, i64 0, i32 3
  store ptr %58, ptr %memberidx2.i.i161, align 8
  %memberidx3.i.i162 = getelementptr inbounds %ArrayIterator_Function_, ptr %57, i64 0, i32 2
  store i64 %59, ptr %memberidx3.i.i162, align 4
  store i64 1, ptr %memberidx1.i.i160, align 4
  %60 = icmp slt i64 %59, 1
  br i1 %60, label %for.end22, label %for.body20.lr.ph

for.body20.lr.ph:                                 ; preds = %for.end12
  %memberidx.i.i.i176 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body20

for.body20:                                       ; preds = %for.body20.lr.ph, %for.body20
  %61 = phi i64 [ 1, %for.body20.lr.ph ], [ %77, %for.body20 ]
  %storemerge71244.in = phi ptr [ %58, %for.body20.lr.ph ], [ %ptridx.i191, %for.body20 ]
  %storemerge71244 = load ptr, ptr %storemerge71244.in, align 8
  %memberidx24 = getelementptr inbounds %Function, ptr %storemerge71244, i64 0, i32 1
  %62 = load ptr, ptr %memberidx24, align 8
  %63 = load ptr, ptr %storemerge71244, align 8
  %64 = load ptr, ptr %0, align 8
  %65 = load i64, ptr %memberidx.i.i.i176, align 4
  %memberidx1.i.i.i.i177 = getelementptr inbounds %Program, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx1.i.i.i.i177, align 8
  %memberidx.i.i.i.i.i178 = getelementptr inbounds %Array_Module_, ptr %66, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i.i.i.i.i178, align 8
  %ptridx.i.i.i.i.i179 = getelementptr inbounds ptr, ptr %67, i64 %65
  %68 = load ptr, ptr %ptridx.i.i.i.i.i179, align 8
  %memberidx1.i.i180 = getelementptr inbounds %Module, ptr %68, i64 0, i32 6
  %69 = load ptr, ptr %memberidx1.i.i180, align 8
  %70 = load i64, ptr %69, align 4
  %ptridx.i.i.i.i183 = getelementptr inbounds ptr, ptr %67, i64 %70
  %71 = load ptr, ptr %ptridx.i.i.i.i183, align 8
  %memberidx2.i.i.i184 = getelementptr inbounds %Module, ptr %71, i64 0, i32 8
  %72 = load ptr, ptr %memberidx2.i.i.i184, align 8
  %memberidx3.i.i.i185 = getelementptr inbounds %ScopeId, ptr %69, i64 0, i32 1
  %73 = load i64, ptr %memberidx3.i.i.i185, align 4
  %memberidx.i5.i.i.i186 = getelementptr inbounds %Array_Scope_, ptr %72, i64 0, i32 1
  %74 = load ptr, ptr %memberidx.i5.i.i.i186, align 8
  %ptridx.i6.i.i.i187 = getelementptr inbounds ptr, ptr %74, i64 %73
  %75 = load ptr, ptr %ptridx.i6.i.i.i187, align 8
  %memberidx.i188 = getelementptr inbounds %Scope, ptr %75, i64 0, i32 3
  %76 = load ptr, ptr %memberidx.i188, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %76, ptr %62, ptr %63)
  %77 = add nuw nsw i64 %61, 1
  store i64 %77, ptr %memberidx1.i.i160, align 4
  %ptridx.i191 = getelementptr inbounds ptr, ptr %58, i64 %61
  %.not259 = icmp slt i64 %61, %59
  br i1 %.not259, label %for.body20, label %for.end22

for.end22:                                        ; preds = %for.body20, %for.end12
  tail call void @free(ptr nonnull %57)
  %memberidx28 = getelementptr inbounds %Module, ptr %1, i64 0, i32 4
  %78 = load ptr, ptr %memberidx28, align 8
  %79 = tail call ptr @malloc(i32 25)
  %memberidx.i214 = getelementptr inbounds %Array_Class_, ptr %78, i64 0, i32 1
  %80 = load ptr, ptr %memberidx.i214, align 8
  %memberidx1.i215 = getelementptr inbounds %Array_Class_, ptr %78, i64 0, i32 2
  %81 = load i64, ptr %memberidx1.i215, align 4
  store i1 false, ptr %79, align 1
  %memberidx1.i.i216 = getelementptr inbounds %ArrayIterator_Class_, ptr %79, i64 0, i32 1
  %memberidx2.i.i217 = getelementptr inbounds %ArrayIterator_Class_, ptr %79, i64 0, i32 3
  store ptr %80, ptr %memberidx2.i.i217, align 8
  %memberidx3.i.i218 = getelementptr inbounds %ArrayIterator_Class_, ptr %79, i64 0, i32 2
  store i64 %81, ptr %memberidx3.i.i218, align 4
  store i64 1, ptr %memberidx1.i.i216, align 4
  %82 = icmp slt i64 %81, 1
  br i1 %82, label %for.end32, label %for.body30.lr.ph

for.body30.lr.ph:                                 ; preds = %for.end22
  %memberidx.i.i.i197 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body30

for.body30:                                       ; preds = %for.body30.lr.ph, %for.body30
  %83 = phi i64 [ 1, %for.body30.lr.ph ], [ %103, %for.body30 ]
  %storemerge72241.in = phi ptr [ %80, %for.body30.lr.ph ], [ %ptridx.i195, %for.body30 ]
  %storemerge72241 = load ptr, ptr %storemerge72241.in, align 8
  %memberidx34 = getelementptr inbounds %Class, ptr %storemerge72241, i64 0, i32 1
  %84 = load ptr, ptr %memberidx34, align 8
  %85 = load ptr, ptr %storemerge72241, align 8
  %86 = load ptr, ptr %0, align 8
  %87 = load i64, ptr %memberidx.i.i.i197, align 4
  %memberidx1.i.i.i.i198 = getelementptr inbounds %Program, ptr %86, i64 0, i32 1
  %88 = load ptr, ptr %memberidx1.i.i.i.i198, align 8
  %memberidx.i.i.i.i.i199 = getelementptr inbounds %Array_Module_, ptr %88, i64 0, i32 1
  %89 = load ptr, ptr %memberidx.i.i.i.i.i199, align 8
  %ptridx.i.i.i.i.i200 = getelementptr inbounds ptr, ptr %89, i64 %87
  %90 = load ptr, ptr %ptridx.i.i.i.i.i200, align 8
  %memberidx1.i.i201 = getelementptr inbounds %Module, ptr %90, i64 0, i32 6
  %91 = load ptr, ptr %memberidx1.i.i201, align 8
  %92 = load i64, ptr %91, align 4
  %ptridx.i.i.i.i204 = getelementptr inbounds ptr, ptr %89, i64 %92
  %93 = load ptr, ptr %ptridx.i.i.i.i204, align 8
  %memberidx2.i.i.i205 = getelementptr inbounds %Module, ptr %93, i64 0, i32 8
  %94 = load ptr, ptr %memberidx2.i.i.i205, align 8
  %memberidx3.i.i.i206 = getelementptr inbounds %ScopeId, ptr %91, i64 0, i32 1
  %95 = load i64, ptr %memberidx3.i.i.i206, align 4
  %memberidx.i5.i.i.i207 = getelementptr inbounds %Array_Scope_, ptr %94, i64 0, i32 1
  %96 = load ptr, ptr %memberidx.i5.i.i.i207, align 8
  %ptridx.i6.i.i.i208 = getelementptr inbounds ptr, ptr %96, i64 %95
  %97 = load ptr, ptr %ptridx.i6.i.i.i208, align 8
  %memberidx.i209 = getelementptr inbounds %Scope, ptr %97, i64 0, i32 2
  %98 = load ptr, ptr %memberidx.i209, align 8
  tail call fastcc void @Map_string_ClassId____setitem__(ptr %98, ptr %84, ptr %85)
  %memberidx1.i210 = getelementptr inbounds %Scope, ptr %97, i64 0, i32 1
  %99 = load ptr, ptr %memberidx1.i210, align 8
  %100 = tail call ptr @malloc(i32 24)
  %101 = load i64, ptr %85, align 4
  %memberidx1.i5.i211 = getelementptr inbounds %TypeId, ptr %85, i64 0, i32 2
  %102 = load i64, ptr %memberidx1.i5.i211, align 4
  store i64 3, ptr %100, align 4
  %memberidx1.i.i.i212 = getelementptr inbounds %VarId, ptr %100, i64 0, i32 1
  store i64 %101, ptr %memberidx1.i.i.i212, align 4
  %memberidx2.i.i6.i213 = getelementptr inbounds %VarId, ptr %100, i64 0, i32 2
  store i64 %102, ptr %memberidx2.i.i6.i213, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %99, ptr %84, ptr nonnull %100)
  %103 = add nuw nsw i64 %83, 1
  store i64 %103, ptr %memberidx1.i.i216, align 4
  %ptridx.i195 = getelementptr inbounds ptr, ptr %80, i64 %83
  %.not260 = icmp slt i64 %83, %81
  br i1 %.not260, label %for.body30, label %for.end32

for.end32:                                        ; preds = %for.body30, %for.end22
  tail call void @free(ptr nonnull %79)
  %memberidx38 = getelementptr inbounds %Module, ptr %1, i64 0, i32 7
  %104 = load ptr, ptr %memberidx38, align 8
  %105 = tail call ptr @malloc(i32 25)
  %memberidx.i171 = getelementptr inbounds %Array_Enum_, ptr %104, i64 0, i32 1
  %106 = load ptr, ptr %memberidx.i171, align 8
  %memberidx1.i172 = getelementptr inbounds %Array_Enum_, ptr %104, i64 0, i32 2
  %107 = load i64, ptr %memberidx1.i172, align 4
  store i1 false, ptr %105, align 1
  %memberidx1.i.i173 = getelementptr inbounds %ArrayIterator_Enum_, ptr %105, i64 0, i32 1
  %memberidx2.i.i174 = getelementptr inbounds %ArrayIterator_Enum_, ptr %105, i64 0, i32 3
  store ptr %106, ptr %memberidx2.i.i174, align 8
  %memberidx3.i.i175 = getelementptr inbounds %ArrayIterator_Enum_, ptr %105, i64 0, i32 2
  store i64 %107, ptr %memberidx3.i.i175, align 4
  store i64 1, ptr %memberidx1.i.i173, align 4
  %108 = icmp slt i64 %107, 1
  br i1 %108, label %for.end42, label %for.body40.lr.ph

for.body40.lr.ph:                                 ; preds = %for.end32
  %memberidx.i.i.i118 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body40

for.body40:                                       ; preds = %for.body40.lr.ph, %for.body40
  %109 = phi i64 [ 1, %for.body40.lr.ph ], [ %129, %for.body40 ]
  %storemerge73238.in = phi ptr [ %106, %for.body40.lr.ph ], [ %ptridx.i116, %for.body40 ]
  %storemerge73238 = load ptr, ptr %storemerge73238.in, align 8
  %memberidx44 = getelementptr inbounds %Enum, ptr %storemerge73238, i64 0, i32 1
  %110 = load ptr, ptr %memberidx44, align 8
  %111 = load ptr, ptr %storemerge73238, align 8
  %112 = load ptr, ptr %0, align 8
  %113 = load i64, ptr %memberidx.i.i.i118, align 4
  %memberidx1.i.i.i.i119 = getelementptr inbounds %Program, ptr %112, i64 0, i32 1
  %114 = load ptr, ptr %memberidx1.i.i.i.i119, align 8
  %memberidx.i.i.i.i.i120 = getelementptr inbounds %Array_Module_, ptr %114, i64 0, i32 1
  %115 = load ptr, ptr %memberidx.i.i.i.i.i120, align 8
  %ptridx.i.i.i.i.i121 = getelementptr inbounds ptr, ptr %115, i64 %113
  %116 = load ptr, ptr %ptridx.i.i.i.i.i121, align 8
  %memberidx1.i.i122 = getelementptr inbounds %Module, ptr %116, i64 0, i32 6
  %117 = load ptr, ptr %memberidx1.i.i122, align 8
  %118 = load i64, ptr %117, align 4
  %ptridx.i.i.i.i125 = getelementptr inbounds ptr, ptr %115, i64 %118
  %119 = load ptr, ptr %ptridx.i.i.i.i125, align 8
  %memberidx2.i.i.i126 = getelementptr inbounds %Module, ptr %119, i64 0, i32 8
  %120 = load ptr, ptr %memberidx2.i.i.i126, align 8
  %memberidx3.i.i.i127 = getelementptr inbounds %ScopeId, ptr %117, i64 0, i32 1
  %121 = load i64, ptr %memberidx3.i.i.i127, align 4
  %memberidx.i5.i.i.i128 = getelementptr inbounds %Array_Scope_, ptr %120, i64 0, i32 1
  %122 = load ptr, ptr %memberidx.i5.i.i.i128, align 8
  %ptridx.i6.i.i.i129 = getelementptr inbounds ptr, ptr %122, i64 %121
  %123 = load ptr, ptr %ptridx.i6.i.i.i129, align 8
  %memberidx.i130 = getelementptr inbounds %Scope, ptr %123, i64 0, i32 4
  %124 = load ptr, ptr %memberidx.i130, align 8
  tail call fastcc void @Map_string_EnumId____setitem__(ptr %124, ptr %110, ptr %111)
  %memberidx1.i131 = getelementptr inbounds %Scope, ptr %123, i64 0, i32 1
  %125 = load ptr, ptr %memberidx1.i131, align 8
  %126 = tail call ptr @malloc(i32 24)
  %127 = load i64, ptr %111, align 4
  %memberidx1.i5.i = getelementptr inbounds %TypeId, ptr %111, i64 0, i32 2
  %128 = load i64, ptr %memberidx1.i5.i, align 4
  store i64 4, ptr %126, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %126, i64 0, i32 1
  store i64 %127, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i6.i = getelementptr inbounds %VarId, ptr %126, i64 0, i32 2
  store i64 %128, ptr %memberidx2.i.i6.i, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %125, ptr %110, ptr nonnull %126)
  %129 = add nuw nsw i64 %109, 1
  store i64 %129, ptr %memberidx1.i.i173, align 4
  %ptridx.i116 = getelementptr inbounds ptr, ptr %106, i64 %109
  %.not261 = icmp slt i64 %109, %107
  br i1 %.not261, label %for.body40, label %for.end42

for.end42:                                        ; preds = %for.body40, %for.end32
  tail call void @free(ptr nonnull %105)
  %memberidx48 = getelementptr inbounds %Scope, ptr %11, i64 0, i32 6
  %130 = load ptr, ptr %memberidx48, align 8
  %131 = tail call ptr @malloc(i32 25)
  %132 = load ptr, ptr %130, align 8
  %memberidx1.i92 = getelementptr inbounds %Map_string_Type_, ptr %130, i64 0, i32 1
  %133 = load i64, ptr %memberidx1.i92, align 4
  %memberidx2.i93 = getelementptr inbounds %Map_string_Type_, ptr %130, i64 0, i32 2
  %134 = load i64, ptr %memberidx2.i93, align 4
  store i1 false, ptr %131, align 1
  %memberidx1.i.i94 = getelementptr inbounds %MapIterator_string_Type_, ptr %131, i64 0, i32 1
  store ptr %132, ptr %memberidx1.i.i94, align 8
  %memberidx2.i.i95 = getelementptr inbounds %MapIterator_string_Type_, ptr %131, i64 0, i32 2
  %memberidx3.i.i96 = getelementptr inbounds %MapIterator_string_Type_, ptr %131, i64 0, i32 3
  store i64 %134, ptr %memberidx3.i.i96, align 4
  %135 = add nsw i64 %133, -1
  store i64 %135, ptr %memberidx2.i.i95, align 4
  %136 = icmp sgt i64 %133, 0
  br i1 %136, label %while.entry.i86, label %MapIterator_string_Type__next.exit91

while.entry.i86:                                  ; preds = %for.end42, %ifend.i90
  %137 = phi i64 [ %140, %ifend.i90 ], [ %135, %for.end42 ]
  %138 = phi ptr [ %incdec.ptr.i84, %ifend.i90 ], [ %132, %for.end42 ]
  %incdec.ptr.i84 = getelementptr inbounds ptr, ptr %138, i64 1
  %139 = load ptr, ptr %138, align 8
  %.not.i85 = icmp eq ptr %139, null
  br i1 %.not.i85, label %ifend.i90, label %MapIterator_string_Type__next.exit91.loopexit

ifend.i90:                                        ; preds = %while.entry.i86
  %140 = add nsw i64 %137, -1
  store i64 %140, ptr %memberidx2.i.i95, align 4
  %141 = icmp sgt i64 %137, 0
  br i1 %141, label %while.entry.i86, label %MapIterator_string_Type__next.exit91.loopexit

MapIterator_string_Type__next.exit91.loopexit:    ; preds = %ifend.i90, %while.entry.i86
  %142 = phi i64 [ %140, %ifend.i90 ], [ %137, %while.entry.i86 ]
  store ptr %incdec.ptr.i84, ptr %memberidx1.i.i94, align 8
  br label %MapIterator_string_Type__next.exit91

MapIterator_string_Type__next.exit91:             ; preds = %MapIterator_string_Type__next.exit91.loopexit, %for.end42
  %143 = phi i64 [ %142, %MapIterator_string_Type__next.exit91.loopexit ], [ %135, %for.end42 ]
  %.pn.in.promoted = phi ptr [ %incdec.ptr.i84, %MapIterator_string_Type__next.exit91.loopexit ], [ %132, %for.end42 ]
  %storemerge229233 = icmp slt i64 %134, 1
  store i1 %storemerge229233, ptr %131, align 1
  br i1 %storemerge229233, label %for.end52, label %for.body50.lr.ph

for.body50.lr.ph:                                 ; preds = %MapIterator_string_Type__next.exit91
  %memberidx.i.i.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body50

for.body50:                                       ; preds = %for.body50.lr.ph, %MapIterator_string_Type__next.exit
  %144 = phi i64 [ %143, %for.body50.lr.ph ], [ %167, %MapIterator_string_Type__next.exit ]
  %.pn236 = phi ptr [ %.pn.in.promoted, %for.body50.lr.ph ], [ %.pn235, %MapIterator_string_Type__next.exit ]
  %storemerge230234.in = phi i64 [ %134, %for.body50.lr.ph ], [ %storemerge230234, %MapIterator_string_Type__next.exit ]
  %storemerge230234 = add nsw i64 %storemerge230234.in, -1
  %storemerge74.in = getelementptr inbounds ptr, ptr %.pn236, i64 -1
  %storemerge74 = load ptr, ptr %storemerge74.in, align 8
  %145 = load ptr, ptr %storemerge74, align 8
  %memberidx55 = getelementptr inbounds %MapEntry_string_Type_, ptr %storemerge74, i64 0, i32 1
  %146 = load ptr, ptr %memberidx55, align 8
  %147 = load ptr, ptr %0, align 8
  %148 = load i64, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %147, i64 0, i32 1
  %149 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %149, i64 0, i32 1
  %150 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %150, i64 %148
  %151 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Module, ptr %151, i64 0, i32 6
  %152 = load ptr, ptr %memberidx1.i.i, align 8
  %153 = load i64, ptr %152, align 4
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %150, i64 %153
  %154 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %154, i64 0, i32 8
  %155 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ScopeId, ptr %152, i64 0, i32 1
  %156 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Scope_, ptr %155, i64 0, i32 1
  %157 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %157, i64 %156
  %158 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i77 = getelementptr inbounds %Scope, ptr %158, i64 0, i32 6
  %159 = load ptr, ptr %memberidx.i77, align 8
  tail call fastcc void @Map_string_Type____setitem__(ptr %159, ptr %145, ptr %146)
  %160 = add nsw i64 %144, -1
  store i64 %160, ptr %memberidx2.i.i95, align 4
  %161 = icmp sgt i64 %144, 0
  br i1 %161, label %while.entry.i, label %MapIterator_string_Type__next.exit

while.entry.i:                                    ; preds = %for.body50, %ifend.i
  %162 = phi i64 [ %165, %ifend.i ], [ %160, %for.body50 ]
  %163 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %.pn236, %for.body50 ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %163, i64 1
  %164 = load ptr, ptr %163, align 8
  %.not.i = icmp eq ptr %164, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_Type__next.exit

ifend.i:                                          ; preds = %while.entry.i
  %165 = add nsw i64 %162, -1
  store i64 %165, ptr %memberidx2.i.i95, align 4
  %166 = icmp sgt i64 %162, 0
  br i1 %166, label %while.entry.i, label %MapIterator_string_Type__next.exit

MapIterator_string_Type__next.exit:               ; preds = %while.entry.i, %ifend.i, %for.body50
  %167 = phi i64 [ %160, %for.body50 ], [ %162, %while.entry.i ], [ %165, %ifend.i ]
  %.pn235 = phi ptr [ %.pn236, %for.body50 ], [ %incdec.ptr.i, %ifend.i ], [ %incdec.ptr.i, %while.entry.i ]
  %storemerge229 = icmp slt i64 %storemerge230234.in, 2
  store i1 %storemerge229, ptr %131, align 1
  br i1 %storemerge229, label %for.cond49.for.end52_crit_edge, label %for.body50

for.cond49.for.end52_crit_edge:                   ; preds = %MapIterator_string_Type__next.exit
  store ptr %.pn235, ptr %memberidx1.i.i94, align 8
  br label %for.end52

for.end52:                                        ; preds = %for.cond49.for.end52_crit_edge, %MapIterator_string_Type__next.exit91
  tail call void @free(ptr nonnull %131)
  ret void
}

define internal fastcc ptr @TypeChecker_check_typecast_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %3, align 4
  %memberidx = getelementptr inbounds %TypeCastExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx1 = getelementptr inbounds %TypeCastExpressionNode, ptr %1, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %6)
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %9 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %9, i64 0, i32 6
  %10 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %10, i64 0, i32 2
  %11 = load i64, ptr %memberidx2.i, align 4
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend46, %TypeChecker_error.exit, %if.entry4
  %common.ret.op = phi ptr [ %41, %if.entry4 ], [ null, %TypeChecker_error.exit ], [ %160, %ifend46 ], [ null, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %13 = load ptr, ptr %0, align 8
  %14 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %14, ptr noundef nonnull align 8 dereferenceable(6) @173, i64 6, i1 false)
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %16 = load i64, ptr %7, align 4
  %17 = icmp eq i64 %16, 19
  br i1 %17, label %if.entry.i164, label %is_object.exit.thread

if.entry.i164:                                    ; preds = %ifend, %if.entry.i164
  %.tr5.i = phi ptr [ %18, %if.entry.i164 ], [ %7, %ifend ]
  %memberidx1.i163 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %18 = load ptr, ptr %memberidx1.i163, align 8
  %19 = load i64, ptr %18, align 4
  switch i64 %19, label %ifend6 [
    i64 19, label %if.entry.i164
    i64 11, label %tailrecurse.i.preheader
  ]

is_object.exit.thread:                            ; preds = %ifend
  %20 = icmp eq i64 %16, 11
  br i1 %20, label %if.entry3.i, label %ifend6

tailrecurse.i.preheader:                          ; preds = %if.entry.i164
  br i1 %17, label %if.entry.i167, label %if.entry3.i

if.entry.i167:                                    ; preds = %tailrecurse.i.preheader, %if.entry.i167
  %.tr11.i218 = phi ptr [ %21, %if.entry.i167 ], [ %7, %tailrecurse.i.preheader ]
  %memberidx1.i166 = getelementptr inbounds %GenericType, ptr %.tr11.i218, i64 0, i32 3
  %21 = load ptr, ptr %memberidx1.i166, align 8
  %22 = load i64, ptr %21, align 4
  %switch = icmp eq i64 %22, 19
  br i1 %switch, label %if.entry.i167, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i167, %is_object.exit.thread, %tailrecurse.i.preheader
  %.tr11.i.lcssa = phi ptr [ %7, %tailrecurse.i.preheader ], [ %7, %is_object.exit.thread ], [ %21, %if.entry.i167 ]
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %23 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i168 = getelementptr inbounds %Program, ptr %13, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i.i168, align 8
  %25 = load i64, ptr %23, align 4
  %memberidx.i.i.i169 = getelementptr inbounds %Array_Module_, ptr %24, i64 0, i32 1
  %26 = load ptr, ptr %memberidx.i.i.i169, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %26, i64 %25
  %27 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i170 = getelementptr inbounds %Module, ptr %27, i64 0, i32 4
  %28 = load ptr, ptr %memberidx2.i.i170, align 8
  %memberidx3.i.i171 = getelementptr inbounds %TypeId, ptr %23, i64 0, i32 2
  %29 = load i64, ptr %memberidx3.i.i171, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx.i81 = getelementptr inbounds %Class, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i81, align 8
  %memberidx.i.i82 = getelementptr inbounds %string, ptr %32, i64 0, i32 2
  %33 = load i64, ptr %memberidx.i.i82, align 4
  %.not.i.i = icmp eq i64 %33, 6
  br i1 %.not.i.i, label %string___eq__.exit.i, label %ifend6

string___eq__.exit.i:                             ; preds = %if.entry3.i
  %memberidx2.i.i84 = getelementptr inbounds %string, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx2.i.i84, align 8
  %35 = tail call i64 @memcmp(ptr %34, ptr %14, i64 6)
  %36 = icmp eq i64 %35, 0
  %37 = load ptr, ptr %31, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 1
  %40 = and i1 %36, %39
  br i1 %40, label %if.entry4, label %string___eq__.exit.i.ifend6_crit_edge

string___eq__.exit.i.ifend6_crit_edge:            ; preds = %string___eq__.exit.i
  %.pre = load i64, ptr %7, align 4
  br label %ifend6

if.entry4:                                        ; preds = %string___eq__.exit.i
  %41 = tail call ptr @malloc(i32 49)
  %42 = tail call ptr @malloc(i32 0)
  %43 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %43, align 8
  %memberidx.i.i85 = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  store ptr %42, ptr %memberidx.i.i85, align 8
  %memberidx1.i.i86 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i86, i8 0, i64 16, i1 false)
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_uint_, ptr %44, align 8
  %memberidx.i88 = getelementptr inbounds %Array_uint_, ptr %44, i64 0, i32 2
  store i64 0, ptr %memberidx.i88, align 4
  %memberidx1.i89 = getelementptr inbounds %Array_uint_, ptr %44, i64 0, i32 3
  store i64 8, ptr %memberidx1.i89, align 4
  %memberidx2.i90 = getelementptr inbounds %Array_uint_, ptr %44, i64 0, i32 1
  %45 = tail call ptr @malloc(i32 64)
  store ptr %45, ptr %memberidx2.i90, align 8
  store i64 0, ptr %45, align 4
  store i64 1, ptr %memberidx.i88, align 4
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %46, align 8
  %memberidx.i91 = getelementptr inbounds %Array_Expression_, ptr %46, i64 0, i32 2
  store i64 0, ptr %memberidx.i91, align 4
  %memberidx1.i92 = getelementptr inbounds %Array_Expression_, ptr %46, i64 0, i32 3
  store i64 8, ptr %memberidx1.i92, align 4
  %memberidx2.i93 = getelementptr inbounds %Array_Expression_, ptr %46, i64 0, i32 1
  %47 = tail call ptr @malloc(i32 64)
  store ptr %47, ptr %memberidx2.i93, align 8
  store ptr %5, ptr %47, align 8
  store i64 1, ptr %memberidx.i91, align 4
  store i64 8, ptr %41, align 4
  %memberidx.i.i94 = getelementptr inbounds %Expression, ptr %41, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i94, align 4
  %memberidx1.i.i95 = getelementptr inbounds %Expression, ptr %41, i64 0, i32 1
  %memberidx.i96 = getelementptr inbounds %StringExpression, ptr %41, i64 0, i32 6
  store ptr %46, ptr %memberidx.i96, align 8
  %memberidx1.i97 = getelementptr inbounds %StringExpression, ptr %41, i64 0, i32 5
  store ptr %44, ptr %memberidx1.i97, align 8
  %memberidx2.i98 = getelementptr inbounds %Expression, ptr %41, i64 0, i32 3
  store ptr %7, ptr %memberidx2.i98, align 8
  %memberidx3.i = getelementptr inbounds %StringExpression, ptr %41, i64 0, i32 4
  store ptr %43, ptr %memberidx3.i, align 8
  store i1 true, ptr %memberidx1.i.i95, align 1
  br label %common.ret

ifend6:                                           ; preds = %if.entry.i164, %is_object.exit.thread, %string___eq__.exit.i.ifend6_crit_edge, %if.entry3.i
  %48 = phi i64 [ %.pre, %string___eq__.exit.i.ifend6_crit_edge ], [ %16, %if.entry3.i ], [ %16, %is_object.exit.thread ], [ %16, %if.entry.i164 ]
  %49 = add i64 %48, -1
  %50 = icmp ult i64 %49, 9
  %51 = load i64, ptr %8, align 4
  %52 = add i64 %51, -1
  %53 = icmp ult i64 %52, 9
  %54 = and i1 %50, %53
  %55 = icmp ult i64 %49, 7
  %56 = icmp eq i64 %51, 12
  %57 = and i1 %55, %56
  %58 = icmp ult i64 %52, 7
  %59 = icmp eq i64 %48, 12
  %60 = and i1 %59, %58
  %61 = select i1 %60, i1 true, i1 %57
  %spec.store.select162 = select i1 %61, i1 true, i1 %54
  %62 = load ptr, ptr %0, align 8
  %63 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %63, ptr noundef nonnull align 8 dereferenceable(6) @173, i64 6, i1 false)
  %64 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %64, align 8
  %memberidx.i.i99 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  store ptr %63, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i100, align 4
  %memberidx2.i.i101 = getelementptr inbounds %string, ptr %64, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i101, align 4
  %65 = load i64, ptr %8, align 4
  %66 = icmp eq i64 %65, 19
  br i1 %66, label %if.entry.i174, label %is_object.exit177.thread

if.entry.i174:                                    ; preds = %ifend6, %if.entry.i174
  %.tr5.i172 = phi ptr [ %67, %if.entry.i174 ], [ %8, %ifend6 ]
  %memberidx1.i173 = getelementptr inbounds %GenericType, ptr %.tr5.i172, i64 0, i32 3
  %67 = load ptr, ptr %memberidx1.i173, align 8
  %68 = load i64, ptr %67, align 4
  switch i64 %68, label %ifend25 [
    i64 19, label %if.entry.i174
    i64 11, label %tailrecurse.i179.preheader
  ]

is_object.exit177.thread:                         ; preds = %ifend6
  %69 = icmp eq i64 %65, 11
  br i1 %69, label %if.entry3.i191, label %ifend25

tailrecurse.i179.preheader:                       ; preds = %if.entry.i174
  br i1 %66, label %if.entry.i182, label %if.entry3.i191

if.entry.i182:                                    ; preds = %tailrecurse.i179.preheader, %if.entry.i182
  %.tr11.i178216 = phi ptr [ %70, %if.entry.i182 ], [ %8, %tailrecurse.i179.preheader ]
  %memberidx1.i181 = getelementptr inbounds %GenericType, ptr %.tr11.i178216, i64 0, i32 3
  %70 = load ptr, ptr %memberidx1.i181, align 8
  %71 = load i64, ptr %70, align 4
  %switch211 = icmp eq i64 %71, 19
  br i1 %switch211, label %if.entry.i182, label %if.entry3.i191

if.entry3.i191:                                   ; preds = %if.entry.i182, %is_object.exit177.thread, %tailrecurse.i179.preheader
  %.tr11.i178.lcssa = phi ptr [ %8, %tailrecurse.i179.preheader ], [ %8, %is_object.exit177.thread ], [ %70, %if.entry.i182 ]
  %memberidx6.i183 = getelementptr inbounds %ObjectType, ptr %.tr11.i178.lcssa, i64 0, i32 1
  %72 = load ptr, ptr %memberidx6.i183, align 8
  %memberidx.i.i184 = getelementptr inbounds %Program, ptr %62, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i.i184, align 8
  %74 = load i64, ptr %72, align 4
  %memberidx.i.i.i185 = getelementptr inbounds %Array_Module_, ptr %73, i64 0, i32 1
  %75 = load ptr, ptr %memberidx.i.i.i185, align 8
  %ptridx.i.i.i186 = getelementptr inbounds ptr, ptr %75, i64 %74
  %76 = load ptr, ptr %ptridx.i.i.i186, align 8
  %memberidx2.i.i187 = getelementptr inbounds %Module, ptr %76, i64 0, i32 4
  %77 = load ptr, ptr %memberidx2.i.i187, align 8
  %memberidx3.i.i188 = getelementptr inbounds %TypeId, ptr %72, i64 0, i32 2
  %78 = load i64, ptr %memberidx3.i.i188, align 4
  %memberidx.i5.i.i189 = getelementptr inbounds %Array_Class_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i5.i.i189, align 8
  %ptridx.i6.i.i190 = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i6.i.i190, align 8
  %memberidx.i103 = getelementptr inbounds %Class, ptr %80, i64 0, i32 1
  %81 = load ptr, ptr %memberidx.i103, align 8
  %memberidx.i.i104 = getelementptr inbounds %string, ptr %81, i64 0, i32 2
  %82 = load i64, ptr %memberidx.i.i104, align 4
  %.not.i.i106 = icmp eq i64 %82, 6
  br i1 %.not.i.i106, label %is_buitin.exit113, label %ifend25

is_buitin.exit113:                                ; preds = %if.entry3.i191
  %memberidx2.i.i108 = getelementptr inbounds %string, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i.i108, align 8
  %84 = tail call i64 @memcmp(ptr %83, ptr %63, i64 6)
  %85 = icmp eq i64 %84, 0
  %86 = load ptr, ptr %80, align 8
  %87 = load i64, ptr %86, align 4
  %88 = icmp eq i64 %87, 1
  %89 = and i1 %85, %88
  %90 = and i1 %50, %89
  br i1 %90, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %is_buitin.exit113
  %91 = load i64, ptr %7, align 4
  %92 = and i64 %91, -2
  %93 = icmp eq i64 %92, 8
  br i1 %93, label %if.entry26, label %else27

ifend25:                                          ; preds = %if.entry.i174, %is_object.exit177.thread, %if.entry3.i191, %is_buitin.exit113, %Array_Expression____sl__.exit
  %.pr228 = phi i1 [ true, %Array_Expression____sl__.exit ], [ %spec.store.select162, %is_buitin.exit113 ], [ %spec.store.select162, %if.entry3.i191 ], [ %spec.store.select162, %is_object.exit177.thread ], [ %spec.store.select162, %if.entry.i174 ]
  %exp.0 = phi ptr [ %119, %Array_Expression____sl__.exit ], [ %5, %is_buitin.exit113 ], [ %5, %if.entry3.i191 ], [ %5, %is_object.exit177.thread ], [ %5, %if.entry.i174 ]
  %94 = load i64, ptr %7, align 4
  %95 = icmp eq i64 %94, 19
  br i1 %95, label %if.entry.i195, label %is_object.exit198

if.entry.i195:                                    ; preds = %ifend25, %if.entry.i195
  %.tr5.i193 = phi ptr [ %96, %if.entry.i195 ], [ %7, %ifend25 ]
  %memberidx1.i194 = getelementptr inbounds %GenericType, ptr %.tr5.i193, i64 0, i32 3
  %96 = load ptr, ptr %memberidx1.i194, align 8
  %97 = load i64, ptr %96, align 4
  %98 = icmp eq i64 %97, 19
  br i1 %98, label %if.entry.i195, label %is_object.exit198

is_object.exit198:                                ; preds = %if.entry.i195, %ifend25
  %.lcssa.i196 = phi i64 [ %94, %ifend25 ], [ %97, %if.entry.i195 ]
  %99 = icmp eq i64 %.lcssa.i196, 11
  %100 = load i64, ptr %8, align 4
  %101 = icmp eq i64 %100, 19
  br i1 %101, label %if.entry.i201, label %is_object.exit204

if.entry.i201:                                    ; preds = %is_object.exit198, %if.entry.i201
  %.tr5.i199 = phi ptr [ %102, %if.entry.i201 ], [ %8, %is_object.exit198 ]
  %memberidx1.i200 = getelementptr inbounds %GenericType, ptr %.tr5.i199, i64 0, i32 3
  %102 = load ptr, ptr %memberidx1.i200, align 8
  %103 = load i64, ptr %102, align 4
  %104 = icmp eq i64 %103, 19
  br i1 %104, label %if.entry.i201, label %is_object.exit204

is_object.exit204:                                ; preds = %if.entry.i201, %is_object.exit198
  %.lcssa.i202 = phi i64 [ %100, %is_object.exit198 ], [ %103, %if.entry.i201 ]
  %105 = icmp eq i64 %.lcssa.i202, 11
  %106 = and i1 %99, %105
  %107 = icmp eq i64 %94, 13
  %108 = icmp eq i64 %100, 13
  %109 = and i1 %107, %108
  %110 = icmp eq i64 %94, 0
  %or.cond = or i1 %109, %110
  %111 = select i1 %or.cond, i1 true, i1 %106
  %brmerge = select i1 %111, i1 true, i1 %.pr228
  br i1 %brmerge, label %ifend46, label %if.entry44

if.entry26:                                       ; preds = %if.entry23
  %112 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %112, align 4
  %memberidx.i.i114 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i114, align 4
  %memberidx1.i.i115 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i115, align 1
  %memberidx.i116 = getelementptr inbounds %IntrinsicCall, ptr %112, i64 0, i32 4
  store i64 0, ptr %memberidx.i116, align 4
  %memberidx1.i117 = getelementptr inbounds %IntrinsicCall, ptr %112, i64 0, i32 5
  %113 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %113, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_Expression_, ptr %113, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i8.i = getelementptr inbounds %Array_Expression_, ptr %113, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i, align 4
  %memberidx2.i.i118 = getelementptr inbounds %Array_Expression_, ptr %113, i64 0, i32 1
  %114 = tail call ptr @malloc(i32 64)
  store ptr %114, ptr %memberidx2.i.i118, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %113, ptr %memberidx1.i117, align 8
  %memberidx4.i120 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 3
  %115 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %115, align 4
  store ptr %115, ptr %memberidx4.i120, align 8
  br label %ifend28

else27:                                           ; preds = %if.entry23
  %116 = icmp slt i64 %91, 5
  %117 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %117, align 4
  %memberidx.i.i127 = getelementptr inbounds %Expression, ptr %117, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i127, align 4
  %memberidx1.i.i128 = getelementptr inbounds %Expression, ptr %117, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i128, align 1
  %memberidx.i129 = getelementptr inbounds %IntrinsicCall, ptr %117, i64 0, i32 4
  br i1 %116, label %if.entry31, label %else32

ifend28:                                          ; preds = %if.entry31, %else32, %if.entry26
  %118 = phi ptr [ %129, %if.entry31 ], [ %132, %else32 ], [ %113, %if.entry26 ]
  %119 = phi ptr [ %117, %if.entry31 ], [ %117, %else32 ], [ %112, %if.entry26 ]
  %memberidx.i121 = getelementptr inbounds %Array_Expression_, ptr %118, i64 0, i32 2
  %120 = load i64, ptr %memberidx.i121, align 4
  %memberidx1.i122 = getelementptr inbounds %Array_Expression_, ptr %118, i64 0, i32 3
  %121 = load i64, ptr %memberidx1.i122, align 4
  %.not.i = icmp slt i64 %120, %121
  br i1 %.not.i, label %ifend28.Array_Expression____sl__.exit_crit_edge, label %if.entry.i

ifend28.Array_Expression____sl__.exit_crit_edge:  ; preds = %ifend28
  %memberidx4.i125.phi.trans.insert = getelementptr inbounds %Array_Expression_, ptr %118, i64 0, i32 1
  %.pre226 = load ptr, ptr %memberidx4.i125.phi.trans.insert, align 8
  br label %Array_Expression____sl__.exit

if.entry.i:                                       ; preds = %ifend28
  %122 = shl nuw i64 %121, 1
  store i64 %122, ptr %memberidx1.i122, align 4
  %memberidx2.i.i124 = getelementptr inbounds %Array_Expression_, ptr %118, i64 0, i32 1
  %123 = load ptr, ptr %memberidx2.i.i124, align 8
  %124 = shl i64 %121, 4
  %125 = tail call ptr @realloc(ptr %123, i64 %124)
  store ptr %125, ptr %memberidx2.i.i124, align 8
  %.pre225 = load i64, ptr %memberidx.i121, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %ifend28.Array_Expression____sl__.exit_crit_edge, %if.entry.i
  %126 = phi ptr [ %.pre226, %ifend28.Array_Expression____sl__.exit_crit_edge ], [ %125, %if.entry.i ]
  %127 = phi i64 [ %120, %ifend28.Array_Expression____sl__.exit_crit_edge ], [ %.pre225, %if.entry.i ]
  %128 = add nsw i64 %127, 1
  store i64 %128, ptr %memberidx.i121, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %126, i64 %127
  store ptr %5, ptr %ptridx.i, align 8
  br label %ifend25

if.entry31:                                       ; preds = %else27
  store i64 1, ptr %memberidx.i129, align 4
  %memberidx1.i130 = getelementptr inbounds %IntrinsicCall, ptr %117, i64 0, i32 5
  %129 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %129, align 8
  %memberidx.i7.i131 = getelementptr inbounds %Array_Expression_, ptr %129, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i131, align 4
  %memberidx1.i8.i132 = getelementptr inbounds %Array_Expression_, ptr %129, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i132, align 4
  %memberidx2.i.i133 = getelementptr inbounds %Array_Expression_, ptr %129, i64 0, i32 1
  %130 = tail call ptr @malloc(i32 64)
  store ptr %130, ptr %memberidx2.i.i133, align 8
  store i64 0, ptr %memberidx.i7.i131, align 4
  store ptr %129, ptr %memberidx1.i130, align 8
  %memberidx4.i135 = getelementptr inbounds %Expression, ptr %117, i64 0, i32 3
  %131 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %131, align 4
  store ptr %131, ptr %memberidx4.i135, align 8
  br label %ifend28

else32:                                           ; preds = %else27
  store i64 2, ptr %memberidx.i129, align 4
  %memberidx1.i139 = getelementptr inbounds %IntrinsicCall, ptr %117, i64 0, i32 5
  %132 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %132, align 8
  %memberidx.i7.i140 = getelementptr inbounds %Array_Expression_, ptr %132, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i140, align 4
  %memberidx1.i8.i141 = getelementptr inbounds %Array_Expression_, ptr %132, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i141, align 4
  %memberidx2.i.i142 = getelementptr inbounds %Array_Expression_, ptr %132, i64 0, i32 1
  %133 = tail call ptr @malloc(i32 64)
  store ptr %133, ptr %memberidx2.i.i142, align 8
  store i64 0, ptr %memberidx.i7.i140, align 4
  store ptr %132, ptr %memberidx1.i139, align 8
  %memberidx4.i144 = getelementptr inbounds %Expression, ptr %117, i64 0, i32 3
  %134 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %134, align 4
  store ptr %134, ptr %memberidx4.i144, align 8
  br label %ifend28

if.entry44:                                       ; preds = %is_object.exit204
  %135 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %8)
  %136 = load ptr, ptr %135, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %136, i64 0, i32 5
  %137 = load ptr, ptr %memberidx47, align 8
  %138 = tail call ptr %137(ptr nonnull %135)
  %139 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %7)
  %140 = load ptr, ptr %139, align 8
  %memberidx48 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %140, i64 0, i32 5
  %141 = load ptr, ptr %memberidx48, align 8
  %142 = tail call ptr %141(ptr nonnull %139)
  %143 = alloca ptr, align 8
  %144 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %143, ptr nonnull @174, ptr %138, ptr %142)
  %145 = load ptr, ptr %143, align 8
  %146 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %146, align 8
  %memberidx.i145 = getelementptr inbounds %string, ptr %146, i64 0, i32 1
  store ptr %145, ptr %memberidx.i145, align 8
  %memberidx1.i146 = getelementptr inbounds %string, ptr %146, i64 0, i32 2
  store i64 %144, ptr %memberidx1.i146, align 4
  %memberidx2.i147 = getelementptr inbounds %string, ptr %146, i64 0, i32 3
  store i64 %144, ptr %memberidx2.i147, align 4
  tail call void @free(ptr %138)
  tail call void @free(ptr %142)
  %147 = load ptr, ptr %1, align 8
  %148 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i149 = getelementptr inbounds %Compiler, ptr %148, i64 0, i32 6
  %149 = load ptr, ptr %memberidx1.i149, align 8
  %150 = call ptr @malloc(i32 24)
  store i64 5, ptr %150, align 4
  %memberidx1.i.i150 = getelementptr inbounds %FloError, ptr %150, i64 0, i32 2
  store ptr %147, ptr %memberidx1.i.i150, align 8
  %memberidx2.i.i151 = getelementptr inbounds %FloError, ptr %150, i64 0, i32 1
  store ptr %146, ptr %memberidx2.i.i151, align 8
  %memberidx.i.i152 = getelementptr inbounds %Array_FloError_, ptr %149, i64 0, i32 2
  %151 = load i64, ptr %memberidx.i.i152, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %149, i64 0, i32 3
  %152 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i153 = icmp slt i64 %151, %152
  br i1 %.not.i.i153, label %if.entry44.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry44.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry44
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %149, i64 0, i32 1
  %.pre230 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry44
  %153 = shl nuw i64 %152, 1
  store i64 %153, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %149, i64 0, i32 1
  %154 = load ptr, ptr %memberidx2.i.i.i, align 8
  %155 = shl i64 %152, 4
  %156 = call ptr @realloc(ptr %154, i64 %155)
  store ptr %156, ptr %memberidx2.i.i.i, align 8
  %.pre229 = load i64, ptr %memberidx.i.i152, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry44.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %157 = phi ptr [ %.pre230, %if.entry44.TypeChecker_error.exit_crit_edge ], [ %156, %if.entry.i.i ]
  %158 = phi i64 [ %151, %if.entry44.TypeChecker_error.exit_crit_edge ], [ %.pre229, %if.entry.i.i ]
  %159 = add nsw i64 %158, 1
  store i64 %159, ptr %memberidx.i.i152, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %157, i64 %158
  store ptr %150, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend46:                                          ; preds = %is_object.exit204
  %160 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %160, align 4
  %memberidx.i.i154 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i154, align 4
  %memberidx1.i.i155 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i155, align 1
  %memberidx.i156 = getelementptr inbounds %TypeCastExpression, ptr %160, i64 0, i32 4
  store ptr %exp.0, ptr %memberidx.i156, align 8
  %memberidx1.i157 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 3
  store ptr %7, ptr %memberidx1.i157, align 8
  %memberidx3.i159 = getelementptr inbounds %Expression, ptr %exp.0, i64 0, i32 1
  %161 = load i1, ptr %memberidx3.i159, align 1
  store i1 %161, ptr %memberidx1.i.i155, align 1
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Expression__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Expression__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @TypeChecker_fill_in_call_args(ptr %0, ptr nocapture readonly %1, ptr readonly %2, ptr nocapture readonly %3) unnamed_addr {
for.entry:
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %4, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 1
  %memberidx.i43 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_Expression____sl__.exit
  %8 = phi ptr [ %5, %for.body.lr.ph ], [ %32, %Array_Expression____sl__.exit ]
  %9 = phi i64 [ 8, %for.body.lr.ph ], [ %33, %Array_Expression____sl__.exit ]
  %10 = phi i64 [ 0, %for.body.lr.ph ], [ %34, %Array_Expression____sl__.exit ]
  %i.062 = phi i64 [ 0, %for.body.lr.ph ], [ %35, %Array_Expression____sl__.exit ]
  %11 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = icmp sgt i64 %12, %i.062
  br i1 %13, label %true_block, label %false_block

for.end:                                          ; preds = %Array_Expression____sl__.exit, %for.entry
  %14 = phi ptr [ %5, %for.entry ], [ %32, %Array_Expression____sl__.exit ]
  %15 = phi i64 [ 8, %for.entry ], [ %33, %Array_Expression____sl__.exit ]
  %16 = phi i64 [ 0, %for.entry ], [ %34, %Array_Expression____sl__.exit ]
  %.lcssa = phi i64 [ %6, %for.entry ], [ %36, %Array_Expression____sl__.exit ]
  %memberidx.i39 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i39, align 8
  %memberidx1.i40 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i40, align 8
  %memberidx2.i41 = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i41, align 4
  %20 = icmp sgt i64 %19, 0
  %21 = icmp eq ptr %2, null
  %22 = or i1 %21, %20
  br i1 %22, label %common.ret, label %ifend

true_block:                                       ; preds = %for.body
  %memberidx.i42 = getelementptr inbounds %Array_Type_, ptr %11, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i42, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.062
  %24 = load ptr, ptr %ptridx.i, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %25 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %25, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %24, %true_block ], [ %25, %false_block ]
  %26 = load ptr, ptr %memberidx.i43, align 8
  %ptridx.i44 = getelementptr inbounds ptr, ptr %26, i64 %i.062
  %27 = load ptr, ptr %ptridx.i44, align 8
  %28 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %ternary, ptr %27)
  %.not.i = icmp slt i64 %10, %9
  br i1 %.not.i, label %Array_Expression____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %end
  %29 = shl nuw i64 %9, 1
  store i64 %29, ptr %memberidx1.i, align 4
  %30 = shl i64 %9, 4
  %31 = tail call ptr @realloc(ptr %8, i64 %30)
  store ptr %31, ptr %memberidx2.i, align 8
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %end, %if.entry.i
  %32 = phi ptr [ %8, %end ], [ %31, %if.entry.i ]
  %33 = phi i64 [ %9, %end ], [ %29, %if.entry.i ]
  %34 = add nuw nsw i64 %10, 1
  store i64 %34, ptr %memberidx.i, align 4
  %ptridx.i47 = getelementptr inbounds ptr, ptr %32, i64 %10
  store ptr %28, ptr %ptridx.i47, align 8
  %35 = add nuw nsw i64 %i.062, 1
  %36 = load i64, ptr %memberidx2, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body, label %for.end

common.ret:                                       ; preds = %ifend22, %ifend, %for.end
  ret ptr %4

ifend:                                            ; preds = %for.end
  %memberidx6 = getelementptr inbounds %Array_FunctionArg_, ptr %2, i64 0, i32 2
  %38 = load i64, ptr %memberidx6, align 4
  %39 = icmp sgt i64 %38, %.lcssa
  br i1 %39, label %for.body15.lr.ph, label %common.ret

for.body15.lr.ph:                                 ; preds = %ifend
  %memberidx.i48 = getelementptr inbounds %Array_FunctionArg_, ptr %2, i64 0, i32 1
  br label %for.body15

for.body15:                                       ; preds = %for.body15.lr.ph, %ifend22
  %40 = phi i64 [ %38, %for.body15.lr.ph ], [ %54, %ifend22 ]
  %41 = phi ptr [ %14, %for.body15.lr.ph ], [ %55, %ifend22 ]
  %42 = phi ptr [ %14, %for.body15.lr.ph ], [ %56, %ifend22 ]
  %43 = phi i64 [ %15, %for.body15.lr.ph ], [ %57, %ifend22 ]
  %44 = phi i64 [ %16, %for.body15.lr.ph ], [ %58, %ifend22 ]
  %storemerge61 = phi i64 [ %.lcssa, %for.body15.lr.ph ], [ %59, %ifend22 ]
  %45 = load ptr, ptr %memberidx.i48, align 8
  %ptridx.i49 = getelementptr inbounds ptr, ptr %45, i64 %storemerge61
  %46 = load ptr, ptr %ptridx.i49, align 8
  %memberidx19 = getelementptr inbounds %FunctionArg, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx19, align 8
  %.not = icmp eq ptr %47, null
  br i1 %.not, label %ifend22, label %if.entry20

if.entry20:                                       ; preds = %for.body15
  %.not.i52 = icmp slt i64 %44, %43
  br i1 %.not.i52, label %Array_Expression____sl__.exit58, label %if.entry.i55

if.entry.i55:                                     ; preds = %if.entry20
  %48 = shl nuw i64 %43, 1
  store i64 %48, ptr %memberidx1.i, align 4
  %49 = shl i64 %43, 4
  %50 = tail call ptr @realloc(ptr %42, i64 %49)
  store ptr %50, ptr %memberidx2.i, align 8
  br label %Array_Expression____sl__.exit58

Array_Expression____sl__.exit58:                  ; preds = %if.entry20, %if.entry.i55
  %51 = phi ptr [ %41, %if.entry20 ], [ %50, %if.entry.i55 ]
  %52 = phi i64 [ %43, %if.entry20 ], [ %48, %if.entry.i55 ]
  %53 = add nsw i64 %44, 1
  store i64 %53, ptr %memberidx.i, align 4
  %ptridx.i57 = getelementptr inbounds ptr, ptr %51, i64 %44
  store ptr %47, ptr %ptridx.i57, align 8
  %.pre = load i64, ptr %memberidx6, align 4
  br label %ifend22

ifend22:                                          ; preds = %for.body15, %Array_Expression____sl__.exit58
  %54 = phi i64 [ %40, %for.body15 ], [ %.pre, %Array_Expression____sl__.exit58 ]
  %55 = phi ptr [ %41, %for.body15 ], [ %51, %Array_Expression____sl__.exit58 ]
  %56 = phi ptr [ %42, %for.body15 ], [ %51, %Array_Expression____sl__.exit58 ]
  %57 = phi i64 [ %43, %for.body15 ], [ %52, %Array_Expression____sl__.exit58 ]
  %58 = phi i64 [ %44, %for.body15 ], [ %53, %Array_Expression____sl__.exit58 ]
  %59 = add nsw i64 %storemerge61, 1
  %60 = icmp slt i64 %59, %54
  br i1 %60, label %for.body15, label %common.ret
}

define internal fastcc void @TypeChecker_add_inherited_props_to_class(ptr %0, ptr nocapture %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 19
  br i1 %6, label %if.entry.i130, label %is_object.exit

if.entry.i130:                                    ; preds = %3, %if.entry.i130
  %.tr5.i = phi ptr [ %7, %if.entry.i130 ], [ %4, %3 ]
  %memberidx1.i129 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %7 = load ptr, ptr %memberidx1.i129, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 19
  br i1 %9, label %if.entry.i130, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i130, %3
  %.lcssa.i = phi i64 [ %5, %3 ], [ %8, %if.entry.i130 ]
  %10 = icmp eq i64 %.lcssa.i, 11
  br i1 %10, label %ifend, label %if.entry

if.entry:                                         ; preds = %is_object.exit
  %11 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %4)
  %12 = load ptr, ptr %11, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i64 0, i32 5
  %13 = load ptr, ptr %memberidx1, align 8
  %14 = tail call ptr %13(ptr nonnull %11)
  %15 = alloca ptr, align 8
  %16 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %15, ptr nonnull @140, ptr %14)
  %17 = load ptr, ptr %15, align 8
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %18, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  store ptr %17, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  store i64 %16, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 3
  store i64 %16, ptr %memberidx2.i, align 4
  tail call void @free(ptr %14)
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 2
  %19 = load ptr, ptr %memberidx2, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx.i49 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %21 = load ptr, ptr %memberidx.i49, align 8
  %memberidx1.i50 = getelementptr inbounds %Compiler, ptr %21, i64 0, i32 6
  %22 = load ptr, ptr %memberidx1.i50, align 8
  %23 = call ptr @malloc(i32 24)
  store i64 5, ptr %23, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %23, i64 0, i32 2
  store ptr %20, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %23, i64 0, i32 1
  store ptr %18, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 2
  %24 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 3
  %25 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %24, %25
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 1
  %.pre157 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %26 = shl nuw i64 %25, 1
  store i64 %26, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 1
  %27 = load ptr, ptr %memberidx2.i.i.i, align 8
  %28 = shl i64 %25, 4
  %29 = call ptr @realloc(ptr %27, i64 %28)
  store ptr %29, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %30 = phi ptr [ %.pre157, %if.entry.TypeChecker_error.exit_crit_edge ], [ %29, %if.entry.i.i ]
  %31 = phi i64 [ %24, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %31
  store ptr %23, ptr %ptridx.i.i, align 8
  %.pre158 = load i64, ptr %4, align 4
  br label %ifend

ifend:                                            ; preds = %is_object.exit, %TypeChecker_error.exit
  %33 = phi i64 [ %5, %is_object.exit ], [ %.pre158, %TypeChecker_error.exit ]
  %34 = load ptr, ptr %0, align 8
  %switch152 = icmp eq i64 %33, 19
  br i1 %switch152, label %if.entry.i134, label %if.entry3.i

if.entry.i134:                                    ; preds = %ifend, %if.entry.i134
  %.tr11.i153 = phi ptr [ %35, %if.entry.i134 ], [ %4, %ifend ]
  %memberidx1.i133 = getelementptr inbounds %GenericType, ptr %.tr11.i153, i64 0, i32 3
  %35 = load ptr, ptr %memberidx1.i133, align 8
  %36 = load i64, ptr %35, align 4
  %switch = icmp eq i64 %36, 19
  br i1 %switch, label %if.entry.i134, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i134, %ifend
  %.tr11.i.lcssa = phi ptr [ %4, %ifend ], [ %35, %if.entry.i134 ]
  %memberidx6.i135 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %37 = load ptr, ptr %memberidx6.i135, align 8
  %memberidx.i.i136 = getelementptr inbounds %Program, ptr %34, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i.i136, align 8
  %39 = load i64, ptr %37, align 4
  %memberidx.i.i.i137 = getelementptr inbounds %Array_Module_, ptr %38, i64 0, i32 1
  %40 = load ptr, ptr %memberidx.i.i.i137, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %40, i64 %39
  %41 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i138 = getelementptr inbounds %Module, ptr %41, i64 0, i32 4
  %42 = load ptr, ptr %memberidx2.i.i138, align 8
  %memberidx3.i.i139 = getelementptr inbounds %TypeId, ptr %37, i64 0, i32 2
  %43 = load i64, ptr %memberidx3.i.i139, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %44, i64 %43
  %45 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx5 = getelementptr inbounds %Class, ptr %45, i64 0, i32 6
  %46 = load ptr, ptr %memberidx5, align 8
  %47 = call ptr @malloc(i32 25)
  %48 = load ptr, ptr %46, align 8
  %memberidx1.i51 = getelementptr inbounds %Map_string_PropId_, ptr %46, i64 0, i32 1
  %49 = load i64, ptr %memberidx1.i51, align 4
  %memberidx2.i52 = getelementptr inbounds %Map_string_PropId_, ptr %46, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i52, align 4
  store i1 false, ptr %47, align 1
  %memberidx1.i.i53 = getelementptr inbounds %MapIterator_string_PropId_, ptr %47, i64 0, i32 1
  store ptr %48, ptr %memberidx1.i.i53, align 8
  %memberidx2.i.i54 = getelementptr inbounds %MapIterator_string_PropId_, ptr %47, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %47, i64 0, i32 3
  store i64 %50, ptr %memberidx3.i.i, align 4
  %51 = add nsw i64 %49, -1
  store i64 %51, ptr %memberidx2.i.i54, align 4
  %52 = icmp sgt i64 %49, 0
  br i1 %52, label %while.entry.i, label %MapIterator_string_PropId__next.exit

while.entry.i:                                    ; preds = %if.entry3.i, %ifend.i
  %53 = phi i64 [ %56, %ifend.i ], [ %51, %if.entry3.i ]
  %54 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %48, %if.entry3.i ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %54, i64 1
  %55 = load ptr, ptr %54, align 8
  %.not.i = icmp eq ptr %55, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit.loopexit

ifend.i:                                          ; preds = %while.entry.i
  %56 = add nsw i64 %53, -1
  store i64 %56, ptr %memberidx2.i.i54, align 4
  %57 = icmp sgt i64 %53, 0
  br i1 %57, label %while.entry.i, label %MapIterator_string_PropId__next.exit.loopexit

MapIterator_string_PropId__next.exit.loopexit:    ; preds = %ifend.i, %while.entry.i
  %58 = phi i64 [ %56, %ifend.i ], [ %53, %while.entry.i ]
  store ptr %incdec.ptr.i, ptr %memberidx1.i.i53, align 8
  br label %MapIterator_string_PropId__next.exit

MapIterator_string_PropId__next.exit:             ; preds = %MapIterator_string_PropId__next.exit.loopexit, %if.entry3.i
  %59 = phi i64 [ %58, %MapIterator_string_PropId__next.exit.loopexit ], [ %51, %if.entry3.i ]
  %.pn.in.promoted = phi ptr [ %incdec.ptr.i, %MapIterator_string_PropId__next.exit.loopexit ], [ %48, %if.entry3.i ]
  %storemerge144148 = icmp slt i64 %50, 1
  store i1 %storemerge144148, ptr %47, align 1
  br i1 %storemerge144148, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit
  %memberidx10 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx26 = getelementptr inbounds %Class, ptr %1, i64 0, i32 9
  %memberidx32 = getelementptr inbounds %Class, ptr %1, i64 0, i32 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit73
  %60 = phi i64 [ %59, %for.body.lr.ph ], [ %131, %MapIterator_string_PropId__next.exit73 ]
  %.pn151 = phi ptr [ %.pn.in.promoted, %for.body.lr.ph ], [ %.pn150, %MapIterator_string_PropId__next.exit73 ]
  %storemerge145149.in = phi i64 [ %50, %for.body.lr.ph ], [ %storemerge145149, %MapIterator_string_PropId__next.exit73 ]
  %storemerge145149 = add nsw i64 %storemerge145149.in, -1
  %storemerge.in = getelementptr inbounds ptr, ptr %.pn151, i64 -1
  %storemerge = load ptr, ptr %storemerge.in, align 8
  %61 = load ptr, ptr %storemerge, align 8
  %memberidx8 = getelementptr inbounds %MapEntry_string_PropId_, ptr %storemerge, i64 0, i32 1
  %62 = load ptr, ptr %memberidx8, align 8
  %63 = load ptr, ptr %0, align 8
  %memberidx.i.i57 = getelementptr inbounds %PropId, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i.i57, align 8
  %memberidx.i.i.i58 = getelementptr inbounds %Program, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i.i.i58, align 8
  %66 = load i64, ptr %64, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %67, i64 %66
  %68 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i59 = getelementptr inbounds %Module, ptr %68, i64 0, i32 4
  %69 = load ptr, ptr %memberidx2.i.i.i59, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %64, i64 0, i32 2
  %70 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %69, i64 0, i32 1
  %71 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %71, i64 %70
  %72 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %73 = load i64, ptr %62, align 4
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %if.entry.i, label %ifend.i63

if.entry.i:                                       ; preds = %for.body
  %memberidx1.i60 = getelementptr inbounds %Class, ptr %72, i64 0, i32 5
  %75 = load ptr, ptr %memberidx1.i60, align 8
  %memberidx2.i61 = getelementptr inbounds %PropId, ptr %62, i64 0, i32 2
  %76 = load i64, ptr %memberidx2.i61, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %75, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %77, i64 %76
  %78 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %78, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i63:                                        ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %72, i64 0, i32 4
  %79 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %62, i64 0, i32 2
  %80 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %79, i64 0, i32 1
  %81 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i62 = getelementptr inbounds ptr, ptr %81, i64 %80
  %82 = load ptr, ptr %ptridx.i.i62, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %82, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i63
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i63 ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %83 = load ptr, ptr %memberidx10, align 8
  %84 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %61)
  %memberidx.i118 = getelementptr inbounds %Map_string_PropId_, ptr %83, i64 0, i32 1
  %85 = load i64, ptr %memberidx.i118, align 4
  %86 = urem i64 %84, %85
  %87 = load ptr, ptr %83, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %87, i64 %86
  %88 = load ptr, ptr %ptridx.i, align 8
  %.not.i119 = icmp eq ptr %88, null
  br i1 %.not.i119, label %Map_string_PropId____getitem__.exit, label %while.entry.i123.preheader

while.entry.i123.preheader:                       ; preds = %get_class_prop_type.exit
  %memberidx1.i.i121 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  %memberidx3.i.i125 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  br label %while.entry.i123

while.entry.i123:                                 ; preds = %while.entry.i123.preheader, %else.i
  %89 = phi ptr [ %99, %else.i ], [ %87, %while.entry.i123.preheader ]
  %90 = phi i64 [ %100, %else.i ], [ %85, %while.entry.i123.preheader ]
  %91 = phi ptr [ %103, %else.i ], [ %88, %while.entry.i123.preheader ]
  %hash.0.i = phi i64 [ %102, %else.i ], [ %86, %while.entry.i123.preheader ]
  %92 = load ptr, ptr %91, align 8
  %memberidx.i.i120 = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  %93 = load i64, ptr %memberidx.i.i120, align 4
  %94 = load i64, ptr %memberidx1.i.i121, align 4
  %.not.i.i122 = icmp eq i64 %93, %94
  br i1 %.not.i.i122, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i123
  %memberidx2.i.i124 = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i.i124, align 8
  %96 = load ptr, ptr %memberidx3.i.i125, align 8
  %97 = call i64 @memcmp(ptr %95, ptr %96, i64 %93)
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre160 = load i64, ptr %memberidx.i118, align 4
  %.pre161 = load ptr, ptr %83, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre162.pre = load ptr, ptr %83, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre162.pre, i64 %hash.0.i
  %.pre163.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre163.pre, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i123
  %99 = phi ptr [ %.pre161, %ifend.i.i.else.i_crit_edge ], [ %89, %while.entry.i123 ]
  %100 = phi i64 [ %.pre160, %ifend.i.i.else.i_crit_edge ], [ %90, %while.entry.i123 ]
  %101 = add nuw i64 %hash.0.i, 1
  %102 = urem i64 %101, %100
  %ptridx7.i = getelementptr inbounds ptr, ptr %99, i64 %102
  %103 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %103, null
  br i1 %.not30.i, label %Map_string_PropId____getitem__.exit, label %while.entry.i123

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre163.pre, i64 0, i32 1
  %104 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %else.i, %get_class_prop_type.exit, %while.end.i, %if.entry10.i
  %common.ret.op.i126 = phi ptr [ %104, %if.entry10.i ], [ null, %while.end.i ], [ null, %get_class_prop_type.exit ], [ null, %else.i ]
  %105 = load ptr, ptr %0, align 8
  %106 = load ptr, ptr %memberidx.i.i57, align 8
  %memberidx.i.i.i97 = getelementptr inbounds %Program, ptr %105, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i.i.i97, align 8
  %108 = load i64, ptr %106, align 4
  %memberidx.i.i.i.i98 = getelementptr inbounds %Array_Module_, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %memberidx.i.i.i.i98, align 8
  %ptridx.i.i.i.i99 = getelementptr inbounds ptr, ptr %109, i64 %108
  %110 = load ptr, ptr %ptridx.i.i.i.i99, align 8
  %memberidx2.i.i.i100 = getelementptr inbounds %Module, ptr %110, i64 0, i32 4
  %111 = load ptr, ptr %memberidx2.i.i.i100, align 8
  %memberidx3.i.i.i101 = getelementptr inbounds %TypeId, ptr %106, i64 0, i32 2
  %112 = load i64, ptr %memberidx3.i.i.i101, align 4
  %memberidx.i5.i.i.i102 = getelementptr inbounds %Array_Class_, ptr %111, i64 0, i32 1
  %113 = load ptr, ptr %memberidx.i5.i.i.i102, align 8
  %ptridx.i6.i.i.i103 = getelementptr inbounds ptr, ptr %113, i64 %112
  %114 = load ptr, ptr %ptridx.i6.i.i.i103, align 8
  %115 = load i64, ptr %62, align 4
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %if.entry.i89, label %ifend.i95

if.entry.i89:                                     ; preds = %Map_string_PropId____getitem__.exit
  %memberidx1.i106 = getelementptr inbounds %Class, ptr %114, i64 0, i32 5
  %117 = load ptr, ptr %memberidx1.i106, align 8
  %memberidx2.i107 = getelementptr inbounds %PropId, ptr %62, i64 0, i32 2
  %118 = load i64, ptr %memberidx2.i107, align 4
  %memberidx.i12.i108 = getelementptr inbounds %Array_ClassMethod_, ptr %117, i64 0, i32 1
  %119 = load ptr, ptr %memberidx.i12.i108, align 8
  %ptridx.i13.i109 = getelementptr inbounds ptr, ptr %119, i64 %118
  %120 = load ptr, ptr %ptridx.i13.i109, align 8
  %memberidx3.i110 = getelementptr inbounds %ClassMethod, ptr %120, i64 0, i32 2
  %memberidx3.i88 = getelementptr inbounds %ClassMethod, ptr %120, i64 0, i32 1
  br label %is_class_prop_static.exit

ifend.i95:                                        ; preds = %Map_string_PropId____getitem__.exit
  %memberidx4.i112 = getelementptr inbounds %Class, ptr %114, i64 0, i32 4
  %121 = load ptr, ptr %memberidx4.i112, align 8
  %memberidx5.i113 = getelementptr inbounds %PropId, ptr %62, i64 0, i32 2
  %122 = load i64, ptr %memberidx5.i113, align 4
  %memberidx.i11.i114 = getelementptr inbounds %Array_ClassField_, ptr %121, i64 0, i32 1
  %123 = load ptr, ptr %memberidx.i11.i114, align 8
  %ptridx.i.i115 = getelementptr inbounds ptr, ptr %123, i64 %122
  %124 = load ptr, ptr %ptridx.i.i115, align 8
  %memberidx6.i116 = getelementptr inbounds %ClassField, ptr %124, i64 0, i32 2
  %memberidx6.i94 = getelementptr inbounds %ClassField, ptr %124, i64 0, i32 1
  br label %is_class_prop_static.exit

is_class_prop_static.exit:                        ; preds = %if.entry.i89, %ifend.i95
  %common.ret.op.i105142.in = phi ptr [ %memberidx3.i110, %if.entry.i89 ], [ %memberidx6.i116, %ifend.i95 ]
  %common.ret.op.in.i82 = phi ptr [ %memberidx3.i88, %if.entry.i89 ], [ %memberidx6.i94, %ifend.i95 ]
  %common.ret.op.i83 = load i1, ptr %common.ret.op.in.i82, align 1
  br i1 %common.ret.op.i83, label %for.incr, label %ifend15

for.incr:                                         ; preds = %ifend31, %ifend15, %is_class_prop_static.exit
  %125 = add nsw i64 %60, -1
  store i64 %125, ptr %memberidx2.i.i54, align 4
  %126 = icmp sgt i64 %60, 0
  br i1 %126, label %while.entry.i68, label %MapIterator_string_PropId__next.exit73

while.entry.i68:                                  ; preds = %for.incr, %ifend.i72
  %127 = phi i64 [ %130, %ifend.i72 ], [ %125, %for.incr ]
  %128 = phi ptr [ %incdec.ptr.i66, %ifend.i72 ], [ %.pn151, %for.incr ]
  %incdec.ptr.i66 = getelementptr inbounds ptr, ptr %128, i64 1
  %129 = load ptr, ptr %128, align 8
  %.not.i67 = icmp eq ptr %129, null
  br i1 %.not.i67, label %ifend.i72, label %MapIterator_string_PropId__next.exit73

ifend.i72:                                        ; preds = %while.entry.i68
  %130 = add nsw i64 %127, -1
  store i64 %130, ptr %memberidx2.i.i54, align 4
  %.not170 = icmp eq i64 %127, 0
  br i1 %.not170, label %MapIterator_string_PropId__next.exit73, label %while.entry.i68

MapIterator_string_PropId__next.exit73:           ; preds = %while.entry.i68, %ifend.i72, %for.incr
  %131 = phi i64 [ %125, %for.incr ], [ %127, %while.entry.i68 ], [ -1, %ifend.i72 ]
  %.pn150 = phi ptr [ %.pn151, %for.incr ], [ %incdec.ptr.i66, %ifend.i72 ], [ %incdec.ptr.i66, %while.entry.i68 ]
  %storemerge144 = icmp slt i64 %storemerge145149.in, 2
  store i1 %storemerge144, ptr %47, align 1
  br i1 %storemerge144, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %MapIterator_string_PropId__next.exit73
  store ptr %.pn150, ptr %memberidx1.i.i53, align 8
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %MapIterator_string_PropId__next.exit
  tail call void @free(ptr nonnull %47)
  ret void

ifend15:                                          ; preds = %is_class_prop_static.exit
  %common.ret.op.i105142 = load i64, ptr %common.ret.op.i105142.in, align 4
  %132 = icmp ne i64 %common.ret.op.i105142, 1
  %133 = load i64, ptr %common.ret.op.i, align 4
  %134 = icmp ne i64 %133, 15
  %.not = or i1 %132, %134
  %135 = icmp eq ptr %common.ret.op.i126, null
  %or.cond = select i1 %.not, i1 %135, i1 false
  br i1 %or.cond, label %if.entry19, label %for.incr

if.entry19:                                       ; preds = %ifend15
  %136 = icmp eq i64 %115, 1
  br i1 %136, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %if.entry19
  %137 = load i64, ptr %memberidx26, align 4
  %138 = add nsw i64 %137, 1
  store i64 %138, ptr %memberidx26, align 4
  %.pre164 = load i64, ptr %62, align 4
  br label %ifend25

ifend25:                                          ; preds = %if.entry19, %if.entry23
  %139 = phi i64 [ %115, %if.entry19 ], [ %.pre164, %if.entry23 ]
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %if.entry29, label %ifend31

if.entry29:                                       ; preds = %ifend25
  %141 = load i64, ptr %memberidx32, align 4
  %142 = add nsw i64 %141, 1
  store i64 %142, ptr %memberidx32, align 4
  br label %ifend31

ifend31:                                          ; preds = %ifend25, %if.entry29
  %143 = load ptr, ptr %memberidx10, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %143, ptr %61, ptr nonnull %62)
  br label %for.incr
}

define internal fastcc ptr @TypeChecker_check_member_access(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx.i = getelementptr inbounds %PropId, ptr %1, i64 0, i32 1
  %4 = load ptr, ptr %memberidx.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 4
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %4, i64 0, i32 2
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i6.i.i, align 8
  %13 = tail call ptr @malloc(i32 0)
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i55 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i55, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %15 = load i64, ptr %1, align 4
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Class, ptr %12, i64 0, i32 5
  %17 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %1, i64 0, i32 2
  %18 = load i64, ptr %memberidx3, align 4
  %memberidx.i57 = getelementptr inbounds %Array_ClassMethod_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i57, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 2
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 3
  br label %ifend

else:                                             ; preds = %2
  %memberidx6 = getelementptr inbounds %Class, ptr %12, i64 0, i32 4
  %21 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %PropId, ptr %1, i64 0, i32 2
  %22 = load i64, ptr %memberidx7, align 4
  %memberidx.i58 = getelementptr inbounds %Array_ClassField_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i58, align 8
  %ptridx.i59 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i59, align 8
  %memberidx8 = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 2
  %memberidx9 = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %visibility.0.in = phi ptr [ %memberidx4, %if.entry ], [ %memberidx8, %else ]
  %member_name.0.in = phi ptr [ %memberidx5, %if.entry ], [ %memberidx9, %else ]
  %member_name.0 = load ptr, ptr %member_name.0.in, align 8
  %visibility.0 = load i64, ptr %visibility.0.in, align 4
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %25 = load ptr, ptr %memberidx10, align 8
  %.not = icmp eq ptr %25, null
  br i1 %.not, label %else12, label %if.entry11

if.entry11:                                       ; preds = %ifend
  %26 = load i64, ptr %25, align 4
  %27 = load ptr, ptr %12, align 8
  %28 = load i64, ptr %27, align 4
  %29 = icmp ne i64 %26, %28
  %memberidx19 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %30 = load i64, ptr %memberidx19, align 4
  %memberidx21 = getelementptr inbounds %TypeId, ptr %25, i64 0, i32 2
  %31 = load i64, ptr %memberidx21, align 4
  %32 = icmp ne i64 %30, %31
  %33 = or i1 %29, %32
  %34 = icmp eq i64 %visibility.0, 1
  %or.cond = select i1 %33, i1 %34, i1 false
  br i1 %or.cond, label %if.entry25, label %common.ret

else12:                                           ; preds = %ifend
  %.not53 = icmp eq i64 %visibility.0, 2
  br i1 %.not53, label %common.ret, label %if.entry31

common.ret.sink.split:                            ; preds = %if.entry25, %dump_access.exit
  %.sink67 = phi ptr [ %54, %dump_access.exit ], [ %37, %if.entry25 ]
  %.sink = phi ptr [ %58, %dump_access.exit ], [ %41, %if.entry25 ]
  %common.ret.op.ph = phi ptr [ %62, %dump_access.exit ], [ %45, %if.entry25 ]
  tail call void @free(ptr %.sink67)
  tail call void @free(ptr %.sink)
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %else12, %if.entry11
  %common.ret.op = phi ptr [ null, %if.entry11 ], [ null, %else12 ], [ %common.ret.op.ph, %common.ret.sink.split ]
  ret ptr %common.ret.op

if.entry25:                                       ; preds = %if.entry11
  %35 = load ptr, ptr %member_name.0, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i64 0, i32 5
  %36 = load ptr, ptr %memberidx28, align 8
  %37 = tail call ptr %36(ptr nonnull %member_name.0)
  %memberidx29 = getelementptr inbounds %Class, ptr %12, i64 0, i32 1
  %38 = load ptr, ptr %memberidx29, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i64 0, i32 5
  %40 = load ptr, ptr %memberidx30, align 8
  %41 = tail call ptr %40(ptr nonnull %38)
  %42 = alloca ptr, align 8
  %43 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %42, ptr nonnull @181, ptr %37, ptr %41)
  %44 = load ptr, ptr %42, align 8
  %45 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i60 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i60, align 8
  %memberidx1.i61 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 %43, ptr %memberidx1.i61, align 4
  %memberidx2.i62 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 %43, ptr %memberidx2.i62, align 4
  br label %common.ret.sink.split

if.entry31:                                       ; preds = %else12
  %46 = load ptr, ptr %member_name.0, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx34, align 8
  %48 = tail call ptr %47(ptr nonnull %member_name.0)
  %49 = icmp eq i64 %visibility.0, 1
  br i1 %49, label %if.entry.i, label %ifend3.i

if.entry.i:                                       ; preds = %if.entry31
  %50 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %50, ptr noundef nonnull align 8 dereferenceable(7) @40, i64 7, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry31
  %51 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %51, ptr noundef nonnull align 8 dereferenceable(9) @42, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i, %ifend3.i
  %.sink72 = phi ptr [ %50, %if.entry.i ], [ %51, %ifend3.i ]
  %.sink70 = phi i64 [ 7, %if.entry.i ], [ 9, %ifend3.i ]
  %52 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %52, align 8
  %memberidx.i.i.i63 = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  store ptr %.sink72, ptr %memberidx.i.i.i63, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  store i64 %.sink70, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 3
  store i64 %.sink70, ptr %memberidx2.i.i.i, align 4
  %53 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %54 = tail call ptr %53(ptr nonnull %52)
  %memberidx36 = getelementptr inbounds %Class, ptr %12, i64 0, i32 1
  %55 = load ptr, ptr %memberidx36, align 8
  %56 = load ptr, ptr %55, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx37, align 8
  %58 = tail call ptr %57(ptr nonnull %55)
  %59 = alloca ptr, align 8
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %59, ptr nonnull @182, ptr %48, ptr %54, ptr %58)
  %61 = load ptr, ptr %59, align 8
  %62 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i54 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i54, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 %60, ptr %memberidx2.i, align 4
  tail call void @free(ptr %48)
  br label %common.ret.sink.split
}

define internal fastcc ptr @TypeChecker_check_can_return(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ReturnStatementNode, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx.i, align 8
  %.not.i = icmp eq ptr %4, null
  br i1 %.not.i, label %ifend.i, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %5 = load ptr, ptr %0, align 8
  %memberidx.i.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %6, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %15 = load i64, ptr %4, align 4
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %if.entry.i.i, label %ifend.i.i

if.entry.i.i:                                     ; preds = %if.entry.i
  %memberidx1.i.i = getelementptr inbounds %Class, ptr %14, i64 0, i32 5
  %17 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

ifend.i.i:                                        ; preds = %if.entry.i
  %memberidx4.i.i = getelementptr inbounds %Class, ptr %14, i64 0, i32 4
  %21 = load ptr, ptr %memberidx4.i.i, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 2
  %22 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

ifend.i:                                          ; preds = %2
  %memberidx.i.i7.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %25 = load i64, ptr %memberidx.i.i7.i, align 4
  %26 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i8.i = getelementptr inbounds %Array_Module_, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i.i.i8.i, align 8
  %ptridx.i.i.i.i9.i = getelementptr inbounds ptr, ptr %28, i64 %25
  %29 = load ptr, ptr %ptridx.i.i.i.i9.i, align 8
  %memberidx.i.i = getelementptr inbounds %Module, ptr %29, i64 0, i32 5
  %30 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i10.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 3
  %31 = load ptr, ptr %memberidx1.i10.i, align 8
  %memberidx2.i11.i = getelementptr inbounds %VarId, ptr %31, i64 0, i32 2
  %32 = load i64, ptr %memberidx2.i11.i, align 4
  %memberidx.i4.i.i = getelementptr inbounds %Array_Function_, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i4.i.i, align 8
  %ptridx.i.i12.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i12.i, align 8
  %memberidx3.i = getelementptr inbounds %Function, ptr %34, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

TypeChecker_get_current_function_type.exit:       ; preds = %if.entry.i.i, %ifend.i.i, %ifend.i
  %common.ret.op.i.in = phi ptr [ %memberidx3.i, %ifend.i ], [ %memberidx3.i.i, %if.entry.i.i ], [ %memberidx6.i.i, %ifend.i.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.i.in, align 8
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 2
  %35 = load ptr, ptr %memberidx1, align 8
  %36 = tail call ptr @malloc(i32 16)
  store i64 7, ptr %36, align 4
  %memberidx.i34 = getelementptr inbounds %ReturnStatement, ptr %36, i64 0, i32 1
  store ptr null, ptr %memberidx.i34, align 8
  %.not = icmp eq ptr %3, null
  br i1 %.not, label %else, label %if.entry

if.entry:                                         ; preds = %TypeChecker_get_current_function_type.exit
  %37 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %35, ptr nonnull %3)
  %memberidx.i35 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %38 = load ptr, ptr %memberidx.i35, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %38, i64 0, i32 6
  %39 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i, align 4
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %common.ret, label %ifend4

else:                                             ; preds = %TypeChecker_get_current_function_type.exit
  %42 = load i64, ptr %35, align 4
  %.not33 = icmp eq i64 %42, 10
  br i1 %.not33, label %common.ret, label %if.entry15

common.ret:                                       ; preds = %ifend8, %else, %if.entry, %TypeChecker_error.exit62, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit62 ], [ null, %if.entry ], [ %36, %else ], [ %36, %ifend8 ]
  ret ptr %common.ret.op

ifend4:                                           ; preds = %if.entry
  %memberidx5 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %43 = load ptr, ptr %memberidx5, align 8
  %44 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %35, ptr %43)
  br i1 %44, label %ifend8, label %if.entry6

if.entry6:                                        ; preds = %ifend4
  %45 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %35)
  %46 = load ptr, ptr %45, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx9, align 8
  %48 = tail call ptr %47(ptr nonnull %45)
  %49 = load ptr, ptr %memberidx5, align 8
  %50 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %49)
  %51 = load ptr, ptr %50, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx11, align 8
  %53 = tail call ptr %52(ptr nonnull %50)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %54, ptr nonnull @217, ptr %48, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i36 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i36, align 8
  %memberidx1.i37 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i37, align 4
  %memberidx2.i38 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i38, align 4
  tail call void @free(ptr %48)
  tail call void @free(ptr %53)
  %58 = load ptr, ptr %3, align 8
  %59 = load ptr, ptr %memberidx.i35, align 8
  %memberidx1.i40 = getelementptr inbounds %Compiler, ptr %59, i64 0, i32 6
  %60 = load ptr, ptr %memberidx1.i40, align 8
  %61 = call ptr @malloc(i32 24)
  store i64 5, ptr %61, align 4
  %memberidx1.i.i41 = getelementptr inbounds %FloError, ptr %61, i64 0, i32 2
  store ptr %58, ptr %memberidx1.i.i41, align 8
  %memberidx2.i.i42 = getelementptr inbounds %FloError, ptr %61, i64 0, i32 1
  store ptr %57, ptr %memberidx2.i.i42, align 8
  %memberidx.i.i43 = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 2
  %62 = load i64, ptr %memberidx.i.i43, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 3
  %63 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %62, %63
  br i1 %.not.i.i, label %if.entry6.TypeChecker_error.exit_crit_edge, label %if.entry.i.i45

if.entry6.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry6
  %memberidx4.i.i46.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 1
  %.pre64 = load ptr, ptr %memberidx4.i.i46.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i45:                                   ; preds = %if.entry6
  %64 = shl nuw i64 %63, 1
  store i64 %64, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i.i.i, align 8
  %66 = shl i64 %63, 4
  %67 = call ptr @realloc(ptr %65, i64 %66)
  store ptr %67, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i43, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry6.TypeChecker_error.exit_crit_edge, %if.entry.i.i45
  %68 = phi ptr [ %.pre64, %if.entry6.TypeChecker_error.exit_crit_edge ], [ %67, %if.entry.i.i45 ]
  %69 = phi i64 [ %62, %if.entry6.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i45 ]
  %70 = add nsw i64 %69, 1
  store i64 %70, ptr %memberidx.i.i43, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %68, i64 %69
  store ptr %61, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  store ptr %37, ptr %memberidx.i34, align 8
  br label %common.ret

if.entry15:                                       ; preds = %else
  %71 = tail call ptr @malloc(i32 32)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %71, ptr noundef nonnull align 8 dereferenceable(32) @218, i64 32, i1 false)
  %72 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i.i47 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i.i47, align 8
  %memberidx1.i.i48 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i48, align 4
  %memberidx2.i.i49 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i49, align 4
  %73 = load ptr, ptr %1, align 8
  %memberidx.i50 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %74 = load ptr, ptr %memberidx.i50, align 8
  %memberidx1.i51 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i51, align 8
  %76 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %76, align 4
  %memberidx1.i.i52 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 2
  store ptr %73, ptr %memberidx1.i.i52, align 8
  %memberidx2.i.i53 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 1
  store ptr %72, ptr %memberidx2.i.i53, align 8
  %memberidx.i.i54 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i.i54, align 4
  %memberidx1.i2.i55 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 3
  %78 = load i64, ptr %memberidx1.i2.i55, align 4
  %.not.i.i56 = icmp slt i64 %77, %78
  br i1 %.not.i.i56, label %if.entry15.TypeChecker_error.exit62_crit_edge, label %if.entry.i.i59

if.entry15.TypeChecker_error.exit62_crit_edge:    ; preds = %if.entry15
  %memberidx4.i.i60.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %.pre66 = load ptr, ptr %memberidx4.i.i60.phi.trans.insert, align 8
  br label %TypeChecker_error.exit62

if.entry.i.i59:                                   ; preds = %if.entry15
  %79 = shl nuw i64 %78, 1
  store i64 %79, ptr %memberidx1.i2.i55, align 4
  %memberidx2.i.i.i58 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i.i58, align 8
  %81 = shl i64 %78, 4
  %82 = tail call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i.i.i58, align 8
  %.pre65 = load i64, ptr %memberidx.i.i54, align 4
  br label %TypeChecker_error.exit62

TypeChecker_error.exit62:                         ; preds = %if.entry15.TypeChecker_error.exit62_crit_edge, %if.entry.i.i59
  %83 = phi ptr [ %.pre66, %if.entry15.TypeChecker_error.exit62_crit_edge ], [ %82, %if.entry.i.i59 ]
  %84 = phi i64 [ %77, %if.entry15.TypeChecker_error.exit62_crit_edge ], [ %.pre65, %if.entry.i.i59 ]
  %85 = add nsw i64 %84, 1
  store i64 %85, ptr %memberidx.i.i54, align 4
  %ptridx.i.i61 = getelementptr inbounds ptr, ptr %83, i64 %84
  store ptr %76, ptr %ptridx.i.i61, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_var_declaration(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %4)
  %.not.i = icmp eq ptr %5, null
  br i1 %.not.i, label %ifend, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 2
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %end20, %end, %ifend53, %TypeChecker_error.exit176, %TypeChecker_error.exit160, %TypeChecker_error.exit144, %TypeChecker_error.exit117, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit117 ], [ null, %TypeChecker_error.exit144 ], [ null, %TypeChecker_error.exit160 ], [ null, %TypeChecker_error.exit176 ], [ %173, %ifend53 ], [ null, %end ], [ null, %end20 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %if.entry.i
  %8 = load ptr, ptr %4, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 5
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = tail call ptr %9(ptr nonnull %4)
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %11, ptr nonnull @95, ptr %10)
  %13 = load ptr, ptr %11, align 8
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i, align 4
  tail call void @free(ptr %10)
  %15 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4, align 8
  %memberidx.i93 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i93, align 8
  %memberidx1.i94 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i94, align 8
  %19 = call ptr @malloc(i32 24)
  store i64 1, ptr %19, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 2
  store ptr %16, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 1
  store ptr %14, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 3
  %21 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %20, %21
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %.pre185 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %22 = shl nuw i64 %21, 1
  store i64 %22, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i.i, align 8
  %24 = shl i64 %21, 4
  %25 = call ptr @realloc(ptr %23, i64 %24)
  store ptr %25, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %26 = phi ptr [ %.pre185, %if.entry.TypeChecker_error.exit_crit_edge ], [ %25, %if.entry.i.i ]
  %27 = phi i64 [ %20, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %28 = add nsw i64 %27, 1
  store i64 %28, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %26, i64 %27
  store ptr %19, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2, %if.entry.i
  %29 = load ptr, ptr %0, align 8
  %memberidx1.i95 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %30 = load ptr, ptr %memberidx1.i95, align 8
  %memberidx.i.i96 = getelementptr inbounds %Program, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i.i96, align 8
  %32 = load i64, ptr %30, align 4
  %memberidx.i.i.i97 = getelementptr inbounds %Array_Module_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i.i97, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i98 = getelementptr inbounds %Module, ptr %34, i64 0, i32 8
  %35 = load ptr, ptr %memberidx2.i.i98, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %30, i64 0, i32 1
  %36 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx5 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 3
  %39 = load ptr, ptr %memberidx5, align 8
  %.not = icmp eq ptr %39, null
  br i1 %.not, label %false_block, label %true_block

true_block:                                       ; preds = %ifend
  %40 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %39)
  br label %end

false_block:                                      ; preds = %ifend
  %41 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %41, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %40, %true_block ], [ %41, %false_block ]
  %memberidx.i99 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %42 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i100 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i100, align 8
  %memberidx2.i101 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx2.i101, align 4
  %45 = icmp sgt i64 %44, 0
  br i1 %45, label %common.ret, label %ifend9

ifend9:                                           ; preds = %end
  %memberidx10 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 4
  %46 = load ptr, ptr %memberidx10, align 8
  %47 = icmp eq ptr %46, null
  %48 = load i64, ptr %ternary, align 4
  %49 = icmp eq i64 %48, 20
  %50 = and i1 %47, %49
  br i1 %50, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %ifend9
  %51 = load ptr, ptr %4, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx15, align 8
  %53 = tail call ptr %52(ptr nonnull %4)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %54, ptr nonnull @206, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i102 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i103, align 4
  %memberidx2.i104 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i104, align 4
  tail call void @free(ptr %53)
  %58 = load ptr, ptr %memberidx, align 8
  %memberidx17 = getelementptr inbounds %Token, ptr %58, i64 0, i32 1
  %59 = load ptr, ptr %memberidx17, align 8
  %60 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i106 = getelementptr inbounds %Compiler, ptr %60, i64 0, i32 6
  %61 = load ptr, ptr %memberidx1.i106, align 8
  %62 = call ptr @malloc(i32 24)
  store i64 4, ptr %62, align 4
  %memberidx1.i.i107 = getelementptr inbounds %FloError, ptr %62, i64 0, i32 2
  store ptr %59, ptr %memberidx1.i.i107, align 8
  %memberidx2.i.i108 = getelementptr inbounds %FloError, ptr %62, i64 0, i32 1
  store ptr %57, ptr %memberidx2.i.i108, align 8
  %memberidx.i.i109 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 2
  %63 = load i64, ptr %memberidx.i.i109, align 4
  %memberidx1.i2.i110 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 3
  %64 = load i64, ptr %memberidx1.i2.i110, align 4
  %.not.i.i111 = icmp slt i64 %63, %64
  br i1 %.not.i.i111, label %if.entry12.TypeChecker_error.exit117_crit_edge, label %if.entry.i.i114

if.entry12.TypeChecker_error.exit117_crit_edge:   ; preds = %if.entry12
  %memberidx4.i.i115.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 1
  %.pre200 = load ptr, ptr %memberidx4.i.i115.phi.trans.insert, align 8
  br label %TypeChecker_error.exit117

if.entry.i.i114:                                  ; preds = %if.entry12
  %65 = shl nuw i64 %64, 1
  store i64 %65, ptr %memberidx1.i2.i110, align 4
  %memberidx2.i.i.i113 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 1
  %66 = load ptr, ptr %memberidx2.i.i.i113, align 8
  %67 = shl i64 %64, 4
  %68 = call ptr @realloc(ptr %66, i64 %67)
  store ptr %68, ptr %memberidx2.i.i.i113, align 8
  %.pre199 = load i64, ptr %memberidx.i.i109, align 4
  br label %TypeChecker_error.exit117

TypeChecker_error.exit117:                        ; preds = %if.entry12.TypeChecker_error.exit117_crit_edge, %if.entry.i.i114
  %69 = phi ptr [ %.pre200, %if.entry12.TypeChecker_error.exit117_crit_edge ], [ %68, %if.entry.i.i114 ]
  %70 = phi i64 [ %63, %if.entry12.TypeChecker_error.exit117_crit_edge ], [ %.pre199, %if.entry.i.i114 ]
  %71 = add nsw i64 %70, 1
  store i64 %71, ptr %memberidx.i.i109, align 4
  %ptridx.i.i116 = getelementptr inbounds ptr, ptr %69, i64 %70
  store ptr %62, ptr %ptridx.i.i116, align 8
  br label %common.ret

ifend14:                                          ; preds = %ifend9
  br i1 %47, label %ifend29, label %end20

end20:                                            ; preds = %ifend14
  %72 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr nonnull %ternary, ptr nonnull %46)
  %.pre186 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i119.phi.trans.insert = getelementptr inbounds %Compiler, ptr %.pre186, i64 0, i32 6
  %.pre187 = load ptr, ptr %memberidx1.i119.phi.trans.insert, align 8
  %memberidx2.i120.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %.pre187, i64 0, i32 2
  %.pre188 = load i64, ptr %memberidx2.i120.phi.trans.insert, align 4
  %73 = icmp sgt i64 %.pre188, 0
  br i1 %73, label %common.ret, label %ifend26

ifend26:                                          ; preds = %end20
  %.not89 = icmp eq ptr %72, null
  br i1 %.not89, label %ifend29, label %if.entry27

if.entry27:                                       ; preds = %ifend26
  %memberidx.i121 = getelementptr inbounds %Expression, ptr %72, i64 0, i32 2
  %74 = load i64, ptr %memberidx.i121, align 4
  %75 = icmp eq i64 %74, 5
  %memberidx30 = getelementptr inbounds %Expression, ptr %72, i64 0, i32 3
  %76 = load ptr, ptr %memberidx30, align 8
  %77 = load i64, ptr %76, align 4
  %78 = icmp eq i64 %77, 20
  %79 = and i1 %75, %78
  br i1 %79, label %if.entry32, label %ifend34

ifend29:                                          ; preds = %ifend14, %if.entry46, %ifend40, %ifend26
  %ternary23204207 = phi ptr [ %72, %if.entry46 ], [ %72, %ifend40 ], [ null, %ifend26 ], [ null, %ifend14 ]
  %80 = phi ptr [ %150, %if.entry46 ], [ %ternary, %ifend40 ], [ %ternary, %ifend26 ], [ %ternary, %ifend14 ]
  %memberidx50 = getelementptr inbounds %Scope, ptr %38, i64 0, i32 1
  %81 = load ptr, ptr %memberidx50, align 8
  %82 = tail call fastcc i64 @Map_string_VarId__hash_fnc(ptr %4)
  %memberidx.i122 = getelementptr inbounds %Map_string_VarId_, ptr %81, i64 0, i32 1
  %83 = load i64, ptr %memberidx.i122, align 4
  %84 = urem i64 %82, %83
  %85 = load ptr, ptr %81, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %85, i64 %84
  %86 = load ptr, ptr %ptridx.i, align 8
  %.not.i123 = icmp eq ptr %86, null
  br i1 %.not.i123, label %ifend53, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %ifend29
  %memberidx1.i.i125 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i128 = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %87 = phi ptr [ %97, %else.i ], [ %85, %while.entry.i.preheader ]
  %88 = phi i64 [ %98, %else.i ], [ %83, %while.entry.i.preheader ]
  %89 = phi ptr [ %101, %else.i ], [ %86, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %100, %else.i ], [ %84, %while.entry.i.preheader ]
  %90 = load ptr, ptr %89, align 8
  %memberidx.i.i124 = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  %91 = load i64, ptr %memberidx.i.i124, align 4
  %92 = load i64, ptr %memberidx1.i.i125, align 4
  %.not.i.i126 = icmp eq i64 %91, %92
  br i1 %.not.i.i126, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i127 = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  %93 = load ptr, ptr %memberidx2.i.i127, align 8
  %94 = load ptr, ptr %memberidx3.i.i128, align 8
  %95 = tail call i64 @memcmp(ptr %93, ptr %94, i64 %91)
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre193 = load i64, ptr %memberidx.i122, align 4
  %.pre194 = load ptr, ptr %81, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre195.pre = load ptr, ptr %81, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre195.pre, i64 %hash.0.i
  %.pre196.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre196.pre, null
  br i1 %.not29.i, label %ifend53, label %if.entry10.i

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %97 = phi ptr [ %.pre194, %ifend.i.i.else.i_crit_edge ], [ %87, %while.entry.i ]
  %98 = phi i64 [ %.pre193, %ifend.i.i.else.i_crit_edge ], [ %88, %while.entry.i ]
  %99 = add nuw i64 %hash.0.i, 1
  %100 = urem i64 %99, %98
  %ptridx7.i = getelementptr inbounds ptr, ptr %97, i64 %100
  %101 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %101, null
  br i1 %.not30.i, label %ifend53, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_VarId_, ptr %.pre196.pre, i64 0, i32 1
  %102 = load ptr, ptr %memberidx15.i, align 8
  %phi.cmp = icmp eq ptr %102, null
  br i1 %phi.cmp, label %ifend53, label %if.entry51

if.entry32:                                       ; preds = %if.entry27
  %103 = tail call ptr @malloc(i32 69)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(69) %103, ptr noundef nonnull align 8 dereferenceable(69) @207, i64 69, i1 false)
  %104 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %104, align 8
  %memberidx.i.i129 = getelementptr inbounds %string, ptr %104, i64 0, i32 1
  store ptr %103, ptr %memberidx.i.i129, align 8
  %memberidx1.i.i130 = getelementptr inbounds %string, ptr %104, i64 0, i32 2
  store i64 69, ptr %memberidx1.i.i130, align 4
  %memberidx2.i.i131 = getelementptr inbounds %string, ptr %104, i64 0, i32 3
  store i64 69, ptr %memberidx2.i.i131, align 4
  %105 = load ptr, ptr %1, align 8
  %106 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i133 = getelementptr inbounds %Compiler, ptr %106, i64 0, i32 6
  %107 = load ptr, ptr %memberidx1.i133, align 8
  %108 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %108, align 4
  %memberidx1.i.i134 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 2
  store ptr %105, ptr %memberidx1.i.i134, align 8
  %memberidx2.i.i135 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 1
  store ptr %104, ptr %memberidx2.i.i135, align 8
  %memberidx.i.i136 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 2
  %109 = load i64, ptr %memberidx.i.i136, align 4
  %memberidx1.i2.i137 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 3
  %110 = load i64, ptr %memberidx1.i2.i137, align 4
  %.not.i.i138 = icmp slt i64 %109, %110
  br i1 %.not.i.i138, label %if.entry32.TypeChecker_error.exit144_crit_edge, label %if.entry.i.i141

if.entry32.TypeChecker_error.exit144_crit_edge:   ; preds = %if.entry32
  %memberidx4.i.i142.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %.pre192 = load ptr, ptr %memberidx4.i.i142.phi.trans.insert, align 8
  br label %TypeChecker_error.exit144

if.entry.i.i141:                                  ; preds = %if.entry32
  %111 = shl nuw i64 %110, 1
  store i64 %111, ptr %memberidx1.i2.i137, align 4
  %memberidx2.i.i.i140 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %112 = load ptr, ptr %memberidx2.i.i.i140, align 8
  %113 = shl i64 %110, 4
  %114 = tail call ptr @realloc(ptr %112, i64 %113)
  store ptr %114, ptr %memberidx2.i.i.i140, align 8
  %.pre191 = load i64, ptr %memberidx.i.i136, align 4
  br label %TypeChecker_error.exit144

TypeChecker_error.exit144:                        ; preds = %if.entry32.TypeChecker_error.exit144_crit_edge, %if.entry.i.i141
  %115 = phi ptr [ %.pre192, %if.entry32.TypeChecker_error.exit144_crit_edge ], [ %114, %if.entry.i.i141 ]
  %116 = phi i64 [ %109, %if.entry32.TypeChecker_error.exit144_crit_edge ], [ %.pre191, %if.entry.i.i141 ]
  %117 = add nsw i64 %116, 1
  store i64 %117, ptr %memberidx.i.i136, align 4
  %ptridx.i.i143 = getelementptr inbounds ptr, ptr %115, i64 %116
  store ptr %108, ptr %ptridx.i.i143, align 8
  br label %common.ret

ifend34:                                          ; preds = %if.entry27
  %118 = load i64, ptr %ternary, align 4
  %119 = icmp eq i64 %118, 20
  %120 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %ternary, ptr nonnull %76)
  %121 = or i1 %120, %119
  br i1 %121, label %ifend40, label %if.entry38

if.entry38:                                       ; preds = %ifend34
  %122 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %ternary)
  %123 = load ptr, ptr %122, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %123, i64 0, i32 5
  %124 = load ptr, ptr %memberidx41, align 8
  %125 = tail call ptr %124(ptr nonnull %122)
  %126 = load ptr, ptr %memberidx30, align 8
  %127 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %126)
  %128 = load ptr, ptr %127, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %128, i64 0, i32 5
  %129 = load ptr, ptr %memberidx43, align 8
  %130 = tail call ptr %129(ptr nonnull %127)
  %131 = alloca ptr, align 8
  %132 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %131, ptr nonnull @208, ptr %125, ptr %130)
  %133 = load ptr, ptr %131, align 8
  %134 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %134, align 8
  %memberidx.i145 = getelementptr inbounds %string, ptr %134, i64 0, i32 1
  store ptr %133, ptr %memberidx.i145, align 8
  %memberidx1.i146 = getelementptr inbounds %string, ptr %134, i64 0, i32 2
  store i64 %132, ptr %memberidx1.i146, align 4
  %memberidx2.i147 = getelementptr inbounds %string, ptr %134, i64 0, i32 3
  store i64 %132, ptr %memberidx2.i147, align 4
  tail call void @free(ptr %125)
  tail call void @free(ptr %130)
  %135 = load ptr, ptr %1, align 8
  %136 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i149 = getelementptr inbounds %Compiler, ptr %136, i64 0, i32 6
  %137 = load ptr, ptr %memberidx1.i149, align 8
  %138 = call ptr @malloc(i32 24)
  store i64 5, ptr %138, align 4
  %memberidx1.i.i150 = getelementptr inbounds %FloError, ptr %138, i64 0, i32 2
  store ptr %135, ptr %memberidx1.i.i150, align 8
  %memberidx2.i.i151 = getelementptr inbounds %FloError, ptr %138, i64 0, i32 1
  store ptr %134, ptr %memberidx2.i.i151, align 8
  %memberidx.i.i152 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 2
  %139 = load i64, ptr %memberidx.i.i152, align 4
  %memberidx1.i2.i153 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 3
  %140 = load i64, ptr %memberidx1.i2.i153, align 4
  %.not.i.i154 = icmp slt i64 %139, %140
  br i1 %.not.i.i154, label %if.entry38.TypeChecker_error.exit160_crit_edge, label %if.entry.i.i157

if.entry38.TypeChecker_error.exit160_crit_edge:   ; preds = %if.entry38
  %memberidx4.i.i158.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 1
  %.pre190 = load ptr, ptr %memberidx4.i.i158.phi.trans.insert, align 8
  br label %TypeChecker_error.exit160

if.entry.i.i157:                                  ; preds = %if.entry38
  %141 = shl nuw i64 %140, 1
  store i64 %141, ptr %memberidx1.i2.i153, align 4
  %memberidx2.i.i.i156 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 1
  %142 = load ptr, ptr %memberidx2.i.i.i156, align 8
  %143 = shl i64 %140, 4
  %144 = call ptr @realloc(ptr %142, i64 %143)
  store ptr %144, ptr %memberidx2.i.i.i156, align 8
  %.pre189 = load i64, ptr %memberidx.i.i152, align 4
  br label %TypeChecker_error.exit160

TypeChecker_error.exit160:                        ; preds = %if.entry38.TypeChecker_error.exit160_crit_edge, %if.entry.i.i157
  %145 = phi ptr [ %.pre190, %if.entry38.TypeChecker_error.exit160_crit_edge ], [ %144, %if.entry.i.i157 ]
  %146 = phi i64 [ %139, %if.entry38.TypeChecker_error.exit160_crit_edge ], [ %.pre189, %if.entry.i.i157 ]
  %147 = add nsw i64 %146, 1
  store i64 %147, ptr %memberidx.i.i152, align 4
  %ptridx.i.i159 = getelementptr inbounds ptr, ptr %145, i64 %146
  store ptr %138, ptr %ptridx.i.i159, align 8
  br label %common.ret

ifend40:                                          ; preds = %ifend34
  %148 = load i64, ptr %ternary, align 4
  %149 = icmp eq i64 %148, 20
  br i1 %149, label %if.entry46, label %ifend29

if.entry46:                                       ; preds = %ifend40
  %150 = load ptr, ptr %memberidx30, align 8
  br label %ifend29

if.entry51:                                       ; preds = %if.entry10.i
  %151 = load ptr, ptr %4, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %151, i64 0, i32 5
  %152 = load ptr, ptr %memberidx54, align 8
  %153 = tail call ptr %152(ptr nonnull %4)
  %154 = alloca ptr, align 8
  %155 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %154, ptr nonnull @209, ptr %153)
  %156 = load ptr, ptr %154, align 8
  %157 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %157, align 8
  %memberidx.i161 = getelementptr inbounds %string, ptr %157, i64 0, i32 1
  store ptr %156, ptr %memberidx.i161, align 8
  %memberidx1.i162 = getelementptr inbounds %string, ptr %157, i64 0, i32 2
  store i64 %155, ptr %memberidx1.i162, align 4
  %memberidx2.i163 = getelementptr inbounds %string, ptr %157, i64 0, i32 3
  store i64 %155, ptr %memberidx2.i163, align 4
  tail call void @free(ptr %153)
  %158 = load ptr, ptr %memberidx, align 8
  %memberidx56 = getelementptr inbounds %Token, ptr %158, i64 0, i32 1
  %159 = load ptr, ptr %memberidx56, align 8
  %160 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i165 = getelementptr inbounds %Compiler, ptr %160, i64 0, i32 6
  %161 = load ptr, ptr %memberidx1.i165, align 8
  %162 = call ptr @malloc(i32 24)
  store i64 1, ptr %162, align 4
  %memberidx1.i.i166 = getelementptr inbounds %FloError, ptr %162, i64 0, i32 2
  store ptr %159, ptr %memberidx1.i.i166, align 8
  %memberidx2.i.i167 = getelementptr inbounds %FloError, ptr %162, i64 0, i32 1
  store ptr %157, ptr %memberidx2.i.i167, align 8
  %memberidx.i.i168 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 2
  %163 = load i64, ptr %memberidx.i.i168, align 4
  %memberidx1.i2.i169 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 3
  %164 = load i64, ptr %memberidx1.i2.i169, align 4
  %.not.i.i170 = icmp slt i64 %163, %164
  br i1 %.not.i.i170, label %if.entry51.TypeChecker_error.exit176_crit_edge, label %if.entry.i.i173

if.entry51.TypeChecker_error.exit176_crit_edge:   ; preds = %if.entry51
  %memberidx4.i.i174.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 1
  %.pre198 = load ptr, ptr %memberidx4.i.i174.phi.trans.insert, align 8
  br label %TypeChecker_error.exit176

if.entry.i.i173:                                  ; preds = %if.entry51
  %165 = shl nuw i64 %164, 1
  store i64 %165, ptr %memberidx1.i2.i169, align 4
  %memberidx2.i.i.i172 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 1
  %166 = load ptr, ptr %memberidx2.i.i.i172, align 8
  %167 = shl i64 %164, 4
  %168 = call ptr @realloc(ptr %166, i64 %167)
  store ptr %168, ptr %memberidx2.i.i.i172, align 8
  %.pre197 = load i64, ptr %memberidx.i.i168, align 4
  br label %TypeChecker_error.exit176

TypeChecker_error.exit176:                        ; preds = %if.entry51.TypeChecker_error.exit176_crit_edge, %if.entry.i.i173
  %169 = phi ptr [ %.pre198, %if.entry51.TypeChecker_error.exit176_crit_edge ], [ %168, %if.entry.i.i173 ]
  %170 = phi i64 [ %163, %if.entry51.TypeChecker_error.exit176_crit_edge ], [ %.pre197, %if.entry.i.i173 ]
  %171 = add nsw i64 %170, 1
  store i64 %171, ptr %memberidx.i.i168, align 4
  %ptridx.i.i175 = getelementptr inbounds ptr, ptr %169, i64 %170
  store ptr %162, ptr %ptridx.i.i175, align 8
  br label %common.ret

ifend53:                                          ; preds = %else.i, %ifend29, %while.end.i, %if.entry10.i
  %172 = tail call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr %4, ptr %ternary23204207, ptr %80)
  %173 = tail call ptr @malloc(i32 25)
  %memberidx57 = getelementptr inbounds %Var, ptr %172, i64 0, i32 1
  %174 = load ptr, ptr %memberidx57, align 8
  store i64 1, ptr %173, align 4
  %memberidx.i177 = getelementptr inbounds %VarDeclaration, ptr %173, i64 0, i32 2
  store ptr %174, ptr %memberidx.i177, align 8
  %memberidx1.i178 = getelementptr inbounds %VarDeclaration, ptr %173, i64 0, i32 1
  store ptr %4, ptr %memberidx1.i178, align 8
  %memberidx2.i179 = getelementptr inbounds %VarDeclaration, ptr %173, i64 0, i32 3
  store i1 false, ptr %memberidx2.i179, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_const_declaration(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 8
  %11 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %6, i64 0, i32 1
  %12 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i.i, align 8
  %15 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nonnull %0, ptr %4)
  %.not.i = icmp eq ptr %15, null
  br i1 %.not.i, label %TypeChecker_is_constant_in_scope.exit, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %16 = load i64, ptr %15, align 4
  %17 = icmp eq i64 %16, 2
  br label %TypeChecker_is_constant_in_scope.exit

TypeChecker_is_constant_in_scope.exit:            ; preds = %2, %if.entry.i
  %is_constant.0.i = phi i1 [ %17, %if.entry.i ], [ false, %2 ]
  %memberidx2 = getelementptr inbounds %Scope, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2, align 8
  %19 = tail call fastcc i64 @Map_string_VarId__hash_fnc(ptr %4)
  %memberidx.i = getelementptr inbounds %Map_string_VarId_, ptr %18, i64 0, i32 1
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = urem i64 %19, %20
  %22 = load ptr, ptr %18, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %22, i64 %21
  %23 = load ptr, ptr %ptridx.i, align 8
  %.not.i63 = icmp eq ptr %23, null
  br i1 %.not.i63, label %Map_string_VarId____getitem__.exit, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %TypeChecker_is_constant_in_scope.exit
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i66 = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %24 = phi ptr [ %34, %else.i ], [ %22, %while.entry.i.preheader ]
  %25 = phi i64 [ %35, %else.i ], [ %20, %while.entry.i.preheader ]
  %26 = phi ptr [ %38, %else.i ], [ %23, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %37, %else.i ], [ %21, %while.entry.i.preheader ]
  %27 = load ptr, ptr %26, align 8
  %memberidx.i.i64 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx.i.i64, align 4
  %29 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %28, %29
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i65 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  %30 = load ptr, ptr %memberidx2.i.i65, align 8
  %31 = load ptr, ptr %memberidx3.i.i66, align 8
  %32 = tail call i64 @memcmp(ptr %30, ptr %31, i64 %28)
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre137 = load ptr, ptr %18, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre138.pre = load ptr, ptr %18, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre138.pre, i64 %hash.0.i
  %.pre139.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre139.pre, null
  br i1 %.not29.i, label %Map_string_VarId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %34 = phi ptr [ %.pre137, %ifend.i.i.else.i_crit_edge ], [ %24, %while.entry.i ]
  %35 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %25, %while.entry.i ]
  %36 = add nuw i64 %hash.0.i, 1
  %37 = urem i64 %36, %35
  %ptridx7.i = getelementptr inbounds ptr, ptr %34, i64 %37
  %38 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %38, null
  br i1 %.not30.i, label %Map_string_VarId____getitem__.exit, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_VarId_, ptr %.pre139.pre, i64 0, i32 1
  %39 = load ptr, ptr %memberidx15.i, align 8
  %phi.cmp = icmp ne ptr %39, null
  br label %Map_string_VarId____getitem__.exit

Map_string_VarId____getitem__.exit:               ; preds = %else.i, %TypeChecker_is_constant_in_scope.exit, %while.end.i, %if.entry10.i
  %common.ret.op.i = phi i1 [ %phi.cmp, %if.entry10.i ], [ false, %while.end.i ], [ false, %TypeChecker_is_constant_in_scope.exit ], [ false, %else.i ]
  %40 = or i1 %is_constant.0.i, %common.ret.op.i
  br i1 %40, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend10, %end, %ifend30, %TypeChecker_error.exit130, %TypeChecker_error.exit114, %TypeChecker_error.exit97, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit97 ], [ null, %TypeChecker_error.exit114 ], [ null, %TypeChecker_error.exit130 ], [ %143, %ifend30 ], [ null, %end ], [ null, %ifend10 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %Map_string_VarId____getitem__.exit
  %41 = load ptr, ptr %4, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i64 0, i32 5
  %42 = load ptr, ptr %memberidx3, align 8
  %43 = tail call ptr %42(ptr nonnull %4)
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %44, ptr nonnull @95, ptr %43)
  %46 = load ptr, ptr %44, align 8
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i67 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i67, align 8
  %memberidx1.i68 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 %45, ptr %memberidx1.i68, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 %45, ptr %memberidx2.i, align 4
  tail call void @free(ptr %43)
  %48 = load ptr, ptr %memberidx, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %48, i64 0, i32 1
  %49 = load ptr, ptr %memberidx5, align 8
  %memberidx.i69 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %50 = load ptr, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %Compiler, ptr %50, i64 0, i32 6
  %51 = load ptr, ptr %memberidx1.i70, align 8
  %52 = call ptr @malloc(i32 24)
  store i64 1, ptr %52, align 4
  %memberidx1.i.i71 = getelementptr inbounds %FloError, ptr %52, i64 0, i32 2
  store ptr %49, ptr %memberidx1.i.i71, align 8
  %memberidx2.i.i72 = getelementptr inbounds %FloError, ptr %52, i64 0, i32 1
  store ptr %47, ptr %memberidx2.i.i72, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 2
  %53 = load i64, ptr %memberidx.i.i73, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 3
  %54 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i74 = icmp slt i64 %53, %54
  br i1 %.not.i.i74, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 1
  %.pre147 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %55 = shl nuw i64 %54, 1
  store i64 %55, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 1
  %56 = load ptr, ptr %memberidx2.i.i.i, align 8
  %57 = shl i64 %54, 4
  %58 = call ptr @realloc(ptr %56, i64 %57)
  store ptr %58, ptr %memberidx2.i.i.i, align 8
  %.pre146 = load i64, ptr %memberidx.i.i73, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %59 = phi ptr [ %.pre147, %if.entry.TypeChecker_error.exit_crit_edge ], [ %58, %if.entry.i.i ]
  %60 = phi i64 [ %53, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre146, %if.entry.i.i ]
  %61 = add nsw i64 %60, 1
  store i64 %61, ptr %memberidx.i.i73, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %60
  store ptr %52, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %Map_string_VarId____getitem__.exit
  %memberidx6 = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 3
  %62 = load ptr, ptr %memberidx6, align 8
  %.not = icmp eq ptr %62, null
  br i1 %.not, label %false_block, label %true_block

true_block:                                       ; preds = %ifend
  %63 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %62)
  br label %end

false_block:                                      ; preds = %ifend
  %64 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %64, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %63, %true_block ], [ %64, %false_block ]
  %memberidx.i76 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %65 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %65, i64 0, i32 6
  %66 = load ptr, ptr %memberidx1.i77, align 8
  %memberidx2.i78 = getelementptr inbounds %Array_FloError_, ptr %66, i64 0, i32 2
  %67 = load i64, ptr %memberidx2.i78, align 4
  %68 = icmp sgt i64 %67, 0
  br i1 %68, label %common.ret, label %ifend10

ifend10:                                          ; preds = %end
  %memberidx11 = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 4
  %69 = load ptr, ptr %memberidx11, align 8
  %70 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %ternary, ptr %69)
  %71 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i80 = getelementptr inbounds %Compiler, ptr %71, i64 0, i32 6
  %72 = load ptr, ptr %memberidx1.i80, align 8
  %memberidx2.i81 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 2
  %73 = load i64, ptr %memberidx2.i81, align 4
  %74 = icmp sgt i64 %73, 0
  br i1 %74, label %common.ret, label %ifend14

ifend14:                                          ; preds = %ifend10
  %memberidx15 = getelementptr inbounds %Expression, ptr %70, i64 0, i32 1
  %75 = load i1, ptr %memberidx15, align 1
  br i1 %75, label %ifend18, label %if.entry16

if.entry16:                                       ; preds = %ifend14
  %76 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %76, ptr noundef nonnull align 8 dereferenceable(48) @210, i64 48, i1 false)
  %77 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %77, align 8
  %memberidx.i.i82 = getelementptr inbounds %string, ptr %77, i64 0, i32 1
  store ptr %76, ptr %memberidx.i.i82, align 8
  %memberidx1.i.i83 = getelementptr inbounds %string, ptr %77, i64 0, i32 2
  store i64 48, ptr %memberidx1.i.i83, align 4
  %memberidx2.i.i84 = getelementptr inbounds %string, ptr %77, i64 0, i32 3
  store i64 48, ptr %memberidx2.i.i84, align 4
  %78 = load ptr, ptr %memberidx11, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i86 = getelementptr inbounds %Compiler, ptr %80, i64 0, i32 6
  %81 = load ptr, ptr %memberidx1.i86, align 8
  %82 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %82, align 4
  %memberidx1.i.i87 = getelementptr inbounds %FloError, ptr %82, i64 0, i32 2
  store ptr %79, ptr %memberidx1.i.i87, align 8
  %memberidx2.i.i88 = getelementptr inbounds %FloError, ptr %82, i64 0, i32 1
  store ptr %77, ptr %memberidx2.i.i88, align 8
  %memberidx.i.i89 = getelementptr inbounds %Array_FloError_, ptr %81, i64 0, i32 2
  %83 = load i64, ptr %memberidx.i.i89, align 4
  %memberidx1.i2.i90 = getelementptr inbounds %Array_FloError_, ptr %81, i64 0, i32 3
  %84 = load i64, ptr %memberidx1.i2.i90, align 4
  %.not.i.i91 = icmp slt i64 %83, %84
  br i1 %.not.i.i91, label %if.entry16.TypeChecker_error.exit97_crit_edge, label %if.entry.i.i94

if.entry16.TypeChecker_error.exit97_crit_edge:    ; preds = %if.entry16
  %memberidx4.i.i95.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %81, i64 0, i32 1
  %.pre141 = load ptr, ptr %memberidx4.i.i95.phi.trans.insert, align 8
  br label %TypeChecker_error.exit97

if.entry.i.i94:                                   ; preds = %if.entry16
  %85 = shl nuw i64 %84, 1
  store i64 %85, ptr %memberidx1.i2.i90, align 4
  %memberidx2.i.i.i93 = getelementptr inbounds %Array_FloError_, ptr %81, i64 0, i32 1
  %86 = load ptr, ptr %memberidx2.i.i.i93, align 8
  %87 = shl i64 %84, 4
  %88 = tail call ptr @realloc(ptr %86, i64 %87)
  store ptr %88, ptr %memberidx2.i.i.i93, align 8
  %.pre140 = load i64, ptr %memberidx.i.i89, align 4
  br label %TypeChecker_error.exit97

TypeChecker_error.exit97:                         ; preds = %if.entry16.TypeChecker_error.exit97_crit_edge, %if.entry.i.i94
  %89 = phi ptr [ %.pre141, %if.entry16.TypeChecker_error.exit97_crit_edge ], [ %88, %if.entry.i.i94 ]
  %90 = phi i64 [ %83, %if.entry16.TypeChecker_error.exit97_crit_edge ], [ %.pre140, %if.entry.i.i94 ]
  %91 = add nsw i64 %90, 1
  store i64 %91, ptr %memberidx.i.i89, align 4
  %ptridx.i.i96 = getelementptr inbounds ptr, ptr %89, i64 %90
  store ptr %82, ptr %ptridx.i.i96, align 8
  br label %common.ret

ifend18:                                          ; preds = %ifend14
  %memberidx.i98 = getelementptr inbounds %Expression, ptr %70, i64 0, i32 2
  %92 = load i64, ptr %memberidx.i98, align 4
  %93 = icmp eq i64 %92, 5
  %94 = load i64, ptr %ternary, align 4
  %95 = icmp eq i64 %94, 20
  %96 = and i1 %93, %95
  br i1 %96, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend18
  %97 = tail call ptr @malloc(i32 69)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(69) %97, ptr noundef nonnull align 8 dereferenceable(69) @207, i64 69, i1 false)
  %98 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i.i99 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 69, ptr %memberidx1.i.i100, align 4
  %memberidx2.i.i101 = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 69, ptr %memberidx2.i.i101, align 4
  %99 = load ptr, ptr %1, align 8
  %100 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i103 = getelementptr inbounds %Compiler, ptr %100, i64 0, i32 6
  %101 = load ptr, ptr %memberidx1.i103, align 8
  %102 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %102, align 4
  %memberidx1.i.i104 = getelementptr inbounds %FloError, ptr %102, i64 0, i32 2
  store ptr %99, ptr %memberidx1.i.i104, align 8
  %memberidx2.i.i105 = getelementptr inbounds %FloError, ptr %102, i64 0, i32 1
  store ptr %98, ptr %memberidx2.i.i105, align 8
  %memberidx.i.i106 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 2
  %103 = load i64, ptr %memberidx.i.i106, align 4
  %memberidx1.i2.i107 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 3
  %104 = load i64, ptr %memberidx1.i2.i107, align 4
  %.not.i.i108 = icmp slt i64 %103, %104
  br i1 %.not.i.i108, label %if.entry22.TypeChecker_error.exit114_crit_edge, label %if.entry.i.i111

if.entry22.TypeChecker_error.exit114_crit_edge:   ; preds = %if.entry22
  %memberidx4.i.i112.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 1
  %.pre145 = load ptr, ptr %memberidx4.i.i112.phi.trans.insert, align 8
  br label %TypeChecker_error.exit114

if.entry.i.i111:                                  ; preds = %if.entry22
  %105 = shl nuw i64 %104, 1
  store i64 %105, ptr %memberidx1.i2.i107, align 4
  %memberidx2.i.i.i110 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 1
  %106 = load ptr, ptr %memberidx2.i.i.i110, align 8
  %107 = shl i64 %104, 4
  %108 = tail call ptr @realloc(ptr %106, i64 %107)
  store ptr %108, ptr %memberidx2.i.i.i110, align 8
  %.pre144 = load i64, ptr %memberidx.i.i106, align 4
  br label %TypeChecker_error.exit114

TypeChecker_error.exit114:                        ; preds = %if.entry22.TypeChecker_error.exit114_crit_edge, %if.entry.i.i111
  %109 = phi ptr [ %.pre145, %if.entry22.TypeChecker_error.exit114_crit_edge ], [ %108, %if.entry.i.i111 ]
  %110 = phi i64 [ %103, %if.entry22.TypeChecker_error.exit114_crit_edge ], [ %.pre144, %if.entry.i.i111 ]
  %111 = add nsw i64 %110, 1
  store i64 %111, ptr %memberidx.i.i106, align 4
  %ptridx.i.i113 = getelementptr inbounds ptr, ptr %109, i64 %110
  store ptr %102, ptr %ptridx.i.i113, align 8
  br label %common.ret

ifend24:                                          ; preds = %ifend18
  %memberidx27 = getelementptr inbounds %Expression, ptr %70, i64 0, i32 3
  %112 = load ptr, ptr %memberidx27, align 8
  %113 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %ternary, ptr %112)
  %114 = or i1 %95, %113
  br i1 %114, label %ifend30, label %if.entry28

if.entry28:                                       ; preds = %ifend24
  %115 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %ternary)
  %116 = load ptr, ptr %115, align 8
  %memberidx31 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %116, i64 0, i32 5
  %117 = load ptr, ptr %memberidx31, align 8
  %118 = tail call ptr %117(ptr nonnull %115)
  %119 = load ptr, ptr %memberidx27, align 8
  %120 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %119)
  %121 = load ptr, ptr %120, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %121, i64 0, i32 5
  %122 = load ptr, ptr %memberidx33, align 8
  %123 = tail call ptr %122(ptr nonnull %120)
  %124 = alloca ptr, align 8
  %125 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %124, ptr nonnull @211, ptr %118, ptr %123)
  %126 = load ptr, ptr %124, align 8
  %127 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %127, align 8
  %memberidx.i115 = getelementptr inbounds %string, ptr %127, i64 0, i32 1
  store ptr %126, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %string, ptr %127, i64 0, i32 2
  store i64 %125, ptr %memberidx1.i116, align 4
  %memberidx2.i117 = getelementptr inbounds %string, ptr %127, i64 0, i32 3
  store i64 %125, ptr %memberidx2.i117, align 4
  tail call void @free(ptr %118)
  tail call void @free(ptr %123)
  %128 = load ptr, ptr %1, align 8
  %129 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i119 = getelementptr inbounds %Compiler, ptr %129, i64 0, i32 6
  %130 = load ptr, ptr %memberidx1.i119, align 8
  %131 = call ptr @malloc(i32 24)
  store i64 5, ptr %131, align 4
  %memberidx1.i.i120 = getelementptr inbounds %FloError, ptr %131, i64 0, i32 2
  store ptr %128, ptr %memberidx1.i.i120, align 8
  %memberidx2.i.i121 = getelementptr inbounds %FloError, ptr %131, i64 0, i32 1
  store ptr %127, ptr %memberidx2.i.i121, align 8
  %memberidx.i.i122 = getelementptr inbounds %Array_FloError_, ptr %130, i64 0, i32 2
  %132 = load i64, ptr %memberidx.i.i122, align 4
  %memberidx1.i2.i123 = getelementptr inbounds %Array_FloError_, ptr %130, i64 0, i32 3
  %133 = load i64, ptr %memberidx1.i2.i123, align 4
  %.not.i.i124 = icmp slt i64 %132, %133
  br i1 %.not.i.i124, label %if.entry28.TypeChecker_error.exit130_crit_edge, label %if.entry.i.i127

if.entry28.TypeChecker_error.exit130_crit_edge:   ; preds = %if.entry28
  %memberidx4.i.i128.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %130, i64 0, i32 1
  %.pre143 = load ptr, ptr %memberidx4.i.i128.phi.trans.insert, align 8
  br label %TypeChecker_error.exit130

if.entry.i.i127:                                  ; preds = %if.entry28
  %134 = shl nuw i64 %133, 1
  store i64 %134, ptr %memberidx1.i2.i123, align 4
  %memberidx2.i.i.i126 = getelementptr inbounds %Array_FloError_, ptr %130, i64 0, i32 1
  %135 = load ptr, ptr %memberidx2.i.i.i126, align 8
  %136 = shl i64 %133, 4
  %137 = call ptr @realloc(ptr %135, i64 %136)
  store ptr %137, ptr %memberidx2.i.i.i126, align 8
  %.pre142 = load i64, ptr %memberidx.i.i122, align 4
  br label %TypeChecker_error.exit130

TypeChecker_error.exit130:                        ; preds = %if.entry28.TypeChecker_error.exit130_crit_edge, %if.entry.i.i127
  %138 = phi ptr [ %.pre143, %if.entry28.TypeChecker_error.exit130_crit_edge ], [ %137, %if.entry.i.i127 ]
  %139 = phi i64 [ %132, %if.entry28.TypeChecker_error.exit130_crit_edge ], [ %.pre142, %if.entry.i.i127 ]
  %140 = add nsw i64 %139, 1
  store i64 %140, ptr %memberidx.i.i122, align 4
  %ptridx.i.i129 = getelementptr inbounds ptr, ptr %138, i64 %139
  store ptr %131, ptr %ptridx.i.i129, align 8
  br label %common.ret

ifend30:                                          ; preds = %ifend24
  %141 = load ptr, ptr %memberidx27, align 8
  %142 = tail call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nonnull %0, ptr %4, ptr nonnull %70, ptr %141)
  %143 = tail call ptr @malloc(i32 25)
  %memberidx36 = getelementptr inbounds %Const, ptr %142, i64 0, i32 1
  %144 = load ptr, ptr %memberidx36, align 8
  store i64 2, ptr %143, align 4
  %memberidx.i131 = getelementptr inbounds %ConstDeclaration, ptr %143, i64 0, i32 2
  store ptr %144, ptr %memberidx.i131, align 8
  %memberidx1.i132 = getelementptr inbounds %ConstDeclaration, ptr %143, i64 0, i32 1
  store ptr %4, ptr %memberidx1.i132, align 8
  %memberidx2.i133 = getelementptr inbounds %ConstDeclaration, ptr %143, i64 0, i32 3
  store i1 false, ptr %memberidx2.i133, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 8
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %4, i64 0, i32 1
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %memberidx1.i.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i79 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %ifend5, %2
  %current_scope.0.in = phi ptr [ %ptridx.i6.i.i, %2 ], [ %ptridx.i6.i, %ifend5 ]
  %current_scope.0 = load ptr, ptr %current_scope.0.in, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 1
  %12 = load ptr, ptr %memberidx, align 8
  %13 = tail call fastcc i64 @Map_string_VarId__hash_fnc(ptr %1)
  %memberidx.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i, align 4
  %15 = urem i64 %13, %14
  %16 = load ptr, ptr %12, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %17, null
  br i1 %.not.i, label %if.entry, label %while.entry.i

while.entry.i:                                    ; preds = %while.entry, %else.i
  %18 = phi ptr [ %28, %else.i ], [ %16, %while.entry ]
  %19 = phi i64 [ %29, %else.i ], [ %14, %while.entry ]
  %20 = phi ptr [ %32, %else.i ], [ %17, %while.entry ]
  %hash.0.i = phi i64 [ %31, %else.i ], [ %15, %while.entry ]
  %21 = load ptr, ptr %20, align 8
  %memberidx.i.i77 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx.i.i77, align 4
  %23 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %22, %23
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i78 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  %24 = load ptr, ptr %memberidx2.i.i78, align 8
  %25 = load ptr, ptr %memberidx3.i.i79, align 8
  %26 = tail call i64 @memcmp(ptr %24, ptr %25, i64 %22)
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre173 = load ptr, ptr %12, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre174.pre = load ptr, ptr %12, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre174.pre, i64 %hash.0.i
  %.pre175.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre175.pre, null
  br i1 %.not29.i, label %if.entry, label %Map_string_VarId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %28 = phi ptr [ %.pre173, %ifend.i.i.else.i_crit_edge ], [ %18, %while.entry.i ]
  %29 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %19, %while.entry.i ]
  %30 = add nuw i64 %hash.0.i, 1
  %31 = urem i64 %30, %29
  %ptridx7.i = getelementptr inbounds ptr, ptr %28, i64 %31
  %32 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %32, null
  br i1 %.not30.i, label %if.entry, label %while.entry.i

Map_string_VarId____getitem__.exit:               ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_VarId_, ptr %.pre175.pre, i64 0, i32 1
  %33 = load ptr, ptr %memberidx15.i, align 8
  %34 = icmp eq ptr %33, null
  br i1 %34, label %if.entry, label %ifend12

while.end:                                        ; preds = %ifend
  %35 = icmp eq ptr %value.1, null
  %36 = load ptr, ptr %memberidx1.i, align 8
  %37 = load i64, ptr %36, align 4
  %38 = icmp ne i64 %37, 0
  %39 = and i1 %35, %38
  br i1 %39, label %if.entry10, label %ifend12

if.entry:                                         ; preds = %else.i, %while.entry, %while.end.i, %Map_string_VarId____getitem__.exit
  %memberidx1 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 3
  %40 = load ptr, ptr %memberidx1, align 8
  %41 = tail call fastcc i64 @Map_string_VarId__hash_fnc(ptr %1)
  %memberidx.i80 = getelementptr inbounds %Map_string_VarId_, ptr %40, i64 0, i32 1
  %42 = load i64, ptr %memberidx.i80, align 4
  %43 = urem i64 %41, %42
  %44 = load ptr, ptr %40, align 8
  %ptridx.i81 = getelementptr inbounds ptr, ptr %44, i64 %43
  %45 = load ptr, ptr %ptridx.i81, align 8
  %.not.i82 = icmp eq ptr %45, null
  br i1 %.not.i82, label %ifend, label %while.entry.i88

while.entry.i88:                                  ; preds = %if.entry, %else.i100
  %46 = phi ptr [ %56, %else.i100 ], [ %44, %if.entry ]
  %47 = phi i64 [ %57, %else.i100 ], [ %42, %if.entry ]
  %48 = phi ptr [ %60, %else.i100 ], [ %45, %if.entry ]
  %hash.0.i83 = phi i64 [ %59, %else.i100 ], [ %43, %if.entry ]
  %49 = load ptr, ptr %48, align 8
  %memberidx.i.i85 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx.i.i85, align 4
  %51 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i87 = icmp eq i64 %50, %51
  br i1 %.not.i.i87, label %ifend.i.i91, label %else.i100

ifend.i.i91:                                      ; preds = %while.entry.i88
  %memberidx2.i.i89 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i89, align 8
  %53 = load ptr, ptr %memberidx3.i.i79, align 8
  %54 = tail call i64 @memcmp(ptr %52, ptr %53, i64 %50)
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %while.end.i97, label %ifend.i.i91.else.i100_crit_edge

ifend.i.i91.else.i100_crit_edge:                  ; preds = %ifend.i.i91
  %.pre176 = load i64, ptr %memberidx.i80, align 4
  %.pre177 = load ptr, ptr %40, align 8
  br label %else.i100

while.end.i97:                                    ; preds = %ifend.i.i91
  %.pre178.pre = load ptr, ptr %40, align 8
  %ptridx9.i95.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre178.pre, i64 %hash.0.i83
  %.pre179.pre = load ptr, ptr %ptridx9.i95.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i96 = icmp eq ptr %.pre179.pre, null
  br i1 %.not29.i96, label %ifend, label %if.entry10.i103

else.i100:                                        ; preds = %ifend.i.i91.else.i100_crit_edge, %while.entry.i88
  %56 = phi ptr [ %.pre177, %ifend.i.i91.else.i100_crit_edge ], [ %46, %while.entry.i88 ]
  %57 = phi i64 [ %.pre176, %ifend.i.i91.else.i100_crit_edge ], [ %47, %while.entry.i88 ]
  %58 = add nuw i64 %hash.0.i83, 1
  %59 = urem i64 %58, %57
  %ptridx7.i98 = getelementptr inbounds ptr, ptr %56, i64 %59
  %60 = load ptr, ptr %ptridx7.i98, align 8
  %.not30.i99 = icmp eq ptr %60, null
  br i1 %.not30.i99, label %ifend, label %while.entry.i88

if.entry10.i103:                                  ; preds = %while.end.i97
  %memberidx15.i102 = getelementptr inbounds %MapEntry_string_VarId_, ptr %.pre179.pre, i64 0, i32 1
  %61 = load ptr, ptr %memberidx15.i102, align 8
  br label %ifend

ifend:                                            ; preds = %else.i100, %if.entry, %if.entry10.i103, %while.end.i97
  %value.1 = phi ptr [ %61, %if.entry10.i103 ], [ null, %while.end.i97 ], [ null, %if.entry ], [ null, %else.i100 ]
  %memberidx2 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 5
  %62 = load ptr, ptr %memberidx2, align 8
  %63 = icmp eq ptr %62, null
  %64 = icmp ne ptr %value.1, null
  %65 = or i1 %64, %63
  br i1 %65, label %while.end, label %ifend5

ifend5:                                           ; preds = %ifend
  %66 = load ptr, ptr %0, align 8
  %memberidx.i105 = getelementptr inbounds %Program, ptr %66, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i105, align 8
  %68 = load i64, ptr %62, align 4
  %memberidx.i.i106 = getelementptr inbounds %Array_Module_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i.i106, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %70, i64 0, i32 8
  %71 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %62, i64 0, i32 1
  %72 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %73, i64 %72
  br label %while.entry

if.entry10:                                       ; preds = %while.end
  %74 = load ptr, ptr %0, align 8
  %memberidx16 = getelementptr inbounds %Program, ptr %74, i64 0, i32 1
  %75 = load ptr, ptr %memberidx16, align 8
  %memberidx.i107 = getelementptr inbounds %Array_Module_, ptr %75, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i107, align 8
  %77 = load ptr, ptr %76, align 8
  %memberidx17 = getelementptr inbounds %Module, ptr %77, i64 0, i32 6
  %78 = load ptr, ptr %memberidx17, align 8
  store ptr %78, ptr %memberidx1.i, align 8
  %79 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nonnull %0, ptr %1)
  store ptr %36, ptr %memberidx1.i, align 8
  %.not = icmp eq ptr %79, null
  br i1 %.not, label %ifend12, label %if.entry19

ifend12:                                          ; preds = %Map_string_VarId____getitem__.exit, %if.entry38, %ifend36, %if.entry10, %while.end
  %value.2 = phi ptr [ %79, %if.entry38 ], [ %79, %ifend36 ], [ null, %if.entry10 ], [ %value.1, %while.end ], [ %33, %Map_string_VarId____getitem__.exit ]
  ret ptr %value.2

if.entry19:                                       ; preds = %if.entry10
  %80 = load ptr, ptr %0, align 8
  store i1 true, ptr %80, align 1
  %81 = load i64, ptr %79, align 4
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %if.entry25, label %ifend27

if.entry25:                                       ; preds = %if.entry19
  %83 = load ptr, ptr %0, align 8
  %memberidx.i.i.i112 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %84 = load i64, ptr %memberidx.i.i.i112, align 4
  %memberidx1.i.i.i.i113 = getelementptr inbounds %Program, ptr %83, i64 0, i32 1
  %85 = load ptr, ptr %memberidx1.i.i.i.i113, align 8
  %memberidx.i.i.i.i.i114 = getelementptr inbounds %Array_Module_, ptr %85, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i.i.i.i.i114, align 8
  %ptridx.i.i.i.i.i115 = getelementptr inbounds ptr, ptr %86, i64 %84
  %87 = load ptr, ptr %ptridx.i.i.i.i.i115, align 8
  %memberidx1.i.i116 = getelementptr inbounds %Module, ptr %87, i64 0, i32 6
  %88 = load ptr, ptr %memberidx1.i.i116, align 8
  %89 = load i64, ptr %88, align 4
  %ptridx.i.i.i.i119 = getelementptr inbounds ptr, ptr %86, i64 %89
  %90 = load ptr, ptr %ptridx.i.i.i.i119, align 8
  %memberidx2.i.i.i120 = getelementptr inbounds %Module, ptr %90, i64 0, i32 8
  %91 = load ptr, ptr %memberidx2.i.i.i120, align 8
  %memberidx3.i.i.i121 = getelementptr inbounds %ScopeId, ptr %88, i64 0, i32 1
  %92 = load i64, ptr %memberidx3.i.i.i121, align 4
  %memberidx.i5.i.i.i122 = getelementptr inbounds %Array_Scope_, ptr %91, i64 0, i32 1
  %93 = load ptr, ptr %memberidx.i5.i.i.i122, align 8
  %ptridx.i6.i.i.i123 = getelementptr inbounds ptr, ptr %93, i64 %92
  %94 = load ptr, ptr %ptridx.i6.i.i.i123, align 8
  %memberidx.i124 = getelementptr inbounds %Scope, ptr %94, i64 0, i32 3
  %95 = load ptr, ptr %memberidx.i124, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %95, ptr %1, ptr nonnull %79)
  %.pre180 = load i64, ptr %79, align 4
  br label %ifend27

ifend27:                                          ; preds = %if.entry19, %if.entry25
  %96 = phi i64 [ %81, %if.entry19 ], [ %.pre180, %if.entry25 ]
  %97 = add i64 %96, -1
  %98 = icmp ult i64 %97, 2
  br i1 %98, label %if.entry30, label %ifend32

if.entry30:                                       ; preds = %ifend27
  %99 = load ptr, ptr %0, align 8
  %memberidx.i.i.i125 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %100 = load i64, ptr %memberidx.i.i.i125, align 4
  %memberidx1.i.i.i.i126 = getelementptr inbounds %Program, ptr %99, i64 0, i32 1
  %101 = load ptr, ptr %memberidx1.i.i.i.i126, align 8
  %memberidx.i.i.i.i.i127 = getelementptr inbounds %Array_Module_, ptr %101, i64 0, i32 1
  %102 = load ptr, ptr %memberidx.i.i.i.i.i127, align 8
  %ptridx.i.i.i.i.i128 = getelementptr inbounds ptr, ptr %102, i64 %100
  %103 = load ptr, ptr %ptridx.i.i.i.i.i128, align 8
  %memberidx1.i.i129 = getelementptr inbounds %Module, ptr %103, i64 0, i32 6
  %104 = load ptr, ptr %memberidx1.i.i129, align 8
  %105 = load i64, ptr %104, align 4
  %ptridx.i.i.i.i132 = getelementptr inbounds ptr, ptr %102, i64 %105
  %106 = load ptr, ptr %ptridx.i.i.i.i132, align 8
  %memberidx2.i.i.i133 = getelementptr inbounds %Module, ptr %106, i64 0, i32 8
  %107 = load ptr, ptr %memberidx2.i.i.i133, align 8
  %memberidx3.i.i.i134 = getelementptr inbounds %ScopeId, ptr %104, i64 0, i32 1
  %108 = load i64, ptr %memberidx3.i.i.i134, align 4
  %memberidx.i5.i.i.i135 = getelementptr inbounds %Array_Scope_, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %memberidx.i5.i.i.i135, align 8
  %ptridx.i6.i.i.i136 = getelementptr inbounds ptr, ptr %109, i64 %108
  %110 = load ptr, ptr %ptridx.i6.i.i.i136, align 8
  %memberidx.i137 = getelementptr inbounds %Scope, ptr %110, i64 0, i32 1
  %111 = load ptr, ptr %memberidx.i137, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %111, ptr %1, ptr nonnull %79)
  %.pr = load i64, ptr %79, align 4
  br label %ifend32

ifend32:                                          ; preds = %ifend27, %if.entry30
  %112 = phi i64 [ %96, %ifend27 ], [ %.pr, %if.entry30 ]
  %113 = icmp eq i64 %112, 3
  br i1 %113, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend32
  %114 = tail call ptr @malloc(i32 24)
  %memberidx.i138 = getelementptr inbounds %VarId, ptr %79, i64 0, i32 1
  %115 = load i64, ptr %memberidx.i138, align 4
  %memberidx1.i139 = getelementptr inbounds %VarId, ptr %79, i64 0, i32 2
  %116 = load i64, ptr %memberidx1.i139, align 4
  store i64 %115, ptr %114, align 4
  %memberidx1.i.i.i140 = getelementptr inbounds %TypeId, ptr %114, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i140, align 4
  %memberidx2.i.i.i141 = getelementptr inbounds %TypeId, ptr %114, i64 0, i32 2
  store i64 %116, ptr %memberidx2.i.i.i141, align 4
  %117 = load ptr, ptr %0, align 8
  %memberidx.i.i.i142 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %118 = load i64, ptr %memberidx.i.i.i142, align 4
  %memberidx1.i.i.i.i143 = getelementptr inbounds %Program, ptr %117, i64 0, i32 1
  %119 = load ptr, ptr %memberidx1.i.i.i.i143, align 8
  %memberidx.i.i.i.i.i144 = getelementptr inbounds %Array_Module_, ptr %119, i64 0, i32 1
  %120 = load ptr, ptr %memberidx.i.i.i.i.i144, align 8
  %ptridx.i.i.i.i.i145 = getelementptr inbounds ptr, ptr %120, i64 %118
  %121 = load ptr, ptr %ptridx.i.i.i.i.i145, align 8
  %memberidx1.i.i146 = getelementptr inbounds %Module, ptr %121, i64 0, i32 6
  %122 = load ptr, ptr %memberidx1.i.i146, align 8
  %123 = load i64, ptr %122, align 4
  %ptridx.i.i.i.i149 = getelementptr inbounds ptr, ptr %120, i64 %123
  %124 = load ptr, ptr %ptridx.i.i.i.i149, align 8
  %memberidx2.i.i.i150 = getelementptr inbounds %Module, ptr %124, i64 0, i32 8
  %125 = load ptr, ptr %memberidx2.i.i.i150, align 8
  %memberidx3.i.i.i151 = getelementptr inbounds %ScopeId, ptr %122, i64 0, i32 1
  %126 = load i64, ptr %memberidx3.i.i.i151, align 4
  %memberidx.i5.i.i.i152 = getelementptr inbounds %Array_Scope_, ptr %125, i64 0, i32 1
  %127 = load ptr, ptr %memberidx.i5.i.i.i152, align 8
  %ptridx.i6.i.i.i153 = getelementptr inbounds ptr, ptr %127, i64 %126
  %128 = load ptr, ptr %ptridx.i6.i.i.i153, align 8
  %memberidx.i154 = getelementptr inbounds %Scope, ptr %128, i64 0, i32 2
  %129 = load ptr, ptr %memberidx.i154, align 8
  tail call fastcc void @Map_string_ClassId____setitem__(ptr %129, ptr %1, ptr nonnull %114)
  %memberidx1.i155 = getelementptr inbounds %Scope, ptr %128, i64 0, i32 1
  %130 = load ptr, ptr %memberidx1.i155, align 8
  %131 = tail call ptr @malloc(i32 24)
  %132 = load i64, ptr %114, align 4
  %133 = load i64, ptr %memberidx2.i.i.i141, align 4
  store i64 3, ptr %131, align 4
  %memberidx1.i.i.i157 = getelementptr inbounds %VarId, ptr %131, i64 0, i32 1
  store i64 %132, ptr %memberidx1.i.i.i157, align 4
  %memberidx2.i.i6.i158 = getelementptr inbounds %VarId, ptr %131, i64 0, i32 2
  store i64 %133, ptr %memberidx2.i.i6.i158, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %130, ptr %1, ptr nonnull %131)
  %.pre181 = load i64, ptr %79, align 4
  br label %ifend36

ifend36:                                          ; preds = %ifend32, %if.entry34
  %134 = phi i64 [ %112, %ifend32 ], [ %.pre181, %if.entry34 ]
  %135 = icmp eq i64 %134, 4
  br i1 %135, label %if.entry38, label %ifend12

if.entry38:                                       ; preds = %ifend36
  %136 = tail call ptr @malloc(i32 24)
  %memberidx.i159 = getelementptr inbounds %VarId, ptr %79, i64 0, i32 1
  %137 = load i64, ptr %memberidx.i159, align 4
  %memberidx1.i160 = getelementptr inbounds %VarId, ptr %79, i64 0, i32 2
  %138 = load i64, ptr %memberidx1.i160, align 4
  store i64 %137, ptr %136, align 4
  %memberidx1.i.i.i161 = getelementptr inbounds %TypeId, ptr %136, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i.i161, align 4
  %memberidx2.i.i.i162 = getelementptr inbounds %TypeId, ptr %136, i64 0, i32 2
  store i64 %138, ptr %memberidx2.i.i.i162, align 4
  %139 = load ptr, ptr %0, align 8
  %memberidx.i.i.i108 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %140 = load i64, ptr %memberidx.i.i.i108, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %139, i64 0, i32 1
  %141 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %141, i64 0, i32 1
  %142 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %142, i64 %140
  %143 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx1.i.i109 = getelementptr inbounds %Module, ptr %143, i64 0, i32 6
  %144 = load ptr, ptr %memberidx1.i.i109, align 8
  %145 = load i64, ptr %144, align 4
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %142, i64 %145
  %146 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %146, i64 0, i32 8
  %147 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ScopeId, ptr %144, i64 0, i32 1
  %148 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Scope_, ptr %147, i64 0, i32 1
  %149 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %149, i64 %148
  %150 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i110 = getelementptr inbounds %Scope, ptr %150, i64 0, i32 4
  %151 = load ptr, ptr %memberidx.i110, align 8
  tail call fastcc void @Map_string_EnumId____setitem__(ptr %151, ptr %1, ptr nonnull %136)
  %memberidx1.i111 = getelementptr inbounds %Scope, ptr %150, i64 0, i32 1
  %152 = load ptr, ptr %memberidx1.i111, align 8
  %153 = tail call ptr @malloc(i32 24)
  %154 = load i64, ptr %136, align 4
  %155 = load i64, ptr %memberidx2.i.i.i162, align 4
  store i64 4, ptr %153, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %153, i64 0, i32 1
  store i64 %154, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i6.i = getelementptr inbounds %VarId, ptr %153, i64 0, i32 2
  store i64 %155, ptr %memberidx2.i.i6.i, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %152, ptr %1, ptr nonnull %153)
  br label %ifend12
}

define internal fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 8
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %4, i64 0, i32 1
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %memberidx1.i.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i63 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %ifend12, %2
  %current_scope.0.in = phi ptr [ %ptridx.i6.i.i, %2 ], [ %ptridx.i6.i, %ifend12 ]
  %current_scope.0 = load ptr, ptr %current_scope.0.in, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 6
  %12 = load ptr, ptr %memberidx, align 8
  %13 = tail call fastcc i64 @Map_string_Type__hash_fnc(ptr %1)
  %memberidx.i = getelementptr inbounds %Map_string_Type_, ptr %12, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i, align 4
  %15 = urem i64 %13, %14
  %16 = load ptr, ptr %12, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %17, null
  br i1 %.not.i, label %ifend, label %while.entry.i

while.entry.i:                                    ; preds = %while.entry, %else.i
  %18 = phi ptr [ %28, %else.i ], [ %16, %while.entry ]
  %19 = phi i64 [ %29, %else.i ], [ %14, %while.entry ]
  %20 = phi ptr [ %32, %else.i ], [ %17, %while.entry ]
  %hash.0.i = phi i64 [ %31, %else.i ], [ %15, %while.entry ]
  %21 = load ptr, ptr %20, align 8
  %memberidx.i.i61 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx.i.i61, align 4
  %23 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %22, %23
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i62 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  %24 = load ptr, ptr %memberidx2.i.i62, align 8
  %25 = load ptr, ptr %memberidx3.i.i63, align 8
  %26 = tail call i64 @memcmp(ptr %24, ptr %25, i64 %22)
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre154 = load ptr, ptr %12, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre155.pre = load ptr, ptr %12, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre155.pre, i64 %hash.0.i
  %.pre156.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre156.pre, null
  br i1 %.not29.i, label %ifend, label %Map_string_Type____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %28 = phi ptr [ %.pre154, %ifend.i.i.else.i_crit_edge ], [ %18, %while.entry.i ]
  %29 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %19, %while.entry.i ]
  %30 = add nuw i64 %hash.0.i, 1
  %31 = urem i64 %30, %29
  %ptridx7.i = getelementptr inbounds ptr, ptr %28, i64 %31
  %32 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %32, null
  br i1 %.not30.i, label %ifend, label %while.entry.i

Map_string_Type____getitem__.exit:                ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_Type_, ptr %.pre156.pre, i64 0, i32 1
  %33 = load ptr, ptr %memberidx15.i, align 8
  %.not = icmp eq ptr %33, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %Map_string_Type____getitem__.exit, %ifend28, %ifend19, %if.entry6, %if.entry2
  %common.ret.op = phi ptr [ %56, %if.entry2 ], [ %79, %if.entry6 ], [ %99, %ifend19 ], [ %97, %ifend28 ], [ %33, %Map_string_Type____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else.i, %while.entry, %while.end.i, %Map_string_Type____getitem__.exit
  %memberidx1 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 2
  %34 = load ptr, ptr %memberidx1, align 8
  %35 = tail call fastcc i64 @Map_string_ClassId__hash_fnc(ptr %1)
  %memberidx.i64 = getelementptr inbounds %Map_string_ClassId_, ptr %34, i64 0, i32 1
  %36 = load i64, ptr %memberidx.i64, align 4
  %37 = urem i64 %35, %36
  %38 = load ptr, ptr %34, align 8
  %ptridx.i65 = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i65, align 8
  %.not.i66 = icmp eq ptr %39, null
  br i1 %.not.i66, label %ifend4, label %while.entry.i72

while.entry.i72:                                  ; preds = %ifend, %else.i84
  %40 = phi ptr [ %50, %else.i84 ], [ %38, %ifend ]
  %41 = phi i64 [ %51, %else.i84 ], [ %36, %ifend ]
  %42 = phi ptr [ %54, %else.i84 ], [ %39, %ifend ]
  %hash.0.i67 = phi i64 [ %53, %else.i84 ], [ %37, %ifend ]
  %43 = load ptr, ptr %42, align 8
  %memberidx.i.i69 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx.i.i69, align 4
  %45 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i71 = icmp eq i64 %44, %45
  br i1 %.not.i.i71, label %ifend.i.i75, label %else.i84

ifend.i.i75:                                      ; preds = %while.entry.i72
  %memberidx2.i.i73 = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i73, align 8
  %47 = load ptr, ptr %memberidx3.i.i63, align 8
  %48 = tail call i64 @memcmp(ptr %46, ptr %47, i64 %44)
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %while.end.i81, label %ifend.i.i75.else.i84_crit_edge

ifend.i.i75.else.i84_crit_edge:                   ; preds = %ifend.i.i75
  %.pre157 = load i64, ptr %memberidx.i64, align 4
  %.pre158 = load ptr, ptr %34, align 8
  br label %else.i84

while.end.i81:                                    ; preds = %ifend.i.i75
  %.pre159.pre = load ptr, ptr %34, align 8
  %ptridx9.i79.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre159.pre, i64 %hash.0.i67
  %.pre160.pre = load ptr, ptr %ptridx9.i79.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i80 = icmp eq ptr %.pre160.pre, null
  br i1 %.not29.i80, label %ifend4, label %Map_string_ClassId____getitem__.exit

else.i84:                                         ; preds = %ifend.i.i75.else.i84_crit_edge, %while.entry.i72
  %50 = phi ptr [ %.pre158, %ifend.i.i75.else.i84_crit_edge ], [ %40, %while.entry.i72 ]
  %51 = phi i64 [ %.pre157, %ifend.i.i75.else.i84_crit_edge ], [ %41, %while.entry.i72 ]
  %52 = add nuw i64 %hash.0.i67, 1
  %53 = urem i64 %52, %51
  %ptridx7.i82 = getelementptr inbounds ptr, ptr %50, i64 %53
  %54 = load ptr, ptr %ptridx7.i82, align 8
  %.not30.i83 = icmp eq ptr %54, null
  br i1 %.not30.i83, label %ifend4, label %while.entry.i72

Map_string_ClassId____getitem__.exit:             ; preds = %while.end.i81
  %memberidx15.i86 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %.pre160.pre, i64 0, i32 1
  %55 = load ptr, ptr %memberidx15.i86, align 8
  %.not57 = icmp eq ptr %55, null
  br i1 %.not57, label %ifend4, label %if.entry2

if.entry2:                                        ; preds = %Map_string_ClassId____getitem__.exit
  %56 = tail call ptr @malloc(i32 16)
  store i64 11, ptr %56, align 4
  %memberidx.i88 = getelementptr inbounds %ObjectType, ptr %56, i64 0, i32 1
  store ptr %55, ptr %memberidx.i88, align 8
  br label %common.ret

ifend4:                                           ; preds = %else.i84, %ifend, %while.end.i81, %Map_string_ClassId____getitem__.exit
  %memberidx5 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 4
  %57 = load ptr, ptr %memberidx5, align 8
  %58 = tail call fastcc i64 @Map_string_EnumId__hash_fnc(ptr %1)
  %memberidx.i89 = getelementptr inbounds %Map_string_EnumId_, ptr %57, i64 0, i32 1
  %59 = load i64, ptr %memberidx.i89, align 4
  %60 = urem i64 %58, %59
  %61 = load ptr, ptr %57, align 8
  %ptridx.i90 = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i90, align 8
  %.not.i91 = icmp eq ptr %62, null
  br i1 %.not.i91, label %ifend8, label %while.entry.i97

while.entry.i97:                                  ; preds = %ifend4, %else.i109
  %63 = phi ptr [ %73, %else.i109 ], [ %61, %ifend4 ]
  %64 = phi i64 [ %74, %else.i109 ], [ %59, %ifend4 ]
  %65 = phi ptr [ %77, %else.i109 ], [ %62, %ifend4 ]
  %hash.0.i92 = phi i64 [ %76, %else.i109 ], [ %60, %ifend4 ]
  %66 = load ptr, ptr %65, align 8
  %memberidx.i.i94 = getelementptr inbounds %string, ptr %66, i64 0, i32 2
  %67 = load i64, ptr %memberidx.i.i94, align 4
  %68 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i96 = icmp eq i64 %67, %68
  br i1 %.not.i.i96, label %ifend.i.i100, label %else.i109

ifend.i.i100:                                     ; preds = %while.entry.i97
  %memberidx2.i.i98 = getelementptr inbounds %string, ptr %66, i64 0, i32 1
  %69 = load ptr, ptr %memberidx2.i.i98, align 8
  %70 = load ptr, ptr %memberidx3.i.i63, align 8
  %71 = tail call i64 @memcmp(ptr %69, ptr %70, i64 %67)
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %while.end.i106, label %ifend.i.i100.else.i109_crit_edge

ifend.i.i100.else.i109_crit_edge:                 ; preds = %ifend.i.i100
  %.pre161 = load i64, ptr %memberidx.i89, align 4
  %.pre162 = load ptr, ptr %57, align 8
  br label %else.i109

while.end.i106:                                   ; preds = %ifend.i.i100
  %.pre163.pre = load ptr, ptr %57, align 8
  %ptridx9.i104.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre163.pre, i64 %hash.0.i92
  %.pre164.pre = load ptr, ptr %ptridx9.i104.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i105 = icmp eq ptr %.pre164.pre, null
  br i1 %.not29.i105, label %ifend8, label %Map_string_EnumId____getitem__.exit

else.i109:                                        ; preds = %ifend.i.i100.else.i109_crit_edge, %while.entry.i97
  %73 = phi ptr [ %.pre162, %ifend.i.i100.else.i109_crit_edge ], [ %63, %while.entry.i97 ]
  %74 = phi i64 [ %.pre161, %ifend.i.i100.else.i109_crit_edge ], [ %64, %while.entry.i97 ]
  %75 = add nuw i64 %hash.0.i92, 1
  %76 = urem i64 %75, %74
  %ptridx7.i107 = getelementptr inbounds ptr, ptr %73, i64 %76
  %77 = load ptr, ptr %ptridx7.i107, align 8
  %.not30.i108 = icmp eq ptr %77, null
  br i1 %.not30.i108, label %ifend8, label %while.entry.i97

Map_string_EnumId____getitem__.exit:              ; preds = %while.end.i106
  %memberidx15.i111 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %.pre164.pre, i64 0, i32 1
  %78 = load ptr, ptr %memberidx15.i111, align 8
  %.not58 = icmp eq ptr %78, null
  br i1 %.not58, label %ifend8, label %if.entry6

if.entry6:                                        ; preds = %Map_string_EnumId____getitem__.exit
  %79 = tail call ptr @malloc(i32 16)
  store i64 12, ptr %79, align 4
  %memberidx.i113 = getelementptr inbounds %EnumType, ptr %79, i64 0, i32 1
  store ptr %78, ptr %memberidx.i113, align 8
  br label %common.ret

ifend8:                                           ; preds = %else.i109, %ifend4, %while.end.i106, %Map_string_EnumId____getitem__.exit
  %memberidx9 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 5
  %80 = load ptr, ptr %memberidx9, align 8
  %81 = icmp eq ptr %80, null
  br i1 %81, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %82 = load ptr, ptr %memberidx1.i, align 8
  %83 = load i64, ptr %82, align 4
  %.not59 = icmp eq i64 %83, 0
  br i1 %.not59, label %ifend19, label %if.entry17

ifend12:                                          ; preds = %ifend8
  %84 = load ptr, ptr %0, align 8
  %memberidx.i114 = getelementptr inbounds %Program, ptr %84, i64 0, i32 1
  %85 = load ptr, ptr %memberidx.i114, align 8
  %86 = load i64, ptr %80, align 4
  %memberidx.i.i115 = getelementptr inbounds %Array_Module_, ptr %85, i64 0, i32 1
  %87 = load ptr, ptr %memberidx.i.i115, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %87, i64 %86
  %88 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %88, i64 0, i32 8
  %89 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %80, i64 0, i32 1
  %90 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %89, i64 0, i32 1
  %91 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %91, i64 %90
  br label %while.entry

if.entry17:                                       ; preds = %if.entry10
  %92 = load ptr, ptr %0, align 8
  %memberidx23 = getelementptr inbounds %Program, ptr %92, i64 0, i32 1
  %93 = load ptr, ptr %memberidx23, align 8
  %memberidx.i116 = getelementptr inbounds %Array_Module_, ptr %93, i64 0, i32 1
  %94 = load ptr, ptr %memberidx.i116, align 8
  %95 = load ptr, ptr %94, align 8
  %memberidx24 = getelementptr inbounds %Module, ptr %95, i64 0, i32 6
  %96 = load ptr, ptr %memberidx24, align 8
  store ptr %96, ptr %memberidx1.i, align 8
  %97 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %1)
  %98 = load i64, ptr %97, align 4
  %.not60 = icmp eq i64 %98, 20
  br i1 %.not60, label %ifend28, label %if.entry26

ifend19:                                          ; preds = %if.entry10
  %99 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %99, align 4
  br label %common.ret

if.entry26:                                       ; preds = %if.entry17
  %100 = load ptr, ptr %0, align 8
  store i1 true, ptr %100, align 1
  %101 = load i64, ptr %97, align 4
  %102 = icmp eq i64 %101, 11
  br i1 %102, label %if.entry32, label %else33

ifend28:                                          ; preds = %if.entry32, %else33, %if.entry17
  store ptr %82, ptr %memberidx1.i, align 8
  br label %common.ret

if.entry32:                                       ; preds = %if.entry26
  %memberidx35 = getelementptr inbounds %ObjectType, ptr %97, i64 0, i32 1
  %103 = load ptr, ptr %memberidx35, align 8
  %104 = load ptr, ptr %0, align 8
  %memberidx.i.i.i117 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %105 = load i64, ptr %memberidx.i.i.i117, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %104, i64 0, i32 1
  %106 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %106, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %107, i64 %105
  %108 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx1.i.i118 = getelementptr inbounds %Module, ptr %108, i64 0, i32 6
  %109 = load ptr, ptr %memberidx1.i.i118, align 8
  %110 = load i64, ptr %109, align 4
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %107, i64 %110
  %111 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %111, i64 0, i32 8
  %112 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ScopeId, ptr %109, i64 0, i32 1
  %113 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Scope_, ptr %112, i64 0, i32 1
  %114 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %114, i64 %113
  %115 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i119 = getelementptr inbounds %Scope, ptr %115, i64 0, i32 2
  %116 = load ptr, ptr %memberidx.i119, align 8
  tail call fastcc void @Map_string_ClassId____setitem__(ptr %116, ptr %1, ptr %103)
  %memberidx1.i120 = getelementptr inbounds %Scope, ptr %115, i64 0, i32 1
  %117 = load ptr, ptr %memberidx1.i120, align 8
  %118 = tail call ptr @malloc(i32 24)
  %119 = load i64, ptr %103, align 4
  %memberidx1.i5.i = getelementptr inbounds %TypeId, ptr %103, i64 0, i32 2
  %120 = load i64, ptr %memberidx1.i5.i, align 4
  store i64 3, ptr %118, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %118, i64 0, i32 1
  store i64 %119, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i6.i = getelementptr inbounds %VarId, ptr %118, i64 0, i32 2
  store i64 %120, ptr %memberidx2.i.i6.i, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %117, ptr %1, ptr nonnull %118)
  br label %ifend28

else33:                                           ; preds = %if.entry26
  %memberidx36 = getelementptr inbounds %EnumType, ptr %97, i64 0, i32 1
  %121 = load ptr, ptr %memberidx36, align 8
  %122 = load ptr, ptr %0, align 8
  %memberidx.i.i.i121 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %123 = load i64, ptr %memberidx.i.i.i121, align 4
  %memberidx1.i.i.i.i122 = getelementptr inbounds %Program, ptr %122, i64 0, i32 1
  %124 = load ptr, ptr %memberidx1.i.i.i.i122, align 8
  %memberidx.i.i.i.i.i123 = getelementptr inbounds %Array_Module_, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx.i.i.i.i.i123, align 8
  %ptridx.i.i.i.i.i124 = getelementptr inbounds ptr, ptr %125, i64 %123
  %126 = load ptr, ptr %ptridx.i.i.i.i.i124, align 8
  %memberidx1.i.i125 = getelementptr inbounds %Module, ptr %126, i64 0, i32 6
  %127 = load ptr, ptr %memberidx1.i.i125, align 8
  %128 = load i64, ptr %127, align 4
  %ptridx.i.i.i.i128 = getelementptr inbounds ptr, ptr %125, i64 %128
  %129 = load ptr, ptr %ptridx.i.i.i.i128, align 8
  %memberidx2.i.i.i129 = getelementptr inbounds %Module, ptr %129, i64 0, i32 8
  %130 = load ptr, ptr %memberidx2.i.i.i129, align 8
  %memberidx3.i.i.i130 = getelementptr inbounds %ScopeId, ptr %127, i64 0, i32 1
  %131 = load i64, ptr %memberidx3.i.i.i130, align 4
  %memberidx.i5.i.i.i131 = getelementptr inbounds %Array_Scope_, ptr %130, i64 0, i32 1
  %132 = load ptr, ptr %memberidx.i5.i.i.i131, align 8
  %ptridx.i6.i.i.i132 = getelementptr inbounds ptr, ptr %132, i64 %131
  %133 = load ptr, ptr %ptridx.i6.i.i.i132, align 8
  %memberidx.i133 = getelementptr inbounds %Scope, ptr %133, i64 0, i32 4
  %134 = load ptr, ptr %memberidx.i133, align 8
  tail call fastcc void @Map_string_EnumId____setitem__(ptr %134, ptr %1, ptr %121)
  %memberidx1.i134 = getelementptr inbounds %Scope, ptr %133, i64 0, i32 1
  %135 = load ptr, ptr %memberidx1.i134, align 8
  %136 = tail call ptr @malloc(i32 24)
  %137 = load i64, ptr %121, align 4
  %memberidx1.i5.i135 = getelementptr inbounds %TypeId, ptr %121, i64 0, i32 2
  %138 = load i64, ptr %memberidx1.i5.i135, align 4
  store i64 4, ptr %136, align 4
  %memberidx1.i.i.i136 = getelementptr inbounds %VarId, ptr %136, i64 0, i32 1
  store i64 %137, ptr %memberidx1.i.i.i136, align 4
  %memberidx2.i.i6.i137 = getelementptr inbounds %VarId, ptr %136, i64 0, i32 2
  store i64 %138, ptr %memberidx2.i.i6.i137, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %135, ptr %1, ptr nonnull %136)
  br label %ifend28
}

define internal fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nocapture readonly %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %5 = tail call ptr @malloc(i32 24)
  %memberidx.i = getelementptr inbounds %Var, ptr %5, i64 0, i32 2
  store ptr %2, ptr %memberidx.i, align 8
  store ptr %3, ptr %5, align 8
  %memberidx.i12 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx.i12, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %8, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %6
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx1.i14 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %memberidx1.i14, align 8
  %12 = load i64, ptr %11, align 4
  %ptridx.i.i.i17 = getelementptr inbounds ptr, ptr %9, i64 %12
  %13 = load ptr, ptr %ptridx.i.i.i17, align 8
  %memberidx2.i.i18 = getelementptr inbounds %Module, ptr %13, i64 0, i32 8
  %14 = load ptr, ptr %memberidx2.i.i18, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  %15 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i6.i.i, align 8
  %18 = tail call ptr @malloc(i32 24)
  %19 = load i64, ptr %memberidx.i12, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %10, i64 0, i32 2
  %20 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2, align 4
  store i64 1, ptr %18, align 4
  %memberidx1.i19 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 1
  store i64 %19, ptr %memberidx1.i19, align 4
  %memberidx2.i = getelementptr inbounds %VarId, ptr %18, i64 0, i32 2
  store i64 %21, ptr %memberidx2.i, align 4
  %memberidx3 = getelementptr inbounds %Var, ptr %5, i64 0, i32 1
  store ptr %18, ptr %memberidx3, align 8
  %22 = load ptr, ptr %memberidx1, align 8
  %memberidx.i13 = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx.i13, align 4
  %memberidx1.i = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 3
  %24 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %23, %24
  br i1 %.not.i, label %.Array_Var____sl__.exit_crit_edge, label %if.entry.i

.Array_Var____sl__.exit_crit_edge:                ; preds = %4
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 1
  %.pre20 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Var____sl__.exit

if.entry.i:                                       ; preds = %4
  %25 = shl nuw i64 %24, 1
  store i64 %25, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i.i, align 8
  %27 = shl i64 %24, 4
  %28 = tail call ptr @realloc(ptr %26, i64 %27)
  store ptr %28, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i13, align 4
  br label %Array_Var____sl__.exit

Array_Var____sl__.exit:                           ; preds = %.Array_Var____sl__.exit_crit_edge, %if.entry.i
  %29 = phi ptr [ %.pre20, %.Array_Var____sl__.exit_crit_edge ], [ %28, %if.entry.i ]
  %30 = phi i64 [ %23, %.Array_Var____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %31 = add nsw i64 %30, 1
  store i64 %31, ptr %memberidx.i13, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %29, i64 %30
  store ptr %5, ptr %ptridx.i, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %17, i64 0, i32 1
  %32 = load ptr, ptr %memberidx5, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %32, ptr %1, ptr nonnull %18)
  ret ptr %5
}

define internal fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nocapture readonly %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %5 = tail call ptr @malloc(i32 24)
  %memberidx.i = getelementptr inbounds %Const, ptr %5, i64 0, i32 2
  store ptr %2, ptr %memberidx.i, align 8
  store ptr %3, ptr %5, align 8
  %memberidx.i12 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx.i12, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %8, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %6
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx1.i14 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %memberidx1.i14, align 8
  %12 = load i64, ptr %11, align 4
  %ptridx.i.i.i17 = getelementptr inbounds ptr, ptr %9, i64 %12
  %13 = load ptr, ptr %ptridx.i.i.i17, align 8
  %memberidx2.i.i18 = getelementptr inbounds %Module, ptr %13, i64 0, i32 8
  %14 = load ptr, ptr %memberidx2.i.i18, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  %15 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i6.i.i, align 8
  %18 = tail call ptr @malloc(i32 24)
  %19 = load i64, ptr %memberidx.i12, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %10, i64 0, i32 3
  %20 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2, align 4
  store i64 2, ptr %18, align 4
  %memberidx1.i.i19 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 1
  store i64 %19, ptr %memberidx1.i.i19, align 4
  %memberidx2.i.i20 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 2
  store i64 %21, ptr %memberidx2.i.i20, align 4
  %memberidx3 = getelementptr inbounds %Const, ptr %5, i64 0, i32 1
  store ptr %18, ptr %memberidx3, align 8
  %22 = load ptr, ptr %memberidx1, align 8
  %memberidx.i13 = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx.i13, align 4
  %memberidx1.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 3
  %24 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %23, %24
  br i1 %.not.i, label %.Array_Const____sl__.exit_crit_edge, label %if.entry.i

.Array_Const____sl__.exit_crit_edge:              ; preds = %4
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 1
  %.pre21 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Const____sl__.exit

if.entry.i:                                       ; preds = %4
  %25 = shl nuw i64 %24, 1
  store i64 %25, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i.i, align 8
  %27 = shl i64 %24, 4
  %28 = tail call ptr @realloc(ptr %26, i64 %27)
  store ptr %28, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i13, align 4
  br label %Array_Const____sl__.exit

Array_Const____sl__.exit:                         ; preds = %.Array_Const____sl__.exit_crit_edge, %if.entry.i
  %29 = phi ptr [ %.pre21, %.Array_Const____sl__.exit_crit_edge ], [ %28, %if.entry.i ]
  %30 = phi i64 [ %23, %.Array_Const____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %31 = add nsw i64 %30, 1
  store i64 %31, ptr %memberidx.i13, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %29, i64 %30
  store ptr %5, ptr %ptridx.i, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %17, i64 0, i32 1
  %32 = load ptr, ptr %memberidx5, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %32, ptr %1, ptr nonnull %18)
  ret ptr %5
}

define internal fastcc ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %0, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i142, %3
  %.tr11.i.in = phi ptr [ %memberidx2, %3 ], [ %memberidx1.i141, %if.entry.i142 ]
  %.tr11.i = load ptr, ptr %.tr11.i.in, align 8
  %6 = load i64, ptr %.tr11.i, align 4
  switch i64 %6, label %get_class_from_type.exit [
    i64 19, label %if.entry.i142
    i64 11, label %if.entry3.i
  ]

if.entry.i142:                                    ; preds = %tailrecurse.i
  %memberidx1.i141 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i143 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %7 = load ptr, ptr %memberidx6.i143, align 8
  %memberidx.i.i144 = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i.i144, align 8
  %9 = load i64, ptr %7, align 4
  %memberidx.i.i.i145 = getelementptr inbounds %Array_Module_, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i.i145, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i146 = getelementptr inbounds %Module, ptr %11, i64 0, i32 4
  %12 = load ptr, ptr %memberidx2.i.i146, align 8
  %memberidx3.i.i147 = getelementptr inbounds %TypeId, ptr %7, i64 0, i32 2
  %13 = load i64, ptr %memberidx3.i.i147, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i140 = phi ptr [ %15, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx3 = getelementptr inbounds %Class, ptr %common.ret.op.i140, i64 0, i32 6
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = tail call ptr @malloc(i32 11)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %17, ptr noundef nonnull align 8 dereferenceable(11) @108, i64 11, i1 false)
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %18, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  store ptr %17, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %18, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i, align 4
  %19 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %18)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %16, i64 0, i32 1
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = urem i64 %19, %20
  %22 = load ptr, ptr %16, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %22, i64 %21
  %23 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %23, null
  br i1 %.not.i, label %if.entry, label %while.entry.i

while.entry.i:                                    ; preds = %get_class_from_type.exit, %else.i
  %24 = phi ptr [ %34, %else.i ], [ %22, %get_class_from_type.exit ]
  %25 = phi i64 [ %35, %else.i ], [ %20, %get_class_from_type.exit ]
  %26 = phi ptr [ %38, %else.i ], [ %23, %get_class_from_type.exit ]
  %hash.0.i = phi i64 [ %37, %else.i ], [ %21, %get_class_from_type.exit ]
  %27 = load ptr, ptr %26, align 8
  %memberidx.i.i65 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx.i.i65, align 4
  %29 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %28, %29
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i67 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  %30 = load ptr, ptr %memberidx2.i.i67, align 8
  %31 = load ptr, ptr %memberidx.i.i, align 8
  %32 = tail call i64 @memcmp(ptr %30, ptr %31, i64 %28)
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre151 = load ptr, ptr %16, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre152.pre = load ptr, ptr %16, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre152.pre, i64 %hash.0.i
  %.pre153.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre153.pre, null
  br i1 %.not29.i, label %if.entry, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %34 = phi ptr [ %.pre151, %ifend.i.i.else.i_crit_edge ], [ %24, %while.entry.i ]
  %35 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %25, %while.entry.i ]
  %36 = add nuw i64 %hash.0.i, 1
  %37 = urem i64 %36, %35
  %ptridx7.i = getelementptr inbounds ptr, ptr %34, i64 %37
  %38 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %38, null
  br i1 %.not30.i, label %if.entry, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre153.pre, i64 0, i32 1
  %39 = load ptr, ptr %memberidx15.i, align 8
  %40 = icmp eq ptr %39, null
  br i1 %40, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend20, %ifend12, %get_class_prop_type.exit, %ifend33, %TypeChecker_error.exit125, %TypeChecker_error.exit106, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit106 ], [ null, %TypeChecker_error.exit125 ], [ %164, %ifend33 ], [ null, %get_class_prop_type.exit ], [ null, %ifend12 ], [ null, %ifend20 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %else.i, %get_class_from_type.exit, %while.end.i, %Map_string_PropId____getitem__.exit
  %memberidx4 = getelementptr inbounds %Class, ptr %common.ret.op.i140, i64 0, i32 1
  %41 = load ptr, ptr %memberidx4, align 8
  %42 = load ptr, ptr %41, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 5
  %43 = load ptr, ptr %memberidx5, align 8
  %44 = tail call ptr %43(ptr nonnull %41)
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %45, ptr nonnull @166, ptr %44)
  %47 = load ptr, ptr %45, align 8
  %48 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i68 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i68, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 %46, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 %46, ptr %memberidx2.i, align 4
  tail call void @free(ptr %44)
  %49 = load ptr, ptr %4, align 8
  %memberidx.i69 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %50 = load ptr, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %Compiler, ptr %50, i64 0, i32 6
  %51 = load ptr, ptr %memberidx1.i70, align 8
  %52 = call ptr @malloc(i32 24)
  store i64 4, ptr %52, align 4
  %memberidx1.i.i71 = getelementptr inbounds %FloError, ptr %52, i64 0, i32 2
  store ptr %49, ptr %memberidx1.i.i71, align 8
  %memberidx2.i.i72 = getelementptr inbounds %FloError, ptr %52, i64 0, i32 1
  store ptr %48, ptr %memberidx2.i.i72, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 2
  %53 = load i64, ptr %memberidx.i.i73, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 3
  %54 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i74 = icmp slt i64 %53, %54
  br i1 %.not.i.i74, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 1
  %.pre159 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %55 = shl nuw i64 %54, 1
  store i64 %55, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 1
  %56 = load ptr, ptr %memberidx2.i.i.i, align 8
  %57 = shl i64 %54, 4
  %58 = call ptr @realloc(ptr %56, i64 %57)
  store ptr %58, ptr %memberidx2.i.i.i, align 8
  %.pre158 = load i64, ptr %memberidx.i.i73, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %59 = phi ptr [ %.pre159, %if.entry.TypeChecker_error.exit_crit_edge ], [ %58, %if.entry.i.i ]
  %60 = phi i64 [ %53, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre158, %if.entry.i.i ]
  %61 = add nsw i64 %60, 1
  store i64 %61, ptr %memberidx.i.i73, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %60
  store ptr %52, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %62 = load ptr, ptr %0, align 8
  %memberidx.i.i75 = getelementptr inbounds %PropId, ptr %39, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i.i75, align 8
  %memberidx.i.i.i76 = getelementptr inbounds %Program, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i.i.i76, align 8
  %65 = load i64, ptr %63, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i77 = getelementptr inbounds %Module, ptr %67, i64 0, i32 4
  %68 = load ptr, ptr %memberidx2.i.i.i77, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %63, i64 0, i32 2
  %69 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %68, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %70, i64 %69
  %71 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %72 = load i64, ptr %39, align 4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i79 = getelementptr inbounds %Class, ptr %71, i64 0, i32 5
  %74 = load ptr, ptr %memberidx1.i79, align 8
  %memberidx2.i80 = getelementptr inbounds %PropId, ptr %39, i64 0, i32 2
  %75 = load i64, ptr %memberidx2.i80, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %76, i64 %75
  %77 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %77, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %71, i64 0, i32 4
  %78 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %39, i64 0, i32 2
  %79 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %78, i64 0, i32 1
  %80 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i81 = getelementptr inbounds ptr, ptr %80, i64 %79
  %81 = load ptr, ptr %ptridx.i.i81, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %81, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i78 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx8 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i78, i64 0, i32 1
  %82 = load ptr, ptr %memberidx8, align 8
  %memberidx.i82 = getelementptr inbounds %Array_Type_, ptr %82, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i82, align 8
  %84 = load ptr, ptr %83, align 8
  %ptridx.i84 = getelementptr inbounds ptr, ptr %83, i64 1
  %85 = load ptr, ptr %ptridx.i84, align 8
  %memberidx.i85 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %86 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i86 = getelementptr inbounds %Compiler, ptr %86, i64 0, i32 6
  %87 = load ptr, ptr %memberidx1.i86, align 8
  %memberidx2.i87 = getelementptr inbounds %Array_FloError_, ptr %87, i64 0, i32 2
  %88 = load i64, ptr %memberidx2.i87, align 4
  %89 = icmp sgt i64 %88, 0
  br i1 %89, label %common.ret, label %ifend12

ifend12:                                          ; preds = %get_class_prop_type.exit
  %memberidx13 = getelementptr inbounds %ExpressionIndexNode, ptr %4, i64 0, i32 4
  %90 = load ptr, ptr %memberidx13, align 8
  %91 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %84, ptr %90)
  %92 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i89 = getelementptr inbounds %Compiler, ptr %92, i64 0, i32 6
  %93 = load ptr, ptr %memberidx1.i89, align 8
  %memberidx2.i90 = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 2
  %94 = load i64, ptr %memberidx2.i90, align 4
  %95 = icmp sgt i64 %94, 0
  br i1 %95, label %common.ret, label %ifend16

ifend16:                                          ; preds = %ifend12
  %memberidx17 = getelementptr inbounds %Expression, ptr %91, i64 0, i32 3
  %96 = load ptr, ptr %memberidx17, align 8
  %97 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %84, ptr %96)
  br i1 %97, label %ifend20, label %if.entry18

if.entry18:                                       ; preds = %ifend16
  %98 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %84)
  %99 = load ptr, ptr %98, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %99, i64 0, i32 5
  %100 = load ptr, ptr %memberidx21, align 8
  %101 = tail call ptr %100(ptr nonnull %98)
  %102 = load ptr, ptr %memberidx17, align 8
  %103 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %102)
  %104 = load ptr, ptr %103, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %104, i64 0, i32 5
  %105 = load ptr, ptr %memberidx23, align 8
  %106 = tail call ptr %105(ptr nonnull %103)
  %107 = alloca ptr, align 8
  %108 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %107, ptr nonnull @163, ptr %101, ptr %106)
  %109 = load ptr, ptr %107, align 8
  %110 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %110, align 8
  %memberidx.i91 = getelementptr inbounds %string, ptr %110, i64 0, i32 1
  store ptr %109, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %string, ptr %110, i64 0, i32 2
  store i64 %108, ptr %memberidx1.i92, align 4
  %memberidx2.i93 = getelementptr inbounds %string, ptr %110, i64 0, i32 3
  store i64 %108, ptr %memberidx2.i93, align 4
  tail call void @free(ptr %101)
  tail call void @free(ptr %106)
  %111 = load ptr, ptr %memberidx13, align 8
  %112 = load ptr, ptr %111, align 8
  %113 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i95 = getelementptr inbounds %Compiler, ptr %113, i64 0, i32 6
  %114 = load ptr, ptr %memberidx1.i95, align 8
  %115 = call ptr @malloc(i32 24)
  store i64 5, ptr %115, align 4
  %memberidx1.i.i96 = getelementptr inbounds %FloError, ptr %115, i64 0, i32 2
  store ptr %112, ptr %memberidx1.i.i96, align 8
  %memberidx2.i.i97 = getelementptr inbounds %FloError, ptr %115, i64 0, i32 1
  store ptr %110, ptr %memberidx2.i.i97, align 8
  %memberidx.i.i98 = getelementptr inbounds %Array_FloError_, ptr %114, i64 0, i32 2
  %116 = load i64, ptr %memberidx.i.i98, align 4
  %memberidx1.i2.i99 = getelementptr inbounds %Array_FloError_, ptr %114, i64 0, i32 3
  %117 = load i64, ptr %memberidx1.i2.i99, align 4
  %.not.i.i100 = icmp slt i64 %116, %117
  br i1 %.not.i.i100, label %if.entry18.TypeChecker_error.exit106_crit_edge, label %if.entry.i.i103

if.entry18.TypeChecker_error.exit106_crit_edge:   ; preds = %if.entry18
  %memberidx4.i.i104.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %114, i64 0, i32 1
  %.pre155 = load ptr, ptr %memberidx4.i.i104.phi.trans.insert, align 8
  br label %TypeChecker_error.exit106

if.entry.i.i103:                                  ; preds = %if.entry18
  %118 = shl nuw i64 %117, 1
  store i64 %118, ptr %memberidx1.i2.i99, align 4
  %memberidx2.i.i.i102 = getelementptr inbounds %Array_FloError_, ptr %114, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i.i.i102, align 8
  %120 = shl i64 %117, 4
  %121 = call ptr @realloc(ptr %119, i64 %120)
  store ptr %121, ptr %memberidx2.i.i.i102, align 8
  %.pre154 = load i64, ptr %memberidx.i.i98, align 4
  br label %TypeChecker_error.exit106

TypeChecker_error.exit106:                        ; preds = %if.entry18.TypeChecker_error.exit106_crit_edge, %if.entry.i.i103
  %122 = phi ptr [ %.pre155, %if.entry18.TypeChecker_error.exit106_crit_edge ], [ %121, %if.entry.i.i103 ]
  %123 = phi i64 [ %116, %if.entry18.TypeChecker_error.exit106_crit_edge ], [ %.pre154, %if.entry.i.i103 ]
  %124 = add nsw i64 %123, 1
  store i64 %124, ptr %memberidx.i.i98, align 4
  %ptridx.i.i105 = getelementptr inbounds ptr, ptr %122, i64 %123
  store ptr %115, ptr %ptridx.i.i105, align 8
  br label %common.ret

ifend20:                                          ; preds = %ifend16
  %memberidx26 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %125 = load ptr, ptr %memberidx26, align 8
  %126 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %85, ptr %125)
  %127 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i108 = getelementptr inbounds %Compiler, ptr %127, i64 0, i32 6
  %128 = load ptr, ptr %memberidx1.i108, align 8
  %memberidx2.i109 = getelementptr inbounds %Array_FloError_, ptr %128, i64 0, i32 2
  %129 = load i64, ptr %memberidx2.i109, align 4
  %130 = icmp sgt i64 %129, 0
  br i1 %130, label %common.ret, label %ifend29

ifend29:                                          ; preds = %ifend20
  %131 = load ptr, ptr %memberidx17, align 8
  %132 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %84, ptr %131)
  br i1 %132, label %ifend33, label %if.entry31

if.entry31:                                       ; preds = %ifend29
  %133 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %85)
  %134 = load ptr, ptr %133, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %134, i64 0, i32 5
  %135 = load ptr, ptr %memberidx34, align 8
  %136 = tail call ptr %135(ptr nonnull %133)
  %memberidx35 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 3
  %137 = load ptr, ptr %memberidx35, align 8
  %138 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %137)
  %139 = load ptr, ptr %138, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %139, i64 0, i32 5
  %140 = load ptr, ptr %memberidx36, align 8
  %141 = tail call ptr %140(ptr nonnull %138)
  %142 = alloca ptr, align 8
  %143 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %142, ptr nonnull @163, ptr %136, ptr %141)
  %144 = load ptr, ptr %142, align 8
  %145 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %145, align 8
  %memberidx.i110 = getelementptr inbounds %string, ptr %145, i64 0, i32 1
  store ptr %144, ptr %memberidx.i110, align 8
  %memberidx1.i111 = getelementptr inbounds %string, ptr %145, i64 0, i32 2
  store i64 %143, ptr %memberidx1.i111, align 4
  %memberidx2.i112 = getelementptr inbounds %string, ptr %145, i64 0, i32 3
  store i64 %143, ptr %memberidx2.i112, align 4
  tail call void @free(ptr %136)
  tail call void @free(ptr %141)
  %146 = load ptr, ptr %memberidx26, align 8
  %147 = load ptr, ptr %146, align 8
  %148 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i114 = getelementptr inbounds %Compiler, ptr %148, i64 0, i32 6
  %149 = load ptr, ptr %memberidx1.i114, align 8
  %150 = call ptr @malloc(i32 24)
  store i64 5, ptr %150, align 4
  %memberidx1.i.i115 = getelementptr inbounds %FloError, ptr %150, i64 0, i32 2
  store ptr %147, ptr %memberidx1.i.i115, align 8
  %memberidx2.i.i116 = getelementptr inbounds %FloError, ptr %150, i64 0, i32 1
  store ptr %145, ptr %memberidx2.i.i116, align 8
  %memberidx.i.i117 = getelementptr inbounds %Array_FloError_, ptr %149, i64 0, i32 2
  %151 = load i64, ptr %memberidx.i.i117, align 4
  %memberidx1.i2.i118 = getelementptr inbounds %Array_FloError_, ptr %149, i64 0, i32 3
  %152 = load i64, ptr %memberidx1.i2.i118, align 4
  %.not.i.i119 = icmp slt i64 %151, %152
  br i1 %.not.i.i119, label %if.entry31.TypeChecker_error.exit125_crit_edge, label %if.entry.i.i122

if.entry31.TypeChecker_error.exit125_crit_edge:   ; preds = %if.entry31
  %memberidx4.i.i123.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %149, i64 0, i32 1
  %.pre157 = load ptr, ptr %memberidx4.i.i123.phi.trans.insert, align 8
  br label %TypeChecker_error.exit125

if.entry.i.i122:                                  ; preds = %if.entry31
  %153 = shl nuw i64 %152, 1
  store i64 %153, ptr %memberidx1.i2.i118, align 4
  %memberidx2.i.i.i121 = getelementptr inbounds %Array_FloError_, ptr %149, i64 0, i32 1
  %154 = load ptr, ptr %memberidx2.i.i.i121, align 8
  %155 = shl i64 %152, 4
  %156 = call ptr @realloc(ptr %154, i64 %155)
  store ptr %156, ptr %memberidx2.i.i.i121, align 8
  %.pre156 = load i64, ptr %memberidx.i.i117, align 4
  br label %TypeChecker_error.exit125

TypeChecker_error.exit125:                        ; preds = %if.entry31.TypeChecker_error.exit125_crit_edge, %if.entry.i.i122
  %157 = phi ptr [ %.pre157, %if.entry31.TypeChecker_error.exit125_crit_edge ], [ %156, %if.entry.i.i122 ]
  %158 = phi i64 [ %151, %if.entry31.TypeChecker_error.exit125_crit_edge ], [ %.pre156, %if.entry.i.i122 ]
  %159 = add nsw i64 %158, 1
  store i64 %159, ptr %memberidx.i.i117, align 4
  %ptridx.i.i124 = getelementptr inbounds ptr, ptr %157, i64 %158
  store ptr %150, ptr %ptridx.i.i124, align 8
  br label %common.ret

ifend33:                                          ; preds = %ifend29
  %160 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %160, align 4
  %memberidx.i.i126 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i126, align 4
  %memberidx1.i.i127 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i127, align 1
  %memberidx.i128 = getelementptr inbounds %MemberExpression, ptr %160, i64 0, i32 4
  store ptr %1, ptr %memberidx.i128, align 8
  %memberidx1.i129 = getelementptr inbounds %MemberExpression, ptr %160, i64 0, i32 5
  store ptr %39, ptr %memberidx1.i129, align 8
  %memberidx2.i130 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 3
  store ptr %common.ret.op.i78, ptr %memberidx2.i130, align 8
  %161 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %161, align 8
  %memberidx.i131 = getelementptr inbounds %Array_Expression_, ptr %161, i64 0, i32 2
  store i64 0, ptr %memberidx.i131, align 4
  %memberidx1.i132 = getelementptr inbounds %Array_Expression_, ptr %161, i64 0, i32 3
  store i64 16, ptr %memberidx1.i132, align 4
  %memberidx2.i133 = getelementptr inbounds %Array_Expression_, ptr %161, i64 0, i32 1
  %162 = tail call ptr @malloc(i32 128)
  store ptr %162, ptr %memberidx2.i133, align 8
  store ptr %91, ptr %162, align 8
  %163 = getelementptr inbounds ptr, ptr %162, i64 1
  store ptr %126, ptr %163, align 8
  store i64 2, ptr %memberidx.i131, align 4
  %164 = tail call ptr @malloc(i32 41)
  %memberidx41 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i78, i64 0, i32 2
  %165 = load ptr, ptr %memberidx41, align 8
  store i64 8, ptr %164, align 4
  %memberidx.i.i134 = getelementptr inbounds %Expression, ptr %164, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i134, align 4
  %memberidx1.i.i135 = getelementptr inbounds %Expression, ptr %164, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i135, align 1
  %memberidx.i136 = getelementptr inbounds %CallExpression, ptr %164, i64 0, i32 4
  store ptr %160, ptr %memberidx.i136, align 8
  %memberidx1.i137 = getelementptr inbounds %CallExpression, ptr %164, i64 0, i32 5
  store ptr %161, ptr %memberidx1.i137, align 8
  %memberidx2.i138 = getelementptr inbounds %Expression, ptr %164, i64 0, i32 3
  store ptr %165, ptr %memberidx2.i138, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = add i64 %4, -19
  %6 = icmp ult i64 %5, 12
  %7 = icmp eq i64 %4, 19
  %memberidx1 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 3
  %8 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ExpressionNode, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp eq i64 %9, 13
  %11 = and i1 %7, %10
  br i1 %11, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %12 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %12, align 4
  %13 = load ptr, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %ExpressionIndexNode, ptr %13, i64 0, i32 3
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %12, ptr %14)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %16 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %16, i64 0, i32 6
  %17 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i, align 4
  %19 = icmp sgt i64 %18, 0
  br i1 %19, label %common.ret, label %ifend7

ifend:                                            ; preds = %is_object.exit.ifend_crit_edge, %3
  %20 = phi ptr [ %.pre, %is_object.exit.ifend_crit_edge ], [ %8, %3 ]
  %left = alloca ptr, align 8
  %21 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %20)
  store ptr %21, ptr %left, align 8
  %memberidx.i170 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %22 = load ptr, ptr %memberidx.i170, align 8
  %memberidx1.i171 = getelementptr inbounds %Compiler, ptr %22, i64 0, i32 6
  %23 = load ptr, ptr %memberidx1.i171, align 8
  %memberidx2.i172 = getelementptr inbounds %Array_FloError_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx2.i172, align 4
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %common.ret, label %ifend15

common.ret:                                       ; preds = %ifend19, %ifend, %if.entry, %TypeChecker_error.exit, %if.entry110, %if.entry102, %ifend98, %if.entry87, %ifend80, %ifend69, %ifend61, %if.entry34, %if.entry26, %if.entry17, %if.entry9
  %common.ret.op = phi ptr [ %33, %if.entry9 ], [ %45, %if.entry17 ], [ %61, %if.entry26 ], [ %65, %if.entry34 ], [ %100, %ifend61 ], [ %109, %ifend69 ], [ %122, %ifend80 ], [ %126, %if.entry87 ], [ %137, %ifend98 ], [ %138, %if.entry102 ], [ %148, %if.entry110 ], [ null, %TypeChecker_error.exit ], [ null, %if.entry ], [ null, %ifend ], [ null, %ifend19 ]
  ret ptr %common.ret.op

ifend7:                                           ; preds = %if.entry
  %memberidx8 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  %26 = load ptr, ptr %memberidx8, align 8
  %27 = load i64, ptr %26, align 4
  %28 = icmp eq i64 %27, 19
  br i1 %28, label %if.entry.i, label %is_object.exit

if.entry.i:                                       ; preds = %ifend7, %if.entry.i
  %.tr5.i = phi ptr [ %29, %if.entry.i ], [ %26, %ifend7 ]
  %memberidx1.i261 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %29 = load ptr, ptr %memberidx1.i261, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp eq i64 %30, 19
  br i1 %31, label %if.entry.i, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i, %ifend7
  %.lcssa.i = phi i64 [ %27, %ifend7 ], [ %30, %if.entry.i ]
  %32 = icmp eq i64 %.lcssa.i, 11
  br i1 %32, label %if.entry9, label %is_object.exit.ifend_crit_edge

is_object.exit.ifend_crit_edge:                   ; preds = %is_object.exit
  %.pre = load ptr, ptr %memberidx1, align 8
  br label %ifend

if.entry9:                                        ; preds = %is_object.exit
  %33 = tail call fastcc ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %15, ptr %2)
  br label %common.ret

ifend15:                                          ; preds = %ifend
  %memberidx16 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 3
  %34 = load ptr, ptr %memberidx16, align 8
  %35 = load i64, ptr %34, align 4
  %36 = icmp eq i64 %35, 19
  br i1 %36, label %if.entry.i264, label %is_object.exit266

if.entry.i264:                                    ; preds = %ifend15, %if.entry.i264
  %.tr5.i262 = phi ptr [ %37, %if.entry.i264 ], [ %34, %ifend15 ]
  %memberidx1.i263 = getelementptr inbounds %GenericType, ptr %.tr5.i262, i64 0, i32 3
  %37 = load ptr, ptr %memberidx1.i263, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 19
  br i1 %39, label %if.entry.i264, label %is_object.exit266

is_object.exit266:                                ; preds = %if.entry.i264, %ifend15
  %.lcssa.i265 = phi i64 [ %35, %ifend15 ], [ %38, %if.entry.i264 ]
  %40 = icmp eq i64 %.lcssa.i265, 11
  %41 = xor i1 %6, true
  %42 = and i1 %40, %41
  %43 = icmp ne i64 %4, 18
  %44 = and i1 %43, %42
  br i1 %44, label %if.entry17, label %ifend19

if.entry17:                                       ; preds = %is_object.exit266
  %45 = tail call fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %21, ptr %2, ptr null)
  br label %common.ret

ifend19:                                          ; preds = %is_object.exit266
  %right = alloca ptr, align 8
  %memberidx21 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %46 = load ptr, ptr %memberidx21, align 8
  %47 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %34, ptr %46)
  store ptr %47, ptr %right, align 8
  %48 = load ptr, ptr %memberidx.i170, align 8
  %memberidx1.i174 = getelementptr inbounds %Compiler, ptr %48, i64 0, i32 6
  %49 = load ptr, ptr %memberidx1.i174, align 8
  %memberidx2.i175 = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i175, align 4
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend19
  %memberidx25 = getelementptr inbounds %Expression, ptr %47, i64 0, i32 3
  %52 = load ptr, ptr %memberidx25, align 8
  %53 = load i64, ptr %52, align 4
  %54 = icmp eq i64 %53, 19
  br i1 %54, label %if.entry.i269, label %is_object.exit271

if.entry.i269:                                    ; preds = %ifend24, %if.entry.i269
  %.tr5.i267 = phi ptr [ %55, %if.entry.i269 ], [ %52, %ifend24 ]
  %memberidx1.i268 = getelementptr inbounds %GenericType, ptr %.tr5.i267, i64 0, i32 3
  %55 = load ptr, ptr %memberidx1.i268, align 8
  %56 = load i64, ptr %55, align 4
  %57 = icmp eq i64 %56, 19
  br i1 %57, label %if.entry.i269, label %is_object.exit271

is_object.exit271:                                ; preds = %if.entry.i269, %ifend24
  %.lcssa.i270 = phi i64 [ %53, %ifend24 ], [ %56, %if.entry.i269 ]
  %58 = icmp eq i64 %.lcssa.i270, 11
  %59 = icmp eq i64 %4, 18
  %60 = and i1 %59, %58
  br i1 %60, label %if.entry26, label %ifend31

if.entry26:                                       ; preds = %is_object.exit271
  %61 = tail call fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %47, ptr %2, ptr %21)
  br label %common.ret

ifend31:                                          ; preds = %is_object.exit271
  %memberidx32 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 1
  %62 = load i1, ptr %memberidx32, align 1
  %memberidx33 = getelementptr inbounds %Expression, ptr %47, i64 0, i32 1
  %63 = load i1, ptr %memberidx33, align 1
  %64 = and i1 %62, %63
  br i1 %6, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend31
  %65 = tail call fastcc ptr @TypeChecker_check_assignment(ptr %0, ptr nonnull %21, ptr nonnull %47, ptr %2)
  br label %common.ret

ifend36:                                          ; preds = %ifend31
  %66 = load ptr, ptr %memberidx16, align 8
  %67 = load i64, ptr %66, align 4
  %68 = icmp eq i64 %67, 20
  %69 = icmp ne i64 %53, 20
  %70 = and i1 %69, %68
  br i1 %70, label %if.entry41, label %ifend43

if.entry41:                                       ; preds = %ifend36
  store ptr %52, ptr %memberidx16, align 8
  %.pre276 = load i64, ptr %52, align 4
  %.pre277 = load ptr, ptr %memberidx25, align 8
  %.pre278 = load i64, ptr %.pre277, align 4
  br label %ifend43

ifend43:                                          ; preds = %ifend36, %if.entry41
  %71 = phi i64 [ %53, %ifend36 ], [ %.pre278, %if.entry41 ]
  %72 = phi i64 [ %67, %ifend36 ], [ %.pre276, %if.entry41 ]
  %73 = add i64 %72, -1
  %74 = icmp ult i64 %73, 9
  %75 = add i64 %71, -1
  %76 = icmp ult i64 %75, 9
  %77 = and i1 %74, %76
  br i1 %77, label %if.entry48, label %else49

if.entry48:                                       ; preds = %ifend43
  %78 = icmp eq i64 %4, 6
  br i1 %78, label %if.entry51, label %ifend53

else49:                                           ; preds = %ifend43
  %79 = or i64 %71, %72
  %80 = icmp eq i64 %79, 0
  %81 = add i64 %4, -15
  %82 = icmp ult i64 %81, 2
  %or.cond = select i1 %80, i1 %82, i1 false
  br i1 %or.cond, label %if.entry87, label %ifend50.thread

ifend50:                                          ; preds = %ifend65
  %83 = add i64 %4, -7
  %84 = icmp ult i64 %83, 6
  br i1 %84, label %if.entry96, label %ifend93.thread

ifend93.thread:                                   ; preds = %ifend50
  %85 = icmp eq i64 %71, 6
  br label %ifend104

ifend50.thread:                                   ; preds = %else49
  %86 = add i64 %4, -7
  %87 = icmp ult i64 %86, 6
  br i1 %87, label %ifend98, label %ifend93

if.entry51:                                       ; preds = %if.entry48
  %88 = icmp ult i64 %73, 7
  br i1 %88, label %if.entry55, label %ifend57

ifend53:                                          ; preds = %if.entry48
  %89 = add i64 %4, -1
  %90 = icmp ult i64 %89, 10
  br i1 %90, label %if.entry63, label %ifend65

if.entry55:                                       ; preds = %if.entry51
  %91 = tail call ptr @malloc(i32 8)
  store i64 9, ptr %91, align 4
  %92 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %92, align 4
  %memberidx.i.i.i = getelementptr inbounds %Expression, ptr %92, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %92, i64 0, i32 1
  %memberidx.i.i = getelementptr inbounds %TypeCastExpression, ptr %92, i64 0, i32 4
  store ptr %21, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %92, i64 0, i32 3
  store ptr %91, ptr %memberidx1.i.i, align 8
  %93 = load i1, ptr %memberidx32, align 1
  store i1 %93, ptr %memberidx1.i.i.i, align 1
  store ptr %92, ptr %left, align 8
  %.pre285 = load ptr, ptr %memberidx25, align 8
  %.pre286 = load i64, ptr %.pre285, align 4
  %.pre287 = add i64 %.pre286, -1
  br label %ifend57

ifend57:                                          ; preds = %if.entry51, %if.entry55
  %.pre-phi = phi i64 [ %75, %if.entry51 ], [ %.pre287, %if.entry55 ]
  %94 = phi ptr [ %21, %if.entry51 ], [ %92, %if.entry55 ]
  %95 = icmp ult i64 %.pre-phi, 7
  br i1 %95, label %if.entry59, label %ifend61

if.entry59:                                       ; preds = %ifend57
  %96 = tail call ptr @malloc(i32 8)
  store i64 9, ptr %96, align 4
  %97 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %97, align 4
  %memberidx.i.i.i179 = getelementptr inbounds %Expression, ptr %97, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i179, align 4
  %memberidx1.i.i.i180 = getelementptr inbounds %Expression, ptr %97, i64 0, i32 1
  %memberidx.i.i181 = getelementptr inbounds %TypeCastExpression, ptr %97, i64 0, i32 4
  store ptr %47, ptr %memberidx.i.i181, align 8
  %memberidx1.i.i182 = getelementptr inbounds %Expression, ptr %97, i64 0, i32 3
  store ptr %96, ptr %memberidx1.i.i182, align 8
  %98 = load i1, ptr %memberidx33, align 1
  store i1 %98, ptr %memberidx1.i.i.i180, align 1
  store ptr %97, ptr %right, align 8
  br label %ifend61

ifend61:                                          ; preds = %ifend57, %if.entry59
  %99 = phi ptr [ %47, %ifend57 ], [ %97, %if.entry59 ]
  %100 = tail call ptr @malloc(i32 49)
  %memberidx62 = getelementptr inbounds %Expression, ptr %94, i64 0, i32 3
  %101 = load ptr, ptr %memberidx62, align 8
  store i64 8, ptr %100, align 4
  %memberidx.i.i185 = getelementptr inbounds %Expression, ptr %100, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i185, align 4
  %memberidx1.i.i186 = getelementptr inbounds %Expression, ptr %100, i64 0, i32 1
  %memberidx.i187 = getelementptr inbounds %BinaryExpression, ptr %100, i64 0, i32 4
  store ptr %94, ptr %memberidx.i187, align 8
  %memberidx1.i188 = getelementptr inbounds %BinaryExpression, ptr %100, i64 0, i32 5
  store i64 6, ptr %memberidx1.i188, align 4
  %memberidx2.i189 = getelementptr inbounds %BinaryExpression, ptr %100, i64 0, i32 6
  store ptr %99, ptr %memberidx2.i189, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %100, i64 0, i32 3
  store ptr %101, ptr %memberidx3.i, align 8
  store i1 false, ptr %memberidx1.i.i186, align 1
  br label %common.ret

if.entry63:                                       ; preds = %ifend53
  call fastcc void @check_cast_lower_bits(ptr nonnull %left, ptr nonnull %right)
  %102 = load ptr, ptr %left, align 8
  %memberidx66 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 3
  %103 = load ptr, ptr %memberidx66, align 8
  %104 = icmp ugt i64 %4, 6
  br i1 %104, label %if.entry67, label %ifend69

ifend65:                                          ; preds = %ifend53
  %105 = add i64 %4, -13
  %106 = icmp ult i64 %105, 5
  br i1 %106, label %if.entry70, label %ifend50

if.entry67:                                       ; preds = %if.entry63
  %107 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %107, align 4
  br label %ifend69

ifend69:                                          ; preds = %if.entry63, %if.entry67
  %108 = phi ptr [ %103, %if.entry63 ], [ %107, %if.entry67 ]
  %109 = tail call ptr @malloc(i32 49)
  %110 = load ptr, ptr %right, align 8
  store i64 8, ptr %109, align 4
  %memberidx.i.i190 = getelementptr inbounds %Expression, ptr %109, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i190, align 4
  %memberidx1.i.i191 = getelementptr inbounds %Expression, ptr %109, i64 0, i32 1
  %memberidx.i192 = getelementptr inbounds %BinaryExpression, ptr %109, i64 0, i32 4
  store ptr %102, ptr %memberidx.i192, align 8
  %memberidx1.i193 = getelementptr inbounds %BinaryExpression, ptr %109, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i193, align 4
  %memberidx2.i194 = getelementptr inbounds %BinaryExpression, ptr %109, i64 0, i32 6
  store ptr %110, ptr %memberidx2.i194, align 8
  %memberidx3.i195 = getelementptr inbounds %Expression, ptr %109, i64 0, i32 3
  store ptr %108, ptr %memberidx3.i195, align 8
  store i1 %64, ptr %memberidx1.i.i191, align 1
  br label %common.ret

if.entry70:                                       ; preds = %ifend65
  %111 = and i64 %72, -2
  %112 = icmp eq i64 %111, 8
  br i1 %112, label %if.entry74, label %ifend76

if.entry74:                                       ; preds = %if.entry70
  %113 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %113, align 4
  %memberidx.i197 = getelementptr inbounds %IntType, ptr %113, i64 0, i32 1
  store i1 true, ptr %memberidx.i197, align 1
  %114 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %114, align 4
  %memberidx.i.i.i198 = getelementptr inbounds %Expression, ptr %114, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i198, align 4
  %memberidx1.i.i.i199 = getelementptr inbounds %Expression, ptr %114, i64 0, i32 1
  %memberidx.i.i200 = getelementptr inbounds %TypeCastExpression, ptr %114, i64 0, i32 4
  store ptr %21, ptr %memberidx.i.i200, align 8
  %memberidx1.i.i201 = getelementptr inbounds %Expression, ptr %114, i64 0, i32 3
  store ptr %113, ptr %memberidx1.i.i201, align 8
  %115 = load i1, ptr %memberidx32, align 1
  store i1 %115, ptr %memberidx1.i.i.i199, align 1
  store ptr %114, ptr %left, align 8
  %.pre283 = load ptr, ptr %memberidx25, align 8
  %.pre284 = load i64, ptr %.pre283, align 4
  br label %ifend76

ifend76:                                          ; preds = %if.entry70, %if.entry74
  %116 = phi i64 [ %71, %if.entry70 ], [ %.pre284, %if.entry74 ]
  %117 = and i64 %116, -2
  %118 = icmp eq i64 %117, 8
  br i1 %118, label %if.entry78, label %ifend80

if.entry78:                                       ; preds = %ifend76
  %119 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %119, align 4
  %memberidx.i204 = getelementptr inbounds %IntType, ptr %119, i64 0, i32 1
  store i1 true, ptr %memberidx.i204, align 1
  %120 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %120, align 4
  %memberidx.i.i.i205 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i205, align 4
  %memberidx1.i.i.i206 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 1
  %memberidx.i.i207 = getelementptr inbounds %TypeCastExpression, ptr %120, i64 0, i32 4
  store ptr %47, ptr %memberidx.i.i207, align 8
  %memberidx1.i.i208 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 3
  store ptr %119, ptr %memberidx1.i.i208, align 8
  %121 = load i1, ptr %memberidx33, align 1
  store i1 %121, ptr %memberidx1.i.i.i206, align 1
  store ptr %120, ptr %right, align 8
  br label %ifend80

ifend80:                                          ; preds = %ifend76, %if.entry78
  call fastcc void @check_cast_lower_bits(ptr nonnull %left, ptr nonnull %right)
  %122 = tail call ptr @malloc(i32 49)
  %123 = load ptr, ptr %left, align 8
  %124 = load ptr, ptr %right, align 8
  %memberidx81 = getelementptr inbounds %Expression, ptr %123, i64 0, i32 3
  %125 = load ptr, ptr %memberidx81, align 8
  store i64 8, ptr %122, align 4
  %memberidx.i.i211 = getelementptr inbounds %Expression, ptr %122, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i211, align 4
  %memberidx1.i.i212 = getelementptr inbounds %Expression, ptr %122, i64 0, i32 1
  %memberidx.i213 = getelementptr inbounds %BinaryExpression, ptr %122, i64 0, i32 4
  store ptr %123, ptr %memberidx.i213, align 8
  %memberidx1.i214 = getelementptr inbounds %BinaryExpression, ptr %122, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i214, align 4
  %memberidx2.i215 = getelementptr inbounds %BinaryExpression, ptr %122, i64 0, i32 6
  store ptr %124, ptr %memberidx2.i215, align 8
  %memberidx3.i216 = getelementptr inbounds %Expression, ptr %122, i64 0, i32 3
  store ptr %125, ptr %memberidx3.i216, align 8
  store i1 %64, ptr %memberidx1.i.i212, align 1
  br label %common.ret

if.entry87:                                       ; preds = %else49
  %126 = tail call ptr @malloc(i32 49)
  %127 = load ptr, ptr %memberidx16, align 8
  store i64 8, ptr %126, align 4
  %memberidx.i.i218 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i218, align 4
  %memberidx1.i.i219 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 1
  %memberidx.i220 = getelementptr inbounds %BinaryExpression, ptr %126, i64 0, i32 4
  store ptr %21, ptr %memberidx.i220, align 8
  %memberidx1.i221 = getelementptr inbounds %BinaryExpression, ptr %126, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i221, align 4
  %memberidx2.i222 = getelementptr inbounds %BinaryExpression, ptr %126, i64 0, i32 6
  store ptr %47, ptr %memberidx2.i222, align 8
  %memberidx3.i223 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 3
  store ptr %127, ptr %memberidx3.i223, align 8
  store i1 %64, ptr %memberidx1.i.i219, align 1
  br label %common.ret

ifend93:                                          ; preds = %ifend50.thread
  %128 = add i64 %4, -1
  %129 = icmp ult i64 %128, 2
  %130 = icmp eq i64 %72, 13
  %131 = and i1 %129, %130
  %132 = icmp eq i64 %71, 6
  %133 = and i1 %131, %132
  br i1 %133, label %if.entry102, label %ifend104

if.entry96:                                       ; preds = %ifend50
  call fastcc void @check_cast_lower_bits(ptr nonnull %left, ptr nonnull %right)
  %.pre281 = load ptr, ptr %left, align 8
  %.pre282 = load ptr, ptr %right, align 8
  br label %ifend98

ifend98:                                          ; preds = %ifend50.thread, %if.entry96
  %134 = phi ptr [ %47, %ifend50.thread ], [ %.pre282, %if.entry96 ]
  %135 = phi ptr [ %21, %ifend50.thread ], [ %.pre281, %if.entry96 ]
  %136 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %136, align 4
  %137 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %137, align 4
  %memberidx.i.i225 = getelementptr inbounds %Expression, ptr %137, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i225, align 4
  %memberidx1.i.i226 = getelementptr inbounds %Expression, ptr %137, i64 0, i32 1
  %memberidx.i227 = getelementptr inbounds %BinaryExpression, ptr %137, i64 0, i32 4
  store ptr %135, ptr %memberidx.i227, align 8
  %memberidx1.i228 = getelementptr inbounds %BinaryExpression, ptr %137, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i228, align 4
  %memberidx2.i229 = getelementptr inbounds %BinaryExpression, ptr %137, i64 0, i32 6
  store ptr %134, ptr %memberidx2.i229, align 8
  %memberidx3.i230 = getelementptr inbounds %Expression, ptr %137, i64 0, i32 3
  store ptr %136, ptr %memberidx3.i230, align 8
  store i1 %64, ptr %memberidx1.i.i226, align 1
  br label %common.ret

if.entry102:                                      ; preds = %ifend93
  %138 = tail call ptr @malloc(i32 49)
  %139 = load ptr, ptr %memberidx16, align 8
  store i64 8, ptr %138, align 4
  %memberidx.i.i232 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i232, align 4
  %memberidx1.i.i233 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 1
  %memberidx.i234 = getelementptr inbounds %BinaryExpression, ptr %138, i64 0, i32 4
  store ptr %21, ptr %memberidx.i234, align 8
  %memberidx1.i235 = getelementptr inbounds %BinaryExpression, ptr %138, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i235, align 4
  %memberidx2.i236 = getelementptr inbounds %BinaryExpression, ptr %138, i64 0, i32 6
  store ptr %47, ptr %memberidx2.i236, align 8
  %memberidx3.i237 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 3
  store ptr %139, ptr %memberidx3.i237, align 8
  store i1 false, ptr %memberidx1.i.i233, align 1
  br label %common.ret

ifend104:                                         ; preds = %ifend93.thread, %ifend93
  %140 = phi i1 [ %85, %ifend93.thread ], [ %132, %ifend93 ]
  %141 = icmp eq i64 %4, 31
  %142 = icmp eq i64 %72, 6
  %143 = and i1 %141, %142
  %144 = and i1 %143, %140
  br i1 %144, label %if.entry110, label %ifend112

if.entry110:                                      ; preds = %ifend104
  %145 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %145, ptr noundef nonnull align 8 dereferenceable(5) @167, i64 5, i1 false)
  %146 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %146, align 8
  %memberidx.i.i239 = getelementptr inbounds %string, ptr %146, i64 0, i32 1
  store ptr %145, ptr %memberidx.i.i239, align 8
  %memberidx1.i.i240 = getelementptr inbounds %string, ptr %146, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i240, align 4
  %memberidx2.i.i241 = getelementptr inbounds %string, ptr %146, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i241, align 4
  %147 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr nonnull %146)
  %148 = tail call ptr @malloc(i32 42)
  %149 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %149, align 8
  %memberidx.i242 = getelementptr inbounds %Array_Expression_, ptr %149, i64 0, i32 2
  store i64 0, ptr %memberidx.i242, align 4
  %memberidx1.i243 = getelementptr inbounds %Array_Expression_, ptr %149, i64 0, i32 3
  store i64 16, ptr %memberidx1.i243, align 4
  %memberidx2.i244 = getelementptr inbounds %Array_Expression_, ptr %149, i64 0, i32 1
  %150 = tail call ptr @malloc(i32 128)
  store ptr %150, ptr %memberidx2.i244, align 8
  store ptr %21, ptr %150, align 8
  %151 = getelementptr inbounds ptr, ptr %150, i64 1
  store ptr %47, ptr %151, align 8
  store i64 2, ptr %memberidx.i242, align 4
  store i64 8, ptr %148, align 4
  %memberidx.i.i245 = getelementptr inbounds %Expression, ptr %148, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i245, align 4
  %memberidx1.i.i246 = getelementptr inbounds %Expression, ptr %148, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i246, align 1
  %memberidx.i247 = getelementptr inbounds %NewExpression, ptr %148, i64 0, i32 6
  store ptr %147, ptr %memberidx.i247, align 8
  %memberidx1.i248 = getelementptr inbounds %NewExpression, ptr %148, i64 0, i32 5
  store i1 true, ptr %memberidx1.i248, align 1
  %memberidx2.i249 = getelementptr inbounds %NewExpression, ptr %148, i64 0, i32 4
  store ptr %149, ptr %memberidx2.i249, align 8
  %memberidx3.i250 = getelementptr inbounds %Expression, ptr %148, i64 0, i32 3
  store ptr %147, ptr %memberidx3.i250, align 8
  br label %common.ret

ifend112:                                         ; preds = %ifend104
  %152 = tail call fastcc ptr @dump_bin_op(i64 %4)
  %153 = load ptr, ptr %152, align 8
  %memberidx115 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %153, i64 0, i32 5
  %154 = load ptr, ptr %memberidx115, align 8
  %155 = tail call ptr %154(ptr nonnull %152)
  %156 = load ptr, ptr %memberidx16, align 8
  %157 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %156)
  %158 = load ptr, ptr %157, align 8
  %memberidx117 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %158, i64 0, i32 5
  %159 = load ptr, ptr %memberidx117, align 8
  %160 = tail call ptr %159(ptr nonnull %157)
  %161 = load ptr, ptr %memberidx25, align 8
  %162 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %161)
  %163 = load ptr, ptr %162, align 8
  %memberidx119 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %163, i64 0, i32 5
  %164 = load ptr, ptr %memberidx119, align 8
  %165 = tail call ptr %164(ptr nonnull %162)
  %166 = alloca ptr, align 8
  %167 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %166, ptr nonnull @168, ptr %155, ptr %160, ptr %165)
  %168 = load ptr, ptr %166, align 8
  %169 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %169, align 8
  %memberidx.i251 = getelementptr inbounds %string, ptr %169, i64 0, i32 1
  store ptr %168, ptr %memberidx.i251, align 8
  %memberidx1.i252 = getelementptr inbounds %string, ptr %169, i64 0, i32 2
  store i64 %167, ptr %memberidx1.i252, align 4
  %memberidx2.i253 = getelementptr inbounds %string, ptr %169, i64 0, i32 3
  store i64 %167, ptr %memberidx2.i253, align 4
  tail call void @free(ptr %155)
  tail call void @free(ptr %160)
  tail call void @free(ptr %165)
  %170 = load ptr, ptr %2, align 8
  %171 = load ptr, ptr %memberidx.i170, align 8
  %memberidx1.i255 = getelementptr inbounds %Compiler, ptr %171, i64 0, i32 6
  %172 = load ptr, ptr %memberidx1.i255, align 8
  %173 = call ptr @malloc(i32 24)
  store i64 5, ptr %173, align 4
  %memberidx1.i.i256 = getelementptr inbounds %FloError, ptr %173, i64 0, i32 2
  store ptr %170, ptr %memberidx1.i.i256, align 8
  %memberidx2.i.i257 = getelementptr inbounds %FloError, ptr %173, i64 0, i32 1
  store ptr %169, ptr %memberidx2.i.i257, align 8
  %memberidx.i.i258 = getelementptr inbounds %Array_FloError_, ptr %172, i64 0, i32 2
  %174 = load i64, ptr %memberidx.i.i258, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %172, i64 0, i32 3
  %175 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %174, %175
  br i1 %.not.i.i, label %ifend112.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

ifend112.TypeChecker_error.exit_crit_edge:        ; preds = %ifend112
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %172, i64 0, i32 1
  %.pre280 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %ifend112
  %176 = shl nuw i64 %175, 1
  store i64 %176, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %172, i64 0, i32 1
  %177 = load ptr, ptr %memberidx2.i.i.i, align 8
  %178 = shl i64 %175, 4
  %179 = call ptr @realloc(ptr %177, i64 %178)
  store ptr %179, ptr %memberidx2.i.i.i, align 8
  %.pre279 = load i64, ptr %memberidx.i.i258, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %ifend112.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %180 = phi ptr [ %.pre280, %ifend112.TypeChecker_error.exit_crit_edge ], [ %179, %if.entry.i.i ]
  %181 = phi i64 [ %174, %ifend112.TypeChecker_error.exit_crit_edge ], [ %.pre279, %if.entry.i.i ]
  %182 = add nsw i64 %181, 1
  store i64 %182, ptr %memberidx.i.i258, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %180, i64 %181
  store ptr %173, ptr %ptridx.i.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_call_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %3, align 4
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %TypeChecker_error.exit96, %TypeChecker_error.exit117, %TypeChecker_get_func_args_from_expression.exit, %2, %ifend23, %TypeChecker_error.exit, %if.entry4
  %common.ret.op = phi ptr [ %16, %if.entry4 ], [ null, %TypeChecker_error.exit ], [ %87, %ifend23 ], [ null, %2 ], [ null, %TypeChecker_get_func_args_from_expression.exit ], [ null, %TypeChecker_error.exit117 ], [ null, %TypeChecker_error.exit96 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 2
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp eq i64 %10, 16
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = load i64, ptr %12, align 4
  %14 = icmp eq i64 %13, 20
  %15 = and i1 %11, %14
  br i1 %15, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %16 = tail call fastcc ptr @TypeChecker_check_intrinsic_call(ptr nonnull %0, ptr nonnull %5, ptr nonnull %1)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %.not = icmp eq i64 %13, 15
  br i1 %.not, label %ifend11, label %if.entry9

if.entry9:                                        ; preds = %ifend6
  %17 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %12)
  %18 = load ptr, ptr %17, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 5
  %19 = load ptr, ptr %memberidx13, align 8
  %20 = tail call ptr %19(ptr nonnull %17)
  %21 = alloca ptr, align 8
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %21, ptr nonnull @197, ptr %20)
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i62 = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %22, ptr %memberidx1.i63, align 4
  %memberidx2.i64 = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %22, ptr %memberidx2.i64, align 4
  tail call void @free(ptr %20)
  %25 = load ptr, ptr %memberidx, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i66 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i66, align 8
  %29 = call ptr @malloc(i32 24)
  store i64 5, ptr %29, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %29, i64 0, i32 2
  store ptr %26, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %29, i64 0, i32 1
  store ptr %24, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 3
  %31 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %30, %31
  br i1 %.not.i.i, label %if.entry9.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry9.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry9
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %.pre14 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry9
  %32 = shl nuw i64 %31, 1
  store i64 %32, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i.i.i, align 8
  %34 = shl i64 %31, 4
  %35 = call ptr @realloc(ptr %33, i64 %34)
  store ptr %35, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry9.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %36 = phi ptr [ %.pre14, %if.entry9.TypeChecker_error.exit_crit_edge ], [ %35, %if.entry.i.i ]
  %37 = phi i64 [ %30, %if.entry9.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %38 = add nsw i64 %37, 1
  store i64 %38, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %36, i64 %37
  store ptr %29, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend11:                                          ; preds = %ifend6
  switch i64 %10, label %TypeChecker_get_func_args_from_expression.exit [
    i64 7, label %if.entry.i
    i64 12, label %if.entry9.i
  ]

if.entry.i:                                       ; preds = %ifend11
  %memberidx1.i68 = getelementptr inbounds %VarAccessExpression, ptr %5, i64 0, i32 4
  %39 = load ptr, ptr %memberidx1.i68, align 8
  %40 = load i64, ptr %39, align 4
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %if.entry3.i, label %TypeChecker_get_func_args_from_expression.exit

if.entry3.i:                                      ; preds = %if.entry.i
  %42 = load ptr, ptr %0, align 8
  %memberidx.i.i69 = getelementptr inbounds %Program, ptr %42, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i69, align 8
  %memberidx1.i.i70 = getelementptr inbounds %VarId, ptr %39, i64 0, i32 1
  %44 = load i64, ptr %memberidx1.i.i70, align 4
  %memberidx.i.i.i71 = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i71, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i72 = getelementptr inbounds %Module, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx2.i.i72, align 8
  %memberidx3.i.i = getelementptr inbounds %VarId, ptr %39, i64 0, i32 2
  %48 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Function_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx7.i = getelementptr inbounds %Function, ptr %50, i64 0, i32 2
  br label %TypeChecker_get_func_args_from_expression.exit.sink.split

if.entry9.i:                                      ; preds = %ifend11
  %memberidx12.i = getelementptr inbounds %MemberExpression, ptr %5, i64 0, i32 5
  %51 = load ptr, ptr %memberidx12.i, align 8
  %52 = load ptr, ptr %0, align 8
  %memberidx.i.i19.i = getelementptr inbounds %PropId, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i.i19.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Program, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %55 = load i64, ptr %53, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %57, i64 0, i32 4
  %58 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %53, i64 0, i32 2
  %59 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %60, i64 %59
  %61 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %memberidx.i20.i = getelementptr inbounds %Class, ptr %61, i64 0, i32 5
  %62 = load ptr, ptr %memberidx.i20.i, align 8
  %memberidx1.i21.i = getelementptr inbounds %PropId, ptr %51, i64 0, i32 2
  %63 = load i64, ptr %memberidx1.i21.i, align 4
  %memberidx.i3.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i3.i.i, align 8
  %ptridx.i.i22.i = getelementptr inbounds ptr, ptr %64, i64 %63
  %65 = load ptr, ptr %ptridx.i.i22.i, align 8
  %memberidx14.i = getelementptr inbounds %ClassMethod, ptr %65, i64 0, i32 6
  br label %TypeChecker_get_func_args_from_expression.exit.sink.split

TypeChecker_get_func_args_from_expression.exit.sink.split: ; preds = %if.entry9.i, %if.entry3.i
  %memberidx7.i.sink = phi ptr [ %memberidx7.i, %if.entry3.i ], [ %memberidx14.i, %if.entry9.i ]
  %66 = load ptr, ptr %memberidx7.i.sink, align 8
  br label %TypeChecker_get_func_args_from_expression.exit

TypeChecker_get_func_args_from_expression.exit:   ; preds = %TypeChecker_get_func_args_from_expression.exit.sink.split, %ifend11, %if.entry.i
  %common.ret.op.i = phi ptr [ null, %if.entry.i ], [ null, %ifend11 ], [ %66, %TypeChecker_get_func_args_from_expression.exit.sink.split ]
  %memberidx17 = getelementptr inbounds %CallExpressionNode, ptr %1, i64 0, i32 4
  %67 = load ptr, ptr %memberidx17, align 8
  %68 = tail call fastcc ptr @TypeChecker_fill_in_call_args(ptr nonnull %0, ptr nonnull %12, ptr %common.ret.op.i, ptr %67)
  %69 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i74 = getelementptr inbounds %Compiler, ptr %69, i64 0, i32 6
  %70 = load ptr, ptr %memberidx1.i74, align 8
  %memberidx2.i75 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 2
  %71 = load i64, ptr %memberidx2.i75, align 4
  %72 = icmp sgt i64 %71, 0
  br i1 %72, label %common.ret, label %ifend20

ifend20:                                          ; preds = %TypeChecker_get_func_args_from_expression.exit
  %memberidx.i1 = getelementptr inbounds %FunctionType, ptr %12, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i1, align 8
  %memberidx1.i2 = getelementptr inbounds %Array_Type_, ptr %73, i64 0, i32 2
  %74 = load i64, ptr %memberidx1.i2, align 4
  %memberidx2.i3 = getelementptr inbounds %Array_Expression_, ptr %68, i64 0, i32 2
  %75 = load i64, ptr %memberidx2.i3, align 4
  %.not.i = icmp eq i64 %74, %75
  br i1 %.not.i, label %for.cond.preheader.i, label %if.entry24

for.cond.preheader.i:                             ; preds = %ifend20
  %76 = icmp sgt i64 %74, 0
  br i1 %76, label %for.body.lr.ph.i, label %ifend23

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i12.i = getelementptr inbounds %Array_Expression_, ptr %68, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %ifend8.i, %for.body.lr.ph.i
  %storemerge14.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %84, %ifend8.i ]
  %77 = load ptr, ptr %memberidx.i1, align 8
  %memberidx.i.i5 = getelementptr inbounds %Array_Type_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i.i5, align 8
  %ptridx.i.i6 = getelementptr inbounds ptr, ptr %78, i64 %storemerge14.i
  %79 = load ptr, ptr %ptridx.i.i6, align 8
  %80 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %80, i64 %storemerge14.i
  %81 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx5.i = getelementptr inbounds %Expression, ptr %81, i64 0, i32 3
  %82 = load ptr, ptr %memberidx5.i, align 8
  %83 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %79, ptr %82)
  br i1 %83, label %ifend8.i, label %else25

ifend8.i:                                         ; preds = %for.body.i
  %84 = add nuw nsw i64 %storemerge14.i, 1
  %85 = load i64, ptr %memberidx2.i3, align 4
  %86 = icmp slt i64 %84, %85
  br i1 %86, label %for.body.i, label %ifend23

ifend23:                                          ; preds = %ifend8.i, %for.cond.preheader.i
  %87 = tail call ptr @malloc(i32 41)
  %memberidx37 = getelementptr inbounds %FunctionType, ptr %12, i64 0, i32 2
  %88 = load ptr, ptr %memberidx37, align 8
  store i64 8, ptr %87, align 4
  %memberidx.i.i76 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i76, align 4
  %memberidx1.i.i77 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i77, align 1
  %memberidx.i78 = getelementptr inbounds %CallExpression, ptr %87, i64 0, i32 4
  store ptr %5, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %CallExpression, ptr %87, i64 0, i32 5
  store ptr %68, ptr %memberidx1.i79, align 8
  %memberidx2.i80 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  store ptr %88, ptr %memberidx2.i80, align 8
  br label %common.ret

if.entry24:                                       ; preds = %ifend20
  %89 = alloca ptr, align 8
  %90 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %89, ptr nonnull @198, i64 %74, i64 %75)
  %91 = load ptr, ptr %89, align 8
  %92 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i81 = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i81, align 8
  %memberidx1.i82 = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 %90, ptr %memberidx1.i82, align 4
  %memberidx2.i83 = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 %90, ptr %memberidx2.i83, align 4
  %93 = load ptr, ptr %1, align 8
  %94 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i85 = getelementptr inbounds %Compiler, ptr %94, i64 0, i32 6
  %95 = load ptr, ptr %memberidx1.i85, align 8
  %96 = call ptr @malloc(i32 24)
  store i64 4, ptr %96, align 4
  %memberidx1.i.i86 = getelementptr inbounds %FloError, ptr %96, i64 0, i32 2
  store ptr %93, ptr %memberidx1.i.i86, align 8
  %memberidx2.i.i87 = getelementptr inbounds %FloError, ptr %96, i64 0, i32 1
  store ptr %92, ptr %memberidx2.i.i87, align 8
  %memberidx.i.i88 = getelementptr inbounds %Array_FloError_, ptr %95, i64 0, i32 2
  %97 = load i64, ptr %memberidx.i.i88, align 4
  %memberidx1.i2.i89 = getelementptr inbounds %Array_FloError_, ptr %95, i64 0, i32 3
  %98 = load i64, ptr %memberidx1.i2.i89, align 4
  %.not.i.i90 = icmp slt i64 %97, %98
  br i1 %.not.i.i90, label %if.entry24.TypeChecker_error.exit96_crit_edge, label %if.entry.i.i93

if.entry24.TypeChecker_error.exit96_crit_edge:    ; preds = %if.entry24
  %memberidx4.i.i94.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %95, i64 0, i32 1
  %.pre16 = load ptr, ptr %memberidx4.i.i94.phi.trans.insert, align 8
  br label %TypeChecker_error.exit96

if.entry.i.i93:                                   ; preds = %if.entry24
  %99 = shl nuw i64 %98, 1
  store i64 %99, ptr %memberidx1.i2.i89, align 4
  %memberidx2.i.i.i92 = getelementptr inbounds %Array_FloError_, ptr %95, i64 0, i32 1
  %100 = load ptr, ptr %memberidx2.i.i.i92, align 8
  %101 = shl i64 %98, 4
  %102 = call ptr @realloc(ptr %100, i64 %101)
  store ptr %102, ptr %memberidx2.i.i.i92, align 8
  %.pre15 = load i64, ptr %memberidx.i.i88, align 4
  br label %TypeChecker_error.exit96

TypeChecker_error.exit96:                         ; preds = %if.entry24.TypeChecker_error.exit96_crit_edge, %if.entry.i.i93
  %103 = phi ptr [ %.pre16, %if.entry24.TypeChecker_error.exit96_crit_edge ], [ %102, %if.entry.i.i93 ]
  %104 = phi i64 [ %97, %if.entry24.TypeChecker_error.exit96_crit_edge ], [ %.pre15, %if.entry.i.i93 ]
  %105 = add nsw i64 %104, 1
  store i64 %105, ptr %memberidx.i.i88, align 4
  %ptridx.i.i95 = getelementptr inbounds ptr, ptr %103, i64 %104
  store ptr %96, ptr %ptridx.i.i95, align 8
  br label %common.ret

else25:                                           ; preds = %for.body.i
  %106 = load ptr, ptr %memberidx.i1, align 8
  %memberidx.i97 = getelementptr inbounds %Array_Type_, ptr %106, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i97, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %107, i64 %storemerge14.i
  %108 = load ptr, ptr %ptridx.i, align 8
  %109 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %108)
  %110 = load ptr, ptr %109, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %110, i64 0, i32 5
  %111 = load ptr, ptr %memberidx32, align 8
  %112 = tail call ptr %111(ptr nonnull %109)
  %113 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i99 = getelementptr inbounds ptr, ptr %113, i64 %storemerge14.i
  %114 = load ptr, ptr %ptridx.i99, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %114, i64 0, i32 3
  %115 = load ptr, ptr %memberidx33, align 8
  %116 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %115)
  %117 = load ptr, ptr %116, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %117, i64 0, i32 5
  %118 = load ptr, ptr %memberidx34, align 8
  %119 = tail call ptr %118(ptr nonnull %116)
  %120 = alloca ptr, align 8
  %121 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %120, ptr nonnull @199, ptr %112, ptr %119)
  %122 = load ptr, ptr %120, align 8
  %123 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %123, align 8
  %memberidx.i100 = getelementptr inbounds %string, ptr %123, i64 0, i32 1
  store ptr %122, ptr %memberidx.i100, align 8
  %memberidx1.i101 = getelementptr inbounds %string, ptr %123, i64 0, i32 2
  store i64 %121, ptr %memberidx1.i101, align 4
  %memberidx2.i102 = getelementptr inbounds %string, ptr %123, i64 0, i32 3
  store i64 %121, ptr %memberidx2.i102, align 4
  tail call void @free(ptr %112)
  tail call void @free(ptr %119)
  %124 = load ptr, ptr %memberidx17, align 8
  %memberidx.i103 = getelementptr inbounds %Array_ExpressionNode_, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx.i103, align 8
  %ptridx.i104 = getelementptr inbounds ptr, ptr %125, i64 %storemerge14.i
  %126 = load ptr, ptr %ptridx.i104, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i106 = getelementptr inbounds %Compiler, ptr %128, i64 0, i32 6
  %129 = load ptr, ptr %memberidx1.i106, align 8
  %130 = call ptr @malloc(i32 24)
  store i64 5, ptr %130, align 4
  %memberidx1.i.i107 = getelementptr inbounds %FloError, ptr %130, i64 0, i32 2
  store ptr %127, ptr %memberidx1.i.i107, align 8
  %memberidx2.i.i108 = getelementptr inbounds %FloError, ptr %130, i64 0, i32 1
  store ptr %123, ptr %memberidx2.i.i108, align 8
  %memberidx.i.i109 = getelementptr inbounds %Array_FloError_, ptr %129, i64 0, i32 2
  %131 = load i64, ptr %memberidx.i.i109, align 4
  %memberidx1.i2.i110 = getelementptr inbounds %Array_FloError_, ptr %129, i64 0, i32 3
  %132 = load i64, ptr %memberidx1.i2.i110, align 4
  %.not.i.i111 = icmp slt i64 %131, %132
  br i1 %.not.i.i111, label %else25.TypeChecker_error.exit117_crit_edge, label %if.entry.i.i114

else25.TypeChecker_error.exit117_crit_edge:       ; preds = %else25
  %memberidx4.i.i115.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %129, i64 0, i32 1
  %.pre18 = load ptr, ptr %memberidx4.i.i115.phi.trans.insert, align 8
  br label %TypeChecker_error.exit117

if.entry.i.i114:                                  ; preds = %else25
  %133 = shl nuw i64 %132, 1
  store i64 %133, ptr %memberidx1.i2.i110, align 4
  %memberidx2.i.i.i113 = getelementptr inbounds %Array_FloError_, ptr %129, i64 0, i32 1
  %134 = load ptr, ptr %memberidx2.i.i.i113, align 8
  %135 = shl i64 %132, 4
  %136 = call ptr @realloc(ptr %134, i64 %135)
  store ptr %136, ptr %memberidx2.i.i.i113, align 8
  %.pre17 = load i64, ptr %memberidx.i.i109, align 4
  br label %TypeChecker_error.exit117

TypeChecker_error.exit117:                        ; preds = %else25.TypeChecker_error.exit117_crit_edge, %if.entry.i.i114
  %137 = phi ptr [ %.pre18, %else25.TypeChecker_error.exit117_crit_edge ], [ %136, %if.entry.i.i114 ]
  %138 = phi i64 [ %131, %else25.TypeChecker_error.exit117_crit_edge ], [ %.pre17, %if.entry.i.i114 ]
  %139 = add nsw i64 %138, 1
  store i64 %139, ptr %memberidx.i.i109, align 4
  %ptridx.i.i116 = getelementptr inbounds ptr, ptr %137, i64 %138
  store ptr %130, ptr %ptridx.i.i116, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_type(ptr %0, ptr %1) unnamed_addr {
  %memberidx = getelementptr inbounds %TypeNode, ptr %1, i64 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  switch i64 %3, label %ifend49 [
    i64 13, label %if.entry
    i64 14, label %if.entry3
    i64 15, label %if.entry38
    i64 16, label %if.entry47
  ]

common.ret:                                       ; preds = %ifend112, %ifend128, %for.end120, %TypeChecker_error.exit, %if.entry105, %if.entry102, %if.entry99, %if.entry96, %if.entry93, %if.entry90, %if.entry87, %if.entry84, %if.entry81, %if.entry78, %if.entry75, %if.entry72, %if.entry69, %if.entry66, %if.entry63, %if.entry60, %if.entry57, %if.entry54, %ifend49, %for.end, %ifend33, %TypeChecker_error.exit472, %TypeChecker_error.exit456, %TypeChecker_error.exit440, %TypeChecker_error.exit424, %if.entry7, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %14, %if.entry7 ], [ null, %TypeChecker_error.exit424 ], [ null, %TypeChecker_error.exit440 ], [ null, %TypeChecker_error.exit456 ], [ null, %TypeChecker_error.exit472 ], [ %92, %ifend33 ], [ %114, %for.end ], [ %125, %ifend49 ], [ %126, %if.entry54 ], [ %133, %if.entry57 ], [ %140, %if.entry60 ], [ %147, %if.entry63 ], [ %154, %if.entry66 ], [ %161, %if.entry69 ], [ %168, %if.entry72 ], [ %175, %if.entry75 ], [ %182, %if.entry78 ], [ %189, %if.entry81 ], [ %196, %if.entry84 ], [ %203, %if.entry87 ], [ %210, %if.entry90 ], [ %217, %if.entry93 ], [ %224, %if.entry96 ], [ %231, %if.entry99 ], [ %238, %if.entry102 ], [ %245, %if.entry105 ], [ null, %TypeChecker_error.exit ], [ null, %for.end120 ], [ %274, %ifend128 ], [ %250, %ifend112 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %4 = tail call ptr @malloc(i32 16)
  %memberidx1 = getelementptr inbounds %PointerTypeNode, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %5)
  store i64 13, ptr %4, align 4
  %memberidx.i401 = getelementptr inbounds %PointerType, ptr %4, i64 0, i32 1
  store ptr %6, ptr %memberidx.i401, align 8
  br label %common.ret

if.entry3:                                        ; preds = %2
  %7 = alloca %IntType, align 8
  store i64 6, ptr %7, align 8
  %memberidx.i402 = getelementptr inbounds %IntType, ptr %7, i64 0, i32 1
  store i1 false, ptr %memberidx.i402, align 8
  %memberidx6 = getelementptr inbounds %ArrayTypeNode, ptr %1, i64 0, i32 3
  %8 = load ptr, ptr %memberidx6, align 8
  %9 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %7, ptr %8)
  %memberidx.i406 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %10 = load ptr, ptr %memberidx.i406, align 8
  %memberidx1.i407 = getelementptr inbounds %Compiler, ptr %10, i64 0, i32 6
  %11 = load ptr, ptr %memberidx1.i407, align 8
  %memberidx2.i408 = getelementptr inbounds %Array_FloError_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx2.i408, align 4
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %if.entry3
  %14 = call ptr @malloc(i32 8)
  store i64 20, ptr %14, align 4
  br label %common.ret

ifend9:                                           ; preds = %if.entry3
  %memberidx10 = getelementptr inbounds %Expression, ptr %9, i64 0, i32 3
  %15 = load ptr, ptr %memberidx10, align 8
  %16 = load i64, ptr %15, align 4
  %17 = add i64 %16, -1
  %18 = icmp ult i64 %17, 7
  br i1 %18, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend9
  %19 = call ptr @malloc(i32 23)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(23) %19, ptr noundef nonnull align 8 dereferenceable(23) @144, i64 23, i1 false)
  %20 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i409 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i409, align 8
  %memberidx1.i.i410 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 23, ptr %memberidx1.i.i410, align 4
  %memberidx2.i.i411 = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 23, ptr %memberidx2.i.i411, align 4
  %21 = load ptr, ptr %memberidx6, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %memberidx.i406, align 8
  %memberidx1.i413 = getelementptr inbounds %Compiler, ptr %23, i64 0, i32 6
  %24 = load ptr, ptr %memberidx1.i413, align 8
  %25 = call ptr @malloc(i32 24)
  store i64 4, ptr %25, align 4
  %memberidx1.i.i414 = getelementptr inbounds %FloError, ptr %25, i64 0, i32 2
  store ptr %22, ptr %memberidx1.i.i414, align 8
  %memberidx2.i.i415 = getelementptr inbounds %FloError, ptr %25, i64 0, i32 1
  store ptr %20, ptr %memberidx2.i.i415, align 8
  %memberidx.i.i416 = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 2
  %26 = load i64, ptr %memberidx.i.i416, align 4
  %memberidx1.i2.i417 = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 3
  %27 = load i64, ptr %memberidx1.i2.i417, align 4
  %.not.i.i418 = icmp slt i64 %26, %27
  br i1 %.not.i.i418, label %if.entry11.TypeChecker_error.exit424_crit_edge, label %if.entry.i.i421

if.entry11.TypeChecker_error.exit424_crit_edge:   ; preds = %if.entry11
  %memberidx4.i.i422.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 1
  %.pre536 = load ptr, ptr %memberidx4.i.i422.phi.trans.insert, align 8
  br label %TypeChecker_error.exit424

if.entry.i.i421:                                  ; preds = %if.entry11
  %28 = shl nuw i64 %27, 1
  store i64 %28, ptr %memberidx1.i2.i417, align 4
  %memberidx2.i.i.i420 = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i.i420, align 8
  %30 = shl i64 %27, 4
  %31 = call ptr @realloc(ptr %29, i64 %30)
  store ptr %31, ptr %memberidx2.i.i.i420, align 8
  %.pre535 = load i64, ptr %memberidx.i.i416, align 4
  br label %TypeChecker_error.exit424

TypeChecker_error.exit424:                        ; preds = %if.entry11.TypeChecker_error.exit424_crit_edge, %if.entry.i.i421
  %32 = phi ptr [ %.pre536, %if.entry11.TypeChecker_error.exit424_crit_edge ], [ %31, %if.entry.i.i421 ]
  %33 = phi i64 [ %26, %if.entry11.TypeChecker_error.exit424_crit_edge ], [ %.pre535, %if.entry.i.i421 ]
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx.i.i416, align 4
  %ptridx.i.i423 = getelementptr inbounds ptr, ptr %32, i64 %33
  store ptr %25, ptr %ptridx.i.i423, align 8
  br label %common.ret

ifend13:                                          ; preds = %ifend9
  %memberidx17 = getelementptr inbounds %IntType, ptr %15, i64 0, i32 1
  %35 = load i1, ptr %memberidx17, align 1
  %36 = icmp ne i64 %16, 6
  %37 = or i1 %36, %35
  br i1 %37, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend13
  %38 = call ptr @malloc(i32 23)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(23) %38, ptr noundef nonnull align 8 dereferenceable(23) @145, i64 23, i1 false)
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i425 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i425, align 8
  %memberidx1.i.i426 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 23, ptr %memberidx1.i.i426, align 4
  %memberidx2.i.i427 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 23, ptr %memberidx2.i.i427, align 4
  %40 = load ptr, ptr %memberidx6, align 8
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %memberidx.i406, align 8
  %memberidx1.i429 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i429, align 8
  %44 = call ptr @malloc(i32 24)
  store i64 4, ptr %44, align 4
  %memberidx1.i.i430 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 2
  store ptr %41, ptr %memberidx1.i.i430, align 8
  %memberidx2.i.i431 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 1
  store ptr %39, ptr %memberidx2.i.i431, align 8
  %memberidx.i.i432 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %45 = load i64, ptr %memberidx.i.i432, align 4
  %memberidx1.i2.i433 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 3
  %46 = load i64, ptr %memberidx1.i2.i433, align 4
  %.not.i.i434 = icmp slt i64 %45, %46
  br i1 %.not.i.i434, label %if.entry19.TypeChecker_error.exit440_crit_edge, label %if.entry.i.i437

if.entry19.TypeChecker_error.exit440_crit_edge:   ; preds = %if.entry19
  %memberidx4.i.i438.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %.pre542 = load ptr, ptr %memberidx4.i.i438.phi.trans.insert, align 8
  br label %TypeChecker_error.exit440

if.entry.i.i437:                                  ; preds = %if.entry19
  %47 = shl nuw i64 %46, 1
  store i64 %47, ptr %memberidx1.i2.i433, align 4
  %memberidx2.i.i.i436 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i.i436, align 8
  %49 = shl i64 %46, 4
  %50 = call ptr @realloc(ptr %48, i64 %49)
  store ptr %50, ptr %memberidx2.i.i.i436, align 8
  %.pre541 = load i64, ptr %memberidx.i.i432, align 4
  br label %TypeChecker_error.exit440

TypeChecker_error.exit440:                        ; preds = %if.entry19.TypeChecker_error.exit440_crit_edge, %if.entry.i.i437
  %51 = phi ptr [ %.pre542, %if.entry19.TypeChecker_error.exit440_crit_edge ], [ %50, %if.entry.i.i437 ]
  %52 = phi i64 [ %45, %if.entry19.TypeChecker_error.exit440_crit_edge ], [ %.pre541, %if.entry.i.i437 ]
  %53 = add nsw i64 %52, 1
  store i64 %53, ptr %memberidx.i.i432, align 4
  %ptridx.i.i439 = getelementptr inbounds ptr, ptr %51, i64 %52
  store ptr %44, ptr %ptridx.i.i439, align 8
  br label %common.ret

ifend21:                                          ; preds = %ifend13
  %memberidx24 = getelementptr inbounds %Expression, ptr %9, i64 0, i32 1
  %54 = load i1, ptr %memberidx24, align 1
  br i1 %54, label %ifend27, label %if.entry25

if.entry25:                                       ; preds = %ifend21
  %55 = call ptr @malloc(i32 30)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(30) %55, ptr noundef nonnull align 8 dereferenceable(30) @146, i64 30, i1 false)
  %56 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %56, align 8
  %memberidx.i.i441 = getelementptr inbounds %string, ptr %56, i64 0, i32 1
  store ptr %55, ptr %memberidx.i.i441, align 8
  %memberidx1.i.i442 = getelementptr inbounds %string, ptr %56, i64 0, i32 2
  store i64 30, ptr %memberidx1.i.i442, align 4
  %memberidx2.i.i443 = getelementptr inbounds %string, ptr %56, i64 0, i32 3
  store i64 30, ptr %memberidx2.i.i443, align 4
  %57 = load ptr, ptr %memberidx6, align 8
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %memberidx.i406, align 8
  %memberidx1.i445 = getelementptr inbounds %Compiler, ptr %59, i64 0, i32 6
  %60 = load ptr, ptr %memberidx1.i445, align 8
  %61 = call ptr @malloc(i32 24)
  store i64 4, ptr %61, align 4
  %memberidx1.i.i446 = getelementptr inbounds %FloError, ptr %61, i64 0, i32 2
  store ptr %58, ptr %memberidx1.i.i446, align 8
  %memberidx2.i.i447 = getelementptr inbounds %FloError, ptr %61, i64 0, i32 1
  store ptr %56, ptr %memberidx2.i.i447, align 8
  %memberidx.i.i448 = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 2
  %62 = load i64, ptr %memberidx.i.i448, align 4
  %memberidx1.i2.i449 = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 3
  %63 = load i64, ptr %memberidx1.i2.i449, align 4
  %.not.i.i450 = icmp slt i64 %62, %63
  br i1 %.not.i.i450, label %if.entry25.TypeChecker_error.exit456_crit_edge, label %if.entry.i.i453

if.entry25.TypeChecker_error.exit456_crit_edge:   ; preds = %if.entry25
  %memberidx4.i.i454.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 1
  %.pre538 = load ptr, ptr %memberidx4.i.i454.phi.trans.insert, align 8
  br label %TypeChecker_error.exit456

if.entry.i.i453:                                  ; preds = %if.entry25
  %64 = shl nuw i64 %63, 1
  store i64 %64, ptr %memberidx1.i2.i449, align 4
  %memberidx2.i.i.i452 = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i.i.i452, align 8
  %66 = shl i64 %63, 4
  %67 = call ptr @realloc(ptr %65, i64 %66)
  store ptr %67, ptr %memberidx2.i.i.i452, align 8
  %.pre537 = load i64, ptr %memberidx.i.i448, align 4
  br label %TypeChecker_error.exit456

TypeChecker_error.exit456:                        ; preds = %if.entry25.TypeChecker_error.exit456_crit_edge, %if.entry.i.i453
  %68 = phi ptr [ %.pre538, %if.entry25.TypeChecker_error.exit456_crit_edge ], [ %67, %if.entry.i.i453 ]
  %69 = phi i64 [ %62, %if.entry25.TypeChecker_error.exit456_crit_edge ], [ %.pre537, %if.entry.i.i453 ]
  %70 = add nsw i64 %69, 1
  store i64 %70, ptr %memberidx.i.i448, align 4
  %ptridx.i.i455 = getelementptr inbounds ptr, ptr %68, i64 %69
  store ptr %61, ptr %ptridx.i.i455, align 8
  br label %common.ret

ifend27:                                          ; preds = %ifend21
  %71 = load ptr, ptr %0, align 8
  %72 = call fastcc i64 @evaluate_const_int_expression(ptr %71, ptr nonnull %9)
  %73 = icmp slt i64 %72, 0
  br i1 %73, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend27
  %74 = call ptr @malloc(i32 28)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %74, ptr noundef nonnull align 8 dereferenceable(28) @147, i64 28, i1 false)
  %75 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %75, align 8
  %memberidx.i.i457 = getelementptr inbounds %string, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i.i457, align 8
  %memberidx1.i.i458 = getelementptr inbounds %string, ptr %75, i64 0, i32 2
  store i64 28, ptr %memberidx1.i.i458, align 4
  %memberidx2.i.i459 = getelementptr inbounds %string, ptr %75, i64 0, i32 3
  store i64 28, ptr %memberidx2.i.i459, align 4
  %76 = load ptr, ptr %memberidx6, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %memberidx.i406, align 8
  %memberidx1.i461 = getelementptr inbounds %Compiler, ptr %78, i64 0, i32 6
  %79 = load ptr, ptr %memberidx1.i461, align 8
  %80 = call ptr @malloc(i32 24)
  store i64 4, ptr %80, align 4
  %memberidx1.i.i462 = getelementptr inbounds %FloError, ptr %80, i64 0, i32 2
  store ptr %77, ptr %memberidx1.i.i462, align 8
  %memberidx2.i.i463 = getelementptr inbounds %FloError, ptr %80, i64 0, i32 1
  store ptr %75, ptr %memberidx2.i.i463, align 8
  %memberidx.i.i464 = getelementptr inbounds %Array_FloError_, ptr %79, i64 0, i32 2
  %81 = load i64, ptr %memberidx.i.i464, align 4
  %memberidx1.i2.i465 = getelementptr inbounds %Array_FloError_, ptr %79, i64 0, i32 3
  %82 = load i64, ptr %memberidx1.i2.i465, align 4
  %.not.i.i466 = icmp slt i64 %81, %82
  br i1 %.not.i.i466, label %if.entry31.TypeChecker_error.exit472_crit_edge, label %if.entry.i.i469

if.entry31.TypeChecker_error.exit472_crit_edge:   ; preds = %if.entry31
  %memberidx4.i.i470.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %79, i64 0, i32 1
  %.pre540 = load ptr, ptr %memberidx4.i.i470.phi.trans.insert, align 8
  br label %TypeChecker_error.exit472

if.entry.i.i469:                                  ; preds = %if.entry31
  %83 = shl nuw i64 %82, 1
  store i64 %83, ptr %memberidx1.i2.i465, align 4
  %memberidx2.i.i.i468 = getelementptr inbounds %Array_FloError_, ptr %79, i64 0, i32 1
  %84 = load ptr, ptr %memberidx2.i.i.i468, align 8
  %85 = shl i64 %82, 4
  %86 = call ptr @realloc(ptr %84, i64 %85)
  store ptr %86, ptr %memberidx2.i.i.i468, align 8
  %.pre539 = load i64, ptr %memberidx.i.i464, align 4
  br label %TypeChecker_error.exit472

TypeChecker_error.exit472:                        ; preds = %if.entry31.TypeChecker_error.exit472_crit_edge, %if.entry.i.i469
  %87 = phi ptr [ %.pre540, %if.entry31.TypeChecker_error.exit472_crit_edge ], [ %86, %if.entry.i.i469 ]
  %88 = phi i64 [ %81, %if.entry31.TypeChecker_error.exit472_crit_edge ], [ %.pre539, %if.entry.i.i469 ]
  %89 = add nsw i64 %88, 1
  store i64 %89, ptr %memberidx.i.i464, align 4
  %ptridx.i.i471 = getelementptr inbounds ptr, ptr %87, i64 %88
  store ptr %80, ptr %ptridx.i.i471, align 8
  br label %common.ret

ifend33:                                          ; preds = %ifend27
  %memberidx36 = getelementptr inbounds %ArrayTypeNode, ptr %1, i64 0, i32 2
  %90 = load ptr, ptr %memberidx36, align 8
  %91 = call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr %90)
  %92 = tail call ptr @malloc(i32 24)
  store i64 14, ptr %92, align 4
  %memberidx.i475 = getelementptr inbounds %ArrayType, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i475, align 8
  %memberidx1.i476 = getelementptr inbounds %ArrayType, ptr %92, i64 0, i32 2
  store i64 %72, ptr %memberidx1.i476, align 4
  br label %common.ret

if.entry38:                                       ; preds = %2
  %93 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %93, align 8
  %memberidx.i477 = getelementptr inbounds %Array_Type_, ptr %93, i64 0, i32 2
  store i64 0, ptr %memberidx.i477, align 4
  %memberidx1.i478 = getelementptr inbounds %Array_Type_, ptr %93, i64 0, i32 3
  store i64 8, ptr %memberidx1.i478, align 4
  %memberidx2.i479 = getelementptr inbounds %Array_Type_, ptr %93, i64 0, i32 1
  %94 = tail call ptr @malloc(i32 64)
  store ptr %94, ptr %memberidx2.i479, align 8
  store i64 0, ptr %memberidx.i477, align 4
  %memberidx43 = getelementptr inbounds %FunctionTypeNode, ptr %1, i64 0, i32 2
  %95 = load ptr, ptr %memberidx43, align 8
  %96 = tail call ptr @malloc(i32 25)
  %memberidx.i480 = getelementptr inbounds %Array_TypeNode_, ptr %95, i64 0, i32 1
  %97 = load ptr, ptr %memberidx.i480, align 8
  %memberidx1.i481 = getelementptr inbounds %Array_TypeNode_, ptr %95, i64 0, i32 2
  %98 = load i64, ptr %memberidx1.i481, align 4
  store i1 false, ptr %96, align 1
  %memberidx1.i.i482 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %96, i64 0, i32 1
  %memberidx2.i.i483 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %96, i64 0, i32 3
  store ptr %97, ptr %memberidx2.i.i483, align 8
  %memberidx3.i.i484 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %96, i64 0, i32 2
  store i64 %98, ptr %memberidx3.i.i484, align 4
  store i64 1, ptr %memberidx1.i.i482, align 4
  %99 = icmp slt i64 %98, 1
  br i1 %99, label %for.end, label %for.body

for.body:                                         ; preds = %if.entry38, %Array_Type____sl__.exit502
  %100 = phi i64 [ %111, %Array_Type____sl__.exit502 ], [ 1, %if.entry38 ]
  %storemerge168525.in = phi ptr [ %ptridx.i491, %Array_Type____sl__.exit502 ], [ %97, %if.entry38 ]
  %storemerge168525 = load ptr, ptr %storemerge168525.in, align 8
  %101 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %storemerge168525)
  %102 = load i64, ptr %memberidx.i477, align 4
  %103 = load i64, ptr %memberidx1.i478, align 4
  %.not.i495 = icmp slt i64 %102, %103
  br i1 %.not.i495, label %for.body.Array_Type____sl__.exit502_crit_edge, label %if.entry.i498

for.body.Array_Type____sl__.exit502_crit_edge:    ; preds = %for.body
  %.pre534 = load ptr, ptr %memberidx2.i479, align 8
  br label %Array_Type____sl__.exit502

if.entry.i498:                                    ; preds = %for.body
  %104 = shl nuw i64 %103, 1
  store i64 %104, ptr %memberidx1.i478, align 4
  %105 = load ptr, ptr %memberidx2.i479, align 8
  %106 = shl i64 %103, 4
  %107 = tail call ptr @realloc(ptr %105, i64 %106)
  store ptr %107, ptr %memberidx2.i479, align 8
  %.pre533 = load i64, ptr %memberidx.i477, align 4
  br label %Array_Type____sl__.exit502

Array_Type____sl__.exit502:                       ; preds = %for.body.Array_Type____sl__.exit502_crit_edge, %if.entry.i498
  %108 = phi ptr [ %.pre534, %for.body.Array_Type____sl__.exit502_crit_edge ], [ %107, %if.entry.i498 ]
  %109 = phi i64 [ %102, %for.body.Array_Type____sl__.exit502_crit_edge ], [ %.pre533, %if.entry.i498 ]
  %110 = add nsw i64 %109, 1
  store i64 %110, ptr %memberidx.i477, align 4
  %ptridx.i500 = getelementptr inbounds ptr, ptr %108, i64 %109
  store ptr %101, ptr %ptridx.i500, align 8
  %111 = add nuw nsw i64 %100, 1
  store i64 %111, ptr %memberidx1.i.i482, align 4
  %ptridx.i491 = getelementptr inbounds ptr, ptr %97, i64 %100
  %.not544 = icmp slt i64 %100, %98
  br i1 %.not544, label %for.body, label %for.end

for.end:                                          ; preds = %Array_Type____sl__.exit502, %if.entry38
  tail call void @free(ptr nonnull %96)
  %memberidx45 = getelementptr inbounds %FunctionTypeNode, ptr %1, i64 0, i32 3
  %112 = load ptr, ptr %memberidx45, align 8
  %113 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %112)
  %114 = tail call ptr @malloc(i32 25)
  store i64 15, ptr %114, align 4
  %memberidx.i473 = getelementptr inbounds %FunctionType, ptr %114, i64 0, i32 1
  store ptr %93, ptr %memberidx.i473, align 8
  %memberidx1.i474 = getelementptr inbounds %FunctionType, ptr %114, i64 0, i32 2
  store ptr %113, ptr %memberidx1.i474, align 8
  br label %common.ret

if.entry47:                                       ; preds = %2
  %115 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %115, align 8
  %memberidx.i403 = getelementptr inbounds %Array_Type_, ptr %115, i64 0, i32 2
  store i64 0, ptr %memberidx.i403, align 4
  %memberidx1.i404 = getelementptr inbounds %Array_Type_, ptr %115, i64 0, i32 3
  store i64 8, ptr %memberidx1.i404, align 4
  %memberidx2.i405 = getelementptr inbounds %Array_Type_, ptr %115, i64 0, i32 1
  %116 = tail call ptr @malloc(i32 64)
  store ptr %116, ptr %memberidx2.i405, align 8
  store i64 0, ptr %memberidx.i403, align 4
  %memberidx52 = getelementptr inbounds %RecordTypeNode, ptr %1, i64 0, i32 2
  %117 = load ptr, ptr %memberidx52, align 8
  %memberidx53 = getelementptr inbounds %IdentifierToken, ptr %117, i64 0, i32 2
  %118 = load ptr, ptr %memberidx53, align 8
  %119 = tail call ptr @malloc(i32 4)
  store i32 1819242338, ptr %119, align 8
  %120 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %120, align 8
  %memberidx.i.i398 = getelementptr inbounds %string, ptr %120, i64 0, i32 1
  store ptr %119, ptr %memberidx.i.i398, align 8
  %memberidx1.i.i399 = getelementptr inbounds %string, ptr %120, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i399, align 4
  %memberidx2.i.i400 = getelementptr inbounds %string, ptr %120, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i400, align 4
  %memberidx.i390 = getelementptr inbounds %string, ptr %118, i64 0, i32 2
  %121 = load i64, ptr %memberidx.i390, align 4
  %.not.i392 = icmp eq i64 %121, 4
  br i1 %.not.i392, label %ifend.i396, label %ifend56

ifend.i396:                                       ; preds = %if.entry47
  %memberidx2.i394 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %122 = load ptr, ptr %memberidx2.i394, align 8
  %123 = tail call i64 @memcmp(ptr %122, ptr nonnull %119, i64 4)
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %if.entry54, label %ifend56

ifend49:                                          ; preds = %2
  %125 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %125, align 4
  br label %common.ret

if.entry54:                                       ; preds = %ifend.i396
  %126 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %126, align 4
  br label %common.ret

ifend56:                                          ; preds = %if.entry47, %ifend.i396
  %127 = tail call ptr @malloc(i32 2)
  store i16 13429, ptr %127, align 8
  %128 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %128, align 8
  %memberidx.i.i387 = getelementptr inbounds %string, ptr %128, i64 0, i32 1
  store ptr %127, ptr %memberidx.i.i387, align 8
  %memberidx1.i.i388 = getelementptr inbounds %string, ptr %128, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i388, align 4
  %memberidx2.i.i389 = getelementptr inbounds %string, ptr %128, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i389, align 4
  %129 = load i64, ptr %memberidx.i390, align 4
  %.not.i381 = icmp eq i64 %129, 2
  br i1 %.not.i381, label %ifend.i385, label %ifend59

ifend.i385:                                       ; preds = %ifend56
  %memberidx2.i383 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %130 = load ptr, ptr %memberidx2.i383, align 8
  %131 = tail call i64 @memcmp(ptr %130, ptr nonnull %127, i64 2)
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %if.entry57, label %ifend59

if.entry57:                                       ; preds = %ifend.i385
  %133 = tail call ptr @malloc(i32 9)
  store i64 1, ptr %133, align 4
  %memberidx.i378 = getelementptr inbounds %IntType, ptr %133, i64 0, i32 1
  store i1 false, ptr %memberidx.i378, align 1
  br label %common.ret

ifend59:                                          ; preds = %ifend56, %ifend.i385
  %134 = tail call ptr @malloc(i32 2)
  store i16 14453, ptr %134, align 8
  %135 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %135, align 8
  %memberidx.i.i375 = getelementptr inbounds %string, ptr %135, i64 0, i32 1
  store ptr %134, ptr %memberidx.i.i375, align 8
  %memberidx1.i.i376 = getelementptr inbounds %string, ptr %135, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i376, align 4
  %memberidx2.i.i377 = getelementptr inbounds %string, ptr %135, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i377, align 4
  %136 = load i64, ptr %memberidx.i390, align 4
  %.not.i369 = icmp eq i64 %136, 2
  br i1 %.not.i369, label %ifend.i373, label %ifend62

ifend.i373:                                       ; preds = %ifend59
  %memberidx2.i371 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %137 = load ptr, ptr %memberidx2.i371, align 8
  %138 = tail call i64 @memcmp(ptr %137, ptr nonnull %134, i64 2)
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %if.entry60, label %ifend62

if.entry60:                                       ; preds = %ifend.i373
  %140 = tail call ptr @malloc(i32 9)
  store i64 2, ptr %140, align 4
  %memberidx.i366 = getelementptr inbounds %IntType, ptr %140, i64 0, i32 1
  store i1 false, ptr %memberidx.i366, align 1
  br label %common.ret

ifend62:                                          ; preds = %ifend59, %ifend.i373
  %141 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %141, ptr noundef nonnull align 8 dereferenceable(3) @148, i64 3, i1 false)
  %142 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %142, align 8
  %memberidx.i.i363 = getelementptr inbounds %string, ptr %142, i64 0, i32 1
  store ptr %141, ptr %memberidx.i.i363, align 8
  %memberidx1.i.i364 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i364, align 4
  %memberidx2.i.i365 = getelementptr inbounds %string, ptr %142, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i365, align 4
  %143 = load i64, ptr %memberidx.i390, align 4
  %.not.i357 = icmp eq i64 %143, 3
  br i1 %.not.i357, label %ifend.i361, label %ifend65

ifend.i361:                                       ; preds = %ifend62
  %memberidx2.i359 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %144 = load ptr, ptr %memberidx2.i359, align 8
  %145 = tail call i64 @memcmp(ptr %144, ptr nonnull %141, i64 3)
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %if.entry63, label %ifend65

if.entry63:                                       ; preds = %ifend.i361
  %147 = tail call ptr @malloc(i32 9)
  store i64 3, ptr %147, align 4
  %memberidx.i354 = getelementptr inbounds %IntType, ptr %147, i64 0, i32 1
  store i1 false, ptr %memberidx.i354, align 1
  br label %common.ret

ifend65:                                          ; preds = %ifend62, %ifend.i361
  %148 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %148, ptr noundef nonnull align 8 dereferenceable(3) @149, i64 3, i1 false)
  %149 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %149, align 8
  %memberidx.i.i351 = getelementptr inbounds %string, ptr %149, i64 0, i32 1
  store ptr %148, ptr %memberidx.i.i351, align 8
  %memberidx1.i.i352 = getelementptr inbounds %string, ptr %149, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i352, align 4
  %memberidx2.i.i353 = getelementptr inbounds %string, ptr %149, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i353, align 4
  %150 = load i64, ptr %memberidx.i390, align 4
  %.not.i345 = icmp eq i64 %150, 3
  br i1 %.not.i345, label %ifend.i349, label %ifend68

ifend.i349:                                       ; preds = %ifend65
  %memberidx2.i347 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %151 = load ptr, ptr %memberidx2.i347, align 8
  %152 = tail call i64 @memcmp(ptr %151, ptr nonnull %148, i64 3)
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %if.entry66, label %ifend68

if.entry66:                                       ; preds = %ifend.i349
  %154 = tail call ptr @malloc(i32 9)
  store i64 4, ptr %154, align 4
  %memberidx.i342 = getelementptr inbounds %IntType, ptr %154, i64 0, i32 1
  store i1 false, ptr %memberidx.i342, align 1
  br label %common.ret

ifend68:                                          ; preds = %ifend65, %ifend.i349
  %155 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %155, ptr noundef nonnull align 8 dereferenceable(3) @150, i64 3, i1 false)
  %156 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %156, align 8
  %memberidx.i.i339 = getelementptr inbounds %string, ptr %156, i64 0, i32 1
  store ptr %155, ptr %memberidx.i.i339, align 8
  %memberidx1.i.i340 = getelementptr inbounds %string, ptr %156, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i340, align 4
  %memberidx2.i.i341 = getelementptr inbounds %string, ptr %156, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i341, align 4
  %157 = load i64, ptr %memberidx.i390, align 4
  %.not.i333 = icmp eq i64 %157, 3
  br i1 %.not.i333, label %ifend.i337, label %ifend71

ifend.i337:                                       ; preds = %ifend68
  %memberidx2.i335 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %158 = load ptr, ptr %memberidx2.i335, align 8
  %159 = tail call i64 @memcmp(ptr %158, ptr nonnull %155, i64 3)
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %if.entry69, label %ifend71

if.entry69:                                       ; preds = %ifend.i337
  %161 = tail call ptr @malloc(i32 9)
  store i64 5, ptr %161, align 4
  %memberidx.i330 = getelementptr inbounds %IntType, ptr %161, i64 0, i32 1
  store i1 false, ptr %memberidx.i330, align 1
  br label %common.ret

ifend71:                                          ; preds = %ifend68, %ifend.i337
  %162 = tail call ptr @malloc(i32 4)
  store i32 942813557, ptr %162, align 8
  %163 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %163, align 8
  %memberidx.i.i327 = getelementptr inbounds %string, ptr %163, i64 0, i32 1
  store ptr %162, ptr %memberidx.i.i327, align 8
  %memberidx1.i.i328 = getelementptr inbounds %string, ptr %163, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i328, align 4
  %memberidx2.i.i329 = getelementptr inbounds %string, ptr %163, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i329, align 4
  %164 = load i64, ptr %memberidx.i390, align 4
  %.not.i321 = icmp eq i64 %164, 4
  br i1 %.not.i321, label %ifend.i325, label %ifend74

ifend.i325:                                       ; preds = %ifend71
  %memberidx2.i323 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %165 = load ptr, ptr %memberidx2.i323, align 8
  %166 = tail call i64 @memcmp(ptr %165, ptr nonnull %162, i64 4)
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %if.entry72, label %ifend74

if.entry72:                                       ; preds = %ifend.i325
  %168 = tail call ptr @malloc(i32 9)
  store i64 7, ptr %168, align 4
  %memberidx.i318 = getelementptr inbounds %IntType, ptr %168, i64 0, i32 1
  store i1 false, ptr %memberidx.i318, align 1
  br label %common.ret

ifend74:                                          ; preds = %ifend71, %ifend.i325
  %169 = tail call ptr @malloc(i32 4)
  store i32 1953393013, ptr %169, align 8
  %170 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %170, align 8
  %memberidx.i.i315 = getelementptr inbounds %string, ptr %170, i64 0, i32 1
  store ptr %169, ptr %memberidx.i.i315, align 8
  %memberidx1.i.i316 = getelementptr inbounds %string, ptr %170, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i316, align 4
  %memberidx2.i.i317 = getelementptr inbounds %string, ptr %170, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i317, align 4
  %171 = load i64, ptr %memberidx.i390, align 4
  %.not.i309 = icmp eq i64 %171, 4
  br i1 %.not.i309, label %ifend.i313, label %ifend77

ifend.i313:                                       ; preds = %ifend74
  %memberidx2.i311 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %172 = load ptr, ptr %memberidx2.i311, align 8
  %173 = tail call i64 @memcmp(ptr %172, ptr nonnull %169, i64 4)
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %if.entry75, label %ifend77

if.entry75:                                       ; preds = %ifend.i313
  %175 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %175, align 4
  %memberidx.i306 = getelementptr inbounds %IntType, ptr %175, i64 0, i32 1
  store i1 false, ptr %memberidx.i306, align 1
  br label %common.ret

ifend77:                                          ; preds = %ifend74, %ifend.i313
  %176 = tail call ptr @malloc(i32 2)
  store i16 13417, ptr %176, align 8
  %177 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %177, align 8
  %memberidx.i.i303 = getelementptr inbounds %string, ptr %177, i64 0, i32 1
  store ptr %176, ptr %memberidx.i.i303, align 8
  %memberidx1.i.i304 = getelementptr inbounds %string, ptr %177, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i304, align 4
  %memberidx2.i.i305 = getelementptr inbounds %string, ptr %177, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i305, align 4
  %178 = load i64, ptr %memberidx.i390, align 4
  %.not.i297 = icmp eq i64 %178, 2
  br i1 %.not.i297, label %ifend.i301, label %ifend80

ifend.i301:                                       ; preds = %ifend77
  %memberidx2.i299 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %179 = load ptr, ptr %memberidx2.i299, align 8
  %180 = tail call i64 @memcmp(ptr %179, ptr nonnull %176, i64 2)
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %if.entry78, label %ifend80

if.entry78:                                       ; preds = %ifend.i301
  %182 = tail call ptr @malloc(i32 9)
  store i64 1, ptr %182, align 4
  %memberidx.i294 = getelementptr inbounds %IntType, ptr %182, i64 0, i32 1
  store i1 true, ptr %memberidx.i294, align 1
  br label %common.ret

ifend80:                                          ; preds = %ifend77, %ifend.i301
  %183 = tail call ptr @malloc(i32 2)
  store i16 14441, ptr %183, align 8
  %184 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %184, align 8
  %memberidx.i.i291 = getelementptr inbounds %string, ptr %184, i64 0, i32 1
  store ptr %183, ptr %memberidx.i.i291, align 8
  %memberidx1.i.i292 = getelementptr inbounds %string, ptr %184, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i292, align 4
  %memberidx2.i.i293 = getelementptr inbounds %string, ptr %184, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i293, align 4
  %185 = load i64, ptr %memberidx.i390, align 4
  %.not.i285 = icmp eq i64 %185, 2
  br i1 %.not.i285, label %ifend.i289, label %ifend83

ifend.i289:                                       ; preds = %ifend80
  %memberidx2.i287 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %186 = load ptr, ptr %memberidx2.i287, align 8
  %187 = tail call i64 @memcmp(ptr %186, ptr nonnull %183, i64 2)
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %if.entry81, label %ifend83

if.entry81:                                       ; preds = %ifend.i289
  %189 = tail call ptr @malloc(i32 9)
  store i64 2, ptr %189, align 4
  %memberidx.i282 = getelementptr inbounds %IntType, ptr %189, i64 0, i32 1
  store i1 true, ptr %memberidx.i282, align 1
  br label %common.ret

ifend83:                                          ; preds = %ifend80, %ifend.i289
  %190 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %190, ptr noundef nonnull align 8 dereferenceable(3) @151, i64 3, i1 false)
  %191 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %191, align 8
  %memberidx.i.i279 = getelementptr inbounds %string, ptr %191, i64 0, i32 1
  store ptr %190, ptr %memberidx.i.i279, align 8
  %memberidx1.i.i280 = getelementptr inbounds %string, ptr %191, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i280, align 4
  %memberidx2.i.i281 = getelementptr inbounds %string, ptr %191, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i281, align 4
  %192 = load i64, ptr %memberidx.i390, align 4
  %.not.i273 = icmp eq i64 %192, 3
  br i1 %.not.i273, label %ifend.i277, label %ifend86

ifend.i277:                                       ; preds = %ifend83
  %memberidx2.i275 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %193 = load ptr, ptr %memberidx2.i275, align 8
  %194 = tail call i64 @memcmp(ptr %193, ptr nonnull %190, i64 3)
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %if.entry84, label %ifend86

if.entry84:                                       ; preds = %ifend.i277
  %196 = tail call ptr @malloc(i32 9)
  store i64 3, ptr %196, align 4
  %memberidx.i270 = getelementptr inbounds %IntType, ptr %196, i64 0, i32 1
  store i1 true, ptr %memberidx.i270, align 1
  br label %common.ret

ifend86:                                          ; preds = %ifend83, %ifend.i277
  %197 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %197, ptr noundef nonnull align 8 dereferenceable(3) @152, i64 3, i1 false)
  %198 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %198, align 8
  %memberidx.i.i267 = getelementptr inbounds %string, ptr %198, i64 0, i32 1
  store ptr %197, ptr %memberidx.i.i267, align 8
  %memberidx1.i.i268 = getelementptr inbounds %string, ptr %198, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i268, align 4
  %memberidx2.i.i269 = getelementptr inbounds %string, ptr %198, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i269, align 4
  %199 = load i64, ptr %memberidx.i390, align 4
  %.not.i261 = icmp eq i64 %199, 3
  br i1 %.not.i261, label %ifend.i265, label %ifend89

ifend.i265:                                       ; preds = %ifend86
  %memberidx2.i263 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %200 = load ptr, ptr %memberidx2.i263, align 8
  %201 = tail call i64 @memcmp(ptr %200, ptr nonnull %197, i64 3)
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %if.entry87, label %ifend89

if.entry87:                                       ; preds = %ifend.i265
  %203 = tail call ptr @malloc(i32 9)
  store i64 4, ptr %203, align 4
  %memberidx.i258 = getelementptr inbounds %IntType, ptr %203, i64 0, i32 1
  store i1 true, ptr %memberidx.i258, align 1
  br label %common.ret

ifend89:                                          ; preds = %ifend86, %ifend.i265
  %204 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %204, ptr noundef nonnull align 8 dereferenceable(3) @153, i64 3, i1 false)
  %205 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %205, align 8
  %memberidx.i.i255 = getelementptr inbounds %string, ptr %205, i64 0, i32 1
  store ptr %204, ptr %memberidx.i.i255, align 8
  %memberidx1.i.i256 = getelementptr inbounds %string, ptr %205, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i256, align 4
  %memberidx2.i.i257 = getelementptr inbounds %string, ptr %205, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i257, align 4
  %206 = load i64, ptr %memberidx.i390, align 4
  %.not.i249 = icmp eq i64 %206, 3
  br i1 %.not.i249, label %ifend.i253, label %ifend92

ifend.i253:                                       ; preds = %ifend89
  %memberidx2.i251 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %207 = load ptr, ptr %memberidx2.i251, align 8
  %208 = tail call i64 @memcmp(ptr %207, ptr nonnull %204, i64 3)
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %if.entry90, label %ifend92

if.entry90:                                       ; preds = %ifend.i253
  %210 = tail call ptr @malloc(i32 9)
  store i64 5, ptr %210, align 4
  %memberidx.i246 = getelementptr inbounds %IntType, ptr %210, i64 0, i32 1
  store i1 true, ptr %memberidx.i246, align 1
  br label %common.ret

ifend92:                                          ; preds = %ifend89, %ifend.i253
  %211 = tail call ptr @malloc(i32 4)
  store i32 942813545, ptr %211, align 8
  %212 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %212, align 8
  %memberidx.i.i243 = getelementptr inbounds %string, ptr %212, i64 0, i32 1
  store ptr %211, ptr %memberidx.i.i243, align 8
  %memberidx1.i.i244 = getelementptr inbounds %string, ptr %212, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i244, align 4
  %memberidx2.i.i245 = getelementptr inbounds %string, ptr %212, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i245, align 4
  %213 = load i64, ptr %memberidx.i390, align 4
  %.not.i237 = icmp eq i64 %213, 4
  br i1 %.not.i237, label %ifend.i241, label %ifend95

ifend.i241:                                       ; preds = %ifend92
  %memberidx2.i239 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %214 = load ptr, ptr %memberidx2.i239, align 8
  %215 = tail call i64 @memcmp(ptr %214, ptr nonnull %211, i64 4)
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %if.entry93, label %ifend95

if.entry93:                                       ; preds = %ifend.i241
  %217 = tail call ptr @malloc(i32 9)
  store i64 7, ptr %217, align 4
  %memberidx.i234 = getelementptr inbounds %IntType, ptr %217, i64 0, i32 1
  store i1 true, ptr %memberidx.i234, align 1
  br label %common.ret

ifend95:                                          ; preds = %ifend92, %ifend.i241
  %218 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %218, ptr noundef nonnull align 8 dereferenceable(3) @74, i64 3, i1 false)
  %219 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %219, align 8
  %memberidx.i.i231 = getelementptr inbounds %string, ptr %219, i64 0, i32 1
  store ptr %218, ptr %memberidx.i.i231, align 8
  %memberidx1.i.i232 = getelementptr inbounds %string, ptr %219, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i232, align 4
  %memberidx2.i.i233 = getelementptr inbounds %string, ptr %219, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i233, align 4
  %220 = load i64, ptr %memberidx.i390, align 4
  %.not.i225 = icmp eq i64 %220, 3
  br i1 %.not.i225, label %ifend.i229, label %ifend98

ifend.i229:                                       ; preds = %ifend95
  %memberidx2.i227 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %221 = load ptr, ptr %memberidx2.i227, align 8
  %222 = tail call i64 @memcmp(ptr %221, ptr nonnull %218, i64 3)
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %if.entry96, label %ifend98

if.entry96:                                       ; preds = %ifend.i229
  %224 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %224, align 4
  %memberidx.i222 = getelementptr inbounds %IntType, ptr %224, i64 0, i32 1
  store i1 true, ptr %memberidx.i222, align 1
  br label %common.ret

ifend98:                                          ; preds = %ifend95, %ifend.i229
  %225 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %225, ptr noundef nonnull align 8 dereferenceable(3) @81, i64 3, i1 false)
  %226 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %226, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %226, i64 0, i32 1
  store ptr %225, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %226, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %226, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i221, align 4
  %227 = load i64, ptr %memberidx.i390, align 4
  %.not.i213 = icmp eq i64 %227, 3
  br i1 %.not.i213, label %ifend.i217, label %ifend101

ifend.i217:                                       ; preds = %ifend98
  %memberidx2.i215 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %228 = load ptr, ptr %memberidx2.i215, align 8
  %229 = tail call i64 @memcmp(ptr %228, ptr nonnull %225, i64 3)
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %if.entry99, label %ifend101

if.entry99:                                       ; preds = %ifend.i217
  %231 = tail call ptr @malloc(i32 8)
  store i64 8, ptr %231, align 4
  br label %common.ret

ifend101:                                         ; preds = %ifend98, %ifend.i217
  %232 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %232, ptr noundef nonnull align 8 dereferenceable(3) @82, i64 3, i1 false)
  %233 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %233, align 8
  %memberidx.i.i208 = getelementptr inbounds %string, ptr %233, i64 0, i32 1
  store ptr %232, ptr %memberidx.i.i208, align 8
  %memberidx1.i.i209 = getelementptr inbounds %string, ptr %233, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i209, align 4
  %memberidx2.i.i210 = getelementptr inbounds %string, ptr %233, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i210, align 4
  %234 = load i64, ptr %memberidx.i390, align 4
  %.not.i202 = icmp eq i64 %234, 3
  br i1 %.not.i202, label %ifend.i206, label %ifend104

ifend.i206:                                       ; preds = %ifend101
  %memberidx2.i204 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %235 = load ptr, ptr %memberidx2.i204, align 8
  %236 = tail call i64 @memcmp(ptr %235, ptr nonnull %232, i64 3)
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %if.entry102, label %ifend104

if.entry102:                                      ; preds = %ifend.i206
  %238 = tail call ptr @malloc(i32 8)
  store i64 9, ptr %238, align 4
  br label %common.ret

ifend104:                                         ; preds = %ifend101, %ifend.i206
  %239 = tail call ptr @malloc(i32 4)
  store i32 1684631414, ptr %239, align 8
  %240 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %240, align 8
  %memberidx.i.i197 = getelementptr inbounds %string, ptr %240, i64 0, i32 1
  store ptr %239, ptr %memberidx.i.i197, align 8
  %memberidx1.i.i198 = getelementptr inbounds %string, ptr %240, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i198, align 4
  %memberidx2.i.i199 = getelementptr inbounds %string, ptr %240, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i199, align 4
  %241 = load i64, ptr %memberidx.i390, align 4
  %.not.i195 = icmp eq i64 %241, 4
  br i1 %.not.i195, label %ifend.i, label %ifend107

ifend.i:                                          ; preds = %ifend104
  %memberidx2.i196 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  %242 = load ptr, ptr %memberidx2.i196, align 8
  %243 = tail call i64 @memcmp(ptr %242, ptr nonnull %239, i64 4)
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %if.entry105, label %ifend107

if.entry105:                                      ; preds = %ifend.i
  %245 = tail call ptr @malloc(i32 8)
  store i64 10, ptr %245, align 4
  br label %common.ret

ifend107:                                         ; preds = %ifend104, %ifend.i
  %memberidx108 = getelementptr inbounds %RecordTypeNode, ptr %1, i64 0, i32 3
  %246 = load ptr, ptr %memberidx108, align 8
  %memberidx109 = getelementptr inbounds %Array_TypeNode_, ptr %246, i64 0, i32 2
  %247 = load i64, ptr %memberidx109, align 4
  %248 = icmp sgt i64 %247, 0
  br i1 %248, label %for.entry113, label %ifend112

ifend112:                                         ; preds = %ifend128, %ifend107
  %249 = load ptr, ptr %memberidx53, align 8
  %250 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %249)
  %251 = load i64, ptr %250, align 4
  %252 = icmp eq i64 %251, 20
  br i1 %252, label %if.entry138, label %common.ret

for.entry113:                                     ; preds = %ifend107
  %253 = tail call ptr @malloc(i32 25)
  %memberidx.i189 = getelementptr inbounds %Array_TypeNode_, ptr %246, i64 0, i32 1
  %254 = load ptr, ptr %memberidx.i189, align 8
  %255 = load i64, ptr %memberidx109, align 4
  store i1 false, ptr %253, align 1
  %memberidx1.i.i191 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %253, i64 0, i32 1
  %memberidx2.i.i192 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %253, i64 0, i32 3
  store ptr %254, ptr %memberidx2.i.i192, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %253, i64 0, i32 2
  store i64 %255, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i191, align 4
  %256 = icmp slt i64 %255, 1
  br i1 %256, label %for.end120, label %for.body118

for.body118:                                      ; preds = %for.entry113, %Array_Type____sl__.exit
  %257 = phi i64 [ %268, %Array_Type____sl__.exit ], [ 1, %for.entry113 ]
  %storemerge527.in = phi ptr [ %ptridx.i, %Array_Type____sl__.exit ], [ %254, %for.entry113 ]
  %storemerge527 = load ptr, ptr %storemerge527.in, align 8
  %258 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %storemerge527)
  %259 = load i64, ptr %memberidx.i403, align 4
  %260 = load i64, ptr %memberidx1.i404, align 4
  %.not.i = icmp slt i64 %259, %260
  br i1 %.not.i, label %for.body118.Array_Type____sl__.exit_crit_edge, label %if.entry.i

for.body118.Array_Type____sl__.exit_crit_edge:    ; preds = %for.body118
  %.pre530 = load ptr, ptr %memberidx2.i405, align 8
  br label %Array_Type____sl__.exit

if.entry.i:                                       ; preds = %for.body118
  %261 = shl nuw i64 %260, 1
  store i64 %261, ptr %memberidx1.i404, align 4
  %262 = load ptr, ptr %memberidx2.i405, align 8
  %263 = shl i64 %260, 4
  %264 = tail call ptr @realloc(ptr %262, i64 %263)
  store ptr %264, ptr %memberidx2.i405, align 8
  %.pre = load i64, ptr %memberidx.i403, align 4
  br label %Array_Type____sl__.exit

Array_Type____sl__.exit:                          ; preds = %for.body118.Array_Type____sl__.exit_crit_edge, %if.entry.i
  %265 = phi ptr [ %.pre530, %for.body118.Array_Type____sl__.exit_crit_edge ], [ %264, %if.entry.i ]
  %266 = phi i64 [ %259, %for.body118.Array_Type____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %267 = add nsw i64 %266, 1
  store i64 %267, ptr %memberidx.i403, align 4
  %ptridx.i184 = getelementptr inbounds ptr, ptr %265, i64 %266
  store ptr %258, ptr %ptridx.i184, align 8
  %268 = add nuw nsw i64 %257, 1
  store i64 %268, ptr %memberidx1.i.i191, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %254, i64 %257
  %.not543 = icmp slt i64 %257, %255
  br i1 %.not543, label %for.body118, label %for.end120

for.end120:                                       ; preds = %Array_Type____sl__.exit, %for.entry113
  tail call void @free(ptr nonnull %253)
  %memberidx.i175 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %269 = load ptr, ptr %memberidx.i175, align 8
  %memberidx1.i176 = getelementptr inbounds %Compiler, ptr %269, i64 0, i32 6
  %270 = load ptr, ptr %memberidx1.i176, align 8
  %memberidx2.i177 = getelementptr inbounds %Array_FloError_, ptr %270, i64 0, i32 2
  %271 = load i64, ptr %memberidx2.i177, align 4
  %272 = icmp sgt i64 %271, 0
  br i1 %272, label %common.ret, label %ifend124

ifend124:                                         ; preds = %for.end120
  %273 = load ptr, ptr %memberidx53, align 8
  %274 = tail call fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr nonnull %0, ptr %273, ptr nonnull %115)
  %275 = load ptr, ptr %memberidx.i175, align 8
  %memberidx1.i173 = getelementptr inbounds %Compiler, ptr %275, i64 0, i32 6
  %276 = load ptr, ptr %memberidx1.i173, align 8
  %memberidx2.i174 = getelementptr inbounds %Array_FloError_, ptr %276, i64 0, i32 2
  %277 = load i64, ptr %memberidx2.i174, align 4
  %278 = icmp sgt i64 %277, 0
  br i1 %278, label %if.entry126, label %ifend128

if.entry126:                                      ; preds = %ifend124
  %memberidx.i171 = getelementptr inbounds %Array_FloError_, ptr %276, i64 0, i32 1
  %279 = load ptr, ptr %memberidx.i171, align 8
  %280 = load ptr, ptr %279, align 8
  %memberidx131 = getelementptr inbounds %FloError, ptr %280, i64 0, i32 2
  %281 = load ptr, ptr %1, align 8
  store ptr %281, ptr %memberidx131, align 8
  br label %ifend128

ifend128:                                         ; preds = %ifend124, %if.entry126
  %.not = icmp eq ptr %274, null
  br i1 %.not, label %ifend112, label %common.ret

if.entry138:                                      ; preds = %ifend112
  %282 = load ptr, ptr %118, align 8
  %memberidx141 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %282, i64 0, i32 5
  %283 = load ptr, ptr %memberidx141, align 8
  %284 = tail call ptr %283(ptr nonnull %118)
  %285 = alloca ptr, align 8
  %286 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %285, ptr nonnull @154, ptr %284)
  %287 = load ptr, ptr %285, align 8
  %288 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %288, align 8
  %memberidx.i169 = getelementptr inbounds %string, ptr %288, i64 0, i32 1
  store ptr %287, ptr %memberidx.i169, align 8
  %memberidx1.i170 = getelementptr inbounds %string, ptr %288, i64 0, i32 2
  store i64 %286, ptr %memberidx1.i170, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %288, i64 0, i32 3
  store i64 %286, ptr %memberidx2.i, align 4
  tail call void @free(ptr %284)
  %memberidx142 = getelementptr inbounds %Token, ptr %117, i64 0, i32 1
  %289 = load ptr, ptr %memberidx142, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %290 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %290, i64 0, i32 6
  %291 = load ptr, ptr %memberidx1.i, align 8
  %292 = call ptr @malloc(i32 24)
  store i64 5, ptr %292, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %292, i64 0, i32 2
  store ptr %289, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %292, i64 0, i32 1
  store ptr %288, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %291, i64 0, i32 2
  %293 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %291, i64 0, i32 3
  %294 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %293, %294
  br i1 %.not.i.i, label %if.entry138.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry138.TypeChecker_error.exit_crit_edge:     ; preds = %if.entry138
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %291, i64 0, i32 1
  %.pre532 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry138
  %295 = shl nuw i64 %294, 1
  store i64 %295, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %291, i64 0, i32 1
  %296 = load ptr, ptr %memberidx2.i.i.i, align 8
  %297 = shl i64 %294, 4
  %298 = call ptr @realloc(ptr %296, i64 %297)
  store ptr %298, ptr %memberidx2.i.i.i, align 8
  %.pre531 = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry138.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %299 = phi ptr [ %.pre532, %if.entry138.TypeChecker_error.exit_crit_edge ], [ %298, %if.entry.i.i ]
  %300 = phi i64 [ %293, %if.entry138.TypeChecker_error.exit_crit_edge ], [ %.pre531, %if.entry.i.i ]
  %301 = add nsw i64 %300, 1
  store i64 %301, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %299, i64 %300
  store ptr %292, ptr %ptridx.i.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_for_statement(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 48)
  store i64 3, ptr %3, align 4
  %memberidx.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 1
  %memberidx1.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 2
  %memberidx2.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 3
  %memberidx3.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %memberidx.i, i8 0, i64 32, i1 false)
  %4 = tail call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i111 = getelementptr inbounds %Scope, ptr %4, i64 0, i32 5
  %memberidx1.i112 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1.i112, align 8
  store ptr %5, ptr %memberidx.i111, align 8
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %memberidx1.i112, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %7 = load i1, ptr %memberidx2, align 1
  %memberidx3 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 6
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %memberidx4 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 2
  %10 = load ptr, ptr %memberidx4, align 8
  %.not = icmp eq ptr %10, null
  br i1 %.not, label %ifend7, label %if.entry5

else:                                             ; preds = %2
  %11 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %11, align 4
  %memberidx22 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 5
  %12 = load ptr, ptr %memberidx22, align 8
  %13 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr nonnull %11, ptr %12)
  %memberidx.i113 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %14 = load ptr, ptr %memberidx.i113, align 8
  %memberidx1.i114 = getelementptr inbounds %Compiler, ptr %14, i64 0, i32 6
  %15 = load ptr, ptr %memberidx1.i114, align 8
  %memberidx2.i115 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx2.i115, align 4
  %17 = icmp sgt i64 %16, 0
  br i1 %17, label %common.ret, label %ifend25

ifend.sink.split:                                 ; preds = %get_class_prop_type.exit269, %if.entry17
  %.sink = phi ptr [ %37, %if.entry17 ], [ %241, %get_class_prop_type.exit269 ]
  store ptr %.sink, ptr %memberidx3.i, align 8
  br label %ifend

ifend:                                            ; preds = %ifend.sink.split, %ifend13
  %memberidx.i116 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %18 = load ptr, ptr %memberidx.i116, align 8
  %memberidx1.i117 = getelementptr inbounds %Compiler, ptr %18, i64 0, i32 6
  %19 = load ptr, ptr %memberidx1.i117, align 8
  %memberidx2.i118 = getelementptr inbounds %Array_FloError_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i118, align 4
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %common.ret, label %ifend61

if.entry5:                                        ; preds = %if.entry
  %22 = tail call fastcc ptr @TypeChecker_check_statement(ptr nonnull %0, ptr nonnull %10)
  store ptr %22, ptr %memberidx1.i, align 8
  br label %ifend7

ifend7:                                           ; preds = %if.entry, %if.entry5
  %memberidx10 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 3
  %23 = load ptr, ptr %memberidx10, align 8
  %.not109 = icmp eq ptr %23, null
  br i1 %.not109, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend7
  %24 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %24, align 4
  %25 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr nonnull %24, ptr nonnull %23)
  %memberidx.i.i298 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %26 = load ptr, ptr %memberidx.i.i298, align 8
  %memberidx1.i.i299 = getelementptr inbounds %Compiler, ptr %26, i64 0, i32 6
  %27 = load ptr, ptr %memberidx1.i.i299, align 8
  %memberidx2.i.i300 = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i.i300, align 4
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %TypeChecker_check_condition.exit, label %ifend.i303

ifend.i303:                                       ; preds = %if.entry11
  %memberidx.i302 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %30 = load ptr, ptr %memberidx.i302, align 8
  %31 = load i64, ptr %30, align 4
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %TypeChecker_check_condition.exit, label %true_block.i

true_block.i:                                     ; preds = %ifend.i303
  %33 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %33, align 4
  %34 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %34, align 4
  %memberidx.i.i.i.i304 = getelementptr inbounds %Expression, ptr %34, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i304, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %34, i64 0, i32 1
  %memberidx.i.i.i305 = getelementptr inbounds %TypeCastExpression, ptr %34, i64 0, i32 4
  store ptr %25, ptr %memberidx.i.i.i305, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %34, i64 0, i32 3
  store ptr %33, ptr %memberidx1.i.i.i, align 8
  %memberidx3.i.i.i307 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 1
  %35 = load i1, ptr %memberidx3.i.i.i307, align 1
  store i1 %35, ptr %memberidx1.i.i.i.i, align 1
  br label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i303, %if.entry11, %true_block.i
  %common.ret.op.i301 = phi ptr [ null, %if.entry11 ], [ %34, %true_block.i ], [ %25, %ifend.i303 ]
  store ptr %common.ret.op.i301, ptr %memberidx2.i, align 8
  br label %ifend13

ifend13:                                          ; preds = %ifend7, %TypeChecker_check_condition.exit
  %memberidx16 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 4
  %36 = load ptr, ptr %memberidx16, align 8
  %.not110 = icmp eq ptr %36, null
  br i1 %.not110, label %ifend, label %if.entry17

if.entry17:                                       ; preds = %ifend13
  %37 = tail call fastcc ptr @TypeChecker_check_statement(ptr nonnull %0, ptr nonnull %36)
  br label %ifend.sink.split

common.ret:                                       ; preds = %ifend, %else, %ifend61, %TypeChecker_error.exit147, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit147 ], [ %3, %ifend61 ], [ null, %else ], [ null, %ifend ]
  ret ptr %common.ret.op

ifend25:                                          ; preds = %else
  %memberidx26 = getelementptr inbounds %Expression, ptr %13, i64 0, i32 3
  %38 = load ptr, ptr %memberidx26, align 8
  %39 = load i64, ptr %38, align 4
  %40 = icmp eq i64 %39, 19
  br i1 %40, label %if.entry.i317, label %is_object.exit.thread

if.entry.i317:                                    ; preds = %ifend25, %if.entry.i317
  %.tr5.i = phi ptr [ %41, %if.entry.i317 ], [ %38, %ifend25 ]
  %memberidx1.i316 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %41 = load ptr, ptr %memberidx1.i316, align 8
  %42 = load i64, ptr %41, align 4
  switch i64 %42, label %if.entry27 [
    i64 19, label %if.entry.i317
    i64 11, label %ifend29
  ]

is_object.exit.thread:                            ; preds = %ifend25
  %43 = icmp eq i64 %39, 11
  br i1 %43, label %ifend29.thread, label %if.entry27

ifend29.thread:                                   ; preds = %is_object.exit.thread
  %44 = load ptr, ptr %0, align 8
  br label %if.entry3.i

if.entry27:                                       ; preds = %if.entry.i317, %is_object.exit.thread
  %45 = tail call ptr @malloc(i32 28)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %45, ptr noundef nonnull align 8 dereferenceable(28) @212, i64 28, i1 false)
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 28, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 28, ptr %memberidx2.i.i, align 4
  %47 = load ptr, ptr %memberidx22, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %memberidx.i113, align 8
  %memberidx1.i120 = getelementptr inbounds %Compiler, ptr %49, i64 0, i32 6
  %50 = load ptr, ptr %memberidx1.i120, align 8
  %51 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %51, align 4
  %memberidx1.i.i121 = getelementptr inbounds %FloError, ptr %51, i64 0, i32 2
  store ptr %48, ptr %memberidx1.i.i121, align 8
  %memberidx2.i.i122 = getelementptr inbounds %FloError, ptr %51, i64 0, i32 1
  store ptr %46, ptr %memberidx2.i.i122, align 8
  %memberidx.i.i123 = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 2
  %52 = load i64, ptr %memberidx.i.i123, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 3
  %53 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %52, %53
  br i1 %.not.i.i, label %if.entry27.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry27.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry27
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %.pre348 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry27
  %54 = shl nuw i64 %53, 1
  store i64 %54, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %55 = load ptr, ptr %memberidx2.i.i.i, align 8
  %56 = shl i64 %53, 4
  %57 = tail call ptr @realloc(ptr %55, i64 %56)
  store ptr %57, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i123, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry27.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %58 = phi ptr [ %.pre348, %if.entry27.TypeChecker_error.exit_crit_edge ], [ %57, %if.entry.i.i ]
  %59 = phi i64 [ %52, %if.entry27.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %60 = add nsw i64 %59, 1
  store i64 %60, ptr %memberidx.i.i123, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %58, i64 %59
  store ptr %51, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend29:                                          ; preds = %if.entry.i317
  %61 = load ptr, ptr %0, align 8
  br i1 %40, label %if.entry.i321, label %if.entry3.i

if.entry.i321:                                    ; preds = %ifend29, %if.entry.i321
  %.tr11.i345 = phi ptr [ %62, %if.entry.i321 ], [ %38, %ifend29 ]
  %memberidx1.i320 = getelementptr inbounds %GenericType, ptr %.tr11.i345, i64 0, i32 3
  %62 = load ptr, ptr %memberidx1.i320, align 8
  %63 = load i64, ptr %62, align 4
  %switch = icmp eq i64 %63, 19
  br i1 %switch, label %if.entry.i321, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i321, %ifend29.thread, %ifend29
  %64 = phi ptr [ %61, %ifend29 ], [ %44, %ifend29.thread ], [ %61, %if.entry.i321 ]
  %.tr11.i.lcssa = phi ptr [ %38, %ifend29 ], [ %38, %ifend29.thread ], [ %62, %if.entry.i321 ]
  %memberidx6.i322 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %65 = load ptr, ptr %memberidx6.i322, align 8
  %memberidx.i.i323 = getelementptr inbounds %Program, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i323, align 8
  %67 = load i64, ptr %65, align 4
  %memberidx.i.i.i324 = getelementptr inbounds %Array_Module_, ptr %66, i64 0, i32 1
  %68 = load ptr, ptr %memberidx.i.i.i324, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %68, i64 %67
  %69 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i325 = getelementptr inbounds %Module, ptr %69, i64 0, i32 4
  %70 = load ptr, ptr %memberidx2.i.i325, align 8
  %memberidx3.i.i326 = getelementptr inbounds %TypeId, ptr %65, i64 0, i32 2
  %71 = load i64, ptr %memberidx3.i.i326, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %72, i64 %71
  %73 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx34 = getelementptr inbounds %Class, ptr %73, i64 0, i32 6
  %74 = load ptr, ptr %memberidx34, align 8
  %75 = tail call ptr @malloc(i32 8)
  store i64 6872337336460992351, ptr %75, align 8
  %76 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %76, align 8
  %memberidx.i.i124 = getelementptr inbounds %string, ptr %76, i64 0, i32 1
  store ptr %75, ptr %memberidx.i.i124, align 8
  %memberidx1.i.i125 = getelementptr inbounds %string, ptr %76, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i125, align 4
  %memberidx2.i.i126 = getelementptr inbounds %string, ptr %76, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i126, align 4
  %77 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %76)
  %memberidx.i127 = getelementptr inbounds %Map_string_PropId_, ptr %74, i64 0, i32 1
  %78 = load i64, ptr %memberidx.i127, align 4
  %79 = urem i64 %77, %78
  %80 = load ptr, ptr %74, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %80, i64 %79
  %81 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %81, null
  br i1 %.not.i, label %if.entry35, label %while.entry.i

while.entry.i:                                    ; preds = %if.entry3.i, %else.i
  %82 = phi ptr [ %92, %else.i ], [ %80, %if.entry3.i ]
  %83 = phi i64 [ %93, %else.i ], [ %78, %if.entry3.i ]
  %84 = phi ptr [ %96, %else.i ], [ %81, %if.entry3.i ]
  %hash.0.i = phi i64 [ %95, %else.i ], [ %79, %if.entry3.i ]
  %85 = load ptr, ptr %84, align 8
  %memberidx.i.i128 = getelementptr inbounds %string, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx.i.i128, align 4
  %87 = load i64, ptr %memberidx1.i.i125, align 4
  %.not.i.i130 = icmp eq i64 %86, %87
  br i1 %.not.i.i130, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i131 = getelementptr inbounds %string, ptr %85, i64 0, i32 1
  %88 = load ptr, ptr %memberidx2.i.i131, align 8
  %89 = load ptr, ptr %memberidx.i.i124, align 8
  %90 = tail call i64 @memcmp(ptr %88, ptr %89, i64 %86)
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre349 = load i64, ptr %memberidx.i127, align 4
  %.pre350 = load ptr, ptr %74, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre351.pre = load ptr, ptr %74, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre351.pre, i64 %hash.0.i
  %.pre352.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre352.pre, null
  br i1 %.not29.i, label %if.entry35, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %92 = phi ptr [ %.pre350, %ifend.i.i.else.i_crit_edge ], [ %82, %while.entry.i ]
  %93 = phi i64 [ %.pre349, %ifend.i.i.else.i_crit_edge ], [ %83, %while.entry.i ]
  %94 = add nuw i64 %hash.0.i, 1
  %95 = urem i64 %94, %93
  %ptridx7.i = getelementptr inbounds ptr, ptr %92, i64 %95
  %96 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %96, null
  br i1 %.not30.i, label %if.entry35, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre352.pre, i64 0, i32 1
  %97 = load ptr, ptr %memberidx15.i, align 8
  %98 = icmp eq ptr %97, null
  br i1 %98, label %if.entry35, label %ifend37

if.entry35:                                       ; preds = %else.i, %if.entry3.i, %while.end.i, %Map_string_PropId____getitem__.exit
  %99 = tail call ptr @malloc(i32 46)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(46) %99, ptr noundef nonnull align 8 dereferenceable(46) @213, i64 46, i1 false)
  %100 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %100, align 8
  %memberidx.i.i132 = getelementptr inbounds %string, ptr %100, i64 0, i32 1
  store ptr %99, ptr %memberidx.i.i132, align 8
  %memberidx1.i.i133 = getelementptr inbounds %string, ptr %100, i64 0, i32 2
  store i64 46, ptr %memberidx1.i.i133, align 4
  %memberidx2.i.i134 = getelementptr inbounds %string, ptr %100, i64 0, i32 3
  store i64 46, ptr %memberidx2.i.i134, align 4
  %101 = load ptr, ptr %memberidx22, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %memberidx.i113, align 8
  %memberidx1.i136 = getelementptr inbounds %Compiler, ptr %103, i64 0, i32 6
  %104 = load ptr, ptr %memberidx1.i136, align 8
  %105 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %105, align 4
  %memberidx1.i.i137 = getelementptr inbounds %FloError, ptr %105, i64 0, i32 2
  store ptr %102, ptr %memberidx1.i.i137, align 8
  %memberidx2.i.i138 = getelementptr inbounds %FloError, ptr %105, i64 0, i32 1
  store ptr %100, ptr %memberidx2.i.i138, align 8
  %memberidx.i.i139 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 2
  %106 = load i64, ptr %memberidx.i.i139, align 4
  %memberidx1.i2.i140 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 3
  %107 = load i64, ptr %memberidx1.i2.i140, align 4
  %.not.i.i141 = icmp slt i64 %106, %107
  br i1 %.not.i.i141, label %if.entry35.TypeChecker_error.exit147_crit_edge, label %if.entry.i.i144

if.entry35.TypeChecker_error.exit147_crit_edge:   ; preds = %if.entry35
  %memberidx4.i.i145.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 1
  %.pre362 = load ptr, ptr %memberidx4.i.i145.phi.trans.insert, align 8
  br label %TypeChecker_error.exit147

if.entry.i.i144:                                  ; preds = %if.entry35
  %108 = shl nuw i64 %107, 1
  store i64 %108, ptr %memberidx1.i2.i140, align 4
  %memberidx2.i.i.i143 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 1
  %109 = load ptr, ptr %memberidx2.i.i.i143, align 8
  %110 = shl i64 %107, 4
  %111 = tail call ptr @realloc(ptr %109, i64 %110)
  store ptr %111, ptr %memberidx2.i.i.i143, align 8
  %.pre361 = load i64, ptr %memberidx.i.i139, align 4
  br label %TypeChecker_error.exit147

TypeChecker_error.exit147:                        ; preds = %if.entry35.TypeChecker_error.exit147_crit_edge, %if.entry.i.i144
  %112 = phi ptr [ %.pre362, %if.entry35.TypeChecker_error.exit147_crit_edge ], [ %111, %if.entry.i.i144 ]
  %113 = phi i64 [ %106, %if.entry35.TypeChecker_error.exit147_crit_edge ], [ %.pre361, %if.entry.i.i144 ]
  %114 = add nsw i64 %113, 1
  store i64 %114, ptr %memberidx.i.i139, align 4
  %ptridx.i.i146 = getelementptr inbounds ptr, ptr %112, i64 %113
  store ptr %105, ptr %ptridx.i.i146, align 8
  br label %common.ret

ifend37:                                          ; preds = %Map_string_PropId____getitem__.exit
  %115 = load ptr, ptr %0, align 8
  %memberidx.i.i148 = getelementptr inbounds %PropId, ptr %97, i64 0, i32 1
  %116 = load ptr, ptr %memberidx.i.i148, align 8
  %memberidx.i.i.i149 = getelementptr inbounds %Program, ptr %115, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i.i.i149, align 8
  %118 = load i64, ptr %116, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %117, i64 0, i32 1
  %119 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %119, i64 %118
  %120 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i150 = getelementptr inbounds %Module, ptr %120, i64 0, i32 4
  %121 = load ptr, ptr %memberidx2.i.i.i150, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %116, i64 0, i32 2
  %122 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %121, i64 0, i32 1
  %123 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %123, i64 %122
  %124 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %125 = load i64, ptr %97, align 4
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend37
  %memberidx1.i152 = getelementptr inbounds %Class, ptr %124, i64 0, i32 5
  %127 = load ptr, ptr %memberidx1.i152, align 8
  %memberidx2.i153 = getelementptr inbounds %PropId, ptr %97, i64 0, i32 2
  %128 = load i64, ptr %memberidx2.i153, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %127, i64 0, i32 1
  %129 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %129, i64 %128
  %130 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i154 = getelementptr inbounds %ClassMethod, ptr %130, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend37
  %memberidx4.i = getelementptr inbounds %Class, ptr %124, i64 0, i32 4
  %131 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %97, i64 0, i32 2
  %132 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %131, i64 0, i32 1
  %133 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i155 = getelementptr inbounds ptr, ptr %133, i64 %132
  %134 = load ptr, ptr %ptridx.i.i155, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %134, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i154, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i151 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx41 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i151, i64 0, i32 2
  %135 = load ptr, ptr %memberidx41, align 8
  %136 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %136, ptr noundef nonnull align 8 dereferenceable(6) @214, i64 6, i1 false)
  %137 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %137, align 8
  %memberidx.i.i156 = getelementptr inbounds %string, ptr %137, i64 0, i32 1
  store ptr %136, ptr %memberidx.i.i156, align 8
  %memberidx1.i.i157 = getelementptr inbounds %string, ptr %137, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i157, align 4
  %memberidx2.i.i158 = getelementptr inbounds %string, ptr %137, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i158, align 4
  %138 = tail call ptr @malloc(i32 41)
  %139 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %139, align 4
  %memberidx.i.i159 = getelementptr inbounds %Expression, ptr %139, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i159, align 4
  %memberidx1.i.i160 = getelementptr inbounds %Expression, ptr %139, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i160, align 1
  %memberidx.i161 = getelementptr inbounds %MemberExpression, ptr %139, i64 0, i32 4
  store ptr %13, ptr %memberidx.i161, align 8
  %memberidx1.i162 = getelementptr inbounds %MemberExpression, ptr %139, i64 0, i32 5
  store ptr %97, ptr %memberidx1.i162, align 8
  %memberidx2.i163 = getelementptr inbounds %Expression, ptr %139, i64 0, i32 3
  store ptr %common.ret.op.i151, ptr %memberidx2.i163, align 8
  %140 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %140, align 8
  %memberidx.i164 = getelementptr inbounds %Array_Expression_, ptr %140, i64 0, i32 2
  store i64 0, ptr %memberidx.i164, align 4
  %memberidx1.i165 = getelementptr inbounds %Array_Expression_, ptr %140, i64 0, i32 3
  store i64 8, ptr %memberidx1.i165, align 4
  %memberidx2.i166 = getelementptr inbounds %Array_Expression_, ptr %140, i64 0, i32 1
  %141 = tail call ptr @malloc(i32 64)
  store ptr %141, ptr %memberidx2.i166, align 8
  store i64 0, ptr %memberidx.i164, align 4
  store i64 8, ptr %138, align 4
  %memberidx.i.i167 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i167, align 4
  %memberidx1.i.i168 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i168, align 1
  %memberidx.i169 = getelementptr inbounds %CallExpression, ptr %138, i64 0, i32 4
  store ptr %139, ptr %memberidx.i169, align 8
  %memberidx1.i170 = getelementptr inbounds %CallExpression, ptr %138, i64 0, i32 5
  store ptr %140, ptr %memberidx1.i170, align 8
  %memberidx2.i171 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 3
  store ptr %135, ptr %memberidx2.i171, align 8
  %142 = tail call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr nonnull %137, ptr nonnull %138, ptr %135)
  %memberidx44 = getelementptr inbounds %Var, ptr %142, i64 0, i32 1
  %143 = load ptr, ptr %memberidx44, align 8
  %144 = tail call ptr @malloc(i32 25)
  store i64 1, ptr %144, align 4
  %memberidx.i172 = getelementptr inbounds %VarDeclaration, ptr %144, i64 0, i32 2
  store ptr %143, ptr %memberidx.i172, align 8
  %memberidx1.i173 = getelementptr inbounds %VarDeclaration, ptr %144, i64 0, i32 1
  store ptr %137, ptr %memberidx1.i173, align 8
  %memberidx2.i174 = getelementptr inbounds %VarDeclaration, ptr %144, i64 0, i32 3
  store i1 false, ptr %memberidx2.i174, align 1
  store ptr %144, ptr %memberidx.i, align 8
  %145 = load ptr, ptr %0, align 8
  br label %tailrecurse.i328

tailrecurse.i328:                                 ; preds = %if.entry.i331, %get_class_prop_type.exit
  %.tr11.i327 = phi ptr [ %135, %get_class_prop_type.exit ], [ %147, %if.entry.i331 ]
  %146 = load i64, ptr %.tr11.i327, align 4
  switch i64 %146, label %get_class_from_type.exit341 [
    i64 19, label %if.entry.i331
    i64 11, label %if.entry3.i340
  ]

if.entry.i331:                                    ; preds = %tailrecurse.i328
  %memberidx1.i330 = getelementptr inbounds %GenericType, ptr %.tr11.i327, i64 0, i32 3
  %147 = load ptr, ptr %memberidx1.i330, align 8
  br label %tailrecurse.i328

if.entry3.i340:                                   ; preds = %tailrecurse.i328
  %memberidx6.i332 = getelementptr inbounds %ObjectType, ptr %.tr11.i327, i64 0, i32 1
  %148 = load ptr, ptr %memberidx6.i332, align 8
  %memberidx.i.i333 = getelementptr inbounds %Program, ptr %145, i64 0, i32 1
  %149 = load ptr, ptr %memberidx.i.i333, align 8
  %150 = load i64, ptr %148, align 4
  %memberidx.i.i.i334 = getelementptr inbounds %Array_Module_, ptr %149, i64 0, i32 1
  %151 = load ptr, ptr %memberidx.i.i.i334, align 8
  %ptridx.i.i.i335 = getelementptr inbounds ptr, ptr %151, i64 %150
  %152 = load ptr, ptr %ptridx.i.i.i335, align 8
  %memberidx2.i.i336 = getelementptr inbounds %Module, ptr %152, i64 0, i32 4
  %153 = load ptr, ptr %memberidx2.i.i336, align 8
  %memberidx3.i.i337 = getelementptr inbounds %TypeId, ptr %148, i64 0, i32 2
  %154 = load i64, ptr %memberidx3.i.i337, align 4
  %memberidx.i5.i.i338 = getelementptr inbounds %Array_Class_, ptr %153, i64 0, i32 1
  %155 = load ptr, ptr %memberidx.i5.i.i338, align 8
  %ptridx.i6.i.i339 = getelementptr inbounds ptr, ptr %155, i64 %154
  %156 = load ptr, ptr %ptridx.i6.i.i339, align 8
  br label %get_class_from_type.exit341

get_class_from_type.exit341:                      ; preds = %tailrecurse.i328, %if.entry3.i340
  %common.ret.op.i329 = phi ptr [ %156, %if.entry3.i340 ], [ null, %tailrecurse.i328 ]
  %memberidx47 = getelementptr inbounds %Class, ptr %common.ret.op.i329, i64 0, i32 6
  %157 = load ptr, ptr %memberidx47, align 8
  %158 = tail call ptr @malloc(i32 4)
  store i32 1701736292, ptr %158, align 8
  %159 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %159, align 8
  %memberidx.i.i175 = getelementptr inbounds %string, ptr %159, i64 0, i32 1
  store ptr %158, ptr %memberidx.i.i175, align 8
  %memberidx1.i.i176 = getelementptr inbounds %string, ptr %159, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i176, align 4
  %memberidx2.i.i177 = getelementptr inbounds %string, ptr %159, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i177, align 4
  %160 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %159)
  %memberidx.i178 = getelementptr inbounds %Map_string_PropId_, ptr %157, i64 0, i32 1
  %161 = load i64, ptr %memberidx.i178, align 4
  %162 = urem i64 %160, %161
  %163 = load ptr, ptr %157, align 8
  %ptridx.i179 = getelementptr inbounds ptr, ptr %163, i64 %162
  %164 = load ptr, ptr %ptridx.i179, align 8
  %.not.i180 = icmp eq ptr %164, null
  br i1 %.not.i180, label %Map_string_PropId____getitem__.exit202, label %while.entry.i186

while.entry.i186:                                 ; preds = %get_class_from_type.exit341, %else.i198
  %165 = phi ptr [ %175, %else.i198 ], [ %163, %get_class_from_type.exit341 ]
  %166 = phi i64 [ %176, %else.i198 ], [ %161, %get_class_from_type.exit341 ]
  %167 = phi ptr [ %179, %else.i198 ], [ %164, %get_class_from_type.exit341 ]
  %hash.0.i181 = phi i64 [ %178, %else.i198 ], [ %162, %get_class_from_type.exit341 ]
  %168 = load ptr, ptr %167, align 8
  %memberidx.i.i183 = getelementptr inbounds %string, ptr %168, i64 0, i32 2
  %169 = load i64, ptr %memberidx.i.i183, align 4
  %170 = load i64, ptr %memberidx1.i.i176, align 4
  %.not.i.i185 = icmp eq i64 %169, %170
  br i1 %.not.i.i185, label %ifend.i.i189, label %else.i198

ifend.i.i189:                                     ; preds = %while.entry.i186
  %memberidx2.i.i187 = getelementptr inbounds %string, ptr %168, i64 0, i32 1
  %171 = load ptr, ptr %memberidx2.i.i187, align 8
  %172 = load ptr, ptr %memberidx.i.i175, align 8
  %173 = tail call i64 @memcmp(ptr %171, ptr %172, i64 %169)
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %while.end.i195, label %ifend.i.i189.else.i198_crit_edge

ifend.i.i189.else.i198_crit_edge:                 ; preds = %ifend.i.i189
  %.pre353 = load i64, ptr %memberidx.i178, align 4
  %.pre354 = load ptr, ptr %157, align 8
  br label %else.i198

while.end.i195:                                   ; preds = %ifend.i.i189
  %.pre355.pre = load ptr, ptr %157, align 8
  %ptridx9.i193.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre355.pre, i64 %hash.0.i181
  %.pre356.pre = load ptr, ptr %ptridx9.i193.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i194 = icmp eq ptr %.pre356.pre, null
  br i1 %.not29.i194, label %Map_string_PropId____getitem__.exit202, label %if.entry10.i201

else.i198:                                        ; preds = %ifend.i.i189.else.i198_crit_edge, %while.entry.i186
  %175 = phi ptr [ %.pre354, %ifend.i.i189.else.i198_crit_edge ], [ %165, %while.entry.i186 ]
  %176 = phi i64 [ %.pre353, %ifend.i.i189.else.i198_crit_edge ], [ %166, %while.entry.i186 ]
  %177 = add nuw i64 %hash.0.i181, 1
  %178 = urem i64 %177, %176
  %ptridx7.i196 = getelementptr inbounds ptr, ptr %175, i64 %178
  %179 = load ptr, ptr %ptridx7.i196, align 8
  %.not30.i197 = icmp eq ptr %179, null
  br i1 %.not30.i197, label %Map_string_PropId____getitem__.exit202, label %while.entry.i186

if.entry10.i201:                                  ; preds = %while.end.i195
  %memberidx15.i200 = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre356.pre, i64 0, i32 1
  %180 = load ptr, ptr %memberidx15.i200, align 8
  br label %Map_string_PropId____getitem__.exit202

Map_string_PropId____getitem__.exit202:           ; preds = %else.i198, %get_class_from_type.exit341, %while.end.i195, %if.entry10.i201
  %common.ret.op.i199 = phi ptr [ %180, %if.entry10.i201 ], [ null, %while.end.i195 ], [ null, %get_class_from_type.exit341 ], [ null, %else.i198 ]
  %181 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %181, align 4
  %memberidx.i.i203 = getelementptr inbounds %Expression, ptr %181, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i203, align 4
  %memberidx1.i.i204 = getelementptr inbounds %Expression, ptr %181, i64 0, i32 1
  %memberidx.i205 = getelementptr inbounds %VarAccessExpression, ptr %181, i64 0, i32 4
  store ptr %143, ptr %memberidx.i205, align 8
  %memberidx1.i206 = getelementptr inbounds %Expression, ptr %181, i64 0, i32 3
  store ptr %135, ptr %memberidx1.i206, align 8
  %182 = load i64, ptr %143, align 4
  %183 = icmp eq i64 %182, 2
  store i1 %183, ptr %memberidx1.i.i204, align 1
  %184 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %184, align 4
  %185 = tail call ptr @malloc(i32 41)
  %186 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %186, align 4
  %memberidx.i.i208 = getelementptr inbounds %Expression, ptr %186, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i208, align 4
  %memberidx1.i.i209 = getelementptr inbounds %Expression, ptr %186, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i209, align 1
  %memberidx.i210 = getelementptr inbounds %MemberExpression, ptr %186, i64 0, i32 4
  store ptr %181, ptr %memberidx.i210, align 8
  %memberidx1.i211 = getelementptr inbounds %MemberExpression, ptr %186, i64 0, i32 5
  store ptr %common.ret.op.i199, ptr %memberidx1.i211, align 8
  %memberidx2.i212 = getelementptr inbounds %Expression, ptr %186, i64 0, i32 3
  store ptr %184, ptr %memberidx2.i212, align 8
  store i64 8, ptr %185, align 4
  %memberidx.i.i213 = getelementptr inbounds %Expression, ptr %185, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i213, align 4
  %memberidx1.i.i214 = getelementptr inbounds %Expression, ptr %185, i64 0, i32 1
  %memberidx.i215 = getelementptr inbounds %UnaryExpression, ptr %185, i64 0, i32 4
  store i64 7, ptr %memberidx.i215, align 4
  %memberidx1.i216 = getelementptr inbounds %UnaryExpression, ptr %185, i64 0, i32 5
  store ptr %186, ptr %memberidx1.i216, align 8
  %memberidx2.i217 = getelementptr inbounds %Expression, ptr %185, i64 0, i32 3
  store ptr %184, ptr %memberidx2.i217, align 8
  store i1 false, ptr %memberidx1.i.i214, align 1
  store ptr %185, ptr %memberidx2.i, align 8
  %memberidx49 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 7
  %187 = load ptr, ptr %memberidx49, align 8
  %memberidx50 = getelementptr inbounds %IdentifierToken, ptr %187, i64 0, i32 2
  %188 = load ptr, ptr %memberidx50, align 8
  %189 = load ptr, ptr %memberidx47, align 8
  %190 = tail call ptr @malloc(i32 4)
  store i32 1954047342, ptr %190, align 8
  %191 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %191, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %191, i64 0, i32 1
  store ptr %190, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %191, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %191, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i221, align 4
  %192 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %191)
  %memberidx.i222 = getelementptr inbounds %Map_string_PropId_, ptr %189, i64 0, i32 1
  %193 = load i64, ptr %memberidx.i222, align 4
  %194 = urem i64 %192, %193
  %195 = load ptr, ptr %189, align 8
  %ptridx.i223 = getelementptr inbounds ptr, ptr %195, i64 %194
  %196 = load ptr, ptr %ptridx.i223, align 8
  %.not.i224 = icmp eq ptr %196, null
  br i1 %.not.i224, label %Map_string_PropId____getitem__.exit246, label %while.entry.i230

while.entry.i230:                                 ; preds = %Map_string_PropId____getitem__.exit202, %else.i242
  %197 = phi ptr [ %207, %else.i242 ], [ %195, %Map_string_PropId____getitem__.exit202 ]
  %198 = phi i64 [ %208, %else.i242 ], [ %193, %Map_string_PropId____getitem__.exit202 ]
  %199 = phi ptr [ %211, %else.i242 ], [ %196, %Map_string_PropId____getitem__.exit202 ]
  %hash.0.i225 = phi i64 [ %210, %else.i242 ], [ %194, %Map_string_PropId____getitem__.exit202 ]
  %200 = load ptr, ptr %199, align 8
  %memberidx.i.i227 = getelementptr inbounds %string, ptr %200, i64 0, i32 2
  %201 = load i64, ptr %memberidx.i.i227, align 4
  %202 = load i64, ptr %memberidx1.i.i220, align 4
  %.not.i.i229 = icmp eq i64 %201, %202
  br i1 %.not.i.i229, label %ifend.i.i233, label %else.i242

ifend.i.i233:                                     ; preds = %while.entry.i230
  %memberidx2.i.i231 = getelementptr inbounds %string, ptr %200, i64 0, i32 1
  %203 = load ptr, ptr %memberidx2.i.i231, align 8
  %204 = load ptr, ptr %memberidx.i.i219, align 8
  %205 = tail call i64 @memcmp(ptr %203, ptr %204, i64 %201)
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %while.end.i239, label %ifend.i.i233.else.i242_crit_edge

ifend.i.i233.else.i242_crit_edge:                 ; preds = %ifend.i.i233
  %.pre357 = load i64, ptr %memberidx.i222, align 4
  %.pre358 = load ptr, ptr %189, align 8
  br label %else.i242

while.end.i239:                                   ; preds = %ifend.i.i233
  %.pre359.pre = load ptr, ptr %189, align 8
  %ptridx9.i237.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre359.pre, i64 %hash.0.i225
  %.pre360.pre = load ptr, ptr %ptridx9.i237.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i238 = icmp eq ptr %.pre360.pre, null
  br i1 %.not29.i238, label %Map_string_PropId____getitem__.exit246, label %if.entry10.i245

else.i242:                                        ; preds = %ifend.i.i233.else.i242_crit_edge, %while.entry.i230
  %207 = phi ptr [ %.pre358, %ifend.i.i233.else.i242_crit_edge ], [ %197, %while.entry.i230 ]
  %208 = phi i64 [ %.pre357, %ifend.i.i233.else.i242_crit_edge ], [ %198, %while.entry.i230 ]
  %209 = add nuw i64 %hash.0.i225, 1
  %210 = urem i64 %209, %208
  %ptridx7.i240 = getelementptr inbounds ptr, ptr %207, i64 %210
  %211 = load ptr, ptr %ptridx7.i240, align 8
  %.not30.i241 = icmp eq ptr %211, null
  br i1 %.not30.i241, label %Map_string_PropId____getitem__.exit246, label %while.entry.i230

if.entry10.i245:                                  ; preds = %while.end.i239
  %memberidx15.i244 = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre360.pre, i64 0, i32 1
  %212 = load ptr, ptr %memberidx15.i244, align 8
  br label %Map_string_PropId____getitem__.exit246

Map_string_PropId____getitem__.exit246:           ; preds = %else.i242, %Map_string_PropId____getitem__.exit202, %while.end.i239, %if.entry10.i245
  %common.ret.op.i243 = phi ptr [ %212, %if.entry10.i245 ], [ null, %while.end.i239 ], [ null, %Map_string_PropId____getitem__.exit202 ], [ null, %else.i242 ]
  %213 = load ptr, ptr %0, align 8
  %memberidx.i.i247 = getelementptr inbounds %PropId, ptr %common.ret.op.i243, i64 0, i32 1
  %214 = load ptr, ptr %memberidx.i.i247, align 8
  %memberidx.i.i.i248 = getelementptr inbounds %Program, ptr %213, i64 0, i32 1
  %215 = load ptr, ptr %memberidx.i.i.i248, align 8
  %216 = load i64, ptr %214, align 4
  %memberidx.i.i.i.i249 = getelementptr inbounds %Array_Module_, ptr %215, i64 0, i32 1
  %217 = load ptr, ptr %memberidx.i.i.i.i249, align 8
  %ptridx.i.i.i.i250 = getelementptr inbounds ptr, ptr %217, i64 %216
  %218 = load ptr, ptr %ptridx.i.i.i.i250, align 8
  %memberidx2.i.i.i251 = getelementptr inbounds %Module, ptr %218, i64 0, i32 4
  %219 = load ptr, ptr %memberidx2.i.i.i251, align 8
  %memberidx3.i.i.i252 = getelementptr inbounds %TypeId, ptr %214, i64 0, i32 2
  %220 = load i64, ptr %memberidx3.i.i.i252, align 4
  %memberidx.i5.i.i.i253 = getelementptr inbounds %Array_Class_, ptr %219, i64 0, i32 1
  %221 = load ptr, ptr %memberidx.i5.i.i.i253, align 8
  %ptridx.i6.i.i.i254 = getelementptr inbounds ptr, ptr %221, i64 %220
  %222 = load ptr, ptr %ptridx.i6.i.i.i254, align 8
  %223 = load i64, ptr %common.ret.op.i243, align 4
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %if.entry.i262, label %ifend.i268

if.entry.i262:                                    ; preds = %Map_string_PropId____getitem__.exit246
  %memberidx1.i257 = getelementptr inbounds %Class, ptr %222, i64 0, i32 5
  %225 = load ptr, ptr %memberidx1.i257, align 8
  %memberidx2.i258 = getelementptr inbounds %PropId, ptr %common.ret.op.i243, i64 0, i32 2
  %226 = load i64, ptr %memberidx2.i258, align 4
  %memberidx.i12.i259 = getelementptr inbounds %Array_ClassMethod_, ptr %225, i64 0, i32 1
  %227 = load ptr, ptr %memberidx.i12.i259, align 8
  %ptridx.i13.i260 = getelementptr inbounds ptr, ptr %227, i64 %226
  %228 = load ptr, ptr %ptridx.i13.i260, align 8
  %memberidx3.i261 = getelementptr inbounds %ClassMethod, ptr %228, i64 0, i32 4
  br label %get_class_prop_type.exit269

ifend.i268:                                       ; preds = %Map_string_PropId____getitem__.exit246
  %memberidx4.i263 = getelementptr inbounds %Class, ptr %222, i64 0, i32 4
  %229 = load ptr, ptr %memberidx4.i263, align 8
  %memberidx5.i264 = getelementptr inbounds %PropId, ptr %common.ret.op.i243, i64 0, i32 2
  %230 = load i64, ptr %memberidx5.i264, align 4
  %memberidx.i11.i265 = getelementptr inbounds %Array_ClassField_, ptr %229, i64 0, i32 1
  %231 = load ptr, ptr %memberidx.i11.i265, align 8
  %ptridx.i.i266 = getelementptr inbounds ptr, ptr %231, i64 %230
  %232 = load ptr, ptr %ptridx.i.i266, align 8
  %memberidx6.i267 = getelementptr inbounds %ClassField, ptr %232, i64 0, i32 4
  br label %get_class_prop_type.exit269

get_class_prop_type.exit269:                      ; preds = %if.entry.i262, %ifend.i268
  %common.ret.op.in.i255 = phi ptr [ %memberidx3.i261, %if.entry.i262 ], [ %memberidx6.i267, %ifend.i268 ]
  %common.ret.op.i256 = load ptr, ptr %common.ret.op.in.i255, align 8
  %memberidx53 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i256, i64 0, i32 2
  %233 = load ptr, ptr %memberidx53, align 8
  %234 = tail call ptr @malloc(i32 41)
  %235 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %235, align 4
  %memberidx.i.i270 = getelementptr inbounds %Expression, ptr %235, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i270, align 4
  %memberidx1.i.i271 = getelementptr inbounds %Expression, ptr %235, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i271, align 1
  %memberidx.i272 = getelementptr inbounds %MemberExpression, ptr %235, i64 0, i32 4
  store ptr %181, ptr %memberidx.i272, align 8
  %memberidx1.i273 = getelementptr inbounds %MemberExpression, ptr %235, i64 0, i32 5
  store ptr %common.ret.op.i243, ptr %memberidx1.i273, align 8
  %memberidx2.i274 = getelementptr inbounds %Expression, ptr %235, i64 0, i32 3
  store ptr %common.ret.op.i256, ptr %memberidx2.i274, align 8
  %236 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %236, align 8
  %memberidx.i275 = getelementptr inbounds %Array_Expression_, ptr %236, i64 0, i32 2
  store i64 0, ptr %memberidx.i275, align 4
  %memberidx1.i276 = getelementptr inbounds %Array_Expression_, ptr %236, i64 0, i32 3
  store i64 8, ptr %memberidx1.i276, align 4
  %memberidx2.i277 = getelementptr inbounds %Array_Expression_, ptr %236, i64 0, i32 1
  %237 = tail call ptr @malloc(i32 64)
  store ptr %237, ptr %memberidx2.i277, align 8
  store i64 0, ptr %memberidx.i275, align 4
  store i64 8, ptr %234, align 4
  %memberidx.i.i278 = getelementptr inbounds %Expression, ptr %234, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i278, align 4
  %memberidx1.i.i279 = getelementptr inbounds %Expression, ptr %234, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i279, align 1
  %memberidx.i280 = getelementptr inbounds %CallExpression, ptr %234, i64 0, i32 4
  store ptr %235, ptr %memberidx.i280, align 8
  %memberidx1.i281 = getelementptr inbounds %CallExpression, ptr %234, i64 0, i32 5
  store ptr %236, ptr %memberidx1.i281, align 8
  %memberidx2.i282 = getelementptr inbounds %Expression, ptr %234, i64 0, i32 3
  store ptr %233, ptr %memberidx2.i282, align 8
  %238 = tail call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr %188, ptr nonnull %234, ptr %233)
  %memberidx56 = getelementptr inbounds %Var, ptr %238, i64 0, i32 1
  %239 = load ptr, ptr %memberidx56, align 8
  %240 = tail call ptr @malloc(i32 25)
  store i64 1, ptr %240, align 4
  %memberidx.i283 = getelementptr inbounds %VarDeclaration, ptr %240, i64 0, i32 2
  store ptr %239, ptr %memberidx.i283, align 8
  %memberidx1.i284 = getelementptr inbounds %VarDeclaration, ptr %240, i64 0, i32 1
  store ptr %188, ptr %memberidx1.i284, align 8
  %memberidx2.i285 = getelementptr inbounds %VarDeclaration, ptr %240, i64 0, i32 3
  store i1 false, ptr %memberidx2.i285, align 1
  store ptr %240, ptr %memberidx1.i, align 8
  %241 = tail call ptr @malloc(i32 49)
  %242 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %242, align 4
  %memberidx.i.i286 = getelementptr inbounds %Expression, ptr %242, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i286, align 4
  %memberidx1.i.i287 = getelementptr inbounds %Expression, ptr %242, i64 0, i32 1
  %memberidx.i288 = getelementptr inbounds %VarAccessExpression, ptr %242, i64 0, i32 4
  store ptr %239, ptr %memberidx.i288, align 8
  %memberidx1.i289 = getelementptr inbounds %Expression, ptr %242, i64 0, i32 3
  store ptr %233, ptr %memberidx1.i289, align 8
  %243 = load i64, ptr %239, align 4
  %244 = icmp eq i64 %243, 2
  store i1 %244, ptr %memberidx1.i.i287, align 1
  store i64 8, ptr %241, align 4
  %memberidx.i.i291 = getelementptr inbounds %Expression, ptr %241, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i291, align 4
  %memberidx1.i.i292 = getelementptr inbounds %Expression, ptr %241, i64 0, i32 1
  %memberidx.i293 = getelementptr inbounds %BinaryExpression, ptr %241, i64 0, i32 4
  store ptr %242, ptr %memberidx.i293, align 8
  %memberidx1.i294 = getelementptr inbounds %BinaryExpression, ptr %241, i64 0, i32 5
  store i64 19, ptr %memberidx1.i294, align 4
  %memberidx2.i295 = getelementptr inbounds %BinaryExpression, ptr %241, i64 0, i32 6
  store ptr %234, ptr %memberidx2.i295, align 8
  %memberidx3.i296 = getelementptr inbounds %Expression, ptr %241, i64 0, i32 3
  store ptr %233, ptr %memberidx3.i296, align 8
  store i1 false, ptr %memberidx1.i.i292, align 1
  br label %ifend.sink.split

ifend61:                                          ; preds = %ifend
  store i1 true, ptr %memberidx2, align 1
  %memberidx63 = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 5
  %memberidx64 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 8
  %245 = load ptr, ptr %memberidx64, align 8
  %246 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %245, ptr nonnull %4)
  store ptr %246, ptr %memberidx63, align 8
  store i1 %7, ptr %memberidx2, align 1
  %247 = load ptr, ptr %memberidx.i111, align 8
  store ptr %247, ptr %memberidx1.i112, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_statement(ptr %0, ptr %1) unnamed_addr {
  %memberidx = getelementptr inbounds %StatementNode, ptr %1, i64 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  switch i64 %3, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry2
    i64 2, label %if.entry6
    i64 3, label %if.entry10
    i64 4, label %if.entry14
    i64 5, label %if.entry18
    i64 6, label %if.entry22
    i64 7, label %if.entry26
    i64 8, label %if.entry30
  ]

common.ret:                                       ; preds = %2, %ifend.i77, %TypeChecker_error.exit.i76, %ifend.i, %TypeChecker_error.exit.i, %if.entry30, %if.entry26, %TypeChecker_check_condition.exit, %if.entry10, %if.entry6, %if.entry2, %TypeChecker_check_if_stamement.exit
  %common.ret.op = phi ptr [ %21, %TypeChecker_check_if_stamement.exit ], [ %22, %if.entry2 ], [ %23, %if.entry6 ], [ %24, %if.entry10 ], [ %41, %TypeChecker_check_condition.exit ], [ %76, %if.entry26 ], [ %78, %if.entry30 ], [ null, %TypeChecker_error.exit.i ], [ %58, %ifend.i ], [ null, %TypeChecker_error.exit.i76 ], [ %75, %ifend.i77 ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx.i81 = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %memberidx.i81, align 8
  %5 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %5, align 4
  %6 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %5, ptr %4)
  %memberidx.i.i96 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i.i96, align 8
  %memberidx1.i.i97 = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i.i97, align 8
  %memberidx2.i.i98 = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i98, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %TypeChecker_check_condition.exit110, label %ifend.i101

ifend.i101:                                       ; preds = %if.entry
  %memberidx.i100 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx.i100, align 8
  %12 = load i64, ptr %11, align 4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %TypeChecker_check_condition.exit110, label %true_block.i108

true_block.i108:                                  ; preds = %ifend.i101
  %14 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %14, align 4
  %15 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %15, align 4
  %memberidx.i.i.i.i102 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i102, align 4
  %memberidx1.i.i.i.i103 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 1
  %memberidx.i.i.i104 = getelementptr inbounds %TypeCastExpression, ptr %15, i64 0, i32 4
  store ptr %6, ptr %memberidx.i.i.i104, align 8
  %memberidx1.i.i.i105 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  store ptr %14, ptr %memberidx1.i.i.i105, align 8
  %memberidx3.i.i.i107 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %16 = load i1, ptr %memberidx3.i.i.i107, align 1
  store i1 %16, ptr %memberidx1.i.i.i.i103, align 1
  br label %TypeChecker_check_condition.exit110

TypeChecker_check_condition.exit110:              ; preds = %ifend.i101, %if.entry, %true_block.i108
  %common.ret.op.i99 = phi ptr [ null, %if.entry ], [ %15, %true_block.i108 ], [ %6, %ifend.i101 ]
  %memberidx1.i82 = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 3
  %17 = load ptr, ptr %memberidx1.i82, align 8
  %18 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %17, ptr null)
  %memberidx2.i = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 4
  %19 = load ptr, ptr %memberidx2.i, align 8
  %.not.i = icmp eq ptr %19, null
  br i1 %.not.i, label %TypeChecker_check_if_stamement.exit, label %true_block.i

true_block.i:                                     ; preds = %TypeChecker_check_condition.exit110
  %20 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr nonnull %19, ptr null)
  br label %TypeChecker_check_if_stamement.exit

TypeChecker_check_if_stamement.exit:              ; preds = %TypeChecker_check_condition.exit110, %true_block.i
  %ternary.i = phi ptr [ %20, %true_block.i ], [ null, %TypeChecker_check_condition.exit110 ]
  %21 = tail call ptr @malloc(i32 32)
  store i64 0, ptr %21, align 4
  %memberidx.i.i83 = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 1
  store ptr %common.ret.op.i99, ptr %memberidx.i.i83, align 8
  %memberidx1.i.i84 = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i84, align 8
  %memberidx2.i.i = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 3
  store ptr %ternary.i, ptr %memberidx2.i.i, align 8
  br label %common.ret

if.entry2:                                        ; preds = %2
  %22 = tail call fastcc ptr @TypeChecker_check_var_declaration(ptr %0, ptr nonnull %1)
  br label %common.ret

if.entry6:                                        ; preds = %2
  %23 = tail call fastcc ptr @TypeChecker_check_const_declaration(ptr %0, ptr nonnull %1)
  br label %common.ret

if.entry10:                                       ; preds = %2
  %24 = tail call fastcc ptr @TypeChecker_check_for_statement(ptr %0, ptr nonnull %1)
  br label %common.ret

if.entry14:                                       ; preds = %2
  %memberidx.i78 = getelementptr inbounds %WhileStatementNode, ptr %1, i64 0, i32 2
  %25 = load ptr, ptr %memberidx.i78, align 8
  %26 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %26, align 4
  %27 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %26, ptr %25)
  %memberidx.i.i85 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %28 = load ptr, ptr %memberidx.i.i85, align 8
  %memberidx1.i.i86 = getelementptr inbounds %Compiler, ptr %28, i64 0, i32 6
  %29 = load ptr, ptr %memberidx1.i.i86, align 8
  %memberidx2.i.i87 = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i.i87, align 4
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %TypeChecker_check_condition.exit, label %ifend.i90

ifend.i90:                                        ; preds = %if.entry14
  %memberidx.i89 = getelementptr inbounds %Expression, ptr %27, i64 0, i32 3
  %32 = load ptr, ptr %memberidx.i89, align 8
  %33 = load i64, ptr %32, align 4
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %TypeChecker_check_condition.exit, label %true_block.i95

true_block.i95:                                   ; preds = %ifend.i90
  %35 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %35, align 4
  %36 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %36, align 4
  %memberidx.i.i.i.i91 = getelementptr inbounds %Expression, ptr %36, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i91, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %36, i64 0, i32 1
  %memberidx.i.i.i92 = getelementptr inbounds %TypeCastExpression, ptr %36, i64 0, i32 4
  store ptr %27, ptr %memberidx.i.i.i92, align 8
  %memberidx1.i.i.i93 = getelementptr inbounds %Expression, ptr %36, i64 0, i32 3
  store ptr %35, ptr %memberidx1.i.i.i93, align 8
  %memberidx3.i.i.i = getelementptr inbounds %Expression, ptr %27, i64 0, i32 1
  %37 = load i1, ptr %memberidx3.i.i.i, align 1
  store i1 %37, ptr %memberidx1.i.i.i.i, align 1
  br label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i90, %if.entry14, %true_block.i95
  %common.ret.op.i88 = phi ptr [ null, %if.entry14 ], [ %36, %true_block.i95 ], [ %27, %ifend.i90 ]
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %38 = load i1, ptr %memberidx1.i, align 1
  store i1 true, ptr %memberidx1.i, align 1
  %memberidx3.i = getelementptr inbounds %WhileStatementNode, ptr %1, i64 0, i32 3
  %39 = load ptr, ptr %memberidx3.i, align 8
  %40 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %39, ptr null)
  store i1 %38, ptr %memberidx1.i, align 1
  %41 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %41, align 4
  %memberidx.i.i79 = getelementptr inbounds %WhileStatement, ptr %41, i64 0, i32 1
  store ptr %common.ret.op.i88, ptr %memberidx.i.i79, align 8
  %memberidx1.i.i80 = getelementptr inbounds %WhileStatement, ptr %41, i64 0, i32 2
  store ptr %40, ptr %memberidx1.i.i80, align 8
  br label %common.ret

if.entry18:                                       ; preds = %2
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %42 = load i1, ptr %memberidx.i, align 1
  br i1 %42, label %ifend.i, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry18
  %43 = tail call ptr @malloc(i32 32)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %43, ptr noundef nonnull align 8 dereferenceable(32) @216, i64 32, i1 false)
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i.i, align 4
  %45 = load ptr, ptr %1, align 8
  %memberidx.i.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %46 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Compiler, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i.i, align 8
  %48 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %48, align 4
  %memberidx1.i.i3.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 2
  store ptr %45, ptr %memberidx1.i.i3.i, align 8
  %memberidx2.i.i4.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 1
  store ptr %44, ptr %memberidx2.i.i4.i, align 8
  %memberidx.i.i5.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %49 = load i64, ptr %memberidx.i.i5.i, align 4
  %memberidx1.i2.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 3
  %50 = load i64, ptr %memberidx1.i2.i.i, align 4
  %.not.i.i.i = icmp slt i64 %49, %50
  br i1 %.not.i.i.i, label %if.entry.i.TypeChecker_error.exit.i_crit_edge, label %if.entry.i.i.i

if.entry.i.TypeChecker_error.exit.i_crit_edge:    ; preds = %if.entry.i
  %memberidx4.i.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %.pre114 = load ptr, ptr %memberidx4.i.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit.i

if.entry.i.i.i:                                   ; preds = %if.entry.i
  %51 = shl nuw i64 %50, 1
  store i64 %51, ptr %memberidx1.i2.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %53 = shl i64 %50, 4
  %54 = tail call ptr @realloc(ptr %52, i64 %53)
  store ptr %54, ptr %memberidx2.i.i.i.i, align 8
  %.pre113 = load i64, ptr %memberidx.i.i5.i, align 4
  br label %TypeChecker_error.exit.i

TypeChecker_error.exit.i:                         ; preds = %if.entry.i.TypeChecker_error.exit.i_crit_edge, %if.entry.i.i.i
  %55 = phi ptr [ %54, %if.entry.i.i.i ], [ %.pre114, %if.entry.i.TypeChecker_error.exit.i_crit_edge ]
  %56 = phi i64 [ %.pre113, %if.entry.i.i.i ], [ %49, %if.entry.i.TypeChecker_error.exit.i_crit_edge ]
  %57 = add nsw i64 %56, 1
  store i64 %57, ptr %memberidx.i.i5.i, align 4
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %55, i64 %56
  store ptr %48, ptr %ptridx.i.i.i, align 8
  br label %common.ret

ifend.i:                                          ; preds = %if.entry18
  %58 = tail call ptr @malloc(i32 8)
  store i64 5, ptr %58, align 4
  br label %common.ret

if.entry22:                                       ; preds = %2
  %memberidx.i58 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %59 = load i1, ptr %memberidx.i58, align 1
  br i1 %59, label %ifend.i77, label %if.entry.i70

if.entry.i70:                                     ; preds = %if.entry22
  %60 = tail call ptr @malloc(i32 29)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(29) %60, ptr noundef nonnull align 8 dereferenceable(29) @215, i64 29, i1 false)
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i.i60 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i.i60, align 8
  %memberidx1.i.i.i61 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 29, ptr %memberidx1.i.i.i61, align 4
  %memberidx2.i.i.i62 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 29, ptr %memberidx2.i.i.i62, align 4
  %62 = load ptr, ptr %1, align 8
  %memberidx.i.i63 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %63 = load ptr, ptr %memberidx.i.i63, align 8
  %memberidx1.i.i64 = getelementptr inbounds %Compiler, ptr %63, i64 0, i32 6
  %64 = load ptr, ptr %memberidx1.i.i64, align 8
  %65 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %65, align 4
  %memberidx1.i.i3.i65 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 2
  store ptr %62, ptr %memberidx1.i.i3.i65, align 8
  %memberidx2.i.i4.i66 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 1
  store ptr %61, ptr %memberidx2.i.i4.i66, align 8
  %memberidx.i.i5.i67 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 2
  %66 = load i64, ptr %memberidx.i.i5.i67, align 4
  %memberidx1.i2.i.i68 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 3
  %67 = load i64, ptr %memberidx1.i2.i.i68, align 4
  %.not.i.i.i69 = icmp slt i64 %66, %67
  br i1 %.not.i.i.i69, label %if.entry.i70.TypeChecker_error.exit.i76_crit_edge, label %if.entry.i.i.i73

if.entry.i70.TypeChecker_error.exit.i76_crit_edge: ; preds = %if.entry.i70
  %memberidx4.i.i.i74.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %.pre112 = load ptr, ptr %memberidx4.i.i.i74.phi.trans.insert, align 8
  br label %TypeChecker_error.exit.i76

if.entry.i.i.i73:                                 ; preds = %if.entry.i70
  %68 = shl nuw i64 %67, 1
  store i64 %68, ptr %memberidx1.i2.i.i68, align 4
  %memberidx2.i.i.i.i72 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %69 = load ptr, ptr %memberidx2.i.i.i.i72, align 8
  %70 = shl i64 %67, 4
  %71 = tail call ptr @realloc(ptr %69, i64 %70)
  store ptr %71, ptr %memberidx2.i.i.i.i72, align 8
  %.pre = load i64, ptr %memberidx.i.i5.i67, align 4
  br label %TypeChecker_error.exit.i76

TypeChecker_error.exit.i76:                       ; preds = %if.entry.i70.TypeChecker_error.exit.i76_crit_edge, %if.entry.i.i.i73
  %72 = phi ptr [ %71, %if.entry.i.i.i73 ], [ %.pre112, %if.entry.i70.TypeChecker_error.exit.i76_crit_edge ]
  %73 = phi i64 [ %.pre, %if.entry.i.i.i73 ], [ %66, %if.entry.i70.TypeChecker_error.exit.i76_crit_edge ]
  %74 = add nsw i64 %73, 1
  store i64 %74, ptr %memberidx.i.i5.i67, align 4
  %ptridx.i.i.i75 = getelementptr inbounds ptr, ptr %72, i64 %73
  store ptr %65, ptr %ptridx.i.i.i75, align 8
  br label %common.ret

ifend.i77:                                        ; preds = %if.entry22
  %75 = tail call ptr @malloc(i32 8)
  store i64 6, ptr %75, align 4
  br label %common.ret

if.entry26:                                       ; preds = %2
  %76 = tail call fastcc ptr @TypeChecker_check_can_return(ptr %0, ptr nonnull %1)
  br label %common.ret

if.entry30:                                       ; preds = %2
  %77 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %77, align 4
  %78 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %77, ptr nonnull %1)
  br label %common.ret
}

define internal fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %1, ptr %2) unnamed_addr {
  br label %tailrecurse.outer

tailrecurse.outer:                                ; preds = %if.entry25, %3
  %accumulator.tr.ph = phi i1 [ %34, %if.entry25 ], [ true, %3 ]
  %.tr144.ph = phi ptr [ %32, %if.entry25 ], [ %1, %3 ]
  %.tr145.ph = phi ptr [ %33, %if.entry25 ], [ %2, %3 ]
  br label %tailrecurse.outer149

tailrecurse.outer149:                             ; preds = %tailrecurse.outer, %if.entry33
  %.tr144.ph150 = phi ptr [ %.tr144.ph, %tailrecurse.outer ], [ %35, %if.entry33 ]
  %.tr145.ph151 = phi ptr [ %.tr145.ph, %tailrecurse.outer ], [ %36, %if.entry33 ]
  %memberidx5 = getelementptr inbounds %FunctionType, ptr %.tr144.ph150, i64 0, i32 1
  %memberidx13 = getelementptr inbounds %FunctionType, ptr %.tr144.ph150, i64 0, i32 2
  %.pre = load i64, ptr %.tr144.ph150, align 4
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.outer149, %ifend52
  %4 = phi i64 [ 11, %ifend52 ], [ %.pre, %tailrecurse.outer149 ]
  %.tr145 = phi ptr [ %57, %ifend52 ], [ %.tr145.ph151, %tailrecurse.outer149 ]
  %5 = load i64, ptr %.tr145, align 4
  %.not = icmp eq i64 %4, %5
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %ifend52, %if.entry39, %ifend11, %if.entry2, %tailrecurse, %for.body, %for.body84, %if.entry66, %if.entry94, %ifend68, %ifend73, %ifend.i.i, %if.entry60
  %common.ret.op = phi i1 [ %60, %if.entry60 ], [ false, %ifend.i.i ], [ false, %ifend73 ], [ true, %ifend68 ], [ %not., %if.entry94 ], [ false, %if.entry66 ], [ false, %for.body84 ], [ false, %for.body ], [ false, %tailrecurse ], [ false, %if.entry2 ], [ false, %ifend11 ], [ true, %if.entry39 ], [ false, %ifend52 ]
  %accumulator.ret.tr = and i1 %accumulator.tr.ph, %common.ret.op
  ret i1 %accumulator.ret.tr

ifend:                                            ; preds = %tailrecurse
  %6 = icmp eq i64 %4, 15
  br i1 %6, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %7 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_Type_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx6, align 4
  %memberidx7 = getelementptr inbounds %FunctionType, ptr %.tr145, i64 0, i32 1
  %9 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_Type_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx8, align 4
  %.not131 = icmp eq i64 %8, %10
  br i1 %.not131, label %ifend11, label %common.ret

ifend4thread-pre-split:                           ; preds = %for.cond, %for.cond.preheader
  %.pr = load i64, ptr %.tr144.ph150, align 4
  br label %ifend4

ifend4:                                           ; preds = %ifend4thread-pre-split, %ifend
  %11 = phi i64 [ %.pr, %ifend4thread-pre-split ], [ %4, %ifend ]
  switch i64 %11, label %ifend68 [
    i64 14, label %if.entry25
    i64 13, label %if.entry33
    i64 11, label %if.entry39
    i64 12, label %if.entry60
    i64 19, label %if.entry66
  ]

ifend11:                                          ; preds = %if.entry2
  %memberidx12 = getelementptr inbounds %FunctionType, ptr %.tr145, i64 0, i32 2
  %12 = load ptr, ptr %memberidx12, align 8
  %13 = load ptr, ptr %memberidx13, align 8
  %14 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %12, ptr %13)
  br i1 %14, label %for.cond.preheader, label %common.ret

for.cond.preheader:                               ; preds = %ifend11
  %15 = load ptr, ptr %memberidx5, align 8
  %memberidx18173 = getelementptr inbounds %Array_Type_, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx18173, align 4
  %17 = icmp sgt i64 %16, 0
  br i1 %17, label %for.body, label %ifend4thread-pre-split

for.cond:                                         ; preds = %for.body
  %18 = add nuw nsw i64 %storemerge132174, 1
  %19 = load ptr, ptr %memberidx5, align 8
  %memberidx18 = getelementptr inbounds %Array_Type_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx18, align 4
  %21 = icmp slt i64 %18, %20
  br i1 %21, label %for.body, label %ifend4thread-pre-split

for.body:                                         ; preds = %for.cond.preheader, %for.cond
  %22 = phi ptr [ %19, %for.cond ], [ %15, %for.cond.preheader ]
  %storemerge132174 = phi i64 [ %18, %for.cond ], [ 0, %for.cond.preheader ]
  %memberidx.i133 = getelementptr inbounds %Array_Type_, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i133, align 8
  %ptridx.i134 = getelementptr inbounds ptr, ptr %23, i64 %storemerge132174
  %24 = load ptr, ptr %ptridx.i134, align 8
  %25 = load ptr, ptr %memberidx7, align 8
  %memberidx.i135 = getelementptr inbounds %Array_Type_, ptr %25, i64 0, i32 1
  %26 = load ptr, ptr %memberidx.i135, align 8
  %ptridx.i136 = getelementptr inbounds ptr, ptr %26, i64 %storemerge132174
  %27 = load ptr, ptr %ptridx.i136, align 8
  %28 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %24, ptr %27)
  br i1 %28, label %for.cond, label %common.ret

if.entry25:                                       ; preds = %ifend4
  %29 = load i64, ptr %memberidx13, align 4
  %memberidx29 = getelementptr inbounds %ArrayType, ptr %.tr145, i64 0, i32 2
  %30 = load i64, ptr %memberidx29, align 4
  %31 = icmp eq i64 %29, %30
  %32 = load ptr, ptr %memberidx5, align 8
  %memberidx31 = getelementptr inbounds %ArrayType, ptr %.tr145, i64 0, i32 1
  %33 = load ptr, ptr %memberidx31, align 8
  %34 = and i1 %accumulator.tr.ph, %31
  br label %tailrecurse.outer

if.entry33:                                       ; preds = %ifend4
  %35 = load ptr, ptr %memberidx5, align 8
  %memberidx37 = getelementptr inbounds %PointerType, ptr %.tr145, i64 0, i32 1
  %36 = load ptr, ptr %memberidx37, align 8
  br label %tailrecurse.outer149

if.entry39:                                       ; preds = %ifend4
  %37 = load ptr, ptr %memberidx5, align 8
  %memberidx43 = getelementptr inbounds %ObjectType, ptr %.tr145, i64 0, i32 1
  %38 = load ptr, ptr %memberidx43, align 8
  %memberidx44 = getelementptr inbounds %TypeId, ptr %37, i64 0, i32 1
  %39 = load i64, ptr %memberidx44, align 4
  %memberidx45 = getelementptr inbounds %TypeId, ptr %38, i64 0, i32 1
  %40 = load i64, ptr %memberidx45, align 4
  %41 = icmp eq i64 %39, %40
  %42 = load i64, ptr %37, align 4
  %43 = load i64, ptr %38, align 4
  %44 = icmp eq i64 %42, %43
  %45 = and i1 %41, %44
  %memberidx48 = getelementptr inbounds %TypeId, ptr %37, i64 0, i32 2
  %46 = load i64, ptr %memberidx48, align 4
  %memberidx49 = getelementptr inbounds %TypeId, ptr %38, i64 0, i32 2
  %47 = load i64, ptr %memberidx49, align 4
  %48 = icmp eq i64 %46, %47
  %49 = and i1 %45, %48
  br i1 %49, label %common.ret, label %ifend52

ifend52:                                          ; preds = %if.entry39
  %50 = load ptr, ptr %0, align 8
  %memberidx.i139 = getelementptr inbounds %Program, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i139, align 8
  %memberidx.i.i140 = getelementptr inbounds %Array_Module_, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i140, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %52, i64 %43
  %53 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %53, i64 0, i32 4
  %54 = load ptr, ptr %memberidx2.i, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_Class_, ptr %54, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %55, i64 %47
  %56 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx54 = getelementptr inbounds %Class, ptr %56, i64 0, i32 2
  %57 = load ptr, ptr %memberidx54, align 8
  %.not130 = icmp eq ptr %57, null
  br i1 %.not130, label %common.ret, label %tailrecurse

if.entry60:                                       ; preds = %ifend4
  %58 = load ptr, ptr %memberidx5, align 8
  %memberidx64 = getelementptr inbounds %EnumType, ptr %.tr145, i64 0, i32 1
  %59 = load ptr, ptr %memberidx64, align 8
  %60 = icmp eq ptr %58, %59
  br label %common.ret

if.entry66:                                       ; preds = %ifend4
  %61 = load ptr, ptr %memberidx5, align 8
  %memberidx70 = getelementptr inbounds %GenericType, ptr %.tr145, i64 0, i32 1
  %62 = load ptr, ptr %memberidx70, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  %63 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  %64 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %63, %64
  br i1 %.not.i.i, label %ifend.i.i, label %common.ret

ifend.i.i:                                        ; preds = %if.entry66
  %memberidx2.i.i = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  %66 = load ptr, ptr %memberidx3.i.i, align 8
  %67 = tail call i64 @memcmp(ptr %65, ptr %66, i64 %63)
  %.not143 = icmp eq i64 %67, 0
  br i1 %.not143, label %ifend73, label %common.ret

ifend68:                                          ; preds = %ifend4, %for.cond83, %for.cond83.preheader
  %68 = load i64, ptr %.tr144.ph150, align 4
  %69 = add i64 %68, -1
  %70 = icmp ult i64 %69, 7
  br i1 %70, label %if.entry94, label %common.ret

ifend73:                                          ; preds = %ifend.i.i
  %71 = load ptr, ptr %memberidx13, align 8
  %memberidx75 = getelementptr inbounds %Array_Type_, ptr %71, i64 0, i32 2
  %72 = load i64, ptr %memberidx75, align 4
  %memberidx76 = getelementptr inbounds %GenericType, ptr %.tr145, i64 0, i32 2
  %73 = load ptr, ptr %memberidx76, align 8
  %memberidx77 = getelementptr inbounds %Array_Type_, ptr %73, i64 0, i32 2
  %74 = load i64, ptr %memberidx77, align 4
  %.not129 = icmp eq i64 %72, %74
  br i1 %.not129, label %for.cond83.preheader, label %common.ret

for.cond83.preheader:                             ; preds = %ifend73
  %75 = icmp sgt i64 %72, 0
  br i1 %75, label %for.body84, label %ifend68

for.cond83:                                       ; preds = %for.body84
  %76 = add nuw nsw i64 %storemerge172, 1
  %77 = load ptr, ptr %memberidx13, align 8
  %memberidx88 = getelementptr inbounds %Array_Type_, ptr %77, i64 0, i32 2
  %78 = load i64, ptr %memberidx88, align 4
  %79 = icmp slt i64 %76, %78
  br i1 %79, label %for.body84, label %ifend68

for.body84:                                       ; preds = %for.cond83.preheader, %for.cond83
  %80 = phi ptr [ %77, %for.cond83 ], [ %71, %for.cond83.preheader ]
  %storemerge172 = phi i64 [ %76, %for.cond83 ], [ 0, %for.cond83.preheader ]
  %memberidx.i137 = getelementptr inbounds %Array_Type_, ptr %80, i64 0, i32 1
  %81 = load ptr, ptr %memberidx.i137, align 8
  %ptridx.i138 = getelementptr inbounds ptr, ptr %81, i64 %storemerge172
  %82 = load ptr, ptr %ptridx.i138, align 8
  %83 = load ptr, ptr %memberidx76, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %83, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %84, i64 %storemerge172
  %85 = load ptr, ptr %ptridx.i, align 8
  %86 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %82, ptr %85)
  br i1 %86, label %for.cond83, label %common.ret

if.entry94:                                       ; preds = %ifend68
  %87 = load i1, ptr %memberidx5, align 1
  %memberidx98 = getelementptr inbounds %IntType, ptr %.tr145, i64 0, i32 1
  %88 = load i1, ptr %memberidx98, align 1
  %89 = xor i1 %87, %88
  %not. = xor i1 %89, true
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_create_scope(ptr nocapture readonly %0) unnamed_addr {
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %2 = load i64, ptr %memberidx.i, align 4
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %4, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %5, i64 %2
  %6 = load ptr, ptr %ptridx.i.i.i, align 8
  %7 = tail call ptr @malloc(i32 56)
  %8 = load i64, ptr %memberidx.i, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %6, i64 0, i32 8
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = tail call ptr @malloc(i32 16)
  store i64 %8, ptr %11, align 4
  %memberidx1.i.i8 = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  store i64 %10, ptr %memberidx1.i.i8, align 4
  store ptr %11, ptr %7, align 8
  %12 = tail call ptr @malloc(i32 24)
  %13 = tail call ptr @malloc(i32 2048)
  store ptr %13, ptr %12, align 8
  br label %for.body.i16.i

for.body.i16.i:                                   ; preds = %1, %for.body.i16.i
  %i.0.i13.i16 = phi i64 [ 0, %1 ], [ %15, %for.body.i16.i ]
  %14 = load ptr, ptr %12, align 8
  %ptridx.i15.i = getelementptr inbounds ptr, ptr %14, i64 %i.0.i13.i16
  store ptr null, ptr %ptridx.i15.i, align 8
  %15 = add nuw nsw i64 %i.0.i13.i16, 1
  %16 = icmp ult i64 %i.0.i13.i16, 255
  br i1 %16, label %for.body.i16.i, label %Map_string_VarId__constructor.exit.i

Map_string_VarId__constructor.exit.i:             ; preds = %for.body.i16.i
  %memberidx1.i9 = getelementptr inbounds %Scope, ptr %7, i64 0, i32 1
  %memberidx2.i17.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 1
  store i64 256, ptr %memberidx2.i17.i, align 4
  %memberidx3.i18.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx3.i18.i, align 4
  store ptr %12, ptr %memberidx1.i9, align 8
  %17 = tail call ptr @malloc(i32 24)
  %18 = tail call ptr @malloc(i32 2048)
  store ptr %18, ptr %17, align 8
  br label %for.body.i22.i

for.body.i22.i:                                   ; preds = %Map_string_VarId__constructor.exit.i, %for.body.i22.i
  %i.0.i19.i15 = phi i64 [ 0, %Map_string_VarId__constructor.exit.i ], [ %20, %for.body.i22.i ]
  %19 = load ptr, ptr %17, align 8
  %ptridx.i21.i = getelementptr inbounds ptr, ptr %19, i64 %i.0.i19.i15
  store ptr null, ptr %ptridx.i21.i, align 8
  %20 = add nuw nsw i64 %i.0.i19.i15, 1
  %21 = icmp ult i64 %i.0.i19.i15, 255
  br i1 %21, label %for.body.i22.i, label %Map_string_ClassId__constructor.exit.i

Map_string_ClassId__constructor.exit.i:           ; preds = %for.body.i22.i
  %memberidx2.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 2
  %memberidx2.i23.i = getelementptr inbounds %Map_string_ClassId_, ptr %17, i64 0, i32 1
  store i64 256, ptr %memberidx2.i23.i, align 4
  %memberidx3.i24.i = getelementptr inbounds %Map_string_ClassId_, ptr %17, i64 0, i32 2
  store i64 0, ptr %memberidx3.i24.i, align 4
  store ptr %17, ptr %memberidx2.i, align 8
  %22 = tail call ptr @malloc(i32 24)
  %23 = tail call ptr @malloc(i32 2048)
  store ptr %23, ptr %22, align 8
  br label %for.body.i28.i

for.body.i28.i:                                   ; preds = %Map_string_ClassId__constructor.exit.i, %for.body.i28.i
  %i.0.i25.i14 = phi i64 [ 0, %Map_string_ClassId__constructor.exit.i ], [ %25, %for.body.i28.i ]
  %24 = load ptr, ptr %22, align 8
  %ptridx.i27.i = getelementptr inbounds ptr, ptr %24, i64 %i.0.i25.i14
  store ptr null, ptr %ptridx.i27.i, align 8
  %25 = add nuw nsw i64 %i.0.i25.i14, 1
  %26 = icmp ult i64 %i.0.i25.i14, 255
  br i1 %26, label %for.body.i28.i, label %Map_string_VarId__constructor.exit31.i

Map_string_VarId__constructor.exit31.i:           ; preds = %for.body.i28.i
  %memberidx3.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 3
  %memberidx2.i29.i = getelementptr inbounds %Map_string_VarId_, ptr %22, i64 0, i32 1
  store i64 256, ptr %memberidx2.i29.i, align 4
  %memberidx3.i30.i = getelementptr inbounds %Map_string_VarId_, ptr %22, i64 0, i32 2
  store i64 0, ptr %memberidx3.i30.i, align 4
  store ptr %22, ptr %memberidx3.i, align 8
  %27 = tail call ptr @malloc(i32 24)
  %28 = tail call ptr @malloc(i32 2048)
  store ptr %28, ptr %27, align 8
  br label %for.body.i35.i

for.body.i35.i:                                   ; preds = %Map_string_VarId__constructor.exit31.i, %for.body.i35.i
  %i.0.i32.i13 = phi i64 [ 0, %Map_string_VarId__constructor.exit31.i ], [ %30, %for.body.i35.i ]
  %29 = load ptr, ptr %27, align 8
  %ptridx.i34.i = getelementptr inbounds ptr, ptr %29, i64 %i.0.i32.i13
  store ptr null, ptr %ptridx.i34.i, align 8
  %30 = add nuw nsw i64 %i.0.i32.i13, 1
  %31 = icmp ult i64 %i.0.i32.i13, 255
  br i1 %31, label %for.body.i35.i, label %Map_string_EnumId__constructor.exit.i

Map_string_EnumId__constructor.exit.i:            ; preds = %for.body.i35.i
  %memberidx4.i10 = getelementptr inbounds %Scope, ptr %7, i64 0, i32 4
  %memberidx2.i36.i = getelementptr inbounds %Map_string_EnumId_, ptr %27, i64 0, i32 1
  store i64 256, ptr %memberidx2.i36.i, align 4
  %memberidx3.i37.i = getelementptr inbounds %Map_string_EnumId_, ptr %27, i64 0, i32 2
  store i64 0, ptr %memberidx3.i37.i, align 4
  store ptr %27, ptr %memberidx4.i10, align 8
  %32 = tail call ptr @malloc(i32 24)
  %33 = tail call ptr @malloc(i32 2048)
  store ptr %33, ptr %32, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %Map_string_EnumId__constructor.exit.i, %for.body.i.i
  %i.0.i.i12 = phi i64 [ 0, %Map_string_EnumId__constructor.exit.i ], [ %35, %for.body.i.i ]
  %34 = load ptr, ptr %32, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %34, i64 %i.0.i.i12
  store ptr null, ptr %ptridx.i.i, align 8
  %35 = add nuw nsw i64 %i.0.i.i12, 1
  %36 = icmp ult i64 %i.0.i.i12, 255
  br i1 %36, label %for.body.i.i, label %Scope_constructor.exit

Scope_constructor.exit:                           ; preds = %for.body.i.i
  %memberidx5.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 6
  %memberidx2.i.i11 = getelementptr inbounds %Map_string_Type_, ptr %32, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i11, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_Type_, ptr %32, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %32, ptr %memberidx5.i, align 8
  %memberidx6.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 5
  store ptr null, ptr %memberidx6.i, align 8
  %37 = load ptr, ptr %memberidx1, align 8
  %memberidx.i7 = getelementptr inbounds %Array_Scope_, ptr %37, i64 0, i32 2
  %38 = load i64, ptr %memberidx.i7, align 4
  %memberidx1.i = getelementptr inbounds %Array_Scope_, ptr %37, i64 0, i32 3
  %39 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %38, %39
  br i1 %.not.i, label %Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge, label %if.entry.i

Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge: ; preds = %Scope_constructor.exit
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Scope_, ptr %37, i64 0, i32 1
  %.pre17 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Scope____sl__.exit

if.entry.i:                                       ; preds = %Scope_constructor.exit
  %40 = shl nuw i64 %39, 1
  store i64 %40, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Scope_, ptr %37, i64 0, i32 1
  %41 = load ptr, ptr %memberidx2.i.i, align 8
  %42 = shl i64 %39, 4
  %43 = tail call ptr @realloc(ptr %41, i64 %42)
  store ptr %43, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i7, align 4
  br label %Array_Scope____sl__.exit

Array_Scope____sl__.exit:                         ; preds = %Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge, %if.entry.i
  %44 = phi ptr [ %.pre17, %Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge ], [ %43, %if.entry.i ]
  %45 = phi i64 [ %38, %Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %46 = add nsw i64 %45, 1
  store i64 %46, ptr %memberidx.i7, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %44, i64 %45
  store ptr %7, ptr %ptridx.i, align 8
  ret ptr %7
}

define internal fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %6 = tail call fastcc ptr @bin_op_to_op_overload_name(i64 %5)
  %7 = icmp eq ptr %6, null
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend23, %ifend34, %TypeChecker_error.exit141, %if.entry28, %TypeChecker_error.exit114, %if.entry9, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %89, %if.entry9 ], [ null, %TypeChecker_error.exit114 ], [ %133, %if.entry28 ], [ null, %TypeChecker_error.exit141 ], [ %167, %ifend34 ], [ null, %ifend23 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  %8 = tail call fastcc ptr @dump_bin_op(i64 %5)
  %9 = load ptr, ptr %8, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i64 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = tail call ptr %10(ptr nonnull %8)
  %12 = alloca ptr, align 8
  %13 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %12, ptr nonnull @164, ptr %11)
  %14 = load ptr, ptr %12, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 %13, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 %13, ptr %memberidx2.i, align 4
  tail call void @free(ptr %11)
  %16 = load ptr, ptr %2, align 8
  %memberidx.i77 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i77, align 8
  %memberidx1.i78 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i78, align 8
  %19 = call ptr @malloc(i32 24)
  store i64 4, ptr %19, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 2
  store ptr %16, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 1
  store ptr %15, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 3
  %21 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %20, %21
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %.pre177 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %22 = shl nuw i64 %21, 1
  store i64 %22, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i.i, align 8
  %24 = shl i64 %21, 4
  %25 = call ptr @realloc(ptr %23, i64 %24)
  store ptr %25, ptr %memberidx2.i.i.i, align 8
  %.pre176 = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %26 = phi ptr [ %.pre177, %if.entry.TypeChecker_error.exit_crit_edge ], [ %25, %if.entry.i.i ]
  %27 = phi i64 [ %20, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre176, %if.entry.i.i ]
  %28 = add nsw i64 %27, 1
  store i64 %28, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %26, i64 %27
  store ptr %19, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %4
  %29 = load ptr, ptr %0, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i160, %ifend
  %.tr11.i.in = phi ptr [ %memberidx4, %ifend ], [ %memberidx1.i159, %if.entry.i160 ]
  %.tr11.i = load ptr, ptr %.tr11.i.in, align 8
  %30 = load i64, ptr %.tr11.i, align 4
  switch i64 %30, label %get_class_from_type.exit [
    i64 19, label %if.entry.i160
    i64 11, label %if.entry3.i
  ]

if.entry.i160:                                    ; preds = %tailrecurse.i
  %memberidx1.i159 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i161 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %31 = load ptr, ptr %memberidx6.i161, align 8
  %memberidx.i.i162 = getelementptr inbounds %Program, ptr %29, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i.i162, align 8
  %33 = load i64, ptr %31, align 4
  %memberidx.i.i.i163 = getelementptr inbounds %Array_Module_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i.i163, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i164 = getelementptr inbounds %Module, ptr %35, i64 0, i32 4
  %36 = load ptr, ptr %memberidx2.i.i164, align 8
  %memberidx3.i.i165 = getelementptr inbounds %TypeId, ptr %31, i64 0, i32 2
  %37 = load i64, ptr %memberidx3.i.i165, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i158 = phi ptr [ %39, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx5 = getelementptr inbounds %Class, ptr %common.ret.op.i158, i64 0, i32 6
  %40 = load ptr, ptr %memberidx5, align 8
  %41 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %6)
  %memberidx.i79 = getelementptr inbounds %Map_string_PropId_, ptr %40, i64 0, i32 1
  %42 = load i64, ptr %memberidx.i79, align 4
  %43 = urem i64 %41, %42
  %44 = load ptr, ptr %40, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %44, i64 %43
  %45 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %45, null
  br i1 %.not.i, label %if.entry6, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %get_class_from_type.exit
  %memberidx1.i.i81 = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %46 = phi ptr [ %56, %else.i ], [ %44, %while.entry.i.preheader ]
  %47 = phi i64 [ %57, %else.i ], [ %42, %while.entry.i.preheader ]
  %48 = phi ptr [ %60, %else.i ], [ %45, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %59, %else.i ], [ %43, %while.entry.i.preheader ]
  %49 = load ptr, ptr %48, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx.i.i80, align 4
  %51 = load i64, ptr %memberidx1.i.i81, align 4
  %.not.i.i82 = icmp eq i64 %50, %51
  br i1 %.not.i.i82, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i83 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i83, align 8
  %53 = load ptr, ptr %memberidx3.i.i, align 8
  %54 = tail call i64 @memcmp(ptr %52, ptr %53, i64 %50)
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i79, align 4
  %.pre169 = load ptr, ptr %40, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre170.pre = load ptr, ptr %40, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre170.pre, i64 %hash.0.i
  %.pre171.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre171.pre, null
  br i1 %.not29.i, label %if.entry6, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %56 = phi ptr [ %.pre169, %ifend.i.i.else.i_crit_edge ], [ %46, %while.entry.i ]
  %57 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %47, %while.entry.i ]
  %58 = add nuw i64 %hash.0.i, 1
  %59 = urem i64 %58, %57
  %ptridx7.i = getelementptr inbounds ptr, ptr %56, i64 %59
  %60 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %60, null
  br i1 %.not30.i, label %if.entry6, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre171.pre, i64 0, i32 1
  %61 = load ptr, ptr %memberidx15.i, align 8
  %62 = icmp eq ptr %61, null
  br i1 %62, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %else.i, %get_class_from_type.exit, %while.end.i, %Map_string_PropId____getitem__.exit
  %63 = add i64 %5, -11
  %64 = icmp ult i64 %63, 2
  br i1 %64, label %if.entry9, label %ifend11

ifend8:                                           ; preds = %Map_string_PropId____getitem__.exit
  %65 = load ptr, ptr %0, align 8
  %memberidx.i.i84 = getelementptr inbounds %PropId, ptr %61, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i84, align 8
  %memberidx.i.i.i85 = getelementptr inbounds %Program, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i.i.i85, align 8
  %68 = load i64, ptr %66, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i86 = getelementptr inbounds %Module, ptr %70, i64 0, i32 4
  %71 = load ptr, ptr %memberidx2.i.i.i86, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %66, i64 0, i32 2
  %72 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %75 = load i64, ptr %61, align 4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend8
  %memberidx1.i88 = getelementptr inbounds %Class, ptr %74, i64 0, i32 5
  %77 = load ptr, ptr %memberidx1.i88, align 8
  %memberidx2.i89 = getelementptr inbounds %PropId, ptr %61, i64 0, i32 2
  %78 = load i64, ptr %memberidx2.i89, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %80, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend8
  %memberidx4.i = getelementptr inbounds %Class, ptr %74, i64 0, i32 4
  %81 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %61, i64 0, i32 2
  %82 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i90 = getelementptr inbounds ptr, ptr %83, i64 %82
  %84 = load ptr, ptr %ptridx.i.i90, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %84, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i87 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx20 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i87, i64 0, i32 1
  %85 = load ptr, ptr %memberidx20, align 8
  %memberidx.i91 = getelementptr inbounds %Array_Type_, ptr %85, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i91, align 8
  %87 = load ptr, ptr %86, align 8
  %88 = icmp eq ptr %3, null
  br i1 %88, label %if.entry21, label %ifend23

if.entry9:                                        ; preds = %if.entry6
  %89 = tail call ptr @malloc(i32 49)
  %90 = load ptr, ptr %memberidx4, align 8
  %memberidx13 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %91 = load ptr, ptr %memberidx13, align 8
  %92 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %90, ptr %91)
  %93 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %93, align 4
  store i64 8, ptr %89, align 4
  %memberidx.i.i92 = getelementptr inbounds %Expression, ptr %89, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i92, align 4
  %memberidx1.i.i93 = getelementptr inbounds %Expression, ptr %89, i64 0, i32 1
  %memberidx.i94 = getelementptr inbounds %BinaryExpression, ptr %89, i64 0, i32 4
  store ptr %1, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %BinaryExpression, ptr %89, i64 0, i32 5
  store i64 %5, ptr %memberidx1.i95, align 4
  %memberidx2.i96 = getelementptr inbounds %BinaryExpression, ptr %89, i64 0, i32 6
  store ptr %92, ptr %memberidx2.i96, align 8
  %memberidx3.i97 = getelementptr inbounds %Expression, ptr %89, i64 0, i32 3
  store ptr %93, ptr %memberidx3.i97, align 8
  store i1 false, ptr %memberidx1.i.i93, align 1
  br label %common.ret

ifend11:                                          ; preds = %if.entry6
  %94 = tail call fastcc ptr @dump_bin_op(i64 %5)
  %95 = load ptr, ptr %94, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %95, i64 0, i32 5
  %96 = load ptr, ptr %memberidx14, align 8
  %97 = tail call ptr %96(ptr nonnull %94)
  %memberidx15 = getelementptr inbounds %Class, ptr %common.ret.op.i158, i64 0, i32 1
  %98 = load ptr, ptr %memberidx15, align 8
  %99 = load ptr, ptr %98, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %99, i64 0, i32 5
  %100 = load ptr, ptr %memberidx16, align 8
  %101 = tail call ptr %100(ptr nonnull %98)
  %102 = load ptr, ptr %6, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %102, i64 0, i32 5
  %103 = load ptr, ptr %memberidx17, align 8
  %104 = tail call ptr %103(ptr nonnull %6)
  %105 = alloca ptr, align 8
  %106 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %105, ptr nonnull @165, ptr %97, ptr %101, ptr %104)
  %107 = load ptr, ptr %105, align 8
  %108 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %108, align 8
  %memberidx.i99 = getelementptr inbounds %string, ptr %108, i64 0, i32 1
  store ptr %107, ptr %memberidx.i99, align 8
  %memberidx1.i100 = getelementptr inbounds %string, ptr %108, i64 0, i32 2
  store i64 %106, ptr %memberidx1.i100, align 4
  %memberidx2.i101 = getelementptr inbounds %string, ptr %108, i64 0, i32 3
  store i64 %106, ptr %memberidx2.i101, align 4
  tail call void @free(ptr %97)
  tail call void @free(ptr %101)
  tail call void @free(ptr %104)
  %109 = load ptr, ptr %2, align 8
  %memberidx.i102 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %110 = load ptr, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %Compiler, ptr %110, i64 0, i32 6
  %111 = load ptr, ptr %memberidx1.i103, align 8
  %112 = call ptr @malloc(i32 24)
  store i64 1, ptr %112, align 4
  %memberidx1.i.i104 = getelementptr inbounds %FloError, ptr %112, i64 0, i32 2
  store ptr %109, ptr %memberidx1.i.i104, align 8
  %memberidx2.i.i105 = getelementptr inbounds %FloError, ptr %112, i64 0, i32 1
  store ptr %108, ptr %memberidx2.i.i105, align 8
  %memberidx.i.i106 = getelementptr inbounds %Array_FloError_, ptr %111, i64 0, i32 2
  %113 = load i64, ptr %memberidx.i.i106, align 4
  %memberidx1.i2.i107 = getelementptr inbounds %Array_FloError_, ptr %111, i64 0, i32 3
  %114 = load i64, ptr %memberidx1.i2.i107, align 4
  %.not.i.i108 = icmp slt i64 %113, %114
  br i1 %.not.i.i108, label %ifend11.TypeChecker_error.exit114_crit_edge, label %if.entry.i.i111

ifend11.TypeChecker_error.exit114_crit_edge:      ; preds = %ifend11
  %memberidx4.i.i112.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %111, i64 0, i32 1
  %.pre175 = load ptr, ptr %memberidx4.i.i112.phi.trans.insert, align 8
  br label %TypeChecker_error.exit114

if.entry.i.i111:                                  ; preds = %ifend11
  %115 = shl nuw i64 %114, 1
  store i64 %115, ptr %memberidx1.i2.i107, align 4
  %memberidx2.i.i.i110 = getelementptr inbounds %Array_FloError_, ptr %111, i64 0, i32 1
  %116 = load ptr, ptr %memberidx2.i.i.i110, align 8
  %117 = shl i64 %114, 4
  %118 = call ptr @realloc(ptr %116, i64 %117)
  store ptr %118, ptr %memberidx2.i.i.i110, align 8
  %.pre174 = load i64, ptr %memberidx.i.i106, align 4
  br label %TypeChecker_error.exit114

TypeChecker_error.exit114:                        ; preds = %ifend11.TypeChecker_error.exit114_crit_edge, %if.entry.i.i111
  %119 = phi ptr [ %.pre175, %ifend11.TypeChecker_error.exit114_crit_edge ], [ %118, %if.entry.i.i111 ]
  %120 = phi i64 [ %113, %ifend11.TypeChecker_error.exit114_crit_edge ], [ %.pre174, %if.entry.i.i111 ]
  %121 = add nsw i64 %120, 1
  store i64 %121, ptr %memberidx.i.i106, align 4
  %ptridx.i.i113 = getelementptr inbounds ptr, ptr %119, i64 %120
  store ptr %112, ptr %ptridx.i.i113, align 8
  br label %common.ret

if.entry21:                                       ; preds = %get_class_prop_type.exit
  %memberidx24 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %122 = load ptr, ptr %memberidx24, align 8
  %123 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %87, ptr %122)
  br label %ifend23

ifend23:                                          ; preds = %get_class_prop_type.exit, %if.entry21
  %right.0 = phi ptr [ %123, %if.entry21 ], [ %3, %get_class_prop_type.exit ]
  %memberidx.i115 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %124 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %Compiler, ptr %124, i64 0, i32 6
  %125 = load ptr, ptr %memberidx1.i116, align 8
  %memberidx2.i117 = getelementptr inbounds %Array_FloError_, ptr %125, i64 0, i32 2
  %126 = load i64, ptr %memberidx2.i117, align 4
  %127 = icmp sgt i64 %126, 0
  br i1 %127, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend23
  %memberidx.i118 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 2
  %128 = load i64, ptr %memberidx.i118, align 4
  %129 = icmp eq i64 %128, 5
  %130 = add i64 %5, -11
  %131 = icmp ult i64 %130, 2
  %132 = and i1 %131, %129
  br i1 %132, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend27
  %133 = tail call ptr @malloc(i32 49)
  %134 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %134, align 4
  store i64 8, ptr %133, align 4
  %memberidx.i.i119 = getelementptr inbounds %Expression, ptr %133, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i119, align 4
  %memberidx1.i.i120 = getelementptr inbounds %Expression, ptr %133, i64 0, i32 1
  %memberidx.i121 = getelementptr inbounds %BinaryExpression, ptr %133, i64 0, i32 4
  store ptr %1, ptr %memberidx.i121, align 8
  %memberidx1.i122 = getelementptr inbounds %BinaryExpression, ptr %133, i64 0, i32 5
  store i64 %5, ptr %memberidx1.i122, align 4
  %memberidx2.i123 = getelementptr inbounds %BinaryExpression, ptr %133, i64 0, i32 6
  store ptr %right.0, ptr %memberidx2.i123, align 8
  %memberidx3.i124 = getelementptr inbounds %Expression, ptr %133, i64 0, i32 3
  store ptr %134, ptr %memberidx3.i124, align 8
  store i1 false, ptr %memberidx1.i.i120, align 1
  br label %common.ret

ifend30:                                          ; preds = %ifend27
  %memberidx31 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 3
  %135 = load ptr, ptr %memberidx31, align 8
  %136 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %87, ptr %135)
  br i1 %136, label %ifend34, label %if.entry32

if.entry32:                                       ; preds = %ifend30
  %137 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %87)
  %138 = load ptr, ptr %137, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %138, i64 0, i32 5
  %139 = load ptr, ptr %memberidx35, align 8
  %140 = tail call ptr %139(ptr nonnull %137)
  %141 = load ptr, ptr %memberidx31, align 8
  %142 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %141)
  %143 = load ptr, ptr %142, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %143, i64 0, i32 5
  %144 = load ptr, ptr %memberidx37, align 8
  %145 = tail call ptr %144(ptr nonnull %142)
  %146 = alloca ptr, align 8
  %147 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %146, ptr nonnull @163, ptr %140, ptr %145)
  %148 = load ptr, ptr %146, align 8
  %149 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %149, align 8
  %memberidx.i126 = getelementptr inbounds %string, ptr %149, i64 0, i32 1
  store ptr %148, ptr %memberidx.i126, align 8
  %memberidx1.i127 = getelementptr inbounds %string, ptr %149, i64 0, i32 2
  store i64 %147, ptr %memberidx1.i127, align 4
  %memberidx2.i128 = getelementptr inbounds %string, ptr %149, i64 0, i32 3
  store i64 %147, ptr %memberidx2.i128, align 4
  tail call void @free(ptr %140)
  tail call void @free(ptr %145)
  %memberidx38 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %150 = load ptr, ptr %memberidx38, align 8
  %151 = load ptr, ptr %150, align 8
  %152 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i130 = getelementptr inbounds %Compiler, ptr %152, i64 0, i32 6
  %153 = load ptr, ptr %memberidx1.i130, align 8
  %154 = call ptr @malloc(i32 24)
  store i64 5, ptr %154, align 4
  %memberidx1.i.i131 = getelementptr inbounds %FloError, ptr %154, i64 0, i32 2
  store ptr %151, ptr %memberidx1.i.i131, align 8
  %memberidx2.i.i132 = getelementptr inbounds %FloError, ptr %154, i64 0, i32 1
  store ptr %149, ptr %memberidx2.i.i132, align 8
  %memberidx.i.i133 = getelementptr inbounds %Array_FloError_, ptr %153, i64 0, i32 2
  %155 = load i64, ptr %memberidx.i.i133, align 4
  %memberidx1.i2.i134 = getelementptr inbounds %Array_FloError_, ptr %153, i64 0, i32 3
  %156 = load i64, ptr %memberidx1.i2.i134, align 4
  %.not.i.i135 = icmp slt i64 %155, %156
  br i1 %.not.i.i135, label %if.entry32.TypeChecker_error.exit141_crit_edge, label %if.entry.i.i138

if.entry32.TypeChecker_error.exit141_crit_edge:   ; preds = %if.entry32
  %memberidx4.i.i139.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %153, i64 0, i32 1
  %.pre173 = load ptr, ptr %memberidx4.i.i139.phi.trans.insert, align 8
  br label %TypeChecker_error.exit141

if.entry.i.i138:                                  ; preds = %if.entry32
  %157 = shl nuw i64 %156, 1
  store i64 %157, ptr %memberidx1.i2.i134, align 4
  %memberidx2.i.i.i137 = getelementptr inbounds %Array_FloError_, ptr %153, i64 0, i32 1
  %158 = load ptr, ptr %memberidx2.i.i.i137, align 8
  %159 = shl i64 %156, 4
  %160 = call ptr @realloc(ptr %158, i64 %159)
  store ptr %160, ptr %memberidx2.i.i.i137, align 8
  %.pre172 = load i64, ptr %memberidx.i.i133, align 4
  br label %TypeChecker_error.exit141

TypeChecker_error.exit141:                        ; preds = %if.entry32.TypeChecker_error.exit141_crit_edge, %if.entry.i.i138
  %161 = phi ptr [ %.pre173, %if.entry32.TypeChecker_error.exit141_crit_edge ], [ %160, %if.entry.i.i138 ]
  %162 = phi i64 [ %155, %if.entry32.TypeChecker_error.exit141_crit_edge ], [ %.pre172, %if.entry.i.i138 ]
  %163 = add nsw i64 %162, 1
  store i64 %163, ptr %memberidx.i.i133, align 4
  %ptridx.i.i140 = getelementptr inbounds ptr, ptr %161, i64 %162
  store ptr %154, ptr %ptridx.i.i140, align 8
  br label %common.ret

ifend34:                                          ; preds = %ifend30
  %164 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %164, align 4
  %memberidx.i.i142 = getelementptr inbounds %Expression, ptr %164, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i142, align 4
  %memberidx1.i.i143 = getelementptr inbounds %Expression, ptr %164, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i143, align 1
  %memberidx.i144 = getelementptr inbounds %MemberExpression, ptr %164, i64 0, i32 4
  store ptr %1, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %MemberExpression, ptr %164, i64 0, i32 5
  store ptr %61, ptr %memberidx1.i145, align 8
  %memberidx2.i146 = getelementptr inbounds %Expression, ptr %164, i64 0, i32 3
  store ptr %common.ret.op.i87, ptr %memberidx2.i146, align 8
  %165 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %165, align 8
  %memberidx.i147 = getelementptr inbounds %Array_Expression_, ptr %165, i64 0, i32 2
  store i64 0, ptr %memberidx.i147, align 4
  %memberidx1.i148 = getelementptr inbounds %Array_Expression_, ptr %165, i64 0, i32 3
  store i64 8, ptr %memberidx1.i148, align 4
  %memberidx2.i149 = getelementptr inbounds %Array_Expression_, ptr %165, i64 0, i32 1
  %166 = tail call ptr @malloc(i32 64)
  store ptr %166, ptr %memberidx2.i149, align 8
  store ptr %right.0, ptr %166, align 8
  store i64 1, ptr %memberidx.i147, align 4
  %167 = tail call ptr @malloc(i32 41)
  %memberidx42 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i87, i64 0, i32 2
  %168 = load ptr, ptr %memberidx42, align 8
  store i64 8, ptr %167, align 4
  %memberidx.i.i150 = getelementptr inbounds %Expression, ptr %167, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i150, align 4
  %memberidx1.i.i151 = getelementptr inbounds %Expression, ptr %167, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i151, align 1
  %memberidx.i152 = getelementptr inbounds %CallExpression, ptr %167, i64 0, i32 4
  store ptr %164, ptr %memberidx.i152, align 8
  %memberidx1.i153 = getelementptr inbounds %CallExpression, ptr %167, i64 0, i32 5
  store ptr %165, ptr %memberidx1.i153, align 8
  %memberidx2.i154 = getelementptr inbounds %Expression, ptr %167, i64 0, i32 3
  store ptr %168, ptr %memberidx2.i154, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %UnaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpressionNode, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %5)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %if.entry42, %TypeChecker_error.exit131, %if.entry35, %ifend28, %TypeChecker_error.exit, %if.entry17, %ifend12
  %common.ret.op = phi ptr [ %17, %ifend12 ], [ %22, %if.entry17 ], [ null, %TypeChecker_error.exit ], [ %57, %ifend28 ], [ %66, %if.entry35 ], [ null, %TypeChecker_error.exit131 ], [ %103, %if.entry42 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %12 = load i1, ptr %memberidx3, align 1
  switch i64 %4, label %ifend16 [
    i64 6, label %if.entry4
    i64 7, label %if.entry14
  ]

if.entry4:                                        ; preds = %ifend
  %13 = load i64, ptr %11, align 4
  %14 = add i64 %13, -1
  %15 = icmp ult i64 %14, 9
  br i1 %15, label %if.entry7, label %ifend34.split

if.entry7:                                        ; preds = %if.entry4
  %16 = icmp ult i64 %14, 7
  br i1 %16, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %if.entry7
  %memberidx13 = getelementptr inbounds %IntType, ptr %11, i64 0, i32 1
  store i1 true, ptr %memberidx13, align 1
  br label %ifend12

ifend12:                                          ; preds = %if.entry7, %if.entry10
  %17 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %17, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %17, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %17, i64 0, i32 1
  %memberidx.i76 = getelementptr inbounds %UnaryExpression, ptr %17, i64 0, i32 4
  store i64 6, ptr %memberidx.i76, align 4
  %memberidx1.i77 = getelementptr inbounds %UnaryExpression, ptr %17, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i77, align 8
  %memberidx2.i78 = getelementptr inbounds %Expression, ptr %17, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i78, align 8
  store i1 %12, ptr %memberidx1.i.i, align 1
  br label %common.ret

if.entry14:                                       ; preds = %ifend
  %18 = load i64, ptr %11, align 4
  %19 = icmp ult i64 %18, 10
  br i1 %19, label %if.entry17, label %ifend34.split

ifend16:                                          ; preds = %ifend
  %20 = add i64 %4, -2
  %21 = icmp ult i64 %20, 4
  br i1 %21, label %if.entry20, label %ifend22

if.entry17:                                       ; preds = %if.entry14
  %22 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %22, align 4
  %memberidx.i.i79 = getelementptr inbounds %Expression, ptr %22, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i79, align 4
  %memberidx1.i.i80 = getelementptr inbounds %Expression, ptr %22, i64 0, i32 1
  %memberidx.i81 = getelementptr inbounds %UnaryExpression, ptr %22, i64 0, i32 4
  store i64 7, ptr %memberidx.i81, align 4
  %memberidx1.i82 = getelementptr inbounds %UnaryExpression, ptr %22, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i82, align 8
  %memberidx2.i83 = getelementptr inbounds %Expression, ptr %22, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i83, align 8
  store i1 %12, ptr %memberidx1.i.i80, align 1
  br label %common.ret

if.entry20:                                       ; preds = %ifend16
  %23 = load i64, ptr %11, align 4
  %24 = add i64 %23, -1
  %25 = icmp ult i64 %24, 9
  %26 = icmp eq i64 %23, 13
  %27 = or i1 %26, %25
  br i1 %27, label %if.entry23, label %ifend22

ifend22:                                          ; preds = %if.entry20, %ifend16
  switch i64 %4, label %ifend34.split [
    i64 8, label %if.entry32
    i64 1, label %if.entry39
  ]

if.entry23:                                       ; preds = %if.entry20
  %memberidx.i85 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 2
  %28 = load i64, ptr %memberidx.i85, align 4
  switch i64 %28, label %if.entry26 [
    i64 7, label %if.entry.i
    i64 12, label %check_is_var.exit
    i64 13, label %ifend28
  ]

if.entry.i:                                       ; preds = %if.entry23
  %memberidx1.i86 = getelementptr inbounds %VarAccessExpression, ptr %6, i64 0, i32 4
  %29 = load ptr, ptr %memberidx1.i86, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp eq i64 %30, 1
  br i1 %31, label %ifend28, label %if.entry26

check_is_var.exit:                                ; preds = %if.entry23
  %memberidx7.i = getelementptr inbounds %MemberExpression, ptr %6, i64 0, i32 5
  %32 = load ptr, ptr %memberidx7.i, align 8
  %33 = load i64, ptr %32, align 4
  %34 = icmp eq i64 %33, 1
  br i1 %34, label %ifend28, label %if.entry26

if.entry26:                                       ; preds = %if.entry.i, %if.entry23, %check_is_var.exit
  %35 = tail call fastcc ptr @dump_unary_op(i64 %4)
  %36 = load ptr, ptr %35, align 8
  %memberidx29 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i64 0, i32 5
  %37 = load ptr, ptr %memberidx29, align 8
  %38 = tail call ptr %37(ptr nonnull %35)
  %39 = alloca ptr, align 8
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %39, ptr nonnull @171, ptr %38)
  %41 = load ptr, ptr %39, align 8
  %42 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i87 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i87, align 8
  %memberidx1.i88 = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i88, align 4
  %memberidx2.i89 = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i89, align 4
  tail call void @free(ptr %38)
  %43 = load ptr, ptr %memberidx1, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i91 = getelementptr inbounds %Compiler, ptr %45, i64 0, i32 6
  %46 = load ptr, ptr %memberidx1.i91, align 8
  %47 = call ptr @malloc(i32 24)
  store i64 4, ptr %47, align 4
  %memberidx1.i.i92 = getelementptr inbounds %FloError, ptr %47, i64 0, i32 2
  store ptr %44, ptr %memberidx1.i.i92, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %47, i64 0, i32 1
  store ptr %42, ptr %memberidx2.i.i, align 8
  %memberidx.i.i93 = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 2
  %48 = load i64, ptr %memberidx.i.i93, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 3
  %49 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %48, %49
  br i1 %.not.i.i, label %if.entry26.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry26.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry26
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 1
  %.pre146 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry26
  %50 = shl nuw i64 %49, 1
  store i64 %50, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 1
  %51 = load ptr, ptr %memberidx2.i.i.i, align 8
  %52 = shl i64 %49, 4
  %53 = call ptr @realloc(ptr %51, i64 %52)
  store ptr %53, ptr %memberidx2.i.i.i, align 8
  %.pre145 = load i64, ptr %memberidx.i.i93, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry26.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %54 = phi ptr [ %.pre146, %if.entry26.TypeChecker_error.exit_crit_edge ], [ %53, %if.entry.i.i ]
  %55 = phi i64 [ %48, %if.entry26.TypeChecker_error.exit_crit_edge ], [ %.pre145, %if.entry.i.i ]
  %56 = add nsw i64 %55, 1
  store i64 %56, ptr %memberidx.i.i93, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %54, i64 %55
  store ptr %47, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend28:                                          ; preds = %if.entry.i, %if.entry23, %check_is_var.exit
  %57 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %57, align 4
  %memberidx.i.i94 = getelementptr inbounds %Expression, ptr %57, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i94, align 4
  %memberidx1.i.i95 = getelementptr inbounds %Expression, ptr %57, i64 0, i32 1
  %memberidx.i96 = getelementptr inbounds %UnaryExpression, ptr %57, i64 0, i32 4
  store i64 %4, ptr %memberidx.i96, align 4
  %memberidx1.i97 = getelementptr inbounds %UnaryExpression, ptr %57, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i97, align 8
  %memberidx2.i98 = getelementptr inbounds %Expression, ptr %57, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i98, align 8
  store i1 false, ptr %memberidx1.i.i95, align 1
  br label %common.ret

if.entry32:                                       ; preds = %ifend22
  %memberidx.i100 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 2
  %58 = load i64, ptr %memberidx.i100, align 4
  switch i64 %58, label %ifend34.split [
    i64 7, label %if.entry.i103
    i64 12, label %check_is_var.exit108
    i64 13, label %if.entry35
  ]

if.entry.i103:                                    ; preds = %if.entry32
  %memberidx1.i102 = getelementptr inbounds %VarAccessExpression, ptr %6, i64 0, i32 4
  %59 = load ptr, ptr %memberidx1.i102, align 8
  %60 = load i64, ptr %59, align 4
  %61 = icmp eq i64 %60, 1
  br i1 %61, label %if.entry35, label %ifend34.split

check_is_var.exit108:                             ; preds = %if.entry32
  %memberidx7.i105 = getelementptr inbounds %MemberExpression, ptr %6, i64 0, i32 5
  %62 = load ptr, ptr %memberidx7.i105, align 8
  %63 = load i64, ptr %62, align 4
  %64 = icmp eq i64 %63, 1
  br i1 %64, label %if.entry35, label %ifend34.split

ifend34.split:                                    ; preds = %if.entry4, %if.entry14, %check_is_var.exit108, %if.entry32, %if.entry.i103, %ifend22
  %65 = tail call fastcc ptr @dump_unary_op(i64 %4)
  %.pre = load ptr, ptr %65, align 8
  br label %ifend41

if.entry35:                                       ; preds = %if.entry.i103, %if.entry32, %check_is_var.exit108
  %66 = tail call ptr @malloc(i32 41)
  %67 = tail call ptr @malloc(i32 16)
  %68 = load ptr, ptr %memberidx2, align 8
  store i64 13, ptr %67, align 4
  %memberidx.i109 = getelementptr inbounds %PointerType, ptr %67, i64 0, i32 1
  store ptr %68, ptr %memberidx.i109, align 8
  store i64 8, ptr %66, align 4
  %memberidx.i.i110 = getelementptr inbounds %Expression, ptr %66, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i110, align 4
  %memberidx1.i.i111 = getelementptr inbounds %Expression, ptr %66, i64 0, i32 1
  %memberidx.i112 = getelementptr inbounds %UnaryExpression, ptr %66, i64 0, i32 4
  store i64 8, ptr %memberidx.i112, align 4
  %memberidx1.i113 = getelementptr inbounds %UnaryExpression, ptr %66, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i113, align 8
  %memberidx2.i114 = getelementptr inbounds %Expression, ptr %66, i64 0, i32 3
  store ptr %67, ptr %memberidx2.i114, align 8
  store i1 false, ptr %memberidx1.i.i111, align 1
  br label %common.ret

if.entry39:                                       ; preds = %ifend22
  %69 = load i64, ptr %11, align 4
  %70 = icmp eq i64 %69, 19
  br i1 %70, label %if.entry.i142, label %is_object.exit

if.entry.i142:                                    ; preds = %if.entry39, %if.entry.i142
  %.tr5.i = phi ptr [ %71, %if.entry.i142 ], [ %11, %if.entry39 ]
  %memberidx1.i141 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %71 = load ptr, ptr %memberidx1.i141, align 8
  %72 = load i64, ptr %71, align 4
  %73 = icmp eq i64 %72, 19
  br i1 %73, label %if.entry.i142, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i142, %if.entry39
  %.lcssa.i = phi i64 [ %69, %if.entry39 ], [ %72, %if.entry.i142 ]
  %74 = icmp eq i64 %.lcssa.i, 11
  %75 = icmp eq i64 %69, 13
  %76 = or i1 %75, %74
  br i1 %76, label %if.entry42, label %if.entry39.split

if.entry39.split:                                 ; preds = %is_object.exit
  %77 = tail call ptr @malloc(i32 1)
  store i8 38, ptr %77, align 8
  %78 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %78, align 8
  %memberidx.i.i36.i = getelementptr inbounds %string, ptr %78, i64 0, i32 1
  store ptr %77, ptr %memberidx.i.i36.i, align 8
  %memberidx1.i.i37.i = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i37.i, align 4
  %memberidx2.i.i38.i = getelementptr inbounds %string, ptr %78, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i38.i, align 4
  br label %ifend41

ifend41:                                          ; preds = %if.entry39.split, %ifend34.split
  %79 = phi ptr [ %.pre, %ifend34.split ], [ @VTablestring, %if.entry39.split ]
  %phi.call = phi ptr [ %65, %ifend34.split ], [ %78, %if.entry39.split ]
  %memberidx45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %79, i64 0, i32 5
  %80 = load ptr, ptr %memberidx45, align 8
  %81 = tail call ptr %80(ptr nonnull %phi.call)
  %82 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %11)
  %83 = load ptr, ptr %82, align 8
  %memberidx46 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %83, i64 0, i32 5
  %84 = load ptr, ptr %memberidx46, align 8
  %85 = tail call ptr %84(ptr nonnull %82)
  %86 = alloca ptr, align 8
  %87 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %86, ptr nonnull @172, ptr %81, ptr %85)
  %88 = load ptr, ptr %86, align 8
  %89 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %89, align 8
  %memberidx.i116 = getelementptr inbounds %string, ptr %89, i64 0, i32 1
  store ptr %88, ptr %memberidx.i116, align 8
  %memberidx1.i117 = getelementptr inbounds %string, ptr %89, i64 0, i32 2
  store i64 %87, ptr %memberidx1.i117, align 4
  %memberidx2.i118 = getelementptr inbounds %string, ptr %89, i64 0, i32 3
  store i64 %87, ptr %memberidx2.i118, align 4
  tail call void @free(ptr %81)
  tail call void @free(ptr %85)
  %90 = load ptr, ptr %2, align 8
  %91 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i120 = getelementptr inbounds %Compiler, ptr %91, i64 0, i32 6
  %92 = load ptr, ptr %memberidx1.i120, align 8
  %93 = call ptr @malloc(i32 24)
  store i64 5, ptr %93, align 4
  %memberidx1.i.i121 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 2
  store ptr %90, ptr %memberidx1.i.i121, align 8
  %memberidx2.i.i122 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 1
  store ptr %89, ptr %memberidx2.i.i122, align 8
  %memberidx.i.i123 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 2
  %94 = load i64, ptr %memberidx.i.i123, align 4
  %memberidx1.i2.i124 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 3
  %95 = load i64, ptr %memberidx1.i2.i124, align 4
  %.not.i.i125 = icmp slt i64 %94, %95
  br i1 %.not.i.i125, label %ifend41.TypeChecker_error.exit131_crit_edge, label %if.entry.i.i128

ifend41.TypeChecker_error.exit131_crit_edge:      ; preds = %ifend41
  %memberidx4.i.i129.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %.pre144 = load ptr, ptr %memberidx4.i.i129.phi.trans.insert, align 8
  br label %TypeChecker_error.exit131

if.entry.i.i128:                                  ; preds = %ifend41
  %96 = shl nuw i64 %95, 1
  store i64 %96, ptr %memberidx1.i2.i124, align 4
  %memberidx2.i.i.i127 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %97 = load ptr, ptr %memberidx2.i.i.i127, align 8
  %98 = shl i64 %95, 4
  %99 = call ptr @realloc(ptr %97, i64 %98)
  store ptr %99, ptr %memberidx2.i.i.i127, align 8
  %.pre143 = load i64, ptr %memberidx.i.i123, align 4
  br label %TypeChecker_error.exit131

TypeChecker_error.exit131:                        ; preds = %ifend41.TypeChecker_error.exit131_crit_edge, %if.entry.i.i128
  %100 = phi ptr [ %.pre144, %ifend41.TypeChecker_error.exit131_crit_edge ], [ %99, %if.entry.i.i128 ]
  %101 = phi i64 [ %94, %ifend41.TypeChecker_error.exit131_crit_edge ], [ %.pre143, %if.entry.i.i128 ]
  %102 = add nsw i64 %101, 1
  store i64 %102, ptr %memberidx.i.i123, align 4
  %ptridx.i.i130 = getelementptr inbounds ptr, ptr %100, i64 %101
  store ptr %93, ptr %ptridx.i.i130, align 8
  br label %common.ret

if.entry42:                                       ; preds = %is_object.exit
  %103 = tail call ptr @malloc(i32 41)
  %104 = tail call ptr @malloc(i32 8)
  store i64 10, ptr %104, align 4
  store i64 8, ptr %103, align 4
  %memberidx.i.i132 = getelementptr inbounds %Expression, ptr %103, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i132, align 4
  %memberidx1.i.i133 = getelementptr inbounds %Expression, ptr %103, i64 0, i32 1
  %memberidx.i134 = getelementptr inbounds %UnaryExpression, ptr %103, i64 0, i32 4
  store i64 1, ptr %memberidx.i134, align 4
  %memberidx1.i135 = getelementptr inbounds %UnaryExpression, ptr %103, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i135, align 8
  %memberidx2.i136 = getelementptr inbounds %Expression, ptr %103, i64 0, i32 3
  store ptr %104, ptr %memberidx2.i136, align 8
  store i1 false, ptr %memberidx1.i.i133, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_new_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %3)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %5 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %5, i64 0, i32 6
  %6 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i, align 4
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend27, %2, %TypeChecker_error.exit131, %TypeChecker_error.exit109, %TypeChecker_error.exit93, %TypeChecker_error.exit, %ifend10
  %common.ret.op = phi ptr [ %39, %ifend10 ], [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit93 ], [ null, %TypeChecker_error.exit109 ], [ null, %TypeChecker_error.exit131 ], [ null, %2 ], [ null, %ifend27 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %9 = load i64, ptr %4, align 4
  %10 = icmp eq i64 %9, 19
  br i1 %10, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %memberidx5 = getelementptr inbounds %GenericType, ptr %4, i64 0, i32 3
  %11 = load ptr, ptr %memberidx5, align 8
  br label %ifend4

ifend4:                                           ; preds = %ifend, %if.entry2
  %12 = phi ptr [ %4, %ifend ], [ %11, %if.entry2 ]
  %args = alloca ptr, align 8
  %13 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %13, align 8
  %memberidx.i68 = getelementptr inbounds %Array_Expression_, ptr %13, i64 0, i32 2
  store i64 0, ptr %memberidx.i68, align 4
  %memberidx1.i69 = getelementptr inbounds %Array_Expression_, ptr %13, i64 0, i32 3
  store i64 8, ptr %memberidx1.i69, align 4
  %memberidx2.i70 = getelementptr inbounds %Array_Expression_, ptr %13, i64 0, i32 1
  %14 = tail call ptr @malloc(i32 64)
  store ptr %14, ptr %memberidx2.i70, align 8
  store i64 0, ptr %memberidx.i68, align 4
  store ptr %13, ptr %args, align 8
  %15 = load i64, ptr %12, align 4
  %16 = icmp eq i64 %15, 19
  br i1 %16, label %if.entry.i138, label %is_object.exit.thread

if.entry.i138:                                    ; preds = %ifend4, %if.entry.i138
  %.tr5.i = phi ptr [ %17, %if.entry.i138 ], [ %12, %ifend4 ]
  %memberidx1.i137 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %17 = load ptr, ptr %memberidx1.i137, align 8
  %18 = load i64, ptr %17, align 4
  switch i64 %18, label %else9 [
    i64 19, label %if.entry.i138
    i64 11, label %if.entry8
  ]

is_object.exit.thread:                            ; preds = %ifend4
  switch i64 %15, label %else20 [
    i64 11, label %if.entry8.thread
    i64 13, label %if.entry19
  ]

if.entry8.thread:                                 ; preds = %is_object.exit.thread
  %19 = load ptr, ptr %0, align 8
  br label %if.entry3.i

if.entry8:                                        ; preds = %if.entry.i138
  %20 = load ptr, ptr %0, align 8
  br i1 %16, label %if.entry.i140, label %if.entry3.i

if.entry.i140:                                    ; preds = %if.entry8, %if.entry.i140
  %.tr11.i145 = phi ptr [ %21, %if.entry.i140 ], [ %12, %if.entry8 ]
  %memberidx1.i139 = getelementptr inbounds %GenericType, ptr %.tr11.i145, i64 0, i32 3
  %21 = load ptr, ptr %memberidx1.i139, align 8
  %22 = load i64, ptr %21, align 4
  %switch = icmp eq i64 %22, 19
  br i1 %switch, label %if.entry.i140, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i140, %if.entry8.thread, %if.entry8
  %23 = phi ptr [ %20, %if.entry8 ], [ %19, %if.entry8.thread ], [ %20, %if.entry.i140 ]
  %.tr11.i.lcssa = phi ptr [ %12, %if.entry8 ], [ %12, %if.entry8.thread ], [ %21, %if.entry.i140 ]
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %24 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i141 = getelementptr inbounds %Program, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i.i141, align 8
  %26 = load i64, ptr %24, align 4
  %memberidx.i.i.i142 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i.i.i142, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i143 = getelementptr inbounds %Module, ptr %28, i64 0, i32 4
  %29 = load ptr, ptr %memberidx2.i.i143, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %24, i64 0, i32 2
  %30 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx.i6.i.i, align 8
  %33 = load ptr, ptr %32, align 8
  %memberidx13 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 5
  %34 = load ptr, ptr %memberidx13, align 8
  %35 = call fastcc ptr @TypeChecker_check_constructor_call(ptr nonnull %0, ptr %33, ptr %34, ptr nonnull %args)
  %.not67 = icmp eq ptr %35, null
  br i1 %.not67, label %if.entry3.i.ifend10_crit_edge, label %if.entry14

if.entry3.i.ifend10_crit_edge:                    ; preds = %if.entry3.i
  %.pre156 = load ptr, ptr %args, align 8
  br label %ifend10

else9:                                            ; preds = %if.entry.i138
  %36 = icmp eq i64 %15, 13
  br i1 %36, label %if.entry19, label %else20

ifend10:                                          ; preds = %if.entry3.i.ifend10_crit_edge, %Array_Expression____sl__.exit
  %37 = phi ptr [ %.pre156, %if.entry3.i.ifend10_crit_edge ], [ %13, %Array_Expression____sl__.exit ]
  %38 = phi ptr [ %12, %if.entry3.i.ifend10_crit_edge ], [ %54, %Array_Expression____sl__.exit ]
  %39 = tail call ptr @malloc(i32 42)
  %memberidx44 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 4
  %40 = load i1, ptr %memberidx44, align 1
  store i64 8, ptr %39, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %39, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %39, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i71 = getelementptr inbounds %NewExpression, ptr %39, i64 0, i32 6
  store ptr %38, ptr %memberidx.i71, align 8
  %memberidx1.i72 = getelementptr inbounds %NewExpression, ptr %39, i64 0, i32 5
  store i1 %40, ptr %memberidx1.i72, align 1
  %memberidx2.i73 = getelementptr inbounds %NewExpression, ptr %39, i64 0, i32 4
  store ptr %37, ptr %memberidx2.i73, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %39, i64 0, i32 3
  store ptr %4, ptr %memberidx3.i, align 8
  br label %common.ret

if.entry14:                                       ; preds = %if.entry3.i
  %41 = load ptr, ptr %1, align 8
  %42 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i75 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i75, align 8
  %44 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %44, align 4
  %memberidx1.i.i76 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 2
  store ptr %41, ptr %memberidx1.i.i76, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %44, i64 0, i32 1
  store ptr %35, ptr %memberidx2.i.i, align 8
  %memberidx.i.i77 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %45 = load i64, ptr %memberidx.i.i77, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 3
  %46 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %45, %46
  br i1 %.not.i.i, label %if.entry14.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry14.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry14
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %.pre155 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry14
  %47 = shl nuw i64 %46, 1
  store i64 %47, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i.i, align 8
  %49 = shl i64 %46, 4
  %50 = tail call ptr @realloc(ptr %48, i64 %49)
  store ptr %50, ptr %memberidx2.i.i.i, align 8
  %.pre154 = load i64, ptr %memberidx.i.i77, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry14.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %51 = phi ptr [ %.pre155, %if.entry14.TypeChecker_error.exit_crit_edge ], [ %50, %if.entry.i.i ]
  %52 = phi i64 [ %45, %if.entry14.TypeChecker_error.exit_crit_edge ], [ %.pre154, %if.entry.i.i ]
  %53 = add nsw i64 %52, 1
  store i64 %53, ptr %memberidx.i.i77, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %51, i64 %52
  store ptr %44, ptr %ptridx.i.i, align 8
  br label %common.ret

if.entry19:                                       ; preds = %is_object.exit.thread, %else9
  %memberidx22 = getelementptr inbounds %PointerType, ptr %12, i64 0, i32 1
  %54 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 5
  %55 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Array_ExpressionNode_, ptr %55, i64 0, i32 2
  %56 = load i64, ptr %memberidx24, align 4
  %.not = icmp eq i64 %56, 1
  br i1 %.not, label %ifend27, label %if.entry25

else20:                                           ; preds = %is_object.exit.thread, %else9
  %57 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %12)
  %58 = load ptr, ptr %57, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i64 0, i32 5
  %59 = load ptr, ptr %memberidx42, align 8
  %60 = tail call ptr %59(ptr nonnull %57)
  %61 = alloca ptr, align 8
  %62 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %61, ptr nonnull @180, ptr %60)
  %63 = load ptr, ptr %61, align 8
  %64 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %64, align 8
  %memberidx.i78 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  store ptr %63, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  store i64 %62, ptr %memberidx1.i79, align 4
  %memberidx2.i80 = getelementptr inbounds %string, ptr %64, i64 0, i32 3
  store i64 %62, ptr %memberidx2.i80, align 4
  tail call void @free(ptr %60)
  %65 = load ptr, ptr %1, align 8
  %66 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i82 = getelementptr inbounds %Compiler, ptr %66, i64 0, i32 6
  %67 = load ptr, ptr %memberidx1.i82, align 8
  %68 = call ptr @malloc(i32 24)
  store i64 5, ptr %68, align 4
  %memberidx1.i.i83 = getelementptr inbounds %FloError, ptr %68, i64 0, i32 2
  store ptr %65, ptr %memberidx1.i.i83, align 8
  %memberidx2.i.i84 = getelementptr inbounds %FloError, ptr %68, i64 0, i32 1
  store ptr %64, ptr %memberidx2.i.i84, align 8
  %memberidx.i.i85 = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 2
  %69 = load i64, ptr %memberidx.i.i85, align 4
  %memberidx1.i2.i86 = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 3
  %70 = load i64, ptr %memberidx1.i2.i86, align 4
  %.not.i.i87 = icmp slt i64 %69, %70
  br i1 %.not.i.i87, label %else20.TypeChecker_error.exit93_crit_edge, label %if.entry.i.i90

else20.TypeChecker_error.exit93_crit_edge:        ; preds = %else20
  %memberidx4.i.i91.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 1
  %.pre147 = load ptr, ptr %memberidx4.i.i91.phi.trans.insert, align 8
  br label %TypeChecker_error.exit93

if.entry.i.i90:                                   ; preds = %else20
  %71 = shl nuw i64 %70, 1
  store i64 %71, ptr %memberidx1.i2.i86, align 4
  %memberidx2.i.i.i89 = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 1
  %72 = load ptr, ptr %memberidx2.i.i.i89, align 8
  %73 = shl i64 %70, 4
  %74 = call ptr @realloc(ptr %72, i64 %73)
  store ptr %74, ptr %memberidx2.i.i.i89, align 8
  %.pre = load i64, ptr %memberidx.i.i85, align 4
  br label %TypeChecker_error.exit93

TypeChecker_error.exit93:                         ; preds = %else20.TypeChecker_error.exit93_crit_edge, %if.entry.i.i90
  %75 = phi ptr [ %.pre147, %else20.TypeChecker_error.exit93_crit_edge ], [ %74, %if.entry.i.i90 ]
  %76 = phi i64 [ %69, %else20.TypeChecker_error.exit93_crit_edge ], [ %.pre, %if.entry.i.i90 ]
  %77 = add nsw i64 %76, 1
  store i64 %77, ptr %memberidx.i.i85, align 4
  %ptridx.i.i92 = getelementptr inbounds ptr, ptr %75, i64 %76
  store ptr %68, ptr %ptridx.i.i92, align 8
  br label %common.ret

if.entry25:                                       ; preds = %if.entry19
  %78 = alloca ptr, align 8
  %79 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %78, ptr nonnull @178, i64 %56)
  %80 = load ptr, ptr %78, align 8
  %81 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %81, align 8
  %memberidx.i94 = getelementptr inbounds %string, ptr %81, i64 0, i32 1
  store ptr %80, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %string, ptr %81, i64 0, i32 2
  store i64 %79, ptr %memberidx1.i95, align 4
  %memberidx2.i96 = getelementptr inbounds %string, ptr %81, i64 0, i32 3
  store i64 %79, ptr %memberidx2.i96, align 4
  %82 = load ptr, ptr %1, align 8
  %83 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i98 = getelementptr inbounds %Compiler, ptr %83, i64 0, i32 6
  %84 = load ptr, ptr %memberidx1.i98, align 8
  %85 = call ptr @malloc(i32 24)
  store i64 4, ptr %85, align 4
  %memberidx1.i.i99 = getelementptr inbounds %FloError, ptr %85, i64 0, i32 2
  store ptr %82, ptr %memberidx1.i.i99, align 8
  %memberidx2.i.i100 = getelementptr inbounds %FloError, ptr %85, i64 0, i32 1
  store ptr %81, ptr %memberidx2.i.i100, align 8
  %memberidx.i.i101 = getelementptr inbounds %Array_FloError_, ptr %84, i64 0, i32 2
  %86 = load i64, ptr %memberidx.i.i101, align 4
  %memberidx1.i2.i102 = getelementptr inbounds %Array_FloError_, ptr %84, i64 0, i32 3
  %87 = load i64, ptr %memberidx1.i2.i102, align 4
  %.not.i.i103 = icmp slt i64 %86, %87
  br i1 %.not.i.i103, label %if.entry25.TypeChecker_error.exit109_crit_edge, label %if.entry.i.i106

if.entry25.TypeChecker_error.exit109_crit_edge:   ; preds = %if.entry25
  %memberidx4.i.i107.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %84, i64 0, i32 1
  %.pre149 = load ptr, ptr %memberidx4.i.i107.phi.trans.insert, align 8
  br label %TypeChecker_error.exit109

if.entry.i.i106:                                  ; preds = %if.entry25
  %88 = shl nuw i64 %87, 1
  store i64 %88, ptr %memberidx1.i2.i102, align 4
  %memberidx2.i.i.i105 = getelementptr inbounds %Array_FloError_, ptr %84, i64 0, i32 1
  %89 = load ptr, ptr %memberidx2.i.i.i105, align 8
  %90 = shl i64 %87, 4
  %91 = call ptr @realloc(ptr %89, i64 %90)
  store ptr %91, ptr %memberidx2.i.i.i105, align 8
  %.pre148 = load i64, ptr %memberidx.i.i101, align 4
  br label %TypeChecker_error.exit109

TypeChecker_error.exit109:                        ; preds = %if.entry25.TypeChecker_error.exit109_crit_edge, %if.entry.i.i106
  %92 = phi ptr [ %.pre149, %if.entry25.TypeChecker_error.exit109_crit_edge ], [ %91, %if.entry.i.i106 ]
  %93 = phi i64 [ %86, %if.entry25.TypeChecker_error.exit109_crit_edge ], [ %.pre148, %if.entry.i.i106 ]
  %94 = add nsw i64 %93, 1
  store i64 %94, ptr %memberidx.i.i101, align 4
  %ptridx.i.i108 = getelementptr inbounds ptr, ptr %92, i64 %93
  store ptr %85, ptr %ptridx.i.i108, align 8
  br label %common.ret

ifend27:                                          ; preds = %if.entry19
  %95 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %95, align 4
  %memberidx.i110 = getelementptr inbounds %IntType, ptr %95, i64 0, i32 1
  store i1 false, ptr %memberidx.i110, align 1
  %96 = load ptr, ptr %memberidx23, align 8
  %memberidx.i111 = getelementptr inbounds %Array_ExpressionNode_, ptr %96, i64 0, i32 1
  %97 = load ptr, ptr %memberidx.i111, align 8
  %98 = load ptr, ptr %97, align 8
  %99 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %95, ptr %98)
  %100 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i113 = getelementptr inbounds %Compiler, ptr %100, i64 0, i32 6
  %101 = load ptr, ptr %memberidx1.i113, align 8
  %memberidx2.i114 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 2
  %102 = load i64, ptr %memberidx2.i114, align 4
  %103 = icmp sgt i64 %102, 0
  br i1 %103, label %common.ret, label %ifend32

ifend32:                                          ; preds = %ifend27
  %memberidx33 = getelementptr inbounds %Expression, ptr %99, i64 0, i32 3
  %104 = load ptr, ptr %memberidx33, align 8
  %105 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %95, ptr %104)
  br i1 %105, label %ifend36, label %if.entry34

if.entry34:                                       ; preds = %ifend32
  %106 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %95)
  %107 = load ptr, ptr %106, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %107, i64 0, i32 5
  %108 = load ptr, ptr %memberidx37, align 8
  %109 = tail call ptr %108(ptr nonnull %106)
  %110 = load ptr, ptr %memberidx33, align 8
  %111 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %110)
  %112 = load ptr, ptr %111, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %112, i64 0, i32 5
  %113 = load ptr, ptr %memberidx39, align 8
  %114 = tail call ptr %113(ptr nonnull %111)
  %115 = alloca ptr, align 8
  %116 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %115, ptr nonnull @179, ptr %109, ptr %114)
  %117 = load ptr, ptr %115, align 8
  %118 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %118, align 8
  %memberidx.i115 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  store ptr %117, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %string, ptr %118, i64 0, i32 2
  store i64 %116, ptr %memberidx1.i116, align 4
  %memberidx2.i117 = getelementptr inbounds %string, ptr %118, i64 0, i32 3
  store i64 %116, ptr %memberidx2.i117, align 4
  tail call void @free(ptr %109)
  tail call void @free(ptr %114)
  %119 = load ptr, ptr %memberidx23, align 8
  %memberidx.i118 = getelementptr inbounds %Array_ExpressionNode_, ptr %119, i64 0, i32 1
  %120 = load ptr, ptr %memberidx.i118, align 8
  %121 = load ptr, ptr %120, align 8
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i120 = getelementptr inbounds %Compiler, ptr %123, i64 0, i32 6
  %124 = load ptr, ptr %memberidx1.i120, align 8
  %125 = call ptr @malloc(i32 24)
  store i64 4, ptr %125, align 4
  %memberidx1.i.i121 = getelementptr inbounds %FloError, ptr %125, i64 0, i32 2
  store ptr %122, ptr %memberidx1.i.i121, align 8
  %memberidx2.i.i122 = getelementptr inbounds %FloError, ptr %125, i64 0, i32 1
  store ptr %118, ptr %memberidx2.i.i122, align 8
  %memberidx.i.i123 = getelementptr inbounds %Array_FloError_, ptr %124, i64 0, i32 2
  %126 = load i64, ptr %memberidx.i.i123, align 4
  %memberidx1.i2.i124 = getelementptr inbounds %Array_FloError_, ptr %124, i64 0, i32 3
  %127 = load i64, ptr %memberidx1.i2.i124, align 4
  %.not.i.i125 = icmp slt i64 %126, %127
  br i1 %.not.i.i125, label %if.entry34.TypeChecker_error.exit131_crit_edge, label %if.entry.i.i128

if.entry34.TypeChecker_error.exit131_crit_edge:   ; preds = %if.entry34
  %memberidx4.i.i129.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %124, i64 0, i32 1
  %.pre151 = load ptr, ptr %memberidx4.i.i129.phi.trans.insert, align 8
  br label %TypeChecker_error.exit131

if.entry.i.i128:                                  ; preds = %if.entry34
  %128 = shl nuw i64 %127, 1
  store i64 %128, ptr %memberidx1.i2.i124, align 4
  %memberidx2.i.i.i127 = getelementptr inbounds %Array_FloError_, ptr %124, i64 0, i32 1
  %129 = load ptr, ptr %memberidx2.i.i.i127, align 8
  %130 = shl i64 %127, 4
  %131 = call ptr @realloc(ptr %129, i64 %130)
  store ptr %131, ptr %memberidx2.i.i.i127, align 8
  %.pre150 = load i64, ptr %memberidx.i.i123, align 4
  br label %TypeChecker_error.exit131

TypeChecker_error.exit131:                        ; preds = %if.entry34.TypeChecker_error.exit131_crit_edge, %if.entry.i.i128
  %132 = phi ptr [ %.pre151, %if.entry34.TypeChecker_error.exit131_crit_edge ], [ %131, %if.entry.i.i128 ]
  %133 = phi i64 [ %126, %if.entry34.TypeChecker_error.exit131_crit_edge ], [ %.pre150, %if.entry.i.i128 ]
  %134 = add nsw i64 %133, 1
  store i64 %134, ptr %memberidx.i.i123, align 4
  %ptridx.i.i130 = getelementptr inbounds ptr, ptr %132, i64 %133
  store ptr %125, ptr %ptridx.i.i130, align 8
  tail call void @free(ptr nonnull %95)
  br label %common.ret

ifend36:                                          ; preds = %ifend32
  %135 = load i64, ptr %memberidx.i68, align 4
  %136 = load i64, ptr %memberidx1.i69, align 4
  %.not.i = icmp slt i64 %135, %136
  br i1 %.not.i, label %ifend36.Array_Expression____sl__.exit_crit_edge, label %if.entry.i

ifend36.Array_Expression____sl__.exit_crit_edge:  ; preds = %ifend36
  %.pre153 = load ptr, ptr %memberidx2.i70, align 8
  br label %Array_Expression____sl__.exit

if.entry.i:                                       ; preds = %ifend36
  %137 = shl nuw i64 %136, 1
  store i64 %137, ptr %memberidx1.i69, align 4
  %138 = load ptr, ptr %memberidx2.i70, align 8
  %139 = shl i64 %136, 4
  %140 = tail call ptr @realloc(ptr %138, i64 %139)
  store ptr %140, ptr %memberidx2.i70, align 8
  %.pre152 = load i64, ptr %memberidx.i68, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %ifend36.Array_Expression____sl__.exit_crit_edge, %if.entry.i
  %141 = phi ptr [ %.pre153, %ifend36.Array_Expression____sl__.exit_crit_edge ], [ %140, %if.entry.i ]
  %142 = phi i64 [ %135, %ifend36.Array_Expression____sl__.exit_crit_edge ], [ %.pre152, %if.entry.i ]
  %143 = add nsw i64 %142, 1
  store i64 %143, ptr %memberidx.i68, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %141, i64 %142
  store ptr %99, ptr %ptridx.i, align 8
  br label %ifend10
}

define internal fastcc ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %5, align 4
  %6 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %5, ptr %4)
  %memberidx.i.i45 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i.i46 = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i.i46, align 8
  %memberidx2.i.i47 = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i47, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %common.ret, label %ifend.i

ifend.i:                                          ; preds = %3
  %memberidx.i48 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx.i48, align 8
  %12 = load i64, ptr %11, align 4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %ifend, label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i
  %14 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %14, align 4
  %15 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %15, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 1
  %memberidx.i.i.i49 = getelementptr inbounds %TypeCastExpression, ptr %15, i64 0, i32 4
  store ptr %6, ptr %memberidx.i.i.i49, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  store ptr %14, ptr %memberidx1.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %16 = load i1, ptr %memberidx3.i.i.i, align 1
  store i1 %16, ptr %memberidx1.i.i.i.i, align 1
  %.pre = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i.phi.trans.insert = getelementptr inbounds %Compiler, ptr %.pre, i64 0, i32 6
  %.pre51 = load ptr, ptr %memberidx1.i.phi.trans.insert, align 8
  %memberidx2.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %.pre51, i64 0, i32 2
  %.pre52 = load i64, ptr %memberidx2.i.phi.trans.insert, align 4
  %17 = icmp sgt i64 %.pre52, 0
  br i1 %17, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %ifend4, %ifend, %TypeChecker_check_condition.exit, %ifend13, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %58, %ifend13 ], [ null, %TypeChecker_check_condition.exit ], [ null, %ifend ], [ null, %ifend4 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %ifend.i, %TypeChecker_check_condition.exit
  %common.ret.op.i58 = phi ptr [ %15, %TypeChecker_check_condition.exit ], [ %6, %ifend.i ]
  %memberidx1 = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 4
  %18 = load ptr, ptr %memberidx1, align 8
  %19 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %1, ptr %18)
  %20 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i30 = getelementptr inbounds %Compiler, ptr %20, i64 0, i32 6
  %21 = load ptr, ptr %memberidx1.i30, align 8
  %memberidx2.i31 = getelementptr inbounds %Array_FloError_, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i31, align 4
  %23 = icmp sgt i64 %22, 0
  br i1 %23, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %memberidx5 = getelementptr inbounds %Expression, ptr %19, i64 0, i32 3
  %24 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 5
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %24, ptr %25)
  %27 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i33 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i33, align 8
  %memberidx2.i34 = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx2.i34, align 4
  %30 = icmp sgt i64 %29, 0
  br i1 %30, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend4
  %memberidx10 = getelementptr inbounds %Expression, ptr %26, i64 0, i32 3
  %31 = load ptr, ptr %memberidx10, align 8
  %32 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %24, ptr %31)
  br i1 %32, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend9
  %33 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %24)
  %34 = load ptr, ptr %33, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 5
  %35 = load ptr, ptr %memberidx14, align 8
  %36 = tail call ptr %35(ptr nonnull %33)
  %37 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %31)
  %38 = load ptr, ptr %37, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %38, i64 0, i32 5
  %39 = load ptr, ptr %memberidx15, align 8
  %40 = tail call ptr %39(ptr nonnull %37)
  %41 = alloca ptr, align 8
  %42 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %41, ptr nonnull @193, ptr %36, ptr %40)
  %43 = load ptr, ptr %41, align 8
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i35 = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i35, align 8
  %memberidx1.i36 = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 %42, ptr %memberidx1.i36, align 4
  %memberidx2.i37 = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 %42, ptr %memberidx2.i37, align 4
  tail call void @free(ptr %36)
  tail call void @free(ptr %40)
  %45 = load ptr, ptr %2, align 8
  %46 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i39 = getelementptr inbounds %Compiler, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i39, align 8
  %48 = call ptr @malloc(i32 24)
  store i64 5, ptr %48, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 2
  store ptr %45, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 1
  store ptr %44, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %49 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 3
  %50 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %49, %50
  br i1 %.not.i.i, label %if.entry11.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry11.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry11
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %.pre54 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry11
  %51 = shl nuw i64 %50, 1
  store i64 %51, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i.i, align 8
  %53 = shl i64 %50, 4
  %54 = call ptr @realloc(ptr %52, i64 %53)
  store ptr %54, ptr %memberidx2.i.i.i, align 8
  %.pre53 = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry11.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %55 = phi ptr [ %.pre54, %if.entry11.TypeChecker_error.exit_crit_edge ], [ %54, %if.entry.i.i ]
  %56 = phi i64 [ %49, %if.entry11.TypeChecker_error.exit_crit_edge ], [ %.pre53, %if.entry.i.i ]
  %57 = add nsw i64 %56, 1
  store i64 %57, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %55, i64 %56
  store ptr %48, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend13:                                          ; preds = %ifend9
  %58 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %58, align 4
  %memberidx.i.i40 = getelementptr inbounds %Expression, ptr %58, i64 0, i32 2
  store i64 15, ptr %memberidx.i.i40, align 4
  %memberidx1.i.i41 = getelementptr inbounds %Expression, ptr %58, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i41, align 1
  %memberidx.i42 = getelementptr inbounds %TernaryExpression, ptr %58, i64 0, i32 4
  store ptr %common.ret.op.i58, ptr %memberidx.i42, align 8
  %memberidx1.i43 = getelementptr inbounds %TernaryExpression, ptr %58, i64 0, i32 5
  store ptr %19, ptr %memberidx1.i43, align 8
  %memberidx2.i44 = getelementptr inbounds %TernaryExpression, ptr %58, i64 0, i32 6
  store ptr %26, ptr %memberidx2.i44, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %58, i64 0, i32 3
  %59 = load ptr, ptr %memberidx5, align 8
  store ptr %59, ptr %memberidx3.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %1) unnamed_addr {
  %3 = load i64, ptr %1, align 4
  switch i64 %3, label %ifend57 [
    i64 15, label %if.entry
    i64 13, label %if.entry12
    i64 11, label %if.entry18
    i64 12, label %if.entry24
    i64 14, label %if.entry31
    i64 19, label %if.entry38
    i64 17, label %if.entry51
    i64 16, label %if.entry55
  ]

if.entry:                                         ; preds = %2
  %4 = tail call ptr @malloc(i32 0)
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %5, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  store ptr %4, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %memberidx = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1134 = getelementptr inbounds %Array_Type_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx1134, align 4
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %if.entry, %ifend7
  %9 = phi ptr [ %46, %ifend7 ], [ %4, %if.entry ]
  %10 = phi i64 [ %47, %ifend7 ], [ 0, %if.entry ]
  %11 = phi ptr [ %45, %ifend7 ], [ %6, %if.entry ]
  %storemerge78135 = phi i64 [ %48, %ifend7 ], [ 0, %if.entry ]
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %11, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %12, i64 %storemerge78135
  %13 = load ptr, ptr %ptridx.i, align 8
  %14 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %13)
  %memberidx1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx1.i, align 4
  %16 = add nuw i64 %15, %10
  %17 = tail call ptr @realloc(ptr %9, i64 %16)
  store ptr %17, ptr %memberidx.i.i, align 8
  %18 = load i64, ptr %memberidx1.i.i, align 4
  %19 = getelementptr inbounds i8, ptr %17, i64 %18
  %memberidx6.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  %20 = load ptr, ptr %memberidx6.i, align 8
  %21 = load i64, ptr %memberidx1.i, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %19, ptr align 8 %20, i64 %21, i1 false)
  store i64 %16, ptr %memberidx1.i.i, align 4
  %22 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx4, align 4
  %24 = add i64 %23, -1
  %25 = icmp slt i64 %storemerge78135, %24
  br i1 %25, label %if.entry5, label %ifend7

common.ret:                                       ; preds = %ifend57, %if.entry55, %if.entry51, %for.end46, %if.entry31, %if.entry24, %if.entry18, %if.entry12, %for.end
  %common.ret.op = phi ptr [ %37, %for.end ], [ %58, %if.entry12 ], [ %69, %if.entry18 ], [ %80, %if.entry24 ], [ %90, %if.entry31 ], [ %131, %for.end46 ], [ %133, %if.entry51 ], [ %135, %if.entry55 ], [ %136, %ifend57 ]
  ret ptr %common.ret.op

for.end.loopexit:                                 ; preds = %ifend7
  %.pre140 = load ptr, ptr %5, align 8
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.entry
  %26 = phi ptr [ %.pre140, %for.end.loopexit ], [ @VTablestring, %if.entry ]
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %26, i64 0, i32 5
  %27 = load ptr, ptr %memberidx8, align 8
  %28 = tail call ptr %27(ptr nonnull %5)
  %memberidx9 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 2
  %29 = load ptr, ptr %memberidx9, align 8
  %30 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %29)
  %31 = load ptr, ptr %30, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 5
  %32 = load ptr, ptr %memberidx10, align 8
  %33 = tail call ptr %32(ptr nonnull %30)
  %34 = alloca ptr, align 8
  %35 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %34, ptr nonnull @68, ptr %28, ptr %33)
  %36 = load ptr, ptr %34, align 8
  %37 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %37, align 8
  %memberidx.i83 = getelementptr inbounds %string, ptr %37, i64 0, i32 1
  store ptr %36, ptr %memberidx.i83, align 8
  %memberidx1.i84 = getelementptr inbounds %string, ptr %37, i64 0, i32 2
  store i64 %35, ptr %memberidx1.i84, align 4
  %memberidx2.i85 = getelementptr inbounds %string, ptr %37, i64 0, i32 3
  store i64 %35, ptr %memberidx2.i85, align 4
  tail call void @free(ptr %28)
  tail call void @free(ptr %33)
  br label %common.ret

if.entry5:                                        ; preds = %for.body
  %38 = tail call ptr @malloc(i32 2)
  store i16 8236, ptr %38, align 8
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i86 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i86, align 8
  %memberidx1.i.i87 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i87, align 4
  %memberidx2.i.i88 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i88, align 4
  %40 = add nuw i64 %16, 2
  %41 = tail call ptr @realloc(ptr %17, i64 %40)
  store ptr %41, ptr %memberidx.i.i, align 8
  %42 = getelementptr inbounds i8, ptr %41, i64 %16
  %43 = load i16, ptr %38, align 8
  store i16 %43, ptr %42, align 2147483648
  store i64 %40, ptr %memberidx1.i.i, align 4
  %.pre = load ptr, ptr %memberidx, align 8
  %memberidx1.phi.trans.insert = getelementptr inbounds %Array_Type_, ptr %.pre, i64 0, i32 2
  %.pre139 = load i64, ptr %memberidx1.phi.trans.insert, align 4
  br label %ifend7

ifend7:                                           ; preds = %for.body, %if.entry5
  %44 = phi i64 [ %23, %for.body ], [ %.pre139, %if.entry5 ]
  %45 = phi ptr [ %22, %for.body ], [ %.pre, %if.entry5 ]
  %46 = phi ptr [ %17, %for.body ], [ %41, %if.entry5 ]
  %47 = phi i64 [ %16, %for.body ], [ %40, %if.entry5 ]
  %48 = add nuw nsw i64 %storemerge78135, 1
  %49 = icmp slt i64 %48, %44
  br i1 %49, label %for.body, label %for.end.loopexit

if.entry12:                                       ; preds = %2
  %memberidx15 = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %50 = load ptr, ptr %memberidx15, align 8
  %51 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %50)
  %52 = load ptr, ptr %51, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 5
  %53 = load ptr, ptr %memberidx16, align 8
  %54 = tail call ptr %53(ptr nonnull %51)
  %55 = alloca ptr, align 8
  %56 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %55, ptr nonnull @69, ptr %54)
  %57 = load ptr, ptr %55, align 8
  %58 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %58, align 8
  %memberidx.i96 = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  store ptr %57, ptr %memberidx.i96, align 8
  %memberidx1.i97 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  store i64 %56, ptr %memberidx1.i97, align 4
  %memberidx2.i98 = getelementptr inbounds %string, ptr %58, i64 0, i32 3
  store i64 %56, ptr %memberidx2.i98, align 4
  tail call void @free(ptr %54)
  br label %common.ret

if.entry18:                                       ; preds = %2
  %59 = load ptr, ptr %0, align 8
  %memberidx6.i131 = getelementptr inbounds %ObjectType, ptr %1, i64 0, i32 1
  %60 = load ptr, ptr %memberidx6.i131, align 8
  %memberidx.i.i132 = getelementptr inbounds %Program, ptr %59, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i.i132, align 8
  %62 = load i64, ptr %60, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %61, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %63, i64 %62
  %64 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i133 = getelementptr inbounds %Module, ptr %64, i64 0, i32 4
  %65 = load ptr, ptr %memberidx2.i.i133, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %60, i64 0, i32 2
  %66 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %67, i64 %66
  %68 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx22 = getelementptr inbounds %Class, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx22, align 8
  br label %common.ret

if.entry24:                                       ; preds = %2
  %70 = load ptr, ptr %0, align 8
  %memberidx28 = getelementptr inbounds %EnumType, ptr %1, i64 0, i32 1
  %71 = load ptr, ptr %memberidx28, align 8
  %memberidx.i99 = getelementptr inbounds %Program, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i99, align 8
  %73 = load i64, ptr %71, align 4
  %memberidx.i.i100 = getelementptr inbounds %Array_Module_, ptr %72, i64 0, i32 1
  %74 = load ptr, ptr %memberidx.i.i100, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %74, i64 %73
  %75 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i101 = getelementptr inbounds %Module, ptr %75, i64 0, i32 7
  %76 = load ptr, ptr %memberidx2.i101, align 8
  %memberidx3.i = getelementptr inbounds %TypeId, ptr %71, i64 0, i32 2
  %77 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Enum_, ptr %76, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %78, i64 %77
  %79 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx29 = getelementptr inbounds %Enum, ptr %79, i64 0, i32 1
  %80 = load ptr, ptr %memberidx29, align 8
  br label %common.ret

if.entry31:                                       ; preds = %2
  %memberidx34 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  %81 = load ptr, ptr %memberidx34, align 8
  %82 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %81)
  %83 = load ptr, ptr %82, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %83, i64 0, i32 5
  %84 = load ptr, ptr %memberidx35, align 8
  %85 = tail call ptr %84(ptr nonnull %82)
  %memberidx36 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 2
  %86 = load i64, ptr %memberidx36, align 4
  %87 = alloca ptr, align 8
  %88 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %87, ptr nonnull @70, ptr %85, i64 %86)
  %89 = load ptr, ptr %87, align 8
  %90 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i108 = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i108, align 8
  %memberidx1.i109 = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 %88, ptr %memberidx1.i109, align 4
  %memberidx2.i110 = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 %88, ptr %memberidx2.i110, align 4
  tail call void @free(ptr %85)
  br label %common.ret

if.entry38:                                       ; preds = %2
  %memberidx41 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 1
  %91 = load ptr, ptr %memberidx41, align 8
  %92 = tail call ptr @malloc(i32 1)
  store i8 60, ptr %92, align 8
  %93 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %93, align 8
  %memberidx.i.i111 = getelementptr inbounds %string, ptr %93, i64 0, i32 1
  store ptr %92, ptr %memberidx.i.i111, align 8
  %memberidx1.i.i112 = getelementptr inbounds %string, ptr %93, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i112, align 4
  %memberidx2.i.i113 = getelementptr inbounds %string, ptr %93, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i113, align 4
  %memberidx.i114 = getelementptr inbounds %string, ptr %91, i64 0, i32 2
  %94 = load i64, ptr %memberidx.i114, align 4
  %95 = add nuw i64 %94, 1
  %96 = trunc i64 %95 to i32
  %97 = tail call ptr @malloc(i32 %96)
  %memberidx2.i116 = getelementptr inbounds %string, ptr %91, i64 0, i32 1
  %98 = load ptr, ptr %memberidx2.i116, align 8
  %99 = load i64, ptr %memberidx.i114, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %97, ptr align 8 %98, i64 %99, i1 false)
  %100 = getelementptr inbounds i8, ptr %97, i64 %99
  %101 = load i8, ptr %92, align 8
  store i8 %101, ptr %100, align 8
  %102 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i118 = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i118, align 8
  %memberidx1.i.i119 = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 %95, ptr %memberidx1.i.i119, align 4
  %memberidx2.i.i120 = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 %95, ptr %memberidx2.i.i120, align 4
  %memberidx47 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 2
  %103 = load ptr, ptr %memberidx47, align 8
  %memberidx48137 = getelementptr inbounds %Array_Type_, ptr %103, i64 0, i32 2
  %104 = load i64, ptr %memberidx48137, align 4
  %105 = icmp sgt i64 %104, 0
  br i1 %105, label %for.body44, label %for.end46

for.body44:                                       ; preds = %if.entry38, %for.body44
  %106 = phi ptr [ %114, %for.body44 ], [ %97, %if.entry38 ]
  %107 = phi i64 [ %113, %for.body44 ], [ %95, %if.entry38 ]
  %108 = phi ptr [ %119, %for.body44 ], [ %103, %if.entry38 ]
  %storemerge138 = phi i64 [ %118, %for.body44 ], [ 0, %if.entry38 ]
  %memberidx.i121 = getelementptr inbounds %Array_Type_, ptr %108, i64 0, i32 1
  %109 = load ptr, ptr %memberidx.i121, align 8
  %ptridx.i122 = getelementptr inbounds ptr, ptr %109, i64 %storemerge138
  %110 = load ptr, ptr %ptridx.i122, align 8
  %111 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %110)
  %memberidx1.i127 = getelementptr inbounds %string, ptr %111, i64 0, i32 2
  %112 = load i64, ptr %memberidx1.i127, align 4
  %113 = add nuw i64 %112, %107
  %114 = tail call ptr @realloc(ptr %106, i64 %113)
  store ptr %114, ptr %memberidx.i.i118, align 8
  %115 = getelementptr inbounds i8, ptr %114, i64 %107
  %memberidx6.i129 = getelementptr inbounds %string, ptr %111, i64 0, i32 1
  %116 = load ptr, ptr %memberidx6.i129, align 8
  %117 = load i64, ptr %memberidx1.i127, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %115, ptr align 8 %116, i64 %117, i1 false)
  store i64 %113, ptr %memberidx1.i.i119, align 4
  %118 = add nuw nsw i64 %storemerge138, 1
  %119 = load ptr, ptr %memberidx47, align 8
  %memberidx48 = getelementptr inbounds %Array_Type_, ptr %119, i64 0, i32 2
  %120 = load i64, ptr %memberidx48, align 4
  %121 = icmp slt i64 %118, %120
  br i1 %121, label %for.body44, label %for.end46

for.end46:                                        ; preds = %for.body44, %if.entry38
  %122 = phi ptr [ %97, %if.entry38 ], [ %114, %for.body44 ]
  %123 = phi i64 [ %95, %if.entry38 ], [ %113, %for.body44 ]
  %124 = tail call ptr @malloc(i32 1)
  store i8 62, ptr %124, align 8
  %125 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %125, align 8
  %memberidx.i.i123 = getelementptr inbounds %string, ptr %125, i64 0, i32 1
  store ptr %124, ptr %memberidx.i.i123, align 8
  %memberidx1.i.i124 = getelementptr inbounds %string, ptr %125, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i124, align 4
  %memberidx2.i.i125 = getelementptr inbounds %string, ptr %125, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i125, align 4
  %126 = add nuw i64 %123, 1
  %127 = trunc i64 %126 to i32
  %128 = tail call ptr @malloc(i32 %127)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %128, ptr align 8 %122, i64 %123, i1 false)
  %129 = getelementptr inbounds i8, ptr %128, i64 %123
  %130 = load i8, ptr %124, align 8
  store i8 %130, ptr %129, align 8
  %131 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %131, align 8
  %memberidx.i.i105 = getelementptr inbounds %string, ptr %131, i64 0, i32 1
  store ptr %128, ptr %memberidx.i.i105, align 8
  %memberidx1.i.i106 = getelementptr inbounds %string, ptr %131, i64 0, i32 2
  store i64 %126, ptr %memberidx1.i.i106, align 4
  %memberidx2.i.i107 = getelementptr inbounds %string, ptr %131, i64 0, i32 3
  store i64 %126, ptr %memberidx2.i.i107, align 4
  br label %common.ret

if.entry51:                                       ; preds = %2
  %132 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %132, ptr noundef nonnull align 8 dereferenceable(9) @71, i64 9, i1 false)
  %133 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %133, align 8
  %memberidx.i.i93 = getelementptr inbounds %string, ptr %133, i64 0, i32 1
  store ptr %132, ptr %memberidx.i.i93, align 8
  %memberidx1.i.i94 = getelementptr inbounds %string, ptr %133, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i94, align 4
  %memberidx2.i.i95 = getelementptr inbounds %string, ptr %133, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i95, align 4
  br label %common.ret

if.entry55:                                       ; preds = %2
  %134 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %134, ptr noundef nonnull align 8 dereferenceable(6) @72, i64 6, i1 false)
  %135 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %135, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %135, i64 0, i32 1
  store ptr %134, ptr %memberidx.i.i80, align 8
  %memberidx1.i.i81 = getelementptr inbounds %string, ptr %135, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i81, align 4
  %memberidx2.i.i82 = getelementptr inbounds %string, ptr %135, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i82, align 4
  br label %common.ret

ifend57:                                          ; preds = %2
  %136 = tail call fastcc ptr @dump_type(ptr nonnull %1, i1 false)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc i64 @Map_string_Generic__hash_fnc(ptr %1)
  %memberidx.i = getelementptr inbounds %Map_string_Generic_, ptr %4, i64 0, i32 1
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = urem i64 %5, %6
  %8 = load ptr, ptr %4, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %8, i64 %7
  %9 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %9, null
  br i1 %.not.i, label %common.ret, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %3
  %memberidx1.i.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %10 = phi ptr [ %20, %else.i ], [ %8, %while.entry.i.preheader ]
  %11 = phi i64 [ %21, %else.i ], [ %6, %while.entry.i.preheader ]
  %12 = phi ptr [ %24, %else.i ], [ %9, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %23, %else.i ], [ %7, %while.entry.i.preheader ]
  %13 = load ptr, ptr %12, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  %14 = load i64, ptr %memberidx.i.i, align 4
  %15 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %14, %15
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  %16 = load ptr, ptr %memberidx2.i.i, align 8
  %17 = load ptr, ptr %memberidx3.i.i, align 8
  %18 = tail call i64 @memcmp(ptr %16, ptr %17, i64 %14)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre118 = load ptr, ptr %4, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre119.pre = load ptr, ptr %4, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre119.pre, i64 %hash.0.i
  %.pre120.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre120.pre, null
  br i1 %.not29.i, label %common.ret, label %Map_string_Generic____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %20 = phi ptr [ %.pre118, %ifend.i.i.else.i_crit_edge ], [ %10, %while.entry.i ]
  %21 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %11, %while.entry.i ]
  %22 = add nuw i64 %hash.0.i, 1
  %23 = urem i64 %22, %21
  %ptridx7.i = getelementptr inbounds ptr, ptr %20, i64 %23
  %24 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %24, null
  br i1 %.not30.i, label %common.ret, label %while.entry.i

Map_string_Generic____getitem__.exit:             ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_Generic_, ptr %.pre120.pre, i64 0, i32 1
  %25 = load ptr, ptr %memberidx15.i, align 8
  %26 = icmp eq ptr %25, null
  br i1 %26, label %common.ret, label %ifend

common.ret:                                       ; preds = %else.i, %3, %while.end.i, %Map_string_Generic____getitem__.exit, %ifend24, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %121, %ifend24 ], [ null, %Map_string_Generic____getitem__.exit ], [ null, %while.end.i ], [ null, %3 ], [ null, %else.i ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_Generic____getitem__.exit
  %memberidx1 = getelementptr inbounds %Generic, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_GenericParameterNode_, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %2, i64 0, i32 2
  %30 = load i64, ptr %memberidx4, align 4
  %.not = icmp eq i64 %29, %30
  br i1 %.not, label %ifend7, label %if.entry5

if.entry5:                                        ; preds = %ifend
  %31 = alloca ptr, align 8
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %31, ptr nonnull @88, i64 %29, i64 %30)
  %33 = load ptr, ptr %31, align 8
  %34 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %34, align 8
  %memberidx.i67 = getelementptr inbounds %string, ptr %34, i64 0, i32 1
  store ptr %33, ptr %memberidx.i67, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %34, i64 0, i32 2
  store i64 %32, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %34, i64 0, i32 3
  store i64 %32, ptr %memberidx2.i, align 4
  %memberidx.i68 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %35 = load ptr, ptr %memberidx.i68, align 8
  %memberidx1.i69 = getelementptr inbounds %Compiler, ptr %35, i64 0, i32 6
  %36 = load ptr, ptr %memberidx1.i69, align 8
  %37 = call ptr @malloc(i32 24)
  store i64 5, ptr %37, align 4
  %memberidx1.i.i70 = getelementptr inbounds %FloError, ptr %37, i64 0, i32 2
  store ptr null, ptr %memberidx1.i.i70, align 8
  %memberidx2.i.i71 = getelementptr inbounds %FloError, ptr %37, i64 0, i32 1
  store ptr %34, ptr %memberidx2.i.i71, align 8
  %memberidx.i.i72 = getelementptr inbounds %Array_FloError_, ptr %36, i64 0, i32 2
  %38 = load i64, ptr %memberidx.i.i72, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %36, i64 0, i32 3
  %39 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i73 = icmp slt i64 %38, %39
  br i1 %.not.i.i73, label %if.entry5.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry5.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry5
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %36, i64 0, i32 1
  %.pre122 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry5
  %40 = shl nuw i64 %39, 1
  store i64 %40, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %36, i64 0, i32 1
  %41 = load ptr, ptr %memberidx2.i.i.i, align 8
  %42 = shl i64 %39, 4
  %43 = call ptr @realloc(ptr %41, i64 %42)
  store ptr %43, ptr %memberidx2.i.i.i, align 8
  %.pre121 = load i64, ptr %memberidx.i.i72, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry5.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %44 = phi ptr [ %.pre122, %if.entry5.TypeChecker_error.exit_crit_edge ], [ %43, %if.entry.i.i ]
  %45 = phi i64 [ %38, %if.entry5.TypeChecker_error.exit_crit_edge ], [ %.pre121, %if.entry.i.i ]
  %46 = add nsw i64 %45, 1
  store i64 %46, ptr %memberidx.i.i72, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %44, i64 %45
  store ptr %37, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend7:                                           ; preds = %ifend
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %47 = load i64, ptr %memberidx10, align 4
  %memberidx11 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %48 = load ptr, ptr %memberidx11, align 8
  store i64 0, ptr %memberidx10, align 4
  %49 = load ptr, ptr %0, align 8
  %memberidx1.i.i76 = getelementptr inbounds %Program, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx1.i.i76, align 8
  %memberidx.i.i.i77 = getelementptr inbounds %Array_Module_, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i.i.i77, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx2.i78 = getelementptr inbounds %Module, ptr %52, i64 0, i32 6
  %53 = load ptr, ptr %memberidx2.i78, align 8
  store ptr %53, ptr %memberidx11, align 8
  %54 = tail call fastcc ptr @TypeChecker_create_scope(ptr nonnull %0)
  %memberidx.i79 = getelementptr inbounds %Scope, ptr %54, i64 0, i32 5
  %55 = load ptr, ptr %memberidx11, align 8
  store ptr %55, ptr %memberidx.i79, align 8
  %56 = tail call ptr @malloc(i32 0)
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i81 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i81, align 8
  %memberidx1.i.i82 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i82, i8 0, i64 16, i1 false)
  %58 = load i64, ptr %memberidx3, align 4
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %ifend7
  %memberidx.i84 = getelementptr inbounds %Array_GenericParameterNode_, ptr %28, i64 0, i32 1
  %memberidx.i86 = getelementptr inbounds %Array_Type_, ptr %2, i64 0, i32 1
  %memberidx18 = getelementptr inbounds %Scope, ptr %54, i64 0, i32 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %storemerge117 = phi i64 [ 0, %for.body.lr.ph ], [ %85, %for.body ]
  %60 = load ptr, ptr %memberidx.i84, align 8
  %ptridx.i85 = getelementptr inbounds ptr, ptr %60, i64 %storemerge117
  %61 = load ptr, ptr %ptridx.i85, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx14 = getelementptr inbounds %IdentifierToken, ptr %62, i64 0, i32 2
  %63 = load ptr, ptr %memberidx14, align 8
  %64 = load ptr, ptr %memberidx.i86, align 8
  %ptridx.i87 = getelementptr inbounds ptr, ptr %64, i64 %storemerge117
  %65 = load ptr, ptr %ptridx.i87, align 8
  %66 = load i64, ptr %65, align 4
  %67 = icmp eq i64 %66, 19
  %memberidx16 = getelementptr inbounds %GenericType, ptr %65, i64 0, i32 3
  %spec.select = select i1 %67, ptr %memberidx16, ptr %ptridx.i87
  %ternary = load ptr, ptr %spec.select, align 8
  %68 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %ternary)
  %69 = load ptr, ptr %68, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %69, i64 0, i32 5
  %70 = load ptr, ptr %memberidx17, align 8
  %71 = call ptr %70(ptr nonnull %68)
  %72 = alloca ptr, align 8
  %73 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %72, ptr nonnull @89, ptr %71)
  %74 = load ptr, ptr %72, align 8
  %75 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %75, align 8
  %memberidx.i95 = getelementptr inbounds %string, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i95, align 8
  %memberidx1.i96 = getelementptr inbounds %string, ptr %75, i64 0, i32 2
  store i64 %73, ptr %memberidx1.i96, align 4
  %memberidx2.i97 = getelementptr inbounds %string, ptr %75, i64 0, i32 3
  store i64 %73, ptr %memberidx2.i97, align 4
  tail call void @free(ptr %71)
  %76 = load i64, ptr %memberidx1.i.i82, align 4
  %77 = add nuw i64 %76, %73
  %78 = load ptr, ptr %memberidx.i.i81, align 8
  %79 = call ptr @realloc(ptr %78, i64 %77)
  store ptr %79, ptr %memberidx.i.i81, align 8
  %80 = load i64, ptr %memberidx1.i.i82, align 4
  %81 = getelementptr inbounds i8, ptr %79, i64 %80
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %81, ptr align 8 %74, i64 %73, i1 false)
  store i64 %77, ptr %memberidx1.i.i82, align 4
  %82 = load ptr, ptr %memberidx18, align 8
  %83 = load ptr, ptr %memberidx.i86, align 8
  %ptridx.i102 = getelementptr inbounds ptr, ptr %83, i64 %storemerge117
  %84 = load ptr, ptr %ptridx.i102, align 8
  call fastcc void @Map_string_Type____setitem__(ptr %82, ptr %63, ptr %84)
  %85 = add nuw nsw i64 %storemerge117, 1
  %86 = load i64, ptr %memberidx3, align 4
  %87 = icmp slt i64 %85, %86
  br i1 %87, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %ifend7
  %88 = load ptr, ptr %1, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %88, i64 0, i32 5
  %89 = load ptr, ptr %memberidx19, align 8
  %90 = call ptr %89(ptr nonnull %1)
  %91 = load ptr, ptr %57, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %91, i64 0, i32 5
  %92 = load ptr, ptr %memberidx20, align 8
  %93 = call ptr %92(ptr nonnull %57)
  %94 = alloca ptr, align 8
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %94, ptr nonnull @90, ptr %90, ptr %93)
  %96 = load ptr, ptr %94, align 8
  %97 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i88 = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 %95, ptr %memberidx1.i89, align 4
  %memberidx2.i90 = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 %95, ptr %memberidx2.i90, align 4
  tail call void @free(ptr %90)
  tail call void @free(ptr %93)
  %98 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr nonnull %97)
  %99 = load i64, ptr %98, align 4
  %100 = icmp eq i64 %99, 20
  br i1 %100, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %for.end
  %101 = alloca %IdentifierToken, align 8
  %102 = load ptr, ptr %memberidx1, align 8
  %103 = load ptr, ptr %102, align 8
  %memberidx27 = getelementptr inbounds %Token, ptr %103, i64 0, i32 1
  %104 = load ptr, ptr %memberidx27, align 8
  store i64 54, ptr %101, align 8
  %memberidx1.i.i103 = getelementptr inbounds %Token, ptr %101, i64 0, i32 1
  store ptr %104, ptr %memberidx1.i.i103, align 8
  %memberidx.i104 = getelementptr inbounds %IdentifierToken, ptr %101, i64 0, i32 2
  store ptr %97, ptr %memberidx.i104, align 8
  %105 = alloca %ClassDeclarationNode, align 8
  store ptr %101, ptr %105, align 8
  %memberidx1.i105 = getelementptr inbounds %ClassDeclarationNode, ptr %105, i64 0, i32 3
  %106 = call ptr @malloc(i32 32)
  store ptr @VTableArray_FieldNode_, ptr %106, align 8
  %memberidx.i.i106 = getelementptr inbounds %Array_FieldNode_, ptr %106, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i106, align 4
  %memberidx1.i.i107 = getelementptr inbounds %Array_FieldNode_, ptr %106, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i107, align 4
  %memberidx2.i.i108 = getelementptr inbounds %Array_FieldNode_, ptr %106, i64 0, i32 1
  %107 = call ptr @malloc(i32 64)
  store ptr %107, ptr %memberidx2.i.i108, align 8
  store i64 0, ptr %memberidx.i.i106, align 4
  %memberidx4.i = getelementptr inbounds %ClassDeclarationNode, ptr %105, i64 0, i32 4
  %108 = call ptr @malloc(i32 32)
  store ptr @VTableArray_MethodNode_, ptr %108, align 8
  %memberidx.i15.i = getelementptr inbounds %Array_MethodNode_, ptr %108, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx1.i16.i = getelementptr inbounds %Array_MethodNode_, ptr %108, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i, align 4
  %memberidx2.i17.i = getelementptr inbounds %Array_MethodNode_, ptr %108, i64 0, i32 1
  %109 = call ptr @malloc(i32 64)
  store ptr %109, ptr %memberidx2.i17.i, align 8
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx7.i = getelementptr inbounds %ClassDeclarationNode, ptr %105, i64 0, i32 1
  %110 = call ptr @malloc(i32 32)
  store ptr @VTableArray_GenericParameterNode_, ptr %110, align 8
  %memberidx.i18.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %110, i64 0, i32 2
  store i64 0, ptr %memberidx.i18.i, align 4
  %memberidx1.i19.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %110, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19.i, align 4
  %memberidx2.i20.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %110, i64 0, i32 1
  %111 = call ptr @malloc(i32 64)
  store ptr %111, ptr %memberidx2.i20.i, align 8
  store i64 0, ptr %memberidx.i18.i, align 4
  store ptr %110, ptr %memberidx7.i, align 8
  %memberidx10.i = getelementptr inbounds %ClassDeclarationNode, ptr %105, i64 0, i32 2
  %112 = load ptr, ptr %memberidx1, align 8
  %memberidx30 = getelementptr inbounds %ClassDeclarationNode, ptr %112, i64 0, i32 2
  %113 = load ptr, ptr %memberidx30, align 8
  store ptr %113, ptr %memberidx10.i, align 8
  %114 = load ptr, ptr %memberidx1, align 8
  %memberidx33 = getelementptr inbounds %ClassDeclarationNode, ptr %114, i64 0, i32 3
  %115 = load ptr, ptr %memberidx33, align 8
  store ptr %115, ptr %memberidx1.i105, align 8
  %116 = load ptr, ptr %memberidx1, align 8
  %memberidx36 = getelementptr inbounds %ClassDeclarationNode, ptr %116, i64 0, i32 4
  %117 = load ptr, ptr %memberidx36, align 8
  store ptr %117, ptr %memberidx4.i, align 8
  %118 = load ptr, ptr %54, align 8
  store ptr %118, ptr %memberidx11, align 8
  call fastcc void @TypeChecker_declare_class_within_module(ptr nonnull %0, ptr nonnull %105)
  call fastcc void @TypeChecker_check_class_body(ptr nonnull %0, ptr nonnull %105)
  %119 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr nonnull %97)
  br label %ifend24

ifend24:                                          ; preds = %for.end, %if.entry22
  %120 = phi ptr [ %98, %for.end ], [ %119, %if.entry22 ]
  store i64 %47, ptr %memberidx10, align 4
  store ptr %48, ptr %memberidx11, align 8
  call fastcc void @Scope___del__(ptr nonnull %54)
  tail call void @free(ptr nonnull %54)
  %121 = tail call ptr @malloc(i32 32)
  store i64 19, ptr %121, align 4
  %memberidx.i110 = getelementptr inbounds %GenericType, ptr %121, i64 0, i32 1
  store ptr %1, ptr %memberidx.i110, align 8
  %memberidx1.i111 = getelementptr inbounds %GenericType, ptr %121, i64 0, i32 2
  store ptr %2, ptr %memberidx1.i111, align 8
  %memberidx2.i112 = getelementptr inbounds %GenericType, ptr %121, i64 0, i32 3
  store ptr %120, ptr %memberidx2.i112, align 8
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_enum_within_module(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 32)
  %memberidx.i = getelementptr inbounds %Enum, ptr %3, i64 0, i32 2
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumField_, ptr %4, align 8
  %memberidx.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %4, ptr %memberidx.i, align 8
  %6 = tail call ptr @malloc(i32 24)
  %7 = tail call ptr @malloc(i32 2048)
  store ptr %7, ptr %6, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %2, %for.body.i.i
  %i.0.i.i63 = phi i64 [ 0, %2 ], [ %9, %for.body.i.i ]
  %8 = load ptr, ptr %6, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %8, i64 %i.0.i.i63
  store ptr null, ptr %ptridx.i.i, align 8
  %9 = add nuw nsw i64 %i.0.i.i63, 1
  %10 = icmp ult i64 %i.0.i.i63, 255
  br i1 %10, label %for.body.i.i, label %Enum_constructor.exit

Enum_constructor.exit:                            ; preds = %for.body.i.i
  %memberidx3.i = getelementptr inbounds %Enum, ptr %3, i64 0, i32 3
  %memberidx2.i5.i = getelementptr inbounds %Map_string_PropId_, ptr %6, i64 0, i32 1
  store i64 256, ptr %memberidx2.i5.i, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_PropId_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %6, ptr %memberidx3.i, align 8
  %11 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = load ptr, ptr %0, align 8
  %memberidx.i.i33 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i.i33, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %16, i64 %14
  %17 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i = getelementptr inbounds %Module, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i, align 8
  %19 = load i64, ptr %18, align 4
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %16, i64 %19
  %20 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i34 = getelementptr inbounds %Module, ptr %20, i64 0, i32 8
  %21 = load ptr, ptr %memberidx2.i.i34, align 8
  %memberidx3.i.i35 = getelementptr inbounds %ScopeId, ptr %18, i64 0, i32 1
  %22 = load i64, ptr %memberidx3.i.i35, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx2 = getelementptr inbounds %Enum, ptr %3, i64 0, i32 1
  store ptr %12, ptr %memberidx2, align 8
  %25 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %12)
  %26 = load i64, ptr %25, align 4
  %.not = icmp eq i64 %26, 20
  br i1 %.not, label %ifend, label %if.entry

common.ret:                                       ; preds = %Array_Enum____sl__.exit, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %Enum_constructor.exit
  %27 = load ptr, ptr %12, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i64 0, i32 5
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = tail call ptr %28(ptr nonnull %12)
  %30 = alloca ptr, align 8
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %30, ptr nonnull @87, ptr %29)
  %32 = load ptr, ptr %30, align 8
  %33 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i36 = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i36, align 8
  %memberidx1.i37 = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 %31, ptr %memberidx1.i37, align 4
  %memberidx2.i38 = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 %31, ptr %memberidx2.i38, align 4
  tail call void @free(ptr %29)
  %34 = load ptr, ptr %1, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %34, i64 0, i32 1
  %35 = load ptr, ptr %memberidx6, align 8
  %memberidx.i39 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %36 = load ptr, ptr %memberidx.i39, align 8
  %memberidx1.i40 = getelementptr inbounds %Compiler, ptr %36, i64 0, i32 6
  %37 = load ptr, ptr %memberidx1.i40, align 8
  %38 = call ptr @malloc(i32 24)
  store i64 1, ptr %38, align 4
  %memberidx1.i.i41 = getelementptr inbounds %FloError, ptr %38, i64 0, i32 2
  store ptr %35, ptr %memberidx1.i.i41, align 8
  %memberidx2.i.i42 = getelementptr inbounds %FloError, ptr %38, i64 0, i32 1
  store ptr %33, ptr %memberidx2.i.i42, align 8
  %memberidx.i.i43 = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 2
  %39 = load i64, ptr %memberidx.i.i43, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 3
  %40 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %39, %40
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 1
  %.pre64 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %41 = shl nuw i64 %40, 1
  store i64 %41, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 1
  %42 = load ptr, ptr %memberidx2.i.i.i, align 8
  %43 = shl i64 %40, 4
  %44 = call ptr @realloc(ptr %42, i64 %43)
  store ptr %44, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i43, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %45 = phi ptr [ %.pre64, %if.entry.TypeChecker_error.exit_crit_edge ], [ %44, %if.entry.i.i ]
  %46 = phi i64 [ %39, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %47 = add nsw i64 %46, 1
  store i64 %47, ptr %memberidx.i.i43, align 4
  %ptridx.i.i45 = getelementptr inbounds ptr, ptr %45, i64 %46
  store ptr %38, ptr %ptridx.i.i45, align 8
  br label %common.ret

ifend:                                            ; preds = %Enum_constructor.exit
  %48 = tail call ptr @malloc(i32 24)
  %49 = load i64, ptr %memberidx.i.i33, align 4
  %50 = load ptr, ptr %0, align 8
  %memberidx1.i.i47 = getelementptr inbounds %Program, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx1.i.i47, align 8
  %memberidx.i.i.i48 = getelementptr inbounds %Array_Module_, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i.i48, align 8
  %ptridx.i.i.i49 = getelementptr inbounds ptr, ptr %52, i64 %49
  %53 = load ptr, ptr %ptridx.i.i.i49, align 8
  %memberidx9 = getelementptr inbounds %Module, ptr %53, i64 0, i32 7
  %54 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Array_Enum_, ptr %54, i64 0, i32 2
  %55 = load i64, ptr %memberidx10, align 4
  store i64 %49, ptr %48, align 4
  %memberidx1.i.i50 = getelementptr inbounds %TypeId, ptr %48, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i50, align 4
  %memberidx2.i.i51 = getelementptr inbounds %TypeId, ptr %48, i64 0, i32 2
  store i64 %55, ptr %memberidx2.i.i51, align 4
  store ptr %48, ptr %3, align 8
  %56 = load ptr, ptr %memberidx1.i.i47, align 8
  %memberidx.i.i.i54 = getelementptr inbounds %Array_Module_, ptr %56, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i.i.i54, align 8
  %ptridx.i.i.i55 = getelementptr inbounds ptr, ptr %57, i64 %49
  %58 = load ptr, ptr %ptridx.i.i.i55, align 8
  %memberidx11 = getelementptr inbounds %Module, ptr %58, i64 0, i32 7
  %59 = load ptr, ptr %memberidx11, align 8
  %memberidx.i56 = getelementptr inbounds %Array_Enum_, ptr %59, i64 0, i32 2
  %60 = load i64, ptr %memberidx.i56, align 4
  %memberidx1.i57 = getelementptr inbounds %Array_Enum_, ptr %59, i64 0, i32 3
  %61 = load i64, ptr %memberidx1.i57, align 4
  %.not.i = icmp slt i64 %60, %61
  br i1 %.not.i, label %ifend.Array_Enum____sl__.exit_crit_edge, label %if.entry.i

ifend.Array_Enum____sl__.exit_crit_edge:          ; preds = %ifend
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Enum_, ptr %59, i64 0, i32 1
  %.pre66 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Enum____sl__.exit

if.entry.i:                                       ; preds = %ifend
  %62 = shl nuw i64 %61, 1
  store i64 %62, ptr %memberidx1.i57, align 4
  %memberidx2.i.i59 = getelementptr inbounds %Array_Enum_, ptr %59, i64 0, i32 1
  %63 = load ptr, ptr %memberidx2.i.i59, align 8
  %64 = shl i64 %61, 4
  %65 = tail call ptr @realloc(ptr %63, i64 %64)
  store ptr %65, ptr %memberidx2.i.i59, align 8
  %.pre65 = load i64, ptr %memberidx.i56, align 4
  br label %Array_Enum____sl__.exit

Array_Enum____sl__.exit:                          ; preds = %ifend.Array_Enum____sl__.exit_crit_edge, %if.entry.i
  %66 = phi ptr [ %.pre66, %ifend.Array_Enum____sl__.exit_crit_edge ], [ %65, %if.entry.i ]
  %67 = phi i64 [ %60, %ifend.Array_Enum____sl__.exit_crit_edge ], [ %.pre65, %if.entry.i ]
  %68 = add nsw i64 %67, 1
  store i64 %68, ptr %memberidx.i56, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %66, i64 %67
  store ptr %3, ptr %ptridx.i, align 8
  %memberidx12 = getelementptr inbounds %Scope, ptr %24, i64 0, i32 4
  %69 = load ptr, ptr %memberidx12, align 8
  %70 = load ptr, ptr %memberidx2, align 8
  %71 = load ptr, ptr %3, align 8
  tail call fastcc void @Map_string_EnumId____setitem__(ptr %69, ptr %70, ptr %71)
  %memberidx15 = getelementptr inbounds %Scope, ptr %24, i64 0, i32 1
  %72 = load ptr, ptr %memberidx15, align 8
  %73 = load ptr, ptr %memberidx2, align 8
  %74 = tail call ptr @malloc(i32 24)
  %75 = load ptr, ptr %3, align 8
  %76 = load i64, ptr %75, align 4
  %memberidx1.i60 = getelementptr inbounds %TypeId, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx1.i60, align 4
  store i64 4, ptr %74, align 4
  %memberidx1.i.i61 = getelementptr inbounds %VarId, ptr %74, i64 0, i32 1
  store i64 %76, ptr %memberidx1.i.i61, align 4
  %memberidx2.i.i62 = getelementptr inbounds %VarId, ptr %74, i64 0, i32 2
  store i64 %77, ptr %memberidx2.i.i62, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %72, ptr %73, ptr nonnull %74)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_within_module(ptr %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %4)
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 20
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = tail call fastcc i64 @Map_string_Generic__hash_fnc(ptr %4)
  %memberidx.i92 = getelementptr inbounds %Map_string_Generic_, ptr %8, i64 0, i32 1
  %10 = load i64, ptr %memberidx.i92, align 4
  %11 = urem i64 %9, %10
  %12 = load ptr, ptr %8, align 8
  %ptridx.i93 = getelementptr inbounds ptr, ptr %12, i64 %11
  %13 = load ptr, ptr %ptridx.i93, align 8
  %.not.i94 = icmp eq ptr %13, null
  br i1 %.not.i94, label %Map_string_Generic____getitem__.exit, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %2
  %memberidx1.i.i96 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i99 = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %14 = phi ptr [ %24, %else.i ], [ %12, %while.entry.i.preheader ]
  %15 = phi i64 [ %25, %else.i ], [ %10, %while.entry.i.preheader ]
  %16 = phi ptr [ %28, %else.i ], [ %13, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %27, %else.i ], [ %11, %while.entry.i.preheader ]
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i95 = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx.i.i95, align 4
  %19 = load i64, ptr %memberidx1.i.i96, align 4
  %.not.i.i97 = icmp eq i64 %18, %19
  br i1 %.not.i.i97, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i98 = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  %20 = load ptr, ptr %memberidx2.i.i98, align 8
  %21 = load ptr, ptr %memberidx3.i.i99, align 8
  %22 = tail call i64 @memcmp(ptr %20, ptr %21, i64 %18)
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i92, align 4
  %.pre104 = load ptr, ptr %8, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre105.pre = load ptr, ptr %8, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre105.pre, i64 %hash.0.i
  %.pre106.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre106.pre, null
  br i1 %.not29.i, label %Map_string_Generic____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %24 = phi ptr [ %.pre104, %ifend.i.i.else.i_crit_edge ], [ %14, %while.entry.i ]
  %25 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %15, %while.entry.i ]
  %26 = add nuw i64 %hash.0.i, 1
  %27 = urem i64 %26, %25
  %ptridx7.i = getelementptr inbounds ptr, ptr %24, i64 %27
  %28 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %28, null
  br i1 %.not30.i, label %Map_string_Generic____getitem__.exit, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_Generic_, ptr %.pre106.pre, i64 0, i32 1
  %29 = load ptr, ptr %memberidx15.i, align 8
  %phi.cmp = icmp ne ptr %29, null
  br label %Map_string_Generic____getitem__.exit

Map_string_Generic____getitem__.exit:             ; preds = %else.i, %2, %while.end.i, %if.entry10.i
  %common.ret.op.i = phi i1 [ %phi.cmp, %if.entry10.i ], [ false, %while.end.i ], [ false, %2 ], [ false, %else.i ]
  %30 = or i1 %7, %common.ret.op.i
  br i1 %30, label %if.entry, label %ifend

common.ret:                                       ; preds = %if.entry16, %Array_Class____sl__.exit, %if.entry9, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %Map_string_Generic____getitem__.exit
  %31 = load ptr, ptr %4, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 5
  %32 = load ptr, ptr %memberidx4, align 8
  %33 = tail call ptr %32(ptr nonnull %4)
  %34 = alloca ptr, align 8
  %35 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %34, ptr nonnull @87, ptr %33)
  %36 = load ptr, ptr %34, align 8
  %37 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %37, align 8
  %memberidx.i89 = getelementptr inbounds %string, ptr %37, i64 0, i32 1
  store ptr %36, ptr %memberidx.i89, align 8
  %memberidx1.i90 = getelementptr inbounds %string, ptr %37, i64 0, i32 2
  store i64 %35, ptr %memberidx1.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %string, ptr %37, i64 0, i32 3
  store i64 %35, ptr %memberidx2.i91, align 4
  tail call void @free(ptr %33)
  %38 = load ptr, ptr %1, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %38, i64 0, i32 1
  %39 = load ptr, ptr %memberidx6, align 8
  %memberidx.i82 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %40 = load ptr, ptr %memberidx.i82, align 8
  %memberidx1.i83 = getelementptr inbounds %Compiler, ptr %40, i64 0, i32 6
  %41 = load ptr, ptr %memberidx1.i83, align 8
  %42 = call ptr @malloc(i32 24)
  store i64 1, ptr %42, align 4
  %memberidx1.i.i84 = getelementptr inbounds %FloError, ptr %42, i64 0, i32 2
  store ptr %39, ptr %memberidx1.i.i84, align 8
  %memberidx2.i.i85 = getelementptr inbounds %FloError, ptr %42, i64 0, i32 1
  store ptr %37, ptr %memberidx2.i.i85, align 8
  %memberidx.i.i86 = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 2
  %43 = load i64, ptr %memberidx.i.i86, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 3
  %44 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %43, %44
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 1
  %.pre110 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %45 = shl nuw i64 %44, 1
  store i64 %45, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i.i, align 8
  %47 = shl i64 %44, 4
  %48 = call ptr @realloc(ptr %46, i64 %47)
  store ptr %48, ptr %memberidx2.i.i.i, align 8
  %.pre109 = load i64, ptr %memberidx.i.i86, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %49 = phi ptr [ %.pre110, %if.entry.TypeChecker_error.exit_crit_edge ], [ %48, %if.entry.i.i ]
  %50 = phi i64 [ %43, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre109, %if.entry.i.i ]
  %51 = add nsw i64 %50, 1
  store i64 %51, ptr %memberidx.i.i86, align 4
  %ptridx.i.i88 = getelementptr inbounds ptr, ptr %49, i64 %50
  store ptr %42, ptr %ptridx.i.i88, align 8
  br label %common.ret

ifend:                                            ; preds = %Map_string_Generic____getitem__.exit
  %memberidx7 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 1
  %52 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_GenericParameterNode_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx8, align 4
  %54 = icmp sgt i64 %53, 0
  br i1 %54, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend
  %memberidx12 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 8
  store i1 true, ptr %memberidx12, align 1
  %55 = load ptr, ptr %memberidx3, align 8
  %56 = tail call ptr @malloc(i32 16)
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %57 = load i64, ptr %memberidx14, align 4
  store i64 %57, ptr %56, align 4
  %memberidx1.i81 = getelementptr inbounds %Generic, ptr %56, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i81, align 8
  tail call fastcc void @Map_string_Generic____setitem__(ptr %55, ptr %4, ptr nonnull %56)
  br label %common.ret

ifend11:                                          ; preds = %ifend
  %58 = tail call ptr @malloc(i32 81)
  %memberidx.i74 = getelementptr inbounds %Class, ptr %58, i64 0, i32 3
  store ptr null, ptr %memberidx.i74, align 8
  %memberidx2.i76 = getelementptr inbounds %Class, ptr %58, i64 0, i32 8
  %memberidx3.i = getelementptr inbounds %Class, ptr %58, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx2.i76, i8 0, i64 16, i1 false)
  %59 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassField_, ptr %59, align 8
  %memberidx.i.i77 = getelementptr inbounds %Array_ClassField_, ptr %59, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i77, align 4
  %memberidx1.i.i78 = getelementptr inbounds %Array_ClassField_, ptr %59, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i78, align 4
  %memberidx2.i.i79 = getelementptr inbounds %Array_ClassField_, ptr %59, i64 0, i32 1
  %60 = tail call ptr @malloc(i32 64)
  store ptr %60, ptr %memberidx2.i.i79, align 8
  store i64 0, ptr %memberidx.i.i77, align 4
  store ptr %59, ptr %memberidx3.i, align 8
  %memberidx6.i = getelementptr inbounds %Class, ptr %58, i64 0, i32 5
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassMethod_, ptr %61, align 8
  %memberidx.i19.i = getelementptr inbounds %Array_ClassMethod_, ptr %61, i64 0, i32 2
  store i64 0, ptr %memberidx.i19.i, align 4
  %memberidx1.i20.i = getelementptr inbounds %Array_ClassMethod_, ptr %61, i64 0, i32 3
  store i64 8, ptr %memberidx1.i20.i, align 4
  %memberidx2.i21.i = getelementptr inbounds %Array_ClassMethod_, ptr %61, i64 0, i32 1
  %62 = tail call ptr @malloc(i32 64)
  store ptr %62, ptr %memberidx2.i21.i, align 8
  store i64 0, ptr %memberidx.i19.i, align 4
  store ptr %61, ptr %memberidx6.i, align 8
  %63 = tail call ptr @malloc(i32 24)
  %64 = tail call ptr @malloc(i32 2048)
  store ptr %64, ptr %63, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %ifend11, %for.body.i.i
  %i.0.i.i103 = phi i64 [ 0, %ifend11 ], [ %66, %for.body.i.i ]
  %65 = load ptr, ptr %63, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %65, i64 %i.0.i.i103
  store ptr null, ptr %ptridx.i.i, align 8
  %66 = add nuw nsw i64 %i.0.i.i103, 1
  %67 = icmp ult i64 %i.0.i.i103, 255
  br i1 %67, label %for.body.i.i, label %Map_string_PropId__constructor.exit.i

Map_string_PropId__constructor.exit.i:            ; preds = %for.body.i.i
  %memberidx9.i = getelementptr inbounds %Class, ptr %58, i64 0, i32 6
  %memberidx2.i22.i = getelementptr inbounds %Map_string_PropId_, ptr %63, i64 0, i32 1
  store i64 256, ptr %memberidx2.i22.i, align 4
  %memberidx3.i.i80 = getelementptr inbounds %Map_string_PropId_, ptr %63, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i80, align 4
  store ptr %63, ptr %memberidx9.i, align 8
  %68 = tail call ptr @malloc(i32 24)
  %69 = tail call ptr @malloc(i32 2048)
  store ptr %69, ptr %68, align 8
  br label %for.body.i26.i

for.body.i26.i:                                   ; preds = %Map_string_PropId__constructor.exit.i, %for.body.i26.i
  %i.0.i23.i102 = phi i64 [ 0, %Map_string_PropId__constructor.exit.i ], [ %71, %for.body.i26.i ]
  %70 = load ptr, ptr %68, align 8
  %ptridx.i25.i = getelementptr inbounds ptr, ptr %70, i64 %i.0.i23.i102
  store ptr null, ptr %ptridx.i25.i, align 8
  %71 = add nuw nsw i64 %i.0.i23.i102, 1
  %72 = icmp ult i64 %i.0.i23.i102, 255
  br i1 %72, label %for.body.i26.i, label %Class_constructor.exit

Class_constructor.exit:                           ; preds = %for.body.i26.i
  %memberidx10.i = getelementptr inbounds %Class, ptr %58, i64 0, i32 7
  %memberidx2.i27.i = getelementptr inbounds %Map_string_PropId_, ptr %68, i64 0, i32 1
  store i64 256, ptr %memberidx2.i27.i, align 4
  %memberidx3.i28.i = getelementptr inbounds %Map_string_PropId_, ptr %68, i64 0, i32 2
  store i64 0, ptr %memberidx3.i28.i, align 4
  store ptr %68, ptr %memberidx10.i, align 8
  %memberidx11.i = getelementptr inbounds %Class, ptr %58, i64 0, i32 10
  store i1 false, ptr %memberidx11.i, align 1
  %73 = load ptr, ptr %0, align 8
  %memberidx.i.i69 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %74 = load i64, ptr %memberidx.i.i69, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %73, i64 0, i32 1
  %75 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %75, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %76, i64 %74
  %77 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i70 = getelementptr inbounds %Module, ptr %77, i64 0, i32 6
  %78 = load ptr, ptr %memberidx1.i70, align 8
  %79 = load i64, ptr %78, align 4
  %ptridx.i.i.i72 = getelementptr inbounds ptr, ptr %76, i64 %79
  %80 = load ptr, ptr %ptridx.i.i.i72, align 8
  %memberidx2.i.i73 = getelementptr inbounds %Module, ptr %80, i64 0, i32 8
  %81 = load ptr, ptr %memberidx2.i.i73, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %78, i64 0, i32 1
  %82 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %83, i64 %82
  %84 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx15 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 2
  %85 = load ptr, ptr %memberidx15, align 8
  %.not = icmp eq ptr %85, null
  %memberidx24 = getelementptr inbounds %Class, ptr %58, i64 0, i32 2
  br i1 %.not, label %else17, label %if.entry16

if.entry16:                                       ; preds = %Class_constructor.exit
  %86 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %85)
  store ptr %86, ptr %memberidx24, align 8
  %memberidx.i67 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %87 = load ptr, ptr %memberidx.i67, align 8
  %memberidx1.i68 = getelementptr inbounds %Compiler, ptr %87, i64 0, i32 6
  %88 = load ptr, ptr %memberidx1.i68, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 2
  %89 = load i64, ptr %memberidx2.i, align 4
  %90 = icmp sgt i64 %89, 0
  br i1 %90, label %common.ret, label %ifend18

else17:                                           ; preds = %Class_constructor.exit
  store ptr null, ptr %memberidx24, align 8
  br label %ifend18

ifend18:                                          ; preds = %if.entry16, %else17
  %memberidx25 = getelementptr inbounds %Class, ptr %58, i64 0, i32 1
  store ptr %4, ptr %memberidx25, align 8
  %91 = tail call ptr @malloc(i32 24)
  %92 = load i64, ptr %memberidx.i.i69, align 4
  %93 = load ptr, ptr %0, align 8
  %memberidx1.i.i64 = getelementptr inbounds %Program, ptr %93, i64 0, i32 1
  %94 = load ptr, ptr %memberidx1.i.i64, align 8
  %memberidx.i.i.i65 = getelementptr inbounds %Array_Module_, ptr %94, i64 0, i32 1
  %95 = load ptr, ptr %memberidx.i.i.i65, align 8
  %ptridx.i.i.i66 = getelementptr inbounds ptr, ptr %95, i64 %92
  %96 = load ptr, ptr %ptridx.i.i.i66, align 8
  %memberidx28 = getelementptr inbounds %Module, ptr %96, i64 0, i32 4
  %97 = load ptr, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %Array_Class_, ptr %97, i64 0, i32 2
  %98 = load i64, ptr %memberidx29, align 4
  store i64 %92, ptr %91, align 4
  %memberidx1.i.i61 = getelementptr inbounds %TypeId, ptr %91, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i61, align 4
  %memberidx2.i.i62 = getelementptr inbounds %TypeId, ptr %91, i64 0, i32 2
  store i64 %98, ptr %memberidx2.i.i62, align 4
  store ptr %91, ptr %58, align 8
  %99 = load ptr, ptr %memberidx1.i.i64, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %99, i64 0, i32 1
  %100 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %100, i64 %92
  %101 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx30 = getelementptr inbounds %Module, ptr %101, i64 0, i32 4
  %102 = load ptr, ptr %memberidx30, align 8
  %memberidx.i = getelementptr inbounds %Array_Class_, ptr %102, i64 0, i32 2
  %103 = load i64, ptr %memberidx.i, align 4
  %memberidx1.i57 = getelementptr inbounds %Array_Class_, ptr %102, i64 0, i32 3
  %104 = load i64, ptr %memberidx1.i57, align 4
  %.not.i = icmp slt i64 %103, %104
  br i1 %.not.i, label %ifend18.Array_Class____sl__.exit_crit_edge, label %if.entry.i

ifend18.Array_Class____sl__.exit_crit_edge:       ; preds = %ifend18
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Class_, ptr %102, i64 0, i32 1
  %.pre108 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Class____sl__.exit

if.entry.i:                                       ; preds = %ifend18
  %105 = shl nuw i64 %104, 1
  store i64 %105, ptr %memberidx1.i57, align 4
  %memberidx2.i.i58 = getelementptr inbounds %Array_Class_, ptr %102, i64 0, i32 1
  %106 = load ptr, ptr %memberidx2.i.i58, align 8
  %107 = shl i64 %104, 4
  %108 = tail call ptr @realloc(ptr %106, i64 %107)
  store ptr %108, ptr %memberidx2.i.i58, align 8
  %.pre107 = load i64, ptr %memberidx.i, align 4
  br label %Array_Class____sl__.exit

Array_Class____sl__.exit:                         ; preds = %ifend18.Array_Class____sl__.exit_crit_edge, %if.entry.i
  %109 = phi ptr [ %.pre108, %ifend18.Array_Class____sl__.exit_crit_edge ], [ %108, %if.entry.i ]
  %110 = phi i64 [ %103, %ifend18.Array_Class____sl__.exit_crit_edge ], [ %.pre107, %if.entry.i ]
  %111 = add nsw i64 %110, 1
  store i64 %111, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %109, i64 %110
  store ptr %58, ptr %ptridx.i, align 8
  %memberidx31 = getelementptr inbounds %Scope, ptr %84, i64 0, i32 2
  %112 = load ptr, ptr %memberidx31, align 8
  %113 = load ptr, ptr %58, align 8
  tail call fastcc void @Map_string_ClassId____setitem__(ptr %112, ptr %4, ptr %113)
  %memberidx33 = getelementptr inbounds %Scope, ptr %84, i64 0, i32 1
  %114 = load ptr, ptr %memberidx33, align 8
  %115 = tail call ptr @malloc(i32 24)
  %116 = load ptr, ptr %58, align 8
  %117 = load i64, ptr %116, align 4
  %memberidx1.i = getelementptr inbounds %TypeId, ptr %116, i64 0, i32 2
  %118 = load i64, ptr %memberidx1.i, align 4
  store i64 3, ptr %115, align 4
  %memberidx1.i.i = getelementptr inbounds %VarId, ptr %115, i64 0, i32 1
  store i64 %117, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %115, i64 0, i32 2
  store i64 %118, ptr %memberidx2.i.i, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %114, ptr %4, ptr nonnull %115)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_function_within_module(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 49)
  %memberidx.i = getelementptr inbounds %Function, ptr %3, i64 0, i32 6
  %memberidx1 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 4
  %4 = load i1, ptr %memberidx1, align 1
  store i1 %4, ptr %memberidx.i, align 1
  %5 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %5, i64 0, i32 2
  %6 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Function, ptr %3, i64 0, i32 1
  store ptr %6, ptr %memberidx4, align 8
  %7 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %6)
  %.not.i = icmp eq ptr %7, null
  br i1 %.not.i, label %ifend, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 2
  br i1 %9, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend11, %Array_Function____sl__.exit, %TypeChecker_error.exit95, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %if.entry.i
  %10 = load ptr, ptr %6, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 5
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = tail call ptr %11(ptr nonnull %6)
  %13 = alloca ptr, align 8
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %13, ptr nonnull @95, ptr %12)
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i71 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i71, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 %14, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 %14, ptr %memberidx2.i, align 4
  tail call void @free(ptr %12)
  %17 = load ptr, ptr %1, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx7, align 8
  %memberidx.i76 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %19 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %19, i64 0, i32 6
  %20 = load ptr, ptr %memberidx1.i77, align 8
  %21 = call ptr @malloc(i32 24)
  store i64 1, ptr %21, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %21, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i78 = getelementptr inbounds %FloError, ptr %21, i64 0, i32 1
  store ptr %16, ptr %memberidx2.i.i78, align 8
  %memberidx.i.i79 = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 2
  %22 = load i64, ptr %memberidx.i.i79, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 3
  %23 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %22, %23
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 1
  %.pre118 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %24 = shl nuw i64 %23, 1
  store i64 %24, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 1
  %25 = load ptr, ptr %memberidx2.i.i.i, align 8
  %26 = shl i64 %23, 4
  %27 = call ptr @realloc(ptr %25, i64 %26)
  store ptr %27, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i79, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %28 = phi ptr [ %.pre118, %if.entry.TypeChecker_error.exit_crit_edge ], [ %27, %if.entry.i.i ]
  %29 = phi i64 [ %22, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %30 = add nsw i64 %29, 1
  store i64 %30, ptr %memberidx.i.i79, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %28, i64 %29
  store ptr %21, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2, %if.entry.i
  %31 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %6)
  %32 = load i64, ptr %31, align 4
  %.not = icmp eq i64 %32, 20
  br i1 %.not, label %ifend11, label %if.entry9

if.entry9:                                        ; preds = %ifend
  %33 = load ptr, ptr %6, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %33, i64 0, i32 5
  %34 = load ptr, ptr %memberidx12, align 8
  %35 = tail call ptr %34(ptr nonnull %6)
  %36 = alloca ptr, align 8
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %36, ptr nonnull @96, ptr %35)
  %38 = load ptr, ptr %36, align 8
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i80 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i80, align 8
  %memberidx1.i81 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 %37, ptr %memberidx1.i81, align 4
  %memberidx2.i82 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 %37, ptr %memberidx2.i82, align 4
  tail call void @free(ptr %35)
  %40 = load ptr, ptr %1, align 8
  %memberidx14 = getelementptr inbounds %Token, ptr %40, i64 0, i32 1
  %41 = load ptr, ptr %memberidx14, align 8
  %memberidx.i83 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %42 = load ptr, ptr %memberidx.i83, align 8
  %memberidx1.i84 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i84, align 8
  %44 = call ptr @malloc(i32 24)
  store i64 1, ptr %44, align 4
  %memberidx1.i.i85 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 2
  store ptr %41, ptr %memberidx1.i.i85, align 8
  %memberidx2.i.i86 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 1
  store ptr %39, ptr %memberidx2.i.i86, align 8
  %memberidx.i.i87 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %45 = load i64, ptr %memberidx.i.i87, align 4
  %memberidx1.i2.i88 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 3
  %46 = load i64, ptr %memberidx1.i2.i88, align 4
  %.not.i.i89 = icmp slt i64 %45, %46
  br i1 %.not.i.i89, label %if.entry9.TypeChecker_error.exit95_crit_edge, label %if.entry.i.i92

if.entry9.TypeChecker_error.exit95_crit_edge:     ; preds = %if.entry9
  %memberidx4.i.i93.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %.pre120 = load ptr, ptr %memberidx4.i.i93.phi.trans.insert, align 8
  br label %TypeChecker_error.exit95

if.entry.i.i92:                                   ; preds = %if.entry9
  %47 = shl nuw i64 %46, 1
  store i64 %47, ptr %memberidx1.i2.i88, align 4
  %memberidx2.i.i.i91 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i.i91, align 8
  %49 = shl i64 %46, 4
  %50 = call ptr @realloc(ptr %48, i64 %49)
  store ptr %50, ptr %memberidx2.i.i.i91, align 8
  %.pre119 = load i64, ptr %memberidx.i.i87, align 4
  br label %TypeChecker_error.exit95

TypeChecker_error.exit95:                         ; preds = %if.entry9.TypeChecker_error.exit95_crit_edge, %if.entry.i.i92
  %51 = phi ptr [ %.pre120, %if.entry9.TypeChecker_error.exit95_crit_edge ], [ %50, %if.entry.i.i92 ]
  %52 = phi i64 [ %45, %if.entry9.TypeChecker_error.exit95_crit_edge ], [ %.pre119, %if.entry.i.i92 ]
  %53 = add nsw i64 %52, 1
  store i64 %53, ptr %memberidx.i.i87, align 4
  %ptridx.i.i94 = getelementptr inbounds ptr, ptr %51, i64 %52
  store ptr %44, ptr %ptridx.i.i94, align 8
  br label %common.ret

ifend11:                                          ; preds = %ifend
  %memberidx15 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %54 = tail call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i96 = getelementptr inbounds %Scope, ptr %54, i64 0, i32 5
  %55 = load ptr, ptr %memberidx15, align 8
  store ptr %55, ptr %memberidx.i96, align 8
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %memberidx15, align 8
  %memberidx18 = getelementptr inbounds %Function, ptr %3, i64 0, i32 2
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionArg_, ptr %57, align 8
  %memberidx.i98 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 2
  store i64 0, ptr %memberidx.i98, align 4
  %memberidx1.i99 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 3
  store i64 8, ptr %memberidx1.i99, align 4
  %memberidx2.i100 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 1
  %58 = tail call ptr @malloc(i32 64)
  store ptr %58, ptr %memberidx2.i100, align 8
  store i64 0, ptr %memberidx.i98, align 4
  store ptr %57, ptr %memberidx18, align 8
  %memberidx21 = getelementptr inbounds %Function, ptr %3, i64 0, i32 4
  %memberidx22 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 1
  %59 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 3
  %60 = load ptr, ptr %memberidx23, align 8
  %61 = tail call fastcc ptr @TypeChecker_init_function_signature(ptr %0, ptr %59, ptr %60, ptr nonnull %57)
  store ptr %61, ptr %memberidx21, align 8
  %memberidx.i101 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %62 = load ptr, ptr %memberidx.i101, align 8
  %memberidx1.i102 = getelementptr inbounds %Compiler, ptr %62, i64 0, i32 6
  %63 = load ptr, ptr %memberidx1.i102, align 8
  %memberidx2.i103 = getelementptr inbounds %Array_FloError_, ptr %63, i64 0, i32 2
  %64 = load i64, ptr %memberidx2.i103, align 4
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend11
  %66 = tail call ptr @malloc(i32 24)
  %memberidx29 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %67 = load i64, ptr %memberidx29, align 4
  %68 = load ptr, ptr %0, align 8
  %memberidx1.i.i105 = getelementptr inbounds %Program, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx1.i.i105, align 8
  %memberidx.i.i.i106 = getelementptr inbounds %Array_Module_, ptr %69, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i.i.i106, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %70, i64 %67
  %71 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx30 = getelementptr inbounds %Module, ptr %71, i64 0, i32 5
  %72 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %Array_Function_, ptr %72, i64 0, i32 2
  %73 = load i64, ptr %memberidx31, align 4
  store i64 0, ptr %66, align 4
  %memberidx1.i116 = getelementptr inbounds %VarId, ptr %66, i64 0, i32 1
  store i64 %67, ptr %memberidx1.i116, align 4
  %memberidx2.i117 = getelementptr inbounds %VarId, ptr %66, i64 0, i32 2
  store i64 %73, ptr %memberidx2.i117, align 4
  store ptr %66, ptr %3, align 8
  %74 = load ptr, ptr %memberidx.i96, align 8
  store ptr %74, ptr %memberidx15, align 8
  %memberidx34 = getelementptr inbounds %Function, ptr %3, i64 0, i32 5
  %75 = load ptr, ptr %54, align 8
  store ptr %75, ptr %memberidx34, align 8
  %76 = load ptr, ptr %memberidx1.i.i105, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %77, i64 %67
  %78 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i112 = getelementptr inbounds %Module, ptr %78, i64 0, i32 6
  %79 = load ptr, ptr %memberidx1.i112, align 8
  %80 = load i64, ptr %79, align 4
  %ptridx.i.i.i114 = getelementptr inbounds ptr, ptr %77, i64 %80
  %81 = load ptr, ptr %ptridx.i.i.i114, align 8
  %memberidx2.i.i115 = getelementptr inbounds %Module, ptr %81, i64 0, i32 8
  %82 = load ptr, ptr %memberidx2.i.i115, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %79, i64 0, i32 1
  %83 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx36 = getelementptr inbounds %Module, ptr %78, i64 0, i32 5
  %86 = load ptr, ptr %memberidx36, align 8
  %memberidx.i72 = getelementptr inbounds %Array_Function_, ptr %86, i64 0, i32 2
  %87 = load i64, ptr %memberidx.i72, align 4
  %memberidx1.i73 = getelementptr inbounds %Array_Function_, ptr %86, i64 0, i32 3
  %88 = load i64, ptr %memberidx1.i73, align 4
  %.not.i74 = icmp slt i64 %87, %88
  br i1 %.not.i74, label %ifend27.Array_Function____sl__.exit_crit_edge, label %if.entry.i75

ifend27.Array_Function____sl__.exit_crit_edge:    ; preds = %ifend27
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Function_, ptr %86, i64 0, i32 1
  %.pre122 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Function____sl__.exit

if.entry.i75:                                     ; preds = %ifend27
  %89 = shl nuw i64 %88, 1
  store i64 %89, ptr %memberidx1.i73, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Function_, ptr %86, i64 0, i32 1
  %90 = load ptr, ptr %memberidx2.i.i, align 8
  %91 = shl i64 %88, 4
  %92 = tail call ptr @realloc(ptr %90, i64 %91)
  store ptr %92, ptr %memberidx2.i.i, align 8
  %.pre121 = load i64, ptr %memberidx.i72, align 4
  br label %Array_Function____sl__.exit

Array_Function____sl__.exit:                      ; preds = %ifend27.Array_Function____sl__.exit_crit_edge, %if.entry.i75
  %93 = phi ptr [ %.pre122, %ifend27.Array_Function____sl__.exit_crit_edge ], [ %92, %if.entry.i75 ]
  %94 = phi i64 [ %87, %ifend27.Array_Function____sl__.exit_crit_edge ], [ %.pre121, %if.entry.i75 ]
  %95 = add nsw i64 %94, 1
  store i64 %95, ptr %memberidx.i72, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %93, i64 %94
  store ptr %3, ptr %ptridx.i, align 8
  %memberidx37 = getelementptr inbounds %Scope, ptr %85, i64 0, i32 3
  %96 = load ptr, ptr %memberidx37, align 8
  %97 = load ptr, ptr %memberidx4, align 8
  %98 = load ptr, ptr %3, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %96, ptr %97, ptr %98)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = tail call fastcc ptr @bin_op_to_op_overload_name(i64 %4)
  %6 = load ptr, ptr %0, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %tailrecurse.i, %3
  %.tr11.i.in = phi ptr [ %memberidx2, %3 ], [ %memberidx1.i67, %tailrecurse.i ]
  %.tr11.i = load ptr, ptr %.tr11.i.in, align 8
  %7 = load i64, ptr %.tr11.i, align 4
  %switch = icmp eq i64 %7, 19
  %memberidx1.i67 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  br i1 %switch, label %tailrecurse.i, label %if.entry3.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i69 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %8 = load ptr, ptr %memberidx6.i69, align 8
  %memberidx.i.i70 = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i70, align 8
  %10 = load i64, ptr %8, align 4
  %memberidx.i.i.i71 = getelementptr inbounds %Array_Module_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i.i71, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i72 = getelementptr inbounds %Module, ptr %12, i64 0, i32 4
  %13 = load ptr, ptr %memberidx2.i.i72, align 8
  %memberidx3.i.i73 = getelementptr inbounds %TypeId, ptr %8, i64 0, i32 2
  %14 = load i64, ptr %memberidx3.i.i73, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx3 = getelementptr inbounds %Class, ptr %16, i64 0, i32 6
  %17 = load ptr, ptr %memberidx3, align 8
  %18 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr %5)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %17, i64 0, i32 1
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = urem i64 %18, %19
  %21 = load ptr, ptr %17, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %22, null
  br i1 %.not.i, label %common.ret, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %if.entry3.i
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %23 = phi ptr [ %33, %else.i ], [ %21, %while.entry.i.preheader ]
  %24 = phi i64 [ %34, %else.i ], [ %19, %while.entry.i.preheader ]
  %25 = phi ptr [ %37, %else.i ], [ %22, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %36, %else.i ], [ %20, %while.entry.i.preheader ]
  %26 = load ptr, ptr %25, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i.i, align 4
  %28 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %27, %28
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i, align 8
  %30 = load ptr, ptr %memberidx3.i.i, align 8
  %31 = tail call i64 @memcmp(ptr %29, ptr %30, i64 %27)
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre75 = load ptr, ptr %17, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre76.pre = load ptr, ptr %17, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre76.pre, i64 %hash.0.i
  %.pre77.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre77.pre, null
  br i1 %.not29.i, label %common.ret, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %33 = phi ptr [ %.pre75, %ifend.i.i.else.i_crit_edge ], [ %23, %while.entry.i ]
  %34 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %24, %while.entry.i ]
  %35 = add nuw i64 %hash.0.i, 1
  %36 = urem i64 %35, %34
  %ptridx7.i = getelementptr inbounds ptr, ptr %33, i64 %36
  %37 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %37, null
  br i1 %.not30.i, label %common.ret, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre77.pre, i64 0, i32 1
  %38 = load ptr, ptr %memberidx15.i, align 8
  %39 = icmp eq ptr %38, null
  br i1 %39, label %common.ret, label %ifend

common.ret:                                       ; preds = %else.i, %if.entry3.i, %while.end.i, %get_class_prop_type.exit, %Map_string_PropId____getitem__.exit, %ifend13, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %101, %ifend13 ], [ null, %Map_string_PropId____getitem__.exit ], [ null, %get_class_prop_type.exit ], [ null, %while.end.i ], [ null, %if.entry3.i ], [ null, %else.i ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %40 = load ptr, ptr %0, align 8
  %memberidx.i.i34 = getelementptr inbounds %PropId, ptr %38, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i.i34, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i.i.i, align 8
  %43 = load i64, ptr %41, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %44, i64 %43
  %45 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %45, i64 0, i32 4
  %46 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %41, i64 0, i32 2
  %47 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %48, i64 %47
  %49 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %50 = load i64, ptr %38, align 4
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i = getelementptr inbounds %Class, ptr %49, i64 0, i32 5
  %52 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %38, i64 0, i32 2
  %53 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %54, i64 %53
  %55 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %55, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %49, i64 0, i32 4
  %56 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %38, i64 0, i32 2
  %57 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %56, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %58, i64 %57
  %59 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %59, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i35 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx5 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i35, i64 0, i32 1
  %60 = load ptr, ptr %memberidx5, align 8
  %memberidx.i36 = getelementptr inbounds %Array_Type_, ptr %60, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i36, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx6 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %63 = load ptr, ptr %memberidx6, align 8
  %64 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %62, ptr %63)
  %memberidx.i37 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %65 = load ptr, ptr %memberidx.i37, align 8
  %memberidx1.i38 = getelementptr inbounds %Compiler, ptr %65, i64 0, i32 6
  %66 = load ptr, ptr %memberidx1.i38, align 8
  %memberidx2.i39 = getelementptr inbounds %Array_FloError_, ptr %66, i64 0, i32 2
  %67 = load i64, ptr %memberidx2.i39, align 4
  %68 = icmp sgt i64 %67, 0
  br i1 %68, label %common.ret, label %ifend9

ifend9:                                           ; preds = %get_class_prop_type.exit
  %memberidx10 = getelementptr inbounds %Expression, ptr %64, i64 0, i32 3
  %69 = load ptr, ptr %memberidx10, align 8
  %70 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %62, ptr %69)
  br i1 %70, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend9
  %71 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %62)
  %72 = load ptr, ptr %71, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %72, i64 0, i32 5
  %73 = load ptr, ptr %memberidx14, align 8
  %74 = tail call ptr %73(ptr nonnull %71)
  %75 = load ptr, ptr %memberidx10, align 8
  %76 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %75)
  %77 = load ptr, ptr %76, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %77, i64 0, i32 5
  %78 = load ptr, ptr %memberidx16, align 8
  %79 = tail call ptr %78(ptr nonnull %76)
  %80 = alloca ptr, align 8
  %81 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %80, ptr nonnull @163, ptr %74, ptr %79)
  %82 = load ptr, ptr %80, align 8
  %83 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %83, align 8
  %memberidx.i40 = getelementptr inbounds %string, ptr %83, i64 0, i32 1
  store ptr %82, ptr %memberidx.i40, align 8
  %memberidx1.i41 = getelementptr inbounds %string, ptr %83, i64 0, i32 2
  store i64 %81, ptr %memberidx1.i41, align 4
  %memberidx2.i42 = getelementptr inbounds %string, ptr %83, i64 0, i32 3
  store i64 %81, ptr %memberidx2.i42, align 4
  tail call void @free(ptr %74)
  tail call void @free(ptr %79)
  %84 = load ptr, ptr %memberidx6, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = load ptr, ptr %memberidx.i37, align 8
  %memberidx1.i44 = getelementptr inbounds %Compiler, ptr %86, i64 0, i32 6
  %87 = load ptr, ptr %memberidx1.i44, align 8
  %88 = call ptr @malloc(i32 24)
  store i64 5, ptr %88, align 4
  %memberidx1.i.i45 = getelementptr inbounds %FloError, ptr %88, i64 0, i32 2
  store ptr %85, ptr %memberidx1.i.i45, align 8
  %memberidx2.i.i46 = getelementptr inbounds %FloError, ptr %88, i64 0, i32 1
  store ptr %83, ptr %memberidx2.i.i46, align 8
  %memberidx.i.i47 = getelementptr inbounds %Array_FloError_, ptr %87, i64 0, i32 2
  %89 = load i64, ptr %memberidx.i.i47, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %87, i64 0, i32 3
  %90 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i48 = icmp slt i64 %89, %90
  br i1 %.not.i.i48, label %if.entry11.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry11.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry11
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %87, i64 0, i32 1
  %.pre79 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry11
  %91 = shl nuw i64 %90, 1
  store i64 %91, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i50 = getelementptr inbounds %Array_FloError_, ptr %87, i64 0, i32 1
  %92 = load ptr, ptr %memberidx2.i.i.i50, align 8
  %93 = shl i64 %90, 4
  %94 = call ptr @realloc(ptr %92, i64 %93)
  store ptr %94, ptr %memberidx2.i.i.i50, align 8
  %.pre78 = load i64, ptr %memberidx.i.i47, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry11.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %95 = phi ptr [ %.pre79, %if.entry11.TypeChecker_error.exit_crit_edge ], [ %94, %if.entry.i.i ]
  %96 = phi i64 [ %89, %if.entry11.TypeChecker_error.exit_crit_edge ], [ %.pre78, %if.entry.i.i ]
  %97 = add nsw i64 %96, 1
  store i64 %97, ptr %memberidx.i.i47, align 4
  %ptridx.i.i51 = getelementptr inbounds ptr, ptr %95, i64 %96
  store ptr %88, ptr %ptridx.i.i51, align 8
  br label %common.ret

ifend13:                                          ; preds = %ifend9
  %98 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %98, align 4
  %memberidx.i.i52 = getelementptr inbounds %Expression, ptr %98, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i52, align 4
  %memberidx1.i.i53 = getelementptr inbounds %Expression, ptr %98, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i53, align 1
  %memberidx.i54 = getelementptr inbounds %MemberExpression, ptr %98, i64 0, i32 4
  store ptr %1, ptr %memberidx.i54, align 8
  %memberidx1.i55 = getelementptr inbounds %MemberExpression, ptr %98, i64 0, i32 5
  store ptr %38, ptr %memberidx1.i55, align 8
  %memberidx2.i56 = getelementptr inbounds %Expression, ptr %98, i64 0, i32 3
  store ptr %common.ret.op.i35, ptr %memberidx2.i56, align 8
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %99, align 8
  %memberidx.i57 = getelementptr inbounds %Array_Expression_, ptr %99, i64 0, i32 2
  store i64 0, ptr %memberidx.i57, align 4
  %memberidx1.i58 = getelementptr inbounds %Array_Expression_, ptr %99, i64 0, i32 3
  store i64 8, ptr %memberidx1.i58, align 4
  %memberidx2.i59 = getelementptr inbounds %Array_Expression_, ptr %99, i64 0, i32 1
  %100 = tail call ptr @malloc(i32 64)
  store ptr %100, ptr %memberidx2.i59, align 8
  store ptr %64, ptr %100, align 8
  store i64 1, ptr %memberidx.i57, align 4
  %101 = tail call ptr @malloc(i32 41)
  %memberidx21 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i35, i64 0, i32 2
  %102 = load ptr, ptr %memberidx21, align 8
  store i64 8, ptr %101, align 4
  %memberidx.i.i60 = getelementptr inbounds %Expression, ptr %101, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i60, align 4
  %memberidx1.i.i61 = getelementptr inbounds %Expression, ptr %101, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i61, align 1
  %memberidx.i62 = getelementptr inbounds %CallExpression, ptr %101, i64 0, i32 4
  store ptr %98, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %CallExpression, ptr %101, i64 0, i32 5
  store ptr %99, ptr %memberidx1.i63, align 8
  %memberidx2.i64 = getelementptr inbounds %Expression, ptr %101, i64 0, i32 3
  store ptr %102, ptr %memberidx2.i64, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i91, %3
  %.tr11.i.in = phi ptr [ %memberidx1, %3 ], [ %memberidx1.i90, %if.entry.i91 ]
  %.tr11.i = load ptr, ptr %.tr11.i.in, align 8
  %5 = load i64, ptr %.tr11.i, align 4
  switch i64 %5, label %get_class_from_type.exit [
    i64 19, label %if.entry.i91
    i64 11, label %if.entry3.i
  ]

if.entry.i91:                                     ; preds = %tailrecurse.i
  %memberidx1.i90 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i92 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %6 = load ptr, ptr %memberidx6.i92, align 8
  %memberidx.i.i93 = getelementptr inbounds %Program, ptr %4, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i93, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i.i94 = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i94, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i95 = getelementptr inbounds %Module, ptr %10, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2.i.i95, align 8
  %memberidx3.i.i96 = getelementptr inbounds %TypeId, ptr %6, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i.i96, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i89 = phi ptr [ %14, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx2 = getelementptr inbounds %Class, ptr %common.ret.op.i89, i64 0, i32 6
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = tail call ptr @malloc(i32 11)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %16, ptr noundef nonnull align 8 dereferenceable(11) @107, i64 11, i1 false)
  %17 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %17, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  store ptr %16, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i, align 4
  %18 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %17)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %15, i64 0, i32 1
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = urem i64 %18, %19
  %21 = load ptr, ptr %15, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %22, null
  br i1 %.not.i, label %if.entry, label %while.entry.i

while.entry.i:                                    ; preds = %get_class_from_type.exit, %else.i
  %23 = phi ptr [ %33, %else.i ], [ %21, %get_class_from_type.exit ]
  %24 = phi i64 [ %34, %else.i ], [ %19, %get_class_from_type.exit ]
  %25 = phi ptr [ %37, %else.i ], [ %22, %get_class_from_type.exit ]
  %hash.0.i = phi i64 [ %36, %else.i ], [ %20, %get_class_from_type.exit ]
  %26 = load ptr, ptr %25, align 8
  %memberidx.i.i38 = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i.i38, align 4
  %28 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %27, %28
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i40 = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i40, align 8
  %30 = load ptr, ptr %memberidx.i.i, align 8
  %31 = tail call i64 @memcmp(ptr %29, ptr %30, i64 %27)
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre100 = load ptr, ptr %15, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre101.pre = load ptr, ptr %15, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre101.pre, i64 %hash.0.i
  %.pre102.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre102.pre, null
  br i1 %.not29.i, label %if.entry, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %33 = phi ptr [ %.pre100, %ifend.i.i.else.i_crit_edge ], [ %23, %while.entry.i ]
  %34 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %24, %while.entry.i ]
  %35 = add nuw i64 %hash.0.i, 1
  %36 = urem i64 %35, %34
  %ptridx7.i = getelementptr inbounds ptr, ptr %33, i64 %36
  %37 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %37, null
  br i1 %.not30.i, label %if.entry, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre102.pre, i64 0, i32 1
  %38 = load ptr, ptr %memberidx15.i, align 8
  %39 = icmp eq ptr %38, null
  br i1 %39, label %if.entry, label %ifend

common.ret:                                       ; preds = %get_class_prop_type.exit, %ifend15, %TypeChecker_error.exit74, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit74 ], [ %120, %ifend15 ], [ null, %get_class_prop_type.exit ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %else.i, %get_class_from_type.exit, %while.end.i, %Map_string_PropId____getitem__.exit
  %memberidx3 = getelementptr inbounds %Class, ptr %common.ret.op.i89, i64 0, i32 1
  %40 = load ptr, ptr %memberidx3, align 8
  %41 = load ptr, ptr %40, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i64 0, i32 5
  %42 = load ptr, ptr %memberidx4, align 8
  %43 = tail call ptr %42(ptr nonnull %40)
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %44, ptr nonnull @194, ptr %43)
  %46 = load ptr, ptr %44, align 8
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i41 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i41, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 %45, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 %45, ptr %memberidx2.i, align 4
  tail call void @free(ptr %43)
  %48 = load ptr, ptr %2, align 8
  %memberidx.i42 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %49 = load ptr, ptr %memberidx.i42, align 8
  %memberidx1.i43 = getelementptr inbounds %Compiler, ptr %49, i64 0, i32 6
  %50 = load ptr, ptr %memberidx1.i43, align 8
  %51 = call ptr @malloc(i32 24)
  store i64 4, ptr %51, align 4
  %memberidx1.i.i44 = getelementptr inbounds %FloError, ptr %51, i64 0, i32 2
  store ptr %48, ptr %memberidx1.i.i44, align 8
  %memberidx2.i.i45 = getelementptr inbounds %FloError, ptr %51, i64 0, i32 1
  store ptr %47, ptr %memberidx2.i.i45, align 8
  %memberidx.i.i46 = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 2
  %52 = load i64, ptr %memberidx.i.i46, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 3
  %53 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i47 = icmp slt i64 %52, %53
  br i1 %.not.i.i47, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %.pre106 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %54 = shl nuw i64 %53, 1
  store i64 %54, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %55 = load ptr, ptr %memberidx2.i.i.i, align 8
  %56 = shl i64 %53, 4
  %57 = call ptr @realloc(ptr %55, i64 %56)
  store ptr %57, ptr %memberidx2.i.i.i, align 8
  %.pre105 = load i64, ptr %memberidx.i.i46, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %58 = phi ptr [ %.pre106, %if.entry.TypeChecker_error.exit_crit_edge ], [ %57, %if.entry.i.i ]
  %59 = phi i64 [ %52, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre105, %if.entry.i.i ]
  %60 = add nsw i64 %59, 1
  store i64 %60, ptr %memberidx.i.i46, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %58, i64 %59
  store ptr %51, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %61 = load ptr, ptr %0, align 8
  %memberidx.i.i48 = getelementptr inbounds %PropId, ptr %38, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i.i48, align 8
  %memberidx.i.i.i49 = getelementptr inbounds %Program, ptr %61, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i.i.i49, align 8
  %64 = load i64, ptr %62, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %65, i64 %64
  %66 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i50 = getelementptr inbounds %Module, ptr %66, i64 0, i32 4
  %67 = load ptr, ptr %memberidx2.i.i.i50, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %62, i64 0, i32 2
  %68 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %71 = load i64, ptr %38, align 4
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i52 = getelementptr inbounds %Class, ptr %70, i64 0, i32 5
  %73 = load ptr, ptr %memberidx1.i52, align 8
  %memberidx2.i53 = getelementptr inbounds %PropId, ptr %38, i64 0, i32 2
  %74 = load i64, ptr %memberidx2.i53, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %73, i64 0, i32 1
  %75 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %75, i64 %74
  %76 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %76, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %70, i64 0, i32 4
  %77 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %38, i64 0, i32 2
  %78 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i54 = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i.i54, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %80, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i51 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx7 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i51, i64 0, i32 1
  %81 = load ptr, ptr %memberidx7, align 8
  %memberidx.i55 = getelementptr inbounds %Array_Type_, ptr %81, i64 0, i32 1
  %82 = load ptr, ptr %memberidx.i55, align 8
  %83 = load ptr, ptr %82, align 8
  %memberidx8 = getelementptr inbounds %ExpressionIndexNode, ptr %2, i64 0, i32 4
  %84 = load ptr, ptr %memberidx8, align 8
  %85 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %83, ptr %84)
  %memberidx.i56 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %86 = load ptr, ptr %memberidx.i56, align 8
  %memberidx1.i57 = getelementptr inbounds %Compiler, ptr %86, i64 0, i32 6
  %87 = load ptr, ptr %memberidx1.i57, align 8
  %memberidx2.i58 = getelementptr inbounds %Array_FloError_, ptr %87, i64 0, i32 2
  %88 = load i64, ptr %memberidx2.i58, align 4
  %89 = icmp sgt i64 %88, 0
  br i1 %89, label %common.ret, label %ifend11

ifend11:                                          ; preds = %get_class_prop_type.exit
  %memberidx12 = getelementptr inbounds %Expression, ptr %85, i64 0, i32 3
  %90 = load ptr, ptr %memberidx12, align 8
  %91 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %83, ptr %90)
  br i1 %91, label %ifend15, label %if.entry13

if.entry13:                                       ; preds = %ifend11
  %92 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %83)
  %93 = load ptr, ptr %92, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %93, i64 0, i32 5
  %94 = load ptr, ptr %memberidx16, align 8
  %95 = tail call ptr %94(ptr nonnull %92)
  %96 = load ptr, ptr %memberidx12, align 8
  %97 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %96)
  %98 = load ptr, ptr %97, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %98, i64 0, i32 5
  %99 = load ptr, ptr %memberidx18, align 8
  %100 = tail call ptr %99(ptr nonnull %97)
  %101 = alloca ptr, align 8
  %102 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %101, ptr nonnull @163, ptr %95, ptr %100)
  %103 = load ptr, ptr %101, align 8
  %104 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %104, align 8
  %memberidx.i59 = getelementptr inbounds %string, ptr %104, i64 0, i32 1
  store ptr %103, ptr %memberidx.i59, align 8
  %memberidx1.i60 = getelementptr inbounds %string, ptr %104, i64 0, i32 2
  store i64 %102, ptr %memberidx1.i60, align 4
  %memberidx2.i61 = getelementptr inbounds %string, ptr %104, i64 0, i32 3
  store i64 %102, ptr %memberidx2.i61, align 4
  tail call void @free(ptr %95)
  tail call void @free(ptr %100)
  %105 = load ptr, ptr %memberidx8, align 8
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %memberidx.i56, align 8
  %memberidx1.i63 = getelementptr inbounds %Compiler, ptr %107, i64 0, i32 6
  %108 = load ptr, ptr %memberidx1.i63, align 8
  %109 = call ptr @malloc(i32 24)
  store i64 5, ptr %109, align 4
  %memberidx1.i.i64 = getelementptr inbounds %FloError, ptr %109, i64 0, i32 2
  store ptr %106, ptr %memberidx1.i.i64, align 8
  %memberidx2.i.i65 = getelementptr inbounds %FloError, ptr %109, i64 0, i32 1
  store ptr %104, ptr %memberidx2.i.i65, align 8
  %memberidx.i.i66 = getelementptr inbounds %Array_FloError_, ptr %108, i64 0, i32 2
  %110 = load i64, ptr %memberidx.i.i66, align 4
  %memberidx1.i2.i67 = getelementptr inbounds %Array_FloError_, ptr %108, i64 0, i32 3
  %111 = load i64, ptr %memberidx1.i2.i67, align 4
  %.not.i.i68 = icmp slt i64 %110, %111
  br i1 %.not.i.i68, label %if.entry13.TypeChecker_error.exit74_crit_edge, label %if.entry.i.i71

if.entry13.TypeChecker_error.exit74_crit_edge:    ; preds = %if.entry13
  %memberidx4.i.i72.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %108, i64 0, i32 1
  %.pre104 = load ptr, ptr %memberidx4.i.i72.phi.trans.insert, align 8
  br label %TypeChecker_error.exit74

if.entry.i.i71:                                   ; preds = %if.entry13
  %112 = shl nuw i64 %111, 1
  store i64 %112, ptr %memberidx1.i2.i67, align 4
  %memberidx2.i.i.i70 = getelementptr inbounds %Array_FloError_, ptr %108, i64 0, i32 1
  %113 = load ptr, ptr %memberidx2.i.i.i70, align 8
  %114 = shl i64 %111, 4
  %115 = call ptr @realloc(ptr %113, i64 %114)
  store ptr %115, ptr %memberidx2.i.i.i70, align 8
  %.pre103 = load i64, ptr %memberidx.i.i66, align 4
  br label %TypeChecker_error.exit74

TypeChecker_error.exit74:                         ; preds = %if.entry13.TypeChecker_error.exit74_crit_edge, %if.entry.i.i71
  %116 = phi ptr [ %.pre104, %if.entry13.TypeChecker_error.exit74_crit_edge ], [ %115, %if.entry.i.i71 ]
  %117 = phi i64 [ %110, %if.entry13.TypeChecker_error.exit74_crit_edge ], [ %.pre103, %if.entry.i.i71 ]
  %118 = add nsw i64 %117, 1
  store i64 %118, ptr %memberidx.i.i66, align 4
  %ptridx.i.i73 = getelementptr inbounds ptr, ptr %116, i64 %117
  store ptr %109, ptr %ptridx.i.i73, align 8
  br label %common.ret

ifend15:                                          ; preds = %ifend11
  %119 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %119, align 4
  %memberidx.i.i75 = getelementptr inbounds %Expression, ptr %119, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i75, align 4
  %memberidx1.i.i76 = getelementptr inbounds %Expression, ptr %119, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i76, align 1
  %memberidx.i77 = getelementptr inbounds %MemberExpression, ptr %119, i64 0, i32 4
  store ptr %1, ptr %memberidx.i77, align 8
  %memberidx1.i78 = getelementptr inbounds %MemberExpression, ptr %119, i64 0, i32 5
  store ptr %38, ptr %memberidx1.i78, align 8
  %memberidx2.i79 = getelementptr inbounds %Expression, ptr %119, i64 0, i32 3
  store ptr %common.ret.op.i51, ptr %memberidx2.i79, align 8
  %120 = tail call ptr @malloc(i32 41)
  %121 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %121, align 8
  %memberidx.i80 = getelementptr inbounds %Array_Expression_, ptr %121, i64 0, i32 2
  store i64 0, ptr %memberidx.i80, align 4
  %memberidx1.i81 = getelementptr inbounds %Array_Expression_, ptr %121, i64 0, i32 3
  store i64 8, ptr %memberidx1.i81, align 4
  %memberidx2.i82 = getelementptr inbounds %Array_Expression_, ptr %121, i64 0, i32 1
  %122 = tail call ptr @malloc(i32 64)
  store ptr %122, ptr %memberidx2.i82, align 8
  store ptr %85, ptr %122, align 8
  store i64 1, ptr %memberidx.i80, align 4
  %memberidx23 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i51, i64 0, i32 2
  %123 = load ptr, ptr %memberidx23, align 8
  store i64 8, ptr %120, align 4
  %memberidx.i.i83 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i83, align 4
  %memberidx1.i.i84 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i84, align 1
  %memberidx.i85 = getelementptr inbounds %CallExpression, ptr %120, i64 0, i32 4
  store ptr %119, ptr %memberidx.i85, align 8
  %memberidx1.i86 = getelementptr inbounds %CallExpression, ptr %120, i64 0, i32 5
  store ptr %121, ptr %memberidx1.i86, align 8
  %memberidx2.i87 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 3
  store ptr %123, ptr %memberidx2.i87, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_index_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %3, align 4
  %memberidx = getelementptr inbounds %ExpressionIndexNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend4, %2, %TypeChecker_error.exit71, %ifend19, %TypeChecker_error.exit, %if.entry2
  %common.ret.op = phi ptr [ %17, %if.entry2 ], [ null, %TypeChecker_error.exit ], [ %48, %ifend19 ], [ null, %TypeChecker_error.exit71 ], [ null, %2 ], [ null, %ifend4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, 19
  br i1 %12, label %if.entry.i, label %is_object.exit

if.entry.i:                                       ; preds = %ifend, %if.entry.i
  %.tr5.i = phi ptr [ %13, %if.entry.i ], [ %10, %ifend ]
  %memberidx1.i1 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %13 = load ptr, ptr %memberidx1.i1, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 19
  br i1 %15, label %if.entry.i, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i, %ifend
  %.lcssa.i = phi i64 [ %11, %ifend ], [ %14, %if.entry.i ]
  %16 = icmp eq i64 %.lcssa.i, 11
  br i1 %16, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %is_object.exit
  %17 = tail call fastcc ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %5, ptr %1)
  br label %common.ret

ifend4:                                           ; preds = %is_object.exit
  %18 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %18, align 4
  %memberidx.i42 = getelementptr inbounds %IntType, ptr %18, i64 0, i32 1
  store i1 false, ptr %memberidx.i42, align 1
  %memberidx5 = getelementptr inbounds %ExpressionIndexNode, ptr %1, i64 0, i32 4
  %19 = load ptr, ptr %memberidx5, align 8
  %20 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %18, ptr %19)
  %21 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i44 = getelementptr inbounds %Compiler, ptr %21, i64 0, i32 6
  %22 = load ptr, ptr %memberidx1.i44, align 8
  %memberidx2.i45 = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx2.i45, align 4
  %24 = icmp sgt i64 %23, 0
  br i1 %24, label %common.ret, label %ifend8

ifend8:                                           ; preds = %ifend4
  %memberidx9 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 3
  %25 = load ptr, ptr %memberidx9, align 8
  %26 = load i64, ptr %25, align 4
  %27 = add i64 %26, -1
  %28 = icmp ult i64 %27, 7
  br i1 %28, label %ifend12, label %if.entry10

if.entry10:                                       ; preds = %ifend8
  %29 = tail call ptr @malloc(i32 34)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(34) %29, ptr noundef nonnull align 8 dereferenceable(34) @195, i64 34, i1 false)
  %30 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 34, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 34, ptr %memberidx2.i.i, align 4
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i47 = getelementptr inbounds %Compiler, ptr %33, i64 0, i32 6
  %34 = load ptr, ptr %memberidx1.i47, align 8
  %35 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %35, align 4
  %memberidx1.i.i48 = getelementptr inbounds %FloError, ptr %35, i64 0, i32 2
  store ptr %32, ptr %memberidx1.i.i48, align 8
  %memberidx2.i.i49 = getelementptr inbounds %FloError, ptr %35, i64 0, i32 1
  store ptr %30, ptr %memberidx2.i.i49, align 8
  %memberidx.i.i50 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %36 = load i64, ptr %memberidx.i.i50, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 3
  %37 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %36, %37
  br i1 %.not.i.i, label %if.entry10.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry10.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry10
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 1
  %.pre2 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry10
  %38 = shl nuw i64 %37, 1
  store i64 %38, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 1
  %39 = load ptr, ptr %memberidx2.i.i.i, align 8
  %40 = shl i64 %37, 4
  %41 = tail call ptr @realloc(ptr %39, i64 %40)
  store ptr %41, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i50, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry10.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %42 = phi ptr [ %.pre2, %if.entry10.TypeChecker_error.exit_crit_edge ], [ %41, %if.entry.i.i ]
  %43 = phi i64 [ %36, %if.entry10.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %44 = add nsw i64 %43, 1
  store i64 %44, ptr %memberidx.i.i50, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %42, i64 %43
  store ptr %35, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend12:                                          ; preds = %ifend8
  %45 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %45, align 4
  %46 = load ptr, ptr %memberidx1, align 8
  %47 = load i64, ptr %46, align 4
  switch i64 %47, label %else23 [
    i64 13, label %if.entry17
    i64 14, label %if.entry22
  ]

if.entry17:                                       ; preds = %ifend12
  %memberidx20 = getelementptr inbounds %PointerType, ptr %46, i64 0, i32 1
  br label %ifend19

ifend19:                                          ; preds = %if.entry22, %if.entry17
  %storemerge.in = phi ptr [ %memberidx25, %if.entry22 ], [ %memberidx20, %if.entry17 ]
  %storemerge = load ptr, ptr %storemerge.in, align 8
  %48 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %48, align 4
  %memberidx.i.i51 = getelementptr inbounds %Expression, ptr %48, i64 0, i32 2
  store i64 13, ptr %memberidx.i.i51, align 4
  %memberidx1.i.i52 = getelementptr inbounds %Expression, ptr %48, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i52, align 1
  %memberidx.i53 = getelementptr inbounds %IndexExpression, ptr %48, i64 0, i32 4
  store ptr %5, ptr %memberidx.i53, align 8
  %memberidx1.i54 = getelementptr inbounds %IndexExpression, ptr %48, i64 0, i32 5
  store ptr %20, ptr %memberidx1.i54, align 8
  %memberidx2.i55 = getelementptr inbounds %Expression, ptr %48, i64 0, i32 3
  store ptr %storemerge, ptr %memberidx2.i55, align 8
  br label %common.ret

if.entry22:                                       ; preds = %ifend12
  %memberidx25 = getelementptr inbounds %ArrayType, ptr %46, i64 0, i32 1
  br label %ifend19

else23:                                           ; preds = %ifend12
  %49 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %46)
  %50 = load ptr, ptr %49, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i64 0, i32 5
  %51 = load ptr, ptr %memberidx26, align 8
  %52 = tail call ptr %51(ptr nonnull %49)
  %53 = alloca ptr, align 8
  %54 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %53, ptr nonnull @196, ptr %52)
  %55 = load ptr, ptr %53, align 8
  %56 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %56, align 8
  %memberidx.i56 = getelementptr inbounds %string, ptr %56, i64 0, i32 1
  store ptr %55, ptr %memberidx.i56, align 8
  %memberidx1.i57 = getelementptr inbounds %string, ptr %56, i64 0, i32 2
  store i64 %54, ptr %memberidx1.i57, align 4
  %memberidx2.i58 = getelementptr inbounds %string, ptr %56, i64 0, i32 3
  store i64 %54, ptr %memberidx2.i58, align 4
  tail call void @free(ptr %52)
  %57 = load ptr, ptr %1, align 8
  %58 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i60 = getelementptr inbounds %Compiler, ptr %58, i64 0, i32 6
  %59 = load ptr, ptr %memberidx1.i60, align 8
  %60 = call ptr @malloc(i32 24)
  store i64 5, ptr %60, align 4
  %memberidx1.i.i61 = getelementptr inbounds %FloError, ptr %60, i64 0, i32 2
  store ptr %57, ptr %memberidx1.i.i61, align 8
  %memberidx2.i.i62 = getelementptr inbounds %FloError, ptr %60, i64 0, i32 1
  store ptr %56, ptr %memberidx2.i.i62, align 8
  %memberidx.i.i63 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 2
  %61 = load i64, ptr %memberidx.i.i63, align 4
  %memberidx1.i2.i64 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 3
  %62 = load i64, ptr %memberidx1.i2.i64, align 4
  %.not.i.i65 = icmp slt i64 %61, %62
  br i1 %.not.i.i65, label %else23.TypeChecker_error.exit71_crit_edge, label %if.entry.i.i68

else23.TypeChecker_error.exit71_crit_edge:        ; preds = %else23
  %memberidx4.i.i69.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 1
  %.pre4 = load ptr, ptr %memberidx4.i.i69.phi.trans.insert, align 8
  br label %TypeChecker_error.exit71

if.entry.i.i68:                                   ; preds = %else23
  %63 = shl nuw i64 %62, 1
  store i64 %63, ptr %memberidx1.i2.i64, align 4
  %memberidx2.i.i.i67 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 1
  %64 = load ptr, ptr %memberidx2.i.i.i67, align 8
  %65 = shl i64 %62, 4
  %66 = call ptr @realloc(ptr %64, i64 %65)
  store ptr %66, ptr %memberidx2.i.i.i67, align 8
  %.pre3 = load i64, ptr %memberidx.i.i63, align 4
  br label %TypeChecker_error.exit71

TypeChecker_error.exit71:                         ; preds = %else23.TypeChecker_error.exit71_crit_edge, %if.entry.i.i68
  %67 = phi ptr [ %.pre4, %else23.TypeChecker_error.exit71_crit_edge ], [ %66, %if.entry.i.i68 ]
  %68 = phi i64 [ %61, %else23.TypeChecker_error.exit71_crit_edge ], [ %.pre3, %if.entry.i.i68 ]
  %69 = add nsw i64 %68, 1
  store i64 %69, ptr %memberidx.i.i63, align 4
  %ptridx.i.i70 = getelementptr inbounds ptr, ptr %67, i64 %68
  store ptr %60, ptr %ptridx.i.i70, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_block(ptr %0, ptr nocapture readonly %1, ptr %2) unnamed_addr {
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %4 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %4, i64 0, i32 6
  %5 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx2.i, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %common.ret, label %ifend

common.ret.loopexit:                              ; preds = %for.body
  store i1 false, ptr %15, align 1
  br label %common.ret

common.ret:                                       ; preds = %common.ret.loopexit, %3, %for.end
  %common.ret.op = phi ptr [ %8, %for.end ], [ null, %3 ], [ null, %common.ret.loopexit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %8 = tail call ptr @malloc(i32 11)
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Statement_, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %Array_Statement_, ptr %9, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %9, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Statement_, ptr %9, i64 0, i32 1
  %10 = tail call ptr @malloc(i32 64)
  store ptr %10, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %9, ptr %8, align 8
  %memberidx3.i = getelementptr inbounds %Block, ptr %8, i64 0, i32 1
  store i1 false, ptr %memberidx3.i, align 1
  %memberidx4.i = getelementptr inbounds %Block, ptr %8, i64 0, i32 2
  store i1 false, ptr %memberidx4.i, align 1
  %memberidx5.i = getelementptr inbounds %Block, ptr %8, i64 0, i32 3
  store i1 false, ptr %memberidx5.i, align 1
  %.not = icmp eq ptr %2, null
  br i1 %.not, label %false_block, label %end

false_block:                                      ; preds = %ifend
  %11 = tail call fastcc ptr @TypeChecker_create_scope(ptr nonnull %0)
  %memberidx.i52 = getelementptr inbounds %Scope, ptr %11, i64 0, i32 5
  %memberidx1.i53 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %12 = load ptr, ptr %memberidx1.i53, align 8
  store ptr %12, ptr %memberidx.i52, align 8
  br label %end

end:                                              ; preds = %ifend, %false_block
  %ternary = phi ptr [ %11, %false_block ], [ %2, %ifend ]
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %13 = load ptr, ptr %ternary, align 8
  store ptr %13, ptr %memberidx, align 8
  %memberidx2 = getelementptr inbounds %BlockNode, ptr %1, i64 0, i32 1
  %14 = load ptr, ptr %memberidx2, align 8
  %15 = tail call ptr @malloc(i32 25)
  %memberidx.i54 = getelementptr inbounds %Array_StatementNode_, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i54, align 8
  %memberidx1.i55 = getelementptr inbounds %Array_StatementNode_, ptr %14, i64 0, i32 2
  %17 = load i64, ptr %memberidx1.i55, align 4
  store i1 false, ptr %15, align 1
  %memberidx1.i.i56 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %15, i64 0, i32 1
  %memberidx2.i.i57 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %15, i64 0, i32 3
  store ptr %16, ptr %memberidx2.i.i57, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %15, i64 0, i32 2
  store i64 %17, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i56, align 4
  %18 = icmp slt i64 %17, 1
  br i1 %18, label %for.end, label %for.body

for.body:                                         ; preds = %end, %ifend37
  %19 = phi i64 [ %41, %ifend37 ], [ 1, %end ]
  %storemerge85.in = phi ptr [ %ptridx.i72, %ifend37 ], [ %16, %end ]
  %storemerge85 = load ptr, ptr %storemerge85.in, align 8
  %20 = tail call fastcc ptr @TypeChecker_check_statement(ptr nonnull %0, ptr %storemerge85)
  %21 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i62 = getelementptr inbounds %Compiler, ptr %21, i64 0, i32 6
  %22 = load ptr, ptr %memberidx1.i62, align 8
  %memberidx2.i63 = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx2.i63, align 4
  %24 = icmp sgt i64 %23, 0
  br i1 %24, label %common.ret.loopexit, label %ifend6

for.end.sink.split:                               ; preds = %if.entry18, %Array_Statement____sl__.exit, %if.entry30, %if.entry35
  %.sink.ph = phi ptr [ %memberidx4.i, %if.entry30 ], [ %memberidx5.i, %if.entry35 ], [ %memberidx3.i, %Array_Statement____sl__.exit ], [ %memberidx3.i, %if.entry18 ]
  store i1 false, ptr %15, align 1
  br label %for.end

for.end:                                          ; preds = %ifend37, %for.end.sink.split, %end
  %.sink = phi ptr [ %15, %end ], [ %.sink.ph, %for.end.sink.split ], [ %15, %ifend37 ]
  store i1 true, ptr %.sink, align 1
  tail call void @free(ptr nonnull %15)
  %memberidx40 = getelementptr inbounds %Scope, ptr %ternary, i64 0, i32 5
  %25 = load ptr, ptr %memberidx40, align 8
  store ptr %25, ptr %memberidx, align 8
  tail call fastcc void @Scope___del__(ptr nonnull %ternary)
  tail call void @free(ptr nonnull %ternary)
  br label %common.ret

ifend6:                                           ; preds = %for.body
  %26 = load i64, ptr %memberidx.i.i, align 4
  %27 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i = icmp slt i64 %26, %27
  br i1 %.not.i, label %ifend6.Array_Statement____sl__.exit_crit_edge, label %if.entry.i

ifend6.Array_Statement____sl__.exit_crit_edge:    ; preds = %ifend6
  %.pre91 = load ptr, ptr %memberidx2.i.i, align 8
  br label %Array_Statement____sl__.exit

if.entry.i:                                       ; preds = %ifend6
  %28 = shl nuw i64 %27, 1
  store i64 %28, ptr %memberidx1.i.i, align 4
  %29 = load ptr, ptr %memberidx2.i.i, align 8
  %30 = shl i64 %27, 4
  %31 = tail call ptr @realloc(ptr %29, i64 %30)
  store ptr %31, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %Array_Statement____sl__.exit

Array_Statement____sl__.exit:                     ; preds = %ifend6.Array_Statement____sl__.exit_crit_edge, %if.entry.i
  %32 = phi ptr [ %.pre91, %ifend6.Array_Statement____sl__.exit_crit_edge ], [ %31, %if.entry.i ]
  %33 = phi i64 [ %26, %ifend6.Array_Statement____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx.i.i, align 4
  %ptridx.i69 = getelementptr inbounds ptr, ptr %32, i64 %33
  store ptr %20, ptr %ptridx.i69, align 8
  %35 = load i64, ptr %20, align 4
  switch i64 %35, label %ifend37 [
    i64 7, label %for.end.sink.split
    i64 0, label %if.entry14
    i64 5, label %if.entry30
    i64 6, label %if.entry35
  ]

if.entry14:                                       ; preds = %Array_Statement____sl__.exit
  %memberidx17 = getelementptr inbounds %IfStatement, ptr %20, i64 0, i32 3
  %36 = load ptr, ptr %memberidx17, align 8
  %.not50 = icmp eq ptr %36, null
  br i1 %.not50, label %ifend37, label %if.entry18

if.entry18:                                       ; preds = %if.entry14
  %memberidx21 = getelementptr inbounds %IfStatement, ptr %20, i64 0, i32 2
  %37 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Block, ptr %37, i64 0, i32 1
  %38 = load i1, ptr %memberidx22, align 1
  %memberidx24 = getelementptr inbounds %Block, ptr %36, i64 0, i32 1
  %39 = load i1, ptr %memberidx24, align 1
  %40 = and i1 %38, %39
  br i1 %40, label %for.end.sink.split, label %ifend37

if.entry30:                                       ; preds = %Array_Statement____sl__.exit
  br label %for.end.sink.split

if.entry35:                                       ; preds = %Array_Statement____sl__.exit
  br label %for.end.sink.split

ifend37:                                          ; preds = %Array_Statement____sl__.exit, %if.entry14, %if.entry18
  %41 = add nuw nsw i64 %19, 1
  store i64 %41, ptr %memberidx1.i.i56, align 4
  %ptridx.i72 = getelementptr inbounds ptr, ptr %16, i64 %19
  %.not92 = icmp slt i64 %19, %17
  br i1 %.not92, label %for.body, label %for.end
}

define internal fastcc void @Map_string_Generic__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_Generic_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_Generic____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_Generic____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_Generic__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_Generic__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_Generic_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_Generic__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

define internal fastcc void @TypeChecker_check_class_body(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %4)
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend55, %ifend13, %ifend10, %2, %TypeChecker_error.exit173, %for.end42, %TypeChecker_error.exit
  ret void

ifend:                                            ; preds = %2
  %8 = load ptr, ptr %0, align 8
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i176, %ifend
  %9 = phi i64 [ %.pr, %if.entry.i176 ], [ %6, %ifend ]
  %.tr11.i = phi ptr [ %10, %if.entry.i176 ], [ %5, %ifend ]
  switch i64 %9, label %get_class_from_type.exit [
    i64 19, label %if.entry.i176
    i64 11, label %if.entry3.i
  ]

if.entry.i176:                                    ; preds = %tailrecurse.i
  %memberidx1.i175 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  %10 = load ptr, ptr %memberidx1.i175, align 8
  %.pr = load i64, ptr %10, align 4
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %11 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i177 = getelementptr inbounds %Program, ptr %8, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i.i177, align 8
  %13 = load i64, ptr %11, align 4
  %memberidx.i.i.i178 = getelementptr inbounds %Array_Module_, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i.i.i178, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i179 = getelementptr inbounds %Module, ptr %15, i64 0, i32 4
  %16 = load ptr, ptr %memberidx2.i.i179, align 8
  %memberidx3.i.i180 = getelementptr inbounds %TypeId, ptr %11, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i.i180, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i = phi ptr [ %19, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = load ptr, ptr %common.ret.op.i, align 8
  store ptr %21, ptr %memberidx4, align 8
  %memberidx7 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 2
  %22 = load ptr, ptr %memberidx7, align 8
  %.not = icmp eq ptr %22, null
  br i1 %.not, label %ifend10, label %if.entry8

if.entry8:                                        ; preds = %get_class_from_type.exit
  tail call fastcc void @TypeChecker_add_inherited_props_to_class(ptr nonnull %0, ptr nonnull %common.ret.op.i, ptr nonnull %1)
  br label %ifend10

ifend10:                                          ; preds = %get_class_from_type.exit, %if.entry8
  tail call fastcc void @TypeChecker_declare_class_fields(ptr nonnull %0, ptr nonnull %common.ret.op.i, ptr nonnull %1)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %23 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %23, i64 0, i32 6
  %24 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i, align 4
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %common.ret, label %ifend13

ifend13:                                          ; preds = %ifend10
  tail call fastcc void @TypeChecker_declare_class_methods(ptr nonnull %0, ptr nonnull %common.ret.op.i, ptr nonnull %1)
  %27 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i111 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i111, align 8
  %memberidx2.i112 = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx2.i112, align 4
  %30 = icmp sgt i64 %29, 0
  br i1 %30, label %common.ret, label %for.entry

for.entry:                                        ; preds = %ifend13
  %memberidx17 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 6
  %31 = load ptr, ptr %memberidx17, align 8
  %32 = tail call ptr @malloc(i32 25)
  %33 = load ptr, ptr %31, align 8
  %memberidx1.i113 = getelementptr inbounds %Map_string_PropId_, ptr %31, i64 0, i32 1
  %34 = load i64, ptr %memberidx1.i113, align 4
  %memberidx2.i114 = getelementptr inbounds %Map_string_PropId_, ptr %31, i64 0, i32 2
  %35 = load i64, ptr %memberidx2.i114, align 4
  store i1 false, ptr %32, align 1
  %memberidx1.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %32, i64 0, i32 1
  store ptr %33, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %32, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %32, i64 0, i32 3
  store i64 %35, ptr %memberidx3.i.i, align 4
  %36 = add nsw i64 %34, -1
  store i64 %36, ptr %memberidx2.i.i, align 4
  %37 = icmp sgt i64 %34, 0
  br i1 %37, label %while.entry.i, label %MapIterator_string_PropId__next.exit

while.entry.i:                                    ; preds = %for.entry, %ifend.i
  %38 = phi i64 [ %41, %ifend.i ], [ %36, %for.entry ]
  %39 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %33, %for.entry ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %39, i64 1
  %40 = load ptr, ptr %39, align 8
  %.not.i = icmp eq ptr %40, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit.loopexit

ifend.i:                                          ; preds = %while.entry.i
  %41 = add nsw i64 %38, -1
  store i64 %41, ptr %memberidx2.i.i, align 4
  %42 = icmp sgt i64 %38, 0
  br i1 %42, label %while.entry.i, label %MapIterator_string_PropId__next.exit.loopexit

MapIterator_string_PropId__next.exit.loopexit:    ; preds = %ifend.i, %while.entry.i
  %43 = phi i64 [ %41, %ifend.i ], [ %38, %while.entry.i ]
  store ptr %incdec.ptr.i, ptr %memberidx1.i.i, align 8
  br label %MapIterator_string_PropId__next.exit

MapIterator_string_PropId__next.exit:             ; preds = %MapIterator_string_PropId__next.exit.loopexit, %for.entry
  %44 = phi i64 [ %43, %MapIterator_string_PropId__next.exit.loopexit ], [ %36, %for.entry ]
  %.pn.in.promoted = phi ptr [ %incdec.ptr.i, %MapIterator_string_PropId__next.exit.loopexit ], [ %33, %for.entry ]
  %storemerge182189 = add nsw i64 %35, -1
  %storemerge181190 = icmp slt i64 %35, 1
  store i1 %storemerge181190, ptr %32, align 1
  br i1 %storemerge181190, label %for.end.loopexit, label %for.body

for.body:                                         ; preds = %MapIterator_string_PropId__next.exit, %MapIterator_string_PropId__next.exit128
  %45 = phi i64 [ %74, %MapIterator_string_PropId__next.exit128 ], [ %44, %MapIterator_string_PropId__next.exit ]
  %.pn193 = phi ptr [ %.pn192, %MapIterator_string_PropId__next.exit128 ], [ %.pn.in.promoted, %MapIterator_string_PropId__next.exit ]
  %storemerge182191 = phi i64 [ %storemerge182, %MapIterator_string_PropId__next.exit128 ], [ %storemerge182189, %MapIterator_string_PropId__next.exit ]
  %storemerge.in = getelementptr inbounds ptr, ptr %.pn193, i64 -1
  %storemerge = load ptr, ptr %storemerge.in, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_PropId_, ptr %storemerge, i64 0, i32 1
  %46 = load ptr, ptr %memberidx19, align 8
  %47 = load i64, ptr %46, align 4
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %if.entry22, label %ifend24

for.cond.for.end.loopexit_crit_edge:              ; preds = %MapIterator_string_PropId__next.exit128
  store ptr %.pn192, ptr %memberidx1.i.i, align 8
  br label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.cond.for.end.loopexit_crit_edge, %MapIterator_string_PropId__next.exit
  %storemerge182.lcssa = phi i64 [ -1, %for.cond.for.end.loopexit_crit_edge ], [ %storemerge182189, %MapIterator_string_PropId__next.exit ]
  store i64 %storemerge182.lcssa, ptr %memberidx3.i.i, align 4
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %ifend33
  tail call void @free(ptr nonnull %32)
  %memberidx43 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 5
  %49 = load ptr, ptr %memberidx43, align 8
  %memberidx44185 = getelementptr inbounds %Array_ClassMethod_, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx44185, align 4
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %for.body40.lr.ph, label %for.end42

for.body40.lr.ph:                                 ; preds = %for.end
  %memberidx45 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 4
  %memberidx49 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 4
  %memberidx50 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %.pre202 = load ptr, ptr %memberidx45, align 8
  br label %for.body40

if.entry22:                                       ; preds = %for.body
  %52 = load ptr, ptr %storemerge, align 8
  %53 = load ptr, ptr %0, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %46, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i.i.i, align 8
  %56 = load i64, ptr %54, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %55, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %58, i64 0, i32 4
  %59 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %54, i64 0, i32 2
  %60 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %59, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i117 = getelementptr inbounds %Class, ptr %62, i64 0, i32 5
  %63 = load ptr, ptr %memberidx.i117, align 8
  %memberidx1.i118 = getelementptr inbounds %PropId, ptr %46, i64 0, i32 2
  %64 = load i64, ptr %memberidx1.i118, align 4
  %memberidx.i3.i = getelementptr inbounds %Array_ClassMethod_, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i3.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %65, i64 %64
  %66 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx26 = getelementptr inbounds %ClassMethod, ptr %66, i64 0, i32 7
  %67 = load i1, ptr %memberidx26, align 1
  br i1 %67, label %if.entry27, label %ifend24

ifend24:                                          ; preds = %if.entry22, %for.body
  %68 = add nsw i64 %45, -1
  store i64 %68, ptr %memberidx2.i.i, align 4
  %69 = icmp sgt i64 %45, 0
  br i1 %69, label %while.entry.i123, label %MapIterator_string_PropId__next.exit128

while.entry.i123:                                 ; preds = %ifend24, %ifend.i127
  %70 = phi i64 [ %73, %ifend.i127 ], [ %68, %ifend24 ]
  %71 = phi ptr [ %incdec.ptr.i121, %ifend.i127 ], [ %.pn193, %ifend24 ]
  %incdec.ptr.i121 = getelementptr inbounds ptr, ptr %71, i64 1
  %72 = load ptr, ptr %71, align 8
  %.not.i122 = icmp eq ptr %72, null
  br i1 %.not.i122, label %ifend.i127, label %MapIterator_string_PropId__next.exit128

ifend.i127:                                       ; preds = %while.entry.i123
  %73 = add nsw i64 %70, -1
  store i64 %73, ptr %memberidx2.i.i, align 4
  %.not212 = icmp eq i64 %70, 0
  br i1 %.not212, label %MapIterator_string_PropId__next.exit128, label %while.entry.i123

MapIterator_string_PropId__next.exit128:          ; preds = %while.entry.i123, %ifend.i127, %ifend24
  %74 = phi i64 [ %68, %ifend24 ], [ %70, %while.entry.i123 ], [ -1, %ifend.i127 ]
  %.pn192 = phi ptr [ %.pn193, %ifend24 ], [ %incdec.ptr.i121, %ifend.i127 ], [ %incdec.ptr.i121, %while.entry.i123 ]
  %storemerge182 = add nsw i64 %storemerge182191, -1
  %storemerge181 = icmp slt i64 %storemerge182191, 1
  store i1 %storemerge181, ptr %32, align 1
  br i1 %storemerge181, label %for.cond.for.end.loopexit_crit_edge, label %for.body

if.entry27:                                       ; preds = %if.entry22
  store ptr %.pn193, ptr %memberidx1.i.i, align 8
  store i64 %storemerge182191, ptr %memberidx3.i.i, align 4
  %memberidx30 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 3
  %75 = load ptr, ptr %memberidx30, align 8
  %.not109 = icmp eq ptr %75, null
  br i1 %.not109, label %ifend33, label %if.entry31

if.entry31:                                       ; preds = %if.entry27
  %76 = load ptr, ptr %52, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %76, i64 0, i32 5
  %77 = load ptr, ptr %memberidx34, align 8
  %78 = tail call ptr %77(ptr nonnull %52)
  %79 = alloca ptr, align 8
  %80 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %79, ptr nonnull @141, ptr %78)
  %81 = load ptr, ptr %79, align 8
  %82 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %82, align 8
  %memberidx.i129 = getelementptr inbounds %string, ptr %82, i64 0, i32 1
  store ptr %81, ptr %memberidx.i129, align 8
  %memberidx1.i130 = getelementptr inbounds %string, ptr %82, i64 0, i32 2
  store i64 %80, ptr %memberidx1.i130, align 4
  %memberidx2.i131 = getelementptr inbounds %string, ptr %82, i64 0, i32 3
  store i64 %80, ptr %memberidx2.i131, align 4
  tail call void @free(ptr %78)
  %83 = load ptr, ptr %1, align 8
  %memberidx36 = getelementptr inbounds %Token, ptr %83, i64 0, i32 1
  %84 = load ptr, ptr %memberidx36, align 8
  %85 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i133 = getelementptr inbounds %Compiler, ptr %85, i64 0, i32 6
  %86 = load ptr, ptr %memberidx1.i133, align 8
  %87 = call ptr @malloc(i32 24)
  store i64 4, ptr %87, align 4
  %memberidx1.i.i134 = getelementptr inbounds %FloError, ptr %87, i64 0, i32 2
  store ptr %84, ptr %memberidx1.i.i134, align 8
  %memberidx2.i.i135 = getelementptr inbounds %FloError, ptr %87, i64 0, i32 1
  store ptr %82, ptr %memberidx2.i.i135, align 8
  %memberidx.i.i136 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 2
  %88 = load i64, ptr %memberidx.i.i136, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 3
  %89 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %88, %89
  br i1 %.not.i.i, label %if.entry31.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry31.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry31
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 1
  %.pre201 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry31
  %90 = shl nuw i64 %89, 1
  store i64 %90, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i138 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 1
  %91 = load ptr, ptr %memberidx2.i.i.i138, align 8
  %92 = shl i64 %89, 4
  %93 = call ptr @realloc(ptr %91, i64 %92)
  store ptr %93, ptr %memberidx2.i.i.i138, align 8
  %.pre = load i64, ptr %memberidx.i.i136, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry31.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %94 = phi ptr [ %.pre201, %if.entry31.TypeChecker_error.exit_crit_edge ], [ %93, %if.entry.i.i ]
  %95 = phi i64 [ %88, %if.entry31.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %96 = add nsw i64 %95, 1
  store i64 %96, ptr %memberidx.i.i136, align 4
  %ptridx.i.i139 = getelementptr inbounds ptr, ptr %94, i64 %95
  store ptr %87, ptr %ptridx.i.i139, align 8
  br label %common.ret

ifend33:                                          ; preds = %if.entry27
  %memberidx37 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 10
  store i1 true, ptr %memberidx37, align 1
  br label %for.end

for.body40:                                       ; preds = %for.body40.lr.ph, %for.incr41
  %97 = phi ptr [ %.pre202, %for.body40.lr.ph ], [ %107, %for.incr41 ]
  %98 = phi ptr [ %49, %for.body40.lr.ph ], [ %109, %for.incr41 ]
  %storemerge108186 = phi i64 [ 0, %for.body40.lr.ph ], [ %108, %for.incr41 ]
  %memberidx.i140 = getelementptr inbounds %Array_ClassMethod_, ptr %98, i64 0, i32 1
  %99 = load ptr, ptr %memberidx.i140, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %99, i64 %storemerge108186
  %100 = load ptr, ptr %ptridx.i, align 8
  %101 = load ptr, ptr %100, align 8
  store ptr %101, ptr %memberidx45, align 8
  %102 = load ptr, ptr %memberidx49, align 8
  %memberidx.i141 = getelementptr inbounds %Array_MethodNode_, ptr %102, i64 0, i32 1
  %103 = load ptr, ptr %memberidx.i141, align 8
  %ptridx.i142 = getelementptr inbounds ptr, ptr %103, i64 %storemerge108186
  %104 = load ptr, ptr %ptridx.i142, align 8
  %memberidx51 = getelementptr inbounds %ClassMethod, ptr %100, i64 0, i32 8
  %105 = load ptr, ptr %memberidx51, align 8
  store ptr %105, ptr %memberidx50, align 8
  %memberidx52 = getelementptr inbounds %ClassMethod, ptr %100, i64 0, i32 7
  %106 = load i1, ptr %memberidx52, align 1
  br i1 %106, label %for.incr41, label %ifend55

for.incr41:                                       ; preds = %for.body40, %ifend65
  %107 = phi ptr [ %101, %for.body40 ], [ %97, %ifend65 ]
  %108 = add nuw nsw i64 %storemerge108186, 1
  %109 = load ptr, ptr %memberidx43, align 8
  %memberidx44 = getelementptr inbounds %Array_ClassMethod_, ptr %109, i64 0, i32 2
  %110 = load i64, ptr %memberidx44, align 4
  %111 = icmp slt i64 %108, %110
  br i1 %111, label %for.body40, label %for.end42

for.end42:                                        ; preds = %for.incr41, %for.end
  store ptr %20, ptr %memberidx4, align 8
  br label %common.ret

ifend55:                                          ; preds = %for.body40
  %memberidx56 = getelementptr inbounds %ClassMethod, ptr %100, i64 0, i32 5
  %memberidx57 = getelementptr inbounds %MethodNode, ptr %104, i64 0, i32 2
  %112 = load ptr, ptr %memberidx57, align 8
  %113 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %112, ptr null)
  store ptr %113, ptr %memberidx56, align 8
  %114 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i144 = getelementptr inbounds %Compiler, ptr %114, i64 0, i32 6
  %115 = load ptr, ptr %memberidx1.i144, align 8
  %memberidx2.i145 = getelementptr inbounds %Array_FloError_, ptr %115, i64 0, i32 2
  %116 = load i64, ptr %memberidx2.i145, align 4
  %117 = icmp sgt i64 %116, 0
  br i1 %117, label %common.ret, label %ifend60

ifend60:                                          ; preds = %ifend55
  %memberidx62 = getelementptr inbounds %Block, ptr %113, i64 0, i32 1
  %118 = load i1, ptr %memberidx62, align 1
  br i1 %118, label %ifend65, label %if.entry63

if.entry63:                                       ; preds = %ifend60
  %memberidx66 = getelementptr inbounds %ClassMethod, ptr %100, i64 0, i32 4
  %119 = load ptr, ptr %memberidx66, align 8
  %memberidx67 = getelementptr inbounds %FunctionType, ptr %119, i64 0, i32 2
  %120 = load ptr, ptr %memberidx67, align 8
  %121 = load i64, ptr %120, align 4
  %122 = icmp eq i64 %121, 10
  br i1 %122, label %if.entry69, label %else70

ifend65:                                          ; preds = %ifend60, %Array_Statement____sl__.exit
  store ptr %97, ptr %memberidx45, align 8
  %123 = load ptr, ptr %0, align 8
  %124 = load ptr, ptr %memberidx51, align 8
  %memberidx.i146 = getelementptr inbounds %Program, ptr %123, i64 0, i32 1
  %125 = load ptr, ptr %memberidx.i146, align 8
  %126 = load i64, ptr %124, align 4
  %memberidx.i.i147 = getelementptr inbounds %Array_Module_, ptr %125, i64 0, i32 1
  %127 = load ptr, ptr %memberidx.i.i147, align 8
  %ptridx.i.i148 = getelementptr inbounds ptr, ptr %127, i64 %126
  %128 = load ptr, ptr %ptridx.i.i148, align 8
  %memberidx2.i149 = getelementptr inbounds %Module, ptr %128, i64 0, i32 8
  %129 = load ptr, ptr %memberidx2.i149, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %124, i64 0, i32 1
  %130 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %129, i64 0, i32 1
  %131 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %131, i64 %130
  %132 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx80 = getelementptr inbounds %Scope, ptr %132, i64 0, i32 5
  %133 = load ptr, ptr %memberidx80, align 8
  store ptr %133, ptr %memberidx50, align 8
  br label %for.incr41

if.entry69:                                       ; preds = %if.entry63
  %134 = load ptr, ptr %113, align 8
  %135 = tail call ptr @malloc(i32 16)
  store i64 7, ptr %135, align 4
  %memberidx.i150 = getelementptr inbounds %ReturnStatement, ptr %135, i64 0, i32 1
  store ptr null, ptr %memberidx.i150, align 8
  %memberidx.i151 = getelementptr inbounds %Array_Statement_, ptr %134, i64 0, i32 2
  %136 = load i64, ptr %memberidx.i151, align 4
  %memberidx1.i152 = getelementptr inbounds %Array_Statement_, ptr %134, i64 0, i32 3
  %137 = load i64, ptr %memberidx1.i152, align 4
  %.not.i153 = icmp slt i64 %136, %137
  br i1 %.not.i153, label %if.entry69.Array_Statement____sl__.exit_crit_edge, label %if.entry.i

if.entry69.Array_Statement____sl__.exit_crit_edge: ; preds = %if.entry69
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Statement_, ptr %134, i64 0, i32 1
  %.pre206 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Statement____sl__.exit

if.entry.i:                                       ; preds = %if.entry69
  %138 = shl nuw i64 %137, 1
  store i64 %138, ptr %memberidx1.i152, align 4
  %memberidx2.i.i155 = getelementptr inbounds %Array_Statement_, ptr %134, i64 0, i32 1
  %139 = load ptr, ptr %memberidx2.i.i155, align 8
  %140 = shl i64 %137, 4
  %141 = tail call ptr @realloc(ptr %139, i64 %140)
  store ptr %141, ptr %memberidx2.i.i155, align 8
  %.pre205 = load i64, ptr %memberidx.i151, align 4
  br label %Array_Statement____sl__.exit

Array_Statement____sl__.exit:                     ; preds = %if.entry69.Array_Statement____sl__.exit_crit_edge, %if.entry.i
  %142 = phi ptr [ %.pre206, %if.entry69.Array_Statement____sl__.exit_crit_edge ], [ %141, %if.entry.i ]
  %143 = phi i64 [ %136, %if.entry69.Array_Statement____sl__.exit_crit_edge ], [ %.pre205, %if.entry.i ]
  %144 = add nsw i64 %143, 1
  store i64 %144, ptr %memberidx.i151, align 4
  %ptridx.i156 = getelementptr inbounds ptr, ptr %142, i64 %143
  store ptr %135, ptr %ptridx.i156, align 8
  br label %ifend65

else70:                                           ; preds = %if.entry63
  %145 = tail call ptr @malloc(i32 38)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(38) %145, ptr noundef nonnull align 8 dereferenceable(38) @142, i64 38, i1 false)
  %146 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %146, align 8
  %memberidx.i.i158 = getelementptr inbounds %string, ptr %146, i64 0, i32 1
  store ptr %145, ptr %memberidx.i.i158, align 8
  %memberidx1.i.i159 = getelementptr inbounds %string, ptr %146, i64 0, i32 2
  store i64 38, ptr %memberidx1.i.i159, align 4
  %memberidx2.i.i160 = getelementptr inbounds %string, ptr %146, i64 0, i32 3
  store i64 38, ptr %memberidx2.i.i160, align 4
  %memberidx74 = getelementptr inbounds %MethodNode, ptr %104, i64 0, i32 4
  %147 = load ptr, ptr %memberidx74, align 8
  %148 = load ptr, ptr %147, align 8
  %149 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i162 = getelementptr inbounds %Compiler, ptr %149, i64 0, i32 6
  %150 = load ptr, ptr %memberidx1.i162, align 8
  %151 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %151, align 4
  %memberidx1.i.i163 = getelementptr inbounds %FloError, ptr %151, i64 0, i32 2
  store ptr %148, ptr %memberidx1.i.i163, align 8
  %memberidx2.i.i164 = getelementptr inbounds %FloError, ptr %151, i64 0, i32 1
  store ptr %146, ptr %memberidx2.i.i164, align 8
  %memberidx.i.i165 = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 2
  %152 = load i64, ptr %memberidx.i.i165, align 4
  %memberidx1.i2.i166 = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 3
  %153 = load i64, ptr %memberidx1.i2.i166, align 4
  %.not.i.i167 = icmp slt i64 %152, %153
  br i1 %.not.i.i167, label %else70.TypeChecker_error.exit173_crit_edge, label %if.entry.i.i170

else70.TypeChecker_error.exit173_crit_edge:       ; preds = %else70
  %memberidx4.i.i171.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 1
  %.pre204 = load ptr, ptr %memberidx4.i.i171.phi.trans.insert, align 8
  br label %TypeChecker_error.exit173

if.entry.i.i170:                                  ; preds = %else70
  %154 = shl nuw i64 %153, 1
  store i64 %154, ptr %memberidx1.i2.i166, align 4
  %memberidx2.i.i.i169 = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 1
  %155 = load ptr, ptr %memberidx2.i.i.i169, align 8
  %156 = shl i64 %153, 4
  %157 = tail call ptr @realloc(ptr %155, i64 %156)
  store ptr %157, ptr %memberidx2.i.i.i169, align 8
  %.pre203 = load i64, ptr %memberidx.i.i165, align 4
  br label %TypeChecker_error.exit173

TypeChecker_error.exit173:                        ; preds = %else70.TypeChecker_error.exit173_crit_edge, %if.entry.i.i170
  %158 = phi ptr [ %.pre204, %else70.TypeChecker_error.exit173_crit_edge ], [ %157, %if.entry.i.i170 ]
  %159 = phi i64 [ %152, %else70.TypeChecker_error.exit173_crit_edge ], [ %.pre203, %if.entry.i.i170 ]
  %160 = add nsw i64 %159, 1
  store i64 %160, ptr %memberidx.i.i165, align 4
  %ptridx.i.i172 = getelementptr inbounds ptr, ptr %158, i64 %159
  store ptr %151, ptr %ptridx.i.i172, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %1, ptr %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = icmp eq ptr %2, null
  %8 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 7
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = tail call ptr @malloc(i32 1)
  store i8 64, ptr %10, align 8
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i, align 4
  %12 = tail call i1 %9(ptr nonnull %1, ptr nonnull %11)
  %13 = or i1 %7, %12
  br i1 %13, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i, align 4
  %15 = load ptr, ptr %0, align 8
  %memberidx1.i.i57 = getelementptr inbounds %Program, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx1.i.i57, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %16, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %17, i64 %14
  %18 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx3 = getelementptr inbounds %Module, ptr %18, i64 0, i32 1
  %19 = load ptr, ptr %memberidx3, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx.i58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %20, i64 0, i32 5
  %21 = load ptr, ptr %memberidx.i58, align 8
  %22 = tail call ptr %21(ptr nonnull %19)
  %23 = tail call ptr @dirname(ptr %22)
  %24 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %23)
  %25 = trunc i64 %24 to i32
  %26 = tail call ptr @malloc(i32 %25)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %26, ptr align 8 %23, i64 %24, i1 false)
  %27 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i.i59 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i.i59, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 %24, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 3
  store i64 %24, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %28 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %29 = tail call ptr %28(ptr nonnull %27)
  %30 = load ptr, ptr %1, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i64 0, i32 5
  %31 = load ptr, ptr %memberidx1.i, align 8
  %32 = tail call ptr %31(ptr nonnull %1)
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @24, ptr %29, ptr %32)
  %34 = load ptr, ptr %4, align 8
  %35 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i61 = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i61, align 8
  %memberidx1.i.i62 = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i.i62, align 4
  %memberidx2.i.i63 = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i.i63, align 4
  call void @free(ptr %29)
  call void @free(ptr %32)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %filepath.0 = phi ptr [ %35, %if.entry ], [ %1, %3 ]
  %36 = load ptr, ptr %memberidx, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx5, align 8
  %39 = call ptr %38(ptr nonnull %36, ptr nonnull %filepath.0)
  %40 = load i64, ptr %39, align 4
  %41 = load ptr, ptr %0, align 8
  %memberidx8 = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %42 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Module_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx9, align 4
  %44 = icmp slt i64 %40, %43
  br i1 %44, label %if.entry10, label %ifend12

common.ret:                                       ; preds = %ifend31, %ifend26, %ifend18, %ifend34, %TypeChecker_error.exit, %if.entry10
  %common.ret.op = phi ptr [ %46, %if.entry10 ], [ null, %TypeChecker_error.exit ], [ %83, %ifend34 ], [ null, %ifend18 ], [ null, %ifend26 ], [ null, %ifend31 ]
  ret ptr %common.ret.op

if.entry10:                                       ; preds = %ifend
  %memberidx.i.i65 = getelementptr inbounds %Array_Module_, ptr %42, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i65, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %45, i64 %40
  %46 = load ptr, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %47 = load ptr, ptr %memberidx, align 8
  %48 = load ptr, ptr %47, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %48, i64 0, i32 2
  %49 = load ptr, ptr %memberidx15, align 8
  %50 = call i1 %49(ptr nonnull %47, ptr nonnull %39)
  br i1 %50, label %ifend18, label %if.entry16

if.entry16:                                       ; preds = %ifend12
  %51 = load ptr, ptr %1, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx19, align 8
  %53 = call ptr %52(ptr nonnull %1)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %54, ptr nonnull @29, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i66 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i66, align 8
  %memberidx1.i67 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i67, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i, align 4
  tail call void @free(ptr %53)
  %58 = load ptr, ptr %memberidx, align 8
  %memberidx1.i69 = getelementptr inbounds %Compiler, ptr %58, i64 0, i32 6
  %59 = load ptr, ptr %memberidx1.i69, align 8
  %60 = call ptr @malloc(i32 24)
  store i64 3, ptr %60, align 4
  %memberidx1.i.i70 = getelementptr inbounds %FloError, ptr %60, i64 0, i32 2
  store ptr %2, ptr %memberidx1.i.i70, align 8
  %memberidx2.i.i71 = getelementptr inbounds %FloError, ptr %60, i64 0, i32 1
  store ptr %57, ptr %memberidx2.i.i71, align 8
  %memberidx.i.i72 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 2
  %61 = load i64, ptr %memberidx.i.i72, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 3
  %62 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %61, %62
  br i1 %.not.i.i, label %if.entry16.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry16.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry16
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 1
  %.pre85 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry16
  %63 = shl nuw i64 %62, 1
  store i64 %63, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i74 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 1
  %64 = load ptr, ptr %memberidx2.i.i.i74, align 8
  %65 = shl i64 %62, 4
  %66 = call ptr @realloc(ptr %64, i64 %65)
  store ptr %66, ptr %memberidx2.i.i.i74, align 8
  %.pre = load i64, ptr %memberidx.i.i72, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry16.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %67 = phi ptr [ %.pre85, %if.entry16.TypeChecker_error.exit_crit_edge ], [ %66, %if.entry.i.i ]
  %68 = phi i64 [ %61, %if.entry16.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %69 = add nsw i64 %68, 1
  store i64 %69, ptr %memberidx.i.i72, align 4
  %ptridx.i.i75 = getelementptr inbounds ptr, ptr %67, i64 %68
  store ptr %60, ptr %ptridx.i.i75, align 8
  br label %common.ret

ifend18:                                          ; preds = %ifend12
  %70 = load ptr, ptr %memberidx, align 8
  %memberidx21 = getelementptr inbounds %Compiler, ptr %70, i64 0, i32 3
  %71 = load ptr, ptr %memberidx21, align 8
  %memberidx23 = getelementptr inbounds %Compiler, ptr %70, i64 0, i32 6
  %72 = load ptr, ptr %memberidx23, align 8
  %73 = call fastcc ptr @Lexer_tokenize(ptr %71, ptr %72)
  %74 = load ptr, ptr %memberidx, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i77, align 8
  %memberidx2.i78 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %76 = load i64, ptr %memberidx2.i78, align 4
  %77 = icmp sgt i64 %76, 0
  br i1 %77, label %common.ret, label %ifend26

ifend26:                                          ; preds = %ifend18
  %78 = call fastcc ptr @Parser_parse(ptr %73, ptr nonnull %75)
  %79 = load ptr, ptr %memberidx, align 8
  %memberidx1.i80 = getelementptr inbounds %Compiler, ptr %79, i64 0, i32 6
  %80 = load ptr, ptr %memberidx1.i80, align 8
  %memberidx2.i81 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx2.i81, align 4
  %82 = icmp sgt i64 %81, 0
  br i1 %82, label %common.ret, label %ifend31

ifend31:                                          ; preds = %ifend26
  %83 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %0, ptr %78, ptr nonnull %filepath.0)
  %84 = load ptr, ptr %memberidx, align 8
  %memberidx1.i83 = getelementptr inbounds %Compiler, ptr %84, i64 0, i32 6
  %85 = load ptr, ptr %memberidx1.i83, align 8
  %memberidx2.i84 = getelementptr inbounds %Array_FloError_, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx2.i84, align 4
  %87 = icmp sgt i64 %86, 0
  br i1 %87, label %common.ret, label %ifend34

ifend34:                                          ; preds = %ifend31
  %88 = load ptr, ptr %84, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %88, i64 0, i32 2
  %89 = load ptr, ptr %memberidx36, align 8
  %90 = call i1 %89(ptr nonnull %84, ptr %6)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_fields(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 3
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2309 = getelementptr inbounds %Array_FieldNode_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx2309, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 9
  %6 = load i64, ptr %memberidx, align 4
  %memberidx.i137 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %memberidx21 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx92 = getelementptr inbounds %Class, ptr %1, i64 0, i32 7
  %memberidx99 = getelementptr inbounds %Class, ptr %1, i64 0, i32 4
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ClassField____sl__.exit
  %7 = phi ptr [ %3, %for.body.lr.ph ], [ %206, %Array_ClassField____sl__.exit ]
  %i.0311 = phi i64 [ 0, %for.body.lr.ph ], [ %205, %Array_ClassField____sl__.exit ]
  %current_vtable_index.0310 = phi i64 [ %6, %for.body.lr.ph ], [ %current_vtable_index.1, %Array_ClassField____sl__.exit ]
  %memberidx.i = getelementptr inbounds %Array_FieldNode_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %8, i64 %i.0311
  %9 = load ptr, ptr %ptridx.i, align 8
  %10 = tail call ptr @malloc(i32 49)
  %memberidx.i132 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 1
  store i1 false, ptr %memberidx.i132, align 1
  %memberidx4 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %9, align 8
  %memberidx6 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx6, align 8
  store ptr %12, ptr %memberidx4, align 8
  %13 = call fastcc i1 @is_operator_overload_name(ptr %12)
  br i1 %13, label %if.entry, label %ifend

common.ret:                                       ; preds = %Array_ClassField____sl__.exit, %ifend, %if.entry62, %for.entry, %TypeChecker_error.exit279, %TypeChecker_error.exit235, %TypeChecker_error.exit214, %TypeChecker_error.exit168
  ret void

if.entry:                                         ; preds = %for.body
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = call ptr @malloc(i32 75)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(75) %15, ptr noundef nonnull align 8 dereferenceable(75) @122, i64 75, i1 false)
  %16 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 75, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 75, ptr %memberidx2.i.i, align 4
  %memberidx.i133 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  %17 = load i64, ptr %memberidx.i133, align 4
  %18 = add nuw i64 %17, 75
  %19 = trunc i64 %18 to i32
  %20 = call ptr @malloc(i32 %19)
  %memberidx2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load i64, ptr %memberidx.i133, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %20, ptr align 8 %21, i64 %22, i1 false)
  %23 = getelementptr inbounds i8, ptr %20, i64 %22
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(75) %23, ptr noundef nonnull align 8 dereferenceable(75) %15, i64 75, i1 false)
  %24 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i.i134 = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %20, ptr %memberidx.i.i134, align 8
  %memberidx1.i.i135 = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i.i135, align 4
  %memberidx2.i.i136 = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i.i136, align 4
  %25 = load ptr, ptr %9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %25, i64 0, i32 1
  %26 = load ptr, ptr %memberidx10, align 8
  %27 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i138 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i138, align 8
  %29 = call ptr @malloc(i32 24)
  store i64 1, ptr %29, align 4
  %memberidx1.i.i139 = getelementptr inbounds %FloError, ptr %29, i64 0, i32 2
  store ptr %26, ptr %memberidx1.i.i139, align 8
  %memberidx2.i.i140 = getelementptr inbounds %FloError, ptr %29, i64 0, i32 1
  store ptr %24, ptr %memberidx2.i.i140, align 8
  %memberidx.i.i141 = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %memberidx.i.i141, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 3
  %31 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %30, %31
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %.pre326 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %32 = shl nuw i64 %31, 1
  store i64 %32, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i.i.i, align 8
  %34 = shl i64 %31, 4
  %35 = call ptr @realloc(ptr %33, i64 %34)
  store ptr %35, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i141, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %36 = phi ptr [ %.pre326, %if.entry.TypeChecker_error.exit_crit_edge ], [ %35, %if.entry.i.i ]
  %37 = phi i64 [ %30, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %38 = add nsw i64 %37, 1
  store i64 %38, ptr %memberidx.i.i141, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %36, i64 %37
  store ptr %29, ptr %ptridx.i.i, align 8
  br label %ifend

ifend:                                            ; preds = %for.body, %TypeChecker_error.exit
  %memberidx11 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 2
  %memberidx12 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 1
  %39 = load i64, ptr %memberidx12, align 4
  store i64 %39, ptr %memberidx11, align 4
  %40 = tail call ptr @malloc(i32 24)
  %41 = load ptr, ptr %1, align 8
  store i64 1, ptr %40, align 4
  %memberidx1.i142 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 1
  store ptr %41, ptr %memberidx1.i142, align 8
  %memberidx2.i143 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 2
  store i64 %i.0311, ptr %memberidx2.i143, align 4
  store ptr %40, ptr %10, align 8
  %memberidx15 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 4
  %memberidx16 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 3
  %42 = load ptr, ptr %memberidx16, align 8
  %43 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %42)
  store ptr %43, ptr %memberidx15, align 8
  %memberidx17 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 6
  store i64 %current_vtable_index.0310, ptr %memberidx17, align 4
  %44 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i145 = getelementptr inbounds %Compiler, ptr %44, i64 0, i32 6
  %45 = load ptr, ptr %memberidx1.i145, align 8
  %memberidx2.i146 = getelementptr inbounds %Array_FloError_, ptr %45, i64 0, i32 2
  %46 = load i64, ptr %memberidx2.i146, align 4
  %47 = icmp sgt i64 %46, 0
  br i1 %47, label %common.ret, label %ifend20

ifend20:                                          ; preds = %ifend
  %48 = load ptr, ptr %memberidx21, align 8
  %49 = load ptr, ptr %memberidx4, align 8
  %50 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %49)
  %memberidx.i147 = getelementptr inbounds %Map_string_PropId_, ptr %48, i64 0, i32 1
  %51 = load i64, ptr %memberidx.i147, align 4
  %52 = urem i64 %50, %51
  %53 = load ptr, ptr %48, align 8
  %ptridx.i148 = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i148, align 8
  %.not.i = icmp eq ptr %54, null
  br i1 %.not.i, label %ifend25, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %ifend20
  %memberidx1.i.i150 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %55 = phi ptr [ %65, %else.i ], [ %53, %while.entry.i.preheader ]
  %56 = phi i64 [ %66, %else.i ], [ %51, %while.entry.i.preheader ]
  %57 = phi ptr [ %69, %else.i ], [ %54, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %68, %else.i ], [ %52, %while.entry.i.preheader ]
  %58 = load ptr, ptr %57, align 8
  %memberidx.i.i149 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  %59 = load i64, ptr %memberidx.i.i149, align 4
  %60 = load i64, ptr %memberidx1.i.i150, align 4
  %.not.i.i151 = icmp eq i64 %59, %60
  br i1 %.not.i.i151, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i152 = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  %61 = load ptr, ptr %memberidx2.i.i152, align 8
  %62 = load ptr, ptr %memberidx3.i.i, align 8
  %63 = call i64 @memcmp(ptr %61, ptr %62, i64 %59)
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre327 = load i64, ptr %memberidx.i147, align 4
  %.pre328 = load ptr, ptr %48, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre329.pre = load ptr, ptr %48, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre329.pre, i64 %hash.0.i
  %.pre330.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre330.pre, null
  br i1 %.not29.i, label %ifend25, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %65 = phi ptr [ %.pre328, %ifend.i.i.else.i_crit_edge ], [ %55, %while.entry.i ]
  %66 = phi i64 [ %.pre327, %ifend.i.i.else.i_crit_edge ], [ %56, %while.entry.i ]
  %67 = add nuw i64 %hash.0.i, 1
  %68 = urem i64 %67, %66
  %ptridx7.i = getelementptr inbounds ptr, ptr %65, i64 %68
  %69 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %69, null
  br i1 %.not30.i, label %ifend25, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre330.pre, i64 0, i32 1
  %70 = load ptr, ptr %memberidx15.i, align 8
  %.not = icmp eq ptr %70, null
  br i1 %.not, label %ifend25, label %if.entry23

if.entry23:                                       ; preds = %Map_string_PropId____getitem__.exit
  %memberidx26 = getelementptr inbounds %PropId, ptr %70, i64 0, i32 1
  %71 = load ptr, ptr %memberidx26, align 8
  %72 = load ptr, ptr %1, align 8
  %73 = icmp eq ptr %71, %72
  br i1 %73, label %if.entry28, label %ifend30

ifend25:                                          ; preds = %else.i, %ifend20, %while.end.i, %ifend42, %Map_string_PropId____getitem__.exit
  %memberidx61 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 2
  %74 = load ptr, ptr %memberidx61, align 8
  %.not130 = icmp eq ptr %74, null
  br i1 %.not130, label %else63, label %if.entry62

if.entry28:                                       ; preds = %if.entry23
  %75 = load ptr, ptr %memberidx4, align 8
  %76 = load ptr, ptr %75, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %76, i64 0, i32 5
  %77 = load ptr, ptr %memberidx32, align 8
  %78 = call ptr %77(ptr nonnull %75)
  %memberidx33 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %79 = load ptr, ptr %memberidx33, align 8
  %80 = load ptr, ptr %79, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %80, i64 0, i32 5
  %81 = load ptr, ptr %memberidx34, align 8
  %82 = call ptr %81(ptr nonnull %79)
  %83 = alloca ptr, align 8
  %84 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %83, ptr nonnull @123, ptr %78, ptr %82)
  %85 = load ptr, ptr %83, align 8
  %86 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %86, align 8
  %memberidx.i153 = getelementptr inbounds %string, ptr %86, i64 0, i32 1
  store ptr %85, ptr %memberidx.i153, align 8
  %memberidx1.i154 = getelementptr inbounds %string, ptr %86, i64 0, i32 2
  store i64 %84, ptr %memberidx1.i154, align 4
  %memberidx2.i155 = getelementptr inbounds %string, ptr %86, i64 0, i32 3
  store i64 %84, ptr %memberidx2.i155, align 4
  tail call void @free(ptr %78)
  tail call void @free(ptr %82)
  %87 = load ptr, ptr %9, align 8
  %memberidx36 = getelementptr inbounds %Token, ptr %87, i64 0, i32 1
  %88 = load ptr, ptr %memberidx36, align 8
  %89 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i157 = getelementptr inbounds %Compiler, ptr %89, i64 0, i32 6
  %90 = load ptr, ptr %memberidx1.i157, align 8
  %91 = call ptr @malloc(i32 24)
  store i64 1, ptr %91, align 4
  %memberidx1.i.i158 = getelementptr inbounds %FloError, ptr %91, i64 0, i32 2
  store ptr %88, ptr %memberidx1.i.i158, align 8
  %memberidx2.i.i159 = getelementptr inbounds %FloError, ptr %91, i64 0, i32 1
  store ptr %86, ptr %memberidx2.i.i159, align 8
  %memberidx.i.i160 = getelementptr inbounds %Array_FloError_, ptr %90, i64 0, i32 2
  %92 = load i64, ptr %memberidx.i.i160, align 4
  %memberidx1.i2.i161 = getelementptr inbounds %Array_FloError_, ptr %90, i64 0, i32 3
  %93 = load i64, ptr %memberidx1.i2.i161, align 4
  %.not.i.i162 = icmp slt i64 %92, %93
  br i1 %.not.i.i162, label %if.entry28.TypeChecker_error.exit168_crit_edge, label %if.entry.i.i165

if.entry28.TypeChecker_error.exit168_crit_edge:   ; preds = %if.entry28
  %memberidx4.i.i166.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %90, i64 0, i32 1
  %.pre336 = load ptr, ptr %memberidx4.i.i166.phi.trans.insert, align 8
  br label %TypeChecker_error.exit168

if.entry.i.i165:                                  ; preds = %if.entry28
  %94 = shl nuw i64 %93, 1
  store i64 %94, ptr %memberidx1.i2.i161, align 4
  %memberidx2.i.i.i164 = getelementptr inbounds %Array_FloError_, ptr %90, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i.i.i164, align 8
  %96 = shl i64 %93, 4
  %97 = call ptr @realloc(ptr %95, i64 %96)
  store ptr %97, ptr %memberidx2.i.i.i164, align 8
  %.pre335 = load i64, ptr %memberidx.i.i160, align 4
  br label %TypeChecker_error.exit168

TypeChecker_error.exit168:                        ; preds = %if.entry28.TypeChecker_error.exit168_crit_edge, %if.entry.i.i165
  %98 = phi ptr [ %.pre336, %if.entry28.TypeChecker_error.exit168_crit_edge ], [ %97, %if.entry.i.i165 ]
  %99 = phi i64 [ %92, %if.entry28.TypeChecker_error.exit168_crit_edge ], [ %.pre335, %if.entry.i.i165 ]
  %100 = add nsw i64 %99, 1
  store i64 %100, ptr %memberidx.i.i160, align 4
  %ptridx.i.i167 = getelementptr inbounds ptr, ptr %98, i64 %99
  store ptr %91, ptr %ptridx.i.i167, align 8
  br label %common.ret

ifend30:                                          ; preds = %if.entry23
  %101 = load ptr, ptr %0, align 8
  %memberidx.i.i.i170 = getelementptr inbounds %Program, ptr %101, i64 0, i32 1
  %102 = load ptr, ptr %memberidx.i.i.i170, align 8
  %103 = load i64, ptr %71, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %102, i64 0, i32 1
  %104 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %104, i64 %103
  %105 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i171 = getelementptr inbounds %Module, ptr %105, i64 0, i32 4
  %106 = load ptr, ptr %memberidx2.i.i.i171, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %71, i64 0, i32 2
  %107 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %106, i64 0, i32 1
  %108 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %108, i64 %107
  %109 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %110 = load i64, ptr %70, align 4
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %if.entry.i192, label %ifend.i198

if.entry.i192:                                    ; preds = %ifend30
  %memberidx1.i173 = getelementptr inbounds %Class, ptr %109, i64 0, i32 5
  %112 = load ptr, ptr %memberidx1.i173, align 8
  %memberidx2.i174 = getelementptr inbounds %PropId, ptr %70, i64 0, i32 2
  %113 = load i64, ptr %memberidx2.i174, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %112, i64 0, i32 1
  %114 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %114, i64 %113
  %115 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %115, i64 0, i32 4
  %parent_prop_visibility290 = alloca i64, align 8
  %memberidx3.i191 = getelementptr inbounds %ClassMethod, ptr %115, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i198:                                       ; preds = %ifend30
  %memberidx4.i = getelementptr inbounds %Class, ptr %109, i64 0, i32 4
  %116 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i175 = getelementptr inbounds %PropId, ptr %70, i64 0, i32 2
  %117 = load i64, ptr %memberidx5.i175, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %116, i64 0, i32 1
  %118 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i176 = getelementptr inbounds ptr, ptr %118, i64 %117
  %119 = load ptr, ptr %ptridx.i.i176, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %119, i64 0, i32 4
  %parent_prop_visibility = alloca i64, align 8
  %memberidx6.i197 = getelementptr inbounds %ClassField, ptr %119, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i192, %ifend.i198
  %parent_prop_visibility293 = phi ptr [ %parent_prop_visibility290, %if.entry.i192 ], [ %parent_prop_visibility, %ifend.i198 ]
  %common.ret.op.i172291.in = phi ptr [ %memberidx3.i, %if.entry.i192 ], [ %memberidx6.i, %ifend.i198 ]
  %common.ret.op.in.i185 = phi ptr [ %memberidx3.i191, %if.entry.i192 ], [ %memberidx6.i197, %ifend.i198 ]
  %common.ret.op.i172291 = load ptr, ptr %common.ret.op.i172291.in, align 8
  %common.ret.op.i186 = load i64, ptr %common.ret.op.in.i185, align 4
  store i64 %common.ret.op.i186, ptr %parent_prop_visibility293, align 8
  %120 = load ptr, ptr %memberidx15, align 8
  %121 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %common.ret.op.i172291, ptr %120)
  br i1 %121, label %ifend42, label %if.entry40

if.entry40:                                       ; preds = %get_class_prop_visibility.exit
  %122 = load ptr, ptr %memberidx4, align 8
  %123 = load ptr, ptr %122, align 8
  %memberidx44 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %123, i64 0, i32 5
  %124 = load ptr, ptr %memberidx44, align 8
  %125 = call ptr %124(ptr nonnull %122)
  %memberidx45 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %126 = load ptr, ptr %memberidx45, align 8
  %127 = load ptr, ptr %126, align 8
  %memberidx46 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %127, i64 0, i32 5
  %128 = load ptr, ptr %memberidx46, align 8
  %129 = call ptr %128(ptr nonnull %126)
  %130 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %common.ret.op.i172291)
  %131 = load ptr, ptr %130, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %131, i64 0, i32 5
  %132 = load ptr, ptr %memberidx47, align 8
  %133 = call ptr %132(ptr nonnull %130)
  %134 = alloca ptr, align 8
  %135 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %134, ptr nonnull @124, ptr %125, ptr %129, ptr %133)
  %136 = load ptr, ptr %134, align 8
  %137 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %137, align 8
  %memberidx.i199 = getelementptr inbounds %string, ptr %137, i64 0, i32 1
  store ptr %136, ptr %memberidx.i199, align 8
  %memberidx1.i200 = getelementptr inbounds %string, ptr %137, i64 0, i32 2
  store i64 %135, ptr %memberidx1.i200, align 4
  %memberidx2.i201 = getelementptr inbounds %string, ptr %137, i64 0, i32 3
  store i64 %135, ptr %memberidx2.i201, align 4
  tail call void @free(ptr %125)
  tail call void @free(ptr %129)
  tail call void @free(ptr %133)
  %138 = load ptr, ptr %9, align 8
  %memberidx49 = getelementptr inbounds %Token, ptr %138, i64 0, i32 1
  %139 = load ptr, ptr %memberidx49, align 8
  %140 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i203 = getelementptr inbounds %Compiler, ptr %140, i64 0, i32 6
  %141 = load ptr, ptr %memberidx1.i203, align 8
  %142 = call ptr @malloc(i32 24)
  store i64 5, ptr %142, align 4
  %memberidx1.i.i204 = getelementptr inbounds %FloError, ptr %142, i64 0, i32 2
  store ptr %139, ptr %memberidx1.i.i204, align 8
  %memberidx2.i.i205 = getelementptr inbounds %FloError, ptr %142, i64 0, i32 1
  store ptr %137, ptr %memberidx2.i.i205, align 8
  %memberidx.i.i206 = getelementptr inbounds %Array_FloError_, ptr %141, i64 0, i32 2
  %143 = load i64, ptr %memberidx.i.i206, align 4
  %memberidx1.i2.i207 = getelementptr inbounds %Array_FloError_, ptr %141, i64 0, i32 3
  %144 = load i64, ptr %memberidx1.i2.i207, align 4
  %.not.i.i208 = icmp slt i64 %143, %144
  br i1 %.not.i.i208, label %if.entry40.TypeChecker_error.exit214_crit_edge, label %if.entry.i.i211

if.entry40.TypeChecker_error.exit214_crit_edge:   ; preds = %if.entry40
  %memberidx4.i.i212.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %141, i64 0, i32 1
  %.pre332 = load ptr, ptr %memberidx4.i.i212.phi.trans.insert, align 8
  br label %TypeChecker_error.exit214

if.entry.i.i211:                                  ; preds = %if.entry40
  %145 = shl nuw i64 %144, 1
  store i64 %145, ptr %memberidx1.i2.i207, align 4
  %memberidx2.i.i.i210 = getelementptr inbounds %Array_FloError_, ptr %141, i64 0, i32 1
  %146 = load ptr, ptr %memberidx2.i.i.i210, align 8
  %147 = shl i64 %144, 4
  %148 = call ptr @realloc(ptr %146, i64 %147)
  store ptr %148, ptr %memberidx2.i.i.i210, align 8
  %.pre331 = load i64, ptr %memberidx.i.i206, align 4
  br label %TypeChecker_error.exit214

TypeChecker_error.exit214:                        ; preds = %if.entry40.TypeChecker_error.exit214_crit_edge, %if.entry.i.i211
  %149 = phi ptr [ %.pre332, %if.entry40.TypeChecker_error.exit214_crit_edge ], [ %148, %if.entry.i.i211 ]
  %150 = phi i64 [ %143, %if.entry40.TypeChecker_error.exit214_crit_edge ], [ %.pre331, %if.entry.i.i211 ]
  %151 = add nsw i64 %150, 1
  store i64 %151, ptr %memberidx.i.i206, align 4
  %ptridx.i.i213 = getelementptr inbounds ptr, ptr %149, i64 %150
  store ptr %142, ptr %ptridx.i.i213, align 8
  br label %common.ret

ifend42:                                          ; preds = %get_class_prop_visibility.exit
  %152 = load i64, ptr %memberidx11, align 4
  %.not131 = icmp eq i64 %152, %common.ret.op.i186
  br i1 %.not131, label %ifend25, label %if.entry51

if.entry51:                                       ; preds = %ifend42
  %153 = load ptr, ptr %memberidx4, align 8
  %154 = load ptr, ptr %153, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %154, i64 0, i32 5
  %155 = load ptr, ptr %memberidx55, align 8
  %156 = call ptr %155(ptr nonnull %153)
  %memberidx56 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %157 = load ptr, ptr %memberidx56, align 8
  %158 = load ptr, ptr %157, align 8
  %memberidx57 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %158, i64 0, i32 5
  %159 = load ptr, ptr %memberidx57, align 8
  %160 = call ptr %159(ptr nonnull %157)
  switch i64 %common.ret.op.i186, label %ifend3.i [
    i64 1, label %if.entry.i218
    i64 2, label %if.entry1.i
  ]

if.entry.i218:                                    ; preds = %if.entry51
  %161 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %161, ptr noundef nonnull align 8 dereferenceable(7) @40, i64 7, i1 false)
  br label %dump_access.exit

if.entry1.i:                                      ; preds = %if.entry51
  %162 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %162, ptr noundef nonnull align 8 dereferenceable(6) @41, i64 6, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry51
  %163 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %163, ptr noundef nonnull align 8 dereferenceable(9) @42, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i218, %if.entry1.i, %ifend3.i
  %.sink360 = phi ptr [ %161, %if.entry.i218 ], [ %162, %if.entry1.i ], [ %163, %ifend3.i ]
  %.sink358 = phi i64 [ 7, %if.entry.i218 ], [ 6, %if.entry1.i ], [ 9, %ifend3.i ]
  %164 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %164, align 8
  %memberidx.i.i.i216 = getelementptr inbounds %string, ptr %164, i64 0, i32 1
  store ptr %.sink360, ptr %memberidx.i.i.i216, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %164, i64 0, i32 2
  store i64 %.sink358, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i217 = getelementptr inbounds %string, ptr %164, i64 0, i32 3
  store i64 %.sink358, ptr %memberidx2.i.i.i217, align 4
  %165 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %166 = call ptr %165(ptr nonnull %164)
  %167 = alloca ptr, align 8
  %168 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %167, ptr nonnull @125, ptr %156, ptr %160, ptr %166)
  %169 = load ptr, ptr %167, align 8
  %170 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %170, align 8
  %memberidx.i220 = getelementptr inbounds %string, ptr %170, i64 0, i32 1
  store ptr %169, ptr %memberidx.i220, align 8
  %memberidx1.i221 = getelementptr inbounds %string, ptr %170, i64 0, i32 2
  store i64 %168, ptr %memberidx1.i221, align 4
  %memberidx2.i222 = getelementptr inbounds %string, ptr %170, i64 0, i32 3
  store i64 %168, ptr %memberidx2.i222, align 4
  tail call void @free(ptr %156)
  tail call void @free(ptr %160)
  tail call void @free(ptr %166)
  %171 = load ptr, ptr %9, align 8
  %memberidx60 = getelementptr inbounds %Token, ptr %171, i64 0, i32 1
  %172 = load ptr, ptr %memberidx60, align 8
  %173 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i224 = getelementptr inbounds %Compiler, ptr %173, i64 0, i32 6
  %174 = load ptr, ptr %memberidx1.i224, align 8
  %175 = call ptr @malloc(i32 24)
  store i64 4, ptr %175, align 4
  %memberidx1.i.i225 = getelementptr inbounds %FloError, ptr %175, i64 0, i32 2
  store ptr %172, ptr %memberidx1.i.i225, align 8
  %memberidx2.i.i226 = getelementptr inbounds %FloError, ptr %175, i64 0, i32 1
  store ptr %170, ptr %memberidx2.i.i226, align 8
  %memberidx.i.i227 = getelementptr inbounds %Array_FloError_, ptr %174, i64 0, i32 2
  %176 = load i64, ptr %memberidx.i.i227, align 4
  %memberidx1.i2.i228 = getelementptr inbounds %Array_FloError_, ptr %174, i64 0, i32 3
  %177 = load i64, ptr %memberidx1.i2.i228, align 4
  %.not.i.i229 = icmp slt i64 %176, %177
  br i1 %.not.i.i229, label %dump_access.exit.TypeChecker_error.exit235_crit_edge, label %if.entry.i.i232

dump_access.exit.TypeChecker_error.exit235_crit_edge: ; preds = %dump_access.exit
  %memberidx4.i.i233.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %174, i64 0, i32 1
  %.pre334 = load ptr, ptr %memberidx4.i.i233.phi.trans.insert, align 8
  br label %TypeChecker_error.exit235

if.entry.i.i232:                                  ; preds = %dump_access.exit
  %178 = shl nuw i64 %177, 1
  store i64 %178, ptr %memberidx1.i2.i228, align 4
  %memberidx2.i.i.i231 = getelementptr inbounds %Array_FloError_, ptr %174, i64 0, i32 1
  %179 = load ptr, ptr %memberidx2.i.i.i231, align 8
  %180 = shl i64 %177, 4
  %181 = call ptr @realloc(ptr %179, i64 %180)
  store ptr %181, ptr %memberidx2.i.i.i231, align 8
  %.pre333 = load i64, ptr %memberidx.i.i227, align 4
  br label %TypeChecker_error.exit235

TypeChecker_error.exit235:                        ; preds = %dump_access.exit.TypeChecker_error.exit235_crit_edge, %if.entry.i.i232
  %182 = phi ptr [ %.pre334, %dump_access.exit.TypeChecker_error.exit235_crit_edge ], [ %181, %if.entry.i.i232 ]
  %183 = phi i64 [ %176, %dump_access.exit.TypeChecker_error.exit235_crit_edge ], [ %.pre333, %if.entry.i.i232 ]
  %184 = add nsw i64 %183, 1
  store i64 %184, ptr %memberidx.i.i227, align 4
  %ptridx.i.i234 = getelementptr inbounds ptr, ptr %182, i64 %183
  store ptr %175, ptr %ptridx.i.i234, align 8
  br label %common.ret

if.entry62:                                       ; preds = %ifend25
  %memberidx65 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 5
  %185 = load ptr, ptr %memberidx15, align 8
  %186 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %185, ptr nonnull %74)
  store ptr %186, ptr %memberidx65, align 8
  %187 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i237 = getelementptr inbounds %Compiler, ptr %187, i64 0, i32 6
  %188 = load ptr, ptr %memberidx1.i237, align 8
  %memberidx2.i238 = getelementptr inbounds %Array_FloError_, ptr %188, i64 0, i32 2
  %189 = load i64, ptr %memberidx2.i238, align 4
  %190 = icmp sgt i64 %189, 0
  br i1 %190, label %common.ret, label %ifend70

else63:                                           ; preds = %ifend25
  store i1 false, ptr %memberidx.i132, align 1
  %191 = load ptr, ptr %memberidx21, align 8
  %192 = load ptr, ptr %memberidx4, align 8
  %193 = load ptr, ptr %10, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %191, ptr %192, ptr %193)
  %194 = add nsw i64 %current_vtable_index.0310, 1
  br label %ifend64

ifend64:                                          ; preds = %else63, %ifend88
  %current_vtable_index.1 = phi i64 [ %current_vtable_index.0310, %ifend88 ], [ %194, %else63 ]
  %195 = load ptr, ptr %memberidx99, align 8
  %memberidx.i239 = getelementptr inbounds %Array_ClassField_, ptr %195, i64 0, i32 2
  %196 = load i64, ptr %memberidx.i239, align 4
  %memberidx1.i240 = getelementptr inbounds %Array_ClassField_, ptr %195, i64 0, i32 3
  %197 = load i64, ptr %memberidx1.i240, align 4
  %.not.i241 = icmp slt i64 %196, %197
  br i1 %.not.i241, label %ifend64.Array_ClassField____sl__.exit_crit_edge, label %if.entry.i244

ifend64.Array_ClassField____sl__.exit_crit_edge:  ; preds = %ifend64
  %memberidx4.i245.phi.trans.insert = getelementptr inbounds %Array_ClassField_, ptr %195, i64 0, i32 1
  %.pre342 = load ptr, ptr %memberidx4.i245.phi.trans.insert, align 8
  br label %Array_ClassField____sl__.exit

if.entry.i244:                                    ; preds = %ifend64
  %198 = shl nuw i64 %197, 1
  store i64 %198, ptr %memberidx1.i240, align 4
  %memberidx2.i.i243 = getelementptr inbounds %Array_ClassField_, ptr %195, i64 0, i32 1
  %199 = load ptr, ptr %memberidx2.i.i243, align 8
  %200 = shl i64 %197, 4
  %201 = call ptr @realloc(ptr %199, i64 %200)
  store ptr %201, ptr %memberidx2.i.i243, align 8
  %.pre341 = load i64, ptr %memberidx.i239, align 4
  br label %Array_ClassField____sl__.exit

Array_ClassField____sl__.exit:                    ; preds = %ifend64.Array_ClassField____sl__.exit_crit_edge, %if.entry.i244
  %202 = phi ptr [ %.pre342, %ifend64.Array_ClassField____sl__.exit_crit_edge ], [ %201, %if.entry.i244 ]
  %203 = phi i64 [ %196, %ifend64.Array_ClassField____sl__.exit_crit_edge ], [ %.pre341, %if.entry.i244 ]
  %204 = add nsw i64 %203, 1
  store i64 %204, ptr %memberidx.i239, align 4
  %ptridx.i246 = getelementptr inbounds ptr, ptr %202, i64 %203
  store ptr %10, ptr %ptridx.i246, align 8
  %205 = add nuw nsw i64 %i.0311, 1
  %206 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %206, i64 0, i32 2
  %207 = load i64, ptr %memberidx2, align 4
  %208 = icmp slt i64 %205, %207
  br i1 %208, label %for.body, label %common.ret

ifend70:                                          ; preds = %if.entry62
  %209 = load ptr, ptr %memberidx15, align 8
  %memberidx73 = getelementptr inbounds %Expression, ptr %186, i64 0, i32 3
  %210 = load ptr, ptr %memberidx73, align 8
  %211 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %209, ptr %210)
  br i1 %211, label %ifend76, label %if.entry74

if.entry74:                                       ; preds = %ifend70
  %212 = load ptr, ptr %memberidx15, align 8
  %213 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %212)
  %214 = load ptr, ptr %213, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %214, i64 0, i32 5
  %215 = load ptr, ptr %memberidx78, align 8
  %216 = call ptr %215(ptr nonnull %213)
  %217 = load ptr, ptr %memberidx65, align 8
  %memberidx80 = getelementptr inbounds %Expression, ptr %217, i64 0, i32 3
  %218 = load ptr, ptr %memberidx80, align 8
  %219 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %218)
  %220 = load ptr, ptr %219, align 8
  %memberidx81 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %220, i64 0, i32 5
  %221 = load ptr, ptr %memberidx81, align 8
  %222 = call ptr %221(ptr nonnull %219)
  %223 = alloca ptr, align 8
  %224 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %223, ptr nonnull @126, ptr %216, ptr %222)
  %225 = load ptr, ptr %223, align 8
  %226 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %226, align 8
  %memberidx.i248 = getelementptr inbounds %string, ptr %226, i64 0, i32 1
  store ptr %225, ptr %memberidx.i248, align 8
  %memberidx1.i249 = getelementptr inbounds %string, ptr %226, i64 0, i32 2
  store i64 %224, ptr %memberidx1.i249, align 4
  %memberidx2.i250 = getelementptr inbounds %string, ptr %226, i64 0, i32 3
  store i64 %224, ptr %memberidx2.i250, align 4
  tail call void @free(ptr %216)
  tail call void @free(ptr %222)
  %227 = load ptr, ptr %memberidx61, align 8
  %228 = load ptr, ptr %227, align 8
  %229 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i252 = getelementptr inbounds %Compiler, ptr %229, i64 0, i32 6
  %230 = load ptr, ptr %memberidx1.i252, align 8
  %231 = call ptr @malloc(i32 24)
  store i64 5, ptr %231, align 4
  %memberidx1.i.i253 = getelementptr inbounds %FloError, ptr %231, i64 0, i32 2
  store ptr %228, ptr %memberidx1.i.i253, align 8
  %memberidx2.i.i254 = getelementptr inbounds %FloError, ptr %231, i64 0, i32 1
  store ptr %226, ptr %memberidx2.i.i254, align 8
  %memberidx.i.i255 = getelementptr inbounds %Array_FloError_, ptr %230, i64 0, i32 2
  %232 = load i64, ptr %memberidx.i.i255, align 4
  %memberidx1.i2.i256 = getelementptr inbounds %Array_FloError_, ptr %230, i64 0, i32 3
  %233 = load i64, ptr %memberidx1.i2.i256, align 4
  %.not.i.i257 = icmp slt i64 %232, %233
  br i1 %.not.i.i257, label %if.entry74.TypeChecker_error.exit263_crit_edge, label %if.entry.i.i260

if.entry74.TypeChecker_error.exit263_crit_edge:   ; preds = %if.entry74
  %memberidx4.i.i261.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %230, i64 0, i32 1
  %.pre338 = load ptr, ptr %memberidx4.i.i261.phi.trans.insert, align 8
  br label %TypeChecker_error.exit263

if.entry.i.i260:                                  ; preds = %if.entry74
  %234 = shl nuw i64 %233, 1
  store i64 %234, ptr %memberidx1.i2.i256, align 4
  %memberidx2.i.i.i259 = getelementptr inbounds %Array_FloError_, ptr %230, i64 0, i32 1
  %235 = load ptr, ptr %memberidx2.i.i.i259, align 8
  %236 = shl i64 %233, 4
  %237 = call ptr @realloc(ptr %235, i64 %236)
  store ptr %237, ptr %memberidx2.i.i.i259, align 8
  %.pre337 = load i64, ptr %memberidx.i.i255, align 4
  br label %TypeChecker_error.exit263

TypeChecker_error.exit263:                        ; preds = %if.entry74.TypeChecker_error.exit263_crit_edge, %if.entry.i.i260
  %238 = phi ptr [ %.pre338, %if.entry74.TypeChecker_error.exit263_crit_edge ], [ %237, %if.entry.i.i260 ]
  %239 = phi i64 [ %232, %if.entry74.TypeChecker_error.exit263_crit_edge ], [ %.pre337, %if.entry.i.i260 ]
  %240 = add nsw i64 %239, 1
  store i64 %240, ptr %memberidx.i.i255, align 4
  %ptridx.i.i262 = getelementptr inbounds ptr, ptr %238, i64 %239
  store ptr %231, ptr %ptridx.i.i262, align 8
  br label %ifend76

ifend76:                                          ; preds = %ifend70, %TypeChecker_error.exit263
  %241 = load ptr, ptr %memberidx65, align 8
  %memberidx85 = getelementptr inbounds %Expression, ptr %241, i64 0, i32 1
  %242 = load i1, ptr %memberidx85, align 1
  br i1 %242, label %ifend88, label %if.entry86

if.entry86:                                       ; preds = %ifend76
  %243 = call ptr @malloc(i32 45)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(45) %243, ptr noundef nonnull align 8 dereferenceable(45) @127, i64 45, i1 false)
  %244 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %244, align 8
  %memberidx.i.i264 = getelementptr inbounds %string, ptr %244, i64 0, i32 1
  store ptr %243, ptr %memberidx.i.i264, align 8
  %memberidx1.i.i265 = getelementptr inbounds %string, ptr %244, i64 0, i32 2
  store i64 45, ptr %memberidx1.i.i265, align 4
  %memberidx2.i.i266 = getelementptr inbounds %string, ptr %244, i64 0, i32 3
  store i64 45, ptr %memberidx2.i.i266, align 4
  %245 = load ptr, ptr %memberidx61, align 8
  %246 = load ptr, ptr %245, align 8
  %247 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i268 = getelementptr inbounds %Compiler, ptr %247, i64 0, i32 6
  %248 = load ptr, ptr %memberidx1.i268, align 8
  %249 = call ptr @malloc(i32 24)
  store i64 4, ptr %249, align 4
  %memberidx1.i.i269 = getelementptr inbounds %FloError, ptr %249, i64 0, i32 2
  store ptr %246, ptr %memberidx1.i.i269, align 8
  %memberidx2.i.i270 = getelementptr inbounds %FloError, ptr %249, i64 0, i32 1
  store ptr %244, ptr %memberidx2.i.i270, align 8
  %memberidx.i.i271 = getelementptr inbounds %Array_FloError_, ptr %248, i64 0, i32 2
  %250 = load i64, ptr %memberidx.i.i271, align 4
  %memberidx1.i2.i272 = getelementptr inbounds %Array_FloError_, ptr %248, i64 0, i32 3
  %251 = load i64, ptr %memberidx1.i2.i272, align 4
  %.not.i.i273 = icmp slt i64 %250, %251
  br i1 %.not.i.i273, label %if.entry86.TypeChecker_error.exit279_crit_edge, label %if.entry.i.i276

if.entry86.TypeChecker_error.exit279_crit_edge:   ; preds = %if.entry86
  %memberidx4.i.i277.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %248, i64 0, i32 1
  %.pre340 = load ptr, ptr %memberidx4.i.i277.phi.trans.insert, align 8
  br label %TypeChecker_error.exit279

if.entry.i.i276:                                  ; preds = %if.entry86
  %252 = shl nuw i64 %251, 1
  store i64 %252, ptr %memberidx1.i2.i272, align 4
  %memberidx2.i.i.i275 = getelementptr inbounds %Array_FloError_, ptr %248, i64 0, i32 1
  %253 = load ptr, ptr %memberidx2.i.i.i275, align 8
  %254 = shl i64 %251, 4
  %255 = call ptr @realloc(ptr %253, i64 %254)
  store ptr %255, ptr %memberidx2.i.i.i275, align 8
  %.pre339 = load i64, ptr %memberidx.i.i271, align 4
  br label %TypeChecker_error.exit279

TypeChecker_error.exit279:                        ; preds = %if.entry86.TypeChecker_error.exit279_crit_edge, %if.entry.i.i276
  %256 = phi ptr [ %.pre340, %if.entry86.TypeChecker_error.exit279_crit_edge ], [ %255, %if.entry.i.i276 ]
  %257 = phi i64 [ %250, %if.entry86.TypeChecker_error.exit279_crit_edge ], [ %.pre339, %if.entry.i.i276 ]
  %258 = add nsw i64 %257, 1
  store i64 %258, ptr %memberidx.i.i271, align 4
  %ptridx.i.i278 = getelementptr inbounds ptr, ptr %256, i64 %257
  store ptr %249, ptr %ptridx.i.i278, align 8
  br label %common.ret

ifend88:                                          ; preds = %ifend76
  store i1 true, ptr %memberidx.i132, align 1
  %259 = load ptr, ptr %memberidx92, align 8
  %260 = load ptr, ptr %memberidx4, align 8
  %261 = load ptr, ptr %10, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %259, ptr %260, ptr %261)
  br label %ifend64
}

define internal fastcc void @TypeChecker_check_module_import(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ImportNode, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StrToken, ptr %3, i64 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp sgt i64 %5, 0
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %if.entry55, %else56, %for.end, %ifend, %TypeChecker_error.exit311, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %2
  %7 = tail call ptr @malloc(i32 51)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(51) %7, ptr noundef nonnull align 8 dereferenceable(51) @93, i64 51, i1 false)
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 51, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 51, ptr %memberidx2.i.i, align 4
  %9 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %9, i64 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %11 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %11, i64 0, i32 6
  %12 = load ptr, ptr %memberidx1.i, align 8
  %13 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %13, align 4
  %memberidx1.i.i88 = getelementptr inbounds %FloError, ptr %13, i64 0, i32 2
  store ptr %10, ptr %memberidx1.i.i88, align 8
  %memberidx2.i.i89 = getelementptr inbounds %FloError, ptr %13, i64 0, i32 1
  store ptr %8, ptr %memberidx2.i.i89, align 8
  %memberidx.i.i90 = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 2
  %14 = load i64, ptr %memberidx.i.i90, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 3
  %15 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %14, %15
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 1
  %.pre385 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %16 = shl nuw i64 %15, 1
  store i64 %16, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i.i.i, align 8
  %18 = shl i64 %15, 4
  %19 = tail call ptr @realloc(ptr %17, i64 %18)
  store ptr %19, ptr %memberidx2.i.i.i, align 8
  %.pre384 = load i64, ptr %memberidx.i.i90, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %20 = phi ptr [ %.pre385, %if.entry.TypeChecker_error.exit_crit_edge ], [ %19, %if.entry.i.i ]
  %21 = phi i64 [ %14, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre384, %if.entry.i.i ]
  %22 = add nsw i64 %21, 1
  store i64 %22, ptr %memberidx.i.i90, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %20, i64 %21
  store ptr %13, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx6 = getelementptr inbounds %StrToken, ptr %3, i64 0, i32 2
  %23 = load ptr, ptr %memberidx6, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %24 = load ptr, ptr %memberidx8, align 8
  %25 = tail call fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %23, ptr %24)
  %memberidx.i91 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %26 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %Compiler, ptr %26, i64 0, i32 6
  %27 = load ptr, ptr %memberidx1.i92, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i, align 4
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %common.ret, label %ifend11

ifend11:                                          ; preds = %ifend
  %30 = load ptr, ptr %0, align 8
  %memberidx13 = getelementptr inbounds %Module, ptr %25, i64 0, i32 6
  %31 = load ptr, ptr %memberidx13, align 8
  %memberidx.i93 = getelementptr inbounds %Program, ptr %30, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i93, align 8
  %33 = load i64, ptr %31, align 4
  %memberidx.i.i94 = getelementptr inbounds %Array_Module_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i94, align 8
  %ptridx.i.i95 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i.i95, align 8
  %memberidx2.i96 = getelementptr inbounds %Module, ptr %35, i64 0, i32 8
  %36 = load ptr, ptr %memberidx2.i96, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %31, i64 0, i32 1
  %37 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i6.i, align 8
  %40 = load ptr, ptr %1, align 8
  %memberidx15 = getelementptr inbounds %Array_ImportClause_, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx15, align 4
  %42 = icmp sgt i64 %41, 0
  br i1 %42, label %for.entry, label %else17

else17:                                           ; preds = %ifend11
  %memberidx54 = getelementptr inbounds %ImportNode, ptr %1, i64 0, i32 2
  %43 = load ptr, ptr %memberidx54, align 8
  %.not = icmp eq ptr %43, null
  br i1 %.not, label %else56, label %if.entry55

for.entry:                                        ; preds = %ifend11
  %44 = tail call ptr @malloc(i32 25)
  %memberidx.i97 = getelementptr inbounds %Array_ImportClause_, ptr %40, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i97, align 8
  %46 = load i64, ptr %memberidx15, align 4
  store i1 false, ptr %44, align 1
  %memberidx1.i.i99 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %44, i64 0, i32 1
  %memberidx2.i.i100 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %44, i64 0, i32 3
  store ptr %45, ptr %memberidx2.i.i100, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %44, i64 0, i32 2
  store i64 %46, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i99, align 4
  %47 = icmp slt i64 %46, 1
  br i1 %47, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx26 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %memberidx30 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 2
  %memberidx.i.i.i138 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %memberidx34 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 4
  %memberidx38 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 1
  %memberidx42 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 3
  %memberidx46 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.incr
  %48 = phi i64 [ 1, %for.body.lr.ph ], [ %52, %for.incr ]
  %storemerge354.in = phi ptr [ %45, %for.body.lr.ph ], [ %ptridx.i105, %for.incr ]
  %storemerge354 = load ptr, ptr %storemerge354.in, align 8
  %49 = load ptr, ptr %storemerge354, align 8
  %memberidx22 = getelementptr inbounds %IdentifierToken, ptr %49, i64 0, i32 2
  %50 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %ImportClause, ptr %storemerge354, i64 0, i32 1
  %51 = load ptr, ptr %memberidx23, align 8
  %.not81 = icmp eq ptr %51, null
  br i1 %.not81, label %end, label %true_block

for.incr:                                         ; preds = %Map_string_Generic____getitem__.exit, %if.entry47, %if.entry43, %if.entry39, %if.entry35, %if.entry31
  %52 = add nuw nsw i64 %48, 1
  store i64 %52, ptr %memberidx1.i.i99, align 4
  %ptridx.i105 = getelementptr inbounds ptr, ptr %45, i64 %48
  %.not398 = icmp slt i64 %48, %46
  br i1 %.not398, label %for.body, label %for.end

for.end:                                          ; preds = %for.incr, %for.entry
  tail call void @free(ptr nonnull %44)
  br label %common.ret

true_block:                                       ; preds = %for.body
  %memberidx25 = getelementptr inbounds %IdentifierToken, ptr %51, i64 0, i32 2
  %53 = load ptr, ptr %memberidx25, align 8
  br label %end

end:                                              ; preds = %for.body, %true_block
  %ternary = phi ptr [ %53, %true_block ], [ %50, %for.body ]
  %54 = load ptr, ptr %memberidx26, align 8
  %55 = tail call fastcc i64 @Map_string_Generic__hash_fnc(ptr %50)
  %memberidx.i107 = getelementptr inbounds %Map_string_Generic_, ptr %54, i64 0, i32 1
  %56 = load i64, ptr %memberidx.i107, align 4
  %57 = urem i64 %55, %56
  %58 = load ptr, ptr %54, align 8
  %ptridx.i108 = getelementptr inbounds ptr, ptr %58, i64 %57
  %59 = load ptr, ptr %ptridx.i108, align 8
  %.not.i = icmp eq ptr %59, null
  br i1 %.not.i, label %ifend29, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %end
  %memberidx1.i.i110 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  %memberidx3.i.i113 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %60 = phi ptr [ %70, %else.i ], [ %58, %while.entry.i.preheader ]
  %61 = phi i64 [ %71, %else.i ], [ %56, %while.entry.i.preheader ]
  %62 = phi ptr [ %74, %else.i ], [ %59, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %73, %else.i ], [ %57, %while.entry.i.preheader ]
  %63 = load ptr, ptr %62, align 8
  %memberidx.i.i109 = getelementptr inbounds %string, ptr %63, i64 0, i32 2
  %64 = load i64, ptr %memberidx.i.i109, align 4
  %65 = load i64, ptr %memberidx1.i.i110, align 4
  %.not.i.i111 = icmp eq i64 %64, %65
  br i1 %.not.i.i111, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i112 = getelementptr inbounds %string, ptr %63, i64 0, i32 1
  %66 = load ptr, ptr %memberidx2.i.i112, align 8
  %67 = load ptr, ptr %memberidx3.i.i113, align 8
  %68 = tail call i64 @memcmp(ptr %66, ptr %67, i64 %64)
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i107, align 4
  %.pre359 = load ptr, ptr %54, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre360.pre = load ptr, ptr %54, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre360.pre, i64 %hash.0.i
  %.pre361.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre361.pre, null
  br i1 %.not29.i, label %ifend29, label %Map_string_Generic____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %70 = phi ptr [ %.pre359, %ifend.i.i.else.i_crit_edge ], [ %60, %while.entry.i ]
  %71 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %61, %while.entry.i ]
  %72 = add nuw i64 %hash.0.i, 1
  %73 = urem i64 %72, %71
  %ptridx7.i = getelementptr inbounds ptr, ptr %70, i64 %73
  %74 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %74, null
  br i1 %.not30.i, label %ifend29, label %while.entry.i

Map_string_Generic____getitem__.exit:             ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_Generic_, ptr %.pre361.pre, i64 0, i32 1
  %75 = load ptr, ptr %memberidx15.i, align 8
  %.not82 = icmp eq ptr %75, null
  br i1 %.not82, label %ifend29, label %for.incr

ifend29:                                          ; preds = %else.i, %end, %while.end.i, %Map_string_Generic____getitem__.exit
  %76 = load ptr, ptr %memberidx30, align 8
  %77 = tail call fastcc i64 @Map_string_ClassId__hash_fnc(ptr %50)
  %memberidx.i114 = getelementptr inbounds %Map_string_ClassId_, ptr %76, i64 0, i32 1
  %78 = load i64, ptr %memberidx.i114, align 4
  %79 = urem i64 %77, %78
  %80 = load ptr, ptr %76, align 8
  %ptridx.i115 = getelementptr inbounds ptr, ptr %80, i64 %79
  %81 = load ptr, ptr %ptridx.i115, align 8
  %.not.i116 = icmp eq ptr %81, null
  br i1 %.not.i116, label %ifend33, label %while.entry.i122.preheader

while.entry.i122.preheader:                       ; preds = %ifend29
  %memberidx1.i.i120 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  %memberidx3.i.i124 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  br label %while.entry.i122

while.entry.i122:                                 ; preds = %while.entry.i122.preheader, %else.i134
  %82 = phi ptr [ %92, %else.i134 ], [ %80, %while.entry.i122.preheader ]
  %83 = phi i64 [ %93, %else.i134 ], [ %78, %while.entry.i122.preheader ]
  %84 = phi ptr [ %96, %else.i134 ], [ %81, %while.entry.i122.preheader ]
  %hash.0.i117 = phi i64 [ %95, %else.i134 ], [ %79, %while.entry.i122.preheader ]
  %85 = load ptr, ptr %84, align 8
  %memberidx.i.i119 = getelementptr inbounds %string, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx.i.i119, align 4
  %87 = load i64, ptr %memberidx1.i.i120, align 4
  %.not.i.i121 = icmp eq i64 %86, %87
  br i1 %.not.i.i121, label %ifend.i.i125, label %else.i134

ifend.i.i125:                                     ; preds = %while.entry.i122
  %memberidx2.i.i123 = getelementptr inbounds %string, ptr %85, i64 0, i32 1
  %88 = load ptr, ptr %memberidx2.i.i123, align 8
  %89 = load ptr, ptr %memberidx3.i.i124, align 8
  %90 = tail call i64 @memcmp(ptr %88, ptr %89, i64 %86)
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %while.end.i131, label %ifend.i.i125.else.i134_crit_edge

ifend.i.i125.else.i134_crit_edge:                 ; preds = %ifend.i.i125
  %.pre362 = load i64, ptr %memberidx.i114, align 4
  %.pre363 = load ptr, ptr %76, align 8
  br label %else.i134

while.end.i131:                                   ; preds = %ifend.i.i125
  %.pre364.pre = load ptr, ptr %76, align 8
  %ptridx9.i129.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre364.pre, i64 %hash.0.i117
  %.pre365.pre = load ptr, ptr %ptridx9.i129.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i130 = icmp eq ptr %.pre365.pre, null
  br i1 %.not29.i130, label %ifend33, label %Map_string_ClassId____getitem__.exit

else.i134:                                        ; preds = %ifend.i.i125.else.i134_crit_edge, %while.entry.i122
  %92 = phi ptr [ %.pre363, %ifend.i.i125.else.i134_crit_edge ], [ %82, %while.entry.i122 ]
  %93 = phi i64 [ %.pre362, %ifend.i.i125.else.i134_crit_edge ], [ %83, %while.entry.i122 ]
  %94 = add nuw i64 %hash.0.i117, 1
  %95 = urem i64 %94, %93
  %ptridx7.i132 = getelementptr inbounds ptr, ptr %92, i64 %95
  %96 = load ptr, ptr %ptridx7.i132, align 8
  %.not30.i133 = icmp eq ptr %96, null
  br i1 %.not30.i133, label %ifend33, label %while.entry.i122

Map_string_ClassId____getitem__.exit:             ; preds = %while.end.i131
  %memberidx15.i136 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %.pre365.pre, i64 0, i32 1
  %97 = load ptr, ptr %memberidx15.i136, align 8
  %.not83 = icmp eq ptr %97, null
  br i1 %.not83, label %ifend33, label %if.entry31

if.entry31:                                       ; preds = %Map_string_ClassId____getitem__.exit
  %98 = load ptr, ptr %0, align 8
  %99 = load i64, ptr %memberidx.i.i.i138, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %98, i64 0, i32 1
  %100 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %100, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %101, i64 %99
  %102 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx1.i.i139 = getelementptr inbounds %Module, ptr %102, i64 0, i32 6
  %103 = load ptr, ptr %memberidx1.i.i139, align 8
  %104 = load i64, ptr %103, align 4
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %101, i64 %104
  %105 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i140 = getelementptr inbounds %Module, ptr %105, i64 0, i32 8
  %106 = load ptr, ptr %memberidx2.i.i.i140, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ScopeId, ptr %103, i64 0, i32 1
  %107 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Scope_, ptr %106, i64 0, i32 1
  %108 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %108, i64 %107
  %109 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i141 = getelementptr inbounds %Scope, ptr %109, i64 0, i32 2
  %110 = load ptr, ptr %memberidx.i141, align 8
  tail call fastcc void @Map_string_ClassId____setitem__(ptr %110, ptr %ternary, ptr nonnull %97)
  %memberidx1.i142 = getelementptr inbounds %Scope, ptr %109, i64 0, i32 1
  %111 = load ptr, ptr %memberidx1.i142, align 8
  %112 = tail call ptr @malloc(i32 24)
  %113 = load i64, ptr %97, align 4
  %memberidx1.i5.i = getelementptr inbounds %TypeId, ptr %97, i64 0, i32 2
  %114 = load i64, ptr %memberidx1.i5.i, align 4
  store i64 3, ptr %112, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %112, i64 0, i32 1
  store i64 %113, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i6.i = getelementptr inbounds %VarId, ptr %112, i64 0, i32 2
  store i64 %114, ptr %memberidx2.i.i6.i, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %111, ptr %ternary, ptr nonnull %112)
  br label %for.incr

ifend33:                                          ; preds = %else.i134, %ifend29, %while.end.i131, %Map_string_ClassId____getitem__.exit
  %115 = load ptr, ptr %memberidx34, align 8
  %116 = tail call fastcc i64 @Map_string_EnumId__hash_fnc(ptr %50)
  %memberidx.i143 = getelementptr inbounds %Map_string_EnumId_, ptr %115, i64 0, i32 1
  %117 = load i64, ptr %memberidx.i143, align 4
  %118 = urem i64 %116, %117
  %119 = load ptr, ptr %115, align 8
  %ptridx.i144 = getelementptr inbounds ptr, ptr %119, i64 %118
  %120 = load ptr, ptr %ptridx.i144, align 8
  %.not.i145 = icmp eq ptr %120, null
  br i1 %.not.i145, label %ifend37, label %while.entry.i151.preheader

while.entry.i151.preheader:                       ; preds = %ifend33
  %memberidx1.i.i149 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  %memberidx3.i.i153 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  br label %while.entry.i151

while.entry.i151:                                 ; preds = %while.entry.i151.preheader, %else.i163
  %121 = phi ptr [ %131, %else.i163 ], [ %119, %while.entry.i151.preheader ]
  %122 = phi i64 [ %132, %else.i163 ], [ %117, %while.entry.i151.preheader ]
  %123 = phi ptr [ %135, %else.i163 ], [ %120, %while.entry.i151.preheader ]
  %hash.0.i146 = phi i64 [ %134, %else.i163 ], [ %118, %while.entry.i151.preheader ]
  %124 = load ptr, ptr %123, align 8
  %memberidx.i.i148 = getelementptr inbounds %string, ptr %124, i64 0, i32 2
  %125 = load i64, ptr %memberidx.i.i148, align 4
  %126 = load i64, ptr %memberidx1.i.i149, align 4
  %.not.i.i150 = icmp eq i64 %125, %126
  br i1 %.not.i.i150, label %ifend.i.i154, label %else.i163

ifend.i.i154:                                     ; preds = %while.entry.i151
  %memberidx2.i.i152 = getelementptr inbounds %string, ptr %124, i64 0, i32 1
  %127 = load ptr, ptr %memberidx2.i.i152, align 8
  %128 = load ptr, ptr %memberidx3.i.i153, align 8
  %129 = tail call i64 @memcmp(ptr %127, ptr %128, i64 %125)
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %while.end.i160, label %ifend.i.i154.else.i163_crit_edge

ifend.i.i154.else.i163_crit_edge:                 ; preds = %ifend.i.i154
  %.pre366 = load i64, ptr %memberidx.i143, align 4
  %.pre367 = load ptr, ptr %115, align 8
  br label %else.i163

while.end.i160:                                   ; preds = %ifend.i.i154
  %.pre368.pre = load ptr, ptr %115, align 8
  %ptridx9.i158.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre368.pre, i64 %hash.0.i146
  %.pre369.pre = load ptr, ptr %ptridx9.i158.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i159 = icmp eq ptr %.pre369.pre, null
  br i1 %.not29.i159, label %ifend37, label %Map_string_EnumId____getitem__.exit

else.i163:                                        ; preds = %ifend.i.i154.else.i163_crit_edge, %while.entry.i151
  %131 = phi ptr [ %.pre367, %ifend.i.i154.else.i163_crit_edge ], [ %121, %while.entry.i151 ]
  %132 = phi i64 [ %.pre366, %ifend.i.i154.else.i163_crit_edge ], [ %122, %while.entry.i151 ]
  %133 = add nuw i64 %hash.0.i146, 1
  %134 = urem i64 %133, %132
  %ptridx7.i161 = getelementptr inbounds ptr, ptr %131, i64 %134
  %135 = load ptr, ptr %ptridx7.i161, align 8
  %.not30.i162 = icmp eq ptr %135, null
  br i1 %.not30.i162, label %ifend37, label %while.entry.i151

Map_string_EnumId____getitem__.exit:              ; preds = %while.end.i160
  %memberidx15.i165 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %.pre369.pre, i64 0, i32 1
  %136 = load ptr, ptr %memberidx15.i165, align 8
  %.not84 = icmp eq ptr %136, null
  br i1 %.not84, label %ifend37, label %if.entry35

if.entry35:                                       ; preds = %Map_string_EnumId____getitem__.exit
  %137 = load ptr, ptr %0, align 8
  %138 = load i64, ptr %memberidx.i.i.i138, align 4
  %memberidx1.i.i.i.i168 = getelementptr inbounds %Program, ptr %137, i64 0, i32 1
  %139 = load ptr, ptr %memberidx1.i.i.i.i168, align 8
  %memberidx.i.i.i.i.i169 = getelementptr inbounds %Array_Module_, ptr %139, i64 0, i32 1
  %140 = load ptr, ptr %memberidx.i.i.i.i.i169, align 8
  %ptridx.i.i.i.i.i170 = getelementptr inbounds ptr, ptr %140, i64 %138
  %141 = load ptr, ptr %ptridx.i.i.i.i.i170, align 8
  %memberidx1.i.i171 = getelementptr inbounds %Module, ptr %141, i64 0, i32 6
  %142 = load ptr, ptr %memberidx1.i.i171, align 8
  %143 = load i64, ptr %142, align 4
  %ptridx.i.i.i.i174 = getelementptr inbounds ptr, ptr %140, i64 %143
  %144 = load ptr, ptr %ptridx.i.i.i.i174, align 8
  %memberidx2.i.i.i175 = getelementptr inbounds %Module, ptr %144, i64 0, i32 8
  %145 = load ptr, ptr %memberidx2.i.i.i175, align 8
  %memberidx3.i.i.i176 = getelementptr inbounds %ScopeId, ptr %142, i64 0, i32 1
  %146 = load i64, ptr %memberidx3.i.i.i176, align 4
  %memberidx.i5.i.i.i177 = getelementptr inbounds %Array_Scope_, ptr %145, i64 0, i32 1
  %147 = load ptr, ptr %memberidx.i5.i.i.i177, align 8
  %ptridx.i6.i.i.i178 = getelementptr inbounds ptr, ptr %147, i64 %146
  %148 = load ptr, ptr %ptridx.i6.i.i.i178, align 8
  %memberidx.i179 = getelementptr inbounds %Scope, ptr %148, i64 0, i32 4
  %149 = load ptr, ptr %memberidx.i179, align 8
  tail call fastcc void @Map_string_EnumId____setitem__(ptr %149, ptr %ternary, ptr nonnull %136)
  %memberidx1.i180 = getelementptr inbounds %Scope, ptr %148, i64 0, i32 1
  %150 = load ptr, ptr %memberidx1.i180, align 8
  %151 = tail call ptr @malloc(i32 24)
  %152 = load i64, ptr %136, align 4
  %memberidx1.i5.i181 = getelementptr inbounds %TypeId, ptr %136, i64 0, i32 2
  %153 = load i64, ptr %memberidx1.i5.i181, align 4
  store i64 4, ptr %151, align 4
  %memberidx1.i.i.i182 = getelementptr inbounds %VarId, ptr %151, i64 0, i32 1
  store i64 %152, ptr %memberidx1.i.i.i182, align 4
  %memberidx2.i.i6.i183 = getelementptr inbounds %VarId, ptr %151, i64 0, i32 2
  store i64 %153, ptr %memberidx2.i.i6.i183, align 4
  tail call fastcc void @Map_string_VarId____setitem__(ptr %150, ptr %ternary, ptr nonnull %151)
  br label %for.incr

ifend37:                                          ; preds = %else.i163, %ifend33, %while.end.i160, %Map_string_EnumId____getitem__.exit
  %154 = load ptr, ptr %memberidx38, align 8
  %155 = tail call fastcc i64 @Map_string_VarId__hash_fnc(ptr %50)
  %memberidx.i184 = getelementptr inbounds %Map_string_VarId_, ptr %154, i64 0, i32 1
  %156 = load i64, ptr %memberidx.i184, align 4
  %157 = urem i64 %155, %156
  %158 = load ptr, ptr %154, align 8
  %ptridx.i185 = getelementptr inbounds ptr, ptr %158, i64 %157
  %159 = load ptr, ptr %ptridx.i185, align 8
  %.not.i186 = icmp eq ptr %159, null
  br i1 %.not.i186, label %ifend41, label %while.entry.i192.preheader

while.entry.i192.preheader:                       ; preds = %ifend37
  %memberidx1.i.i190 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  %memberidx3.i.i194 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  br label %while.entry.i192

while.entry.i192:                                 ; preds = %while.entry.i192.preheader, %else.i204
  %160 = phi ptr [ %170, %else.i204 ], [ %158, %while.entry.i192.preheader ]
  %161 = phi i64 [ %171, %else.i204 ], [ %156, %while.entry.i192.preheader ]
  %162 = phi ptr [ %174, %else.i204 ], [ %159, %while.entry.i192.preheader ]
  %hash.0.i187 = phi i64 [ %173, %else.i204 ], [ %157, %while.entry.i192.preheader ]
  %163 = load ptr, ptr %162, align 8
  %memberidx.i.i189 = getelementptr inbounds %string, ptr %163, i64 0, i32 2
  %164 = load i64, ptr %memberidx.i.i189, align 4
  %165 = load i64, ptr %memberidx1.i.i190, align 4
  %.not.i.i191 = icmp eq i64 %164, %165
  br i1 %.not.i.i191, label %ifend.i.i195, label %else.i204

ifend.i.i195:                                     ; preds = %while.entry.i192
  %memberidx2.i.i193 = getelementptr inbounds %string, ptr %163, i64 0, i32 1
  %166 = load ptr, ptr %memberidx2.i.i193, align 8
  %167 = load ptr, ptr %memberidx3.i.i194, align 8
  %168 = tail call i64 @memcmp(ptr %166, ptr %167, i64 %164)
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %while.end.i201, label %ifend.i.i195.else.i204_crit_edge

ifend.i.i195.else.i204_crit_edge:                 ; preds = %ifend.i.i195
  %.pre370 = load i64, ptr %memberidx.i184, align 4
  %.pre371 = load ptr, ptr %154, align 8
  br label %else.i204

while.end.i201:                                   ; preds = %ifend.i.i195
  %.pre372.pre = load ptr, ptr %154, align 8
  %ptridx9.i199.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre372.pre, i64 %hash.0.i187
  %.pre373.pre = load ptr, ptr %ptridx9.i199.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i200 = icmp eq ptr %.pre373.pre, null
  br i1 %.not29.i200, label %ifend41, label %Map_string_VarId____getitem__.exit

else.i204:                                        ; preds = %ifend.i.i195.else.i204_crit_edge, %while.entry.i192
  %170 = phi ptr [ %.pre371, %ifend.i.i195.else.i204_crit_edge ], [ %160, %while.entry.i192 ]
  %171 = phi i64 [ %.pre370, %ifend.i.i195.else.i204_crit_edge ], [ %161, %while.entry.i192 ]
  %172 = add nuw i64 %hash.0.i187, 1
  %173 = urem i64 %172, %171
  %ptridx7.i202 = getelementptr inbounds ptr, ptr %170, i64 %173
  %174 = load ptr, ptr %ptridx7.i202, align 8
  %.not30.i203 = icmp eq ptr %174, null
  br i1 %.not30.i203, label %ifend41, label %while.entry.i192

Map_string_VarId____getitem__.exit:               ; preds = %while.end.i201
  %memberidx15.i206 = getelementptr inbounds %MapEntry_string_VarId_, ptr %.pre373.pre, i64 0, i32 1
  %175 = load ptr, ptr %memberidx15.i206, align 8
  %.not85 = icmp eq ptr %175, null
  br i1 %.not85, label %ifend41, label %if.entry39

if.entry39:                                       ; preds = %Map_string_VarId____getitem__.exit
  %176 = load ptr, ptr %0, align 8
  %177 = load i64, ptr %memberidx.i.i.i138, align 4
  %memberidx1.i.i.i.i209 = getelementptr inbounds %Program, ptr %176, i64 0, i32 1
  %178 = load ptr, ptr %memberidx1.i.i.i.i209, align 8
  %memberidx.i.i.i.i.i210 = getelementptr inbounds %Array_Module_, ptr %178, i64 0, i32 1
  %179 = load ptr, ptr %memberidx.i.i.i.i.i210, align 8
  %ptridx.i.i.i.i.i211 = getelementptr inbounds ptr, ptr %179, i64 %177
  %180 = load ptr, ptr %ptridx.i.i.i.i.i211, align 8
  %memberidx1.i.i212 = getelementptr inbounds %Module, ptr %180, i64 0, i32 6
  %181 = load ptr, ptr %memberidx1.i.i212, align 8
  %182 = load i64, ptr %181, align 4
  %ptridx.i.i.i.i215 = getelementptr inbounds ptr, ptr %179, i64 %182
  %183 = load ptr, ptr %ptridx.i.i.i.i215, align 8
  %memberidx2.i.i.i216 = getelementptr inbounds %Module, ptr %183, i64 0, i32 8
  %184 = load ptr, ptr %memberidx2.i.i.i216, align 8
  %memberidx3.i.i.i217 = getelementptr inbounds %ScopeId, ptr %181, i64 0, i32 1
  %185 = load i64, ptr %memberidx3.i.i.i217, align 4
  %memberidx.i5.i.i.i218 = getelementptr inbounds %Array_Scope_, ptr %184, i64 0, i32 1
  %186 = load ptr, ptr %memberidx.i5.i.i.i218, align 8
  %ptridx.i6.i.i.i219 = getelementptr inbounds ptr, ptr %186, i64 %185
  %187 = load ptr, ptr %ptridx.i6.i.i.i219, align 8
  %memberidx.i220 = getelementptr inbounds %Scope, ptr %187, i64 0, i32 1
  %188 = load ptr, ptr %memberidx.i220, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %188, ptr %ternary, ptr nonnull %175)
  br label %for.incr

ifend41:                                          ; preds = %else.i204, %ifend37, %while.end.i201, %Map_string_VarId____getitem__.exit
  %189 = load ptr, ptr %memberidx42, align 8
  %190 = tail call fastcc i64 @Map_string_VarId__hash_fnc(ptr %50)
  %memberidx.i221 = getelementptr inbounds %Map_string_VarId_, ptr %189, i64 0, i32 1
  %191 = load i64, ptr %memberidx.i221, align 4
  %192 = urem i64 %190, %191
  %193 = load ptr, ptr %189, align 8
  %ptridx.i222 = getelementptr inbounds ptr, ptr %193, i64 %192
  %194 = load ptr, ptr %ptridx.i222, align 8
  %.not.i223 = icmp eq ptr %194, null
  br i1 %.not.i223, label %ifend45, label %while.entry.i229.preheader

while.entry.i229.preheader:                       ; preds = %ifend41
  %memberidx1.i.i227 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  %memberidx3.i.i231 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  br label %while.entry.i229

while.entry.i229:                                 ; preds = %while.entry.i229.preheader, %else.i241
  %195 = phi ptr [ %205, %else.i241 ], [ %193, %while.entry.i229.preheader ]
  %196 = phi i64 [ %206, %else.i241 ], [ %191, %while.entry.i229.preheader ]
  %197 = phi ptr [ %209, %else.i241 ], [ %194, %while.entry.i229.preheader ]
  %hash.0.i224 = phi i64 [ %208, %else.i241 ], [ %192, %while.entry.i229.preheader ]
  %198 = load ptr, ptr %197, align 8
  %memberidx.i.i226 = getelementptr inbounds %string, ptr %198, i64 0, i32 2
  %199 = load i64, ptr %memberidx.i.i226, align 4
  %200 = load i64, ptr %memberidx1.i.i227, align 4
  %.not.i.i228 = icmp eq i64 %199, %200
  br i1 %.not.i.i228, label %ifend.i.i232, label %else.i241

ifend.i.i232:                                     ; preds = %while.entry.i229
  %memberidx2.i.i230 = getelementptr inbounds %string, ptr %198, i64 0, i32 1
  %201 = load ptr, ptr %memberidx2.i.i230, align 8
  %202 = load ptr, ptr %memberidx3.i.i231, align 8
  %203 = tail call i64 @memcmp(ptr %201, ptr %202, i64 %199)
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %while.end.i238, label %ifend.i.i232.else.i241_crit_edge

ifend.i.i232.else.i241_crit_edge:                 ; preds = %ifend.i.i232
  %.pre374 = load i64, ptr %memberidx.i221, align 4
  %.pre375 = load ptr, ptr %189, align 8
  br label %else.i241

while.end.i238:                                   ; preds = %ifend.i.i232
  %.pre376.pre = load ptr, ptr %189, align 8
  %ptridx9.i236.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre376.pre, i64 %hash.0.i224
  %.pre377.pre = load ptr, ptr %ptridx9.i236.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i237 = icmp eq ptr %.pre377.pre, null
  br i1 %.not29.i237, label %ifend45, label %Map_string_VarId____getitem__.exit245

else.i241:                                        ; preds = %ifend.i.i232.else.i241_crit_edge, %while.entry.i229
  %205 = phi ptr [ %.pre375, %ifend.i.i232.else.i241_crit_edge ], [ %195, %while.entry.i229 ]
  %206 = phi i64 [ %.pre374, %ifend.i.i232.else.i241_crit_edge ], [ %196, %while.entry.i229 ]
  %207 = add nuw i64 %hash.0.i224, 1
  %208 = urem i64 %207, %206
  %ptridx7.i239 = getelementptr inbounds ptr, ptr %205, i64 %208
  %209 = load ptr, ptr %ptridx7.i239, align 8
  %.not30.i240 = icmp eq ptr %209, null
  br i1 %.not30.i240, label %ifend45, label %while.entry.i229

Map_string_VarId____getitem__.exit245:            ; preds = %while.end.i238
  %memberidx15.i243 = getelementptr inbounds %MapEntry_string_VarId_, ptr %.pre377.pre, i64 0, i32 1
  %210 = load ptr, ptr %memberidx15.i243, align 8
  %.not86 = icmp eq ptr %210, null
  br i1 %.not86, label %ifend45, label %if.entry43

if.entry43:                                       ; preds = %Map_string_VarId____getitem__.exit245
  %211 = load ptr, ptr %0, align 8
  %212 = load i64, ptr %memberidx.i.i.i138, align 4
  %memberidx1.i.i.i.i247 = getelementptr inbounds %Program, ptr %211, i64 0, i32 1
  %213 = load ptr, ptr %memberidx1.i.i.i.i247, align 8
  %memberidx.i.i.i.i.i248 = getelementptr inbounds %Array_Module_, ptr %213, i64 0, i32 1
  %214 = load ptr, ptr %memberidx.i.i.i.i.i248, align 8
  %ptridx.i.i.i.i.i249 = getelementptr inbounds ptr, ptr %214, i64 %212
  %215 = load ptr, ptr %ptridx.i.i.i.i.i249, align 8
  %memberidx1.i.i250 = getelementptr inbounds %Module, ptr %215, i64 0, i32 6
  %216 = load ptr, ptr %memberidx1.i.i250, align 8
  %217 = load i64, ptr %216, align 4
  %ptridx.i.i.i.i253 = getelementptr inbounds ptr, ptr %214, i64 %217
  %218 = load ptr, ptr %ptridx.i.i.i.i253, align 8
  %memberidx2.i.i.i254 = getelementptr inbounds %Module, ptr %218, i64 0, i32 8
  %219 = load ptr, ptr %memberidx2.i.i.i254, align 8
  %memberidx3.i.i.i255 = getelementptr inbounds %ScopeId, ptr %216, i64 0, i32 1
  %220 = load i64, ptr %memberidx3.i.i.i255, align 4
  %memberidx.i5.i.i.i256 = getelementptr inbounds %Array_Scope_, ptr %219, i64 0, i32 1
  %221 = load ptr, ptr %memberidx.i5.i.i.i256, align 8
  %ptridx.i6.i.i.i257 = getelementptr inbounds ptr, ptr %221, i64 %220
  %222 = load ptr, ptr %ptridx.i6.i.i.i257, align 8
  %memberidx.i258 = getelementptr inbounds %Scope, ptr %222, i64 0, i32 3
  %223 = load ptr, ptr %memberidx.i258, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %223, ptr %ternary, ptr nonnull %210)
  br label %for.incr

ifend45:                                          ; preds = %else.i241, %ifend41, %while.end.i238, %Map_string_VarId____getitem__.exit245
  %224 = load ptr, ptr %memberidx46, align 8
  %225 = tail call fastcc i64 @Map_string_Type__hash_fnc(ptr %50)
  %memberidx.i259 = getelementptr inbounds %Map_string_Type_, ptr %224, i64 0, i32 1
  %226 = load i64, ptr %memberidx.i259, align 4
  %227 = urem i64 %225, %226
  %228 = load ptr, ptr %224, align 8
  %ptridx.i260 = getelementptr inbounds ptr, ptr %228, i64 %227
  %229 = load ptr, ptr %ptridx.i260, align 8
  %.not.i261 = icmp eq ptr %229, null
  br i1 %.not.i261, label %else48, label %while.entry.i267.preheader

while.entry.i267.preheader:                       ; preds = %ifend45
  %memberidx1.i.i265 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  %memberidx3.i.i269 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  br label %while.entry.i267

while.entry.i267:                                 ; preds = %while.entry.i267.preheader, %else.i279
  %230 = phi ptr [ %240, %else.i279 ], [ %228, %while.entry.i267.preheader ]
  %231 = phi i64 [ %241, %else.i279 ], [ %226, %while.entry.i267.preheader ]
  %232 = phi ptr [ %244, %else.i279 ], [ %229, %while.entry.i267.preheader ]
  %hash.0.i262 = phi i64 [ %243, %else.i279 ], [ %227, %while.entry.i267.preheader ]
  %233 = load ptr, ptr %232, align 8
  %memberidx.i.i264 = getelementptr inbounds %string, ptr %233, i64 0, i32 2
  %234 = load i64, ptr %memberidx.i.i264, align 4
  %235 = load i64, ptr %memberidx1.i.i265, align 4
  %.not.i.i266 = icmp eq i64 %234, %235
  br i1 %.not.i.i266, label %ifend.i.i270, label %else.i279

ifend.i.i270:                                     ; preds = %while.entry.i267
  %memberidx2.i.i268 = getelementptr inbounds %string, ptr %233, i64 0, i32 1
  %236 = load ptr, ptr %memberidx2.i.i268, align 8
  %237 = load ptr, ptr %memberidx3.i.i269, align 8
  %238 = tail call i64 @memcmp(ptr %236, ptr %237, i64 %234)
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %while.end.i276, label %ifend.i.i270.else.i279_crit_edge

ifend.i.i270.else.i279_crit_edge:                 ; preds = %ifend.i.i270
  %.pre378 = load i64, ptr %memberidx.i259, align 4
  %.pre379 = load ptr, ptr %224, align 8
  br label %else.i279

while.end.i276:                                   ; preds = %ifend.i.i270
  %.pre380.pre = load ptr, ptr %224, align 8
  %ptridx9.i274.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre380.pre, i64 %hash.0.i262
  %.pre381.pre = load ptr, ptr %ptridx9.i274.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i275 = icmp eq ptr %.pre381.pre, null
  br i1 %.not29.i275, label %else48, label %Map_string_Type____getitem__.exit

else.i279:                                        ; preds = %ifend.i.i270.else.i279_crit_edge, %while.entry.i267
  %240 = phi ptr [ %.pre379, %ifend.i.i270.else.i279_crit_edge ], [ %230, %while.entry.i267 ]
  %241 = phi i64 [ %.pre378, %ifend.i.i270.else.i279_crit_edge ], [ %231, %while.entry.i267 ]
  %242 = add nuw i64 %hash.0.i262, 1
  %243 = urem i64 %242, %241
  %ptridx7.i277 = getelementptr inbounds ptr, ptr %240, i64 %243
  %244 = load ptr, ptr %ptridx7.i277, align 8
  %.not30.i278 = icmp eq ptr %244, null
  br i1 %.not30.i278, label %else48, label %while.entry.i267

Map_string_Type____getitem__.exit:                ; preds = %while.end.i276
  %memberidx15.i281 = getelementptr inbounds %MapEntry_string_Type_, ptr %.pre381.pre, i64 0, i32 1
  %245 = load ptr, ptr %memberidx15.i281, align 8
  %.not87 = icmp eq ptr %245, null
  br i1 %.not87, label %else48, label %if.entry47

if.entry47:                                       ; preds = %Map_string_Type____getitem__.exit
  %246 = load ptr, ptr %0, align 8
  %247 = load i64, ptr %memberidx.i.i.i138, align 4
  %memberidx1.i.i.i.i284 = getelementptr inbounds %Program, ptr %246, i64 0, i32 1
  %248 = load ptr, ptr %memberidx1.i.i.i.i284, align 8
  %memberidx.i.i.i.i.i285 = getelementptr inbounds %Array_Module_, ptr %248, i64 0, i32 1
  %249 = load ptr, ptr %memberidx.i.i.i.i.i285, align 8
  %ptridx.i.i.i.i.i286 = getelementptr inbounds ptr, ptr %249, i64 %247
  %250 = load ptr, ptr %ptridx.i.i.i.i.i286, align 8
  %memberidx1.i.i287 = getelementptr inbounds %Module, ptr %250, i64 0, i32 6
  %251 = load ptr, ptr %memberidx1.i.i287, align 8
  %252 = load i64, ptr %251, align 4
  %ptridx.i.i.i.i290 = getelementptr inbounds ptr, ptr %249, i64 %252
  %253 = load ptr, ptr %ptridx.i.i.i.i290, align 8
  %memberidx2.i.i.i291 = getelementptr inbounds %Module, ptr %253, i64 0, i32 8
  %254 = load ptr, ptr %memberidx2.i.i.i291, align 8
  %memberidx3.i.i.i292 = getelementptr inbounds %ScopeId, ptr %251, i64 0, i32 1
  %255 = load i64, ptr %memberidx3.i.i.i292, align 4
  %memberidx.i5.i.i.i293 = getelementptr inbounds %Array_Scope_, ptr %254, i64 0, i32 1
  %256 = load ptr, ptr %memberidx.i5.i.i.i293, align 8
  %ptridx.i6.i.i.i294 = getelementptr inbounds ptr, ptr %256, i64 %255
  %257 = load ptr, ptr %ptridx.i6.i.i.i294, align 8
  %memberidx.i295 = getelementptr inbounds %Scope, ptr %257, i64 0, i32 6
  %258 = load ptr, ptr %memberidx.i295, align 8
  tail call fastcc void @Map_string_Type____setitem__(ptr %258, ptr %ternary, ptr nonnull %245)
  br label %for.incr

else48:                                           ; preds = %ifend45, %while.end.i276, %Map_string_Type____getitem__.exit, %else.i279
  store i1 false, ptr %44, align 1
  %259 = load ptr, ptr %50, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %259, i64 0, i32 5
  %260 = load ptr, ptr %memberidx50, align 8
  %261 = tail call ptr %260(ptr nonnull %50)
  %262 = load ptr, ptr %23, align 8
  %memberidx51 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %262, i64 0, i32 5
  %263 = load ptr, ptr %memberidx51, align 8
  %264 = tail call ptr %263(ptr nonnull %23)
  %265 = alloca ptr, align 8
  %266 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %265, ptr nonnull @94, ptr %261, ptr %264)
  %267 = load ptr, ptr %265, align 8
  %268 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %268, align 8
  %memberidx.i296 = getelementptr inbounds %string, ptr %268, i64 0, i32 1
  store ptr %267, ptr %memberidx.i296, align 8
  %memberidx1.i297 = getelementptr inbounds %string, ptr %268, i64 0, i32 2
  store i64 %266, ptr %memberidx1.i297, align 4
  %memberidx2.i298 = getelementptr inbounds %string, ptr %268, i64 0, i32 3
  store i64 %266, ptr %memberidx2.i298, align 4
  tail call void @free(ptr %261)
  tail call void @free(ptr %264)
  %269 = load ptr, ptr %storemerge354, align 8
  %memberidx53 = getelementptr inbounds %Token, ptr %269, i64 0, i32 1
  %270 = load ptr, ptr %memberidx53, align 8
  %271 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i300 = getelementptr inbounds %Compiler, ptr %271, i64 0, i32 6
  %272 = load ptr, ptr %memberidx1.i300, align 8
  %273 = call ptr @malloc(i32 24)
  store i64 1, ptr %273, align 4
  %memberidx1.i.i301 = getelementptr inbounds %FloError, ptr %273, i64 0, i32 2
  store ptr %270, ptr %memberidx1.i.i301, align 8
  %memberidx2.i.i302 = getelementptr inbounds %FloError, ptr %273, i64 0, i32 1
  store ptr %268, ptr %memberidx2.i.i302, align 8
  %memberidx.i.i303 = getelementptr inbounds %Array_FloError_, ptr %272, i64 0, i32 2
  %274 = load i64, ptr %memberidx.i.i303, align 4
  %memberidx1.i2.i304 = getelementptr inbounds %Array_FloError_, ptr %272, i64 0, i32 3
  %275 = load i64, ptr %memberidx1.i2.i304, align 4
  %.not.i.i305 = icmp slt i64 %274, %275
  br i1 %.not.i.i305, label %else48.TypeChecker_error.exit311_crit_edge, label %if.entry.i.i308

else48.TypeChecker_error.exit311_crit_edge:       ; preds = %else48
  %memberidx4.i.i309.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %272, i64 0, i32 1
  %.pre383 = load ptr, ptr %memberidx4.i.i309.phi.trans.insert, align 8
  br label %TypeChecker_error.exit311

if.entry.i.i308:                                  ; preds = %else48
  %276 = shl nuw i64 %275, 1
  store i64 %276, ptr %memberidx1.i2.i304, align 4
  %memberidx2.i.i.i307 = getelementptr inbounds %Array_FloError_, ptr %272, i64 0, i32 1
  %277 = load ptr, ptr %memberidx2.i.i.i307, align 8
  %278 = shl i64 %275, 4
  %279 = call ptr @realloc(ptr %277, i64 %278)
  store ptr %279, ptr %memberidx2.i.i.i307, align 8
  %.pre382 = load i64, ptr %memberidx.i.i303, align 4
  br label %TypeChecker_error.exit311

TypeChecker_error.exit311:                        ; preds = %else48.TypeChecker_error.exit311_crit_edge, %if.entry.i.i308
  %280 = phi ptr [ %.pre383, %else48.TypeChecker_error.exit311_crit_edge ], [ %279, %if.entry.i.i308 ]
  %281 = phi i64 [ %274, %else48.TypeChecker_error.exit311_crit_edge ], [ %.pre382, %if.entry.i.i308 ]
  %282 = add nsw i64 %281, 1
  store i64 %282, ptr %memberidx.i.i303, align 4
  %ptridx.i.i310 = getelementptr inbounds ptr, ptr %280, i64 %281
  store ptr %273, ptr %ptridx.i.i310, align 8
  br label %common.ret

if.entry55:                                       ; preds = %else17
  %memberidx59 = getelementptr inbounds %IdentifierToken, ptr %43, i64 0, i32 2
  %283 = load ptr, ptr %memberidx59, align 8
  %memberidx.i.i312 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %284 = load i64, ptr %memberidx.i.i312, align 4
  %ptridx.i.i.i.i315 = getelementptr inbounds ptr, ptr %34, i64 %284
  %285 = load ptr, ptr %ptridx.i.i.i.i315, align 8
  %memberidx1.i316 = getelementptr inbounds %Module, ptr %285, i64 0, i32 6
  %286 = load ptr, ptr %memberidx1.i316, align 8
  %287 = load i64, ptr %286, align 4
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %34, i64 %287
  %288 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i318 = getelementptr inbounds %Module, ptr %288, i64 0, i32 8
  %289 = load ptr, ptr %memberidx2.i.i318, align 8
  %memberidx3.i.i319 = getelementptr inbounds %ScopeId, ptr %286, i64 0, i32 1
  %290 = load i64, ptr %memberidx3.i.i319, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %289, i64 0, i32 1
  %291 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %291, i64 %290
  %292 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx60 = getelementptr inbounds %Scope, ptr %292, i64 0, i32 1
  %293 = load ptr, ptr %memberidx60, align 8
  %294 = tail call ptr @malloc(i32 32)
  %295 = load ptr, ptr %39, align 8
  %296 = load i64, ptr %295, align 4
  %memberidx1.i320 = getelementptr inbounds %ScopeId, ptr %295, i64 0, i32 1
  %297 = load i64, ptr %memberidx1.i320, align 4
  store i64 5, ptr %294, align 4
  %memberidx1.i.i321 = getelementptr inbounds %VarId, ptr %294, i64 0, i32 1
  store i64 %296, ptr %memberidx1.i.i321, align 4
  %memberidx2.i.i322 = getelementptr inbounds %VarId, ptr %294, i64 0, i32 2
  store i64 %297, ptr %memberidx2.i.i322, align 4
  %memberidx2.i323 = getelementptr inbounds %ModuleVarId, ptr %294, i64 0, i32 3
  store ptr %295, ptr %memberidx2.i323, align 8
  tail call fastcc void @Map_string_VarId____setitem__(ptr %293, ptr %283, ptr nonnull %294)
  br label %common.ret

else56:                                           ; preds = %else17
  tail call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %0, ptr nonnull %25)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_member_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %3, align 4
  %memberidx = getelementptr inbounds %MemberExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %TypeChecker_error.exit412, %if.entry83, %TypeChecker_error.exit392, %Array_Expression____sl__.exit, %TypeChecker_error.exit305, %TypeChecker_error.exit266, %TypeChecker_error.exit253, %TypeChecker_error.exit165, %TypeChecker_error.exit, %ifend6
  %common.ret.op = phi ptr [ %19, %ifend6 ], [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit165 ], [ null, %TypeChecker_error.exit253 ], [ null, %TypeChecker_error.exit266 ], [ null, %TypeChecker_error.exit305 ], [ %281, %Array_Expression____sl__.exit ], [ null, %TypeChecker_error.exit392 ], [ %341, %if.entry83 ], [ null, %TypeChecker_error.exit412 ], [ null, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %MemberExpressionNode, ptr %1, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %13, align 4
  %14 = load i64, ptr %10, align 4
  switch i64 %14, label %else84 [
    i64 19, label %if.entry.i2
    i64 11, label %while.end
    i64 16, label %if.entry27
    i64 13, label %if.entry60
    i64 17, label %if.entry83
  ]

if.entry.i2:                                      ; preds = %ifend, %if.entry.i2
  %.tr5.i = phi ptr [ %15, %if.entry.i2 ], [ %10, %ifend ]
  %memberidx1.i1 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %15 = load ptr, ptr %memberidx1.i1, align 8
  %16 = load i64, ptr %15, align 4
  switch i64 %16, label %else84 [
    i64 19, label %if.entry.i2
    i64 11, label %while.entry
  ]

ifend6:                                           ; preds = %get_class_prop_type.exit289, %ifend53, %get_class_prop_type.exit
  %17 = phi ptr [ %common.ret.op.i276, %get_class_prop_type.exit289 ], [ %266, %ifend53 ], [ %common.ret.op.i169, %get_class_prop_type.exit ]
  %18 = phi ptr [ %152, %get_class_prop_type.exit289 ], [ %179, %ifend53 ], [ %57, %get_class_prop_type.exit ]
  %19 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %19, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %19, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %19, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i138 = getelementptr inbounds %MemberExpression, ptr %19, i64 0, i32 4
  store ptr %5, ptr %memberidx.i138, align 8
  %memberidx1.i139 = getelementptr inbounds %MemberExpression, ptr %19, i64 0, i32 5
  store ptr %18, ptr %memberidx1.i139, align 8
  %memberidx2.i140 = getelementptr inbounds %Expression, ptr %19, i64 0, i32 3
  store ptr %17, ptr %memberidx2.i140, align 8
  br label %common.ret

while.entry:                                      ; preds = %if.entry.i2, %while.entry
  %20 = phi ptr [ %21, %while.entry ], [ %10, %if.entry.i2 ]
  %memberidx8 = getelementptr inbounds %GenericType, ptr %20, i64 0, i32 3
  %21 = load ptr, ptr %memberidx8, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 19
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %ifend
  %24 = phi i64 [ %14, %ifend ], [ %22, %while.entry ]
  %.tr11.i20 = phi ptr [ %10, %ifend ], [ %21, %while.entry ]
  %25 = load ptr, ptr %0, align 8
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i6, %while.end
  %26 = phi i64 [ %24, %while.end ], [ %.pre, %if.entry.i6 ]
  %.tr11.i = phi ptr [ %.tr11.i20, %while.end ], [ %.tr11.i.pre, %if.entry.i6 ]
  switch i64 %26, label %get_class_from_type.exit [
    i64 19, label %if.entry.i6
    i64 11, label %if.entry3.i
  ]

if.entry.i6:                                      ; preds = %tailrecurse.i
  %memberidx1.i5 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  %.tr11.i.pre = load ptr, ptr %memberidx1.i5, align 8
  %.pre = load i64, ptr %.tr11.i.pre, align 4
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i7 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %27 = load ptr, ptr %memberidx6.i7, align 8
  %memberidx.i.i8 = getelementptr inbounds %Program, ptr %25, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i8, align 8
  %29 = load i64, ptr %27, align 4
  %memberidx.i.i.i9 = getelementptr inbounds %Array_Module_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i.i.i9, align 8
  %ptridx.i.i.i10 = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx.i.i.i10, align 8
  %memberidx2.i.i11 = getelementptr inbounds %Module, ptr %31, i64 0, i32 4
  %32 = load ptr, ptr %memberidx2.i.i11, align 8
  %memberidx3.i.i12 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %33 = load i64, ptr %memberidx3.i.i12, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i4 = phi ptr [ %35, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx11 = getelementptr inbounds %Class, ptr %common.ret.op.i4, i64 0, i32 6
  %36 = load ptr, ptr %memberidx11, align 8
  %37 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr %12)
  %memberidx.i141 = getelementptr inbounds %Map_string_PropId_, ptr %36, i64 0, i32 1
  %38 = load i64, ptr %memberidx.i141, align 4
  %39 = urem i64 %37, %38
  %40 = load ptr, ptr %36, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %40, i64 %39
  %41 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %41, null
  br i1 %.not.i, label %if.entry12, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %get_class_from_type.exit
  %memberidx1.i.i143 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %42 = phi ptr [ %52, %else.i ], [ %40, %while.entry.i.preheader ]
  %43 = phi i64 [ %53, %else.i ], [ %38, %while.entry.i.preheader ]
  %44 = phi ptr [ %56, %else.i ], [ %41, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %55, %else.i ], [ %39, %while.entry.i.preheader ]
  %45 = load ptr, ptr %44, align 8
  %memberidx.i.i142 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  %46 = load i64, ptr %memberidx.i.i142, align 4
  %47 = load i64, ptr %memberidx1.i.i143, align 4
  %.not.i.i = icmp eq i64 %46, %47
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i, align 8
  %49 = load ptr, ptr %memberidx3.i.i, align 8
  %50 = tail call i64 @memcmp(ptr %48, ptr %49, i64 %46)
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre21 = load i64, ptr %memberidx.i141, align 4
  %.pre22 = load ptr, ptr %36, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre23.pre = load ptr, ptr %36, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre23.pre, i64 %hash.0.i
  %.pre24.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre24.pre, null
  br i1 %.not29.i, label %if.entry12, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %52 = phi ptr [ %.pre22, %ifend.i.i.else.i_crit_edge ], [ %42, %while.entry.i ]
  %53 = phi i64 [ %.pre21, %ifend.i.i.else.i_crit_edge ], [ %43, %while.entry.i ]
  %54 = add nuw i64 %hash.0.i, 1
  %55 = urem i64 %54, %53
  %ptridx7.i = getelementptr inbounds ptr, ptr %52, i64 %55
  %56 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %56, null
  br i1 %.not30.i, label %if.entry12, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre24.pre, i64 0, i32 1
  %57 = load ptr, ptr %memberidx15.i, align 8
  %58 = icmp eq ptr %57, null
  br i1 %58, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %else.i, %get_class_from_type.exit, %while.end.i, %Map_string_PropId____getitem__.exit
  %59 = load ptr, ptr %12, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 5
  %60 = load ptr, ptr %memberidx15, align 8
  %61 = tail call ptr %60(ptr nonnull %12)
  %memberidx16 = getelementptr inbounds %Class, ptr %common.ret.op.i4, i64 0, i32 1
  %62 = load ptr, ptr %memberidx16, align 8
  %63 = load ptr, ptr %62, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i64 0, i32 5
  %64 = load ptr, ptr %memberidx17, align 8
  %65 = tail call ptr %64(ptr nonnull %62)
  %66 = alloca ptr, align 8
  %67 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %66, ptr nonnull @183, ptr %61, ptr %65)
  %68 = load ptr, ptr %66, align 8
  %69 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %69, align 8
  %memberidx.i144 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  store ptr %68, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  store i64 %67, ptr %memberidx1.i145, align 4
  %memberidx2.i146 = getelementptr inbounds %string, ptr %69, i64 0, i32 3
  store i64 %67, ptr %memberidx2.i146, align 4
  tail call void @free(ptr %61)
  tail call void @free(ptr %65)
  %70 = load ptr, ptr %memberidx2, align 8
  %memberidx19 = getelementptr inbounds %Token, ptr %70, i64 0, i32 1
  %71 = load ptr, ptr %memberidx19, align 8
  %72 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i148 = getelementptr inbounds %Compiler, ptr %72, i64 0, i32 6
  %73 = load ptr, ptr %memberidx1.i148, align 8
  %74 = call ptr @malloc(i32 24)
  store i64 1, ptr %74, align 4
  %memberidx1.i.i149 = getelementptr inbounds %FloError, ptr %74, i64 0, i32 2
  store ptr %71, ptr %memberidx1.i.i149, align 8
  %memberidx2.i.i150 = getelementptr inbounds %FloError, ptr %74, i64 0, i32 1
  store ptr %69, ptr %memberidx2.i.i150, align 8
  %memberidx.i.i151 = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 2
  %75 = load i64, ptr %memberidx.i.i151, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 3
  %76 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i152 = icmp slt i64 %75, %76
  br i1 %.not.i.i152, label %if.entry12.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry12.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry12
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 1
  %.pre28 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry12
  %77 = shl nuw i64 %76, 1
  store i64 %77, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 1
  %78 = load ptr, ptr %memberidx2.i.i.i, align 8
  %79 = shl i64 %76, 4
  %80 = call ptr @realloc(ptr %78, i64 %79)
  store ptr %80, ptr %memberidx2.i.i.i, align 8
  %.pre27 = load i64, ptr %memberidx.i.i151, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry12.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %81 = phi ptr [ %.pre28, %if.entry12.TypeChecker_error.exit_crit_edge ], [ %80, %if.entry.i.i ]
  %82 = phi i64 [ %75, %if.entry12.TypeChecker_error.exit_crit_edge ], [ %.pre27, %if.entry.i.i ]
  %83 = add nsw i64 %82, 1
  store i64 %83, ptr %memberidx.i.i151, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %81, i64 %82
  store ptr %74, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend14:                                          ; preds = %Map_string_PropId____getitem__.exit
  %84 = tail call fastcc ptr @TypeChecker_check_member_access(ptr nonnull %0, ptr nonnull %57)
  %.not137 = icmp eq ptr %84, null
  br i1 %.not137, label %ifend22, label %if.entry20

if.entry20:                                       ; preds = %ifend14
  %85 = load ptr, ptr %memberidx2, align 8
  %memberidx24 = getelementptr inbounds %Token, ptr %85, i64 0, i32 1
  %86 = load ptr, ptr %memberidx24, align 8
  %87 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i154 = getelementptr inbounds %Compiler, ptr %87, i64 0, i32 6
  %88 = load ptr, ptr %memberidx1.i154, align 8
  %89 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %89, align 4
  %memberidx1.i.i155 = getelementptr inbounds %FloError, ptr %89, i64 0, i32 2
  store ptr %86, ptr %memberidx1.i.i155, align 8
  %memberidx2.i.i156 = getelementptr inbounds %FloError, ptr %89, i64 0, i32 1
  store ptr %84, ptr %memberidx2.i.i156, align 8
  %memberidx.i.i157 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 2
  %90 = load i64, ptr %memberidx.i.i157, align 4
  %memberidx1.i2.i158 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 3
  %91 = load i64, ptr %memberidx1.i2.i158, align 4
  %.not.i.i159 = icmp slt i64 %90, %91
  br i1 %.not.i.i159, label %if.entry20.TypeChecker_error.exit165_crit_edge, label %if.entry.i.i162

if.entry20.TypeChecker_error.exit165_crit_edge:   ; preds = %if.entry20
  %memberidx4.i.i163.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 1
  %.pre26 = load ptr, ptr %memberidx4.i.i163.phi.trans.insert, align 8
  br label %TypeChecker_error.exit165

if.entry.i.i162:                                  ; preds = %if.entry20
  %92 = shl nuw i64 %91, 1
  store i64 %92, ptr %memberidx1.i2.i158, align 4
  %memberidx2.i.i.i161 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 1
  %93 = load ptr, ptr %memberidx2.i.i.i161, align 8
  %94 = shl i64 %91, 4
  %95 = tail call ptr @realloc(ptr %93, i64 %94)
  store ptr %95, ptr %memberidx2.i.i.i161, align 8
  %.pre25 = load i64, ptr %memberidx.i.i157, align 4
  br label %TypeChecker_error.exit165

TypeChecker_error.exit165:                        ; preds = %if.entry20.TypeChecker_error.exit165_crit_edge, %if.entry.i.i162
  %96 = phi ptr [ %.pre26, %if.entry20.TypeChecker_error.exit165_crit_edge ], [ %95, %if.entry.i.i162 ]
  %97 = phi i64 [ %90, %if.entry20.TypeChecker_error.exit165_crit_edge ], [ %.pre25, %if.entry.i.i162 ]
  %98 = add nsw i64 %97, 1
  store i64 %98, ptr %memberidx.i.i157, align 4
  %ptridx.i.i164 = getelementptr inbounds ptr, ptr %96, i64 %97
  store ptr %89, ptr %ptridx.i.i164, align 8
  br label %common.ret

ifend22:                                          ; preds = %ifend14
  %99 = load ptr, ptr %0, align 8
  %memberidx.i.i166 = getelementptr inbounds %PropId, ptr %57, i64 0, i32 1
  %100 = load ptr, ptr %memberidx.i.i166, align 8
  %memberidx.i.i.i167 = getelementptr inbounds %Program, ptr %99, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i.i.i167, align 8
  %102 = load i64, ptr %100, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %101, i64 0, i32 1
  %103 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %103, i64 %102
  %104 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i168 = getelementptr inbounds %Module, ptr %104, i64 0, i32 4
  %105 = load ptr, ptr %memberidx2.i.i.i168, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %100, i64 0, i32 2
  %106 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %105, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %107, i64 %106
  %108 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %109 = load i64, ptr %57, align 4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend22
  %memberidx1.i170 = getelementptr inbounds %Class, ptr %108, i64 0, i32 5
  %111 = load ptr, ptr %memberidx1.i170, align 8
  %memberidx2.i171 = getelementptr inbounds %PropId, ptr %57, i64 0, i32 2
  %112 = load i64, ptr %memberidx2.i171, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %111, i64 0, i32 1
  %113 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %113, i64 %112
  %114 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %114, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend22
  %memberidx4.i = getelementptr inbounds %Class, ptr %108, i64 0, i32 4
  %115 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %57, i64 0, i32 2
  %116 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %115, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i172 = getelementptr inbounds ptr, ptr %117, i64 %116
  %118 = load ptr, ptr %ptridx.i.i172, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %118, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i169 = load ptr, ptr %common.ret.op.in.i, align 8
  br label %ifend6

if.entry27:                                       ; preds = %ifend
  %memberidx30 = getelementptr inbounds %VarAccessExpression, ptr %5, i64 0, i32 4
  %119 = load ptr, ptr %memberidx30, align 8
  %120 = load i64, ptr %119, align 4
  %121 = icmp eq i64 %120, 3
  %memberidx.i173 = getelementptr inbounds %VarId, ptr %119, i64 0, i32 1
  %122 = load i64, ptr %memberidx.i173, align 4
  %123 = load ptr, ptr %0, align 8
  %memberidx1.i.i174 = getelementptr inbounds %Program, ptr %123, i64 0, i32 1
  %124 = load ptr, ptr %memberidx1.i.i174, align 8
  %memberidx.i.i.i175 = getelementptr inbounds %Array_Module_, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx.i.i.i175, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %125, i64 %122
  %126 = load ptr, ptr %ptridx.i.i.i, align 8
  br i1 %121, label %if.entry32, label %else33

if.entry32:                                       ; preds = %if.entry27
  %memberidx1.i176 = getelementptr inbounds %Module, ptr %126, i64 0, i32 4
  %127 = load ptr, ptr %memberidx1.i176, align 8
  %memberidx2.i177 = getelementptr inbounds %VarId, ptr %119, i64 0, i32 2
  %128 = load i64, ptr %memberidx2.i177, align 4
  %memberidx.i.i178 = getelementptr inbounds %Array_Class_, ptr %127, i64 0, i32 1
  %129 = load ptr, ptr %memberidx.i.i178, align 8
  %ptridx.i.i179 = getelementptr inbounds ptr, ptr %129, i64 %128
  %130 = load ptr, ptr %ptridx.i.i179, align 8
  %memberidx35 = getelementptr inbounds %Class, ptr %130, i64 0, i32 7
  %131 = load ptr, ptr %memberidx35, align 8
  %132 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr %12)
  %memberidx.i180 = getelementptr inbounds %Map_string_PropId_, ptr %131, i64 0, i32 1
  %133 = load i64, ptr %memberidx.i180, align 4
  %134 = urem i64 %132, %133
  %135 = load ptr, ptr %131, align 8
  %ptridx.i181 = getelementptr inbounds ptr, ptr %135, i64 %134
  %136 = load ptr, ptr %ptridx.i181, align 8
  %.not.i182 = icmp eq ptr %136, null
  br i1 %.not.i182, label %if.entry36, label %while.entry.i188.preheader

while.entry.i188.preheader:                       ; preds = %if.entry32
  %memberidx1.i.i186 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %memberidx3.i.i190 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  br label %while.entry.i188

while.entry.i188:                                 ; preds = %while.entry.i188.preheader, %else.i200
  %137 = phi ptr [ %147, %else.i200 ], [ %135, %while.entry.i188.preheader ]
  %138 = phi i64 [ %148, %else.i200 ], [ %133, %while.entry.i188.preheader ]
  %139 = phi ptr [ %151, %else.i200 ], [ %136, %while.entry.i188.preheader ]
  %hash.0.i183 = phi i64 [ %150, %else.i200 ], [ %134, %while.entry.i188.preheader ]
  %140 = load ptr, ptr %139, align 8
  %memberidx.i.i185 = getelementptr inbounds %string, ptr %140, i64 0, i32 2
  %141 = load i64, ptr %memberidx.i.i185, align 4
  %142 = load i64, ptr %memberidx1.i.i186, align 4
  %.not.i.i187 = icmp eq i64 %141, %142
  br i1 %.not.i.i187, label %ifend.i.i191, label %else.i200

ifend.i.i191:                                     ; preds = %while.entry.i188
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %140, i64 0, i32 1
  %143 = load ptr, ptr %memberidx2.i.i189, align 8
  %144 = load ptr, ptr %memberidx3.i.i190, align 8
  %145 = tail call i64 @memcmp(ptr %143, ptr %144, i64 %141)
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %while.end.i197, label %ifend.i.i191.else.i200_crit_edge

ifend.i.i191.else.i200_crit_edge:                 ; preds = %ifend.i.i191
  %.pre39 = load i64, ptr %memberidx.i180, align 4
  %.pre40 = load ptr, ptr %131, align 8
  br label %else.i200

while.end.i197:                                   ; preds = %ifend.i.i191
  %.pre41.pre = load ptr, ptr %131, align 8
  %ptridx9.i195.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre41.pre, i64 %hash.0.i183
  %.pre42.pre = load ptr, ptr %ptridx9.i195.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i196 = icmp eq ptr %.pre42.pre, null
  br i1 %.not29.i196, label %if.entry36, label %Map_string_PropId____getitem__.exit204

else.i200:                                        ; preds = %ifend.i.i191.else.i200_crit_edge, %while.entry.i188
  %147 = phi ptr [ %.pre40, %ifend.i.i191.else.i200_crit_edge ], [ %137, %while.entry.i188 ]
  %148 = phi i64 [ %.pre39, %ifend.i.i191.else.i200_crit_edge ], [ %138, %while.entry.i188 ]
  %149 = add nuw i64 %hash.0.i183, 1
  %150 = urem i64 %149, %148
  %ptridx7.i198 = getelementptr inbounds ptr, ptr %147, i64 %150
  %151 = load ptr, ptr %ptridx7.i198, align 8
  %.not30.i199 = icmp eq ptr %151, null
  br i1 %.not30.i199, label %if.entry36, label %while.entry.i188

Map_string_PropId____getitem__.exit204:           ; preds = %while.end.i197
  %memberidx15.i202 = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre42.pre, i64 0, i32 1
  %152 = load ptr, ptr %memberidx15.i202, align 8
  %153 = icmp eq ptr %152, null
  br i1 %153, label %if.entry36, label %ifend38

else33:                                           ; preds = %if.entry27
  %memberidx1.i209 = getelementptr inbounds %Module, ptr %126, i64 0, i32 7
  %154 = load ptr, ptr %memberidx1.i209, align 8
  %memberidx2.i210 = getelementptr inbounds %VarId, ptr %119, i64 0, i32 2
  %155 = load i64, ptr %memberidx2.i210, align 4
  %memberidx.i.i211 = getelementptr inbounds %Array_Enum_, ptr %154, i64 0, i32 1
  %156 = load ptr, ptr %memberidx.i.i211, align 8
  %ptridx.i.i212 = getelementptr inbounds ptr, ptr %156, i64 %155
  %157 = load ptr, ptr %ptridx.i.i212, align 8
  %memberidx50 = getelementptr inbounds %Enum, ptr %157, i64 0, i32 3
  %158 = load ptr, ptr %memberidx50, align 8
  %159 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr %12)
  %memberidx.i213 = getelementptr inbounds %Map_string_PropId_, ptr %158, i64 0, i32 1
  %160 = load i64, ptr %memberidx.i213, align 4
  %161 = urem i64 %159, %160
  %162 = load ptr, ptr %158, align 8
  %ptridx.i214 = getelementptr inbounds ptr, ptr %162, i64 %161
  %163 = load ptr, ptr %ptridx.i214, align 8
  %.not.i215 = icmp eq ptr %163, null
  br i1 %.not.i215, label %if.entry51, label %while.entry.i221.preheader

while.entry.i221.preheader:                       ; preds = %else33
  %memberidx1.i.i219 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %memberidx3.i.i223 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  br label %while.entry.i221

while.entry.i221:                                 ; preds = %while.entry.i221.preheader, %else.i233
  %164 = phi ptr [ %174, %else.i233 ], [ %162, %while.entry.i221.preheader ]
  %165 = phi i64 [ %175, %else.i233 ], [ %160, %while.entry.i221.preheader ]
  %166 = phi ptr [ %178, %else.i233 ], [ %163, %while.entry.i221.preheader ]
  %hash.0.i216 = phi i64 [ %177, %else.i233 ], [ %161, %while.entry.i221.preheader ]
  %167 = load ptr, ptr %166, align 8
  %memberidx.i.i218 = getelementptr inbounds %string, ptr %167, i64 0, i32 2
  %168 = load i64, ptr %memberidx.i.i218, align 4
  %169 = load i64, ptr %memberidx1.i.i219, align 4
  %.not.i.i220 = icmp eq i64 %168, %169
  br i1 %.not.i.i220, label %ifend.i.i224, label %else.i233

ifend.i.i224:                                     ; preds = %while.entry.i221
  %memberidx2.i.i222 = getelementptr inbounds %string, ptr %167, i64 0, i32 1
  %170 = load ptr, ptr %memberidx2.i.i222, align 8
  %171 = load ptr, ptr %memberidx3.i.i223, align 8
  %172 = tail call i64 @memcmp(ptr %170, ptr %171, i64 %168)
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %while.end.i230, label %ifend.i.i224.else.i233_crit_edge

ifend.i.i224.else.i233_crit_edge:                 ; preds = %ifend.i.i224
  %.pre33 = load i64, ptr %memberidx.i213, align 4
  %.pre34 = load ptr, ptr %158, align 8
  br label %else.i233

while.end.i230:                                   ; preds = %ifend.i.i224
  %.pre35.pre = load ptr, ptr %158, align 8
  %ptridx9.i228.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre35.pre, i64 %hash.0.i216
  %.pre36.pre = load ptr, ptr %ptridx9.i228.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i229 = icmp eq ptr %.pre36.pre, null
  br i1 %.not29.i229, label %if.entry51, label %Map_string_PropId____getitem__.exit237

else.i233:                                        ; preds = %ifend.i.i224.else.i233_crit_edge, %while.entry.i221
  %174 = phi ptr [ %.pre34, %ifend.i.i224.else.i233_crit_edge ], [ %164, %while.entry.i221 ]
  %175 = phi i64 [ %.pre33, %ifend.i.i224.else.i233_crit_edge ], [ %165, %while.entry.i221 ]
  %176 = add nuw i64 %hash.0.i216, 1
  %177 = urem i64 %176, %175
  %ptridx7.i231 = getelementptr inbounds ptr, ptr %174, i64 %177
  %178 = load ptr, ptr %ptridx7.i231, align 8
  %.not30.i232 = icmp eq ptr %178, null
  br i1 %.not30.i232, label %if.entry51, label %while.entry.i221

Map_string_PropId____getitem__.exit237:           ; preds = %while.end.i230
  %memberidx15.i235 = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre36.pre, i64 0, i32 1
  %179 = load ptr, ptr %memberidx15.i235, align 8
  %180 = icmp eq ptr %179, null
  br i1 %180, label %if.entry51, label %ifend53

if.entry36:                                       ; preds = %else.i200, %if.entry32, %while.end.i197, %Map_string_PropId____getitem__.exit204
  %181 = load ptr, ptr %12, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %181, i64 0, i32 5
  %182 = load ptr, ptr %memberidx39, align 8
  %183 = tail call ptr %182(ptr nonnull %12)
  %memberidx40 = getelementptr inbounds %Class, ptr %130, i64 0, i32 1
  %184 = load ptr, ptr %memberidx40, align 8
  %185 = load ptr, ptr %184, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %185, i64 0, i32 5
  %186 = load ptr, ptr %memberidx41, align 8
  %187 = tail call ptr %186(ptr nonnull %184)
  %188 = alloca ptr, align 8
  %189 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %188, ptr nonnull @184, ptr %183, ptr %187)
  %190 = load ptr, ptr %188, align 8
  %191 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %191, align 8
  %memberidx.i238 = getelementptr inbounds %string, ptr %191, i64 0, i32 1
  store ptr %190, ptr %memberidx.i238, align 8
  %memberidx1.i239 = getelementptr inbounds %string, ptr %191, i64 0, i32 2
  store i64 %189, ptr %memberidx1.i239, align 4
  %memberidx2.i240 = getelementptr inbounds %string, ptr %191, i64 0, i32 3
  store i64 %189, ptr %memberidx2.i240, align 4
  tail call void @free(ptr %183)
  tail call void @free(ptr %187)
  %192 = load ptr, ptr %memberidx2, align 8
  %memberidx43 = getelementptr inbounds %Token, ptr %192, i64 0, i32 1
  %193 = load ptr, ptr %memberidx43, align 8
  %194 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i242 = getelementptr inbounds %Compiler, ptr %194, i64 0, i32 6
  %195 = load ptr, ptr %memberidx1.i242, align 8
  %196 = call ptr @malloc(i32 24)
  store i64 1, ptr %196, align 4
  %memberidx1.i.i243 = getelementptr inbounds %FloError, ptr %196, i64 0, i32 2
  store ptr %193, ptr %memberidx1.i.i243, align 8
  %memberidx2.i.i244 = getelementptr inbounds %FloError, ptr %196, i64 0, i32 1
  store ptr %191, ptr %memberidx2.i.i244, align 8
  %memberidx.i.i245 = getelementptr inbounds %Array_FloError_, ptr %195, i64 0, i32 2
  %197 = load i64, ptr %memberidx.i.i245, align 4
  %memberidx1.i2.i246 = getelementptr inbounds %Array_FloError_, ptr %195, i64 0, i32 3
  %198 = load i64, ptr %memberidx1.i2.i246, align 4
  %.not.i.i247 = icmp slt i64 %197, %198
  br i1 %.not.i.i247, label %if.entry36.TypeChecker_error.exit253_crit_edge, label %if.entry.i.i250

if.entry36.TypeChecker_error.exit253_crit_edge:   ; preds = %if.entry36
  %memberidx4.i.i251.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %195, i64 0, i32 1
  %.pre46 = load ptr, ptr %memberidx4.i.i251.phi.trans.insert, align 8
  br label %TypeChecker_error.exit253

if.entry.i.i250:                                  ; preds = %if.entry36
  %199 = shl nuw i64 %198, 1
  store i64 %199, ptr %memberidx1.i2.i246, align 4
  %memberidx2.i.i.i249 = getelementptr inbounds %Array_FloError_, ptr %195, i64 0, i32 1
  %200 = load ptr, ptr %memberidx2.i.i.i249, align 8
  %201 = shl i64 %198, 4
  %202 = call ptr @realloc(ptr %200, i64 %201)
  store ptr %202, ptr %memberidx2.i.i.i249, align 8
  %.pre45 = load i64, ptr %memberidx.i.i245, align 4
  br label %TypeChecker_error.exit253

TypeChecker_error.exit253:                        ; preds = %if.entry36.TypeChecker_error.exit253_crit_edge, %if.entry.i.i250
  %203 = phi ptr [ %.pre46, %if.entry36.TypeChecker_error.exit253_crit_edge ], [ %202, %if.entry.i.i250 ]
  %204 = phi i64 [ %197, %if.entry36.TypeChecker_error.exit253_crit_edge ], [ %.pre45, %if.entry.i.i250 ]
  %205 = add nsw i64 %204, 1
  store i64 %205, ptr %memberidx.i.i245, align 4
  %ptridx.i.i252 = getelementptr inbounds ptr, ptr %203, i64 %204
  store ptr %196, ptr %ptridx.i.i252, align 8
  br label %common.ret

ifend38:                                          ; preds = %Map_string_PropId____getitem__.exit204
  %206 = tail call fastcc ptr @TypeChecker_check_member_access(ptr nonnull %0, ptr nonnull %152)
  %.not = icmp eq ptr %206, null
  br i1 %.not, label %ifend46, label %if.entry44

if.entry44:                                       ; preds = %ifend38
  %207 = load ptr, ptr %memberidx2, align 8
  %memberidx48 = getelementptr inbounds %Token, ptr %207, i64 0, i32 1
  %208 = load ptr, ptr %memberidx48, align 8
  %209 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i255 = getelementptr inbounds %Compiler, ptr %209, i64 0, i32 6
  %210 = load ptr, ptr %memberidx1.i255, align 8
  %211 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %211, align 4
  %memberidx1.i.i256 = getelementptr inbounds %FloError, ptr %211, i64 0, i32 2
  store ptr %208, ptr %memberidx1.i.i256, align 8
  %memberidx2.i.i257 = getelementptr inbounds %FloError, ptr %211, i64 0, i32 1
  store ptr %206, ptr %memberidx2.i.i257, align 8
  %memberidx.i.i258 = getelementptr inbounds %Array_FloError_, ptr %210, i64 0, i32 2
  %212 = load i64, ptr %memberidx.i.i258, align 4
  %memberidx1.i2.i259 = getelementptr inbounds %Array_FloError_, ptr %210, i64 0, i32 3
  %213 = load i64, ptr %memberidx1.i2.i259, align 4
  %.not.i.i260 = icmp slt i64 %212, %213
  br i1 %.not.i.i260, label %if.entry44.TypeChecker_error.exit266_crit_edge, label %if.entry.i.i263

if.entry44.TypeChecker_error.exit266_crit_edge:   ; preds = %if.entry44
  %memberidx4.i.i264.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %210, i64 0, i32 1
  %.pre44 = load ptr, ptr %memberidx4.i.i264.phi.trans.insert, align 8
  br label %TypeChecker_error.exit266

if.entry.i.i263:                                  ; preds = %if.entry44
  %214 = shl nuw i64 %213, 1
  store i64 %214, ptr %memberidx1.i2.i259, align 4
  %memberidx2.i.i.i262 = getelementptr inbounds %Array_FloError_, ptr %210, i64 0, i32 1
  %215 = load ptr, ptr %memberidx2.i.i.i262, align 8
  %216 = shl i64 %213, 4
  %217 = tail call ptr @realloc(ptr %215, i64 %216)
  store ptr %217, ptr %memberidx2.i.i.i262, align 8
  %.pre43 = load i64, ptr %memberidx.i.i258, align 4
  br label %TypeChecker_error.exit266

TypeChecker_error.exit266:                        ; preds = %if.entry44.TypeChecker_error.exit266_crit_edge, %if.entry.i.i263
  %218 = phi ptr [ %.pre44, %if.entry44.TypeChecker_error.exit266_crit_edge ], [ %217, %if.entry.i.i263 ]
  %219 = phi i64 [ %212, %if.entry44.TypeChecker_error.exit266_crit_edge ], [ %.pre43, %if.entry.i.i263 ]
  %220 = add nsw i64 %219, 1
  store i64 %220, ptr %memberidx.i.i258, align 4
  %ptridx.i.i265 = getelementptr inbounds ptr, ptr %218, i64 %219
  store ptr %211, ptr %ptridx.i.i265, align 8
  br label %common.ret

ifend46:                                          ; preds = %ifend38
  %221 = load ptr, ptr %0, align 8
  %memberidx.i.i267 = getelementptr inbounds %PropId, ptr %152, i64 0, i32 1
  %222 = load ptr, ptr %memberidx.i.i267, align 8
  %memberidx.i.i.i268 = getelementptr inbounds %Program, ptr %221, i64 0, i32 1
  %223 = load ptr, ptr %memberidx.i.i.i268, align 8
  %224 = load i64, ptr %222, align 4
  %memberidx.i.i.i.i269 = getelementptr inbounds %Array_Module_, ptr %223, i64 0, i32 1
  %225 = load ptr, ptr %memberidx.i.i.i.i269, align 8
  %ptridx.i.i.i.i270 = getelementptr inbounds ptr, ptr %225, i64 %224
  %226 = load ptr, ptr %ptridx.i.i.i.i270, align 8
  %memberidx2.i.i.i271 = getelementptr inbounds %Module, ptr %226, i64 0, i32 4
  %227 = load ptr, ptr %memberidx2.i.i.i271, align 8
  %memberidx3.i.i.i272 = getelementptr inbounds %TypeId, ptr %222, i64 0, i32 2
  %228 = load i64, ptr %memberidx3.i.i.i272, align 4
  %memberidx.i5.i.i.i273 = getelementptr inbounds %Array_Class_, ptr %227, i64 0, i32 1
  %229 = load ptr, ptr %memberidx.i5.i.i.i273, align 8
  %ptridx.i6.i.i.i274 = getelementptr inbounds ptr, ptr %229, i64 %228
  %230 = load ptr, ptr %ptridx.i6.i.i.i274, align 8
  %231 = load i64, ptr %152, align 4
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %if.entry.i282, label %ifend.i288

if.entry.i282:                                    ; preds = %ifend46
  %memberidx1.i277 = getelementptr inbounds %Class, ptr %230, i64 0, i32 5
  %233 = load ptr, ptr %memberidx1.i277, align 8
  %memberidx2.i278 = getelementptr inbounds %PropId, ptr %152, i64 0, i32 2
  %234 = load i64, ptr %memberidx2.i278, align 4
  %memberidx.i12.i279 = getelementptr inbounds %Array_ClassMethod_, ptr %233, i64 0, i32 1
  %235 = load ptr, ptr %memberidx.i12.i279, align 8
  %ptridx.i13.i280 = getelementptr inbounds ptr, ptr %235, i64 %234
  %236 = load ptr, ptr %ptridx.i13.i280, align 8
  %memberidx3.i281 = getelementptr inbounds %ClassMethod, ptr %236, i64 0, i32 4
  br label %get_class_prop_type.exit289

ifend.i288:                                       ; preds = %ifend46
  %memberidx4.i283 = getelementptr inbounds %Class, ptr %230, i64 0, i32 4
  %237 = load ptr, ptr %memberidx4.i283, align 8
  %memberidx5.i284 = getelementptr inbounds %PropId, ptr %152, i64 0, i32 2
  %238 = load i64, ptr %memberidx5.i284, align 4
  %memberidx.i11.i285 = getelementptr inbounds %Array_ClassField_, ptr %237, i64 0, i32 1
  %239 = load ptr, ptr %memberidx.i11.i285, align 8
  %ptridx.i.i286 = getelementptr inbounds ptr, ptr %239, i64 %238
  %240 = load ptr, ptr %ptridx.i.i286, align 8
  %memberidx6.i287 = getelementptr inbounds %ClassField, ptr %240, i64 0, i32 4
  br label %get_class_prop_type.exit289

get_class_prop_type.exit289:                      ; preds = %if.entry.i282, %ifend.i288
  %common.ret.op.in.i275 = phi ptr [ %memberidx3.i281, %if.entry.i282 ], [ %memberidx6.i287, %ifend.i288 ]
  %common.ret.op.i276 = load ptr, ptr %common.ret.op.in.i275, align 8
  br label %ifend6

if.entry51:                                       ; preds = %else.i233, %else33, %while.end.i230, %Map_string_PropId____getitem__.exit237
  %241 = load ptr, ptr %12, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %241, i64 0, i32 5
  %242 = load ptr, ptr %memberidx54, align 8
  %243 = tail call ptr %242(ptr nonnull %12)
  %memberidx55 = getelementptr inbounds %Enum, ptr %157, i64 0, i32 1
  %244 = load ptr, ptr %memberidx55, align 8
  %245 = load ptr, ptr %244, align 8
  %memberidx56 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %245, i64 0, i32 5
  %246 = load ptr, ptr %memberidx56, align 8
  %247 = tail call ptr %246(ptr nonnull %244)
  %248 = alloca ptr, align 8
  %249 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %248, ptr nonnull @185, ptr %243, ptr %247)
  %250 = load ptr, ptr %248, align 8
  %251 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %251, align 8
  %memberidx.i290 = getelementptr inbounds %string, ptr %251, i64 0, i32 1
  store ptr %250, ptr %memberidx.i290, align 8
  %memberidx1.i291 = getelementptr inbounds %string, ptr %251, i64 0, i32 2
  store i64 %249, ptr %memberidx1.i291, align 4
  %memberidx2.i292 = getelementptr inbounds %string, ptr %251, i64 0, i32 3
  store i64 %249, ptr %memberidx2.i292, align 4
  tail call void @free(ptr %243)
  tail call void @free(ptr %247)
  %252 = load ptr, ptr %memberidx2, align 8
  %memberidx58 = getelementptr inbounds %Token, ptr %252, i64 0, i32 1
  %253 = load ptr, ptr %memberidx58, align 8
  %254 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i294 = getelementptr inbounds %Compiler, ptr %254, i64 0, i32 6
  %255 = load ptr, ptr %memberidx1.i294, align 8
  %256 = call ptr @malloc(i32 24)
  store i64 1, ptr %256, align 4
  %memberidx1.i.i295 = getelementptr inbounds %FloError, ptr %256, i64 0, i32 2
  store ptr %253, ptr %memberidx1.i.i295, align 8
  %memberidx2.i.i296 = getelementptr inbounds %FloError, ptr %256, i64 0, i32 1
  store ptr %251, ptr %memberidx2.i.i296, align 8
  %memberidx.i.i297 = getelementptr inbounds %Array_FloError_, ptr %255, i64 0, i32 2
  %257 = load i64, ptr %memberidx.i.i297, align 4
  %memberidx1.i2.i298 = getelementptr inbounds %Array_FloError_, ptr %255, i64 0, i32 3
  %258 = load i64, ptr %memberidx1.i2.i298, align 4
  %.not.i.i299 = icmp slt i64 %257, %258
  br i1 %.not.i.i299, label %if.entry51.TypeChecker_error.exit305_crit_edge, label %if.entry.i.i302

if.entry51.TypeChecker_error.exit305_crit_edge:   ; preds = %if.entry51
  %memberidx4.i.i303.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %255, i64 0, i32 1
  %.pre38 = load ptr, ptr %memberidx4.i.i303.phi.trans.insert, align 8
  br label %TypeChecker_error.exit305

if.entry.i.i302:                                  ; preds = %if.entry51
  %259 = shl nuw i64 %258, 1
  store i64 %259, ptr %memberidx1.i2.i298, align 4
  %memberidx2.i.i.i301 = getelementptr inbounds %Array_FloError_, ptr %255, i64 0, i32 1
  %260 = load ptr, ptr %memberidx2.i.i.i301, align 8
  %261 = shl i64 %258, 4
  %262 = call ptr @realloc(ptr %260, i64 %261)
  store ptr %262, ptr %memberidx2.i.i.i301, align 8
  %.pre37 = load i64, ptr %memberidx.i.i297, align 4
  br label %TypeChecker_error.exit305

TypeChecker_error.exit305:                        ; preds = %if.entry51.TypeChecker_error.exit305_crit_edge, %if.entry.i.i302
  %263 = phi ptr [ %.pre38, %if.entry51.TypeChecker_error.exit305_crit_edge ], [ %262, %if.entry.i.i302 ]
  %264 = phi i64 [ %257, %if.entry51.TypeChecker_error.exit305_crit_edge ], [ %.pre37, %if.entry.i.i302 ]
  %265 = add nsw i64 %264, 1
  store i64 %265, ptr %memberidx.i.i297, align 4
  %ptridx.i.i304 = getelementptr inbounds ptr, ptr %263, i64 %264
  store ptr %256, ptr %ptridx.i.i304, align 8
  br label %common.ret

ifend53:                                          ; preds = %Map_string_PropId____getitem__.exit237
  %266 = tail call ptr @malloc(i32 16)
  %267 = load ptr, ptr %157, align 8
  store i64 12, ptr %266, align 4
  %memberidx.i306 = getelementptr inbounds %EnumType, ptr %266, i64 0, i32 1
  store ptr %267, ptr %memberidx.i306, align 8
  br label %ifend6

if.entry60:                                       ; preds = %ifend
  %268 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %268, ptr noundef nonnull align 8 dereferenceable(9) @186, i64 9, i1 false)
  %269 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %269, align 8
  %memberidx.i.i307 = getelementptr inbounds %string, ptr %269, i64 0, i32 1
  store ptr %268, ptr %memberidx.i.i307, align 8
  %memberidx1.i.i308 = getelementptr inbounds %string, ptr %269, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i308, align 4
  %memberidx2.i.i309 = getelementptr inbounds %string, ptr %269, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i309, align 4
  %memberidx.i310 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %270 = load i64, ptr %memberidx.i310, align 4
  %.not.i312 = icmp eq i64 %270, 9
  br i1 %.not.i312, label %ifend.i316, label %else64

ifend.i316:                                       ; preds = %if.entry60
  %memberidx2.i314 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %271 = load ptr, ptr %memberidx2.i314, align 8
  %272 = tail call i64 @memcmp(ptr %271, ptr nonnull %268, i64 9)
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %ifend65, label %else64

else64:                                           ; preds = %if.entry60, %ifend.i316
  %274 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %274, ptr noundef nonnull align 8 dereferenceable(9) @187, i64 9, i1 false)
  %275 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %275, align 8
  %memberidx.i.i317 = getelementptr inbounds %string, ptr %275, i64 0, i32 1
  store ptr %274, ptr %memberidx.i.i317, align 8
  %memberidx1.i.i318 = getelementptr inbounds %string, ptr %275, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i318, align 4
  %memberidx2.i.i319 = getelementptr inbounds %string, ptr %275, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i319, align 4
  %276 = load i64, ptr %memberidx.i310, align 4
  %.not.i322 = icmp eq i64 %276, 9
  br i1 %.not.i322, label %ifend.i326, label %else67

ifend.i326:                                       ; preds = %else64
  %memberidx2.i324 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %277 = load ptr, ptr %memberidx2.i324, align 8
  %278 = tail call i64 @memcmp(ptr %277, ptr nonnull %274, i64 9)
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %ifend65, label %else67

ifend65:                                          ; preds = %ifend.i375, %ifend.i364, %ifend.i353, %ifend.i326, %ifend.i316
  %280 = phi i64 [ 3, %ifend.i316 ], [ 4, %ifend.i326 ], [ 5, %ifend.i353 ], [ 6, %ifend.i364 ], [ 7, %ifend.i375 ]
  %281 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %281, align 4
  %memberidx.i.i328 = getelementptr inbounds %Expression, ptr %281, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i328, align 4
  %memberidx1.i.i329 = getelementptr inbounds %Expression, ptr %281, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i329, align 1
  %memberidx.i330 = getelementptr inbounds %IntrinsicCall, ptr %281, i64 0, i32 4
  store i64 %280, ptr %memberidx.i330, align 4
  %memberidx1.i331 = getelementptr inbounds %IntrinsicCall, ptr %281, i64 0, i32 5
  %282 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %282, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_Expression_, ptr %282, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i8.i = getelementptr inbounds %Array_Expression_, ptr %282, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i, align 4
  %memberidx2.i.i332 = getelementptr inbounds %Array_Expression_, ptr %282, i64 0, i32 1
  %283 = tail call ptr @malloc(i32 64)
  store ptr %283, ptr %memberidx2.i.i332, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %282, ptr %memberidx1.i331, align 8
  %memberidx4.i334 = getelementptr inbounds %Expression, ptr %281, i64 0, i32 3
  %284 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %284, align 4
  store ptr %284, ptr %memberidx4.i334, align 8
  %285 = load i64, ptr %memberidx.i7.i, align 4
  %286 = load i64, ptr %memberidx1.i8.i, align 4
  %.not.i337 = icmp slt i64 %285, %286
  br i1 %.not.i337, label %ifend65.Array_Expression____sl__.exit_crit_edge, label %if.entry.i340

ifend65.Array_Expression____sl__.exit_crit_edge:  ; preds = %ifend65
  %.pre32 = load ptr, ptr %memberidx2.i.i332, align 8
  br label %Array_Expression____sl__.exit

if.entry.i340:                                    ; preds = %ifend65
  %287 = shl nuw i64 %286, 1
  store i64 %287, ptr %memberidx1.i8.i, align 4
  %288 = load ptr, ptr %memberidx2.i.i332, align 8
  %289 = shl i64 %286, 4
  %290 = tail call ptr @realloc(ptr %288, i64 %289)
  store ptr %290, ptr %memberidx2.i.i332, align 8
  %.pre31 = load i64, ptr %memberidx.i7.i, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %ifend65.Array_Expression____sl__.exit_crit_edge, %if.entry.i340
  %291 = phi ptr [ %.pre32, %ifend65.Array_Expression____sl__.exit_crit_edge ], [ %290, %if.entry.i340 ]
  %292 = phi i64 [ %285, %ifend65.Array_Expression____sl__.exit_crit_edge ], [ %.pre31, %if.entry.i340 ]
  %293 = add nsw i64 %292, 1
  store i64 %293, ptr %memberidx.i7.i, align 4
  %ptridx.i342 = getelementptr inbounds ptr, ptr %291, i64 %292
  store ptr %5, ptr %ptridx.i342, align 8
  br label %common.ret

else67:                                           ; preds = %else64, %ifend.i326
  %294 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %294, ptr noundef nonnull align 8 dereferenceable(9) @188, i64 9, i1 false)
  %295 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %295, align 8
  %memberidx.i.i344 = getelementptr inbounds %string, ptr %295, i64 0, i32 1
  store ptr %294, ptr %memberidx.i.i344, align 8
  %memberidx1.i.i345 = getelementptr inbounds %string, ptr %295, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i345, align 4
  %memberidx2.i.i346 = getelementptr inbounds %string, ptr %295, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i346, align 4
  %296 = load i64, ptr %memberidx.i310, align 4
  %.not.i349 = icmp eq i64 %296, 9
  br i1 %.not.i349, label %ifend.i353, label %else70

ifend.i353:                                       ; preds = %else67
  %memberidx2.i351 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %297 = load ptr, ptr %memberidx2.i351, align 8
  %298 = tail call i64 @memcmp(ptr %297, ptr nonnull %294, i64 9)
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %ifend65, label %else70

else70:                                           ; preds = %else67, %ifend.i353
  %300 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %300, ptr noundef nonnull align 8 dereferenceable(6) @189, i64 6, i1 false)
  %301 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %301, align 8
  %memberidx.i.i355 = getelementptr inbounds %string, ptr %301, i64 0, i32 1
  store ptr %300, ptr %memberidx.i.i355, align 8
  %memberidx1.i.i356 = getelementptr inbounds %string, ptr %301, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i356, align 4
  %memberidx2.i.i357 = getelementptr inbounds %string, ptr %301, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i357, align 4
  %302 = load i64, ptr %memberidx.i310, align 4
  %.not.i360 = icmp eq i64 %302, 6
  br i1 %.not.i360, label %ifend.i364, label %else73

ifend.i364:                                       ; preds = %else70
  %memberidx2.i362 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %303 = load ptr, ptr %memberidx2.i362, align 8
  %304 = tail call i64 @memcmp(ptr %303, ptr nonnull %300, i64 6)
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %ifend65, label %else73

else73:                                           ; preds = %else70, %ifend.i364
  %306 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %306, ptr noundef nonnull align 8 dereferenceable(7) @190, i64 7, i1 false)
  %307 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %307, align 8
  %memberidx.i.i366 = getelementptr inbounds %string, ptr %307, i64 0, i32 1
  store ptr %306, ptr %memberidx.i.i366, align 8
  %memberidx1.i.i367 = getelementptr inbounds %string, ptr %307, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i367, align 4
  %memberidx2.i.i368 = getelementptr inbounds %string, ptr %307, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i368, align 4
  %308 = load i64, ptr %memberidx.i310, align 4
  %.not.i371 = icmp eq i64 %308, 7
  br i1 %.not.i371, label %ifend.i375, label %else76

ifend.i375:                                       ; preds = %else73
  %memberidx2.i373 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %309 = load ptr, ptr %memberidx2.i373, align 8
  %310 = tail call i64 @memcmp(ptr %309, ptr nonnull %306, i64 7)
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %ifend65, label %else76

else76:                                           ; preds = %else73, %ifend.i375
  %312 = load ptr, ptr %12, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %312, i64 0, i32 5
  %313 = load ptr, ptr %memberidx78, align 8
  %314 = tail call ptr %313(ptr nonnull %12)
  %315 = alloca ptr, align 8
  %316 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %315, ptr nonnull @191, ptr %314)
  %317 = load ptr, ptr %315, align 8
  %318 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %318, align 8
  %memberidx.i377 = getelementptr inbounds %string, ptr %318, i64 0, i32 1
  store ptr %317, ptr %memberidx.i377, align 8
  %memberidx1.i378 = getelementptr inbounds %string, ptr %318, i64 0, i32 2
  store i64 %316, ptr %memberidx1.i378, align 4
  %memberidx2.i379 = getelementptr inbounds %string, ptr %318, i64 0, i32 3
  store i64 %316, ptr %memberidx2.i379, align 4
  tail call void @free(ptr %314)
  %319 = load ptr, ptr %memberidx2, align 8
  %memberidx80 = getelementptr inbounds %Token, ptr %319, i64 0, i32 1
  %320 = load ptr, ptr %memberidx80, align 8
  %321 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i381 = getelementptr inbounds %Compiler, ptr %321, i64 0, i32 6
  %322 = load ptr, ptr %memberidx1.i381, align 8
  %323 = call ptr @malloc(i32 24)
  store i64 1, ptr %323, align 4
  %memberidx1.i.i382 = getelementptr inbounds %FloError, ptr %323, i64 0, i32 2
  store ptr %320, ptr %memberidx1.i.i382, align 8
  %memberidx2.i.i383 = getelementptr inbounds %FloError, ptr %323, i64 0, i32 1
  store ptr %318, ptr %memberidx2.i.i383, align 8
  %memberidx.i.i384 = getelementptr inbounds %Array_FloError_, ptr %322, i64 0, i32 2
  %324 = load i64, ptr %memberidx.i.i384, align 4
  %memberidx1.i2.i385 = getelementptr inbounds %Array_FloError_, ptr %322, i64 0, i32 3
  %325 = load i64, ptr %memberidx1.i2.i385, align 4
  %.not.i.i386 = icmp slt i64 %324, %325
  br i1 %.not.i.i386, label %else76.TypeChecker_error.exit392_crit_edge, label %if.entry.i.i389

else76.TypeChecker_error.exit392_crit_edge:       ; preds = %else76
  %memberidx4.i.i390.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %322, i64 0, i32 1
  %.pre30 = load ptr, ptr %memberidx4.i.i390.phi.trans.insert, align 8
  br label %TypeChecker_error.exit392

if.entry.i.i389:                                  ; preds = %else76
  %326 = shl nuw i64 %325, 1
  store i64 %326, ptr %memberidx1.i2.i385, align 4
  %memberidx2.i.i.i388 = getelementptr inbounds %Array_FloError_, ptr %322, i64 0, i32 1
  %327 = load ptr, ptr %memberidx2.i.i.i388, align 8
  %328 = shl i64 %325, 4
  %329 = call ptr @realloc(ptr %327, i64 %328)
  store ptr %329, ptr %memberidx2.i.i.i388, align 8
  %.pre29 = load i64, ptr %memberidx.i.i384, align 4
  br label %TypeChecker_error.exit392

TypeChecker_error.exit392:                        ; preds = %else76.TypeChecker_error.exit392_crit_edge, %if.entry.i.i389
  %330 = phi ptr [ %.pre30, %else76.TypeChecker_error.exit392_crit_edge ], [ %329, %if.entry.i.i389 ]
  %331 = phi i64 [ %324, %else76.TypeChecker_error.exit392_crit_edge ], [ %.pre29, %if.entry.i.i389 ]
  %332 = add nsw i64 %331, 1
  store i64 %332, ptr %memberidx.i.i384, align 4
  %ptridx.i.i391 = getelementptr inbounds ptr, ptr %330, i64 %331
  store ptr %323, ptr %ptridx.i.i391, align 8
  br label %common.ret

if.entry83:                                       ; preds = %ifend
  %memberidx86 = getelementptr inbounds %VarAccessExpression, ptr %5, i64 0, i32 4
  %333 = load ptr, ptr %memberidx86, align 8
  %memberidx87 = getelementptr inbounds %ModuleVarId, ptr %333, i64 0, i32 3
  %334 = load ptr, ptr %memberidx87, align 8
  %memberidx88 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %335 = load ptr, ptr %memberidx88, align 8
  %memberidx89 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %336 = load i64, ptr %334, align 4
  store i64 %336, ptr %memberidx89, align 4
  store ptr %334, ptr %memberidx88, align 8
  %337 = alloca %VarAccessExpressionNode, align 8
  %338 = load ptr, ptr %memberidx2, align 8
  %memberidx.i393 = getelementptr inbounds %Token, ptr %338, i64 0, i32 1
  %339 = load ptr, ptr %memberidx.i393, align 8
  store ptr %339, ptr %337, align 8
  %memberidx.i.i.i394 = getelementptr inbounds %StatementNode, ptr %337, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i394, align 8
  %memberidx.i.i395 = getelementptr inbounds %ExpressionNode, ptr %337, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i395, align 8
  %memberidx1.i396 = getelementptr inbounds %VarAccessExpressionNode, ptr %337, i64 0, i32 3
  store ptr %338, ptr %memberidx1.i396, align 8
  %340 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %340, align 4
  %341 = call fastcc ptr @TypeChecker_check_var_access_expr(ptr nonnull %0, ptr nonnull %340, ptr nonnull %337)
  %342 = load i64, ptr %335, align 4
  store i64 %342, ptr %memberidx89, align 4
  store ptr %335, ptr %memberidx88, align 8
  br label %common.ret

else84:                                           ; preds = %if.entry.i2, %ifend
  %343 = load ptr, ptr %12, align 8
  %memberidx96 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %343, i64 0, i32 5
  %344 = load ptr, ptr %memberidx96, align 8
  %345 = tail call ptr %344(ptr nonnull %12)
  %346 = load ptr, ptr %memberidx1, align 8
  %347 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %346)
  %348 = load ptr, ptr %347, align 8
  %memberidx98 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %348, i64 0, i32 5
  %349 = load ptr, ptr %memberidx98, align 8
  %350 = tail call ptr %349(ptr nonnull %347)
  %351 = alloca ptr, align 8
  %352 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %351, ptr nonnull @192, ptr %345, ptr %350)
  %353 = load ptr, ptr %351, align 8
  %354 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %354, align 8
  %memberidx.i397 = getelementptr inbounds %string, ptr %354, i64 0, i32 1
  store ptr %353, ptr %memberidx.i397, align 8
  %memberidx1.i398 = getelementptr inbounds %string, ptr %354, i64 0, i32 2
  store i64 %352, ptr %memberidx1.i398, align 4
  %memberidx2.i399 = getelementptr inbounds %string, ptr %354, i64 0, i32 3
  store i64 %352, ptr %memberidx2.i399, align 4
  tail call void @free(ptr %345)
  tail call void @free(ptr %350)
  %355 = load ptr, ptr %memberidx, align 8
  %356 = load ptr, ptr %355, align 8
  %357 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i401 = getelementptr inbounds %Compiler, ptr %357, i64 0, i32 6
  %358 = load ptr, ptr %memberidx1.i401, align 8
  %359 = call ptr @malloc(i32 24)
  store i64 4, ptr %359, align 4
  %memberidx1.i.i402 = getelementptr inbounds %FloError, ptr %359, i64 0, i32 2
  store ptr %356, ptr %memberidx1.i.i402, align 8
  %memberidx2.i.i403 = getelementptr inbounds %FloError, ptr %359, i64 0, i32 1
  store ptr %354, ptr %memberidx2.i.i403, align 8
  %memberidx.i.i404 = getelementptr inbounds %Array_FloError_, ptr %358, i64 0, i32 2
  %360 = load i64, ptr %memberidx.i.i404, align 4
  %memberidx1.i2.i405 = getelementptr inbounds %Array_FloError_, ptr %358, i64 0, i32 3
  %361 = load i64, ptr %memberidx1.i2.i405, align 4
  %.not.i.i406 = icmp slt i64 %360, %361
  br i1 %.not.i.i406, label %else84.TypeChecker_error.exit412_crit_edge, label %if.entry.i.i409

else84.TypeChecker_error.exit412_crit_edge:       ; preds = %else84
  %memberidx4.i.i410.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %358, i64 0, i32 1
  %.pre48 = load ptr, ptr %memberidx4.i.i410.phi.trans.insert, align 8
  br label %TypeChecker_error.exit412

if.entry.i.i409:                                  ; preds = %else84
  %362 = shl nuw i64 %361, 1
  store i64 %362, ptr %memberidx1.i2.i405, align 4
  %memberidx2.i.i.i408 = getelementptr inbounds %Array_FloError_, ptr %358, i64 0, i32 1
  %363 = load ptr, ptr %memberidx2.i.i.i408, align 8
  %364 = shl i64 %361, 4
  %365 = call ptr @realloc(ptr %363, i64 %364)
  store ptr %365, ptr %memberidx2.i.i.i408, align 8
  %.pre47 = load i64, ptr %memberidx.i.i404, align 4
  br label %TypeChecker_error.exit412

TypeChecker_error.exit412:                        ; preds = %else84.TypeChecker_error.exit412_crit_edge, %if.entry.i.i409
  %366 = phi ptr [ %.pre48, %else84.TypeChecker_error.exit412_crit_edge ], [ %365, %if.entry.i.i409 ]
  %367 = phi i64 [ %360, %else84.TypeChecker_error.exit412_crit_edge ], [ %.pre47, %if.entry.i.i409 ]
  %368 = add nsw i64 %367, 1
  store i64 %368, ptr %memberidx.i.i404, align 4
  %ptridx.i.i411 = getelementptr inbounds ptr, ptr %366, i64 %367
  store ptr %359, ptr %ptridx.i.i411, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_assignment(ptr %0, ptr %1, ptr %2, ptr nocapture readonly %3) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %.not = icmp eq i64 %5, 19
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %4
  %memberidx1 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 19
  br i1 %8, label %if.entry.i110, label %is_object.exit

if.entry.i110:                                    ; preds = %if.entry, %if.entry.i110
  %.tr5.i = phi ptr [ %9, %if.entry.i110 ], [ %6, %if.entry ]
  %memberidx1.i109 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %9 = load ptr, ptr %memberidx1.i109, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp eq i64 %10, 19
  br i1 %11, label %if.entry.i110, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i110, %if.entry
  %.lcssa.i = phi i64 [ %7, %if.entry ], [ %10, %if.entry.i110 ]
  %12 = icmp eq i64 %.lcssa.i, 11
  br i1 %12, label %if.entry2, label %ifend4

ifend:                                            ; preds = %ifend4, %4
  %right.0 = phi ptr [ %45, %ifend4 ], [ %2, %4 ]
  %memberidx12 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %13 = load ptr, ptr %memberidx12, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 16
  br i1 %15, label %if.entry14, label %ifend16

if.entry2:                                        ; preds = %is_object.exit
  %16 = tail call fastcc ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr %3)
  %17 = icmp ne ptr %16, null
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %18 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %18, i64 0, i32 6
  %19 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i, align 4
  %21 = icmp sgt i64 %20, 0
  %22 = or i1 %17, %21
  br i1 %22, label %common.ret, label %if.entry2.ifend4_crit_edge

if.entry2.ifend4_crit_edge:                       ; preds = %if.entry2
  %.pre = load ptr, ptr %memberidx1, align 8
  %.pre111 = load i64, ptr %memberidx, align 4
  br label %ifend4

ifend4:                                           ; preds = %if.entry2.ifend4_crit_edge, %is_object.exit
  %23 = phi i64 [ %.pre111, %if.entry2.ifend4_crit_edge ], [ %5, %is_object.exit ]
  %24 = phi ptr [ %.pre, %if.entry2.ifend4_crit_edge ], [ %6, %is_object.exit ]
  %25 = icmp eq i64 %23, 20
  %spec.store.select.i = select i1 %25, i64 1, i64 %23
  %26 = icmp eq i64 %spec.store.select.i, 21
  %spec.store.select34.i = select i1 %26, i64 2, i64 %spec.store.select.i
  %27 = icmp eq i64 %spec.store.select34.i, 22
  %spec.store.select30.i = select i1 %27, i64 3, i64 %spec.store.select34.i
  %28 = icmp eq i64 %spec.store.select30.i, 23
  %spec.store.select37.i = select i1 %28, i64 4, i64 %spec.store.select30.i
  %29 = icmp eq i64 %spec.store.select37.i, 24
  %spec.store.select31.i = select i1 %29, i64 5, i64 %spec.store.select37.i
  %30 = icmp eq i64 %spec.store.select31.i, 25
  %spec.store.select35.i = select i1 %30, i64 6, i64 %spec.store.select31.i
  %31 = icmp eq i64 %spec.store.select35.i, 26
  %spec.store.select32.i = select i1 %31, i64 16, i64 %spec.store.select35.i
  %32 = icmp eq i64 %spec.store.select32.i, 27
  %spec.store.select38.i = select i1 %32, i64 15, i64 %spec.store.select32.i
  %33 = icmp eq i64 %spec.store.select38.i, 29
  %spec.store.select33.i = select i1 %33, i64 13, i64 %spec.store.select38.i
  %34 = icmp eq i64 %spec.store.select33.i, 30
  %spec.store.select36.i = select i1 %34, i64 14, i64 %spec.store.select33.i
  %35 = tail call ptr @malloc(i32 48)
  %memberidx28.i = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 3
  %36 = load ptr, ptr %memberidx28.i, align 8
  %memberidx29.i = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 5
  %37 = load ptr, ptr %memberidx29.i, align 8
  %38 = load ptr, ptr %36, align 8
  %39 = load ptr, ptr %37, align 8
  %40 = tail call ptr @malloc(i32 32)
  %41 = load i64, ptr %38, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %39, i64 0, i32 1
  %42 = load i64, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %38, i64 0, i32 2
  %43 = load i64, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %39, i64 0, i32 3
  %44 = load i64, ptr %memberidx3.i.i.i, align 4
  store i64 %41, ptr %40, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %40, i64 0, i32 1
  store i64 %42, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %FloRange, ptr %40, i64 0, i32 2
  store i64 %43, ptr %memberidx2.i.i.i.i, align 4
  %memberidx3.i.i.i.i = getelementptr inbounds %FloRange, ptr %40, i64 0, i32 3
  store i64 %44, ptr %memberidx3.i.i.i.i, align 4
  store ptr %40, ptr %35, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %35, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i.i = getelementptr inbounds %ExpressionNode, ptr %35, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %35, i64 0, i32 3
  store ptr %36, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %35, i64 0, i32 4
  store i64 %spec.store.select36.i, ptr %memberidx3.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %35, i64 0, i32 5
  store ptr %37, ptr %memberidx4.i.i, align 8
  %45 = tail call fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %24, ptr nonnull %35)
  %memberidx.i58 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %46 = load ptr, ptr %memberidx.i58, align 8
  %memberidx1.i59 = getelementptr inbounds %Compiler, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i59, align 8
  %memberidx2.i60 = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %48 = load i64, ptr %memberidx2.i60, align 4
  %49 = icmp sgt i64 %48, 0
  br i1 %49, label %common.ret, label %ifend

common.ret:                                       ; preds = %if.entry2, %ifend4, %ifend26, %TypeChecker_error.exit103, %TypeChecker_error.exit87, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit87 ], [ null, %TypeChecker_error.exit103 ], [ %116, %ifend26 ], [ null, %ifend4 ], [ %16, %if.entry2 ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %ifend
  %50 = tail call ptr @malloc(i32 33)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %50, ptr noundef nonnull align 8 dereferenceable(33) @157, i64 33, i1 false)
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i61 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i61, align 4
  %52 = load ptr, ptr %3, align 8
  %memberidx.i62 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %53 = load ptr, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %Compiler, ptr %53, i64 0, i32 6
  %54 = load ptr, ptr %memberidx1.i63, align 8
  %55 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %55, align 4
  %memberidx1.i.i64 = getelementptr inbounds %FloError, ptr %55, i64 0, i32 2
  store ptr %52, ptr %memberidx1.i.i64, align 8
  %memberidx2.i.i65 = getelementptr inbounds %FloError, ptr %55, i64 0, i32 1
  store ptr %51, ptr %memberidx2.i.i65, align 8
  %memberidx.i.i66 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 2
  %56 = load i64, ptr %memberidx.i.i66, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 3
  %57 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %56, %57
  br i1 %.not.i.i, label %if.entry14.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry14.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry14
  %memberidx4.i.i69.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 1
  %.pre117 = load ptr, ptr %memberidx4.i.i69.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry14
  %58 = shl nuw i64 %57, 1
  store i64 %58, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i68 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 1
  %59 = load ptr, ptr %memberidx2.i.i.i68, align 8
  %60 = shl i64 %57, 4
  %61 = tail call ptr @realloc(ptr %59, i64 %60)
  store ptr %61, ptr %memberidx2.i.i.i68, align 8
  %.pre116 = load i64, ptr %memberidx.i.i66, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry14.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %62 = phi ptr [ %.pre117, %if.entry14.TypeChecker_error.exit_crit_edge ], [ %61, %if.entry.i.i ]
  %63 = phi i64 [ %56, %if.entry14.TypeChecker_error.exit_crit_edge ], [ %.pre116, %if.entry.i.i ]
  %64 = add nsw i64 %63, 1
  store i64 %64, ptr %memberidx.i.i66, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %62, i64 %63
  store ptr %55, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend16:                                          ; preds = %ifend
  %memberidx.i70 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i70, align 4
  switch i64 %65, label %if.entry18 [
    i64 7, label %if.entry.i
    i64 12, label %check_is_var.exit
    i64 13, label %ifend20
  ]

if.entry.i:                                       ; preds = %ifend16
  %memberidx1.i71 = getelementptr inbounds %VarAccessExpression, ptr %1, i64 0, i32 4
  %66 = load ptr, ptr %memberidx1.i71, align 8
  %67 = load i64, ptr %66, align 4
  %68 = icmp eq i64 %67, 1
  br i1 %68, label %ifend20, label %if.entry18

check_is_var.exit:                                ; preds = %ifend16
  %memberidx7.i = getelementptr inbounds %MemberExpression, ptr %1, i64 0, i32 5
  %69 = load ptr, ptr %memberidx7.i, align 8
  %70 = load i64, ptr %69, align 4
  %71 = icmp eq i64 %70, 1
  br i1 %71, label %ifend20, label %if.entry18

if.entry18:                                       ; preds = %if.entry.i, %ifend16, %check_is_var.exit
  %72 = tail call ptr @malloc(i32 35)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %72, ptr noundef nonnull align 8 dereferenceable(35) @158, i64 35, i1 false)
  %73 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %73, align 8
  %memberidx.i.i72 = getelementptr inbounds %string, ptr %73, i64 0, i32 1
  store ptr %72, ptr %memberidx.i.i72, align 8
  %memberidx1.i.i73 = getelementptr inbounds %string, ptr %73, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i73, align 4
  %memberidx2.i.i74 = getelementptr inbounds %string, ptr %73, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i74, align 4
  %74 = load ptr, ptr %3, align 8
  %memberidx.i75 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %75 = load ptr, ptr %memberidx.i75, align 8
  %memberidx1.i76 = getelementptr inbounds %Compiler, ptr %75, i64 0, i32 6
  %76 = load ptr, ptr %memberidx1.i76, align 8
  %77 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %77, align 4
  %memberidx1.i.i77 = getelementptr inbounds %FloError, ptr %77, i64 0, i32 2
  store ptr %74, ptr %memberidx1.i.i77, align 8
  %memberidx2.i.i78 = getelementptr inbounds %FloError, ptr %77, i64 0, i32 1
  store ptr %73, ptr %memberidx2.i.i78, align 8
  %memberidx.i.i79 = getelementptr inbounds %Array_FloError_, ptr %76, i64 0, i32 2
  %78 = load i64, ptr %memberidx.i.i79, align 4
  %memberidx1.i2.i80 = getelementptr inbounds %Array_FloError_, ptr %76, i64 0, i32 3
  %79 = load i64, ptr %memberidx1.i2.i80, align 4
  %.not.i.i81 = icmp slt i64 %78, %79
  br i1 %.not.i.i81, label %if.entry18.TypeChecker_error.exit87_crit_edge, label %if.entry.i.i84

if.entry18.TypeChecker_error.exit87_crit_edge:    ; preds = %if.entry18
  %memberidx4.i.i85.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %76, i64 0, i32 1
  %.pre115 = load ptr, ptr %memberidx4.i.i85.phi.trans.insert, align 8
  br label %TypeChecker_error.exit87

if.entry.i.i84:                                   ; preds = %if.entry18
  %80 = shl nuw i64 %79, 1
  store i64 %80, ptr %memberidx1.i2.i80, align 4
  %memberidx2.i.i.i83 = getelementptr inbounds %Array_FloError_, ptr %76, i64 0, i32 1
  %81 = load ptr, ptr %memberidx2.i.i.i83, align 8
  %82 = shl i64 %79, 4
  %83 = tail call ptr @realloc(ptr %81, i64 %82)
  store ptr %83, ptr %memberidx2.i.i.i83, align 8
  %.pre114 = load i64, ptr %memberidx.i.i79, align 4
  br label %TypeChecker_error.exit87

TypeChecker_error.exit87:                         ; preds = %if.entry18.TypeChecker_error.exit87_crit_edge, %if.entry.i.i84
  %84 = phi ptr [ %.pre115, %if.entry18.TypeChecker_error.exit87_crit_edge ], [ %83, %if.entry.i.i84 ]
  %85 = phi i64 [ %78, %if.entry18.TypeChecker_error.exit87_crit_edge ], [ %.pre114, %if.entry.i.i84 ]
  %86 = add nsw i64 %85, 1
  store i64 %86, ptr %memberidx.i.i79, align 4
  %ptridx.i.i86 = getelementptr inbounds ptr, ptr %84, i64 %85
  store ptr %77, ptr %ptridx.i.i86, align 8
  br label %common.ret

ifend20:                                          ; preds = %if.entry.i, %ifend16, %check_is_var.exit
  %memberidx23 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 3
  %87 = load ptr, ptr %memberidx23, align 8
  %88 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %13, ptr %87)
  br i1 %88, label %ifend26, label %if.entry24

if.entry24:                                       ; preds = %ifend20
  %89 = load ptr, ptr %memberidx23, align 8
  %90 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %89)
  %91 = load ptr, ptr %90, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %91, i64 0, i32 5
  %92 = load ptr, ptr %memberidx28, align 8
  %93 = tail call ptr %92(ptr nonnull %90)
  %94 = load ptr, ptr %memberidx12, align 8
  %95 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %94)
  %96 = load ptr, ptr %95, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %96, i64 0, i32 5
  %97 = load ptr, ptr %memberidx30, align 8
  %98 = tail call ptr %97(ptr nonnull %95)
  %99 = alloca ptr, align 8
  %100 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %99, ptr nonnull @159, ptr %93, ptr %98)
  %101 = load ptr, ptr %99, align 8
  %102 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i88 = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %101, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 %100, ptr %memberidx1.i89, align 4
  %memberidx2.i90 = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 %100, ptr %memberidx2.i90, align 4
  tail call void @free(ptr %93)
  tail call void @free(ptr %98)
  %103 = load ptr, ptr %3, align 8
  %memberidx.i91 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %104 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %Compiler, ptr %104, i64 0, i32 6
  %105 = load ptr, ptr %memberidx1.i92, align 8
  %106 = call ptr @malloc(i32 24)
  store i64 5, ptr %106, align 4
  %memberidx1.i.i93 = getelementptr inbounds %FloError, ptr %106, i64 0, i32 2
  store ptr %103, ptr %memberidx1.i.i93, align 8
  %memberidx2.i.i94 = getelementptr inbounds %FloError, ptr %106, i64 0, i32 1
  store ptr %102, ptr %memberidx2.i.i94, align 8
  %memberidx.i.i95 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 2
  %107 = load i64, ptr %memberidx.i.i95, align 4
  %memberidx1.i2.i96 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 3
  %108 = load i64, ptr %memberidx1.i2.i96, align 4
  %.not.i.i97 = icmp slt i64 %107, %108
  br i1 %.not.i.i97, label %if.entry24.TypeChecker_error.exit103_crit_edge, label %if.entry.i.i100

if.entry24.TypeChecker_error.exit103_crit_edge:   ; preds = %if.entry24
  %memberidx4.i.i101.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %.pre113 = load ptr, ptr %memberidx4.i.i101.phi.trans.insert, align 8
  br label %TypeChecker_error.exit103

if.entry.i.i100:                                  ; preds = %if.entry24
  %109 = shl nuw i64 %108, 1
  store i64 %109, ptr %memberidx1.i2.i96, align 4
  %memberidx2.i.i.i99 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i.i.i99, align 8
  %111 = shl i64 %108, 4
  %112 = call ptr @realloc(ptr %110, i64 %111)
  store ptr %112, ptr %memberidx2.i.i.i99, align 8
  %.pre112 = load i64, ptr %memberidx.i.i95, align 4
  br label %TypeChecker_error.exit103

TypeChecker_error.exit103:                        ; preds = %if.entry24.TypeChecker_error.exit103_crit_edge, %if.entry.i.i100
  %113 = phi ptr [ %.pre113, %if.entry24.TypeChecker_error.exit103_crit_edge ], [ %112, %if.entry.i.i100 ]
  %114 = phi i64 [ %107, %if.entry24.TypeChecker_error.exit103_crit_edge ], [ %.pre112, %if.entry.i.i100 ]
  %115 = add nsw i64 %114, 1
  store i64 %115, ptr %memberidx.i.i95, align 4
  %ptridx.i.i102 = getelementptr inbounds ptr, ptr %113, i64 %114
  store ptr %106, ptr %ptridx.i.i102, align 8
  br label %common.ret

ifend26:                                          ; preds = %ifend20
  %116 = tail call ptr @malloc(i32 49)
  %117 = load ptr, ptr %memberidx23, align 8
  store i64 8, ptr %116, align 4
  %memberidx.i.i104 = getelementptr inbounds %Expression, ptr %116, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i104, align 4
  %memberidx1.i.i105 = getelementptr inbounds %Expression, ptr %116, i64 0, i32 1
  %memberidx.i106 = getelementptr inbounds %BinaryExpression, ptr %116, i64 0, i32 4
  store ptr %1, ptr %memberidx.i106, align 8
  %memberidx1.i107 = getelementptr inbounds %BinaryExpression, ptr %116, i64 0, i32 5
  store i64 19, ptr %memberidx1.i107, align 4
  %memberidx2.i108 = getelementptr inbounds %BinaryExpression, ptr %116, i64 0, i32 6
  store ptr %right.0, ptr %memberidx2.i108, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %116, i64 0, i32 3
  store ptr %117, ptr %memberidx3.i, align 8
  store i1 false, ptr %memberidx1.i.i105, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_init_function_signature(ptr %0, ptr nocapture readonly %1, ptr %2, ptr nocapture %3) unnamed_addr {
for.entry:
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %4, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %6 = tail call ptr @malloc(i32 25)
  %memberidx.i61 = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i61, align 8
  %memberidx1.i62 = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 2
  %8 = load i64, ptr %memberidx1.i62, align 4
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 3
  store ptr %7, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 2
  store i64 %8, ptr %memberidx3.i.i, align 4
  %9 = icmp slt i64 %8, 1
  br i1 %9, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx.i68 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %memberidx.i74 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 2
  %memberidx1.i75 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 3
  %memberidx2.i.i77 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_Type____sl__.exit
  %10 = phi i64 [ 1, %for.body.lr.ph ], [ %52, %Array_Type____sl__.exit ]
  %arg.0103.in = phi ptr [ %7, %for.body.lr.ph ], [ %ptridx.i89, %Array_Type____sl__.exit ]
  %arg.0103 = load ptr, ptr %arg.0103.in, align 8
  %11 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %11, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %11, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i, align 4
  %memberidx1.i.i65 = getelementptr inbounds %Expression, ptr %11, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i65, align 1
  %memberidx3 = getelementptr inbounds %FunctionArg, ptr %11, i64 0, i32 5
  %12 = load ptr, ptr %arg.0103, align 8
  %memberidx5 = getelementptr inbounds %IdentifierToken, ptr %12, i64 0, i32 2
  %13 = load ptr, ptr %memberidx5, align 8
  store ptr %13, ptr %memberidx3, align 8
  %memberidx6 = getelementptr inbounds %FunctionArg, ptr %11, i64 0, i32 6
  store ptr null, ptr %memberidx6, align 8
  %14 = call ptr @malloc(i32 8)
  store i64 20, ptr %14, align 4
  %memberidx7 = getelementptr inbounds %ArgNode, ptr %arg.0103, i64 0, i32 1
  %15 = load ptr, ptr %memberidx7, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

common.ret.loopexit:                              ; preds = %if.entry, %if.entry13
  store i1 false, ptr %6, align 1
  br label %common.ret

common.ret:                                       ; preds = %common.ret.loopexit, %for.end
  %common.ret.op = phi ptr [ %17, %for.end ], [ null, %common.ret.loopexit ]
  ret ptr %common.ret.op

for.end:                                          ; preds = %Array_Type____sl__.exit, %for.entry
  tail call void @free(ptr nonnull %6)
  %16 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %2)
  %17 = tail call ptr @malloc(i32 25)
  store i64 15, ptr %17, align 4
  %memberidx.i66 = getelementptr inbounds %FunctionType, ptr %17, i64 0, i32 1
  store ptr %4, ptr %memberidx.i66, align 8
  %memberidx1.i67 = getelementptr inbounds %FunctionType, ptr %17, i64 0, i32 2
  store ptr %16, ptr %memberidx1.i67, align 8
  br label %common.ret

if.entry:                                         ; preds = %for.body
  %18 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr nonnull %15)
  %19 = load ptr, ptr %memberidx.i68, align 8
  %memberidx1.i69 = getelementptr inbounds %Compiler, ptr %19, i64 0, i32 6
  %20 = load ptr, ptr %memberidx1.i69, align 8
  %memberidx2.i70 = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2.i70, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %common.ret.loopexit, label %ifend

ifend:                                            ; preds = %if.entry, %for.body
  %23 = phi ptr [ %18, %if.entry ], [ %14, %for.body ]
  %memberidx12 = getelementptr inbounds %ArgNode, ptr %arg.0103, i64 0, i32 2
  %24 = load ptr, ptr %memberidx12, align 8
  %.not60 = icmp eq ptr %24, null
  br i1 %.not60, label %ifend15, label %if.entry13

if.entry13:                                       ; preds = %ifend
  %25 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %23, ptr nonnull %24)
  store ptr %25, ptr %memberidx6, align 8
  %26 = load ptr, ptr %memberidx.i68, align 8
  %memberidx1.i72 = getelementptr inbounds %Compiler, ptr %26, i64 0, i32 6
  %27 = load ptr, ptr %memberidx1.i72, align 8
  %memberidx2.i73 = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i73, align 4
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %common.ret.loopexit, label %ifend20

ifend15:                                          ; preds = %ifend20, %TypeChecker_error.exit, %else23, %ifend
  %30 = phi ptr [ %23, %TypeChecker_error.exit ], [ %23, %else23 ], [ %23, %ifend ], [ %55, %ifend20 ]
  %31 = load i64, ptr %memberidx.i74, align 4
  %32 = load i64, ptr %memberidx1.i75, align 4
  %.not.i = icmp slt i64 %31, %32
  br i1 %.not.i, label %ifend15.Array_FunctionArg____sl__.exit_crit_edge, label %if.entry.i

ifend15.Array_FunctionArg____sl__.exit_crit_edge: ; preds = %ifend15
  %.pre107 = load ptr, ptr %memberidx2.i.i77, align 8
  br label %Array_FunctionArg____sl__.exit

if.entry.i:                                       ; preds = %ifend15
  %33 = shl nuw i64 %32, 1
  store i64 %33, ptr %memberidx1.i75, align 4
  %34 = load ptr, ptr %memberidx2.i.i77, align 8
  %35 = shl i64 %32, 4
  %36 = call ptr @realloc(ptr %34, i64 %35)
  store ptr %36, ptr %memberidx2.i.i77, align 8
  %.pre106 = load i64, ptr %memberidx.i74, align 4
  br label %Array_FunctionArg____sl__.exit

Array_FunctionArg____sl__.exit:                   ; preds = %ifend15.Array_FunctionArg____sl__.exit_crit_edge, %if.entry.i
  %37 = phi ptr [ %.pre107, %ifend15.Array_FunctionArg____sl__.exit_crit_edge ], [ %36, %if.entry.i ]
  %38 = phi i64 [ %31, %ifend15.Array_FunctionArg____sl__.exit_crit_edge ], [ %.pre106, %if.entry.i ]
  %39 = add nsw i64 %38, 1
  store i64 %39, ptr %memberidx.i74, align 4
  %ptridx.i78 = getelementptr inbounds ptr, ptr %37, i64 %38
  store ptr %11, ptr %ptridx.i78, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %11, i64 0, i32 3
  store ptr %30, ptr %memberidx38, align 8
  %40 = load ptr, ptr %memberidx3, align 8
  %41 = call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr %0, ptr %40, ptr nonnull %11, ptr %30)
  %memberidx40 = getelementptr inbounds %FunctionArg, ptr %11, i64 0, i32 4
  %memberidx41 = getelementptr inbounds %Var, ptr %41, i64 0, i32 1
  %42 = load ptr, ptr %memberidx41, align 8
  store ptr %42, ptr %memberidx40, align 8
  %43 = load i64, ptr %memberidx.i, align 4
  %44 = load i64, ptr %memberidx1.i, align 4
  %.not.i81 = icmp slt i64 %43, %44
  br i1 %.not.i81, label %Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge, label %if.entry.i84

Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge: ; preds = %Array_FunctionArg____sl__.exit
  %.pre109 = load ptr, ptr %memberidx2.i, align 8
  br label %Array_Type____sl__.exit

if.entry.i84:                                     ; preds = %Array_FunctionArg____sl__.exit
  %45 = shl nuw i64 %44, 1
  store i64 %45, ptr %memberidx1.i, align 4
  %46 = load ptr, ptr %memberidx2.i, align 8
  %47 = shl i64 %44, 4
  %48 = call ptr @realloc(ptr %46, i64 %47)
  store ptr %48, ptr %memberidx2.i, align 8
  %.pre108 = load i64, ptr %memberidx.i, align 4
  br label %Array_Type____sl__.exit

Array_Type____sl__.exit:                          ; preds = %Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge, %if.entry.i84
  %49 = phi ptr [ %.pre109, %Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge ], [ %48, %if.entry.i84 ]
  %50 = phi i64 [ %43, %Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge ], [ %.pre108, %if.entry.i84 ]
  %51 = add nsw i64 %50, 1
  store i64 %51, ptr %memberidx.i, align 4
  %ptridx.i86 = getelementptr inbounds ptr, ptr %49, i64 %50
  store ptr %30, ptr %ptridx.i86, align 8
  %52 = add nuw nsw i64 %10, 1
  store i64 %52, ptr %memberidx1.i.i, align 4
  %ptridx.i89 = getelementptr inbounds ptr, ptr %7, i64 %10
  %.not110 = icmp slt i64 %10, %8
  br i1 %.not110, label %for.body, label %for.end

ifend20:                                          ; preds = %if.entry13
  %53 = load i64, ptr %23, align 4
  %54 = icmp eq i64 %53, 20
  %memberidx26 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %55 = load ptr, ptr %memberidx26, align 8
  br i1 %54, label %ifend15, label %else23

else23:                                           ; preds = %ifend20
  %56 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %23, ptr %55)
  br i1 %56, label %ifend15, label %if.entry29

if.entry29:                                       ; preds = %else23
  %57 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %23)
  %58 = load ptr, ptr %57, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i64 0, i32 5
  %59 = load ptr, ptr %memberidx32, align 8
  %60 = call ptr %59(ptr nonnull %57)
  %61 = load ptr, ptr %memberidx6, align 8
  %memberidx34 = getelementptr inbounds %Expression, ptr %61, i64 0, i32 3
  %62 = load ptr, ptr %memberidx34, align 8
  %63 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %62)
  %64 = load ptr, ptr %63, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 5
  %65 = load ptr, ptr %memberidx35, align 8
  %66 = call ptr %65(ptr nonnull %63)
  %67 = alloca ptr, align 8
  %68 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %67, ptr nonnull @92, ptr %60, ptr %66)
  %69 = load ptr, ptr %67, align 8
  %70 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %70, align 8
  %memberidx.i91 = getelementptr inbounds %string, ptr %70, i64 0, i32 1
  store ptr %69, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %string, ptr %70, i64 0, i32 2
  store i64 %68, ptr %memberidx1.i92, align 4
  %memberidx2.i93 = getelementptr inbounds %string, ptr %70, i64 0, i32 3
  store i64 %68, ptr %memberidx2.i93, align 4
  tail call void @free(ptr %60)
  tail call void @free(ptr %66)
  %71 = load ptr, ptr %memberidx12, align 8
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %memberidx.i68, align 8
  %memberidx1.i95 = getelementptr inbounds %Compiler, ptr %73, i64 0, i32 6
  %74 = load ptr, ptr %memberidx1.i95, align 8
  %75 = call ptr @malloc(i32 24)
  store i64 5, ptr %75, align 4
  %memberidx1.i.i96 = getelementptr inbounds %FloError, ptr %75, i64 0, i32 2
  store ptr %72, ptr %memberidx1.i.i96, align 8
  %memberidx2.i.i97 = getelementptr inbounds %FloError, ptr %75, i64 0, i32 1
  store ptr %70, ptr %memberidx2.i.i97, align 8
  %memberidx.i.i98 = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 2
  %76 = load i64, ptr %memberidx.i.i98, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 3
  %77 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %76, %77
  br i1 %.not.i.i, label %if.entry29.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry29.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry29
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 1
  %.pre105 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry29
  %78 = shl nuw i64 %77, 1
  store i64 %78, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 1
  %79 = load ptr, ptr %memberidx2.i.i.i, align 8
  %80 = shl i64 %77, 4
  %81 = call ptr @realloc(ptr %79, i64 %80)
  store ptr %81, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i98, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry29.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %82 = phi ptr [ %.pre105, %if.entry29.TypeChecker_error.exit_crit_edge ], [ %81, %if.entry.i.i ]
  %83 = phi i64 [ %76, %if.entry29.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %84 = add nsw i64 %83, 1
  store i64 %84, ptr %memberidx.i.i98, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %82, i64 %83
  store ptr %75, ptr %ptridx.i.i, align 8
  br label %ifend15
}

define internal fastcc ptr @TypeChecker_check_constructor_call(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2, ptr nocapture writeonly %3) unnamed_addr {
  %5 = load ptr, ptr %0, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i, align 8
  %7 = load i64, ptr %1, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %8, i64 %7
  %9 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %9, i64 0, i32 4
  %10 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 2
  %11 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %12, i64 %11
  %13 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %13, i64 0, i32 3
  %14 = load ptr, ptr %memberidx1, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %else13, %if.entry12, %ifend11, %if.entry
  %common.ret.op = phi ptr [ %17, %if.entry ], [ null, %ifend11 ], [ %47, %if.entry12 ], [ %65, %else13 ], [ null, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  %16 = tail call ptr @malloc(i32 44)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(44) %16, ptr noundef nonnull align 8 dereferenceable(44) @175, i64 44, i1 false)
  %17 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %17, align 8
  %memberidx.i.i30 = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  store ptr %16, ptr %memberidx.i.i30, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  store i64 44, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 3
  store i64 44, ptr %memberidx2.i.i, align 4
  br label %common.ret

ifend:                                            ; preds = %4
  %memberidx2 = getelementptr inbounds %Class, ptr %13, i64 0, i32 5
  %18 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %14, i64 0, i32 2
  %19 = load i64, ptr %memberidx3, align 4
  %memberidx.i31 = getelementptr inbounds %Array_ClassMethod_, ptr %18, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i31, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %20, i64 %19
  %21 = load ptr, ptr %ptridx.i, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %21, i64 0, i32 4
  %22 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %21, i64 0, i32 6
  %23 = load ptr, ptr %memberidx5, align 8
  %24 = tail call fastcc ptr @TypeChecker_fill_in_call_args(ptr nonnull %0, ptr %22, ptr %23, ptr %2)
  %memberidx.i32 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %25 = load ptr, ptr %memberidx.i32, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %25, i64 0, i32 6
  %26 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i33 = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i33, align 4
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %common.ret, label %ifend8

ifend8:                                           ; preds = %ifend
  %memberidx.i45 = getelementptr inbounds %FunctionType, ptr %22, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i45, align 8
  %memberidx1.i46 = getelementptr inbounds %Array_Type_, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx1.i46, align 4
  %memberidx2.i47 = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i47, align 4
  %.not.i = icmp eq i64 %30, %31
  br i1 %.not.i, label %for.cond.preheader.i, label %if.entry12

for.cond.preheader.i:                             ; preds = %ifend8
  %32 = icmp sgt i64 %30, 0
  br i1 %32, label %for.body.lr.ph.i, label %ifend11

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i12.i = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %ifend8.i, %for.body.lr.ph.i
  %storemerge14.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %40, %ifend8.i ]
  %33 = load ptr, ptr %memberidx.i45, align 8
  %memberidx.i.i48 = getelementptr inbounds %Array_Type_, ptr %33, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i48, align 8
  %ptridx.i.i49 = getelementptr inbounds ptr, ptr %34, i64 %storemerge14.i
  %35 = load ptr, ptr %ptridx.i.i49, align 8
  %36 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %36, i64 %storemerge14.i
  %37 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx5.i = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %38 = load ptr, ptr %memberidx5.i, align 8
  %39 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %35, ptr %38)
  br i1 %39, label %ifend8.i, label %else13

ifend8.i:                                         ; preds = %for.body.i
  %40 = add nuw nsw i64 %storemerge14.i, 1
  %41 = load i64, ptr %memberidx2.i47, align 4
  %42 = icmp slt i64 %40, %41
  br i1 %42, label %for.body.i, label %ifend11

ifend11:                                          ; preds = %ifend8.i, %for.cond.preheader.i
  store ptr %24, ptr %3, align 8
  br label %common.ret

if.entry12:                                       ; preds = %ifend8
  %memberidx17 = getelementptr inbounds %Array_ExpressionNode_, ptr %2, i64 0, i32 2
  %43 = load i64, ptr %memberidx17, align 4
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %44, ptr nonnull @176, i64 %30, i64 %43)
  %46 = load ptr, ptr %44, align 8
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i34 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i34, align 8
  %memberidx1.i35 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 %45, ptr %memberidx1.i35, align 4
  %memberidx2.i36 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 %45, ptr %memberidx2.i36, align 4
  br label %common.ret

else13:                                           ; preds = %for.body.i
  %48 = load ptr, ptr %memberidx.i45, align 8
  %memberidx.i37 = getelementptr inbounds %Array_Type_, ptr %48, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i37, align 8
  %ptridx.i38 = getelementptr inbounds ptr, ptr %49, i64 %storemerge14.i
  %50 = load ptr, ptr %ptridx.i38, align 8
  %51 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %50)
  %52 = load ptr, ptr %51, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 5
  %53 = load ptr, ptr %memberidx19, align 8
  %54 = tail call ptr %53(ptr nonnull %51)
  %55 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i40 = getelementptr inbounds ptr, ptr %55, i64 %storemerge14.i
  %56 = load ptr, ptr %ptridx.i40, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %56, i64 0, i32 3
  %57 = load ptr, ptr %memberidx20, align 8
  %58 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %57)
  %59 = load ptr, ptr %58, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 5
  %60 = load ptr, ptr %memberidx21, align 8
  %61 = tail call ptr %60(ptr nonnull %58)
  %62 = alloca ptr, align 8
  %63 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %62, ptr nonnull @177, ptr %54, ptr %61, i64 %storemerge14.i)
  %64 = load ptr, ptr %62, align 8
  %65 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %65, align 8
  %memberidx.i41 = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  store ptr %64, ptr %memberidx.i41, align 8
  %memberidx1.i42 = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  store i64 %63, ptr %memberidx1.i42, align 4
  %memberidx2.i43 = getelementptr inbounds %string, ptr %65, i64 0, i32 3
  store i64 %63, ptr %memberidx2.i43, align 4
  tail call void @free(ptr %54)
  tail call void @free(ptr %61)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_methods(ptr %0, ptr nocapture %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 4
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2630 = getelementptr inbounds %Array_MethodNode_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx2630, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 8
  %6 = load i64, ptr %memberidx, align 4
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %memberidx55 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx124 = getelementptr inbounds %Class, ptr %1, i64 0, i32 3
  %memberidx139 = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %memberidx112 = getelementptr inbounds %Class, ptr %1, i64 0, i32 7
  %memberidx152 = getelementptr inbounds %Class, ptr %1, i64 0, i32 5
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ClassMethod____sl__.exit
  %7 = phi ptr [ %3, %for.body.lr.ph ], [ %405, %Array_ClassMethod____sl__.exit ]
  %i.0632 = phi i64 [ 0, %for.body.lr.ph ], [ %404, %Array_ClassMethod____sl__.exit ]
  %current_vtable_index.0631 = phi i64 [ %6, %for.body.lr.ph ], [ %current_vtable_index.1, %Array_ClassMethod____sl__.exit ]
  %memberidx.i = getelementptr inbounds %Array_MethodNode_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %8, i64 %i.0632
  %9 = load ptr, ptr %ptridx.i, align 8
  %10 = tail call ptr @malloc(i32 66)
  %memberidx.i201 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 7
  store i1 false, ptr %memberidx.i201, align 1
  %11 = load ptr, ptr %9, align 8
  %memberidx5 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 3
  store ptr %12, ptr %memberidx6, align 8
  %13 = tail call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i202 = getelementptr inbounds %Scope, ptr %13, i64 0, i32 5
  %14 = load ptr, ptr %memberidx1.i, align 8
  store ptr %14, ptr %memberidx.i202, align 8
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %memberidx1.i, align 8
  %memberidx9 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 6
  %16 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionArg_, ptr %16, align 8
  %memberidx.i203 = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 2
  store i64 0, ptr %memberidx.i203, align 4
  %memberidx1.i204 = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 3
  store i64 8, ptr %memberidx1.i204, align 4
  %memberidx2.i = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 1
  %17 = tail call ptr @malloc(i32 64)
  store ptr %17, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i203, align 4
  store ptr %16, ptr %memberidx9, align 8
  %18 = tail call fastcc i1 @is_operator_overload_name(ptr %12)
  br i1 %18, label %if.entry, label %ifend

common.ret:                                       ; preds = %Array_ClassMethod____sl__.exit, %for.entry, %TypeChecker_error.exit495, %TypeChecker_error.exit479, %TypeChecker_error.exit459, %TypeChecker_error.exit432, %TypeChecker_error.exit374, %TypeChecker_error.exit353, %TypeChecker_error.exit306, %TypeChecker_error.exit288, %TypeChecker_error.exit264, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %for.body
  %19 = tail call ptr @malloc(i32 8)
  store i64 6872337336460992351, ptr %19, align 8
  %20 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i, align 4
  %memberidx.i205 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %21 = load i64, ptr %memberidx.i205, align 4
  %.not.i = icmp eq i64 %21, 8
  br i1 %.not.i, label %ifend.i, label %string___eq__.exit

ifend.i:                                          ; preds = %if.entry
  %memberidx2.i207 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i207, align 8
  %23 = tail call i64 @memcmp(ptr %22, ptr nonnull %19, i64 8)
  %24 = icmp eq i64 %23, 0
  br label %string___eq__.exit

string___eq__.exit:                               ; preds = %if.entry, %ifend.i
  %common.ret.op.i = phi i1 [ %24, %ifend.i ], [ false, %if.entry ]
  %25 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %25, ptr noundef nonnull align 8 dereferenceable(7) @121, i64 7, i1 false)
  %26 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %26, align 8
  %memberidx.i.i208 = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  store ptr %25, ptr %memberidx.i.i208, align 8
  %memberidx1.i.i209 = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i209, align 4
  %memberidx2.i.i210 = getelementptr inbounds %string, ptr %26, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i210, align 4
  %27 = load i64, ptr %memberidx.i205, align 4
  %.not.i213 = icmp eq i64 %27, 7
  br i1 %.not.i213, label %ifend.i217, label %string___eq__.exit218

ifend.i217:                                       ; preds = %string___eq__.exit
  %memberidx2.i215 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %28 = load ptr, ptr %memberidx2.i215, align 8
  %29 = tail call i64 @memcmp(ptr %28, ptr nonnull %25, i64 7)
  %30 = icmp eq i64 %29, 0
  br label %string___eq__.exit218

string___eq__.exit218:                            ; preds = %string___eq__.exit, %ifend.i217
  %common.ret.op.i214 = phi i1 [ %30, %ifend.i217 ], [ false, %string___eq__.exit ]
  %31 = or i1 %common.ret.op.i, %common.ret.op.i214
  br i1 %31, label %ifend14, label %else13

ifend:                                            ; preds = %ifend22, %for.body
  %memberidx36 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 6
  %32 = load i1, ptr %memberidx36, align 1
  store i1 %32, ptr %memberidx.i201, align 1
  %memberidx37 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 1
  %memberidx38 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 5
  %33 = load i1, ptr %memberidx38, align 1
  store i1 %33, ptr %memberidx37, align 1
  %memberidx39 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 2
  %memberidx40 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 3
  %34 = load i64, ptr %memberidx40, align 4
  store i64 %34, ptr %memberidx39, align 4
  %memberidx41 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 4
  %memberidx42 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 1
  %35 = load ptr, ptr %memberidx42, align 8
  %memberidx43 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 4
  %36 = load ptr, ptr %memberidx43, align 8
  %37 = load ptr, ptr %memberidx9, align 8
  %38 = tail call fastcc ptr @TypeChecker_init_function_signature(ptr nonnull %0, ptr %35, ptr %36, ptr %37)
  store ptr %38, ptr %memberidx41, align 8
  %39 = tail call ptr @malloc(i32 8)
  store i64 6872337336460992351, ptr %39, align 8
  %40 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %40, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  store ptr %39, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %40, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i221, align 4
  %memberidx.i222 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %41 = load i64, ptr %memberidx.i222, align 4
  %.not.i224 = icmp eq i64 %41, 8
  br i1 %.not.i224, label %ifend.i228, label %ifend47

ifend.i228:                                       ; preds = %ifend
  %memberidx2.i226 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %42 = load ptr, ptr %memberidx2.i226, align 8
  %43 = tail call i64 @memcmp(ptr %42, ptr nonnull %39, i64 8)
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %if.entry45, label %ifend47

else13:                                           ; preds = %string___eq__.exit218
  %45 = tail call ptr @malloc(i32 11)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %45, ptr noundef nonnull align 8 dereferenceable(11) @108, i64 11, i1 false)
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i230 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i230, align 8
  %memberidx1.i.i231 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i231, align 4
  %memberidx2.i.i232 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i232, align 4
  %47 = load i64, ptr %memberidx.i205, align 4
  %.not.i235 = icmp eq i64 %47, 11
  br i1 %.not.i235, label %ifend.i239, label %ifend14

ifend.i239:                                       ; preds = %else13
  %memberidx2.i237 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i237, align 8
  %49 = tail call i64 @memcmp(ptr %48, ptr nonnull %45, i64 11)
  %50 = icmp eq i64 %49, 0
  %spec.select = select i1 %50, i64 2, i64 1
  br label %ifend14

ifend14:                                          ; preds = %ifend.i239, %string___eq__.exit218, %else13
  %51 = phi i64 [ 1, %else13 ], [ 0, %string___eq__.exit218 ], [ %spec.select, %ifend.i239 ]
  %memberidx18 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 1
  %52 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Array_ArgNode_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx19, align 4
  %.not200 = icmp eq i64 %53, %51
  br i1 %.not200, label %ifend22, label %if.entry20

if.entry20:                                       ; preds = %ifend14
  %54 = load ptr, ptr %12, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i64 0, i32 5
  %55 = load ptr, ptr %memberidx23, align 8
  %56 = tail call ptr %55(ptr nonnull %12)
  %57 = load ptr, ptr %memberidx18, align 8
  %memberidx25 = getelementptr inbounds %Array_ArgNode_, ptr %57, i64 0, i32 2
  %58 = load i64, ptr %memberidx25, align 4
  %59 = alloca ptr, align 8
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %59, ptr nonnull @128, i64 %51, ptr %56, i64 %58)
  %61 = load ptr, ptr %59, align 8
  %62 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i241 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i241, align 8
  %memberidx1.i242 = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i242, align 4
  %memberidx2.i243 = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 %60, ptr %memberidx2.i243, align 4
  tail call void @free(ptr %56)
  %63 = load ptr, ptr %9, align 8
  %memberidx27 = getelementptr inbounds %Token, ptr %63, i64 0, i32 1
  %64 = load ptr, ptr %memberidx27, align 8
  %memberidx.i244 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %65 = load ptr, ptr %memberidx.i244, align 8
  %memberidx1.i245 = getelementptr inbounds %Compiler, ptr %65, i64 0, i32 6
  %66 = load ptr, ptr %memberidx1.i245, align 8
  %67 = call ptr @malloc(i32 24)
  store i64 4, ptr %67, align 4
  %memberidx1.i.i246 = getelementptr inbounds %FloError, ptr %67, i64 0, i32 2
  store ptr %64, ptr %memberidx1.i.i246, align 8
  %memberidx2.i.i247 = getelementptr inbounds %FloError, ptr %67, i64 0, i32 1
  store ptr %62, ptr %memberidx2.i.i247, align 8
  %memberidx.i.i248 = getelementptr inbounds %Array_FloError_, ptr %66, i64 0, i32 2
  %68 = load i64, ptr %memberidx.i.i248, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %66, i64 0, i32 3
  %69 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %68, %69
  br i1 %.not.i.i, label %if.entry20.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry20.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry20
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %66, i64 0, i32 1
  %.pre691 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry20
  %70 = shl nuw i64 %69, 1
  store i64 %70, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %66, i64 0, i32 1
  %71 = load ptr, ptr %memberidx2.i.i.i, align 8
  %72 = shl i64 %69, 4
  %73 = call ptr @realloc(ptr %71, i64 %72)
  store ptr %73, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i248, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry20.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %74 = phi ptr [ %.pre691, %if.entry20.TypeChecker_error.exit_crit_edge ], [ %73, %if.entry.i.i ]
  %75 = phi i64 [ %68, %if.entry20.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %76 = add nsw i64 %75, 1
  store i64 %76, ptr %memberidx.i.i248, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %74, i64 %75
  store ptr %67, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend22:                                          ; preds = %ifend14
  %memberidx28 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 5
  %77 = load i1, ptr %memberidx28, align 1
  br i1 %77, label %if.entry29, label %ifend

if.entry29:                                       ; preds = %ifend22
  %78 = load ptr, ptr %12, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %78, i64 0, i32 5
  %79 = load ptr, ptr %memberidx32, align 8
  %80 = tail call ptr %79(ptr nonnull %12)
  %81 = alloca ptr, align 8
  %82 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %81, ptr nonnull @129, ptr %80)
  %83 = load ptr, ptr %81, align 8
  %84 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %84, align 8
  %memberidx.i249 = getelementptr inbounds %string, ptr %84, i64 0, i32 1
  store ptr %83, ptr %memberidx.i249, align 8
  %memberidx1.i250 = getelementptr inbounds %string, ptr %84, i64 0, i32 2
  store i64 %82, ptr %memberidx1.i250, align 4
  %memberidx2.i251 = getelementptr inbounds %string, ptr %84, i64 0, i32 3
  store i64 %82, ptr %memberidx2.i251, align 4
  tail call void @free(ptr %80)
  %85 = load ptr, ptr %9, align 8
  %memberidx34 = getelementptr inbounds %Token, ptr %85, i64 0, i32 1
  %86 = load ptr, ptr %memberidx34, align 8
  %memberidx.i252 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %87 = load ptr, ptr %memberidx.i252, align 8
  %memberidx1.i253 = getelementptr inbounds %Compiler, ptr %87, i64 0, i32 6
  %88 = load ptr, ptr %memberidx1.i253, align 8
  %89 = call ptr @malloc(i32 24)
  store i64 4, ptr %89, align 4
  %memberidx1.i.i254 = getelementptr inbounds %FloError, ptr %89, i64 0, i32 2
  store ptr %86, ptr %memberidx1.i.i254, align 8
  %memberidx2.i.i255 = getelementptr inbounds %FloError, ptr %89, i64 0, i32 1
  store ptr %84, ptr %memberidx2.i.i255, align 8
  %memberidx.i.i256 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 2
  %90 = load i64, ptr %memberidx.i.i256, align 4
  %memberidx1.i2.i257 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 3
  %91 = load i64, ptr %memberidx1.i2.i257, align 4
  %.not.i.i258 = icmp slt i64 %90, %91
  br i1 %.not.i.i258, label %if.entry29.TypeChecker_error.exit264_crit_edge, label %if.entry.i.i261

if.entry29.TypeChecker_error.exit264_crit_edge:   ; preds = %if.entry29
  %memberidx4.i.i262.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 1
  %.pre715 = load ptr, ptr %memberidx4.i.i262.phi.trans.insert, align 8
  br label %TypeChecker_error.exit264

if.entry.i.i261:                                  ; preds = %if.entry29
  %92 = shl nuw i64 %91, 1
  store i64 %92, ptr %memberidx1.i2.i257, align 4
  %memberidx2.i.i.i260 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 1
  %93 = load ptr, ptr %memberidx2.i.i.i260, align 8
  %94 = shl i64 %91, 4
  %95 = call ptr @realloc(ptr %93, i64 %94)
  store ptr %95, ptr %memberidx2.i.i.i260, align 8
  %.pre714 = load i64, ptr %memberidx.i.i256, align 4
  br label %TypeChecker_error.exit264

TypeChecker_error.exit264:                        ; preds = %if.entry29.TypeChecker_error.exit264_crit_edge, %if.entry.i.i261
  %96 = phi ptr [ %.pre715, %if.entry29.TypeChecker_error.exit264_crit_edge ], [ %95, %if.entry.i.i261 ]
  %97 = phi i64 [ %90, %if.entry29.TypeChecker_error.exit264_crit_edge ], [ %.pre714, %if.entry.i.i261 ]
  %98 = add nsw i64 %97, 1
  store i64 %98, ptr %memberidx.i.i256, align 4
  %ptridx.i.i263 = getelementptr inbounds ptr, ptr %96, i64 %97
  store ptr %89, ptr %ptridx.i.i263, align 8
  br label %common.ret

if.entry45:                                       ; preds = %ifend.i228
  %99 = load ptr, ptr %memberidx41, align 8
  %memberidx49 = getelementptr inbounds %FunctionType, ptr %99, i64 0, i32 2
  %100 = load ptr, ptr %memberidx49, align 8
  %101 = load i64, ptr %100, align 4
  %102 = icmp eq i64 %101, 19
  br i1 %102, label %if.entry.i89.i, label %is_object.exit.i

if.entry.i89.i:                                   ; preds = %if.entry45, %if.entry.i89.i
  %.tr5.i.i = phi ptr [ %103, %if.entry.i89.i ], [ %100, %if.entry45 ]
  %memberidx1.i88.i = getelementptr inbounds %GenericType, ptr %.tr5.i.i, i64 0, i32 3
  %103 = load ptr, ptr %memberidx1.i88.i, align 8
  %104 = load i64, ptr %103, align 4
  %105 = icmp eq i64 %104, 19
  br i1 %105, label %if.entry.i89.i, label %is_object.exit.i

is_object.exit.i:                                 ; preds = %if.entry.i89.i, %if.entry45
  %.lcssa.i.i = phi i64 [ %101, %if.entry45 ], [ %104, %if.entry.i89.i ]
  %106 = icmp eq i64 %.lcssa.i.i, 11
  br i1 %106, label %ifend.i545, label %if.entry50

ifend.i545:                                       ; preds = %is_object.exit.i
  %107 = load ptr, ptr %0, align 8
  br label %tailrecurse.i.i

tailrecurse.i.i:                                  ; preds = %if.entry.i93.i, %ifend.i545
  %108 = phi i64 [ %101, %ifend.i545 ], [ %.pre.i, %if.entry.i93.i ]
  %.tr11.i.i = phi ptr [ %100, %ifend.i545 ], [ %109, %if.entry.i93.i ]
  switch i64 %108, label %get_class_from_type.exit.i [
    i64 19, label %if.entry.i93.i
    i64 11, label %if.entry3.i.i
  ]

if.entry.i93.i:                                   ; preds = %tailrecurse.i.i
  %memberidx1.i92.i = getelementptr inbounds %GenericType, ptr %.tr11.i.i, i64 0, i32 3
  %109 = load ptr, ptr %memberidx1.i92.i, align 8
  %.pre.i = load i64, ptr %109, align 4
  br label %tailrecurse.i.i

if.entry3.i.i:                                    ; preds = %tailrecurse.i.i
  %memberidx6.i94.i = getelementptr inbounds %ObjectType, ptr %.tr11.i.i, i64 0, i32 1
  %110 = load ptr, ptr %memberidx6.i94.i, align 8
  %memberidx.i.i95.i = getelementptr inbounds %Program, ptr %107, i64 0, i32 1
  %111 = load ptr, ptr %memberidx.i.i95.i, align 8
  %112 = load i64, ptr %110, align 4
  %memberidx.i.i.i96.i = getelementptr inbounds %Array_Module_, ptr %111, i64 0, i32 1
  %113 = load ptr, ptr %memberidx.i.i.i96.i, align 8
  %ptridx.i.i.i.i546 = getelementptr inbounds ptr, ptr %113, i64 %112
  %114 = load ptr, ptr %ptridx.i.i.i.i546, align 8
  %memberidx2.i.i97.i = getelementptr inbounds %Module, ptr %114, i64 0, i32 4
  %115 = load ptr, ptr %memberidx2.i.i97.i, align 8
  %memberidx3.i.i98.i = getelementptr inbounds %TypeId, ptr %110, i64 0, i32 2
  %116 = load i64, ptr %memberidx3.i.i98.i, align 4
  %memberidx.i5.i.i.i547 = getelementptr inbounds %Array_Class_, ptr %115, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i5.i.i.i547, align 8
  %ptridx.i6.i.i.i548 = getelementptr inbounds ptr, ptr %117, i64 %116
  %118 = load ptr, ptr %ptridx.i6.i.i.i548, align 8
  br label %get_class_from_type.exit.i

get_class_from_type.exit.i:                       ; preds = %tailrecurse.i.i, %if.entry3.i.i
  %common.ret.op.i91.i = phi ptr [ %118, %if.entry3.i.i ], [ null, %tailrecurse.i.i ]
  %memberidx1.i549 = getelementptr inbounds %Class, ptr %common.ret.op.i91.i, i64 0, i32 6
  %119 = load ptr, ptr %memberidx1.i549, align 8
  %120 = tail call ptr @malloc(i32 4)
  store i32 1701736292, ptr %120, align 8
  %121 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %121, align 8
  %memberidx.i.i.i550 = getelementptr inbounds %string, ptr %121, i64 0, i32 1
  store ptr %120, ptr %memberidx.i.i.i550, align 8
  %memberidx1.i.i.i551 = getelementptr inbounds %string, ptr %121, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i551, align 4
  %memberidx2.i.i.i552 = getelementptr inbounds %string, ptr %121, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i552, align 4
  %122 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %121)
  %memberidx.i.i553 = getelementptr inbounds %Map_string_PropId_, ptr %119, i64 0, i32 1
  %123 = load i64, ptr %memberidx.i.i553, align 4
  %124 = urem i64 %122, %123
  %125 = load ptr, ptr %119, align 8
  %ptridx.i.i554 = getelementptr inbounds ptr, ptr %125, i64 %124
  %126 = load ptr, ptr %ptridx.i.i554, align 8
  %.not.i.i555 = icmp eq ptr %126, null
  br i1 %.not.i.i555, label %if.entry50, label %while.entry.i.i

while.entry.i.i:                                  ; preds = %get_class_from_type.exit.i, %else.i.i
  %127 = phi ptr [ %137, %else.i.i ], [ %125, %get_class_from_type.exit.i ]
  %128 = phi i64 [ %138, %else.i.i ], [ %123, %get_class_from_type.exit.i ]
  %129 = phi ptr [ %141, %else.i.i ], [ %126, %get_class_from_type.exit.i ]
  %hash.0.i.i = phi i64 [ %140, %else.i.i ], [ %124, %get_class_from_type.exit.i ]
  %130 = load ptr, ptr %129, align 8
  %memberidx.i.i29.i = getelementptr inbounds %string, ptr %130, i64 0, i32 2
  %131 = load i64, ptr %memberidx.i.i29.i, align 4
  %132 = load i64, ptr %memberidx1.i.i.i551, align 4
  %.not.i.i.i = icmp eq i64 %131, %132
  br i1 %.not.i.i.i, label %ifend.i.i.i, label %else.i.i

ifend.i.i.i:                                      ; preds = %while.entry.i.i
  %memberidx2.i.i31.i = getelementptr inbounds %string, ptr %130, i64 0, i32 1
  %133 = load ptr, ptr %memberidx2.i.i31.i, align 8
  %134 = load ptr, ptr %memberidx.i.i.i550, align 8
  %135 = tail call i64 @memcmp(ptr %133, ptr %134, i64 %131)
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %while.end.i.i, label %ifend.i.i.else.i_crit_edge.i

ifend.i.i.else.i_crit_edge.i:                     ; preds = %ifend.i.i.i
  %.pre103.i = load i64, ptr %memberidx.i.i553, align 4
  %.pre104.i = load ptr, ptr %119, align 8
  br label %else.i.i

while.end.i.i:                                    ; preds = %ifend.i.i.i
  %.pre105.pre.i = load ptr, ptr %119, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert.i = getelementptr inbounds ptr, ptr %.pre105.pre.i, i64 %hash.0.i.i
  %.pre106.pre.i = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert.i, align 8
  %.not29.i.i = icmp eq ptr %.pre106.pre.i, null
  br i1 %.not29.i.i, label %if.entry50, label %Map_string_PropId____getitem__.exit.i

else.i.i:                                         ; preds = %ifend.i.i.else.i_crit_edge.i, %while.entry.i.i
  %137 = phi ptr [ %.pre104.i, %ifend.i.i.else.i_crit_edge.i ], [ %127, %while.entry.i.i ]
  %138 = phi i64 [ %.pre103.i, %ifend.i.i.else.i_crit_edge.i ], [ %128, %while.entry.i.i ]
  %139 = add nuw i64 %hash.0.i.i, 1
  %140 = urem i64 %139, %138
  %ptridx7.i.i = getelementptr inbounds ptr, ptr %137, i64 %140
  %141 = load ptr, ptr %ptridx7.i.i, align 8
  %.not30.i.i = icmp eq ptr %141, null
  br i1 %.not30.i.i, label %if.entry50, label %while.entry.i.i

Map_string_PropId____getitem__.exit.i:            ; preds = %while.end.i.i
  %memberidx15.i.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre106.pre.i, i64 0, i32 1
  %142 = load ptr, ptr %memberidx15.i.i, align 8
  %143 = icmp eq ptr %142, null
  br i1 %143, label %if.entry50, label %ifend4.i

ifend4.i:                                         ; preds = %Map_string_PropId____getitem__.exit.i
  %144 = load ptr, ptr %0, align 8
  %memberidx.i.i32.i = getelementptr inbounds %PropId, ptr %142, i64 0, i32 1
  %145 = load ptr, ptr %memberidx.i.i32.i, align 8
  %memberidx.i.i.i.i556 = getelementptr inbounds %Program, ptr %144, i64 0, i32 1
  %146 = load ptr, ptr %memberidx.i.i.i.i556, align 8
  %147 = load i64, ptr %145, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %146, i64 0, i32 1
  %148 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %148, i64 %147
  %149 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %149, i64 0, i32 4
  %150 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %145, i64 0, i32 2
  %151 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %150, i64 0, i32 1
  %152 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %152, i64 %151
  %153 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %154 = load i64, ptr %142, align 4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %if.entry.i.i560, label %ifend.i.i563

if.entry.i.i560:                                  ; preds = %ifend4.i
  %memberidx1.i.i557 = getelementptr inbounds %Class, ptr %153, i64 0, i32 5
  %156 = load ptr, ptr %memberidx1.i.i557, align 8
  %memberidx2.i.i558 = getelementptr inbounds %PropId, ptr %142, i64 0, i32 2
  %157 = load i64, ptr %memberidx2.i.i558, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %156, i64 0, i32 1
  %158 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %158, i64 %157
  %159 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i559 = getelementptr inbounds %ClassMethod, ptr %159, i64 0, i32 4
  br label %get_class_prop_type.exit.i

ifend.i.i563:                                     ; preds = %ifend4.i
  %memberidx4.i.i561 = getelementptr inbounds %Class, ptr %153, i64 0, i32 4
  %160 = load ptr, ptr %memberidx4.i.i561, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %142, i64 0, i32 2
  %161 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %160, i64 0, i32 1
  %162 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i562 = getelementptr inbounds ptr, ptr %162, i64 %161
  %163 = load ptr, ptr %ptridx.i.i.i562, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %163, i64 0, i32 4
  br label %get_class_prop_type.exit.i

get_class_prop_type.exit.i:                       ; preds = %ifend.i.i563, %if.entry.i.i560
  %common.ret.op.in.i.i = phi ptr [ %memberidx3.i.i559, %if.entry.i.i560 ], [ %memberidx6.i.i, %ifend.i.i563 ]
  %common.ret.op.i33.i = load ptr, ptr %common.ret.op.in.i.i, align 8
  %164 = load i64, ptr %common.ret.op.i33.i, align 4
  %.not.i564 = icmp eq i64 %164, 0
  br i1 %.not.i564, label %ifend9.i, label %if.entry50

ifend9.i:                                         ; preds = %get_class_prop_type.exit.i
  %165 = load ptr, ptr %memberidx1.i549, align 8
  %166 = tail call ptr @malloc(i32 4)
  store i32 1954047342, ptr %166, align 8
  %167 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %167, align 8
  %memberidx.i.i34.i = getelementptr inbounds %string, ptr %167, i64 0, i32 1
  store ptr %166, ptr %memberidx.i.i34.i, align 8
  %memberidx1.i.i35.i = getelementptr inbounds %string, ptr %167, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i35.i, align 4
  %memberidx2.i.i36.i = getelementptr inbounds %string, ptr %167, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i36.i, align 4
  %168 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %167)
  %memberidx.i37.i = getelementptr inbounds %Map_string_PropId_, ptr %165, i64 0, i32 1
  %169 = load i64, ptr %memberidx.i37.i, align 4
  %170 = urem i64 %168, %169
  %171 = load ptr, ptr %165, align 8
  %ptridx.i38.i = getelementptr inbounds ptr, ptr %171, i64 %170
  %172 = load ptr, ptr %ptridx.i38.i, align 8
  %.not.i39.i = icmp eq ptr %172, null
  br i1 %.not.i39.i, label %if.entry50, label %while.entry.i45.i

while.entry.i45.i:                                ; preds = %ifend9.i, %else.i57.i
  %173 = phi ptr [ %183, %else.i57.i ], [ %171, %ifend9.i ]
  %174 = phi i64 [ %184, %else.i57.i ], [ %169, %ifend9.i ]
  %175 = phi ptr [ %187, %else.i57.i ], [ %172, %ifend9.i ]
  %hash.0.i40.i = phi i64 [ %186, %else.i57.i ], [ %170, %ifend9.i ]
  %176 = load ptr, ptr %175, align 8
  %memberidx.i.i42.i = getelementptr inbounds %string, ptr %176, i64 0, i32 2
  %177 = load i64, ptr %memberidx.i.i42.i, align 4
  %178 = load i64, ptr %memberidx1.i.i35.i, align 4
  %.not.i.i44.i = icmp eq i64 %177, %178
  br i1 %.not.i.i44.i, label %ifend.i.i48.i, label %else.i57.i

ifend.i.i48.i:                                    ; preds = %while.entry.i45.i
  %memberidx2.i.i46.i = getelementptr inbounds %string, ptr %176, i64 0, i32 1
  %179 = load ptr, ptr %memberidx2.i.i46.i, align 8
  %180 = load ptr, ptr %memberidx.i.i34.i, align 8
  %181 = tail call i64 @memcmp(ptr %179, ptr %180, i64 %177)
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %while.end.i54.i, label %ifend.i.i48.else.i57_crit_edge.i

ifend.i.i48.else.i57_crit_edge.i:                 ; preds = %ifend.i.i48.i
  %.pre107.i = load i64, ptr %memberidx.i37.i, align 4
  %.pre108.i = load ptr, ptr %165, align 8
  br label %else.i57.i

while.end.i54.i:                                  ; preds = %ifend.i.i48.i
  %.pre109.pre.i = load ptr, ptr %165, align 8
  %ptridx9.i52.phi.trans.insert.phi.trans.insert.i = getelementptr inbounds ptr, ptr %.pre109.pre.i, i64 %hash.0.i40.i
  %.pre110.pre.i = load ptr, ptr %ptridx9.i52.phi.trans.insert.phi.trans.insert.i, align 8
  %.not29.i53.i = icmp eq ptr %.pre110.pre.i, null
  br i1 %.not29.i53.i, label %if.entry50, label %Map_string_PropId____getitem__.exit61.i

else.i57.i:                                       ; preds = %ifend.i.i48.else.i57_crit_edge.i, %while.entry.i45.i
  %183 = phi ptr [ %.pre108.i, %ifend.i.i48.else.i57_crit_edge.i ], [ %173, %while.entry.i45.i ]
  %184 = phi i64 [ %.pre107.i, %ifend.i.i48.else.i57_crit_edge.i ], [ %174, %while.entry.i45.i ]
  %185 = add nuw i64 %hash.0.i40.i, 1
  %186 = urem i64 %185, %184
  %ptridx7.i55.i = getelementptr inbounds ptr, ptr %183, i64 %186
  %187 = load ptr, ptr %ptridx7.i55.i, align 8
  %.not30.i56.i = icmp eq ptr %187, null
  br i1 %.not30.i56.i, label %if.entry50, label %while.entry.i45.i

Map_string_PropId____getitem__.exit61.i:          ; preds = %while.end.i54.i
  %memberidx15.i59.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre110.pre.i, i64 0, i32 1
  %188 = load ptr, ptr %memberidx15.i59.i, align 8
  %189 = icmp eq ptr %188, null
  br i1 %189, label %if.entry50, label %ifend13.i

ifend13.i:                                        ; preds = %Map_string_PropId____getitem__.exit61.i
  %190 = load ptr, ptr %0, align 8
  %memberidx.i.i62.i = getelementptr inbounds %PropId, ptr %188, i64 0, i32 1
  %191 = load ptr, ptr %memberidx.i.i62.i, align 8
  %memberidx.i.i.i63.i = getelementptr inbounds %Program, ptr %190, i64 0, i32 1
  %192 = load ptr, ptr %memberidx.i.i.i63.i, align 8
  %193 = load i64, ptr %191, align 4
  %memberidx.i.i.i.i64.i = getelementptr inbounds %Array_Module_, ptr %192, i64 0, i32 1
  %194 = load ptr, ptr %memberidx.i.i.i.i64.i, align 8
  %ptridx.i.i.i.i65.i = getelementptr inbounds ptr, ptr %194, i64 %193
  %195 = load ptr, ptr %ptridx.i.i.i.i65.i, align 8
  %memberidx2.i.i.i66.i = getelementptr inbounds %Module, ptr %195, i64 0, i32 4
  %196 = load ptr, ptr %memberidx2.i.i.i66.i, align 8
  %memberidx3.i.i.i67.i = getelementptr inbounds %TypeId, ptr %191, i64 0, i32 2
  %197 = load i64, ptr %memberidx3.i.i.i67.i, align 4
  %memberidx.i5.i.i.i68.i = getelementptr inbounds %Array_Class_, ptr %196, i64 0, i32 1
  %198 = load ptr, ptr %memberidx.i5.i.i.i68.i, align 8
  %ptridx.i6.i.i.i69.i = getelementptr inbounds ptr, ptr %198, i64 %197
  %199 = load ptr, ptr %ptridx.i6.i.i.i69.i, align 8
  %200 = load i64, ptr %188, align 4
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %if.entry.i77.i, label %ifend.i83.i

if.entry.i77.i:                                   ; preds = %ifend13.i
  %memberidx1.i72.i = getelementptr inbounds %Class, ptr %199, i64 0, i32 5
  %202 = load ptr, ptr %memberidx1.i72.i, align 8
  %memberidx2.i73.i = getelementptr inbounds %PropId, ptr %188, i64 0, i32 2
  %203 = load i64, ptr %memberidx2.i73.i, align 4
  %memberidx.i12.i74.i = getelementptr inbounds %Array_ClassMethod_, ptr %202, i64 0, i32 1
  %204 = load ptr, ptr %memberidx.i12.i74.i, align 8
  %ptridx.i13.i75.i = getelementptr inbounds ptr, ptr %204, i64 %203
  %205 = load ptr, ptr %ptridx.i13.i75.i, align 8
  %memberidx3.i76.i = getelementptr inbounds %ClassMethod, ptr %205, i64 0, i32 4
  br label %get_class_prop_type.exit84.i

ifend.i83.i:                                      ; preds = %ifend13.i
  %memberidx4.i78.i = getelementptr inbounds %Class, ptr %199, i64 0, i32 4
  %206 = load ptr, ptr %memberidx4.i78.i, align 8
  %memberidx5.i79.i = getelementptr inbounds %PropId, ptr %188, i64 0, i32 2
  %207 = load i64, ptr %memberidx5.i79.i, align 4
  %memberidx.i11.i80.i = getelementptr inbounds %Array_ClassField_, ptr %206, i64 0, i32 1
  %208 = load ptr, ptr %memberidx.i11.i80.i, align 8
  %ptridx.i.i81.i = getelementptr inbounds ptr, ptr %208, i64 %207
  %209 = load ptr, ptr %ptridx.i.i81.i, align 8
  %memberidx6.i82.i = getelementptr inbounds %ClassField, ptr %209, i64 0, i32 4
  br label %get_class_prop_type.exit84.i

get_class_prop_type.exit84.i:                     ; preds = %ifend.i83.i, %if.entry.i77.i
  %common.ret.op.in.i70.i = phi ptr [ %memberidx3.i76.i, %if.entry.i77.i ], [ %memberidx6.i82.i, %ifend.i83.i ]
  %common.ret.op.i71.i = load ptr, ptr %common.ret.op.in.i70.i, align 8
  %210 = load i64, ptr %common.ret.op.i71.i, align 4
  %.not27.i = icmp eq i64 %210, 15
  br i1 %.not27.i, label %TypeChecker_is_iteratable.exit, label %if.entry50

TypeChecker_is_iteratable.exit:                   ; preds = %get_class_prop_type.exit84.i
  %memberidx19.i = getelementptr inbounds %FunctionType, ptr %common.ret.op.i71.i, i64 0, i32 1
  %211 = load ptr, ptr %memberidx19.i, align 8
  %memberidx20.i = getelementptr inbounds %Array_Type_, ptr %211, i64 0, i32 2
  %212 = load i64, ptr %memberidx20.i, align 4
  %.not28.i = icmp eq i64 %212, 0
  br i1 %.not28.i, label %ifend47, label %if.entry50

ifend47:                                          ; preds = %ifend, %TypeChecker_is_iteratable.exit, %ifend.i228
  %213 = load ptr, ptr %memberidx55, align 8
  %214 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr %12)
  %memberidx.i265 = getelementptr inbounds %Map_string_PropId_, ptr %213, i64 0, i32 1
  %215 = load i64, ptr %memberidx.i265, align 4
  %216 = urem i64 %214, %215
  %217 = load ptr, ptr %213, align 8
  %ptridx.i266 = getelementptr inbounds ptr, ptr %217, i64 %216
  %218 = load ptr, ptr %ptridx.i266, align 8
  %.not.i267 = icmp eq ptr %218, null
  br i1 %.not.i267, label %else57, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %ifend47
  %memberidx3.i.i = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %219 = phi ptr [ %229, %else.i ], [ %217, %while.entry.i.preheader ]
  %220 = phi i64 [ %230, %else.i ], [ %215, %while.entry.i.preheader ]
  %221 = phi ptr [ %233, %else.i ], [ %218, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %232, %else.i ], [ %216, %while.entry.i.preheader ]
  %222 = load ptr, ptr %221, align 8
  %memberidx.i.i268 = getelementptr inbounds %string, ptr %222, i64 0, i32 2
  %223 = load i64, ptr %memberidx.i.i268, align 4
  %224 = load i64, ptr %memberidx.i222, align 4
  %.not.i.i270 = icmp eq i64 %223, %224
  br i1 %.not.i.i270, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i271 = getelementptr inbounds %string, ptr %222, i64 0, i32 1
  %225 = load ptr, ptr %memberidx2.i.i271, align 8
  %226 = load ptr, ptr %memberidx3.i.i, align 8
  %227 = tail call i64 @memcmp(ptr %225, ptr %226, i64 %223)
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre692 = load i64, ptr %memberidx.i265, align 4
  %.pre693 = load ptr, ptr %213, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre694.pre = load ptr, ptr %213, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre694.pre, i64 %hash.0.i
  %.pre695.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre695.pre, null
  br i1 %.not29.i, label %else57, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %229 = phi ptr [ %.pre693, %ifend.i.i.else.i_crit_edge ], [ %219, %while.entry.i ]
  %230 = phi i64 [ %.pre692, %ifend.i.i.else.i_crit_edge ], [ %220, %while.entry.i ]
  %231 = add nuw i64 %hash.0.i, 1
  %232 = urem i64 %231, %230
  %ptridx7.i = getelementptr inbounds ptr, ptr %229, i64 %232
  %233 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %233, null
  br i1 %.not30.i, label %else57, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre695.pre, i64 0, i32 1
  %234 = load ptr, ptr %memberidx15.i, align 8
  %.not = icmp eq ptr %234, null
  br i1 %.not, label %else57, label %if.entry56

if.entry50:                                       ; preds = %ifend9.i, %get_class_from_type.exit.i, %while.end.i54.i, %while.end.i.i, %get_class_prop_type.exit84.i, %Map_string_PropId____getitem__.exit61.i, %get_class_prop_type.exit.i, %Map_string_PropId____getitem__.exit.i, %is_object.exit.i, %TypeChecker_is_iteratable.exit, %else.i.i, %else.i57.i
  %235 = tail call ptr @malloc(i32 74)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(74) %235, ptr noundef nonnull align 8 dereferenceable(74) @130, i64 74, i1 false)
  %236 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %236, align 8
  %memberidx.i.i273 = getelementptr inbounds %string, ptr %236, i64 0, i32 1
  store ptr %235, ptr %memberidx.i.i273, align 8
  %memberidx1.i.i274 = getelementptr inbounds %string, ptr %236, i64 0, i32 2
  store i64 74, ptr %memberidx1.i.i274, align 4
  %memberidx2.i.i275 = getelementptr inbounds %string, ptr %236, i64 0, i32 3
  store i64 74, ptr %memberidx2.i.i275, align 4
  %237 = load ptr, ptr %9, align 8
  %memberidx54 = getelementptr inbounds %Token, ptr %237, i64 0, i32 1
  %238 = load ptr, ptr %memberidx54, align 8
  %memberidx.i276 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %239 = load ptr, ptr %memberidx.i276, align 8
  %memberidx1.i277 = getelementptr inbounds %Compiler, ptr %239, i64 0, i32 6
  %240 = load ptr, ptr %memberidx1.i277, align 8
  %241 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %241, align 4
  %memberidx1.i.i278 = getelementptr inbounds %FloError, ptr %241, i64 0, i32 2
  store ptr %238, ptr %memberidx1.i.i278, align 8
  %memberidx2.i.i279 = getelementptr inbounds %FloError, ptr %241, i64 0, i32 1
  store ptr %236, ptr %memberidx2.i.i279, align 8
  %memberidx.i.i280 = getelementptr inbounds %Array_FloError_, ptr %240, i64 0, i32 2
  %242 = load i64, ptr %memberidx.i.i280, align 4
  %memberidx1.i2.i281 = getelementptr inbounds %Array_FloError_, ptr %240, i64 0, i32 3
  %243 = load i64, ptr %memberidx1.i2.i281, align 4
  %.not.i.i282 = icmp slt i64 %242, %243
  br i1 %.not.i.i282, label %if.entry50.TypeChecker_error.exit288_crit_edge, label %if.entry.i.i285

if.entry50.TypeChecker_error.exit288_crit_edge:   ; preds = %if.entry50
  %memberidx4.i.i286.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %240, i64 0, i32 1
  %.pre713 = load ptr, ptr %memberidx4.i.i286.phi.trans.insert, align 8
  br label %TypeChecker_error.exit288

if.entry.i.i285:                                  ; preds = %if.entry50
  %244 = shl nuw i64 %243, 1
  store i64 %244, ptr %memberidx1.i2.i281, align 4
  %memberidx2.i.i.i284 = getelementptr inbounds %Array_FloError_, ptr %240, i64 0, i32 1
  %245 = load ptr, ptr %memberidx2.i.i.i284, align 8
  %246 = shl i64 %243, 4
  %247 = tail call ptr @realloc(ptr %245, i64 %246)
  store ptr %247, ptr %memberidx2.i.i.i284, align 8
  %.pre712 = load i64, ptr %memberidx.i.i280, align 4
  br label %TypeChecker_error.exit288

TypeChecker_error.exit288:                        ; preds = %if.entry50.TypeChecker_error.exit288_crit_edge, %if.entry.i.i285
  %248 = phi ptr [ %.pre713, %if.entry50.TypeChecker_error.exit288_crit_edge ], [ %247, %if.entry.i.i285 ]
  %249 = phi i64 [ %242, %if.entry50.TypeChecker_error.exit288_crit_edge ], [ %.pre712, %if.entry.i.i285 ]
  %250 = add nsw i64 %249, 1
  store i64 %250, ptr %memberidx.i.i280, align 4
  %ptridx.i.i287 = getelementptr inbounds ptr, ptr %248, i64 %249
  store ptr %241, ptr %ptridx.i.i287, align 8
  br label %common.ret

if.entry56:                                       ; preds = %Map_string_PropId____getitem__.exit
  %memberidx59 = getelementptr inbounds %PropId, ptr %234, i64 0, i32 1
  %251 = load ptr, ptr %memberidx59, align 8
  %252 = load ptr, ptr %1, align 8
  %253 = icmp eq ptr %251, %252
  br i1 %253, label %if.entry61, label %ifend63

else57:                                           ; preds = %else.i, %ifend47, %while.end.i, %Map_string_PropId____getitem__.exit
  %memberidx93 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 9
  store i64 %current_vtable_index.0631, ptr %memberidx93, align 4
  br label %ifend58

ifend58:                                          ; preds = %else57, %get_vtable_index.exit
  %254 = tail call ptr @malloc(i32 24)
  %255 = load ptr, ptr %1, align 8
  store i64 0, ptr %254, align 4
  %memberidx1.i289 = getelementptr inbounds %PropId, ptr %254, i64 0, i32 1
  store ptr %255, ptr %memberidx1.i289, align 8
  %memberidx2.i290 = getelementptr inbounds %PropId, ptr %254, i64 0, i32 2
  store i64 %i.0632, ptr %memberidx2.i290, align 4
  store ptr %254, ptr %10, align 8
  %256 = load i1, ptr %memberidx38, align 1
  br i1 %256, label %if.entry97, label %else98

if.entry61:                                       ; preds = %if.entry56
  %257 = load ptr, ptr %12, align 8
  %memberidx64 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %257, i64 0, i32 5
  %258 = load ptr, ptr %memberidx64, align 8
  %259 = tail call ptr %258(ptr nonnull %12)
  %memberidx65 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %260 = load ptr, ptr %memberidx65, align 8
  %261 = load ptr, ptr %260, align 8
  %memberidx66 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %261, i64 0, i32 5
  %262 = load ptr, ptr %memberidx66, align 8
  %263 = tail call ptr %262(ptr nonnull %260)
  %264 = alloca ptr, align 8
  %265 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %264, ptr nonnull @131, ptr %259, ptr %263)
  %266 = load ptr, ptr %264, align 8
  %267 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %267, align 8
  %memberidx.i291 = getelementptr inbounds %string, ptr %267, i64 0, i32 1
  store ptr %266, ptr %memberidx.i291, align 8
  %memberidx1.i292 = getelementptr inbounds %string, ptr %267, i64 0, i32 2
  store i64 %265, ptr %memberidx1.i292, align 4
  %memberidx2.i293 = getelementptr inbounds %string, ptr %267, i64 0, i32 3
  store i64 %265, ptr %memberidx2.i293, align 4
  tail call void @free(ptr %259)
  tail call void @free(ptr %263)
  %268 = load ptr, ptr %9, align 8
  %memberidx68 = getelementptr inbounds %Token, ptr %268, i64 0, i32 1
  %269 = load ptr, ptr %memberidx68, align 8
  %memberidx.i294 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %270 = load ptr, ptr %memberidx.i294, align 8
  %memberidx1.i295 = getelementptr inbounds %Compiler, ptr %270, i64 0, i32 6
  %271 = load ptr, ptr %memberidx1.i295, align 8
  %272 = call ptr @malloc(i32 24)
  store i64 1, ptr %272, align 4
  %memberidx1.i.i296 = getelementptr inbounds %FloError, ptr %272, i64 0, i32 2
  store ptr %269, ptr %memberidx1.i.i296, align 8
  %memberidx2.i.i297 = getelementptr inbounds %FloError, ptr %272, i64 0, i32 1
  store ptr %267, ptr %memberidx2.i.i297, align 8
  %memberidx.i.i298 = getelementptr inbounds %Array_FloError_, ptr %271, i64 0, i32 2
  %273 = load i64, ptr %memberidx.i.i298, align 4
  %memberidx1.i2.i299 = getelementptr inbounds %Array_FloError_, ptr %271, i64 0, i32 3
  %274 = load i64, ptr %memberidx1.i2.i299, align 4
  %.not.i.i300 = icmp slt i64 %273, %274
  br i1 %.not.i.i300, label %if.entry61.TypeChecker_error.exit306_crit_edge, label %if.entry.i.i303

if.entry61.TypeChecker_error.exit306_crit_edge:   ; preds = %if.entry61
  %memberidx4.i.i304.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %271, i64 0, i32 1
  %.pre701 = load ptr, ptr %memberidx4.i.i304.phi.trans.insert, align 8
  br label %TypeChecker_error.exit306

if.entry.i.i303:                                  ; preds = %if.entry61
  %275 = shl nuw i64 %274, 1
  store i64 %275, ptr %memberidx1.i2.i299, align 4
  %memberidx2.i.i.i302 = getelementptr inbounds %Array_FloError_, ptr %271, i64 0, i32 1
  %276 = load ptr, ptr %memberidx2.i.i.i302, align 8
  %277 = shl i64 %274, 4
  %278 = call ptr @realloc(ptr %276, i64 %277)
  store ptr %278, ptr %memberidx2.i.i.i302, align 8
  %.pre700 = load i64, ptr %memberidx.i.i298, align 4
  br label %TypeChecker_error.exit306

TypeChecker_error.exit306:                        ; preds = %if.entry61.TypeChecker_error.exit306_crit_edge, %if.entry.i.i303
  %279 = phi ptr [ %.pre701, %if.entry61.TypeChecker_error.exit306_crit_edge ], [ %278, %if.entry.i.i303 ]
  %280 = phi i64 [ %273, %if.entry61.TypeChecker_error.exit306_crit_edge ], [ %.pre700, %if.entry.i.i303 ]
  %281 = add nsw i64 %280, 1
  store i64 %281, ptr %memberidx.i.i298, align 4
  %ptridx.i.i305 = getelementptr inbounds ptr, ptr %279, i64 %280
  store ptr %272, ptr %ptridx.i.i305, align 8
  br label %common.ret

ifend63:                                          ; preds = %if.entry56
  %282 = load ptr, ptr %0, align 8
  %memberidx.i.i.i308 = getelementptr inbounds %Program, ptr %282, i64 0, i32 1
  %283 = load ptr, ptr %memberidx.i.i.i308, align 8
  %284 = load i64, ptr %251, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %283, i64 0, i32 1
  %285 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %285, i64 %284
  %286 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i309 = getelementptr inbounds %Module, ptr %286, i64 0, i32 4
  %287 = load ptr, ptr %memberidx2.i.i.i309, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %251, i64 0, i32 2
  %288 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %287, i64 0, i32 1
  %289 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %289, i64 %288
  %290 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %291 = load i64, ptr %234, align 4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %if.entry.i331, label %ifend.i337

if.entry.i331:                                    ; preds = %ifend63
  %memberidx1.i311 = getelementptr inbounds %Class, ptr %290, i64 0, i32 5
  %293 = load ptr, ptr %memberidx1.i311, align 8
  %memberidx2.i312 = getelementptr inbounds %PropId, ptr %234, i64 0, i32 2
  %294 = load i64, ptr %memberidx2.i312, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %293, i64 0, i32 1
  %295 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %295, i64 %294
  %296 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i313 = getelementptr inbounds %ClassMethod, ptr %296, i64 0, i32 4
  %parent_prop_visibility570 = alloca i64, align 8
  %memberidx3.i330 = getelementptr inbounds %ClassMethod, ptr %296, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i337:                                       ; preds = %ifend63
  %memberidx4.i = getelementptr inbounds %Class, ptr %290, i64 0, i32 4
  %297 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %234, i64 0, i32 2
  %298 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %297, i64 0, i32 1
  %299 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i314 = getelementptr inbounds ptr, ptr %299, i64 %298
  %300 = load ptr, ptr %ptridx.i.i314, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %300, i64 0, i32 4
  %parent_prop_visibility = alloca i64, align 8
  %memberidx6.i336 = getelementptr inbounds %ClassField, ptr %300, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i331, %ifend.i337
  %parent_prop_visibility573 = phi ptr [ %parent_prop_visibility570, %if.entry.i331 ], [ %parent_prop_visibility, %ifend.i337 ]
  %common.ret.op.i310571.in = phi ptr [ %memberidx3.i313, %if.entry.i331 ], [ %memberidx6.i, %ifend.i337 ]
  %common.ret.op.in.i324 = phi ptr [ %memberidx3.i330, %if.entry.i331 ], [ %memberidx6.i336, %ifend.i337 ]
  %common.ret.op.i310571 = load ptr, ptr %common.ret.op.i310571.in, align 8
  %common.ret.op.i325 = load i64, ptr %common.ret.op.in.i324, align 4
  store i64 %common.ret.op.i325, ptr %parent_prop_visibility573, align 8
  %301 = load ptr, ptr %memberidx41, align 8
  %302 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %common.ret.op.i310571, ptr %301)
  br i1 %302, label %ifend74, label %if.entry72

if.entry72:                                       ; preds = %get_class_prop_visibility.exit
  %303 = load ptr, ptr %12, align 8
  %memberidx75 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %303, i64 0, i32 5
  %304 = load ptr, ptr %memberidx75, align 8
  %305 = tail call ptr %304(ptr nonnull %12)
  %memberidx76 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %306 = load ptr, ptr %memberidx76, align 8
  %307 = load ptr, ptr %306, align 8
  %memberidx77 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %307, i64 0, i32 5
  %308 = load ptr, ptr %memberidx77, align 8
  %309 = tail call ptr %308(ptr nonnull %306)
  %310 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %common.ret.op.i310571)
  %311 = load ptr, ptr %310, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %311, i64 0, i32 5
  %312 = load ptr, ptr %memberidx78, align 8
  %313 = tail call ptr %312(ptr nonnull %310)
  %314 = alloca ptr, align 8
  %315 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %314, ptr nonnull @132, ptr %305, ptr %309, ptr %313)
  %316 = load ptr, ptr %314, align 8
  %317 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %317, align 8
  %memberidx.i338 = getelementptr inbounds %string, ptr %317, i64 0, i32 1
  store ptr %316, ptr %memberidx.i338, align 8
  %memberidx1.i339 = getelementptr inbounds %string, ptr %317, i64 0, i32 2
  store i64 %315, ptr %memberidx1.i339, align 4
  %memberidx2.i340 = getelementptr inbounds %string, ptr %317, i64 0, i32 3
  store i64 %315, ptr %memberidx2.i340, align 4
  tail call void @free(ptr %305)
  tail call void @free(ptr %309)
  tail call void @free(ptr %313)
  %318 = load ptr, ptr %9, align 8
  %memberidx80 = getelementptr inbounds %Token, ptr %318, i64 0, i32 1
  %319 = load ptr, ptr %memberidx80, align 8
  %memberidx.i341 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %320 = load ptr, ptr %memberidx.i341, align 8
  %memberidx1.i342 = getelementptr inbounds %Compiler, ptr %320, i64 0, i32 6
  %321 = load ptr, ptr %memberidx1.i342, align 8
  %322 = call ptr @malloc(i32 24)
  store i64 5, ptr %322, align 4
  %memberidx1.i.i343 = getelementptr inbounds %FloError, ptr %322, i64 0, i32 2
  store ptr %319, ptr %memberidx1.i.i343, align 8
  %memberidx2.i.i344 = getelementptr inbounds %FloError, ptr %322, i64 0, i32 1
  store ptr %317, ptr %memberidx2.i.i344, align 8
  %memberidx.i.i345 = getelementptr inbounds %Array_FloError_, ptr %321, i64 0, i32 2
  %323 = load i64, ptr %memberidx.i.i345, align 4
  %memberidx1.i2.i346 = getelementptr inbounds %Array_FloError_, ptr %321, i64 0, i32 3
  %324 = load i64, ptr %memberidx1.i2.i346, align 4
  %.not.i.i347 = icmp slt i64 %323, %324
  br i1 %.not.i.i347, label %if.entry72.TypeChecker_error.exit353_crit_edge, label %if.entry.i.i350

if.entry72.TypeChecker_error.exit353_crit_edge:   ; preds = %if.entry72
  %memberidx4.i.i351.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %321, i64 0, i32 1
  %.pre697 = load ptr, ptr %memberidx4.i.i351.phi.trans.insert, align 8
  br label %TypeChecker_error.exit353

if.entry.i.i350:                                  ; preds = %if.entry72
  %325 = shl nuw i64 %324, 1
  store i64 %325, ptr %memberidx1.i2.i346, align 4
  %memberidx2.i.i.i349 = getelementptr inbounds %Array_FloError_, ptr %321, i64 0, i32 1
  %326 = load ptr, ptr %memberidx2.i.i.i349, align 8
  %327 = shl i64 %324, 4
  %328 = call ptr @realloc(ptr %326, i64 %327)
  store ptr %328, ptr %memberidx2.i.i.i349, align 8
  %.pre696 = load i64, ptr %memberidx.i.i345, align 4
  br label %TypeChecker_error.exit353

TypeChecker_error.exit353:                        ; preds = %if.entry72.TypeChecker_error.exit353_crit_edge, %if.entry.i.i350
  %329 = phi ptr [ %.pre697, %if.entry72.TypeChecker_error.exit353_crit_edge ], [ %328, %if.entry.i.i350 ]
  %330 = phi i64 [ %323, %if.entry72.TypeChecker_error.exit353_crit_edge ], [ %.pre696, %if.entry.i.i350 ]
  %331 = add nsw i64 %330, 1
  store i64 %331, ptr %memberidx.i.i345, align 4
  %ptridx.i.i352 = getelementptr inbounds ptr, ptr %329, i64 %330
  store ptr %322, ptr %ptridx.i.i352, align 8
  br label %common.ret

ifend74:                                          ; preds = %get_class_prop_visibility.exit
  %332 = load i64, ptr %memberidx39, align 4
  %.not199 = icmp eq i64 %332, %common.ret.op.i325
  br i1 %.not199, label %ifend84, label %if.entry82

if.entry82:                                       ; preds = %ifend74
  %333 = load ptr, ptr %12, align 8
  %memberidx85 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %333, i64 0, i32 5
  %334 = load ptr, ptr %memberidx85, align 8
  %335 = tail call ptr %334(ptr nonnull %12)
  %memberidx86 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %336 = load ptr, ptr %memberidx86, align 8
  %337 = load ptr, ptr %336, align 8
  %memberidx87 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %337, i64 0, i32 5
  %338 = load ptr, ptr %memberidx87, align 8
  %339 = tail call ptr %338(ptr nonnull %336)
  switch i64 %common.ret.op.i325, label %ifend3.i [
    i64 1, label %if.entry.i357
    i64 2, label %if.entry1.i
  ]

if.entry.i357:                                    ; preds = %if.entry82
  %340 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %340, ptr noundef nonnull align 8 dereferenceable(7) @40, i64 7, i1 false)
  br label %dump_access.exit

if.entry1.i:                                      ; preds = %if.entry82
  %341 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %341, ptr noundef nonnull align 8 dereferenceable(6) @41, i64 6, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry82
  %342 = tail call ptr @malloc(i32 9)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %342, ptr noundef nonnull align 8 dereferenceable(9) @42, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i357, %if.entry1.i, %ifend3.i
  %.sink760 = phi ptr [ %340, %if.entry.i357 ], [ %341, %if.entry1.i ], [ %342, %ifend3.i ]
  %.sink758 = phi i64 [ 7, %if.entry.i357 ], [ 6, %if.entry1.i ], [ 9, %ifend3.i ]
  %343 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %343, align 8
  %memberidx.i.i.i355 = getelementptr inbounds %string, ptr %343, i64 0, i32 1
  store ptr %.sink760, ptr %memberidx.i.i.i355, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %343, i64 0, i32 2
  store i64 %.sink758, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i356 = getelementptr inbounds %string, ptr %343, i64 0, i32 3
  store i64 %.sink758, ptr %memberidx2.i.i.i356, align 4
  %344 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %345 = tail call ptr %344(ptr nonnull %343)
  %346 = alloca ptr, align 8
  %347 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %346, ptr nonnull @133, ptr %335, ptr %339, ptr %345)
  %348 = load ptr, ptr %346, align 8
  %349 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %349, align 8
  %memberidx.i359 = getelementptr inbounds %string, ptr %349, i64 0, i32 1
  store ptr %348, ptr %memberidx.i359, align 8
  %memberidx1.i360 = getelementptr inbounds %string, ptr %349, i64 0, i32 2
  store i64 %347, ptr %memberidx1.i360, align 4
  %memberidx2.i361 = getelementptr inbounds %string, ptr %349, i64 0, i32 3
  store i64 %347, ptr %memberidx2.i361, align 4
  tail call void @free(ptr %335)
  tail call void @free(ptr %339)
  tail call void @free(ptr %345)
  %350 = load ptr, ptr %9, align 8
  %memberidx90 = getelementptr inbounds %Token, ptr %350, i64 0, i32 1
  %351 = load ptr, ptr %memberidx90, align 8
  %memberidx.i362 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %352 = load ptr, ptr %memberidx.i362, align 8
  %memberidx1.i363 = getelementptr inbounds %Compiler, ptr %352, i64 0, i32 6
  %353 = load ptr, ptr %memberidx1.i363, align 8
  %354 = call ptr @malloc(i32 24)
  store i64 4, ptr %354, align 4
  %memberidx1.i.i364 = getelementptr inbounds %FloError, ptr %354, i64 0, i32 2
  store ptr %351, ptr %memberidx1.i.i364, align 8
  %memberidx2.i.i365 = getelementptr inbounds %FloError, ptr %354, i64 0, i32 1
  store ptr %349, ptr %memberidx2.i.i365, align 8
  %memberidx.i.i366 = getelementptr inbounds %Array_FloError_, ptr %353, i64 0, i32 2
  %355 = load i64, ptr %memberidx.i.i366, align 4
  %memberidx1.i2.i367 = getelementptr inbounds %Array_FloError_, ptr %353, i64 0, i32 3
  %356 = load i64, ptr %memberidx1.i2.i367, align 4
  %.not.i.i368 = icmp slt i64 %355, %356
  br i1 %.not.i.i368, label %dump_access.exit.TypeChecker_error.exit374_crit_edge, label %if.entry.i.i371

dump_access.exit.TypeChecker_error.exit374_crit_edge: ; preds = %dump_access.exit
  %memberidx4.i.i372.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %353, i64 0, i32 1
  %.pre699 = load ptr, ptr %memberidx4.i.i372.phi.trans.insert, align 8
  br label %TypeChecker_error.exit374

if.entry.i.i371:                                  ; preds = %dump_access.exit
  %357 = shl nuw i64 %356, 1
  store i64 %357, ptr %memberidx1.i2.i367, align 4
  %memberidx2.i.i.i370 = getelementptr inbounds %Array_FloError_, ptr %353, i64 0, i32 1
  %358 = load ptr, ptr %memberidx2.i.i.i370, align 8
  %359 = shl i64 %356, 4
  %360 = call ptr @realloc(ptr %358, i64 %359)
  store ptr %360, ptr %memberidx2.i.i.i370, align 8
  %.pre698 = load i64, ptr %memberidx.i.i366, align 4
  br label %TypeChecker_error.exit374

TypeChecker_error.exit374:                        ; preds = %dump_access.exit.TypeChecker_error.exit374_crit_edge, %if.entry.i.i371
  %361 = phi ptr [ %.pre699, %dump_access.exit.TypeChecker_error.exit374_crit_edge ], [ %360, %if.entry.i.i371 ]
  %362 = phi i64 [ %355, %dump_access.exit.TypeChecker_error.exit374_crit_edge ], [ %.pre698, %if.entry.i.i371 ]
  %363 = add nsw i64 %362, 1
  store i64 %363, ptr %memberidx.i.i366, align 4
  %ptridx.i.i373 = getelementptr inbounds ptr, ptr %361, i64 %362
  store ptr %354, ptr %ptridx.i.i373, align 8
  br label %common.ret

ifend84:                                          ; preds = %ifend74
  %memberidx91 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 9
  %364 = load ptr, ptr %0, align 8
  %365 = load ptr, ptr %memberidx59, align 8
  %memberidx.i.i.i376 = getelementptr inbounds %Program, ptr %364, i64 0, i32 1
  %366 = load ptr, ptr %memberidx.i.i.i376, align 8
  %367 = load i64, ptr %365, align 4
  %memberidx.i.i.i.i377 = getelementptr inbounds %Array_Module_, ptr %366, i64 0, i32 1
  %368 = load ptr, ptr %memberidx.i.i.i.i377, align 8
  %ptridx.i.i.i.i378 = getelementptr inbounds ptr, ptr %368, i64 %367
  %369 = load ptr, ptr %ptridx.i.i.i.i378, align 8
  %memberidx2.i.i.i379 = getelementptr inbounds %Module, ptr %369, i64 0, i32 4
  %370 = load ptr, ptr %memberidx2.i.i.i379, align 8
  %memberidx3.i.i.i380 = getelementptr inbounds %TypeId, ptr %365, i64 0, i32 2
  %371 = load i64, ptr %memberidx3.i.i.i380, align 4
  %memberidx.i5.i.i.i381 = getelementptr inbounds %Array_Class_, ptr %370, i64 0, i32 1
  %372 = load ptr, ptr %memberidx.i5.i.i.i381, align 8
  %ptridx.i6.i.i.i382 = getelementptr inbounds ptr, ptr %372, i64 %371
  %373 = load ptr, ptr %ptridx.i6.i.i.i382, align 8
  %374 = load i64, ptr %234, align 4
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %if.entry.i390, label %ifend.i396

if.entry.i390:                                    ; preds = %ifend84
  %memberidx1.i385 = getelementptr inbounds %Class, ptr %373, i64 0, i32 5
  %376 = load ptr, ptr %memberidx1.i385, align 8
  %memberidx2.i386 = getelementptr inbounds %PropId, ptr %234, i64 0, i32 2
  %377 = load i64, ptr %memberidx2.i386, align 4
  %memberidx.i12.i387 = getelementptr inbounds %Array_ClassMethod_, ptr %376, i64 0, i32 1
  %378 = load ptr, ptr %memberidx.i12.i387, align 8
  %ptridx.i13.i388 = getelementptr inbounds ptr, ptr %378, i64 %377
  %379 = load ptr, ptr %ptridx.i13.i388, align 8
  %memberidx3.i389 = getelementptr inbounds %ClassMethod, ptr %379, i64 0, i32 9
  br label %get_vtable_index.exit

ifend.i396:                                       ; preds = %ifend84
  %memberidx4.i391 = getelementptr inbounds %Class, ptr %373, i64 0, i32 4
  %380 = load ptr, ptr %memberidx4.i391, align 8
  %memberidx5.i392 = getelementptr inbounds %PropId, ptr %234, i64 0, i32 2
  %381 = load i64, ptr %memberidx5.i392, align 4
  %memberidx.i11.i393 = getelementptr inbounds %Array_ClassField_, ptr %380, i64 0, i32 1
  %382 = load ptr, ptr %memberidx.i11.i393, align 8
  %ptridx.i.i394 = getelementptr inbounds ptr, ptr %382, i64 %381
  %383 = load ptr, ptr %ptridx.i.i394, align 8
  %memberidx6.i395 = getelementptr inbounds %ClassField, ptr %383, i64 0, i32 6
  br label %get_vtable_index.exit

get_vtable_index.exit:                            ; preds = %if.entry.i390, %ifend.i396
  %common.ret.op.in.i383 = phi ptr [ %memberidx3.i389, %if.entry.i390 ], [ %memberidx6.i395, %ifend.i396 ]
  %common.ret.op.i384 = load i64, ptr %common.ret.op.in.i383, align 4
  store i64 %common.ret.op.i384, ptr %memberidx91, align 4
  br label %ifend58

if.entry97:                                       ; preds = %ifend58
  %384 = load i1, ptr %memberidx36, align 1
  br i1 %384, label %if.entry101, label %ifend103

else98:                                           ; preds = %ifend58
  %385 = load ptr, ptr %memberidx6, align 8
  %386 = tail call ptr @malloc(i32 11)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %386, ptr noundef nonnull align 8 dereferenceable(11) @135, i64 11, i1 false)
  %387 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %387, align 8
  %memberidx.i.i397 = getelementptr inbounds %string, ptr %387, i64 0, i32 1
  store ptr %386, ptr %memberidx.i.i397, align 8
  %memberidx1.i.i398 = getelementptr inbounds %string, ptr %387, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i398, align 4
  %memberidx2.i.i399 = getelementptr inbounds %string, ptr %387, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i399, align 4
  %memberidx.i400 = getelementptr inbounds %string, ptr %385, i64 0, i32 2
  %388 = load i64, ptr %memberidx.i400, align 4
  %.not.i402 = icmp eq i64 %388, 11
  br i1 %.not.i402, label %ifend.i406, label %else116

ifend.i406:                                       ; preds = %else98
  %memberidx2.i404 = getelementptr inbounds %string, ptr %385, i64 0, i32 1
  %389 = load ptr, ptr %memberidx2.i404, align 8
  %390 = tail call i64 @memcmp(ptr %389, ptr nonnull %386, i64 11)
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %if.entry115, label %else116

ifend99:                                          ; preds = %get_class_prop_type.exit518, %if.entry3.i, %ifend117, %ifend109
  %current_vtable_index.1 = phi i64 [ %current_vtable_index.0631, %ifend109 ], [ %current_vtable_index.2, %get_class_prop_type.exit518 ], [ %current_vtable_index.2, %if.entry3.i ], [ %current_vtable_index.2, %ifend117 ]
  %memberidx150 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 8
  %392 = load ptr, ptr %13, align 8
  store ptr %392, ptr %memberidx150, align 8
  %393 = load ptr, ptr %memberidx152, align 8
  %memberidx.i408 = getelementptr inbounds %Array_ClassMethod_, ptr %393, i64 0, i32 2
  %394 = load i64, ptr %memberidx.i408, align 4
  %memberidx1.i409 = getelementptr inbounds %Array_ClassMethod_, ptr %393, i64 0, i32 3
  %395 = load i64, ptr %memberidx1.i409, align 4
  %.not.i410 = icmp slt i64 %394, %395
  br i1 %.not.i410, label %ifend99.Array_ClassMethod____sl__.exit_crit_edge, label %if.entry.i413

ifend99.Array_ClassMethod____sl__.exit_crit_edge: ; preds = %ifend99
  %memberidx4.i414.phi.trans.insert = getelementptr inbounds %Array_ClassMethod_, ptr %393, i64 0, i32 1
  %.pre707 = load ptr, ptr %memberidx4.i414.phi.trans.insert, align 8
  br label %Array_ClassMethod____sl__.exit

if.entry.i413:                                    ; preds = %ifend99
  %396 = shl nuw i64 %395, 1
  store i64 %396, ptr %memberidx1.i409, align 4
  %memberidx2.i.i412 = getelementptr inbounds %Array_ClassMethod_, ptr %393, i64 0, i32 1
  %397 = load ptr, ptr %memberidx2.i.i412, align 8
  %398 = shl i64 %395, 4
  %399 = tail call ptr @realloc(ptr %397, i64 %398)
  store ptr %399, ptr %memberidx2.i.i412, align 8
  %.pre706 = load i64, ptr %memberidx.i408, align 4
  br label %Array_ClassMethod____sl__.exit

Array_ClassMethod____sl__.exit:                   ; preds = %ifend99.Array_ClassMethod____sl__.exit_crit_edge, %if.entry.i413
  %400 = phi ptr [ %.pre707, %ifend99.Array_ClassMethod____sl__.exit_crit_edge ], [ %399, %if.entry.i413 ]
  %401 = phi i64 [ %394, %ifend99.Array_ClassMethod____sl__.exit_crit_edge ], [ %.pre706, %if.entry.i413 ]
  %402 = add nsw i64 %401, 1
  store i64 %402, ptr %memberidx.i408, align 4
  %ptridx.i415 = getelementptr inbounds ptr, ptr %400, i64 %401
  store ptr %10, ptr %ptridx.i415, align 8
  %403 = load ptr, ptr %memberidx.i202, align 8
  store ptr %403, ptr %memberidx1.i, align 8
  %404 = add nuw nsw i64 %i.0632, 1
  %405 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %405, i64 0, i32 2
  %406 = load i64, ptr %memberidx2, align 4
  %407 = icmp slt i64 %404, %406
  br i1 %407, label %for.body, label %common.ret

if.entry101:                                      ; preds = %if.entry97
  %408 = tail call ptr @malloc(i32 31)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(31) %408, ptr noundef nonnull align 8 dereferenceable(31) @134, i64 31, i1 false)
  %409 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %409, align 8
  %memberidx.i.i417 = getelementptr inbounds %string, ptr %409, i64 0, i32 1
  store ptr %408, ptr %memberidx.i.i417, align 8
  %memberidx1.i.i418 = getelementptr inbounds %string, ptr %409, i64 0, i32 2
  store i64 31, ptr %memberidx1.i.i418, align 4
  %memberidx2.i.i419 = getelementptr inbounds %string, ptr %409, i64 0, i32 3
  store i64 31, ptr %memberidx2.i.i419, align 4
  %410 = load ptr, ptr %9, align 8
  %memberidx105 = getelementptr inbounds %Token, ptr %410, i64 0, i32 1
  %411 = load ptr, ptr %memberidx105, align 8
  %memberidx.i420 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %412 = load ptr, ptr %memberidx.i420, align 8
  %memberidx1.i421 = getelementptr inbounds %Compiler, ptr %412, i64 0, i32 6
  %413 = load ptr, ptr %memberidx1.i421, align 8
  %414 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %414, align 4
  %memberidx1.i.i422 = getelementptr inbounds %FloError, ptr %414, i64 0, i32 2
  store ptr %411, ptr %memberidx1.i.i422, align 8
  %memberidx2.i.i423 = getelementptr inbounds %FloError, ptr %414, i64 0, i32 1
  store ptr %409, ptr %memberidx2.i.i423, align 8
  %memberidx.i.i424 = getelementptr inbounds %Array_FloError_, ptr %413, i64 0, i32 2
  %415 = load i64, ptr %memberidx.i.i424, align 4
  %memberidx1.i2.i425 = getelementptr inbounds %Array_FloError_, ptr %413, i64 0, i32 3
  %416 = load i64, ptr %memberidx1.i2.i425, align 4
  %.not.i.i426 = icmp slt i64 %415, %416
  br i1 %.not.i.i426, label %if.entry101.TypeChecker_error.exit432_crit_edge, label %if.entry.i.i429

if.entry101.TypeChecker_error.exit432_crit_edge:  ; preds = %if.entry101
  %memberidx4.i.i430.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %413, i64 0, i32 1
  %.pre711 = load ptr, ptr %memberidx4.i.i430.phi.trans.insert, align 8
  br label %TypeChecker_error.exit432

if.entry.i.i429:                                  ; preds = %if.entry101
  %417 = shl nuw i64 %416, 1
  store i64 %417, ptr %memberidx1.i2.i425, align 4
  %memberidx2.i.i.i428 = getelementptr inbounds %Array_FloError_, ptr %413, i64 0, i32 1
  %418 = load ptr, ptr %memberidx2.i.i.i428, align 8
  %419 = shl i64 %416, 4
  %420 = tail call ptr @realloc(ptr %418, i64 %419)
  store ptr %420, ptr %memberidx2.i.i.i428, align 8
  %.pre710 = load i64, ptr %memberidx.i.i424, align 4
  br label %TypeChecker_error.exit432

TypeChecker_error.exit432:                        ; preds = %if.entry101.TypeChecker_error.exit432_crit_edge, %if.entry.i.i429
  %421 = phi ptr [ %.pre711, %if.entry101.TypeChecker_error.exit432_crit_edge ], [ %420, %if.entry.i.i429 ]
  %422 = phi i64 [ %415, %if.entry101.TypeChecker_error.exit432_crit_edge ], [ %.pre710, %if.entry.i.i429 ]
  %423 = add nsw i64 %422, 1
  store i64 %423, ptr %memberidx.i.i424, align 4
  %ptridx.i.i431 = getelementptr inbounds ptr, ptr %421, i64 %422
  store ptr %414, ptr %ptridx.i.i431, align 8
  br label %common.ret

ifend103:                                         ; preds = %if.entry97
  %424 = load ptr, ptr %memberidx6, align 8
  %425 = tail call ptr @malloc(i32 11)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %425, ptr noundef nonnull align 8 dereferenceable(11) @135, i64 11, i1 false)
  %426 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %426, align 8
  %memberidx.i.i433 = getelementptr inbounds %string, ptr %426, i64 0, i32 1
  store ptr %425, ptr %memberidx.i.i433, align 8
  %memberidx1.i.i434 = getelementptr inbounds %string, ptr %426, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i434, align 4
  %memberidx2.i.i435 = getelementptr inbounds %string, ptr %426, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i435, align 4
  %memberidx.i436 = getelementptr inbounds %string, ptr %424, i64 0, i32 2
  %427 = load i64, ptr %memberidx.i436, align 4
  %.not.i438 = icmp eq i64 %427, 11
  br i1 %.not.i438, label %ifend.i442, label %ifend109

ifend.i442:                                       ; preds = %ifend103
  %memberidx2.i440 = getelementptr inbounds %string, ptr %424, i64 0, i32 1
  %428 = load ptr, ptr %memberidx2.i440, align 8
  %429 = tail call i64 @memcmp(ptr %428, ptr nonnull %425, i64 11)
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %if.entry107, label %ifend109

if.entry107:                                      ; preds = %ifend.i442
  %431 = tail call ptr @malloc(i32 33)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %431, ptr noundef nonnull align 8 dereferenceable(33) @136, i64 33, i1 false)
  %432 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %432, align 8
  %memberidx.i.i444 = getelementptr inbounds %string, ptr %432, i64 0, i32 1
  store ptr %431, ptr %memberidx.i.i444, align 8
  %memberidx1.i.i445 = getelementptr inbounds %string, ptr %432, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i445, align 4
  %memberidx2.i.i446 = getelementptr inbounds %string, ptr %432, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i446, align 4
  %433 = load ptr, ptr %9, align 8
  %memberidx111 = getelementptr inbounds %Token, ptr %433, i64 0, i32 1
  %434 = load ptr, ptr %memberidx111, align 8
  %memberidx.i447 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %435 = load ptr, ptr %memberidx.i447, align 8
  %memberidx1.i448 = getelementptr inbounds %Compiler, ptr %435, i64 0, i32 6
  %436 = load ptr, ptr %memberidx1.i448, align 8
  %437 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %437, align 4
  %memberidx1.i.i449 = getelementptr inbounds %FloError, ptr %437, i64 0, i32 2
  store ptr %434, ptr %memberidx1.i.i449, align 8
  %memberidx2.i.i450 = getelementptr inbounds %FloError, ptr %437, i64 0, i32 1
  store ptr %432, ptr %memberidx2.i.i450, align 8
  %memberidx.i.i451 = getelementptr inbounds %Array_FloError_, ptr %436, i64 0, i32 2
  %438 = load i64, ptr %memberidx.i.i451, align 4
  %memberidx1.i2.i452 = getelementptr inbounds %Array_FloError_, ptr %436, i64 0, i32 3
  %439 = load i64, ptr %memberidx1.i2.i452, align 4
  %.not.i.i453 = icmp slt i64 %438, %439
  br i1 %.not.i.i453, label %if.entry107.TypeChecker_error.exit459_crit_edge, label %if.entry.i.i456

if.entry107.TypeChecker_error.exit459_crit_edge:  ; preds = %if.entry107
  %memberidx4.i.i457.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %436, i64 0, i32 1
  %.pre709 = load ptr, ptr %memberidx4.i.i457.phi.trans.insert, align 8
  br label %TypeChecker_error.exit459

if.entry.i.i456:                                  ; preds = %if.entry107
  %440 = shl nuw i64 %439, 1
  store i64 %440, ptr %memberidx1.i2.i452, align 4
  %memberidx2.i.i.i455 = getelementptr inbounds %Array_FloError_, ptr %436, i64 0, i32 1
  %441 = load ptr, ptr %memberidx2.i.i.i455, align 8
  %442 = shl i64 %439, 4
  %443 = tail call ptr @realloc(ptr %441, i64 %442)
  store ptr %443, ptr %memberidx2.i.i.i455, align 8
  %.pre708 = load i64, ptr %memberidx.i.i451, align 4
  br label %TypeChecker_error.exit459

TypeChecker_error.exit459:                        ; preds = %if.entry107.TypeChecker_error.exit459_crit_edge, %if.entry.i.i456
  %444 = phi ptr [ %.pre709, %if.entry107.TypeChecker_error.exit459_crit_edge ], [ %443, %if.entry.i.i456 ]
  %445 = phi i64 [ %438, %if.entry107.TypeChecker_error.exit459_crit_edge ], [ %.pre708, %if.entry.i.i456 ]
  %446 = add nsw i64 %445, 1
  store i64 %446, ptr %memberidx.i.i451, align 4
  %ptridx.i.i458 = getelementptr inbounds ptr, ptr %444, i64 %445
  store ptr %437, ptr %ptridx.i.i458, align 8
  br label %common.ret

ifend109:                                         ; preds = %ifend103, %ifend.i442
  %447 = load ptr, ptr %memberidx112, align 8
  %448 = load ptr, ptr %10, align 8
  tail call fastcc void @Map_string_PropId____setitem__(ptr %447, ptr %12, ptr %448)
  br label %ifend99

if.entry115:                                      ; preds = %ifend.i406
  %449 = load i1, ptr %memberidx36, align 1
  br i1 %449, label %if.entry119, label %ifend121

else116:                                          ; preds = %else98, %ifend.i406
  %450 = load i64, ptr %memberidx39, align 4
  %.not196 = icmp eq i64 %450, 1
  br i1 %.not196, label %else128, label %if.entry127

ifend117:                                         ; preds = %ifend129, %ifend121
  %current_vtable_index.2 = phi i64 [ %current_vtable_index.0631, %ifend121 ], [ %current_vtable_index.3, %ifend129 ]
  %451 = tail call ptr @malloc(i32 16)
  %452 = load ptr, ptr %1, align 8
  store i64 11, ptr %451, align 4
  %memberidx.i460 = getelementptr inbounds %ObjectType, ptr %451, i64 0, i32 1
  store ptr %452, ptr %memberidx.i460, align 8
  %453 = tail call ptr @malloc(i32 4)
  store i32 1936287860, ptr %453, align 8
  %454 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %454, align 8
  %memberidx.i.i461 = getelementptr inbounds %string, ptr %454, i64 0, i32 1
  store ptr %453, ptr %memberidx.i.i461, align 8
  %memberidx1.i.i462 = getelementptr inbounds %string, ptr %454, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i462, align 4
  %memberidx2.i.i463 = getelementptr inbounds %string, ptr %454, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i463, align 4
  %455 = tail call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr %0, ptr nonnull %454, ptr null, ptr nonnull %451)
  %456 = load ptr, ptr %memberidx139, align 8
  %.not197 = icmp eq ptr %456, null
  br i1 %.not197, label %ifend99, label %if.entry140

if.entry119:                                      ; preds = %if.entry115
  %457 = tail call ptr @malloc(i32 35)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %457, ptr noundef nonnull align 8 dereferenceable(35) @137, i64 35, i1 false)
  %458 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %458, align 8
  %memberidx.i.i464 = getelementptr inbounds %string, ptr %458, i64 0, i32 1
  store ptr %457, ptr %memberidx.i.i464, align 8
  %memberidx1.i.i465 = getelementptr inbounds %string, ptr %458, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i465, align 4
  %memberidx2.i.i466 = getelementptr inbounds %string, ptr %458, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i466, align 4
  %459 = load ptr, ptr %9, align 8
  %memberidx123 = getelementptr inbounds %Token, ptr %459, i64 0, i32 1
  %460 = load ptr, ptr %memberidx123, align 8
  %memberidx.i467 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %461 = load ptr, ptr %memberidx.i467, align 8
  %memberidx1.i468 = getelementptr inbounds %Compiler, ptr %461, i64 0, i32 6
  %462 = load ptr, ptr %memberidx1.i468, align 8
  %463 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %463, align 4
  %memberidx1.i.i469 = getelementptr inbounds %FloError, ptr %463, i64 0, i32 2
  store ptr %460, ptr %memberidx1.i.i469, align 8
  %memberidx2.i.i470 = getelementptr inbounds %FloError, ptr %463, i64 0, i32 1
  store ptr %458, ptr %memberidx2.i.i470, align 8
  %memberidx.i.i471 = getelementptr inbounds %Array_FloError_, ptr %462, i64 0, i32 2
  %464 = load i64, ptr %memberidx.i.i471, align 4
  %memberidx1.i2.i472 = getelementptr inbounds %Array_FloError_, ptr %462, i64 0, i32 3
  %465 = load i64, ptr %memberidx1.i2.i472, align 4
  %.not.i.i473 = icmp slt i64 %464, %465
  br i1 %.not.i.i473, label %if.entry119.TypeChecker_error.exit479_crit_edge, label %if.entry.i.i476

if.entry119.TypeChecker_error.exit479_crit_edge:  ; preds = %if.entry119
  %memberidx4.i.i477.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %462, i64 0, i32 1
  %.pre705 = load ptr, ptr %memberidx4.i.i477.phi.trans.insert, align 8
  br label %TypeChecker_error.exit479

if.entry.i.i476:                                  ; preds = %if.entry119
  %466 = shl nuw i64 %465, 1
  store i64 %466, ptr %memberidx1.i2.i472, align 4
  %memberidx2.i.i.i475 = getelementptr inbounds %Array_FloError_, ptr %462, i64 0, i32 1
  %467 = load ptr, ptr %memberidx2.i.i.i475, align 8
  %468 = shl i64 %465, 4
  %469 = tail call ptr @realloc(ptr %467, i64 %468)
  store ptr %469, ptr %memberidx2.i.i.i475, align 8
  %.pre704 = load i64, ptr %memberidx.i.i471, align 4
  br label %TypeChecker_error.exit479

TypeChecker_error.exit479:                        ; preds = %if.entry119.TypeChecker_error.exit479_crit_edge, %if.entry.i.i476
  %470 = phi ptr [ %.pre705, %if.entry119.TypeChecker_error.exit479_crit_edge ], [ %469, %if.entry.i.i476 ]
  %471 = phi i64 [ %464, %if.entry119.TypeChecker_error.exit479_crit_edge ], [ %.pre704, %if.entry.i.i476 ]
  %472 = add nsw i64 %471, 1
  store i64 %472, ptr %memberidx.i.i471, align 4
  %ptridx.i.i478 = getelementptr inbounds ptr, ptr %470, i64 %471
  store ptr %463, ptr %ptridx.i.i478, align 8
  br label %common.ret

ifend121:                                         ; preds = %if.entry115
  %473 = load ptr, ptr %10, align 8
  store ptr %473, ptr %memberidx124, align 8
  br label %ifend117

if.entry127:                                      ; preds = %else116
  %474 = add nsw i64 %current_vtable_index.0631, 1
  br label %ifend129

else128:                                          ; preds = %else116
  %475 = load i1, ptr %memberidx36, align 1
  br i1 %475, label %if.entry131, label %ifend129

ifend129:                                         ; preds = %else128, %if.entry127
  %current_vtable_index.3 = phi i64 [ %474, %if.entry127 ], [ %current_vtable_index.0631, %else128 ]
  %476 = load ptr, ptr %memberidx55, align 8
  %477 = load ptr, ptr %10, align 8
  tail call fastcc void @Map_string_PropId____setitem__(ptr %476, ptr %12, ptr %477)
  br label %ifend117

if.entry131:                                      ; preds = %else128
  %478 = tail call ptr @malloc(i32 58)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(58) %478, ptr noundef nonnull align 8 dereferenceable(58) @138, i64 58, i1 false)
  %479 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %479, align 8
  %memberidx.i.i480 = getelementptr inbounds %string, ptr %479, i64 0, i32 1
  store ptr %478, ptr %memberidx.i.i480, align 8
  %memberidx1.i.i481 = getelementptr inbounds %string, ptr %479, i64 0, i32 2
  store i64 58, ptr %memberidx1.i.i481, align 4
  %memberidx2.i.i482 = getelementptr inbounds %string, ptr %479, i64 0, i32 3
  store i64 58, ptr %memberidx2.i.i482, align 4
  %480 = load ptr, ptr %9, align 8
  %memberidx135 = getelementptr inbounds %Token, ptr %480, i64 0, i32 1
  %481 = load ptr, ptr %memberidx135, align 8
  %memberidx.i483 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %482 = load ptr, ptr %memberidx.i483, align 8
  %memberidx1.i484 = getelementptr inbounds %Compiler, ptr %482, i64 0, i32 6
  %483 = load ptr, ptr %memberidx1.i484, align 8
  %484 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %484, align 4
  %memberidx1.i.i485 = getelementptr inbounds %FloError, ptr %484, i64 0, i32 2
  store ptr %481, ptr %memberidx1.i.i485, align 8
  %memberidx2.i.i486 = getelementptr inbounds %FloError, ptr %484, i64 0, i32 1
  store ptr %479, ptr %memberidx2.i.i486, align 8
  %memberidx.i.i487 = getelementptr inbounds %Array_FloError_, ptr %483, i64 0, i32 2
  %485 = load i64, ptr %memberidx.i.i487, align 4
  %memberidx1.i2.i488 = getelementptr inbounds %Array_FloError_, ptr %483, i64 0, i32 3
  %486 = load i64, ptr %memberidx1.i2.i488, align 4
  %.not.i.i489 = icmp slt i64 %485, %486
  br i1 %.not.i.i489, label %if.entry131.TypeChecker_error.exit495_crit_edge, label %if.entry.i.i492

if.entry131.TypeChecker_error.exit495_crit_edge:  ; preds = %if.entry131
  %memberidx4.i.i493.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %483, i64 0, i32 1
  %.pre703 = load ptr, ptr %memberidx4.i.i493.phi.trans.insert, align 8
  br label %TypeChecker_error.exit495

if.entry.i.i492:                                  ; preds = %if.entry131
  %487 = shl nuw i64 %486, 1
  store i64 %487, ptr %memberidx1.i2.i488, align 4
  %memberidx2.i.i.i491 = getelementptr inbounds %Array_FloError_, ptr %483, i64 0, i32 1
  %488 = load ptr, ptr %memberidx2.i.i.i491, align 8
  %489 = shl i64 %486, 4
  %490 = tail call ptr @realloc(ptr %488, i64 %489)
  store ptr %490, ptr %memberidx2.i.i.i491, align 8
  %.pre702 = load i64, ptr %memberidx.i.i487, align 4
  br label %TypeChecker_error.exit495

TypeChecker_error.exit495:                        ; preds = %if.entry131.TypeChecker_error.exit495_crit_edge, %if.entry.i.i492
  %491 = phi ptr [ %.pre703, %if.entry131.TypeChecker_error.exit495_crit_edge ], [ %490, %if.entry.i.i492 ]
  %492 = phi i64 [ %485, %if.entry131.TypeChecker_error.exit495_crit_edge ], [ %.pre702, %if.entry.i.i492 ]
  %493 = add nsw i64 %492, 1
  store i64 %493, ptr %memberidx.i.i487, align 4
  %ptridx.i.i494 = getelementptr inbounds ptr, ptr %491, i64 %492
  store ptr %484, ptr %ptridx.i.i494, align 8
  br label %common.ret

if.entry140:                                      ; preds = %ifend117
  %494 = load ptr, ptr %0, align 8
  %495 = load i64, ptr %456, align 4
  %switch628 = icmp eq i64 %495, 19
  br i1 %switch628, label %if.entry.i538, label %if.entry3.i

if.entry.i538:                                    ; preds = %if.entry140, %if.entry.i538
  %.tr11.i629 = phi ptr [ %496, %if.entry.i538 ], [ %456, %if.entry140 ]
  %memberidx1.i537 = getelementptr inbounds %GenericType, ptr %.tr11.i629, i64 0, i32 3
  %496 = load ptr, ptr %memberidx1.i537, align 8
  %497 = load i64, ptr %496, align 4
  %switch = icmp eq i64 %497, 19
  br i1 %switch, label %if.entry.i538, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i538, %if.entry140
  %.tr11.i.lcssa = phi ptr [ %456, %if.entry140 ], [ %496, %if.entry.i538 ]
  %memberidx6.i539 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %498 = load ptr, ptr %memberidx6.i539, align 8
  %memberidx.i.i540 = getelementptr inbounds %Program, ptr %494, i64 0, i32 1
  %499 = load ptr, ptr %memberidx.i.i540, align 8
  %500 = load i64, ptr %498, align 4
  %memberidx.i.i.i541 = getelementptr inbounds %Array_Module_, ptr %499, i64 0, i32 1
  %501 = load ptr, ptr %memberidx.i.i.i541, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %501, i64 %500
  %502 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i542 = getelementptr inbounds %Module, ptr %502, i64 0, i32 4
  %503 = load ptr, ptr %memberidx2.i.i542, align 8
  %memberidx3.i.i543 = getelementptr inbounds %TypeId, ptr %498, i64 0, i32 2
  %504 = load i64, ptr %memberidx3.i.i543, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %503, i64 0, i32 1
  %505 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %505, i64 %504
  %506 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx145 = getelementptr inbounds %Class, ptr %506, i64 0, i32 3
  %507 = load ptr, ptr %memberidx145, align 8
  %.not198 = icmp eq ptr %507, null
  br i1 %.not198, label %ifend99, label %if.entry146

if.entry146:                                      ; preds = %if.entry3.i
  %memberidx.i.i496 = getelementptr inbounds %PropId, ptr %507, i64 0, i32 1
  %508 = load ptr, ptr %memberidx.i.i496, align 8
  %509 = load i64, ptr %508, align 4
  %ptridx.i.i.i.i499 = getelementptr inbounds ptr, ptr %501, i64 %509
  %510 = load ptr, ptr %ptridx.i.i.i.i499, align 8
  %memberidx2.i.i.i500 = getelementptr inbounds %Module, ptr %510, i64 0, i32 4
  %511 = load ptr, ptr %memberidx2.i.i.i500, align 8
  %memberidx3.i.i.i501 = getelementptr inbounds %TypeId, ptr %508, i64 0, i32 2
  %512 = load i64, ptr %memberidx3.i.i.i501, align 4
  %memberidx.i5.i.i.i502 = getelementptr inbounds %Array_Class_, ptr %511, i64 0, i32 1
  %513 = load ptr, ptr %memberidx.i5.i.i.i502, align 8
  %ptridx.i6.i.i.i503 = getelementptr inbounds ptr, ptr %513, i64 %512
  %514 = load ptr, ptr %ptridx.i6.i.i.i503, align 8
  %515 = load i64, ptr %507, align 4
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %if.entry.i511, label %ifend.i517

if.entry.i511:                                    ; preds = %if.entry146
  %memberidx1.i506 = getelementptr inbounds %Class, ptr %514, i64 0, i32 5
  %517 = load ptr, ptr %memberidx1.i506, align 8
  %memberidx2.i507 = getelementptr inbounds %PropId, ptr %507, i64 0, i32 2
  %518 = load i64, ptr %memberidx2.i507, align 4
  %memberidx.i12.i508 = getelementptr inbounds %Array_ClassMethod_, ptr %517, i64 0, i32 1
  %519 = load ptr, ptr %memberidx.i12.i508, align 8
  %ptridx.i13.i509 = getelementptr inbounds ptr, ptr %519, i64 %518
  %520 = load ptr, ptr %ptridx.i13.i509, align 8
  %memberidx3.i510 = getelementptr inbounds %ClassMethod, ptr %520, i64 0, i32 4
  br label %get_class_prop_type.exit518

ifend.i517:                                       ; preds = %if.entry146
  %memberidx4.i512 = getelementptr inbounds %Class, ptr %514, i64 0, i32 4
  %521 = load ptr, ptr %memberidx4.i512, align 8
  %memberidx5.i513 = getelementptr inbounds %PropId, ptr %507, i64 0, i32 2
  %522 = load i64, ptr %memberidx5.i513, align 4
  %memberidx.i11.i514 = getelementptr inbounds %Array_ClassField_, ptr %521, i64 0, i32 1
  %523 = load ptr, ptr %memberidx.i11.i514, align 8
  %ptridx.i.i515 = getelementptr inbounds ptr, ptr %523, i64 %522
  %524 = load ptr, ptr %ptridx.i.i515, align 8
  %memberidx6.i516 = getelementptr inbounds %ClassField, ptr %524, i64 0, i32 4
  br label %get_class_prop_type.exit518

get_class_prop_type.exit518:                      ; preds = %if.entry.i511, %ifend.i517
  %common.ret.op.in.i504 = phi ptr [ %memberidx3.i510, %if.entry.i511 ], [ %memberidx6.i516, %ifend.i517 ]
  %common.ret.op.i505 = load ptr, ptr %common.ret.op.in.i504, align 8
  %525 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %525, ptr noundef nonnull align 8 dereferenceable(5) @139, i64 5, i1 false)
  %526 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %526, align 8
  %memberidx.i.i519 = getelementptr inbounds %string, ptr %526, i64 0, i32 1
  store ptr %525, ptr %memberidx.i.i519, align 8
  %memberidx1.i.i520 = getelementptr inbounds %string, ptr %526, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i520, align 4
  %memberidx2.i.i521 = getelementptr inbounds %string, ptr %526, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i521, align 4
  %527 = tail call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nonnull %0, ptr nonnull %526, ptr null, ptr %common.ret.op.i505)
  br label %ifend99
}

define internal fastcc ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %4 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %4, i64 0, i32 6
  %5 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx2.i, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %3, %ifend45, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %102, %ifend45 ], [ null, %3 ], [ null, %for.body ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %8, align 8
  %memberidx.i69 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i69, align 4
  %memberidx1.i70 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i70, align 4
  %memberidx2.i71 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 1
  %9 = tail call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i71, align 8
  store i64 0, ptr %memberidx.i69, align 4
  %10 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %10, align 4
  %11 = load i64, ptr %1, align 4
  switch i64 %11, label %ifend5 [
    i64 14, label %if.entry3
    i64 19, label %if.entry.i111
  ]

if.entry3:                                        ; preds = %ifend
  %memberidx6 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  br label %ifend5.sink.split

ifend5.sink.split:                                ; preds = %if.entry3, %if.entry12
  %.sink = phi ptr [ %29, %if.entry12 ], [ %memberidx6, %if.entry3 ]
  %is_constant.promoted.ph = phi i1 [ false, %if.entry12 ], [ true, %if.entry3 ]
  %12 = load ptr, ptr %.sink, align 8
  br label %ifend5

ifend5:                                           ; preds = %ifend5.sink.split, %is_object.exit, %ifend, %string___eq__.exit
  %is_constant.promoted = phi i1 [ false, %is_object.exit ], [ true, %ifend ], [ false, %string___eq__.exit ], [ %is_constant.promoted.ph, %ifend5.sink.split ]
  %element_type.promoted = phi ptr [ %10, %is_object.exit ], [ %10, %ifend ], [ %10, %string___eq__.exit ], [ %12, %ifend5.sink.split ]
  %memberidx16 = getelementptr inbounds %ArrayExpressionNode, ptr %2, i64 0, i32 3
  %13 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %Array_ExpressionNode_, ptr %13, i64 0, i32 2
  %14 = load i64, ptr %memberidx17, align 4
  %15 = icmp sgt i64 %14, 0
  br i1 %15, label %for.body, label %ifend20

if.entry.i111:                                    ; preds = %ifend, %if.entry.i111
  %.tr5.i = phi ptr [ %16, %if.entry.i111 ], [ %1, %ifend ]
  %memberidx1.i110 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %16 = load ptr, ptr %memberidx1.i110, align 8
  %17 = load i64, ptr %16, align 4
  %18 = icmp eq i64 %17, 19
  br i1 %18, label %if.entry.i111, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i111
  %memberidx11 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 1
  %19 = load ptr, ptr %memberidx11, align 8
  %20 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %20, ptr noundef nonnull align 8 dereferenceable(5) @62, i64 5, i1 false)
  %21 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %21, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  store ptr %20, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %21, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i, align 4
  %memberidx.i72 = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %22 = load i64, ptr %memberidx.i72, align 4
  %.not.i = icmp eq i64 %22, 5
  br i1 %.not.i, label %string___eq__.exit, label %ifend5

string___eq__.exit:                               ; preds = %is_object.exit
  %23 = icmp eq i64 %17, 11
  %memberidx2.i74 = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %24 = load ptr, ptr %memberidx2.i74, align 8
  %25 = tail call i64 @memcmp(ptr %24, ptr nonnull %20, i64 5)
  %26 = icmp eq i64 %25, 0
  %27 = and i1 %23, %26
  br i1 %27, label %if.entry12, label %ifend5

if.entry12:                                       ; preds = %string___eq__.exit
  %memberidx15 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 2
  %28 = load ptr, ptr %memberidx15, align 8
  %memberidx.i75 = getelementptr inbounds %Array_Type_, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i75, align 8
  br label %ifend5.sink.split

ifend20:                                          ; preds = %Array_Expression____sl__.exit, %ifend5
  %30 = phi i1 [ %is_constant.promoted, %ifend5 ], [ %49, %Array_Expression____sl__.exit ]
  %31 = phi ptr [ %element_type.promoted, %ifend5 ], [ %., %Array_Expression____sl__.exit ]
  %32 = load i64, ptr %1, align 4
  %.not = icmp eq i64 %32, 14
  br i1 %.not, label %else44, label %if.entry43

for.body:                                         ; preds = %ifend5, %Array_Expression____sl__.exit
  %33 = phi ptr [ %61, %Array_Expression____sl__.exit ], [ %13, %ifend5 ]
  %storemerge124 = phi i64 [ %60, %Array_Expression____sl__.exit ], [ 0, %ifend5 ]
  %34 = phi ptr [ %., %Array_Expression____sl__.exit ], [ %element_type.promoted, %ifend5 ]
  %35 = phi i1 [ %49, %Array_Expression____sl__.exit ], [ %is_constant.promoted, %ifend5 ]
  %memberidx.i76 = getelementptr inbounds %Array_ExpressionNode_, ptr %33, i64 0, i32 1
  %36 = load ptr, ptr %memberidx.i76, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %36, i64 %storemerge124
  %37 = load ptr, ptr %ptridx.i, align 8
  %38 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %34, ptr %37)
  %39 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i78 = getelementptr inbounds %Compiler, ptr %39, i64 0, i32 6
  %40 = load ptr, ptr %memberidx1.i78, align 8
  %memberidx2.i79 = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx2.i79, align 4
  %42 = icmp sgt i64 %41, 0
  br i1 %42, label %common.ret, label %ifend26

ifend26:                                          ; preds = %for.body
  %43 = icmp eq i64 %storemerge124, 0
  %44 = load i64, ptr %34, align 4
  %45 = icmp eq i64 %44, 20
  %46 = and i1 %43, %45
  %memberidx31 = getelementptr inbounds %Expression, ptr %38, i64 0, i32 3
  %47 = load ptr, ptr %memberidx31, align 8
  %. = select i1 %46, ptr %47, ptr %34
  %memberidx32 = getelementptr inbounds %Expression, ptr %38, i64 0, i32 1
  %48 = load i1, ptr %memberidx32, align 1
  %49 = and i1 %35, %48
  %50 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %., ptr %47)
  br i1 %50, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend26
  %51 = load i64, ptr %memberidx.i69, align 4
  %52 = load i64, ptr %memberidx1.i70, align 4
  %.not.i82 = icmp slt i64 %51, %52
  br i1 %.not.i82, label %if.entry34.Array_Expression____sl__.exit_crit_edge, label %if.entry.i

if.entry34.Array_Expression____sl__.exit_crit_edge: ; preds = %if.entry34
  %.pre144 = load ptr, ptr %memberidx2.i71, align 8
  br label %Array_Expression____sl__.exit

if.entry.i:                                       ; preds = %if.entry34
  %53 = shl nuw i64 %52, 1
  store i64 %53, ptr %memberidx1.i70, align 4
  %54 = load ptr, ptr %memberidx2.i71, align 8
  %55 = shl i64 %52, 4
  %56 = tail call ptr @realloc(ptr %54, i64 %55)
  store ptr %56, ptr %memberidx2.i71, align 8
  %.pre143 = load i64, ptr %memberidx.i69, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %if.entry34.Array_Expression____sl__.exit_crit_edge, %if.entry.i
  %57 = phi ptr [ %.pre144, %if.entry34.Array_Expression____sl__.exit_crit_edge ], [ %56, %if.entry.i ]
  %58 = phi i64 [ %51, %if.entry34.Array_Expression____sl__.exit_crit_edge ], [ %.pre143, %if.entry.i ]
  %59 = add nsw i64 %58, 1
  store i64 %59, ptr %memberidx.i69, align 4
  %ptridx.i85 = getelementptr inbounds ptr, ptr %57, i64 %58
  store ptr %38, ptr %ptridx.i85, align 8
  %60 = add nuw nsw i64 %storemerge124, 1
  %61 = load ptr, ptr %memberidx16, align 8
  %memberidx22 = getelementptr inbounds %Array_ExpressionNode_, ptr %61, i64 0, i32 2
  %62 = load i64, ptr %memberidx22, align 4
  %63 = icmp slt i64 %60, %62
  br i1 %63, label %for.body, label %ifend20

else35:                                           ; preds = %ifend26
  %memberidx33 = getelementptr inbounds %Expression, ptr %38, i64 0, i32 3
  %64 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %.)
  %65 = load ptr, ptr %64, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %65, i64 0, i32 5
  %66 = load ptr, ptr %memberidx37, align 8
  %67 = tail call ptr %66(ptr nonnull %64)
  %68 = load ptr, ptr %memberidx33, align 8
  %69 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %68)
  %70 = load ptr, ptr %69, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i64 0, i32 5
  %71 = load ptr, ptr %memberidx39, align 8
  %72 = tail call ptr %71(ptr nonnull %69)
  %73 = alloca ptr, align 8
  %74 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %73, ptr nonnull @155, ptr %67, ptr %72)
  %75 = load ptr, ptr %73, align 8
  %76 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %76, align 8
  %memberidx.i87 = getelementptr inbounds %string, ptr %76, i64 0, i32 1
  store ptr %75, ptr %memberidx.i87, align 8
  %memberidx1.i88 = getelementptr inbounds %string, ptr %76, i64 0, i32 2
  store i64 %74, ptr %memberidx1.i88, align 4
  %memberidx2.i89 = getelementptr inbounds %string, ptr %76, i64 0, i32 3
  store i64 %74, ptr %memberidx2.i89, align 4
  tail call void @free(ptr %67)
  tail call void @free(ptr %72)
  %77 = load ptr, ptr %memberidx16, align 8
  %memberidx.i90 = getelementptr inbounds %Array_ExpressionNode_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i90, align 8
  %ptridx.i91 = getelementptr inbounds ptr, ptr %78, i64 %storemerge124
  %79 = load ptr, ptr %ptridx.i91, align 8
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i93 = getelementptr inbounds %Compiler, ptr %81, i64 0, i32 6
  %82 = load ptr, ptr %memberidx1.i93, align 8
  %83 = call ptr @malloc(i32 24)
  store i64 5, ptr %83, align 4
  %memberidx1.i.i94 = getelementptr inbounds %FloError, ptr %83, i64 0, i32 2
  store ptr %80, ptr %memberidx1.i.i94, align 8
  %memberidx2.i.i95 = getelementptr inbounds %FloError, ptr %83, i64 0, i32 1
  store ptr %76, ptr %memberidx2.i.i95, align 8
  %memberidx.i.i96 = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 2
  %84 = load i64, ptr %memberidx.i.i96, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 3
  %85 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %84, %85
  br i1 %.not.i.i, label %else35.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

else35.TypeChecker_error.exit_crit_edge:          ; preds = %else35
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 1
  %.pre142 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %else35
  %86 = shl nuw i64 %85, 1
  store i64 %86, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 1
  %87 = load ptr, ptr %memberidx2.i.i.i, align 8
  %88 = shl i64 %85, 4
  %89 = call ptr @realloc(ptr %87, i64 %88)
  store ptr %89, ptr %memberidx2.i.i.i, align 8
  %.pre141 = load i64, ptr %memberidx.i.i96, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %else35.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %90 = phi ptr [ %.pre142, %else35.TypeChecker_error.exit_crit_edge ], [ %89, %if.entry.i.i ]
  %91 = phi i64 [ %84, %else35.TypeChecker_error.exit_crit_edge ], [ %.pre141, %if.entry.i.i ]
  %92 = add nsw i64 %91, 1
  store i64 %92, ptr %memberidx.i.i96, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %90, i64 %91
  store ptr %83, ptr %ptridx.i.i, align 8
  br label %common.ret

if.entry43:                                       ; preds = %ifend20
  %93 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %93, ptr noundef nonnull align 8 dereferenceable(5) @62, i64 5, i1 false)
  %94 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %94, align 8
  %memberidx.i.i97 = getelementptr inbounds %string, ptr %94, i64 0, i32 1
  store ptr %93, ptr %memberidx.i.i97, align 8
  %memberidx1.i.i98 = getelementptr inbounds %string, ptr %94, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i98, align 4
  %memberidx2.i.i99 = getelementptr inbounds %string, ptr %94, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i99, align 4
  %95 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %95, align 8
  %memberidx.i100 = getelementptr inbounds %Array_Type_, ptr %95, i64 0, i32 2
  store i64 0, ptr %memberidx.i100, align 4
  %memberidx1.i101 = getelementptr inbounds %Array_Type_, ptr %95, i64 0, i32 3
  store i64 8, ptr %memberidx1.i101, align 4
  %memberidx2.i102 = getelementptr inbounds %Array_Type_, ptr %95, i64 0, i32 1
  %96 = tail call ptr @malloc(i32 64)
  store ptr %96, ptr %memberidx2.i102, align 8
  store ptr %31, ptr %96, align 8
  store i64 1, ptr %memberidx.i100, align 4
  %97 = tail call fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr nonnull %94, ptr nonnull %95)
  %.not68 = icmp eq ptr %97, null
  %spec.select = select i1 %.not68, ptr %1, ptr %97
  %spec.select153 = select i1 %.not68, i1 %30, i1 false
  br label %ifend45

else44:                                           ; preds = %ifend20
  %98 = tail call ptr @malloc(i32 24)
  %99 = load i64, ptr %memberidx.i69, align 4
  store i64 14, ptr %98, align 4
  %memberidx.i103 = getelementptr inbounds %ArrayType, ptr %98, i64 0, i32 1
  store ptr %31, ptr %memberidx.i103, align 8
  %memberidx1.i104 = getelementptr inbounds %ArrayType, ptr %98, i64 0, i32 2
  store i64 %99, ptr %memberidx1.i104, align 4
  br label %ifend45

ifend45:                                          ; preds = %if.entry43, %else44
  %100 = phi ptr [ %98, %else44 ], [ %spec.select, %if.entry43 ]
  %101 = phi i1 [ %30, %else44 ], [ %spec.select153, %if.entry43 ]
  %102 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %102, align 4
  %memberidx.i.i105 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 2
  store i64 6, ptr %memberidx.i.i105, align 4
  %memberidx1.i.i106 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 1
  %memberidx.i107 = getelementptr inbounds %ArrayExpression, ptr %102, i64 0, i32 4
  store ptr %8, ptr %memberidx.i107, align 8
  store i1 %101, ptr %memberidx1.i.i106, align 1
  %memberidx53 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 3
  store ptr %100, ptr %memberidx53, align 8
  br label %common.ret
}

define internal fastcc void @TypeChecker_check_enum_body(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %EnumNode, ptr %2, i64 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = icmp eq ptr %4, null
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %6 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %6, align 4
  %memberidx.i = getelementptr inbounds %IntType, ptr %6, i64 0, i32 1
  store i1 true, ptr %memberidx.i, align 1
  br label %ifend

else:                                             ; preds = %3
  %7 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr nonnull %4)
  %8 = load i64, ptr %7, align 4
  %9 = add i64 %8, -1
  %10 = icmp ult i64 %9, 7
  br i1 %10, label %ifend, label %if.entry2

ifend:                                            ; preds = %TypeChecker_error.exit83, %else, %if.entry
  %enum_variant.0 = phi ptr [ %6, %if.entry ], [ %7, %TypeChecker_error.exit83 ], [ %7, %else ]
  %memberidx8 = getelementptr inbounds %EnumNode, ptr %2, i64 0, i32 1
  %11 = load ptr, ptr %memberidx8, align 8
  %memberidx9123 = getelementptr inbounds %Array_EnumNodeField_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx9123, align 4
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %ifend
  %memberidx44 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 3
  %memberidx46 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 2
  br label %for.body

if.entry2:                                        ; preds = %else
  %14 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %7)
  %15 = load ptr, ptr %14, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i64 0, i32 5
  %16 = load ptr, ptr %memberidx5, align 8
  %17 = tail call ptr %16(ptr nonnull %14)
  %18 = alloca ptr, align 8
  %19 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %18, ptr nonnull @97, ptr %17)
  %20 = load ptr, ptr %18, align 8
  %21 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %21, align 8
  %memberidx.i69 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  store ptr %20, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  store i64 %19, ptr %memberidx1.i70, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %21, i64 0, i32 3
  store i64 %19, ptr %memberidx2.i, align 4
  tail call void @free(ptr %17)
  %22 = load ptr, ptr %memberidx, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx.i71 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %24 = load ptr, ptr %memberidx.i71, align 8
  %memberidx1.i72 = getelementptr inbounds %Compiler, ptr %24, i64 0, i32 6
  %25 = load ptr, ptr %memberidx1.i72, align 8
  %26 = call ptr @malloc(i32 24)
  store i64 5, ptr %26, align 4
  %memberidx1.i.i73 = getelementptr inbounds %FloError, ptr %26, i64 0, i32 2
  store ptr %23, ptr %memberidx1.i.i73, align 8
  %memberidx2.i.i74 = getelementptr inbounds %FloError, ptr %26, i64 0, i32 1
  store ptr %21, ptr %memberidx2.i.i74, align 8
  %memberidx.i.i75 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i.i75, align 4
  %memberidx1.i2.i76 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 3
  %28 = load i64, ptr %memberidx1.i2.i76, align 4
  %.not.i.i77 = icmp slt i64 %27, %28
  br i1 %.not.i.i77, label %if.entry2.TypeChecker_error.exit83_crit_edge, label %if.entry.i.i80

if.entry2.TypeChecker_error.exit83_crit_edge:     ; preds = %if.entry2
  %memberidx4.i.i81.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 1
  %.pre129 = load ptr, ptr %memberidx4.i.i81.phi.trans.insert, align 8
  br label %TypeChecker_error.exit83

if.entry.i.i80:                                   ; preds = %if.entry2
  %29 = shl nuw i64 %28, 1
  store i64 %29, ptr %memberidx1.i2.i76, align 4
  %memberidx2.i.i.i79 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 1
  %30 = load ptr, ptr %memberidx2.i.i.i79, align 8
  %31 = shl i64 %28, 4
  %32 = call ptr @realloc(ptr %30, i64 %31)
  store ptr %32, ptr %memberidx2.i.i.i79, align 8
  %.pre = load i64, ptr %memberidx.i.i75, align 4
  br label %TypeChecker_error.exit83

TypeChecker_error.exit83:                         ; preds = %if.entry2.TypeChecker_error.exit83_crit_edge, %if.entry.i.i80
  %33 = phi ptr [ %.pre129, %if.entry2.TypeChecker_error.exit83_crit_edge ], [ %32, %if.entry.i.i80 ]
  %34 = phi i64 [ %27, %if.entry2.TypeChecker_error.exit83_crit_edge ], [ %.pre, %if.entry.i.i80 ]
  %35 = add nsw i64 %34, 1
  store i64 %35, ptr %memberidx.i.i75, align 4
  %ptridx.i.i82 = getelementptr inbounds ptr, ptr %33, i64 %34
  store ptr %26, ptr %ptridx.i.i82, align 8
  br label %ifend

for.body:                                         ; preds = %for.body.lr.ph, %Array_EnumField____sl__.exit
  %36 = phi ptr [ %11, %for.body.lr.ph ], [ %62, %Array_EnumField____sl__.exit ]
  %storemerge125 = phi i64 [ 0, %for.body.lr.ph ], [ %61, %Array_EnumField____sl__.exit ]
  %storemerge67120124 = phi i64 [ 0, %for.body.lr.ph ], [ %storemerge67, %Array_EnumField____sl__.exit ]
  %memberidx.i84 = getelementptr inbounds %Array_EnumNodeField_, ptr %36, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i84, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %37, i64 %storemerge125
  %38 = load ptr, ptr %ptridx.i, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx12 = getelementptr inbounds %IdentifierToken, ptr %39, i64 0, i32 2
  %40 = load ptr, ptr %memberidx12, align 8
  %41 = tail call ptr @malloc(i32 24)
  %memberidx.i85 = getelementptr inbounds %EnumField, ptr %41, i64 0, i32 1
  store ptr %40, ptr %memberidx.i85, align 8
  %42 = tail call ptr @malloc(i32 24)
  %43 = load ptr, ptr %1, align 8
  store i64 1, ptr %42, align 4
  %memberidx1.i89 = getelementptr inbounds %PropId, ptr %42, i64 0, i32 1
  store ptr %43, ptr %memberidx1.i89, align 8
  %memberidx2.i90 = getelementptr inbounds %PropId, ptr %42, i64 0, i32 2
  store i64 %storemerge125, ptr %memberidx2.i90, align 4
  store ptr %42, ptr %41, align 8
  %memberidx15 = getelementptr inbounds %EnumNodeField, ptr %38, i64 0, i32 1
  %44 = load ptr, ptr %memberidx15, align 8
  %.not = icmp eq ptr %44, null
  %memberidx41 = getelementptr inbounds %EnumField, ptr %41, i64 0, i32 2
  br i1 %.not, label %else17, label %if.entry16

common.ret:                                       ; preds = %Array_EnumField____sl__.exit, %ifend, %TypeChecker_error.exit, %TypeChecker_error.exit116
  ret void

if.entry16:                                       ; preds = %for.body
  %45 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %enum_variant.0, ptr nonnull %44)
  store ptr %45, ptr %memberidx41, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %45, i64 0, i32 1
  %46 = load i1, ptr %memberidx22, align 1
  br i1 %46, label %ifend25, label %if.entry23

else17:                                           ; preds = %for.body
  %47 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %47, align 4
  %memberidx.i.i91 = getelementptr inbounds %Expression, ptr %47, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i91, align 4
  %memberidx1.i.i92 = getelementptr inbounds %Expression, ptr %47, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i92, align 1
  %memberidx.i93 = getelementptr inbounds %Expression, ptr %47, i64 0, i32 3
  %48 = call ptr @malloc(i32 9)
  store i64 6, ptr %48, align 4
  %memberidx.i5.i = getelementptr inbounds %IntType, ptr %48, i64 0, i32 1
  store i1 false, ptr %memberidx.i5.i, align 1
  %memberidx1.i94 = getelementptr inbounds %IntExpression, ptr %47, i64 0, i32 4
  store i64 %storemerge67120124, ptr %memberidx1.i94, align 4
  store i1 true, ptr %memberidx1.i.i92, align 1
  store ptr %47, ptr %memberidx41, align 8
  store ptr %enum_variant.0, ptr %memberidx.i93, align 8
  br label %ifend18

ifend18:                                          ; preds = %else17, %ifend32
  %storemerge67.in = phi i64 [ %113, %ifend32 ], [ %storemerge67120124, %else17 ]
  %storemerge67 = add nsw i64 %storemerge67.in, 1
  %49 = load ptr, ptr %memberidx44, align 8
  %50 = load ptr, ptr %41, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %49, ptr %40, ptr %50)
  %51 = load ptr, ptr %memberidx46, align 8
  %memberidx.i96 = getelementptr inbounds %Array_EnumField_, ptr %51, i64 0, i32 2
  %52 = load i64, ptr %memberidx.i96, align 4
  %memberidx1.i97 = getelementptr inbounds %Array_EnumField_, ptr %51, i64 0, i32 3
  %53 = load i64, ptr %memberidx1.i97, align 4
  %.not.i = icmp slt i64 %52, %53
  br i1 %.not.i, label %ifend18.Array_EnumField____sl__.exit_crit_edge, label %if.entry.i

ifend18.Array_EnumField____sl__.exit_crit_edge:   ; preds = %ifend18
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_EnumField_, ptr %51, i64 0, i32 1
  %.pre135 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_EnumField____sl__.exit

if.entry.i:                                       ; preds = %ifend18
  %54 = shl nuw i64 %53, 1
  store i64 %54, ptr %memberidx1.i97, align 4
  %memberidx2.i.i99 = getelementptr inbounds %Array_EnumField_, ptr %51, i64 0, i32 1
  %55 = load ptr, ptr %memberidx2.i.i99, align 8
  %56 = shl i64 %53, 4
  %57 = call ptr @realloc(ptr %55, i64 %56)
  store ptr %57, ptr %memberidx2.i.i99, align 8
  %.pre134 = load i64, ptr %memberidx.i96, align 4
  br label %Array_EnumField____sl__.exit

Array_EnumField____sl__.exit:                     ; preds = %ifend18.Array_EnumField____sl__.exit_crit_edge, %if.entry.i
  %58 = phi ptr [ %.pre135, %ifend18.Array_EnumField____sl__.exit_crit_edge ], [ %57, %if.entry.i ]
  %59 = phi i64 [ %52, %ifend18.Array_EnumField____sl__.exit_crit_edge ], [ %.pre134, %if.entry.i ]
  %60 = add nsw i64 %59, 1
  store i64 %60, ptr %memberidx.i96, align 4
  %ptridx.i100 = getelementptr inbounds ptr, ptr %58, i64 %59
  store ptr %41, ptr %ptridx.i100, align 8
  %61 = add nuw nsw i64 %storemerge125, 1
  %62 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNodeField_, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx9, align 4
  %64 = icmp slt i64 %61, %63
  br i1 %64, label %for.body, label %common.ret

if.entry23:                                       ; preds = %if.entry16
  %65 = call ptr @malloc(i32 37)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(37) %65, ptr noundef nonnull align 8 dereferenceable(37) @98, i64 37, i1 false)
  %66 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %66, align 8
  %memberidx.i.i101 = getelementptr inbounds %string, ptr %66, i64 0, i32 1
  store ptr %65, ptr %memberidx.i.i101, align 8
  %memberidx1.i.i102 = getelementptr inbounds %string, ptr %66, i64 0, i32 2
  store i64 37, ptr %memberidx1.i.i102, align 4
  %memberidx2.i.i103 = getelementptr inbounds %string, ptr %66, i64 0, i32 3
  store i64 37, ptr %memberidx2.i.i103, align 4
  %67 = load ptr, ptr %memberidx15, align 8
  %68 = load ptr, ptr %67, align 8
  %memberidx.i104 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %69 = load ptr, ptr %memberidx.i104, align 8
  %memberidx1.i105 = getelementptr inbounds %Compiler, ptr %69, i64 0, i32 6
  %70 = load ptr, ptr %memberidx1.i105, align 8
  %71 = call ptr @malloc(i32 24)
  store i64 5, ptr %71, align 4
  %memberidx1.i.i106 = getelementptr inbounds %FloError, ptr %71, i64 0, i32 2
  store ptr %68, ptr %memberidx1.i.i106, align 8
  %memberidx2.i.i107 = getelementptr inbounds %FloError, ptr %71, i64 0, i32 1
  store ptr %66, ptr %memberidx2.i.i107, align 8
  %memberidx.i.i108 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 2
  %72 = load i64, ptr %memberidx.i.i108, align 4
  %memberidx1.i2.i109 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 3
  %73 = load i64, ptr %memberidx1.i2.i109, align 4
  %.not.i.i110 = icmp slt i64 %72, %73
  br i1 %.not.i.i110, label %if.entry23.TypeChecker_error.exit116_crit_edge, label %if.entry.i.i113

if.entry23.TypeChecker_error.exit116_crit_edge:   ; preds = %if.entry23
  %memberidx4.i.i114.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 1
  %.pre131 = load ptr, ptr %memberidx4.i.i114.phi.trans.insert, align 8
  br label %TypeChecker_error.exit116

if.entry.i.i113:                                  ; preds = %if.entry23
  %74 = shl nuw i64 %73, 1
  store i64 %74, ptr %memberidx1.i2.i109, align 4
  %memberidx2.i.i.i112 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 1
  %75 = load ptr, ptr %memberidx2.i.i.i112, align 8
  %76 = shl i64 %73, 4
  %77 = call ptr @realloc(ptr %75, i64 %76)
  store ptr %77, ptr %memberidx2.i.i.i112, align 8
  %.pre130 = load i64, ptr %memberidx.i.i108, align 4
  br label %TypeChecker_error.exit116

TypeChecker_error.exit116:                        ; preds = %if.entry23.TypeChecker_error.exit116_crit_edge, %if.entry.i.i113
  %78 = phi ptr [ %.pre131, %if.entry23.TypeChecker_error.exit116_crit_edge ], [ %77, %if.entry.i.i113 ]
  %79 = phi i64 [ %72, %if.entry23.TypeChecker_error.exit116_crit_edge ], [ %.pre130, %if.entry.i.i113 ]
  %80 = add nsw i64 %79, 1
  store i64 %80, ptr %memberidx.i.i108, align 4
  %ptridx.i.i115 = getelementptr inbounds ptr, ptr %78, i64 %79
  store ptr %71, ptr %ptridx.i.i115, align 8
  br label %common.ret

ifend25:                                          ; preds = %if.entry16
  %memberidx29 = getelementptr inbounds %Expression, ptr %45, i64 0, i32 3
  %81 = load ptr, ptr %memberidx29, align 8
  %82 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %enum_variant.0, ptr %81)
  br i1 %82, label %ifend32, label %if.entry30

if.entry30:                                       ; preds = %ifend25
  %83 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %enum_variant.0)
  %84 = load ptr, ptr %83, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i64 0, i32 5
  %85 = load ptr, ptr %memberidx33, align 8
  %86 = call ptr %85(ptr nonnull %83)
  %87 = load ptr, ptr %memberidx41, align 8
  %memberidx35 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  %88 = load ptr, ptr %memberidx35, align 8
  %89 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %88)
  %90 = load ptr, ptr %89, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %90, i64 0, i32 5
  %91 = load ptr, ptr %memberidx36, align 8
  %92 = call ptr %91(ptr nonnull %89)
  %93 = alloca ptr, align 8
  %94 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %93, ptr nonnull @99, ptr %86, ptr %92)
  %95 = load ptr, ptr %93, align 8
  %96 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %96, align 8
  %memberidx.i86 = getelementptr inbounds %string, ptr %96, i64 0, i32 1
  store ptr %95, ptr %memberidx.i86, align 8
  %memberidx1.i87 = getelementptr inbounds %string, ptr %96, i64 0, i32 2
  store i64 %94, ptr %memberidx1.i87, align 4
  %memberidx2.i88 = getelementptr inbounds %string, ptr %96, i64 0, i32 3
  store i64 %94, ptr %memberidx2.i88, align 4
  tail call void @free(ptr %86)
  tail call void @free(ptr %92)
  %97 = load ptr, ptr %memberidx15, align 8
  %98 = load ptr, ptr %97, align 8
  %memberidx.i68 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %99 = load ptr, ptr %memberidx.i68, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %99, i64 0, i32 6
  %100 = load ptr, ptr %memberidx1.i, align 8
  %101 = call ptr @malloc(i32 24)
  store i64 5, ptr %101, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %101, i64 0, i32 2
  store ptr %98, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %101, i64 0, i32 1
  store ptr %96, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 2
  %102 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 3
  %103 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %102, %103
  br i1 %.not.i.i, label %if.entry30.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry30.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry30
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 1
  %.pre133 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry30
  %104 = shl nuw i64 %103, 1
  store i64 %104, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 1
  %105 = load ptr, ptr %memberidx2.i.i.i, align 8
  %106 = shl i64 %103, 4
  %107 = call ptr @realloc(ptr %105, i64 %106)
  store ptr %107, ptr %memberidx2.i.i.i, align 8
  %.pre132 = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry30.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %108 = phi ptr [ %.pre133, %if.entry30.TypeChecker_error.exit_crit_edge ], [ %107, %if.entry.i.i ]
  %109 = phi i64 [ %102, %if.entry30.TypeChecker_error.exit_crit_edge ], [ %.pre132, %if.entry.i.i ]
  %110 = add nsw i64 %109, 1
  store i64 %110, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %108, i64 %109
  store ptr %101, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend32:                                          ; preds = %ifend25
  %111 = load ptr, ptr %0, align 8
  %112 = load ptr, ptr %memberidx41, align 8
  %113 = call fastcc i64 @evaluate_const_int_expression(ptr %111, ptr %112)
  br label %ifend18
}

define internal fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %ExpressionNode, ptr %2, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  switch i64 %4, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry2
    i64 3, label %if.entry6
    i64 2, label %if.entry10
    i64 6, label %if.entry14
    i64 7, label %if.entry18
    i64 8, label %if.entry22
    i64 9, label %if.entry26
    i64 15, label %if.entry30
    i64 10, label %if.entry34
    i64 11, label %if.entry38
    i64 12, label %if.entry42
    i64 13, label %if.entry46
    i64 14, label %if.entry50
  ]

5:                                                ; preds = %else9.i
  %6 = and i1 %49, %50
  %spec.select146 = select i1 %6, i64 5, i64 %spec.select145
  store i64 %spec.select146, ptr %10, align 4
  br label %common.ret

common.ret:                                       ; preds = %5, %else9.i, %3, %if.entry8.i114, %ifend.i113, %if.entry45.i, %ifend38.i, %if.entry50, %if.entry46, %if.entry42, %if.entry38, %if.entry34, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %TypeChecker_check_string_expression.exit, %if.entry6
  %common.ret.op = phi ptr [ %77, %if.entry6 ], [ %114, %TypeChecker_check_string_expression.exit ], [ %118, %if.entry14 ], [ %119, %if.entry18 ], [ %120, %if.entry22 ], [ %121, %if.entry26 ], [ %122, %if.entry30 ], [ %123, %if.entry34 ], [ %124, %if.entry38 ], [ %125, %if.entry42 ], [ %126, %if.entry46 ], [ %127, %if.entry50 ], [ %9, %ifend38.i ], [ %9, %if.entry45.i ], [ %60, %ifend.i113 ], [ %60, %if.entry8.i114 ], [ null, %3 ], [ %9, %else9.i ], [ %9, %5 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx.i = getelementptr inbounds %IntExpressionNode, ptr %2, i64 0, i32 3
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %IntToken, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %9, align 4
  %memberidx.i.i.i = getelementptr inbounds %Expression, ptr %9, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %9, i64 0, i32 1
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %9, i64 0, i32 3
  %10 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %10, align 4
  %memberidx.i5.i.i = getelementptr inbounds %IntType, ptr %10, i64 0, i32 1
  store i1 false, ptr %memberidx.i5.i.i, align 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %IntExpression, ptr %9, i64 0, i32 4
  store i64 %8, ptr %memberidx1.i.i, align 4
  store i1 true, ptr %memberidx1.i.i.i, align 1
  %11 = load i64, ptr %1, align 4
  %12 = add i64 %11, -1
  %13 = icmp ult i64 %12, 7
  br i1 %13, label %if.entry.i, label %ifend38.i

if.entry.i:                                       ; preds = %if.entry
  store i64 %11, ptr %10, align 4
  %memberidx7.i = getelementptr inbounds %IntType, ptr %1, i64 0, i32 1
  %14 = load i1, ptr %memberidx7.i, align 1
  store i1 %14, ptr %memberidx.i5.i.i, align 1
  br i1 %14, label %if.entry8.i, label %else9.i

if.entry8.i:                                      ; preds = %if.entry.i
  %15 = add i64 %8, -8
  %16 = icmp ult i64 %15, -16
  %17 = icmp eq i64 %11, 1
  %18 = and i1 %16, %17
  %19 = select i1 %18, i64 2, i64 %11
  %20 = add i64 %8, -128
  %21 = icmp ult i64 %20, -256
  %22 = icmp eq i64 %19, 2
  %23 = and i1 %21, %22
  %24 = select i1 %23, i64 3, i64 %19
  %.demorgan150 = and i1 %16, %17
  %.demorgan151 = and i1 %21, %22
  %25 = or i1 %.demorgan150, %.demorgan151
  %26 = add i64 %8, -32768
  %27 = icmp ult i64 %26, -65536
  %28 = icmp eq i64 %24, 3
  %29 = and i1 %27, %28
  %spec.select = select i1 %29, i64 4, i64 %24
  %.demorgan152 = and i1 %27, %28
  %30 = or i1 %25, %.demorgan152
  %31 = add i64 %8, -2147483648
  %32 = icmp ult i64 %31, -4294967296
  %33 = icmp eq i64 %spec.select, 4
  %34 = and i1 %32, %33
  %spec.select144 = select i1 %34, i64 5, i64 %spec.select
  %.demorgan153 = and i1 %32, %33
  %35 = or i1 %30, %.demorgan153
  br i1 %35, label %52, label %ifend38.i

else9.i:                                          ; preds = %if.entry.i
  %36 = icmp sgt i64 %8, 15
  %37 = icmp eq i64 %11, 1
  %38 = and i1 %36, %37
  %39 = select i1 %38, i64 2, i64 %11
  %40 = icmp sgt i64 %8, 255
  %41 = icmp eq i64 %39, 2
  %42 = and i1 %40, %41
  %43 = select i1 %42, i64 3, i64 %39
  %.demorgan = and i1 %36, %37
  %.demorgan147 = and i1 %40, %41
  %44 = or i1 %.demorgan, %.demorgan147
  %45 = icmp sgt i64 %8, 65535
  %46 = icmp eq i64 %43, 3
  %47 = and i1 %45, %46
  %spec.select145 = select i1 %47, i64 4, i64 %43
  %.demorgan148 = and i1 %45, %46
  %48 = or i1 %44, %.demorgan148
  %49 = icmp sgt i64 %8, 4294967295
  %50 = icmp eq i64 %spec.select145, 4
  %.demorgan149 = and i1 %49, %50
  %51 = or i1 %48, %.demorgan149
  br i1 %51, label %5, label %common.ret

52:                                               ; preds = %if.entry8.i
  store i64 %spec.select144, ptr %10, align 4
  br label %ifend38.i

ifend38.i:                                        ; preds = %52, %if.entry8.i, %if.entry
  %53 = phi i64 [ 6, %if.entry ], [ %spec.select144, %if.entry8.i ], [ %spec.select144, %52 ]
  %54 = icmp eq i64 %8, -9223372036854775808
  %55 = add nsw i64 %53, -5
  %56 = icmp ult i64 %55, 2
  %57 = and i1 %54, %56
  br i1 %57, label %if.entry45.i, label %common.ret

if.entry45.i:                                     ; preds = %ifend38.i
  store i64 7, ptr %10, align 4
  br label %common.ret

if.entry2:                                        ; preds = %3
  %memberidx.i103 = getelementptr inbounds %FloatExpressionNode, ptr %2, i64 0, i32 3
  %58 = load ptr, ptr %memberidx.i103, align 8
  %memberidx1.i104 = getelementptr inbounds %FloatToken, ptr %58, i64 0, i32 2
  %59 = load double, ptr %memberidx1.i104, align 8
  %60 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %60, align 4
  %memberidx.i.i.i105 = getelementptr inbounds %Expression, ptr %60, i64 0, i32 2
  store i64 1, ptr %memberidx.i.i.i105, align 4
  %memberidx1.i.i.i106 = getelementptr inbounds %Expression, ptr %60, i64 0, i32 1
  %memberidx.i.i107 = getelementptr inbounds %Expression, ptr %60, i64 0, i32 3
  %61 = tail call ptr @malloc(i32 8)
  store i64 9, ptr %61, align 4
  store ptr %61, ptr %memberidx.i.i107, align 8
  %memberidx1.i.i108 = getelementptr inbounds %FloatExpression, ptr %60, i64 0, i32 4
  store double %59, ptr %memberidx1.i.i108, align 8
  store i1 true, ptr %memberidx1.i.i.i106, align 1
  %62 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %62, ptr noundef nonnull align 8 dereferenceable(6) @205, i64 6, i1 false)
  %63 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %63, align 8
  %memberidx.i.i20.i = getelementptr inbounds %string, ptr %63, i64 0, i32 1
  store ptr %62, ptr %memberidx.i.i20.i, align 8
  %memberidx1.i.i21.i = getelementptr inbounds %string, ptr %63, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i21.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %63, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i.i, align 4
  %64 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %65 = tail call ptr %64(ptr nonnull %63)
  %66 = tail call double @atof(ptr %65)
  tail call void @free(ptr %65)
  %67 = load i64, ptr %1, align 4
  %68 = and i64 %67, -2
  %69 = icmp eq i64 %68, 8
  br i1 %69, label %if.entry.i111, label %if.entry2.ifend.i113_crit_edge

if.entry2.ifend.i113_crit_edge:                   ; preds = %if.entry2
  %.pre143 = load i64, ptr %61, align 4
  br label %ifend.i113

if.entry.i111:                                    ; preds = %if.entry2
  store i64 %67, ptr %61, align 4
  br label %ifend.i113

ifend.i113:                                       ; preds = %if.entry2.ifend.i113_crit_edge, %if.entry.i111
  %70 = phi i64 [ %.pre143, %if.entry2.ifend.i113_crit_edge ], [ %67, %if.entry.i111 ]
  %71 = fneg double %66
  %72 = fcmp olt double %59, %71
  %73 = fcmp ogt double %59, %66
  %74 = or i1 %72, %73
  %75 = icmp eq i64 %70, 8
  %76 = and i1 %74, %75
  br i1 %76, label %if.entry8.i114, label %common.ret

if.entry8.i114:                                   ; preds = %ifend.i113
  store i64 9, ptr %61, align 4
  br label %common.ret

if.entry6:                                        ; preds = %3
  %77 = tail call ptr @malloc(i32 33)
  %memberidx.i115 = getelementptr inbounds %CharExpressionNode, ptr %2, i64 0, i32 3
  %78 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %CharToken, ptr %78, i64 0, i32 2
  %79 = load i8, ptr %memberidx1.i116, align 1
  %80 = zext i8 %79 to i64
  store i64 8, ptr %77, align 4
  %memberidx.i.i.i117 = getelementptr inbounds %Expression, ptr %77, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i117, align 4
  %memberidx1.i.i.i118 = getelementptr inbounds %Expression, ptr %77, i64 0, i32 1
  %memberidx.i.i119 = getelementptr inbounds %Expression, ptr %77, i64 0, i32 3
  %81 = tail call ptr @malloc(i32 9)
  %memberidx.i5.i.i120 = getelementptr inbounds %IntType, ptr %81, i64 0, i32 1
  store i1 false, ptr %memberidx.i5.i.i120, align 1
  store ptr %81, ptr %memberidx.i.i119, align 8
  %memberidx1.i.i121 = getelementptr inbounds %IntExpression, ptr %77, i64 0, i32 4
  store i64 %80, ptr %memberidx1.i.i121, align 4
  store i1 true, ptr %memberidx1.i.i.i118, align 1
  store i64 2, ptr %81, align 4
  br label %common.ret

if.entry10:                                       ; preds = %3
  %82 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %82, align 8
  %memberidx.i.i124 = getelementptr inbounds %Array_Expression_, ptr %82, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i124, align 4
  %memberidx1.i.i125 = getelementptr inbounds %Array_Expression_, ptr %82, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i125, align 4
  %memberidx2.i.i126 = getelementptr inbounds %Array_Expression_, ptr %82, i64 0, i32 1
  %83 = tail call ptr @malloc(i32 64)
  store ptr %83, ptr %memberidx2.i.i126, align 8
  store i64 0, ptr %memberidx.i.i124, align 4
  %memberidx2.i128 = getelementptr inbounds %StringExpressionNode, ptr %2, i64 0, i32 4
  %84 = load ptr, ptr %memberidx2.i128, align 8
  %85 = tail call ptr @malloc(i32 25)
  %memberidx.i18.i = getelementptr inbounds %Array_ExpressionNode_, ptr %84, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i18.i, align 8
  %memberidx1.i19.i = getelementptr inbounds %Array_ExpressionNode_, ptr %84, i64 0, i32 2
  %87 = load i64, ptr %memberidx1.i19.i, align 4
  store i1 false, ptr %85, align 1
  %memberidx1.i.i.i129 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %85, i64 0, i32 1
  %memberidx2.i.i.i130 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %85, i64 0, i32 3
  store ptr %86, ptr %memberidx2.i.i.i130, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %85, i64 0, i32 2
  store i64 %87, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i129, align 4
  %88 = icmp slt i64 %87, 1
  br i1 %88, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %if.entry10, %Array_Expression____sl__.exit.i
  %89 = phi i64 [ %101, %Array_Expression____sl__.exit.i ], [ 1, %if.entry10 ]
  %arg.0.i141.in = phi ptr [ %ptridx.i28.i, %Array_Expression____sl__.exit.i ], [ %86, %if.entry10 ]
  %arg.0.i141 = load ptr, ptr %arg.0.i141.in, align 8
  %90 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %90, align 4
  %91 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %90, ptr %arg.0.i141)
  %92 = load i64, ptr %memberidx.i.i124, align 4
  %93 = load i64, ptr %memberidx1.i.i125, align 4
  %.not.i.i = icmp slt i64 %92, %93
  br i1 %.not.i.i, label %for.body.i.Array_Expression____sl__.exit.i_crit_edge, label %if.entry.i.i

for.body.i.Array_Expression____sl__.exit.i_crit_edge: ; preds = %for.body.i
  %.pre142 = load ptr, ptr %memberidx2.i.i126, align 8
  br label %Array_Expression____sl__.exit.i

if.entry.i.i:                                     ; preds = %for.body.i
  %94 = shl nuw i64 %93, 1
  store i64 %94, ptr %memberidx1.i.i125, align 4
  %95 = load ptr, ptr %memberidx2.i.i126, align 8
  %96 = shl i64 %93, 4
  %97 = tail call ptr @realloc(ptr %95, i64 %96)
  store ptr %97, ptr %memberidx2.i.i126, align 8
  %.pre = load i64, ptr %memberidx.i.i124, align 4
  br label %Array_Expression____sl__.exit.i

Array_Expression____sl__.exit.i:                  ; preds = %for.body.i.Array_Expression____sl__.exit.i_crit_edge, %if.entry.i.i
  %98 = phi ptr [ %97, %if.entry.i.i ], [ %.pre142, %for.body.i.Array_Expression____sl__.exit.i_crit_edge ]
  %99 = phi i64 [ %.pre, %if.entry.i.i ], [ %92, %for.body.i.Array_Expression____sl__.exit.i_crit_edge ]
  %100 = add nsw i64 %99, 1
  store i64 %100, ptr %memberidx.i.i124, align 4
  %ptridx.i25.i = getelementptr inbounds ptr, ptr %98, i64 %99
  store ptr %91, ptr %ptridx.i25.i, align 8
  %101 = add nuw nsw i64 %89, 1
  store i64 %101, ptr %memberidx1.i.i.i129, align 4
  %ptridx.i28.i = getelementptr inbounds ptr, ptr %86, i64 %89
  %.not = icmp slt i64 %89, %87
  br i1 %.not, label %for.body.i, label %for.end.i

for.end.i:                                        ; preds = %Array_Expression____sl__.exit.i, %if.entry10
  tail call void @free(ptr nonnull %85)
  %102 = load i64, ptr %1, align 4
  %103 = icmp eq i64 %102, 13
  br i1 %103, label %if.entry.i136, label %if.entry.i132

if.entry.i136:                                    ; preds = %for.end.i
  %memberidx1.i135 = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %104 = load ptr, ptr %memberidx1.i135, align 8
  %105 = load i64, ptr %104, align 4
  %106 = add i64 %105, -1
  %107 = icmp ult i64 %106, 7
  br i1 %107, label %is_u8_ptr.exit, label %if.entry.i132

is_u8_ptr.exit:                                   ; preds = %if.entry.i136
  %108 = icmp ne i64 %105, 2
  %memberidx6.i137 = getelementptr inbounds %IntType, ptr %104, i64 0, i32 1
  %109 = load i1, ptr %memberidx6.i137, align 1
  %110 = or i1 %108, %109
  br i1 %110, label %if.entry.i132, label %TypeChecker_check_string_expression.exit

if.entry.i132:                                    ; preds = %if.entry.i136, %for.end.i, %is_u8_ptr.exit
  %111 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %111, ptr noundef nonnull align 8 dereferenceable(6) @173, i64 6, i1 false)
  %112 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i.i30.i = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i.i30.i, align 8
  %memberidx1.i.i31.i = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i31.i, align 4
  %memberidx2.i.i32.i = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i32.i, align 4
  %113 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr nonnull %112)
  br label %TypeChecker_check_string_expression.exit

TypeChecker_check_string_expression.exit:         ; preds = %is_u8_ptr.exit, %if.entry.i132
  %expected_type.0.i = phi ptr [ %113, %if.entry.i132 ], [ %1, %is_u8_ptr.exit ]
  %114 = tail call ptr @malloc(i32 49)
  %memberidx4.i = getelementptr inbounds %StringExpressionNode, ptr %2, i64 0, i32 3
  %115 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %StrToken, ptr %115, i64 0, i32 2
  %116 = load ptr, ptr %memberidx5.i, align 8
  %memberidx7.i133 = getelementptr inbounds %StrToken, ptr %115, i64 0, i32 3
  %117 = load ptr, ptr %memberidx7.i133, align 8
  store i64 8, ptr %114, align 4
  %memberidx.i.i33.i = getelementptr inbounds %Expression, ptr %114, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i33.i, align 4
  %memberidx1.i.i34.i = getelementptr inbounds %Expression, ptr %114, i64 0, i32 1
  %memberidx.i35.i = getelementptr inbounds %StringExpression, ptr %114, i64 0, i32 6
  store ptr %82, ptr %memberidx.i35.i, align 8
  %memberidx1.i36.i = getelementptr inbounds %StringExpression, ptr %114, i64 0, i32 5
  store ptr %117, ptr %memberidx1.i36.i, align 8
  %memberidx2.i37.i = getelementptr inbounds %Expression, ptr %114, i64 0, i32 3
  %memberidx3.i.i = getelementptr inbounds %StringExpression, ptr %114, i64 0, i32 4
  store ptr %116, ptr %memberidx3.i.i, align 8
  store i1 true, ptr %memberidx1.i.i34.i, align 1
  store ptr %expected_type.0.i, ptr %memberidx2.i37.i, align 8
  br label %common.ret

if.entry14:                                       ; preds = %3
  %118 = tail call fastcc ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry18:                                       ; preds = %3
  %119 = tail call fastcc ptr @TypeChecker_check_var_access_expr(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry22:                                       ; preds = %3
  %120 = tail call fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry26:                                       ; preds = %3
  %121 = tail call fastcc ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry30:                                       ; preds = %3
  %122 = tail call fastcc ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry34:                                       ; preds = %3
  %123 = tail call fastcc ptr @TypeChecker_check_typecast_expr(ptr %0, ptr nonnull %2)
  br label %common.ret

if.entry38:                                       ; preds = %3
  %124 = tail call fastcc ptr @TypeChecker_check_new_expr(ptr %0, ptr nonnull %2)
  br label %common.ret

if.entry42:                                       ; preds = %3
  %125 = tail call fastcc ptr @TypeChecker_check_member_expr(ptr %0, ptr nonnull %2)
  br label %common.ret

if.entry46:                                       ; preds = %3
  %126 = tail call fastcc ptr @TypeChecker_check_index_expr(ptr %0, ptr nonnull %2)
  br label %common.ret

if.entry50:                                       ; preds = %3
  %127 = tail call fastcc ptr @TypeChecker_check_call_expr(ptr %0, ptr nonnull %2)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_var_access_expr(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %VarAccessExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i64 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call ptr @malloc(i32 4)
  store i32 1702195828, ptr %6, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %8 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %8, 4
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %3
  %memberidx2.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %9 = load ptr, ptr %memberidx2.i, align 8
  %10 = tail call i64 @memcmp(ptr %9, ptr nonnull %6, i64 4)
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend14, %TypeChecker_error.exit, %if.entry5, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %12, %if.entry ], [ %20, %if.entry2 ], [ %28, %if.entry5 ], [ null, %TypeChecker_error.exit ], [ %63, %ifend14 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %ifend.i
  %12 = tail call ptr @malloc(i32 26)
  store i64 8, ptr %12, align 4
  %memberidx.i.i50 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 2
  store i64 4, ptr %memberidx.i.i50, align 4
  %memberidx1.i.i51 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 1
  %13 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %13, align 4
  %memberidx.i52 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 3
  store ptr %13, ptr %memberidx.i52, align 8
  %memberidx1.i53 = getelementptr inbounds %BooleanExpression, ptr %12, i64 0, i32 4
  store i1 true, ptr %memberidx1.i53, align 1
  store i1 true, ptr %memberidx1.i.i51, align 1
  br label %common.ret

ifend:                                            ; preds = %3, %ifend.i
  %14 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %14, ptr noundef nonnull align 8 dereferenceable(5) @86, i64 5, i1 false)
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i55 = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i55, align 8
  %memberidx1.i.i56 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i56, align 4
  %memberidx2.i.i57 = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i57, align 4
  %16 = load i64, ptr %memberidx.i, align 4
  %.not.i60 = icmp eq i64 %16, 5
  br i1 %.not.i60, label %ifend.i64, label %ifend4

ifend.i64:                                        ; preds = %ifend
  %memberidx2.i62 = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i62, align 8
  %18 = tail call i64 @memcmp(ptr %17, ptr nonnull %14, i64 5)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend.i64
  %20 = tail call ptr @malloc(i32 26)
  store i64 8, ptr %20, align 4
  %memberidx.i.i66 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 2
  store i64 4, ptr %memberidx.i.i66, align 4
  %memberidx1.i.i67 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 1
  %21 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %21, align 4
  %memberidx.i68 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 3
  store ptr %21, ptr %memberidx.i68, align 8
  %memberidx1.i69 = getelementptr inbounds %BooleanExpression, ptr %20, i64 0, i32 4
  store i1 false, ptr %memberidx1.i69, align 1
  store i1 true, ptr %memberidx1.i.i67, align 1
  br label %common.ret

ifend4:                                           ; preds = %ifend, %ifend.i64
  %22 = tail call ptr @malloc(i32 4)
  store i32 1819047278, ptr %22, align 8
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i71 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i71, align 8
  %memberidx1.i.i72 = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i72, align 4
  %memberidx2.i.i73 = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i73, align 4
  %24 = load i64, ptr %memberidx.i, align 4
  %.not.i76 = icmp eq i64 %24, 4
  br i1 %.not.i76, label %ifend.i80, label %ifend7

ifend.i80:                                        ; preds = %ifend4
  %memberidx2.i78 = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %25 = load ptr, ptr %memberidx2.i78, align 8
  %26 = tail call i64 @memcmp(ptr %25, ptr nonnull %22, i64 4)
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %if.entry5, label %ifend7

if.entry5:                                        ; preds = %ifend.i80
  %28 = tail call ptr @malloc(i32 25)
  store i64 8, ptr %28, align 4
  %memberidx.i.i82 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 2
  store i64 5, ptr %memberidx.i.i82, align 4
  %memberidx1.i.i83 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 1
  %memberidx.i84 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 3
  store ptr %1, ptr %memberidx.i84, align 8
  store i1 true, ptr %memberidx1.i.i83, align 1
  br label %common.ret

ifend7:                                           ; preds = %ifend4, %ifend.i80
  %29 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr nonnull %5)
  %30 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %30, align 4
  %.not = icmp eq ptr %29, null
  br i1 %.not, label %ifend10, label %if.entry8

if.entry8:                                        ; preds = %ifend7
  %31 = load i64, ptr %29, align 4
  switch i64 %31, label %else25 [
    i64 0, label %if.entry12
    i64 1, label %if.entry18
    i64 2, label %if.entry24
  ]

ifend10:                                          ; preds = %ifend7
  %32 = load ptr, ptr %5, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i64 0, i32 5
  %33 = load ptr, ptr %memberidx38, align 8
  %34 = tail call ptr %33(ptr nonnull %5)
  %35 = alloca ptr, align 8
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %35, ptr nonnull @156, ptr %34)
  %37 = load ptr, ptr %35, align 8
  %38 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %38, align 8
  %memberidx.i89 = getelementptr inbounds %string, ptr %38, i64 0, i32 1
  store ptr %37, ptr %memberidx.i89, align 8
  %memberidx1.i90 = getelementptr inbounds %string, ptr %38, i64 0, i32 2
  store i64 %36, ptr %memberidx1.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %string, ptr %38, i64 0, i32 3
  store i64 %36, ptr %memberidx2.i91, align 4
  tail call void @free(ptr %34)
  %39 = load ptr, ptr %2, align 8
  %memberidx.i92 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %40 = load ptr, ptr %memberidx.i92, align 8
  %memberidx1.i93 = getelementptr inbounds %Compiler, ptr %40, i64 0, i32 6
  %41 = load ptr, ptr %memberidx1.i93, align 8
  %42 = call ptr @malloc(i32 24)
  store i64 1, ptr %42, align 4
  %memberidx1.i.i94 = getelementptr inbounds %FloError, ptr %42, i64 0, i32 2
  store ptr %39, ptr %memberidx1.i.i94, align 8
  %memberidx2.i.i95 = getelementptr inbounds %FloError, ptr %42, i64 0, i32 1
  store ptr %38, ptr %memberidx2.i.i95, align 8
  %memberidx.i.i96 = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 2
  %43 = load i64, ptr %memberidx.i.i96, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 3
  %44 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %43, %44
  br i1 %.not.i.i, label %ifend10.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

ifend10.TypeChecker_error.exit_crit_edge:         ; preds = %ifend10
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 1
  %.pre129 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %ifend10
  %45 = shl nuw i64 %44, 1
  store i64 %45, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i.i, align 8
  %47 = shl i64 %44, 4
  %48 = call ptr @realloc(ptr %46, i64 %47)
  store ptr %48, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i96, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %ifend10.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %49 = phi ptr [ %.pre129, %ifend10.TypeChecker_error.exit_crit_edge ], [ %48, %if.entry.i.i ]
  %50 = phi i64 [ %43, %ifend10.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %51 = add nsw i64 %50, 1
  store i64 %51, ptr %memberidx.i.i96, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %49, i64 %50
  store ptr %42, ptr %ptridx.i.i, align 8
  br label %common.ret

if.entry12:                                       ; preds = %if.entry8
  %52 = load ptr, ptr %0, align 8
  %memberidx.i98 = getelementptr inbounds %Program, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i98, align 8
  %memberidx1.i99 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %54 = load i64, ptr %memberidx1.i99, align 4
  %memberidx.i.i100 = getelementptr inbounds %Array_Module_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i.i100, align 8
  %ptridx.i.i101 = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i.i101, align 8
  %memberidx2.i102 = getelementptr inbounds %Module, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx2.i102, align 8
  %memberidx3.i103 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %58 = load i64, ptr %memberidx3.i103, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Function_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %59, i64 %58
  %60 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx16 = getelementptr inbounds %Function, ptr %60, i64 0, i32 4
  %61 = load ptr, ptr %memberidx16, align 8
  br label %ifend14

ifend14:                                          ; preds = %if.entry35, %else32, %if.entry31, %if.entry24, %if.entry18, %if.entry12
  %62 = phi ptr [ %90, %if.entry35 ], [ %30, %else32 ], [ %88, %if.entry31 ], [ %85, %if.entry24 ], [ %75, %if.entry18 ], [ %61, %if.entry12 ]
  %63 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %63, align 4
  %memberidx.i.i104 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i104, align 4
  %memberidx1.i.i105 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 1
  %memberidx.i106 = getelementptr inbounds %VarAccessExpression, ptr %63, i64 0, i32 4
  store ptr %29, ptr %memberidx.i106, align 8
  %memberidx1.i107 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 3
  store ptr %62, ptr %memberidx1.i107, align 8
  %64 = load i64, ptr %29, align 4
  %65 = icmp eq i64 %64, 2
  store i1 %65, ptr %memberidx1.i.i105, align 1
  br label %common.ret

if.entry18:                                       ; preds = %if.entry8
  %66 = load ptr, ptr %0, align 8
  %memberidx.i117 = getelementptr inbounds %Program, ptr %66, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i117, align 8
  %memberidx1.i118 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %68 = load i64, ptr %memberidx1.i118, align 4
  %memberidx.i.i119 = getelementptr inbounds %Array_Module_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i.i119, align 8
  %ptridx.i.i120 = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i.i120, align 8
  %memberidx2.i121 = getelementptr inbounds %Module, ptr %70, i64 0, i32 2
  %71 = load ptr, ptr %memberidx2.i121, align 8
  %memberidx3.i122 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %72 = load i64, ptr %memberidx3.i122, align 4
  %memberidx.i5.i123 = getelementptr inbounds %Array_Var_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i5.i123, align 8
  %ptridx.i6.i124 = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i6.i124, align 8
  %75 = load ptr, ptr %74, align 8
  br label %ifend14

if.entry24:                                       ; preds = %if.entry8
  %76 = load ptr, ptr %0, align 8
  %memberidx.i109 = getelementptr inbounds %Program, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i109, align 8
  %memberidx1.i110 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %78 = load i64, ptr %memberidx1.i110, align 4
  %memberidx.i.i111 = getelementptr inbounds %Array_Module_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i.i111, align 8
  %ptridx.i.i112 = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i.i112, align 8
  %memberidx2.i113 = getelementptr inbounds %Module, ptr %80, i64 0, i32 3
  %81 = load ptr, ptr %memberidx2.i113, align 8
  %memberidx3.i114 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %82 = load i64, ptr %memberidx3.i114, align 4
  %memberidx.i5.i115 = getelementptr inbounds %Array_Const_, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i5.i115, align 8
  %ptridx.i6.i116 = getelementptr inbounds ptr, ptr %83, i64 %82
  %84 = load ptr, ptr %ptridx.i6.i116, align 8
  %85 = load ptr, ptr %84, align 8
  br label %ifend14

else25:                                           ; preds = %if.entry8
  %86 = add i64 %31, -3
  %87 = icmp ult i64 %86, 2
  br i1 %87, label %if.entry31, label %else32

if.entry31:                                       ; preds = %else25
  %88 = tail call ptr @malloc(i32 8)
  store i64 16, ptr %88, align 4
  br label %ifend14

else32:                                           ; preds = %else25
  %89 = icmp eq i64 %31, 5
  br i1 %89, label %if.entry35, label %ifend14

if.entry35:                                       ; preds = %else32
  %90 = tail call ptr @malloc(i32 8)
  store i64 17, ptr %90, align 4
  br label %ifend14
}

define internal fastcc ptr @TypeChecker_check_intrinsic_call(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %2, i64 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  %5 = add i64 %4, -3
  %6 = icmp ult i64 %5, 2
  %7 = icmp eq i64 %4, 7
  %8 = or i1 %7, %6
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 5
  %memberidx.i135 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 1
  %memberidx.i138 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  br label %for.body

for.cond:                                         ; preds = %Array_Expression____sl__.exit
  %11 = add nuw nsw i64 %i.0249, 1
  %12 = load i64, ptr %memberidx2, align 4
  %13 = icmp slt i64 %11, %12
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %i.0249 = phi i64 [ 0, %for.body.lr.ph ], [ %11, %for.cond ]
  %14 = icmp eq i64 %i.0249, 1
  %15 = and i1 %8, %14
  br i1 %15, label %true_block, label %false_block

for.end:                                          ; preds = %for.cond, %for.entry
  %memberidx6 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 5
  %16 = load ptr, ptr %memberidx6, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx7 = getelementptr inbounds %Expression, ptr %18, i64 0, i32 3
  %19 = load ptr, ptr %memberidx7, align 8
  %20 = load i64, ptr %19, align 4
  %21 = icmp eq i64 %20, 13
  br i1 %21, label %ifend10, label %if.entry8

true_block:                                       ; preds = %for.body
  %22 = tail call ptr @malloc(i32 8)
  store i64 20, ptr %22, align 4
  %.pre = load ptr, ptr %memberidx3, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %23 = load ptr, ptr %memberidx3, align 8
  %memberidx.i134 = getelementptr inbounds %Array_Expression_, ptr %23, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i134, align 8
  %25 = load ptr, ptr %24, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx4, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %27 = phi ptr [ %.pre, %true_block ], [ %23, %false_block ]
  %ternary = phi ptr [ %22, %true_block ], [ %26, %false_block ]
  %28 = load ptr, ptr %memberidx.i135, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %28, i64 %i.0249
  %29 = load ptr, ptr %ptridx.i, align 8
  %30 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %ternary, ptr %29)
  %memberidx.i136 = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i136, align 4
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 3
  %32 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %31, %32
  br i1 %.not.i, label %end.Array_Expression____sl__.exit_crit_edge, label %if.entry.i

end.Array_Expression____sl__.exit_crit_edge:      ; preds = %end
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 1
  %.pre251 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Expression____sl__.exit

if.entry.i:                                       ; preds = %end
  %33 = shl nuw i64 %32, 1
  store i64 %33, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 1
  %34 = load ptr, ptr %memberidx2.i.i, align 8
  %35 = shl i64 %32, 4
  %36 = tail call ptr @realloc(ptr %34, i64 %35)
  store ptr %36, ptr %memberidx2.i.i, align 8
  %.pre250 = load i64, ptr %memberidx.i136, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %end.Array_Expression____sl__.exit_crit_edge, %if.entry.i
  %37 = phi ptr [ %.pre251, %end.Array_Expression____sl__.exit_crit_edge ], [ %36, %if.entry.i ]
  %38 = phi i64 [ %31, %end.Array_Expression____sl__.exit_crit_edge ], [ %.pre250, %if.entry.i ]
  %39 = add nsw i64 %38, 1
  store i64 %39, ptr %memberidx.i136, align 4
  %ptridx.i137 = getelementptr inbounds ptr, ptr %37, i64 %38
  store ptr %30, ptr %ptridx.i137, align 8
  %40 = load ptr, ptr %memberidx.i138, align 8
  %memberidx1.i139 = getelementptr inbounds %Compiler, ptr %40, i64 0, i32 6
  %41 = load ptr, ptr %memberidx1.i139, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 2
  %42 = load i64, ptr %memberidx2.i, align 4
  %43 = icmp sgt i64 %42, 0
  br i1 %43, label %common.ret, label %for.cond

common.ret:                                       ; preds = %Array_Expression____sl__.exit, %ifend23, %ifend73, %if.entry79, %else17, %TypeChecker_error.exit245, %TypeChecker_error.exit223, %TypeChecker_error.exit201, %TypeChecker_error.exit185, %TypeChecker_error.exit163, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit163 ], [ null, %TypeChecker_error.exit185 ], [ null, %TypeChecker_error.exit201 ], [ null, %TypeChecker_error.exit223 ], [ null, %TypeChecker_error.exit245 ], [ %1, %else17 ], [ %1, %if.entry79 ], [ %1, %ifend73 ], [ %1, %ifend23 ], [ null, %Array_Expression____sl__.exit ]
  ret ptr %common.ret.op

if.entry8:                                        ; preds = %for.end
  %44 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %19)
  %45 = load ptr, ptr %44, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i64 0, i32 5
  %46 = load ptr, ptr %memberidx13, align 8
  %47 = tail call ptr %46(ptr nonnull %44)
  %48 = alloca ptr, align 8
  %49 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %48, ptr nonnull @200, ptr %47)
  %50 = load ptr, ptr %48, align 8
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i141 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i141, align 8
  %memberidx1.i142 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 %49, ptr %memberidx1.i142, align 4
  %memberidx2.i143 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 %49, ptr %memberidx2.i143, align 4
  tail call void @free(ptr %47)
  %memberidx14 = getelementptr inbounds %CallExpressionNode, ptr %2, i64 0, i32 3
  %52 = load ptr, ptr %memberidx14, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx.i144 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %54 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %Compiler, ptr %54, i64 0, i32 6
  %55 = load ptr, ptr %memberidx1.i145, align 8
  %56 = call ptr @malloc(i32 24)
  store i64 5, ptr %56, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %56, i64 0, i32 2
  store ptr %53, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i146 = getelementptr inbounds %FloError, ptr %56, i64 0, i32 1
  store ptr %51, ptr %memberidx2.i.i146, align 8
  %memberidx.i.i147 = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 2
  %57 = load i64, ptr %memberidx.i.i147, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 3
  %58 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %57, %58
  br i1 %.not.i.i, label %if.entry8.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry8.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry8
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %.pre253 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry8
  %59 = shl nuw i64 %58, 1
  store i64 %59, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %60 = load ptr, ptr %memberidx2.i.i.i, align 8
  %61 = shl i64 %58, 4
  %62 = call ptr @realloc(ptr %60, i64 %61)
  store ptr %62, ptr %memberidx2.i.i.i, align 8
  %.pre252 = load i64, ptr %memberidx.i.i147, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry8.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %63 = phi ptr [ %.pre253, %if.entry8.TypeChecker_error.exit_crit_edge ], [ %62, %if.entry.i.i ]
  %64 = phi i64 [ %57, %if.entry8.TypeChecker_error.exit_crit_edge ], [ %.pre252, %if.entry.i.i ]
  %65 = add nsw i64 %64, 1
  store i64 %65, ptr %memberidx.i.i147, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %63, i64 %64
  store ptr %56, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend10:                                          ; preds = %for.end
  %66 = icmp eq i64 %4, 6
  br i1 %66, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend10
  %memberidx20 = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 2
  %67 = load i64, ptr %memberidx20, align 4
  %.not133 = icmp eq i64 %67, 2
  br i1 %.not133, label %ifend23, label %if.entry21

else17:                                           ; preds = %ifend10
  %68 = icmp eq i64 %4, 5
  switch i64 %4, label %common.ret [
    i64 7, label %if.entry40
    i64 5, label %if.entry40
    i64 4, label %if.entry40
    i64 3, label %if.entry40
  ]

if.entry21:                                       ; preds = %if.entry16
  %69 = alloca ptr, align 8
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %69, ptr nonnull @201, i64 %67)
  %71 = load ptr, ptr %69, align 8
  %72 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i148 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i148, align 8
  %memberidx1.i149 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 %70, ptr %memberidx1.i149, align 4
  %memberidx2.i150 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 %70, ptr %memberidx2.i150, align 4
  %73 = load ptr, ptr %2, align 8
  %memberidx.i151 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %74 = load ptr, ptr %memberidx.i151, align 8
  %memberidx1.i152 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i152, align 8
  %76 = call ptr @malloc(i32 24)
  store i64 4, ptr %76, align 4
  %memberidx1.i.i153 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 2
  store ptr %73, ptr %memberidx1.i.i153, align 8
  %memberidx2.i.i154 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 1
  store ptr %72, ptr %memberidx2.i.i154, align 8
  %memberidx.i.i155 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i.i155, align 4
  %memberidx1.i2.i156 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 3
  %78 = load i64, ptr %memberidx1.i2.i156, align 4
  %.not.i.i157 = icmp slt i64 %77, %78
  br i1 %.not.i.i157, label %if.entry21.TypeChecker_error.exit163_crit_edge, label %if.entry.i.i160

if.entry21.TypeChecker_error.exit163_crit_edge:   ; preds = %if.entry21
  %memberidx4.i.i161.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %.pre261 = load ptr, ptr %memberidx4.i.i161.phi.trans.insert, align 8
  br label %TypeChecker_error.exit163

if.entry.i.i160:                                  ; preds = %if.entry21
  %79 = shl nuw i64 %78, 1
  store i64 %79, ptr %memberidx1.i2.i156, align 4
  %memberidx2.i.i.i159 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i.i159, align 8
  %81 = shl i64 %78, 4
  %82 = call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i.i.i159, align 8
  %.pre260 = load i64, ptr %memberidx.i.i155, align 4
  br label %TypeChecker_error.exit163

TypeChecker_error.exit163:                        ; preds = %if.entry21.TypeChecker_error.exit163_crit_edge, %if.entry.i.i160
  %83 = phi ptr [ %.pre261, %if.entry21.TypeChecker_error.exit163_crit_edge ], [ %82, %if.entry.i.i160 ]
  %84 = phi i64 [ %77, %if.entry21.TypeChecker_error.exit163_crit_edge ], [ %.pre260, %if.entry.i.i160 ]
  %85 = add nsw i64 %84, 1
  store i64 %85, ptr %memberidx.i.i155, align 4
  %ptridx.i.i162 = getelementptr inbounds ptr, ptr %83, i64 %84
  store ptr %76, ptr %ptridx.i.i162, align 8
  br label %common.ret

ifend23:                                          ; preds = %if.entry16
  %memberidx27 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  store ptr %19, ptr %memberidx27, align 8
  %86 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i166 = getelementptr inbounds ptr, ptr %86, i64 1
  %87 = load ptr, ptr %ptridx.i166, align 8
  %memberidx31 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  %88 = load ptr, ptr %memberidx31, align 8
  %89 = load i64, ptr %88, align 4
  %90 = add i64 %89, -1
  %91 = icmp ult i64 %90, 7
  br i1 %91, label %common.ret, label %if.entry32

if.entry32:                                       ; preds = %ifend23
  %92 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %88)
  %93 = load ptr, ptr %92, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %93, i64 0, i32 5
  %94 = load ptr, ptr %memberidx37, align 8
  %95 = tail call ptr %94(ptr nonnull %92)
  %96 = alloca ptr, align 8
  %97 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %96, ptr nonnull @202, ptr %95)
  %98 = load ptr, ptr %96, align 8
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i169 = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i169, align 8
  %memberidx1.i170 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 %97, ptr %memberidx1.i170, align 4
  %memberidx2.i171 = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 %97, ptr %memberidx2.i171, align 4
  tail call void @free(ptr %95)
  %100 = load ptr, ptr %memberidx, align 8
  %memberidx.i172 = getelementptr inbounds %Array_ExpressionNode_, ptr %100, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i172, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %102, align 8
  %memberidx.i173 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %104 = load ptr, ptr %memberidx.i173, align 8
  %memberidx1.i174 = getelementptr inbounds %Compiler, ptr %104, i64 0, i32 6
  %105 = load ptr, ptr %memberidx1.i174, align 8
  %106 = call ptr @malloc(i32 24)
  store i64 5, ptr %106, align 4
  %memberidx1.i.i175 = getelementptr inbounds %FloError, ptr %106, i64 0, i32 2
  store ptr %103, ptr %memberidx1.i.i175, align 8
  %memberidx2.i.i176 = getelementptr inbounds %FloError, ptr %106, i64 0, i32 1
  store ptr %99, ptr %memberidx2.i.i176, align 8
  %memberidx.i.i177 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 2
  %107 = load i64, ptr %memberidx.i.i177, align 4
  %memberidx1.i2.i178 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 3
  %108 = load i64, ptr %memberidx1.i2.i178, align 4
  %.not.i.i179 = icmp slt i64 %107, %108
  br i1 %.not.i.i179, label %if.entry32.TypeChecker_error.exit185_crit_edge, label %if.entry.i.i182

if.entry32.TypeChecker_error.exit185_crit_edge:   ; preds = %if.entry32
  %memberidx4.i.i183.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %.pre263 = load ptr, ptr %memberidx4.i.i183.phi.trans.insert, align 8
  br label %TypeChecker_error.exit185

if.entry.i.i182:                                  ; preds = %if.entry32
  %109 = shl nuw i64 %108, 1
  store i64 %109, ptr %memberidx1.i2.i178, align 4
  %memberidx2.i.i.i181 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i.i.i181, align 8
  %111 = shl i64 %108, 4
  %112 = call ptr @realloc(ptr %110, i64 %111)
  store ptr %112, ptr %memberidx2.i.i.i181, align 8
  %.pre262 = load i64, ptr %memberidx.i.i177, align 4
  br label %TypeChecker_error.exit185

TypeChecker_error.exit185:                        ; preds = %if.entry32.TypeChecker_error.exit185_crit_edge, %if.entry.i.i182
  %113 = phi ptr [ %.pre263, %if.entry32.TypeChecker_error.exit185_crit_edge ], [ %112, %if.entry.i.i182 ]
  %114 = phi i64 [ %107, %if.entry32.TypeChecker_error.exit185_crit_edge ], [ %.pre262, %if.entry.i.i182 ]
  %115 = add nsw i64 %114, 1
  store i64 %115, ptr %memberidx.i.i177, align 4
  %ptridx.i.i184 = getelementptr inbounds ptr, ptr %113, i64 %114
  store ptr %106, ptr %ptridx.i.i184, align 8
  br label %common.ret

if.entry40:                                       ; preds = %else17, %else17, %else17, %else17
  %memberidx44 = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 2
  %116 = load i64, ptr %memberidx44, align 4
  %.not = icmp eq i64 %116, 3
  br i1 %.not, label %ifend47, label %if.entry45

if.entry45:                                       ; preds = %if.entry40
  %117 = alloca ptr, align 8
  %118 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %117, ptr nonnull @203, i64 %116)
  %119 = load ptr, ptr %117, align 8
  %120 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %120, align 8
  %memberidx.i186 = getelementptr inbounds %string, ptr %120, i64 0, i32 1
  store ptr %119, ptr %memberidx.i186, align 8
  %memberidx1.i187 = getelementptr inbounds %string, ptr %120, i64 0, i32 2
  store i64 %118, ptr %memberidx1.i187, align 4
  %memberidx2.i188 = getelementptr inbounds %string, ptr %120, i64 0, i32 3
  store i64 %118, ptr %memberidx2.i188, align 4
  %121 = load ptr, ptr %2, align 8
  %memberidx.i189 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %122 = load ptr, ptr %memberidx.i189, align 8
  %memberidx1.i190 = getelementptr inbounds %Compiler, ptr %122, i64 0, i32 6
  %123 = load ptr, ptr %memberidx1.i190, align 8
  %124 = call ptr @malloc(i32 24)
  store i64 4, ptr %124, align 4
  %memberidx1.i.i191 = getelementptr inbounds %FloError, ptr %124, i64 0, i32 2
  store ptr %121, ptr %memberidx1.i.i191, align 8
  %memberidx2.i.i192 = getelementptr inbounds %FloError, ptr %124, i64 0, i32 1
  store ptr %120, ptr %memberidx2.i.i192, align 8
  %memberidx.i.i193 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 2
  %125 = load i64, ptr %memberidx.i.i193, align 4
  %memberidx1.i2.i194 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 3
  %126 = load i64, ptr %memberidx1.i2.i194, align 4
  %.not.i.i195 = icmp slt i64 %125, %126
  br i1 %.not.i.i195, label %if.entry45.TypeChecker_error.exit201_crit_edge, label %if.entry.i.i198

if.entry45.TypeChecker_error.exit201_crit_edge:   ; preds = %if.entry45
  %memberidx4.i.i199.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 1
  %.pre255 = load ptr, ptr %memberidx4.i.i199.phi.trans.insert, align 8
  br label %TypeChecker_error.exit201

if.entry.i.i198:                                  ; preds = %if.entry45
  %127 = shl nuw i64 %126, 1
  store i64 %127, ptr %memberidx1.i2.i194, align 4
  %memberidx2.i.i.i197 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 1
  %128 = load ptr, ptr %memberidx2.i.i.i197, align 8
  %129 = shl i64 %126, 4
  %130 = call ptr @realloc(ptr %128, i64 %129)
  store ptr %130, ptr %memberidx2.i.i.i197, align 8
  %.pre254 = load i64, ptr %memberidx.i.i193, align 4
  br label %TypeChecker_error.exit201

TypeChecker_error.exit201:                        ; preds = %if.entry45.TypeChecker_error.exit201_crit_edge, %if.entry.i.i198
  %131 = phi ptr [ %.pre255, %if.entry45.TypeChecker_error.exit201_crit_edge ], [ %130, %if.entry.i.i198 ]
  %132 = phi i64 [ %125, %if.entry45.TypeChecker_error.exit201_crit_edge ], [ %.pre254, %if.entry.i.i198 ]
  %133 = add nsw i64 %132, 1
  store i64 %133, ptr %memberidx.i.i193, align 4
  %ptridx.i.i200 = getelementptr inbounds ptr, ptr %131, i64 %132
  store ptr %124, ptr %ptridx.i.i200, align 8
  br label %common.ret

ifend47:                                          ; preds = %if.entry40
  %memberidx53 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  store ptr %19, ptr %memberidx53, align 8
  br i1 %68, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %ifend47
  %memberidx57 = getelementptr inbounds %PointerType, ptr %19, i64 0, i32 1
  %134 = load ptr, ptr %memberidx57, align 8
  br label %ifend56

ifend56:                                          ; preds = %ifend47, %if.entry54
  %135 = phi ptr [ %19, %ifend47 ], [ %134, %if.entry54 ]
  %136 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i204 = getelementptr inbounds ptr, ptr %136, i64 1
  %137 = load ptr, ptr %ptridx.i204, align 8
  %memberidx59 = getelementptr inbounds %Expression, ptr %137, i64 0, i32 3
  %138 = load ptr, ptr %memberidx59, align 8
  %139 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %135, ptr %138)
  br i1 %139, label %ifend62, label %if.entry60

if.entry60:                                       ; preds = %ifend56
  %140 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %135)
  %141 = load ptr, ptr %140, align 8
  %memberidx63 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %141, i64 0, i32 5
  %142 = load ptr, ptr %memberidx63, align 8
  %143 = tail call ptr %142(ptr nonnull %140)
  %144 = load ptr, ptr %memberidx6, align 8
  %memberidx.i205 = getelementptr inbounds %Array_Expression_, ptr %144, i64 0, i32 1
  %145 = load ptr, ptr %memberidx.i205, align 8
  %ptridx.i206 = getelementptr inbounds ptr, ptr %145, i64 1
  %146 = load ptr, ptr %ptridx.i206, align 8
  %memberidx65 = getelementptr inbounds %Expression, ptr %146, i64 0, i32 3
  %147 = load ptr, ptr %memberidx65, align 8
  %148 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %147)
  %149 = load ptr, ptr %148, align 8
  %memberidx66 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %149, i64 0, i32 5
  %150 = load ptr, ptr %memberidx66, align 8
  %151 = tail call ptr %150(ptr nonnull %148)
  %152 = alloca ptr, align 8
  %153 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %152, ptr nonnull @204, ptr %143, ptr %151)
  %154 = load ptr, ptr %152, align 8
  %155 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %155, align 8
  %memberidx.i207 = getelementptr inbounds %string, ptr %155, i64 0, i32 1
  store ptr %154, ptr %memberidx.i207, align 8
  %memberidx1.i208 = getelementptr inbounds %string, ptr %155, i64 0, i32 2
  store i64 %153, ptr %memberidx1.i208, align 4
  %memberidx2.i209 = getelementptr inbounds %string, ptr %155, i64 0, i32 3
  store i64 %153, ptr %memberidx2.i209, align 4
  tail call void @free(ptr %143)
  tail call void @free(ptr %151)
  %156 = load ptr, ptr %memberidx, align 8
  %memberidx.i210 = getelementptr inbounds %Array_ExpressionNode_, ptr %156, i64 0, i32 1
  %157 = load ptr, ptr %memberidx.i210, align 8
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %158, align 8
  %memberidx.i211 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %160 = load ptr, ptr %memberidx.i211, align 8
  %memberidx1.i212 = getelementptr inbounds %Compiler, ptr %160, i64 0, i32 6
  %161 = load ptr, ptr %memberidx1.i212, align 8
  %162 = call ptr @malloc(i32 24)
  store i64 5, ptr %162, align 4
  %memberidx1.i.i213 = getelementptr inbounds %FloError, ptr %162, i64 0, i32 2
  store ptr %159, ptr %memberidx1.i.i213, align 8
  %memberidx2.i.i214 = getelementptr inbounds %FloError, ptr %162, i64 0, i32 1
  store ptr %155, ptr %memberidx2.i.i214, align 8
  %memberidx.i.i215 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 2
  %163 = load i64, ptr %memberidx.i.i215, align 4
  %memberidx1.i2.i216 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 3
  %164 = load i64, ptr %memberidx1.i2.i216, align 4
  %.not.i.i217 = icmp slt i64 %163, %164
  br i1 %.not.i.i217, label %if.entry60.TypeChecker_error.exit223_crit_edge, label %if.entry.i.i220

if.entry60.TypeChecker_error.exit223_crit_edge:   ; preds = %if.entry60
  %memberidx4.i.i221.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 1
  %.pre257 = load ptr, ptr %memberidx4.i.i221.phi.trans.insert, align 8
  br label %TypeChecker_error.exit223

if.entry.i.i220:                                  ; preds = %if.entry60
  %165 = shl nuw i64 %164, 1
  store i64 %165, ptr %memberidx1.i2.i216, align 4
  %memberidx2.i.i.i219 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 1
  %166 = load ptr, ptr %memberidx2.i.i.i219, align 8
  %167 = shl i64 %164, 4
  %168 = call ptr @realloc(ptr %166, i64 %167)
  store ptr %168, ptr %memberidx2.i.i.i219, align 8
  %.pre256 = load i64, ptr %memberidx.i.i215, align 4
  br label %TypeChecker_error.exit223

TypeChecker_error.exit223:                        ; preds = %if.entry60.TypeChecker_error.exit223_crit_edge, %if.entry.i.i220
  %169 = phi ptr [ %.pre257, %if.entry60.TypeChecker_error.exit223_crit_edge ], [ %168, %if.entry.i.i220 ]
  %170 = phi i64 [ %163, %if.entry60.TypeChecker_error.exit223_crit_edge ], [ %.pre256, %if.entry.i.i220 ]
  %171 = add nsw i64 %170, 1
  store i64 %171, ptr %memberidx.i.i215, align 4
  %ptridx.i.i222 = getelementptr inbounds ptr, ptr %169, i64 %170
  store ptr %162, ptr %ptridx.i.i222, align 8
  br label %common.ret

ifend62:                                          ; preds = %ifend56
  %172 = load ptr, ptr %memberidx6, align 8
  %memberidx.i224 = getelementptr inbounds %Array_Expression_, ptr %172, i64 0, i32 1
  %173 = load ptr, ptr %memberidx.i224, align 8
  %ptridx.i225 = getelementptr inbounds ptr, ptr %173, i64 2
  %174 = load ptr, ptr %ptridx.i225, align 8
  %memberidx70 = getelementptr inbounds %Expression, ptr %174, i64 0, i32 3
  %175 = load ptr, ptr %memberidx70, align 8
  %176 = load i64, ptr %175, align 4
  %177 = add i64 %176, -1
  %178 = icmp ult i64 %177, 7
  br i1 %178, label %ifend73, label %if.entry71

if.entry71:                                       ; preds = %ifend62
  %179 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %175)
  %180 = load ptr, ptr %179, align 8
  %memberidx76 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %180, i64 0, i32 5
  %181 = load ptr, ptr %memberidx76, align 8
  %182 = tail call ptr %181(ptr nonnull %179)
  %183 = alloca ptr, align 8
  %184 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %183, ptr nonnull @202, ptr %182)
  %185 = load ptr, ptr %183, align 8
  %186 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %186, align 8
  %memberidx.i228 = getelementptr inbounds %string, ptr %186, i64 0, i32 1
  store ptr %185, ptr %memberidx.i228, align 8
  %memberidx1.i229 = getelementptr inbounds %string, ptr %186, i64 0, i32 2
  store i64 %184, ptr %memberidx1.i229, align 4
  %memberidx2.i230 = getelementptr inbounds %string, ptr %186, i64 0, i32 3
  store i64 %184, ptr %memberidx2.i230, align 4
  tail call void @free(ptr %182)
  %187 = load ptr, ptr %memberidx, align 8
  %memberidx.i231 = getelementptr inbounds %Array_ExpressionNode_, ptr %187, i64 0, i32 1
  %188 = load ptr, ptr %memberidx.i231, align 8
  %ptridx.i232 = getelementptr inbounds ptr, ptr %188, i64 1
  %189 = load ptr, ptr %ptridx.i232, align 8
  %190 = load ptr, ptr %189, align 8
  %memberidx.i233 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %191 = load ptr, ptr %memberidx.i233, align 8
  %memberidx1.i234 = getelementptr inbounds %Compiler, ptr %191, i64 0, i32 6
  %192 = load ptr, ptr %memberidx1.i234, align 8
  %193 = call ptr @malloc(i32 24)
  store i64 5, ptr %193, align 4
  %memberidx1.i.i235 = getelementptr inbounds %FloError, ptr %193, i64 0, i32 2
  store ptr %190, ptr %memberidx1.i.i235, align 8
  %memberidx2.i.i236 = getelementptr inbounds %FloError, ptr %193, i64 0, i32 1
  store ptr %186, ptr %memberidx2.i.i236, align 8
  %memberidx.i.i237 = getelementptr inbounds %Array_FloError_, ptr %192, i64 0, i32 2
  %194 = load i64, ptr %memberidx.i.i237, align 4
  %memberidx1.i2.i238 = getelementptr inbounds %Array_FloError_, ptr %192, i64 0, i32 3
  %195 = load i64, ptr %memberidx1.i2.i238, align 4
  %.not.i.i239 = icmp slt i64 %194, %195
  br i1 %.not.i.i239, label %if.entry71.TypeChecker_error.exit245_crit_edge, label %if.entry.i.i242

if.entry71.TypeChecker_error.exit245_crit_edge:   ; preds = %if.entry71
  %memberidx4.i.i243.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %192, i64 0, i32 1
  %.pre259 = load ptr, ptr %memberidx4.i.i243.phi.trans.insert, align 8
  br label %TypeChecker_error.exit245

if.entry.i.i242:                                  ; preds = %if.entry71
  %196 = shl nuw i64 %195, 1
  store i64 %196, ptr %memberidx1.i2.i238, align 4
  %memberidx2.i.i.i241 = getelementptr inbounds %Array_FloError_, ptr %192, i64 0, i32 1
  %197 = load ptr, ptr %memberidx2.i.i.i241, align 8
  %198 = shl i64 %195, 4
  %199 = call ptr @realloc(ptr %197, i64 %198)
  store ptr %199, ptr %memberidx2.i.i.i241, align 8
  %.pre258 = load i64, ptr %memberidx.i.i237, align 4
  br label %TypeChecker_error.exit245

TypeChecker_error.exit245:                        ; preds = %if.entry71.TypeChecker_error.exit245_crit_edge, %if.entry.i.i242
  %200 = phi ptr [ %.pre259, %if.entry71.TypeChecker_error.exit245_crit_edge ], [ %199, %if.entry.i.i242 ]
  %201 = phi i64 [ %194, %if.entry71.TypeChecker_error.exit245_crit_edge ], [ %.pre258, %if.entry.i.i242 ]
  %202 = add nsw i64 %201, 1
  store i64 %202, ptr %memberidx.i.i237, align 4
  %ptridx.i.i244 = getelementptr inbounds ptr, ptr %200, i64 %201
  store ptr %193, ptr %ptridx.i.i244, align 8
  br label %common.ret

ifend73:                                          ; preds = %ifend62
  br i1 %7, label %if.entry79, label %common.ret

if.entry79:                                       ; preds = %ifend73
  %203 = tail call ptr @malloc(i32 9)
  store i64 6, ptr %203, align 4
  %memberidx.i246 = getelementptr inbounds %IntType, ptr %203, i64 0, i32 1
  store i1 true, ptr %memberidx.i246, align 1
  store ptr %203, ptr %memberidx53, align 8
  br label %common.ret
}

define internal fastcc ptr @dump_type(ptr nocapture readonly %0, i1 %1) unnamed_addr {
  %3 = load i64, ptr %0, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %true_block, %false_block, %ifend61, %if.entry59, %if.entry55, %if.entry51, %if.entry47, %if.entry42, %if.entry37, %if.entry32, %if.entry27, %if.entry22, %if.entry17, %if.entry4, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %13, %if.entry4 ], [ %28, %if.entry17 ], [ %34, %if.entry22 ], [ %40, %if.entry27 ], [ %46, %if.entry32 ], [ %52, %if.entry37 ], [ %58, %if.entry42 ], [ %60, %if.entry47 ], [ %62, %if.entry51 ], [ %64, %if.entry55 ], [ %66, %if.entry59 ], [ %68, %ifend61 ], [ %20, %true_block ], [ %22, %false_block ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %5 = tail call ptr @malloc(i32 4)
  store i32 1819242338, ptr %5, align 8
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %5, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i, align 4
  br label %common.ret

ifend:                                            ; preds = %2
  %7 = add i64 %3, -1
  %8 = icmp ult i64 %7, 7
  br i1 %8, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %ifend
  br i1 %1, label %if.entry4, label %ifend6

ifend3:                                           ; preds = %ifend11, %ifend
  %9 = phi i64 [ %18, %ifend11 ], [ %3, %ifend ]
  switch i64 %9, label %ifend61 [
    i64 8, label %if.entry47
    i64 9, label %if.entry51
    i64 10, label %if.entry55
    i64 16, label %if.entry59
  ]

if.entry4:                                        ; preds = %if.entry1
  %10 = alloca ptr, align 8
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %10, ptr nonnull @73, i64 64)
  %12 = load ptr, ptr %10, align 8
  %13 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i, align 4
  br label %common.ret

ifend6:                                           ; preds = %if.entry1
  %memberidx7 = getelementptr inbounds %IntType, ptr %0, i64 0, i32 1
  %14 = load i1, ptr %memberidx7, align 1
  %15 = icmp eq i64 %3, 6
  br i1 %15, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend6
  br i1 %14, label %true_block, label %false_block

ifend11:                                          ; preds = %ifend6
  %16 = tail call ptr @malloc(i32 1)
  %. = select i1 %14, i8 105, i8 117
  store i8 %., ptr %16, align 8
  %17 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %17, align 8
  %memberidx.i.i87 = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  store ptr %16, ptr %memberidx.i.i87, align 8
  %memberidx1.i.i88 = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i88, align 4
  %memberidx2.i.i89 = getelementptr inbounds %string, ptr %17, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i89, align 4
  %18 = load i64, ptr %0, align 4
  switch i64 %18, label %ifend3 [
    i64 1, label %if.entry17
    i64 2, label %if.entry22
    i64 3, label %if.entry27
    i64 4, label %if.entry32
    i64 5, label %if.entry37
    i64 7, label %if.entry42
  ]

true_block:                                       ; preds = %if.entry9
  %19 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %19, ptr noundef nonnull align 8 dereferenceable(3) @74, i64 3, i1 false)
  %20 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i78 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i78, align 8
  %memberidx1.i.i79 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i79, align 4
  %memberidx2.i.i80 = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i80, align 4
  br label %common.ret

false_block:                                      ; preds = %if.entry9
  %21 = tail call ptr @malloc(i32 4)
  store i32 1953393013, ptr %21, align 8
  %22 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %22, align 8
  %memberidx.i.i81 = getelementptr inbounds %string, ptr %22, i64 0, i32 1
  store ptr %21, ptr %memberidx.i.i81, align 8
  %memberidx1.i.i82 = getelementptr inbounds %string, ptr %22, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i82, align 4
  %memberidx2.i.i83 = getelementptr inbounds %string, ptr %22, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i83, align 4
  br label %common.ret

if.entry17:                                       ; preds = %ifend11
  %23 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %24 = tail call ptr %23(ptr nonnull %17)
  %25 = alloca ptr, align 8
  %26 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %25, ptr nonnull @75, ptr %24)
  %27 = load ptr, ptr %25, align 8
  %28 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %28, align 8
  %memberidx.i90 = getelementptr inbounds %string, ptr %28, i64 0, i32 1
  store ptr %27, ptr %memberidx.i90, align 8
  %memberidx1.i91 = getelementptr inbounds %string, ptr %28, i64 0, i32 2
  store i64 %26, ptr %memberidx1.i91, align 4
  %memberidx2.i92 = getelementptr inbounds %string, ptr %28, i64 0, i32 3
  store i64 %26, ptr %memberidx2.i92, align 4
  tail call void @free(ptr %24)
  br label %common.ret

if.entry22:                                       ; preds = %ifend11
  %29 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %30 = tail call ptr %29(ptr nonnull %17)
  %31 = alloca ptr, align 8
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %31, ptr nonnull @76, ptr %30)
  %33 = load ptr, ptr %31, align 8
  %34 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %34, align 8
  %memberidx.i93 = getelementptr inbounds %string, ptr %34, i64 0, i32 1
  store ptr %33, ptr %memberidx.i93, align 8
  %memberidx1.i94 = getelementptr inbounds %string, ptr %34, i64 0, i32 2
  store i64 %32, ptr %memberidx1.i94, align 4
  %memberidx2.i95 = getelementptr inbounds %string, ptr %34, i64 0, i32 3
  store i64 %32, ptr %memberidx2.i95, align 4
  tail call void @free(ptr %30)
  br label %common.ret

if.entry27:                                       ; preds = %ifend11
  %35 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %36 = tail call ptr %35(ptr nonnull %17)
  %37 = alloca ptr, align 8
  %38 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %37, ptr nonnull @77, ptr %36)
  %39 = load ptr, ptr %37, align 8
  %40 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %40, align 8
  %memberidx.i96 = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  store ptr %39, ptr %memberidx.i96, align 8
  %memberidx1.i97 = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  store i64 %38, ptr %memberidx1.i97, align 4
  %memberidx2.i98 = getelementptr inbounds %string, ptr %40, i64 0, i32 3
  store i64 %38, ptr %memberidx2.i98, align 4
  tail call void @free(ptr %36)
  br label %common.ret

if.entry32:                                       ; preds = %ifend11
  %41 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %42 = tail call ptr %41(ptr nonnull %17)
  %43 = alloca ptr, align 8
  %44 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %43, ptr nonnull @78, ptr %42)
  %45 = load ptr, ptr %43, align 8
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i99 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i99, align 8
  %memberidx1.i100 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 %44, ptr %memberidx1.i100, align 4
  %memberidx2.i101 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 %44, ptr %memberidx2.i101, align 4
  tail call void @free(ptr %42)
  br label %common.ret

if.entry37:                                       ; preds = %ifend11
  %47 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %48 = tail call ptr %47(ptr nonnull %17)
  %49 = alloca ptr, align 8
  %50 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %49, ptr nonnull @79, ptr %48)
  %51 = load ptr, ptr %49, align 8
  %52 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %52, align 8
  %memberidx.i102 = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  store ptr %51, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  store i64 %50, ptr %memberidx1.i103, align 4
  %memberidx2.i104 = getelementptr inbounds %string, ptr %52, i64 0, i32 3
  store i64 %50, ptr %memberidx2.i104, align 4
  tail call void @free(ptr %48)
  br label %common.ret

if.entry42:                                       ; preds = %ifend11
  %53 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %54 = tail call ptr %53(ptr nonnull %17)
  %55 = alloca ptr, align 8
  %56 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %55, ptr nonnull @80, ptr %54)
  %57 = load ptr, ptr %55, align 8
  %58 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %58, align 8
  %memberidx.i105 = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  store ptr %57, ptr %memberidx.i105, align 8
  %memberidx1.i106 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  store i64 %56, ptr %memberidx1.i106, align 4
  %memberidx2.i107 = getelementptr inbounds %string, ptr %58, i64 0, i32 3
  store i64 %56, ptr %memberidx2.i107, align 4
  tail call void @free(ptr %54)
  br label %common.ret

if.entry47:                                       ; preds = %ifend3
  %59 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %59, ptr noundef nonnull align 8 dereferenceable(3) @81, i64 3, i1 false)
  %60 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %60, align 8
  %memberidx.i.i111 = getelementptr inbounds %string, ptr %60, i64 0, i32 1
  store ptr %59, ptr %memberidx.i.i111, align 8
  %memberidx1.i.i112 = getelementptr inbounds %string, ptr %60, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i112, align 4
  %memberidx2.i.i113 = getelementptr inbounds %string, ptr %60, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i113, align 4
  br label %common.ret

if.entry51:                                       ; preds = %ifend3
  %61 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %61, ptr noundef nonnull align 8 dereferenceable(3) @82, i64 3, i1 false)
  %62 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i.i114 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i.i114, align 8
  %memberidx1.i.i115 = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i115, align 4
  %memberidx2.i.i116 = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i116, align 4
  br label %common.ret

if.entry55:                                       ; preds = %ifend3
  %63 = tail call ptr @malloc(i32 4)
  store i32 1684631414, ptr %63, align 8
  %64 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %64, align 8
  %memberidx.i.i117 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  store ptr %63, ptr %memberidx.i.i117, align 8
  %memberidx1.i.i118 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i118, align 4
  %memberidx2.i.i119 = getelementptr inbounds %string, ptr %64, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i119, align 4
  br label %common.ret

if.entry59:                                       ; preds = %ifend3
  %65 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %65, ptr noundef nonnull align 8 dereferenceable(6) @83, i64 6, i1 false)
  %66 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %66, align 8
  %memberidx.i.i108 = getelementptr inbounds %string, ptr %66, i64 0, i32 1
  store ptr %65, ptr %memberidx.i.i108, align 8
  %memberidx1.i.i109 = getelementptr inbounds %string, ptr %66, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i109, align 4
  %memberidx2.i.i110 = getelementptr inbounds %string, ptr %66, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i110, align 4
  br label %common.ret

ifend61:                                          ; preds = %ifend3
  %67 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %67, ptr noundef nonnull align 8 dereferenceable(7) @84, i64 7, i1 false)
  %68 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %68, align 8
  %memberidx.i.i75 = getelementptr inbounds %string, ptr %68, i64 0, i32 1
  store ptr %67, ptr %memberidx.i.i75, align 8
  %memberidx1.i.i76 = getelementptr inbounds %string, ptr %68, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i76, align 4
  %memberidx2.i.i77 = getelementptr inbounds %string, ptr %68, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i77, align 4
  br label %common.ret
}

; Function Attrs: nofree nosync nounwind readonly
define internal fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %1) unnamed_addr #12 {
  %memberidx.i = getelementptr inbounds %Program, ptr %0, i64 0, i32 1
  br label %tailrecurse.outer

tailrecurse.outer:                                ; preds = %if.entry12, %2
  %accumulator.tr.ph = phi i64 [ %11, %if.entry12 ], [ 0, %2 ]
  %.tr125.ph = phi ptr [ %10, %if.entry12 ], [ %1, %2 ]
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.outer, %if.entry86
  %.tr125 = phi ptr [ %72, %if.entry86 ], [ %.tr125.ph, %tailrecurse.outer ]
  %memberidx = getelementptr inbounds %Expression, ptr %.tr125, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  switch i64 %3, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry3
    i64 8, label %if.entry8
    i64 9, label %if.entry72
    i64 7, label %if.entry86
  ]

common.ret137:                                    ; preds = %if.entry81, %if.entry76, %if.entry66, %if.entry60, %if.entry54, %if.entry48, %if.entry42, %if.entry36, %if.entry30, %if.entry24, %if.entry18, %common.ret
  %common.ret137.op = phi i64 [ %accumulator.ret.tr, %common.ret ], [ %accumulator.ret.tr126, %if.entry18 ], [ %accumulator.ret.tr127, %if.entry24 ], [ %accumulator.ret.tr128, %if.entry30 ], [ %accumulator.ret.tr129, %if.entry36 ], [ %accumulator.ret.tr130, %if.entry42 ], [ %accumulator.ret.tr131, %if.entry48 ], [ %accumulator.ret.tr132, %if.entry54 ], [ %accumulator.ret.tr133, %if.entry60 ], [ %accumulator.ret.tr134, %if.entry66 ], [ %accumulator.ret.tr135, %if.entry76 ], [ %accumulator.ret.tr136, %if.entry81 ]
  ret i64 %common.ret137.op

common.ret:                                       ; preds = %if.entry8, %tailrecurse, %if.entry72, %if.entry3, %if.entry
  %common.ret.op = phi i64 [ %4, %if.entry ], [ %6, %if.entry3 ], [ -99999999, %if.entry72 ], [ -99999999, %tailrecurse ], [ -99999999, %if.entry8 ]
  %accumulator.ret.tr = add nsw i64 %common.ret.op, %accumulator.tr.ph
  br label %common.ret137

if.entry:                                         ; preds = %tailrecurse
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %.tr125, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  br label %common.ret

if.entry3:                                        ; preds = %tailrecurse
  %memberidx6 = getelementptr inbounds %FloatExpression, ptr %.tr125, i64 0, i32 4
  %5 = load double, ptr %memberidx6, align 8
  %6 = fptosi double %5 to i64
  br label %common.ret

if.entry8:                                        ; preds = %tailrecurse
  %memberidx11 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 5
  %7 = load i64, ptr %memberidx11, align 4
  switch i64 %7, label %common.ret [
    i64 1, label %if.entry12
    i64 2, label %if.entry18
    i64 3, label %if.entry24
    i64 4, label %if.entry30
    i64 5, label %if.entry36
    i64 13, label %if.entry42
    i64 14, label %if.entry48
    i64 15, label %if.entry54
    i64 16, label %if.entry60
    i64 17, label %if.entry66
  ]

if.entry12:                                       ; preds = %if.entry8
  %memberidx15 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %8 = load ptr, ptr %memberidx15, align 8
  %9 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %8)
  %memberidx16 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %10 = load ptr, ptr %memberidx16, align 8
  %11 = add nsw i64 %9, %accumulator.tr.ph
  br label %tailrecurse.outer

if.entry18:                                       ; preds = %if.entry8
  %memberidx21 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %12 = load ptr, ptr %memberidx21, align 8
  %13 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %12)
  %memberidx22 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %14 = load ptr, ptr %memberidx22, align 8
  %15 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %14)
  %16 = add i64 %13, %accumulator.tr.ph
  %accumulator.ret.tr126 = sub i64 %16, %15
  br label %common.ret137

if.entry24:                                       ; preds = %if.entry8
  %memberidx27 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %17 = load ptr, ptr %memberidx27, align 8
  %18 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %17)
  %memberidx28 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %19 = load ptr, ptr %memberidx28, align 8
  %20 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %19)
  %21 = mul nsw i64 %20, %18
  %accumulator.ret.tr127 = add nsw i64 %21, %accumulator.tr.ph
  br label %common.ret137

if.entry30:                                       ; preds = %if.entry8
  %memberidx33 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %22 = load ptr, ptr %memberidx33, align 8
  %23 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %22)
  %memberidx34 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %24 = load ptr, ptr %memberidx34, align 8
  %25 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %24)
  %26 = sdiv i64 %23, %25
  %accumulator.ret.tr128 = add nsw i64 %26, %accumulator.tr.ph
  br label %common.ret137

if.entry36:                                       ; preds = %if.entry8
  %memberidx39 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %27 = load ptr, ptr %memberidx39, align 8
  %28 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %27)
  %memberidx40 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %29 = load ptr, ptr %memberidx40, align 8
  %30 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %29)
  %31 = srem i64 %28, %30
  %accumulator.ret.tr129 = add nsw i64 %31, %accumulator.tr.ph
  br label %common.ret137

if.entry42:                                       ; preds = %if.entry8
  %memberidx45 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %32 = load ptr, ptr %memberidx45, align 8
  %33 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %32)
  %memberidx46 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %34 = load ptr, ptr %memberidx46, align 8
  %35 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %34)
  %36 = shl i64 %33, %35
  %accumulator.ret.tr130 = add nsw i64 %36, %accumulator.tr.ph
  br label %common.ret137

if.entry48:                                       ; preds = %if.entry8
  %memberidx51 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %37 = load ptr, ptr %memberidx51, align 8
  %38 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %37)
  %memberidx52 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %39 = load ptr, ptr %memberidx52, align 8
  %40 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %39)
  %41 = lshr i64 %38, %40
  %accumulator.ret.tr131 = add nsw i64 %41, %accumulator.tr.ph
  br label %common.ret137

if.entry54:                                       ; preds = %if.entry8
  %memberidx57 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %42 = load ptr, ptr %memberidx57, align 8
  %43 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %42)
  %memberidx58 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %44 = load ptr, ptr %memberidx58, align 8
  %45 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %44)
  %46 = or i64 %45, %43
  %accumulator.ret.tr132 = add nsw i64 %46, %accumulator.tr.ph
  br label %common.ret137

if.entry60:                                       ; preds = %if.entry8
  %memberidx63 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %47 = load ptr, ptr %memberidx63, align 8
  %48 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %47)
  %memberidx64 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %49 = load ptr, ptr %memberidx64, align 8
  %50 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %49)
  %51 = and i64 %50, %48
  %accumulator.ret.tr133 = add nsw i64 %51, %accumulator.tr.ph
  br label %common.ret137

if.entry66:                                       ; preds = %if.entry8
  %memberidx69 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %52 = load ptr, ptr %memberidx69, align 8
  %53 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %52)
  %memberidx70 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %54 = load ptr, ptr %memberidx70, align 8
  %55 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %54)
  %56 = xor i64 %55, %53
  %accumulator.ret.tr134 = add nsw i64 %56, %accumulator.tr.ph
  br label %common.ret137

if.entry72:                                       ; preds = %tailrecurse
  %memberidx75 = getelementptr inbounds %UnaryExpression, ptr %.tr125, i64 0, i32 4
  %57 = load i64, ptr %memberidx75, align 4
  switch i64 %57, label %common.ret [
    i64 6, label %if.entry76
    i64 7, label %if.entry81
  ]

if.entry76:                                       ; preds = %if.entry72
  %memberidx79 = getelementptr inbounds %UnaryExpression, ptr %.tr125, i64 0, i32 5
  %58 = load ptr, ptr %memberidx79, align 8
  %59 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %58)
  %accumulator.ret.tr135 = sub i64 %accumulator.tr.ph, %59
  br label %common.ret137

if.entry81:                                       ; preds = %if.entry72
  %memberidx84 = getelementptr inbounds %UnaryExpression, ptr %.tr125, i64 0, i32 5
  %60 = load ptr, ptr %memberidx84, align 8
  %61 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %60)
  %62 = xor i64 %61, -1
  %accumulator.ret.tr136 = add nsw i64 %accumulator.tr.ph, %62
  br label %common.ret137

if.entry86:                                       ; preds = %tailrecurse
  %memberidx89 = getelementptr inbounds %VarAccessExpression, ptr %.tr125, i64 0, i32 4
  %63 = load ptr, ptr %memberidx89, align 8
  %64 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %63, i64 0, i32 1
  %65 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %67, i64 0, i32 3
  %68 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %63, i64 0, i32 2
  %69 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Const_, ptr %68, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %70, i64 %69
  %71 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx90 = getelementptr inbounds %Const, ptr %71, i64 0, i32 2
  %72 = load ptr, ptr %memberidx90, align 8
  br label %tailrecurse
}

define internal fastcc i1 @is_operator_overload_name(ptr readonly %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %2, ptr noundef nonnull align 8 dereferenceable(6) @100, i64 6, i1 false)
  %3 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %3, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 1
  store ptr %2, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %4, 6
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %1
  %memberidx2.i = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx2.i, align 8
  %6 = tail call i64 @memcmp(ptr %5, ptr nonnull %2, i64 6)
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend.i449, %ifend87, %ifend.i438, %ifend.i427, %ifend.i416, %ifend.i405, %ifend.i394, %ifend.i383, %ifend.i372, %ifend.i361, %ifend.i350, %ifend.i339, %ifend.i328, %ifend.i317, %ifend.i306, %ifend.i295, %ifend.i284, %ifend.i273, %ifend.i262, %ifend.i251, %ifend.i240, %ifend.i229, %ifend.i218, %ifend.i207, %ifend.i196, %ifend.i185, %ifend.i174, %ifend.i163, %ifend.i152, %ifend.i141, %ifend.i130, %ifend.i
  %common.ret.op = phi i1 [ true, %ifend.i ], [ true, %ifend.i130 ], [ true, %ifend.i141 ], [ true, %ifend.i152 ], [ true, %ifend.i163 ], [ true, %ifend.i174 ], [ true, %ifend.i185 ], [ true, %ifend.i196 ], [ true, %ifend.i207 ], [ true, %ifend.i218 ], [ true, %ifend.i229 ], [ true, %ifend.i240 ], [ true, %ifend.i251 ], [ true, %ifend.i262 ], [ true, %ifend.i273 ], [ true, %ifend.i284 ], [ true, %ifend.i295 ], [ true, %ifend.i306 ], [ true, %ifend.i317 ], [ true, %ifend.i328 ], [ true, %ifend.i339 ], [ true, %ifend.i350 ], [ true, %ifend.i361 ], [ true, %ifend.i372 ], [ true, %ifend.i383 ], [ true, %ifend.i394 ], [ true, %ifend.i405 ], [ true, %ifend.i416 ], [ true, %ifend.i427 ], [ true, %ifend.i438 ], [ %187, %ifend.i449 ], [ false, %ifend87 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %1, %ifend.i
  %8 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %8, ptr noundef nonnull align 8 dereferenceable(7) @101, i64 7, i1 false)
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i121 = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i121, align 8
  %memberidx1.i.i122 = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i122, align 4
  %memberidx2.i.i123 = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i123, align 4
  %10 = load i64, ptr %memberidx.i, align 4
  %.not.i126 = icmp eq i64 %10, 7
  br i1 %.not.i126, label %ifend.i130, label %ifend3

ifend.i130:                                       ; preds = %ifend
  %memberidx2.i128 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %memberidx2.i128, align 8
  %12 = tail call i64 @memcmp(ptr %11, ptr nonnull %8, i64 7)
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %common.ret, label %ifend3

ifend3:                                           ; preds = %ifend, %ifend.i130
  %14 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %14, ptr noundef nonnull align 8 dereferenceable(7) @102, i64 7, i1 false)
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i132 = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i132, align 8
  %memberidx1.i.i133 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i133, align 4
  %memberidx2.i.i134 = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i134, align 4
  %16 = load i64, ptr %memberidx.i, align 4
  %.not.i137 = icmp eq i64 %16, 7
  br i1 %.not.i137, label %ifend.i141, label %ifend6

ifend.i141:                                       ; preds = %ifend3
  %memberidx2.i139 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i139, align 8
  %18 = tail call i64 @memcmp(ptr %17, ptr nonnull %14, i64 7)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %common.ret, label %ifend6

ifend6:                                           ; preds = %ifend3, %ifend.i141
  %20 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %20, ptr noundef nonnull align 8 dereferenceable(7) @103, i64 7, i1 false)
  %21 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %21, align 8
  %memberidx.i.i143 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  store ptr %20, ptr %memberidx.i.i143, align 8
  %memberidx1.i.i144 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i144, align 4
  %memberidx2.i.i145 = getelementptr inbounds %string, ptr %21, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i145, align 4
  %22 = load i64, ptr %memberidx.i, align 4
  %.not.i148 = icmp eq i64 %22, 7
  br i1 %.not.i148, label %ifend.i152, label %ifend9

ifend.i152:                                       ; preds = %ifend6
  %memberidx2.i150 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i150, align 8
  %24 = tail call i64 @memcmp(ptr %23, ptr nonnull %20, i64 7)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend6, %ifend.i152
  %26 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %26, ptr noundef nonnull align 8 dereferenceable(7) @104, i64 7, i1 false)
  %27 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i154 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i154, align 8
  %memberidx1.i.i155 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i155, align 4
  %memberidx2.i.i156 = getelementptr inbounds %string, ptr %27, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i156, align 4
  %28 = load i64, ptr %memberidx.i, align 4
  %.not.i159 = icmp eq i64 %28, 7
  br i1 %.not.i159, label %ifend.i163, label %ifend12

ifend.i163:                                       ; preds = %ifend9
  %memberidx2.i161 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i161, align 8
  %30 = tail call i64 @memcmp(ptr %29, ptr nonnull %26, i64 7)
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %common.ret, label %ifend12

ifend12:                                          ; preds = %ifend9, %ifend.i163
  %32 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %32, ptr noundef nonnull align 8 dereferenceable(6) @105, i64 6, i1 false)
  %33 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i.i165 = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i.i165, align 8
  %memberidx1.i.i166 = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i166, align 4
  %memberidx2.i.i167 = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i167, align 4
  %34 = load i64, ptr %memberidx.i, align 4
  %.not.i170 = icmp eq i64 %34, 6
  br i1 %.not.i170, label %ifend.i174, label %ifend15

ifend.i174:                                       ; preds = %ifend12
  %memberidx2.i172 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %35 = load ptr, ptr %memberidx2.i172, align 8
  %36 = tail call i64 @memcmp(ptr %35, ptr nonnull %32, i64 6)
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %common.ret, label %ifend15

ifend15:                                          ; preds = %ifend12, %ifend.i174
  %38 = tail call ptr @malloc(i32 8)
  store i64 6872318640199393119, ptr %38, align 8
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i176 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i176, align 8
  %memberidx1.i.i177 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i177, align 4
  %memberidx2.i.i178 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i178, align 4
  %40 = load i64, ptr %memberidx.i, align 4
  %.not.i181 = icmp eq i64 %40, 8
  br i1 %.not.i181, label %ifend.i185, label %ifend18

ifend.i185:                                       ; preds = %ifend15
  %memberidx2.i183 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %41 = load ptr, ptr %memberidx2.i183, align 8
  %42 = tail call i64 @memcmp(ptr %41, ptr nonnull %38, i64 8)
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %common.ret, label %ifend18

ifend18:                                          ; preds = %ifend15, %ifend.i185
  %44 = tail call ptr @malloc(i32 8)
  store i64 6872318631895850847, ptr %44, align 8
  %45 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i.i187 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i.i187, align 8
  %memberidx1.i.i188 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i188, align 4
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i189, align 4
  %46 = load i64, ptr %memberidx.i, align 4
  %.not.i192 = icmp eq i64 %46, 8
  br i1 %.not.i192, label %ifend.i196, label %ifend21

ifend.i196:                                       ; preds = %ifend18
  %memberidx2.i194 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %memberidx2.i194, align 8
  %48 = tail call i64 @memcmp(ptr %47, ptr nonnull %44, i64 8)
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %common.ret, label %ifend21

ifend21:                                          ; preds = %ifend18, %ifend.i196
  %50 = tail call ptr @malloc(i32 8)
  store i64 6872318674845130591, ptr %50, align 8
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i.i198 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i.i198, align 8
  %memberidx1.i.i199 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i199, align 4
  %memberidx2.i.i200 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i200, align 4
  %52 = load i64, ptr %memberidx.i, align 4
  %.not.i203 = icmp eq i64 %52, 8
  br i1 %.not.i203, label %ifend.i207, label %ifend24

ifend.i207:                                       ; preds = %ifend21
  %memberidx2.i205 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %53 = load ptr, ptr %memberidx2.i205, align 8
  %54 = tail call i64 @memcmp(ptr %53, ptr nonnull %50, i64 8)
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend21, %ifend.i207
  %56 = tail call ptr @malloc(i32 8)
  store i64 6872318717592887135, ptr %56, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i209 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i209, align 8
  %memberidx1.i.i210 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i210, align 4
  %memberidx2.i.i211 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i211, align 4
  %58 = load i64, ptr %memberidx.i, align 4
  %.not.i214 = icmp eq i64 %58, 8
  br i1 %.not.i214, label %ifend.i218, label %ifend27

ifend.i218:                                       ; preds = %ifend24
  %memberidx2.i216 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %59 = load ptr, ptr %memberidx2.i216, align 8
  %60 = tail call i64 @memcmp(ptr %59, ptr nonnull %56, i64 8)
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend24, %ifend.i218
  %62 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %62, ptr noundef nonnull align 8 dereferenceable(7) @106, i64 7, i1 false)
  %63 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %63, align 8
  %memberidx.i.i220 = getelementptr inbounds %string, ptr %63, i64 0, i32 1
  store ptr %62, ptr %memberidx.i.i220, align 8
  %memberidx1.i.i221 = getelementptr inbounds %string, ptr %63, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i221, align 4
  %memberidx2.i.i222 = getelementptr inbounds %string, ptr %63, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i222, align 4
  %64 = load i64, ptr %memberidx.i, align 4
  %.not.i225 = icmp eq i64 %64, 7
  br i1 %.not.i225, label %ifend.i229, label %ifend30

ifend.i229:                                       ; preds = %ifend27
  %memberidx2.i227 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i227, align 8
  %66 = tail call i64 @memcmp(ptr %65, ptr nonnull %62, i64 7)
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %common.ret, label %ifend30

ifend30:                                          ; preds = %ifend27, %ifend.i229
  %68 = tail call ptr @malloc(i32 8)
  store i64 6872318640367165279, ptr %68, align 8
  %69 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %69, align 8
  %memberidx.i.i231 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  store ptr %68, ptr %memberidx.i.i231, align 8
  %memberidx1.i.i232 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i232, align 4
  %memberidx2.i.i233 = getelementptr inbounds %string, ptr %69, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i233, align 4
  %70 = load i64, ptr %memberidx.i, align 4
  %.not.i236 = icmp eq i64 %70, 8
  br i1 %.not.i236, label %ifend.i240, label %ifend33

ifend.i240:                                       ; preds = %ifend30
  %memberidx2.i238 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %71 = load ptr, ptr %memberidx2.i238, align 8
  %72 = tail call i64 @memcmp(ptr %71, ptr nonnull %68, i64 8)
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %common.ret, label %ifend33

ifend33:                                          ; preds = %ifend30, %ifend.i240
  %74 = tail call ptr @malloc(i32 8)
  store i64 6872318700514991967, ptr %74, align 8
  %75 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %75, align 8
  %memberidx.i.i242 = getelementptr inbounds %string, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i.i242, align 8
  %memberidx1.i.i243 = getelementptr inbounds %string, ptr %75, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i243, align 4
  %memberidx2.i.i244 = getelementptr inbounds %string, ptr %75, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i244, align 4
  %76 = load i64, ptr %memberidx.i, align 4
  %.not.i247 = icmp eq i64 %76, 8
  br i1 %.not.i247, label %ifend.i251, label %ifend36

ifend.i251:                                       ; preds = %ifend33
  %memberidx2.i249 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %77 = load ptr, ptr %memberidx2.i249, align 8
  %78 = tail call i64 @memcmp(ptr %77, ptr nonnull %74, i64 8)
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %common.ret, label %ifend36

ifend36:                                          ; preds = %ifend33, %ifend.i251
  %80 = tail call ptr @malloc(i32 11)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %80, ptr noundef nonnull align 8 dereferenceable(11) @107, i64 11, i1 false)
  %81 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %81, align 8
  %memberidx.i.i253 = getelementptr inbounds %string, ptr %81, i64 0, i32 1
  store ptr %80, ptr %memberidx.i.i253, align 8
  %memberidx1.i.i254 = getelementptr inbounds %string, ptr %81, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i254, align 4
  %memberidx2.i.i255 = getelementptr inbounds %string, ptr %81, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i255, align 4
  %82 = load i64, ptr %memberidx.i, align 4
  %.not.i258 = icmp eq i64 %82, 11
  br i1 %.not.i258, label %ifend.i262, label %ifend39

ifend.i262:                                       ; preds = %ifend36
  %memberidx2.i260 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i260, align 8
  %84 = tail call i64 @memcmp(ptr %83, ptr nonnull %80, i64 11)
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %common.ret, label %ifend39

ifend39:                                          ; preds = %ifend36, %ifend.i262
  %86 = tail call ptr @malloc(i32 11)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %86, ptr noundef nonnull align 8 dereferenceable(11) @108, i64 11, i1 false)
  %87 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %87, align 8
  %memberidx.i.i264 = getelementptr inbounds %string, ptr %87, i64 0, i32 1
  store ptr %86, ptr %memberidx.i.i264, align 8
  %memberidx1.i.i265 = getelementptr inbounds %string, ptr %87, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i265, align 4
  %memberidx2.i.i266 = getelementptr inbounds %string, ptr %87, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i266, align 4
  %88 = load i64, ptr %memberidx.i, align 4
  %.not.i269 = icmp eq i64 %88, 11
  br i1 %.not.i269, label %ifend.i273, label %ifend42

ifend.i273:                                       ; preds = %ifend39
  %memberidx2.i271 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %89 = load ptr, ptr %memberidx2.i271, align 8
  %90 = tail call i64 @memcmp(ptr %89, ptr nonnull %86, i64 11)
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %common.ret, label %ifend42

ifend42:                                          ; preds = %ifend39, %ifend.i273
  %92 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %92, ptr noundef nonnull align 8 dereferenceable(6) @109, i64 6, i1 false)
  %93 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %93, align 8
  %memberidx.i.i275 = getelementptr inbounds %string, ptr %93, i64 0, i32 1
  store ptr %92, ptr %memberidx.i.i275, align 8
  %memberidx1.i.i276 = getelementptr inbounds %string, ptr %93, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i276, align 4
  %memberidx2.i.i277 = getelementptr inbounds %string, ptr %93, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i277, align 4
  %94 = load i64, ptr %memberidx.i, align 4
  %.not.i280 = icmp eq i64 %94, 6
  br i1 %.not.i280, label %ifend.i284, label %ifend45

ifend.i284:                                       ; preds = %ifend42
  %memberidx2.i282 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i282, align 8
  %96 = tail call i64 @memcmp(ptr %95, ptr nonnull %92, i64 6)
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %common.ret, label %ifend45

ifend45:                                          ; preds = %ifend42, %ifend.i284
  %98 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %98, ptr noundef nonnull align 8 dereferenceable(6) @110, i64 6, i1 false)
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i.i286 = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i.i286, align 8
  %memberidx1.i.i287 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i287, align 4
  %memberidx2.i.i288 = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i288, align 4
  %100 = load i64, ptr %memberidx.i, align 4
  %.not.i291 = icmp eq i64 %100, 6
  br i1 %.not.i291, label %ifend.i295, label %ifend48

ifend.i295:                                       ; preds = %ifend45
  %memberidx2.i293 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %101 = load ptr, ptr %memberidx2.i293, align 8
  %102 = tail call i64 @memcmp(ptr %101, ptr nonnull %98, i64 6)
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %common.ret, label %ifend48

ifend48:                                          ; preds = %ifend45, %ifend.i295
  %104 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %104, ptr noundef nonnull align 8 dereferenceable(7) @111, i64 7, i1 false)
  %105 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %105, align 8
  %memberidx.i.i297 = getelementptr inbounds %string, ptr %105, i64 0, i32 1
  store ptr %104, ptr %memberidx.i.i297, align 8
  %memberidx1.i.i298 = getelementptr inbounds %string, ptr %105, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i298, align 4
  %memberidx2.i.i299 = getelementptr inbounds %string, ptr %105, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i299, align 4
  %106 = load i64, ptr %memberidx.i, align 4
  %.not.i302 = icmp eq i64 %106, 7
  br i1 %.not.i302, label %ifend.i306, label %ifend51

ifend.i306:                                       ; preds = %ifend48
  %memberidx2.i304 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %107 = load ptr, ptr %memberidx2.i304, align 8
  %108 = tail call i64 @memcmp(ptr %107, ptr nonnull %104, i64 7)
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %common.ret, label %ifend51

ifend51:                                          ; preds = %ifend48, %ifend.i306
  %110 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %110, ptr noundef nonnull align 8 dereferenceable(7) @112, i64 7, i1 false)
  %111 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %111, align 8
  %memberidx.i.i308 = getelementptr inbounds %string, ptr %111, i64 0, i32 1
  store ptr %110, ptr %memberidx.i.i308, align 8
  %memberidx1.i.i309 = getelementptr inbounds %string, ptr %111, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i309, align 4
  %memberidx2.i.i310 = getelementptr inbounds %string, ptr %111, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i310, align 4
  %112 = load i64, ptr %memberidx.i, align 4
  %.not.i313 = icmp eq i64 %112, 7
  br i1 %.not.i313, label %ifend.i317, label %ifend54

ifend.i317:                                       ; preds = %ifend51
  %memberidx2.i315 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %113 = load ptr, ptr %memberidx2.i315, align 8
  %114 = tail call i64 @memcmp(ptr %113, ptr nonnull %110, i64 7)
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %common.ret, label %ifend54

ifend54:                                          ; preds = %ifend51, %ifend.i317
  %116 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %116, ptr noundef nonnull align 8 dereferenceable(6) @113, i64 6, i1 false)
  %117 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %117, align 8
  %memberidx.i.i319 = getelementptr inbounds %string, ptr %117, i64 0, i32 1
  store ptr %116, ptr %memberidx.i.i319, align 8
  %memberidx1.i.i320 = getelementptr inbounds %string, ptr %117, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i320, align 4
  %memberidx2.i.i321 = getelementptr inbounds %string, ptr %117, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i321, align 4
  %118 = load i64, ptr %memberidx.i, align 4
  %.not.i324 = icmp eq i64 %118, 6
  br i1 %.not.i324, label %ifend.i328, label %ifend57

ifend.i328:                                       ; preds = %ifend54
  %memberidx2.i326 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i326, align 8
  %120 = tail call i64 @memcmp(ptr %119, ptr nonnull %116, i64 6)
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %common.ret, label %ifend57

ifend57:                                          ; preds = %ifend54, %ifend.i328
  %122 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %122, ptr noundef nonnull align 8 dereferenceable(6) @114, i64 6, i1 false)
  %123 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %123, align 8
  %memberidx.i.i330 = getelementptr inbounds %string, ptr %123, i64 0, i32 1
  store ptr %122, ptr %memberidx.i.i330, align 8
  %memberidx1.i.i331 = getelementptr inbounds %string, ptr %123, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i331, align 4
  %memberidx2.i.i332 = getelementptr inbounds %string, ptr %123, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i332, align 4
  %124 = load i64, ptr %memberidx.i, align 4
  %.not.i335 = icmp eq i64 %124, 6
  br i1 %.not.i335, label %ifend.i339, label %ifend60

ifend.i339:                                       ; preds = %ifend57
  %memberidx2.i337 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %125 = load ptr, ptr %memberidx2.i337, align 8
  %126 = tail call i64 @memcmp(ptr %125, ptr nonnull %122, i64 6)
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %common.ret, label %ifend60

ifend60:                                          ; preds = %ifend57, %ifend.i339
  %128 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %128, ptr noundef nonnull align 8 dereferenceable(6) @115, i64 6, i1 false)
  %129 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %129, align 8
  %memberidx.i.i341 = getelementptr inbounds %string, ptr %129, i64 0, i32 1
  store ptr %128, ptr %memberidx.i.i341, align 8
  %memberidx1.i.i342 = getelementptr inbounds %string, ptr %129, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i342, align 4
  %memberidx2.i.i343 = getelementptr inbounds %string, ptr %129, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i343, align 4
  %130 = load i64, ptr %memberidx.i, align 4
  %.not.i346 = icmp eq i64 %130, 6
  br i1 %.not.i346, label %ifend.i350, label %ifend63

ifend.i350:                                       ; preds = %ifend60
  %memberidx2.i348 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %131 = load ptr, ptr %memberidx2.i348, align 8
  %132 = tail call i64 @memcmp(ptr %131, ptr nonnull %128, i64 6)
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %common.ret, label %ifend63

ifend63:                                          ; preds = %ifend60, %ifend.i350
  %134 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %134, ptr noundef nonnull align 8 dereferenceable(6) @116, i64 6, i1 false)
  %135 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %135, align 8
  %memberidx.i.i352 = getelementptr inbounds %string, ptr %135, i64 0, i32 1
  store ptr %134, ptr %memberidx.i.i352, align 8
  %memberidx1.i.i353 = getelementptr inbounds %string, ptr %135, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i353, align 4
  %memberidx2.i.i354 = getelementptr inbounds %string, ptr %135, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i354, align 4
  %136 = load i64, ptr %memberidx.i, align 4
  %.not.i357 = icmp eq i64 %136, 6
  br i1 %.not.i357, label %ifend.i361, label %ifend66

ifend.i361:                                       ; preds = %ifend63
  %memberidx2.i359 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %137 = load ptr, ptr %memberidx2.i359, align 8
  %138 = tail call i64 @memcmp(ptr %137, ptr nonnull %134, i64 6)
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %common.ret, label %ifend66

ifend66:                                          ; preds = %ifend63, %ifend.i361
  %140 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %140, ptr noundef nonnull align 8 dereferenceable(6) @117, i64 6, i1 false)
  %141 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %141, align 8
  %memberidx.i.i363 = getelementptr inbounds %string, ptr %141, i64 0, i32 1
  store ptr %140, ptr %memberidx.i.i363, align 8
  %memberidx1.i.i364 = getelementptr inbounds %string, ptr %141, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i364, align 4
  %memberidx2.i.i365 = getelementptr inbounds %string, ptr %141, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i365, align 4
  %142 = load i64, ptr %memberidx.i, align 4
  %.not.i368 = icmp eq i64 %142, 6
  br i1 %.not.i368, label %ifend.i372, label %ifend69

ifend.i372:                                       ; preds = %ifend66
  %memberidx2.i370 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %143 = load ptr, ptr %memberidx2.i370, align 8
  %144 = tail call i64 @memcmp(ptr %143, ptr nonnull %140, i64 6)
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %common.ret, label %ifend69

ifend69:                                          ; preds = %ifend66, %ifend.i372
  %146 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %146, ptr noundef nonnull align 8 dereferenceable(6) @118, i64 6, i1 false)
  %147 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %147, align 8
  %memberidx.i.i374 = getelementptr inbounds %string, ptr %147, i64 0, i32 1
  store ptr %146, ptr %memberidx.i.i374, align 8
  %memberidx1.i.i375 = getelementptr inbounds %string, ptr %147, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i375, align 4
  %memberidx2.i.i376 = getelementptr inbounds %string, ptr %147, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i376, align 4
  %148 = load i64, ptr %memberidx.i, align 4
  %.not.i379 = icmp eq i64 %148, 6
  br i1 %.not.i379, label %ifend.i383, label %ifend72

ifend.i383:                                       ; preds = %ifend69
  %memberidx2.i381 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %149 = load ptr, ptr %memberidx2.i381, align 8
  %150 = tail call i64 @memcmp(ptr %149, ptr nonnull %146, i64 6)
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %common.ret, label %ifend72

ifend72:                                          ; preds = %ifend69, %ifend.i383
  %152 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %152, ptr noundef nonnull align 8 dereferenceable(7) @119, i64 7, i1 false)
  %153 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %153, align 8
  %memberidx.i.i385 = getelementptr inbounds %string, ptr %153, i64 0, i32 1
  store ptr %152, ptr %memberidx.i.i385, align 8
  %memberidx1.i.i386 = getelementptr inbounds %string, ptr %153, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i386, align 4
  %memberidx2.i.i387 = getelementptr inbounds %string, ptr %153, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i387, align 4
  %154 = load i64, ptr %memberidx.i, align 4
  %.not.i390 = icmp eq i64 %154, 7
  br i1 %.not.i390, label %ifend.i394, label %ifend75

ifend.i394:                                       ; preds = %ifend72
  %memberidx2.i392 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %155 = load ptr, ptr %memberidx2.i392, align 8
  %156 = tail call i64 @memcmp(ptr %155, ptr nonnull %152, i64 7)
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %common.ret, label %ifend75

ifend75:                                          ; preds = %ifend72, %ifend.i394
  %158 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %158, ptr noundef nonnull align 8 dereferenceable(7) @120, i64 7, i1 false)
  %159 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %159, align 8
  %memberidx.i.i396 = getelementptr inbounds %string, ptr %159, i64 0, i32 1
  store ptr %158, ptr %memberidx.i.i396, align 8
  %memberidx1.i.i397 = getelementptr inbounds %string, ptr %159, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i397, align 4
  %memberidx2.i.i398 = getelementptr inbounds %string, ptr %159, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i398, align 4
  %160 = load i64, ptr %memberidx.i, align 4
  %.not.i401 = icmp eq i64 %160, 7
  br i1 %.not.i401, label %ifend.i405, label %ifend78

ifend.i405:                                       ; preds = %ifend75
  %memberidx2.i403 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %161 = load ptr, ptr %memberidx2.i403, align 8
  %162 = tail call i64 @memcmp(ptr %161, ptr nonnull %158, i64 7)
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %common.ret, label %ifend78

ifend78:                                          ; preds = %ifend75, %ifend.i405
  %164 = tail call ptr @malloc(i32 8)
  store i64 6872318721989304159, ptr %164, align 8
  %165 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %165, align 8
  %memberidx.i.i407 = getelementptr inbounds %string, ptr %165, i64 0, i32 1
  store ptr %164, ptr %memberidx.i.i407, align 8
  %memberidx1.i.i408 = getelementptr inbounds %string, ptr %165, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i408, align 4
  %memberidx2.i.i409 = getelementptr inbounds %string, ptr %165, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i409, align 4
  %166 = load i64, ptr %memberidx.i, align 4
  %.not.i412 = icmp eq i64 %166, 8
  br i1 %.not.i412, label %ifend.i416, label %ifend81

ifend.i416:                                       ; preds = %ifend78
  %memberidx2.i414 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %167 = load ptr, ptr %memberidx2.i414, align 8
  %168 = tail call i64 @memcmp(ptr %167, ptr nonnull %164, i64 8)
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %common.ret, label %ifend81

ifend81:                                          ; preds = %ifend78, %ifend.i416
  %170 = tail call ptr @malloc(i32 8)
  store i64 6872318640384728927, ptr %170, align 8
  %171 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %171, align 8
  %memberidx.i.i418 = getelementptr inbounds %string, ptr %171, i64 0, i32 1
  store ptr %170, ptr %memberidx.i.i418, align 8
  %memberidx1.i.i419 = getelementptr inbounds %string, ptr %171, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i419, align 4
  %memberidx2.i.i420 = getelementptr inbounds %string, ptr %171, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i420, align 4
  %172 = load i64, ptr %memberidx.i, align 4
  %.not.i423 = icmp eq i64 %172, 8
  br i1 %.not.i423, label %ifend.i427, label %ifend84

ifend.i427:                                       ; preds = %ifend81
  %memberidx2.i425 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %173 = load ptr, ptr %memberidx2.i425, align 8
  %174 = tail call i64 @memcmp(ptr %173, ptr nonnull %170, i64 8)
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %common.ret, label %ifend84

ifend84:                                          ; preds = %ifend81, %ifend.i427
  %176 = tail call ptr @malloc(i32 8)
  store i64 6872337336460992351, ptr %176, align 8
  %177 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %177, align 8
  %memberidx.i.i429 = getelementptr inbounds %string, ptr %177, i64 0, i32 1
  store ptr %176, ptr %memberidx.i.i429, align 8
  %memberidx1.i.i430 = getelementptr inbounds %string, ptr %177, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i430, align 4
  %memberidx2.i.i431 = getelementptr inbounds %string, ptr %177, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i431, align 4
  %178 = load i64, ptr %memberidx.i, align 4
  %.not.i434 = icmp eq i64 %178, 8
  br i1 %.not.i434, label %ifend.i438, label %ifend87

ifend.i438:                                       ; preds = %ifend84
  %memberidx2.i436 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %179 = load ptr, ptr %memberidx2.i436, align 8
  %180 = tail call i64 @memcmp(ptr %179, ptr nonnull %176, i64 8)
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %common.ret, label %ifend87

ifend87:                                          ; preds = %ifend84, %ifend.i438
  %182 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %182, ptr noundef nonnull align 8 dereferenceable(7) @121, i64 7, i1 false)
  %183 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %183, align 8
  %memberidx.i.i440 = getelementptr inbounds %string, ptr %183, i64 0, i32 1
  store ptr %182, ptr %memberidx.i.i440, align 8
  %memberidx1.i.i441 = getelementptr inbounds %string, ptr %183, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i441, align 4
  %memberidx2.i.i442 = getelementptr inbounds %string, ptr %183, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i442, align 4
  %184 = load i64, ptr %memberidx.i, align 4
  %.not.i445 = icmp eq i64 %184, 7
  br i1 %.not.i445, label %ifend.i449, label %common.ret

ifend.i449:                                       ; preds = %ifend87
  %memberidx2.i447 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %185 = load ptr, ptr %memberidx2.i447, align 8
  %186 = tail call i64 @memcmp(ptr %185, ptr nonnull %182, i64 7)
  %187 = icmp eq i64 %186, 0
  br label %common.ret
}

define internal fastcc noalias ptr @bin_op_to_op_overload_name(i64 %0) unnamed_addr {
  switch i64 %0, label %common.ret [
    i64 1, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 4, label %if.entry7
    i64 5, label %if.entry10
    i64 6, label %if.entry13
    i64 20, label %if.entry16
    i64 21, label %if.entry19
    i64 22, label %if.entry22
    i64 23, label %if.entry25
    i64 24, label %if.entry28
    i64 25, label %if.entry31
    i64 7, label %if.entry34
    i64 8, label %if.entry37
    i64 9, label %if.entry40
    i64 10, label %if.entry43
    i64 11, label %if.entry46
    i64 12, label %if.entry49
    i64 13, label %if.entry52
    i64 14, label %if.entry55
    i64 29, label %if.entry58
    i64 30, label %if.entry61
    i64 15, label %if.entry64
    i64 16, label %if.entry67
    i64 17, label %if.entry70
    i64 26, label %if.entry73
    i64 28, label %if.entry76
    i64 18, label %if.entry79
  ]

common.ret.sink.split:                            ; preds = %if.entry, %if.entry1, %if.entry4, %if.entry7, %if.entry10, %if.entry13, %if.entry16, %if.entry19, %if.entry22, %if.entry25, %if.entry28, %if.entry31, %if.entry34, %if.entry37, %if.entry40, %if.entry43, %if.entry46, %if.entry49, %if.entry52, %if.entry55, %if.entry58, %if.entry61, %if.entry64, %if.entry67, %if.entry70, %if.entry73, %if.entry76, %if.entry79
  %.sink193 = phi ptr [ %30, %if.entry79 ], [ %29, %if.entry76 ], [ %28, %if.entry73 ], [ %27, %if.entry70 ], [ %26, %if.entry67 ], [ %25, %if.entry64 ], [ %24, %if.entry61 ], [ %23, %if.entry58 ], [ %22, %if.entry55 ], [ %21, %if.entry52 ], [ %20, %if.entry49 ], [ %19, %if.entry46 ], [ %18, %if.entry43 ], [ %17, %if.entry40 ], [ %16, %if.entry37 ], [ %15, %if.entry34 ], [ %14, %if.entry31 ], [ %13, %if.entry28 ], [ %12, %if.entry25 ], [ %11, %if.entry22 ], [ %10, %if.entry19 ], [ %9, %if.entry16 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink191 = phi i64 [ 6, %if.entry79 ], [ 8, %if.entry76 ], [ 8, %if.entry73 ], [ 7, %if.entry70 ], [ 7, %if.entry67 ], [ 6, %if.entry64 ], [ 7, %if.entry61 ], [ 7, %if.entry58 ], [ 6, %if.entry55 ], [ 6, %if.entry52 ], [ 6, %if.entry49 ], [ 6, %if.entry46 ], [ 6, %if.entry43 ], [ 6, %if.entry40 ], [ 6, %if.entry37 ], [ 6, %if.entry34 ], [ 8, %if.entry31 ], [ 8, %if.entry28 ], [ 8, %if.entry25 ], [ 8, %if.entry22 ], [ 8, %if.entry19 ], [ 8, %if.entry16 ], [ 7, %if.entry13 ], [ 7, %if.entry10 ], [ 7, %if.entry7 ], [ 7, %if.entry4 ], [ 7, %if.entry1 ], [ 7, %if.entry ]
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i187 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink193, ptr %memberidx.i.i187, align 8
  %memberidx1.i.i188 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink191, ptr %memberidx1.i.i188, align 4
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink191, ptr %memberidx2.i.i189, align 4
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %1
  %common.ret.op = phi ptr [ null, %1 ], [ %2, %common.ret.sink.split ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %3 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @101, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry1:                                        ; preds = %1
  %4 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %4, ptr noundef nonnull align 8 dereferenceable(7) @102, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry4:                                        ; preds = %1
  %5 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %5, ptr noundef nonnull align 8 dereferenceable(7) @103, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry7:                                        ; preds = %1
  %6 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %6, ptr noundef nonnull align 8 dereferenceable(7) @104, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry10:                                       ; preds = %1
  %7 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %7, ptr noundef nonnull align 8 dereferenceable(7) @120, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry13:                                       ; preds = %1
  %8 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %8, ptr noundef nonnull align 8 dereferenceable(7) @119, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry16:                                       ; preds = %1
  %9 = tail call ptr @malloc(i32 8)
  store i64 6872318640199393119, ptr %9, align 8
  br label %common.ret.sink.split

if.entry19:                                       ; preds = %1
  %10 = tail call ptr @malloc(i32 8)
  store i64 6872318631895850847, ptr %10, align 8
  br label %common.ret.sink.split

if.entry22:                                       ; preds = %1
  %11 = tail call ptr @malloc(i32 8)
  store i64 6872318674845130591, ptr %11, align 8
  br label %common.ret.sink.split

if.entry25:                                       ; preds = %1
  %12 = tail call ptr @malloc(i32 8)
  store i64 6872318717592887135, ptr %12, align 8
  br label %common.ret.sink.split

if.entry28:                                       ; preds = %1
  %13 = tail call ptr @malloc(i32 8)
  store i64 6872318640384728927, ptr %13, align 8
  br label %common.ret.sink.split

if.entry31:                                       ; preds = %1
  %14 = tail call ptr @malloc(i32 8)
  store i64 6872318721989304159, ptr %14, align 8
  br label %common.ret.sink.split

if.entry34:                                       ; preds = %1
  %15 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %15, ptr noundef nonnull align 8 dereferenceable(6) @160, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry37:                                       ; preds = %1
  %16 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %16, ptr noundef nonnull align 8 dereferenceable(6) @118, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry40:                                       ; preds = %1
  %17 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %17, ptr noundef nonnull align 8 dereferenceable(6) @114, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry43:                                       ; preds = %1
  %18 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %18, ptr noundef nonnull align 8 dereferenceable(6) @117, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry46:                                       ; preds = %1
  %19 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %19, ptr noundef nonnull align 8 dereferenceable(6) @100, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry49:                                       ; preds = %1
  %20 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %20, ptr noundef nonnull align 8 dereferenceable(6) @116, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry52:                                       ; preds = %1
  %21 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %21, ptr noundef nonnull align 8 dereferenceable(6) @109, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry55:                                       ; preds = %1
  %22 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %22, ptr noundef nonnull align 8 dereferenceable(6) @110, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry58:                                       ; preds = %1
  %23 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %23, ptr noundef nonnull align 8 dereferenceable(7) @111, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry61:                                       ; preds = %1
  %24 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %24, ptr noundef nonnull align 8 dereferenceable(7) @112, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry64:                                       ; preds = %1
  %25 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %25, ptr noundef nonnull align 8 dereferenceable(6) @105, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry67:                                       ; preds = %1
  %26 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %26, ptr noundef nonnull align 8 dereferenceable(7) @161, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry70:                                       ; preds = %1
  %27 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %27, ptr noundef nonnull align 8 dereferenceable(7) @162, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry73:                                       ; preds = %1
  %28 = tail call ptr @malloc(i32 8)
  store i64 6872318640367165279, ptr %28, align 8
  br label %common.ret.sink.split

if.entry76:                                       ; preds = %1
  %29 = tail call ptr @malloc(i32 8)
  store i64 6872318700514991967, ptr %29, align 8
  br label %common.ret.sink.split

if.entry79:                                       ; preds = %1
  %30 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %30, ptr noundef nonnull align 8 dereferenceable(6) @113, i64 6, i1 false)
  br label %common.ret.sink.split
}

define internal fastcc noalias ptr @dump_bin_op(i64 %0) unnamed_addr {
  switch i64 %0, label %ifend54 [
    i64 1, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 4, label %if.entry7
    i64 5, label %if.entry10
    i64 6, label %if.entry13
    i64 7, label %if.entry16
    i64 8, label %if.entry19
    i64 9, label %if.entry22
    i64 10, label %if.entry25
    i64 11, label %if.entry28
    i64 12, label %if.entry31
    i64 13, label %if.entry34
    i64 14, label %if.entry37
    i64 15, label %if.entry40
    i64 16, label %if.entry43
    i64 17, label %if.entry46
    i64 18, label %if.entry49
    i64 19, label %if.entry52
  ]

common.ret:                                       ; preds = %ifend54, %if.entry52, %if.entry49, %if.entry46, %if.entry43, %if.entry40, %if.entry37, %if.entry34, %if.entry31, %if.entry28, %if.entry25, %if.entry22, %if.entry19, %if.entry16, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink133 = phi ptr [ %22, %ifend54 ], [ %21, %if.entry52 ], [ %20, %if.entry49 ], [ %19, %if.entry46 ], [ %18, %if.entry43 ], [ %17, %if.entry40 ], [ %16, %if.entry37 ], [ %15, %if.entry34 ], [ %14, %if.entry31 ], [ %13, %if.entry28 ], [ %12, %if.entry25 ], [ %11, %if.entry22 ], [ %10, %if.entry19 ], [ %9, %if.entry16 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink131 = phi i64 [ 2, %ifend54 ], [ 1, %if.entry52 ], [ 2, %if.entry49 ], [ 1, %if.entry46 ], [ 3, %if.entry43 ], [ 2, %if.entry40 ], [ 2, %if.entry37 ], [ 2, %if.entry34 ], [ 2, %if.entry31 ], [ 2, %if.entry28 ], [ 2, %if.entry25 ], [ 1, %if.entry22 ], [ 2, %if.entry19 ], [ 1, %if.entry16 ], [ 1, %if.entry13 ], [ 2, %if.entry10 ], [ 1, %if.entry7 ], [ 1, %if.entry4 ], [ 1, %if.entry1 ], [ 1, %if.entry ]
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i127 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink133, ptr %memberidx.i.i127, align 8
  %memberidx1.i.i128 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink131, ptr %memberidx1.i.i128, align 4
  %memberidx2.i.i129 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink131, ptr %memberidx2.i.i129, align 4
  ret ptr %2

if.entry:                                         ; preds = %1
  %3 = tail call ptr @malloc(i32 1)
  store i8 43, ptr %3, align 8
  br label %common.ret

if.entry1:                                        ; preds = %1
  %4 = tail call ptr @malloc(i32 1)
  store i8 45, ptr %4, align 8
  br label %common.ret

if.entry4:                                        ; preds = %1
  %5 = tail call ptr @malloc(i32 1)
  store i8 42, ptr %5, align 8
  br label %common.ret

if.entry7:                                        ; preds = %1
  %6 = tail call ptr @malloc(i32 1)
  store i8 47, ptr %6, align 8
  br label %common.ret

if.entry10:                                       ; preds = %1
  %7 = tail call ptr @malloc(i32 2)
  store i16 10794, ptr %7, align 8
  br label %common.ret

if.entry13:                                       ; preds = %1
  %8 = tail call ptr @malloc(i32 1)
  store i8 94, ptr %8, align 8
  br label %common.ret

if.entry16:                                       ; preds = %1
  %9 = tail call ptr @malloc(i32 1)
  store i8 62, ptr %9, align 8
  br label %common.ret

if.entry19:                                       ; preds = %1
  %10 = tail call ptr @malloc(i32 2)
  store i16 15678, ptr %10, align 8
  br label %common.ret

if.entry22:                                       ; preds = %1
  %11 = tail call ptr @malloc(i32 1)
  store i8 60, ptr %11, align 8
  br label %common.ret

if.entry25:                                       ; preds = %1
  %12 = tail call ptr @malloc(i32 2)
  store i16 15676, ptr %12, align 8
  br label %common.ret

if.entry28:                                       ; preds = %1
  %13 = tail call ptr @malloc(i32 2)
  store i16 15677, ptr %13, align 8
  br label %common.ret

if.entry31:                                       ; preds = %1
  %14 = tail call ptr @malloc(i32 2)
  store i16 15649, ptr %14, align 8
  br label %common.ret

if.entry34:                                       ; preds = %1
  %15 = tail call ptr @malloc(i32 2)
  store i16 15420, ptr %15, align 8
  br label %common.ret

if.entry37:                                       ; preds = %1
  %16 = tail call ptr @malloc(i32 2)
  store i16 15934, ptr %16, align 8
  br label %common.ret

if.entry40:                                       ; preds = %1
  %17 = tail call ptr @malloc(i32 2)
  store i16 29295, ptr %17, align 8
  br label %common.ret

if.entry43:                                       ; preds = %1
  %18 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %18, ptr noundef nonnull align 8 dereferenceable(3) @30, i64 3, i1 false)
  br label %common.ret

if.entry46:                                       ; preds = %1
  %19 = tail call ptr @malloc(i32 1)
  store i8 94, ptr %19, align 8
  br label %common.ret

if.entry49:                                       ; preds = %1
  %20 = tail call ptr @malloc(i32 2)
  store i16 28265, ptr %20, align 8
  br label %common.ret

if.entry52:                                       ; preds = %1
  %21 = tail call ptr @malloc(i32 1)
  store i8 61, ptr %21, align 8
  br label %common.ret

ifend54:                                          ; preds = %1
  %22 = tail call ptr @malloc(i32 2)
  store i16 11822, ptr %22, align 8
  br label %common.ret
}

define internal fastcc void @check_cast_lower_bits(ptr nocapture %0, ptr nocapture %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %3, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = load i64, ptr %4, align 4
  %8 = load i64, ptr %6, align 4
  %.not = icmp eq i64 %7, %8
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %2
  %9 = and i64 %7, -2
  %10 = icmp eq i64 %9, 8
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, 7
  %13 = and i1 %10, %12
  br i1 %13, label %if.entry5, label %else6

ifend:                                            ; preds = %if.entry10, %ifend17, %if.entry5, %2
  ret void

if.entry5:                                        ; preds = %if.entry
  %14 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %14, align 4
  %memberidx.i.i.i57 = getelementptr inbounds %Expression, ptr %14, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i57, align 4
  %memberidx1.i.i.i58 = getelementptr inbounds %Expression, ptr %14, i64 0, i32 1
  %memberidx.i.i59 = getelementptr inbounds %TypeCastExpression, ptr %14, i64 0, i32 4
  store ptr %5, ptr %memberidx.i.i59, align 8
  %memberidx1.i.i60 = getelementptr inbounds %Expression, ptr %14, i64 0, i32 3
  store ptr %4, ptr %memberidx1.i.i60, align 8
  %memberidx3.i.i62 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 1
  %15 = load i1, ptr %memberidx3.i.i62, align 1
  store i1 %15, ptr %memberidx1.i.i.i58, align 1
  store ptr %14, ptr %1, align 8
  br label %ifend

else6:                                            ; preds = %if.entry
  %16 = add i64 %7, -1
  %17 = icmp ult i64 %16, 7
  %18 = and i64 %8, -2
  %19 = icmp eq i64 %18, 8
  %20 = and i1 %17, %19
  br i1 %20, label %if.entry10, label %else11

if.entry10:                                       ; preds = %else6
  %21 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %21, align 4
  %memberidx.i.i.i63 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i63, align 4
  %memberidx1.i.i.i64 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 1
  %memberidx.i.i65 = getelementptr inbounds %TypeCastExpression, ptr %21, i64 0, i32 4
  store ptr %3, ptr %memberidx.i.i65, align 8
  %memberidx1.i.i66 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 3
  store ptr %6, ptr %memberidx1.i.i66, align 8
  %memberidx3.i.i68 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 1
  %22 = load i1, ptr %memberidx3.i.i68, align 1
  store i1 %22, ptr %memberidx1.i.i.i64, align 1
  store ptr %21, ptr %0, align 8
  br label %ifend

else11:                                           ; preds = %else6
  %23 = icmp sgt i64 %7, %8
  %ternary.i = select i1 %23, ptr %4, ptr %6
  %24 = load i64, ptr %ternary.i, align 4
  %25 = add i64 %24, -1
  %26 = icmp ult i64 %25, 7
  %27 = and i1 %12, %26
  br i1 %27, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %else11
  %memberidx18 = getelementptr inbounds %IntType, ptr %ternary.i, i64 0, i32 1
  %28 = load i1, ptr %memberidx18, align 1
  %memberidx19 = getelementptr inbounds %IntType, ptr %6, i64 0, i32 1
  %29 = load i1, ptr %memberidx19, align 1
  %30 = xor i1 %28, %29
  br i1 %30, label %if.entry20, label %ifend17

ifend17:                                          ; preds = %if.entry20, %if.entry15, %else11
  %31 = phi ptr [ %.pre, %if.entry20 ], [ %3, %if.entry15 ], [ %3, %else11 ]
  %32 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %32, align 4
  %memberidx.i.i.i51 = getelementptr inbounds %Expression, ptr %32, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i51, align 4
  %memberidx1.i.i.i52 = getelementptr inbounds %Expression, ptr %32, i64 0, i32 1
  %memberidx.i.i53 = getelementptr inbounds %TypeCastExpression, ptr %32, i64 0, i32 4
  store ptr %31, ptr %memberidx.i.i53, align 8
  %memberidx1.i.i54 = getelementptr inbounds %Expression, ptr %32, i64 0, i32 3
  store ptr %ternary.i, ptr %memberidx1.i.i54, align 8
  %memberidx3.i.i56 = getelementptr inbounds %Expression, ptr %31, i64 0, i32 1
  %33 = load i1, ptr %memberidx3.i.i56, align 1
  store i1 %33, ptr %memberidx1.i.i.i52, align 1
  store ptr %32, ptr %0, align 8
  %34 = load ptr, ptr %1, align 8
  %35 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %35, align 4
  %memberidx.i.i.i = getelementptr inbounds %Expression, ptr %35, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %35, i64 0, i32 1
  %memberidx.i.i = getelementptr inbounds %TypeCastExpression, ptr %35, i64 0, i32 4
  store ptr %34, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %35, i64 0, i32 3
  store ptr %ternary.i, ptr %memberidx1.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %Expression, ptr %34, i64 0, i32 1
  %36 = load i1, ptr %memberidx3.i.i, align 1
  store i1 %36, ptr %memberidx1.i.i.i, align 1
  store ptr %35, ptr %1, align 8
  br label %ifend

if.entry20:                                       ; preds = %if.entry15
  store i1 true, ptr %memberidx19, align 1
  store i1 true, ptr %memberidx18, align 1
  %.pre = load ptr, ptr %0, align 8
  br label %ifend17
}

define internal fastcc noalias ptr @dump_unary_op(i64 %0) unnamed_addr {
  switch i64 %0, label %ifend15 [
    i64 2, label %if.entry
    i64 3, label %if.entry1
    i64 4, label %if.entry4
    i64 5, label %if.entry7
    i64 6, label %if.entry10
    i64 7, label %if.entry13
  ]

common.ret:                                       ; preds = %ifend15, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink42 = phi ptr [ %9, %ifend15 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink40 = phi i64 [ 1, %ifend15 ], [ 1, %if.entry13 ], [ 1, %if.entry10 ], [ 8, %if.entry7 ], [ 8, %if.entry4 ], [ 7, %if.entry1 ], [ 7, %if.entry ]
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i36 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink42, ptr %memberidx.i.i36, align 8
  %memberidx1.i.i37 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink40, ptr %memberidx1.i.i37, align 4
  %memberidx2.i.i38 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink40, ptr %memberidx2.i.i38, align 4
  ret ptr %2

if.entry:                                         ; preds = %1
  %3 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @169, i64 7, i1 false)
  br label %common.ret

if.entry1:                                        ; preds = %1
  %4 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %4, ptr noundef nonnull align 8 dereferenceable(7) @170, i64 7, i1 false)
  br label %common.ret

if.entry4:                                        ; preds = %1
  %5 = tail call ptr @malloc(i32 8)
  store i64 3110625547759087656, ptr %5, align 8
  br label %common.ret

if.entry7:                                        ; preds = %1
  %6 = tail call ptr @malloc(i32 8)
  store i64 3255303685788364840, ptr %6, align 8
  br label %common.ret

if.entry10:                                       ; preds = %1
  %7 = tail call ptr @malloc(i32 1)
  store i8 45, ptr %7, align 8
  br label %common.ret

if.entry13:                                       ; preds = %1
  %8 = tail call ptr @malloc(i32 1)
  store i8 33, ptr %8, align 8
  br label %common.ret

ifend15:                                          ; preds = %1
  %9 = tail call ptr @malloc(i32 1)
  store i8 38, ptr %9, align 8
  br label %common.ret
}

define internal fastcc void @GeneratedModule_print_errors(ptr nocapture readonly %0) unnamed_addr {
  %2 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %3)
  %5 = trunc i64 %4 to i32
  %6 = tail call ptr @malloc(i32 %5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %3, i64 %4, i1 false)
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i.i5 = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i.i5, align 8
  %memberidx1.i.i6 = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %4, ptr %memberidx1.i.i6, align 4
  %memberidx2.i.i7 = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %4, ptr %memberidx2.i.i7, align 4
  %8 = load ptr, ptr %memberidx, align 8
  tail call void @LLVMDisposeMessage(ptr %8)
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %10 = tail call ptr %9(ptr nonnull %7)
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %11, ptr nonnull @220, ptr %10)
  %13 = load ptr, ptr %11, align 8
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i, align 4
  tail call void @free(ptr %10)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %15 = load ptr, ptr %14, align 8
  %memberidx.i4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i64 0, i32 5
  %16 = load ptr, ptr %memberidx.i4, align 8
  %17 = call ptr %16(ptr nonnull %14)
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @219, ptr %17)
  %19 = load ptr, ptr %2, align 8
  %20 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i.i, align 4
  call void @free(ptr %17)
  %21 = load ptr, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i64 0, i32 3
  %22 = load ptr, ptr %memberidx.i.i.i, align 8
  %23 = call ptr %22(ptr nonnull %20)
  %24 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %23, i64 %24)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  ret void
}

define internal void @GeneratedModule_write_bc(ptr nocapture readonly %0, ptr %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = tail call i64 @LLVMWriteBitcodeToFile(ptr %3, ptr %6)
  ret void
}

define internal i64 @GeneratedModule_exec(ptr %0) {
  tail call void @LLVMLinkInMCJIT()
  %engine = alloca ptr, align 8
  store ptr null, ptr %engine, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %3 = call i1 @LLVMCreateExecutionEngineForModule(ptr nonnull %engine, ptr %2, ptr nonnull %memberidx1)
  br i1 %3, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMGetNamedFunction(ptr %4, ptr nonnull @221)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry4, label %ifend6

common.ret:                                       ; preds = %if.entry12, %ifend6, %if.entry4
  %common.ret.op = phi i64 [ 1, %if.entry4 ], [ %13, %ifend6 ], [ %13, %if.entry12 ]
  %.sink = load ptr, ptr %engine, align 8
  call void @LLVMDisposeExecutionEngine(ptr %.sink)
  ret i64 %common.ret.op

if.entry4:                                        ; preds = %ifend
  %7 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %7, ptr noundef nonnull align 8 dereferenceable(48) @222, i64 48, i1 false)
  %8 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 48, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 48, ptr %memberidx2.i.i, align 4
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %10 = call ptr %9(ptr nonnull %8)
  %11 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %10, i64 %11)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %12 = load ptr, ptr %engine, align 8
  %13 = call i64 @LLVMRunFunctionAsMain(ptr %12, ptr nonnull %5, i64 0, ptr null, ptr null)
  %14 = load ptr, ptr %engine, align 8
  %15 = load ptr, ptr %memberidx, align 8
  %16 = call i1 @LLVMRemoveModule(ptr %14, ptr %15, ptr nonnull %memberidx, ptr nonnull %memberidx1)
  br i1 %16, label %if.entry12, label %common.ret

if.entry12:                                       ; preds = %ifend6
  call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %common.ret
}

define internal void @GeneratedModule_set_target_machine(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 0)
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %4, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  store ptr %3, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %5 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %5, 0
  br i1 %.not.i, label %ifend.i, label %false_block

ifend.i:                                          ; preds = %2
  %memberidx2.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2.i, align 8
  %7 = tail call i64 @memcmp(ptr %6, ptr %3, i64 0)
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %true_block, label %false_block

true_block:                                       ; preds = %ifend.i
  %9 = tail call ptr @LLVMGetDefaultTargetTriple()
  br label %end

false_block:                                      ; preds = %2, %ifend.i
  %10 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 5
  %11 = load ptr, ptr %memberidx, align 8
  %12 = tail call ptr %11(ptr nonnull %1)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %9, %true_block ], [ %12, %false_block ]
  %target = alloca ptr, align 8
  store ptr null, ptr %target, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %13 = call i1 @LLVMGetTargetFromTriple(ptr %ternary, ptr nonnull %target, ptr nonnull %memberidx1)
  br i1 %13, label %if.entry, label %ifend

if.entry:                                         ; preds = %end
  call fastcc void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %end, %if.entry
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %target, align 8
  %15 = call ptr @LLVMGetHostCPUFeatures()
  %16 = call ptr @LLVMCreateTargetMachine(ptr %14, ptr %ternary, ptr nonnull @223, ptr %15, i64 3, i64 0, i64 0)
  store ptr %16, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %17 = load ptr, ptr %memberidx4, align 8
  %18 = call ptr @LLVMCreateTargetDataLayout(ptr %16)
  call void @LLVMSetDataLayout(ptr %17, ptr %18)
  %19 = load ptr, ptr %memberidx4, align 8
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = call ptr @LLVMGetTargetMachineTriple(ptr %20)
  call void @LLVMSetTarget(ptr %19, ptr %21)
  ret void
}

define internal void @GeneratedModule_write_ir(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %7 = tail call i1 @LLVMPrintModuleToFile(ptr %3, ptr %6, ptr nonnull %memberidx2)
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  tail call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret void
}

define internal void @GeneratedModule_run_passes(ptr nocapture readonly %0, i64 %1) {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %while.end
  ret void

ifend:                                            ; preds = %2
  %4 = tail call ptr @LLVMCreatePassManager()
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = tail call ptr @LLVMCreateFunctionPassManagerForModule(ptr %5)
  %7 = tail call ptr @LLVMPassManagerBuilderCreate()
  tail call void @LLVMAddInternalizePass(ptr %4, i64 1)
  tail call void @LLVMAddGlobalDCEPass(ptr %4)
  tail call void @LLVMAddGlobalOptimizerPass(ptr %4)
  tail call void @LLVMAddInstructionCombiningPass(ptr %4)
  tail call void @LLVMAddScalarReplAggregatesPass(ptr %4)
  tail call void @LLVMAddFunctionInliningPass(ptr %4)
  tail call void @LLVMPassManagerBuilderSetOptLevel(ptr %7, i64 %1)
  tail call void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr %7, i64 255)
  tail call void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr %7, ptr %6)
  %8 = load ptr, ptr %memberidx, align 8
  %9 = tail call ptr @LLVMGetFirstFunction(ptr %8)
  %.not = icmp eq ptr %9, null
  br i1 %.not, label %while.end, label %while.entry

while.entry:                                      ; preds = %ifend, %while.entry
  %10 = phi ptr [ %12, %while.entry ], [ %9, %ifend ]
  %11 = tail call i1 @LLVMRunFunctionPassManager(ptr %6, ptr nonnull %10)
  %12 = tail call ptr @LLVMGetNextFunction(ptr nonnull %10)
  %.not6 = icmp eq ptr %12, null
  br i1 %.not6, label %while.end, label %while.entry

while.end:                                        ; preds = %while.entry, %ifend
  tail call void @LLVMPassManagerBuilderPopulateModulePassManager(ptr %7, ptr %4)
  %13 = load ptr, ptr %memberidx, align 8
  %14 = tail call i1 @LLVMRunPassManager(ptr %4, ptr %13)
  tail call void @LLVMDisposePassManager(ptr %6)
  tail call void @LLVMPassManagerBuilderDispose(ptr %7)
  tail call void @LLVMDisposePassManager(ptr %4)
  br label %common.ret
}

define internal void @GeneratedModule_write_asm(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i64 0, i32 5
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = tail call ptr %6(ptr nonnull %1)
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %8 = tail call i1 @LLVMTargetMachineEmitToFile(ptr %3, ptr %4, ptr %7, i64 0, ptr nonnull %memberidx3)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  tail call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret void
}

define internal void @GeneratedModule_write_obj(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i64 0, i32 5
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = tail call ptr %6(ptr nonnull %1)
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %8 = tail call i1 @LLVMTargetMachineEmitToFile(ptr %3, ptr %4, ptr %7, i64 1, ptr nonnull %memberidx3)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  tail call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret void
}

declare i1 @LLVMVerifyModule(ptr, i64, ptr) local_unnamed_addr

declare void @LLVM_InitializeAllTargetInfos() local_unnamed_addr

declare void @LLVM_InitializeAllTargets() local_unnamed_addr

declare void @LLVM_InitializeAllTargetMCs() local_unnamed_addr

declare void @LLVM_InitializeAllAsmParsers() local_unnamed_addr

declare void @LLVM_InitializeAllAsmPrinters() local_unnamed_addr

declare void @LLVMDisposeMessage(ptr) local_unnamed_addr

declare void @exit(i64) local_unnamed_addr

declare ptr @LLVMCreatePassManager() local_unnamed_addr

declare ptr @LLVMCreateFunctionPassManagerForModule(ptr) local_unnamed_addr

declare ptr @LLVMPassManagerBuilderCreate() local_unnamed_addr

declare void @LLVMAddInternalizePass(ptr, i64) local_unnamed_addr

declare void @LLVMAddGlobalDCEPass(ptr) local_unnamed_addr

declare void @LLVMAddGlobalOptimizerPass(ptr) local_unnamed_addr

declare void @LLVMAddInstructionCombiningPass(ptr) local_unnamed_addr

declare void @LLVMAddScalarReplAggregatesPass(ptr) local_unnamed_addr

declare void @LLVMAddFunctionInliningPass(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderSetOptLevel(ptr, i64) local_unnamed_addr

declare void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr, i64) local_unnamed_addr

declare void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetFirstFunction(ptr) local_unnamed_addr

declare i1 @LLVMRunFunctionPassManager(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetNextFunction(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderPopulateModulePassManager(ptr, ptr) local_unnamed_addr

declare i1 @LLVMRunPassManager(ptr, ptr) local_unnamed_addr

declare void @LLVMDisposePassManager(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderDispose(ptr) local_unnamed_addr

declare void @LLVMLinkInMCJIT() local_unnamed_addr

declare i1 @LLVMCreateExecutionEngineForModule(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetNamedFunction(ptr, ptr) local_unnamed_addr

declare void @LLVMDisposeExecutionEngine(ptr) local_unnamed_addr

declare i64 @LLVMRunFunctionAsMain(ptr, ptr, i64, ptr, ptr) local_unnamed_addr

declare i1 @LLVMRemoveModule(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetDefaultTargetTriple() local_unnamed_addr

declare i1 @LLVMGetTargetFromTriple(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMCreateTargetMachine(ptr, ptr, ptr, ptr, i64, i64, i64) local_unnamed_addr

declare ptr @LLVMGetHostCPUFeatures() local_unnamed_addr

declare void @LLVMSetDataLayout(ptr, ptr) local_unnamed_addr

declare ptr @LLVMCreateTargetDataLayout(ptr) local_unnamed_addr

declare void @LLVMSetTarget(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetTargetMachineTriple(ptr) local_unnamed_addr

declare i1 @LLVMTargetMachineEmitToFile(ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare i1 @LLVMPrintModuleToFile(ptr, ptr, ptr) local_unnamed_addr

declare i64 @LLVMWriteBitcodeToFile(ptr, ptr) local_unnamed_addr

define internal fastcc ptr @CodeGen_store_expr_to_mem(ptr nocapture %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %memberidx = getelementptr inbounds %Expression, ptr %3, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp ne i64 %5, 6
  %memberidx1 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 1
  %7 = load i1, ptr %memberidx1, align 1
  %8 = or i1 %7, %6
  br i1 %8, label %else, label %if.entry

if.entry:                                         ; preds = %4
  %memberidx2 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 3
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load i64, ptr %9, align 4
  %.not = icmp eq i64 %10, 19
  br i1 %.not, label %ifend6, label %if.entry4

else:                                             ; preds = %4
  %11 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %3)
  br label %ifend

common.ret:                                       ; preds = %if.entry4, %ifend
  %common.ret.op = phi ptr [ %value.0, %ifend ], [ %18, %if.entry4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else, %ifend6
  %value.0 = phi ptr [ %19, %ifend6 ], [ %11, %else ]
  %12 = tail call ptr @LLVMBuildStore(ptr %1, ptr %value.0, ptr %2)
  br label %common.ret

if.entry4:                                        ; preds = %if.entry
  %13 = tail call ptr @LLVMIntType(i64 64)
  %14 = tail call ptr @LLVMConstInt(ptr %13, i64 0, i1 false)
  %args = alloca [2 x ptr], align 8
  store ptr %14, ptr %args, align 8
  %15 = getelementptr inbounds ptr, ptr %args, i64 1
  store ptr %14, ptr %15, align 8
  %16 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %9, i1 true)
  %17 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %16, ptr %2, ptr nonnull %args, i64 2, ptr nonnull @28)
  %18 = call fastcc ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %17, ptr nonnull %3)
  br label %common.ret

ifend6:                                           ; preds = %if.entry
  %19 = tail call fastcc ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr nonnull %9, ptr nonnull %3)
  br label %ifend
}

define internal fastcc ptr @CodeGen_codegen_array_exp(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 19
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.end, %if.entry
  %common.ret.op = phi ptr [ %8, %if.entry ], [ %38, %for.end ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %8 = tail call fastcc ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr nonnull %5, ptr nonnull %2)
  br label %common.ret

ifend:                                            ; preds = %3
  %memberidx3 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 1
  %9 = load i1, ptr %memberidx3, align 1
  br i1 %9, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend
  %10 = tail call ptr @malloc(i32 54)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %10, ptr noundef nonnull align 8 dereferenceable(54) @236, i64 54, i1 false)
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %12 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %13 = tail call ptr %12(ptr nonnull %11)
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @219, ptr %13)
  %15 = load ptr, ptr %4, align 8
  %16 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i.i25 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i.i25, align 8
  %memberidx1.i.i26 = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 %14, ptr %memberidx1.i.i26, align 4
  %memberidx2.i.i27 = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 %14, ptr %memberidx2.i.i27, align 4
  call void @free(ptr %13)
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i64 0, i32 3
  %18 = load ptr, ptr %memberidx.i.i.i, align 8
  %19 = call ptr %18(ptr nonnull %16)
  %20 = load i64, ptr %memberidx1.i.i26, align 4
  call void @write(i64 1, ptr %19, i64 %20)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %.pre = load ptr, ptr %memberidx, align 8
  br label %ifend6

ifend6:                                           ; preds = %ifend, %if.entry4
  %21 = phi ptr [ %5, %ifend ], [ %.pre, %if.entry4 ]
  %memberidx8 = getelementptr inbounds %ArrayType, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %22, i1 true)
  %memberidx9 = getelementptr inbounds %ArrayExpression, ptr %2, i64 0, i32 4
  %24 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 2
  %25 = load i64, ptr %memberidx10, align 4
  %26 = alloca ptr, i64 %25, align 8
  %27 = call ptr @malloc(i32 25)
  %memberidx.i28 = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i28, align 8
  %29 = load i64, ptr %memberidx10, align 4
  store i1 false, ptr %27, align 1
  %memberidx1.i.i29 = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 1
  %memberidx2.i.i30 = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 3
  store ptr %28, ptr %memberidx2.i.i30, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 2
  store i64 %29, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i29, align 4
  %30 = icmp slt i64 %29, 1
  br i1 %30, label %for.end, label %for.body

for.body:                                         ; preds = %ifend6, %for.body
  %31 = phi i64 [ %35, %for.body ], [ 1, %ifend6 ]
  %storemerge38.in = phi ptr [ %ptridx.i34, %for.body ], [ %28, %ifend6 ]
  %32 = phi i64 [ %33, %for.body ], [ 0, %ifend6 ]
  %storemerge38 = load ptr, ptr %storemerge38.in, align 8
  %33 = add nuw nsw i64 %32, 1
  %ptridx = getelementptr inbounds ptr, ptr %26, i64 %32
  %34 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %storemerge38)
  store ptr %34, ptr %ptridx, align 8
  %35 = add nuw nsw i64 %31, 1
  store i64 %35, ptr %memberidx1.i.i29, align 4
  %ptridx.i34 = getelementptr inbounds ptr, ptr %28, i64 %31
  %.not = icmp slt i64 %31, %29
  br i1 %.not, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %ifend6
  tail call void @free(ptr nonnull %27)
  %36 = load ptr, ptr %memberidx9, align 8
  %memberidx14 = getelementptr inbounds %Array_Expression_, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx14, align 4
  %38 = call ptr @LLVMConstArray(ptr %23, ptr nonnull %26, i64 %37)
  br label %common.ret
}

define internal fastcc void @CodeGen_codegen_var_declaration(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 2
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Var_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx2 = getelementptr inbounds %Var, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %14, align 8
  %17 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %memberidx4 = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 1
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i64 0, i32 5
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = tail call ptr %20(ptr nonnull %18)
  %memberidx6 = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 3
  %22 = load i1, ptr %memberidx6, align 1
  br i1 %22, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %23 = load ptr, ptr %0, align 8
  %24 = tail call ptr @LLVMAddGlobal(ptr %23, ptr %17, ptr %21)
  %.not32 = icmp eq ptr %15, null
  br i1 %.not32, label %ifend, label %if.entry8

else:                                             ; preds = %3
  %25 = tail call ptr @LLVMBuildAlloca(ptr %1, ptr %17, ptr %21)
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry11

ifend:                                            ; preds = %if.entry11, %else, %if.entry8, %if.entry
  %ptr.0 = phi ptr [ %24, %if.entry8 ], [ %24, %if.entry ], [ %25, %if.entry11 ], [ %25, %else ]
  %memberidx.i33 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %26 = load ptr, ptr %memberidx.i33, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %27 = load i64, ptr %memberidx1.i, align 4
  %28 = load i64, ptr %5, align 4
  %29 = load i64, ptr %memberidx3.i, align 4
  %30 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @224, i64 %27, i64 %28, i64 %29)
  %31 = load ptr, ptr %4, align 8
  %32 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %32, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %32, i64 0, i32 1
  store ptr %31, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %32, i64 0, i32 2
  store i64 %30, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %32, i64 0, i32 3
  store i64 %30, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %26, ptr nonnull %32, ptr %ptr.0)
  ret void

if.entry8:                                        ; preds = %if.entry
  %33 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr nonnull %15)
  tail call void @LLVMSetInitializer(ptr %24, ptr %33)
  br label %ifend

if.entry11:                                       ; preds = %else
  %34 = tail call fastcc ptr @CodeGen_store_expr_to_mem(ptr nonnull %0, ptr %1, ptr %25, ptr nonnull %15)
  br label %ifend
}

define internal fastcc void @CodeGen_codegen_const_declaration(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Const_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx2 = getelementptr inbounds %Const, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %memberidx4 = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 1
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i64 0, i32 5
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = tail call ptr %20(ptr nonnull %18)
  %memberidx6 = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 3
  %22 = load i1, ptr %memberidx6, align 1
  br i1 %22, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %23 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr nonnull %15)
  %24 = load ptr, ptr %0, align 8
  %25 = tail call ptr @LLVMAddGlobal(ptr %24, ptr %17, ptr %21)
  tail call void @LLVMSetInitializer(ptr %25, ptr %23)
  tail call void @LLVMSetGlobalConstant(ptr %25, i1 true)
  br label %ifend

else:                                             ; preds = %3
  %26 = tail call ptr @LLVMBuildAlloca(ptr %1, ptr %17, ptr %21)
  %27 = tail call fastcc ptr @CodeGen_store_expr_to_mem(ptr nonnull %0, ptr %1, ptr %26, ptr nonnull %15)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %ptr.0 = phi ptr [ %25, %if.entry ], [ %26, %else ]
  %memberidx.i25 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %28 = load ptr, ptr %memberidx.i25, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %29 = load i64, ptr %memberidx1.i, align 4
  %30 = load i64, ptr %5, align 4
  %31 = load i64, ptr %memberidx3.i, align 4
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @224, i64 %29, i64 %30, i64 %31)
  %33 = load ptr, ptr %4, align 8
  %34 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %34, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %34, i64 0, i32 1
  store ptr %33, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %34, i64 0, i32 2
  store i64 %32, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %34, i64 0, i32 3
  store i64 %32, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %28, ptr nonnull %34, ptr %ptr.0)
  ret void
}

define internal fastcc void @CodeGen_codegen_if_stmt(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = tail call ptr @LLVMAppendBasicBlock(ptr %6, ptr nonnull @257)
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = tail call ptr @LLVMAppendBasicBlock(ptr %8, ptr nonnull @33)
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = tail call ptr @LLVMAppendBasicBlock(ptr %10, ptr nonnull @258)
  %12 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %5, ptr %7, ptr %9)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %7)
  %memberidx4 = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 2
  %13 = load ptr, ptr %memberidx4, align 8
  %memberidx.i46 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %14 = load i1, ptr %memberidx.i46, align 1
  store i1 false, ptr %memberidx.i46, align 1
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 25)
  %memberidx.i.i47 = getelementptr inbounds %Array_Statement_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i47, align 8
  %memberidx1.i.i48 = getelementptr inbounds %Array_Statement_, ptr %15, i64 0, i32 2
  %18 = load i64, ptr %memberidx1.i.i48, align 4
  %19 = icmp slt i64 %18, 1
  br i1 %19, label %CodeGen_codegen_block.exit63, label %for.body.i62

for.body.i62:                                     ; preds = %3, %for.body.i62
  %20 = phi i64 [ %21, %for.body.i62 ], [ 1, %3 ]
  %statement.0.i5668.in = phi ptr [ %ptridx.i14.i60, %for.body.i62 ], [ %17, %3 ]
  %statement.0.i5668 = load ptr, ptr %statement.0.i5668.in, align 8
  tail call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i5668)
  %21 = add nuw nsw i64 %20, 1
  %ptridx.i14.i60 = getelementptr inbounds ptr, ptr %17, i64 %20
  %.not71 = icmp slt i64 %20, %18
  br i1 %.not71, label %for.body.i62, label %CodeGen_codegen_block.exit63

CodeGen_codegen_block.exit63:                     ; preds = %for.body.i62, %3
  tail call void @free(ptr nonnull %16)
  store i1 %14, ptr %memberidx.i46, align 1
  %22 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %Block, ptr %22, i64 0, i32 1
  %23 = load i1, ptr %memberidx.i, align 1
  %memberidx1.i = getelementptr inbounds %Block, ptr %22, i64 0, i32 2
  %24 = load i1, ptr %memberidx1.i, align 1
  %25 = or i1 %23, %24
  %memberidx2.i = getelementptr inbounds %Block, ptr %22, i64 0, i32 3
  %26 = load i1, ptr %memberidx2.i, align 1
  %27 = or i1 %25, %26
  br i1 %27, label %ifend, label %if.entry

if.entry:                                         ; preds = %CodeGen_codegen_block.exit63
  %28 = tail call ptr @LLVMBuildBr(ptr %1, ptr %11)
  br label %ifend

ifend:                                            ; preds = %CodeGen_codegen_block.exit63, %if.entry
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %9)
  %memberidx6 = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 3
  %29 = load ptr, ptr %memberidx6, align 8
  %.not = icmp eq ptr %29, null
  br i1 %.not, label %if.entry12, label %if.entry7

if.entry7:                                        ; preds = %ifend
  %30 = load i1, ptr %memberidx.i46, align 1
  store i1 false, ptr %memberidx.i46, align 1
  %31 = load ptr, ptr %29, align 8
  %32 = tail call ptr @malloc(i32 25)
  %memberidx.i.i = getelementptr inbounds %Array_Statement_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %31, i64 0, i32 2
  %34 = load i64, ptr %memberidx1.i.i, align 4
  store i1 false, ptr %32, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %32, i64 0, i32 1
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %32, i64 0, i32 3
  store ptr %33, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %32, i64 0, i32 2
  store i64 %34, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %35 = icmp slt i64 %34, 1
  br i1 %35, label %ifend9, label %for.body.i

for.body.i:                                       ; preds = %if.entry7, %for.body.i
  %36 = phi i64 [ %37, %for.body.i ], [ 1, %if.entry7 ]
  %statement.0.i66.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %33, %if.entry7 ]
  %statement.0.i66 = load ptr, ptr %statement.0.i66.in, align 8
  tail call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i66)
  %37 = add nuw nsw i64 %36, 1
  store i64 %37, ptr %memberidx1.i.i.i, align 4
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %33, i64 %36
  %.not72 = icmp slt i64 %36, %34
  br i1 %.not72, label %for.body.i, label %ifend9

ifend9:                                           ; preds = %for.body.i, %if.entry7
  tail call void @free(ptr nonnull %32)
  store i1 %30, ptr %memberidx.i46, align 1
  %38 = load ptr, ptr %memberidx6, align 8
  %memberidx.i42 = getelementptr inbounds %Block, ptr %38, i64 0, i32 1
  %39 = load i1, ptr %memberidx.i42, align 1
  %memberidx1.i43 = getelementptr inbounds %Block, ptr %38, i64 0, i32 2
  %40 = load i1, ptr %memberidx1.i43, align 1
  %41 = or i1 %39, %40
  %memberidx2.i44 = getelementptr inbounds %Block, ptr %38, i64 0, i32 3
  %42 = load i1, ptr %memberidx2.i44, align 1
  %43 = or i1 %41, %42
  br i1 %43, label %else13, label %if.entry12

if.entry12:                                       ; preds = %ifend, %ifend9
  %44 = tail call ptr @LLVMBuildBr(ptr %1, ptr %11)
  br label %ifend14

else13:                                           ; preds = %ifend9
  br i1 %27, label %if.entry15, label %ifend14

ifend14:                                          ; preds = %if.entry15, %else13, %if.entry12
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %11)
  ret void

if.entry15:                                       ; preds = %else13
  tail call void @LLVMDeleteBasicBlock(ptr %11)
  br label %ifend14
}

define internal fastcc void @Map_string_LLVMValueRef__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_LLVMValueRef____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_LLVMValueRef____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_LLVMValueRef__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

define internal fastcc ptr @CodeGen_store_array_elements(ptr nocapture %0, ptr %1, ptr %2, ptr nocapture readonly %3) unnamed_addr {
for.entry:
  %next_args = alloca [1 x ptr], align 8
  %4 = tail call ptr @LLVMIntType(i64 64)
  %5 = tail call ptr @LLVMConstInt(ptr %4, i64 1, i1 false)
  store ptr %5, ptr %next_args, align 8
  %6 = tail call ptr @LLVMTypeOf(ptr %2)
  %memberidx = getelementptr inbounds %ArrayExpression, ptr %3, i64 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  %8 = tail call ptr @malloc(i32 25)
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 2
  %10 = load i64, ptr %memberidx1.i, align 4
  %11 = icmp slt i64 %10, 1
  br i1 %11, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %for.body
  %12 = phi i64 [ %16, %for.body ], [ 1, %for.entry ]
  %value.019.in = phi ptr [ %ptridx.i15, %for.body ], [ %9, %for.entry ]
  %addr.018 = phi ptr [ %15, %for.body ], [ %2, %for.entry ]
  %value.019 = load ptr, ptr %value.019.in, align 8
  %13 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %value.019)
  %14 = call ptr @LLVMBuildStore(ptr %1, ptr %13, ptr %addr.018)
  %15 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %6, ptr %addr.018, ptr nonnull %next_args, i64 1, ptr nonnull @28)
  %16 = add nuw nsw i64 %12, 1
  %ptridx.i15 = getelementptr inbounds ptr, ptr %9, i64 %12
  %.not = icmp slt i64 %12, %10
  br i1 %.not, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %addr.0.lcssa = phi ptr [ %2, %for.entry ], [ %15, %for.body ]
  tail call void @free(ptr nonnull %8)
  ret ptr %addr.0.lcssa
}

define internal fastcc ptr @CodeGen_codegen_type(ptr nocapture %0, ptr %1, i1 %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %5 = load i64, ptr %1, align 4
  switch i64 %5, label %ifend55 [
    i64 10, label %if.entry
    i64 0, label %if.entry2
    i64 1, label %if.entry6
    i64 2, label %if.entry10
    i64 3, label %if.entry14
    i64 4, label %if.entry18
    i64 6, label %if.entry22
    i64 5, label %if.entry26
    i64 7, label %if.entry30
    i64 8, label %if.entry34
    i64 9, label %if.entry38
    i64 13, label %if.entry42
    i64 14, label %if.entry47
    i64 19, label %if.entry53
  ]

common.ret:                                       ; preds = %if.entry72, %for.end, %true_block75, %true_block, %if.entry86, %ifend84, %if.entry47, %if.entry42, %if.entry38, %if.entry34, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %7, %if.entry2 ], [ %8, %if.entry6 ], [ %9, %if.entry10 ], [ %10, %if.entry14 ], [ %11, %if.entry18 ], [ %12, %if.entry22 ], [ %13, %if.entry26 ], [ %14, %if.entry30 ], [ %15, %if.entry34 ], [ %16, %if.entry38 ], [ %19, %if.entry42 ], [ %23, %if.entry47 ], [ null, %ifend84 ], [ %85, %if.entry86 ], [ %43, %true_block ], [ %60, %true_block75 ], [ %42, %for.end ], [ %59, %if.entry72 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %6 = tail call ptr @LLVMVoidType()
  br label %common.ret

if.entry2:                                        ; preds = %3
  %7 = tail call ptr @LLVMInt1Type()
  br label %common.ret

if.entry6:                                        ; preds = %3
  %8 = tail call ptr @LLVMIntType(i64 4)
  br label %common.ret

if.entry10:                                       ; preds = %3
  %9 = tail call ptr @LLVMInt8Type()
  br label %common.ret

if.entry14:                                       ; preds = %3
  %10 = tail call ptr @LLVMInt16Type()
  br label %common.ret

if.entry18:                                       ; preds = %3
  %11 = tail call ptr @LLVMInt32Type()
  br label %common.ret

if.entry22:                                       ; preds = %3
  %12 = tail call ptr @LLVMIntType(i64 64)
  br label %common.ret

if.entry26:                                       ; preds = %3
  %13 = tail call ptr @LLVMInt64Type()
  br label %common.ret

if.entry30:                                       ; preds = %3
  %14 = tail call ptr @LLVMInt128Type()
  br label %common.ret

if.entry34:                                       ; preds = %3
  %15 = tail call ptr @LLVMFloatType()
  br label %common.ret

if.entry38:                                       ; preds = %3
  %16 = tail call ptr @LLVMDoubleType()
  br label %common.ret

if.entry42:                                       ; preds = %3
  %memberidx45 = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %17 = load ptr, ptr %memberidx45, align 8
  %18 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %17, i1 true)
  %19 = tail call ptr @LLVMPointerType(ptr %18, i64 0)
  br label %common.ret

if.entry47:                                       ; preds = %3
  %memberidx50 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  %20 = load ptr, ptr %memberidx50, align 8
  %21 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %20, i1 true)
  %memberidx51 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 2
  %22 = load i64, ptr %memberidx51, align 4
  %23 = tail call ptr @LLVMArrayType(ptr %21, i64 %22)
  br label %common.ret

if.entry53:                                       ; preds = %3
  %memberidx56 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 3
  %24 = load ptr, ptr %memberidx56, align 8
  %.pr = load i64, ptr %24, align 4
  br label %ifend55

ifend55:                                          ; preds = %3, %if.entry53
  %25 = phi i64 [ %5, %3 ], [ %.pr, %if.entry53 ]
  %tt.0 = phi ptr [ %1, %3 ], [ %24, %if.entry53 ]
  switch i64 %25, label %ifend70 [
    i64 15, label %if.entry57
    i64 11, label %if.entry68
  ]

if.entry57:                                       ; preds = %ifend55
  %memberidx60 = getelementptr inbounds %FunctionType, ptr %tt.0, i64 0, i32 1
  %26 = load ptr, ptr %memberidx60, align 8
  %memberidx61 = getelementptr inbounds %Array_Type_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx61, align 4
  %28 = alloca ptr, i64 %27, align 8
  %29 = tail call ptr @malloc(i32 25)
  %memberidx.i127 = getelementptr inbounds %Array_Type_, ptr %26, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i127, align 8
  %31 = load i64, ptr %memberidx61, align 4
  store i1 false, ptr %29, align 1
  %memberidx1.i.i128 = getelementptr inbounds %ArrayIterator_Type_, ptr %29, i64 0, i32 1
  %memberidx2.i.i129 = getelementptr inbounds %ArrayIterator_Type_, ptr %29, i64 0, i32 3
  store ptr %30, ptr %memberidx2.i.i129, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Type_, ptr %29, i64 0, i32 2
  store i64 %31, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i128, align 4
  %32 = icmp slt i64 %31, 1
  br i1 %32, label %for.end, label %for.body

for.body:                                         ; preds = %if.entry57, %for.body
  %33 = phi i64 [ %37, %for.body ], [ 1, %if.entry57 ]
  %storemerge157.in = phi ptr [ %ptridx.i, %for.body ], [ %30, %if.entry57 ]
  %34 = phi i64 [ %35, %for.body ], [ 0, %if.entry57 ]
  %storemerge157 = load ptr, ptr %storemerge157.in, align 8
  %35 = add nuw nsw i64 %34, 1
  %ptridx = getelementptr inbounds ptr, ptr %28, i64 %34
  %36 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %storemerge157, i1 true)
  store ptr %36, ptr %ptridx, align 8
  %37 = add nuw nsw i64 %33, 1
  store i64 %37, ptr %memberidx1.i.i128, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %30, i64 %33
  %.not161 = icmp slt i64 %33, %31
  br i1 %.not161, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %if.entry57
  tail call void @free(ptr nonnull %29)
  %memberidx64 = getelementptr inbounds %FunctionType, ptr %tt.0, i64 0, i32 2
  %38 = load ptr, ptr %memberidx64, align 8
  %39 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %38, i1 true)
  %40 = load ptr, ptr %memberidx60, align 8
  %memberidx66 = getelementptr inbounds %Array_Type_, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx66, align 4
  %42 = call ptr @LLVMFunctionType(ptr %39, ptr nonnull %28, i64 %41, i1 false)
  br i1 %2, label %true_block, label %common.ret

true_block:                                       ; preds = %for.end
  %43 = call ptr @LLVMPointerType(ptr %42, i64 0)
  br label %common.ret

if.entry68:                                       ; preds = %ifend55
  %memberidx71 = getelementptr inbounds %ObjectType, ptr %tt.0, i64 0, i32 1
  %44 = load ptr, ptr %memberidx71, align 8
  %45 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %44)
  %.not.i = icmp eq ptr %45, null
  br i1 %.not.i, label %CodeGen_get_or_codegen_class_from_typeid.exit, label %if.entry72

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry68
  %memberidx.i130 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %46 = load ptr, ptr %memberidx.i130, align 8
  %memberidx.i.i131 = getelementptr inbounds %Program, ptr %46, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i.i131, align 8
  %48 = load i64, ptr %44, align 4
  %memberidx.i.i.i132 = getelementptr inbounds %Array_Module_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i.i.i132, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i133 = getelementptr inbounds %Module, ptr %50, i64 0, i32 4
  %51 = load ptr, ptr %memberidx2.i.i133, align 8
  %memberidx3.i.i134 = getelementptr inbounds %TypeId, ptr %44, i64 0, i32 2
  %52 = load i64, ptr %memberidx3.i.i134, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i6.i.i, align 8
  tail call fastcc void @CodeGen_declare_class(ptr %0, ptr %54)
  tail call fastcc void @CodeGen_codegen_class(ptr %0, ptr %54)
  %55 = load ptr, ptr %54, align 8
  %56 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %55)
  %.not118 = icmp eq ptr %56, null
  br i1 %.not118, label %CodeGen_get_or_codegen_class_from_typeid.exit.ifend70_crit_edge, label %if.entry72

CodeGen_get_or_codegen_class_from_typeid.exit.ifend70_crit_edge: ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %.pre = load i64, ptr %tt.0, align 4
  br label %ifend70

ifend70:                                          ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit.ifend70_crit_edge, %ifend55
  %57 = phi i64 [ %.pre, %CodeGen_get_or_codegen_class_from_typeid.exit.ifend70_crit_edge ], [ %25, %ifend55 ]
  %58 = icmp eq i64 %57, 12
  br i1 %58, label %if.entry82, label %ifend84

if.entry72:                                       ; preds = %if.entry68, %CodeGen_get_or_codegen_class_from_typeid.exit
  %common.ret.op.i151 = phi ptr [ %56, %CodeGen_get_or_codegen_class_from_typeid.exit ], [ %45, %if.entry68 ]
  %59 = load ptr, ptr %common.ret.op.i151, align 8
  br i1 %2, label %true_block75, label %common.ret

true_block75:                                     ; preds = %if.entry72
  %60 = tail call ptr @LLVMPointerType(ptr %59, i64 0)
  br label %common.ret

if.entry82:                                       ; preds = %ifend70
  %memberidx85 = getelementptr inbounds %EnumType, ptr %tt.0, i64 0, i32 1
  %61 = load ptr, ptr %memberidx85, align 8
  %62 = tail call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %61)
  %.not.i135 = icmp eq ptr %62, null
  br i1 %.not.i135, label %CodeGen_get_or_codegen_enum_from_typeid.exit, label %if.entry86

CodeGen_get_or_codegen_enum_from_typeid.exit:     ; preds = %if.entry82
  %memberidx.i138 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %63 = load ptr, ptr %memberidx.i138, align 8
  %memberidx.i.i139 = getelementptr inbounds %Program, ptr %63, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i.i139, align 8
  %65 = load i64, ptr %61, align 4
  %memberidx.i.i.i140 = getelementptr inbounds %Array_Module_, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i.i140, align 8
  %ptridx.i.i.i141 = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx.i.i.i141, align 8
  %memberidx2.i.i142 = getelementptr inbounds %Module, ptr %67, i64 0, i32 7
  %68 = load ptr, ptr %memberidx2.i.i142, align 8
  %memberidx3.i.i143 = getelementptr inbounds %TypeId, ptr %61, i64 0, i32 2
  %69 = load i64, ptr %memberidx3.i.i143, align 4
  %memberidx.i5.i.i144 = getelementptr inbounds %Array_Enum_, ptr %68, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i5.i.i144, align 8
  %ptridx.i6.i.i145 = getelementptr inbounds ptr, ptr %70, i64 %69
  %71 = load ptr, ptr %ptridx.i6.i.i145, align 8
  tail call fastcc void @CodeGen_declare_enum(ptr %0, ptr %71)
  %72 = load ptr, ptr %71, align 8
  %73 = tail call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %72)
  %.not = icmp eq ptr %73, null
  br i1 %.not, label %ifend84, label %if.entry86

ifend84:                                          ; preds = %CodeGen_get_or_codegen_enum_from_typeid.exit, %ifend70
  %74 = tail call ptr @malloc(i32 32)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %74, ptr noundef nonnull align 8 dereferenceable(32) @225, i64 32, i1 false)
  %75 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %75, align 8
  %memberidx.i.i119 = getelementptr inbounds %string, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i.i119, align 8
  %memberidx1.i.i120 = getelementptr inbounds %string, ptr %75, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i120, align 4
  %memberidx2.i.i121 = getelementptr inbounds %string, ptr %75, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i121, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %76 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %77 = tail call ptr %76(ptr nonnull %75)
  %78 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @219, ptr %77)
  %79 = load ptr, ptr %4, align 8
  %80 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %80, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  store ptr %79, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  store i64 %78, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 3
  store i64 %78, ptr %memberidx2.i.i, align 4
  call void @free(ptr %77)
  %81 = load ptr, ptr %80, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %81, i64 0, i32 3
  %82 = load ptr, ptr %memberidx.i.i.i, align 8
  %83 = call ptr %82(ptr nonnull %80)
  %84 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %83, i64 %84)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %common.ret

if.entry86:                                       ; preds = %if.entry82, %CodeGen_get_or_codegen_enum_from_typeid.exit
  %common.ret.op.i136154 = phi ptr [ %73, %CodeGen_get_or_codegen_enum_from_typeid.exit ], [ %62, %if.entry82 ]
  %85 = load ptr, ptr %common.ret.op.i136154, align 8
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_var_access_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %6 = tail call fastcc ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %5)
  %memberidx1 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %7, i1 true)
  %9 = icmp eq ptr %6, null
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %10 = tail call ptr @malloc(i32 50)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(50) %10, ptr noundef nonnull align 8 dereferenceable(50) @247, i64 50, i1 false)
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 2
  store i64 50, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 3
  store i64 50, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %12 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %13 = tail call ptr %12(ptr nonnull %11)
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @219, ptr %13)
  %15 = load ptr, ptr %4, align 8
  %16 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i.i18 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i.i18, align 8
  %memberidx1.i.i19 = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 %14, ptr %memberidx1.i.i19, align 4
  %memberidx2.i.i20 = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 %14, ptr %memberidx2.i.i20, align 4
  call void @free(ptr %13)
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i64 0, i32 3
  %18 = load ptr, ptr %memberidx.i.i.i, align 8
  %19 = call ptr %18(ptr nonnull %16)
  %20 = load i64, ptr %memberidx1.i.i19, align 4
  call void @write(i64 1, ptr %19, i64 %20)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %21 = load ptr, ptr %memberidx, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %common.ret, label %ifend6

common.ret:                                       ; preds = %ifend, %ifend10, %if.entry8
  %common.ret.op = phi ptr [ %25, %if.entry8 ], [ %26, %ifend10 ], [ %6, %ifend ]
  ret ptr %common.ret.op

ifend6:                                           ; preds = %ifend
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %24 = load i1, ptr %memberidx7, align 1
  br i1 %24, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend6
  %25 = call ptr @LLVMGetInitializer(ptr %6)
  br label %common.ret

ifend10:                                          ; preds = %ifend6
  %26 = call ptr @LLVMBuildLoad2(ptr %1, ptr %8, ptr %6, ptr nonnull @28)
  br label %common.ret
}

define internal fastcc void @Map_string_uint__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_uint_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_uint_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_uint_, ptr %15, i64 0, i32 1
  %17 = load i64, ptr %memberidx20, align 4
  tail call fastcc void @Map_string_uint____setitem__(ptr nonnull %0, ptr %16, i64 %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_uint____setitem__(ptr nocapture %0, ptr %1, i64 %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_uint_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_uint_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_uint__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_uint__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_uint_, ptr %37, i64 0, i32 1
  store i64 %2, ptr %memberidx1.i, align 4
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_uint__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

define internal fastcc void @CodeGen_codegen_class(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
for.entry:
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %8)
  %memberidx1 = getelementptr inbounds %Class, ptr %1, i64 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = tail call ptr @malloc(i32 25)
  %memberidx.i = getelementptr inbounds %Array_ClassMethod_, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Array_ClassMethod_, ptr %10, i64 0, i32 2
  %13 = load i64, ptr %memberidx1.i, align 4
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %11, i64 0, i32 1
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %11, i64 0, i32 3
  store ptr %12, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %11, i64 0, i32 2
  store i64 %13, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i, align 4
  %14 = icmp slt i64 %13, 1
  %method.0241 = load ptr, ptr %12, align 8
  store i1 %14, ptr %11, align 1
  br i1 %14, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx5 = getelementptr inbounds %CGClassType, ptr %9, i64 0, i32 3
  %memberidx8 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx.i151 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %memberidx24 = getelementptr inbounds %CGClassType, ptr %9, i64 0, i32 4
  %memberidx30 = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %memberidx42 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 10
  %memberidx55 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %memberidx.i211 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.incr
  %15 = phi i64 [ 1, %for.body.lr.ph ], [ %17, %for.incr ]
  %method.0242 = phi ptr [ %method.0241, %for.body.lr.ph ], [ %method.0, %for.incr ]
  %memberidx3 = getelementptr inbounds %ClassMethod, ptr %method.0242, i64 0, i32 7
  %16 = load i1, ptr %memberidx3, align 1
  br i1 %16, label %for.incr, label %ifend

for.incr:                                         ; preds = %for.body, %CodeGen_codegen_block.exit
  %17 = add nuw nsw i64 %15, 1
  store i64 %17, ptr %memberidx1.i.i, align 4
  %ptridx.i96 = getelementptr inbounds ptr, ptr %12, i64 %15
  %18 = icmp sge i64 %15, %13
  %method.0 = load ptr, ptr %ptridx.i96, align 8
  store i1 %18, ptr %11, align 1
  br i1 %18, label %for.end, label %for.body

for.end:                                          ; preds = %for.incr, %for.entry
  tail call void @free(ptr nonnull %11)
  ret void

ifend:                                            ; preds = %for.body
  %19 = load ptr, ptr %method.0242, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %memberidx.i98 = getelementptr inbounds %PropId, ptr %19, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i98, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %21 = load i64, ptr %20, align 4
  %memberidx1.i.i99 = getelementptr inbounds %TypeId, ptr %20, i64 0, i32 1
  %22 = load i64, ptr %memberidx1.i.i99, align 4
  %memberidx2.i.i100 = getelementptr inbounds %TypeId, ptr %20, i64 0, i32 2
  %23 = load i64, ptr %memberidx2.i.i100, align 4
  %24 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @224, i64 %21, i64 %22, i64 %23)
  %25 = load ptr, ptr %6, align 8
  %26 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %26, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  store ptr %25, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  store i64 %24, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %26, i64 0, i32 3
  store i64 %24, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %27 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %28 = call ptr %27(ptr nonnull %26)
  %29 = load i64, ptr %19, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %19, i64 0, i32 2
  %30 = load i64, ptr %memberidx3.i, align 4
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %7, ptr nonnull @240, ptr %28, i64 %29, i64 %30)
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 %31, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 %31, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %28)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  %34 = load ptr, ptr %memberidx5, align 8
  %35 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %33)
  %memberidx.i102 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %34, i64 0, i32 1
  %36 = load i64, ptr %memberidx.i102, align 4
  %37 = urem i64 %35, %36
  %38 = load ptr, ptr %34, align 8
  %ptridx.i103 = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i103, align 8
  %.not.i = icmp eq ptr %39, null
  br i1 %.not.i, label %Map_string_LLVMValueRef____getitem__.exit, label %while.entry.i

while.entry.i:                                    ; preds = %ifend, %else.i
  %40 = phi ptr [ %50, %else.i ], [ %38, %ifend ]
  %41 = phi i64 [ %51, %else.i ], [ %36, %ifend ]
  %42 = phi ptr [ %54, %else.i ], [ %39, %ifend ]
  %hash.0.i = phi i64 [ %53, %else.i ], [ %37, %ifend ]
  %43 = load ptr, ptr %42, align 8
  %memberidx.i.i104 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx.i.i104, align 4
  %45 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i = icmp eq i64 %44, %45
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i106 = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i106, align 8
  %47 = load ptr, ptr %memberidx.i.i, align 8
  %48 = call i64 @memcmp(ptr %46, ptr %47, i64 %44)
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %Map_string_LLVMValueRef____getitem__.exit, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i102, align 4
  %.pre243 = load ptr, ptr %34, align 8
  br label %else.i

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %50 = phi ptr [ %.pre243, %ifend.i.i.else.i_crit_edge ], [ %40, %while.entry.i ]
  %51 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %41, %while.entry.i ]
  %52 = add nuw i64 %hash.0.i, 1
  %53 = urem i64 %52, %51
  %ptridx7.i = getelementptr inbounds ptr, ptr %50, i64 %53
  %54 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %54, null
  br i1 %.not30.i, label %Map_string_LLVMValueRef____getitem__.exit, label %while.entry.i

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %else.i, %ifend.i.i, %ifend
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %method.0242, i64 0, i32 3
  %55 = load ptr, ptr %memberidx6, align 8
  %56 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %56, ptr noundef nonnull align 8 dereferenceable(11) @135, i64 11, i1 false)
  %57 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i108 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i108, align 8
  %memberidx1.i.i109 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i109, align 4
  %memberidx2.i.i110 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i110, align 4
  %memberidx.i111 = getelementptr inbounds %string, ptr %55, i64 0, i32 2
  %58 = load i64, ptr %memberidx.i111, align 4
  %.not.i113 = icmp eq i64 %58, 11
  br i1 %.not.i113, label %ifend.i, label %string___eq__.exit

ifend.i:                                          ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %memberidx2.i115 = getelementptr inbounds %string, ptr %55, i64 0, i32 1
  %59 = load ptr, ptr %memberidx2.i115, align 8
  %60 = call i64 @memcmp(ptr %59, ptr nonnull %56, i64 11)
  %61 = icmp eq i64 %60, 0
  br label %string___eq__.exit

string___eq__.exit:                               ; preds = %Map_string_LLVMValueRef____getitem__.exit, %ifend.i
  %common.ret.op.i114 = phi i1 [ %61, %ifend.i ], [ false, %Map_string_LLVMValueRef____getitem__.exit ]
  %62 = load ptr, ptr %0, align 8
  %63 = load ptr, ptr %memberidx8, align 8
  %64 = load ptr, ptr %63, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 5
  %65 = load ptr, ptr %memberidx9, align 8
  %66 = call ptr %65(ptr nonnull %63)
  %67 = load ptr, ptr %memberidx6, align 8
  %68 = load ptr, ptr %67, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i64 0, i32 5
  %69 = load ptr, ptr %memberidx11, align 8
  %70 = call ptr %69(ptr nonnull %67)
  %71 = alloca ptr, align 8
  %72 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %71, ptr nonnull @90, ptr %66, ptr %70)
  %73 = load ptr, ptr %71, align 8
  %74 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %74, align 8
  %memberidx.i117 = getelementptr inbounds %string, ptr %74, i64 0, i32 1
  store ptr %73, ptr %memberidx.i117, align 8
  %memberidx1.i118 = getelementptr inbounds %string, ptr %74, i64 0, i32 2
  store i64 %72, ptr %memberidx1.i118, align 4
  %memberidx2.i119 = getelementptr inbounds %string, ptr %74, i64 0, i32 3
  store i64 %72, ptr %memberidx2.i119, align 4
  tail call void @free(ptr %66)
  tail call void @free(ptr %70)
  %75 = load ptr, ptr %74, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %75, i64 0, i32 5
  %76 = load ptr, ptr %memberidx12, align 8
  %77 = call ptr %76(ptr nonnull %74)
  %78 = call ptr @LLVMGetNamedFunction(ptr %62, ptr %77)
  %79 = call ptr @LLVMAppendBasicBlock(ptr %78, ptr nonnull @28)
  %80 = call ptr @LLVMCreateBuilder()
  call void @LLVMPositionBuilderAtEnd(ptr %80, ptr %79)
  %memberidx13 = getelementptr inbounds %ClassMethod, ptr %method.0242, i64 0, i32 1
  %81 = load i1, ptr %memberidx13, align 1
  br i1 %81, label %for.entry43, label %if.entry14

if.entry14:                                       ; preds = %string___eq__.exit
  %82 = load ptr, ptr %9, align 8
  %83 = call ptr @LLVMPointerType(ptr %82, i64 0)
  %84 = call ptr @LLVMGetParam(ptr %78, i64 0)
  %85 = call ptr @LLVMBuildAlloca(ptr %80, ptr %83, ptr nonnull @65)
  %86 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %ClassMethod, ptr %method.0242, i64 0, i32 8
  %87 = load ptr, ptr %memberidx19, align 8
  %memberidx.i120 = getelementptr inbounds %Program, ptr %86, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i120, align 8
  %89 = load i64, ptr %87, align 4
  %memberidx.i.i121 = getelementptr inbounds %Array_Module_, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i.i121, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %90, i64 %89
  %91 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i122 = getelementptr inbounds %Module, ptr %91, i64 0, i32 8
  %92 = load ptr, ptr %memberidx2.i122, align 8
  %memberidx3.i123 = getelementptr inbounds %ScopeId, ptr %87, i64 0, i32 1
  %93 = load i64, ptr %memberidx3.i123, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %92, i64 0, i32 1
  %94 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %94, i64 %93
  %95 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx20 = getelementptr inbounds %Scope, ptr %95, i64 0, i32 1
  %96 = load ptr, ptr %memberidx20, align 8
  %97 = call ptr @malloc(i32 4)
  store i32 1936287860, ptr %97, align 8
  %98 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i.i124 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i124, align 8
  %memberidx1.i.i125 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i125, align 4
  %memberidx2.i.i126 = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i126, align 4
  %99 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr nonnull %98)
  %memberidx.i127 = getelementptr inbounds %Map_string_VarId_, ptr %96, i64 0, i32 1
  %100 = load i64, ptr %memberidx.i127, align 4
  %101 = urem i64 %99, %100
  %102 = load ptr, ptr %96, align 8
  %ptridx.i128 = getelementptr inbounds ptr, ptr %102, i64 %101
  %103 = load ptr, ptr %ptridx.i128, align 8
  %.not.i129 = icmp eq ptr %103, null
  br i1 %.not.i129, label %Map_string_VarId____getitem__.exit, label %while.entry.i135

while.entry.i135:                                 ; preds = %if.entry14, %else.i147
  %104 = phi ptr [ %114, %else.i147 ], [ %102, %if.entry14 ]
  %105 = phi i64 [ %115, %else.i147 ], [ %100, %if.entry14 ]
  %106 = phi ptr [ %118, %else.i147 ], [ %103, %if.entry14 ]
  %hash.0.i130 = phi i64 [ %117, %else.i147 ], [ %101, %if.entry14 ]
  %107 = load ptr, ptr %106, align 8
  %memberidx.i.i132 = getelementptr inbounds %string, ptr %107, i64 0, i32 2
  %108 = load i64, ptr %memberidx.i.i132, align 4
  %109 = load i64, ptr %memberidx1.i.i125, align 4
  %.not.i.i134 = icmp eq i64 %108, %109
  br i1 %.not.i.i134, label %ifend.i.i138, label %else.i147

ifend.i.i138:                                     ; preds = %while.entry.i135
  %memberidx2.i.i136 = getelementptr inbounds %string, ptr %107, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i.i136, align 8
  %111 = load ptr, ptr %memberidx.i.i124, align 8
  %112 = call i64 @memcmp(ptr %110, ptr %111, i64 %108)
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %while.end.i144, label %ifend.i.i138.else.i147_crit_edge

ifend.i.i138.else.i147_crit_edge:                 ; preds = %ifend.i.i138
  %.pre246 = load i64, ptr %memberidx.i127, align 4
  %.pre247 = load ptr, ptr %96, align 8
  br label %else.i147

while.end.i144:                                   ; preds = %ifend.i.i138
  %.pre248.pre = load ptr, ptr %96, align 8
  %ptridx9.i142.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre248.pre, i64 %hash.0.i130
  %.pre249.pre = load ptr, ptr %ptridx9.i142.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i143 = icmp eq ptr %.pre249.pre, null
  br i1 %.not29.i143, label %Map_string_VarId____getitem__.exit, label %if.entry10.i150

else.i147:                                        ; preds = %ifend.i.i138.else.i147_crit_edge, %while.entry.i135
  %114 = phi ptr [ %.pre247, %ifend.i.i138.else.i147_crit_edge ], [ %104, %while.entry.i135 ]
  %115 = phi i64 [ %.pre246, %ifend.i.i138.else.i147_crit_edge ], [ %105, %while.entry.i135 ]
  %116 = add nuw i64 %hash.0.i130, 1
  %117 = urem i64 %116, %115
  %ptridx7.i145 = getelementptr inbounds ptr, ptr %114, i64 %117
  %118 = load ptr, ptr %ptridx7.i145, align 8
  %.not30.i146 = icmp eq ptr %118, null
  br i1 %.not30.i146, label %Map_string_VarId____getitem__.exit, label %while.entry.i135

if.entry10.i150:                                  ; preds = %while.end.i144
  %memberidx15.i149 = getelementptr inbounds %MapEntry_string_VarId_, ptr %.pre249.pre, i64 0, i32 1
  %119 = load ptr, ptr %memberidx15.i149, align 8
  br label %Map_string_VarId____getitem__.exit

Map_string_VarId____getitem__.exit:               ; preds = %else.i147, %if.entry14, %while.end.i144, %if.entry10.i150
  %common.ret.op.i148 = phi ptr [ %119, %if.entry10.i150 ], [ null, %while.end.i144 ], [ null, %if.entry14 ], [ null, %else.i147 ]
  %120 = call ptr @LLVMBuildStore(ptr %80, ptr %84, ptr %85)
  %121 = load ptr, ptr %memberidx.i151, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %memberidx.i.i152 = getelementptr inbounds %VarId, ptr %common.ret.op.i148, i64 0, i32 1
  %122 = load i64, ptr %memberidx.i.i152, align 4
  %123 = load i64, ptr %common.ret.op.i148, align 4
  %memberidx2.i.i153 = getelementptr inbounds %VarId, ptr %common.ret.op.i148, i64 0, i32 2
  %124 = load i64, ptr %memberidx2.i.i153, align 4
  %125 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @224, i64 %122, i64 %123, i64 %124)
  %126 = load ptr, ptr %5, align 8
  %127 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %127, align 8
  %memberidx.i.i.i154 = getelementptr inbounds %string, ptr %127, i64 0, i32 1
  store ptr %126, ptr %memberidx.i.i.i154, align 8
  %memberidx1.i.i.i155 = getelementptr inbounds %string, ptr %127, i64 0, i32 2
  store i64 %125, ptr %memberidx1.i.i.i155, align 4
  %memberidx2.i.i.i156 = getelementptr inbounds %string, ptr %127, i64 0, i32 3
  store i64 %125, ptr %memberidx2.i.i.i156, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %121, ptr nonnull %127, ptr %85)
  br i1 %common.ret.op.i114, label %if.entry21, label %for.entry43

if.entry21:                                       ; preds = %Map_string_VarId____getitem__.exit
  %128 = load ptr, ptr %memberidx24, align 8
  %.not = icmp eq ptr %128, null
  br i1 %.not, label %ifend27, label %if.entry25

if.entry25:                                       ; preds = %if.entry21
  %index = alloca [1 x ptr], align 8
  %129 = call ptr @LLVMIntType(i64 64)
  %130 = call ptr @LLVMConstInt(ptr %129, i64 0, i1 false)
  store ptr %130, ptr %index, align 8
  %131 = call ptr @LLVMBuildInBoundsGEP2(ptr %80, ptr %83, ptr %84, ptr nonnull %index, i64 1, ptr nonnull @28)
  %132 = load ptr, ptr %memberidx24, align 8
  %133 = call ptr @LLVMBuildStore(ptr %80, ptr %132, ptr %131)
  br label %ifend27

ifend27:                                          ; preds = %if.entry21, %if.entry25
  %134 = load ptr, ptr %memberidx30, align 8
  %.not91 = icmp eq ptr %134, null
  br i1 %.not91, label %for.entry43, label %if.entry31

if.entry31:                                       ; preds = %ifend27
  %135 = load ptr, ptr %memberidx18, align 8
  %136 = load ptr, ptr %memberidx19, align 8
  %memberidx.i157 = getelementptr inbounds %Program, ptr %135, i64 0, i32 1
  %137 = load ptr, ptr %memberidx.i157, align 8
  %138 = load i64, ptr %136, align 4
  %memberidx.i.i158 = getelementptr inbounds %Array_Module_, ptr %137, i64 0, i32 1
  %139 = load ptr, ptr %memberidx.i.i158, align 8
  %ptridx.i.i159 = getelementptr inbounds ptr, ptr %139, i64 %138
  %140 = load ptr, ptr %ptridx.i.i159, align 8
  %memberidx2.i160 = getelementptr inbounds %Module, ptr %140, i64 0, i32 8
  %141 = load ptr, ptr %memberidx2.i160, align 8
  %memberidx3.i161 = getelementptr inbounds %ScopeId, ptr %136, i64 0, i32 1
  %142 = load i64, ptr %memberidx3.i161, align 4
  %memberidx.i5.i162 = getelementptr inbounds %Array_Scope_, ptr %141, i64 0, i32 1
  %143 = load ptr, ptr %memberidx.i5.i162, align 8
  %ptridx.i6.i163 = getelementptr inbounds ptr, ptr %143, i64 %142
  %144 = load ptr, ptr %ptridx.i6.i163, align 8
  %memberidx36 = getelementptr inbounds %Scope, ptr %144, i64 0, i32 1
  %145 = load ptr, ptr %memberidx36, align 8
  %146 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %146, ptr noundef nonnull align 8 dereferenceable(5) @139, i64 5, i1 false)
  %147 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %147, align 8
  %memberidx.i.i164 = getelementptr inbounds %string, ptr %147, i64 0, i32 1
  store ptr %146, ptr %memberidx.i.i164, align 8
  %memberidx1.i.i165 = getelementptr inbounds %string, ptr %147, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i165, align 4
  %memberidx2.i.i166 = getelementptr inbounds %string, ptr %147, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i166, align 4
  %148 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr nonnull %147)
  %memberidx.i167 = getelementptr inbounds %Map_string_VarId_, ptr %145, i64 0, i32 1
  %149 = load i64, ptr %memberidx.i167, align 4
  %150 = urem i64 %148, %149
  %151 = load ptr, ptr %145, align 8
  %ptridx.i168 = getelementptr inbounds ptr, ptr %151, i64 %150
  %152 = load ptr, ptr %ptridx.i168, align 8
  %.not.i169 = icmp eq ptr %152, null
  br i1 %.not.i169, label %for.entry43, label %while.entry.i175

while.entry.i175:                                 ; preds = %if.entry31, %else.i187
  %153 = phi ptr [ %163, %else.i187 ], [ %151, %if.entry31 ]
  %154 = phi i64 [ %164, %else.i187 ], [ %149, %if.entry31 ]
  %155 = phi ptr [ %167, %else.i187 ], [ %152, %if.entry31 ]
  %hash.0.i170 = phi i64 [ %166, %else.i187 ], [ %150, %if.entry31 ]
  %156 = load ptr, ptr %155, align 8
  %memberidx.i.i172 = getelementptr inbounds %string, ptr %156, i64 0, i32 2
  %157 = load i64, ptr %memberidx.i.i172, align 4
  %158 = load i64, ptr %memberidx1.i.i165, align 4
  %.not.i.i174 = icmp eq i64 %157, %158
  br i1 %.not.i.i174, label %ifend.i.i178, label %else.i187

ifend.i.i178:                                     ; preds = %while.entry.i175
  %memberidx2.i.i176 = getelementptr inbounds %string, ptr %156, i64 0, i32 1
  %159 = load ptr, ptr %memberidx2.i.i176, align 8
  %160 = load ptr, ptr %memberidx.i.i164, align 8
  %161 = call i64 @memcmp(ptr %159, ptr %160, i64 %157)
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %while.end.i184, label %ifend.i.i178.else.i187_crit_edge

ifend.i.i178.else.i187_crit_edge:                 ; preds = %ifend.i.i178
  %.pre250 = load i64, ptr %memberidx.i167, align 4
  %.pre251 = load ptr, ptr %145, align 8
  br label %else.i187

while.end.i184:                                   ; preds = %ifend.i.i178
  %.pre252.pre = load ptr, ptr %145, align 8
  %ptridx9.i182.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre252.pre, i64 %hash.0.i170
  %.pre253.pre = load ptr, ptr %ptridx9.i182.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i183 = icmp eq ptr %.pre253.pre, null
  br i1 %.not29.i183, label %for.entry43, label %Map_string_VarId____getitem__.exit191

else.i187:                                        ; preds = %ifend.i.i178.else.i187_crit_edge, %while.entry.i175
  %163 = phi ptr [ %.pre251, %ifend.i.i178.else.i187_crit_edge ], [ %153, %while.entry.i175 ]
  %164 = phi i64 [ %.pre250, %ifend.i.i178.else.i187_crit_edge ], [ %154, %while.entry.i175 ]
  %165 = add nuw i64 %hash.0.i170, 1
  %166 = urem i64 %165, %164
  %ptridx7.i185 = getelementptr inbounds ptr, ptr %163, i64 %166
  %167 = load ptr, ptr %ptridx7.i185, align 8
  %.not30.i186 = icmp eq ptr %167, null
  br i1 %.not30.i186, label %for.entry43, label %while.entry.i175

Map_string_VarId____getitem__.exit191:            ; preds = %while.end.i184
  %memberidx15.i189 = getelementptr inbounds %MapEntry_string_VarId_, ptr %.pre253.pre, i64 0, i32 1
  %168 = load ptr, ptr %memberidx15.i189, align 8
  %.not92 = icmp eq ptr %168, null
  br i1 %.not92, label %for.entry43, label %if.entry37

if.entry37:                                       ; preds = %Map_string_VarId____getitem__.exit191
  %memberidx40 = getelementptr inbounds %ObjectType, ptr %134, i64 0, i32 1
  %169 = load ptr, ptr %memberidx40, align 8
  %170 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr nonnull %0, ptr %169)
  %.not.i218 = icmp eq ptr %170, null
  br i1 %.not.i218, label %ifend.i225, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i225:                                       ; preds = %if.entry37
  %171 = load ptr, ptr %memberidx18, align 8
  %memberidx.i.i221 = getelementptr inbounds %Program, ptr %171, i64 0, i32 1
  %172 = load ptr, ptr %memberidx.i.i221, align 8
  %173 = load i64, ptr %169, align 4
  %memberidx.i.i.i222 = getelementptr inbounds %Array_Module_, ptr %172, i64 0, i32 1
  %174 = load ptr, ptr %memberidx.i.i.i222, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %174, i64 %173
  %175 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i223 = getelementptr inbounds %Module, ptr %175, i64 0, i32 4
  %176 = load ptr, ptr %memberidx2.i.i223, align 8
  %memberidx3.i.i224 = getelementptr inbounds %TypeId, ptr %169, i64 0, i32 2
  %177 = load i64, ptr %memberidx3.i.i224, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %176, i64 0, i32 1
  %178 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %178, i64 %177
  %179 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %179)
  call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %179)
  %180 = load ptr, ptr %179, align 8
  %181 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr nonnull %0, ptr %180)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry37, %ifend.i225
  %common.ret.op.i219 = phi ptr [ %181, %ifend.i225 ], [ %170, %if.entry37 ]
  %memberidx41 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i219, i64 0, i32 6
  %182 = load ptr, ptr %memberidx41, align 8
  %183 = call ptr @LLVMBuildAlloca(ptr %80, ptr %83, ptr nonnull @139)
  %184 = call ptr @LLVMBuildStore(ptr %80, ptr %182, ptr %183)
  %185 = load ptr, ptr %memberidx.i151, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i.i193 = getelementptr inbounds %VarId, ptr %168, i64 0, i32 1
  %186 = load i64, ptr %memberidx.i.i193, align 4
  %187 = load i64, ptr %168, align 4
  %memberidx2.i.i194 = getelementptr inbounds %VarId, ptr %168, i64 0, i32 2
  %188 = load i64, ptr %memberidx2.i.i194, align 4
  %189 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @224, i64 %186, i64 %187, i64 %188)
  %190 = load ptr, ptr %4, align 8
  %191 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %191, align 8
  %memberidx.i.i.i195 = getelementptr inbounds %string, ptr %191, i64 0, i32 1
  store ptr %190, ptr %memberidx.i.i.i195, align 8
  %memberidx1.i.i.i196 = getelementptr inbounds %string, ptr %191, i64 0, i32 2
  store i64 %189, ptr %memberidx1.i.i.i196, align 4
  %memberidx2.i.i.i197 = getelementptr inbounds %string, ptr %191, i64 0, i32 3
  store i64 %189, ptr %memberidx2.i.i.i197, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %185, ptr nonnull %191, ptr %183)
  %192 = load ptr, ptr %memberidx42, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %193 = load i64, ptr %memberidx.i.i193, align 4
  %194 = load i64, ptr %168, align 4
  %195 = load i64, ptr %memberidx2.i.i194, align 4
  %196 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @224, i64 %193, i64 %194, i64 %195)
  %197 = load ptr, ptr %3, align 8
  %198 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %198, align 8
  %memberidx.i.i200 = getelementptr inbounds %string, ptr %198, i64 0, i32 1
  store ptr %197, ptr %memberidx.i.i200, align 8
  %memberidx1.i.i201 = getelementptr inbounds %string, ptr %198, i64 0, i32 2
  store i64 %196, ptr %memberidx1.i.i201, align 4
  %memberidx2.i.i202 = getelementptr inbounds %string, ptr %198, i64 0, i32 3
  store i64 %196, ptr %memberidx2.i.i202, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %192, ptr nonnull %198, ptr %84)
  br label %for.entry43

for.entry43:                                      ; preds = %else.i187, %if.entry31, %Map_string_VarId____getitem__.exit, %ifend27, %Map_string_VarId____getitem__.exit191, %CodeGen_get_or_codegen_class_from_typeid.exit, %while.end.i184, %string___eq__.exit
  %199 = phi i64 [ 0, %string___eq__.exit ], [ 1, %while.end.i184 ], [ 1, %CodeGen_get_or_codegen_class_from_typeid.exit ], [ 1, %Map_string_VarId____getitem__.exit191 ], [ 1, %ifend27 ], [ 1, %Map_string_VarId____getitem__.exit ], [ 1, %if.entry31 ], [ 1, %else.i187 ]
  %memberidx48 = getelementptr inbounds %ClassMethod, ptr %method.0242, i64 0, i32 6
  %200 = load ptr, ptr %memberidx48, align 8
  %memberidx49237 = getelementptr inbounds %Array_FunctionArg_, ptr %200, i64 0, i32 2
  %201 = load i64, ptr %memberidx49237, align 4
  %202 = icmp sgt i64 %201, 0
  br i1 %202, label %for.body45, label %for.end47

for.body45:                                       ; preds = %for.entry43, %for.body45
  %203 = phi ptr [ %225, %for.body45 ], [ %200, %for.entry43 ]
  %storemerge238 = phi i64 [ %224, %for.body45 ], [ 0, %for.entry43 ]
  %memberidx.i203 = getelementptr inbounds %Array_FunctionArg_, ptr %203, i64 0, i32 1
  %204 = load ptr, ptr %memberidx.i203, align 8
  %ptridx.i204 = getelementptr inbounds ptr, ptr %204, i64 %storemerge238
  %205 = load ptr, ptr %ptridx.i204, align 8
  %206 = add nuw i64 %199, %storemerge238
  %207 = call ptr @LLVMGetParam(ptr %78, i64 %206)
  %memberidx51 = getelementptr inbounds %Expression, ptr %205, i64 0, i32 3
  %208 = load ptr, ptr %memberidx51, align 8
  %209 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %208, i1 true)
  %memberidx52 = getelementptr inbounds %FunctionArg, ptr %205, i64 0, i32 5
  %210 = load ptr, ptr %memberidx52, align 8
  %211 = load ptr, ptr %210, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %211, i64 0, i32 5
  %212 = load ptr, ptr %memberidx53, align 8
  %213 = call ptr %212(ptr nonnull %210)
  %214 = call ptr @LLVMBuildAlloca(ptr %80, ptr %209, ptr %213)
  %215 = call ptr @LLVMBuildStore(ptr %80, ptr %207, ptr %214)
  %memberidx54 = getelementptr inbounds %FunctionArg, ptr %205, i64 0, i32 4
  %216 = load ptr, ptr %memberidx54, align 8
  %217 = load ptr, ptr %memberidx.i151, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %memberidx.i.i206 = getelementptr inbounds %VarId, ptr %216, i64 0, i32 1
  %218 = load i64, ptr %memberidx.i.i206, align 4
  %219 = load i64, ptr %216, align 4
  %memberidx2.i.i207 = getelementptr inbounds %VarId, ptr %216, i64 0, i32 2
  %220 = load i64, ptr %memberidx2.i.i207, align 4
  %221 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @224, i64 %218, i64 %219, i64 %220)
  %222 = load ptr, ptr %2, align 8
  %223 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %223, align 8
  %memberidx.i.i.i208 = getelementptr inbounds %string, ptr %223, i64 0, i32 1
  store ptr %222, ptr %memberidx.i.i.i208, align 8
  %memberidx1.i.i.i209 = getelementptr inbounds %string, ptr %223, i64 0, i32 2
  store i64 %221, ptr %memberidx1.i.i.i209, align 4
  %memberidx2.i.i.i210 = getelementptr inbounds %string, ptr %223, i64 0, i32 3
  store i64 %221, ptr %memberidx2.i.i.i210, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %217, ptr nonnull %223, ptr %214)
  %224 = add nuw nsw i64 %storemerge238, 1
  %225 = load ptr, ptr %memberidx48, align 8
  %memberidx49 = getelementptr inbounds %Array_FunctionArg_, ptr %225, i64 0, i32 2
  %226 = load i64, ptr %memberidx49, align 4
  %227 = icmp slt i64 %224, %226
  br i1 %227, label %for.body45, label %for.end47

for.end47:                                        ; preds = %for.body45, %for.entry43
  %228 = load ptr, ptr %memberidx55, align 8
  store ptr %78, ptr %memberidx55, align 8
  %memberidx57 = getelementptr inbounds %ClassMethod, ptr %method.0242, i64 0, i32 5
  %229 = load ptr, ptr %memberidx57, align 8
  %230 = load i1, ptr %memberidx.i211, align 1
  store i1 false, ptr %memberidx.i211, align 1
  %231 = load ptr, ptr %229, align 8
  %232 = call ptr @malloc(i32 25)
  %memberidx.i.i212 = getelementptr inbounds %Array_Statement_, ptr %231, i64 0, i32 1
  %233 = load ptr, ptr %memberidx.i.i212, align 8
  %memberidx1.i.i213 = getelementptr inbounds %Array_Statement_, ptr %231, i64 0, i32 2
  %234 = load i64, ptr %memberidx1.i.i213, align 4
  %memberidx1.i.i.i214 = getelementptr inbounds %ArrayIterator_Statement_, ptr %232, i64 0, i32 1
  %235 = icmp slt i64 %234, 1
  br i1 %235, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %for.end47, %for.body.i
  %236 = phi i64 [ %237, %for.body.i ], [ 1, %for.end47 ]
  %statement.0.i240.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %233, %for.end47 ]
  %statement.0.i240 = load ptr, ptr %statement.0.i240.in, align 8
  call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %80, ptr %statement.0.i240)
  %237 = add nuw nsw i64 %236, 1
  store i64 %237, ptr %memberidx1.i.i.i214, align 4
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %233, i64 %236
  %.not260 = icmp slt i64 %236, %234
  br i1 %.not260, label %for.body.i, label %CodeGen_codegen_block.exit

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %for.end47
  call void @free(ptr nonnull %232)
  store i1 %230, ptr %memberidx.i211, align 1
  store ptr %228, ptr %memberidx55, align 8
  call void @LLVMDisposeBuilder(ptr %80)
  br label %for.incr
}

define internal fastcc ptr @CodeGen_codegen_string_to_cstring(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx2 = getelementptr inbounds %Program, ptr %4, i64 0, i32 1
  %5 = load ptr, ptr %memberidx2, align 8
  %memberidx.i36 = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i36, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx3 = getelementptr inbounds %Module, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load i64, ptr %8, align 4
  %ptridx.i.i35 = getelementptr inbounds ptr, ptr %6, i64 %9
  %10 = load ptr, ptr %ptridx.i.i35, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 8
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %8, i64 0, i32 1
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx4 = getelementptr inbounds %Scope, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %16, ptr noundef nonnull align 8 dereferenceable(6) @173, i64 6, i1 false)
  %17 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %17, align 8
  %memberidx.i.i30 = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  store ptr %16, ptr %memberidx.i.i30, align 8
  %memberidx1.i.i31 = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i31, align 4
  %memberidx2.i.i32 = getelementptr inbounds %string, ptr %17, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i32, align 4
  %18 = tail call fastcc i64 @Map_string_ClassId__hash_fnc(ptr nonnull %17)
  %memberidx.i21 = getelementptr inbounds %Map_string_ClassId_, ptr %15, i64 0, i32 1
  %19 = load i64, ptr %memberidx.i21, align 4
  %20 = urem i64 %18, %19
  %21 = load ptr, ptr %15, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %22, null
  br i1 %.not.i, label %get_class_from_type.exit, label %while.entry.i

while.entry.i:                                    ; preds = %3, %else.i
  %23 = phi ptr [ %33, %else.i ], [ %21, %3 ]
  %24 = phi i64 [ %34, %else.i ], [ %19, %3 ]
  %25 = phi ptr [ %37, %else.i ], [ %22, %3 ]
  %hash.0.i = phi i64 [ %36, %else.i ], [ %20, %3 ]
  %26 = load ptr, ptr %25, align 8
  %memberidx.i.i22 = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i.i22, align 4
  %28 = load i64, ptr %memberidx1.i.i31, align 4
  %.not.i.i24 = icmp eq i64 %27, %28
  br i1 %.not.i.i24, label %ifend.i.i27, label %else.i

ifend.i.i27:                                      ; preds = %while.entry.i
  %memberidx2.i.i25 = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i25, align 8
  %30 = load ptr, ptr %memberidx.i.i30, align 8
  %31 = tail call i64 @memcmp(ptr %29, ptr %30, i64 %27)
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %while.end.i, label %ifend.i.i27.else.i_crit_edge

ifend.i.i27.else.i_crit_edge:                     ; preds = %ifend.i.i27
  %.pre = load i64, ptr %memberidx.i21, align 4
  %.pre51 = load ptr, ptr %15, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i27
  %.pre52.pre = load ptr, ptr %15, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre52.pre, i64 %hash.0.i
  %.pre53.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre53.pre, null
  br i1 %.not29.i, label %get_class_from_type.exit, label %if.entry10.i

else.i:                                           ; preds = %ifend.i.i27.else.i_crit_edge, %while.entry.i
  %33 = phi ptr [ %.pre51, %ifend.i.i27.else.i_crit_edge ], [ %23, %while.entry.i ]
  %34 = phi i64 [ %.pre, %ifend.i.i27.else.i_crit_edge ], [ %24, %while.entry.i ]
  %35 = add nuw i64 %hash.0.i, 1
  %36 = urem i64 %35, %34
  %ptridx7.i = getelementptr inbounds ptr, ptr %33, i64 %36
  %37 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %37, null
  br i1 %.not30.i, label %get_class_from_type.exit, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_ClassId_, ptr %.pre53.pre, i64 0, i32 1
  %38 = load ptr, ptr %memberidx15.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %else.i, %3, %while.end.i, %if.entry10.i
  %common.ret.op.i29 = phi ptr [ %38, %if.entry10.i ], [ null, %while.end.i ], [ null, %3 ], [ null, %else.i ]
  %39 = alloca %ObjectType, align 8
  store i64 11, ptr %39, align 8
  %memberidx.i20 = getelementptr inbounds %ObjectType, ptr %39, i64 0, i32 1
  store ptr %common.ret.op.i29, ptr %memberidx.i20, align 8
  %40 = load ptr, ptr %memberidx, align 8
  %41 = tail call ptr @malloc(i32 10)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %41, ptr noundef nonnull align 8 dereferenceable(10) @255, i64 10, i1 false)
  %42 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i17 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i17, align 8
  %memberidx1.i.i18 = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i18, align 4
  %memberidx2.i.i19 = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i19, align 4
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %39, i64 0, i32 1
  %43 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i42 = getelementptr inbounds %Program, ptr %40, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i.i42, align 8
  %45 = load i64, ptr %43, align 4
  %memberidx.i.i.i43 = getelementptr inbounds %Array_Module_, ptr %44, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i.i.i43, align 8
  %ptridx.i.i.i44 = getelementptr inbounds ptr, ptr %46, i64 %45
  %47 = load ptr, ptr %ptridx.i.i.i44, align 8
  %memberidx2.i.i45 = getelementptr inbounds %Module, ptr %47, i64 0, i32 4
  %48 = load ptr, ptr %memberidx2.i.i45, align 8
  %memberidx3.i.i46 = getelementptr inbounds %TypeId, ptr %43, i64 0, i32 2
  %49 = load i64, ptr %memberidx3.i.i46, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %50, i64 %49
  %51 = load ptr, ptr %ptridx.i6.i.i, align 8
  %52 = icmp eq ptr %51, null
  br i1 %52, label %get_class_prop_type_with_name.exit, label %ifend.i

ifend.i:                                          ; preds = %get_class_from_type.exit
  %memberidx.i = getelementptr inbounds %Class, ptr %51, i64 0, i32 6
  %53 = load ptr, ptr %memberidx.i, align 8
  %54 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %42)
  %memberidx.i.i14 = getelementptr inbounds %Map_string_PropId_, ptr %53, i64 0, i32 1
  %55 = load i64, ptr %memberidx.i.i14, align 4
  %56 = urem i64 %54, %55
  %57 = load ptr, ptr %53, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i.i, align 8
  %.not.i.i = icmp eq ptr %58, null
  br i1 %.not.i.i, label %get_class_prop_type_with_name.exit, label %while.entry.i.i

while.entry.i.i:                                  ; preds = %ifend.i, %else.i.i
  %59 = phi ptr [ %69, %else.i.i ], [ %57, %ifend.i ]
  %60 = phi i64 [ %70, %else.i.i ], [ %55, %ifend.i ]
  %61 = phi ptr [ %73, %else.i.i ], [ %58, %ifend.i ]
  %hash.0.i.i = phi i64 [ %72, %else.i.i ], [ %56, %ifend.i ]
  %62 = load ptr, ptr %61, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx.i.i.i, align 4
  %64 = load i64, ptr %memberidx1.i.i18, align 4
  %.not.i.i.i = icmp eq i64 %63, %64
  br i1 %.not.i.i.i, label %ifend.i.i.i, label %else.i.i

ifend.i.i.i:                                      ; preds = %while.entry.i.i
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i.i.i, align 8
  %66 = load ptr, ptr %memberidx.i.i17, align 8
  %67 = tail call i64 @memcmp(ptr %65, ptr %66, i64 %63)
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %while.end.i.i, label %ifend.i.i.i.else.i.i_crit_edge

ifend.i.i.i.else.i.i_crit_edge:                   ; preds = %ifend.i.i.i
  %.pre55 = load i64, ptr %memberidx.i.i14, align 4
  %.pre56 = load ptr, ptr %53, align 8
  br label %else.i.i

while.end.i.i:                                    ; preds = %ifend.i.i.i
  %.pre57.pre = load ptr, ptr %53, align 8
  %ptridx9.i.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre57.pre, i64 %hash.0.i.i
  %.pre58.pre = load ptr, ptr %ptridx9.i.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i.i = icmp eq ptr %.pre58.pre, null
  br i1 %.not29.i.i, label %get_class_prop_type_with_name.exit, label %Map_string_PropId____getitem__.exit.i

else.i.i:                                         ; preds = %ifend.i.i.i.else.i.i_crit_edge, %while.entry.i.i
  %69 = phi ptr [ %.pre56, %ifend.i.i.i.else.i.i_crit_edge ], [ %59, %while.entry.i.i ]
  %70 = phi i64 [ %.pre55, %ifend.i.i.i.else.i.i_crit_edge ], [ %60, %while.entry.i.i ]
  %71 = add nuw i64 %hash.0.i.i, 1
  %72 = urem i64 %71, %70
  %ptridx7.i.i = getelementptr inbounds ptr, ptr %69, i64 %72
  %73 = load ptr, ptr %ptridx7.i.i, align 8
  %.not30.i.i = icmp eq ptr %73, null
  br i1 %.not30.i.i, label %get_class_prop_type_with_name.exit, label %while.entry.i.i

Map_string_PropId____getitem__.exit.i:            ; preds = %while.end.i.i
  %memberidx15.i.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre58.pre, i64 0, i32 1
  %74 = load ptr, ptr %memberidx15.i.i, align 8
  %75 = icmp eq ptr %74, null
  br i1 %75, label %get_class_prop_type_with_name.exit, label %ifend3.i

ifend3.i:                                         ; preds = %Map_string_PropId____getitem__.exit.i
  %memberidx.i.i6.i = getelementptr inbounds %PropId, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i.i6.i, align 8
  %77 = load ptr, ptr %memberidx.i.i42, align 8
  %78 = load i64, ptr %76, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %80, i64 0, i32 4
  %81 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %76, i64 0, i32 2
  %82 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %83, i64 %82
  %84 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %85 = load i64, ptr %74, align 4
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %if.entry.i.i, label %ifend.i.i

if.entry.i.i:                                     ; preds = %ifend3.i
  %memberidx1.i.i15 = getelementptr inbounds %Class, ptr %84, i64 0, i32 5
  %87 = load ptr, ptr %memberidx1.i.i15, align 8
  %memberidx2.i.i16 = getelementptr inbounds %PropId, ptr %74, i64 0, i32 2
  %88 = load i64, ptr %memberidx2.i.i16, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %87, i64 0, i32 1
  %89 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %89, i64 %88
  %90 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ClassMethod, ptr %90, i64 0, i32 4
  br label %get_class_prop_type.exit.i

ifend.i.i:                                        ; preds = %ifend3.i
  %memberidx4.i.i = getelementptr inbounds %Class, ptr %84, i64 0, i32 4
  %91 = load ptr, ptr %memberidx4.i.i, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %74, i64 0, i32 2
  %92 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %91, i64 0, i32 1
  %93 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %93, i64 %92
  %94 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %94, i64 0, i32 4
  br label %get_class_prop_type.exit.i

get_class_prop_type.exit.i:                       ; preds = %ifend.i.i, %if.entry.i.i
  %common.ret.op.in.i.i = phi ptr [ %memberidx3.i.i, %if.entry.i.i ], [ %memberidx6.i.i, %ifend.i.i ]
  %common.ret.op.i7.i = load ptr, ptr %common.ret.op.in.i.i, align 8
  br label %get_class_prop_type_with_name.exit

get_class_prop_type_with_name.exit:               ; preds = %else.i.i, %ifend.i, %while.end.i.i, %get_class_from_type.exit, %Map_string_PropId____getitem__.exit.i, %get_class_prop_type.exit.i
  %common.ret.op.i = phi ptr [ %common.ret.op.i7.i, %get_class_prop_type.exit.i ], [ null, %get_class_from_type.exit ], [ null, %Map_string_PropId____getitem__.exit.i ], [ null, %while.end.i.i ], [ null, %ifend.i ], [ null, %else.i.i ]
  %95 = tail call ptr @malloc(i32 10)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %95, ptr noundef nonnull align 8 dereferenceable(10) @255, i64 10, i1 false)
  %96 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %96, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 1
  store ptr %95, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i, align 4
  %97 = call fastcc ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr nonnull %39, ptr nonnull %96, ptr null)
  %args = alloca [1 x ptr], align 8
  store ptr %2, ptr %args, align 8
  %98 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i, i1 false)
  %99 = call ptr @LLVMBuildCall2(ptr %1, ptr %98, ptr %97, ptr nonnull %args, i64 1, ptr nonnull @28)
  ret ptr %99
}

define internal fastcc void @CodeGen_codegen_statement(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %4 = load i64, ptr %2, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @CodeGen_codegen_if_stmt(ptr %0, ptr %1, ptr nonnull %2)
  %.pr = load i64, ptr %2, align 4
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %6 = phi i64 [ %4, %3 ], [ %.pr, %if.entry ]
  %7 = icmp eq i64 %6, 3
  br i1 %7, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  tail call fastcc void @CodeGen_codegen_for_stmt(ptr %0, ptr %1, ptr nonnull %2)
  %.pre = load i64, ptr %2, align 4
  br label %ifend4

ifend4:                                           ; preds = %ifend, %if.entry2
  %8 = phi i64 [ %6, %ifend ], [ %.pre, %if.entry2 ]
  %9 = icmp eq i64 %8, 4
  br i1 %9, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %memberidx.i66 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i66, align 8
  %11 = tail call ptr @LLVMAppendBasicBlock(ptr %10, ptr nonnull @264)
  %12 = load ptr, ptr %memberidx.i66, align 8
  %13 = tail call ptr @LLVMAppendBasicBlock(ptr %12, ptr nonnull @265)
  %memberidx2.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i67 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %15 = load ptr, ptr %memberidx3.i67, align 8
  store ptr %13, ptr %memberidx2.i, align 8
  store ptr %11, ptr %memberidx3.i67, align 8
  %memberidx6.i = getelementptr inbounds %WhileStatement, ptr %2, i64 0, i32 1
  %16 = load ptr, ptr %memberidx6.i, align 8
  %17 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %16)
  %18 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %17, ptr %11, ptr %13)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %11)
  %memberidx7.i = getelementptr inbounds %WhileStatement, ptr %2, i64 0, i32 2
  %19 = load ptr, ptr %memberidx7.i, align 8
  %memberidx.i70 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %20 = load i1, ptr %memberidx.i70, align 1
  store i1 false, ptr %memberidx.i70, align 1
  %21 = load ptr, ptr %19, align 8
  %22 = tail call ptr @malloc(i32 25)
  %memberidx.i.i71 = getelementptr inbounds %Array_Statement_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i.i71, align 8
  %memberidx1.i.i72 = getelementptr inbounds %Array_Statement_, ptr %21, i64 0, i32 2
  %24 = load i64, ptr %memberidx1.i.i72, align 4
  store i1 false, ptr %22, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 1
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 3
  store ptr %23, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 2
  store i64 %24, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %25 = icmp slt i64 %24, 1
  br i1 %25, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %if.entry6, %for.body.i
  %26 = phi i64 [ %27, %for.body.i ], [ 1, %if.entry6 ]
  %statement.0.i78.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %23, %if.entry6 ]
  %statement.0.i78 = load ptr, ptr %statement.0.i78.in, align 8
  tail call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i78)
  %27 = add nuw nsw i64 %26, 1
  store i64 %27, ptr %memberidx1.i.i.i, align 4
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %23, i64 %26
  %.not = icmp slt i64 %26, %24
  br i1 %.not, label %for.body.i, label %CodeGen_codegen_block.exit

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %if.entry6
  tail call void @free(ptr nonnull %22)
  store i1 %20, ptr %memberidx.i70, align 1
  %28 = load ptr, ptr %memberidx7.i, align 8
  %memberidx.i.i = getelementptr inbounds %Block, ptr %28, i64 0, i32 1
  %29 = load i1, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %Block, ptr %28, i64 0, i32 2
  %30 = load i1, ptr %memberidx1.i.i, align 1
  %31 = or i1 %29, %30
  %memberidx2.i.i = getelementptr inbounds %Block, ptr %28, i64 0, i32 3
  %32 = load i1, ptr %memberidx2.i.i, align 1
  %33 = or i1 %31, %32
  br i1 %33, label %CodeGen_codegen_while_stmt.exit, label %if.entry.i68

if.entry.i68:                                     ; preds = %CodeGen_codegen_block.exit
  %34 = load ptr, ptr %memberidx6.i, align 8
  %35 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr %34)
  %36 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %35, ptr %11, ptr %13)
  br label %CodeGen_codegen_while_stmt.exit

CodeGen_codegen_while_stmt.exit:                  ; preds = %CodeGen_codegen_block.exit, %if.entry.i68
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %13)
  store ptr %14, ptr %memberidx2.i, align 8
  store ptr %15, ptr %memberidx3.i67, align 8
  %.pr74 = load i64, ptr %2, align 4
  br label %ifend8

ifend8:                                           ; preds = %ifend4, %CodeGen_codegen_while_stmt.exit
  %37 = phi i64 [ %8, %ifend4 ], [ %.pr74, %CodeGen_codegen_while_stmt.exit ]
  %38 = icmp eq i64 %37, 5
  br i1 %38, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %39 = load ptr, ptr %memberidx13, align 8
  %40 = tail call ptr @LLVMBuildBr(ptr %1, ptr %39)
  %.pre79 = load i64, ptr %2, align 4
  br label %ifend12

ifend12:                                          ; preds = %ifend8, %if.entry10
  %41 = phi i64 [ %37, %ifend8 ], [ %.pre79, %if.entry10 ]
  %42 = icmp eq i64 %41, 6
  br i1 %42, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %ifend12
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  %44 = tail call ptr @LLVMBuildBr(ptr %1, ptr %43)
  %.pr75 = load i64, ptr %2, align 4
  br label %ifend17

ifend17:                                          ; preds = %ifend12, %if.entry15
  %45 = phi i64 [ %41, %ifend12 ], [ %.pr75, %if.entry15 ]
  %46 = icmp eq i64 %45, 1
  br i1 %46, label %if.entry20, label %ifend22

if.entry20:                                       ; preds = %ifend17
  tail call fastcc void @CodeGen_codegen_var_declaration(ptr %0, ptr %1, ptr nonnull %2)
  %.pre80 = load i64, ptr %2, align 4
  br label %ifend22

ifend22:                                          ; preds = %ifend17, %if.entry20
  %47 = phi i64 [ %45, %ifend17 ], [ %.pre80, %if.entry20 ]
  %48 = icmp eq i64 %47, 2
  br i1 %48, label %if.entry24, label %ifend26

if.entry24:                                       ; preds = %ifend22
  tail call fastcc void @CodeGen_codegen_const_declaration(ptr %0, ptr %1, ptr nonnull %2)
  %.pr76 = load i64, ptr %2, align 4
  br label %ifend26

ifend26:                                          ; preds = %ifend22, %if.entry24
  %49 = phi i64 [ %47, %ifend22 ], [ %.pr76, %if.entry24 ]
  %50 = icmp eq i64 %49, 7
  br i1 %50, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend26
  %memberidx.i = getelementptr inbounds %ReturnStatement, ptr %2, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i, align 8
  %.not.i = icmp eq ptr %51, null
  br i1 %.not.i, label %ifend.i, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry28
  %52 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %51)
  %53 = load ptr, ptr %memberidx.i, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %53, i64 0, i32 3
  %54 = load ptr, ptr %memberidx3.i, align 8
  %55 = load i64, ptr %54, align 4
  %.not12.i = icmp eq i64 %55, 10
  br i1 %.not12.i, label %ifend.i, label %if.entry5.i

ifend.i:                                          ; preds = %if.entry.i, %if.entry28
  %56 = tail call ptr @LLVMBuildRetVoid(ptr %1)
  br label %ifend30

if.entry5.i:                                      ; preds = %if.entry.i
  %57 = tail call ptr @LLVMBuildRet(ptr %1, ptr %52)
  br label %ifend30

ifend30:                                          ; preds = %if.entry5.i, %ifend.i, %ifend26
  %58 = load i64, ptr %2, align 4
  %59 = icmp eq i64 %58, 8
  br i1 %59, label %if.entry32, label %ifend34

if.entry32:                                       ; preds = %ifend30
  %60 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %2)
  br label %ifend34

ifend34:                                          ; preds = %ifend30, %if.entry32
  ret void
}

define internal fastcc void @Map_string_CGClassType__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_CGClassType____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_CGClassType____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_CGClassType__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_CGClassType__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_CGClassType__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_LLVMValueRef__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_LLVMValueRef__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @CodeGen_get_string_val(ptr nocapture %0, ptr %1, ptr %2, ptr %3, ptr nocapture %4, i64 %5) unnamed_addr {
  %7 = load i64, ptr %3, align 4
  switch i64 %7, label %is_object.exit328 [
    i64 0, label %if.entry
    i64 19, label %if.entry.i325
  ]

common.ret:                                       ; preds = %ifend3, %if.entry.i, %Map_string_LLVMValueRef____getitem__.exit, %if.entry.i128, %Map_string_LLVMValueRef____getitem__.exit226, %CodeGen_get_or_codegen_enum_from_typeid.exit, %Array_LLVMValueRef____sl__.exit102, %Array_LLVMValueRef____sl__.exit151, %CodeGen_createGlobalLLVMString.exit167
  %common.ret.op = phi ptr [ %68, %CodeGen_createGlobalLLVMString.exit167 ], [ %101, %Array_LLVMValueRef____sl__.exit151 ], [ %236, %Array_LLVMValueRef____sl__.exit102 ], [ %324, %CodeGen_get_or_codegen_enum_from_typeid.exit ], [ %172, %if.entry.i128 ], [ %167, %Map_string_LLVMValueRef____getitem__.exit226 ], [ %305, %if.entry.i ], [ %300, %Map_string_LLVMValueRef____getitem__.exit ], [ %2, %ifend3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %6
  %8 = tail call ptr @malloc(i32 4)
  store i32 1702195828, ptr %8, align 8
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i177 = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i177, align 8
  %memberidx1.i.i178 = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i178, align 4
  %memberidx2.i.i179 = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i179, align 4
  %memberidx.i171 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %memberidx.i171, align 8
  %11 = tail call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %9)
  %memberidx.i252 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %10, i64 0, i32 1
  %12 = load i64, ptr %memberidx.i252, align 4
  %13 = urem i64 %11, %12
  %14 = load ptr, ptr %10, align 8
  %ptridx.i253 = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i253, align 8
  %.not.i254 = icmp eq ptr %15, null
  br i1 %.not.i254, label %if.entry.i173, label %while.entry.i260

while.entry.i260:                                 ; preds = %if.entry, %else.i272
  %16 = phi ptr [ %26, %else.i272 ], [ %14, %if.entry ]
  %17 = phi i64 [ %27, %else.i272 ], [ %12, %if.entry ]
  %18 = phi ptr [ %30, %else.i272 ], [ %15, %if.entry ]
  %hash.0.i255 = phi i64 [ %29, %else.i272 ], [ %13, %if.entry ]
  %19 = load ptr, ptr %18, align 8
  %memberidx.i.i257 = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i257, align 4
  %21 = load i64, ptr %memberidx1.i.i178, align 4
  %.not.i.i259 = icmp eq i64 %20, %21
  br i1 %.not.i.i259, label %ifend.i.i263, label %else.i272

ifend.i.i263:                                     ; preds = %while.entry.i260
  %memberidx2.i.i261 = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i261, align 8
  %23 = load ptr, ptr %memberidx.i.i177, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.i269, label %ifend.i.i263.else.i272_crit_edge

ifend.i.i263.else.i272_crit_edge:                 ; preds = %ifend.i.i263
  %.pre = load i64, ptr %memberidx.i252, align 4
  %.pre363 = load ptr, ptr %10, align 8
  br label %else.i272

while.end.i269:                                   ; preds = %ifend.i.i263
  %.pre364.pre = load ptr, ptr %10, align 8
  %ptridx9.i267.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre364.pre, i64 %hash.0.i255
  %.pre365.pre = load ptr, ptr %ptridx9.i267.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i268 = icmp eq ptr %.pre365.pre, null
  br i1 %.not29.i268, label %if.entry.i173, label %Map_string_LLVMValueRef____getitem__.exit276

else.i272:                                        ; preds = %ifend.i.i263.else.i272_crit_edge, %while.entry.i260
  %26 = phi ptr [ %.pre363, %ifend.i.i263.else.i272_crit_edge ], [ %16, %while.entry.i260 ]
  %27 = phi i64 [ %.pre, %ifend.i.i263.else.i272_crit_edge ], [ %17, %while.entry.i260 ]
  %28 = add nuw i64 %hash.0.i255, 1
  %29 = urem i64 %28, %27
  %ptridx7.i270 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx7.i270, align 8
  %.not30.i271 = icmp eq ptr %30, null
  br i1 %.not30.i271, label %if.entry.i173, label %while.entry.i260

Map_string_LLVMValueRef____getitem__.exit276:     ; preds = %while.end.i269
  %memberidx15.i274 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre365.pre, i64 0, i32 1
  %31 = load ptr, ptr %memberidx15.i274, align 8
  %32 = icmp eq ptr %31, null
  br i1 %32, label %if.entry.i173, label %CodeGen_createGlobalLLVMString.exit176

if.entry.i173:                                    ; preds = %else.i272, %if.entry, %while.end.i269, %Map_string_LLVMValueRef____getitem__.exit276
  %33 = load ptr, ptr %9, align 8
  %memberidx1.i172 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %33, i64 0, i32 5
  %34 = load ptr, ptr %memberidx1.i172, align 8
  %35 = tail call ptr %34(ptr nonnull %9)
  %36 = tail call ptr @LLVMBuildGlobalString(ptr %1, ptr %35, ptr nonnull @28)
  %37 = load ptr, ptr %memberidx.i171, align 8
  tail call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %37, ptr nonnull %9, ptr %36)
  br label %CodeGen_createGlobalLLVMString.exit176

CodeGen_createGlobalLLVMString.exit176:           ; preds = %Map_string_LLVMValueRef____getitem__.exit276, %if.entry.i173
  %str.0.i174 = phi ptr [ %36, %if.entry.i173 ], [ %31, %Map_string_LLVMValueRef____getitem__.exit276 ]
  %38 = tail call ptr @malloc(i32 5)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %38, ptr noundef nonnull align 8 dereferenceable(5) @86, i64 5, i1 false)
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i168 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i168, align 8
  %memberidx1.i.i169 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i169, align 4
  %memberidx2.i.i170 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i170, align 4
  %40 = load ptr, ptr %memberidx.i171, align 8
  %41 = tail call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %39)
  %memberidx.i227 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %40, i64 0, i32 1
  %42 = load i64, ptr %memberidx.i227, align 4
  %43 = urem i64 %41, %42
  %44 = load ptr, ptr %40, align 8
  %ptridx.i228 = getelementptr inbounds ptr, ptr %44, i64 %43
  %45 = load ptr, ptr %ptridx.i228, align 8
  %.not.i229 = icmp eq ptr %45, null
  br i1 %.not.i229, label %if.entry.i164, label %while.entry.i235

while.entry.i235:                                 ; preds = %CodeGen_createGlobalLLVMString.exit176, %else.i247
  %46 = phi ptr [ %56, %else.i247 ], [ %44, %CodeGen_createGlobalLLVMString.exit176 ]
  %47 = phi i64 [ %57, %else.i247 ], [ %42, %CodeGen_createGlobalLLVMString.exit176 ]
  %48 = phi ptr [ %60, %else.i247 ], [ %45, %CodeGen_createGlobalLLVMString.exit176 ]
  %hash.0.i230 = phi i64 [ %59, %else.i247 ], [ %43, %CodeGen_createGlobalLLVMString.exit176 ]
  %49 = load ptr, ptr %48, align 8
  %memberidx.i.i232 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx.i.i232, align 4
  %51 = load i64, ptr %memberidx1.i.i169, align 4
  %.not.i.i234 = icmp eq i64 %50, %51
  br i1 %.not.i.i234, label %ifend.i.i238, label %else.i247

ifend.i.i238:                                     ; preds = %while.entry.i235
  %memberidx2.i.i236 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i236, align 8
  %53 = load ptr, ptr %memberidx.i.i168, align 8
  %54 = tail call i64 @memcmp(ptr %52, ptr %53, i64 %50)
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %while.end.i244, label %ifend.i.i238.else.i247_crit_edge

ifend.i.i238.else.i247_crit_edge:                 ; preds = %ifend.i.i238
  %.pre366 = load i64, ptr %memberidx.i227, align 4
  %.pre367 = load ptr, ptr %40, align 8
  br label %else.i247

while.end.i244:                                   ; preds = %ifend.i.i238
  %.pre368.pre = load ptr, ptr %40, align 8
  %ptridx9.i242.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre368.pre, i64 %hash.0.i230
  %.pre369.pre = load ptr, ptr %ptridx9.i242.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i243 = icmp eq ptr %.pre369.pre, null
  br i1 %.not29.i243, label %if.entry.i164, label %Map_string_LLVMValueRef____getitem__.exit251

else.i247:                                        ; preds = %ifend.i.i238.else.i247_crit_edge, %while.entry.i235
  %56 = phi ptr [ %.pre367, %ifend.i.i238.else.i247_crit_edge ], [ %46, %while.entry.i235 ]
  %57 = phi i64 [ %.pre366, %ifend.i.i238.else.i247_crit_edge ], [ %47, %while.entry.i235 ]
  %58 = add nuw i64 %hash.0.i230, 1
  %59 = urem i64 %58, %57
  %ptridx7.i245 = getelementptr inbounds ptr, ptr %56, i64 %59
  %60 = load ptr, ptr %ptridx7.i245, align 8
  %.not30.i246 = icmp eq ptr %60, null
  br i1 %.not30.i246, label %if.entry.i164, label %while.entry.i235

Map_string_LLVMValueRef____getitem__.exit251:     ; preds = %while.end.i244
  %memberidx15.i249 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre369.pre, i64 0, i32 1
  %61 = load ptr, ptr %memberidx15.i249, align 8
  %62 = icmp eq ptr %61, null
  br i1 %62, label %if.entry.i164, label %CodeGen_createGlobalLLVMString.exit167

if.entry.i164:                                    ; preds = %else.i247, %CodeGen_createGlobalLLVMString.exit176, %while.end.i244, %Map_string_LLVMValueRef____getitem__.exit251
  %63 = load ptr, ptr %39, align 8
  %memberidx1.i163 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i64 0, i32 5
  %64 = load ptr, ptr %memberidx1.i163, align 8
  %65 = tail call ptr %64(ptr nonnull %39)
  %66 = tail call ptr @LLVMBuildGlobalString(ptr %1, ptr %65, ptr nonnull @28)
  %67 = load ptr, ptr %memberidx.i171, align 8
  tail call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %67, ptr nonnull %39, ptr %66)
  br label %CodeGen_createGlobalLLVMString.exit167

CodeGen_createGlobalLLVMString.exit167:           ; preds = %Map_string_LLVMValueRef____getitem__.exit251, %if.entry.i164
  %str.0.i165 = phi ptr [ %66, %if.entry.i164 ], [ %61, %Map_string_LLVMValueRef____getitem__.exit251 ]
  %68 = tail call ptr @LLVMBuildSelect(ptr %1, ptr %2, ptr %str.0.i174, ptr %str.0.i165, ptr nonnull @28)
  br label %common.ret

if.entry.i325:                                    ; preds = %6, %if.entry.i325
  %.tr5.i323 = phi ptr [ %69, %if.entry.i325 ], [ %3, %6 ]
  %memberidx1.i324 = getelementptr inbounds %GenericType, ptr %.tr5.i323, i64 0, i32 3
  %69 = load ptr, ptr %memberidx1.i324, align 8
  %70 = load i64, ptr %69, align 4
  %71 = icmp eq i64 %70, 19
  br i1 %71, label %if.entry.i325, label %is_object.exit328

is_object.exit328:                                ; preds = %if.entry.i325, %6
  %.lcssa.i326 = phi i64 [ %7, %6 ], [ %70, %if.entry.i325 ]
  %72 = icmp eq i64 %.lcssa.i326, 11
  br i1 %72, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %is_object.exit328
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %73 = load ptr, ptr %memberidx, align 8
  %74 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %74, ptr noundef nonnull align 8 dereferenceable(6) @173, i64 6, i1 false)
  %75 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %75, align 8
  %memberidx.i.i159 = getelementptr inbounds %string, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i.i159, align 8
  %memberidx1.i.i160 = getelementptr inbounds %string, ptr %75, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i160, align 4
  %memberidx2.i.i161 = getelementptr inbounds %string, ptr %75, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i161, align 4
  %76 = load i64, ptr %3, align 4
  %77 = icmp eq i64 %76, 19
  br i1 %77, label %if.entry.i319, label %is_object.exit322.thread

if.entry.i319:                                    ; preds = %if.entry1, %if.entry.i319
  %.tr5.i317 = phi ptr [ %78, %if.entry.i319 ], [ %3, %if.entry1 ]
  %memberidx1.i318 = getelementptr inbounds %GenericType, ptr %.tr5.i317, i64 0, i32 3
  %78 = load ptr, ptr %memberidx1.i318, align 8
  %79 = load i64, ptr %78, align 4
  switch i64 %79, label %ifend6 [
    i64 19, label %if.entry.i319
    i64 11, label %tailrecurse.i303.preheader
  ]

is_object.exit322.thread:                         ; preds = %if.entry1
  %80 = icmp eq i64 %76, 11
  br i1 %80, label %if.entry3.i315, label %ifend6

tailrecurse.i303.preheader:                       ; preds = %if.entry.i319
  br i1 %77, label %if.entry.i306, label %if.entry3.i315

if.entry.i306:                                    ; preds = %tailrecurse.i303.preheader, %if.entry.i306
  %.tr11.i302354 = phi ptr [ %81, %if.entry.i306 ], [ %3, %tailrecurse.i303.preheader ]
  %memberidx1.i305 = getelementptr inbounds %GenericType, ptr %.tr11.i302354, i64 0, i32 3
  %81 = load ptr, ptr %memberidx1.i305, align 8
  %82 = load i64, ptr %81, align 4
  %switch = icmp eq i64 %82, 19
  br i1 %switch, label %if.entry.i306, label %if.entry3.i315

if.entry3.i315:                                   ; preds = %if.entry.i306, %is_object.exit322.thread, %tailrecurse.i303.preheader
  %.tr11.i302.lcssa = phi ptr [ %3, %tailrecurse.i303.preheader ], [ %3, %is_object.exit322.thread ], [ %81, %if.entry.i306 ]
  %memberidx6.i307 = getelementptr inbounds %ObjectType, ptr %.tr11.i302.lcssa, i64 0, i32 1
  %83 = load ptr, ptr %memberidx6.i307, align 8
  %memberidx.i.i308 = getelementptr inbounds %Program, ptr %73, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i.i308, align 8
  %85 = load i64, ptr %83, align 4
  %memberidx.i.i.i309 = getelementptr inbounds %Array_Module_, ptr %84, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i.i.i309, align 8
  %ptridx.i.i.i310 = getelementptr inbounds ptr, ptr %86, i64 %85
  %87 = load ptr, ptr %ptridx.i.i.i310, align 8
  %memberidx2.i.i311 = getelementptr inbounds %Module, ptr %87, i64 0, i32 4
  %88 = load ptr, ptr %memberidx2.i.i311, align 8
  %memberidx3.i.i312 = getelementptr inbounds %TypeId, ptr %83, i64 0, i32 2
  %89 = load i64, ptr %memberidx3.i.i312, align 4
  %memberidx.i5.i.i313 = getelementptr inbounds %Array_Class_, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i5.i.i313, align 8
  %ptridx.i6.i.i314 = getelementptr inbounds ptr, ptr %90, i64 %89
  %91 = load ptr, ptr %ptridx.i6.i.i314, align 8
  %memberidx.i153 = getelementptr inbounds %Class, ptr %91, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i153, align 8
  %memberidx.i.i154 = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  %93 = load i64, ptr %memberidx.i.i154, align 4
  %.not.i.i = icmp eq i64 %93, 6
  br i1 %.not.i.i, label %string___eq__.exit.i, label %ifend6

string___eq__.exit.i:                             ; preds = %if.entry3.i315
  %memberidx2.i.i157 = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  %94 = load ptr, ptr %memberidx2.i.i157, align 8
  %95 = tail call i64 @memcmp(ptr %94, ptr %74, i64 6)
  %96 = icmp eq i64 %95, 0
  %97 = load ptr, ptr %91, align 8
  %98 = load i64, ptr %97, align 4
  %99 = icmp eq i64 %98, 1
  %100 = and i1 %96, %99
  br i1 %100, label %if.entry4, label %ifend6

ifend3:                                           ; preds = %is_object.exit328
  switch i64 %7, label %common.ret [
    i64 15, label %if.entry35
    i64 12, label %if.entry39
  ]

if.entry4:                                        ; preds = %string___eq__.exit.i
  %101 = tail call fastcc ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %2)
  %memberidx.i142 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %102 = load i64, ptr %memberidx.i142, align 4
  %memberidx1.i143 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %103 = load i64, ptr %memberidx1.i143, align 4
  %.not.i144 = icmp slt i64 %102, %103
  br i1 %.not.i144, label %if.entry4.Array_LLVMValueRef____sl__.exit151_crit_edge, label %if.entry.i147

if.entry4.Array_LLVMValueRef____sl__.exit151_crit_edge: ; preds = %if.entry4
  %memberidx4.i148.phi.trans.insert = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %.pre384 = load ptr, ptr %memberidx4.i148.phi.trans.insert, align 8
  br label %Array_LLVMValueRef____sl__.exit151

if.entry.i147:                                    ; preds = %if.entry4
  %104 = shl nuw i64 %103, 1
  store i64 %104, ptr %memberidx1.i143, align 4
  %memberidx2.i.i146 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %105 = load ptr, ptr %memberidx2.i.i146, align 8
  %106 = shl i64 %103, 4
  %107 = tail call ptr @realloc(ptr %105, i64 %106)
  store ptr %107, ptr %memberidx2.i.i146, align 8
  %.pre383 = load i64, ptr %memberidx.i142, align 4
  br label %Array_LLVMValueRef____sl__.exit151

Array_LLVMValueRef____sl__.exit151:               ; preds = %if.entry4.Array_LLVMValueRef____sl__.exit151_crit_edge, %if.entry.i147
  %108 = phi ptr [ %.pre384, %if.entry4.Array_LLVMValueRef____sl__.exit151_crit_edge ], [ %107, %if.entry.i147 ]
  %109 = phi i64 [ %102, %if.entry4.Array_LLVMValueRef____sl__.exit151_crit_edge ], [ %.pre383, %if.entry.i147 ]
  %110 = add nsw i64 %109, 1
  store i64 %110, ptr %memberidx.i142, align 4
  %ptridx.i149 = getelementptr inbounds ptr, ptr %108, i64 %109
  store ptr %101, ptr %ptridx.i149, align 8
  br label %common.ret

ifend6:                                           ; preds = %if.entry.i319, %is_object.exit322.thread, %if.entry3.i315, %string___eq__.exit.i
  %111 = load ptr, ptr %memberidx, align 8
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i293, %ifend6
  %.tr11.i = phi ptr [ %3, %ifend6 ], [ %113, %if.entry.i293 ]
  %112 = load i64, ptr %.tr11.i, align 4
  switch i64 %112, label %get_class_from_type.exit [
    i64 19, label %if.entry.i293
    i64 11, label %if.entry3.i
  ]

if.entry.i293:                                    ; preds = %tailrecurse.i
  %memberidx1.i292 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  %113 = load ptr, ptr %memberidx1.i292, align 8
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i294 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %114 = load ptr, ptr %memberidx6.i294, align 8
  %memberidx.i.i295 = getelementptr inbounds %Program, ptr %111, i64 0, i32 1
  %115 = load ptr, ptr %memberidx.i.i295, align 8
  %116 = load i64, ptr %114, align 4
  %memberidx.i.i.i296 = getelementptr inbounds %Array_Module_, ptr %115, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i.i.i296, align 8
  %ptridx.i.i.i297 = getelementptr inbounds ptr, ptr %117, i64 %116
  %118 = load ptr, ptr %ptridx.i.i.i297, align 8
  %memberidx2.i.i298 = getelementptr inbounds %Module, ptr %118, i64 0, i32 4
  %119 = load ptr, ptr %memberidx2.i.i298, align 8
  %memberidx3.i.i299 = getelementptr inbounds %TypeId, ptr %114, i64 0, i32 2
  %120 = load i64, ptr %memberidx3.i.i299, align 4
  %memberidx.i5.i.i300 = getelementptr inbounds %Array_Class_, ptr %119, i64 0, i32 1
  %121 = load ptr, ptr %memberidx.i5.i.i300, align 8
  %ptridx.i6.i.i301 = getelementptr inbounds ptr, ptr %121, i64 %120
  %122 = load ptr, ptr %ptridx.i6.i.i301, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i291 = phi ptr [ %122, %if.entry3.i ], [ null, %tailrecurse.i ]
  %123 = alloca %StringBuilder, align 8
  %memberidx8 = getelementptr inbounds %Class, ptr %common.ret.op.i291, i64 0, i32 1
  %124 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %string, ptr %124, i64 0, i32 2
  %125 = load i64, ptr %memberidx9, align 4
  %126 = add nuw i64 %125, 14
  store ptr @VTableStringBuilder, ptr %123, align 8
  %memberidx.i138 = getelementptr inbounds %StringBuilder, ptr %123, i64 0, i32 2
  store i64 %126, ptr %memberidx.i138, align 8
  %memberidx1.i139 = getelementptr inbounds %StringBuilder, ptr %123, i64 0, i32 1
  %127 = trunc i64 %126 to i32
  %128 = tail call ptr @malloc(i32 %127)
  store ptr %128, ptr %memberidx1.i139, align 8
  %memberidx3.i140 = getelementptr inbounds %StringBuilder, ptr %123, i64 0, i32 3
  store ptr %128, ptr %memberidx3.i140, align 8
  %memberidx5.i141 = getelementptr inbounds %StringBuilder, ptr %123, i64 0, i32 4
  store i64 0, ptr %memberidx5.i141, align 8
  %129 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr }>, ptr @VTableStringBuilder, i64 0, i32 1), align 8
  %130 = load ptr, ptr %memberidx8, align 8
  %131 = load ptr, ptr %130, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %131, i64 0, i32 5
  %132 = load ptr, ptr %memberidx12, align 8
  %133 = tail call ptr %132(ptr nonnull %130)
  %134 = alloca ptr, align 8
  %135 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %134, ptr nonnull @228, ptr %133)
  %136 = load ptr, ptr %134, align 8
  %137 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %137, align 8
  %memberidx.i135 = getelementptr inbounds %string, ptr %137, i64 0, i32 1
  store ptr %136, ptr %memberidx.i135, align 8
  %memberidx1.i136 = getelementptr inbounds %string, ptr %137, i64 0, i32 2
  store i64 %135, ptr %memberidx1.i136, align 4
  %memberidx2.i137 = getelementptr inbounds %string, ptr %137, i64 0, i32 3
  store i64 %135, ptr %memberidx2.i137, align 4
  tail call void @free(ptr %133)
  call void %129(ptr nonnull %123, ptr nonnull %137)
  %138 = icmp eq i64 %5, 3
  br i1 %138, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %get_class_from_type.exit
  %139 = load ptr, ptr %123, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %139, i64 0, i32 1
  %140 = load ptr, ptr %memberidx16, align 8
  %141 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %141, ptr noundef nonnull align 8 dereferenceable(6) @229, i64 6, i1 false)
  %142 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %142, align 8
  %memberidx.i.i132 = getelementptr inbounds %string, ptr %142, i64 0, i32 1
  store ptr %141, ptr %memberidx.i.i132, align 8
  %memberidx1.i.i133 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i133, align 4
  %memberidx2.i.i134 = getelementptr inbounds %string, ptr %142, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i134, align 4
  call void %140(ptr nonnull %123, ptr nonnull %142)
  %143 = load ptr, ptr %123, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %143, i64 0, i32 3
  %144 = load ptr, ptr %memberidx17, align 8
  %145 = call ptr %144(ptr nonnull %123)
  %memberidx.i126 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %146 = load ptr, ptr %memberidx.i126, align 8
  %147 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %145)
  %memberidx.i202 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %146, i64 0, i32 1
  %148 = load i64, ptr %memberidx.i202, align 4
  %149 = urem i64 %147, %148
  %150 = load ptr, ptr %146, align 8
  %ptridx.i203 = getelementptr inbounds ptr, ptr %150, i64 %149
  %151 = load ptr, ptr %ptridx.i203, align 8
  %.not.i204 = icmp eq ptr %151, null
  br i1 %.not.i204, label %if.entry.i128, label %while.entry.i210.preheader

while.entry.i210.preheader:                       ; preds = %if.entry13
  %memberidx1.i.i208 = getelementptr inbounds %string, ptr %145, i64 0, i32 2
  %memberidx3.i.i212 = getelementptr inbounds %string, ptr %145, i64 0, i32 1
  br label %while.entry.i210

while.entry.i210:                                 ; preds = %while.entry.i210.preheader, %else.i222
  %152 = phi ptr [ %162, %else.i222 ], [ %150, %while.entry.i210.preheader ]
  %153 = phi i64 [ %163, %else.i222 ], [ %148, %while.entry.i210.preheader ]
  %154 = phi ptr [ %166, %else.i222 ], [ %151, %while.entry.i210.preheader ]
  %hash.0.i205 = phi i64 [ %165, %else.i222 ], [ %149, %while.entry.i210.preheader ]
  %155 = load ptr, ptr %154, align 8
  %memberidx.i.i207 = getelementptr inbounds %string, ptr %155, i64 0, i32 2
  %156 = load i64, ptr %memberidx.i.i207, align 4
  %157 = load i64, ptr %memberidx1.i.i208, align 4
  %.not.i.i209 = icmp eq i64 %156, %157
  br i1 %.not.i.i209, label %ifend.i.i213, label %else.i222

ifend.i.i213:                                     ; preds = %while.entry.i210
  %memberidx2.i.i211 = getelementptr inbounds %string, ptr %155, i64 0, i32 1
  %158 = load ptr, ptr %memberidx2.i.i211, align 8
  %159 = load ptr, ptr %memberidx3.i.i212, align 8
  %160 = call i64 @memcmp(ptr %158, ptr %159, i64 %156)
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %while.end.i219, label %ifend.i.i213.else.i222_crit_edge

ifend.i.i213.else.i222_crit_edge:                 ; preds = %ifend.i.i213
  %.pre379 = load i64, ptr %memberidx.i202, align 4
  %.pre380 = load ptr, ptr %146, align 8
  br label %else.i222

while.end.i219:                                   ; preds = %ifend.i.i213
  %.pre381.pre = load ptr, ptr %146, align 8
  %ptridx9.i217.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre381.pre, i64 %hash.0.i205
  %.pre382.pre = load ptr, ptr %ptridx9.i217.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i218 = icmp eq ptr %.pre382.pre, null
  br i1 %.not29.i218, label %if.entry.i128, label %Map_string_LLVMValueRef____getitem__.exit226

else.i222:                                        ; preds = %ifend.i.i213.else.i222_crit_edge, %while.entry.i210
  %162 = phi ptr [ %.pre380, %ifend.i.i213.else.i222_crit_edge ], [ %152, %while.entry.i210 ]
  %163 = phi i64 [ %.pre379, %ifend.i.i213.else.i222_crit_edge ], [ %153, %while.entry.i210 ]
  %164 = add nuw i64 %hash.0.i205, 1
  %165 = urem i64 %164, %163
  %ptridx7.i220 = getelementptr inbounds ptr, ptr %162, i64 %165
  %166 = load ptr, ptr %ptridx7.i220, align 8
  %.not30.i221 = icmp eq ptr %166, null
  br i1 %.not30.i221, label %if.entry.i128, label %while.entry.i210

Map_string_LLVMValueRef____getitem__.exit226:     ; preds = %while.end.i219
  %memberidx15.i224 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre382.pre, i64 0, i32 1
  %167 = load ptr, ptr %memberidx15.i224, align 8
  %168 = icmp eq ptr %167, null
  br i1 %168, label %if.entry.i128, label %common.ret

if.entry.i128:                                    ; preds = %else.i222, %if.entry13, %while.end.i219, %Map_string_LLVMValueRef____getitem__.exit226
  %169 = load ptr, ptr %145, align 8
  %memberidx1.i127 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %169, i64 0, i32 5
  %170 = load ptr, ptr %memberidx1.i127, align 8
  %171 = call ptr %170(ptr nonnull %145)
  %172 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %171, ptr nonnull @28)
  %173 = load ptr, ptr %memberidx.i126, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %173, ptr nonnull %145, ptr %172)
  br label %common.ret

ifend15:                                          ; preds = %get_class_from_type.exit
  %memberidx18 = getelementptr inbounds %Class, ptr %common.ret.op.i291, i64 0, i32 6
  %174 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Map_string_PropId_, ptr %174, i64 0, i32 2
  %175 = load i64, ptr %memberidx19, align 4
  %176 = alloca ptr, i64 %175, align 8
  %177 = call ptr @malloc(i32 25)
  %178 = load ptr, ptr %174, align 8
  %memberidx1.i122 = getelementptr inbounds %Map_string_PropId_, ptr %174, i64 0, i32 1
  %179 = load i64, ptr %memberidx1.i122, align 4
  %180 = load i64, ptr %memberidx19, align 4
  store i1 false, ptr %177, align 1
  %memberidx1.i.i124 = getelementptr inbounds %MapIterator_string_PropId_, ptr %177, i64 0, i32 1
  store ptr %178, ptr %memberidx1.i.i124, align 8
  %memberidx2.i.i125 = getelementptr inbounds %MapIterator_string_PropId_, ptr %177, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %177, i64 0, i32 3
  store i64 %180, ptr %memberidx3.i.i, align 4
  %181 = add nsw i64 %179, -1
  store i64 %181, ptr %memberidx2.i.i125, align 4
  %182 = icmp sgt i64 %179, 0
  br i1 %182, label %while.entry.i116, label %MapIterator_string_PropId__next.exit121

while.entry.i116:                                 ; preds = %ifend15, %ifend.i120
  %183 = phi i64 [ %186, %ifend.i120 ], [ %181, %ifend15 ]
  %184 = phi ptr [ %incdec.ptr.i114, %ifend.i120 ], [ %178, %ifend15 ]
  %incdec.ptr.i114 = getelementptr inbounds ptr, ptr %184, i64 1
  %185 = load ptr, ptr %184, align 8
  %.not.i115 = icmp eq ptr %185, null
  br i1 %.not.i115, label %ifend.i120, label %MapIterator_string_PropId__next.exit121.loopexit

ifend.i120:                                       ; preds = %while.entry.i116
  %186 = add nsw i64 %183, -1
  store i64 %186, ptr %memberidx2.i.i125, align 4
  %187 = icmp sgt i64 %183, 0
  br i1 %187, label %while.entry.i116, label %MapIterator_string_PropId__next.exit121.loopexit

MapIterator_string_PropId__next.exit121.loopexit: ; preds = %ifend.i120, %while.entry.i116
  %188 = phi i64 [ %186, %ifend.i120 ], [ %183, %while.entry.i116 ]
  store ptr %incdec.ptr.i114, ptr %memberidx1.i.i124, align 8
  br label %MapIterator_string_PropId__next.exit121

MapIterator_string_PropId__next.exit121:          ; preds = %MapIterator_string_PropId__next.exit121.loopexit, %ifend15
  %189 = phi i64 [ %188, %MapIterator_string_PropId__next.exit121.loopexit ], [ %181, %ifend15 ]
  %.pn.in.promoted = phi ptr [ %incdec.ptr.i114, %MapIterator_string_PropId__next.exit121.loopexit ], [ %178, %ifend15 ]
  %storemerge334344 = icmp slt i64 %180, 1
  br i1 %storemerge334344, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit121
  %190 = add nuw i64 %5, 1
  %memberidx.i86 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %memberidx1.i87 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %memberidx2.i.i90 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit
  %191 = phi i64 [ %189, %for.body.lr.ph ], [ %276, %MapIterator_string_PropId__next.exit ]
  %storemerge335348.in = phi i64 [ %180, %for.body.lr.ph ], [ %storemerge335348, %MapIterator_string_PropId__next.exit ]
  %.pn341347 = phi ptr [ %.pn.in.promoted, %for.body.lr.ph ], [ %.pn340, %MapIterator_string_PropId__next.exit ]
  %192 = phi i64 [ 0, %for.body.lr.ph ], [ %255, %MapIterator_string_PropId__next.exit ]
  %storemerge335348 = add nsw i64 %storemerge335348.in, -1
  %storemerge349.in = getelementptr inbounds ptr, ptr %.pn341347, i64 -1
  %storemerge349 = load ptr, ptr %storemerge349.in, align 8
  %193 = load ptr, ptr %memberidx, align 8
  %memberidx23 = getelementptr inbounds %MapEntry_string_PropId_, ptr %storemerge349, i64 0, i32 1
  %194 = load ptr, ptr %memberidx23, align 8
  %memberidx.i.i106 = getelementptr inbounds %PropId, ptr %194, i64 0, i32 1
  %195 = load ptr, ptr %memberidx.i.i106, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %193, i64 0, i32 1
  %196 = load ptr, ptr %memberidx.i.i.i, align 8
  %197 = load i64, ptr %195, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %196, i64 0, i32 1
  %198 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %198, i64 %197
  %199 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %199, i64 0, i32 4
  %200 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %195, i64 0, i32 2
  %201 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %200, i64 0, i32 1
  %202 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %202, i64 %201
  %203 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %204 = load i64, ptr %194, align 4
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %if.entry.i109, label %ifend.i111

if.entry.i109:                                    ; preds = %for.body
  %memberidx1.i107 = getelementptr inbounds %Class, ptr %203, i64 0, i32 5
  %206 = load ptr, ptr %memberidx1.i107, align 8
  %memberidx2.i108 = getelementptr inbounds %PropId, ptr %194, i64 0, i32 2
  %207 = load i64, ptr %memberidx2.i108, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %206, i64 0, i32 1
  %208 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %208, i64 %207
  %209 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %209, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i111:                                       ; preds = %for.body
  %memberidx4.i110 = getelementptr inbounds %Class, ptr %203, i64 0, i32 4
  %210 = load ptr, ptr %memberidx4.i110, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %194, i64 0, i32 2
  %211 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %210, i64 0, i32 1
  %212 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %212, i64 %211
  %213 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %213, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i109, %ifend.i111
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i109 ], [ %memberidx6.i, %ifend.i111 ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %214 = load ptr, ptr %storemerge349, align 8
  %215 = call fastcc ptr @CodeGen_get_member_with_name(ptr nonnull %0, ptr %1, ptr %2, ptr nonnull %3, ptr %214, ptr null)
  %216 = call fastcc ptr @CodeGen_get_string_val(ptr nonnull %0, ptr %1, ptr %215, ptr %common.ret.op.i, ptr %4, i64 %190)
  %217 = load i64, ptr %common.ret.op.i, align 4
  %218 = icmp eq i64 %217, 19
  br i1 %218, label %if.entry.i289, label %is_object.exit

if.entry.i289:                                    ; preds = %get_class_prop_type.exit, %if.entry.i289
  %.tr5.i = phi ptr [ %219, %if.entry.i289 ], [ %common.ret.op.i, %get_class_prop_type.exit ]
  %memberidx1.i288 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %219 = load ptr, ptr %memberidx1.i288, align 8
  %220 = load i64, ptr %219, align 4
  %221 = icmp eq i64 %220, 19
  br i1 %221, label %if.entry.i289, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i289, %get_class_prop_type.exit
  %.lcssa.i = phi i64 [ %217, %get_class_prop_type.exit ], [ %220, %if.entry.i289 ]
  %222 = icmp eq i64 %.lcssa.i, 11
  %223 = call ptr @LLVMTypeOf(ptr %216)
  %224 = call i64 @LLVMGetTypeKind(ptr %223)
  %225 = icmp ne i64 %224, 12
  %226 = call i1 @LLVMIsGlobalConstant(ptr %216)
  %227 = or i1 %222, %226
  %228 = or i1 %225, %227
  br i1 %228, label %ifend27, label %if.entry25

for.end:                                          ; preds = %MapIterator_string_PropId__next.exit, %MapIterator_string_PropId__next.exit121
  tail call void @free(ptr nonnull %177)
  %229 = load ptr, ptr %123, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %229, i64 0, i32 1
  %230 = load ptr, ptr %memberidx32, align 8
  %231 = call ptr @malloc(i32 1)
  store i8 125, ptr %231, align 8
  %232 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %232, align 8
  %memberidx.i.i103 = getelementptr inbounds %string, ptr %232, i64 0, i32 1
  store ptr %231, ptr %memberidx.i.i103, align 8
  %memberidx1.i.i104 = getelementptr inbounds %string, ptr %232, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i104, align 4
  %memberidx2.i.i105 = getelementptr inbounds %string, ptr %232, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i105, align 4
  call void %230(ptr nonnull %123, ptr nonnull %232)
  %233 = load ptr, ptr %123, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %233, i64 0, i32 3
  %234 = load ptr, ptr %memberidx34, align 8
  %235 = call ptr %234(ptr nonnull %123)
  %236 = call fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr %235, ptr nonnull %176, i64 %175, ptr null)
  %memberidx.i93 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %237 = load i64, ptr %memberidx.i93, align 4
  %memberidx1.i94 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %238 = load i64, ptr %memberidx1.i94, align 4
  %.not.i95 = icmp slt i64 %237, %238
  br i1 %.not.i95, label %for.end.Array_LLVMValueRef____sl__.exit102_crit_edge, label %if.entry.i98

for.end.Array_LLVMValueRef____sl__.exit102_crit_edge: ; preds = %for.end
  %memberidx4.i99.phi.trans.insert = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %.pre378 = load ptr, ptr %memberidx4.i99.phi.trans.insert, align 8
  br label %Array_LLVMValueRef____sl__.exit102

if.entry.i98:                                     ; preds = %for.end
  %239 = shl nuw i64 %238, 1
  store i64 %239, ptr %memberidx1.i94, align 4
  %memberidx2.i.i97 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %240 = load ptr, ptr %memberidx2.i.i97, align 8
  %241 = shl i64 %238, 4
  %242 = call ptr @realloc(ptr %240, i64 %241)
  store ptr %242, ptr %memberidx2.i.i97, align 8
  %.pre377 = load i64, ptr %memberidx.i93, align 4
  br label %Array_LLVMValueRef____sl__.exit102

Array_LLVMValueRef____sl__.exit102:               ; preds = %for.end.Array_LLVMValueRef____sl__.exit102_crit_edge, %if.entry.i98
  %243 = phi ptr [ %.pre378, %for.end.Array_LLVMValueRef____sl__.exit102_crit_edge ], [ %242, %if.entry.i98 ]
  %244 = phi i64 [ %237, %for.end.Array_LLVMValueRef____sl__.exit102_crit_edge ], [ %.pre377, %if.entry.i98 ]
  %245 = add nsw i64 %244, 1
  store i64 %245, ptr %memberidx.i93, align 4
  %ptridx.i100 = getelementptr inbounds ptr, ptr %243, i64 %244
  store ptr %236, ptr %ptridx.i100, align 8
  br label %common.ret

if.entry25:                                       ; preds = %is_object.exit
  %246 = load i64, ptr %memberidx.i86, align 4
  %247 = load i64, ptr %memberidx1.i87, align 4
  %.not.i88 = icmp slt i64 %246, %247
  br i1 %.not.i88, label %if.entry25.Array_LLVMValueRef____sl__.exit_crit_edge, label %if.entry.i91

if.entry25.Array_LLVMValueRef____sl__.exit_crit_edge: ; preds = %if.entry25
  %.pre376 = load ptr, ptr %memberidx2.i.i90, align 8
  br label %Array_LLVMValueRef____sl__.exit

if.entry.i91:                                     ; preds = %if.entry25
  %248 = shl nuw i64 %247, 1
  store i64 %248, ptr %memberidx1.i87, align 4
  %249 = load ptr, ptr %memberidx2.i.i90, align 8
  %250 = shl i64 %247, 4
  %251 = call ptr @realloc(ptr %249, i64 %250)
  store ptr %251, ptr %memberidx2.i.i90, align 8
  %.pre375 = load i64, ptr %memberidx.i86, align 4
  br label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %if.entry25.Array_LLVMValueRef____sl__.exit_crit_edge, %if.entry.i91
  %252 = phi ptr [ %.pre376, %if.entry25.Array_LLVMValueRef____sl__.exit_crit_edge ], [ %251, %if.entry.i91 ]
  %253 = phi i64 [ %246, %if.entry25.Array_LLVMValueRef____sl__.exit_crit_edge ], [ %.pre375, %if.entry.i91 ]
  %254 = add nsw i64 %253, 1
  store i64 %254, ptr %memberidx.i86, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %252, i64 %253
  store ptr %216, ptr %ptridx.i, align 8
  br label %ifend27

ifend27:                                          ; preds = %is_object.exit, %Array_LLVMValueRef____sl__.exit
  %255 = add nuw nsw i64 %192, 1
  %ptridx = getelementptr inbounds ptr, ptr %176, i64 %192
  store ptr %216, ptr %ptridx, align 8
  %256 = load ptr, ptr %123, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %256, i64 0, i32 1
  %257 = load ptr, ptr %memberidx28, align 8
  %258 = load ptr, ptr %storemerge349, align 8
  %259 = load ptr, ptr %258, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %259, i64 0, i32 5
  %260 = load ptr, ptr %memberidx30, align 8
  %261 = call ptr %260(ptr nonnull %258)
  %262 = call fastcc ptr @get_format_from_type(ptr nonnull %common.ret.op.i)
  %263 = load ptr, ptr %262, align 8
  %memberidx31 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %263, i64 0, i32 5
  %264 = load ptr, ptr %memberidx31, align 8
  %265 = call ptr %264(ptr nonnull %262)
  %266 = alloca ptr, align 8
  %267 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %266, ptr nonnull @232, ptr %261, ptr %265)
  %268 = load ptr, ptr %266, align 8
  %269 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %269, align 8
  %memberidx.i83 = getelementptr inbounds %string, ptr %269, i64 0, i32 1
  store ptr %268, ptr %memberidx.i83, align 8
  %memberidx1.i84 = getelementptr inbounds %string, ptr %269, i64 0, i32 2
  store i64 %267, ptr %memberidx1.i84, align 4
  %memberidx2.i85 = getelementptr inbounds %string, ptr %269, i64 0, i32 3
  store i64 %267, ptr %memberidx2.i85, align 4
  tail call void @free(ptr %261)
  tail call void @free(ptr %265)
  call void %257(ptr nonnull %123, ptr nonnull %269)
  %270 = add nsw i64 %191, -1
  store i64 %270, ptr %memberidx2.i.i125, align 4
  %271 = icmp sgt i64 %191, 0
  br i1 %271, label %while.entry.i, label %MapIterator_string_PropId__next.exit

while.entry.i:                                    ; preds = %ifend27, %ifend.i
  %272 = phi i64 [ %275, %ifend.i ], [ %270, %ifend27 ]
  %273 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %.pn341347, %ifend27 ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %273, i64 1
  %274 = load ptr, ptr %273, align 8
  %.not.i = icmp eq ptr %274, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit

ifend.i:                                          ; preds = %while.entry.i
  %275 = add nsw i64 %272, -1
  store i64 %275, ptr %memberidx2.i.i125, align 4
  %.not = icmp eq i64 %272, 0
  br i1 %.not, label %MapIterator_string_PropId__next.exit, label %while.entry.i

MapIterator_string_PropId__next.exit:             ; preds = %while.entry.i, %ifend.i, %ifend27
  %276 = phi i64 [ %270, %ifend27 ], [ %272, %while.entry.i ], [ -1, %ifend.i ]
  %.pn340 = phi ptr [ %.pn341347, %ifend27 ], [ %incdec.ptr.i, %ifend.i ], [ %incdec.ptr.i, %while.entry.i ]
  %storemerge334 = icmp slt i64 %storemerge335348.in, 2
  br i1 %storemerge334, label %for.end, label %for.body

if.entry35:                                       ; preds = %ifend3
  %277 = tail call ptr @malloc(i32 10)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %277, ptr noundef nonnull align 8 dereferenceable(10) @233, i64 10, i1 false)
  %278 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %278, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %278, i64 0, i32 1
  store ptr %277, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %278, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %278, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %279 = load ptr, ptr %memberidx.i, align 8
  %280 = tail call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %278)
  %memberidx.i189 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %279, i64 0, i32 1
  %281 = load i64, ptr %memberidx.i189, align 4
  %282 = urem i64 %280, %281
  %283 = load ptr, ptr %279, align 8
  %ptridx.i190 = getelementptr inbounds ptr, ptr %283, i64 %282
  %284 = load ptr, ptr %ptridx.i190, align 8
  %.not.i191 = icmp eq ptr %284, null
  br i1 %.not.i191, label %if.entry.i, label %while.entry.i195

while.entry.i195:                                 ; preds = %if.entry35, %else.i
  %285 = phi ptr [ %295, %else.i ], [ %283, %if.entry35 ]
  %286 = phi i64 [ %296, %else.i ], [ %281, %if.entry35 ]
  %287 = phi ptr [ %299, %else.i ], [ %284, %if.entry35 ]
  %hash.0.i = phi i64 [ %298, %else.i ], [ %282, %if.entry35 ]
  %288 = load ptr, ptr %287, align 8
  %memberidx.i.i192 = getelementptr inbounds %string, ptr %288, i64 0, i32 2
  %289 = load i64, ptr %memberidx.i.i192, align 4
  %290 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i194 = icmp eq i64 %289, %290
  br i1 %.not.i.i194, label %ifend.i.i198, label %else.i

ifend.i.i198:                                     ; preds = %while.entry.i195
  %memberidx2.i.i196 = getelementptr inbounds %string, ptr %288, i64 0, i32 1
  %291 = load ptr, ptr %memberidx2.i.i196, align 8
  %292 = load ptr, ptr %memberidx.i.i, align 8
  %293 = tail call i64 @memcmp(ptr %291, ptr %292, i64 %289)
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %while.end.i, label %ifend.i.i198.else.i_crit_edge

ifend.i.i198.else.i_crit_edge:                    ; preds = %ifend.i.i198
  %.pre370 = load i64, ptr %memberidx.i189, align 4
  %.pre371 = load ptr, ptr %279, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i198
  %.pre372.pre = load ptr, ptr %279, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre372.pre, i64 %hash.0.i
  %.pre373.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre373.pre, null
  br i1 %.not29.i, label %if.entry.i, label %Map_string_LLVMValueRef____getitem__.exit

else.i:                                           ; preds = %ifend.i.i198.else.i_crit_edge, %while.entry.i195
  %295 = phi ptr [ %.pre371, %ifend.i.i198.else.i_crit_edge ], [ %285, %while.entry.i195 ]
  %296 = phi i64 [ %.pre370, %ifend.i.i198.else.i_crit_edge ], [ %286, %while.entry.i195 ]
  %297 = add nuw i64 %hash.0.i, 1
  %298 = urem i64 %297, %296
  %ptridx7.i = getelementptr inbounds ptr, ptr %295, i64 %298
  %299 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %299, null
  br i1 %.not30.i, label %if.entry.i, label %while.entry.i195

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre373.pre, i64 0, i32 1
  %300 = load ptr, ptr %memberidx15.i, align 8
  %301 = icmp eq ptr %300, null
  br i1 %301, label %if.entry.i, label %common.ret

if.entry.i:                                       ; preds = %else.i, %if.entry35, %while.end.i, %Map_string_LLVMValueRef____getitem__.exit
  %302 = load ptr, ptr %278, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %302, i64 0, i32 5
  %303 = load ptr, ptr %memberidx1.i, align 8
  %304 = tail call ptr %303(ptr nonnull %278)
  %305 = tail call ptr @LLVMBuildGlobalString(ptr %1, ptr %304, ptr nonnull @28)
  %306 = load ptr, ptr %memberidx.i, align 8
  tail call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %306, ptr nonnull %278, ptr %305)
  br label %common.ret

if.entry39:                                       ; preds = %ifend3
  %memberidx42 = getelementptr inbounds %EnumType, ptr %3, i64 0, i32 1
  %307 = load ptr, ptr %memberidx42, align 8
  %308 = tail call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %307)
  %.not.i180 = icmp eq ptr %308, null
  br i1 %.not.i180, label %ifend.i188, label %CodeGen_get_or_codegen_enum_from_typeid.exit

ifend.i188:                                       ; preds = %if.entry39
  %memberidx.i183 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %309 = load ptr, ptr %memberidx.i183, align 8
  %memberidx.i.i184 = getelementptr inbounds %Program, ptr %309, i64 0, i32 1
  %310 = load ptr, ptr %memberidx.i.i184, align 8
  %311 = load i64, ptr %307, align 4
  %memberidx.i.i.i185 = getelementptr inbounds %Array_Module_, ptr %310, i64 0, i32 1
  %312 = load ptr, ptr %memberidx.i.i.i185, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %312, i64 %311
  %313 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i186 = getelementptr inbounds %Module, ptr %313, i64 0, i32 7
  %314 = load ptr, ptr %memberidx2.i.i186, align 8
  %memberidx3.i.i187 = getelementptr inbounds %TypeId, ptr %307, i64 0, i32 2
  %315 = load i64, ptr %memberidx3.i.i187, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Enum_, ptr %314, i64 0, i32 1
  %316 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %316, i64 %315
  %317 = load ptr, ptr %ptridx.i6.i.i, align 8
  tail call fastcc void @CodeGen_declare_enum(ptr %0, ptr %317)
  %318 = load ptr, ptr %317, align 8
  %319 = tail call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %318)
  br label %CodeGen_get_or_codegen_enum_from_typeid.exit

CodeGen_get_or_codegen_enum_from_typeid.exit:     ; preds = %if.entry39, %ifend.i188
  %common.ret.op.i181 = phi ptr [ %319, %ifend.i188 ], [ %308, %if.entry39 ]
  %memberidx43 = getelementptr inbounds %CGEnumType, ptr %common.ret.op.i181, i64 0, i32 2
  %320 = load ptr, ptr %memberidx43, align 8
  %indices = alloca [1 x ptr], align 8
  store ptr %2, ptr %indices, align 8
  %321 = tail call ptr @LLVMTypeOf(ptr %320)
  %322 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %321, ptr %320, ptr nonnull %indices, i64 1, ptr nonnull @28)
  %323 = call ptr @LLVMTypeOf(ptr %322)
  %324 = call ptr @LLVMBuildLoad2(ptr %1, ptr %323, ptr %322, ptr nonnull @28)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_var_expr_mem(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %1, i64 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %4)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %7 = tail call ptr @malloc(i32 45)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(45) %7, ptr noundef nonnull align 8 dereferenceable(45) @237, i64 45, i1 false)
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 45, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 45, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %10 = tail call ptr %9(ptr nonnull %8)
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @219, ptr %10)
  %12 = load ptr, ptr %3, align 8
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i2 = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i2, align 8
  %memberidx1.i.i3 = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i.i3, align 4
  %memberidx2.i.i4 = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i.i4, align 4
  call void @free(ptr %10)
  %14 = load ptr, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 3
  %15 = load ptr, ptr %memberidx.i.i.i, align 8
  %16 = call ptr %15(ptr nonnull %13)
  %17 = load i64, ptr %memberidx1.i.i3, align 4
  call void @write(i64 1, ptr %16, i64 %17)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret ptr %5
}

define internal fastcc ptr @CodeGen_get_index_expr_mem(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %IndexExpression, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %IndexExpression, ptr %2, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 13
  br i1 %9, label %true_block, label %false_block

true_block:                                       ; preds = %3
  %memberidx3 = getelementptr inbounds %PointerType, ptr %7, i64 0, i32 1
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %10, i1 true)
  br label %end

false_block:                                      ; preds = %3
  %12 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %7, i1 true)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %11, %true_block ], [ %12, %false_block ]
  %13 = load i64, ptr %7, align 4
  %14 = icmp eq i64 %13, 14
  br i1 %14, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %CodeGen_get_expr_mem.exit
  %common.ret.op = phi ptr [ %24, %CodeGen_get_expr_mem.exit ], [ %27, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %end
  %indices = alloca [2 x ptr], align 8
  %15 = tail call ptr @LLVMIntType(i64 64)
  %16 = tail call ptr @LLVMConstInt(ptr %15, i64 0, i1 false)
  store ptr %16, ptr %indices, align 8
  %17 = getelementptr inbounds ptr, ptr %indices, i64 1
  store ptr %5, ptr %17, align 8
  %18 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Expression, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  switch i64 %19, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry
  %20 = tail call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr nonnull %18)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry
  %21 = tail call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr nonnull %18)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry
  %22 = tail call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr nonnull %18, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry
  %23 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %18)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %20, %if.entry.i ], [ %21, %if.entry2.i ], [ %22, %if.entry6.i ], [ %23, %ifend8.i ]
  %24 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %ternary, ptr %common.ret.op.i, ptr nonnull %indices, i64 2, ptr nonnull @238)
  br label %common.ret

ifend:                                            ; preds = %end
  %indices_1 = alloca [1 x ptr], align 8
  store ptr %5, ptr %indices_1, align 8
  %25 = load ptr, ptr %memberidx1, align 8
  %26 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %25)
  %27 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %ternary, ptr %26, ptr nonnull %indices_1, i64 1, ptr nonnull @239)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_member_expr_mem(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %PropId, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %8)
  %.not.i97 = icmp eq ptr %9, null
  br i1 %.not.i97, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %4
  %memberidx.i99 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %10 = load ptr, ptr %memberidx.i99, align 8
  %memberidx.i.i100 = getelementptr inbounds %Program, ptr %10, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i100, align 8
  %12 = load i64, ptr %8, align 4
  %memberidx.i.i.i101 = getelementptr inbounds %Array_Module_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i.i101, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i102 = getelementptr inbounds %Module, ptr %14, i64 0, i32 4
  %15 = load ptr, ptr %memberidx2.i.i102, align 8
  %memberidx3.i.i103 = getelementptr inbounds %TypeId, ptr %8, i64 0, i32 2
  %16 = load i64, ptr %memberidx3.i.i103, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i6.i.i, align 8
  tail call fastcc void @CodeGen_declare_class(ptr %0, ptr %18)
  tail call fastcc void @CodeGen_codegen_class(ptr %0, ptr %18)
  %19 = load ptr, ptr %18, align 8
  %20 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %19)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %4, %ifend.i
  %common.ret.op.i98 = phi ptr [ %20, %ifend.i ], [ %9, %4 ]
  %21 = load ptr, ptr %memberidx, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i = getelementptr inbounds %PropId, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %23 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %22, i64 0, i32 1
  %24 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %22, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i.i, align 4
  %26 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @224, i64 %23, i64 %24, i64 %25)
  %27 = load ptr, ptr %5, align 8
  %28 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %28, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 1
  store ptr %27, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 2
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 3
  store i64 %26, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %29 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %30 = call ptr %29(ptr nonnull %28)
  %31 = load i64, ptr %21, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %21, i64 0, i32 2
  %32 = load i64, ptr %memberidx3.i, align 4
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @240, ptr %30, i64 %31, i64 %32)
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %30)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %36 = load ptr, ptr %common.ret.op.i98, align 8
  %memberidx4 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 3
  %37 = load ptr, ptr %memberidx4, align 8
  %38 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %35)
  %memberidx.i44 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %37, i64 0, i32 1
  %39 = load i64, ptr %memberidx.i44, align 4
  %40 = urem i64 %38, %39
  %41 = load ptr, ptr %37, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %42, null
  br i1 %.not.i, label %ifend, label %while.entry.i

while.entry.i:                                    ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit, %else.i
  %43 = phi ptr [ %53, %else.i ], [ %41, %CodeGen_get_or_codegen_class_from_typeid.exit ]
  %44 = phi i64 [ %54, %else.i ], [ %39, %CodeGen_get_or_codegen_class_from_typeid.exit ]
  %45 = phi ptr [ %57, %else.i ], [ %42, %CodeGen_get_or_codegen_class_from_typeid.exit ]
  %hash.0.i = phi i64 [ %56, %else.i ], [ %40, %CodeGen_get_or_codegen_class_from_typeid.exit ]
  %46 = load ptr, ptr %45, align 8
  %memberidx.i.i45 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  %47 = load i64, ptr %memberidx.i.i45, align 4
  %48 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i = icmp eq i64 %47, %48
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i47 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  %49 = load ptr, ptr %memberidx2.i.i47, align 8
  %50 = load ptr, ptr %memberidx.i.i, align 8
  %51 = call i64 @memcmp(ptr %49, ptr %50, i64 %47)
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i44, align 4
  %.pre113 = load ptr, ptr %37, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre114.pre = load ptr, ptr %37, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre114.pre, i64 %hash.0.i
  %.pre115.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre115.pre, null
  br i1 %.not29.i, label %ifend, label %Map_string_LLVMValueRef____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %53 = phi ptr [ %.pre113, %ifend.i.i.else.i_crit_edge ], [ %43, %while.entry.i ]
  %54 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %44, %while.entry.i ]
  %55 = add nuw i64 %hash.0.i, 1
  %56 = urem i64 %55, %54
  %ptridx7.i = getelementptr inbounds ptr, ptr %53, i64 %56
  %57 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %57, null
  br i1 %.not30.i, label %ifend, label %while.entry.i

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre115.pre, i64 0, i32 1
  %58 = load ptr, ptr %memberidx15.i, align 8
  %.not = icmp eq ptr %58, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %Map_string_LLVMValueRef____getitem__.exit, %ifend12
  %common.ret.op = phi ptr [ %126, %ifend12 ], [ %58, %Map_string_LLVMValueRef____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else.i, %CodeGen_get_or_codegen_class_from_typeid.exit, %while.end.i, %Map_string_LLVMValueRef____getitem__.exit
  %59 = icmp eq ptr %3, null
  br i1 %59, label %if.entry5, label %ifend7

if.entry5:                                        ; preds = %ifend
  %memberidx8 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 4
  %60 = load ptr, ptr %memberidx8, align 8
  %61 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %60)
  br label %ifend7

ifend7:                                           ; preds = %ifend, %if.entry5
  %ptr.0 = phi ptr [ %61, %if.entry5 ], [ %3, %ifend ]
  %indices_buffer = alloca [2 x ptr], align 8
  %62 = call ptr @LLVMInt32Type()
  %63 = call ptr @LLVMConstInt(ptr %62, i64 0, i1 false)
  store ptr %63, ptr %indices_buffer, align 8
  %64 = getelementptr inbounds ptr, ptr %indices_buffer, i64 1
  store ptr null, ptr %64, align 8
  %memberidx9 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %65 = load ptr, ptr %memberidx9, align 8
  %66 = load i64, ptr %65, align 4
  %67 = icmp eq i64 %66, 15
  br i1 %67, label %else11, label %if.entry10

if.entry10:                                       ; preds = %ifend7
  %memberidx13 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 5
  %68 = load ptr, ptr %memberidx13, align 8
  %69 = icmp ne ptr %68, null
  %. = zext i1 %69 to i64
  %70 = call ptr @LLVMInt32Type()
  %memberidx14 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 2
  %71 = load ptr, ptr %memberidx14, align 8
  %72 = call fastcc i64 @Map_string_uint__hash_fnc(ptr nonnull %35)
  %memberidx.i48 = getelementptr inbounds %Map_string_uint_, ptr %71, i64 0, i32 1
  %73 = load i64, ptr %memberidx.i48, align 4
  %74 = urem i64 %72, %73
  %75 = load ptr, ptr %71, align 8
  %ptridx.i49 = getelementptr inbounds ptr, ptr %75, i64 %74
  %76 = load ptr, ptr %ptridx.i49, align 8
  %.not.i50 = icmp eq ptr %76, null
  br i1 %.not.i50, label %Map_string_uint____getitem__.exit, label %while.entry.i56

while.entry.i56:                                  ; preds = %if.entry10, %else.i68
  %77 = phi ptr [ %87, %else.i68 ], [ %75, %if.entry10 ]
  %78 = phi i64 [ %88, %else.i68 ], [ %73, %if.entry10 ]
  %79 = phi ptr [ %91, %else.i68 ], [ %76, %if.entry10 ]
  %hash.0.i51 = phi i64 [ %90, %else.i68 ], [ %74, %if.entry10 ]
  %80 = load ptr, ptr %79, align 8
  %memberidx.i.i53 = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx.i.i53, align 4
  %82 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i55 = icmp eq i64 %81, %82
  br i1 %.not.i.i55, label %ifend.i.i59, label %else.i68

ifend.i.i59:                                      ; preds = %while.entry.i56
  %memberidx2.i.i57 = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i.i57, align 8
  %84 = load ptr, ptr %memberidx.i.i, align 8
  %85 = call i64 @memcmp(ptr %83, ptr %84, i64 %81)
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %while.end.i65, label %ifend.i.i59.else.i68_crit_edge

ifend.i.i59.else.i68_crit_edge:                   ; preds = %ifend.i.i59
  %.pre116 = load i64, ptr %memberidx.i48, align 4
  %.pre117 = load ptr, ptr %71, align 8
  br label %else.i68

while.end.i65:                                    ; preds = %ifend.i.i59
  %.pre118.pre = load ptr, ptr %71, align 8
  %ptridx9.i63.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre118.pre, i64 %hash.0.i51
  %.pre119.pre = load ptr, ptr %ptridx9.i63.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i64 = icmp eq ptr %.pre119.pre, null
  br i1 %.not29.i64, label %Map_string_uint____getitem__.exit, label %if.entry10.i71

else.i68:                                         ; preds = %ifend.i.i59.else.i68_crit_edge, %while.entry.i56
  %87 = phi ptr [ %.pre117, %ifend.i.i59.else.i68_crit_edge ], [ %77, %while.entry.i56 ]
  %88 = phi i64 [ %.pre116, %ifend.i.i59.else.i68_crit_edge ], [ %78, %while.entry.i56 ]
  %89 = add nuw i64 %hash.0.i51, 1
  %90 = urem i64 %89, %88
  %ptridx7.i66 = getelementptr inbounds ptr, ptr %87, i64 %90
  %91 = load ptr, ptr %ptridx7.i66, align 8
  %.not30.i67 = icmp eq ptr %91, null
  br i1 %.not30.i67, label %Map_string_uint____getitem__.exit, label %while.entry.i56

if.entry10.i71:                                   ; preds = %while.end.i65
  %memberidx15.i70 = getelementptr inbounds %MapEntry_string_uint_, ptr %.pre119.pre, i64 0, i32 1
  %92 = load i64, ptr %memberidx15.i70, align 4
  br label %Map_string_uint____getitem__.exit

Map_string_uint____getitem__.exit:                ; preds = %else.i68, %if.entry10, %while.end.i65, %if.entry10.i71
  %common.ret.op.i69 = phi i64 [ %92, %if.entry10.i71 ], [ 0, %while.end.i65 ], [ 0, %if.entry10 ], [ 0, %else.i68 ]
  %93 = add nuw i64 %common.ret.op.i69, %.
  %94 = call ptr @LLVMConstInt(ptr %70, i64 %93, i1 false)
  store ptr %94, ptr %64, align 8
  br label %ifend12

else11:                                           ; preds = %ifend7
  %95 = call ptr @LLVMInt32Type()
  %96 = call ptr @LLVMConstInt(ptr %95, i64 0, i1 false)
  store ptr %96, ptr %64, align 8
  %97 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %36, ptr %ptr.0, ptr nonnull %indices_buffer, i64 2, ptr nonnull @28)
  %memberidx18 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 5
  %98 = load ptr, ptr %memberidx18, align 8
  %99 = call ptr @LLVMPointerType(ptr %98, i64 0)
  %100 = call ptr @LLVMBuildLoad2(ptr %1, ptr %99, ptr %97, ptr nonnull @28)
  %101 = call ptr @LLVMInt32Type()
  %memberidx20 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 1
  %102 = load ptr, ptr %memberidx20, align 8
  %103 = call fastcc i64 @Map_string_uint__hash_fnc(ptr nonnull %35)
  %memberidx.i72 = getelementptr inbounds %Map_string_uint_, ptr %102, i64 0, i32 1
  %104 = load i64, ptr %memberidx.i72, align 4
  %105 = urem i64 %103, %104
  %106 = load ptr, ptr %102, align 8
  %ptridx.i73 = getelementptr inbounds ptr, ptr %106, i64 %105
  %107 = load ptr, ptr %ptridx.i73, align 8
  %.not.i74 = icmp eq ptr %107, null
  br i1 %.not.i74, label %Map_string_uint____getitem__.exit96, label %while.entry.i80

while.entry.i80:                                  ; preds = %else11, %else.i92
  %108 = phi ptr [ %118, %else.i92 ], [ %106, %else11 ]
  %109 = phi i64 [ %119, %else.i92 ], [ %104, %else11 ]
  %110 = phi ptr [ %122, %else.i92 ], [ %107, %else11 ]
  %hash.0.i75 = phi i64 [ %121, %else.i92 ], [ %105, %else11 ]
  %111 = load ptr, ptr %110, align 8
  %memberidx.i.i77 = getelementptr inbounds %string, ptr %111, i64 0, i32 2
  %112 = load i64, ptr %memberidx.i.i77, align 4
  %113 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i79 = icmp eq i64 %112, %113
  br i1 %.not.i.i79, label %ifend.i.i83, label %else.i92

ifend.i.i83:                                      ; preds = %while.entry.i80
  %memberidx2.i.i81 = getelementptr inbounds %string, ptr %111, i64 0, i32 1
  %114 = load ptr, ptr %memberidx2.i.i81, align 8
  %115 = load ptr, ptr %memberidx.i.i, align 8
  %116 = call i64 @memcmp(ptr %114, ptr %115, i64 %112)
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %while.end.i89, label %ifend.i.i83.else.i92_crit_edge

ifend.i.i83.else.i92_crit_edge:                   ; preds = %ifend.i.i83
  %.pre120 = load i64, ptr %memberidx.i72, align 4
  %.pre121 = load ptr, ptr %102, align 8
  br label %else.i92

while.end.i89:                                    ; preds = %ifend.i.i83
  %.pre122.pre = load ptr, ptr %102, align 8
  %ptridx9.i87.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre122.pre, i64 %hash.0.i75
  %.pre123.pre = load ptr, ptr %ptridx9.i87.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i88 = icmp eq ptr %.pre123.pre, null
  br i1 %.not29.i88, label %Map_string_uint____getitem__.exit96, label %if.entry10.i95

else.i92:                                         ; preds = %ifend.i.i83.else.i92_crit_edge, %while.entry.i80
  %118 = phi ptr [ %.pre121, %ifend.i.i83.else.i92_crit_edge ], [ %108, %while.entry.i80 ]
  %119 = phi i64 [ %.pre120, %ifend.i.i83.else.i92_crit_edge ], [ %109, %while.entry.i80 ]
  %120 = add nuw i64 %hash.0.i75, 1
  %121 = urem i64 %120, %119
  %ptridx7.i90 = getelementptr inbounds ptr, ptr %118, i64 %121
  %122 = load ptr, ptr %ptridx7.i90, align 8
  %.not30.i91 = icmp eq ptr %122, null
  br i1 %.not30.i91, label %Map_string_uint____getitem__.exit96, label %while.entry.i80

if.entry10.i95:                                   ; preds = %while.end.i89
  %memberidx15.i94 = getelementptr inbounds %MapEntry_string_uint_, ptr %.pre123.pre, i64 0, i32 1
  %123 = load i64, ptr %memberidx15.i94, align 4
  br label %Map_string_uint____getitem__.exit96

Map_string_uint____getitem__.exit96:              ; preds = %else.i92, %else11, %while.end.i89, %if.entry10.i95
  %common.ret.op.i93 = phi i64 [ %123, %if.entry10.i95 ], [ 0, %while.end.i89 ], [ 0, %else11 ], [ 0, %else.i92 ]
  %124 = call ptr @LLVMConstInt(ptr %101, i64 %common.ret.op.i93, i1 false)
  store ptr %124, ptr %64, align 8
  %125 = load ptr, ptr %memberidx18, align 8
  br label %ifend12

ifend12:                                          ; preds = %Map_string_uint____getitem__.exit96, %Map_string_uint____getitem__.exit
  %struct_type.0 = phi ptr [ %36, %Map_string_uint____getitem__.exit ], [ %125, %Map_string_uint____getitem__.exit96 ]
  %ptr.1 = phi ptr [ %ptr.0, %Map_string_uint____getitem__.exit ], [ %100, %Map_string_uint____getitem__.exit96 ]
  %126 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %struct_type.0, ptr %ptr.1, ptr nonnull %indices_buffer, i64 2, ptr nonnull @241)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_builtin_array(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
end:
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %GenericType, ptr %2, i64 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %5, i1 false)
  %memberidx1 = getelementptr inbounds %GenericType, ptr %2, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %9, i1 true)
  %11 = tail call ptr @LLVMBuildMalloc(ptr %1, ptr %6, ptr nonnull @28)
  %memberidx2 = getelementptr inbounds %ArrayExpression, ptr %3, i64 0, i32 4
  %12 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx3, align 4
  %14 = tail call i64 @llvm.smax.i64(i64 %13, i64 1)
  %15 = tail call ptr @LLVMIntType(i64 64)
  %16 = tail call ptr @LLVMConstInt(ptr %15, i64 %14, i1 false)
  %17 = tail call ptr @LLVMIntType(i64 64)
  %18 = tail call ptr @LLVMConstInt(ptr %17, i64 %13, i1 false)
  %args = alloca [2 x ptr], align 8
  store ptr %11, ptr %args, align 8
  %19 = getelementptr inbounds ptr, ptr %args, i64 1
  %20 = tail call ptr @LLVMSizeOf(ptr %10)
  %21 = tail call ptr @LLVMConstMul(ptr %16, ptr %20)
  store ptr %21, ptr %19, align 8
  %memberidx.i32 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %22 = load i64, ptr %5, align 4
  %cond57 = icmp eq i64 %22, 19
  br i1 %cond57, label %if.entry.i49, label %get_class_from_type.exit

if.entry.i49:                                     ; preds = %end, %if.entry.i49
  %.tr11.i58 = phi ptr [ %23, %if.entry.i49 ], [ %5, %end ]
  %memberidx1.i48 = getelementptr inbounds %GenericType, ptr %.tr11.i58, i64 0, i32 3
  %23 = load ptr, ptr %memberidx1.i48, align 8
  %24 = load i64, ptr %23, align 4
  %cond = icmp eq i64 %24, 19
  br i1 %cond, label %if.entry.i49, label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %if.entry.i49, %end
  %memberidx1.i = getelementptr inbounds %ObjectType, ptr %5, i64 0, i32 1
  %25 = load ptr, ptr %memberidx1.i, align 8
  %26 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %25)
  %.not.i33 = icmp eq ptr %26, null
  br i1 %.not.i33, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %get_class_from_type.exit
  %27 = load ptr, ptr %memberidx.i32, align 8
  %memberidx.i.i36 = getelementptr inbounds %Program, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i36, align 8
  %29 = load i64, ptr %25, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i37 = getelementptr inbounds %Module, ptr %31, i64 0, i32 4
  %32 = load ptr, ptr %memberidx2.i.i37, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %25, i64 0, i32 2
  %33 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i6.i.i, align 8
  tail call fastcc void @CodeGen_declare_class(ptr %0, ptr %35)
  tail call fastcc void @CodeGen_codegen_class(ptr %0, ptr %35)
  %36 = load ptr, ptr %35, align 8
  %37 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %36)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %get_class_from_type.exit, %ifend.i
  %common.ret.op.i = phi ptr [ %37, %ifend.i ], [ %26, %get_class_from_type.exit ]
  %memberidx2.i = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 6
  %38 = load ptr, ptr %memberidx2.i, align 8
  %.not.i = icmp eq ptr %38, null
  br i1 %.not.i, label %else.i, label %if.entry.i

if.entry.i:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %39 = tail call ptr @LLVM_GetFunctionType(ptr nonnull %38)
  %40 = call ptr @LLVMBuildCall2(ptr %1, ptr %39, ptr nonnull %38, ptr nonnull %args, i64 2, ptr nonnull @28)
  br label %CodeGen_build_constructor_call.exit

else.i:                                           ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %41 = tail call ptr @malloc(i32 47)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(47) %41, ptr noundef nonnull align 8 dereferenceable(47) @266, i64 47, i1 false)
  %42 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i38 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i38, align 8
  %memberidx1.i.i39 = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 47, ptr %memberidx1.i.i39, align 4
  %memberidx2.i.i40 = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 47, ptr %memberidx2.i.i40, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %43 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %44 = tail call ptr %43(ptr nonnull %42)
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @219, ptr %44)
  %46 = load ptr, ptr %4, align 8
  %47 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i.i42 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i.i42, align 8
  %memberidx1.i.i43 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 %45, ptr %memberidx1.i.i43, align 4
  %memberidx2.i.i44 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 %45, ptr %memberidx2.i.i44, align 4
  call void @free(ptr %44)
  %48 = load ptr, ptr %47, align 8
  %memberidx.i.i.i45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %48, i64 0, i32 3
  %49 = load ptr, ptr %memberidx.i.i.i45, align 8
  %50 = call ptr %49(ptr nonnull %47)
  %51 = load i64, ptr %memberidx1.i.i43, align 4
  call void @write(i64 1, ptr %50, i64 %51)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %CodeGen_build_constructor_call.exit

CodeGen_build_constructor_call.exit:              ; preds = %if.entry.i, %else.i
  %52 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %52, ptr noundef nonnull align 8 dereferenceable(6) @242, i64 6, i1 false)
  %53 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %53, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %53, i64 0, i32 1
  store ptr %52, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %53, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %53, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %54 = call fastcc ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %11, ptr nonnull %5, ptr nonnull %53)
  %55 = call ptr @LLVMPointerType(ptr %10, i64 0)
  %56 = call ptr @LLVMBuildLoad2(ptr %1, ptr %55, ptr %54, ptr nonnull @28)
  %57 = call fastcc ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %56, ptr %3)
  %58 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %58, ptr noundef nonnull align 8 dereferenceable(6) @243, i64 6, i1 false)
  %59 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %59, align 8
  %memberidx.i.i29 = getelementptr inbounds %string, ptr %59, i64 0, i32 1
  store ptr %58, ptr %memberidx.i.i29, align 8
  %memberidx1.i.i30 = getelementptr inbounds %string, ptr %59, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i30, align 4
  %memberidx2.i.i31 = getelementptr inbounds %string, ptr %59, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i31, align 4
  %60 = call fastcc ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %11, ptr nonnull %5, ptr nonnull %59)
  %61 = call ptr @LLVMBuildStore(ptr %1, ptr %18, ptr %60)
  ret ptr %11
}

define internal fastcc void @CodeGen_declare_class(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = tail call ptr @malloc(i32 56)
  %5 = tail call ptr @malloc(i32 24)
  %6 = tail call ptr @malloc(i32 2048)
  store ptr %6, ptr %5, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %2, %for.body.i.i
  %i.0.i.i75 = phi i64 [ 0, %2 ], [ %8, %for.body.i.i ]
  %7 = load ptr, ptr %5, align 8
  %ptridx.i.i67 = getelementptr inbounds ptr, ptr %7, i64 %i.0.i.i75
  store ptr null, ptr %ptridx.i.i67, align 8
  %8 = add nuw nsw i64 %i.0.i.i75, 1
  %9 = icmp ult i64 %i.0.i.i75, 255
  br i1 %9, label %for.body.i.i, label %Map_string_uint__constructor.exit.i

Map_string_uint__constructor.exit.i:              ; preds = %for.body.i.i
  %memberidx.i66 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 1
  %memberidx2.i.i68 = getelementptr inbounds %Map_string_uint_, ptr %5, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i68, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_uint_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %5, ptr %memberidx.i66, align 8
  %10 = tail call ptr @malloc(i32 24)
  %11 = tail call ptr @malloc(i32 2048)
  store ptr %11, ptr %10, align 8
  br label %for.body.i12.i

for.body.i12.i:                                   ; preds = %Map_string_uint__constructor.exit.i, %for.body.i12.i
  %i.0.i9.i74 = phi i64 [ 0, %Map_string_uint__constructor.exit.i ], [ %13, %for.body.i12.i ]
  %12 = load ptr, ptr %10, align 8
  %ptridx.i11.i = getelementptr inbounds ptr, ptr %12, i64 %i.0.i9.i74
  store ptr null, ptr %ptridx.i11.i, align 8
  %13 = add nuw nsw i64 %i.0.i9.i74, 1
  %14 = icmp ult i64 %i.0.i9.i74, 255
  br i1 %14, label %for.body.i12.i, label %Map_string_uint__constructor.exit15.i

Map_string_uint__constructor.exit15.i:            ; preds = %for.body.i12.i
  %memberidx1.i69 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 2
  %memberidx2.i13.i = getelementptr inbounds %Map_string_uint_, ptr %10, i64 0, i32 1
  store i64 256, ptr %memberidx2.i13.i, align 4
  %memberidx3.i14.i = getelementptr inbounds %Map_string_uint_, ptr %10, i64 0, i32 2
  store i64 0, ptr %memberidx3.i14.i, align 4
  store ptr %10, ptr %memberidx1.i69, align 8
  %15 = tail call ptr @malloc(i32 24)
  %16 = tail call ptr @malloc(i32 2048)
  store ptr %16, ptr %15, align 8
  br label %for.body.i19.i

for.body.i19.i:                                   ; preds = %Map_string_uint__constructor.exit15.i, %for.body.i19.i
  %i.0.i16.i73 = phi i64 [ 0, %Map_string_uint__constructor.exit15.i ], [ %18, %for.body.i19.i ]
  %17 = load ptr, ptr %15, align 8
  %ptridx.i18.i = getelementptr inbounds ptr, ptr %17, i64 %i.0.i16.i73
  store ptr null, ptr %ptridx.i18.i, align 8
  %18 = add nuw nsw i64 %i.0.i16.i73, 1
  %19 = icmp ult i64 %i.0.i16.i73, 255
  br i1 %19, label %for.body.i19.i, label %CGClassType_constructor.exit

CGClassType_constructor.exit:                     ; preds = %for.body.i19.i
  %memberidx2.i70 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 3
  %memberidx2.i20.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %15, i64 0, i32 1
  store i64 256, ptr %memberidx2.i20.i, align 4
  %memberidx3.i21.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %15, i64 0, i32 2
  store i64 0, ptr %memberidx3.i21.i, align 4
  store ptr %15, ptr %memberidx2.i70, align 8
  %memberidx3.i71 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx3.i71, i8 0, i64 16, i1 false)
  %20 = load ptr, ptr %0, align 8
  %21 = tail call ptr @LLVMGetModuleContext(ptr %20)
  %memberidx2 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i64 0, i32 5
  %24 = load ptr, ptr %memberidx3, align 8
  %25 = tail call ptr %24(ptr nonnull %22)
  %26 = tail call ptr @LLVMStructCreateNamed(ptr %21, ptr %25)
  store ptr %26, ptr %4, align 8
  %27 = load ptr, ptr %1, align 8
  %memberidx.i62 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %28 = load ptr, ptr %memberidx.i62, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %29 = load i64, ptr %27, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 1
  %30 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i63 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i.i63, align 4
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @224, i64 %29, i64 %30, i64 %31)
  %33 = load ptr, ptr %3, align 8
  %34 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %34, align 8
  %memberidx.i.i.i64 = getelementptr inbounds %string, ptr %34, i64 0, i32 1
  store ptr %33, ptr %memberidx.i.i.i64, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %34, i64 0, i32 2
  store i64 %32, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i65 = getelementptr inbounds %string, ptr %34, i64 0, i32 3
  store i64 %32, ptr %memberidx2.i.i.i65, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call fastcc void @Map_string_CGClassType____setitem__(ptr %28, ptr nonnull %34, ptr nonnull %4)
  %35 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %35, align 8
  %memberidx.i59 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %35, i64 0, i32 2
  %memberidx1.i60 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %35, i64 0, i32 3
  store i64 8, ptr %memberidx1.i60, align 4
  %memberidx2.i61 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %35, i64 0, i32 1
  %36 = call ptr @malloc(i32 64)
  store ptr %36, ptr %memberidx2.i61, align 8
  store i64 0, ptr %memberidx.i59, align 4
  call fastcc void @CodeGen_declare_static_props(ptr nonnull %0, ptr nonnull %4, ptr nonnull %1)
  call fastcc void @CodeGen_declare_class_props(ptr nonnull %0, ptr nonnull %4, ptr nonnull %1, ptr nonnull %35)
  %37 = load ptr, ptr %4, align 8
  %38 = load ptr, ptr %memberidx2.i61, align 8
  %39 = load i64, ptr %memberidx.i59, align 4
  call void @LLVMStructSetBody(ptr %37, ptr %38, i64 %39, i1 true)
  call void @free(ptr %38)
  tail call void @free(ptr %35)
  %memberidx10 = getelementptr inbounds %Class, ptr %1, i64 0, i32 3
  %40 = load ptr, ptr %memberidx10, align 8
  %.not = icmp eq ptr %40, null
  br i1 %.not, label %else, label %if.entry

if.entry:                                         ; preds = %CGClassType_constructor.exit
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %41 = load ptr, ptr %memberidx11, align 8
  %memberidx.i.i54 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i.i54, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i.i, align 8
  %44 = load i64, ptr %42, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %46, i64 0, i32 4
  %47 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %42, i64 0, i32 2
  %48 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %51 = load i64, ptr %40, align 4
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry
  %memberidx1.i55 = getelementptr inbounds %Class, ptr %50, i64 0, i32 5
  %53 = load ptr, ptr %memberidx1.i55, align 8
  %memberidx2.i56 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 2
  %54 = load i64, ptr %memberidx2.i56, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %56, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %if.entry
  %memberidx4.i = getelementptr inbounds %Class, ptr %50, i64 0, i32 4
  %57 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %40, i64 0, i32 2
  %58 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %58
  %60 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i57 = getelementptr inbounds %ClassField, ptr %60, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i57, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %61, align 8
  %memberidx.i51 = getelementptr inbounds %Array_Type_, ptr %61, i64 0, i32 2
  store i64 0, ptr %memberidx.i51, align 4
  %memberidx1.i52 = getelementptr inbounds %Array_Type_, ptr %61, i64 0, i32 3
  store i64 8, ptr %memberidx1.i52, align 4
  %memberidx2.i53 = getelementptr inbounds %Array_Type_, ptr %61, i64 0, i32 1
  %62 = call ptr @malloc(i32 64)
  store ptr %62, ptr %memberidx2.i53, align 8
  %63 = tail call ptr @malloc(i32 16)
  %64 = load ptr, ptr %1, align 8
  store i64 11, ptr %63, align 4
  %memberidx.i50 = getelementptr inbounds %ObjectType, ptr %63, i64 0, i32 1
  store ptr %64, ptr %memberidx.i50, align 8
  store ptr %63, ptr %62, align 8
  store i64 1, ptr %memberidx.i51, align 4
  %memberidx16 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 1
  %65 = load ptr, ptr %memberidx16, align 8
  %memberidx2.i49 = getelementptr inbounds %Array_Type_, ptr %65, i64 0, i32 2
  %66 = load i64, ptr %memberidx2.i49, align 4
  %67 = icmp sgt i64 %66, 7
  br i1 %67, label %while.entry.i, label %Array_Type____adda__.exit

while.entry.i:                                    ; preds = %get_class_prop_type.exit, %while.entry.i
  %68 = phi ptr [ %72, %while.entry.i ], [ %62, %get_class_prop_type.exit ]
  %69 = phi i64 [ %70, %while.entry.i ], [ 8, %get_class_prop_type.exit ]
  %70 = shl nuw i64 %69, 1
  store i64 %70, ptr %memberidx1.i52, align 4
  %71 = shl i64 %69, 4
  %72 = call ptr @realloc(ptr %68, i64 %71)
  store ptr %72, ptr %memberidx2.i53, align 8
  %73 = add i64 %70, -1
  %74 = load i64, ptr %memberidx2.i49, align 4
  %75 = icmp slt i64 %73, %74
  br i1 %75, label %while.entry.i, label %Array_Type____adda__.exit

Array_Type____adda__.exit:                        ; preds = %while.entry.i, %get_class_prop_type.exit
  %76 = phi i64 [ %66, %get_class_prop_type.exit ], [ %74, %while.entry.i ]
  %77 = phi ptr [ %62, %get_class_prop_type.exit ], [ %72, %while.entry.i ]
  %78 = getelementptr inbounds ptr, ptr %77, i64 1
  %memberidx8.i = getelementptr inbounds %Array_Type_, ptr %65, i64 0, i32 1
  %79 = load ptr, ptr %memberidx8.i, align 8
  %80 = shl i64 %76, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2147483648 %78, ptr align 8 %79, i64 %80, i1 false)
  %81 = load i64, ptr %memberidx2.i49, align 4
  %82 = add nuw i64 %81, 1
  store i64 %82, ptr %memberidx.i51, align 4
  %83 = load ptr, ptr %memberidx16, align 8
  %memberidx.i46 = getelementptr inbounds %Array_Type_, ptr %83, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i46, align 8
  call void @free(ptr %84)
  tail call void @free(ptr %83)
  store ptr %61, ptr %memberidx16, align 8
  %85 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %common.ret.op.i, i1 false)
  %memberidx19 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 6
  %86 = load ptr, ptr %memberidx2, align 8
  %87 = load ptr, ptr %86, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %87, i64 0, i32 5
  %88 = load ptr, ptr %memberidx21, align 8
  %89 = call ptr %88(ptr nonnull %86)
  %90 = alloca ptr, align 8
  %91 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %90, ptr nonnull @269, ptr %89)
  %92 = load ptr, ptr %90, align 8
  %93 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %93, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %93, i64 0, i32 1
  store ptr %92, ptr %memberidx.i, align 8
  %memberidx1.i45 = getelementptr inbounds %string, ptr %93, i64 0, i32 2
  store i64 %91, ptr %memberidx1.i45, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %93, i64 0, i32 3
  store i64 %91, ptr %memberidx2.i, align 4
  tail call void @free(ptr %89)
  %94 = load ptr, ptr %0, align 8
  %95 = load ptr, ptr %93, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %95, i64 0, i32 5
  %96 = load ptr, ptr %memberidx1.i, align 8
  %97 = call ptr %96(ptr nonnull %93)
  %98 = call ptr @LLVMAddFunction(ptr %94, ptr %97, ptr %85)
  store ptr %98, ptr %memberidx19, align 8
  br label %ifend

else:                                             ; preds = %CGClassType_constructor.exit
  %memberidx22 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 6
  store ptr null, ptr %memberidx22, align 8
  br label %ifend

ifend:                                            ; preds = %else, %Array_Type____adda__.exit
  ret void
}

define internal fastcc void @CodeGen_codegen_del_call(ptr nocapture %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %func_ty = alloca ptr, align 8
  %5 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %5, ptr noundef nonnull align 8 dereferenceable(7) @121, i64 7, i1 false)
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %5, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i, align 4
  %7 = call fastcc ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr nonnull %6, ptr nonnull %func_ty)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %common.ret, label %ifend

common.ret:                                       ; preds = %4, %ifend
  ret void

ifend:                                            ; preds = %4
  %args = alloca [1 x ptr], align 8
  store ptr %2, ptr %args, align 8
  %9 = load ptr, ptr %func_ty, align 8
  %10 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %9, i1 false)
  %11 = call ptr @LLVMBuildCall2(ptr %1, ptr %10, ptr nonnull %7, ptr nonnull %args, i64 1, ptr nonnull @28)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_class_from_typeid(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %4 = load ptr, ptr %memberidx, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %5 = load i64, ptr %1, align 4
  %memberidx1.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 1
  %6 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i, align 4
  %8 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @224, i64 %5, i64 %6, i64 %7)
  %9 = load ptr, ptr %3, align 8
  %10 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %10, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 1
  store ptr %9, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 2
  store i64 %8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 3
  store i64 %8, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %11 = call fastcc i64 @Map_string_CGClassType__hash_fnc(ptr nonnull %10)
  %memberidx.i = getelementptr inbounds %Map_string_CGClassType_, ptr %4, i64 0, i32 1
  %12 = load i64, ptr %memberidx.i, align 4
  %13 = urem i64 %11, %12
  %14 = load ptr, ptr %4, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %15, null
  br i1 %.not.i, label %Map_string_CGClassType____getitem__.exit, label %while.entry.i

while.entry.i:                                    ; preds = %2, %else.i
  %16 = phi ptr [ %26, %else.i ], [ %14, %2 ]
  %17 = phi i64 [ %27, %else.i ], [ %12, %2 ]
  %18 = phi ptr [ %30, %else.i ], [ %15, %2 ]
  %hash.0.i = phi i64 [ %29, %else.i ], [ %13, %2 ]
  %19 = load ptr, ptr %18, align 8
  %memberidx.i.i1 = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i1, align 4
  %21 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %20, %21
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i3 = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i3, align 8
  %23 = load ptr, ptr %memberidx.i.i, align 8
  %24 = call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre5 = load ptr, ptr %4, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre6.pre = load ptr, ptr %4, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre6.pre, i64 %hash.0.i
  %.pre7.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre7.pre, null
  br i1 %.not29.i, label %Map_string_CGClassType____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %26 = phi ptr [ %.pre5, %ifend.i.i.else.i_crit_edge ], [ %16, %while.entry.i ]
  %27 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %17, %while.entry.i ]
  %28 = add nuw i64 %hash.0.i, 1
  %29 = urem i64 %28, %27
  %ptridx7.i = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %30, null
  br i1 %.not30.i, label %Map_string_CGClassType____getitem__.exit, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %.pre7.pre, i64 0, i32 1
  %31 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_CGClassType____getitem__.exit

Map_string_CGClassType____getitem__.exit:         ; preds = %else.i, %2, %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %31, %if.entry10.i ], [ null, %while.end.i ], [ null, %2 ], [ null, %else.i ]
  ret ptr %common.ret.op.i
}

define internal fastcc ptr @CodeGen_get_enum_from_typeid(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 9
  %4 = load ptr, ptr %memberidx, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %5 = load i64, ptr %1, align 4
  %memberidx1.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 1
  %6 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i, align 4
  %8 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @224, i64 %5, i64 %6, i64 %7)
  %9 = load ptr, ptr %3, align 8
  %10 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %10, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 1
  store ptr %9, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 2
  store i64 %8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 3
  store i64 %8, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %11 = call fastcc i64 @Map_string_CGEnumType__hash_fnc(ptr nonnull %10)
  %memberidx.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %4, i64 0, i32 1
  %12 = load i64, ptr %memberidx.i, align 4
  %13 = urem i64 %11, %12
  %14 = load ptr, ptr %4, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %15, null
  br i1 %.not.i, label %Map_string_CGEnumType____getitem__.exit, label %while.entry.i

while.entry.i:                                    ; preds = %2, %else.i
  %16 = phi ptr [ %26, %else.i ], [ %14, %2 ]
  %17 = phi i64 [ %27, %else.i ], [ %12, %2 ]
  %18 = phi ptr [ %30, %else.i ], [ %15, %2 ]
  %hash.0.i = phi i64 [ %29, %else.i ], [ %13, %2 ]
  %19 = load ptr, ptr %18, align 8
  %memberidx.i.i1 = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i1, align 4
  %21 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %20, %21
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i3 = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i3, align 8
  %23 = load ptr, ptr %memberidx.i.i, align 8
  %24 = call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre5 = load ptr, ptr %4, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre6.pre = load ptr, ptr %4, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre6.pre, i64 %hash.0.i
  %.pre7.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre7.pre, null
  br i1 %.not29.i, label %Map_string_CGEnumType____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %26 = phi ptr [ %.pre5, %ifend.i.i.else.i_crit_edge ], [ %16, %while.entry.i ]
  %27 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %17, %while.entry.i ]
  %28 = add nuw i64 %hash.0.i, 1
  %29 = urem i64 %28, %27
  %ptridx7.i = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %30, null
  br i1 %.not30.i, label %Map_string_CGEnumType____getitem__.exit, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %.pre7.pre, i64 0, i32 1
  %31 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_CGEnumType____getitem__.exit

Map_string_CGEnumType____getitem__.exit:          ; preds = %else.i, %2, %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %31, %if.entry10.i ], [ null, %while.end.i ], [ null, %2 ], [ null, %else.i ]
  ret ptr %common.ret.op.i
}

define internal fastcc ptr @CodeGen_get_member_mem_with_name(ptr nocapture %0, ptr %1, ptr %2, ptr nocapture readonly %3, ptr %4) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load i64, ptr %3, align 4
  %switch10 = icmp eq i64 %7, 19
  br i1 %switch10, label %if.entry.i3, label %if.entry3.i

if.entry.i3:                                      ; preds = %5, %if.entry.i3
  %.tr11.i11 = phi ptr [ %8, %if.entry.i3 ], [ %3, %5 ]
  %memberidx1.i2 = getelementptr inbounds %GenericType, ptr %.tr11.i11, i64 0, i32 3
  %8 = load ptr, ptr %memberidx1.i2, align 8
  %9 = load i64, ptr %8, align 4
  %switch = icmp eq i64 %9, 19
  br i1 %switch, label %if.entry.i3, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i3, %5
  %.tr11.i.lcssa = phi ptr [ %3, %5 ], [ %8, %if.entry.i3 ]
  %memberidx6.i4 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %10 = load ptr, ptr %memberidx6.i4, align 8
  %memberidx.i.i5 = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i5, align 8
  %12 = load i64, ptr %10, align 4
  %memberidx.i.i.i6 = getelementptr inbounds %Array_Module_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i.i6, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i7 = getelementptr inbounds %Module, ptr %14, i64 0, i32 4
  %15 = load ptr, ptr %memberidx2.i.i7, align 8
  %memberidx3.i.i8 = getelementptr inbounds %TypeId, ptr %10, i64 0, i32 2
  %16 = load i64, ptr %memberidx3.i.i8, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %18, i64 0, i32 6
  %19 = load ptr, ptr %memberidx1, align 8
  %20 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr %4)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %19, i64 0, i32 1
  %21 = load i64, ptr %memberidx.i, align 4
  %22 = urem i64 %20, %21
  %23 = load ptr, ptr %19, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %24, null
  br i1 %.not.i, label %common.ret, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %if.entry3.i
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %25 = phi ptr [ %35, %else.i ], [ %23, %while.entry.i.preheader ]
  %26 = phi i64 [ %36, %else.i ], [ %21, %while.entry.i.preheader ]
  %27 = phi ptr [ %39, %else.i ], [ %24, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %38, %else.i ], [ %22, %while.entry.i.preheader ]
  %28 = load ptr, ptr %27, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx.i.i, align 4
  %30 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %29, %30
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 1
  %31 = load ptr, ptr %memberidx2.i.i, align 8
  %32 = load ptr, ptr %memberidx3.i.i, align 8
  %33 = tail call i64 @memcmp(ptr %31, ptr %32, i64 %29)
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre12 = load ptr, ptr %19, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre13.pre = load ptr, ptr %19, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre13.pre, i64 %hash.0.i
  %.pre14.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre14.pre, null
  br i1 %.not29.i, label %common.ret, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %35 = phi ptr [ %.pre12, %ifend.i.i.else.i_crit_edge ], [ %25, %while.entry.i ]
  %36 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %26, %while.entry.i ]
  %37 = add nuw i64 %hash.0.i, 1
  %38 = urem i64 %37, %36
  %ptridx7.i = getelementptr inbounds ptr, ptr %35, i64 %38
  %39 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %39, null
  br i1 %.not30.i, label %common.ret, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre14.pre, i64 0, i32 1
  %40 = load ptr, ptr %memberidx15.i, align 8
  %41 = icmp eq ptr %40, null
  br i1 %41, label %common.ret, label %ifend

common.ret:                                       ; preds = %else.i, %if.entry3.i, %while.end.i, %Map_string_PropId____getitem__.exit, %get_class_prop_type.exit
  %common.ret.op = phi ptr [ %63, %get_class_prop_type.exit ], [ null, %Map_string_PropId____getitem__.exit ], [ null, %while.end.i ], [ null, %if.entry3.i ], [ null, %else.i ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %42 = load ptr, ptr %memberidx, align 8
  %memberidx.i.i11 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i11, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i.i.i, align 8
  %45 = load i64, ptr %43, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %44, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %46, i64 %45
  %47 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %47, i64 0, i32 4
  %48 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %43, i64 0, i32 2
  %49 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %50, i64 %49
  %51 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %52 = load i64, ptr %40, align 4
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i = getelementptr inbounds %Class, ptr %51, i64 0, i32 5
  %54 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %40, i64 0, i32 2
  %55 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %57, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %51, i64 0, i32 4
  %58 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %40, i64 0, i32 2
  %59 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %60, i64 %59
  %61 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %61, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i12 = load ptr, ptr %common.ret.op.in.i, align 8
  %62 = alloca %MemberExpression, align 8
  store i64 8, ptr %62, align 8
  %memberidx.i.i13 = getelementptr inbounds %Expression, ptr %62, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i13, align 4
  %memberidx1.i.i14 = getelementptr inbounds %Expression, ptr %62, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i14, align 8
  %memberidx.i15 = getelementptr inbounds %MemberExpression, ptr %62, i64 0, i32 4
  store ptr null, ptr %memberidx.i15, align 8
  %memberidx1.i16 = getelementptr inbounds %MemberExpression, ptr %62, i64 0, i32 5
  store ptr %40, ptr %memberidx1.i16, align 8
  %memberidx2.i17 = getelementptr inbounds %Expression, ptr %62, i64 0, i32 3
  store ptr %common.ret.op.i12, ptr %memberidx2.i17, align 8
  %63 = call fastcc ptr @CodeGen_get_member_expr_mem(ptr nonnull %0, ptr %1, ptr nonnull %62, ptr %2)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_member_with_name(ptr nocapture %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr writeonly %5) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %3, align 4
  %switch33 = icmp eq i64 %8, 19
  br i1 %switch33, label %if.entry.i26, label %if.entry3.i

if.entry.i26:                                     ; preds = %6, %if.entry.i26
  %.tr11.i34 = phi ptr [ %9, %if.entry.i26 ], [ %3, %6 ]
  %memberidx1.i25 = getelementptr inbounds %GenericType, ptr %.tr11.i34, i64 0, i32 3
  %9 = load ptr, ptr %memberidx1.i25, align 8
  %10 = load i64, ptr %9, align 4
  %switch = icmp eq i64 %10, 19
  br i1 %switch, label %if.entry.i26, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i26, %6
  %.tr11.i.lcssa = phi ptr [ %3, %6 ], [ %9, %if.entry.i26 ]
  %memberidx6.i27 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %11 = load ptr, ptr %memberidx6.i27, align 8
  %memberidx.i.i28 = getelementptr inbounds %Program, ptr %7, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i.i28, align 8
  %13 = load i64, ptr %11, align 4
  %memberidx.i.i.i29 = getelementptr inbounds %Array_Module_, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i.i.i29, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i30 = getelementptr inbounds %Module, ptr %15, i64 0, i32 4
  %16 = load ptr, ptr %memberidx2.i.i30, align 8
  %memberidx3.i.i31 = getelementptr inbounds %TypeId, ptr %11, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i.i31, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %19, i64 0, i32 6
  %20 = load ptr, ptr %memberidx1, align 8
  %21 = tail call fastcc i64 @Map_string_PropId__hash_fnc(ptr %4)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %20, i64 0, i32 1
  %22 = load i64, ptr %memberidx.i, align 4
  %23 = urem i64 %21, %22
  %24 = load ptr, ptr %20, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %25, null
  br i1 %.not.i, label %common.ret, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %if.entry3.i
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %26 = phi ptr [ %36, %else.i ], [ %24, %while.entry.i.preheader ]
  %27 = phi i64 [ %37, %else.i ], [ %22, %while.entry.i.preheader ]
  %28 = phi ptr [ %40, %else.i ], [ %25, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %39, %else.i ], [ %23, %while.entry.i.preheader ]
  %29 = load ptr, ptr %28, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx.i.i, align 4
  %31 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %30, %31
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %29, i64 0, i32 1
  %32 = load ptr, ptr %memberidx2.i.i, align 8
  %33 = load ptr, ptr %memberidx3.i.i, align 8
  %34 = tail call i64 @memcmp(ptr %32, ptr %33, i64 %30)
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i, align 4
  %.pre35 = load ptr, ptr %20, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre36.pre = load ptr, ptr %20, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre36.pre, i64 %hash.0.i
  %.pre37.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre37.pre, null
  br i1 %.not29.i, label %common.ret, label %Map_string_PropId____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %36 = phi ptr [ %.pre35, %ifend.i.i.else.i_crit_edge ], [ %26, %while.entry.i ]
  %37 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %27, %while.entry.i ]
  %38 = add nuw i64 %hash.0.i, 1
  %39 = urem i64 %38, %37
  %ptridx7.i = getelementptr inbounds ptr, ptr %36, i64 %39
  %40 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %40, null
  br i1 %.not30.i, label %common.ret, label %while.entry.i

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %.pre37.pre, i64 0, i32 1
  %41 = load ptr, ptr %memberidx15.i, align 8
  %42 = icmp eq ptr %41, null
  br i1 %42, label %common.ret, label %ifend

common.ret:                                       ; preds = %else.i, %if.entry3.i, %while.end.i, %Map_string_PropId____getitem__.exit, %ifend5
  %common.ret.op = phi ptr [ %65, %ifend5 ], [ null, %Map_string_PropId____getitem__.exit ], [ null, %while.end.i ], [ null, %if.entry3.i ], [ null, %else.i ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %43 = load ptr, ptr %memberidx, align 8
  %memberidx.i.i13 = getelementptr inbounds %PropId, ptr %41, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i.i13, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i, align 8
  %46 = load i64, ptr %44, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %48, i64 0, i32 4
  %49 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %44, i64 0, i32 2
  %50 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %51, i64 %50
  %52 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %53 = load i64, ptr %41, align 4
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i = getelementptr inbounds %Class, ptr %52, i64 0, i32 5
  %55 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %41, i64 0, i32 2
  %56 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %55, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %58, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %52, i64 0, i32 4
  %59 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %41, i64 0, i32 2
  %60 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %59, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %62, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i14 = load ptr, ptr %common.ret.op.in.i, align 8
  %.not = icmp eq ptr %5, null
  br i1 %.not, label %ifend5, label %if.entry3

if.entry3:                                        ; preds = %get_class_prop_type.exit
  store ptr %common.ret.op.i14, ptr %5, align 8
  br label %ifend5

ifend5:                                           ; preds = %get_class_prop_type.exit, %if.entry3
  %63 = alloca %Expression, align 8
  store i64 8, ptr %63, align 8
  %memberidx.i15 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 2
  store i64 7, ptr %memberidx.i15, align 4
  %memberidx1.i16 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 1
  store i1 false, ptr %memberidx1.i16, align 8
  %memberidx6 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 3
  store ptr %3, ptr %memberidx6, align 8
  %64 = alloca %MemberExpression, align 8
  store i64 8, ptr %64, align 8
  %memberidx.i.i17 = getelementptr inbounds %Expression, ptr %64, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i17, align 4
  %memberidx1.i.i18 = getelementptr inbounds %Expression, ptr %64, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i18, align 8
  %memberidx.i19 = getelementptr inbounds %MemberExpression, ptr %64, i64 0, i32 4
  store ptr %63, ptr %memberidx.i19, align 8
  %memberidx1.i20 = getelementptr inbounds %MemberExpression, ptr %64, i64 0, i32 5
  store ptr %41, ptr %memberidx1.i20, align 8
  %memberidx2.i21 = getelementptr inbounds %Expression, ptr %64, i64 0, i32 3
  store ptr %common.ret.op.i14, ptr %memberidx2.i21, align 8
  %65 = call fastcc ptr @CodeGen_codegen_member_exp(ptr nonnull %0, ptr %1, ptr nonnull %64, ptr %2)
  br label %common.ret
}

define internal fastcc void @CodeGen_codegen_for_stmt(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr @LLVMAppendBasicBlock(ptr %4, ptr nonnull @259)
  %6 = tail call ptr @LLVMBuildBr(ptr %1, ptr %5)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %5)
  %memberidx1 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %.not = icmp eq ptr %7, null
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  tail call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %1, ptr nonnull %7)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %memberidx3 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 2
  %8 = load ptr, ptr %memberidx3, align 8
  %.not87 = icmp eq ptr %8, null
  br i1 %.not87, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend
  tail call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %1, ptr nonnull %8)
  br label %ifend6

ifend6:                                           ; preds = %ifend, %if.entry4
  %9 = load ptr, ptr %memberidx, align 8
  %10 = tail call ptr @LLVMAppendBasicBlock(ptr %9, ptr nonnull @260)
  %11 = load ptr, ptr %memberidx, align 8
  %12 = tail call ptr @LLVMAppendBasicBlock(ptr %11, ptr nonnull @261)
  %13 = load ptr, ptr %memberidx, align 8
  %14 = tail call ptr @LLVMAppendBasicBlock(ptr %13, ptr nonnull @262)
  %15 = load ptr, ptr %memberidx, align 8
  %16 = tail call ptr @LLVMAppendBasicBlock(ptr %15, ptr nonnull @263)
  %memberidx12 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %17 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %18 = load ptr, ptr %memberidx13, align 8
  store ptr %16, ptr %memberidx12, align 8
  store ptr %14, ptr %memberidx13, align 8
  %19 = tail call ptr @LLVMBuildBr(ptr %1, ptr %10)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %10)
  %20 = tail call ptr @LLVMInt1Type()
  %21 = tail call ptr @LLVMConstInt(ptr %20, i64 1, i1 false)
  %memberidx16 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 3
  %22 = load ptr, ptr %memberidx16, align 8
  %.not88 = icmp eq ptr %22, null
  br i1 %.not88, label %ifend19, label %if.entry17

if.entry17:                                       ; preds = %ifend6
  %23 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr nonnull %22)
  br label %ifend19

ifend19:                                          ; preds = %ifend6, %if.entry17
  %24 = phi ptr [ %21, %ifend6 ], [ %23, %if.entry17 ]
  %25 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %24, ptr %12, ptr %16)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %12)
  %memberidx21 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 5
  %26 = load ptr, ptr %memberidx21, align 8
  %memberidx.i98 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %27 = load i1, ptr %memberidx.i98, align 1
  store i1 false, ptr %memberidx.i98, align 1
  %28 = load ptr, ptr %26, align 8
  %29 = tail call ptr @malloc(i32 25)
  %memberidx.i.i99 = getelementptr inbounds %Array_Statement_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %Array_Statement_, ptr %28, i64 0, i32 2
  %31 = load i64, ptr %memberidx1.i.i100, align 4
  store i1 false, ptr %29, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 1
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 3
  store ptr %30, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 2
  store i64 %31, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %32 = icmp slt i64 %31, 1
  br i1 %32, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %ifend19, %for.body.i
  %33 = phi i64 [ %34, %for.body.i ], [ 1, %ifend19 ]
  %statement.0.i107.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %30, %ifend19 ]
  %statement.0.i107 = load ptr, ptr %statement.0.i107.in, align 8
  tail call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i107)
  %34 = add nuw nsw i64 %33, 1
  store i64 %34, ptr %memberidx1.i.i.i, align 4
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %30, i64 %33
  %.not108 = icmp slt i64 %33, %31
  br i1 %.not108, label %for.body.i, label %CodeGen_codegen_block.exit

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %ifend19
  tail call void @free(ptr nonnull %29)
  store i1 %27, ptr %memberidx.i98, align 1
  %35 = load ptr, ptr %memberidx21, align 8
  %memberidx.i = getelementptr inbounds %Block, ptr %35, i64 0, i32 1
  %36 = load i1, ptr %memberidx.i, align 1
  %memberidx1.i = getelementptr inbounds %Block, ptr %35, i64 0, i32 2
  %37 = load i1, ptr %memberidx1.i, align 1
  %38 = or i1 %36, %37
  %memberidx2.i = getelementptr inbounds %Block, ptr %35, i64 0, i32 3
  %39 = load i1, ptr %memberidx2.i, align 1
  %40 = or i1 %38, %39
  br i1 %40, label %ifend25, label %if.entry23

if.entry23:                                       ; preds = %CodeGen_codegen_block.exit
  %41 = tail call ptr @LLVMBuildBr(ptr %1, ptr %14)
  br label %ifend25

ifend25:                                          ; preds = %CodeGen_codegen_block.exit, %if.entry23
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %14)
  %memberidx26 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 4
  %42 = load ptr, ptr %memberidx26, align 8
  %.not89 = icmp eq ptr %42, null
  br i1 %.not89, label %ifend29, label %if.entry27

if.entry27:                                       ; preds = %ifend25
  tail call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %1, ptr nonnull %42)
  br label %ifend29

ifend29:                                          ; preds = %ifend25, %if.entry27
  %43 = tail call ptr @LLVMBuildBr(ptr %1, ptr %10)
  store ptr %17, ptr %memberidx12, align 8
  store ptr %18, ptr %memberidx13, align 8
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %16)
  %44 = load ptr, ptr %memberidx1, align 8
  %.not90 = icmp eq ptr %44, null
  br i1 %.not90, label %ifend36, label %if.entry34

if.entry34:                                       ; preds = %ifend29
  %memberidx38 = getelementptr inbounds %VarDeclaration, ptr %44, i64 0, i32 2
  %45 = load ptr, ptr %memberidx38, align 8
  %46 = alloca %VarAccessExpression, align 8
  %memberidx39 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %47 = load ptr, ptr %memberidx39, align 8
  %memberidx.i91 = getelementptr inbounds %Program, ptr %47, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %VarId, ptr %45, i64 0, i32 1
  %49 = load i64, ptr %memberidx1.i92, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %50, i64 %49
  %51 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i93 = getelementptr inbounds %Module, ptr %51, i64 0, i32 2
  %52 = load ptr, ptr %memberidx2.i93, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %45, i64 0, i32 2
  %53 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Var_, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %54, i64 %53
  %55 = load ptr, ptr %ptridx.i6.i, align 8
  %56 = load ptr, ptr %55, align 8
  store i64 8, ptr %46, align 8
  %memberidx.i.i94 = getelementptr inbounds %Expression, ptr %46, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i94, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %46, i64 0, i32 1
  %memberidx.i95 = getelementptr inbounds %VarAccessExpression, ptr %46, i64 0, i32 4
  store ptr %45, ptr %memberidx.i95, align 8
  %memberidx1.i96 = getelementptr inbounds %Expression, ptr %46, i64 0, i32 3
  store ptr %56, ptr %memberidx1.i96, align 8
  %57 = load i64, ptr %45, align 4
  %58 = icmp eq i64 %57, 2
  store i1 %58, ptr %memberidx1.i.i, align 8
  %59 = call fastcc ptr @CodeGen_codegen_var_access_exp(ptr nonnull %0, ptr %1, ptr nonnull %46)
  %60 = tail call ptr @LLVMBuildFree(ptr %1, ptr %59)
  br label %ifend36

ifend36:                                          ; preds = %ifend29, %if.entry34
  ret void
}

define internal fastcc ptr @CodeGen_codegen_member_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 4
  %10 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = load i64, ptr %11, align 4
  %13 = icmp eq i64 %12, 19
  br i1 %13, label %if.entry.i149, label %is_object.exit

if.entry.i149:                                    ; preds = %4, %if.entry.i149
  %.tr5.i = phi ptr [ %14, %if.entry.i149 ], [ %11, %4 ]
  %memberidx1.i148 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %14 = load ptr, ptr %memberidx1.i148, align 8
  %15 = load i64, ptr %14, align 4
  %16 = icmp eq i64 %15, 19
  br i1 %16, label %if.entry.i149, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i149, %4
  %.lcssa.i = phi i64 [ %12, %4 ], [ %15, %if.entry.i149 ]
  %17 = icmp eq i64 %.lcssa.i, 11
  br i1 %17, label %if.entry, label %ifend

if.entry:                                         ; preds = %is_object.exit
  %18 = tail call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %2, ptr %3)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %19 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %20 = load ptr, ptr %memberidx3, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %20, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i.i.i, align 8
  %23 = load i64, ptr %21, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %25, i64 0, i32 4
  %26 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %21, i64 0, i32 2
  %27 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %28, i64 %27
  %29 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %30 = load i64, ptr %20, align 4
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry
  %memberidx1.i = getelementptr inbounds %Class, ptr %29, i64 0, i32 5
  %32 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %20, i64 0, i32 2
  %33 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %35, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i:                                          ; preds = %if.entry
  %memberidx4.i = getelementptr inbounds %Class, ptr %29, i64 0, i32 4
  %36 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %20, i64 0, i32 2
  %37 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %39, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load i64, ptr %common.ret.op.in.i, align 4
  %40 = icmp eq i64 %common.ret.op.i, 1
  %memberidx4 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %41 = load ptr, ptr %memberidx4, align 8
  %42 = load i64, ptr %41, align 4
  %43 = icmp eq i64 %42, 15
  %44 = and i1 %40, %43
  br i1 %44, label %common.ret, label %ifend7

ifend:                                            ; preds = %is_object.exit
  %memberidx10 = getelementptr inbounds %VarAccessExpression, ptr %10, i64 0, i32 4
  %45 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %46 = load ptr, ptr %memberidx11, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  %memberidx.i = getelementptr inbounds %PropId, ptr %46, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %48 = load i64, ptr %47, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %47, i64 0, i32 1
  %49 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %47, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i.i, align 4
  %51 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %8, ptr nonnull @224, i64 %48, i64 %49, i64 %50)
  %52 = load ptr, ptr %8, align 8
  %53 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %53, align 8
  %memberidx.i.i.i51 = getelementptr inbounds %string, ptr %53, i64 0, i32 1
  store ptr %52, ptr %memberidx.i.i.i51, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %53, i64 0, i32 2
  store i64 %51, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i52 = getelementptr inbounds %string, ptr %53, i64 0, i32 3
  store i64 %51, ptr %memberidx2.i.i.i52, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  %54 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %55 = call ptr %54(ptr nonnull %53)
  %56 = load i64, ptr %46, align 4
  %memberidx3.i54 = getelementptr inbounds %PropId, ptr %46, i64 0, i32 2
  %57 = load i64, ptr %memberidx3.i54, align 4
  %58 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %9, ptr nonnull @240, ptr %55, i64 %56, i64 %57)
  %59 = load ptr, ptr %9, align 8
  %60 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %60, align 8
  %memberidx.i.i55 = getelementptr inbounds %string, ptr %60, i64 0, i32 1
  store ptr %59, ptr %memberidx.i.i55, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %60, i64 0, i32 2
  store i64 %58, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %60, i64 0, i32 3
  store i64 %58, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %55)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  %61 = load i64, ptr %45, align 4
  switch i64 %61, label %common.ret [
    i64 3, label %if.entry13
    i64 4, label %if.entry29
  ]

common.ret:                                       ; preds = %else.i116, %ifend34, %ifend22, %get_class_prop_visibility.exit, %if.entry10.i119, %while.end.i113, %ifend, %ifend26, %ifend7
  %common.ret.op = phi ptr [ %63, %ifend7 ], [ %127, %ifend26 ], [ null, %ifend ], [ %174, %if.entry10.i119 ], [ null, %while.end.i113 ], [ %18, %get_class_prop_visibility.exit ], [ %common.ret.op.i73154, %ifend22 ], [ null, %ifend34 ], [ null, %else.i116 ]
  ret ptr %common.ret.op

ifend7:                                           ; preds = %get_class_prop_visibility.exit
  %62 = tail call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr nonnull %41, i1 true)
  %63 = tail call ptr @LLVMBuildLoad2(ptr %1, ptr %62, ptr %18, ptr nonnull @28)
  br label %common.ret

if.entry13:                                       ; preds = %ifend
  %64 = call ptr @malloc(i32 24)
  %memberidx.i56 = getelementptr inbounds %VarId, ptr %45, i64 0, i32 1
  %65 = load i64, ptr %memberidx.i56, align 4
  %memberidx1.i57 = getelementptr inbounds %VarId, ptr %45, i64 0, i32 2
  %66 = load i64, ptr %memberidx1.i57, align 4
  store i64 %65, ptr %64, align 4
  %memberidx1.i.i.i58 = getelementptr inbounds %TypeId, ptr %64, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i58, align 4
  %memberidx2.i.i.i59 = getelementptr inbounds %TypeId, ptr %64, i64 0, i32 2
  store i64 %66, ptr %memberidx2.i.i.i59, align 4
  %67 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr nonnull %64)
  %.not.i130 = icmp eq ptr %67, null
  br i1 %.not.i130, label %CodeGen_get_or_codegen_class_from_typeid.exit, label %ifend18

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry13
  %memberidx.i133 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %68 = load ptr, ptr %memberidx.i133, align 8
  %memberidx.i.i134 = getelementptr inbounds %Program, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i.i134, align 8
  %memberidx.i.i.i135 = getelementptr inbounds %Array_Module_, ptr %69, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i.i.i135, align 8
  %ptridx.i.i.i136 = getelementptr inbounds ptr, ptr %70, i64 %65
  %71 = load ptr, ptr %ptridx.i.i.i136, align 8
  %memberidx2.i.i137 = getelementptr inbounds %Module, ptr %71, i64 0, i32 4
  %72 = load ptr, ptr %memberidx2.i.i137, align 8
  %memberidx.i5.i.i139 = getelementptr inbounds %Array_Class_, ptr %72, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i5.i.i139, align 8
  %ptridx.i6.i.i140 = getelementptr inbounds ptr, ptr %73, i64 %66
  %74 = load ptr, ptr %ptridx.i6.i.i140, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %74)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %74)
  %75 = load ptr, ptr %74, align 8
  %76 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %75)
  %77 = icmp eq ptr %76, null
  br i1 %77, label %if.entry16, label %ifend18

if.entry16:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %78 = call ptr @malloc(i32 51)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(51) %78, ptr noundef nonnull align 8 dereferenceable(51) @252, i64 51, i1 false)
  %79 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %79, align 8
  %memberidx.i.i60 = getelementptr inbounds %string, ptr %79, i64 0, i32 1
  store ptr %78, ptr %memberidx.i.i60, align 8
  %memberidx1.i.i61 = getelementptr inbounds %string, ptr %79, i64 0, i32 2
  store i64 51, ptr %memberidx1.i.i61, align 4
  %memberidx2.i.i62 = getelementptr inbounds %string, ptr %79, i64 0, i32 3
  store i64 51, ptr %memberidx2.i.i62, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %80 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %81 = call ptr %80(ptr nonnull %79)
  %82 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %7, ptr nonnull @219, ptr %81)
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %84, align 8
  %memberidx.i.i64 = getelementptr inbounds %string, ptr %84, i64 0, i32 1
  store ptr %83, ptr %memberidx.i.i64, align 8
  %memberidx1.i.i65 = getelementptr inbounds %string, ptr %84, i64 0, i32 2
  store i64 %82, ptr %memberidx1.i.i65, align 4
  %memberidx2.i.i66 = getelementptr inbounds %string, ptr %84, i64 0, i32 3
  store i64 %82, ptr %memberidx2.i.i66, align 4
  call void @free(ptr %81)
  %85 = load ptr, ptr %84, align 8
  %memberidx.i.i.i67 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %85, i64 0, i32 3
  %86 = load ptr, ptr %memberidx.i.i.i67, align 8
  %87 = call ptr %86(ptr nonnull %84)
  %88 = load i64, ptr %memberidx1.i.i65, align 4
  call void @write(i64 1, ptr %87, i64 %88)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  unreachable

ifend18:                                          ; preds = %if.entry13, %CodeGen_get_or_codegen_class_from_typeid.exit
  %common.ret.op.i131152 = phi ptr [ %76, %CodeGen_get_or_codegen_class_from_typeid.exit ], [ %67, %if.entry13 ]
  %memberidx19 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i131152, i64 0, i32 3
  %89 = load ptr, ptr %memberidx19, align 8
  %90 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %60)
  %memberidx.i69 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %89, i64 0, i32 1
  %91 = load i64, ptr %memberidx.i69, align 4
  %92 = urem i64 %90, %91
  %93 = load ptr, ptr %89, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %93, i64 %92
  %94 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %94, null
  br i1 %.not.i, label %if.entry20, label %while.entry.i

while.entry.i:                                    ; preds = %ifend18, %else.i
  %95 = phi ptr [ %105, %else.i ], [ %93, %ifend18 ]
  %96 = phi i64 [ %106, %else.i ], [ %91, %ifend18 ]
  %97 = phi ptr [ %109, %else.i ], [ %94, %ifend18 ]
  %hash.0.i = phi i64 [ %108, %else.i ], [ %92, %ifend18 ]
  %98 = load ptr, ptr %97, align 8
  %memberidx.i.i70 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  %99 = load i64, ptr %memberidx.i.i70, align 4
  %100 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i = icmp eq i64 %99, %100
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i72 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  %101 = load ptr, ptr %memberidx2.i.i72, align 8
  %102 = load ptr, ptr %memberidx.i.i55, align 8
  %103 = call i64 @memcmp(ptr %101, ptr %102, i64 %99)
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre161 = load i64, ptr %memberidx.i69, align 4
  %.pre162 = load ptr, ptr %89, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre163.pre = load ptr, ptr %89, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre163.pre, i64 %hash.0.i
  %.pre164.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre164.pre, null
  br i1 %.not29.i, label %if.entry20, label %Map_string_LLVMValueRef____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %105 = phi ptr [ %.pre162, %ifend.i.i.else.i_crit_edge ], [ %95, %while.entry.i ]
  %106 = phi i64 [ %.pre161, %ifend.i.i.else.i_crit_edge ], [ %96, %while.entry.i ]
  %107 = add nuw i64 %hash.0.i, 1
  %108 = urem i64 %107, %106
  %ptridx7.i = getelementptr inbounds ptr, ptr %105, i64 %108
  %109 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %109, null
  br i1 %.not30.i, label %if.entry20, label %while.entry.i

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre164.pre, i64 0, i32 1
  %110 = load ptr, ptr %memberidx15.i, align 8
  %111 = icmp eq ptr %110, null
  br i1 %111, label %if.entry20, label %ifend22

if.entry20:                                       ; preds = %else.i, %ifend18, %while.end.i, %Map_string_LLVMValueRef____getitem__.exit
  %112 = call ptr @malloc(i32 59)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(59) %112, ptr noundef nonnull align 8 dereferenceable(59) @253, i64 59, i1 false)
  %113 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %113, align 8
  %memberidx.i.i74 = getelementptr inbounds %string, ptr %113, i64 0, i32 1
  store ptr %112, ptr %memberidx.i.i74, align 8
  %memberidx1.i.i75 = getelementptr inbounds %string, ptr %113, i64 0, i32 2
  store i64 59, ptr %memberidx1.i.i75, align 4
  %memberidx2.i.i76 = getelementptr inbounds %string, ptr %113, i64 0, i32 3
  store i64 59, ptr %memberidx2.i.i76, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %114 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %115 = call ptr %114(ptr nonnull %113)
  %116 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @219, ptr %115)
  %117 = load ptr, ptr %6, align 8
  %118 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %118, align 8
  %memberidx.i.i78 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  store ptr %117, ptr %memberidx.i.i78, align 8
  %memberidx1.i.i79 = getelementptr inbounds %string, ptr %118, i64 0, i32 2
  store i64 %116, ptr %memberidx1.i.i79, align 4
  %memberidx2.i.i80 = getelementptr inbounds %string, ptr %118, i64 0, i32 3
  store i64 %116, ptr %memberidx2.i.i80, align 4
  call void @free(ptr %115)
  %119 = load ptr, ptr %118, align 8
  %memberidx.i.i.i81 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %119, i64 0, i32 3
  %120 = load ptr, ptr %memberidx.i.i.i81, align 8
  %121 = call ptr %120(ptr nonnull %118)
  %122 = load i64, ptr %memberidx1.i.i79, align 4
  call void @write(i64 1, ptr %121, i64 %122)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  br label %ifend22

ifend22:                                          ; preds = %Map_string_LLVMValueRef____getitem__.exit, %if.entry20
  %common.ret.op.i73154 = phi ptr [ %110, %Map_string_LLVMValueRef____getitem__.exit ], [ null, %if.entry20 ]
  %memberidx23 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %123 = load ptr, ptr %memberidx23, align 8
  %124 = load i64, ptr %123, align 4
  %125 = icmp eq i64 %124, 15
  br i1 %125, label %common.ret, label %ifend26

ifend26:                                          ; preds = %ifend22
  %126 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %123, i1 true)
  %127 = call ptr @LLVMBuildLoad2(ptr %1, ptr %126, ptr %common.ret.op.i73154, ptr nonnull @28)
  br label %common.ret

if.entry29:                                       ; preds = %ifend
  %128 = call ptr @malloc(i32 24)
  %memberidx.i83 = getelementptr inbounds %VarId, ptr %45, i64 0, i32 1
  %129 = load i64, ptr %memberidx.i83, align 4
  %memberidx1.i84 = getelementptr inbounds %VarId, ptr %45, i64 0, i32 2
  %130 = load i64, ptr %memberidx1.i84, align 4
  store i64 %129, ptr %128, align 4
  %memberidx1.i.i.i85 = getelementptr inbounds %TypeId, ptr %128, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i.i85, align 4
  %memberidx2.i.i.i86 = getelementptr inbounds %TypeId, ptr %128, i64 0, i32 2
  store i64 %130, ptr %memberidx2.i.i.i86, align 4
  %131 = call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr nonnull %128)
  %.not.i121 = icmp eq ptr %131, null
  br i1 %.not.i121, label %CodeGen_get_or_codegen_enum_from_typeid.exit, label %ifend34

CodeGen_get_or_codegen_enum_from_typeid.exit:     ; preds = %if.entry29
  %memberidx.i124 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %132 = load ptr, ptr %memberidx.i124, align 8
  %memberidx.i.i125 = getelementptr inbounds %Program, ptr %132, i64 0, i32 1
  %133 = load ptr, ptr %memberidx.i.i125, align 8
  %memberidx.i.i.i126 = getelementptr inbounds %Array_Module_, ptr %133, i64 0, i32 1
  %134 = load ptr, ptr %memberidx.i.i.i126, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %134, i64 %129
  %135 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i127 = getelementptr inbounds %Module, ptr %135, i64 0, i32 7
  %136 = load ptr, ptr %memberidx2.i.i127, align 8
  %memberidx.i5.i.i = getelementptr inbounds %Array_Enum_, ptr %136, i64 0, i32 1
  %137 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %137, i64 %130
  %138 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_enum(ptr %0, ptr %138)
  %139 = load ptr, ptr %138, align 8
  %140 = call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %139)
  %141 = icmp eq ptr %140, null
  br i1 %141, label %if.entry32, label %ifend34

if.entry32:                                       ; preds = %CodeGen_get_or_codegen_enum_from_typeid.exit
  %142 = call ptr @malloc(i32 50)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(50) %142, ptr noundef nonnull align 8 dereferenceable(50) @254, i64 50, i1 false)
  %143 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %143, align 8
  %memberidx.i.i87 = getelementptr inbounds %string, ptr %143, i64 0, i32 1
  store ptr %142, ptr %memberidx.i.i87, align 8
  %memberidx1.i.i88 = getelementptr inbounds %string, ptr %143, i64 0, i32 2
  store i64 50, ptr %memberidx1.i.i88, align 4
  %memberidx2.i.i89 = getelementptr inbounds %string, ptr %143, i64 0, i32 3
  store i64 50, ptr %memberidx2.i.i89, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %144 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %145 = call ptr %144(ptr nonnull %143)
  %146 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @219, ptr %145)
  %147 = load ptr, ptr %5, align 8
  %148 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %148, align 8
  %memberidx.i.i91 = getelementptr inbounds %string, ptr %148, i64 0, i32 1
  store ptr %147, ptr %memberidx.i.i91, align 8
  %memberidx1.i.i92 = getelementptr inbounds %string, ptr %148, i64 0, i32 2
  store i64 %146, ptr %memberidx1.i.i92, align 4
  %memberidx2.i.i93 = getelementptr inbounds %string, ptr %148, i64 0, i32 3
  store i64 %146, ptr %memberidx2.i.i93, align 4
  call void @free(ptr %145)
  %149 = load ptr, ptr %148, align 8
  %memberidx.i.i.i94 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %149, i64 0, i32 3
  %150 = load ptr, ptr %memberidx.i.i.i94, align 8
  %151 = call ptr %150(ptr nonnull %148)
  %152 = load i64, ptr %memberidx1.i.i92, align 4
  call void @write(i64 1, ptr %151, i64 %152)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  unreachable

ifend34:                                          ; preds = %if.entry29, %CodeGen_get_or_codegen_enum_from_typeid.exit
  %common.ret.op.i122157 = phi ptr [ %140, %CodeGen_get_or_codegen_enum_from_typeid.exit ], [ %131, %if.entry29 ]
  %memberidx35 = getelementptr inbounds %CGEnumType, ptr %common.ret.op.i122157, i64 0, i32 1
  %153 = load ptr, ptr %memberidx35, align 8
  %154 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %60)
  %memberidx.i96 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %153, i64 0, i32 1
  %155 = load i64, ptr %memberidx.i96, align 4
  %156 = urem i64 %154, %155
  %157 = load ptr, ptr %153, align 8
  %ptridx.i97 = getelementptr inbounds ptr, ptr %157, i64 %156
  %158 = load ptr, ptr %ptridx.i97, align 8
  %.not.i98 = icmp eq ptr %158, null
  br i1 %.not.i98, label %common.ret, label %while.entry.i104

while.entry.i104:                                 ; preds = %ifend34, %else.i116
  %159 = phi ptr [ %169, %else.i116 ], [ %157, %ifend34 ]
  %160 = phi i64 [ %170, %else.i116 ], [ %155, %ifend34 ]
  %161 = phi ptr [ %173, %else.i116 ], [ %158, %ifend34 ]
  %hash.0.i99 = phi i64 [ %172, %else.i116 ], [ %156, %ifend34 ]
  %162 = load ptr, ptr %161, align 8
  %memberidx.i.i101 = getelementptr inbounds %string, ptr %162, i64 0, i32 2
  %163 = load i64, ptr %memberidx.i.i101, align 4
  %164 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i103 = icmp eq i64 %163, %164
  br i1 %.not.i.i103, label %ifend.i.i107, label %else.i116

ifend.i.i107:                                     ; preds = %while.entry.i104
  %memberidx2.i.i105 = getelementptr inbounds %string, ptr %162, i64 0, i32 1
  %165 = load ptr, ptr %memberidx2.i.i105, align 8
  %166 = load ptr, ptr %memberidx.i.i55, align 8
  %167 = call i64 @memcmp(ptr %165, ptr %166, i64 %163)
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %while.end.i113, label %ifend.i.i107.else.i116_crit_edge

ifend.i.i107.else.i116_crit_edge:                 ; preds = %ifend.i.i107
  %.pre = load i64, ptr %memberidx.i96, align 4
  %.pre158 = load ptr, ptr %153, align 8
  br label %else.i116

while.end.i113:                                   ; preds = %ifend.i.i107
  %.pre159.pre = load ptr, ptr %153, align 8
  %ptridx9.i111.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre159.pre, i64 %hash.0.i99
  %.pre160.pre = load ptr, ptr %ptridx9.i111.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i112 = icmp eq ptr %.pre160.pre, null
  br i1 %.not29.i112, label %common.ret, label %if.entry10.i119

else.i116:                                        ; preds = %ifend.i.i107.else.i116_crit_edge, %while.entry.i104
  %169 = phi ptr [ %.pre158, %ifend.i.i107.else.i116_crit_edge ], [ %159, %while.entry.i104 ]
  %170 = phi i64 [ %.pre, %ifend.i.i107.else.i116_crit_edge ], [ %160, %while.entry.i104 ]
  %171 = add nuw i64 %hash.0.i99, 1
  %172 = urem i64 %171, %170
  %ptridx7.i114 = getelementptr inbounds ptr, ptr %169, i64 %172
  %173 = load ptr, ptr %ptridx7.i114, align 8
  %.not30.i115 = icmp eq ptr %173, null
  br i1 %.not30.i115, label %common.ret, label %while.entry.i104

if.entry10.i119:                                  ; preds = %while.end.i113
  %memberidx15.i118 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre160.pre, i64 0, i32 1
  %174 = load ptr, ptr %memberidx15.i118, align 8
  br label %common.ret
}

define internal fastcc void @CodeGen_declare_static_props(ptr nocapture %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Class, ptr %2, i64 0, i32 7
  %5 = load ptr, ptr %memberidx, align 8
  %6 = tail call ptr @malloc(i32 25)
  %7 = load ptr, ptr %5, align 8
  %memberidx1.i48 = getelementptr inbounds %Map_string_PropId_, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %memberidx1.i48, align 4
  %memberidx2.i49 = getelementptr inbounds %Map_string_PropId_, ptr %5, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i49, align 4
  store i1 false, ptr %6, align 1
  %memberidx1.i.i50 = getelementptr inbounds %MapIterator_string_PropId_, ptr %6, i64 0, i32 1
  store ptr %7, ptr %memberidx1.i.i50, align 8
  %memberidx2.i.i51 = getelementptr inbounds %MapIterator_string_PropId_, ptr %6, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %6, i64 0, i32 3
  store i64 %9, ptr %memberidx3.i.i, align 4
  %10 = add nsw i64 %8, -1
  store i64 %10, ptr %memberidx2.i.i51, align 4
  %11 = icmp sgt i64 %8, 0
  br i1 %11, label %while.entry.i42, label %MapIterator_string_PropId__next.exit47

while.entry.i42:                                  ; preds = %for.entry, %ifend.i46
  %12 = phi i64 [ %15, %ifend.i46 ], [ %10, %for.entry ]
  %13 = phi ptr [ %incdec.ptr.i40, %ifend.i46 ], [ %7, %for.entry ]
  %incdec.ptr.i40 = getelementptr inbounds ptr, ptr %13, i64 1
  %14 = load ptr, ptr %13, align 8
  %.not.i41 = icmp eq ptr %14, null
  br i1 %.not.i41, label %ifend.i46, label %MapIterator_string_PropId__next.exit47.loopexit

ifend.i46:                                        ; preds = %while.entry.i42
  %15 = add nsw i64 %12, -1
  store i64 %15, ptr %memberidx2.i.i51, align 4
  %16 = icmp sgt i64 %12, 0
  br i1 %16, label %while.entry.i42, label %MapIterator_string_PropId__next.exit47.loopexit

MapIterator_string_PropId__next.exit47.loopexit:  ; preds = %ifend.i46, %while.entry.i42
  %17 = phi i64 [ %15, %ifend.i46 ], [ %12, %while.entry.i42 ]
  store ptr %incdec.ptr.i40, ptr %memberidx1.i.i50, align 8
  br label %MapIterator_string_PropId__next.exit47

MapIterator_string_PropId__next.exit47:           ; preds = %MapIterator_string_PropId__next.exit47.loopexit, %for.entry
  %18 = phi i64 [ %17, %MapIterator_string_PropId__next.exit47.loopexit ], [ %10, %for.entry ]
  %memberidx1.i.i50.promoted60 = phi ptr [ %incdec.ptr.i40, %MapIterator_string_PropId__next.exit47.loopexit ], [ %7, %for.entry ]
  %storemerge57 = icmp slt i64 %9, 1
  br i1 %storemerge57, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit47
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx5 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %memberidx11 = getelementptr inbounds %Class, ptr %2, i64 0, i32 4
  %memberidx14 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 3
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit
  %19 = phi i64 [ %18, %for.body.lr.ph ], [ %96, %MapIterator_string_PropId__next.exit ]
  %incdec.ptr.i.lcssa62 = phi ptr [ %memberidx1.i.i50.promoted60, %for.body.lr.ph ], [ %incdec.ptr.i.lcssa61, %MapIterator_string_PropId__next.exit ]
  %storemerge5558.in = phi i64 [ %9, %for.body.lr.ph ], [ %storemerge5558, %MapIterator_string_PropId__next.exit ]
  %storemerge5558 = add nsw i64 %storemerge5558.in, -1
  %entry.0.in = getelementptr inbounds ptr, ptr %incdec.ptr.i.lcssa62, i64 -1
  %entry.0 = load ptr, ptr %entry.0.in, align 8
  %memberidx2 = getelementptr inbounds %MapEntry_string_PropId_, ptr %entry.0, i64 0, i32 1
  %20 = load ptr, ptr %memberidx2, align 8
  %21 = load ptr, ptr %entry.0, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i32 = getelementptr inbounds %PropId, ptr %20, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i32, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %23 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %22, i64 0, i32 1
  %24 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %22, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i.i, align 4
  %26 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @224, i64 %23, i64 %24, i64 %25)
  %27 = load ptr, ptr %3, align 8
  %28 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %28, align 8
  %memberidx.i.i.i33 = getelementptr inbounds %string, ptr %28, i64 0, i32 1
  store ptr %27, ptr %memberidx.i.i.i33, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 2
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i34 = getelementptr inbounds %string, ptr %28, i64 0, i32 3
  store i64 %26, ptr %memberidx2.i.i.i34, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %29 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %30 = call ptr %29(ptr nonnull %28)
  %31 = load i64, ptr %20, align 4
  %memberidx3.i36 = getelementptr inbounds %PropId, ptr %20, i64 0, i32 2
  %32 = load i64, ptr %memberidx3.i36, align 4
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @240, ptr %30, i64 %31, i64 %32)
  %34 = load ptr, ptr %4, align 8
  %35 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i37 = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i37, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %30)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %36 = load ptr, ptr %memberidx4, align 8
  %37 = load ptr, ptr %memberidx.i32, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i.i.i, align 8
  %39 = load i64, ptr %37, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %38, i64 0, i32 1
  %40 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %40, i64 %39
  %41 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %41, i64 0, i32 4
  %42 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %37, i64 0, i32 2
  %43 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %44, i64 %43
  %45 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %46 = load i64, ptr %20, align 4
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %if.entry.i, label %ifend.i31

if.entry.i:                                       ; preds = %for.body
  %memberidx1.i29 = getelementptr inbounds %Class, ptr %45, i64 0, i32 5
  %48 = load ptr, ptr %memberidx1.i29, align 8
  %49 = load i64, ptr %memberidx3.i36, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %50, i64 %49
  %51 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %51, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i31:                                        ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %45, i64 0, i32 4
  %52 = load ptr, ptr %memberidx4.i, align 8
  %53 = load i64, ptr %memberidx3.i36, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %54, i64 %53
  %55 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %55, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i31
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i31 ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %56 = load i64, ptr %common.ret.op.i, align 4
  %57 = icmp eq i64 %56, 19
  br i1 %57, label %if.entry.i53, label %is_object.exit

if.entry.i53:                                     ; preds = %get_class_prop_type.exit, %if.entry.i53
  %.tr5.i = phi ptr [ %58, %if.entry.i53 ], [ %common.ret.op.i, %get_class_prop_type.exit ]
  %memberidx1.i52 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %58 = load ptr, ptr %memberidx1.i52, align 8
  %59 = load i64, ptr %58, align 4
  %60 = icmp eq i64 %59, 19
  br i1 %60, label %if.entry.i53, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i53, %get_class_prop_type.exit
  %.lcssa.i = phi i64 [ %56, %get_class_prop_type.exit ], [ %59, %if.entry.i53 ]
  %61 = icmp eq i64 %.lcssa.i, 11
  %62 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %common.ret.op.i, i1 %61)
  %63 = load ptr, ptr %memberidx5, align 8
  %64 = load ptr, ptr %63, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 5
  %65 = load ptr, ptr %memberidx6, align 8
  %66 = call ptr %65(ptr nonnull %63)
  %67 = load ptr, ptr %21, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %67, i64 0, i32 5
  %68 = load ptr, ptr %memberidx7, align 8
  %69 = call ptr %68(ptr nonnull %21)
  %70 = alloca ptr, align 8
  %71 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %70, ptr nonnull @90, ptr %66, ptr %69)
  %72 = load ptr, ptr %70, align 8
  %73 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %73, align 8
  %memberidx.i26 = getelementptr inbounds %string, ptr %73, i64 0, i32 1
  store ptr %72, ptr %memberidx.i26, align 8
  %memberidx1.i27 = getelementptr inbounds %string, ptr %73, i64 0, i32 2
  store i64 %71, ptr %memberidx1.i27, align 4
  %memberidx2.i28 = getelementptr inbounds %string, ptr %73, i64 0, i32 3
  store i64 %71, ptr %memberidx2.i28, align 4
  tail call void @free(ptr %66)
  tail call void @free(ptr %69)
  %74 = load i64, ptr %20, align 4
  %75 = icmp eq i64 %74, 0
  %76 = load ptr, ptr %0, align 8
  %77 = load ptr, ptr %73, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %77, i64 0, i32 5
  %78 = load ptr, ptr %memberidx1.i, align 8
  %79 = call ptr %78(ptr nonnull %73)
  br i1 %75, label %if.entry, label %else

for.end:                                          ; preds = %MapIterator_string_PropId__next.exit, %MapIterator_string_PropId__next.exit47
  tail call void @free(ptr nonnull %6)
  ret void

if.entry:                                         ; preds = %is_object.exit
  %80 = call ptr @LLVMAddFunction(ptr %76, ptr %79, ptr %62)
  br label %ifend

else:                                             ; preds = %is_object.exit
  %81 = call ptr @LLVMAddGlobal(ptr %76, ptr %62, ptr %79)
  %82 = load ptr, ptr %memberidx11, align 8
  %83 = load i64, ptr %memberidx3.i36, align 4
  %memberidx.i25 = getelementptr inbounds %Array_ClassField_, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i25, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx.i, align 8
  %memberidx13 = getelementptr inbounds %ClassField, ptr %85, i64 0, i32 5
  %86 = load ptr, ptr %memberidx13, align 8
  %87 = call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr null, ptr %86)
  call void @LLVMSetInitializer(ptr %81, ptr %87)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %88 = phi ptr [ %81, %else ], [ %80, %if.entry ]
  %89 = load ptr, ptr %memberidx14, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %89, ptr nonnull %35, ptr %88)
  %90 = add nsw i64 %19, -1
  store i64 %90, ptr %memberidx2.i.i51, align 4
  %91 = icmp sgt i64 %19, 0
  br i1 %91, label %while.entry.i, label %MapIterator_string_PropId__next.exit

while.entry.i:                                    ; preds = %ifend, %ifend.i
  %92 = phi i64 [ %95, %ifend.i ], [ %90, %ifend ]
  %93 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %incdec.ptr.i.lcssa62, %ifend ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %93, i64 1
  %94 = load ptr, ptr %93, align 8
  %.not.i = icmp eq ptr %94, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit

ifend.i:                                          ; preds = %while.entry.i
  %95 = add nsw i64 %92, -1
  store i64 %95, ptr %memberidx2.i.i51, align 4
  %.not = icmp eq i64 %92, 0
  br i1 %.not, label %MapIterator_string_PropId__next.exit, label %while.entry.i

MapIterator_string_PropId__next.exit:             ; preds = %while.entry.i, %ifend.i, %ifend
  %96 = phi i64 [ %90, %ifend ], [ %92, %while.entry.i ], [ -1, %ifend.i ]
  %incdec.ptr.i.lcssa61 = phi ptr [ %incdec.ptr.i.lcssa62, %ifend ], [ %incdec.ptr.i, %ifend.i ], [ %incdec.ptr.i, %while.entry.i ]
  %storemerge = icmp slt i64 %storemerge5558.in, 2
  br i1 %storemerge, label %for.end, label %for.body
}

define internal fastcc void @CodeGen_codegen_function(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Function, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 5
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = tail call ptr %7(ptr nonnull %5)
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds %Function, ptr %1, i64 0, i32 4
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = tail call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %10, i1 false)
  %12 = tail call ptr @LLVMAddFunction(ptr %9, ptr %8, ptr %11)
  %13 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %14 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i.i = getelementptr inbounds %VarId, ptr %13, i64 0, i32 1
  %15 = load i64, ptr %memberidx.i.i, align 4
  %16 = load i64, ptr %13, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %13, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i.i, align 4
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @224, i64 %15, i64 %16, i64 %17)
  %19 = load ptr, ptr %4, align 8
  %20 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %14, ptr nonnull %20, ptr %12)
  %memberidx5 = getelementptr inbounds %Function, ptr %1, i64 0, i32 6
  %21 = load i1, ptr %memberidx5, align 1
  br i1 %21, label %if.entry, label %ifend

common.ret:                                       ; preds = %CodeGen_codegen_block.exit, %if.entry
  ret void

if.entry:                                         ; preds = %2
  call void @LLVMSetLinkage(ptr %12, i64 0)
  br label %common.ret

ifend:                                            ; preds = %2
  %22 = call ptr @LLVMCreateBuilder()
  %23 = call ptr @LLVMAppendBasicBlock(ptr %12, ptr nonnull @28)
  call void @LLVMPositionBuilderAtEnd(ptr %22, ptr %23)
  %memberidx6 = getelementptr inbounds %Function, ptr %1, i64 0, i32 2
  %24 = load ptr, ptr %memberidx6, align 8
  %memberidx750 = getelementptr inbounds %Array_FunctionArg_, ptr %24, i64 0, i32 2
  %25 = load i64, ptr %memberidx750, align 4
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %for.body, label %for.end

for.body:                                         ; preds = %ifend, %for.body
  %27 = phi ptr [ %48, %for.body ], [ %24, %ifend ]
  %storemerge51 = phi i64 [ %47, %for.body ], [ 0, %ifend ]
  %memberidx.i35 = getelementptr inbounds %Array_FunctionArg_, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i35, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %28, i64 %storemerge51
  %29 = load ptr, ptr %ptridx.i, align 8
  %30 = call ptr @LLVMGetParam(ptr %12, i64 %storemerge51)
  %memberidx9 = getelementptr inbounds %Expression, ptr %29, i64 0, i32 3
  %31 = load ptr, ptr %memberidx9, align 8
  %32 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %31, i1 true)
  %memberidx10 = getelementptr inbounds %FunctionArg, ptr %29, i64 0, i32 5
  %33 = load ptr, ptr %memberidx10, align 8
  %34 = load ptr, ptr %33, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 5
  %35 = load ptr, ptr %memberidx11, align 8
  %36 = call ptr %35(ptr nonnull %33)
  %37 = call ptr @LLVMBuildAlloca(ptr %22, ptr %32, ptr %36)
  %38 = call ptr @LLVMBuildStore(ptr %22, ptr %30, ptr %37)
  %memberidx12 = getelementptr inbounds %FunctionArg, ptr %29, i64 0, i32 4
  %39 = load ptr, ptr %memberidx12, align 8
  %40 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %memberidx.i.i37 = getelementptr inbounds %VarId, ptr %39, i64 0, i32 1
  %41 = load i64, ptr %memberidx.i.i37, align 4
  %42 = load i64, ptr %39, align 4
  %memberidx2.i.i38 = getelementptr inbounds %VarId, ptr %39, i64 0, i32 2
  %43 = load i64, ptr %memberidx2.i.i38, align 4
  %44 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @224, i64 %41, i64 %42, i64 %43)
  %45 = load ptr, ptr %3, align 8
  %46 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i.i39 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i.i39, align 8
  %memberidx1.i.i.i40 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 %44, ptr %memberidx1.i.i.i40, align 4
  %memberidx2.i.i.i41 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 %44, ptr %memberidx2.i.i.i41, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %40, ptr nonnull %46, ptr %37)
  %47 = add nuw nsw i64 %storemerge51, 1
  %48 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_FunctionArg_, ptr %48, i64 0, i32 2
  %49 = load i64, ptr %memberidx7, align 4
  %50 = icmp slt i64 %47, %49
  br i1 %50, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %ifend
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %51 = load ptr, ptr %memberidx13, align 8
  store ptr %12, ptr %memberidx13, align 8
  %memberidx15 = getelementptr inbounds %Function, ptr %1, i64 0, i32 3
  %52 = load ptr, ptr %memberidx15, align 8
  %memberidx.i42 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %53 = load i1, ptr %memberidx.i42, align 1
  store i1 false, ptr %memberidx.i42, align 1
  %54 = load ptr, ptr %52, align 8
  %55 = call ptr @malloc(i32 25)
  %memberidx.i.i43 = getelementptr inbounds %Array_Statement_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i43, align 8
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %54, i64 0, i32 2
  %57 = load i64, ptr %memberidx1.i.i, align 4
  store i1 false, ptr %55, align 1
  %memberidx1.i.i.i44 = getelementptr inbounds %ArrayIterator_Statement_, ptr %55, i64 0, i32 1
  %memberidx2.i.i.i45 = getelementptr inbounds %ArrayIterator_Statement_, ptr %55, i64 0, i32 3
  store ptr %56, ptr %memberidx2.i.i.i45, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %55, i64 0, i32 2
  store i64 %57, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i44, align 4
  %58 = icmp slt i64 %57, 1
  br i1 %58, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %for.end, %for.body.i
  %59 = phi i64 [ %60, %for.body.i ], [ 1, %for.end ]
  %statement.0.i49.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %56, %for.end ]
  %statement.0.i49 = load ptr, ptr %statement.0.i49.in, align 8
  call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %22, ptr %statement.0.i49)
  %60 = add nuw nsw i64 %59, 1
  store i64 %60, ptr %memberidx1.i.i.i44, align 4
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %56, i64 %59
  %.not = icmp slt i64 %59, %57
  br i1 %.not, label %for.body.i, label %CodeGen_codegen_block.exit

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %for.end
  call void @free(ptr nonnull %55)
  store i1 %53, ptr %memberidx.i42, align 1
  call void @LLVMDisposeBuilder(ptr %22)
  store ptr %51, ptr %memberidx13, align 8
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_LLVMTypeRef__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_LLVMTypeRef__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc void @CodeGen_declare_class_props(ptr nocapture %0, ptr nocapture %1, ptr %2, ptr nocapture %3) unnamed_addr {
for.entry:
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 1
  %8 = tail call ptr @malloc(i32 64)
  store ptr %8, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %9, align 8
  %memberidx.i115 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 2
  %memberidx1.i116 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 3
  store i64 8, ptr %memberidx1.i116, align 4
  %memberidx2.i117 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 1
  %10 = tail call ptr @malloc(i32 64)
  store ptr %10, ptr %memberidx2.i117, align 8
  store i64 0, ptr %memberidx.i115, align 4
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %11, align 8
  %memberidx.i118 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 2
  %memberidx1.i119 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 3
  store i64 8, ptr %memberidx1.i119, align 4
  %memberidx2.i120 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 1
  %12 = tail call ptr @malloc(i32 64)
  store ptr %12, ptr %memberidx2.i120, align 8
  store i64 0, ptr %memberidx.i118, align 4
  %memberidx6 = getelementptr inbounds %Class, ptr %2, i64 0, i32 6
  %13 = load ptr, ptr %memberidx6, align 8
  %14 = tail call ptr @malloc(i32 25)
  %15 = load ptr, ptr %13, align 8
  %memberidx1.i121 = getelementptr inbounds %Map_string_PropId_, ptr %13, i64 0, i32 1
  %16 = load i64, ptr %memberidx1.i121, align 4
  %memberidx2.i122 = getelementptr inbounds %Map_string_PropId_, ptr %13, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i122, align 4
  %memberidx1.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %14, i64 0, i32 1
  store ptr %15, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %14, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %14, i64 0, i32 3
  %18 = add nsw i64 %16, -1
  store i64 %18, ptr %memberidx2.i.i, align 4
  %19 = icmp sgt i64 %16, 0
  br i1 %19, label %while.entry.i, label %MapIterator_string_PropId__next.exit

while.entry.i:                                    ; preds = %for.entry, %ifend.i
  %20 = phi i64 [ %23, %ifend.i ], [ %18, %for.entry ]
  %21 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %15, %for.entry ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %21, i64 1
  %22 = load ptr, ptr %21, align 8
  %.not.i = icmp eq ptr %22, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit.loopexit

ifend.i:                                          ; preds = %while.entry.i
  %23 = add nsw i64 %20, -1
  store i64 %23, ptr %memberidx2.i.i, align 4
  %24 = icmp sgt i64 %20, 0
  br i1 %24, label %while.entry.i, label %MapIterator_string_PropId__next.exit.loopexit

MapIterator_string_PropId__next.exit.loopexit:    ; preds = %ifend.i, %while.entry.i
  store ptr %incdec.ptr.i, ptr %memberidx1.i.i, align 8
  br label %MapIterator_string_PropId__next.exit

MapIterator_string_PropId__next.exit:             ; preds = %MapIterator_string_PropId__next.exit.loopexit, %for.entry
  %storemerge307322 = add nsw i64 %17, -1
  store i64 %storemerge307322, ptr %memberidx3.i.i, align 4
  %storemerge323 = icmp slt i64 %17, 1
  store i1 %storemerge323, ptr %14, align 1
  br i1 %storemerge323, label %for.end.thread, label %for.body.lr.ph

for.end.thread:                                   ; preds = %MapIterator_string_PropId__next.exit
  tail call void @free(ptr nonnull %14)
  br label %ifend61

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit
  %memberidx10 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx13 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 2
  %memberidx25 = getelementptr inbounds %Class, ptr %2, i64 0, i32 5
  %memberidx31 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %memberidx51 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 1
  %memberidx38 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 3
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit167
  %.pn = load ptr, ptr %memberidx1.i.i, align 8
  %entry.0.in = getelementptr inbounds ptr, ptr %.pn, i64 -1
  %entry.0 = load ptr, ptr %entry.0.in, align 8
  %memberidx8 = getelementptr inbounds %MapEntry_string_PropId_, ptr %entry.0, i64 0, i32 1
  %25 = load ptr, ptr %memberidx8, align 8
  %26 = load ptr, ptr %entry.0, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i125 = getelementptr inbounds %PropId, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i125, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %28 = load i64, ptr %27, align 4
  %memberidx1.i.i126 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 1
  %29 = load i64, ptr %memberidx1.i.i126, align 4
  %memberidx2.i.i127 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i.i127, align 4
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @224, i64 %28, i64 %29, i64 %30)
  %32 = load ptr, ptr %5, align 8
  %33 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 %31, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 %31, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %34 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %35 = call ptr %34(ptr nonnull %33)
  %36 = load i64, ptr %25, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %25, i64 0, i32 2
  %37 = load i64, ptr %memberidx3.i, align 4
  %38 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @240, ptr %35, i64 %36, i64 %37)
  %39 = load ptr, ptr %6, align 8
  %40 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %40, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  store ptr %39, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  store i64 %38, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %40, i64 0, i32 3
  store i64 %38, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %41 = load ptr, ptr %memberidx10, align 8
  %42 = load ptr, ptr %memberidx.i125, align 8
  %memberidx.i.i.i130 = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i.i130, align 8
  %44 = load i64, ptr %42, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i131 = getelementptr inbounds %Module, ptr %46, i64 0, i32 4
  %47 = load ptr, ptr %memberidx2.i.i.i131, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %42, i64 0, i32 2
  %48 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %51 = load i64, ptr %25, align 4
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %get_vtable_index.exit.thread, label %get_vtable_index.exit

get_vtable_index.exit.thread:                     ; preds = %for.body
  %memberidx1.i132 = getelementptr inbounds %Class, ptr %50, i64 0, i32 5
  %53 = load ptr, ptr %memberidx1.i132, align 8
  %54 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i134 = getelementptr inbounds %ClassMethod, ptr %56, i64 0, i32 4
  %common.ret.op.i295 = load ptr, ptr %memberidx3.i134, align 8
  %prop_index296 = alloca i64, align 8
  %memberidx3.i150 = getelementptr inbounds %ClassMethod, ptr %56, i64 0, i32 9
  %common.ret.op.i145304 = load i64, ptr %memberidx3.i150, align 4
  store i64 %common.ret.op.i145304, ptr %prop_index296, align 8
  br label %else

get_vtable_index.exit:                            ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %50, i64 0, i32 4
  %57 = load ptr, ptr %memberidx4.i, align 8
  %58 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %58
  %60 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %60, i64 0, i32 4
  %common.ret.op.i = load ptr, ptr %memberidx6.i, align 8
  %prop_index = alloca i64, align 8
  %memberidx6.i156 = getelementptr inbounds %ClassField, ptr %60, i64 0, i32 6
  %common.ret.op.i145 = load i64, ptr %memberidx6.i156, align 4
  store i64 %common.ret.op.i145, ptr %prop_index, align 8
  %61 = icmp eq i64 %51, 1
  br i1 %61, label %if.entry, label %else

for.incr:                                         ; preds = %resize_type_array.exit, %resize_type_array.exit265, %if.entry35
  %62 = load i64, ptr %memberidx2.i.i, align 4
  %63 = add nsw i64 %62, -1
  store i64 %63, ptr %memberidx2.i.i, align 4
  %64 = icmp sgt i64 %62, 0
  br i1 %64, label %while.entry.i162.preheader, label %MapIterator_string_PropId__next.exit167

while.entry.i162.preheader:                       ; preds = %for.incr
  %memberidx1.i.i.promoted = load ptr, ptr %memberidx1.i.i, align 8
  br label %while.entry.i162

while.entry.i162:                                 ; preds = %while.entry.i162.preheader, %ifend.i166
  %65 = phi i64 [ %63, %while.entry.i162.preheader ], [ %68, %ifend.i166 ]
  %66 = phi ptr [ %memberidx1.i.i.promoted, %while.entry.i162.preheader ], [ %incdec.ptr.i160, %ifend.i166 ]
  %incdec.ptr.i160 = getelementptr inbounds ptr, ptr %66, i64 1
  %67 = load ptr, ptr %66, align 8
  %.not.i161 = icmp eq ptr %67, null
  br i1 %.not.i161, label %ifend.i166, label %MapIterator_string_PropId__next.exit167.loopexit

ifend.i166:                                       ; preds = %while.entry.i162
  %68 = add nsw i64 %65, -1
  store i64 %68, ptr %memberidx2.i.i, align 4
  %69 = icmp sgt i64 %65, 0
  br i1 %69, label %while.entry.i162, label %MapIterator_string_PropId__next.exit167.loopexit

MapIterator_string_PropId__next.exit167.loopexit: ; preds = %ifend.i166, %while.entry.i162
  store ptr %incdec.ptr.i160, ptr %memberidx1.i.i, align 8
  br label %MapIterator_string_PropId__next.exit167

MapIterator_string_PropId__next.exit167:          ; preds = %MapIterator_string_PropId__next.exit167.loopexit, %for.incr
  %70 = load i64, ptr %memberidx3.i.i, align 4
  %storemerge307 = add nsw i64 %70, -1
  store i64 %storemerge307, ptr %memberidx3.i.i, align 4
  %storemerge = icmp slt i64 %70, 1
  store i1 %storemerge, ptr %14, align 1
  br i1 %storemerge, label %for.end, label %for.body

for.end:                                          ; preds = %MapIterator_string_PropId__next.exit167
  %.pre337 = load i64, ptr %memberidx.i115, align 4
  tail call void @free(ptr nonnull %14)
  %71 = icmp sgt i64 %.pre337, 0
  br i1 %71, label %if.entry59, label %ifend61

if.entry:                                         ; preds = %get_vtable_index.exit
  %72 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %common.ret.op.i, i1 true)
  %73 = load ptr, ptr %memberidx13, align 8
  call fastcc void @Map_string_uint____setitem__(ptr %73, ptr nonnull %40, i64 %common.ret.op.i145)
  %74 = load i64, ptr %memberidx.i118, align 4
  %.not.i169308 = icmp sgt i64 %74, %common.ret.op.i145
  br i1 %.not.i169308, label %if.entry.resize_type_array.exit_crit_edge, label %for.body.i.lr.ph

if.entry.resize_type_array.exit_crit_edge:        ; preds = %if.entry
  %.pre = load ptr, ptr %memberidx2.i120, align 8
  br label %resize_type_array.exit

for.body.i.lr.ph:                                 ; preds = %if.entry
  %memberidx1.i119.promoted = load i64, ptr %memberidx1.i119, align 4
  %memberidx2.i120.promoted = load ptr, ptr %memberidx2.i120, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.lr.ph, %Array_LLVMTypeRef____sl__.exit.i
  %75 = phi ptr [ %memberidx2.i120.promoted, %for.body.i.lr.ph ], [ %81, %Array_LLVMTypeRef____sl__.exit.i ]
  %76 = phi i64 [ %memberidx1.i119.promoted, %for.body.i.lr.ph ], [ %82, %Array_LLVMTypeRef____sl__.exit.i ]
  %77 = phi i64 [ %74, %for.body.i.lr.ph ], [ %83, %Array_LLVMTypeRef____sl__.exit.i ]
  %i.0.i309 = phi i64 [ %74, %for.body.i.lr.ph ], [ %84, %Array_LLVMTypeRef____sl__.exit.i ]
  %.not.i.i = icmp slt i64 %77, %76
  br i1 %.not.i.i, label %Array_LLVMTypeRef____sl__.exit.i, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %for.body.i
  %78 = shl nuw i64 %76, 1
  %79 = shl i64 %76, 4
  %80 = call ptr @realloc(ptr %75, i64 %79)
  br label %Array_LLVMTypeRef____sl__.exit.i

Array_LLVMTypeRef____sl__.exit.i:                 ; preds = %if.entry.i.i, %for.body.i
  %81 = phi ptr [ %80, %if.entry.i.i ], [ %75, %for.body.i ]
  %82 = phi i64 [ %78, %if.entry.i.i ], [ %76, %for.body.i ]
  %83 = add nsw i64 %77, 1
  %ptridx.i.i174 = getelementptr inbounds ptr, ptr %81, i64 %77
  store ptr null, ptr %ptridx.i.i174, align 8
  %84 = add nsw i64 %i.0.i309, 1
  %.not.i169.not = icmp slt i64 %i.0.i309, %common.ret.op.i145
  br i1 %.not.i169.not, label %for.body.i, label %for.cond.i.resize_type_array.exit_crit_edge

for.cond.i.resize_type_array.exit_crit_edge:      ; preds = %Array_LLVMTypeRef____sl__.exit.i
  store i64 %83, ptr %memberidx.i118, align 4
  store i64 %82, ptr %memberidx1.i119, align 4
  store ptr %81, ptr %memberidx2.i120, align 8
  br label %resize_type_array.exit

resize_type_array.exit:                           ; preds = %if.entry.resize_type_array.exit_crit_edge, %for.cond.i.resize_type_array.exit_crit_edge
  %85 = phi ptr [ %.pre, %if.entry.resize_type_array.exit_crit_edge ], [ %81, %for.cond.i.resize_type_array.exit_crit_edge ]
  %ptridx.i = getelementptr inbounds ptr, ptr %85, i64 %common.ret.op.i145
  store ptr %72, ptr %ptridx.i, align 8
  br label %for.incr

else:                                             ; preds = %get_vtable_index.exit.thread, %get_vtable_index.exit
  %common.ret.op.i297306 = phi ptr [ %common.ret.op.i295, %get_vtable_index.exit.thread ], [ %common.ret.op.i, %get_vtable_index.exit ]
  %prop_index299305 = phi ptr [ %prop_index296, %get_vtable_index.exit.thread ], [ %prop_index, %get_vtable_index.exit ]
  %llvm_method_val = alloca ptr, align 8
  store ptr null, ptr %llvm_method_val, align 8
  %llvm_method_type = alloca ptr, align 8
  %86 = load ptr, ptr %2, align 8
  %87 = icmp eq ptr %42, %86
  br i1 %87, label %if.entry16, label %else17

if.entry16:                                       ; preds = %else
  %88 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %88, align 8
  %memberidx.i176 = getelementptr inbounds %Array_Type_, ptr %88, i64 0, i32 2
  store i64 0, ptr %memberidx.i176, align 4
  %memberidx1.i177 = getelementptr inbounds %Array_Type_, ptr %88, i64 0, i32 3
  store i64 8, ptr %memberidx1.i177, align 4
  %memberidx2.i178 = getelementptr inbounds %Array_Type_, ptr %88, i64 0, i32 1
  %89 = call ptr @malloc(i32 64)
  store ptr %89, ptr %memberidx2.i178, align 8
  %90 = tail call ptr @malloc(i32 16)
  %91 = load ptr, ptr %2, align 8
  store i64 11, ptr %90, align 4
  %memberidx.i179 = getelementptr inbounds %ObjectType, ptr %90, i64 0, i32 1
  store ptr %91, ptr %memberidx.i179, align 8
  store ptr %90, ptr %89, align 8
  store i64 1, ptr %memberidx.i176, align 4
  %memberidx22 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i297306, i64 0, i32 1
  %92 = load ptr, ptr %memberidx22, align 8
  %93 = load i64, ptr %memberidx1.i177, align 4
  %94 = add i64 %93, -1
  %memberidx2.i182 = getelementptr inbounds %Array_Type_, ptr %92, i64 0, i32 2
  %95 = load i64, ptr %memberidx2.i182, align 4
  %96 = icmp slt i64 %94, %95
  %.pre333 = load ptr, ptr %memberidx2.i178, align 8
  br i1 %96, label %while.entry.i185, label %Array_Type____adda__.exit

while.entry.i185:                                 ; preds = %if.entry16, %while.entry.i185
  %97 = phi ptr [ %101, %while.entry.i185 ], [ %.pre333, %if.entry16 ]
  %98 = phi i64 [ %102, %while.entry.i185 ], [ %93, %if.entry16 ]
  %99 = shl nuw i64 %98, 1
  store i64 %99, ptr %memberidx1.i177, align 4
  %100 = shl i64 %98, 4
  %101 = call ptr @realloc(ptr %97, i64 %100)
  store ptr %101, ptr %memberidx2.i178, align 8
  %102 = load i64, ptr %memberidx1.i177, align 4
  %103 = load i64, ptr %memberidx.i176, align 4
  %104 = sub nuw i64 %102, %103
  %105 = load i64, ptr %memberidx2.i182, align 4
  %106 = icmp slt i64 %104, %105
  br i1 %106, label %while.entry.i185, label %Array_Type____adda__.exit

Array_Type____adda__.exit:                        ; preds = %while.entry.i185, %if.entry16
  %107 = phi i64 [ %95, %if.entry16 ], [ %105, %while.entry.i185 ]
  %108 = phi i64 [ 1, %if.entry16 ], [ %103, %while.entry.i185 ]
  %109 = phi ptr [ %.pre333, %if.entry16 ], [ %101, %while.entry.i185 ]
  %110 = getelementptr inbounds ptr, ptr %109, i64 %108
  %memberidx8.i187 = getelementptr inbounds %Array_Type_, ptr %92, i64 0, i32 1
  %111 = load ptr, ptr %memberidx8.i187, align 8
  %112 = shl i64 %107, 3
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %110, ptr align 8 %111, i64 %112, i1 false)
  %113 = load i64, ptr %memberidx.i176, align 4
  %114 = load i64, ptr %memberidx2.i182, align 4
  %115 = add nuw i64 %114, %113
  store i64 %115, ptr %memberidx.i176, align 4
  %116 = load ptr, ptr %memberidx22, align 8
  %memberidx.i188 = getelementptr inbounds %Array_Type_, ptr %116, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i188, align 8
  call void @free(ptr %117)
  tail call void @free(ptr %116)
  store ptr %88, ptr %memberidx22, align 8
  %118 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i297306, i1 false)
  store ptr %118, ptr %llvm_method_type, align 8
  %119 = load ptr, ptr %memberidx25, align 8
  %120 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i189 = getelementptr inbounds %Array_ClassMethod_, ptr %119, i64 0, i32 1
  %121 = load ptr, ptr %memberidx.i189, align 8
  %ptridx.i190 = getelementptr inbounds ptr, ptr %121, i64 %120
  %122 = load ptr, ptr %ptridx.i190, align 8
  %memberidx27 = getelementptr inbounds %ClassMethod, ptr %122, i64 0, i32 7
  %123 = load i1, ptr %memberidx27, align 1
  br i1 %123, label %ifend30, label %if.entry28

else17:                                           ; preds = %else
  %124 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %common.ret.op.i297306, i1 false)
  store ptr %124, ptr %llvm_method_type, align 8
  %125 = load ptr, ptr %memberidx10, align 8
  %126 = load ptr, ptr %memberidx.i125, align 8
  %memberidx.i.i192 = getelementptr inbounds %Program, ptr %125, i64 0, i32 1
  %127 = load ptr, ptr %memberidx.i.i192, align 8
  %128 = load i64, ptr %126, align 4
  %memberidx.i.i.i193 = getelementptr inbounds %Array_Module_, ptr %127, i64 0, i32 1
  %129 = load ptr, ptr %memberidx.i.i.i193, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %129, i64 %128
  %130 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i194 = getelementptr inbounds %Module, ptr %130, i64 0, i32 4
  %131 = load ptr, ptr %memberidx2.i.i194, align 8
  %memberidx3.i.i195 = getelementptr inbounds %TypeId, ptr %126, i64 0, i32 2
  %132 = load i64, ptr %memberidx3.i.i195, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %131, i64 0, i32 1
  %133 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %133, i64 %132
  %134 = load ptr, ptr %ptridx.i6.i.i, align 8
  %135 = load ptr, ptr %0, align 8
  %memberidx41 = getelementptr inbounds %Class, ptr %134, i64 0, i32 1
  %136 = load ptr, ptr %memberidx41, align 8
  %137 = load ptr, ptr %136, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %137, i64 0, i32 5
  %138 = load ptr, ptr %memberidx42, align 8
  %139 = call ptr %138(ptr nonnull %136)
  %140 = load ptr, ptr %26, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %140, i64 0, i32 5
  %141 = load ptr, ptr %memberidx43, align 8
  %142 = call ptr %141(ptr nonnull %26)
  %143 = alloca ptr, align 8
  %144 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %143, ptr nonnull @90, ptr %139, ptr %142)
  %145 = load ptr, ptr %143, align 8
  %146 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %146, align 8
  %memberidx.i196 = getelementptr inbounds %string, ptr %146, i64 0, i32 1
  store ptr %145, ptr %memberidx.i196, align 8
  %memberidx1.i197 = getelementptr inbounds %string, ptr %146, i64 0, i32 2
  store i64 %144, ptr %memberidx1.i197, align 4
  %memberidx2.i198 = getelementptr inbounds %string, ptr %146, i64 0, i32 3
  store i64 %144, ptr %memberidx2.i198, align 4
  tail call void @free(ptr %139)
  tail call void @free(ptr %142)
  %147 = load ptr, ptr %146, align 8
  %memberidx44 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %147, i64 0, i32 5
  %148 = load ptr, ptr %memberidx44, align 8
  %149 = call ptr %148(ptr nonnull %146)
  %150 = call ptr @LLVMGetNamedFunction(ptr %135, ptr %149)
  store ptr %150, ptr %llvm_method_val, align 8
  %151 = icmp eq ptr %150, null
  br i1 %151, label %if.entry45, label %ifend18

ifend18:                                          ; preds = %if.entry45, %else17, %get_class_prop_visibility.exit
  %152 = phi ptr [ null, %if.entry45 ], [ %150, %else17 ], [ %177, %get_class_prop_visibility.exit ]
  %153 = phi ptr [ %134, %if.entry45 ], [ %134, %else17 ], [ %2, %get_class_prop_visibility.exit ]
  %154 = load ptr, ptr %memberidx51, align 8
  %155 = load i64, ptr %prop_index299305, align 8
  call fastcc void @Map_string_uint____setitem__(ptr %154, ptr nonnull %40, i64 %155)
  %memberidx52 = getelementptr inbounds %Class, ptr %153, i64 0, i32 5
  %156 = load ptr, ptr %memberidx52, align 8
  %157 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i199 = getelementptr inbounds %Array_ClassMethod_, ptr %156, i64 0, i32 1
  %158 = load ptr, ptr %memberidx.i199, align 8
  %ptridx.i200 = getelementptr inbounds ptr, ptr %158, i64 %157
  %159 = load ptr, ptr %ptridx.i200, align 8
  %memberidx54 = getelementptr inbounds %ClassMethod, ptr %159, i64 0, i32 7
  %160 = load i1, ptr %memberidx54, align 1
  br i1 %160, label %ifend57, label %if.entry55

if.entry28:                                       ; preds = %Array_Type____adda__.exit
  %161 = load ptr, ptr %memberidx31, align 8
  %162 = load ptr, ptr %161, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %162, i64 0, i32 5
  %163 = load ptr, ptr %memberidx32, align 8
  %164 = call ptr %163(ptr nonnull %161)
  %165 = load ptr, ptr %26, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %165, i64 0, i32 5
  %166 = load ptr, ptr %memberidx33, align 8
  %167 = call ptr %166(ptr nonnull %26)
  %168 = alloca ptr, align 8
  %169 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %168, ptr nonnull @90, ptr %164, ptr %167)
  %170 = load ptr, ptr %168, align 8
  %171 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %171, align 8
  %memberidx.i201 = getelementptr inbounds %string, ptr %171, i64 0, i32 1
  store ptr %170, ptr %memberidx.i201, align 8
  %memberidx1.i202 = getelementptr inbounds %string, ptr %171, i64 0, i32 2
  store i64 %169, ptr %memberidx1.i202, align 4
  %memberidx2.i203 = getelementptr inbounds %string, ptr %171, i64 0, i32 3
  store i64 %169, ptr %memberidx2.i203, align 4
  tail call void @free(ptr %164)
  tail call void @free(ptr %167)
  %172 = load ptr, ptr %0, align 8
  %173 = load ptr, ptr %171, align 8
  %memberidx1.i204 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %173, i64 0, i32 5
  %174 = load ptr, ptr %memberidx1.i204, align 8
  %175 = call ptr %174(ptr nonnull %171)
  %176 = call ptr @LLVMAddFunction(ptr %172, ptr %175, ptr %118)
  store ptr %176, ptr %llvm_method_val, align 8
  br label %ifend30

ifend30:                                          ; preds = %Array_Type____adda__.exit, %if.entry28
  %177 = phi ptr [ null, %Array_Type____adda__.exit ], [ %176, %if.entry28 ]
  %178 = load ptr, ptr %memberidx10, align 8
  %179 = load ptr, ptr %memberidx.i125, align 8
  %memberidx.i.i.i206 = getelementptr inbounds %Program, ptr %178, i64 0, i32 1
  %180 = load ptr, ptr %memberidx.i.i.i206, align 8
  %181 = load i64, ptr %179, align 4
  %memberidx.i.i.i.i207 = getelementptr inbounds %Array_Module_, ptr %180, i64 0, i32 1
  %182 = load ptr, ptr %memberidx.i.i.i.i207, align 8
  %ptridx.i.i.i.i208 = getelementptr inbounds ptr, ptr %182, i64 %181
  %183 = load ptr, ptr %ptridx.i.i.i.i208, align 8
  %memberidx2.i.i.i209 = getelementptr inbounds %Module, ptr %183, i64 0, i32 4
  %184 = load ptr, ptr %memberidx2.i.i.i209, align 8
  %memberidx3.i.i.i210 = getelementptr inbounds %TypeId, ptr %179, i64 0, i32 2
  %185 = load i64, ptr %memberidx3.i.i.i210, align 4
  %memberidx.i5.i.i.i211 = getelementptr inbounds %Array_Class_, ptr %184, i64 0, i32 1
  %186 = load ptr, ptr %memberidx.i5.i.i.i211, align 8
  %ptridx.i6.i.i.i212 = getelementptr inbounds ptr, ptr %186, i64 %185
  %187 = load ptr, ptr %ptridx.i6.i.i.i212, align 8
  %188 = load i64, ptr %25, align 4
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %if.entry.i220, label %ifend.i226

if.entry.i220:                                    ; preds = %ifend30
  %memberidx1.i215 = getelementptr inbounds %Class, ptr %187, i64 0, i32 5
  %190 = load ptr, ptr %memberidx1.i215, align 8
  %191 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i12.i217 = getelementptr inbounds %Array_ClassMethod_, ptr %190, i64 0, i32 1
  %192 = load ptr, ptr %memberidx.i12.i217, align 8
  %ptridx.i13.i218 = getelementptr inbounds ptr, ptr %192, i64 %191
  %193 = load ptr, ptr %ptridx.i13.i218, align 8
  %memberidx3.i219 = getelementptr inbounds %ClassMethod, ptr %193, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i226:                                       ; preds = %ifend30
  %memberidx4.i221 = getelementptr inbounds %Class, ptr %187, i64 0, i32 4
  %194 = load ptr, ptr %memberidx4.i221, align 8
  %195 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i11.i223 = getelementptr inbounds %Array_ClassField_, ptr %194, i64 0, i32 1
  %196 = load ptr, ptr %memberidx.i11.i223, align 8
  %ptridx.i.i224 = getelementptr inbounds ptr, ptr %196, i64 %195
  %197 = load ptr, ptr %ptridx.i.i224, align 8
  %memberidx6.i225 = getelementptr inbounds %ClassField, ptr %197, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i220, %ifend.i226
  %common.ret.op.in.i213 = phi ptr [ %memberidx3.i219, %if.entry.i220 ], [ %memberidx6.i225, %ifend.i226 ]
  %common.ret.op.i214 = load i64, ptr %common.ret.op.in.i213, align 4
  %198 = icmp eq i64 %common.ret.op.i214, 1
  br i1 %198, label %if.entry35, label %ifend18

if.entry35:                                       ; preds = %get_class_prop_visibility.exit
  %199 = load ptr, ptr %memberidx38, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %199, ptr nonnull %40, ptr %177)
  br label %for.incr

if.entry45:                                       ; preds = %else17
  %200 = load ptr, ptr %memberidx41, align 8
  %201 = load ptr, ptr %200, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %201, i64 0, i32 5
  %202 = load ptr, ptr %memberidx49, align 8
  %203 = call ptr %202(ptr nonnull %200)
  %204 = load ptr, ptr %26, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %204, i64 0, i32 5
  %205 = load ptr, ptr %memberidx50, align 8
  %206 = call ptr %205(ptr nonnull %26)
  %207 = alloca ptr, align 8
  %208 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %207, ptr nonnull @267, ptr %203, ptr %206)
  %209 = load ptr, ptr %207, align 8
  %210 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %210, align 8
  %memberidx.i227 = getelementptr inbounds %string, ptr %210, i64 0, i32 1
  store ptr %209, ptr %memberidx.i227, align 8
  %memberidx1.i228 = getelementptr inbounds %string, ptr %210, i64 0, i32 2
  store i64 %208, ptr %memberidx1.i228, align 4
  %memberidx2.i229 = getelementptr inbounds %string, ptr %210, i64 0, i32 3
  store i64 %208, ptr %memberidx2.i229, align 4
  tail call void @free(ptr %203)
  tail call void @free(ptr %206)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %211 = load ptr, ptr %210, align 8
  %memberidx.i230 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %211, i64 0, i32 5
  %212 = load ptr, ptr %memberidx.i230, align 8
  %213 = call ptr %212(ptr nonnull %210)
  %214 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @219, ptr %213)
  %215 = load ptr, ptr %4, align 8
  %216 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %216, align 8
  %memberidx.i.i231 = getelementptr inbounds %string, ptr %216, i64 0, i32 1
  store ptr %215, ptr %memberidx.i.i231, align 8
  %memberidx1.i.i232 = getelementptr inbounds %string, ptr %216, i64 0, i32 2
  store i64 %214, ptr %memberidx1.i.i232, align 4
  %memberidx2.i.i233 = getelementptr inbounds %string, ptr %216, i64 0, i32 3
  store i64 %214, ptr %memberidx2.i.i233, align 4
  call void @free(ptr %213)
  %217 = load ptr, ptr %216, align 8
  %memberidx.i.i.i234 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %217, i64 0, i32 3
  %218 = load ptr, ptr %memberidx.i.i.i234, align 8
  %219 = call ptr %218(ptr nonnull %216)
  %220 = load i64, ptr %memberidx1.i.i232, align 4
  call void @write(i64 1, ptr %219, i64 %220)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend18

if.entry55:                                       ; preds = %ifend18
  %221 = load i64, ptr %memberidx.i, align 4
  %.not.i238312 = icmp sgt i64 %221, %155
  br i1 %.not.i238312, label %if.entry55.resize_value_array.exit_crit_edge, label %for.body.i243.lr.ph

if.entry55.resize_value_array.exit_crit_edge:     ; preds = %if.entry55
  %.pre336 = load ptr, ptr %memberidx2.i, align 8
  br label %resize_value_array.exit

for.body.i243.lr.ph:                              ; preds = %if.entry55
  %memberidx1.i.promoted = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i.promoted = load ptr, ptr %memberidx2.i, align 8
  br label %for.body.i243

for.body.i243:                                    ; preds = %for.body.i243.lr.ph, %Array_LLVMValueRef____sl__.exit.i
  %222 = phi ptr [ %memberidx2.i.promoted, %for.body.i243.lr.ph ], [ %228, %Array_LLVMValueRef____sl__.exit.i ]
  %223 = phi i64 [ %memberidx1.i.promoted, %for.body.i243.lr.ph ], [ %229, %Array_LLVMValueRef____sl__.exit.i ]
  %224 = phi i64 [ %221, %for.body.i243.lr.ph ], [ %230, %Array_LLVMValueRef____sl__.exit.i ]
  %i.0.i237313 = phi i64 [ %221, %for.body.i243.lr.ph ], [ %231, %Array_LLVMValueRef____sl__.exit.i ]
  %.not.i.i242 = icmp slt i64 %224, %223
  br i1 %.not.i.i242, label %Array_LLVMValueRef____sl__.exit.i, label %if.entry.i.i246

if.entry.i.i246:                                  ; preds = %for.body.i243
  %225 = shl nuw i64 %223, 1
  %226 = shl i64 %223, 4
  %227 = call ptr @realloc(ptr %222, i64 %226)
  br label %Array_LLVMValueRef____sl__.exit.i

Array_LLVMValueRef____sl__.exit.i:                ; preds = %if.entry.i.i246, %for.body.i243
  %228 = phi ptr [ %227, %if.entry.i.i246 ], [ %222, %for.body.i243 ]
  %229 = phi i64 [ %225, %if.entry.i.i246 ], [ %223, %for.body.i243 ]
  %230 = add nsw i64 %224, 1
  %ptridx.i.i248 = getelementptr inbounds ptr, ptr %228, i64 %224
  store ptr null, ptr %ptridx.i.i248, align 8
  %231 = add nsw i64 %i.0.i237313, 1
  %.not.i238.not = icmp slt i64 %i.0.i237313, %155
  br i1 %.not.i238.not, label %for.body.i243, label %for.cond.i239.resize_value_array.exit_crit_edge

for.cond.i239.resize_value_array.exit_crit_edge:  ; preds = %Array_LLVMValueRef____sl__.exit.i
  store i64 %230, ptr %memberidx.i, align 4
  store i64 %229, ptr %memberidx1.i, align 4
  store ptr %228, ptr %memberidx2.i, align 8
  %.pre335 = load ptr, ptr %llvm_method_val, align 8
  br label %resize_value_array.exit

resize_value_array.exit:                          ; preds = %if.entry55.resize_value_array.exit_crit_edge, %for.cond.i239.resize_value_array.exit_crit_edge
  %232 = phi ptr [ %228, %for.cond.i239.resize_value_array.exit_crit_edge ], [ %.pre336, %if.entry55.resize_value_array.exit_crit_edge ]
  %233 = phi ptr [ %.pre335, %for.cond.i239.resize_value_array.exit_crit_edge ], [ %152, %if.entry55.resize_value_array.exit_crit_edge ]
  %ptridx.i250 = getelementptr inbounds ptr, ptr %232, i64 %155
  store ptr %233, ptr %ptridx.i250, align 8
  br label %ifend57

ifend57:                                          ; preds = %ifend18, %resize_value_array.exit
  %234 = load i64, ptr %memberidx.i115, align 4
  %.not.i253317 = icmp sgt i64 %234, %155
  br i1 %.not.i253317, label %resize_type_array.exit265, label %for.body.i258.lr.ph

for.body.i258.lr.ph:                              ; preds = %ifend57
  %memberidx1.i116.promoted = load i64, ptr %memberidx1.i116, align 4
  %memberidx2.i117.promoted = load ptr, ptr %memberidx2.i117, align 8
  br label %for.body.i258

for.body.i258:                                    ; preds = %for.body.i258.lr.ph, %Array_LLVMTypeRef____sl__.exit.i264
  %235 = phi ptr [ %memberidx2.i117.promoted, %for.body.i258.lr.ph ], [ %241, %Array_LLVMTypeRef____sl__.exit.i264 ]
  %236 = phi i64 [ %memberidx1.i116.promoted, %for.body.i258.lr.ph ], [ %242, %Array_LLVMTypeRef____sl__.exit.i264 ]
  %237 = phi i64 [ %234, %for.body.i258.lr.ph ], [ %243, %Array_LLVMTypeRef____sl__.exit.i264 ]
  %i.0.i252318 = phi i64 [ %234, %for.body.i258.lr.ph ], [ %244, %Array_LLVMTypeRef____sl__.exit.i264 ]
  %.not.i.i257 = icmp slt i64 %237, %236
  br i1 %.not.i.i257, label %Array_LLVMTypeRef____sl__.exit.i264, label %if.entry.i.i261

if.entry.i.i261:                                  ; preds = %for.body.i258
  %238 = shl nuw i64 %236, 1
  %239 = shl i64 %236, 4
  %240 = call ptr @realloc(ptr %235, i64 %239)
  br label %Array_LLVMTypeRef____sl__.exit.i264

Array_LLVMTypeRef____sl__.exit.i264:              ; preds = %if.entry.i.i261, %for.body.i258
  %241 = phi ptr [ %240, %if.entry.i.i261 ], [ %235, %for.body.i258 ]
  %242 = phi i64 [ %238, %if.entry.i.i261 ], [ %236, %for.body.i258 ]
  %243 = add nsw i64 %237, 1
  %ptridx.i.i263 = getelementptr inbounds ptr, ptr %241, i64 %237
  store ptr null, ptr %ptridx.i.i263, align 8
  %244 = add nsw i64 %i.0.i252318, 1
  %.not.i253.not = icmp slt i64 %i.0.i252318, %155
  br i1 %.not.i253.not, label %for.body.i258, label %for.cond.i254.resize_type_array.exit265_crit_edge

for.cond.i254.resize_type_array.exit265_crit_edge: ; preds = %Array_LLVMTypeRef____sl__.exit.i264
  store i64 %243, ptr %memberidx.i115, align 4
  store i64 %242, ptr %memberidx1.i116, align 4
  store ptr %241, ptr %memberidx2.i117, align 8
  br label %resize_type_array.exit265

resize_type_array.exit265:                        ; preds = %for.cond.i254.resize_type_array.exit265_crit_edge, %ifend57
  %245 = load ptr, ptr %llvm_method_type, align 8
  %246 = call ptr @LLVMPointerType(ptr %245, i64 0)
  %247 = load ptr, ptr %memberidx2.i117, align 8
  %ptridx.i267 = getelementptr inbounds ptr, ptr %247, i64 %155
  store ptr %246, ptr %ptridx.i267, align 8
  br label %for.incr

if.entry59:                                       ; preds = %for.end
  %248 = load ptr, ptr %memberidx2.i117, align 8
  %249 = call ptr @LLVMStructType(ptr %248, i64 %.pre337, i1 true)
  %memberidx64 = getelementptr inbounds %Class, ptr %2, i64 0, i32 10
  %250 = load i1, ptr %memberidx64, align 1
  br i1 %250, label %ifend67, label %if.entry65

ifend61:                                          ; preds = %for.end.thread, %for.end, %Array_LLVMTypeRef____sl__.exit
  %memberidx.i268 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 3
  %251 = load i64, ptr %memberidx.i268, align 4
  %memberidx1.i269 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 2
  %252 = load i64, ptr %memberidx1.i269, align 4
  %253 = sub nuw i64 %251, %252
  %254 = load i64, ptr %memberidx.i118, align 4
  %255 = icmp slt i64 %253, %254
  %memberidx2.i.i272 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  %.pre340 = load ptr, ptr %memberidx2.i.i272, align 8
  br i1 %255, label %while.entry.i273, label %Array_LLVMTypeRef____adda__.exit

while.entry.i273:                                 ; preds = %ifend61, %while.entry.i273
  %256 = phi ptr [ %260, %while.entry.i273 ], [ %.pre340, %ifend61 ]
  %257 = phi i64 [ %261, %while.entry.i273 ], [ %251, %ifend61 ]
  %258 = shl nuw i64 %257, 1
  store i64 %258, ptr %memberidx.i268, align 4
  %259 = shl i64 %257, 4
  %260 = call ptr @realloc(ptr %256, i64 %259)
  store ptr %260, ptr %memberidx2.i.i272, align 8
  %261 = load i64, ptr %memberidx.i268, align 4
  %262 = load i64, ptr %memberidx1.i269, align 4
  %263 = sub nuw i64 %261, %262
  %264 = icmp slt i64 %263, %254
  br i1 %264, label %while.entry.i273, label %Array_LLVMTypeRef____adda__.exit

Array_LLVMTypeRef____adda__.exit:                 ; preds = %while.entry.i273, %ifend61
  %265 = phi i64 [ %252, %ifend61 ], [ %262, %while.entry.i273 ]
  %266 = phi ptr [ %.pre340, %ifend61 ], [ %260, %while.entry.i273 ]
  %267 = getelementptr inbounds ptr, ptr %266, i64 %265
  %268 = load ptr, ptr %memberidx2.i120, align 8
  %269 = shl i64 %254, 3
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %267, ptr align 8 %268, i64 %269, i1 false)
  %270 = load i64, ptr %memberidx1.i269, align 4
  %271 = add nuw i64 %270, %254
  store i64 %271, ptr %memberidx1.i269, align 4
  call void @free(ptr %268)
  tail call void @free(ptr %11)
  %272 = load ptr, ptr %memberidx2.i117, align 8
  call void @free(ptr %272)
  tail call void @free(ptr %9)
  %273 = load ptr, ptr %memberidx2.i, align 8
  call void @free(ptr %273)
  tail call void @free(ptr %7)
  ret void

if.entry65:                                       ; preds = %if.entry59
  %memberidx68 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 4
  %274 = load ptr, ptr %0, align 8
  %memberidx70 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %275 = load ptr, ptr %memberidx70, align 8
  %276 = load ptr, ptr %275, align 8
  %memberidx71 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %276, i64 0, i32 5
  %277 = load ptr, ptr %memberidx71, align 8
  %278 = call ptr %277(ptr nonnull %275)
  %279 = alloca ptr, align 8
  %280 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %279, ptr nonnull @268, ptr %278)
  %281 = load ptr, ptr %279, align 8
  %282 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %282, align 8
  %memberidx.i279 = getelementptr inbounds %string, ptr %282, i64 0, i32 1
  store ptr %281, ptr %memberidx.i279, align 8
  %memberidx1.i280 = getelementptr inbounds %string, ptr %282, i64 0, i32 2
  store i64 %280, ptr %memberidx1.i280, align 4
  %memberidx2.i281 = getelementptr inbounds %string, ptr %282, i64 0, i32 3
  store i64 %280, ptr %memberidx2.i281, align 4
  tail call void @free(ptr %278)
  %283 = load ptr, ptr %282, align 8
  %memberidx72 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %283, i64 0, i32 5
  %284 = load ptr, ptr %memberidx72, align 8
  %285 = call ptr %284(ptr nonnull %282)
  %286 = call ptr @LLVMAddGlobal(ptr %274, ptr %249, ptr %285)
  store ptr %286, ptr %memberidx68, align 8
  %287 = load ptr, ptr %memberidx2.i, align 8
  %288 = load i64, ptr %memberidx.i, align 4
  %289 = call ptr @LLVMConstStruct(ptr %287, i64 %288, i1 true)
  %290 = load ptr, ptr %memberidx68, align 8
  call void @LLVMSetInitializer(ptr %290, ptr %289)
  br label %ifend67

ifend67:                                          ; preds = %if.entry59, %if.entry65
  %memberidx76 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 5
  store ptr %249, ptr %memberidx76, align 8
  %291 = call ptr @LLVMPointerType(ptr %249, i64 0)
  %memberidx.i282 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 2
  %292 = load i64, ptr %memberidx.i282, align 4
  %memberidx1.i283 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 3
  %293 = load i64, ptr %memberidx1.i283, align 4
  %.not.i284 = icmp slt i64 %292, %293
  br i1 %.not.i284, label %ifend67.Array_LLVMTypeRef____sl__.exit_crit_edge, label %if.entry.i287

ifend67.Array_LLVMTypeRef____sl__.exit_crit_edge: ; preds = %ifend67
  %memberidx4.i288.phi.trans.insert = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  %.pre339 = load ptr, ptr %memberidx4.i288.phi.trans.insert, align 8
  br label %Array_LLVMTypeRef____sl__.exit

if.entry.i287:                                    ; preds = %ifend67
  %294 = shl nuw i64 %293, 1
  store i64 %294, ptr %memberidx1.i283, align 4
  %memberidx2.i.i286 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  %295 = load ptr, ptr %memberidx2.i.i286, align 8
  %296 = shl i64 %293, 4
  %297 = call ptr @realloc(ptr %295, i64 %296)
  store ptr %297, ptr %memberidx2.i.i286, align 8
  %.pre338 = load i64, ptr %memberidx.i282, align 4
  br label %Array_LLVMTypeRef____sl__.exit

Array_LLVMTypeRef____sl__.exit:                   ; preds = %ifend67.Array_LLVMTypeRef____sl__.exit_crit_edge, %if.entry.i287
  %298 = phi ptr [ %.pre339, %ifend67.Array_LLVMTypeRef____sl__.exit_crit_edge ], [ %297, %if.entry.i287 ]
  %299 = phi i64 [ %292, %ifend67.Array_LLVMTypeRef____sl__.exit_crit_edge ], [ %.pre338, %if.entry.i287 ]
  %300 = add nsw i64 %299, 1
  store i64 %300, ptr %memberidx.i282, align 4
  %ptridx.i289 = getelementptr inbounds ptr, ptr %298, i64 %299
  store ptr %291, ptr %ptridx.i289, align 8
  br label %ifend61
}

define internal fastcc ptr @CodeGen_get_or_codegen_var(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i.i = getelementptr inbounds %VarId, ptr %1, i64 0, i32 1
  %8 = load i64, ptr %memberidx.i.i, align 4
  %9 = load i64, ptr %1, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %1, i64 0, i32 2
  %10 = load i64, ptr %memberidx2.i.i, align 4
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @224, i64 %8, i64 %9, i64 %10)
  %12 = load ptr, ptr %6, align 8
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %14 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %13)
  %memberidx.i124 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 1
  %15 = load i64, ptr %memberidx.i124, align 4
  %16 = urem i64 %14, %15
  %17 = load ptr, ptr %7, align 8
  %ptridx.i125 = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i125, align 8
  %.not.i = icmp eq ptr %18, null
  br i1 %.not.i, label %ifend, label %while.entry.i

while.entry.i:                                    ; preds = %2, %else.i
  %19 = phi ptr [ %29, %else.i ], [ %17, %2 ]
  %20 = phi i64 [ %30, %else.i ], [ %15, %2 ]
  %21 = phi ptr [ %33, %else.i ], [ %18, %2 ]
  %hash.0.i = phi i64 [ %32, %else.i ], [ %16, %2 ]
  %22 = load ptr, ptr %21, align 8
  %memberidx.i.i126 = getelementptr inbounds %string, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx.i.i126, align 4
  %24 = load i64, ptr %memberidx1.i.i.i, align 4
  %.not.i.i = icmp eq i64 %23, %24
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i128 = getelementptr inbounds %string, ptr %22, i64 0, i32 1
  %25 = load ptr, ptr %memberidx2.i.i128, align 8
  %26 = load ptr, ptr %memberidx.i.i.i, align 8
  %27 = call i64 @memcmp(ptr %25, ptr %26, i64 %23)
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i124, align 4
  %.pre242 = load ptr, ptr %7, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre243.pre = load ptr, ptr %7, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre243.pre, i64 %hash.0.i
  %.pre244.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre244.pre, null
  br i1 %.not29.i, label %ifend, label %Map_string_LLVMValueRef____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %29 = phi ptr [ %.pre242, %ifend.i.i.else.i_crit_edge ], [ %19, %while.entry.i ]
  %30 = phi i64 [ %.pre, %ifend.i.i.else.i_crit_edge ], [ %20, %while.entry.i ]
  %31 = add nuw i64 %hash.0.i, 1
  %32 = urem i64 %31, %30
  %ptridx7.i = getelementptr inbounds ptr, ptr %29, i64 %32
  %33 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %33, null
  br i1 %.not30.i, label %ifend, label %while.entry.i

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre244.pre, i64 0, i32 1
  %34 = load ptr, ptr %memberidx15.i, align 8
  %.not = icmp eq ptr %34, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %else.i150, %else.i175, %else.i200, %if.entry48, %if.entry30, %if.entry12, %if.entry10.i203, %while.end.i197, %if.entry10.i178, %while.end.i172, %if.entry10.i153, %while.end.i147, %Map_string_LLVMValueRef____getitem__.exit, %for.end43, %ifend18
  %common.ret.op = phi ptr [ null, %ifend18 ], [ null, %for.end43 ], [ %34, %Map_string_LLVMValueRef____getitem__.exit ], [ %81, %if.entry10.i153 ], [ null, %while.end.i147 ], [ %122, %if.entry10.i178 ], [ null, %while.end.i172 ], [ %161, %if.entry10.i203 ], [ null, %while.end.i197 ], [ null, %if.entry12 ], [ null, %if.entry30 ], [ null, %if.entry48 ], [ null, %else.i200 ], [ null, %else.i175 ], [ null, %else.i150 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else.i, %2, %while.end.i, %Map_string_LLVMValueRef____getitem__.exit
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %35 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %35, i64 0, i32 1
  %36 = load ptr, ptr %memberidx1, align 8
  %37 = load i64, ptr %memberidx.i.i, align 4
  %memberidx.i71 = getelementptr inbounds %Array_Module_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i71, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i, align 8
  %40 = load i64, ptr %1, align 4
  %41 = icmp eq i64 %40, 2
  br i1 %41, label %for.entry, label %ifend6

ifend6:                                           ; preds = %ifend, %for.end
  %42 = phi i64 [ %40, %ifend ], [ %.pr, %for.end ]
  %43 = icmp eq i64 %42, 1
  br i1 %43, label %for.entry19, label %ifend18

for.entry:                                        ; preds = %ifend
  %memberidx7 = getelementptr inbounds %Module, ptr %39, i64 0, i32 9
  %44 = load ptr, ptr %memberidx7, align 8
  %45 = call ptr @malloc(i32 25)
  %memberidx.i72 = getelementptr inbounds %Array_ConstDeclaration_, ptr %44, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i72, align 8
  %memberidx1.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %44, i64 0, i32 2
  %47 = load i64, ptr %memberidx1.i, align 4
  store i1 false, ptr %45, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %45, i64 0, i32 1
  %memberidx2.i.i73 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %45, i64 0, i32 3
  store ptr %46, ptr %memberidx2.i.i73, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %45, i64 0, i32 2
  store i64 %47, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i, align 4
  %48 = icmp slt i64 %47, 1
  br i1 %48, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %49 = load i64, ptr %memberidx2.i.i, align 4
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend14
  %50 = phi i64 [ 1, %for.body.lr.ph ], [ %82, %ifend14 ]
  %storemerge70232.in = phi ptr [ %46, %for.body.lr.ph ], [ %ptridx.i84, %ifend14 ]
  %storemerge70232 = load ptr, ptr %storemerge70232.in, align 8
  %memberidx9 = getelementptr inbounds %ConstDeclaration, ptr %storemerge70232, i64 0, i32 2
  %51 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %VarId, ptr %51, i64 0, i32 2
  %52 = load i64, ptr %memberidx10, align 4
  %53 = icmp eq i64 %52, %49
  br i1 %53, label %if.entry12, label %ifend14

for.end:                                          ; preds = %ifend14, %for.entry
  tail call void @free(ptr nonnull %45)
  %.pr = load i64, ptr %1, align 4
  br label %ifend6

if.entry12:                                       ; preds = %for.body
  store i1 false, ptr %45, align 1
  call fastcc void @CodeGen_codegen_const_declaration(ptr %0, ptr null, ptr nonnull %storemerge70232)
  %54 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %55 = load i64, ptr %memberidx.i.i, align 4
  %56 = load i64, ptr %1, align 4
  %57 = load i64, ptr %memberidx2.i.i, align 4
  %58 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @224, i64 %55, i64 %56, i64 %57)
  %59 = load ptr, ptr %5, align 8
  %60 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %60, align 8
  %memberidx.i.i.i79 = getelementptr inbounds %string, ptr %60, i64 0, i32 1
  store ptr %59, ptr %memberidx.i.i.i79, align 8
  %memberidx1.i.i.i80 = getelementptr inbounds %string, ptr %60, i64 0, i32 2
  store i64 %58, ptr %memberidx1.i.i.i80, align 4
  %memberidx2.i.i.i81 = getelementptr inbounds %string, ptr %60, i64 0, i32 3
  store i64 %58, ptr %memberidx2.i.i.i81, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %61 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %60)
  %memberidx.i130 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %54, i64 0, i32 1
  %62 = load i64, ptr %memberidx.i130, align 4
  %63 = urem i64 %61, %62
  %64 = load ptr, ptr %54, align 8
  %ptridx.i131 = getelementptr inbounds ptr, ptr %64, i64 %63
  %65 = load ptr, ptr %ptridx.i131, align 8
  %.not.i132 = icmp eq ptr %65, null
  br i1 %.not.i132, label %common.ret, label %while.entry.i138

while.entry.i138:                                 ; preds = %if.entry12, %else.i150
  %66 = phi ptr [ %76, %else.i150 ], [ %64, %if.entry12 ]
  %67 = phi i64 [ %77, %else.i150 ], [ %62, %if.entry12 ]
  %68 = phi ptr [ %80, %else.i150 ], [ %65, %if.entry12 ]
  %hash.0.i133 = phi i64 [ %79, %else.i150 ], [ %63, %if.entry12 ]
  %69 = load ptr, ptr %68, align 8
  %memberidx.i.i135 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  %70 = load i64, ptr %memberidx.i.i135, align 4
  %71 = load i64, ptr %memberidx1.i.i.i80, align 4
  %.not.i.i137 = icmp eq i64 %70, %71
  br i1 %.not.i.i137, label %ifend.i.i141, label %else.i150

ifend.i.i141:                                     ; preds = %while.entry.i138
  %memberidx2.i.i139 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  %72 = load ptr, ptr %memberidx2.i.i139, align 8
  %73 = load ptr, ptr %memberidx.i.i.i79, align 8
  %74 = call i64 @memcmp(ptr %72, ptr %73, i64 %70)
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %while.end.i147, label %ifend.i.i141.else.i150_crit_edge

ifend.i.i141.else.i150_crit_edge:                 ; preds = %ifend.i.i141
  %.pre245 = load i64, ptr %memberidx.i130, align 4
  %.pre246 = load ptr, ptr %54, align 8
  br label %else.i150

while.end.i147:                                   ; preds = %ifend.i.i141
  %.pre247.pre = load ptr, ptr %54, align 8
  %ptridx9.i145.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre247.pre, i64 %hash.0.i133
  %.pre248.pre = load ptr, ptr %ptridx9.i145.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i146 = icmp eq ptr %.pre248.pre, null
  br i1 %.not29.i146, label %common.ret, label %if.entry10.i153

else.i150:                                        ; preds = %ifend.i.i141.else.i150_crit_edge, %while.entry.i138
  %76 = phi ptr [ %.pre246, %ifend.i.i141.else.i150_crit_edge ], [ %66, %while.entry.i138 ]
  %77 = phi i64 [ %.pre245, %ifend.i.i141.else.i150_crit_edge ], [ %67, %while.entry.i138 ]
  %78 = add nuw i64 %hash.0.i133, 1
  %79 = urem i64 %78, %77
  %ptridx7.i148 = getelementptr inbounds ptr, ptr %76, i64 %79
  %80 = load ptr, ptr %ptridx7.i148, align 8
  %.not30.i149 = icmp eq ptr %80, null
  br i1 %.not30.i149, label %common.ret, label %while.entry.i138

if.entry10.i153:                                  ; preds = %while.end.i147
  %memberidx15.i152 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre248.pre, i64 0, i32 1
  %81 = load ptr, ptr %memberidx15.i152, align 8
  br label %common.ret

ifend14:                                          ; preds = %for.body
  %82 = add nuw nsw i64 %50, 1
  store i64 %82, ptr %memberidx1.i.i, align 4
  %ptridx.i84 = getelementptr inbounds ptr, ptr %46, i64 %50
  %.not268 = icmp slt i64 %50, %47
  br i1 %.not268, label %for.body, label %for.end

ifend18:                                          ; preds = %ifend6, %for.end25
  %83 = phi i64 [ %42, %ifend6 ], [ %.pre253, %for.end25 ]
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %for.entry37, label %common.ret

for.entry19:                                      ; preds = %ifend6
  %memberidx21 = getelementptr inbounds %Module, ptr %39, i64 0, i32 10
  %85 = load ptr, ptr %memberidx21, align 8
  %86 = call ptr @malloc(i32 25)
  %memberidx.i86 = getelementptr inbounds %Array_VarDeclaration_, ptr %85, i64 0, i32 1
  %87 = load ptr, ptr %memberidx.i86, align 8
  %memberidx1.i87 = getelementptr inbounds %Array_VarDeclaration_, ptr %85, i64 0, i32 2
  %88 = load i64, ptr %memberidx1.i87, align 4
  store i1 false, ptr %86, align 1
  %memberidx1.i.i88 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %86, i64 0, i32 1
  %memberidx2.i.i89 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %86, i64 0, i32 3
  store ptr %87, ptr %memberidx2.i.i89, align 8
  %memberidx3.i.i90 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %86, i64 0, i32 2
  store i64 %88, ptr %memberidx3.i.i90, align 4
  store i64 1, ptr %memberidx1.i.i88, align 4
  %89 = icmp slt i64 %88, 1
  br i1 %89, label %for.end25, label %for.body23.lr.ph

for.body23.lr.ph:                                 ; preds = %for.entry19
  %90 = load i64, ptr %memberidx2.i.i, align 4
  br label %for.body23

for.body23:                                       ; preds = %for.body23.lr.ph, %ifend32
  %91 = phi i64 [ 1, %for.body23.lr.ph ], [ %123, %ifend32 ]
  %storemerge69227.in = phi ptr [ %87, %for.body23.lr.ph ], [ %ptridx.i103, %ifend32 ]
  %storemerge69227 = load ptr, ptr %storemerge69227.in, align 8
  %memberidx27 = getelementptr inbounds %VarDeclaration, ptr %storemerge69227, i64 0, i32 2
  %92 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %VarId, ptr %92, i64 0, i32 2
  %93 = load i64, ptr %memberidx28, align 4
  %94 = icmp eq i64 %93, %90
  br i1 %94, label %if.entry30, label %ifend32

for.end25:                                        ; preds = %ifend32, %for.entry19
  tail call void @free(ptr nonnull %86)
  %.pre253 = load i64, ptr %1, align 4
  br label %ifend18

if.entry30:                                       ; preds = %for.body23
  store i1 false, ptr %86, align 1
  call fastcc void @CodeGen_codegen_var_declaration(ptr %0, ptr null, ptr nonnull %storemerge69227)
  %95 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %96 = load i64, ptr %memberidx.i.i, align 4
  %97 = load i64, ptr %1, align 4
  %98 = load i64, ptr %memberidx2.i.i, align 4
  %99 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @224, i64 %96, i64 %97, i64 %98)
  %100 = load ptr, ptr %4, align 8
  %101 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %101, align 8
  %memberidx.i.i.i98 = getelementptr inbounds %string, ptr %101, i64 0, i32 1
  store ptr %100, ptr %memberidx.i.i.i98, align 8
  %memberidx1.i.i.i99 = getelementptr inbounds %string, ptr %101, i64 0, i32 2
  store i64 %99, ptr %memberidx1.i.i.i99, align 4
  %memberidx2.i.i.i100 = getelementptr inbounds %string, ptr %101, i64 0, i32 3
  store i64 %99, ptr %memberidx2.i.i.i100, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %102 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %101)
  %memberidx.i155 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %95, i64 0, i32 1
  %103 = load i64, ptr %memberidx.i155, align 4
  %104 = urem i64 %102, %103
  %105 = load ptr, ptr %95, align 8
  %ptridx.i156 = getelementptr inbounds ptr, ptr %105, i64 %104
  %106 = load ptr, ptr %ptridx.i156, align 8
  %.not.i157 = icmp eq ptr %106, null
  br i1 %.not.i157, label %common.ret, label %while.entry.i163

while.entry.i163:                                 ; preds = %if.entry30, %else.i175
  %107 = phi ptr [ %117, %else.i175 ], [ %105, %if.entry30 ]
  %108 = phi i64 [ %118, %else.i175 ], [ %103, %if.entry30 ]
  %109 = phi ptr [ %121, %else.i175 ], [ %106, %if.entry30 ]
  %hash.0.i158 = phi i64 [ %120, %else.i175 ], [ %104, %if.entry30 ]
  %110 = load ptr, ptr %109, align 8
  %memberidx.i.i160 = getelementptr inbounds %string, ptr %110, i64 0, i32 2
  %111 = load i64, ptr %memberidx.i.i160, align 4
  %112 = load i64, ptr %memberidx1.i.i.i99, align 4
  %.not.i.i162 = icmp eq i64 %111, %112
  br i1 %.not.i.i162, label %ifend.i.i166, label %else.i175

ifend.i.i166:                                     ; preds = %while.entry.i163
  %memberidx2.i.i164 = getelementptr inbounds %string, ptr %110, i64 0, i32 1
  %113 = load ptr, ptr %memberidx2.i.i164, align 8
  %114 = load ptr, ptr %memberidx.i.i.i98, align 8
  %115 = call i64 @memcmp(ptr %113, ptr %114, i64 %111)
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %while.end.i172, label %ifend.i.i166.else.i175_crit_edge

ifend.i.i166.else.i175_crit_edge:                 ; preds = %ifend.i.i166
  %.pre249 = load i64, ptr %memberidx.i155, align 4
  %.pre250 = load ptr, ptr %95, align 8
  br label %else.i175

while.end.i172:                                   ; preds = %ifend.i.i166
  %.pre251.pre = load ptr, ptr %95, align 8
  %ptridx9.i170.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre251.pre, i64 %hash.0.i158
  %.pre252.pre = load ptr, ptr %ptridx9.i170.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i171 = icmp eq ptr %.pre252.pre, null
  br i1 %.not29.i171, label %common.ret, label %if.entry10.i178

else.i175:                                        ; preds = %ifend.i.i166.else.i175_crit_edge, %while.entry.i163
  %117 = phi ptr [ %.pre250, %ifend.i.i166.else.i175_crit_edge ], [ %107, %while.entry.i163 ]
  %118 = phi i64 [ %.pre249, %ifend.i.i166.else.i175_crit_edge ], [ %108, %while.entry.i163 ]
  %119 = add nuw i64 %hash.0.i158, 1
  %120 = urem i64 %119, %118
  %ptridx7.i173 = getelementptr inbounds ptr, ptr %117, i64 %120
  %121 = load ptr, ptr %ptridx7.i173, align 8
  %.not30.i174 = icmp eq ptr %121, null
  br i1 %.not30.i174, label %common.ret, label %while.entry.i163

if.entry10.i178:                                  ; preds = %while.end.i172
  %memberidx15.i177 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre252.pre, i64 0, i32 1
  %122 = load ptr, ptr %memberidx15.i177, align 8
  br label %common.ret

ifend32:                                          ; preds = %for.body23
  %123 = add nuw nsw i64 %91, 1
  store i64 %123, ptr %memberidx1.i.i88, align 4
  %ptridx.i103 = getelementptr inbounds ptr, ptr %87, i64 %91
  %.not267 = icmp slt i64 %91, %88
  br i1 %.not267, label %for.body23, label %for.end25

for.entry37:                                      ; preds = %ifend18
  %memberidx39 = getelementptr inbounds %Module, ptr %39, i64 0, i32 5
  %124 = load ptr, ptr %memberidx39, align 8
  %125 = call ptr @malloc(i32 25)
  %memberidx.i105 = getelementptr inbounds %Array_Function_, ptr %124, i64 0, i32 1
  %126 = load ptr, ptr %memberidx.i105, align 8
  %memberidx1.i106 = getelementptr inbounds %Array_Function_, ptr %124, i64 0, i32 2
  %127 = load i64, ptr %memberidx1.i106, align 4
  store i1 false, ptr %125, align 1
  %memberidx1.i.i107 = getelementptr inbounds %ArrayIterator_Function_, ptr %125, i64 0, i32 1
  %memberidx2.i.i108 = getelementptr inbounds %ArrayIterator_Function_, ptr %125, i64 0, i32 3
  store ptr %126, ptr %memberidx2.i.i108, align 8
  %memberidx3.i.i109 = getelementptr inbounds %ArrayIterator_Function_, ptr %125, i64 0, i32 2
  store i64 %127, ptr %memberidx3.i.i109, align 4
  store i64 1, ptr %memberidx1.i.i107, align 4
  %128 = icmp slt i64 %127, 1
  br i1 %128, label %for.end43, label %for.body41.lr.ph

for.body41.lr.ph:                                 ; preds = %for.entry37
  %129 = load i64, ptr %memberidx2.i.i, align 4
  br label %for.body41

for.body41:                                       ; preds = %for.body41.lr.ph, %ifend50
  %130 = phi i64 [ 1, %for.body41.lr.ph ], [ %162, %ifend50 ]
  %storemerge223.in = phi ptr [ %126, %for.body41.lr.ph ], [ %ptridx.i122, %ifend50 ]
  %storemerge223 = load ptr, ptr %storemerge223.in, align 8
  %131 = load ptr, ptr %storemerge223, align 8
  %memberidx46 = getelementptr inbounds %VarId, ptr %131, i64 0, i32 2
  %132 = load i64, ptr %memberidx46, align 4
  %133 = icmp eq i64 %132, %129
  br i1 %133, label %if.entry48, label %ifend50

for.end43:                                        ; preds = %ifend50, %for.entry37
  tail call void @free(ptr nonnull %125)
  br label %common.ret

if.entry48:                                       ; preds = %for.body41
  store i1 false, ptr %125, align 1
  call fastcc void @CodeGen_codegen_function(ptr %0, ptr nonnull %storemerge223)
  %134 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %135 = load i64, ptr %memberidx.i.i, align 4
  %136 = load i64, ptr %1, align 4
  %137 = load i64, ptr %memberidx2.i.i, align 4
  %138 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @224, i64 %135, i64 %136, i64 %137)
  %139 = load ptr, ptr %3, align 8
  %140 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %140, align 8
  %memberidx.i.i.i117 = getelementptr inbounds %string, ptr %140, i64 0, i32 1
  store ptr %139, ptr %memberidx.i.i.i117, align 8
  %memberidx1.i.i.i118 = getelementptr inbounds %string, ptr %140, i64 0, i32 2
  store i64 %138, ptr %memberidx1.i.i.i118, align 4
  %memberidx2.i.i.i119 = getelementptr inbounds %string, ptr %140, i64 0, i32 3
  store i64 %138, ptr %memberidx2.i.i.i119, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %141 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %140)
  %memberidx.i180 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %134, i64 0, i32 1
  %142 = load i64, ptr %memberidx.i180, align 4
  %143 = urem i64 %141, %142
  %144 = load ptr, ptr %134, align 8
  %ptridx.i181 = getelementptr inbounds ptr, ptr %144, i64 %143
  %145 = load ptr, ptr %ptridx.i181, align 8
  %.not.i182 = icmp eq ptr %145, null
  br i1 %.not.i182, label %common.ret, label %while.entry.i188

while.entry.i188:                                 ; preds = %if.entry48, %else.i200
  %146 = phi ptr [ %156, %else.i200 ], [ %144, %if.entry48 ]
  %147 = phi i64 [ %157, %else.i200 ], [ %142, %if.entry48 ]
  %148 = phi ptr [ %160, %else.i200 ], [ %145, %if.entry48 ]
  %hash.0.i183 = phi i64 [ %159, %else.i200 ], [ %143, %if.entry48 ]
  %149 = load ptr, ptr %148, align 8
  %memberidx.i.i185 = getelementptr inbounds %string, ptr %149, i64 0, i32 2
  %150 = load i64, ptr %memberidx.i.i185, align 4
  %151 = load i64, ptr %memberidx1.i.i.i118, align 4
  %.not.i.i187 = icmp eq i64 %150, %151
  br i1 %.not.i.i187, label %ifend.i.i191, label %else.i200

ifend.i.i191:                                     ; preds = %while.entry.i188
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %149, i64 0, i32 1
  %152 = load ptr, ptr %memberidx2.i.i189, align 8
  %153 = load ptr, ptr %memberidx.i.i.i117, align 8
  %154 = call i64 @memcmp(ptr %152, ptr %153, i64 %150)
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %while.end.i197, label %ifend.i.i191.else.i200_crit_edge

ifend.i.i191.else.i200_crit_edge:                 ; preds = %ifend.i.i191
  %.pre254 = load i64, ptr %memberidx.i180, align 4
  %.pre255 = load ptr, ptr %134, align 8
  br label %else.i200

while.end.i197:                                   ; preds = %ifend.i.i191
  %.pre256.pre = load ptr, ptr %134, align 8
  %ptridx9.i195.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre256.pre, i64 %hash.0.i183
  %.pre257.pre = load ptr, ptr %ptridx9.i195.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i196 = icmp eq ptr %.pre257.pre, null
  br i1 %.not29.i196, label %common.ret, label %if.entry10.i203

else.i200:                                        ; preds = %ifend.i.i191.else.i200_crit_edge, %while.entry.i188
  %156 = phi ptr [ %.pre255, %ifend.i.i191.else.i200_crit_edge ], [ %146, %while.entry.i188 ]
  %157 = phi i64 [ %.pre254, %ifend.i.i191.else.i200_crit_edge ], [ %147, %while.entry.i188 ]
  %158 = add nuw i64 %hash.0.i183, 1
  %159 = urem i64 %158, %157
  %ptridx7.i198 = getelementptr inbounds ptr, ptr %156, i64 %159
  %160 = load ptr, ptr %ptridx7.i198, align 8
  %.not30.i199 = icmp eq ptr %160, null
  br i1 %.not30.i199, label %common.ret, label %while.entry.i188

if.entry10.i203:                                  ; preds = %while.end.i197
  %memberidx15.i202 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre257.pre, i64 0, i32 1
  %161 = load ptr, ptr %memberidx15.i202, align 8
  br label %common.ret

ifend50:                                          ; preds = %for.body41
  %162 = add nuw nsw i64 %130, 1
  store i64 %162, ptr %memberidx1.i.i107, align 4
  %ptridx.i122 = getelementptr inbounds ptr, ptr %126, i64 %130
  %.not266 = icmp slt i64 %130, %127
  br i1 %.not266, label %for.body41, label %for.end43
}

define internal fastcc void @CodeGen_declare_enum(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = tail call ptr @malloc(i32 24)
  %7 = tail call ptr @malloc(i32 24)
  %8 = tail call ptr @malloc(i32 2048)
  store ptr %8, ptr %7, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %2, %for.body.i.i
  %i.0.i.i71 = phi i64 [ 0, %2 ], [ %10, %for.body.i.i ]
  %9 = load ptr, ptr %7, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %i.0.i.i71
  store ptr null, ptr %ptridx.i.i, align 8
  %10 = add nuw nsw i64 %i.0.i.i71, 1
  %11 = icmp ult i64 %i.0.i.i71, 255
  br i1 %11, label %for.body.i.i, label %CGEnumType_constructor.exit

CGEnumType_constructor.exit:                      ; preds = %for.body.i.i
  %memberidx.i64 = getelementptr inbounds %CGEnumType, ptr %6, i64 0, i32 1
  %memberidx2.i.i65 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i65, align 4
  %memberidx3.i.i66 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i66, align 4
  store ptr %7, ptr %memberidx.i64, align 8
  %memberidx = getelementptr inbounds %Enum, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx1, align 4
  %14 = icmp sgt i64 %13, 0
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %CGEnumType_constructor.exit
  %memberidx.i63 = getelementptr inbounds %Array_EnumField_, ptr %12, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i63, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx4 = getelementptr inbounds %EnumField, ptr %16, i64 0, i32 2
  %17 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %17, i64 0, i32 3
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %18, i1 true)
  br label %ifend

else:                                             ; preds = %CGEnumType_constructor.exit
  %20 = tail call ptr @LLVMIntType(i64 64)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %storemerge = phi ptr [ %20, %else ], [ %19, %if.entry ]
  store ptr %storemerge, ptr %6, align 8
  %21 = load ptr, ptr %memberidx, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumField_, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx8, align 4
  %23 = alloca ptr, i64 %22, align 8
  %24 = tail call ptr @malloc(i32 25)
  %memberidx.i59 = getelementptr inbounds %Array_EnumField_, ptr %21, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i59, align 8
  %26 = load i64, ptr %memberidx8, align 4
  store i1 false, ptr %24, align 1
  %memberidx1.i.i61 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %24, i64 0, i32 1
  %memberidx2.i.i62 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %24, i64 0, i32 3
  store ptr %25, ptr %memberidx2.i.i62, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_EnumField_, ptr %24, i64 0, i32 2
  store i64 %26, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i61, align 4
  %27 = icmp slt i64 %26, 1
  br i1 %27, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %ifend
  %memberidx14 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %28 = phi i64 [ 1, %for.body.lr.ph ], [ %69, %for.body ]
  %storemerge4169.in = phi ptr [ %25, %for.body.lr.ph ], [ %ptridx.i, %for.body ]
  %29 = phi i64 [ 0, %for.body.lr.ph ], [ %68, %for.body ]
  %storemerge4169 = load ptr, ptr %storemerge4169.in, align 8
  %30 = load ptr, ptr %storemerge4169, align 8
  %31 = load ptr, ptr %memberidx.i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i48 = getelementptr inbounds %PropId, ptr %30, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i48, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %33 = load i64, ptr %32, align 4
  %memberidx1.i.i49 = getelementptr inbounds %TypeId, ptr %32, i64 0, i32 1
  %34 = load i64, ptr %memberidx1.i.i49, align 4
  %memberidx2.i.i50 = getelementptr inbounds %TypeId, ptr %32, i64 0, i32 2
  %35 = load i64, ptr %memberidx2.i.i50, align 4
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @224, i64 %33, i64 %34, i64 %35)
  %37 = load ptr, ptr %3, align 8
  %38 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %38, align 8
  %memberidx.i.i.i51 = getelementptr inbounds %string, ptr %38, i64 0, i32 1
  store ptr %37, ptr %memberidx.i.i.i51, align 8
  %memberidx1.i.i.i52 = getelementptr inbounds %string, ptr %38, i64 0, i32 2
  store i64 %36, ptr %memberidx1.i.i.i52, align 4
  %memberidx2.i.i.i53 = getelementptr inbounds %string, ptr %38, i64 0, i32 3
  store i64 %36, ptr %memberidx2.i.i.i53, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %39 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %40 = call ptr %39(ptr nonnull %38)
  %41 = load i64, ptr %30, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %30, i64 0, i32 2
  %42 = load i64, ptr %memberidx3.i, align 4
  %43 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @240, ptr %40, i64 %41, i64 %42)
  %44 = load ptr, ptr %4, align 8
  %45 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 %43, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 %43, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %40)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %memberidx13 = getelementptr inbounds %EnumField, ptr %storemerge4169, i64 0, i32 2
  %46 = load ptr, ptr %memberidx13, align 8
  %47 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr null, ptr %46)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %31, ptr nonnull %45, ptr %47)
  %48 = load ptr, ptr %memberidx14, align 8
  %49 = load ptr, ptr %48, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %49, i64 0, i32 5
  %50 = load ptr, ptr %memberidx15, align 8
  %51 = call ptr %50(ptr nonnull %48)
  %memberidx16 = getelementptr inbounds %EnumField, ptr %storemerge4169, i64 0, i32 1
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i64 0, i32 5
  %54 = load ptr, ptr %memberidx17, align 8
  %55 = call ptr %54(ptr nonnull %52)
  %56 = alloca ptr, align 8
  %57 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %56, ptr nonnull @270, ptr %51, ptr %55)
  %58 = load ptr, ptr %56, align 8
  %59 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %59, align 8
  %memberidx.i45 = getelementptr inbounds %string, ptr %59, i64 0, i32 1
  store ptr %58, ptr %memberidx.i45, align 8
  %memberidx1.i46 = getelementptr inbounds %string, ptr %59, i64 0, i32 2
  store i64 %57, ptr %memberidx1.i46, align 4
  %memberidx2.i47 = getelementptr inbounds %string, ptr %59, i64 0, i32 3
  store i64 %57, ptr %memberidx2.i47, align 4
  tail call void @free(ptr %51)
  tail call void @free(ptr %55)
  %60 = load ptr, ptr %59, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %60, i64 0, i32 5
  %61 = load ptr, ptr %memberidx18, align 8
  %62 = call ptr %61(ptr nonnull %59)
  %63 = load i64, ptr %memberidx1.i46, align 4
  %64 = call ptr @LLVMConstString(ptr %62, i64 %63, i1 false)
  %65 = load ptr, ptr %0, align 8
  %66 = call ptr @LLVMTypeOf(ptr %64)
  %67 = call ptr @LLVMAddGlobal(ptr %65, ptr %66, ptr nonnull @28)
  call void @LLVMSetInitializer(ptr %67, ptr %64)
  %68 = add nuw nsw i64 %29, 1
  %ptridx = getelementptr inbounds ptr, ptr %23, i64 %29
  store ptr %67, ptr %ptridx, align 8
  %69 = add nuw nsw i64 %28, 1
  store i64 %69, ptr %memberidx1.i.i61, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %25, i64 %28
  %.not = icmp slt i64 %28, %26
  br i1 %.not, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %ifend
  %.lcssa = phi i64 [ 0, %ifend ], [ %68, %for.body ]
  tail call void @free(ptr nonnull %24)
  %70 = call ptr @LLVMInt8Type()
  %71 = call ptr @LLVMPointerType(ptr %70, i64 0)
  %72 = call ptr @LLVMConstArray(ptr %71, ptr nonnull %23, i64 %.lcssa)
  %73 = load ptr, ptr %0, align 8
  %74 = call ptr @LLVMTypeOf(ptr %72)
  %memberidx22 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 1
  %75 = load ptr, ptr %memberidx22, align 8
  %76 = load ptr, ptr %75, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %76, i64 0, i32 5
  %77 = load ptr, ptr %memberidx23, align 8
  %78 = call ptr %77(ptr nonnull %75)
  %79 = alloca ptr, align 8
  %80 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %79, ptr nonnull @271, ptr %78)
  %81 = load ptr, ptr %79, align 8
  %82 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %82, align 8
  %memberidx.i42 = getelementptr inbounds %string, ptr %82, i64 0, i32 1
  store ptr %81, ptr %memberidx.i42, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %82, i64 0, i32 2
  store i64 %80, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %82, i64 0, i32 3
  store i64 %80, ptr %memberidx2.i, align 4
  tail call void @free(ptr %78)
  %83 = load ptr, ptr %82, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %83, i64 0, i32 5
  %84 = load ptr, ptr %memberidx24, align 8
  %85 = call ptr %84(ptr nonnull %82)
  %86 = call ptr @LLVMAddGlobal(ptr %73, ptr %74, ptr %85)
  call void @LLVMSetInitializer(ptr %86, ptr %72)
  %memberidx25 = getelementptr inbounds %CGEnumType, ptr %6, i64 0, i32 2
  store ptr %86, ptr %memberidx25, align 8
  %87 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 9
  %88 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %89 = load i64, ptr %87, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %87, i64 0, i32 1
  %90 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %87, i64 0, i32 2
  %91 = load i64, ptr %memberidx2.i.i, align 4
  %92 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @224, i64 %89, i64 %90, i64 %91)
  %93 = load ptr, ptr %5, align 8
  %94 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %94, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %94, i64 0, i32 1
  store ptr %93, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %94, i64 0, i32 2
  store i64 %92, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %94, i64 0, i32 3
  store i64 %92, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call fastcc void @Map_string_CGEnumType____setitem__(ptr %88, ptr nonnull %94, ptr nonnull %6)
  ret void
}

define internal fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr nocapture readonly %0, ptr %1, ptr %2, ptr nocapture readonly %3, i64 %4, ptr writeonly %5) unnamed_addr {
  %7 = tail call ptr @LLVMInt8Type()
  %8 = tail call ptr @LLVMPointerType(ptr %7, i64 0)
  %9 = tail call ptr @LLVMIntType(i64 64)
  %10 = tail call ptr @LLVMBuildAlloca(ptr %1, ptr %8, ptr nonnull @28)
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %11 = load ptr, ptr %memberidx.i, align 8
  %12 = tail call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %2)
  %memberidx.i25 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %11, i64 0, i32 1
  %13 = load i64, ptr %memberidx.i25, align 4
  %14 = urem i64 %12, %13
  %15 = load ptr, ptr %11, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i, align 8
  %.not.i26 = icmp eq ptr %16, null
  br i1 %.not.i26, label %if.entry.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %6
  %memberidx1.i.i28 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i30
  %17 = phi ptr [ %27, %else.i30 ], [ %15, %while.entry.i.preheader ]
  %18 = phi i64 [ %28, %else.i30 ], [ %13, %while.entry.i.preheader ]
  %19 = phi ptr [ %31, %else.i30 ], [ %16, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %30, %else.i30 ], [ %14, %while.entry.i.preheader ]
  %20 = load ptr, ptr %19, align 8
  %memberidx.i.i27 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx.i.i27, align 4
  %22 = load i64, ptr %memberidx1.i.i28, align 4
  %.not.i.i = icmp eq i64 %21, %22
  br i1 %.not.i.i, label %ifend.i.i, label %else.i30

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i29 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i29, align 8
  %24 = load ptr, ptr %memberidx3.i.i, align 8
  %25 = tail call i64 @memcmp(ptr %23, ptr %24, i64 %21)
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %while.end.i, label %ifend.i.i.else.i30_crit_edge

ifend.i.i.else.i30_crit_edge:                     ; preds = %ifend.i.i
  %.pre = load i64, ptr %memberidx.i25, align 4
  %.pre35 = load ptr, ptr %11, align 8
  br label %else.i30

while.end.i:                                      ; preds = %ifend.i.i
  %.pre36.pre = load ptr, ptr %11, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre36.pre, i64 %hash.0.i
  %.pre37.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre37.pre, null
  br i1 %.not29.i, label %if.entry.i, label %Map_string_LLVMValueRef____getitem__.exit

else.i30:                                         ; preds = %ifend.i.i.else.i30_crit_edge, %while.entry.i
  %27 = phi ptr [ %.pre35, %ifend.i.i.else.i30_crit_edge ], [ %17, %while.entry.i ]
  %28 = phi i64 [ %.pre, %ifend.i.i.else.i30_crit_edge ], [ %18, %while.entry.i ]
  %29 = add nuw i64 %hash.0.i, 1
  %30 = urem i64 %29, %28
  %ptridx7.i = getelementptr inbounds ptr, ptr %27, i64 %30
  %31 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %31, null
  br i1 %.not30.i, label %if.entry.i, label %while.entry.i

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre37.pre, i64 0, i32 1
  %32 = load ptr, ptr %memberidx15.i, align 8
  %33 = icmp eq ptr %32, null
  br i1 %33, label %if.entry.i, label %CodeGen_createGlobalLLVMString.exit

if.entry.i:                                       ; preds = %else.i30, %6, %while.end.i, %Map_string_LLVMValueRef____getitem__.exit
  %34 = load ptr, ptr %2, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 5
  %35 = load ptr, ptr %memberidx1.i, align 8
  %36 = tail call ptr %35(ptr nonnull %2)
  %37 = tail call ptr @LLVMBuildGlobalString(ptr %1, ptr %36, ptr nonnull @28)
  %38 = load ptr, ptr %memberidx.i, align 8
  tail call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %38, ptr nonnull %2, ptr %37)
  br label %CodeGen_createGlobalLLVMString.exit

CodeGen_createGlobalLLVMString.exit:              ; preds = %Map_string_LLVMValueRef____getitem__.exit, %if.entry.i
  %str.0.i = phi ptr [ %37, %if.entry.i ], [ %32, %Map_string_LLVMValueRef____getitem__.exit ]
  %39 = add nuw i64 %4, 2
  %40 = alloca ptr, i64 %39, align 8
  store ptr %10, ptr %40, align 8
  %ptridx1 = getelementptr inbounds ptr, ptr %40, i64 1
  store ptr %str.0.i, ptr %ptridx1, align 8
  %41 = getelementptr inbounds ptr, ptr %40, i64 2
  %42 = shl i64 %4, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2147483648 %41, ptr align 8 %3, i64 %42, i1 false)
  %arg_types = alloca [2 x ptr], align 8
  store ptr %8, ptr %arg_types, align 8
  %43 = getelementptr inbounds ptr, ptr %arg_types, i64 1
  store ptr %8, ptr %43, align 8
  %44 = load ptr, ptr %0, align 8
  %45 = tail call ptr @malloc(i32 8)
  store i64 7382647088337679201, ptr %45, align 8
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i, align 4
  %47 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i21 = getelementptr inbounds %IntrinsicResult, ptr %47, i64 0, i32 1
  store i64 0, ptr %47, align 8
  %48 = call ptr @LLVMFunctionType(ptr %9, ptr nonnull %arg_types, i64 2, i1 true)
  store ptr %48, ptr %memberidx1.i.i21, align 8
  %49 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %50 = call ptr %49(ptr nonnull %46)
  %51 = call ptr @LLVMGetNamedFunction(ptr %44, ptr %50)
  %.not.i = icmp eq ptr %51, null
  br i1 %.not.i, label %else.i, label %get_intrinsic.exit

else.i:                                           ; preds = %CodeGen_createGlobalLLVMString.exit
  %52 = call ptr @LLVMAddFunction(ptr %44, ptr %50, ptr %48)
  br label %get_intrinsic.exit

get_intrinsic.exit:                               ; preds = %CodeGen_createGlobalLLVMString.exit, %else.i
  %storemerge.i = phi ptr [ %52, %else.i ], [ %51, %CodeGen_createGlobalLLVMString.exit ]
  store ptr %storemerge.i, ptr %47, align 8
  %53 = call ptr @LLVMBuildCall2(ptr %1, ptr %48, ptr %storemerge.i, ptr nonnull %40, i64 %39, ptr nonnull @28)
  %.not = icmp eq ptr %5, null
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %get_intrinsic.exit
  store ptr %53, ptr %5, align 8
  br label %ifend

ifend:                                            ; preds = %get_intrinsic.exit, %if.entry
  %54 = call ptr @LLVMBuildLoad2(ptr %1, ptr %8, ptr %10, ptr nonnull @28)
  ret ptr %54
}

define internal fastcc ptr @CodeGen_codegen_string(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %6 = alloca %StringBuilder, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_uint_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3, align 4
  %10 = shl nuw i64 %9, 1
  %11 = add nuw i64 %10, %7
  store ptr @VTableStringBuilder, ptr %6, align 8
  %memberidx.i102 = getelementptr inbounds %StringBuilder, ptr %6, i64 0, i32 2
  store i64 %11, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %StringBuilder, ptr %6, i64 0, i32 1
  %12 = trunc i64 %11 to i32
  %13 = tail call ptr @malloc(i32 %12)
  store ptr %13, ptr %memberidx1.i103, align 8
  %memberidx3.i = getelementptr inbounds %StringBuilder, ptr %6, i64 0, i32 3
  store ptr %13, ptr %memberidx3.i, align 8
  %memberidx5.i104 = getelementptr inbounds %StringBuilder, ptr %6, i64 0, i32 4
  store i64 0, ptr %memberidx5.i104, align 8
  %14 = load ptr, ptr %5, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 3
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = tail call ptr %15(ptr nonnull %5)
  %17 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %17, align 8
  %memberidx.i99 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i64 0, i32 2
  %memberidx1.i100 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i64 0, i32 3
  store i64 8, ptr %memberidx1.i100, align 4
  %memberidx2.i101 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i64 0, i32 1
  %18 = tail call ptr @malloc(i32 64)
  store ptr %18, ptr %memberidx2.i101, align 8
  store i64 0, ptr %memberidx.i99, align 4
  %memberidx7 = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 6
  %19 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_Expression_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx8, align 4
  %21 = alloca ptr, i64 %20, align 8
  %22 = icmp sgt i64 %20, 0
  br i1 %22, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.0159 = phi i64 [ %39, %for.body ], [ 0, %for.entry ]
  %chars.0158 = phi ptr [ %36, %for.body ], [ %16, %for.entry ]
  %curr_ind.0157 = phi i64 [ %30, %for.body ], [ 0, %for.entry ]
  %23 = load ptr, ptr %memberidx7, align 8
  %memberidx.i97 = getelementptr inbounds %Array_Expression_, ptr %23, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i97, align 8
  %ptridx.i98 = getelementptr inbounds ptr, ptr %24, i64 %i.0159
  %25 = load ptr, ptr %ptridx.i98, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx10, align 8
  %27 = call fastcc ptr @get_format_from_type(ptr %26)
  %28 = load ptr, ptr %memberidx2, align 8
  %memberidx.i95 = getelementptr inbounds %Array_uint_, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i95, align 8
  %ptridx.i96 = getelementptr inbounds i64, ptr %29, i64 %i.0159
  %30 = load i64, ptr %ptridx.i96, align 4
  %31 = sub nuw i64 %30, %curr_ind.0157
  %32 = load ptr, ptr %6, align 8
  %33 = load ptr, ptr %32, align 8
  call void %33(ptr nonnull %6, ptr %chars.0158, i64 %31)
  %34 = load ptr, ptr %6, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 1
  %35 = load ptr, ptr %memberidx13, align 8
  call void %35(ptr nonnull %6, ptr %27)
  %36 = getelementptr inbounds i8, ptr %chars.0158, i64 %31
  %37 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %25)
  %ptridx = getelementptr inbounds ptr, ptr %21, i64 %i.0159
  %38 = call fastcc ptr @CodeGen_get_string_val(ptr %0, ptr %1, ptr %37, ptr %26, ptr nonnull %17, i64 0)
  store ptr %38, ptr %ptridx, align 8
  %39 = add nuw nsw i64 %i.0159, 1
  %40 = icmp slt i64 %39, %20
  br i1 %40, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  %.pre = load ptr, ptr %6, align 8
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.entry
  %41 = phi ptr [ @VTableStringBuilder, %for.entry ], [ %.pre, %for.end.loopexit ]
  %curr_ind.0.lcssa = phi i64 [ 0, %for.entry ], [ %30, %for.end.loopexit ]
  %chars.0.lcssa = phi ptr [ %16, %for.entry ], [ %36, %for.end.loopexit ]
  %42 = load ptr, ptr %41, align 8
  %43 = load i64, ptr %memberidx1, align 4
  %44 = sub nuw i64 %43, %curr_ind.0.lcssa
  call void %42(ptr nonnull %6, ptr %chars.0.lcssa, i64 %44)
  %45 = load ptr, ptr %6, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %45, i64 0, i32 3
  %46 = load ptr, ptr %memberidx16, align 8
  %47 = call ptr %46(ptr nonnull %6)
  %str_len = alloca ptr, align 8
  %memberidx17 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  %48 = load i64, ptr %memberidx17, align 4
  %49 = call ptr @LLVMIntType(i64 64)
  %50 = call ptr @LLVMConstInt(ptr %49, i64 %48, i1 false)
  store ptr %50, ptr %str_len, align 8
  br i1 %22, label %true_block, label %false_block

true_block:                                       ; preds = %for.end
  %51 = call fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr nonnull %47, ptr nonnull %21, i64 %20, ptr nonnull %str_len)
  br label %end

false_block:                                      ; preds = %for.end
  %memberidx.i93 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %52 = load ptr, ptr %memberidx.i93, align 8
  %53 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %47)
  %memberidx.i109 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %52, i64 0, i32 1
  %54 = load i64, ptr %memberidx.i109, align 4
  %55 = urem i64 %53, %54
  %56 = load ptr, ptr %52, align 8
  %ptridx.i110 = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i110, align 8
  %.not.i111 = icmp eq ptr %57, null
  br i1 %.not.i111, label %if.entry.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %false_block
  %memberidx3.i.i115 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i116
  %58 = phi ptr [ %68, %else.i116 ], [ %56, %while.entry.i.preheader ]
  %59 = phi i64 [ %69, %else.i116 ], [ %54, %while.entry.i.preheader ]
  %60 = phi ptr [ %72, %else.i116 ], [ %57, %while.entry.i.preheader ]
  %hash.0.i = phi i64 [ %71, %else.i116 ], [ %55, %while.entry.i.preheader ]
  %61 = load ptr, ptr %60, align 8
  %memberidx.i.i112 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  %62 = load i64, ptr %memberidx.i.i112, align 4
  %63 = load i64, ptr %memberidx17, align 4
  %.not.i.i = icmp eq i64 %62, %63
  br i1 %.not.i.i, label %ifend.i.i, label %else.i116

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i114 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  %64 = load ptr, ptr %memberidx2.i.i114, align 8
  %65 = load ptr, ptr %memberidx3.i.i115, align 8
  %66 = call i64 @memcmp(ptr %64, ptr %65, i64 %62)
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %while.end.i, label %ifend.i.i.else.i116_crit_edge

ifend.i.i.else.i116_crit_edge:                    ; preds = %ifend.i.i
  %.pre165 = load i64, ptr %memberidx.i109, align 4
  %.pre166 = load ptr, ptr %52, align 8
  br label %else.i116

while.end.i:                                      ; preds = %ifend.i.i
  %.pre167.pre = load ptr, ptr %52, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre167.pre, i64 %hash.0.i
  %.pre168.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre168.pre, null
  br i1 %.not29.i, label %if.entry.i, label %Map_string_LLVMValueRef____getitem__.exit

else.i116:                                        ; preds = %ifend.i.i.else.i116_crit_edge, %while.entry.i
  %68 = phi ptr [ %.pre166, %ifend.i.i.else.i116_crit_edge ], [ %58, %while.entry.i ]
  %69 = phi i64 [ %.pre165, %ifend.i.i.else.i116_crit_edge ], [ %59, %while.entry.i ]
  %70 = add nuw i64 %hash.0.i, 1
  %71 = urem i64 %70, %69
  %ptridx7.i = getelementptr inbounds ptr, ptr %68, i64 %71
  %72 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %72, null
  br i1 %.not30.i, label %if.entry.i, label %while.entry.i

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre168.pre, i64 0, i32 1
  %73 = load ptr, ptr %memberidx15.i, align 8
  %74 = icmp eq ptr %73, null
  br i1 %74, label %if.entry.i, label %end

if.entry.i:                                       ; preds = %else.i116, %false_block, %while.end.i, %Map_string_LLVMValueRef____getitem__.exit
  %75 = load ptr, ptr %47, align 8
  %memberidx1.i94 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %75, i64 0, i32 5
  %76 = load ptr, ptr %memberidx1.i94, align 8
  %77 = call ptr %76(ptr nonnull %47)
  %78 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %77, ptr nonnull @28)
  %79 = load ptr, ptr %memberidx.i93, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %79, ptr nonnull %47, ptr %78)
  br label %end

end:                                              ; preds = %if.entry.i, %Map_string_LLVMValueRef____getitem__.exit, %true_block
  %ternary = phi ptr [ %51, %true_block ], [ %78, %if.entry.i ], [ %73, %Map_string_LLVMValueRef____getitem__.exit ]
  %memberidx18 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %80 = load ptr, ptr %memberidx18, align 8
  %81 = load i64, ptr %80, align 4
  %82 = icmp eq i64 %81, 19
  br i1 %82, label %if.entry.i149, label %is_object.exit

if.entry.i149:                                    ; preds = %end, %if.entry.i149
  %.tr5.i = phi ptr [ %83, %if.entry.i149 ], [ %80, %end ]
  %memberidx1.i148 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %83 = load ptr, ptr %memberidx1.i148, align 8
  %84 = load i64, ptr %83, align 4
  %85 = icmp eq i64 %84, 19
  br i1 %85, label %if.entry.i149, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i149, %end
  %.lcssa.i = phi i64 [ %81, %end ], [ %84, %if.entry.i149 ]
  %86 = icmp eq i64 %.lcssa.i, 11
  br i1 %86, label %if.entry, label %for.entry32

if.entry:                                         ; preds = %is_object.exit
  %87 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %80, i1 false)
  %88 = call i1 @LLVMIsConstant(ptr %ternary)
  %89 = call i1 @LLVMIsGlobalConstant(ptr %ternary)
  %90 = and i1 %88, %89
  br i1 %90, label %if.entry20, label %else21

if.entry20:                                       ; preds = %if.entry
  %91 = load ptr, ptr %0, align 8
  %92 = call ptr @LLVMGetNamedFunction(ptr %91, ptr nonnull @234)
  %93 = icmp eq ptr %92, null
  br i1 %93, label %if.entry24, label %ifend26

else21:                                           ; preds = %if.entry
  %94 = call ptr @LLVMBuildMalloc(ptr %1, ptr %87, ptr nonnull @28)
  %args28 = alloca [3 x ptr], align 8
  store ptr %94, ptr %args28, align 8
  %95 = getelementptr inbounds ptr, ptr %args28, i64 1
  store ptr %ternary, ptr %95, align 8
  %96 = getelementptr inbounds ptr, ptr %args28, i64 2
  %97 = load ptr, ptr %str_len, align 8
  store ptr %97, ptr %96, align 8
  %98 = load ptr, ptr %memberidx18, align 8
  %memberidx.i105 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %99 = load i64, ptr %98, align 4
  %cond155 = icmp eq i64 %99, 19
  br i1 %cond155, label %if.entry.i140, label %get_class_from_type.exit

if.entry.i140:                                    ; preds = %else21, %if.entry.i140
  %.tr11.i156 = phi ptr [ %100, %if.entry.i140 ], [ %98, %else21 ]
  %memberidx1.i139 = getelementptr inbounds %GenericType, ptr %.tr11.i156, i64 0, i32 3
  %100 = load ptr, ptr %memberidx1.i139, align 8
  %101 = load i64, ptr %100, align 4
  %cond = icmp eq i64 %101, 19
  br i1 %cond, label %if.entry.i140, label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %if.entry.i140, %else21
  %memberidx1.i106 = getelementptr inbounds %ObjectType, ptr %98, i64 0, i32 1
  %102 = load ptr, ptr %memberidx1.i106, align 8
  %103 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %102)
  %.not.i117 = icmp eq ptr %103, null
  br i1 %.not.i117, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %get_class_from_type.exit
  %104 = load ptr, ptr %memberidx.i105, align 8
  %memberidx.i.i121 = getelementptr inbounds %Program, ptr %104, i64 0, i32 1
  %105 = load ptr, ptr %memberidx.i.i121, align 8
  %106 = load i64, ptr %102, align 4
  %memberidx.i.i.i122 = getelementptr inbounds %Array_Module_, ptr %105, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i.i.i122, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %107, i64 %106
  %108 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i123 = getelementptr inbounds %Module, ptr %108, i64 0, i32 4
  %109 = load ptr, ptr %memberidx2.i.i123, align 8
  %memberidx3.i.i124 = getelementptr inbounds %TypeId, ptr %102, i64 0, i32 2
  %110 = load i64, ptr %memberidx3.i.i124, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %109, i64 0, i32 1
  %111 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %111, i64 %110
  %112 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %112)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %112)
  %113 = load ptr, ptr %112, align 8
  %114 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %113)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %get_class_from_type.exit, %ifend.i
  %common.ret.op.i118 = phi ptr [ %114, %ifend.i ], [ %103, %get_class_from_type.exit ]
  %memberidx2.i107 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i118, i64 0, i32 6
  %115 = load ptr, ptr %memberidx2.i107, align 8
  %.not.i = icmp eq ptr %115, null
  br i1 %.not.i, label %else.i, label %if.entry.i108

if.entry.i108:                                    ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %116 = call ptr @LLVM_GetFunctionType(ptr nonnull %115)
  %117 = call ptr @LLVMBuildCall2(ptr %1, ptr %116, ptr nonnull %115, ptr nonnull %args28, i64 3, ptr nonnull @28)
  br label %for.entry32

else.i:                                           ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %118 = call ptr @malloc(i32 47)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(47) %118, ptr noundef nonnull align 8 dereferenceable(47) @266, i64 47, i1 false)
  %119 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %119, align 8
  %memberidx.i.i125 = getelementptr inbounds %string, ptr %119, i64 0, i32 1
  store ptr %118, ptr %memberidx.i.i125, align 8
  %memberidx1.i.i126 = getelementptr inbounds %string, ptr %119, i64 0, i32 2
  store i64 47, ptr %memberidx1.i.i126, align 4
  %memberidx2.i.i127 = getelementptr inbounds %string, ptr %119, i64 0, i32 3
  store i64 47, ptr %memberidx2.i.i127, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %120 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %121 = call ptr %120(ptr nonnull %119)
  %122 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @219, ptr %121)
  %123 = load ptr, ptr %3, align 8
  %124 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %124, align 8
  %memberidx.i.i129 = getelementptr inbounds %string, ptr %124, i64 0, i32 1
  store ptr %123, ptr %memberidx.i.i129, align 8
  %memberidx1.i.i130 = getelementptr inbounds %string, ptr %124, i64 0, i32 2
  store i64 %122, ptr %memberidx1.i.i130, align 4
  %memberidx2.i.i131 = getelementptr inbounds %string, ptr %124, i64 0, i32 3
  store i64 %122, ptr %memberidx2.i.i131, align 4
  call void @free(ptr %121)
  %125 = load ptr, ptr %124, align 8
  %memberidx.i.i.i132 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %125, i64 0, i32 3
  %126 = load ptr, ptr %memberidx.i.i.i132, align 8
  %127 = call ptr %126(ptr nonnull %124)
  %128 = load i64, ptr %memberidx1.i.i130, align 4
  call void @write(i64 1, ptr %127, i64 %128)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  br label %for.entry32

if.entry24:                                       ; preds = %if.entry20
  %129 = call ptr @malloc(i32 54)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %129, ptr noundef nonnull align 8 dereferenceable(54) @235, i64 54, i1 false)
  %130 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %130, align 8
  %memberidx.i.i90 = getelementptr inbounds %string, ptr %130, i64 0, i32 1
  store ptr %129, ptr %memberidx.i.i90, align 8
  %memberidx1.i.i91 = getelementptr inbounds %string, ptr %130, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i91, align 4
  %memberidx2.i.i92 = getelementptr inbounds %string, ptr %130, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i92, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %131 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %132 = call ptr %131(ptr nonnull %130)
  %133 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @219, ptr %132)
  %134 = load ptr, ptr %4, align 8
  %135 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %135, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %135, i64 0, i32 1
  store ptr %134, ptr %memberidx.i.i, align 8
  %memberidx1.i.i88 = getelementptr inbounds %string, ptr %135, i64 0, i32 2
  store i64 %133, ptr %memberidx1.i.i88, align 4
  %memberidx2.i.i89 = getelementptr inbounds %string, ptr %135, i64 0, i32 3
  store i64 %133, ptr %memberidx2.i.i89, align 4
  call void @free(ptr %132)
  %136 = load ptr, ptr %135, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %136, i64 0, i32 3
  %137 = load ptr, ptr %memberidx.i.i.i, align 8
  %138 = call ptr %137(ptr nonnull %135)
  %139 = load i64, ptr %memberidx1.i.i88, align 4
  call void @write(i64 1, ptr %138, i64 %139)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend26

ifend26:                                          ; preds = %if.entry20, %if.entry24
  %args = alloca [2 x ptr], align 8
  store ptr %ternary, ptr %args, align 8
  %140 = getelementptr inbounds ptr, ptr %args, i64 1
  %141 = load ptr, ptr %str_len, align 8
  store ptr %141, ptr %140, align 8
  %142 = call ptr @LLVM_GetFunctionType(ptr %92)
  %143 = call ptr @LLVMBuildCall2(ptr %1, ptr %142, ptr %92, ptr nonnull %args, i64 2, ptr nonnull @28)
  br label %for.entry32

for.entry32:                                      ; preds = %else.i, %if.entry.i108, %ifend26, %is_object.exit
  %144 = phi ptr [ %143, %ifend26 ], [ %ternary, %is_object.exit ], [ %94, %if.entry.i108 ], [ %94, %else.i ]
  %145 = call ptr @malloc(i32 25)
  %146 = load ptr, ptr %memberidx2.i101, align 8
  %147 = load i64, ptr %memberidx.i99, align 4
  store i1 false, ptr %145, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %145, i64 0, i32 1
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %145, i64 0, i32 3
  store ptr %146, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %145, i64 0, i32 2
  store i64 %147, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i, align 4
  %148 = icmp slt i64 %147, 1
  br i1 %148, label %for.end36, label %for.body34

for.body34:                                       ; preds = %for.entry32, %for.body34
  %149 = phi i64 [ %151, %for.body34 ], [ 1, %for.entry32 ]
  %storemerge154.in = phi ptr [ %ptridx.i, %for.body34 ], [ %146, %for.entry32 ]
  %storemerge154 = load ptr, ptr %storemerge154.in, align 8
  %150 = call ptr @LLVMBuildFree(ptr %1, ptr %storemerge154)
  %151 = add nuw nsw i64 %149, 1
  store i64 %151, ptr %memberidx1.i.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %146, i64 %149
  %.not = icmp slt i64 %149, %147
  br i1 %.not, label %for.body34, label %for.end36

for.end36:                                        ; preds = %for.body34, %for.entry32
  tail call void @free(ptr nonnull %145)
  call void @free(ptr %146)
  tail call void @free(ptr %17)
  ret ptr %144
}

define internal fastcc ptr @CodeGen_codegen_expression(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %incomming_vals.i = alloca [2 x ptr], align 8
  %blocks.i = alloca [2 x ptr], align 8
  %memberidx = getelementptr inbounds %Expression, ptr %2, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  switch i64 %4, label %common.ret132 [
    i64 4, label %if.entry
    i64 0, label %if.entry2
    i64 1, label %if.entry6
    i64 5, label %if.entry10
    i64 2, label %if.entry14
    i64 7, label %if.entry18
    i64 8, label %if.entry22
    i64 9, label %if.entry26
    i64 14, label %if.entry30
    i64 13, label %CodeGen_get_expr_mem.exit
    i64 12, label %if.entry38
    i64 11, label %if.entry42
    i64 15, label %if.entry46
    i64 10, label %if.entry50
    i64 6, label %if.entry54
    i64 16, label %if.entry58
  ]

common.ret132:                                    ; preds = %if.entry, %if.entry2, %if.entry6, %if.entry10, %if.entry14, %if.entry18, %if.entry22, %if.entry26, %if.entry30, %CodeGen_get_expr_mem.exit, %if.entry38, %if.entry42, %if.entry54, %if.entry58, %true_block.i, %false_block.i, %true_block6.i, %false_block7.i, %true_block14.i, %false_block15.i, %true_block22.i, %false_block23.i, %true_block32.i, %false_block33.i, %true_block36.i, %false_block37.i, %3, %if.entry46
  %common.ret132.op = phi ptr [ %48, %if.entry46 ], [ %7, %if.entry ], [ %11, %if.entry2 ], [ %15, %if.entry6 ], [ %18, %if.entry10 ], [ %19, %if.entry14 ], [ %20, %if.entry18 ], [ %21, %if.entry22 ], [ %22, %if.entry26 ], [ %23, %if.entry30 ], [ %27, %CodeGen_get_expr_mem.exit ], [ %28, %if.entry38 ], [ %29, %if.entry42 ], [ %88, %if.entry54 ], [ %89, %if.entry58 ], [ %68, %true_block.i ], [ %69, %false_block.i ], [ %75, %true_block6.i ], [ %76, %false_block7.i ], [ %78, %true_block14.i ], [ %79, %false_block15.i ], [ %82, %true_block22.i ], [ %83, %false_block23.i ], [ %84, %true_block32.i ], [ %85, %false_block33.i ], [ %86, %true_block36.i ], [ %87, %false_block37.i ], [ null, %3 ]
  ret ptr %common.ret132.op

if.entry:                                         ; preds = %3
  %memberidx.i = getelementptr inbounds %BooleanExpression, ptr %2, i64 0, i32 4
  %5 = load i1, ptr %memberidx.i, align 1
  %6 = tail call ptr @LLVMInt1Type()
  %..i.i = zext i1 %5 to i64
  %7 = tail call ptr @LLVMConstInt(ptr %6, i64 %..i.i, i1 false)
  br label %common.ret132

if.entry2:                                        ; preds = %3
  %memberidx.i118 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %8 = load ptr, ptr %memberidx.i118, align 8
  %9 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  %memberidx1.i = getelementptr inbounds %IntExpression, ptr %2, i64 0, i32 4
  %10 = load i64, ptr %memberidx1.i, align 4
  %11 = tail call ptr @LLVMConstInt(ptr %9, i64 %10, i1 true)
  br label %common.ret132

if.entry6:                                        ; preds = %3
  %memberidx.i119 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %12 = load ptr, ptr %memberidx.i119, align 8
  %13 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %12, i1 true)
  %memberidx1.i120 = getelementptr inbounds %FloatExpression, ptr %2, i64 0, i32 4
  %14 = load double, ptr %memberidx1.i120, align 8
  %15 = tail call ptr @LLVMConstReal(ptr %13, double %14)
  br label %common.ret132

if.entry10:                                       ; preds = %3
  %memberidx.i121 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %16 = load ptr, ptr %memberidx.i121, align 8
  %17 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %18 = tail call ptr @LLVMConstNull(ptr %17)
  br label %common.ret132

if.entry14:                                       ; preds = %3
  %19 = tail call fastcc ptr @CodeGen_codegen_string(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret132

if.entry18:                                       ; preds = %3
  %20 = tail call fastcc ptr @CodeGen_codegen_var_access_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret132

if.entry22:                                       ; preds = %3
  %21 = tail call fastcc ptr @CodeGen_codegen_bin_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret132

if.entry26:                                       ; preds = %3
  %22 = tail call fastcc ptr @CodeGen_codegen_unary_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret132

if.entry30:                                       ; preds = %3
  %23 = tail call fastcc ptr @CodeGen_codegen_call_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret132

CodeGen_get_expr_mem.exit:                        ; preds = %3
  %24 = tail call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr nonnull %2)
  %memberidx.i122 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %25 = load ptr, ptr %memberidx.i122, align 8
  %26 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %25, i1 true)
  %27 = tail call ptr @LLVMBuildLoad2(ptr %1, ptr %26, ptr %24, ptr nonnull @28)
  br label %common.ret132

if.entry38:                                       ; preds = %3
  %28 = tail call fastcc ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr nonnull %2, ptr null)
  br label %common.ret132

if.entry42:                                       ; preds = %3
  %29 = tail call fastcc ptr @CodeGen_codegen_new_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret132

if.entry46:                                       ; preds = %3
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %incomming_vals.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %blocks.i)
  %memberidx.i123 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i123, align 8
  %31 = tail call ptr @LLVMAppendBasicBlock(ptr %30, ptr nonnull @248)
  %32 = load ptr, ptr %memberidx.i123, align 8
  %33 = tail call ptr @LLVMAppendBasicBlock(ptr %32, ptr nonnull @249)
  %34 = load ptr, ptr %memberidx.i123, align 8
  %35 = tail call ptr @LLVMAppendBasicBlock(ptr %34, ptr nonnull @250)
  %memberidx3.i = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 4
  %36 = load ptr, ptr %memberidx3.i, align 8
  %37 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %36)
  %38 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %37, ptr %31, ptr %33)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %31)
  %memberidx4.i = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 5
  %39 = load ptr, ptr %memberidx4.i, align 8
  %40 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %39)
  %41 = tail call ptr @LLVMBuildBr(ptr %1, ptr %35)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %33)
  %memberidx5.i = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 6
  %42 = load ptr, ptr %memberidx5.i, align 8
  %43 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %42)
  %44 = tail call ptr @LLVMBuildBr(ptr %1, ptr %35)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %35)
  %45 = load ptr, ptr %memberidx4.i, align 8
  %memberidx7.i = getelementptr inbounds %Expression, ptr %45, i64 0, i32 3
  %46 = load ptr, ptr %memberidx7.i, align 8
  %47 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %46, i1 true)
  %48 = tail call ptr @LLVMBuildPhi(ptr %1, ptr %47, ptr nonnull @251)
  store ptr %40, ptr %incomming_vals.i, align 8
  %49 = getelementptr inbounds ptr, ptr %incomming_vals.i, i64 1
  store ptr %43, ptr %49, align 8
  store ptr %31, ptr %blocks.i, align 8
  %50 = getelementptr inbounds ptr, ptr %blocks.i, i64 1
  store ptr %33, ptr %50, align 8
  call void @LLVMAddIncoming(ptr %48, ptr nonnull %incomming_vals.i, ptr nonnull %blocks.i, i64 2)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %incomming_vals.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %blocks.i)
  br label %common.ret132

if.entry50:                                       ; preds = %3
  %memberidx.i124 = getelementptr inbounds %TypeCastExpression, ptr %2, i64 0, i32 4
  %51 = load ptr, ptr %memberidx.i124, align 8
  %memberidx1.i125 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %52 = load ptr, ptr %memberidx1.i125, align 8
  %53 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %51)
  %54 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %52, i1 true)
  %55 = tail call i1 @LLVMIsConstant(ptr %53)
  %56 = load i64, ptr %52, align 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry50
  br i1 %55, label %true_block.i, label %false_block.i

ifend.i:                                          ; preds = %if.entry50
  %memberidx2.i = getelementptr inbounds %Expression, ptr %51, i64 0, i32 3
  %58 = load ptr, ptr %memberidx2.i, align 8
  %59 = load i64, ptr %58, align 4
  %60 = add i64 %59, -1
  %61 = icmp ult i64 %60, 7
  %62 = and i64 %56, -2
  %63 = icmp eq i64 %62, 8
  %64 = and i1 %63, %61
  br i1 %64, label %if.entry3.i, label %else4.i

true_block.i:                                     ; preds = %if.entry.i
  %65 = tail call i1 @LLVMIsNull(ptr %53)
  %66 = xor i1 %65, true
  %67 = tail call ptr @LLVMInt1Type()
  %..i.i126 = zext i1 %66 to i64
  %68 = tail call ptr @LLVMConstInt(ptr %67, i64 %..i.i126, i1 false)
  br label %common.ret132

false_block.i:                                    ; preds = %if.entry.i
  %69 = tail call ptr @LLVMBuildIsNotNull(ptr %1, ptr %53, ptr nonnull @28)
  br label %common.ret132

if.entry3.i:                                      ; preds = %ifend.i
  br i1 %55, label %true_block6.i, label %false_block7.i

else4.i:                                          ; preds = %ifend.i
  %70 = and i64 %59, -2
  %71 = icmp eq i64 %70, 8
  %72 = add i64 %56, -1
  %73 = icmp ult i64 %72, 7
  %74 = and i1 %73, %71
  br i1 %74, label %if.entry11.i, label %else12.i

true_block6.i:                                    ; preds = %if.entry3.i
  %75 = tail call ptr @LLVMConstSIToFP(ptr %53, ptr %54)
  br label %common.ret132

false_block7.i:                                   ; preds = %if.entry3.i
  %76 = tail call ptr @LLVMBuildSIToFP(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret132

if.entry11.i:                                     ; preds = %else4.i
  br i1 %55, label %true_block14.i, label %false_block15.i

else12.i:                                         ; preds = %else4.i
  %77 = and i1 %73, %61
  br i1 %77, label %if.entry19.i, label %else20.i

true_block14.i:                                   ; preds = %if.entry11.i
  %78 = tail call ptr @LLVMConstFPToSI(ptr %53, ptr %54)
  br label %common.ret132

false_block15.i:                                  ; preds = %if.entry11.i
  %79 = tail call ptr @LLVMBuildFPToSI(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret132

if.entry19.i:                                     ; preds = %else12.i
  %memberidx25.i = getelementptr inbounds %IntType, ptr %52, i64 0, i32 1
  %80 = load i1, ptr %memberidx25.i, align 1
  br i1 %55, label %true_block22.i, label %false_block23.i

else20.i:                                         ; preds = %else12.i
  %81 = and i1 %63, %71
  br i1 %81, label %if.entry29.i, label %ifend31.i

true_block22.i:                                   ; preds = %if.entry19.i
  %82 = tail call ptr @LLVMConstIntCast(ptr %53, ptr %54, i1 %80)
  br label %common.ret132

false_block23.i:                                  ; preds = %if.entry19.i
  %83 = tail call ptr @LLVMBuildIntCast2(ptr %1, ptr %53, ptr %54, i1 %80, ptr nonnull @28)
  br label %common.ret132

if.entry29.i:                                     ; preds = %else20.i
  br i1 %55, label %true_block32.i, label %false_block33.i

ifend31.i:                                        ; preds = %else20.i
  br i1 %55, label %true_block36.i, label %false_block37.i

true_block32.i:                                   ; preds = %if.entry29.i
  %84 = tail call ptr @LLVMConstFPCast(ptr %53, ptr %54)
  br label %common.ret132

false_block33.i:                                  ; preds = %if.entry29.i
  %85 = tail call ptr @LLVMBuildFPCast(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret132

true_block36.i:                                   ; preds = %ifend31.i
  %86 = tail call ptr @LLVMConstBitCast(ptr %53, ptr %54)
  br label %common.ret132

false_block37.i:                                  ; preds = %ifend31.i
  %87 = tail call ptr @LLVMBuildBitCast(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret132

if.entry54:                                       ; preds = %3
  %88 = tail call fastcc ptr @CodeGen_codegen_array_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret132

if.entry58:                                       ; preds = %3
  %89 = tail call fastcc ptr @CodeGen_codegen_intrinsic_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret132
}

define internal fastcc void @Map_string_CGEnumType__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl nuw i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = tail call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  tail call fastcc void @Map_string_CGEnumType____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_CGEnumType____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @Map_string_CGEnumType__resize(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = tail call fastcc i64 @Map_string_CGEnumType__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = urem i64 %10, %11
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %if.entry13, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi ptr [ %13, %while.entry.preheader ], [ %26, %ifend9 ]
  %16 = phi i64 [ %11, %while.entry.preheader ], [ %27, %ifend9 ]
  %17 = phi ptr [ %14, %while.entry.preheader ], [ %30, %ifend9 ]
  %18 = phi i64 [ %12, %while.entry.preheader ], [ %29, %ifend9 ]
  %19 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %20, %21
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx3.i, align 8
  %24 = tail call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.thread35, label %ifend.i.ifend9_crit_edge

ifend.i.ifend9_crit_edge:                         ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre39 = load ptr, ptr %0, align 8
  br label %ifend9

while.end.thread35:                               ; preds = %ifend.i
  %.pre40 = load ptr, ptr %0, align 8
  br label %ifend15

ifend9:                                           ; preds = %ifend.i.ifend9_crit_edge, %while.entry
  %26 = phi ptr [ %.pre39, %ifend.i.ifend9_crit_edge ], [ %15, %while.entry ]
  %27 = phi i64 [ %.pre, %ifend.i.ifend9_crit_edge ], [ %16, %while.entry ]
  %28 = add nuw i64 %18, 1
  %29 = urem i64 %28, %27
  %ptridx12 = getelementptr inbounds ptr, ptr %26, i64 %29
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %if.entry13, label %while.entry

if.entry13:                                       ; preds = %ifend9, %ifend
  %31 = phi ptr [ %13, %ifend ], [ %26, %ifend9 ]
  %32 = phi i64 [ %12, %ifend ], [ %29, %ifend9 ]
  %33 = load i64, ptr %memberidx, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end.thread35, %if.entry13
  %35 = phi ptr [ %.pre40, %while.end.thread35 ], [ %31, %if.entry13 ]
  %36 = phi i64 [ %18, %while.end.thread35 ], [ %32, %if.entry13 ]
  %ptridx19 = getelementptr inbounds ptr, ptr %35, i64 %36
  %37 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %37, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %37, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %37, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_CGEnumType__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = tail call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = zext i8 %13 to i64
  %15 = add nuw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr nonnull %7)
  ret i64 %hash.0.lcssa
}

define internal fastcc ptr @CodeGen_codegen_bin_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %args.i = alloca [2 x ptr], align 8
  %4 = alloca ptr, align 8
  %arg_types.i = alloca [2 x ptr], align 8
  %5 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 5
  %6 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load i64, ptr %8, align 4
  %memberidx4 = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 6
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = load i64, ptr %11, align 4
  %.not = icmp eq i64 %9, %12
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  switch i64 %6, label %ifend15 [
    i64 11, label %if.entry7
    i64 12, label %if.entry10
    i64 19, label %if.entry13
  ]

ifend:                                            ; preds = %3
  %13 = icmp eq i64 %6, 19
  br i1 %13, label %if.entry13, label %ifend15

common.ret:                                       ; preds = %true_block223, %false_block224, %true_block216, %false_block217, %true_block209, %false_block210, %true_block199, %false_block200, %true_block188, %false_block189, %true_block163, %false_block164, %true_block156, %false_block157, %true_block149, %false_block150, %true_block142, %false_block143, %true_block135, %false_block136, %true_block128, %false_block129, %true_block121, %false_block122, %true_block93, %false_block94, %true_block89, %false_block90, %true_block77, %false_block78, %true_block73, %false_block74, %true_block61, %false_block62, %true_block57, %false_block58, %true_block25, %false_block26, %if.entry182, %if.entry179, %if.entry176, %if.entry173, %if.entry170, %ifend112, %if.entry110, %ifend104, %if.entry102, %ifend48, %end41, %CodeGen_codegen_pow_expr.exit, %if.entry22, %CodeGen_get_expr_mem.exit, %if.entry10, %if.entry7
  %common.ret.op = phi ptr [ %15, %if.entry7 ], [ %17, %if.entry10 ], [ %24, %CodeGen_get_expr_mem.exit ], [ %47, %if.entry22 ], [ %68, %CodeGen_codegen_pow_expr.exit ], [ %95, %end41 ], [ null, %ifend48 ], [ %129, %if.entry102 ], [ %130, %ifend104 ], [ %135, %if.entry110 ], [ %136, %ifend112 ], [ %154, %if.entry170 ], [ %155, %if.entry173 ], [ %156, %if.entry176 ], [ %157, %if.entry179 ], [ %158, %if.entry182 ], [ %48, %true_block25 ], [ %49, %false_block26 ], [ %111, %true_block57 ], [ %112, %false_block58 ], [ %113, %true_block61 ], [ %114, %false_block62 ], [ %117, %true_block73 ], [ %118, %false_block74 ], [ %119, %true_block77 ], [ %120, %false_block78 ], [ %123, %true_block89 ], [ %124, %false_block90 ], [ %125, %true_block93 ], [ %126, %false_block94 ], [ %138, %true_block121 ], [ %139, %false_block122 ], [ %141, %true_block128 ], [ %142, %false_block129 ], [ %143, %true_block135 ], [ %144, %false_block136 ], [ %145, %true_block142 ], [ %146, %false_block143 ], [ %147, %true_block149 ], [ %148, %false_block150 ], [ %149, %true_block156 ], [ %150, %false_block157 ], [ %151, %true_block163 ], [ %152, %false_block164 ], [ %162, %true_block188 ], [ %163, %false_block189 ], [ %164, %true_block199 ], [ %165, %false_block200 ], [ %166, %true_block209 ], [ %167, %false_block210 ], [ %168, %true_block216 ], [ %169, %false_block217 ], [ %170, %true_block223 ], [ %171, %false_block224 ]
  ret ptr %common.ret.op

if.entry7:                                        ; preds = %if.entry
  %14 = tail call ptr @LLVMInt1Type()
  %15 = tail call ptr @LLVMConstInt(ptr %14, i64 0, i1 false)
  br label %common.ret

if.entry10:                                       ; preds = %if.entry
  %16 = tail call ptr @LLVMInt1Type()
  %17 = tail call ptr @LLVMConstInt(ptr %16, i64 1, i1 false)
  br label %common.ret

if.entry13:                                       ; preds = %if.entry, %ifend
  %memberidx.i333 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 2
  %18 = load i64, ptr %memberidx.i333, align 4
  switch i64 %18, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry13
  %19 = tail call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr nonnull %7)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry13
  %20 = tail call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr nonnull %7)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry13
  %21 = tail call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr nonnull %7, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry13
  %22 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %7)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %19, %if.entry.i ], [ %20, %if.entry2.i ], [ %21, %if.entry6.i ], [ %22, %ifend8.i ]
  %23 = load ptr, ptr %memberidx4, align 8
  %24 = tail call fastcc ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %common.ret.op.i, ptr %23)
  br label %common.ret

ifend15:                                          ; preds = %if.entry, %ifend
  %25 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %7)
  %26 = load ptr, ptr %memberidx4, align 8
  %27 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %26)
  %28 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %Expression, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx.i, align 4
  %30 = icmp eq i64 %29, 5
  %31 = icmp eq i64 %6, 11
  %32 = icmp eq i64 %6, 12
  %33 = add i64 %6, -11
  %34 = icmp ult i64 %33, 2
  %35 = and i1 %34, %30
  br i1 %35, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend15
  %36 = tail call i1 @LLVMIsConstant(ptr %25)
  br i1 %36, label %if.entry22, label %ifend24

ifend21:                                          ; preds = %ifend15
  %37 = load ptr, ptr %memberidx1, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %38 = load ptr, ptr %memberidx30, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 3
  %39 = load ptr, ptr %memberidx32, align 8
  %40 = load i64, ptr %39, align 4
  %41 = add i64 %40, -1
  %42 = icmp ult i64 %41, 9
  %43 = icmp eq i64 %6, 6
  %44 = and i1 %43, %42
  br i1 %44, label %if.entry33, label %ifend35

if.entry22:                                       ; preds = %if.entry19
  %45 = tail call i1 @LLVMIsNull(ptr %25)
  %46 = tail call ptr @LLVMInt1Type()
  %..i = zext i1 %45 to i64
  %47 = tail call ptr @LLVMConstInt(ptr %46, i64 %..i, i1 false)
  br label %common.ret

ifend24:                                          ; preds = %if.entry19
  br i1 %31, label %true_block25, label %false_block26

true_block25:                                     ; preds = %ifend24
  %48 = tail call ptr @LLVMBuildIsNull(ptr %1, ptr %25, ptr nonnull @28)
  br label %common.ret

false_block26:                                    ; preds = %ifend24
  %49 = tail call ptr @LLVMBuildIsNotNull(ptr %1, ptr %25, ptr nonnull @28)
  br label %common.ret

if.entry33:                                       ; preds = %ifend21
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %args.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %arg_types.i)
  store ptr %25, ptr %args.i, align 8
  %50 = getelementptr inbounds ptr, ptr %args.i, i64 1
  store ptr %27, ptr %50, align 8
  %51 = tail call fastcc ptr @dump_type(ptr nonnull %39, i1 true)
  %52 = load ptr, ptr %51, align 8
  %memberidx.i327 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 5
  %53 = load ptr, ptr %memberidx.i327, align 8
  %54 = tail call ptr %53(ptr nonnull %51)
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @244, ptr %54)
  %56 = load ptr, ptr %4, align 8
  %57 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i328 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i328, align 8
  %memberidx1.i.i329 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i.i329, align 4
  %memberidx2.i.i330 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i.i330, align 4
  call void @free(ptr %54)
  %58 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %39, i1 true)
  store ptr %58, ptr %arg_types.i, align 8
  %59 = getelementptr inbounds ptr, ptr %arg_types.i, i64 1
  store ptr %58, ptr %59, align 8
  %60 = load ptr, ptr %0, align 8
  %61 = call ptr @malloc(i32 16)
  %memberidx1.i.i.i331 = getelementptr inbounds %IntrinsicResult, ptr %61, i64 0, i32 1
  store i64 0, ptr %61, align 8
  %62 = call ptr @LLVMFunctionType(ptr %58, ptr nonnull %arg_types.i, i64 2, i1 false)
  store ptr %62, ptr %memberidx1.i.i.i331, align 8
  %63 = load ptr, ptr %57, align 8
  %memberidx1.i13.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i64 0, i32 5
  %64 = load ptr, ptr %memberidx1.i13.i, align 8
  %65 = call ptr %64(ptr nonnull %57)
  %66 = call ptr @LLVMGetNamedFunction(ptr %60, ptr %65)
  %.not.i.i = icmp eq ptr %66, null
  br i1 %.not.i.i, label %else.i.i, label %CodeGen_codegen_pow_expr.exit

else.i.i:                                         ; preds = %if.entry33
  %67 = call ptr @LLVMAddFunction(ptr %60, ptr %65, ptr %62)
  br label %CodeGen_codegen_pow_expr.exit

CodeGen_codegen_pow_expr.exit:                    ; preds = %if.entry33, %else.i.i
  %storemerge.i.i = phi ptr [ %67, %else.i.i ], [ %66, %if.entry33 ]
  store ptr %storemerge.i.i, ptr %61, align 8
  %68 = call ptr @LLVMBuildCall2(ptr %1, ptr %62, ptr %storemerge.i.i, ptr nonnull %args.i, i64 2, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %args.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %arg_types.i)
  br label %common.ret

ifend35:                                          ; preds = %ifend21
  %69 = load i64, ptr %38, align 4
  %70 = icmp eq i64 %69, 13
  br i1 %70, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %ifend35
  %indices = alloca [1 x ptr], align 8
  %71 = icmp eq i64 %6, 1
  br i1 %71, label %end41, label %false_block40

ifend38:                                          ; preds = %ifend35
  %72 = tail call i1 @LLVMIsConstant(ptr %25)
  %73 = tail call i1 @LLVMIsConstant(ptr %27)
  %74 = and i1 %72, %73
  %75 = load i64, ptr %39, align 4
  %76 = load i64, ptr %38, align 4
  %77 = icmp eq i64 %76, 19
  br i1 %77, label %if.entry.i337, label %is_object.exit

if.entry.i337:                                    ; preds = %ifend38, %if.entry.i337
  %.tr5.i = phi ptr [ %78, %if.entry.i337 ], [ %38, %ifend38 ]
  %memberidx1.i336 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %78 = load ptr, ptr %memberidx1.i336, align 8
  %79 = load i64, ptr %78, align 4
  %80 = icmp eq i64 %79, 19
  br i1 %80, label %if.entry.i337, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i337, %ifend38
  %.lcssa.i = phi i64 [ %76, %ifend38 ], [ %79, %if.entry.i337 ]
  %81 = icmp eq i64 %.lcssa.i, 11
  %82 = icmp eq i64 %75, 19
  br i1 %82, label %if.entry.i340, label %is_object.exit342

if.entry.i340:                                    ; preds = %is_object.exit, %if.entry.i340
  %.tr5.i338 = phi ptr [ %83, %if.entry.i340 ], [ %39, %is_object.exit ]
  %memberidx1.i339 = getelementptr inbounds %GenericType, ptr %.tr5.i338, i64 0, i32 3
  %83 = load ptr, ptr %memberidx1.i339, align 8
  %84 = load i64, ptr %83, align 4
  %85 = icmp eq i64 %84, 19
  br i1 %85, label %if.entry.i340, label %is_object.exit342

is_object.exit342:                                ; preds = %if.entry.i340, %is_object.exit
  %.lcssa.i341 = phi i64 [ %75, %is_object.exit ], [ %84, %if.entry.i340 ]
  %86 = icmp eq i64 %.lcssa.i341, 11
  %87 = and i1 %81, %86
  %88 = and i1 %34, %87
  %89 = freeze i1 %88
  br i1 %89, label %if.entry46, label %switch.early.test

switch.early.test:                                ; preds = %is_object.exit342
  switch i64 %75, label %else47 [
    i64 12, label %if.entry46
    i64 7, label %if.entry46
    i64 6, label %if.entry46
    i64 5, label %if.entry46
    i64 4, label %if.entry46
    i64 3, label %if.entry46
    i64 2, label %if.entry46
    i64 1, label %if.entry46
  ]

false_block40:                                    ; preds = %if.entry36
  %90 = tail call i1 @LLVMIsConstant(ptr %27)
  br i1 %90, label %true_block.i, label %false_block.i

true_block.i:                                     ; preds = %false_block40
  %91 = tail call ptr @LLVMConstNeg(ptr %27)
  br label %end41

false_block.i:                                    ; preds = %false_block40
  %92 = tail call ptr @LLVMBuildNeg(ptr %1, ptr %27, ptr nonnull @28)
  br label %end41

end41:                                            ; preds = %if.entry36, %false_block.i, %true_block.i
  %ternary42 = phi ptr [ %91, %true_block.i ], [ %92, %false_block.i ], [ %27, %if.entry36 ]
  store ptr %ternary42, ptr %indices, align 8
  %memberidx43 = getelementptr inbounds %PointerType, ptr %38, i64 0, i32 1
  %93 = load ptr, ptr %memberidx43, align 8
  %94 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %93, i1 true)
  %95 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %94, ptr %25, ptr nonnull %indices, i64 1, ptr nonnull @28)
  br label %common.ret

if.entry46:                                       ; preds = %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %is_object.exit342
  switch i64 %6, label %else106 [
    i64 1, label %if.entry49
    i64 2, label %if.entry65
    i64 3, label %if.entry81
    i64 4, label %if.entry97
    i64 5, label %if.entry105
  ]

else47:                                           ; preds = %switch.early.test
  %96 = and i64 %75, -2
  %97 = icmp eq i64 %96, 8
  br i1 %97, label %if.entry167, label %else168

ifend48:                                          ; preds = %else126, %else214, %else168, %else186
  %98 = tail call ptr @malloc(i32 33)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %98, ptr noundef nonnull align 8 dereferenceable(33) @245, i64 33, i1 false)
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %100 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %101 = tail call ptr %100(ptr nonnull %99)
  %102 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @219, ptr %101)
  %103 = load ptr, ptr %5, align 8
  %104 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %104, align 8
  %memberidx.i.i324 = getelementptr inbounds %string, ptr %104, i64 0, i32 1
  store ptr %103, ptr %memberidx.i.i324, align 8
  %memberidx1.i.i325 = getelementptr inbounds %string, ptr %104, i64 0, i32 2
  store i64 %102, ptr %memberidx1.i.i325, align 4
  %memberidx2.i.i326 = getelementptr inbounds %string, ptr %104, i64 0, i32 3
  store i64 %102, ptr %memberidx2.i.i326, align 4
  call void @free(ptr %101)
  %105 = load ptr, ptr %104, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %105, i64 0, i32 3
  %106 = load ptr, ptr %memberidx.i.i.i, align 8
  %107 = call ptr %106(ptr nonnull %104)
  %108 = load i64, ptr %memberidx1.i.i325, align 4
  call void @write(i64 1, ptr %107, i64 %108)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  br label %common.ret

if.entry49:                                       ; preds = %if.entry46
  %memberidx52 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %109 = load ptr, ptr %memberidx52, align 8
  %memberidx53 = getelementptr inbounds %IntType, ptr %109, i64 0, i32 1
  %110 = load i1, ptr %memberidx53, align 1
  br i1 %110, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %if.entry49
  br i1 %74, label %true_block57, label %false_block58

ifend56:                                          ; preds = %if.entry49
  br i1 %74, label %true_block61, label %false_block62

true_block57:                                     ; preds = %if.entry54
  %111 = tail call ptr @LLVMConstNSWAdd(ptr %25, ptr %27)
  br label %common.ret

false_block58:                                    ; preds = %if.entry54
  %112 = tail call ptr @LLVMBuildNSWAdd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

true_block61:                                     ; preds = %ifend56
  %113 = tail call ptr @LLVMConstNUWAdd(ptr %25, ptr %27)
  br label %common.ret

false_block62:                                    ; preds = %ifend56
  %114 = tail call ptr @LLVMBuildNUWAdd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry65:                                       ; preds = %if.entry46
  %memberidx68 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %115 = load ptr, ptr %memberidx68, align 8
  %memberidx69 = getelementptr inbounds %IntType, ptr %115, i64 0, i32 1
  %116 = load i1, ptr %memberidx69, align 1
  br i1 %116, label %if.entry70, label %ifend72

if.entry70:                                       ; preds = %if.entry65
  br i1 %74, label %true_block73, label %false_block74

ifend72:                                          ; preds = %if.entry65
  br i1 %74, label %true_block77, label %false_block78

true_block73:                                     ; preds = %if.entry70
  %117 = tail call ptr @LLVMConstNSWSub(ptr %25, ptr %27)
  br label %common.ret

false_block74:                                    ; preds = %if.entry70
  %118 = tail call ptr @LLVMBuildNSWSub(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

true_block77:                                     ; preds = %ifend72
  %119 = tail call ptr @LLVMConstNUWSub(ptr %25, ptr %27)
  br label %common.ret

false_block78:                                    ; preds = %ifend72
  %120 = tail call ptr @LLVMBuildNUWSub(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry81:                                       ; preds = %if.entry46
  %memberidx84 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %121 = load ptr, ptr %memberidx84, align 8
  %memberidx85 = getelementptr inbounds %IntType, ptr %121, i64 0, i32 1
  %122 = load i1, ptr %memberidx85, align 1
  br i1 %122, label %if.entry86, label %ifend88

if.entry86:                                       ; preds = %if.entry81
  br i1 %74, label %true_block89, label %false_block90

ifend88:                                          ; preds = %if.entry81
  br i1 %74, label %true_block93, label %false_block94

true_block89:                                     ; preds = %if.entry86
  %123 = tail call ptr @LLVMConstNSWMul(ptr %25, ptr %27)
  br label %common.ret

false_block90:                                    ; preds = %if.entry86
  %124 = tail call ptr @LLVMBuildNSWMul(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

true_block93:                                     ; preds = %ifend88
  %125 = tail call ptr @LLVMConstNUWMul(ptr %25, ptr %27)
  br label %common.ret

false_block94:                                    ; preds = %ifend88
  %126 = tail call ptr @LLVMBuildNUWMul(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry97:                                       ; preds = %if.entry46
  %memberidx100 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %127 = load ptr, ptr %memberidx100, align 8
  %memberidx101 = getelementptr inbounds %IntType, ptr %127, i64 0, i32 1
  %128 = load i1, ptr %memberidx101, align 1
  br i1 %128, label %if.entry102, label %ifend104

if.entry102:                                      ; preds = %if.entry97
  %129 = tail call ptr @LLVMBuildSDiv(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

ifend104:                                         ; preds = %if.entry97
  %130 = tail call ptr @LLVMBuildUDiv(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry105:                                      ; preds = %if.entry46
  %memberidx108 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %131 = load ptr, ptr %memberidx108, align 8
  %memberidx109 = getelementptr inbounds %IntType, ptr %131, i64 0, i32 1
  %132 = load i1, ptr %memberidx109, align 1
  br i1 %132, label %if.entry110, label %ifend112

else106:                                          ; preds = %if.entry46
  %133 = add i64 %6, -7
  %134 = icmp ult i64 %133, 4
  br i1 %134, label %if.entry113, label %else114

if.entry110:                                      ; preds = %if.entry105
  %135 = tail call ptr @LLVMBuildSRem(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

ifend112:                                         ; preds = %if.entry105
  %136 = tail call ptr @LLVMBuildURem(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry113:                                      ; preds = %else106
  %137 = add nuw nsw i64 %6, 31
  br i1 %74, label %true_block121, label %false_block122

else114:                                          ; preds = %else106
  br i1 %34, label %if.entry125, label %else126

true_block121:                                    ; preds = %if.entry113
  %138 = tail call ptr @LLVMConstICmp(i64 %137, ptr %25, ptr %27)
  br label %common.ret

false_block122:                                   ; preds = %if.entry113
  %139 = tail call ptr @LLVMBuildICmp(ptr %1, i64 %137, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry125:                                      ; preds = %else114
  %140 = add nuw nsw i64 %6, 21
  br i1 %74, label %true_block128, label %false_block129

else126:                                          ; preds = %else114
  switch i64 %6, label %ifend48 [
    i64 13, label %if.entry132
    i64 14, label %if.entry139
    i64 15, label %if.entry146
    i64 16, label %if.entry153
    i64 17, label %if.entry160
  ]

true_block128:                                    ; preds = %if.entry125
  %141 = tail call ptr @LLVMConstICmp(i64 %140, ptr %25, ptr %27)
  br label %common.ret

false_block129:                                   ; preds = %if.entry125
  %142 = tail call ptr @LLVMBuildICmp(ptr %1, i64 %140, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry132:                                      ; preds = %else126
  br i1 %74, label %true_block135, label %false_block136

true_block135:                                    ; preds = %if.entry132
  %143 = tail call ptr @LLVMConstShl(ptr %25, ptr %27)
  br label %common.ret

false_block136:                                   ; preds = %if.entry132
  %144 = tail call ptr @LLVMBuildShl(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry139:                                      ; preds = %else126
  br i1 %74, label %true_block142, label %false_block143

true_block142:                                    ; preds = %if.entry139
  %145 = tail call ptr @LLVMConstLShr(ptr %25, ptr %27)
  br label %common.ret

false_block143:                                   ; preds = %if.entry139
  %146 = tail call ptr @LLVMBuildLShr(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry146:                                      ; preds = %else126
  br i1 %74, label %true_block149, label %false_block150

true_block149:                                    ; preds = %if.entry146
  %147 = tail call ptr @LLVMConstOr(ptr %25, ptr %27)
  br label %common.ret

false_block150:                                   ; preds = %if.entry146
  %148 = tail call ptr @LLVMBuildOr(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry153:                                      ; preds = %else126
  br i1 %74, label %true_block156, label %false_block157

true_block156:                                    ; preds = %if.entry153
  %149 = tail call ptr @LLVMConstAnd(ptr %25, ptr %27)
  br label %common.ret

false_block157:                                   ; preds = %if.entry153
  %150 = tail call ptr @LLVMBuildAnd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry160:                                      ; preds = %else126
  br i1 %74, label %true_block163, label %false_block164

true_block163:                                    ; preds = %if.entry160
  %151 = tail call ptr @LLVMConstXor(ptr %25, ptr %27)
  br label %common.ret

false_block164:                                   ; preds = %if.entry160
  %152 = tail call ptr @LLVMBuildXor(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry167:                                      ; preds = %else47
  switch i64 %6, label %else183 [
    i64 1, label %if.entry170
    i64 2, label %if.entry173
    i64 3, label %if.entry176
    i64 4, label %if.entry179
    i64 5, label %if.entry182
  ]

else168:                                          ; preds = %else47
  %153 = icmp eq i64 %75, 0
  br i1 %153, label %if.entry203, label %ifend48

if.entry170:                                      ; preds = %if.entry167
  %154 = tail call ptr @LLVMBuildFAdd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry173:                                      ; preds = %if.entry167
  %155 = tail call ptr @LLVMBuildFSub(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry176:                                      ; preds = %if.entry167
  %156 = tail call ptr @LLVMBuildFMul(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry179:                                      ; preds = %if.entry167
  %157 = tail call ptr @LLVMBuildFDiv(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry182:                                      ; preds = %if.entry167
  %158 = tail call ptr @LLVMBuildFRem(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

else183:                                          ; preds = %if.entry167
  %159 = add i64 %6, -7
  %160 = icmp ult i64 %159, 4
  br i1 %160, label %if.entry185, label %else186

if.entry185:                                      ; preds = %else183
  %161 = add nsw i64 %6, -5
  br i1 %74, label %true_block188, label %false_block189

else186:                                          ; preds = %else183
  br i1 %34, label %if.entry192, label %ifend48

true_block188:                                    ; preds = %if.entry185
  %162 = tail call ptr @LLVMConstFCmp(i64 %161, ptr %25, ptr %27)
  br label %common.ret

false_block189:                                   ; preds = %if.entry185
  %163 = tail call ptr @LLVMBuildFCmp(ptr %1, i64 %161, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry192:                                      ; preds = %else186
  %.227 = select i1 %32, i64 6, i64 1
  br i1 %74, label %true_block199, label %false_block200

true_block199:                                    ; preds = %if.entry192
  %164 = tail call ptr @LLVMConstFCmp(i64 %.227, ptr %25, ptr %27)
  br label %common.ret

false_block200:                                   ; preds = %if.entry192
  %165 = tail call ptr @LLVMBuildFCmp(ptr %1, i64 %.227, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry203:                                      ; preds = %else168
  switch i64 %6, label %else214 [
    i64 16, label %if.entry206
    i64 11, label %if.entry206
    i64 15, label %if.entry213
  ]

if.entry206:                                      ; preds = %if.entry203, %if.entry203
  br i1 %74, label %true_block209, label %false_block210

true_block209:                                    ; preds = %if.entry206
  %166 = tail call ptr @LLVMConstAnd(ptr %25, ptr %27)
  br label %common.ret

false_block210:                                   ; preds = %if.entry206
  %167 = tail call ptr @LLVMBuildAnd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry213:                                      ; preds = %if.entry203
  br i1 %74, label %true_block216, label %false_block217

else214:                                          ; preds = %if.entry203
  br i1 %32, label %if.entry220, label %ifend48

true_block216:                                    ; preds = %if.entry213
  %168 = tail call ptr @LLVMConstOr(ptr %25, ptr %27)
  br label %common.ret

false_block217:                                   ; preds = %if.entry213
  %169 = tail call ptr @LLVMBuildOr(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry220:                                      ; preds = %else214
  br i1 %74, label %true_block223, label %false_block224

true_block223:                                    ; preds = %if.entry220
  %170 = tail call ptr @LLVMConstXor(ptr %25, ptr %27)
  br label %common.ret

false_block224:                                   ; preds = %if.entry220
  %171 = tail call ptr @LLVMBuildXor(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_call_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %5, align 8
  %memberidx.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %CallExpression, ptr %2, i64 0, i32 4
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 12
  br i1 %9, label %if.entry, label %if.entry14

if.entry:                                         ; preds = %3
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %10 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %MemberExpression, ptr %7, i64 0, i32 5
  %11 = load ptr, ptr %memberidx6, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %11, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %10, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i.i, align 8
  %14 = load i64, ptr %12, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %16, i64 0, i32 4
  %17 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %12, i64 0, i32 2
  %18 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i57 = getelementptr inbounds %Class, ptr %20, i64 0, i32 5
  %21 = load ptr, ptr %memberidx.i57, align 8
  %memberidx1.i58 = getelementptr inbounds %PropId, ptr %11, i64 0, i32 2
  %22 = load i64, ptr %memberidx1.i58, align 4
  %memberidx.i3.i = getelementptr inbounds %Array_ClassMethod_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i3.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx7 = getelementptr inbounds %ClassMethod, ptr %24, i64 0, i32 1
  %25 = load i1, ptr %memberidx7, align 1
  br i1 %25, label %ifend21, label %if.entry8

ifend:                                            ; preds = %ifend.i, %if.entry8
  %memberidx13 = getelementptr inbounds %MemberExpression, ptr %7, i64 0, i32 4
  %26 = load ptr, ptr %memberidx13, align 8
  %27 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr %26)
  %28 = tail call fastcc ptr @CodeGen_codegen_member_exp(ptr nonnull %0, ptr %1, ptr nonnull %7, ptr %27)
  store i64 1, ptr %memberidx.i, align 4
  store ptr %27, ptr %6, align 8
  %29 = icmp eq ptr %28, null
  br i1 %29, label %ifend.if.entry14_crit_edge, label %for.entry

ifend.if.entry14_crit_edge:                       ; preds = %ifend
  %.pre = load ptr, ptr %memberidx2, align 8
  %memberidx18.phi.trans.insert = getelementptr inbounds %Expression, ptr %.pre, i64 0, i32 2
  %.pre118 = load i64, ptr %memberidx18.phi.trans.insert, align 4
  br label %if.entry14

if.entry8:                                        ; preds = %if.entry
  %30 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr nonnull %0, ptr nonnull %12)
  %.not.i102 = icmp eq ptr %30, null
  br i1 %.not.i102, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %if.entry8
  %31 = load ptr, ptr %memberidx5, align 8
  %memberidx.i.i106 = getelementptr inbounds %Program, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i.i106, align 8
  %33 = load i64, ptr %12, align 4
  %memberidx.i.i.i107 = getelementptr inbounds %Array_Module_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i.i107, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i108 = getelementptr inbounds %Module, ptr %35, i64 0, i32 4
  %36 = load ptr, ptr %memberidx2.i.i108, align 8
  %37 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i6.i.i, align 8
  tail call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %39)
  tail call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %39)
  %40 = load ptr, ptr %39, align 8
  %41 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr nonnull %0, ptr %40)
  br label %ifend

if.entry14:                                       ; preds = %ifend.if.entry14_crit_edge, %3
  %42 = phi i64 [ 1, %ifend.if.entry14_crit_edge ], [ 0, %3 ]
  %43 = phi i64 [ %.pre118, %ifend.if.entry14_crit_edge ], [ %8, %3 ]
  %44 = phi ptr [ %.pre, %ifend.if.entry14_crit_edge ], [ %7, %3 ]
  %45 = icmp eq i64 %43, 7
  br i1 %45, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %if.entry14
  %memberidx23 = getelementptr inbounds %VarAccessExpression, ptr %44, i64 0, i32 4
  %46 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 10
  %47 = load ptr, ptr %memberidx24, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i62 = getelementptr inbounds %VarId, ptr %46, i64 0, i32 1
  %48 = load i64, ptr %memberidx.i62, align 4
  %49 = load i64, ptr %46, align 4
  %memberidx2.i63 = getelementptr inbounds %VarId, ptr %46, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i63, align 4
  %51 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @224, i64 %48, i64 %49, i64 %50)
  %52 = load ptr, ptr %4, align 8
  %53 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %53, align 8
  %memberidx.i.i64 = getelementptr inbounds %string, ptr %53, i64 0, i32 1
  store ptr %52, ptr %memberidx.i.i64, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %53, i64 0, i32 2
  store i64 %51, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i65 = getelementptr inbounds %string, ptr %53, i64 0, i32 3
  store i64 %51, ptr %memberidx2.i.i65, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %54 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %53)
  %memberidx.i66 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %47, i64 0, i32 1
  %55 = load i64, ptr %memberidx.i66, align 4
  %56 = urem i64 %54, %55
  %57 = load ptr, ptr %47, align 8
  %ptridx.i67 = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i67, align 8
  %.not.i68 = icmp eq ptr %58, null
  br i1 %.not.i68, label %ifend21, label %while.entry.i

while.entry.i:                                    ; preds = %if.entry19, %else.i
  %59 = phi ptr [ %69, %else.i ], [ %57, %if.entry19 ]
  %60 = phi i64 [ %70, %else.i ], [ %55, %if.entry19 ]
  %61 = phi ptr [ %73, %else.i ], [ %58, %if.entry19 ]
  %hash.0.i = phi i64 [ %72, %else.i ], [ %56, %if.entry19 ]
  %62 = load ptr, ptr %61, align 8
  %memberidx.i.i69 = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx.i.i69, align 4
  %64 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %63, %64
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i71 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i.i71, align 8
  %66 = load ptr, ptr %memberidx.i.i64, align 8
  %67 = call i64 @memcmp(ptr %65, ptr %66, i64 %63)
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %while.end.i, label %ifend.i.i.else.i_crit_edge

ifend.i.i.else.i_crit_edge:                       ; preds = %ifend.i.i
  %.pre119 = load i64, ptr %memberidx.i66, align 4
  %.pre120 = load ptr, ptr %47, align 8
  br label %else.i

while.end.i:                                      ; preds = %ifend.i.i
  %.pre121.pre = load ptr, ptr %47, align 8
  %ptridx9.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre121.pre, i64 %hash.0.i
  %.pre122.pre = load ptr, ptr %ptridx9.i.phi.trans.insert.phi.trans.insert, align 8
  %.not29.i = icmp eq ptr %.pre122.pre, null
  br i1 %.not29.i, label %ifend21, label %Map_string_LLVMValueRef____getitem__.exit

else.i:                                           ; preds = %ifend.i.i.else.i_crit_edge, %while.entry.i
  %69 = phi ptr [ %.pre120, %ifend.i.i.else.i_crit_edge ], [ %59, %while.entry.i ]
  %70 = phi i64 [ %.pre119, %ifend.i.i.else.i_crit_edge ], [ %60, %while.entry.i ]
  %71 = add nuw i64 %hash.0.i, 1
  %72 = urem i64 %71, %70
  %ptridx7.i = getelementptr inbounds ptr, ptr %69, i64 %72
  %73 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %73, null
  br i1 %.not30.i, label %ifend21, label %while.entry.i

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %.pre122.pre, i64 0, i32 1
  %74 = load ptr, ptr %memberidx15.i, align 8
  %.not = icmp eq ptr %74, null
  br i1 %.not, label %ifend21, label %Array_LLVMValueRef____sl__.exit80

ifend21:                                          ; preds = %else.i, %if.entry19, %if.entry, %while.end.i, %Array_LLVMValueRef____sl__.exit80, %Map_string_LLVMValueRef____getitem__.exit, %if.entry14
  %75 = phi i64 [ %42, %while.end.i ], [ %78, %Array_LLVMValueRef____sl__.exit80 ], [ %42, %Map_string_LLVMValueRef____getitem__.exit ], [ %42, %if.entry14 ], [ 0, %if.entry ], [ %42, %if.entry19 ], [ %42, %else.i ]
  %76 = load ptr, ptr %memberidx2, align 8
  %77 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %76)
  br label %for.entry

Array_LLVMValueRef____sl__.exit80:                ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %78 = add nuw nsw i64 %42, 1
  store i64 %78, ptr %memberidx.i, align 4
  %ptridx.i79 = getelementptr inbounds ptr, ptr %6, i64 %42
  store ptr %74, ptr %ptridx.i79, align 8
  br label %ifend21

for.entry:                                        ; preds = %ifend21, %ifend
  %79 = phi i64 [ %75, %ifend21 ], [ 1, %ifend ]
  %func.1 = phi ptr [ %77, %ifend21 ], [ %28, %ifend ]
  %memberidx29 = getelementptr inbounds %CallExpression, ptr %2, i64 0, i32 5
  %80 = load ptr, ptr %memberidx29, align 8
  %81 = call ptr @malloc(i32 25)
  %memberidx.i81 = getelementptr inbounds %Array_Expression_, ptr %80, i64 0, i32 1
  %82 = load ptr, ptr %memberidx.i81, align 8
  %memberidx1.i82 = getelementptr inbounds %Array_Expression_, ptr %80, i64 0, i32 2
  %83 = load i64, ptr %memberidx1.i82, align 4
  store i1 false, ptr %81, align 1
  %memberidx1.i.i83 = getelementptr inbounds %ArrayIterator_Expression_, ptr %81, i64 0, i32 1
  %memberidx2.i.i84 = getelementptr inbounds %ArrayIterator_Expression_, ptr %81, i64 0, i32 3
  store ptr %82, ptr %memberidx2.i.i84, align 8
  %memberidx3.i.i85 = getelementptr inbounds %ArrayIterator_Expression_, ptr %81, i64 0, i32 2
  store i64 %83, ptr %memberidx3.i.i85, align 4
  store i64 1, ptr %memberidx1.i.i83, align 4
  %84 = icmp slt i64 %83, 1
  br i1 %84, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %Array_LLVMValueRef____sl__.exit97
  %85 = phi ptr [ %92, %Array_LLVMValueRef____sl__.exit97 ], [ %6, %for.entry ]
  %86 = phi i64 [ %93, %Array_LLVMValueRef____sl__.exit97 ], [ 8, %for.entry ]
  %87 = phi i64 [ %94, %Array_LLVMValueRef____sl__.exit97 ], [ %79, %for.entry ]
  %storemerge117.in = phi ptr [ %ptridx.i100, %Array_LLVMValueRef____sl__.exit97 ], [ %82, %for.entry ]
  %storemerge117 = load ptr, ptr %storemerge117.in, align 8
  %88 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %storemerge117)
  %.not.i91 = icmp slt i64 %87, %86
  br i1 %.not.i91, label %Array_LLVMValueRef____sl__.exit97, label %if.entry.i94

if.entry.i94:                                     ; preds = %for.body
  %89 = shl nuw i64 %86, 1
  store i64 %89, ptr %memberidx1.i, align 4
  %90 = shl i64 %86, 4
  %91 = call ptr @realloc(ptr %85, i64 %90)
  store ptr %91, ptr %memberidx2.i, align 8
  br label %Array_LLVMValueRef____sl__.exit97

Array_LLVMValueRef____sl__.exit97:                ; preds = %for.body, %if.entry.i94
  %92 = phi ptr [ %85, %for.body ], [ %91, %if.entry.i94 ]
  %93 = phi i64 [ %86, %for.body ], [ %89, %if.entry.i94 ]
  %94 = add nsw i64 %87, 1
  store i64 %94, ptr %memberidx.i, align 4
  %ptridx.i96 = getelementptr inbounds ptr, ptr %92, i64 %87
  store ptr %88, ptr %ptridx.i96, align 8
  %95 = load i64, ptr %memberidx1.i.i83, align 4
  %96 = add nsw i64 %95, 1
  store i64 %96, ptr %memberidx1.i.i83, align 4
  %97 = load ptr, ptr %memberidx2.i.i84, align 8
  %ptridx.i100 = getelementptr inbounds ptr, ptr %97, i64 %95
  %98 = load i64, ptr %memberidx3.i.i85, align 4
  %.not125 = icmp slt i64 %95, %98
  br i1 %.not125, label %for.body, label %for.end

for.end:                                          ; preds = %Array_LLVMValueRef____sl__.exit97, %for.entry
  %99 = phi i64 [ %79, %for.entry ], [ %94, %Array_LLVMValueRef____sl__.exit97 ]
  %100 = phi ptr [ %6, %for.entry ], [ %92, %Array_LLVMValueRef____sl__.exit97 ]
  tail call void @free(ptr nonnull %81)
  %101 = load ptr, ptr %memberidx2, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %101, i64 0, i32 3
  %102 = load ptr, ptr %memberidx32, align 8
  %103 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %102, i1 false)
  %104 = call ptr @LLVMBuildCall2(ptr %1, ptr %103, ptr %func.1, ptr %100, i64 %99, ptr nonnull @28)
  ret ptr %104
}

define internal fastcc ptr @CodeGen_codegen_unary_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %UnaryExpression, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpression, ptr %2, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %5)
  switch i64 %4, label %ifend29 [
    i64 1, label %if.entry
    i64 6, label %if.entry7
    i64 7, label %if.entry27
  ]

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 19
  br i1 %9, label %if.entry.i116, label %is_object.exit

if.entry.i116:                                    ; preds = %if.entry, %if.entry.i116
  %.tr5.i = phi ptr [ %10, %if.entry.i116 ], [ %7, %if.entry ]
  %memberidx1.i = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %10 = load ptr, ptr %memberidx1.i, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, 19
  br i1 %12, label %if.entry.i116, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i116, %if.entry
  %.lcssa.i = phi i64 [ %8, %if.entry ], [ %11, %if.entry.i116 ]
  %13 = icmp eq i64 %.lcssa.i, 11
  br i1 %13, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %is_object.exit
  tail call fastcc void @CodeGen_codegen_del_call(ptr %0, ptr %1, ptr %6, ptr nonnull %7)
  br label %ifend5

common.ret:                                       ; preds = %else12, %CodeGen_get_expr_mem.exit, %ifend29, %true_block30, %false_block31, %true_block19, %false_block20, %true_block, %false_block, %ifend48, %if.entry24, %ifend5
  %common.ret.op = phi ptr [ null, %ifend5 ], [ %27, %if.entry24 ], [ %ternary64, %ifend48 ], [ %23, %true_block ], [ %24, %false_block ], [ %25, %true_block19 ], [ %26, %false_block20 ], [ %30, %true_block30 ], [ %31, %false_block31 ], [ %6, %ifend29 ], [ %common.ret.op.i, %CodeGen_get_expr_mem.exit ], [ %6, %else12 ]
  ret ptr %common.ret.op

ifend5:                                           ; preds = %is_object.exit, %if.entry3
  %14 = tail call ptr @LLVMBuildFree(ptr %1, ptr %6)
  br label %common.ret

if.entry7:                                        ; preds = %3
  %memberidx10 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %15 = load ptr, ptr %memberidx10, align 8
  %16 = load i64, ptr %15, align 4
  %17 = add i64 %16, -1
  %18 = icmp ult i64 %17, 7
  br i1 %18, label %if.entry11, label %else12

if.entry11:                                       ; preds = %if.entry7
  %memberidx15 = getelementptr inbounds %IntType, ptr %15, i64 0, i32 1
  %19 = load i1, ptr %memberidx15, align 1
  %20 = tail call i1 @LLVMIsConstant(ptr %6)
  br i1 %19, label %if.entry16, label %ifend18

else12:                                           ; preds = %if.entry7
  %21 = and i64 %16, -2
  %22 = icmp eq i64 %21, 8
  br i1 %22, label %if.entry24, label %common.ret

if.entry16:                                       ; preds = %if.entry11
  br i1 %20, label %true_block, label %false_block

ifend18:                                          ; preds = %if.entry11
  br i1 %20, label %true_block19, label %false_block20

true_block:                                       ; preds = %if.entry16
  %23 = tail call ptr @LLVMConstNSWNeg(ptr %6)
  br label %common.ret

false_block:                                      ; preds = %if.entry16
  %24 = tail call ptr @LLVMBuildNSWNeg(ptr %1, ptr %6, ptr nonnull @28)
  br label %common.ret

true_block19:                                     ; preds = %ifend18
  %25 = tail call ptr @LLVMConstNUWNeg(ptr %6)
  br label %common.ret

false_block20:                                    ; preds = %ifend18
  %26 = tail call ptr @LLVMBuildNUWNeg(ptr %1, ptr %6, ptr nonnull @28)
  br label %common.ret

if.entry24:                                       ; preds = %else12
  %27 = tail call ptr @LLVMBuildFNeg(ptr %1, ptr %6, ptr nonnull @28)
  br label %common.ret

if.entry27:                                       ; preds = %3
  %28 = tail call i1 @LLVMIsConstant(ptr %6)
  br i1 %28, label %true_block30, label %false_block31

ifend29:                                          ; preds = %3
  %29 = icmp eq i64 %4, 8
  switch i64 %4, label %common.ret [
    i64 8, label %if.entry34
    i64 5, label %if.entry34
    i64 4, label %if.entry34
    i64 3, label %if.entry34
    i64 2, label %if.entry34
  ]

true_block30:                                     ; preds = %if.entry27
  %30 = tail call ptr @LLVMConstNot(ptr %6)
  br label %common.ret

false_block31:                                    ; preds = %if.entry27
  %31 = tail call ptr @LLVMBuildNot(ptr %1, ptr %6, ptr nonnull @28)
  br label %common.ret

if.entry34:                                       ; preds = %ifend29, %ifend29, %ifend29, %ifend29, %ifend29
  %memberidx.i = getelementptr inbounds %Expression, ptr %5, i64 0, i32 2
  %32 = load i64, ptr %memberidx.i, align 4
  switch i64 %32, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry34
  %33 = tail call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr nonnull %5)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry34
  %34 = tail call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr nonnull %5)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry34
  %35 = tail call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr nonnull %5, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry34
  %36 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %5)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %33, %if.entry.i ], [ %34, %if.entry2.i ], [ %35, %if.entry6.i ], [ %36, %ifend8.i ]
  br i1 %29, label %common.ret, label %ifend39

ifend39:                                          ; preds = %CodeGen_get_expr_mem.exit
  %memberidx40 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %37 = load ptr, ptr %memberidx40, align 8
  %38 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %37, i1 true)
  %39 = icmp eq i64 %4, 2
  %40 = icmp eq i64 %4, 4
  %41 = or i1 %39, %40
  %. = select i1 %41, i64 1, i64 -1
  %42 = load ptr, ptr %memberidx40, align 8
  %43 = load i64, ptr %42, align 4
  %44 = icmp eq i64 %43, 13
  br i1 %44, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend39
  %memberidx50 = getelementptr inbounds %PointerType, ptr %42, i64 0, i32 1
  %45 = load ptr, ptr %memberidx50, align 8
  %46 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %45, i1 true)
  %indices = alloca [1 x ptr], align 8
  %47 = tail call ptr @LLVMInt32Type()
  %48 = tail call ptr @LLVMConstInt(ptr %47, i64 %., i1 true)
  store ptr %48, ptr %indices, align 8
  %49 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %46, ptr %6, ptr nonnull %indices, i64 1, ptr nonnull @246)
  br label %ifend48

else47:                                           ; preds = %ifend39
  %50 = add i64 %43, -1
  %51 = icmp ult i64 %50, 9
  br i1 %51, label %if.entry53, label %ifend48

ifend48:                                          ; preds = %end58, %else47, %if.entry46
  %52 = phi ptr [ %59, %end58 ], [ null, %else47 ], [ %49, %if.entry46 ]
  %53 = call ptr @LLVMBuildStore(ptr %1, ptr %52, ptr %common.ret.op.i)
  %54 = icmp ugt i64 %4, 2
  %ternary64 = select i1 %54, ptr %6, ptr %52
  br label %common.ret

if.entry53:                                       ; preds = %else47
  %55 = icmp ult i64 %50, 7
  br i1 %55, label %true_block56, label %false_block57

true_block56:                                     ; preds = %if.entry53
  %56 = tail call ptr @LLVMConstInt(ptr %38, i64 %., i1 false)
  br label %end58

false_block57:                                    ; preds = %if.entry53
  %57 = sitofp i64 %. to double
  %58 = tail call ptr @LLVMConstReal(ptr %38, double %57)
  br label %end58

end58:                                            ; preds = %false_block57, %true_block56
  %ternary60 = phi ptr [ %56, %true_block56 ], [ %58, %false_block57 ]
  %59 = tail call ptr @LLVMBuildNSWAdd(ptr %1, ptr %6, ptr %ternary60, ptr nonnull @28)
  br label %ifend48
}

define internal fastcc ptr @CodeGen_codegen_new_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 6
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 13
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %9 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %5, i1 true)
  %memberidx2 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 4
  %10 = load ptr, ptr %memberidx2, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %10, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %12)
  %memberidx3 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 5
  %14 = load i1, ptr %memberidx3, align 1
  br i1 %14, label %if.entry4, label %else5

else:                                             ; preds = %3
  %15 = load i64, ptr %5, align 4
  %16 = icmp eq i64 %15, 19
  br i1 %16, label %if.entry.i57, label %is_object.exit

if.entry.i57:                                     ; preds = %else, %if.entry.i57
  %.tr5.i = phi ptr [ %17, %if.entry.i57 ], [ %5, %else ]
  %memberidx1.i56 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %17 = load ptr, ptr %memberidx1.i56, align 8
  %18 = load i64, ptr %17, align 4
  %19 = icmp eq i64 %18, 19
  br i1 %19, label %if.entry.i57, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i57, %else
  %.lcssa.i = phi i64 [ %15, %else ], [ %18, %if.entry.i57 ]
  %20 = icmp eq i64 %.lcssa.i, 11
  br i1 %20, label %if.entry7, label %ifend

ifend:                                            ; preds = %else.i, %if.entry.i, %is_object.exit, %if.entry4, %else5
  %ptr.0 = phi ptr [ %21, %if.entry4 ], [ %22, %else5 ], [ null, %is_object.exit ], [ %ptr.1, %if.entry.i ], [ %ptr.1, %else.i ]
  ret ptr %ptr.0

if.entry4:                                        ; preds = %if.entry
  %21 = tail call ptr @LLVMBuildArrayMalloc(ptr %1, ptr %9, ptr %13, ptr nonnull @28)
  br label %ifend

else5:                                            ; preds = %if.entry
  %22 = tail call ptr @LLVMBuildArrayAlloca(ptr %1, ptr %9, ptr %13, ptr nonnull @28)
  br label %ifend

if.entry7:                                        ; preds = %is_object.exit
  %memberidx10 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 4
  %23 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Array_Expression_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx11, align 4
  %25 = add nuw i64 %24, 1
  %26 = alloca ptr, i64 %25, align 8
  %27 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %5, i1 false)
  %memberidx12 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 5
  %28 = load i1, ptr %memberidx12, align 1
  br i1 %28, label %if.entry13, label %else14

if.entry13:                                       ; preds = %if.entry7
  %29 = tail call ptr @LLVMBuildMalloc(ptr %1, ptr %27, ptr nonnull @28)
  br label %ifend15

else14:                                           ; preds = %if.entry7
  %30 = tail call ptr @LLVMBuildAlloca(ptr %1, ptr %27, ptr nonnull @28)
  br label %ifend15

ifend15:                                          ; preds = %else14, %if.entry13
  %ptr.1 = phi ptr [ %29, %if.entry13 ], [ %30, %else14 ]
  store ptr %ptr.1, ptr %26, align 8
  %31 = load ptr, ptr %memberidx10, align 8
  %32 = tail call ptr @malloc(i32 25)
  %memberidx.i.i = getelementptr inbounds %Array_Expression_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Array_Expression_, ptr %31, i64 0, i32 2
  %34 = load i64, ptr %memberidx1.i.i, align 4
  store i1 false, ptr %32, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %32, i64 0, i32 1
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %32, i64 0, i32 3
  store ptr %33, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %32, i64 0, i32 2
  store i64 %34, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %35 = icmp slt i64 %34, 1
  br i1 %35, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

for.body.i:                                       ; preds = %ifend15, %for.body.i
  %36 = phi i64 [ %39, %for.body.i ], [ 1, %ifend15 ]
  %item.0.i72.in = phi ptr [ %ptridx.i7.i, %for.body.i ], [ %33, %ifend15 ]
  %start.0.i71 = phi i64 [ %37, %for.body.i ], [ 1, %ifend15 ]
  %item.0.i72 = load ptr, ptr %item.0.i72.in, align 8
  %37 = add nuw nsw i64 %start.0.i71, 1
  %ptridx.i = getelementptr inbounds ptr, ptr %26, i64 %start.0.i71
  %38 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %item.0.i72)
  store ptr %38, ptr %ptridx.i, align 8
  %39 = add nuw nsw i64 %36, 1
  store i64 %39, ptr %memberidx1.i.i.i, align 4
  %ptridx.i7.i = getelementptr inbounds ptr, ptr %33, i64 %36
  %.not = icmp slt i64 %36, %34
  br i1 %.not, label %for.body.i, label %CodeGen_evaluate_expression_list.exit

CodeGen_evaluate_expression_list.exit:            ; preds = %for.body.i, %ifend15
  tail call void @free(ptr nonnull %32)
  %memberidx.i40 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %40 = load i64, ptr %5, align 4
  %cond68 = icmp eq i64 %40, 19
  br i1 %cond68, label %if.entry.i61, label %get_class_from_type.exit

if.entry.i61:                                     ; preds = %CodeGen_evaluate_expression_list.exit, %if.entry.i61
  %.tr11.i69 = phi ptr [ %41, %if.entry.i61 ], [ %5, %CodeGen_evaluate_expression_list.exit ]
  %memberidx1.i60 = getelementptr inbounds %GenericType, ptr %.tr11.i69, i64 0, i32 3
  %41 = load ptr, ptr %memberidx1.i60, align 8
  %42 = load i64, ptr %41, align 4
  %cond = icmp eq i64 %42, 19
  br i1 %cond, label %if.entry.i61, label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %if.entry.i61, %CodeGen_evaluate_expression_list.exit
  %memberidx1.i = getelementptr inbounds %ObjectType, ptr %5, i64 0, i32 1
  %43 = load ptr, ptr %memberidx1.i, align 8
  %44 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %43)
  %.not.i41 = icmp eq ptr %44, null
  br i1 %.not.i41, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %get_class_from_type.exit
  %45 = load ptr, ptr %memberidx.i40, align 8
  %memberidx.i.i44 = getelementptr inbounds %Program, ptr %45, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i.i44, align 8
  %47 = load i64, ptr %43, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %48, i64 %47
  %49 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i45 = getelementptr inbounds %Module, ptr %49, i64 0, i32 4
  %50 = load ptr, ptr %memberidx2.i.i45, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %43, i64 0, i32 2
  %51 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i6.i.i, align 8
  tail call fastcc void @CodeGen_declare_class(ptr %0, ptr %53)
  tail call fastcc void @CodeGen_codegen_class(ptr %0, ptr %53)
  %54 = load ptr, ptr %53, align 8
  %55 = tail call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %54)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %get_class_from_type.exit, %ifend.i
  %common.ret.op.i = phi ptr [ %55, %ifend.i ], [ %44, %get_class_from_type.exit ]
  %memberidx2.i = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 6
  %56 = load ptr, ptr %memberidx2.i, align 8
  %.not.i = icmp eq ptr %56, null
  br i1 %.not.i, label %else.i, label %if.entry.i

if.entry.i:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %57 = tail call ptr @LLVM_GetFunctionType(ptr nonnull %56)
  %58 = call ptr @LLVMBuildCall2(ptr %1, ptr %57, ptr nonnull %56, ptr nonnull %26, i64 %25, ptr nonnull @28)
  br label %ifend

else.i:                                           ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %59 = tail call ptr @malloc(i32 47)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(47) %59, ptr noundef nonnull align 8 dereferenceable(47) @266, i64 47, i1 false)
  %60 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %60, align 8
  %memberidx.i.i46 = getelementptr inbounds %string, ptr %60, i64 0, i32 1
  store ptr %59, ptr %memberidx.i.i46, align 8
  %memberidx1.i.i47 = getelementptr inbounds %string, ptr %60, i64 0, i32 2
  store i64 47, ptr %memberidx1.i.i47, align 4
  %memberidx2.i.i48 = getelementptr inbounds %string, ptr %60, i64 0, i32 3
  store i64 47, ptr %memberidx2.i.i48, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %61 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %62 = tail call ptr %61(ptr nonnull %60)
  %63 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @219, ptr %62)
  %64 = load ptr, ptr %4, align 8
  %65 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %65, align 8
  %memberidx.i.i50 = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  store ptr %64, ptr %memberidx.i.i50, align 8
  %memberidx1.i.i51 = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  store i64 %63, ptr %memberidx1.i.i51, align 4
  %memberidx2.i.i52 = getelementptr inbounds %string, ptr %65, i64 0, i32 3
  store i64 %63, ptr %memberidx2.i.i52, align 4
  call void @free(ptr %62)
  %66 = load ptr, ptr %65, align 8
  %memberidx.i.i.i53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i64 0, i32 3
  %67 = load ptr, ptr %memberidx.i.i.i53, align 8
  %68 = call ptr %67(ptr nonnull %65)
  %69 = load i64, ptr %memberidx1.i.i51, align 4
  call void @write(i64 1, ptr %68, i64 %69)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend
}

define internal fastcc ptr @CodeGen_codegen_intrinsic_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %arg_types.i118 = alloca [3 x ptr], align 8
  %arg_types.i107 = alloca [2 x ptr], align 8
  %arg_types.i = alloca [1 x ptr], align 8
  %args.i = alloca [1 x ptr], align 8
  %memberidx = getelementptr inbounds %IntrinsicCall, ptr %2, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %5, 3
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %2, i64 0, i32 5
  %7 = load ptr, ptr %memberidx1, align 8
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %9)
  %11 = tail call fastcc ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %10)
  switch i64 %5, label %ifend10 [
    i64 0, label %if.entry2
    i64 1, label %if.entry5
    i64 2, label %if.entry8
  ]

ifend:                                            ; preds = %3
  %memberidx12 = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 2
  %12 = load i64, ptr %memberidx12, align 4
  %13 = alloca ptr, i64 %12, align 8
  %14 = tail call ptr @malloc(i32 25)
  %memberidx.i.i138 = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i.i138, align 8
  %16 = load i64, ptr %memberidx12, align 4
  store i1 false, ptr %14, align 1
  %memberidx1.i.i.i140 = getelementptr inbounds %ArrayIterator_Expression_, ptr %14, i64 0, i32 1
  %memberidx2.i.i.i141 = getelementptr inbounds %ArrayIterator_Expression_, ptr %14, i64 0, i32 3
  store ptr %15, ptr %memberidx2.i.i.i141, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %14, i64 0, i32 2
  store i64 %16, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i140, align 4
  %17 = icmp slt i64 %16, 1
  br i1 %17, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

for.body.i:                                       ; preds = %ifend, %for.body.i
  %18 = phi i64 [ %21, %for.body.i ], [ 1, %ifend ]
  %item.0.i150.in = phi ptr [ %ptridx.i7.i, %for.body.i ], [ %15, %ifend ]
  %start.0.i149 = phi i64 [ %19, %for.body.i ], [ 0, %ifend ]
  %item.0.i150 = load ptr, ptr %item.0.i150.in, align 8
  %19 = add nuw nsw i64 %start.0.i149, 1
  %ptridx.i = getelementptr inbounds ptr, ptr %13, i64 %start.0.i149
  %20 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %item.0.i150)
  store ptr %20, ptr %ptridx.i, align 8
  %21 = add nuw nsw i64 %18, 1
  store i64 %21, ptr %memberidx1.i.i.i140, align 4
  %ptridx.i7.i = getelementptr inbounds ptr, ptr %15, i64 %18
  %.not = icmp slt i64 %18, %16
  br i1 %.not, label %for.body.i, label %CodeGen_evaluate_expression_list.exit

CodeGen_evaluate_expression_list.exit:            ; preds = %for.body.i, %ifend
  tail call void @free(ptr nonnull %14)
  %22 = load ptr, ptr %memberidx1, align 8
  %memberidx.i80 = getelementptr inbounds %Array_Expression_, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i80, align 8
  %24 = load ptr, ptr %23, align 8
  %memberidx15 = getelementptr inbounds %Expression, ptr %24, i64 0, i32 3
  %25 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %PointerType, ptr %25, i64 0, i32 1
  %26 = load ptr, ptr %memberidx16, align 8
  %27 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %26, i1 true)
  %28 = tail call ptr @LLVMSizeOf(ptr %27)
  %29 = icmp eq i64 %5, 6
  br i1 %29, label %if.entry17, label %ifend19

if.entry2:                                        ; preds = %if.entry
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %args.i)
  %30 = tail call ptr @LLVMInt8Type()
  %31 = tail call ptr @LLVMPointerType(ptr %30, i64 0)
  store ptr %31, ptr %arg_types.i, align 8
  store ptr %11, ptr %args.i, align 8
  %32 = tail call ptr @LLVMDoubleType()
  %33 = load ptr, ptr %0, align 8
  %34 = tail call ptr @malloc(i32 4)
  store i32 1718580321, ptr %34, align 8
  %35 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i, align 4
  %36 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i7.i = getelementptr inbounds %IntrinsicResult, ptr %36, i64 0, i32 1
  store i64 0, ptr %36, align 8
  %37 = call ptr @LLVMFunctionType(ptr %32, ptr nonnull %arg_types.i, i64 1, i1 false)
  store ptr %37, ptr %memberidx1.i.i7.i, align 8
  %38 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %39 = call ptr %38(ptr nonnull %35)
  %40 = call ptr @LLVMGetNamedFunction(ptr %33, ptr %39)
  %.not.i.i = icmp eq ptr %40, null
  br i1 %.not.i.i, label %else.i.i, label %CodeGen_codegen_atof_call.exit

else.i.i:                                         ; preds = %if.entry2
  %41 = call ptr @LLVMAddFunction(ptr %33, ptr %39, ptr %37)
  br label %CodeGen_codegen_atof_call.exit

CodeGen_codegen_atof_call.exit:                   ; preds = %if.entry2, %else.i.i
  %storemerge.i.i = phi ptr [ %41, %else.i.i ], [ %40, %if.entry2 ]
  store ptr %storemerge.i.i, ptr %36, align 8
  %42 = call ptr @LLVMBuildCall2(ptr %1, ptr %37, ptr %storemerge.i.i, ptr nonnull %args.i, i64 1, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %args.i)
  br label %ifend10

if.entry5:                                        ; preds = %if.entry
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %args.i)
  %43 = tail call ptr @LLVMInt8Type()
  %44 = tail call ptr @LLVMPointerType(ptr %43, i64 0)
  store ptr %44, ptr %arg_types.i, align 8
  store ptr %11, ptr %args.i, align 8
  %45 = tail call ptr @LLVMInt32Type()
  %46 = load ptr, ptr %0, align 8
  %47 = tail call ptr @malloc(i32 4)
  store i32 1768911969, ptr %47, align 8
  %48 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i.i.i83 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i.i.i83, align 8
  %memberidx1.i.i.i84 = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i84, align 4
  %memberidx2.i.i.i85 = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i85, align 4
  %49 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i7.i86 = getelementptr inbounds %IntrinsicResult, ptr %49, i64 0, i32 1
  store i64 0, ptr %49, align 8
  %50 = call ptr @LLVMFunctionType(ptr %45, ptr nonnull %arg_types.i, i64 1, i1 false)
  store ptr %50, ptr %memberidx1.i.i7.i86, align 8
  %51 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %52 = call ptr %51(ptr nonnull %48)
  %53 = call ptr @LLVMGetNamedFunction(ptr %46, ptr %52)
  %.not.i.i89 = icmp eq ptr %53, null
  br i1 %.not.i.i89, label %else.i.i91, label %CodeGen_codegen_atoi_call.exit

else.i.i91:                                       ; preds = %if.entry5
  %54 = call ptr @LLVMAddFunction(ptr %46, ptr %52, ptr %50)
  br label %CodeGen_codegen_atoi_call.exit

CodeGen_codegen_atoi_call.exit:                   ; preds = %if.entry5, %else.i.i91
  %storemerge.i.i92 = phi ptr [ %54, %else.i.i91 ], [ %53, %if.entry5 ]
  store ptr %storemerge.i.i92, ptr %49, align 8
  %55 = call ptr @LLVMBuildCall2(ptr %1, ptr %50, ptr %storemerge.i.i92, ptr nonnull %args.i, i64 1, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %args.i)
  br label %ifend10

if.entry8:                                        ; preds = %if.entry
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %args.i)
  %56 = tail call ptr @LLVMInt8Type()
  %57 = tail call ptr @LLVMPointerType(ptr %56, i64 0)
  store ptr %57, ptr %arg_types.i, align 8
  store ptr %11, ptr %args.i, align 8
  %58 = tail call ptr @LLVMInt64Type()
  %59 = load ptr, ptr %0, align 8
  %60 = tail call ptr @malloc(i32 4)
  store i32 1819243617, ptr %60, align 8
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i.i96 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i.i96, align 8
  %memberidx1.i.i.i97 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i97, align 4
  %memberidx2.i.i.i98 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i98, align 4
  %62 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i7.i99 = getelementptr inbounds %IntrinsicResult, ptr %62, i64 0, i32 1
  store i64 0, ptr %62, align 8
  %63 = call ptr @LLVMFunctionType(ptr %58, ptr nonnull %arg_types.i, i64 1, i1 false)
  store ptr %63, ptr %memberidx1.i.i7.i99, align 8
  %64 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %65 = call ptr %64(ptr nonnull %61)
  %66 = call ptr @LLVMGetNamedFunction(ptr %59, ptr %65)
  %.not.i.i102 = icmp eq ptr %66, null
  br i1 %.not.i.i102, label %else.i.i104, label %CodeGen_codegen_atol_call.exit

else.i.i104:                                      ; preds = %if.entry8
  %67 = call ptr @LLVMAddFunction(ptr %59, ptr %65, ptr %63)
  br label %CodeGen_codegen_atol_call.exit

CodeGen_codegen_atol_call.exit:                   ; preds = %if.entry8, %else.i.i104
  %storemerge.i.i105 = phi ptr [ %67, %else.i.i104 ], [ %66, %if.entry8 ]
  store ptr %storemerge.i.i105, ptr %62, align 8
  %68 = call ptr @LLVMBuildCall2(ptr %1, ptr %63, ptr %storemerge.i.i105, ptr nonnull %args.i, i64 1, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %args.i)
  br label %ifend10

common.ret:                                       ; preds = %ifend42, %if.entry40, %if.entry34, %if.entry27, %CodeGen_codegen_memcmp_call.exit, %CodeGen_codegen_realloc_call.exit, %ifend10
  %common.ret.op = phi ptr [ %69, %ifend10 ], [ %86, %CodeGen_codegen_realloc_call.exit ], [ %104, %CodeGen_codegen_memcmp_call.exit ], [ %111, %if.entry27 ], [ %113, %if.entry34 ], [ %114, %if.entry40 ], [ null, %ifend42 ]
  ret ptr %common.ret.op

ifend10:                                          ; preds = %CodeGen_codegen_atoi_call.exit, %CodeGen_codegen_atof_call.exit, %if.entry, %CodeGen_codegen_atol_call.exit
  %69 = phi ptr [ %55, %CodeGen_codegen_atoi_call.exit ], [ %42, %CodeGen_codegen_atof_call.exit ], [ null, %if.entry ], [ %68, %CodeGen_codegen_atol_call.exit ]
  %70 = call ptr @LLVMBuildFree(ptr %1, ptr %11)
  br label %common.ret

if.entry17:                                       ; preds = %CodeGen_evaluate_expression_list.exit
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 1
  %71 = load ptr, ptr %ptridx, align 8
  %72 = tail call ptr @LLVMBuildMul(ptr %1, ptr %71, ptr %28, ptr nonnull @28)
  store ptr %72, ptr %ptridx, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %arg_types.i107)
  %73 = tail call ptr @LLVMInt8Type()
  %74 = tail call ptr @LLVMPointerType(ptr %73, i64 0)
  store ptr %74, ptr %arg_types.i107, align 8
  %75 = getelementptr inbounds ptr, ptr %arg_types.i107, i64 1
  %76 = tail call ptr @LLVMIntType(i64 64)
  store ptr %76, ptr %75, align 8
  %77 = load ptr, ptr %0, align 8
  %78 = tail call ptr @malloc(i32 7)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %78, ptr noundef nonnull align 8 dereferenceable(7) @226, i64 7, i1 false)
  %79 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %79, align 8
  %memberidx.i.i.i108 = getelementptr inbounds %string, ptr %79, i64 0, i32 1
  store ptr %78, ptr %memberidx.i.i.i108, align 8
  %memberidx1.i.i.i109 = getelementptr inbounds %string, ptr %79, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i109, align 4
  %memberidx2.i.i.i110 = getelementptr inbounds %string, ptr %79, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i110, align 4
  %80 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i6.i = getelementptr inbounds %IntrinsicResult, ptr %80, i64 0, i32 1
  store i64 0, ptr %80, align 8
  %81 = call ptr @LLVMFunctionType(ptr %74, ptr nonnull %arg_types.i107, i64 2, i1 false)
  store ptr %81, ptr %memberidx1.i.i6.i, align 8
  %82 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %83 = call ptr %82(ptr nonnull %79)
  %84 = call ptr @LLVMGetNamedFunction(ptr %77, ptr %83)
  %.not.i.i113 = icmp eq ptr %84, null
  br i1 %.not.i.i113, label %else.i.i115, label %CodeGen_codegen_realloc_call.exit

else.i.i115:                                      ; preds = %if.entry17
  %85 = call ptr @LLVMAddFunction(ptr %77, ptr %83, ptr %81)
  br label %CodeGen_codegen_realloc_call.exit

CodeGen_codegen_realloc_call.exit:                ; preds = %if.entry17, %else.i.i115
  %storemerge.i.i116 = phi ptr [ %85, %else.i.i115 ], [ %84, %if.entry17 ]
  store ptr %storemerge.i.i116, ptr %80, align 8
  %86 = call ptr @LLVMBuildCall2(ptr %1, ptr %81, ptr %storemerge.i.i116, ptr nonnull %13, i64 2, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %arg_types.i107)
  br label %common.ret

ifend19:                                          ; preds = %CodeGen_evaluate_expression_list.exit
  %ptridx21 = getelementptr inbounds ptr, ptr %13, i64 2
  %87 = load ptr, ptr %ptridx21, align 8
  %88 = tail call ptr @LLVMBuildMul(ptr %1, ptr %87, ptr %28, ptr nonnull @28)
  store ptr %88, ptr %ptridx21, align 8
  %89 = icmp eq i64 %5, 7
  br i1 %89, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %ifend19
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %arg_types.i118)
  %90 = tail call ptr @LLVMInt8Type()
  %91 = tail call ptr @LLVMPointerType(ptr %90, i64 0)
  %92 = tail call ptr @LLVMIntType(i64 64)
  store ptr %91, ptr %arg_types.i118, align 8
  %93 = getelementptr inbounds ptr, ptr %arg_types.i118, i64 1
  store ptr %91, ptr %93, align 8
  %94 = getelementptr inbounds ptr, ptr %arg_types.i118, i64 2
  store ptr %92, ptr %94, align 8
  %95 = load ptr, ptr %0, align 8
  %96 = tail call ptr @malloc(i32 6)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %96, ptr noundef nonnull align 8 dereferenceable(6) @227, i64 6, i1 false)
  %97 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i.i.i119 = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i.i.i119, align 8
  %memberidx1.i.i.i120 = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i.i120, align 4
  %memberidx2.i.i.i121 = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i.i121, align 4
  %98 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i7.i122 = getelementptr inbounds %IntrinsicResult, ptr %98, i64 0, i32 1
  store i64 0, ptr %98, align 8
  %99 = call ptr @LLVMFunctionType(ptr %92, ptr nonnull %arg_types.i118, i64 3, i1 false)
  store ptr %99, ptr %memberidx1.i.i7.i122, align 8
  %100 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %101 = call ptr %100(ptr nonnull %97)
  %102 = call ptr @LLVMGetNamedFunction(ptr %95, ptr %101)
  %.not.i.i125 = icmp eq ptr %102, null
  br i1 %.not.i.i125, label %else.i.i127, label %CodeGen_codegen_memcmp_call.exit

else.i.i127:                                      ; preds = %if.entry23
  %103 = call ptr @LLVMAddFunction(ptr %95, ptr %101, ptr %99)
  br label %CodeGen_codegen_memcmp_call.exit

CodeGen_codegen_memcmp_call.exit:                 ; preds = %if.entry23, %else.i.i127
  %storemerge.i.i128 = phi ptr [ %103, %else.i.i127 ], [ %102, %if.entry23 ]
  store ptr %storemerge.i.i128, ptr %98, align 8
  %104 = call ptr @LLVMBuildCall2(ptr %1, ptr %99, ptr %storemerge.i.i128, ptr nonnull %13, i64 3, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %arg_types.i118)
  br label %common.ret

ifend25:                                          ; preds = %ifend19
  %105 = load ptr, ptr %13, align 8
  %106 = tail call i64 @LLVMGetAlignment(ptr %105)
  %107 = icmp eq i64 %5, 5
  %ptridx31 = getelementptr inbounds ptr, ptr %13, i64 1
  %108 = load ptr, ptr %ptridx31, align 8
  br i1 %107, label %if.entry27, label %ifend29

if.entry27:                                       ; preds = %ifend25
  %109 = tail call ptr @LLVMInt8Type()
  %110 = tail call ptr @LLVMBuildIntCast2(ptr %1, ptr %108, ptr %109, i1 false, ptr nonnull @28)
  %111 = tail call ptr @LLVMBuildMemSet(ptr %1, ptr %105, ptr %110, ptr %88, i64 %106)
  br label %common.ret

ifend29:                                          ; preds = %ifend25
  %112 = tail call i64 @LLVMGetAlignment(ptr %108)
  switch i64 %5, label %ifend42 [
    i64 3, label %if.entry34
    i64 4, label %if.entry40
  ]

if.entry34:                                       ; preds = %ifend29
  %113 = tail call ptr @LLVMBuildMemCpy(ptr %1, ptr %105, i64 %106, ptr %108, i64 %112, ptr %88)
  br label %common.ret

if.entry40:                                       ; preds = %ifend29
  %114 = tail call ptr @LLVMBuildMemMove(ptr %1, ptr %105, i64 %106, ptr %108, i64 %112, ptr %88)
  br label %common.ret

ifend42:                                          ; preds = %ifend29
  %115 = tail call ptr @malloc(i32 21)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(21) %115, ptr noundef nonnull align 8 dereferenceable(21) @256, i64 21, i1 false)
  %116 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %116, align 8
  %memberidx.i.i130 = getelementptr inbounds %string, ptr %116, i64 0, i32 1
  store ptr %115, ptr %memberidx.i.i130, align 8
  %memberidx1.i.i131 = getelementptr inbounds %string, ptr %116, i64 0, i32 2
  store i64 21, ptr %memberidx1.i.i131, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %116, i64 0, i32 3
  store i64 21, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %117 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %118 = tail call ptr %117(ptr nonnull %116)
  %119 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @219, ptr %118)
  %120 = load ptr, ptr %4, align 8
  %121 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %121, align 8
  %memberidx.i.i133 = getelementptr inbounds %string, ptr %121, i64 0, i32 1
  store ptr %120, ptr %memberidx.i.i133, align 8
  %memberidx1.i.i134 = getelementptr inbounds %string, ptr %121, i64 0, i32 2
  store i64 %119, ptr %memberidx1.i.i134, align 4
  %memberidx2.i.i135 = getelementptr inbounds %string, ptr %121, i64 0, i32 3
  store i64 %119, ptr %memberidx2.i.i135, align 4
  call void @free(ptr %118)
  %122 = load ptr, ptr %121, align 8
  %memberidx.i.i.i136 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %122, i64 0, i32 3
  %123 = load ptr, ptr %memberidx.i.i.i136, align 8
  %124 = call ptr %123(ptr nonnull %121)
  %125 = load i64, ptr %memberidx1.i.i134, align 4
  call void @write(i64 1, ptr %124, i64 %125)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %common.ret
}

declare ptr @LLVMModuleCreateWithName(ptr) local_unnamed_addr

declare i1 @LLVMIsConstant(ptr) local_unnamed_addr

declare ptr @LLVMConstNeg(ptr) local_unnamed_addr

declare ptr @LLVMBuildNeg(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstInt(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMInt1Type() local_unnamed_addr

declare ptr @LLVMIntType(i64) local_unnamed_addr

declare ptr @LLVMVoidType() local_unnamed_addr

declare ptr @LLVMInt8Type() local_unnamed_addr

declare ptr @LLVMInt16Type() local_unnamed_addr

declare ptr @LLVMInt32Type() local_unnamed_addr

declare ptr @LLVMInt64Type() local_unnamed_addr

declare ptr @LLVMInt128Type() local_unnamed_addr

declare ptr @LLVMFloatType() local_unnamed_addr

declare ptr @LLVMDoubleType() local_unnamed_addr

declare ptr @LLVMPointerType(ptr, i64) local_unnamed_addr

declare ptr @LLVMArrayType(ptr, i64) local_unnamed_addr

declare ptr @LLVMFunctionType(ptr, ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMBuildRet(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildRetVoid(ptr) local_unnamed_addr

declare ptr @LLVMConstReal(ptr, double) local_unnamed_addr

declare ptr @LLVMAddFunction(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildCall2(ptr, ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVMBuildGlobalString(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildAlloca(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildLoad2(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSelect(ptr, ptr, ptr, ptr, ptr) local_unnamed_addr

declare i64 @LLVMGetTypeKind(ptr) local_unnamed_addr

declare ptr @LLVMTypeOf(ptr) local_unnamed_addr

declare i1 @LLVMIsGlobalConstant(ptr) local_unnamed_addr

define internal fastcc noalias ptr @get_format_from_type(ptr nocapture readonly %0) unnamed_addr {
  %2 = load i64, ptr %0, align 4
  %3 = add i64 %2, -1
  %4 = icmp ult i64 %3, 7
  br i1 %4, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  switch i64 %2, label %ifend7 [
    i64 7, label %if.entry1
    i64 5, label %if.entry5
  ]

ifend:                                            ; preds = %1
  switch i64 %2, label %ifend18 [
    i64 8, label %if.entry9
    i64 9, label %if.entry13
    i64 13, label %if.entry16
  ]

common.ret:                                       ; preds = %ifend18, %if.entry16, %if.entry13, %if.entry9, %ifend7, %if.entry5, %if.entry1
  %.sink46 = phi ptr [ %12, %ifend18 ], [ %11, %if.entry16 ], [ %10, %if.entry13 ], [ %9, %if.entry9 ], [ %8, %ifend7 ], [ %7, %if.entry5 ], [ %6, %if.entry1 ]
  %.sink44 = phi i64 [ 2, %ifend18 ], [ 4, %if.entry16 ], [ 3, %if.entry13 ], [ 2, %if.entry9 ], [ 2, %ifend7 ], [ 3, %if.entry5 ], [ 4, %if.entry1 ]
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %5, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  store ptr %.sink46, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  store i64 %.sink44, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 3
  store i64 %.sink44, ptr %memberidx2.i.i, align 4
  ret ptr %5

if.entry1:                                        ; preds = %if.entry
  %6 = tail call ptr @malloc(i32 4)
  store i32 1684827173, ptr %6, align 8
  br label %common.ret

if.entry5:                                        ; preds = %if.entry
  %7 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %7, ptr noundef nonnull align 8 dereferenceable(3) @230, i64 3, i1 false)
  br label %common.ret

ifend7:                                           ; preds = %if.entry
  %8 = tail call ptr @malloc(i32 2)
  store i16 25637, ptr %8, align 8
  br label %common.ret

if.entry9:                                        ; preds = %ifend
  %9 = tail call ptr @malloc(i32 2)
  store i16 26149, ptr %9, align 8
  br label %common.ret

if.entry13:                                       ; preds = %ifend
  %10 = tail call ptr @malloc(i32 3)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %10, ptr noundef nonnull align 8 dereferenceable(3) @231, i64 3, i1 false)
  br label %common.ret

if.entry16:                                       ; preds = %ifend
  %11 = tail call ptr @malloc(i32 4)
  store i32 1478850608, ptr %11, align 8
  br label %common.ret

ifend18:                                          ; preds = %ifend
  %12 = tail call ptr @malloc(i32 2)
  store i16 29477, ptr %12, align 8
  br label %common.ret
}

declare ptr @LLVMBuildInBoundsGEP2(ptr, ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVM_GetFunctionType(ptr) local_unnamed_addr

declare ptr @LLVMBuildMalloc(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFree(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildStore(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstArray(ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMConstMul(ptr, ptr) local_unnamed_addr

declare ptr @LLVMSizeOf(ptr) local_unnamed_addr

declare i1 @LLVMIsNull(ptr) local_unnamed_addr

declare ptr @LLVMBuildIsNull(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildIsNotNull(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNSWAdd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildNSWAdd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNUWAdd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildNUWAdd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNSWSub(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildNSWSub(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNUWSub(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildNUWSub(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNSWMul(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildNSWMul(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNUWMul(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildNUWMul(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSDiv(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildUDiv(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSRem(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildURem(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstICmp(i64, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildICmp(ptr, i64, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstShl(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildShl(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstLShr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildLShr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstOr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildOr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstAnd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildAnd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstXor(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildXor(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFAdd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFSub(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFMul(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFDiv(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFRem(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstFCmp(i64, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFCmp(ptr, i64, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstSIToFP(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSIToFP(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstFPToSI(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFPToSI(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstIntCast(ptr, ptr, i1) local_unnamed_addr

declare ptr @LLVMBuildIntCast2(ptr, ptr, ptr, i1, ptr) local_unnamed_addr

declare ptr @LLVMConstFPCast(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFPCast(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstBitCast(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildBitCast(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNSWNeg(ptr) local_unnamed_addr

declare ptr @LLVMBuildNSWNeg(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNUWNeg(ptr) local_unnamed_addr

declare ptr @LLVMBuildNUWNeg(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFNeg(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNot(ptr) local_unnamed_addr

declare ptr @LLVMBuildNot(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetInitializer(ptr) local_unnamed_addr

declare ptr @LLVMConstNull(ptr) local_unnamed_addr

declare ptr @LLVMAppendBasicBlock(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildCondBr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMPositionBuilderAtEnd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildBr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildPhi(ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMAddIncoming(ptr, ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMBuildArrayMalloc(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildArrayAlloca(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildMul(ptr, ptr, ptr, ptr) local_unnamed_addr

declare i64 @LLVMGetAlignment(ptr) local_unnamed_addr

declare ptr @LLVMBuildMemSet(ptr, ptr, ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMBuildMemCpy(ptr, ptr, i64, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVMBuildMemMove(ptr, ptr, i64, ptr, i64, ptr) local_unnamed_addr

declare void @LLVMDeleteBasicBlock(ptr) local_unnamed_addr

declare ptr @LLVMAddGlobal(ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMSetInitializer(ptr, ptr) local_unnamed_addr

declare void @LLVMSetGlobalConstant(ptr, i1) local_unnamed_addr

declare void @LLVMSetLinkage(ptr, i64) local_unnamed_addr

declare ptr @LLVMCreateBuilder() local_unnamed_addr

declare ptr @LLVMGetParam(ptr, i64) local_unnamed_addr

declare void @LLVMDisposeBuilder(ptr) local_unnamed_addr

declare ptr @LLVMStructType(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMConstStruct(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMStructCreateNamed(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetModuleContext(ptr) local_unnamed_addr

declare void @LLVMStructSetBody(ptr, ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMConstString(ptr, i64, i1) local_unnamed_addr

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.smax.i64(i64, i64) #13

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #14

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #14

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #15

attributes #0 = { nofree norecurse nosync nounwind readonly }
attributes #1 = { argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn }
attributes #2 = { mustprogress nofree norecurse nosync nounwind readonly willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("realloc") allocsize(1) "alloc-family"="malloc" }
attributes #5 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("free") "alloc-family"="malloc" }
attributes #6 = { argmemonly mustprogress nofree nounwind readonly willreturn }
attributes #7 = { mustprogress nofree norecurse nosync nounwind willreturn }
attributes #8 = { nofree }
attributes #9 = { nofree nounwind }
attributes #10 = { mustprogress nofree nounwind readonly willreturn }
attributes #11 = { mustprogress nounwind willreturn }
attributes #12 = { nofree nosync nounwind readonly }
attributes #13 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #14 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #15 = { argmemonly nocallback nofree nounwind willreturn writeonly }
