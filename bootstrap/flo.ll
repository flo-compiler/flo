; ModuleID = 'src/main.flo'
source_filename = "src/main.flo"
target triple = "x86_64-pc-linux-gnu"

%string = type <{ ptr, ptr, i64, i64 }>
%Array_string_ = type <{ ptr, ptr, i64, i64 }>
%CodeGen = type <{ ptr, ptr, ptr, ptr, ptr, i1, ptr, ptr, ptr, ptr, ptr }>
%TypeChecker = type <{ ptr, i64, ptr, ptr, ptr, ptr, ptr, i1, i1, ptr }>
%Compiler = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_FloFile_ = type <{ ptr, ptr, i64, i64 }>
%Array_FloError_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_FileId_ = type <{ ptr, i64, i64 }>
%Program = type <{ i1, ptr }>
%Array_Module_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_Generic_ = type <{ ptr, i64, i64 }>
%Module = type <{ i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Map_string_LLVMValueRef_ = type <{ ptr, i64, i64 }>
%Map_string_CGClassType_ = type <{ ptr, i64, i64 }>
%Map_string_CGEnumType_ = type <{ ptr, i64, i64 }>
%Array_Enum_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Enum_ = type <{ i1, i64, i64, ptr }>
%Array_Class_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Class_ = type <{ i1, i64, i64, ptr }>
%Array_ConstDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ConstDeclaration_ = type <{ i1, i64, i64, ptr }>
%Array_VarDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_VarDeclaration_ = type <{ i1, i64, i64, ptr }>
%Array_Function_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Function_ = type <{ i1, i64, i64, ptr }>
%MapIterator_string_LLVMValueRef_ = type <{ i1, ptr, i64, i64 }>
%MapIterator_string_CGClassType_ = type <{ i1, ptr, i64, i64 }>
%MapEntry_string_CGClassType_ = type <{ ptr, ptr }>
%MapIterator_string_CGEnumType_ = type <{ i1, ptr, i64, i64 }>
%MapEntry_string_CGEnumType_ = type <{ ptr, ptr }>
%ArrayIterator_Module_ = type <{ i1, i64, i64, ptr }>
%Array_Var_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Var_ = type <{ i1, i64, i64, ptr }>
%Class = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, i1 }>
%Array_ClassField_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ClassField_ = type <{ i1, i64, i64, ptr }>
%Array_ClassMethod_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ClassMethod_ = type <{ i1, i64, i64, ptr }>
%Enum = type <{ ptr, ptr, ptr, ptr }>
%Array_EnumField_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_EnumField_ = type <{ i1, i64, i64, ptr }>
%EnumField = type <{ ptr, ptr, ptr }>
%ScopeId = type <{ i64, i64 }>
%Array_Scope_ = type <{ ptr, ptr, i64, i64 }>
%Array_Const_ = type <{ ptr, ptr, i64, i64 }>
%GeneratedModule = type <{ ptr, ptr, ptr, ptr }>
%FloFile = type <{ ptr, ptr }>
%FloError = type <{ i64, ptr, ptr }>
%FloRange = type <{ i64, i64, i64, i64 }>
%Range = type <{ i64, i64 }>
%RangeIterator = type <{ i1, i64, i64 }>
%MapEntry_string_FileId_ = type <{ ptr, ptr }>
%File = type <{ ptr, i64 }>
%Array_Token_ = type <{ ptr, ptr, i64, i64 }>
%Lexer = type <{ i8, ptr, ptr, i64, i64, i64 }>
%Token = type <{ i64, ptr }>
%Array_Array_Token__ = type <{ ptr, ptr, i64, i64 }>
%Array_int_ = type <{ ptr, ptr, i64, i64 }>
%StringBuilder = type <{ ptr, ptr, i64, ptr, i64 }>
%StrToken = type <{ i64, ptr, ptr, ptr, ptr }>
%IntToken = type <{ i64, ptr, i64 }>
%IdentifierToken = type <{ i64, ptr, ptr }>
%FloatToken = type <{ i64, ptr, double }>
%CharToken = type <{ i64, ptr, i8 }>
%Array_ImportClause_ = type <{ ptr, ptr, i64, i64 }>
%Array_ImportNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_VarDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%Array_EnumNodeField_ = type <{ ptr, ptr, i64, i64 }>
%Array_EnumNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_TypeAliasNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_ConstDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%Array_ArgNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_StatementNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_MethodNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_FieldNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_TypeNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_GenericParameterNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_ClassDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_FunctionDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%ModuleAST = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Parser = type <{ ptr, ptr, ptr, i64 }>
%FunctionDeclarationNode = type <{ ptr, ptr, ptr, ptr, i1 }>
%TypeNode = type <{ ptr, i64 }>
%ClassDeclarationNode = type <{ ptr, ptr, ptr, ptr, ptr }>
%EnumNode = type <{ ptr, ptr, ptr }>
%EnumNodeField = type <{ ptr, ptr }>
%ImportNode = type <{ ptr, ptr, ptr }>
%ImportClause = type <{ ptr, ptr }>
%TypeAliasNode = type <{ ptr, ptr }>
%BlockNode = type <{ ptr, ptr }>
%FunctionTypeNode = type <{ ptr, i64, ptr, ptr }>
%RecordTypeNode = type <{ ptr, i64, ptr, ptr }>
%PointerTypeNode = type <{ ptr, i64, ptr }>
%ArrayTypeNode = type <{ ptr, i64, ptr, ptr }>
%Array_ExpressionNode_ = type <{ ptr, ptr, i64, i64 }>
%StatementNode = type <{ ptr, i64 }>
%ExpressionNode = type <{ ptr, i64, i64 }>
%StringExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%VarDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%NewExpressionNode = type <{ ptr, i64, i64, ptr, i1, ptr }>
%IfStatementNode = type <{ ptr, i64, ptr, ptr, ptr }>
%WhileStatementNode = type <{ ptr, i64, ptr, ptr }>
%ForStatementNode = type <{ ptr, i64, ptr, ptr, ptr, ptr, i64, ptr, ptr }>
%ReturnStatementNode = type <{ ptr, i64, ptr }>
%ConstDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%ArgNode = type <{ ptr, ptr, ptr }>
%IntExpressionNode = type <{ ptr, i64, i64, ptr }>
%FloatExpressionNode = type <{ ptr, i64, i64, ptr }>
%CharExpressionNode = type <{ ptr, i64, i64, ptr }>
%VarAccessExpressionNode = type <{ ptr, i64, i64, ptr }>
%ArrayExpressionNode = type <{ ptr, i64, i64, ptr }>
%CallExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%ExpressionIndexNode = type <{ ptr, i64, i64, ptr, ptr }>
%MemberExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%UnaryExpressionNode = type <{ ptr, i64, i64, i64, ptr }>
%FieldNode = type <{ ptr, i64, ptr, ptr }>
%MethodNode = type <{ ptr, ptr, ptr, i64, ptr, i1, i1 }>
%BinaryExpressionNode = type <{ ptr, i64, i64, ptr, i64, ptr }>
%TypeCastExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%TernaryExpressionNode = type <{ ptr, i64, i64, ptr, ptr, ptr }>
%Map_string_VarId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_VarId_ = type <{ ptr, ptr }>
%Scope = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Map_string_EnumId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_EnumId_ = type <{ ptr, ptr }>
%Map_string_Type_ = type <{ ptr, i64, i64 }>
%MapEntry_string_Type_ = type <{ ptr, ptr }>
%Map_string_ClassId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_ClassId_ = type <{ ptr, ptr }>
%Map_string_PropId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_PropId_ = type <{ ptr, ptr }>
%Array_FunctionArg_ = type <{ ptr, ptr, i64, i64 }>
%Array_Statement_ = type <{ ptr, ptr, i64, i64 }>
%Array_Type_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ImportNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_EnumNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_ClassDeclarationNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_TypeAliasNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_ConstDeclarationStatement_ = type <{ i1, i64, i64, ptr }>
%ConstDeclaration = type <{ i64, ptr, ptr, i1 }>
%ArrayIterator_VarDeclarationStatement_ = type <{ i1, i64, i64, ptr }>
%VarDeclaration = type <{ i64, ptr, ptr, i1 }>
%VarId = type <{ i64, i64, i64 }>
%Var = type <{ ptr, ptr, ptr }>
%Expression = type <{ i64, i1, i64, ptr }>
%ArrayIterator_FunctionDeclarationNode_ = type <{ i1, i64, i64, ptr }>
%Function = type <{ ptr, ptr, ptr, ptr, ptr, ptr, i1 }>
%Block = type <{ ptr, i1, i1, i1 }>
%FunctionType = type <{ i64, ptr, ptr, i1 }>
%ReturnStatement = type <{ i64, ptr }>
%TypeId = type <{ i64, i64, i64 }>
%MapIterator_string_Type_ = type <{ i1, ptr, i64, i64 }>
%Array_Expression_ = type <{ ptr, ptr, i64, i64 }>
%StringExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%IntrinsicCall = type <{ i64, i1, i64, ptr, i64, ptr }>
%TypeCastExpression = type <{ i64, i1, i64, ptr, ptr }>
%FunctionArg = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%MapIterator_string_PropId_ = type <{ i1, ptr, i64, i64 }>
%PropId = type <{ i64, ptr, i64 }>
%ClassMethod = type <{ ptr, i1, i64, ptr, ptr, ptr, ptr, i1, ptr, i64 }>
%ClassField = type <{ ptr, i1, i64, ptr, ptr, ptr, i64 }>
%Const = type <{ ptr, ptr, ptr }>
%ObjectType = type <{ i64, ptr }>
%EnumType = type <{ i64, ptr }>
%MemberExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%CallExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%BinaryExpression = type <{ i64, i1, i64, ptr, ptr, i64, ptr }>
%NewExpression = type <{ i64, i1, i64, ptr, ptr, i1, ptr }>
%VarAccessExpression = type <{ i64, i1, i64, ptr, ptr }>
%PointerType = type <{ i64, ptr }>
%Type = type <{ i64 }>
%ArrayType = type <{ i64, ptr, i64 }>
%ArrayIterator_TypeNode_ = type <{ i1, i64, i64, ptr }>
%ForStatement = type <{ i64, ptr, ptr, ptr, ptr, ptr }>
%UnaryExpression = type <{ i64, i1, i64, ptr, i64, ptr }>
%IfStatement = type <{ i64, ptr, ptr, ptr }>
%WhileStatement = type <{ i64, ptr, ptr }>
%GenericType = type <{ i64, ptr, ptr, ptr }>
%TernaryExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%MapEntry_string_Generic_ = type <{ ptr, ptr }>
%Generic = type <{ i64, ptr }>
%IndexExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%ArrayIterator_StatementNode_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_ImportClause_ = type <{ i1, i64, i64, ptr }>
%ModuleVarId = type <{ i64, i64, i64, ptr }>
%ArrayIterator_ArgNode_ = type <{ i1, i64, i64, ptr }>
%ArrayExpression = type <{ i64, i1, i64, ptr, ptr }>
%IntExpression = type <{ i64, i1, i64, ptr, i64 }>
%FloatExpression = type <{ i64, i1, i64, ptr, double }>
%ArrayIterator_ExpressionNode_ = type <{ i1, i64, i64, ptr }>
%BooleanExpression = type <{ i64, i1, i64, ptr, i1 }>
%ArrayIterator_Expression_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_Statement_ = type <{ i1, i64, i64, ptr }>
%MapEntry_string_LLVMValueRef_ = type <{ ptr, ptr }>
%ArrayIterator_Type_ = type <{ i1, i64, i64, ptr }>
%Map_string_int_ = type <{ ptr, i64, i64 }>
%MapEntry_string_int_ = type <{ ptr, i64 }>
%CGClassType = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_LLVMValueRef_ = type <{ ptr, ptr, i64, i64 }>
%CGEnumType = type <{ ptr, ptr, ptr }>
%Array_LLVMTypeRef_ = type <{ ptr, ptr, i64, i64 }>
%IntrinsicResult = type <{ ptr, ptr }>
%ArrayIterator_LLVMValueRef_ = type <{ i1, i64, i64, ptr }>

@VTablestring = internal global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @string_find, ptr @string_substring, ptr @string_get_byte, ptr @string_get_bytes, ptr @string_replace, ptr @string_to_cstring, ptr @string_ends_with, ptr @string_starts_with }>
@VTableArray_string_ = internal global <{ ptr, ptr }> <{ ptr @Array_string__pop, ptr @Array_string__find }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [28 x i8] c"Usage: %s <path> [OPTIONS]\0A\00", align 1
@2 = private unnamed_addr constant [38 x i8] c" -h, --help\09\09\09Show this help message.\00", align 1
@3 = private unnamed_addr constant [36 x i8] c" --print-ast\09\09\09Print generated AST.\00", align 1
@4 = private unnamed_addr constant [294 x i8] c" --emit <format>\09\09Emit output in a particular format. Options are:\0A  \09\09\09\09\09exe - Generates an executable.\0A  \09\09\09\09\09llvm-ir - Generates a file containing LLVM IR.\0A  \09\09\09\09\09llvm-bc - Generates a file containing LLVM bitcode.\0A  \09\09\09\09\09obj - Generates an object file\0A  \09\09\09\09\09asm - Generates Assembly code.\00", align 1
@5 = private unnamed_addr constant [50 x i8] c" -o <file>\09\09\09Specify file to put the output into.\00", align 1
@6 = private unnamed_addr constant [55 x i8] c" --target <triple>\09\09Compile to specific target triple.\00", align 1
@7 = private unnamed_addr constant [47 x i8] c" -l <lib>\09\09\09Specify a library to link against.\00", align 1
@8 = private unnamed_addr constant [34 x i8] c" -I\09\09\09\09Specify runtime directory.\00", align 1
@9 = private unnamed_addr constant [91 x i8] c" -O OPT_LEVEL \09\09\09Specify the compiler's optimization level which is a\0A \09\09\09\09value from 0-3.\00", align 1
@10 = private unnamed_addr constant [31 x i8] c" -v, --version\09\09\09Show version.\00", align 1
@11 = private unnamed_addr constant [8 x i8] c"\1B[1;31m\00", align 1
@12 = private unnamed_addr constant [22 x i8] c"[Illegal Character]: \00", align 1
@13 = private unnamed_addr constant [17 x i8] c"[Syntax Error]: \00", align 1
@14 = private unnamed_addr constant [13 x i8] c"[IO Error]: \00", align 1
@15 = private unnamed_addr constant [15 x i8] c"[Type Error]: \00", align 1
@16 = private unnamed_addr constant [15 x i8] c"[Name Error]: \00", align 1
@17 = private unnamed_addr constant [10 x i8] c"[Error]: \00", align 1
@18 = private unnamed_addr constant [35 x i8] c"Missing value after '%s' argument.\00", align 1
@19 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@20 = private unnamed_addr constant [15 x i8] c"v0.01@selfhost\00", align 1
@21 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@VTableArray_FloError_ = internal global <{ ptr, ptr }> <{ ptr @Array_FloError__pop, ptr @Array_FloError__find }>
@VTableArray_FloFile_ = internal global <{ ptr, ptr }> <{ ptr @Array_FloFile__pop, ptr @Array_FloFile__find }>
@22 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@VTableCompiler = internal global <{ ptr, ptr, ptr, ptr, ptr }> <{ ptr @Compiler_set_std_path, ptr @Compiler_register_file, ptr @Compiler_set_current_file, ptr @Compiler_print_errors, ptr @Compiler_add_builtins }>
@23 = private unnamed_addr constant [20 x i8] c"/usr/local/flo/lib/\00", align 1
@24 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@25 = private unnamed_addr constant [22 x i8] c"builtins/builtins.flo\00", align 1
@VTableFile = internal global <{ ptr, ptr, ptr }> <{ ptr @File_read_all, ptr @File_write_bytes_length, ptr @File_close }>
@26 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@27 = private unnamed_addr constant [19 x i8] c"File '%s', line %d\00", align 1
@28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@29 = private unnamed_addr constant [32 x i8] c"No such file or directory: '%s'\00", align 1
@VTableArray_Token_ = internal global <{ ptr, ptr }> <{ ptr @Array_Token__pop, ptr @Array_Token__find }>
@VTableArray_Array_Token__ = internal global <{ ptr, ptr }> <{ ptr @Array_Array_Token___pop, ptr @Array_Array_Token___find }>
@VTableArray_int_ = internal global <{ ptr, ptr }> <{ ptr @Array_int__pop, ptr @Array_int__find }>
@30 = private unnamed_addr constant [4 x i8] c"and\00", align 1
@31 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@32 = private unnamed_addr constant [4 x i8] c"let\00", align 1
@33 = private unnamed_addr constant [5 x i8] c"else\00", align 1
@34 = private unnamed_addr constant [4 x i8] c"i16\00", align 1
@35 = private unnamed_addr constant [4 x i8] c"i32\00", align 1
@36 = private unnamed_addr constant [4 x i8] c"i64\00", align 1
@37 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@38 = private unnamed_addr constant [4 x i8] c"f32\00", align 1
@39 = private unnamed_addr constant [4 x i8] c"f64\00", align 1
@40 = private unnamed_addr constant [4 x i8] c"for\00", align 1
@41 = private unnamed_addr constant [6 x i8] c"while\00", align 1
@42 = private unnamed_addr constant [4 x i8] c"fnc\00", align 1
@43 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@44 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@45 = private unnamed_addr constant [7 x i8] c"import\00", align 1
@46 = private unnamed_addr constant [8 x i8] c"private\00", align 1
@47 = private unnamed_addr constant [7 x i8] c"public\00", align 1
@48 = private unnamed_addr constant [10 x i8] c"protected\00", align 1
@49 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@50 = private unnamed_addr constant [4 x i8] c"new\00", align 1
@51 = private unnamed_addr constant [4 x i8] c"del\00", align 1
@VTableStringBuilder = internal global <{ ptr, ptr, ptr, ptr }> <{ ptr @StringBuilder_add_bytes_length, ptr @StringBuilder_append_string, ptr @StringBuilder_add_byte, ptr @StringBuilder_get_string }>
@52 = private unnamed_addr constant [4 x i8] c"033\00", align 1
@53 = private unnamed_addr constant [4 x i8] c"x1b\00", align 1
@54 = private unnamed_addr constant [6 x i8] c"u001b\00", align 1
@55 = private unnamed_addr constant [24 x i8] c"Illegal character: '%s'\00", align 1
@VTableArray_ImportClause_ = internal global <{ ptr, ptr }> <{ ptr @Array_ImportClause__pop, ptr @Array_ImportClause__find }>
@VTableArray_ImportNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_ImportNode__pop, ptr @Array_ImportNode__find }>
@VTableArray_VarDeclarationStatement_ = internal global <{ ptr, ptr }> <{ ptr @Array_VarDeclarationStatement__pop, ptr @Array_VarDeclarationStatement__find }>
@VTableArray_EnumNodeField_ = internal global <{ ptr, ptr }> <{ ptr @Array_EnumNodeField__pop, ptr @Array_EnumNodeField__find }>
@VTableArray_EnumNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_EnumNode__pop, ptr @Array_EnumNode__find }>
@VTableArray_TypeAliasNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_TypeAliasNode__pop, ptr @Array_TypeAliasNode__find }>
@VTableArray_ConstDeclarationStatement_ = internal global <{ ptr, ptr }> <{ ptr @Array_ConstDeclarationStatement__pop, ptr @Array_ConstDeclarationStatement__find }>
@VTableArray_ArgNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_ArgNode__pop, ptr @Array_ArgNode__find }>
@VTableArray_StatementNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_StatementNode__pop, ptr @Array_StatementNode__find }>
@VTableArray_MethodNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_MethodNode__pop, ptr @Array_MethodNode__find }>
@VTableArray_FieldNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_FieldNode__pop, ptr @Array_FieldNode__find }>
@VTableArray_TypeNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_TypeNode__pop, ptr @Array_TypeNode__find }>
@VTableArray_GenericParameterNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_GenericParameterNode__pop, ptr @Array_GenericParameterNode__find }>
@VTableArray_ClassDeclarationNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_ClassDeclarationNode__pop, ptr @Array_ClassDeclarationNode__find }>
@VTableArray_FunctionDeclarationNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_FunctionDeclarationNode__pop, ptr @Array_FunctionDeclarationNode__find }>
@VTableArray_ExpressionNode_ = internal global <{ ptr, ptr }> <{ ptr @Array_ExpressionNode__pop, ptr @Array_ExpressionNode__find }>
@56 = private unnamed_addr constant [23 x i8] c"Expected an Identifier\00", align 1
@57 = private unnamed_addr constant [13 x i8] c"Expected '='\00", align 1
@58 = private unnamed_addr constant [13 x i8] c"Expected ':'\00", align 1
@59 = private unnamed_addr constant [13 x i8] c"Expected '('\00", align 1
@60 = private unnamed_addr constant [13 x i8] c"Expected ')'\00", align 1
@61 = private unnamed_addr constant [13 x i8] c"Expected '{'\00", align 1
@62 = private unnamed_addr constant [13 x i8] c"Expected '}'\00", align 1
@63 = private unnamed_addr constant [13 x i8] c"Expected ','\00", align 1
@64 = private unnamed_addr constant [13 x i8] c"Expected '<'\00", align 1
@65 = private unnamed_addr constant [13 x i8] c"Expected '>'\00", align 1
@66 = private unnamed_addr constant [14 x i8] c"Expected '->'\00", align 1
@67 = private unnamed_addr constant [27 x i8] c"Expected a type definition\00", align 1
@68 = private unnamed_addr constant [4 x i8] c"Map\00", align 1
@69 = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@70 = private unnamed_addr constant [29 x i8] c"Expected an Expression value\00", align 1
@71 = private unnamed_addr constant [29 x i8] c"'%s' has no type information\00", align 1
@72 = private unnamed_addr constant [5 x i8] c"this\00", align 1
@73 = private unnamed_addr constant [20 x i8] c"Expected ':' or '('\00", align 1
@74 = private unnamed_addr constant [80 x i8] c"Illegal expression expected: 'fnc', 'class', 'enum', 'import', 'const' or 'let'\00", align 1
@VTableArray_Scope_ = internal global <{ ptr, ptr }> <{ ptr @Array_Scope__pop, ptr @Array_Scope__find }>
@VTableArray_VarDeclaration_ = internal global <{ ptr, ptr }> <{ ptr @Array_VarDeclaration__pop, ptr @Array_VarDeclaration__find }>
@VTableArray_Var_ = internal global <{ ptr, ptr }> <{ ptr @Array_Var__pop, ptr @Array_Var__find }>
@VTableArray_ConstDeclaration_ = internal global <{ ptr, ptr }> <{ ptr @Array_ConstDeclaration__pop, ptr @Array_ConstDeclaration__find }>
@VTableArray_EnumField_ = internal global <{ ptr, ptr }> <{ ptr @Array_EnumField__pop, ptr @Array_EnumField__find }>
@VTableArray_Enum_ = internal global <{ ptr, ptr }> <{ ptr @Array_Enum__pop, ptr @Array_Enum__find }>
@VTableArray_Const_ = internal global <{ ptr, ptr }> <{ ptr @Array_Const__pop, ptr @Array_Const__find }>
@VTableArray_FunctionArg_ = internal global <{ ptr, ptr }> <{ ptr @Array_FunctionArg__pop, ptr @Array_FunctionArg__find }>
@VTableArray_Statement_ = internal global <{ ptr, ptr }> <{ ptr @Array_Statement__pop, ptr @Array_Statement__find }>
@VTableArray_Type_ = internal global <{ ptr, ptr }> <{ ptr @Array_Type__pop, ptr @Array_Type__find }>
@VTableArray_ClassMethod_ = internal global <{ ptr, ptr }> <{ ptr @Array_ClassMethod__pop, ptr @Array_ClassMethod__find }>
@VTableArray_ClassField_ = internal global <{ ptr, ptr }> <{ ptr @Array_ClassField__pop, ptr @Array_ClassField__find }>
@VTableArray_Class_ = internal global <{ ptr, ptr }> <{ ptr @Array_Class__pop, ptr @Array_Class__find }>
@VTableArray_Function_ = internal global <{ ptr, ptr }> <{ ptr @Array_Function__pop, ptr @Array_Function__find }>
@VTableArray_Module_ = internal global <{ ptr, ptr }> <{ ptr @Array_Module__pop, ptr @Array_Module__find }>
@VTableArray_Expression_ = internal global <{ ptr, ptr }> <{ ptr @Array_Expression__pop, ptr @Array_Expression__find }>
@75 = private unnamed_addr constant [11 x i8] c"(%s) => %s\00", align 1
@76 = private unnamed_addr constant [4 x i8] c"%s*\00", align 1
@77 = private unnamed_addr constant [7 x i8] c"%s[%d]\00", align 1
@78 = private unnamed_addr constant [10 x i8] c"Namespace\00", align 1
@79 = private unnamed_addr constant [7 x i8] c"Record\00", align 1
@80 = private unnamed_addr constant [4 x i8] c"i%d\00", align 1
@81 = private unnamed_addr constant [7 x i8] c"record\00", align 1
@82 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@83 = private unnamed_addr constant [13 x i8] c"__generics__\00", align 1
@84 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@85 = private unnamed_addr constant [68 x i8] c"Name '%s' has already been used for another type. consider renaming\00", align 1
@86 = private unnamed_addr constant [41 x i8] c"Generic expects %d parameters but got %d\00", align 1
@87 = private unnamed_addr constant [4 x i8] c"%s_\00", align 1
@88 = private unnamed_addr constant [6 x i8] c"%s_%s\00", align 1
@89 = private unnamed_addr constant [55 x i8] c"Initilializer for global variable has to be a constant\00", align 1
@90 = private unnamed_addr constant [56 x i8] c"Expected type of '%s' but got type of '%s' on signature\00", align 1
@91 = private unnamed_addr constant [52 x i8] c"Import statement path can't be a a formatted string\00", align 1
@92 = private unnamed_addr constant [28 x i8] c"%s not found in module \22\22%s\00", align 1
@93 = private unnamed_addr constant [37 x i8] c"Illegal re-declaration of const '%s'\00", align 1
@94 = private unnamed_addr constant [48 x i8] c"Illegal re-declaration of type '%s' as function\00", align 1
@95 = private unnamed_addr constant [53 x i8] c"Expected an int type for enum type but got type '%s'\00", align 1
@96 = private unnamed_addr constant [38 x i8] c"Enum initializer has to be a constant\00", align 1
@97 = private unnamed_addr constant [36 x i8] c"Expected type '%s' but got type '%s\00", align 1
@98 = private unnamed_addr constant [7 x i8] c"__eq__\00", align 1
@99 = private unnamed_addr constant [8 x i8] c"__add__\00", align 1
@100 = private unnamed_addr constant [8 x i8] c"__sub__\00", align 1
@101 = private unnamed_addr constant [8 x i8] c"__mul__\00", align 1
@102 = private unnamed_addr constant [8 x i8] c"__div__\00", align 1
@103 = private unnamed_addr constant [7 x i8] c"__or__\00", align 1
@104 = private unnamed_addr constant [8 x i8] c"__ora__\00", align 1
@105 = private unnamed_addr constant [12 x i8] c"__getitem__\00", align 1
@106 = private unnamed_addr constant [12 x i8] c"__setitem__\00", align 1
@107 = private unnamed_addr constant [7 x i8] c"__sl__\00", align 1
@108 = private unnamed_addr constant [7 x i8] c"__sr__\00", align 1
@109 = private unnamed_addr constant [8 x i8] c"__sla__\00", align 1
@110 = private unnamed_addr constant [8 x i8] c"__sra__\00", align 1
@111 = private unnamed_addr constant [7 x i8] c"__in__\00", align 1
@112 = private unnamed_addr constant [7 x i8] c"__lt__\00", align 1
@113 = private unnamed_addr constant [7 x i8] c"__lg__\00", align 1
@114 = private unnamed_addr constant [7 x i8] c"__ne__\00", align 1
@115 = private unnamed_addr constant [7 x i8] c"__le__\00", align 1
@116 = private unnamed_addr constant [7 x i8] c"__ge__\00", align 1
@117 = private unnamed_addr constant [8 x i8] c"__pow__\00", align 1
@118 = private unnamed_addr constant [8 x i8] c"__mod__\00", align 1
@119 = private unnamed_addr constant [8 x i8] c"__del__\00", align 1
@120 = private unnamed_addr constant [76 x i8] c" is reserved only for operator overloads and cannot be used as a field name\00", align 1
@121 = private unnamed_addr constant [36 x i8] c"Field %s in class %s already exists\00", align 1
@122 = private unnamed_addr constant [89 x i8] c"Signature of inherited field %s in class %s does not match expected parent signature '%s\00", align 1
@123 = private unnamed_addr constant [49 x i8] c"Expected inherited field %s in class %s to be %s\00", align 1
@124 = private unnamed_addr constant [68 x i8] c"Expected type '%s' but got type '%s' on static field initialization\00", align 1
@125 = private unnamed_addr constant [46 x i8] c"Static field initializer has to be a constant\00", align 1
@126 = private unnamed_addr constant [65 x i8] c"Expected %d arguments for binary operator overload %s but got %d\00", align 1
@127 = private unnamed_addr constant [45 x i8] c"Binary operator overload %s cannot be static\00", align 1
@128 = private unnamed_addr constant [75 x i8] c"__iter__ method must return an iteratable object {done: bool, next(): any}\00", align 1
@129 = private unnamed_addr constant [37 x i8] c"Method %s in class %s already exists\00", align 1
@130 = private unnamed_addr constant [91 x i8] c"Signature of inherited method %s in class %s does not match expected parent signature '%s'\00", align 1
@131 = private unnamed_addr constant [50 x i8] c"Expected inherited method %s in class %s to be %s\00", align 1
@132 = private unnamed_addr constant [32 x i8] c"Static method can't be abstract\00", align 1
@133 = private unnamed_addr constant [12 x i8] c"constructor\00", align 1
@134 = private unnamed_addr constant [34 x i8] c"Class constructor can't be static\00", align 1
@135 = private unnamed_addr constant [36 x i8] c"Class constructor can't be abstract\00", align 1
@136 = private unnamed_addr constant [59 x i8] c"Can't have a abstract private method use protected instead\00", align 1
@137 = private unnamed_addr constant [6 x i8] c"super\00", align 1
@138 = private unnamed_addr constant [42 x i8] c"Can only inherit from class not type '%s'\00", align 1
@139 = private unnamed_addr constant [81 x i8] c"Class with constructor must implement all it's methods missing %s implementation\00", align 1
@140 = private unnamed_addr constant [39 x i8] c"Method missing ending return statement\00", align 1
@141 = private unnamed_addr constant [41 x i8] c"Function missing ending return statement\00", align 1
@142 = private unnamed_addr constant [24 x i8] c"length has to be an int\00", align 1
@143 = private unnamed_addr constant [31 x i8] c"length is a non-constant value\00", align 1
@144 = private unnamed_addr constant [29 x i8] c"length should be an unsigned\00", align 1
@145 = private unnamed_addr constant [20 x i8] c"Undefined type '%s'\00", align 1
@146 = private unnamed_addr constant [48 x i8] c"Expected element type of '%s' but got type '%s'\00", align 1
@147 = private unnamed_addr constant [24 x i8] c"Undefined variable '%s'\00", align 1
@148 = private unnamed_addr constant [34 x i8] c"Cannot assign a value to a record\00", align 1
@149 = private unnamed_addr constant [36 x i8] c"Cannot assign a value to a constant\00", align 1
@150 = private unnamed_addr constant [52 x i8] c"Illegal assignment of variable of type '%s' to '%s'\00", align 1
@151 = private unnamed_addr constant [7 x i8] c"__gt__\00", align 1
@152 = private unnamed_addr constant [8 x i8] c"__and__\00", align 1
@153 = private unnamed_addr constant [8 x i8] c"__xor__\00", align 1
@154 = private unnamed_addr constant [37 x i8] c"Expected type '%s' but got type '%s'\00", align 1
@155 = private unnamed_addr constant [55 x i8] c"Unsupported binary operator overload for operator '%s'\00", align 1
@156 = private unnamed_addr constant [108 x i8] c"No binary operator overload for '%s' in object of class '%s' please implement the method %s to support this\00", align 1
@157 = private unnamed_addr constant [114 x i8] c"No operator overload for index set operator on %s object please implement method __setitem__ to use in this class\00", align 1
@158 = private unnamed_addr constant [6 x i8] c"Range\00", align 1
@159 = private unnamed_addr constant [58 x i8] c"Illegal binary operation '%s' between types '%s' and '%s'\00", align 1
@160 = private unnamed_addr constant [8 x i8] c"++(pre)\00", align 1
@161 = private unnamed_addr constant [8 x i8] c"--(pre)\00", align 1
@162 = private unnamed_addr constant [39 x i8] c"Illegal unary operation %s on constant\00", align 1
@163 = private unnamed_addr constant [40 x i8] c"Illegal unary operation %s on type '%s'\00", align 1
@164 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@165 = private unnamed_addr constant [30 x i8] c"Cannot cast type '%s' to '%s'\00", align 1
@166 = private unnamed_addr constant [45 x i8] c"Cannot construct an object of abstract class\00", align 1
@167 = private unnamed_addr constant [55 x i8] c"Expected %d argument(s) on constructor call but got %d\00", align 1
@168 = private unnamed_addr constant [71 x i8] c"Expected type '%s' but got type '%s' as constructor call argument (%d)\00", align 1
@169 = private unnamed_addr constant [68 x i8] c"New operator expects 1 argument for pointers but got %d argument(s)\00", align 1
@170 = private unnamed_addr constant [74 x i8] c"New operator for pointers expects argument of type '%s' but got type '%s'\00", align 1
@171 = private unnamed_addr constant [65 x i8] c"New operator expects either an a pointer or an object not a '%s'\00", align 1
@172 = private unnamed_addr constant [76 x i8] c"Property '%s' is defined as private and only accessible within the class %s\00", align 1
@173 = private unnamed_addr constant [71 x i8] c"Property '%s' is defined as %s and only accessible within the class %s\00", align 1
@174 = private unnamed_addr constant [52 x i8] c"Property '%s' doesn't exist in object of class '%s'\00", align 1
@175 = private unnamed_addr constant [50 x i8] c"Property '%s' is not a static member in class '%s\00", align 1
@176 = private unnamed_addr constant [40 x i8] c"'%s' is not an element of enum the '%s'\00", align 1
@177 = private unnamed_addr constant [10 x i8] c"copy_from\00", align 1
@178 = private unnamed_addr constant [10 x i8] c"move_from\00", align 1
@179 = private unnamed_addr constant [10 x i8] c"fill_with\00", align 1
@180 = private unnamed_addr constant [7 x i8] c"resize\00", align 1
@181 = private unnamed_addr constant [8 x i8] c"compare\00", align 1
@182 = private unnamed_addr constant [28 x i8] c"intrinsic %s is not defined\00", align 1
@183 = private unnamed_addr constant [38 x i8] c"Cannot get property '%s' of type '%s'\00", align 1
@184 = private unnamed_addr constant [53 x i8] c"Expected type '%s' from first case but got type '%s'\00", align 1
@185 = private unnamed_addr constant [122 x i8] c"No operator overload for indexing operator on %s object please implement method __getitem__ to use indexing in this class\00", align 1
@186 = private unnamed_addr constant [35 x i8] c"Expected an integer type for index\00", align 1
@187 = private unnamed_addr constant [39 x i8] c"Cannot index into a value of type '%s'\00", align 1
@188 = private unnamed_addr constant [47 x i8] c"Expected a function type for call but got '%s'\00", align 1
@189 = private unnamed_addr constant [52 x i8] c"Expected %d argument(s) on function call but got %d\00", align 1
@190 = private unnamed_addr constant [63 x i8] c"Expected type '%s' but got type '%s' as function call argument\00", align 1
@191 = private unnamed_addr constant [66 x i8] c"Expected argument 1 to be of type to be of a pointer but got '%s'\00", align 1
@192 = private unnamed_addr constant [49 x i8] c"Expected 2 arguments on function call but got %d\00", align 1
@193 = private unnamed_addr constant [63 x i8] c"Expected an int of but got type '%s' as function call argument\00", align 1
@194 = private unnamed_addr constant [49 x i8] c"Expected 3 arguments on function call but got %d\00", align 1
@195 = private unnamed_addr constant [66 x i8] c"Expected type '%s' of but got type '%s' as function call argument\00", align 1
@196 = private unnamed_addr constant [7 x i8] c"3.4E38\00", align 1
@197 = private unnamed_addr constant [26 x i8] c"Variable '%s' has no type\00", align 1
@198 = private unnamed_addr constant [70 x i8] c"Cannot declare a value as null without any type hint for future usage\00", align 1
@199 = private unnamed_addr constant [61 x i8] c"Expected type '%s' but got type '%s' on variable declaration\00", align 1
@200 = private unnamed_addr constant [57 x i8] c"Illegal re-declaration of already declared variable '%s'\00", align 1
@201 = private unnamed_addr constant [49 x i8] c"Cannot assign a non-constant value to a constant\00", align 1
@202 = private unnamed_addr constant [58 x i8] c"Expected type '%s' but got type '%s' on const declaration\00", align 1
@203 = private unnamed_addr constant [29 x i8] c"Iterator has to be an object\00", align 1
@204 = private unnamed_addr constant [47 x i8] c"Iterator type has to have __iter__ as property\00", align 1
@205 = private unnamed_addr constant [7 x i8] c"tmp_it\00", align 1
@206 = private unnamed_addr constant [30 x i8] c"Illegal break outside of loop\00", align 1
@207 = private unnamed_addr constant [33 x i8] c"Illegal continue outside of loop\00", align 1
@208 = private unnamed_addr constant [57 x i8] c"Expected return type of '%s' but got return type of '%s'\00", align 1
@209 = private unnamed_addr constant [33 x i8] c"Function return type is not void\00", align 1
@VTableGeneratedModule = internal global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @GeneratedModule_run_passes, ptr @GeneratedModule_exec, ptr @GeneratedModule_set_target_machine, ptr @GeneratedModule_write_obj, ptr @GeneratedModule_write_ir, ptr @GeneratedModule_write_bc, ptr @GeneratedModule_write_asm }>
@210 = private unnamed_addr constant [10 x i8] c"Panic: %s\00", align 1
@211 = private unnamed_addr constant [10 x i8] c"error: %s\00", align 1
@212 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@213 = private unnamed_addr constant [49 x i8] c"Main function not found in module; can't execute\00", align 1
@214 = private unnamed_addr constant [8 x i8] c"generic\00", align 1
@VTableArray_LLVMValueRef_ = internal global <{ ptr, ptr }> <{ ptr @Array_LLVMValueRef__pop, ptr @Array_LLVMValueRef__find }>
@VTableArray_LLVMTypeRef_ = internal global <{ ptr, ptr }> <{ ptr @Array_LLVMTypeRef__pop, ptr @Array_LLVMTypeRef__find }>
@215 = private unnamed_addr constant [9 x i8] c"%d;%d;%d\00", align 1
@216 = private unnamed_addr constant [33 x i8] c"Type could not be code generated\00", align 1
@217 = private unnamed_addr constant [8 x i8] c"realloc\00", align 1
@218 = private unnamed_addr constant [7 x i8] c"memcmp\00", align 1
@219 = private unnamed_addr constant [6 x i8] c"%s {\0A\00", align 1
@220 = private unnamed_addr constant [7 x i8] c" ... }\00", align 1
@221 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@222 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@223 = private unnamed_addr constant [13 x i8] c" '%s': %s, \0A\00", align 1
@224 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@225 = private unnamed_addr constant [18 x i8] c"string_from_bytes\00", align 1
@226 = private unnamed_addr constant [55 x i8] c"Could not find function 'string.from_bytes' in program\00", align 1
@227 = private unnamed_addr constant [55 x i8] c"Array expression is not a constant (codegen_array_exp)\00", align 1
@228 = private unnamed_addr constant [46 x i8] c"This should never happen! (get_expr_mem: var)\00", align 1
@229 = private unnamed_addr constant [9 x i8] c"arrayidx\00", align 1
@230 = private unnamed_addr constant [7 x i8] c"ptridx\00", align 1
@231 = private unnamed_addr constant [9 x i8] c"%s;%d;%d\00", align 1
@232 = private unnamed_addr constant [10 x i8] c"memberidx\00", align 1
@233 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@234 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@235 = private unnamed_addr constant [12 x i8] c"llvm.pow.%s\00", align 1
@236 = private unnamed_addr constant [34 x i8] c"Unknown bin expression case case!\00", align 1
@237 = private unnamed_addr constant [11 x i8] c"incdec.ptr\00", align 1
@238 = private unnamed_addr constant [51 x i8] c"This should never happen; (codegen_var_access_exp)\00", align 1
@239 = private unnamed_addr constant [11 x i8] c"true_block\00", align 1
@240 = private unnamed_addr constant [12 x i8] c"false_block\00", align 1
@241 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@242 = private unnamed_addr constant [8 x i8] c"ternary\00", align 1
@243 = private unnamed_addr constant [52 x i8] c"this should not happen; (codegen_member_exp); class\00", align 1
@244 = private unnamed_addr constant [60 x i8] c"This should never happen; (codegen_member_expr; class prop)\00", align 1
@245 = private unnamed_addr constant [51 x i8] c"this should not happen; (codegen_member_exp); enum\00", align 1
@246 = private unnamed_addr constant [11 x i8] c"to_cstring\00", align 1
@247 = private unnamed_addr constant [22 x i8] c"instrinsic not found!\00", align 1
@248 = private unnamed_addr constant [9 x i8] c"if.entry\00", align 1
@249 = private unnamed_addr constant [6 x i8] c"ifend\00", align 1
@250 = private unnamed_addr constant [10 x i8] c"for.entry\00", align 1
@251 = private unnamed_addr constant [9 x i8] c"for.cond\00", align 1
@252 = private unnamed_addr constant [9 x i8] c"for.body\00", align 1
@253 = private unnamed_addr constant [9 x i8] c"for.incr\00", align 1
@254 = private unnamed_addr constant [8 x i8] c"for.end\00", align 1
@255 = private unnamed_addr constant [12 x i8] c"while.entry\00", align 1
@256 = private unnamed_addr constant [10 x i8] c"while.end\00", align 1
@257 = private unnamed_addr constant [48 x i8] c"Could not find constructor for constructor call\00", align 1
@258 = private unnamed_addr constant [76 x i8] c"This should not happen: could not find function %s_%s (declare_class_props)\00", align 1
@259 = private unnamed_addr constant [9 x i8] c"VTable%s\00", align 1
@260 = private unnamed_addr constant [15 x i8] c"%s_constructor\00", align 1
@261 = private unnamed_addr constant [6 x i8] c"%s.%s\00", align 1
@262 = private unnamed_addr constant [9 x i8] c"%s_names\00", align 1
@263 = private unnamed_addr constant [7 x i8] c"--emit\00", align 1
@264 = private unnamed_addr constant [4 x i8] c"exe\00", align 1
@265 = private unnamed_addr constant [14 x i8] c"/tmp/output.o\00", align 1
@266 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@267 = private unnamed_addr constant [5 x i8] c"-l%s\00", align 1
@268 = private unnamed_addr constant [23 x i8] c"%s -no-pie %s %s -o %s\00", align 1
@269 = private unnamed_addr constant [8 x i8] c"llvm-ir\00", align 1
@270 = private unnamed_addr constant [10 x i8] c"output.ll\00", align 1
@271 = private unnamed_addr constant [8 x i8] c"llvm-bc\00", align 1
@272 = private unnamed_addr constant [10 x i8] c"output.bc\00", align 1
@273 = private unnamed_addr constant [4 x i8] c"obj\00", align 1
@274 = private unnamed_addr constant [4 x i8] c"asm\00", align 1
@275 = private unnamed_addr constant [25 x i8] c"No input file specified.\00", align 1

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @string_find(ptr nocapture readonly %0, ptr nocapture readonly %1, i64 %2) #0 {
for.entry:
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp sgt i64 %3, %2
  br i1 %4, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i8, ptr %5, align 1
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.026 = phi i64 [ %2, %for.body.lr.ph ], [ %15, %ifend ]
  %ptridx3 = getelementptr inbounds i8, ptr %7, i64 %i.026
  %8 = load i8, ptr %ptridx3, align 1
  %9 = icmp eq i8 %6, %8
  br i1 %9, label %if.entry, label %ifend

common.ret.loopexit:                              ; preds = %while.entry, %ifend11
  %10 = phi i64 [ %14, %ifend11 ], [ %17, %while.entry ]
  %common.ret.op.ph = phi i64 [ %i.026, %ifend11 ], [ -1, %while.entry ]
  store i64 %10, ptr %x, align 8
  br label %common.ret

common.ret:                                       ; preds = %ifend, %for.entry, %common.ret.loopexit, %if.entry
  %common.ret.op = phi i64 [ %i.026, %if.entry ], [ %common.ret.op.ph, %common.ret.loopexit ], [ -1, %for.entry ], [ -1, %ifend ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  %x = alloca i64, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %11 = load i64, ptr %memberidx4, align 4
  %12 = add i64 %11, -1
  store i64 %12, ptr %x, align 8
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %while.entry.preheader, label %common.ret

while.entry.preheader:                            ; preds = %if.entry
  %x.promoted = load i64, ptr %x, align 8
  %smin = call i64 @llvm.smin.i64(i64 %x.promoted, i64 1)
  %14 = add i64 %smin, -1
  br label %while.entry

ifend:                                            ; preds = %for.body
  %15 = add nsw i64 %i.026, 1
  %16 = icmp slt i64 %15, %3
  br i1 %16, label %for.body, label %common.ret

while.entry:                                      ; preds = %while.entry.preheader, %ifend11
  %17 = phi i64 [ %x.promoted, %while.entry.preheader ], [ %21, %ifend11 ]
  %ptridx6 = getelementptr inbounds i8, ptr %5, i64 %17
  %18 = load i8, ptr %ptridx6, align 1
  %19 = add nsw i64 %17, %i.026
  %ptridx8 = getelementptr inbounds i8, ptr %7, i64 %19
  %20 = load i8, ptr %ptridx8, align 1
  %.not = icmp eq i8 %18, %20
  br i1 %.not, label %ifend11, label %common.ret.loopexit

ifend11:                                          ; preds = %while.entry
  %21 = add nsw i64 %17, -1
  %22 = icmp sgt i64 %17, 1
  br i1 %22, label %while.entry, label %common.ret.loopexit
}

define internal noalias ptr @string_substring(ptr nocapture readonly %0, i64 %1, i64 %2) {
  %4 = trunc i64 %2 to i32
  %5 = tail call ptr @malloc(i32 %4)
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 %1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 2147483648 %7, i64 %2, i1 false)
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %5, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 %2, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 %2, ptr %memberidx2.i, align 4
  ret ptr %8
}

define internal ptr @string_replace(ptr %0, ptr %1, ptr nocapture readonly %2) {
  %4 = load ptr, ptr %0, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = call i64 %5(ptr nonnull %0, ptr %1, i64 0)
  %7 = icmp sgt i64 %6, -1
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %3, %if.entry
  %common.ret.op = phi ptr [ %23, %if.entry ], [ %0, %3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx1 = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = sub i64 %8, %9
  %memberidx3 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  %11 = load i64, ptr %memberidx3, align 4
  %12 = add nsw i64 %10, %11
  %13 = trunc i64 %12 to i32
  %14 = tail call ptr @malloc(i32 %13)
  %memberidx4 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr align 8 %15, i64 %6, i1 false)
  %ptridx = getelementptr inbounds i8, ptr %14, i64 %6
  %memberidx6 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  %16 = load ptr, ptr %memberidx6, align 8
  %17 = load i64, ptr %memberidx3, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %ptridx, ptr align 8 %16, i64 %17, i1 false)
  %18 = add nsw i64 %17, %6
  %ptridx9 = getelementptr inbounds i8, ptr %14, i64 %18
  %19 = load i64, ptr %memberidx2, align 4
  %20 = add nsw i64 %19, %6
  %ptridx14 = getelementptr inbounds i8, ptr %15, i64 %20
  %21 = load i64, ptr %memberidx1, align 4
  %22 = sub i64 %21, %20
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %ptridx9, ptr align 2147483648 %ptridx14, i64 %22, i1 false)
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %14, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i, align 4
  br label %common.ret
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn
define internal ptr @string_get_bytes(ptr nocapture readonly %0) #1 {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  ret ptr %2
}

define internal noalias ptr @string_to_cstring(ptr nocapture readonly %0) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = trunc i64 %2 to i32
  %4 = add i32 %3, 1
  %5 = tail call ptr @malloc(i32 %4)
  %memberidx1 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %memberidx, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %6, i64 %7, i1 false)
  %ptridx = getelementptr inbounds i8, ptr %5, i64 %7
  store i8 0, ptr %ptridx, align 1
  ret ptr %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly willreturn
define internal i8 @string_get_byte(ptr nocapture readonly %0, i64 %1) #2 {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds i8, ptr %3, i64 %1
  %4 = load i8, ptr %ptridx, align 1
  ret i8 %4
}

define internal i1 @string_ends_with(ptr nocapture readonly %0, ptr nocapture readonly %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp slt i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %12, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 %3
  %8 = sub i64 0, %4
  %9 = getelementptr inbounds i8, ptr %7, i64 %8
  %memberidx5 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %11 = call i64 @memcmp(ptr %9, ptr %10, i64 %4)
  %12 = icmp eq i64 %11, 0
  br label %common.ret
}

define internal i1 @string_starts_with(ptr nocapture readonly %0, ptr nocapture readonly %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp slt i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %9, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = call i64 @memcmp(ptr %6, ptr %7, i64 %4)
  %9 = icmp eq i64 %8, 0
  br label %common.ret
}

declare noalias ptr @malloc(i32) local_unnamed_addr

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("realloc") allocsize(1)
declare noalias noundef ptr @realloc(ptr allocptr nocapture, i64 noundef) local_unnamed_addr #4

declare i64 @memcmp(ptr, ptr, i64) local_unnamed_addr

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("free")
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(ptr nocapture) local_unnamed_addr #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_string__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

define internal i64 @Array_string__find(ptr nocapture readonly %0, ptr nocapture readonly %1) {
for.entry:
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 1
  %memberidx1.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %12, %ifend ]
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp eq i64 %6, %7
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %for.body
  %memberidx2.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %9 = load ptr, ptr %memberidx3.i, align 8
  %10 = call i64 @memcmp(ptr %8, ptr %9, i64 %6)
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %ifend.i, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %ifend.i ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body, %ifend.i
  %12 = add nuw nsw i64 %i.06, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %common.ret
}

; Function Attrs: nofree
declare void @system(ptr nocapture noundef readonly) local_unnamed_addr #8

; Function Attrs: nofree
declare void @write(i64 noundef, ptr nocapture noundef readonly, i64 noundef) local_unnamed_addr #8

declare i64 @asprintf(ptr, ptr, ...) local_unnamed_addr

define internal fastcc ptr @flag_value_or(ptr %0, ptr %1, ptr readnone %2) unnamed_addr {
  %4 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr }>, ptr %4, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call i64 %5(ptr nonnull %0, ptr %1)
  %.not = icmp eq i64 %6, -1
  br i1 %.not, label %common.ret, label %if.entry

if.entry:                                         ; preds = %3
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  %8 = add nsw i64 %6, 1
  %9 = icmp sgt i64 %7, %8
  br i1 %9, label %if.entry2, label %else3

common.ret:                                       ; preds = %else3, %3, %if.entry2
  %common.ret.op = phi ptr [ %11, %if.entry2 ], [ %2, %3 ], [ %2, %else3 ]
  ret ptr %common.ret.op

if.entry2:                                        ; preds = %if.entry
  %memberidx.i = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %10, i64 %8
  %11 = load ptr, ptr %ptridx.i, align 8
  br label %common.ret

else3:                                            ; preds = %if.entry
  %12 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i64 0, i32 5
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = call ptr %13(ptr nonnull %1)
  %15 = alloca ptr, align 8
  %16 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %15, ptr nonnull @18, ptr %14)
  %17 = load ptr, ptr %15, align 8
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %18, align 8
  %memberidx.i11 = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  store ptr %17, ptr %memberidx.i11, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  store i64 %16, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 3
  store i64 %16, ptr %memberidx2.i, align 4
  tail call void @free(ptr %14)
  call fastcc void @print_message_error(i64 4, ptr nonnull %18)
  br label %common.ret
}

define internal fastcc void @print_message_error(i64 %0, ptr %1) unnamed_addr {
  %3 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @11, i64 7, i1 false)
  %4 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %4, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  store ptr %3, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i, align 4
  %5 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %6 = call ptr %5(ptr nonnull %4)
  %7 = load i64, ptr %memberidx1.i.i.i, align 4
  call void @write(i64 1, ptr %6, i64 %7)
  switch i64 %0, label %else11 [
    i64 0, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 5, label %if.entry7
    i64 1, label %if.entry10
  ]

if.entry:                                         ; preds = %2
  %8 = call ptr @malloc(i32 21)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(21) %8, ptr noundef nonnull align 8 dereferenceable(21) @12, i64 21, i1 false)
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i17 = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i17, align 8
  %memberidx1.i.i18 = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 21, ptr %memberidx1.i.i18, align 4
  br label %ifend

ifend:                                            ; preds = %if.entry10, %else11, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink51 = phi ptr [ %29, %if.entry10 ], [ %31, %else11 ], [ %27, %if.entry7 ], [ %25, %if.entry4 ], [ %23, %if.entry1 ], [ %9, %if.entry ]
  %.sink = phi i64 [ 14, %if.entry10 ], [ 9, %else11 ], [ 14, %if.entry7 ], [ 12, %if.entry4 ], [ 16, %if.entry1 ], [ 21, %if.entry ]
  %memberidx1.i.i39.sink = phi ptr [ %memberidx1.i.i39, %if.entry10 ], [ %memberidx1.i.i44, %else11 ], [ %memberidx1.i.i34, %if.entry7 ], [ %memberidx1.i.i29, %if.entry4 ], [ %memberidx1.i.i24, %if.entry1 ], [ %memberidx1.i.i18, %if.entry ]
  %memberidx2.i.i40 = getelementptr inbounds %string, ptr %.sink51, i64 0, i32 3
  store i64 %.sink, ptr %memberidx2.i.i40, align 4
  %10 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %11 = call ptr %10(ptr nonnull %.sink51)
  %12 = load i64, ptr %memberidx1.i.i39.sink, align 4
  call void @write(i64 1, ptr %11, i64 %12)
  %13 = call ptr @malloc(i32 4)
  store i32 1831885595, ptr %13, align 8
  %14 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i1.i, align 8
  %memberidx1.i.i2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i2.i, align 4
  %memberidx2.i.i3.i = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i3.i, align 4
  %15 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %16 = call ptr %15(ptr nonnull %14)
  %17 = load i64, ptr %memberidx1.i.i2.i, align 4
  call void @write(i64 1, ptr %16, i64 %17)
  %18 = load ptr, ptr %1, align 8
  %memberidx.i.i21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 3
  %19 = load ptr, ptr %memberidx.i.i21, align 8
  %20 = call ptr %19(ptr nonnull %1)
  %memberidx1.i.i22 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %21 = load i64, ptr %memberidx1.i.i22, align 4
  call void @write(i64 1, ptr %20, i64 %21)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  ret void

if.entry1:                                        ; preds = %2
  %22 = call ptr @malloc(i32 16)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %22, ptr noundef nonnull align 8 dereferenceable(16) @13, i64 16, i1 false)
  %23 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i23 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i23, align 8
  %memberidx1.i.i24 = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 16, ptr %memberidx1.i.i24, align 4
  br label %ifend

if.entry4:                                        ; preds = %2
  %24 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %24, ptr noundef nonnull align 8 dereferenceable(12) @14, i64 12, i1 false)
  %25 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %25, align 8
  %memberidx.i.i28 = getelementptr inbounds %string, ptr %25, i64 0, i32 1
  store ptr %24, ptr %memberidx.i.i28, align 8
  %memberidx1.i.i29 = getelementptr inbounds %string, ptr %25, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i29, align 4
  br label %ifend

if.entry7:                                        ; preds = %2
  %26 = call ptr @malloc(i32 14)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %26, ptr noundef nonnull align 8 dereferenceable(14) @15, i64 14, i1 false)
  %27 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i33 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i33, align 8
  %memberidx1.i.i34 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i34, align 4
  br label %ifend

if.entry10:                                       ; preds = %2
  %28 = call ptr @malloc(i32 14)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %28, ptr noundef nonnull align 8 dereferenceable(14) @16, i64 14, i1 false)
  %29 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %29, align 8
  %memberidx.i.i38 = getelementptr inbounds %string, ptr %29, i64 0, i32 1
  store ptr %28, ptr %memberidx.i.i38, align 8
  %memberidx1.i.i39 = getelementptr inbounds %string, ptr %29, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i39, align 4
  br label %ifend

else11:                                           ; preds = %2
  %30 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %30, ptr noundef nonnull align 8 dereferenceable(9) @17, i64 9, i1 false)
  %31 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i43 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i43, align 8
  %memberidx1.i.i44 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i44, align 4
  br label %ifend
}

define i64 @main(i64 %0, ptr nocapture readonly %1) local_unnamed_addr {
  %3 = alloca %CodeGen, align 8
  %4 = alloca %TypeChecker, align 8
  %5 = alloca ptr, align 8
  %6 = icmp sgt i64 %0, 1
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %args = alloca ptr, align 8
  %7 = call ptr @malloc(i32 32)
  store ptr @VTableArray_string_, ptr %7, align 8
  %memberidx.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 1
  %8 = call ptr @malloc(i32 64)
  store ptr %8, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  br label %for.body.i

for.body.i:                                       ; preds = %if.entry, %Array_string____sl__.exit.i
  %i.0.i332 = phi i64 [ %23, %Array_string____sl__.exit.i ], [ 0, %if.entry ]
  %ptridx.i = getelementptr inbounds ptr, ptr %1, i64 %i.0.i332
  %9 = load ptr, ptr %ptridx.i, align 8
  %10 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %9)
  %11 = trunc i64 %10 to i32
  %12 = call ptr @malloc(i32 %11)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %9, i64 %10, i1 false)
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %10, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %10, ptr %memberidx2.i.i.i, align 4
  %14 = load i64, ptr %memberidx.i.i, align 4
  %15 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp slt i64 %14, %15
  br i1 %.not.i.i, label %Array_string____sl__.exit.i, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %for.body.i
  %16 = shl i64 %15, 1
  store i64 %16, ptr %memberidx1.i.i, align 4
  %17 = load ptr, ptr %memberidx2.i.i, align 8
  %18 = shl i64 %15, 4
  %19 = call ptr @realloc(ptr %17, i64 %18)
  store ptr %19, ptr %memberidx2.i.i, align 8
  br label %Array_string____sl__.exit.i

Array_string____sl__.exit.i:                      ; preds = %if.entry.i.i, %for.body.i
  %20 = load i64, ptr %memberidx.i.i, align 4
  %21 = add nsw i64 %20, 1
  store i64 %21, ptr %memberidx.i.i, align 4
  %22 = load ptr, ptr %memberidx2.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %22, i64 %20
  store ptr %13, ptr %ptridx.i.i, align 8
  %23 = add nuw nsw i64 %i.0.i332, 1
  %24 = icmp slt i64 %23, %0
  br i1 %24, label %for.body.i, label %parse_args.exit

parse_args.exit:                                  ; preds = %Array_string____sl__.exit.i
  store ptr %7, ptr %args, align 8
  %25 = call ptr @malloc(i32 2)
  store i16 30253, ptr %25, align 8
  %26 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %26, align 8
  %memberidx.i.i93 = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  store ptr %25, ptr %memberidx.i.i93, align 8
  %memberidx1.i.i94 = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i94, align 4
  %memberidx2.i.i95 = getelementptr inbounds %string, ptr %26, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i95, align 4
  %27 = load ptr, ptr %7, align 8
  %memberidx.i.i96 = getelementptr inbounds <{ ptr, ptr }>, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i96, align 8
  %29 = call i64 %28(ptr nonnull %7, ptr nonnull %26)
  %30 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %30, ptr noundef nonnull align 8 dereferenceable(9) @19, i64 9, i1 false)
  %31 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i97 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i97, align 8
  %memberidx1.i.i98 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i98, align 4
  %memberidx2.i.i99 = getelementptr inbounds %string, ptr %31, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i99, align 4
  %32 = load ptr, ptr %7, align 8
  %memberidx.i.i100 = getelementptr inbounds <{ ptr, ptr }>, ptr %32, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i100, align 8
  %34 = call i64 %33(ptr nonnull %7, ptr nonnull %31)
  %35 = and i64 %34, %29
  %.not280 = icmp eq i64 %35, -1
  br i1 %.not280, label %ifend3, label %if.entry1

common.ret:                                       ; preds = %TypeChecker_check.exit, %ifend24, %ifend17, %if.entry15, %if.entry4, %if.entry1, %ifend39, %else
  %common.ret.op = phi i64 [ 1, %else ], [ %code.0, %ifend39 ], [ 0, %if.entry1 ], [ 0, %if.entry4 ], [ 1, %if.entry15 ], [ 1, %ifend17 ], [ 1, %ifend24 ], [ 1, %TypeChecker_check.exit ]
  ret i64 %common.ret.op

else:                                             ; preds = %2
  %36 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %36, ptr noundef nonnull align 8 dereferenceable(24) @275, i64 24, i1 false)
  %37 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %37, align 8
  %memberidx.i.i101 = getelementptr inbounds %string, ptr %37, i64 0, i32 1
  store ptr %36, ptr %memberidx.i.i101, align 8
  %memberidx1.i.i102 = getelementptr inbounds %string, ptr %37, i64 0, i32 2
  store i64 24, ptr %memberidx1.i.i102, align 4
  %memberidx2.i.i103 = getelementptr inbounds %string, ptr %37, i64 0, i32 3
  store i64 24, ptr %memberidx2.i.i103, align 4
  call fastcc void @print_message_error(i64 4, ptr nonnull %37)
  br label %common.ret

if.entry1:                                        ; preds = %parse_args.exit
  %38 = call ptr @malloc(i32 14)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %38, ptr noundef nonnull align 8 dereferenceable(14) @20, i64 14, i1 false)
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i104 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i104, align 8
  %memberidx1.i.i105 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i105, align 4
  %memberidx2.i.i106 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 14, ptr %memberidx2.i.i106, align 4
  %40 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %41 = call ptr %40(ptr nonnull %39)
  %42 = load i64, ptr %memberidx1.i.i105, align 4
  call void @write(i64 1, ptr %41, i64 %42)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  br label %common.ret

ifend3:                                           ; preds = %parse_args.exit
  %43 = call ptr @malloc(i32 2)
  store i16 26669, ptr %43, align 8
  %44 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i109 = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i109, align 8
  %memberidx1.i.i110 = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i110, align 4
  %memberidx2.i.i111 = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i111, align 4
  %45 = load ptr, ptr %7, align 8
  %memberidx.i.i112 = getelementptr inbounds <{ ptr, ptr }>, ptr %45, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i.i112, align 8
  %47 = call i64 %46(ptr nonnull %7, ptr nonnull %44)
  %48 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %48, ptr noundef nonnull align 8 dereferenceable(6) @21, i64 6, i1 false)
  %49 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %49, align 8
  %memberidx.i.i113 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  store ptr %48, ptr %memberidx.i.i113, align 8
  %memberidx1.i.i114 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i114, align 4
  %memberidx2.i.i115 = getelementptr inbounds %string, ptr %49, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i115, align 4
  %50 = load ptr, ptr %7, align 8
  %memberidx.i.i116 = getelementptr inbounds <{ ptr, ptr }>, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i.i116, align 8
  %52 = call i64 %51(ptr nonnull %7, ptr nonnull %49)
  %53 = and i64 %52, %47
  %.not281 = icmp eq i64 %53, -1
  br i1 %.not281, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend3
  %54 = load ptr, ptr %memberidx2.i.i, align 8
  %55 = load ptr, ptr %54, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %56 = load ptr, ptr %55, align 8
  %memberidx.i117 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx.i117, align 8
  %58 = call ptr %57(ptr nonnull %55)
  %59 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @1, ptr %58)
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i118 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i118, align 8
  %memberidx1.i.i119 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 %59, ptr %memberidx1.i.i119, align 4
  %memberidx2.i.i120 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 %59, ptr %memberidx2.i.i120, align 4
  call void @free(ptr %58)
  %62 = load ptr, ptr %61, align 8
  %memberidx.i.i1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 3
  %63 = load ptr, ptr %memberidx.i.i1.i, align 8
  %64 = call ptr %63(ptr nonnull %61)
  %65 = load i64, ptr %memberidx1.i.i119, align 4
  call void @write(i64 1, ptr %64, i64 %65)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %66 = call ptr @malloc(i32 8)
  store i64 4202788979706449999, ptr %66, align 8
  %67 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %67, align 8
  %memberidx.i.i3.i = getelementptr inbounds %string, ptr %67, i64 0, i32 1
  store ptr %66, ptr %memberidx.i.i3.i, align 8
  %memberidx1.i.i4.i = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i4.i, align 4
  %memberidx2.i.i.i121 = getelementptr inbounds %string, ptr %67, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i.i121, align 4
  %68 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %69 = call ptr %68(ptr nonnull %67)
  %70 = load i64, ptr %memberidx1.i.i4.i, align 4
  call void @write(i64 1, ptr %69, i64 %70)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %71 = call ptr @malloc(i32 37)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(37) %71, ptr noundef nonnull align 8 dereferenceable(37) @2, i64 37, i1 false)
  %72 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i.i7.i122 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i.i7.i122, align 8
  %memberidx1.i.i8.i = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 37, ptr %memberidx1.i.i8.i, align 4
  %memberidx2.i.i9.i = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 37, ptr %memberidx2.i.i9.i, align 4
  %73 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %74 = call ptr %73(ptr nonnull %72)
  %75 = load i64, ptr %memberidx1.i.i8.i, align 4
  call void @write(i64 1, ptr %74, i64 %75)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %76 = call ptr @malloc(i32 35)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %76, ptr noundef nonnull align 8 dereferenceable(35) @3, i64 35, i1 false)
  %77 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %77, align 8
  %memberidx.i.i12.i = getelementptr inbounds %string, ptr %77, i64 0, i32 1
  store ptr %76, ptr %memberidx.i.i12.i, align 8
  %memberidx1.i.i13.i = getelementptr inbounds %string, ptr %77, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i13.i, align 4
  %memberidx2.i.i14.i = getelementptr inbounds %string, ptr %77, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i14.i, align 4
  %78 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %79 = call ptr %78(ptr nonnull %77)
  %80 = load i64, ptr %memberidx1.i.i13.i, align 4
  call void @write(i64 1, ptr %79, i64 %80)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %81 = call ptr @malloc(i32 293)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(293) %81, ptr noundef nonnull align 8 dereferenceable(293) @4, i64 293, i1 false)
  %82 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %82, align 8
  %memberidx.i.i17.i = getelementptr inbounds %string, ptr %82, i64 0, i32 1
  store ptr %81, ptr %memberidx.i.i17.i, align 8
  %memberidx1.i.i18.i = getelementptr inbounds %string, ptr %82, i64 0, i32 2
  store i64 293, ptr %memberidx1.i.i18.i, align 4
  %memberidx2.i.i19.i = getelementptr inbounds %string, ptr %82, i64 0, i32 3
  store i64 293, ptr %memberidx2.i.i19.i, align 4
  %83 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %84 = call ptr %83(ptr nonnull %82)
  %85 = load i64, ptr %memberidx1.i.i18.i, align 4
  call void @write(i64 1, ptr %84, i64 %85)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %86 = call ptr @malloc(i32 49)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(49) %86, ptr noundef nonnull align 8 dereferenceable(49) @5, i64 49, i1 false)
  %87 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %87, align 8
  %memberidx.i.i22.i = getelementptr inbounds %string, ptr %87, i64 0, i32 1
  store ptr %86, ptr %memberidx.i.i22.i, align 8
  %memberidx1.i.i23.i = getelementptr inbounds %string, ptr %87, i64 0, i32 2
  store i64 49, ptr %memberidx1.i.i23.i, align 4
  %memberidx2.i.i24.i = getelementptr inbounds %string, ptr %87, i64 0, i32 3
  store i64 49, ptr %memberidx2.i.i24.i, align 4
  %88 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %89 = call ptr %88(ptr nonnull %87)
  %90 = load i64, ptr %memberidx1.i.i23.i, align 4
  call void @write(i64 1, ptr %89, i64 %90)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %91 = call ptr @malloc(i32 54)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %91, ptr noundef nonnull align 8 dereferenceable(54) @6, i64 54, i1 false)
  %92 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i.i27.i = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i.i27.i, align 8
  %memberidx1.i.i28.i = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i28.i, align 4
  %memberidx2.i.i29.i = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i29.i, align 4
  %93 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %94 = call ptr %93(ptr nonnull %92)
  %95 = load i64, ptr %memberidx1.i.i28.i, align 4
  call void @write(i64 1, ptr %94, i64 %95)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %96 = call ptr @malloc(i32 46)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(46) %96, ptr noundef nonnull align 8 dereferenceable(46) @7, i64 46, i1 false)
  %97 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i.i32.i = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i.i32.i, align 8
  %memberidx1.i.i33.i = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 46, ptr %memberidx1.i.i33.i, align 4
  %memberidx2.i.i34.i = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 46, ptr %memberidx2.i.i34.i, align 4
  %98 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %99 = call ptr %98(ptr nonnull %97)
  %100 = load i64, ptr %memberidx1.i.i33.i, align 4
  call void @write(i64 1, ptr %99, i64 %100)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %101 = call ptr @malloc(i32 33)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %101, ptr noundef nonnull align 8 dereferenceable(33) @8, i64 33, i1 false)
  %102 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i37.i = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %101, ptr %memberidx.i.i37.i, align 8
  %memberidx1.i.i38.i = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i38.i, align 4
  %memberidx2.i.i39.i = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i39.i, align 4
  %103 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %104 = call ptr %103(ptr nonnull %102)
  %105 = load i64, ptr %memberidx1.i.i38.i, align 4
  call void @write(i64 1, ptr %104, i64 %105)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %106 = call ptr @malloc(i32 90)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(90) %106, ptr noundef nonnull align 8 dereferenceable(90) @9, i64 90, i1 false)
  %107 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %107, align 8
  %memberidx.i.i42.i = getelementptr inbounds %string, ptr %107, i64 0, i32 1
  store ptr %106, ptr %memberidx.i.i42.i, align 8
  %memberidx1.i.i43.i = getelementptr inbounds %string, ptr %107, i64 0, i32 2
  store i64 90, ptr %memberidx1.i.i43.i, align 4
  %memberidx2.i.i44.i = getelementptr inbounds %string, ptr %107, i64 0, i32 3
  store i64 90, ptr %memberidx2.i.i44.i, align 4
  %108 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %109 = call ptr %108(ptr nonnull %107)
  %110 = load i64, ptr %memberidx1.i.i43.i, align 4
  call void @write(i64 1, ptr %109, i64 %110)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %111 = call ptr @malloc(i32 30)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(30) %111, ptr noundef nonnull align 8 dereferenceable(30) @10, i64 30, i1 false)
  %112 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i.i47.i = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i.i47.i, align 8
  %memberidx1.i.i48.i = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 30, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 30, ptr %memberidx2.i.i49.i, align 4
  %113 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %114 = call ptr %113(ptr nonnull %112)
  %115 = load i64, ptr %memberidx1.i.i48.i, align 4
  call void @write(i64 1, ptr %114, i64 %115)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  br label %common.ret

ifend6:                                           ; preds = %ifend3
  %filename = alloca ptr, align 8
  %116 = load ptr, ptr %memberidx2.i.i, align 8
  %ptridx.i126 = getelementptr inbounds ptr, ptr %116, i64 1
  %117 = load ptr, ptr %ptridx.i126, align 8
  store ptr %117, ptr %filename, align 8
  %118 = alloca %Compiler, align 8
  store ptr @VTableCompiler, ptr %118, align 8
  %memberidx.i127 = getelementptr inbounds %Compiler, ptr %118, i64 0, i32 5
  %119 = call ptr @malloc(i32 32)
  store ptr @VTableArray_FloFile_, ptr %119, align 8
  %memberidx.i.i128 = getelementptr inbounds %Array_FloFile_, ptr %119, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i128, align 4
  %memberidx1.i.i129 = getelementptr inbounds %Array_FloFile_, ptr %119, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i129, align 4
  %memberidx2.i.i130 = getelementptr inbounds %Array_FloFile_, ptr %119, i64 0, i32 1
  %120 = call ptr @malloc(i32 64)
  store ptr %120, ptr %memberidx2.i.i130, align 8
  store i64 0, ptr %memberidx.i.i128, align 4
  store ptr %119, ptr %memberidx.i127, align 8
  %memberidx3.i = getelementptr inbounds %Compiler, ptr %118, i64 0, i32 1
  store ptr null, ptr %memberidx3.i, align 8
  %memberidx4.i = getelementptr inbounds %Compiler, ptr %118, i64 0, i32 3
  store ptr null, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %Compiler, ptr %118, i64 0, i32 6
  %121 = call ptr @malloc(i32 32)
  store ptr @VTableArray_FloError_, ptr %121, align 8
  %memberidx.i15.i = getelementptr inbounds %Array_FloError_, ptr %121, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx1.i16.i = getelementptr inbounds %Array_FloError_, ptr %121, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i, align 4
  %memberidx2.i17.i = getelementptr inbounds %Array_FloError_, ptr %121, i64 0, i32 1
  %122 = call ptr @malloc(i32 64)
  store ptr %122, ptr %memberidx2.i17.i, align 8
  store i64 0, ptr %memberidx.i15.i, align 4
  store ptr %121, ptr %memberidx5.i, align 8
  %123 = call ptr @malloc(i32 24)
  %124 = call ptr @malloc(i32 2048)
  store ptr %124, ptr %123, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %ifend6, %for.body.i.i
  %i.0.i.i331 = phi i64 [ 0, %ifend6 ], [ %126, %for.body.i.i ]
  %125 = load ptr, ptr %123, align 8
  %ptridx.i.i131 = getelementptr inbounds ptr, ptr %125, i64 %i.0.i.i331
  store ptr null, ptr %ptridx.i.i131, align 8
  %126 = add nuw nsw i64 %i.0.i.i331, 1
  %127 = icmp ult i64 %i.0.i.i331, 255
  br i1 %127, label %for.body.i.i, label %Compiler_constructor.exit

Compiler_constructor.exit:                        ; preds = %for.body.i.i
  %memberidx8.i = getelementptr inbounds %Compiler, ptr %118, i64 0, i32 7
  %memberidx2.i18.i = getelementptr inbounds %Map_string_FileId_, ptr %123, i64 0, i32 1
  store i64 256, ptr %memberidx2.i18.i, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_FileId_, ptr %123, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %123, ptr %memberidx8.i, align 8
  %128 = load ptr, ptr %118, align 8
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @malloc(i32 19)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(19) %130, ptr noundef nonnull align 8 dereferenceable(19) @23, i64 19, i1 false)
  %131 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %131, align 8
  %memberidx.i.i.i132 = getelementptr inbounds %string, ptr %131, i64 0, i32 1
  store ptr %130, ptr %memberidx.i.i.i132, align 8
  %memberidx1.i.i.i133 = getelementptr inbounds %string, ptr %131, i64 0, i32 2
  store i64 19, ptr %memberidx1.i.i.i133, align 4
  %memberidx2.i.i.i134 = getelementptr inbounds %string, ptr %131, i64 0, i32 3
  store i64 19, ptr %memberidx2.i.i.i134, align 4
  call void %129(ptr nonnull %118, ptr nonnull %131)
  %132 = call ptr @malloc(i32 2)
  store i16 18733, ptr %132, align 8
  %133 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %133, align 8
  %memberidx.i.i135 = getelementptr inbounds %string, ptr %133, i64 0, i32 1
  store ptr %132, ptr %memberidx.i.i135, align 8
  %memberidx1.i.i136 = getelementptr inbounds %string, ptr %133, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i136, align 4
  %memberidx2.i.i137 = getelementptr inbounds %string, ptr %133, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i137, align 4
  %134 = load ptr, ptr %7, align 8
  %memberidx.i.i138 = getelementptr inbounds <{ ptr, ptr }>, ptr %134, i64 0, i32 1
  %135 = load ptr, ptr %memberidx.i.i138, align 8
  %136 = call i64 %135(ptr nonnull %7, ptr nonnull %133)
  %.not282 = icmp eq i64 %136, -1
  br i1 %.not282, label %ifend9, label %if.entry7

if.entry7:                                        ; preds = %Compiler_constructor.exit
  %137 = call ptr @malloc(i32 2)
  store i16 18733, ptr %137, align 8
  %138 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %138, align 8
  %memberidx.i.i139 = getelementptr inbounds %string, ptr %138, i64 0, i32 1
  store ptr %137, ptr %memberidx.i.i139, align 8
  %memberidx1.i.i140 = getelementptr inbounds %string, ptr %138, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i140, align 4
  %memberidx2.i.i141 = getelementptr inbounds %string, ptr %138, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i141, align 4
  %139 = call ptr @malloc(i32 0)
  %140 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %140, align 8
  %memberidx.i.i142 = getelementptr inbounds %string, ptr %140, i64 0, i32 1
  store ptr %139, ptr %memberidx.i.i142, align 8
  %memberidx1.i.i143 = getelementptr inbounds %string, ptr %140, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i143, i8 0, i64 16, i1 false)
  %141 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %138, ptr nonnull %140)
  %142 = call ptr @malloc(i32 0)
  %143 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %143, align 8
  %memberidx.i.i145 = getelementptr inbounds %string, ptr %143, i64 0, i32 1
  store ptr %142, ptr %memberidx.i.i145, align 8
  %memberidx1.i.i146 = getelementptr inbounds %string, ptr %143, i64 0, i32 2
  %memberidx.i.i148 = getelementptr inbounds %string, ptr %141, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i146, i8 0, i64 16, i1 false)
  %144 = load i64, ptr %memberidx.i.i148, align 4
  %.not.i.i150 = icmp eq i64 %144, 0
  br i1 %.not.i.i150, label %ifend.i.i, label %if.entry10

ifend.i.i:                                        ; preds = %if.entry7
  %memberidx2.i.i151 = getelementptr inbounds %string, ptr %141, i64 0, i32 1
  %145 = load ptr, ptr %memberidx2.i.i151, align 8
  %146 = call i64 @memcmp(ptr %145, ptr %142, i64 %144)
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %ifend9, label %if.entry10

ifend9:                                           ; preds = %if.entry10, %ifend.i.i, %Compiler_constructor.exit
  %148 = load ptr, ptr %118, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %148, i64 0, i32 1
  %149 = load ptr, ptr %memberidx13, align 8
  %150 = load ptr, ptr %filename, align 8
  %151 = call ptr %149(ptr nonnull %118, ptr %150)
  %152 = load ptr, ptr %118, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %152, i64 0, i32 2
  %153 = load ptr, ptr %memberidx14, align 8
  %154 = call i1 %153(ptr nonnull %118, ptr %151)
  br i1 %154, label %ifend17, label %if.entry15

if.entry10:                                       ; preds = %if.entry7, %ifend.i.i
  %155 = load ptr, ptr %118, align 8
  %156 = load ptr, ptr %155, align 8
  call void %156(ptr nonnull %118, ptr %141)
  br label %ifend9

if.entry15:                                       ; preds = %ifend9
  %157 = load ptr, ptr %150, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %157, i64 0, i32 5
  %158 = load ptr, ptr %memberidx18, align 8
  %159 = call ptr %158(ptr nonnull %150)
  %160 = alloca ptr, align 8
  %161 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %160, ptr nonnull @29, ptr %159)
  %162 = load ptr, ptr %160, align 8
  %163 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %163, align 8
  %memberidx.i153 = getelementptr inbounds %string, ptr %163, i64 0, i32 1
  store ptr %162, ptr %memberidx.i153, align 8
  %memberidx1.i154 = getelementptr inbounds %string, ptr %163, i64 0, i32 2
  store i64 %161, ptr %memberidx1.i154, align 4
  %memberidx2.i155 = getelementptr inbounds %string, ptr %163, i64 0, i32 3
  store i64 %161, ptr %memberidx2.i155, align 4
  tail call void @free(ptr %159)
  call fastcc void @print_message_error(i64 3, ptr nonnull %163)
  br label %common.ret

ifend17:                                          ; preds = %ifend9
  %164 = load ptr, ptr %memberidx4.i, align 8
  %165 = load ptr, ptr %memberidx5.i, align 8
  %166 = call fastcc ptr @Lexer_tokenize(ptr %164, ptr %165)
  %167 = load ptr, ptr %118, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %167, i64 0, i32 3
  %168 = load ptr, ptr %memberidx21, align 8
  %169 = call i1 %168(ptr nonnull %118)
  br i1 %169, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend17
  %module_node = alloca ptr, align 8
  %170 = load ptr, ptr %memberidx5.i, align 8
  %171 = call fastcc ptr @Parser_parse(ptr %166, ptr %170)
  store ptr %171, ptr %module_node, align 8
  %172 = load ptr, ptr %118, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %172, i64 0, i32 3
  %173 = load ptr, ptr %memberidx26, align 8
  %174 = call i1 %173(ptr nonnull %118)
  br i1 %174, label %common.ret, label %ifend29

ifend29:                                          ; preds = %ifend24
  call void @llvm.lifetime.start.p0(i64 66, ptr nonnull %4)
  %memberidx.i.i156 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 6
  store ptr %118, ptr %memberidx.i.i156, align 8
  %memberidx1.i.i157 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 1
  store i64 -1, ptr %memberidx1.i.i157, align 8
  %memberidx2.i.i158 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 7
  store i1 false, ptr %memberidx2.i.i158, align 8
  %175 = call ptr @malloc(i32 9)
  store i1 false, ptr %175, align 1
  %memberidx1.i.i.i159 = getelementptr inbounds %Program, ptr %175, i64 0, i32 1
  %176 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Module_, ptr %176, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %176, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %176, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %176, i64 0, i32 1
  %177 = call ptr @malloc(i32 64)
  store ptr %177, ptr %memberidx2.i.i.i.i, align 8
  store i64 0, ptr %memberidx.i.i.i.i, align 4
  store ptr %176, ptr %memberidx1.i.i.i159, align 8
  store ptr %175, ptr %4, align 8
  %178 = call ptr @malloc(i32 24)
  %179 = call ptr @malloc(i32 2048)
  store ptr %179, ptr %178, align 8
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %ifend29, %for.body.i.i.i
  %i.0.i.i.i330 = phi i64 [ 0, %ifend29 ], [ %181, %for.body.i.i.i ]
  %180 = load ptr, ptr %178, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %180, i64 %i.0.i.i.i330
  store ptr null, ptr %ptridx.i.i.i, align 8
  %181 = add nuw nsw i64 %i.0.i.i.i330, 1
  %182 = icmp ult i64 %i.0.i.i.i330, 255
  br i1 %182, label %for.body.i.i.i, label %TypeChecker_constructor.exit.i

TypeChecker_constructor.exit.i:                   ; preds = %for.body.i.i.i
  %memberidx4.i.i160 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 9
  %memberidx2.i.i.i161 = getelementptr inbounds %Map_string_Generic_, ptr %178, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i.i161, align 4
  %memberidx3.i9.i.i = getelementptr inbounds %Map_string_Generic_, ptr %178, i64 0, i32 2
  store i64 0, ptr %memberidx3.i9.i.i, align 4
  store ptr %178, ptr %memberidx4.i.i160, align 8
  %183 = load ptr, ptr %memberidx.i.i156, align 8
  %184 = load ptr, ptr %183, align 8
  %memberidx1.i9.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %184, i64 0, i32 1
  %185 = load ptr, ptr %memberidx1.i9.i, align 8
  %186 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %186, ptr noundef nonnull align 8 dereferenceable(12) @83, i64 12, i1 false)
  %187 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %187, align 8
  %memberidx.i.i.i10.i = getelementptr inbounds %string, ptr %187, i64 0, i32 1
  store ptr %186, ptr %memberidx.i.i.i10.i, align 8
  %memberidx1.i.i.i11.i = getelementptr inbounds %string, ptr %187, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i.i11.i, align 4
  %memberidx2.i.i.i12.i = getelementptr inbounds %string, ptr %187, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i.i12.i, align 4
  %188 = call ptr %185(ptr nonnull %183, ptr nonnull %187)
  %189 = call ptr @malloc(i32 56)
  call fastcc void @ModuleAST_constructor(ptr %189)
  %190 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %190, ptr noundef nonnull align 8 dereferenceable(12) @83, i64 12, i1 false)
  %191 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %191, align 8
  %memberidx.i.i3.i.i = getelementptr inbounds %string, ptr %191, i64 0, i32 1
  store ptr %190, ptr %memberidx.i.i3.i.i, align 8
  %memberidx1.i.i4.i.i = getelementptr inbounds %string, ptr %191, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i4.i.i, align 4
  %memberidx2.i.i5.i.i = getelementptr inbounds %string, ptr %191, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i5.i.i, align 4
  %192 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %4, ptr %189, ptr nonnull %191)
  %193 = load ptr, ptr %memberidx.i.i156, align 8
  %memberidx1.i14.i = getelementptr inbounds %Compiler, ptr %193, i64 0, i32 4
  %194 = load ptr, ptr %memberidx1.i14.i, align 8
  %195 = call fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr nonnull %4, ptr %194, ptr null)
  store i64 0, ptr %memberidx1.i.i157, align 8
  %memberidx1.i16.i163 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 5
  %196 = load ptr, ptr %4, align 8
  %memberidx1.i.i17.i = getelementptr inbounds %Program, ptr %196, i64 0, i32 1
  %197 = load ptr, ptr %memberidx1.i.i17.i, align 8
  %memberidx.i.i.i18.i = getelementptr inbounds %Array_Module_, ptr %197, i64 0, i32 1
  %198 = load ptr, ptr %memberidx.i.i.i18.i, align 8
  %199 = load ptr, ptr %198, align 8
  %memberidx2.i19.i = getelementptr inbounds %Module, ptr %199, i64 0, i32 6
  %200 = load ptr, ptr %memberidx2.i19.i, align 8
  store ptr %200, ptr %memberidx1.i16.i163, align 8
  %201 = load ptr, ptr %memberidx1.i.i17.i, align 8
  %memberidx.i.i.i164 = getelementptr inbounds %Array_Module_, ptr %201, i64 0, i32 1
  %202 = load ptr, ptr %memberidx.i.i.i164, align 8
  %ptridx.i.i21.i = getelementptr inbounds ptr, ptr %202, i64 1
  %203 = load ptr, ptr %ptridx.i.i21.i, align 8
  call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %4, ptr %203)
  %204 = load ptr, ptr %memberidx.i.i156, align 8
  %memberidx1.i23.i = getelementptr inbounds %Compiler, ptr %204, i64 0, i32 6
  %205 = load ptr, ptr %memberidx1.i23.i, align 8
  %memberidx2.i24.i = getelementptr inbounds %Array_FloError_, ptr %205, i64 0, i32 2
  %206 = load i64, ptr %memberidx2.i24.i, align 4
  %207 = icmp sgt i64 %206, 0
  br i1 %207, label %TypeChecker_check.exit, label %ifend.i

ifend.i:                                          ; preds = %TypeChecker_constructor.exit.i
  %208 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %4, ptr %171, ptr %150)
  %209 = load ptr, ptr %4, align 8
  br label %TypeChecker_check.exit

TypeChecker_check.exit:                           ; preds = %TypeChecker_constructor.exit.i, %ifend.i
  %common.ret.op.i = phi ptr [ %209, %ifend.i ], [ null, %TypeChecker_constructor.exit.i ]
  call void @llvm.lifetime.end.p0(i64 66, ptr nonnull %4)
  %210 = load ptr, ptr %118, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %210, i64 0, i32 3
  %211 = load ptr, ptr %memberidx30, align 8
  %212 = call i1 %211(ptr nonnull %118)
  br i1 %212, label %common.ret, label %ifend33

ifend33:                                          ; preds = %TypeChecker_check.exit
  %flo_module = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 81, ptr nonnull %3)
  %memberidx.i283 = getelementptr inbounds %Program, ptr %common.ret.op.i, i64 0, i32 1
  %213 = load ptr, ptr %memberidx.i283, align 8
  %memberidx.i.i284 = getelementptr inbounds %Array_Module_, ptr %213, i64 0, i32 1
  %214 = load ptr, ptr %memberidx.i.i284, align 8
  %ptridx.i.i285 = getelementptr inbounds ptr, ptr %214, i64 2
  %215 = load ptr, ptr %ptridx.i.i285, align 8
  %memberidx1.i286 = getelementptr inbounds %Module, ptr %215, i64 0, i32 1
  %216 = load ptr, ptr %memberidx1.i286, align 8
  %memberidx.i69.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 4
  store ptr %common.ret.op.i, ptr %memberidx.i69.i, align 8
  %217 = call ptr @malloc(i32 24)
  %218 = call ptr @malloc(i32 2048)
  store ptr %218, ptr %217, align 8
  br label %for.body.i.i.i288

for.body.i.i.i288:                                ; preds = %for.body.i.i.i288, %ifend33
  %i.0.i.i237.i = phi i64 [ 0, %ifend33 ], [ %220, %for.body.i.i.i288 ]
  %219 = load ptr, ptr %217, align 8
  %ptridx.i.i.i287 = getelementptr inbounds ptr, ptr %219, i64 %i.0.i.i237.i
  store ptr null, ptr %ptridx.i.i.i287, align 8
  %220 = add nuw nsw i64 %i.0.i.i237.i, 1
  %221 = icmp ult i64 %i.0.i.i237.i, 255
  br i1 %221, label %for.body.i.i.i288, label %Map_string_LLVMValueRef__constructor.exit.i.i

Map_string_LLVMValueRef__constructor.exit.i.i:    ; preds = %for.body.i.i.i288
  %memberidx1.i70.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 6
  %memberidx2.i.i.i289 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %217, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i.i289, align 4
  %memberidx3.i.i.i290 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %217, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i.i290, align 4
  store ptr %217, ptr %memberidx1.i70.i, align 8
  %222 = call ptr @malloc(i32 24)
  %223 = call ptr @malloc(i32 2048)
  store ptr %223, ptr %222, align 8
  br label %for.body.i23.i.i

for.body.i23.i.i:                                 ; preds = %for.body.i23.i.i, %Map_string_LLVMValueRef__constructor.exit.i.i
  %i.0.i20.i236.i = phi i64 [ 0, %Map_string_LLVMValueRef__constructor.exit.i.i ], [ %225, %for.body.i23.i.i ]
  %224 = load ptr, ptr %222, align 8
  %ptridx.i22.i.i = getelementptr inbounds ptr, ptr %224, i64 %i.0.i20.i236.i
  store ptr null, ptr %ptridx.i22.i.i, align 8
  %225 = add nuw nsw i64 %i.0.i20.i236.i, 1
  %226 = icmp ult i64 %i.0.i20.i236.i, 255
  br i1 %226, label %for.body.i23.i.i, label %Map_string_LLVMValueRef__constructor.exit26.i.i

Map_string_LLVMValueRef__constructor.exit26.i.i:  ; preds = %for.body.i23.i.i
  %memberidx2.i.i291 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 7
  %memberidx2.i24.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %222, i64 0, i32 1
  store i64 256, ptr %memberidx2.i24.i.i, align 4
  %memberidx3.i25.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %222, i64 0, i32 2
  store i64 0, ptr %memberidx3.i25.i.i, align 4
  store ptr %222, ptr %memberidx2.i.i291, align 8
  %227 = call ptr @malloc(i32 24)
  %228 = call ptr @malloc(i32 2048)
  store ptr %228, ptr %227, align 8
  br label %for.body.i30.i.i

for.body.i30.i.i:                                 ; preds = %for.body.i30.i.i, %Map_string_LLVMValueRef__constructor.exit26.i.i
  %i.0.i27.i235.i = phi i64 [ 0, %Map_string_LLVMValueRef__constructor.exit26.i.i ], [ %230, %for.body.i30.i.i ]
  %229 = load ptr, ptr %227, align 8
  %ptridx.i29.i.i = getelementptr inbounds ptr, ptr %229, i64 %i.0.i27.i235.i
  store ptr null, ptr %ptridx.i29.i.i, align 8
  %230 = add nuw nsw i64 %i.0.i27.i235.i, 1
  %231 = icmp ult i64 %i.0.i27.i235.i, 255
  br i1 %231, label %for.body.i30.i.i, label %Map_string_CGClassType__constructor.exit.i.i

Map_string_CGClassType__constructor.exit.i.i:     ; preds = %for.body.i30.i.i
  %memberidx3.i.i292 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 8
  %memberidx2.i31.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %227, i64 0, i32 1
  store i64 256, ptr %memberidx2.i31.i.i, align 4
  %memberidx3.i32.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %227, i64 0, i32 2
  store i64 0, ptr %memberidx3.i32.i.i, align 4
  store ptr %227, ptr %memberidx3.i.i292, align 8
  %232 = call ptr @malloc(i32 24)
  %233 = call ptr @malloc(i32 2048)
  store ptr %233, ptr %232, align 8
  br label %for.body.i36.i.i

for.body.i36.i.i:                                 ; preds = %for.body.i36.i.i, %Map_string_CGClassType__constructor.exit.i.i
  %i.0.i33.i234.i = phi i64 [ 0, %Map_string_CGClassType__constructor.exit.i.i ], [ %235, %for.body.i36.i.i ]
  %234 = load ptr, ptr %232, align 8
  %ptridx.i35.i.i = getelementptr inbounds ptr, ptr %234, i64 %i.0.i33.i234.i
  store ptr null, ptr %ptridx.i35.i.i, align 8
  %235 = add nuw nsw i64 %i.0.i33.i234.i, 1
  %236 = icmp ult i64 %i.0.i33.i234.i, 255
  br i1 %236, label %for.body.i36.i.i, label %Map_string_CGEnumType__constructor.exit.i.i

Map_string_CGEnumType__constructor.exit.i.i:      ; preds = %for.body.i36.i.i
  %memberidx4.i.i293 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 9
  %memberidx2.i37.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %232, i64 0, i32 1
  store i64 256, ptr %memberidx2.i37.i.i, align 4
  %memberidx3.i38.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %232, i64 0, i32 2
  store i64 0, ptr %memberidx3.i38.i.i, align 4
  store ptr %232, ptr %memberidx4.i.i293, align 8
  %237 = call ptr @malloc(i32 24)
  %238 = call ptr @malloc(i32 2048)
  store ptr %238, ptr %237, align 8
  br label %for.body.i42.i.i

for.body.i42.i.i:                                 ; preds = %for.body.i42.i.i, %Map_string_CGEnumType__constructor.exit.i.i
  %i.0.i39.i233.i = phi i64 [ 0, %Map_string_CGEnumType__constructor.exit.i.i ], [ %240, %for.body.i42.i.i ]
  %239 = load ptr, ptr %237, align 8
  %ptridx.i41.i.i = getelementptr inbounds ptr, ptr %239, i64 %i.0.i39.i233.i
  store ptr null, ptr %ptridx.i41.i.i, align 8
  %240 = add nuw nsw i64 %i.0.i39.i233.i, 1
  %241 = icmp ult i64 %i.0.i39.i233.i, 255
  br i1 %241, label %for.body.i42.i.i, label %CodeGen_constructor.exit.i

CodeGen_constructor.exit.i:                       ; preds = %for.body.i42.i.i
  %memberidx5.i71.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 10
  %memberidx2.i43.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %237, i64 0, i32 1
  store i64 256, ptr %memberidx2.i43.i.i, align 4
  %memberidx3.i44.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %237, i64 0, i32 2
  store i64 0, ptr %memberidx3.i44.i.i, align 4
  store ptr %237, ptr %memberidx5.i71.i, align 8
  %memberidx6.i.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 5
  store i1 true, ptr %memberidx6.i.i, align 8
  %memberidx8.i.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx8.i.i, i8 0, i64 16, i1 false)
  %242 = load ptr, ptr %216, align 8
  %memberidx10.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %242, i64 0, i32 5
  %243 = load ptr, ptr %memberidx10.i.i, align 8
  %244 = call ptr %243(ptr nonnull %216)
  %245 = call ptr @LLVMModuleCreateWithName(ptr %244)
  store ptr %245, ptr %3, align 8
  %memberidx2.i294 = getelementptr inbounds %Module, ptr %215, i64 0, i32 7
  %246 = load ptr, ptr %memberidx2.i294, align 8
  %247 = call ptr @malloc(i32 25)
  %memberidx.i72.i = getelementptr inbounds %Array_Enum_, ptr %246, i64 0, i32 1
  %248 = load ptr, ptr %memberidx.i72.i, align 8
  %memberidx1.i73.i = getelementptr inbounds %Array_Enum_, ptr %246, i64 0, i32 2
  %249 = load i64, ptr %memberidx1.i73.i, align 4
  store i1 false, ptr %247, align 1
  %memberidx1.i.i.i295 = getelementptr inbounds %ArrayIterator_Enum_, ptr %247, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i295, align 4
  %memberidx2.i.i74.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %247, i64 0, i32 3
  store ptr %248, ptr %memberidx2.i.i74.i, align 8
  %memberidx3.i.i75.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %247, i64 0, i32 2
  store i64 %249, ptr %memberidx3.i.i75.i, align 4
  store i64 1, ptr %memberidx1.i.i.i295, align 4
  %250 = icmp slt i64 %249, 1
  br i1 %250, label %for.end.i, label %for.body.i296

for.body.i296:                                    ; preds = %CodeGen_constructor.exit.i, %for.body.i296
  %enum_.0231.in.i = phi ptr [ %ptridx.i82.i, %for.body.i296 ], [ %248, %CodeGen_constructor.exit.i ]
  %enum_.0231.i = load ptr, ptr %enum_.0231.in.i, align 8
  call fastcc void @CodeGen_declare_enum(ptr nonnull %3, ptr %enum_.0231.i)
  %251 = load i64, ptr %memberidx1.i.i.i295, align 4
  %252 = add nsw i64 %251, 1
  store i64 %252, ptr %memberidx1.i.i.i295, align 4
  %253 = load ptr, ptr %memberidx2.i.i74.i, align 8
  %ptridx.i82.i = getelementptr inbounds ptr, ptr %253, i64 %251
  %254 = load i64, ptr %memberidx3.i.i75.i, align 4
  %255 = icmp sge i64 %251, %254
  br i1 %255, label %for.end.i, label %for.body.i296

for.end.i:                                        ; preds = %for.body.i296, %CodeGen_constructor.exit.i
  %storemerge155.lcssa.i = phi i1 [ %250, %CodeGen_constructor.exit.i ], [ %255, %for.body.i296 ]
  store i1 %storemerge155.lcssa.i, ptr %247, align 1
  call void @free(ptr nonnull %247)
  %memberidx6.i = getelementptr inbounds %Module, ptr %215, i64 0, i32 4
  %256 = load ptr, ptr %memberidx6.i, align 8
  %257 = call ptr @malloc(i32 25)
  %memberidx.i84.i = getelementptr inbounds %Array_Class_, ptr %256, i64 0, i32 1
  %258 = load ptr, ptr %memberidx.i84.i, align 8
  %memberidx1.i85.i = getelementptr inbounds %Array_Class_, ptr %256, i64 0, i32 2
  %259 = load i64, ptr %memberidx1.i85.i, align 4
  store i1 false, ptr %257, align 1
  %memberidx1.i.i86.i = getelementptr inbounds %ArrayIterator_Class_, ptr %257, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i86.i, align 4
  %memberidx2.i.i87.i = getelementptr inbounds %ArrayIterator_Class_, ptr %257, i64 0, i32 3
  store ptr %258, ptr %memberidx2.i.i87.i, align 8
  %memberidx3.i.i88.i = getelementptr inbounds %ArrayIterator_Class_, ptr %257, i64 0, i32 2
  store i64 %259, ptr %memberidx3.i.i88.i, align 4
  store i64 1, ptr %memberidx1.i.i86.i, align 4
  %260 = icmp slt i64 %259, 1
  br i1 %260, label %for.end10.i, label %for.body8.i

for.body8.i:                                      ; preds = %for.end.i, %for.body8.i
  %storemerge228.in.i = phi ptr [ %ptridx.i95.i, %for.body8.i ], [ %258, %for.end.i ]
  %storemerge228.i = load ptr, ptr %storemerge228.in.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %3, ptr %storemerge228.i)
  %261 = load i64, ptr %memberidx1.i.i86.i, align 4
  %262 = add nsw i64 %261, 1
  store i64 %262, ptr %memberidx1.i.i86.i, align 4
  %263 = load ptr, ptr %memberidx2.i.i87.i, align 8
  %ptridx.i95.i = getelementptr inbounds ptr, ptr %263, i64 %261
  %264 = load i64, ptr %memberidx3.i.i88.i, align 4
  %265 = icmp sge i64 %261, %264
  br i1 %265, label %for.end10.i, label %for.body8.i

for.end10.i:                                      ; preds = %for.body8.i, %for.end.i
  %storemerge187.lcssa.i = phi i1 [ %260, %for.end.i ], [ %265, %for.body8.i ]
  store i1 %storemerge187.lcssa.i, ptr %257, align 1
  call void @free(ptr nonnull %257)
  %memberidx14.i = getelementptr inbounds %Module, ptr %215, i64 0, i32 9
  %266 = load ptr, ptr %memberidx14.i, align 8
  %267 = call ptr @malloc(i32 25)
  %memberidx.i97.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %266, i64 0, i32 1
  %268 = load ptr, ptr %memberidx.i97.i, align 8
  %memberidx1.i98.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %266, i64 0, i32 2
  %269 = load i64, ptr %memberidx1.i98.i, align 4
  store i1 false, ptr %267, align 1
  %memberidx1.i.i99.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %267, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i99.i, align 4
  %memberidx2.i.i100.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %267, i64 0, i32 3
  store ptr %268, ptr %memberidx2.i.i100.i, align 8
  %memberidx3.i.i101.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %267, i64 0, i32 2
  store i64 %269, ptr %memberidx3.i.i101.i, align 4
  store i64 1, ptr %memberidx1.i.i99.i, align 4
  %270 = icmp slt i64 %269, 1
  br i1 %270, label %for.end18.i, label %for.body16.i

for.body16.i:                                     ; preds = %for.end10.i, %for.body16.i
  %storemerge64225.in.i = phi ptr [ %ptridx.i108.i, %for.body16.i ], [ %268, %for.end10.i ]
  %storemerge64225.i = load ptr, ptr %storemerge64225.in.i, align 8
  call fastcc void @CodeGen_codegen_const_declaration(ptr nonnull %3, ptr null, ptr %storemerge64225.i)
  %271 = load i64, ptr %memberidx1.i.i99.i, align 4
  %272 = add nsw i64 %271, 1
  store i64 %272, ptr %memberidx1.i.i99.i, align 4
  %273 = load ptr, ptr %memberidx2.i.i100.i, align 8
  %ptridx.i108.i = getelementptr inbounds ptr, ptr %273, i64 %271
  %274 = load i64, ptr %memberidx3.i.i101.i, align 4
  %275 = icmp sge i64 %271, %274
  br i1 %275, label %for.end18.i, label %for.body16.i

for.end18.i:                                      ; preds = %for.body16.i, %for.end10.i
  %storemerge188.lcssa.i = phi i1 [ %270, %for.end10.i ], [ %275, %for.body16.i ]
  store i1 %storemerge188.lcssa.i, ptr %267, align 1
  call void @free(ptr nonnull %267)
  %memberidx22.i = getelementptr inbounds %Module, ptr %215, i64 0, i32 10
  %276 = load ptr, ptr %memberidx22.i, align 8
  %277 = call ptr @malloc(i32 25)
  %memberidx.i110.i = getelementptr inbounds %Array_VarDeclaration_, ptr %276, i64 0, i32 1
  %278 = load ptr, ptr %memberidx.i110.i, align 8
  %memberidx1.i111.i = getelementptr inbounds %Array_VarDeclaration_, ptr %276, i64 0, i32 2
  %279 = load i64, ptr %memberidx1.i111.i, align 4
  store i1 false, ptr %277, align 1
  %memberidx1.i.i112.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %277, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i112.i, align 4
  %memberidx2.i.i113.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %277, i64 0, i32 3
  store ptr %278, ptr %memberidx2.i.i113.i, align 8
  %memberidx3.i.i114.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %277, i64 0, i32 2
  store i64 %279, ptr %memberidx3.i.i114.i, align 4
  store i64 1, ptr %memberidx1.i.i112.i, align 4
  %280 = icmp slt i64 %279, 1
  br i1 %280, label %for.end26.i, label %for.body24.i

for.body24.i:                                     ; preds = %for.end18.i, %for.body24.i
  %storemerge65222.in.i = phi ptr [ %ptridx.i121.i, %for.body24.i ], [ %278, %for.end18.i ]
  %storemerge65222.i = load ptr, ptr %storemerge65222.in.i, align 8
  call fastcc void @CodeGen_codegen_var_declaration(ptr nonnull %3, ptr null, ptr %storemerge65222.i)
  %281 = load i64, ptr %memberidx1.i.i112.i, align 4
  %282 = add nsw i64 %281, 1
  store i64 %282, ptr %memberidx1.i.i112.i, align 4
  %283 = load ptr, ptr %memberidx2.i.i113.i, align 8
  %ptridx.i121.i = getelementptr inbounds ptr, ptr %283, i64 %281
  %284 = load i64, ptr %memberidx3.i.i114.i, align 4
  %285 = icmp sge i64 %281, %284
  br i1 %285, label %for.end26.i, label %for.body24.i

for.end26.i:                                      ; preds = %for.body24.i, %for.end18.i
  %storemerge189.lcssa.i = phi i1 [ %280, %for.end18.i ], [ %285, %for.body24.i ]
  store i1 %storemerge189.lcssa.i, ptr %277, align 1
  call void @free(ptr nonnull %277)
  %286 = load ptr, ptr %memberidx6.i, align 8
  %287 = call ptr @malloc(i32 25)
  %memberidx.i123.i = getelementptr inbounds %Array_Class_, ptr %286, i64 0, i32 1
  %288 = load ptr, ptr %memberidx.i123.i, align 8
  %memberidx1.i124.i = getelementptr inbounds %Array_Class_, ptr %286, i64 0, i32 2
  %289 = load i64, ptr %memberidx1.i124.i, align 4
  store i1 false, ptr %287, align 1
  %memberidx1.i.i125.i = getelementptr inbounds %ArrayIterator_Class_, ptr %287, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i125.i, align 4
  %memberidx2.i.i126.i = getelementptr inbounds %ArrayIterator_Class_, ptr %287, i64 0, i32 3
  store ptr %288, ptr %memberidx2.i.i126.i, align 8
  %memberidx3.i.i127.i = getelementptr inbounds %ArrayIterator_Class_, ptr %287, i64 0, i32 2
  store i64 %289, ptr %memberidx3.i.i127.i, align 4
  store i64 1, ptr %memberidx1.i.i125.i, align 4
  %290 = icmp slt i64 %289, 1
  br i1 %290, label %for.end35.i, label %for.body33.i

for.body33.i:                                     ; preds = %for.end26.i, %for.body33.i
  %storemerge66219.in.i = phi ptr [ %ptridx.i134.i, %for.body33.i ], [ %288, %for.end26.i ]
  %storemerge66219.i = load ptr, ptr %storemerge66219.in.i, align 8
  call fastcc void @CodeGen_codegen_class(ptr nonnull %3, ptr %storemerge66219.i)
  %291 = load i64, ptr %memberidx1.i.i125.i, align 4
  %292 = add nsw i64 %291, 1
  store i64 %292, ptr %memberidx1.i.i125.i, align 4
  %293 = load ptr, ptr %memberidx2.i.i126.i, align 8
  %ptridx.i134.i = getelementptr inbounds ptr, ptr %293, i64 %291
  %294 = load i64, ptr %memberidx3.i.i127.i, align 4
  %295 = icmp sge i64 %291, %294
  br i1 %295, label %for.end35.i, label %for.body33.i

for.end35.i:                                      ; preds = %for.body33.i, %for.end26.i
  %storemerge190.lcssa.i = phi i1 [ %290, %for.end26.i ], [ %295, %for.body33.i ]
  store i1 %storemerge190.lcssa.i, ptr %287, align 1
  call void @free(ptr nonnull %287)
  %memberidx39.i = getelementptr inbounds %Module, ptr %215, i64 0, i32 5
  %296 = load ptr, ptr %memberidx39.i, align 8
  %297 = call ptr @malloc(i32 25)
  %memberidx.i136.i = getelementptr inbounds %Array_Function_, ptr %296, i64 0, i32 1
  %298 = load ptr, ptr %memberidx.i136.i, align 8
  %memberidx1.i137.i = getelementptr inbounds %Array_Function_, ptr %296, i64 0, i32 2
  %299 = load i64, ptr %memberidx1.i137.i, align 4
  store i1 false, ptr %297, align 1
  %memberidx1.i.i138.i = getelementptr inbounds %ArrayIterator_Function_, ptr %297, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i138.i, align 4
  %memberidx2.i.i139.i = getelementptr inbounds %ArrayIterator_Function_, ptr %297, i64 0, i32 3
  store ptr %298, ptr %memberidx2.i.i139.i, align 8
  %memberidx3.i.i140.i = getelementptr inbounds %ArrayIterator_Function_, ptr %297, i64 0, i32 2
  store i64 %299, ptr %memberidx3.i.i140.i, align 4
  store i64 1, ptr %memberidx1.i.i138.i, align 4
  %300 = icmp slt i64 %299, 1
  br i1 %300, label %for.end43.i, label %for.body41.i

for.body41.i:                                     ; preds = %for.end35.i, %for.body41.i
  %storemerge67216.in.i = phi ptr [ %ptridx.i147.i, %for.body41.i ], [ %298, %for.end35.i ]
  %storemerge67216.i = load ptr, ptr %storemerge67216.in.i, align 8
  call fastcc void @CodeGen_codegen_function(ptr nonnull %3, ptr %storemerge67216.i)
  %301 = load i64, ptr %memberidx1.i.i138.i, align 4
  %302 = add nsw i64 %301, 1
  store i64 %302, ptr %memberidx1.i.i138.i, align 4
  %303 = load ptr, ptr %memberidx2.i.i139.i, align 8
  %ptridx.i147.i = getelementptr inbounds ptr, ptr %303, i64 %301
  %304 = load i64, ptr %memberidx3.i.i140.i, align 4
  %305 = icmp sge i64 %301, %304
  br i1 %305, label %for.end43.i, label %for.body41.i

for.end43.i:                                      ; preds = %for.body41.i, %for.end35.i
  %storemerge191.lcssa.i = phi i1 [ %300, %for.end35.i ], [ %305, %for.body41.i ]
  store i1 %storemerge191.lcssa.i, ptr %297, align 1
  call void @free(ptr nonnull %297)
  %306 = load ptr, ptr %memberidx1.i70.i, align 8
  %307 = call ptr @malloc(i32 25)
  %308 = load ptr, ptr %306, align 8
  %memberidx1.i.i158.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %306, i64 0, i32 1
  %309 = load i64, ptr %memberidx1.i.i158.i, align 4
  %memberidx2.i.i159.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %306, i64 0, i32 2
  %310 = load i64, ptr %memberidx2.i.i159.i, align 4
  store i1 false, ptr %307, align 1
  %memberidx1.i.i.i160.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %307, i64 0, i32 1
  store ptr %308, ptr %memberidx1.i.i.i160.i, align 8
  %memberidx2.i.i.i161.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %307, i64 0, i32 2
  store i64 %309, ptr %memberidx2.i.i.i161.i, align 4
  %memberidx3.i.i.i162.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %307, i64 0, i32 3
  store i64 %310, ptr %memberidx3.i.i.i162.i, align 4
  %311 = add nsw i64 %309, -1
  store i64 %311, ptr %memberidx2.i.i.i161.i, align 4
  %312 = icmp sgt i64 %309, 0
  br i1 %312, label %while.entry.i.i.i, label %MapIterator_string_LLVMValueRef__next.exit.i.i

while.entry.i.i.i:                                ; preds = %for.end43.i, %ifend.i.i.i
  %313 = phi ptr [ %incdec.ptr.i.i.i, %ifend.i.i.i ], [ %308, %for.end43.i ]
  %incdec.ptr.i.i.i = getelementptr inbounds ptr, ptr %313, i64 1
  %314 = load ptr, ptr %313, align 8
  %.not.i.i.i = icmp eq ptr %314, null
  br i1 %.not.i.i.i, label %ifend.i.i.i, label %MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i

ifend.i.i.i:                                      ; preds = %while.entry.i.i.i
  %315 = load i64, ptr %memberidx2.i.i.i161.i, align 4
  %316 = add nsw i64 %315, -1
  store i64 %316, ptr %memberidx2.i.i.i161.i, align 4
  %317 = icmp sgt i64 %315, 0
  br i1 %317, label %while.entry.i.i.i, label %MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i

MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i: ; preds = %ifend.i.i.i, %while.entry.i.i.i
  store ptr %incdec.ptr.i.i.i, ptr %memberidx1.i.i.i160.i, align 8
  br label %MapIterator_string_LLVMValueRef__next.exit.i.i

MapIterator_string_LLVMValueRef__next.exit.i.i:   ; preds = %MapIterator_string_LLVMValueRef__next.exit.loopexit.i.i, %for.end43.i
  %storemerge184223.i.i = add nsw i64 %310, -1
  %storemerge175224.i.i = icmp slt i64 %310, 1
  br i1 %storemerge175224.i.i, label %for.end.i.i, label %for.body.lr.ph.i.i

for.body.lr.ph.i.i:                               ; preds = %MapIterator_string_LLVMValueRef__next.exit.i.i
  %memberidx1.i.i.promoted228.i.i = load ptr, ptr %memberidx1.i.i.i160.i, align 8
  %memberidx2.i.i.promoted.i.i = load i64, ptr %memberidx2.i.i.i161.i, align 4
  br label %for.body.i163.i

for.body.i163.i:                                  ; preds = %MapIterator_string_LLVMValueRef__next.exit72.i.i, %for.body.lr.ph.i.i
  %318 = phi i64 [ %memberidx2.i.i.promoted.i.i, %for.body.lr.ph.i.i ], [ %329, %MapIterator_string_LLVMValueRef__next.exit72.i.i ]
  %incdec.ptr.i65.lcssa230.i.i = phi ptr [ %memberidx1.i.i.promoted228.i.i, %for.body.lr.ph.i.i ], [ %incdec.ptr.i65.lcssa229.i.i, %MapIterator_string_LLVMValueRef__next.exit72.i.i ]
  %storemerge184225.i.i = phi i64 [ %storemerge184223.i.i, %for.body.lr.ph.i.i ], [ %storemerge184.i.i, %MapIterator_string_LLVMValueRef__next.exit72.i.i ]
  %var_entry.0.in.i.i = getelementptr inbounds ptr, ptr %incdec.ptr.i65.lcssa230.i.i, i64 -1
  %var_entry.0.i.i = load ptr, ptr %var_entry.0.in.i.i, align 8
  %319 = load ptr, ptr %var_entry.0.i.i, align 8
  %memberidx.i62.i.i = getelementptr inbounds %string, ptr %319, i64 0, i32 1
  %320 = load ptr, ptr %memberidx.i62.i.i, align 8
  call void @free(ptr %320)
  call void @free(ptr %319)
  %321 = add nsw i64 %318, -1
  %322 = icmp sgt i64 %318, 0
  br i1 %322, label %while.entry.i67.preheader.i.i, label %MapIterator_string_LLVMValueRef__next.exit72.i.i

while.entry.i67.preheader.i.i:                    ; preds = %for.body.i163.i
  %323 = shl i64 %318, 3
  %uglygep249.i.i = getelementptr i8, ptr %incdec.ptr.i65.lcssa230.i.i, i64 %323
  br label %while.entry.i67.i.i

while.entry.i67.i.i:                              ; preds = %ifend.i71.i.i, %while.entry.i67.preheader.i.i
  %324 = phi i64 [ %327, %ifend.i71.i.i ], [ %321, %while.entry.i67.preheader.i.i ]
  %325 = phi ptr [ %incdec.ptr.i65.i.i, %ifend.i71.i.i ], [ %incdec.ptr.i65.lcssa230.i.i, %while.entry.i67.preheader.i.i ]
  %incdec.ptr.i65.i.i = getelementptr inbounds ptr, ptr %325, i64 1
  %326 = load ptr, ptr %325, align 8
  %.not.i66.i.i = icmp eq ptr %326, null
  br i1 %.not.i66.i.i, label %ifend.i71.i.i, label %MapIterator_string_LLVMValueRef__next.exit72.i.i

ifend.i71.i.i:                                    ; preds = %while.entry.i67.i.i
  %327 = add nsw i64 %324, -1
  %328 = icmp sgt i64 %324, 0
  br i1 %328, label %while.entry.i67.i.i, label %MapIterator_string_LLVMValueRef__next.exit72.i.i

MapIterator_string_LLVMValueRef__next.exit72.i.i: ; preds = %ifend.i71.i.i, %while.entry.i67.i.i, %for.body.i163.i
  %329 = phi i64 [ %321, %for.body.i163.i ], [ -1, %ifend.i71.i.i ], [ %324, %while.entry.i67.i.i ]
  %incdec.ptr.i65.lcssa229.i.i = phi ptr [ %incdec.ptr.i65.lcssa230.i.i, %for.body.i163.i ], [ %uglygep249.i.i, %ifend.i71.i.i ], [ %incdec.ptr.i65.i.i, %while.entry.i67.i.i ]
  %storemerge184.i.i = add nsw i64 %storemerge184225.i.i, -1
  %storemerge175.i.i = icmp slt i64 %storemerge184225.i.i, 1
  br i1 %storemerge175.i.i, label %for.cond.for.end_crit_edge.i.i, label %for.body.i163.i

for.cond.for.end_crit_edge.i.i:                   ; preds = %MapIterator_string_LLVMValueRef__next.exit72.i.i
  store ptr %incdec.ptr.i65.lcssa229.i.i, ptr %memberidx1.i.i.i160.i, align 8
  store i64 %329, ptr %memberidx2.i.i.i161.i, align 4
  br label %for.end.i.i

for.end.i.i:                                      ; preds = %for.cond.for.end_crit_edge.i.i, %MapIterator_string_LLVMValueRef__next.exit.i.i
  %storemerge175.lcssa.i.i = phi i1 [ true, %for.cond.for.end_crit_edge.i.i ], [ %storemerge175224.i.i, %MapIterator_string_LLVMValueRef__next.exit.i.i ]
  %storemerge184.lcssa.i.i = phi i64 [ -1, %for.cond.for.end_crit_edge.i.i ], [ %storemerge184223.i.i, %MapIterator_string_LLVMValueRef__next.exit.i.i ]
  store i64 %storemerge184.lcssa.i.i, ptr %memberidx3.i.i.i162.i, align 4
  store i1 %storemerge175.lcssa.i.i, ptr %307, align 1
  call void @free(ptr nonnull %307)
  %330 = load ptr, ptr %306, align 8
  call void @free(ptr %330)
  call void @free(ptr %306)
  %331 = load ptr, ptr %memberidx2.i.i291, align 8
  %332 = call ptr @malloc(i32 25)
  %333 = load ptr, ptr %331, align 8
  %memberidx1.i83.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %331, i64 0, i32 1
  %334 = load i64, ptr %memberidx1.i83.i.i, align 4
  %memberidx2.i84.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %331, i64 0, i32 2
  %335 = load i64, ptr %memberidx2.i84.i.i, align 4
  store i1 false, ptr %332, align 1
  %memberidx1.i.i85.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %332, i64 0, i32 1
  store ptr %333, ptr %memberidx1.i.i85.i.i, align 8
  %memberidx2.i.i86.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %332, i64 0, i32 2
  store i64 %334, ptr %memberidx2.i.i86.i.i, align 4
  %memberidx3.i.i87.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %332, i64 0, i32 3
  store i64 %335, ptr %memberidx3.i.i87.i.i, align 4
  %336 = add nsw i64 %334, -1
  store i64 %336, ptr %memberidx2.i.i86.i.i, align 4
  %337 = icmp sgt i64 %334, 0
  br i1 %337, label %while.entry.i92.i.i, label %MapIterator_string_LLVMValueRef__next.exit97.i.i

while.entry.i92.i.i:                              ; preds = %for.end.i.i, %ifend.i96.i.i
  %338 = phi ptr [ %incdec.ptr.i90.i.i, %ifend.i96.i.i ], [ %333, %for.end.i.i ]
  %incdec.ptr.i90.i.i = getelementptr inbounds ptr, ptr %338, i64 1
  %339 = load ptr, ptr %338, align 8
  %.not.i91.i.i = icmp eq ptr %339, null
  br i1 %.not.i91.i.i, label %ifend.i96.i.i, label %MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i

ifend.i96.i.i:                                    ; preds = %while.entry.i92.i.i
  %340 = load i64, ptr %memberidx2.i.i86.i.i, align 4
  %341 = add nsw i64 %340, -1
  store i64 %341, ptr %memberidx2.i.i86.i.i, align 4
  %342 = icmp sgt i64 %340, 0
  br i1 %342, label %while.entry.i92.i.i, label %MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i

MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i: ; preds = %ifend.i96.i.i, %while.entry.i92.i.i
  store ptr %incdec.ptr.i90.i.i, ptr %memberidx1.i.i85.i.i, align 8
  br label %MapIterator_string_LLVMValueRef__next.exit97.i.i

MapIterator_string_LLVMValueRef__next.exit97.i.i: ; preds = %MapIterator_string_LLVMValueRef__next.exit97.loopexit.i.i, %for.end.i.i
  %memberidx3.i.i87.promoted.i.i = load i64, ptr %memberidx3.i.i87.i.i, align 4
  %storemerge186216.i.i = add nsw i64 %memberidx3.i.i87.promoted.i.i, -1
  %storemerge185217.i.i = icmp slt i64 %memberidx3.i.i87.promoted.i.i, 1
  store i1 %storemerge185217.i.i, ptr %332, align 1
  br i1 %storemerge185217.i.i, label %for.end10.i.i, label %for.body8.lr.ph.i.i

for.body8.lr.ph.i.i:                              ; preds = %MapIterator_string_LLVMValueRef__next.exit97.i.i
  %.pn176.in.promoted.i.i = load ptr, ptr %memberidx1.i.i85.i.i, align 8
  %memberidx2.i.i86.promoted.i.i = load i64, ptr %memberidx2.i.i86.i.i, align 4
  br label %for.body8.i.i

for.body8.i.i:                                    ; preds = %MapIterator_string_LLVMValueRef__next.exit123.i.i, %for.body8.lr.ph.i.i
  %343 = phi i64 [ %memberidx2.i.i86.promoted.i.i, %for.body8.lr.ph.i.i ], [ %354, %MapIterator_string_LLVMValueRef__next.exit123.i.i ]
  %.pn176221.i.i = phi ptr [ %.pn176.in.promoted.i.i, %for.body8.lr.ph.i.i ], [ %.pn176220.i.i, %MapIterator_string_LLVMValueRef__next.exit123.i.i ]
  %storemerge186218.i.i = phi i64 [ %storemerge186216.i.i, %for.body8.lr.ph.i.i ], [ %storemerge186.i.i, %MapIterator_string_LLVMValueRef__next.exit123.i.i ]
  %storemerge.in.i.i = getelementptr inbounds ptr, ptr %.pn176221.i.i, i64 -1
  %storemerge.i.i = load ptr, ptr %storemerge.in.i.i, align 8
  %344 = load ptr, ptr %storemerge.i.i, align 8
  %memberidx.i113.i.i = getelementptr inbounds %string, ptr %344, i64 0, i32 1
  %345 = load ptr, ptr %memberidx.i113.i.i, align 8
  call void @free(ptr %345)
  call void @free(ptr %344)
  %346 = add nsw i64 %343, -1
  %347 = icmp sgt i64 %343, 0
  br i1 %347, label %while.entry.i118.preheader.i.i, label %MapIterator_string_LLVMValueRef__next.exit123.i.i

while.entry.i118.preheader.i.i:                   ; preds = %for.body8.i.i
  %348 = shl i64 %343, 3
  %uglygep248.i.i = getelementptr i8, ptr %.pn176221.i.i, i64 %348
  br label %while.entry.i118.i.i

while.entry.i118.i.i:                             ; preds = %ifend.i122.i.i, %while.entry.i118.preheader.i.i
  %349 = phi i64 [ %352, %ifend.i122.i.i ], [ %346, %while.entry.i118.preheader.i.i ]
  %350 = phi ptr [ %incdec.ptr.i116.i.i, %ifend.i122.i.i ], [ %.pn176221.i.i, %while.entry.i118.preheader.i.i ]
  %incdec.ptr.i116.i.i = getelementptr inbounds ptr, ptr %350, i64 1
  %351 = load ptr, ptr %350, align 8
  %.not.i117.i.i = icmp eq ptr %351, null
  br i1 %.not.i117.i.i, label %ifend.i122.i.i, label %MapIterator_string_LLVMValueRef__next.exit123.i.i

ifend.i122.i.i:                                   ; preds = %while.entry.i118.i.i
  %352 = add nsw i64 %349, -1
  %353 = icmp sgt i64 %349, 0
  br i1 %353, label %while.entry.i118.i.i, label %MapIterator_string_LLVMValueRef__next.exit123.i.i

MapIterator_string_LLVMValueRef__next.exit123.i.i: ; preds = %ifend.i122.i.i, %while.entry.i118.i.i, %for.body8.i.i
  %354 = phi i64 [ %346, %for.body8.i.i ], [ -1, %ifend.i122.i.i ], [ %349, %while.entry.i118.i.i ]
  %.pn176220.i.i = phi ptr [ %.pn176221.i.i, %for.body8.i.i ], [ %uglygep248.i.i, %ifend.i122.i.i ], [ %incdec.ptr.i116.i.i, %while.entry.i118.i.i ]
  %storemerge186.i.i = add nsw i64 %storemerge186218.i.i, -1
  %storemerge185.i.i = icmp slt i64 %storemerge186218.i.i, 1
  br i1 %storemerge185.i.i, label %for.cond7.for.end10_crit_edge.i.i, label %for.body8.i.i

for.cond7.for.end10_crit_edge.i.i:                ; preds = %MapIterator_string_LLVMValueRef__next.exit123.i.i
  store ptr %.pn176220.i.i, ptr %memberidx1.i.i85.i.i, align 8
  store i64 %354, ptr %memberidx2.i.i86.i.i, align 4
  store i1 true, ptr %332, align 1
  br label %for.end10.i.i

for.end10.i.i:                                    ; preds = %for.cond7.for.end10_crit_edge.i.i, %MapIterator_string_LLVMValueRef__next.exit97.i.i
  %storemerge186.lcssa.i.i = phi i64 [ -1, %for.cond7.for.end10_crit_edge.i.i ], [ %storemerge186216.i.i, %MapIterator_string_LLVMValueRef__next.exit97.i.i ]
  store i64 %storemerge186.lcssa.i.i, ptr %memberidx3.i.i87.i.i, align 4
  call void @free(ptr nonnull %332)
  %355 = load ptr, ptr %331, align 8
  call void @free(ptr %355)
  call void @free(ptr %331)
  %356 = load ptr, ptr %memberidx5.i71.i, align 8
  %357 = call ptr @malloc(i32 25)
  %358 = load ptr, ptr %356, align 8
  %memberidx1.i124.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %356, i64 0, i32 1
  %359 = load i64, ptr %memberidx1.i124.i.i, align 4
  %memberidx2.i125.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %356, i64 0, i32 2
  %360 = load i64, ptr %memberidx2.i125.i.i, align 4
  store i1 false, ptr %357, align 1
  %memberidx1.i.i126.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %357, i64 0, i32 1
  store ptr %358, ptr %memberidx1.i.i126.i.i, align 8
  %memberidx2.i.i127.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %357, i64 0, i32 2
  store i64 %359, ptr %memberidx2.i.i127.i.i, align 4
  %memberidx3.i.i128.i.i = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %357, i64 0, i32 3
  store i64 %360, ptr %memberidx3.i.i128.i.i, align 4
  %361 = add nsw i64 %359, -1
  store i64 %361, ptr %memberidx2.i.i127.i.i, align 4
  %362 = icmp sgt i64 %359, 0
  br i1 %362, label %while.entry.i133.i.i, label %MapIterator_string_LLVMValueRef__next.exit138.i.i

while.entry.i133.i.i:                             ; preds = %for.end10.i.i, %ifend.i137.i.i
  %363 = phi ptr [ %incdec.ptr.i131.i.i, %ifend.i137.i.i ], [ %358, %for.end10.i.i ]
  %incdec.ptr.i131.i.i = getelementptr inbounds ptr, ptr %363, i64 1
  %364 = load ptr, ptr %363, align 8
  %.not.i132.i.i = icmp eq ptr %364, null
  br i1 %.not.i132.i.i, label %ifend.i137.i.i, label %MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i

ifend.i137.i.i:                                   ; preds = %while.entry.i133.i.i
  %365 = load i64, ptr %memberidx2.i.i127.i.i, align 4
  %366 = add nsw i64 %365, -1
  store i64 %366, ptr %memberidx2.i.i127.i.i, align 4
  %367 = icmp sgt i64 %365, 0
  br i1 %367, label %while.entry.i133.i.i, label %MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i

MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i: ; preds = %ifend.i137.i.i, %while.entry.i133.i.i
  store ptr %incdec.ptr.i131.i.i, ptr %memberidx1.i.i126.i.i, align 8
  br label %MapIterator_string_LLVMValueRef__next.exit138.i.i

MapIterator_string_LLVMValueRef__next.exit138.i.i: ; preds = %MapIterator_string_LLVMValueRef__next.exit138.loopexit.i.i, %for.end10.i.i
  %memberidx3.i.i128.promoted.i.i = load i64, ptr %memberidx3.i.i128.i.i, align 4
  %storemerge188208.i.i = add nsw i64 %memberidx3.i.i128.promoted.i.i, -1
  %storemerge187209.i.i = icmp slt i64 %memberidx3.i.i128.promoted.i.i, 1
  store i1 %storemerge187209.i.i, ptr %357, align 1
  br i1 %storemerge187209.i.i, label %for.end20.i.i, label %for.body18.lr.ph.i.i

for.body18.lr.ph.i.i:                             ; preds = %MapIterator_string_LLVMValueRef__next.exit138.i.i
  %.pn178.in.promoted.i.i = load ptr, ptr %memberidx1.i.i126.i.i, align 8
  %memberidx2.i.i127.promoted.i.i = load i64, ptr %memberidx2.i.i127.i.i, align 4
  br label %for.body18.i.i

for.body18.i.i:                                   ; preds = %MapIterator_string_LLVMValueRef__next.exit159.i.i, %for.body18.lr.ph.i.i
  %368 = phi i64 [ %memberidx2.i.i127.promoted.i.i, %for.body18.lr.ph.i.i ], [ %379, %MapIterator_string_LLVMValueRef__next.exit159.i.i ]
  %.pn178213.i.i = phi ptr [ %.pn178.in.promoted.i.i, %for.body18.lr.ph.i.i ], [ %.pn178212.i.i, %MapIterator_string_LLVMValueRef__next.exit159.i.i ]
  %storemerge188210.i.i = phi i64 [ %storemerge188208.i.i, %for.body18.lr.ph.i.i ], [ %storemerge188.i.i, %MapIterator_string_LLVMValueRef__next.exit159.i.i ]
  %storemerge58.in.i.i = getelementptr inbounds ptr, ptr %.pn178213.i.i, i64 -1
  %storemerge58.i.i = load ptr, ptr %storemerge58.in.i.i, align 8
  %369 = load ptr, ptr %storemerge58.i.i, align 8
  %memberidx.i149.i.i = getelementptr inbounds %string, ptr %369, i64 0, i32 1
  %370 = load ptr, ptr %memberidx.i149.i.i, align 8
  call void @free(ptr %370)
  call void @free(ptr %369)
  %371 = add nsw i64 %368, -1
  %372 = icmp sgt i64 %368, 0
  br i1 %372, label %while.entry.i154.preheader.i.i, label %MapIterator_string_LLVMValueRef__next.exit159.i.i

while.entry.i154.preheader.i.i:                   ; preds = %for.body18.i.i
  %373 = shl i64 %368, 3
  %uglygep247.i.i = getelementptr i8, ptr %.pn178213.i.i, i64 %373
  br label %while.entry.i154.i.i

while.entry.i154.i.i:                             ; preds = %ifend.i158.i.i, %while.entry.i154.preheader.i.i
  %374 = phi i64 [ %377, %ifend.i158.i.i ], [ %371, %while.entry.i154.preheader.i.i ]
  %375 = phi ptr [ %incdec.ptr.i152.i.i, %ifend.i158.i.i ], [ %.pn178213.i.i, %while.entry.i154.preheader.i.i ]
  %incdec.ptr.i152.i.i = getelementptr inbounds ptr, ptr %375, i64 1
  %376 = load ptr, ptr %375, align 8
  %.not.i153.i.i = icmp eq ptr %376, null
  br i1 %.not.i153.i.i, label %ifend.i158.i.i, label %MapIterator_string_LLVMValueRef__next.exit159.i.i

ifend.i158.i.i:                                   ; preds = %while.entry.i154.i.i
  %377 = add nsw i64 %374, -1
  %378 = icmp sgt i64 %374, 0
  br i1 %378, label %while.entry.i154.i.i, label %MapIterator_string_LLVMValueRef__next.exit159.i.i

MapIterator_string_LLVMValueRef__next.exit159.i.i: ; preds = %ifend.i158.i.i, %while.entry.i154.i.i, %for.body18.i.i
  %379 = phi i64 [ %371, %for.body18.i.i ], [ -1, %ifend.i158.i.i ], [ %374, %while.entry.i154.i.i ]
  %.pn178212.i.i = phi ptr [ %.pn178213.i.i, %for.body18.i.i ], [ %uglygep247.i.i, %ifend.i158.i.i ], [ %incdec.ptr.i152.i.i, %while.entry.i154.i.i ]
  %storemerge188.i.i = add nsw i64 %storemerge188210.i.i, -1
  %storemerge187.i.i = icmp slt i64 %storemerge188210.i.i, 1
  br i1 %storemerge187.i.i, label %for.cond17.for.end20_crit_edge.i.i, label %for.body18.i.i

for.cond17.for.end20_crit_edge.i.i:               ; preds = %MapIterator_string_LLVMValueRef__next.exit159.i.i
  store ptr %.pn178212.i.i, ptr %memberidx1.i.i126.i.i, align 8
  store i64 %379, ptr %memberidx2.i.i127.i.i, align 4
  store i1 true, ptr %357, align 1
  br label %for.end20.i.i

for.end20.i.i:                                    ; preds = %for.cond17.for.end20_crit_edge.i.i, %MapIterator_string_LLVMValueRef__next.exit138.i.i
  %storemerge188.lcssa.i.i = phi i64 [ -1, %for.cond17.for.end20_crit_edge.i.i ], [ %storemerge188208.i.i, %MapIterator_string_LLVMValueRef__next.exit138.i.i ]
  store i64 %storemerge188.lcssa.i.i, ptr %memberidx3.i.i128.i.i, align 4
  call void @free(ptr nonnull %357)
  %380 = load ptr, ptr %356, align 8
  call void @free(ptr %380)
  call void @free(ptr %356)
  %381 = load ptr, ptr %memberidx3.i.i292, align 8
  %382 = call ptr @malloc(i32 25)
  %383 = load ptr, ptr %381, align 8
  %memberidx1.i170.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %381, i64 0, i32 1
  %384 = load i64, ptr %memberidx1.i170.i.i, align 4
  %memberidx2.i171.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %381, i64 0, i32 2
  %385 = load i64, ptr %memberidx2.i171.i.i, align 4
  store i1 false, ptr %382, align 1
  %memberidx1.i.i172.i.i = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %382, i64 0, i32 1
  store ptr %383, ptr %memberidx1.i.i172.i.i, align 8
  %memberidx2.i.i173.i.i = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %382, i64 0, i32 2
  store i64 %384, ptr %memberidx2.i.i173.i.i, align 4
  %memberidx3.i.i174.i.i = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %382, i64 0, i32 3
  store i64 %385, ptr %memberidx3.i.i174.i.i, align 4
  %386 = add nsw i64 %384, -1
  store i64 %386, ptr %memberidx2.i.i173.i.i, align 4
  %387 = icmp sgt i64 %384, 0
  br i1 %387, label %while.entry.i164.i.i, label %MapIterator_string_CGClassType__next.exit169.i.i

while.entry.i164.i.i:                             ; preds = %for.end20.i.i, %ifend.i168.i.i
  %388 = phi ptr [ %incdec.ptr.i162.i.i, %ifend.i168.i.i ], [ %383, %for.end20.i.i ]
  %incdec.ptr.i162.i.i = getelementptr inbounds ptr, ptr %388, i64 1
  %389 = load ptr, ptr %388, align 8
  %.not.i163.i.i = icmp eq ptr %389, null
  br i1 %.not.i163.i.i, label %ifend.i168.i.i, label %MapIterator_string_CGClassType__next.exit169.loopexit.i.i

ifend.i168.i.i:                                   ; preds = %while.entry.i164.i.i
  %390 = load i64, ptr %memberidx2.i.i173.i.i, align 4
  %391 = add nsw i64 %390, -1
  store i64 %391, ptr %memberidx2.i.i173.i.i, align 4
  %392 = icmp sgt i64 %390, 0
  br i1 %392, label %while.entry.i164.i.i, label %MapIterator_string_CGClassType__next.exit169.loopexit.i.i

MapIterator_string_CGClassType__next.exit169.loopexit.i.i: ; preds = %ifend.i168.i.i, %while.entry.i164.i.i
  store ptr %incdec.ptr.i162.i.i, ptr %memberidx1.i.i172.i.i, align 8
  br label %MapIterator_string_CGClassType__next.exit169.i.i

MapIterator_string_CGClassType__next.exit169.i.i: ; preds = %MapIterator_string_CGClassType__next.exit169.loopexit.i.i, %for.end20.i.i
  %memberidx3.i.i174.promoted.i.i = load i64, ptr %memberidx3.i.i174.i.i, align 4
  %storemerge190200.i.i = add nsw i64 %memberidx3.i.i174.promoted.i.i, -1
  %storemerge189201.i.i = icmp slt i64 %memberidx3.i.i174.promoted.i.i, 1
  store i1 %storemerge189201.i.i, ptr %382, align 1
  br i1 %storemerge189201.i.i, label %for.end30.i.i, label %for.body28.lr.ph.i.i

for.body28.lr.ph.i.i:                             ; preds = %MapIterator_string_CGClassType__next.exit169.i.i
  %.pn180.in.promoted.i.i = load ptr, ptr %memberidx1.i.i172.i.i, align 8
  %memberidx2.i.i173.promoted.i.i = load i64, ptr %memberidx2.i.i173.i.i, align 4
  br label %for.body28.i.i

for.body28.i.i:                                   ; preds = %MapIterator_string_CGClassType__next.exit.i.i, %for.body28.lr.ph.i.i
  %393 = phi i64 [ %memberidx2.i.i173.promoted.i.i, %for.body28.lr.ph.i.i ], [ %405, %MapIterator_string_CGClassType__next.exit.i.i ]
  %.pn180205.i.i = phi ptr [ %.pn180.in.promoted.i.i, %for.body28.lr.ph.i.i ], [ %.pn180204.i.i, %MapIterator_string_CGClassType__next.exit.i.i ]
  %storemerge190202.i.i = phi i64 [ %storemerge190200.i.i, %for.body28.lr.ph.i.i ], [ %storemerge190.i.i, %MapIterator_string_CGClassType__next.exit.i.i ]
  %storemerge59.in.i.i = getelementptr inbounds ptr, ptr %.pn180205.i.i, i64 -1
  %storemerge59.i.i = load ptr, ptr %storemerge59.in.i.i, align 8
  %394 = load ptr, ptr %storemerge59.i.i, align 8
  %memberidx.i148.i.i = getelementptr inbounds %string, ptr %394, i64 0, i32 1
  %395 = load ptr, ptr %memberidx.i148.i.i, align 8
  call void @free(ptr %395)
  call void @free(ptr %394)
  %memberidx33.i.i = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %storemerge59.i.i, i64 0, i32 1
  %396 = load ptr, ptr %memberidx33.i.i, align 8
  call void @free(ptr %396)
  %397 = add nsw i64 %393, -1
  %398 = icmp sgt i64 %393, 0
  br i1 %398, label %while.entry.i143.preheader.i.i, label %MapIterator_string_CGClassType__next.exit.i.i

while.entry.i143.preheader.i.i:                   ; preds = %for.body28.i.i
  %399 = shl i64 %393, 3
  %uglygep246.i.i = getelementptr i8, ptr %.pn180205.i.i, i64 %399
  br label %while.entry.i143.i.i

while.entry.i143.i.i:                             ; preds = %ifend.i147.i.i, %while.entry.i143.preheader.i.i
  %400 = phi i64 [ %403, %ifend.i147.i.i ], [ %397, %while.entry.i143.preheader.i.i ]
  %401 = phi ptr [ %incdec.ptr.i141.i.i, %ifend.i147.i.i ], [ %.pn180205.i.i, %while.entry.i143.preheader.i.i ]
  %incdec.ptr.i141.i.i = getelementptr inbounds ptr, ptr %401, i64 1
  %402 = load ptr, ptr %401, align 8
  %.not.i142.i.i = icmp eq ptr %402, null
  br i1 %.not.i142.i.i, label %ifend.i147.i.i, label %MapIterator_string_CGClassType__next.exit.i.i

ifend.i147.i.i:                                   ; preds = %while.entry.i143.i.i
  %403 = add nsw i64 %400, -1
  %404 = icmp sgt i64 %400, 0
  br i1 %404, label %while.entry.i143.i.i, label %MapIterator_string_CGClassType__next.exit.i.i

MapIterator_string_CGClassType__next.exit.i.i:    ; preds = %ifend.i147.i.i, %while.entry.i143.i.i, %for.body28.i.i
  %405 = phi i64 [ %397, %for.body28.i.i ], [ -1, %ifend.i147.i.i ], [ %400, %while.entry.i143.i.i ]
  %.pn180204.i.i = phi ptr [ %.pn180205.i.i, %for.body28.i.i ], [ %uglygep246.i.i, %ifend.i147.i.i ], [ %incdec.ptr.i141.i.i, %while.entry.i143.i.i ]
  %storemerge190.i.i = add nsw i64 %storemerge190202.i.i, -1
  %storemerge189.i.i = icmp slt i64 %storemerge190202.i.i, 1
  br i1 %storemerge189.i.i, label %for.cond27.for.end30_crit_edge.i.i, label %for.body28.i.i

for.cond27.for.end30_crit_edge.i.i:               ; preds = %MapIterator_string_CGClassType__next.exit.i.i
  store ptr %.pn180204.i.i, ptr %memberidx1.i.i172.i.i, align 8
  store i64 %405, ptr %memberidx2.i.i173.i.i, align 4
  store i1 true, ptr %382, align 1
  br label %for.end30.i.i

for.end30.i.i:                                    ; preds = %for.cond27.for.end30_crit_edge.i.i, %MapIterator_string_CGClassType__next.exit169.i.i
  %storemerge190.lcssa.i.i = phi i64 [ -1, %for.cond27.for.end30_crit_edge.i.i ], [ %storemerge190200.i.i, %MapIterator_string_CGClassType__next.exit169.i.i ]
  store i64 %storemerge190.lcssa.i.i, ptr %memberidx3.i.i174.i.i, align 4
  call void @free(ptr nonnull %382)
  %406 = load ptr, ptr %381, align 8
  call void @free(ptr %406)
  call void @free(ptr %381)
  %407 = load ptr, ptr %memberidx4.i.i293, align 8
  %408 = call ptr @malloc(i32 25)
  %409 = load ptr, ptr %407, align 8
  %memberidx1.i108.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %407, i64 0, i32 1
  %410 = load i64, ptr %memberidx1.i108.i.i, align 4
  %memberidx2.i109.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %407, i64 0, i32 2
  %411 = load i64, ptr %memberidx2.i109.i.i, align 4
  store i1 false, ptr %408, align 1
  %memberidx1.i.i110.i.i = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %408, i64 0, i32 1
  store ptr %409, ptr %memberidx1.i.i110.i.i, align 8
  %memberidx2.i.i111.i.i = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %408, i64 0, i32 2
  store i64 %410, ptr %memberidx2.i.i111.i.i, align 4
  %memberidx3.i.i112.i.i = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %408, i64 0, i32 3
  store i64 %411, ptr %memberidx3.i.i112.i.i, align 4
  %412 = add nsw i64 %410, -1
  store i64 %412, ptr %memberidx2.i.i111.i.i, align 4
  %413 = icmp sgt i64 %410, 0
  br i1 %413, label %while.entry.i102.i.i, label %MapIterator_string_CGEnumType__next.exit107.i.i

while.entry.i102.i.i:                             ; preds = %for.end30.i.i, %ifend.i106.i.i
  %414 = phi ptr [ %incdec.ptr.i100.i.i, %ifend.i106.i.i ], [ %409, %for.end30.i.i ]
  %incdec.ptr.i100.i.i = getelementptr inbounds ptr, ptr %414, i64 1
  %415 = load ptr, ptr %414, align 8
  %.not.i101.i.i = icmp eq ptr %415, null
  br i1 %.not.i101.i.i, label %ifend.i106.i.i, label %MapIterator_string_CGEnumType__next.exit107.loopexit.i.i

ifend.i106.i.i:                                   ; preds = %while.entry.i102.i.i
  %416 = load i64, ptr %memberidx2.i.i111.i.i, align 4
  %417 = add nsw i64 %416, -1
  store i64 %417, ptr %memberidx2.i.i111.i.i, align 4
  %418 = icmp sgt i64 %416, 0
  br i1 %418, label %while.entry.i102.i.i, label %MapIterator_string_CGEnumType__next.exit107.loopexit.i.i

MapIterator_string_CGEnumType__next.exit107.loopexit.i.i: ; preds = %ifend.i106.i.i, %while.entry.i102.i.i
  store ptr %incdec.ptr.i100.i.i, ptr %memberidx1.i.i110.i.i, align 8
  br label %MapIterator_string_CGEnumType__next.exit107.i.i

MapIterator_string_CGEnumType__next.exit107.i.i:  ; preds = %MapIterator_string_CGEnumType__next.exit107.loopexit.i.i, %for.end30.i.i
  %memberidx3.i.i112.promoted.i.i = load i64, ptr %memberidx3.i.i112.i.i, align 4
  %storemerge192194.i.i = add nsw i64 %memberidx3.i.i112.promoted.i.i, -1
  %storemerge191195.i.i = icmp slt i64 %memberidx3.i.i112.promoted.i.i, 1
  store i1 %storemerge191195.i.i, ptr %408, align 1
  br i1 %storemerge191195.i.i, label %CodeGen_destroy.exit.i, label %for.body39.lr.ph.i.i

for.body39.lr.ph.i.i:                             ; preds = %MapIterator_string_CGEnumType__next.exit107.i.i
  %.pn182.in.promoted.i.i = load ptr, ptr %memberidx1.i.i110.i.i, align 8
  %memberidx2.i.i111.promoted.i.i = load i64, ptr %memberidx2.i.i111.i.i, align 4
  br label %for.body39.i.i

for.body39.i.i:                                   ; preds = %MapIterator_string_CGEnumType__next.exit.i.i, %for.body39.lr.ph.i.i
  %419 = phi i64 [ %memberidx2.i.i111.promoted.i.i, %for.body39.lr.ph.i.i ], [ %431, %MapIterator_string_CGEnumType__next.exit.i.i ]
  %.pn182198.i.i = phi ptr [ %.pn182.in.promoted.i.i, %for.body39.lr.ph.i.i ], [ %.pn182197.i.i, %MapIterator_string_CGEnumType__next.exit.i.i ]
  %storemerge192196.i.i = phi i64 [ %storemerge192194.i.i, %for.body39.lr.ph.i.i ], [ %storemerge192.i.i, %MapIterator_string_CGEnumType__next.exit.i.i ]
  %storemerge60.in.i.i = getelementptr inbounds ptr, ptr %.pn182198.i.i, i64 -1
  %storemerge60.i.i = load ptr, ptr %storemerge60.in.i.i, align 8
  %420 = load ptr, ptr %storemerge60.i.i, align 8
  %memberidx.i82.i.i = getelementptr inbounds %string, ptr %420, i64 0, i32 1
  %421 = load ptr, ptr %memberidx.i82.i.i, align 8
  call void @free(ptr %421)
  call void @free(ptr %420)
  %memberidx44.i.i = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %storemerge60.i.i, i64 0, i32 1
  %422 = load ptr, ptr %memberidx44.i.i, align 8
  call void @free(ptr %422)
  %423 = add nsw i64 %419, -1
  %424 = icmp sgt i64 %419, 0
  br i1 %424, label %while.entry.i77.preheader.i.i, label %MapIterator_string_CGEnumType__next.exit.i.i

while.entry.i77.preheader.i.i:                    ; preds = %for.body39.i.i
  %425 = shl i64 %419, 3
  %uglygep.i.i = getelementptr i8, ptr %.pn182198.i.i, i64 %425
  br label %while.entry.i77.i.i

while.entry.i77.i.i:                              ; preds = %ifend.i81.i.i, %while.entry.i77.preheader.i.i
  %426 = phi i64 [ %429, %ifend.i81.i.i ], [ %423, %while.entry.i77.preheader.i.i ]
  %427 = phi ptr [ %incdec.ptr.i75.i.i, %ifend.i81.i.i ], [ %.pn182198.i.i, %while.entry.i77.preheader.i.i ]
  %incdec.ptr.i75.i.i = getelementptr inbounds ptr, ptr %427, i64 1
  %428 = load ptr, ptr %427, align 8
  %.not.i76.i.i = icmp eq ptr %428, null
  br i1 %.not.i76.i.i, label %ifend.i81.i.i, label %MapIterator_string_CGEnumType__next.exit.i.i

ifend.i81.i.i:                                    ; preds = %while.entry.i77.i.i
  %429 = add nsw i64 %426, -1
  %430 = icmp sgt i64 %426, 0
  br i1 %430, label %while.entry.i77.i.i, label %MapIterator_string_CGEnumType__next.exit.i.i

MapIterator_string_CGEnumType__next.exit.i.i:     ; preds = %ifend.i81.i.i, %while.entry.i77.i.i, %for.body39.i.i
  %431 = phi i64 [ %423, %for.body39.i.i ], [ -1, %ifend.i81.i.i ], [ %426, %while.entry.i77.i.i ]
  %.pn182197.i.i = phi ptr [ %.pn182198.i.i, %for.body39.i.i ], [ %uglygep.i.i, %ifend.i81.i.i ], [ %incdec.ptr.i75.i.i, %while.entry.i77.i.i ]
  %storemerge192.i.i = add nsw i64 %storemerge192196.i.i, -1
  %storemerge191.i.i = icmp slt i64 %storemerge192196.i.i, 1
  br i1 %storemerge191.i.i, label %for.cond38.for.end41_crit_edge.i.i, label %for.body39.i.i

for.cond38.for.end41_crit_edge.i.i:               ; preds = %MapIterator_string_CGEnumType__next.exit.i.i
  store ptr %.pn182197.i.i, ptr %memberidx1.i.i110.i.i, align 8
  store i64 %431, ptr %memberidx2.i.i111.i.i, align 4
  store i1 true, ptr %408, align 1
  br label %CodeGen_destroy.exit.i

CodeGen_destroy.exit.i:                           ; preds = %for.cond38.for.end41_crit_edge.i.i, %MapIterator_string_CGEnumType__next.exit107.i.i
  %storemerge192.lcssa.i.i = phi i64 [ -1, %for.cond38.for.end41_crit_edge.i.i ], [ %storemerge192194.i.i, %MapIterator_string_CGEnumType__next.exit107.i.i ]
  store i64 %storemerge192.lcssa.i.i, ptr %memberidx3.i.i112.i.i, align 4
  call void @free(ptr nonnull %408)
  %432 = load ptr, ptr %407, align 8
  call void @free(ptr %432)
  call void @free(ptr %407)
  %433 = load ptr, ptr %memberidx.i283, align 8
  %434 = call ptr @malloc(i32 25)
  %memberidx.i.i.i297 = getelementptr inbounds %Array_Module_, ptr %433, i64 0, i32 1
  %435 = load ptr, ptr %memberidx.i.i.i297, align 8
  %memberidx1.i.i150.i = getelementptr inbounds %Array_Module_, ptr %433, i64 0, i32 2
  %436 = load i64, ptr %memberidx1.i.i150.i, align 4
  store i1 false, ptr %434, align 1
  %memberidx1.i.i.i151.i = getelementptr inbounds %ArrayIterator_Module_, ptr %434, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i151.i, align 4
  %memberidx2.i.i.i152.i = getelementptr inbounds %ArrayIterator_Module_, ptr %434, i64 0, i32 3
  store ptr %435, ptr %memberidx2.i.i.i152.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %ArrayIterator_Module_, ptr %434, i64 0, i32 2
  store i64 %436, ptr %memberidx3.i.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i151.i, align 4
  %437 = icmp slt i64 %436, 1
  br i1 %437, label %Program___del__.exit.i, label %for.body.i.i298

for.body.i.i298:                                  ; preds = %CodeGen_destroy.exit.i, %Module___del__.exit.i
  %module.0.i214.in.i = phi ptr [ %ptridx.i11.i.i, %Module___del__.exit.i ], [ %435, %CodeGen_destroy.exit.i ]
  %module.0.i214.i = load ptr, ptr %module.0.i214.in.i, align 8
  %memberidx.i165.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 5
  %438 = load ptr, ptr %memberidx.i165.i, align 8
  %439 = call ptr @malloc(i32 25)
  %memberidx.i.i166.i = getelementptr inbounds %Array_Function_, ptr %438, i64 0, i32 1
  %440 = load ptr, ptr %memberidx.i.i166.i, align 8
  %memberidx1.i.i167.i = getelementptr inbounds %Array_Function_, ptr %438, i64 0, i32 2
  %441 = load i64, ptr %memberidx1.i.i167.i, align 4
  store i1 false, ptr %439, align 1
  %memberidx1.i.i.i168.i = getelementptr inbounds %ArrayIterator_Function_, ptr %439, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i168.i, align 4
  %memberidx2.i.i.i169.i = getelementptr inbounds %ArrayIterator_Function_, ptr %439, i64 0, i32 3
  store ptr %440, ptr %memberidx2.i.i.i169.i, align 8
  %memberidx3.i.i.i170.i = getelementptr inbounds %ArrayIterator_Function_, ptr %439, i64 0, i32 2
  store i64 %441, ptr %memberidx3.i.i.i170.i, align 4
  store i64 1, ptr %memberidx1.i.i.i168.i, align 4
  %442 = icmp slt i64 %441, 1
  br i1 %442, label %for.end.i176.i, label %for.body.i173.i

for.body.i173.i:                                  ; preds = %for.body.i.i298, %for.body.i173.i
  %443 = phi i64 [ %444, %for.body.i173.i ], [ 1, %for.body.i.i298 ]
  %func.0201.in.i.i = phi ptr [ %ptridx.i81.i.i, %for.body.i173.i ], [ %440, %for.body.i.i298 ]
  %func.0201.i.i = load ptr, ptr %func.0201.in.i.i, align 8
  call void @free(ptr %func.0201.i.i)
  %444 = add nuw nsw i64 %443, 1
  %ptridx.i81.i.i = getelementptr inbounds ptr, ptr %440, i64 %443
  %.not.i299 = icmp slt i64 %443, %441
  br i1 %.not.i299, label %for.body.i173.i, label %for.cond.for.end_crit_edge.i174.i

for.cond.for.end_crit_edge.i174.i:                ; preds = %for.body.i173.i
  store i64 %444, ptr %memberidx1.i.i.i168.i, align 4
  br label %for.end.i176.i

for.end.i176.i:                                   ; preds = %for.cond.for.end_crit_edge.i174.i, %for.body.i.i298
  %storemerge163.lcssa.i.i = phi i1 [ true, %for.cond.for.end_crit_edge.i174.i ], [ %442, %for.body.i.i298 ]
  store i1 %storemerge163.lcssa.i.i, ptr %439, align 1
  call void @free(ptr nonnull %439)
  %memberidx4.i175.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 2
  %445 = load ptr, ptr %memberidx4.i175.i, align 8
  %446 = call ptr @malloc(i32 25)
  %memberidx.i84.i.i = getelementptr inbounds %Array_Var_, ptr %445, i64 0, i32 1
  %447 = load ptr, ptr %memberidx.i84.i.i, align 8
  %memberidx1.i85.i.i = getelementptr inbounds %Array_Var_, ptr %445, i64 0, i32 2
  %448 = load i64, ptr %memberidx1.i85.i.i, align 4
  store i1 false, ptr %446, align 1
  %memberidx1.i.i86.i.i = getelementptr inbounds %ArrayIterator_Var_, ptr %446, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i86.i.i, align 4
  %memberidx2.i.i87.i.i = getelementptr inbounds %ArrayIterator_Var_, ptr %446, i64 0, i32 3
  store ptr %447, ptr %memberidx2.i.i87.i.i, align 8
  %memberidx3.i.i88.i.i = getelementptr inbounds %ArrayIterator_Var_, ptr %446, i64 0, i32 2
  store i64 %448, ptr %memberidx3.i.i88.i.i, align 4
  store i64 1, ptr %memberidx1.i.i86.i.i, align 4
  %449 = icmp slt i64 %448, 1
  br i1 %449, label %for.end8.i.i, label %for.body6.i.i

for.body6.i.i:                                    ; preds = %for.end.i176.i, %for.body6.i.i
  %450 = phi i64 [ %451, %for.body6.i.i ], [ 1, %for.end.i176.i ]
  %storemerge197.in.i.i = phi ptr [ %ptridx.i96.i.i, %for.body6.i.i ], [ %447, %for.end.i176.i ]
  %storemerge197.i.i = load ptr, ptr %storemerge197.in.i.i, align 8
  call void @free(ptr %storemerge197.i.i)
  %451 = add nuw nsw i64 %450, 1
  %ptridx.i96.i.i = getelementptr inbounds ptr, ptr %447, i64 %450
  %.not192.i = icmp slt i64 %450, %448
  br i1 %.not192.i, label %for.body6.i.i, label %for.cond5.for.end8_crit_edge.i.i

for.cond5.for.end8_crit_edge.i.i:                 ; preds = %for.body6.i.i
  store i64 %451, ptr %memberidx1.i.i86.i.i, align 4
  br label %for.end8.i.i

for.end8.i.i:                                     ; preds = %for.cond5.for.end8_crit_edge.i.i, %for.end.i176.i
  %storemerge172.lcssa.i.i = phi i1 [ true, %for.cond5.for.end8_crit_edge.i.i ], [ %449, %for.end.i176.i ]
  store i1 %storemerge172.lcssa.i.i, ptr %446, align 1
  call void @free(ptr nonnull %446)
  %memberidx12.i.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 4
  %452 = load ptr, ptr %memberidx12.i.i, align 8
  %453 = call ptr @malloc(i32 25)
  %memberidx.i99.i.i = getelementptr inbounds %Array_Class_, ptr %452, i64 0, i32 1
  %454 = load ptr, ptr %memberidx.i99.i.i, align 8
  %memberidx1.i100.i.i = getelementptr inbounds %Array_Class_, ptr %452, i64 0, i32 2
  %455 = load i64, ptr %memberidx1.i100.i.i, align 4
  store i1 false, ptr %453, align 1
  %memberidx1.i.i101.i.i = getelementptr inbounds %ArrayIterator_Class_, ptr %453, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i101.i.i, align 4
  %memberidx2.i.i102.i.i = getelementptr inbounds %ArrayIterator_Class_, ptr %453, i64 0, i32 3
  store ptr %454, ptr %memberidx2.i.i102.i.i, align 8
  %memberidx3.i.i103.i.i = getelementptr inbounds %ArrayIterator_Class_, ptr %453, i64 0, i32 2
  store i64 %455, ptr %memberidx3.i.i103.i.i, align 4
  store i64 1, ptr %memberidx1.i.i101.i.i, align 4
  %456 = icmp slt i64 %455, 1
  br i1 %456, label %for.end16.i.i, label %for.body14.i.i

for.body14.i.i:                                   ; preds = %for.end8.i.i, %Class___del__.exit.i.i
  %storemerge73194.in.i.i = phi ptr [ %ptridx.i111.i.i, %Class___del__.exit.i.i ], [ %454, %for.end8.i.i ]
  %storemerge73194.i.i = load ptr, ptr %storemerge73194.in.i.i, align 8
  %457 = load ptr, ptr %storemerge73194.i.i, align 8
  call void @free(ptr %457)
  %memberidx1.i165.i.i = getelementptr inbounds %Class, ptr %storemerge73194.i.i, i64 0, i32 1
  %458 = load ptr, ptr %memberidx1.i165.i.i, align 8
  %memberidx.i.i166.i.i = getelementptr inbounds %string, ptr %458, i64 0, i32 1
  %459 = load ptr, ptr %memberidx.i.i166.i.i, align 8
  call void @free(ptr %459)
  call void @free(ptr %458)
  %memberidx2.i.i177.i = getelementptr inbounds %Class, ptr %storemerge73194.i.i, i64 0, i32 2
  %460 = load ptr, ptr %memberidx2.i.i177.i, align 8
  %.not.i.i178.i = icmp eq ptr %460, null
  br i1 %.not.i.i178.i, label %for.entry.i.i.i, label %if.entry.i.i.i

if.entry.i.i.i:                                   ; preds = %for.body14.i.i
  call void @free(ptr nonnull %460)
  br label %for.entry.i.i.i

for.entry.i.i.i:                                  ; preds = %if.entry.i.i.i, %for.body14.i.i
  %memberidx4.i.i.i = getelementptr inbounds %Class, ptr %storemerge73194.i.i, i64 0, i32 4
  %461 = load ptr, ptr %memberidx4.i.i.i, align 8
  %462 = call ptr @malloc(i32 25)
  %memberidx.i24.i.i.i = getelementptr inbounds %Array_ClassField_, ptr %461, i64 0, i32 1
  %463 = load ptr, ptr %memberidx.i24.i.i.i, align 8
  %memberidx1.i.i167.i.i = getelementptr inbounds %Array_ClassField_, ptr %461, i64 0, i32 2
  %464 = load i64, ptr %memberidx1.i.i167.i.i, align 4
  store i1 false, ptr %462, align 1
  %memberidx1.i.i.i168.i.i = getelementptr inbounds %ArrayIterator_ClassField_, ptr %462, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i168.i.i, align 4
  %memberidx2.i.i.i169.i.i = getelementptr inbounds %ArrayIterator_ClassField_, ptr %462, i64 0, i32 3
  store ptr %463, ptr %memberidx2.i.i.i169.i.i, align 8
  %memberidx3.i.i.i170.i.i = getelementptr inbounds %ArrayIterator_ClassField_, ptr %462, i64 0, i32 2
  store i64 %464, ptr %memberidx3.i.i.i170.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i168.i.i, align 4
  %465 = icmp slt i64 %464, 1
  br i1 %465, label %for.end.i.i.i, label %for.body.i171.i.i

for.body.i171.i.i:                                ; preds = %for.entry.i.i.i, %for.body.i171.i.i
  %466 = phi i64 [ %467, %for.body.i171.i.i ], [ 1, %for.entry.i.i.i ]
  %storemerge48.in.i.i.i = phi ptr [ %ptridx.i28.i.i.i, %for.body.i171.i.i ], [ %463, %for.entry.i.i.i ]
  %storemerge48.i.i.i = load ptr, ptr %storemerge48.in.i.i.i, align 8
  call void @free(ptr %storemerge48.i.i.i)
  %467 = add nuw nsw i64 %466, 1
  %ptridx.i28.i.i.i = getelementptr inbounds ptr, ptr %463, i64 %466
  %.not.i.i300 = icmp slt i64 %466, %464
  br i1 %.not.i.i300, label %for.body.i171.i.i, label %for.cond.for.end_crit_edge.i.i.i

for.cond.for.end_crit_edge.i.i.i:                 ; preds = %for.body.i171.i.i
  store i64 %467, ptr %memberidx1.i.i.i168.i.i, align 4
  br label %for.end.i.i.i

for.end.i.i.i:                                    ; preds = %for.cond.for.end_crit_edge.i.i.i, %for.entry.i.i.i
  %storemerge43.lcssa.i.i.i = phi i1 [ true, %for.cond.for.end_crit_edge.i.i.i ], [ %465, %for.entry.i.i.i ]
  store i1 %storemerge43.lcssa.i.i.i, ptr %462, align 1
  call void @free(ptr nonnull %462)
  %memberidx8.i.i.i = getelementptr inbounds %Class, ptr %storemerge73194.i.i, i64 0, i32 5
  %468 = load ptr, ptr %memberidx8.i.i.i, align 8
  %469 = call ptr @malloc(i32 25)
  %memberidx.i30.i.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %468, i64 0, i32 1
  %470 = load ptr, ptr %memberidx.i30.i.i.i, align 8
  %memberidx1.i31.i.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %468, i64 0, i32 2
  %471 = load i64, ptr %memberidx1.i31.i.i.i, align 4
  store i1 false, ptr %469, align 1
  %memberidx1.i.i32.i.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %469, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i32.i.i.i, align 4
  %memberidx2.i.i33.i.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %469, i64 0, i32 3
  store ptr %470, ptr %memberidx2.i.i33.i.i.i, align 8
  %memberidx3.i.i34.i.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %469, i64 0, i32 2
  store i64 %471, ptr %memberidx3.i.i34.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i32.i.i.i, align 4
  %472 = icmp slt i64 %471, 1
  br i1 %472, label %Class___del__.exit.i.i, label %for.body10.i.i.i

for.body10.i.i.i:                                 ; preds = %for.end.i.i.i, %for.body10.i.i.i
  %473 = phi i64 [ %474, %for.body10.i.i.i ], [ 1, %for.end.i.i.i ]
  %storemerge2346.in.i.i.i = phi ptr [ %ptridx.i41.i.i.i, %for.body10.i.i.i ], [ %470, %for.end.i.i.i ]
  %storemerge2346.i.i.i = load ptr, ptr %storemerge2346.in.i.i.i, align 8
  call void @free(ptr %storemerge2346.i.i.i)
  %474 = add nuw nsw i64 %473, 1
  %ptridx.i41.i.i.i = getelementptr inbounds ptr, ptr %470, i64 %473
  %.not174.i.i = icmp slt i64 %473, %471
  br i1 %.not174.i.i, label %for.body10.i.i.i, label %for.cond9.for.end12_crit_edge.i.i.i

for.cond9.for.end12_crit_edge.i.i.i:              ; preds = %for.body10.i.i.i
  store i64 %474, ptr %memberidx1.i.i32.i.i.i, align 4
  br label %Class___del__.exit.i.i

Class___del__.exit.i.i:                           ; preds = %for.cond9.for.end12_crit_edge.i.i.i, %for.end.i.i.i
  %storemerge44.lcssa.i.i.i = phi i1 [ true, %for.cond9.for.end12_crit_edge.i.i.i ], [ %472, %for.end.i.i.i ]
  store i1 %storemerge44.lcssa.i.i.i, ptr %469, align 1
  call void @free(ptr nonnull %469)
  %memberidx14.i.i.i = getelementptr inbounds %Class, ptr %storemerge73194.i.i, i64 0, i32 6
  %475 = load ptr, ptr %memberidx14.i.i.i, align 8
  %476 = load ptr, ptr %475, align 8
  call void @free(ptr %476)
  call void @free(ptr %475)
  %memberidx15.i.i.i = getelementptr inbounds %Class, ptr %storemerge73194.i.i, i64 0, i32 7
  %477 = load ptr, ptr %memberidx15.i.i.i, align 8
  %478 = load ptr, ptr %477, align 8
  call void @free(ptr %478)
  call void @free(ptr %477)
  call void @free(ptr %storemerge73194.i.i)
  %479 = load i64, ptr %memberidx1.i.i101.i.i, align 4
  %480 = add nsw i64 %479, 1
  store i64 %480, ptr %memberidx1.i.i101.i.i, align 4
  %481 = load ptr, ptr %memberidx2.i.i102.i.i, align 8
  %ptridx.i111.i.i = getelementptr inbounds ptr, ptr %481, i64 %479
  %482 = load i64, ptr %memberidx3.i.i103.i.i, align 4
  %483 = icmp sge i64 %479, %482
  br i1 %483, label %for.end16.i.i, label %for.body14.i.i

for.end16.i.i:                                    ; preds = %Class___del__.exit.i.i, %for.end8.i.i
  %storemerge173.lcssa.i.i = phi i1 [ %456, %for.end8.i.i ], [ %483, %Class___del__.exit.i.i ]
  store i1 %storemerge173.lcssa.i.i, ptr %453, align 1
  call void @free(ptr nonnull %453)
  %memberidx20.i.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 7
  %484 = load ptr, ptr %memberidx20.i.i, align 8
  %485 = call ptr @malloc(i32 25)
  %memberidx.i114.i.i = getelementptr inbounds %Array_Enum_, ptr %484, i64 0, i32 1
  %486 = load ptr, ptr %memberidx.i114.i.i, align 8
  %memberidx1.i115.i.i = getelementptr inbounds %Array_Enum_, ptr %484, i64 0, i32 2
  %487 = load i64, ptr %memberidx1.i115.i.i, align 4
  store i1 false, ptr %485, align 1
  %memberidx1.i.i116.i.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %485, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i116.i.i, align 4
  %memberidx2.i.i117.i.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %485, i64 0, i32 3
  store ptr %486, ptr %memberidx2.i.i117.i.i, align 8
  %memberidx3.i.i118.i.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %485, i64 0, i32 2
  store i64 %487, ptr %memberidx3.i.i118.i.i, align 4
  store i64 1, ptr %memberidx1.i.i116.i.i, align 4
  %488 = icmp slt i64 %487, 1
  br i1 %488, label %for.end24.i.i, label %for.body22.i.i

for.body22.i.i:                                   ; preds = %for.end16.i.i, %Enum___del__.exit.i.i
  %storemerge74191.in.i.i = phi ptr [ %ptridx.i131.i.i, %Enum___del__.exit.i.i ], [ %486, %for.end16.i.i ]
  %storemerge74191.i.i = load ptr, ptr %storemerge74191.in.i.i, align 8
  %489 = load ptr, ptr %storemerge74191.i.i, align 8
  call void @free(ptr %489)
  %memberidx1.i124.i179.i = getelementptr inbounds %Enum, ptr %storemerge74191.i.i, i64 0, i32 1
  %490 = load ptr, ptr %memberidx1.i124.i179.i, align 8
  %memberidx.i.i.i180.i = getelementptr inbounds %string, ptr %490, i64 0, i32 1
  %491 = load ptr, ptr %memberidx.i.i.i180.i, align 8
  call void @free(ptr %491)
  call void @free(ptr %490)
  %memberidx2.i125.i181.i = getelementptr inbounds %Enum, ptr %storemerge74191.i.i, i64 0, i32 2
  %492 = load ptr, ptr %memberidx2.i125.i181.i, align 8
  %493 = call ptr @malloc(i32 25)
  %memberidx.i13.i.i.i = getelementptr inbounds %Array_EnumField_, ptr %492, i64 0, i32 1
  %494 = load ptr, ptr %memberidx.i13.i.i.i, align 8
  %memberidx1.i.i126.i182.i = getelementptr inbounds %Array_EnumField_, ptr %492, i64 0, i32 2
  %495 = load i64, ptr %memberidx1.i.i126.i182.i, align 4
  store i1 false, ptr %493, align 1
  %memberidx1.i.i.i.i.i = getelementptr inbounds %ArrayIterator_EnumField_, ptr %493, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i.i.i, align 4
  %memberidx2.i.i.i.i.i = getelementptr inbounds %ArrayIterator_EnumField_, ptr %493, i64 0, i32 3
  store ptr %494, ptr %memberidx2.i.i.i.i.i, align 8
  %memberidx3.i.i.i.i.i = getelementptr inbounds %ArrayIterator_EnumField_, ptr %493, i64 0, i32 2
  store i64 %495, ptr %memberidx3.i.i.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i.i.i, align 4
  %496 = icmp slt i64 %495, 1
  br i1 %496, label %Enum___del__.exit.i.i, label %for.body.i.i183.i

for.body.i.i183.i:                                ; preds = %for.body22.i.i, %for.body.i.i183.i
  %497 = phi i64 [ %502, %for.body.i.i183.i ], [ 1, %for.body22.i.i ]
  %field.0.i187.in.i.i = phi ptr [ %ptridx.i19.i.i.i, %for.body.i.i183.i ], [ %494, %for.body22.i.i ]
  %field.0.i187.i.i = load ptr, ptr %field.0.i187.in.i.i, align 8
  %498 = load ptr, ptr %field.0.i187.i.i, align 8
  call void @free(ptr %498)
  %memberidx1.i15.i.i.i = getelementptr inbounds %EnumField, ptr %field.0.i187.i.i, i64 0, i32 1
  %499 = load ptr, ptr %memberidx1.i15.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %string, ptr %499, i64 0, i32 1
  %500 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  call void @free(ptr %500)
  call void @free(ptr %499)
  %memberidx2.i16.i.i.i = getelementptr inbounds %EnumField, ptr %field.0.i187.i.i, i64 0, i32 2
  %501 = load ptr, ptr %memberidx2.i16.i.i.i, align 8
  call void @free(ptr %501)
  call void @free(ptr %field.0.i187.i.i)
  %502 = add nuw nsw i64 %497, 1
  %ptridx.i19.i.i.i = getelementptr inbounds ptr, ptr %494, i64 %497
  %.not193.i = icmp slt i64 %497, %495
  br i1 %.not193.i, label %for.body.i.i183.i, label %for.cond.i.Enum___del__.exit_crit_edge.i.i

for.cond.i.Enum___del__.exit_crit_edge.i.i:       ; preds = %for.body.i.i183.i
  store i64 %502, ptr %memberidx1.i.i.i.i.i, align 4
  br label %Enum___del__.exit.i.i

Enum___del__.exit.i.i:                            ; preds = %for.cond.i.Enum___del__.exit_crit_edge.i.i, %for.body22.i.i
  %storemerge164.lcssa.i.i = phi i1 [ true, %for.cond.i.Enum___del__.exit_crit_edge.i.i ], [ %496, %for.body22.i.i ]
  store i1 %storemerge164.lcssa.i.i, ptr %493, align 1
  call void @free(ptr nonnull %493)
  %503 = load ptr, ptr %memberidx2.i125.i181.i, align 8
  %memberidx.i21.i.i.i = getelementptr inbounds %Array_EnumField_, ptr %503, i64 0, i32 1
  %504 = load ptr, ptr %memberidx.i21.i.i.i, align 8
  call void @free(ptr %504)
  call void @free(ptr %503)
  %memberidx5.i128.i.i = getelementptr inbounds %Enum, ptr %storemerge74191.i.i, i64 0, i32 3
  %505 = load ptr, ptr %memberidx5.i128.i.i, align 8
  %506 = load ptr, ptr %505, align 8
  call void @free(ptr %506)
  call void @free(ptr %505)
  call void @free(ptr %storemerge74191.i.i)
  %507 = load i64, ptr %memberidx1.i.i116.i.i, align 4
  %508 = add nsw i64 %507, 1
  store i64 %508, ptr %memberidx1.i.i116.i.i, align 4
  %509 = load ptr, ptr %memberidx2.i.i117.i.i, align 8
  %ptridx.i131.i.i = getelementptr inbounds ptr, ptr %509, i64 %507
  %510 = load i64, ptr %memberidx3.i.i118.i.i, align 4
  %511 = icmp sge i64 %507, %510
  br i1 %511, label %for.end24.i.i, label %for.body22.i.i

for.end24.i.i:                                    ; preds = %Enum___del__.exit.i.i, %for.end16.i.i
  %storemerge175.lcssa.i184.i = phi i1 [ %488, %for.end16.i.i ], [ %511, %Enum___del__.exit.i.i ]
  store i1 %storemerge175.lcssa.i184.i, ptr %485, align 1
  call void @free(ptr nonnull %485)
  %memberidx28.i.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 9
  %512 = load ptr, ptr %memberidx28.i.i, align 8
  %513 = call ptr @malloc(i32 25)
  %memberidx.i133.i.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %512, i64 0, i32 1
  %514 = load ptr, ptr %memberidx.i133.i.i, align 8
  %memberidx1.i134.i.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %512, i64 0, i32 2
  %515 = load i64, ptr %memberidx1.i134.i.i, align 4
  store i1 false, ptr %513, align 1
  %memberidx1.i.i135.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %513, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i135.i.i, align 4
  %memberidx2.i.i136.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %513, i64 0, i32 3
  store ptr %514, ptr %memberidx2.i.i136.i.i, align 8
  %memberidx3.i.i137.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %513, i64 0, i32 2
  store i64 %515, ptr %memberidx3.i.i137.i.i, align 4
  store i64 1, ptr %memberidx1.i.i135.i.i, align 4
  %516 = icmp slt i64 %515, 1
  br i1 %516, label %for.end32.i.i, label %for.body30.i.i

for.body30.i.i:                                   ; preds = %for.end24.i.i, %for.body30.i.i
  %517 = phi i64 [ %518, %for.body30.i.i ], [ 1, %for.end24.i.i ]
  %storemerge75183.in.i.i = phi ptr [ %ptridx.i144.i.i, %for.body30.i.i ], [ %514, %for.end24.i.i ]
  %storemerge75183.i.i = load ptr, ptr %storemerge75183.in.i.i, align 8
  call void @free(ptr %storemerge75183.i.i)
  %518 = add nuw nsw i64 %517, 1
  %ptridx.i144.i.i = getelementptr inbounds ptr, ptr %514, i64 %517
  %.not194.i = icmp slt i64 %517, %515
  br i1 %.not194.i, label %for.body30.i.i, label %for.cond29.for.end32_crit_edge.i.i

for.cond29.for.end32_crit_edge.i.i:               ; preds = %for.body30.i.i
  store i64 %518, ptr %memberidx1.i.i135.i.i, align 4
  br label %for.end32.i.i

for.end32.i.i:                                    ; preds = %for.cond29.for.end32_crit_edge.i.i, %for.end24.i.i
  %storemerge176.lcssa.i.i = phi i1 [ true, %for.cond29.for.end32_crit_edge.i.i ], [ %516, %for.end24.i.i ]
  store i1 %storemerge176.lcssa.i.i, ptr %513, align 1
  call void @free(ptr nonnull %513)
  %memberidx36.i.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 10
  %519 = load ptr, ptr %memberidx36.i.i, align 8
  %520 = call ptr @malloc(i32 25)
  %memberidx.i146.i.i = getelementptr inbounds %Array_VarDeclaration_, ptr %519, i64 0, i32 1
  %521 = load ptr, ptr %memberidx.i146.i.i, align 8
  %memberidx1.i147.i.i = getelementptr inbounds %Array_VarDeclaration_, ptr %519, i64 0, i32 2
  %522 = load i64, ptr %memberidx1.i147.i.i, align 4
  store i1 false, ptr %520, align 1
  %memberidx1.i.i148.i.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %520, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i148.i.i, align 4
  %memberidx2.i.i149.i.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %520, i64 0, i32 3
  store ptr %521, ptr %memberidx2.i.i149.i.i, align 8
  %memberidx3.i.i150.i.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %520, i64 0, i32 2
  store i64 %522, ptr %memberidx3.i.i150.i.i, align 4
  store i64 1, ptr %memberidx1.i.i148.i.i, align 4
  %523 = icmp slt i64 %522, 1
  br i1 %523, label %Module___del__.exit.i, label %for.body38.i.i

for.body38.i.i:                                   ; preds = %for.end32.i.i, %for.body38.i.i
  %524 = phi i64 [ %525, %for.body38.i.i ], [ 1, %for.end32.i.i ]
  %storemerge76180.in.i.i = phi ptr [ %ptridx.i157.i.i, %for.body38.i.i ], [ %521, %for.end32.i.i ]
  %storemerge76180.i.i = load ptr, ptr %storemerge76180.in.i.i, align 8
  call void @free(ptr %storemerge76180.i.i)
  %525 = add nuw nsw i64 %524, 1
  %ptridx.i157.i.i = getelementptr inbounds ptr, ptr %521, i64 %524
  %.not195.i = icmp slt i64 %524, %522
  br i1 %.not195.i, label %for.body38.i.i, label %for.cond37.for.end40_crit_edge.i.i

for.cond37.for.end40_crit_edge.i.i:               ; preds = %for.body38.i.i
  store i64 %525, ptr %memberidx1.i.i148.i.i, align 4
  br label %Module___del__.exit.i

Module___del__.exit.i:                            ; preds = %for.cond37.for.end40_crit_edge.i.i, %for.end32.i.i
  %storemerge177.lcssa.i.i = phi i1 [ true, %for.cond37.for.end40_crit_edge.i.i ], [ %523, %for.end32.i.i ]
  store i1 %storemerge177.lcssa.i.i, ptr %520, align 1
  call void @free(ptr nonnull %520)
  %memberidx42.i.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 8
  %526 = load ptr, ptr %memberidx42.i.i, align 8
  %memberidx43.i.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 6
  %527 = load ptr, ptr %memberidx43.i.i, align 8
  %memberidx44.i185.i = getelementptr inbounds %ScopeId, ptr %527, i64 0, i32 1
  %528 = load i64, ptr %memberidx44.i185.i, align 4
  %memberidx.i159.i.i = getelementptr inbounds %Array_Scope_, ptr %526, i64 0, i32 1
  %529 = load ptr, ptr %memberidx.i159.i.i, align 8
  %ptridx.i160.i.i = getelementptr inbounds ptr, ptr %529, i64 %528
  %530 = load ptr, ptr %ptridx.i160.i.i, align 8
  call fastcc void @Scope___del__(ptr %530)
  call void @free(ptr %530)
  %memberidx45.i.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 1
  %531 = load ptr, ptr %memberidx45.i.i, align 8
  %memberidx.i161.i.i = getelementptr inbounds %string, ptr %531, i64 0, i32 1
  %532 = load ptr, ptr %memberidx.i161.i.i, align 8
  call void @free(ptr %532)
  call void @free(ptr %531)
  %533 = load ptr, ptr %memberidx.i165.i, align 8
  %memberidx.i162.i.i = getelementptr inbounds %Array_Function_, ptr %533, i64 0, i32 1
  %534 = load ptr, ptr %memberidx.i162.i.i, align 8
  call void @free(ptr %534)
  call void @free(ptr %533)
  %535 = load ptr, ptr %memberidx4.i175.i, align 8
  %memberidx.i123.i.i = getelementptr inbounds %Array_Var_, ptr %535, i64 0, i32 1
  %536 = load ptr, ptr %memberidx.i123.i.i, align 8
  call void @free(ptr %536)
  call void @free(ptr %535)
  %537 = load ptr, ptr %memberidx12.i.i, align 8
  %memberidx.i113.i186.i = getelementptr inbounds %Array_Class_, ptr %537, i64 0, i32 1
  %538 = load ptr, ptr %memberidx.i113.i186.i, align 8
  call void @free(ptr %538)
  call void @free(ptr %537)
  %539 = load ptr, ptr %memberidx20.i.i, align 8
  %memberidx.i108.i.i = getelementptr inbounds %Array_Enum_, ptr %539, i64 0, i32 1
  %540 = load ptr, ptr %memberidx.i108.i.i, align 8
  call void @free(ptr %540)
  call void @free(ptr %539)
  %541 = load ptr, ptr %memberidx42.i.i, align 8
  %memberidx.i98.i.i = getelementptr inbounds %Array_Scope_, ptr %541, i64 0, i32 1
  %542 = load ptr, ptr %memberidx.i98.i.i, align 8
  call void @free(ptr %542)
  call void @free(ptr %541)
  %543 = load ptr, ptr %memberidx28.i.i, align 8
  %memberidx.i93.i.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %543, i64 0, i32 1
  %544 = load ptr, ptr %memberidx.i93.i.i, align 8
  call void @free(ptr %544)
  call void @free(ptr %543)
  %545 = load ptr, ptr %memberidx36.i.i, align 8
  %memberidx.i83.i.i = getelementptr inbounds %Array_VarDeclaration_, ptr %545, i64 0, i32 1
  %546 = load ptr, ptr %memberidx.i83.i.i, align 8
  call void @free(ptr %546)
  call void @free(ptr %545)
  %memberidx53.i.i = getelementptr inbounds %Module, ptr %module.0.i214.i, i64 0, i32 3
  %547 = load ptr, ptr %memberidx53.i.i, align 8
  %memberidx.i78.i.i = getelementptr inbounds %Array_Const_, ptr %547, i64 0, i32 1
  %548 = load ptr, ptr %memberidx.i78.i.i, align 8
  call void @free(ptr %548)
  call void @free(ptr %547)
  call void @free(ptr %module.0.i214.i)
  %549 = load i64, ptr %memberidx1.i.i.i151.i, align 4
  %550 = add nsw i64 %549, 1
  store i64 %550, ptr %memberidx1.i.i.i151.i, align 4
  %551 = load ptr, ptr %memberidx2.i.i.i152.i, align 8
  %ptridx.i11.i.i = getelementptr inbounds ptr, ptr %551, i64 %549
  %552 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %553 = icmp sge i64 %549, %552
  br i1 %553, label %Program___del__.exit.i, label %for.body.i.i298

Program___del__.exit.i:                           ; preds = %Module___del__.exit.i, %CodeGen_destroy.exit.i
  %storemerge156.lcssa.i = phi i1 [ %437, %CodeGen_destroy.exit.i ], [ %553, %Module___del__.exit.i ]
  store i1 %storemerge156.lcssa.i, ptr %434, align 1
  call void @free(ptr nonnull %434)
  %554 = load ptr, ptr %memberidx.i283, align 8
  %memberidx.i8.i.i = getelementptr inbounds %Array_Module_, ptr %554, i64 0, i32 1
  %555 = load ptr, ptr %memberidx.i8.i.i, align 8
  call void @free(ptr %555)
  call void @free(ptr %554)
  call void @free(ptr %common.ret.op.i)
  %556 = call ptr @malloc(i32 32)
  %557 = load ptr, ptr %3, align 8
  store ptr @VTableGeneratedModule, ptr %556, align 8
  %memberidx.i68.i = getelementptr inbounds %GeneratedModule, ptr %556, i64 0, i32 1
  store ptr %557, ptr %memberidx.i68.i, align 8
  %memberidx1.i.i301 = getelementptr inbounds %GeneratedModule, ptr %556, i64 0, i32 2
  store ptr null, ptr %memberidx1.i.i301, align 8
  %558 = call i1 @LLVMVerifyModule(ptr %557, i64 1, ptr nonnull %memberidx1.i.i301)
  br i1 %558, label %if.entry.i.i305, label %CodeGen_codegen.exit

if.entry.i.i305:                                  ; preds = %Program___del__.exit.i
  %559 = load ptr, ptr %556, align 8
  %memberidx5.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %559, i64 0, i32 4
  %560 = load ptr, ptr %memberidx5.i.i, align 8
  %561 = call ptr @malloc(i32 8)
  store i64 7812670522611888741, ptr %561, align 8
  %562 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %562, align 8
  %memberidx.i.i.i.i302 = getelementptr inbounds %string, ptr %562, i64 0, i32 1
  store ptr %561, ptr %memberidx.i.i.i.i302, align 8
  %memberidx1.i.i.i.i303 = getelementptr inbounds %string, ptr %562, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i.i.i303, align 4
  %memberidx2.i.i.i.i304 = getelementptr inbounds %string, ptr %562, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i.i.i304, align 4
  call void %560(ptr nonnull %556, ptr nonnull %562)
  call fastcc void @GeneratedModule_print_errors(ptr nonnull %556)
  br label %CodeGen_codegen.exit

CodeGen_codegen.exit:                             ; preds = %Program___del__.exit.i, %if.entry.i.i305
  call void @LLVM_InitializeAllTargetInfos()
  call void @LLVM_InitializeAllTargets()
  call void @LLVM_InitializeAllTargetMCs()
  call void @LLVM_InitializeAllAsmParsers()
  call void @LLVM_InitializeAllAsmPrinters()
  call void @llvm.lifetime.end.p0(i64 81, ptr nonnull %3)
  store ptr %556, ptr %flo_module, align 8
  %563 = load ptr, ptr %556, align 8
  %564 = load ptr, ptr %563, align 8
  %565 = load ptr, ptr %args, align 8
  %566 = call ptr @malloc(i32 2)
  store i16 20269, ptr %566, align 8
  %567 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %567, align 8
  %memberidx.i.i165 = getelementptr inbounds %string, ptr %567, i64 0, i32 1
  store ptr %566, ptr %memberidx.i.i165, align 8
  %memberidx1.i.i166 = getelementptr inbounds %string, ptr %567, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i166, align 4
  %memberidx2.i.i167 = getelementptr inbounds %string, ptr %567, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i167, align 4
  %568 = call ptr @malloc(i32 1)
  store i8 49, ptr %568, align 8
  %569 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %569, align 8
  %memberidx.i.i168 = getelementptr inbounds %string, ptr %569, i64 0, i32 1
  store ptr %568, ptr %memberidx.i.i168, align 8
  %memberidx1.i.i169 = getelementptr inbounds %string, ptr %569, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i169, align 4
  %memberidx2.i.i170 = getelementptr inbounds %string, ptr %569, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i170, align 4
  %570 = call fastcc ptr @flag_value_or(ptr %565, ptr nonnull %567, ptr nonnull %569)
  %571 = load ptr, ptr %570, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %571, i64 0, i32 5
  %572 = load ptr, ptr %memberidx35, align 8
  %573 = call ptr %572(ptr nonnull %570)
  %574 = call i64 @atol(ptr nocapture %573)
  tail call void @free(ptr %573)
  call void %564(ptr nonnull %556, i64 %574)
  %emit_type = alloca ptr, align 8
  %575 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %575, ptr noundef nonnull align 8 dereferenceable(6) @263, i64 6, i1 false)
  %576 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %576, align 8
  %memberidx.i.i171 = getelementptr inbounds %string, ptr %576, i64 0, i32 1
  store ptr %575, ptr %memberidx.i.i171, align 8
  %memberidx1.i.i172 = getelementptr inbounds %string, ptr %576, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i172, align 4
  %memberidx2.i.i173 = getelementptr inbounds %string, ptr %576, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i173, align 4
  %577 = call fastcc ptr @flag_value_or(ptr %565, ptr nonnull %576, ptr null)
  store ptr %577, ptr %emit_type, align 8
  %output_fn = alloca ptr, align 8
  %578 = call ptr @malloc(i32 2)
  store i16 28461, ptr %578, align 8
  %579 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %579, align 8
  %memberidx.i.i174 = getelementptr inbounds %string, ptr %579, i64 0, i32 1
  store ptr %578, ptr %memberidx.i.i174, align 8
  %memberidx1.i.i175 = getelementptr inbounds %string, ptr %579, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i175, align 4
  %memberidx2.i.i176 = getelementptr inbounds %string, ptr %579, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i176, align 4
  %580 = call fastcc ptr @flag_value_or(ptr %565, ptr nonnull %579, ptr null)
  store ptr %580, ptr %output_fn, align 8
  %581 = call ptr @malloc(i32 2)
  store i16 27693, ptr %581, align 8
  %582 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %582, align 8
  %memberidx.i.i177 = getelementptr inbounds %string, ptr %582, i64 0, i32 1
  store ptr %581, ptr %memberidx.i.i177, align 8
  %memberidx1.i.i178 = getelementptr inbounds %string, ptr %582, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i178, align 4
  %memberidx2.i.i179 = getelementptr inbounds %string, ptr %582, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i179, align 4
  %583 = call fastcc ptr @flag_value_or(ptr %565, ptr nonnull %582, ptr null)
  %584 = load ptr, ptr %556, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %584, i64 0, i32 2
  %585 = load ptr, ptr %memberidx36, align 8
  %586 = call ptr @malloc(i32 8)
  store i64 8387223622006353197, ptr %586, align 8
  %587 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %587, align 8
  %memberidx.i.i180 = getelementptr inbounds %string, ptr %587, i64 0, i32 1
  store ptr %586, ptr %memberidx.i.i180, align 8
  %memberidx1.i.i181 = getelementptr inbounds %string, ptr %587, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i181, align 4
  %memberidx2.i.i182 = getelementptr inbounds %string, ptr %587, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i182, align 4
  %588 = call ptr @malloc(i32 0)
  %589 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %589, align 8
  %memberidx.i.i183 = getelementptr inbounds %string, ptr %589, i64 0, i32 1
  store ptr %588, ptr %memberidx.i.i183, align 8
  %memberidx1.i.i184 = getelementptr inbounds %string, ptr %589, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i184, i8 0, i64 16, i1 false)
  %590 = call fastcc ptr @flag_value_or(ptr %565, ptr nonnull %587, ptr nonnull %589)
  call void %585(ptr nonnull %556, ptr %590)
  %.not = icmp eq ptr %577, null
  br i1 %.not, label %else38, label %if.entry37

if.entry37:                                       ; preds = %CodeGen_codegen.exit
  %591 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %591, ptr noundef nonnull align 8 dereferenceable(3) @264, i64 3, i1 false)
  %592 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %592, align 8
  %memberidx.i.i186 = getelementptr inbounds %string, ptr %592, i64 0, i32 1
  store ptr %591, ptr %memberidx.i.i186, align 8
  %memberidx1.i.i187 = getelementptr inbounds %string, ptr %592, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i187, align 4
  %memberidx2.i.i188 = getelementptr inbounds %string, ptr %592, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i188, align 4
  %memberidx.i189 = getelementptr inbounds %string, ptr %577, i64 0, i32 2
  %593 = load i64, ptr %memberidx.i189, align 4
  %.not.i = icmp eq i64 %593, 3
  br i1 %.not.i, label %ifend.i194, label %else41

ifend.i194:                                       ; preds = %if.entry37
  %memberidx2.i192 = getelementptr inbounds %string, ptr %577, i64 0, i32 1
  %594 = load ptr, ptr %memberidx2.i192, align 8
  %595 = call i64 @memcmp(ptr %594, ptr %591, i64 %593)
  %596 = icmp eq i64 %595, 0
  br i1 %596, label %if.entry40, label %else41

else38:                                           ; preds = %CodeGen_codegen.exit
  %597 = load ptr, ptr %556, align 8
  %memberidx85 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %597, i64 0, i32 1
  %598 = load ptr, ptr %memberidx85, align 8
  %599 = call i64 %598(ptr nonnull %556)
  br label %ifend39

ifend39:                                          ; preds = %else70, %end83, %ifend.i259, %end75, %end67, %end59, %end46, %else38
  %code.0 = phi i64 [ 0, %end46 ], [ 0, %end59 ], [ 0, %end67 ], [ 0, %end75 ], [ 0, %end83 ], [ 0, %ifend.i259 ], [ %599, %else38 ], [ 0, %else70 ]
  %600 = load ptr, ptr %args, align 8
  %memberidx.i195 = getelementptr inbounds %Array_string_, ptr %600, i64 0, i32 1
  %601 = load ptr, ptr %memberidx.i195, align 8
  call void @free(ptr %601)
  tail call void @free(ptr %600)
  %602 = load ptr, ptr %module_node, align 8
  tail call void @free(ptr %602)
  br label %common.ret

if.entry40:                                       ; preds = %ifend.i194
  %603 = call ptr @malloc(i32 13)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(13) %603, ptr noundef nonnull align 8 dereferenceable(13) @265, i64 13, i1 false)
  %604 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %604, align 8
  %memberidx.i.i196 = getelementptr inbounds %string, ptr %604, i64 0, i32 1
  store ptr %603, ptr %memberidx.i.i196, align 8
  %memberidx1.i.i197 = getelementptr inbounds %string, ptr %604, i64 0, i32 2
  store i64 13, ptr %memberidx1.i.i197, align 4
  %memberidx2.i.i198 = getelementptr inbounds %string, ptr %604, i64 0, i32 3
  store i64 13, ptr %memberidx2.i.i198, align 4
  %605 = load ptr, ptr %556, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %605, i64 0, i32 3
  %606 = load ptr, ptr %memberidx43, align 8
  call void %606(ptr nonnull %556, ptr nonnull %604)
  %.not91 = icmp eq ptr %580, null
  br i1 %.not91, label %false_block, label %end

else41:                                           ; preds = %if.entry37, %ifend.i194
  %607 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %607, ptr noundef nonnull align 8 dereferenceable(7) @269, i64 7, i1 false)
  %608 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %608, align 8
  %memberidx.i.i199 = getelementptr inbounds %string, ptr %608, i64 0, i32 1
  store ptr %607, ptr %memberidx.i.i199, align 8
  %memberidx1.i.i200 = getelementptr inbounds %string, ptr %608, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i200, align 4
  %memberidx2.i.i201 = getelementptr inbounds %string, ptr %608, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i201, align 4
  %609 = load i64, ptr %memberidx.i189, align 4
  %.not.i204 = icmp eq i64 %609, 7
  br i1 %.not.i204, label %ifend.i208, label %else54

ifend.i208:                                       ; preds = %else41
  %memberidx2.i206 = getelementptr inbounds %string, ptr %577, i64 0, i32 1
  %610 = load ptr, ptr %memberidx2.i206, align 8
  %611 = call i64 @memcmp(ptr %610, ptr %607, i64 %609)
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %if.entry53, label %else54

false_block:                                      ; preds = %if.entry40
  %613 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %613, ptr noundef nonnull align 8 dereferenceable(6) @266, i64 6, i1 false)
  %614 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %614, align 8
  %memberidx.i.i210 = getelementptr inbounds %string, ptr %614, i64 0, i32 1
  store ptr %613, ptr %memberidx.i.i210, align 8
  %memberidx1.i.i211 = getelementptr inbounds %string, ptr %614, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i211, align 4
  %memberidx2.i.i212 = getelementptr inbounds %string, ptr %614, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i212, align 4
  br label %end

end:                                              ; preds = %if.entry40, %false_block
  %ternary = phi ptr [ %614, %false_block ], [ %580, %if.entry40 ]
  store ptr %ternary, ptr %output_fn, align 8
  %.not92 = icmp eq ptr %583, null
  br i1 %.not92, label %false_block45, label %true_block44

true_block44:                                     ; preds = %end
  %615 = load ptr, ptr %583, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %615, i64 0, i32 5
  %616 = load ptr, ptr %memberidx47, align 8
  %617 = call ptr %616(ptr nonnull %583)
  %618 = alloca ptr, align 8
  %619 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %618, ptr nonnull @267, ptr %617)
  %620 = load ptr, ptr %618, align 8
  %621 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %621, align 8
  %memberidx.i213 = getelementptr inbounds %string, ptr %621, i64 0, i32 1
  store ptr %620, ptr %memberidx.i213, align 8
  %memberidx1.i214 = getelementptr inbounds %string, ptr %621, i64 0, i32 2
  store i64 %619, ptr %memberidx1.i214, align 4
  %memberidx2.i215 = getelementptr inbounds %string, ptr %621, i64 0, i32 3
  store i64 %619, ptr %memberidx2.i215, align 4
  tail call void @free(ptr %617)
  br label %end46

false_block45:                                    ; preds = %end
  %622 = call ptr @malloc(i32 0)
  %623 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %623, align 8
  %memberidx.i.i216 = getelementptr inbounds %string, ptr %623, i64 0, i32 1
  store ptr %622, ptr %memberidx.i.i216, align 8
  %memberidx1.i.i217 = getelementptr inbounds %string, ptr %623, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i217, i8 0, i64 16, i1 false)
  br label %end46

end46:                                            ; preds = %false_block45, %true_block44
  %ternary48 = phi ptr [ %621, %true_block44 ], [ %623, %false_block45 ]
  %624 = call ptr @malloc(i32 8)
  store i64 3832894680125762659, ptr %624, align 8
  %625 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %625, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %625, i64 0, i32 1
  store ptr %624, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %625, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %625, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i221, align 4
  %626 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %627 = call ptr %626(ptr nonnull %625)
  %628 = load ptr, ptr %604, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %628, i64 0, i32 5
  %629 = load ptr, ptr %memberidx50, align 8
  %630 = call ptr %629(ptr nonnull %604)
  %631 = load ptr, ptr %ternary48, align 8
  %memberidx51 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %631, i64 0, i32 5
  %632 = load ptr, ptr %memberidx51, align 8
  %633 = call ptr %632(ptr nonnull %ternary48)
  %634 = load ptr, ptr %ternary, align 8
  %memberidx52 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %634, i64 0, i32 5
  %635 = load ptr, ptr %memberidx52, align 8
  %636 = call ptr %635(ptr nonnull %ternary)
  %637 = alloca ptr, align 8
  %638 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %637, ptr nonnull @268, ptr %627, ptr %630, ptr %633, ptr %636)
  %639 = load ptr, ptr %637, align 8
  tail call void @free(ptr %627)
  tail call void @free(ptr %630)
  tail call void @free(ptr %633)
  tail call void @free(ptr %636)
  call void @system(ptr %639)
  br label %ifend39

if.entry53:                                       ; preds = %ifend.i208
  %640 = load ptr, ptr %flo_module, align 8
  %641 = load ptr, ptr %640, align 8
  %memberidx56 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %641, i64 0, i32 4
  %642 = load ptr, ptr %memberidx56, align 8
  %.not90 = icmp eq ptr %580, null
  br i1 %.not90, label %false_block58, label %end59

else54:                                           ; preds = %else41, %ifend.i208
  %643 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %643, ptr noundef nonnull align 8 dereferenceable(7) @271, i64 7, i1 false)
  %644 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %644, align 8
  %memberidx.i.i222 = getelementptr inbounds %string, ptr %644, i64 0, i32 1
  store ptr %643, ptr %memberidx.i.i222, align 8
  %memberidx1.i.i223 = getelementptr inbounds %string, ptr %644, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i223, align 4
  %memberidx2.i.i224 = getelementptr inbounds %string, ptr %644, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i224, align 4
  %645 = load i64, ptr %memberidx.i189, align 4
  %.not.i227 = icmp eq i64 %645, 7
  br i1 %.not.i227, label %ifend.i231, label %else62

ifend.i231:                                       ; preds = %else54
  %memberidx2.i229 = getelementptr inbounds %string, ptr %577, i64 0, i32 1
  %646 = load ptr, ptr %memberidx2.i229, align 8
  %647 = call i64 @memcmp(ptr %646, ptr %643, i64 %645)
  %648 = icmp eq i64 %647, 0
  br i1 %648, label %if.entry61, label %else62

false_block58:                                    ; preds = %if.entry53
  %649 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %649, ptr noundef nonnull align 8 dereferenceable(9) @270, i64 9, i1 false)
  %650 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %650, align 8
  %memberidx.i.i233 = getelementptr inbounds %string, ptr %650, i64 0, i32 1
  store ptr %649, ptr %memberidx.i.i233, align 8
  %memberidx1.i.i234 = getelementptr inbounds %string, ptr %650, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i234, align 4
  %memberidx2.i.i235 = getelementptr inbounds %string, ptr %650, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i235, align 4
  br label %end59

end59:                                            ; preds = %if.entry53, %false_block58
  %ternary60 = phi ptr [ %650, %false_block58 ], [ %580, %if.entry53 ]
  call void %642(ptr nonnull %640, ptr nonnull %ternary60)
  br label %ifend39

if.entry61:                                       ; preds = %ifend.i231
  %651 = load ptr, ptr %flo_module, align 8
  %652 = load ptr, ptr %651, align 8
  %memberidx64 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %652, i64 0, i32 5
  %653 = load ptr, ptr %memberidx64, align 8
  %.not89 = icmp eq ptr %580, null
  br i1 %.not89, label %false_block66, label %end67

else62:                                           ; preds = %else54, %ifend.i231
  %654 = load ptr, ptr %emit_type, align 8
  %655 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %655, ptr noundef nonnull align 8 dereferenceable(3) @273, i64 3, i1 false)
  %656 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %656, align 8
  %memberidx.i.i236 = getelementptr inbounds %string, ptr %656, i64 0, i32 1
  store ptr %655, ptr %memberidx.i.i236, align 8
  %memberidx1.i.i237 = getelementptr inbounds %string, ptr %656, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i237, align 4
  %memberidx2.i.i238 = getelementptr inbounds %string, ptr %656, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i238, align 4
  %memberidx.i239 = getelementptr inbounds %string, ptr %654, i64 0, i32 2
  %657 = load i64, ptr %memberidx.i239, align 4
  %.not.i241 = icmp eq i64 %657, 3
  br i1 %.not.i241, label %ifend.i245, label %else70

ifend.i245:                                       ; preds = %else62
  %memberidx2.i243 = getelementptr inbounds %string, ptr %654, i64 0, i32 1
  %658 = load ptr, ptr %memberidx2.i243, align 8
  %659 = call i64 @memcmp(ptr %658, ptr %655, i64 %657)
  %660 = icmp eq i64 %659, 0
  br i1 %660, label %if.entry69, label %else70

false_block66:                                    ; preds = %if.entry61
  %661 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %661, ptr noundef nonnull align 8 dereferenceable(9) @272, i64 9, i1 false)
  %662 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %662, align 8
  %memberidx.i.i247 = getelementptr inbounds %string, ptr %662, i64 0, i32 1
  store ptr %661, ptr %memberidx.i.i247, align 8
  %memberidx1.i.i248 = getelementptr inbounds %string, ptr %662, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i248, align 4
  %memberidx2.i.i249 = getelementptr inbounds %string, ptr %662, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i249, align 4
  br label %end67

end67:                                            ; preds = %if.entry61, %false_block66
  %ternary68 = phi ptr [ %662, %false_block66 ], [ %580, %if.entry61 ]
  call void %653(ptr nonnull %651, ptr nonnull %ternary68)
  br label %ifend39

if.entry69:                                       ; preds = %ifend.i245
  %663 = load ptr, ptr %flo_module, align 8
  %664 = load ptr, ptr %663, align 8
  %memberidx72 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %664, i64 0, i32 3
  %665 = load ptr, ptr %memberidx72, align 8
  %666 = load ptr, ptr %output_fn, align 8
  %.not88 = icmp eq ptr %666, null
  br i1 %.not88, label %false_block74, label %end75

else70:                                           ; preds = %else62, %ifend.i245
  %667 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %667, ptr noundef nonnull align 8 dereferenceable(3) @274, i64 3, i1 false)
  %668 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %668, align 8
  %memberidx.i.i250 = getelementptr inbounds %string, ptr %668, i64 0, i32 1
  store ptr %667, ptr %memberidx.i.i250, align 8
  %memberidx1.i.i251 = getelementptr inbounds %string, ptr %668, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i251, align 4
  %memberidx2.i.i252 = getelementptr inbounds %string, ptr %668, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i252, align 4
  %669 = load i64, ptr %memberidx.i239, align 4
  %.not.i255 = icmp eq i64 %669, 3
  br i1 %.not.i255, label %ifend.i259, label %ifend39

ifend.i259:                                       ; preds = %else70
  %memberidx2.i257 = getelementptr inbounds %string, ptr %654, i64 0, i32 1
  %670 = load ptr, ptr %memberidx2.i257, align 8
  %671 = call i64 @memcmp(ptr %670, ptr %667, i64 %669)
  %672 = icmp eq i64 %671, 0
  br i1 %672, label %if.entry77, label %ifend39

false_block74:                                    ; preds = %if.entry69
  %673 = call ptr @malloc(i32 8)
  store i64 8011468834885367151, ptr %673, align 8
  %674 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %674, align 8
  %memberidx.i.i261 = getelementptr inbounds %string, ptr %674, i64 0, i32 1
  store ptr %673, ptr %memberidx.i.i261, align 8
  %memberidx1.i.i262 = getelementptr inbounds %string, ptr %674, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i262, align 4
  %memberidx2.i.i263 = getelementptr inbounds %string, ptr %674, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i263, align 4
  br label %end75

end75:                                            ; preds = %if.entry69, %false_block74
  %ternary76 = phi ptr [ %674, %false_block74 ], [ %666, %if.entry69 ]
  call void %665(ptr nonnull %663, ptr nonnull %ternary76)
  br label %ifend39

if.entry77:                                       ; preds = %ifend.i259
  %675 = load ptr, ptr %flo_module, align 8
  %676 = load ptr, ptr %675, align 8
  %memberidx80 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %676, i64 0, i32 6
  %677 = load ptr, ptr %memberidx80, align 8
  %678 = load ptr, ptr %output_fn, align 8
  %.not87 = icmp eq ptr %678, null
  br i1 %.not87, label %false_block82, label %end83

false_block82:                                    ; preds = %if.entry77
  %679 = call ptr @malloc(i32 8)
  store i64 8299699211037078895, ptr %679, align 8
  %680 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %680, align 8
  %memberidx.i.i264 = getelementptr inbounds %string, ptr %680, i64 0, i32 1
  store ptr %679, ptr %memberidx.i.i264, align 8
  %memberidx1.i.i265 = getelementptr inbounds %string, ptr %680, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i265, align 4
  %memberidx2.i.i266 = getelementptr inbounds %string, ptr %680, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i266, align 4
  br label %end83

end83:                                            ; preds = %if.entry77, %false_block82
  %ternary84 = phi ptr [ %680, %false_block82 ], [ %678, %if.entry77 ]
  call void %677(ptr nonnull %675, ptr nonnull %ternary84)
  br label %ifend39
}

define internal i1 @Compiler_print_errors(ptr nocapture readonly %0) {
  %2 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 6
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %if.entry, label %common.ret

common.ret:                                       ; preds = %1, %print_error_line.exit
  ret i1 %5

if.entry:                                         ; preds = %1
  %memberidx.i = getelementptr inbounds %Array_FloError_, ptr %3, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx3 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = load i64, ptr %9, align 4
  %memberidx.i12 = getelementptr inbounds %Array_FloFile_, ptr %8, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i12, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i, align 8
  %memberidx6 = getelementptr inbounds %FloFile, ptr %12, i64 0, i32 1
  %13 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %memberidx7, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %15 = load i64, ptr %7, align 4
  %memberidx1.i = getelementptr inbounds %FloError, ptr %7, i64 0, i32 1
  %16 = load ptr, ptr %memberidx1.i, align 8
  call fastcc void @print_message_error(i64 %15, ptr %16)
  %17 = load ptr, ptr %13, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i64 0, i32 5
  %18 = load ptr, ptr %memberidx2.i, align 8
  %19 = call ptr %18(ptr nonnull %13)
  %memberidx3.i = getelementptr inbounds %FloError, ptr %7, i64 0, i32 2
  %20 = load ptr, ptr %memberidx3.i, align 8
  %memberidx4.i = getelementptr inbounds %FloRange, ptr %20, i64 0, i32 3
  %21 = load i64, ptr %memberidx4.i, align 4
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @27, ptr %19, i64 %21)
  %23 = load ptr, ptr %2, align 8
  %24 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %22, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %22, ptr %memberidx2.i.i, align 4
  call void @free(ptr %19)
  %25 = load ptr, ptr %24, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx.i.i.i, align 8
  %27 = call ptr %26(ptr nonnull %24)
  %28 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %27, i64 %28)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %29 = load ptr, ptr %memberidx3.i, align 8
  %memberidx.i13 = getelementptr inbounds %FloRange, ptr %29, i64 0, i32 1
  %30 = load i64, ptr %memberidx.i13, align 4
  %31 = load ptr, ptr %14, align 8
  %memberidx.i.i14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 2
  %32 = load ptr, ptr %memberidx.i.i14, align 8
  %33 = call i8 %32(ptr nonnull %14, i64 %30)
  %34 = icmp ne i8 %33, 10
  %memberidx1.i.i15 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  %35 = load i64, ptr %memberidx1.i.i15, align 4
  %36 = icmp sgt i64 %35, %30
  %37 = and i1 %34, %36
  br i1 %37, label %while.entry.i.i, label %get_next_line_index.exit.i

while.entry.i.i:                                  ; preds = %if.entry, %while.entry.i.i
  %start.0.i.i = phi i64 [ %38, %while.entry.i.i ], [ %30, %if.entry ]
  %38 = add nsw i64 %start.0.i.i, 1
  %39 = load ptr, ptr %14, align 8
  %memberidx2.i.i16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i64 0, i32 2
  %40 = load ptr, ptr %memberidx2.i.i16, align 8
  %41 = call i8 %40(ptr nonnull %14, i64 %38)
  %42 = icmp ne i8 %41, 10
  %43 = load i64, ptr %memberidx1.i.i15, align 4
  %44 = icmp slt i64 %38, %43
  %45 = and i1 %42, %44
  br i1 %45, label %while.entry.i.i, label %get_next_line_index.exit.i

get_next_line_index.exit.i:                       ; preds = %while.entry.i.i, %if.entry
  %start.1.i.i = phi i64 [ %30, %if.entry ], [ %38, %while.entry.i.i ]
  %46 = load i64, ptr %29, align 4
  %memberidx2.i17 = getelementptr inbounds %FloRange, ptr %29, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i17, align 4
  %48 = sub i64 %46, %47
  %49 = load ptr, ptr %14, align 8
  %memberidx3.i18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx3.i18, align 8
  %51 = sub i64 %start.1.i.i, %48
  %52 = call ptr %50(ptr nonnull %14, i64 %48, i64 %51)
  %53 = load ptr, ptr %52, align 8
  %memberidx.i.i.i19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i64 0, i32 3
  %54 = load ptr, ptr %memberidx.i.i.i19, align 8
  %55 = call ptr %54(ptr nonnull %52)
  %memberidx1.i.i.i20 = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  %56 = load i64, ptr %memberidx1.i.i.i20, align 4
  call void @write(i64 1, ptr %55, i64 %56)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %57 = load i64, ptr %memberidx2.i17, align 4
  %58 = load i64, ptr %memberidx.i13, align 4
  %59 = load i64, ptr %29, align 4
  %60 = sub i64 %58, %59
  %61 = call ptr @malloc(i32 16)
  store i64 0, ptr %61, align 4
  %memberidx1.i27.i = getelementptr inbounds %Range, ptr %61, i64 0, i32 1
  store i64 %57, ptr %memberidx1.i27.i, align 4
  %62 = call ptr @malloc(i32 17)
  %memberidx.i.i29.i = getelementptr inbounds %RangeIterator, ptr %62, i64 0, i32 1
  store i64 0, ptr %memberidx.i.i29.i, align 4
  %memberidx1.i.i30.i = getelementptr inbounds %RangeIterator, ptr %62, i64 0, i32 2
  store i64 %57, ptr %memberidx1.i.i30.i, align 4
  %63 = icmp slt i64 %57, 1
  store i1 %63, ptr %62, align 1
  br i1 %63, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %get_next_line_index.exit.i, %for.body.i
  %storemerge68.i = phi i64 [ %71, %for.body.i ], [ 1, %get_next_line_index.exit.i ]
  %64 = call ptr @malloc(i32 1)
  store i8 32, ptr %64, align 8
  %65 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %65, align 8
  %memberidx.i.i33.i = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  store ptr %64, ptr %memberidx.i.i33.i, align 8
  %memberidx1.i.i34.i = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i34.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %65, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i.i, align 4
  %66 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %67 = call ptr %66(ptr nonnull %65)
  %68 = load i64, ptr %memberidx1.i.i34.i, align 4
  call void @write(i64 1, ptr %67, i64 %68)
  %69 = load i64, ptr %memberidx1.i.i30.i, align 4
  %70 = icmp sge i64 %storemerge68.i, %69
  %71 = add nuw nsw i64 %storemerge68.i, 1
  br i1 %70, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.body.i, %get_next_line_index.exit.i
  %.lcssa67.i = phi i1 [ %63, %get_next_line_index.exit.i ], [ %70, %for.body.i ]
  %storemerge.lcssa.i = phi i64 [ 1, %get_next_line_index.exit.i ], [ %71, %for.body.i ]
  store i64 %storemerge.lcssa.i, ptr %memberidx.i.i29.i, align 4
  store i1 %.lcssa67.i, ptr %62, align 1
  call void @free(ptr nonnull %62)
  %72 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %72, ptr noundef nonnull align 8 dereferenceable(7) @11, i64 7, i1 false)
  %73 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %73, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %73, i64 0, i32 1
  store ptr %72, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %73, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %73, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i.i, align 4
  %74 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %75 = call ptr %74(ptr nonnull %73)
  %76 = load i64, ptr %memberidx1.i.i.i.i, align 4
  call void @write(i64 1, ptr %75, i64 %76)
  %77 = call ptr @malloc(i32 16)
  store i64 0, ptr %77, align 4
  %memberidx1.i41.i = getelementptr inbounds %Range, ptr %77, i64 0, i32 1
  store i64 %60, ptr %memberidx1.i41.i, align 4
  %78 = call ptr @malloc(i32 17)
  %memberidx.i.i43.i = getelementptr inbounds %RangeIterator, ptr %78, i64 0, i32 1
  store i64 0, ptr %memberidx.i.i43.i, align 4
  %memberidx1.i.i44.i = getelementptr inbounds %RangeIterator, ptr %78, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i.i44.i, align 4
  %79 = icmp slt i64 %60, 1
  store i1 %79, ptr %78, align 1
  br i1 %79, label %print_error_line.exit, label %for.body12.i

for.body12.i:                                     ; preds = %for.end.i, %for.body12.i
  %storemerge6264.i = phi i64 [ %87, %for.body12.i ], [ 1, %for.end.i ]
  %80 = call ptr @malloc(i32 1)
  store i8 94, ptr %80, align 8
  %81 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %81, align 8
  %memberidx.i.i47.i = getelementptr inbounds %string, ptr %81, i64 0, i32 1
  store ptr %80, ptr %memberidx.i.i47.i, align 8
  %memberidx1.i.i48.i = getelementptr inbounds %string, ptr %81, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %string, ptr %81, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i49.i, align 4
  %82 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %83 = call ptr %82(ptr nonnull %81)
  %84 = load i64, ptr %memberidx1.i.i48.i, align 4
  call void @write(i64 1, ptr %83, i64 %84)
  %85 = load i64, ptr %memberidx1.i.i44.i, align 4
  %86 = icmp sge i64 %storemerge6264.i, %85
  %87 = add nuw nsw i64 %storemerge6264.i, 1
  br i1 %86, label %print_error_line.exit, label %for.body12.i

print_error_line.exit:                            ; preds = %for.body12.i, %for.end.i
  %.lcssa63.i = phi i1 [ %79, %for.end.i ], [ %86, %for.body12.i ]
  %storemerge62.lcssa.i = phi i64 [ 1, %for.end.i ], [ %87, %for.body12.i ]
  store i64 %storemerge62.lcssa.i, ptr %memberidx.i.i43.i, align 4
  store i1 %.lcssa63.i, ptr %78, align 1
  call void @free(ptr nonnull %78)
  %88 = call ptr @malloc(i32 4)
  store i32 1831885595, ptr %88, align 8
  %89 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %89, align 8
  %memberidx.i.i1.i.i = getelementptr inbounds %string, ptr %89, i64 0, i32 1
  store ptr %88, ptr %memberidx.i.i1.i.i, align 8
  %memberidx1.i.i2.i.i = getelementptr inbounds %string, ptr %89, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i2.i.i, align 4
  %memberidx2.i.i3.i.i = getelementptr inbounds %string, ptr %89, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i3.i.i, align 4
  %90 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %91 = call ptr %90(ptr nonnull %89)
  %92 = load i64, ptr %memberidx1.i.i2.i.i, align 4
  call void @write(i64 1, ptr %91, i64 %92)
  %93 = call ptr @malloc(i32 1)
  store i8 10, ptr %93, align 8
  %94 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %94, align 8
  %memberidx.i.i56.i = getelementptr inbounds %string, ptr %94, i64 0, i32 1
  store ptr %93, ptr %memberidx.i.i56.i, align 8
  %memberidx1.i.i57.i = getelementptr inbounds %string, ptr %94, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i57.i, align 4
  %memberidx2.i.i58.i = getelementptr inbounds %string, ptr %94, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i58.i, align 4
  %95 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %96 = call ptr %95(ptr nonnull %94)
  %97 = load i64, ptr %memberidx1.i.i57.i, align 4
  call void @write(i64 1, ptr %96, i64 %97)
  %memberidx.i61.i = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  %98 = load ptr, ptr %memberidx.i61.i, align 8
  call void @free(ptr %98)
  call void @free(ptr %52)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  br label %common.ret
}

define internal void @Compiler_set_std_path(ptr nocapture writeonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 4
  %4 = call ptr @malloc(i32 21)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(21) %4, ptr noundef nonnull align 8 dereferenceable(21) @25, i64 21, i1 false)
  %5 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %5, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  store ptr %4, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  store i64 21, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 3
  store i64 21, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %6 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 5
  %7 = load ptr, ptr %memberidx.i, align 8
  %8 = call ptr %7(ptr nonnull %1)
  %9 = load ptr, ptr %5, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i64 0, i32 5
  %10 = load ptr, ptr %memberidx1.i, align 8
  %11 = call ptr %10(ptr nonnull %5)
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @24, ptr %8, ptr %11)
  %13 = load ptr, ptr %3, align 8
  %14 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i4 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i4, align 8
  %memberidx1.i.i5 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i.i5, align 4
  %memberidx2.i.i6 = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i.i6, align 4
  call void @free(ptr %8)
  call void @free(ptr %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  store ptr %14, ptr %memberidx1, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FloError__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FloError__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal ptr @Compiler_register_file(ptr nocapture readonly %0, ptr %1) {
  %buf.i.i = alloca [400 x i8], align 1
  %3 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i64 0, i32 4
  %4 = load ptr, ptr %memberidx.i, align 8
  %5 = call ptr @malloc(i32 1)
  store i8 64, ptr %5, align 8
  %6 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %5, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i.i, align 4
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1.i, align 8
  %8 = call ptr %4(ptr nonnull %1, ptr nonnull %6, ptr %7)
  %9 = load ptr, ptr %8, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i64 0, i32 6
  %10 = load ptr, ptr %memberidx2.i, align 8
  %11 = call ptr @malloc(i32 4)
  store i32 1869375022, ptr %11, align 8
  %12 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %12, align 8
  %memberidx.i.i5.i = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  store ptr %11, ptr %memberidx.i.i5.i, align 8
  %memberidx1.i.i6.i = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i6.i, align 4
  %memberidx2.i.i7.i = getelementptr inbounds %string, ptr %12, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i7.i, align 4
  %13 = call i1 %10(ptr nonnull %8, ptr nonnull %12)
  br i1 %13, label %Compiler_find_module_path.exit, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %14 = call ptr @malloc(i32 4)
  store i32 1869375022, ptr %14, align 8
  %15 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i8.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i8.i, align 8
  %memberidx1.i.i9.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i9.i, align 4
  %memberidx2.i.i10.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i10.i, align 4
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  %16 = load i64, ptr %memberidx.i.i, align 4
  %17 = add nsw i64 %16, 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2.i.i, align 8
  %19 = call ptr @realloc(ptr %18, i64 %17)
  store ptr %19, ptr %memberidx2.i.i, align 8
  %20 = load i64, ptr %memberidx.i.i, align 4
  %21 = getelementptr inbounds i8, ptr %19, i64 %20
  %22 = load i32, ptr %14, align 8
  store i32 %22, ptr %21, align 2147483648
  store i64 %17, ptr %memberidx.i.i, align 4
  br label %Compiler_find_module_path.exit

Compiler_find_module_path.exit:                   ; preds = %2, %if.entry.i
  call void @llvm.lifetime.start.p0(i64 400, ptr nonnull %buf.i.i)
  %23 = load ptr, ptr %8, align 8
  %memberidx.i11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i64 0, i32 5
  %24 = load ptr, ptr %memberidx.i11.i, align 8
  %25 = call ptr %24(ptr nonnull %8)
  %26 = call ptr @realpath(ptr %25, ptr nonnull %buf.i.i)
  %27 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %buf.i.i)
  %28 = trunc i64 %27 to i32
  %29 = call ptr @malloc(i32 %28)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %29, ptr nonnull align 8 %buf.i.i, i64 %27, i1 false)
  %30 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 %27, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 %27, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 400, ptr nonnull %buf.i.i)
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 7
  %31 = load ptr, ptr %memberidx, align 8
  %32 = call fastcc i64 @Map_string_FileId__hash_fnc(ptr nonnull %30)
  %memberidx.i15 = getelementptr inbounds %Map_string_FileId_, ptr %31, i64 0, i32 1
  %33 = load i64, ptr %memberidx.i15, align 4
  %34 = srem i64 %32, %33
  %35 = load ptr, ptr %31, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %36, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %Compiler_find_module_path.exit, %else.i
  %hash.0.i = phi i64 [ %50, %else.i ], [ %34, %Compiler_find_module_path.exit ]
  %37 = load ptr, ptr %31, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %37, i64 %hash.0.i
  %38 = load ptr, ptr %ptridx3.i, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx.i.i16 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx.i.i16, align 4
  %41 = load i64, ptr %memberidx1.i.i.i.i, align 4
  %.not.i.i = icmp eq i64 %40, %41
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i18 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  %42 = load ptr, ptr %memberidx2.i.i18, align 8
  %43 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %44 = call i64 @memcmp(ptr %42, ptr %43, i64 %40)
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %Compiler_find_module_path.exit
  %hash.1.i = phi i64 [ %34, %Compiler_find_module_path.exit ], [ %hash.0.i, %ifend.i.i ], [ %50, %else.i ]
  %46 = load ptr, ptr %31, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %46, i64 %hash.1.i
  %47 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %47, null
  br i1 %.not29.i, label %Map_string_FileId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %48 = add nsw i64 %hash.0.i, 1
  %49 = load i64, ptr %memberidx.i15, align 4
  %50 = srem i64 %48, %49
  %51 = load ptr, ptr %31, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %51, i64 %50
  %52 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %52, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_FileId_, ptr %47, i64 0, i32 1
  %53 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_FileId____getitem__.exit

Map_string_FileId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %53, %if.entry10.i ], [ null, %while.end.i ]
  %.not = icmp eq ptr %common.ret.op.i, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %Map_string_FileId____getitem__.exit, %Array_FloFile____sl__.exit
  %common.ret.op = phi ptr [ %54, %Array_FloFile____sl__.exit ], [ %common.ret.op.i, %Map_string_FileId____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_FileId____getitem__.exit
  %54 = tail call ptr @malloc(i32 8)
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %55 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %55, i64 0, i32 2
  %56 = load i64, ptr %memberidx2, align 4
  store i64 %56, ptr %54, align 4
  %57 = load ptr, ptr %memberidx, align 8
  call fastcc void @Map_string_FileId____setitem__(ptr %57, ptr nonnull %30, ptr nonnull %54)
  %58 = load ptr, ptr %memberidx1, align 8
  %59 = tail call ptr @malloc(i32 16)
  store ptr %30, ptr %59, align 8
  %memberidx1.i19 = getelementptr inbounds %FloFile, ptr %59, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i19, align 8
  %memberidx.i20 = getelementptr inbounds %Array_FloFile_, ptr %58, i64 0, i32 2
  %60 = load i64, ptr %memberidx.i20, align 4
  %memberidx1.i21 = getelementptr inbounds %Array_FloFile_, ptr %58, i64 0, i32 3
  %61 = load i64, ptr %memberidx1.i21, align 4
  %.not.i22 = icmp slt i64 %60, %61
  br i1 %.not.i22, label %Array_FloFile____sl__.exit, label %if.entry.i25

if.entry.i25:                                     ; preds = %ifend
  %62 = shl i64 %61, 1
  store i64 %62, ptr %memberidx1.i21, align 4
  %memberidx2.i.i24 = getelementptr inbounds %Array_FloFile_, ptr %58, i64 0, i32 1
  %63 = load ptr, ptr %memberidx2.i.i24, align 8
  %64 = shl i64 %61, 4
  %65 = call ptr @realloc(ptr %63, i64 %64)
  store ptr %65, ptr %memberidx2.i.i24, align 8
  br label %Array_FloFile____sl__.exit

Array_FloFile____sl__.exit:                       ; preds = %ifend, %if.entry.i25
  %66 = load i64, ptr %memberidx.i20, align 4
  %67 = add nsw i64 %66, 1
  store i64 %67, ptr %memberidx.i20, align 4
  %memberidx4.i = getelementptr inbounds %Array_FloFile_, ptr %58, i64 0, i32 1
  %68 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i26 = getelementptr inbounds ptr, ptr %68, i64 %66
  store ptr %59, ptr %ptridx.i26, align 8
  br label %common.ret
}

define internal i1 @Compiler_set_current_file(ptr nocapture %0, ptr %1) {
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %1, align 4
  %memberidx.i = getelementptr inbounds %Array_FloFile_, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %5, i64 %4
  %6 = load ptr, ptr %ptridx.i, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx.i19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 5
  %9 = load ptr, ptr %memberidx.i19, align 8
  %10 = call ptr %9(ptr nonnull %7)
  %11 = call i64 @access(ptr %10, i64 0)
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %ifend, label %common.ret

common.ret:                                       ; preds = %2, %ifend7
  ret i1 %12

ifend:                                            ; preds = %2
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx.i20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 5
  %15 = load ptr, ptr %memberidx.i20, align 8
  %16 = call ptr %15(ptr nonnull %13)
  %17 = call i64 @fopen(ptr %16, ptr nonnull @26)
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %File_open_for_reading.exit, label %ifend.i

ifend.i:                                          ; preds = %ifend
  %19 = call ptr @malloc(i32 16)
  store ptr @VTableFile, ptr %19, align 8
  %memberidx.i.i = getelementptr inbounds %File, ptr %19, i64 0, i32 1
  store i64 %17, ptr %memberidx.i.i, align 4
  br label %File_open_for_reading.exit

File_open_for_reading.exit:                       ; preds = %ifend, %ifend.i
  %common.ret.op.i = phi ptr [ %19, %ifend.i ], [ null, %ifend ]
  %memberidx4 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 3
  %20 = load ptr, ptr %memberidx4, align 8
  %.not = icmp eq ptr %20, null
  br i1 %.not, label %ifend7, label %if.entry5

if.entry5:                                        ; preds = %File_open_for_reading.exit
  %memberidx.i21 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i21, align 8
  call void @free(ptr %21)
  tail call void @free(ptr nonnull %20)
  br label %ifend7

ifend7:                                           ; preds = %File_open_for_reading.exit, %if.entry5
  %22 = load ptr, ptr %common.ret.op.i, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr %23(ptr nonnull %common.ret.op.i)
  store ptr %24, ptr %memberidx4, align 8
  %memberidx11 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx11, align 8
  %25 = load ptr, ptr %common.ret.op.i, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %25, i64 0, i32 2
  %26 = load ptr, ptr %memberidx12, align 8
  call void %26(ptr nonnull %common.ret.op.i)
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FloFile__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FloFile__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal ptr @Compiler_add_builtins(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr %3(ptr nonnull %0, ptr %4)
  ret ptr %5
}

define internal fastcc void @Map_string_FileId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_FileId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_FileId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_FileId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_FileId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_FileId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_FileId_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_FileId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

; Function Attrs: nofree nounwind
declare noundef ptr @realpath(ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #9

declare ptr @dirname(ptr) local_unnamed_addr

define internal noalias ptr @File_read_all(ptr nocapture readonly %0) {
  %2 = tail call ptr @malloc(i32 0)
  %memberidx = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %buffer10 = alloca [1024 x i8], align 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = call i64 @fread(ptr nonnull %buffer10, i64 1, i64 1024, i64 %3)
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %ifend, %1
  %size.0.lcssa = phi i64 [ 0, %1 ], [ %8, %ifend ]
  %allocated_mem.0.lcssa = phi ptr [ %2, %1 ], [ %9, %ifend ]
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %allocated_mem.0.lcssa, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 %size.0.lcssa, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 %size.0.lcssa, ptr %memberidx2.i, align 4
  ret ptr %6

ifend:                                            ; preds = %1, %ifend
  %7 = phi i64 [ %12, %ifend ], [ %4, %1 ]
  %buffer13 = phi ptr [ %buffer, %ifend ], [ %buffer10, %1 ]
  %allocated_mem.012 = phi ptr [ %9, %ifend ], [ %2, %1 ]
  %size.011 = phi i64 [ %8, %ifend ], [ 0, %1 ]
  %8 = add nsw i64 %7, %size.011
  %9 = call ptr @realloc(ptr %allocated_mem.012, i64 %8)
  %10 = getelementptr inbounds i8, ptr %9, i64 %size.011
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %10, ptr nonnull align 2147483648 %buffer13, i64 %7, i1 false)
  %buffer = alloca [1024 x i8], align 1
  %11 = load i64, ptr %memberidx, align 4
  %12 = call i64 @fread(ptr nonnull %buffer, i64 1, i64 1024, i64 %11)
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %if.entry, label %ifend
}

define internal i64 @File_write_bytes_length(ptr nocapture readonly %0, ptr %1, i64 %2) {
  %memberidx = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %4 = load i64, ptr %memberidx, align 4
  %5 = call i64 @fwrite(ptr %1, i64 1, i64 %2, i64 %4)
  ret i64 %5
}

define internal void @File_close(ptr nocapture readonly %0) {
  %memberidx = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %2 = load i64, ptr %memberidx, align 4
  call void @fclose(i64 %2)
  ret void
}

declare i64 @fopen(ptr, ptr) local_unnamed_addr

declare i64 @fread(ptr, i64, i64, i64) local_unnamed_addr

declare i64 @fwrite(ptr, i64, i64, i64) local_unnamed_addr

; Function Attrs: nofree nounwind
declare noundef i64 @access(ptr nocapture noundef readonly, i64 noundef) local_unnamed_addr #9

declare void @fclose(i64) local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Token__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Token__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @Lexer_tokenize(ptr %0, ptr %1) unnamed_addr {
  %3 = alloca %Lexer, align 8
  %memberidx.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 1
  store ptr %0, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 2
  store ptr %1, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 5
  store i64 1, ptr %memberidx3.i, align 4
  %memberidx4.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 4
  store i64 0, ptr %memberidx4.i, align 4
  %memberidx2.i.i24 = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx2.i.i24, align 4
  %5 = icmp slt i64 %4, 0
  br i1 %5, label %Lexer_advance.exit, label %ifend.i

ifend.i:                                          ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i26, align 8
  store i64 0, ptr %memberidx2.i, align 4
  %8 = call i8 %7(ptr nonnull %0, i64 0)
  store i8 %8, ptr %3, align 8
  %9 = icmp eq i8 %8, 10
  br i1 %9, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx4.i, align 4
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx3.i.sink65 = phi ptr [ %memberidx3.i, %if.entry6.i ], [ %memberidx4.i, %ifend.i ]
  %10 = load i64, ptr %memberidx3.i.sink65, align 4
  %11 = add nsw i64 %10, 1
  store i64 %11, ptr %memberidx3.i.sink65, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %2
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Token_, ptr %12, align 8
  %memberidx.i28 = getelementptr inbounds %Array_Token_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx.i28, align 4
  %memberidx1.i29 = getelementptr inbounds %Array_Token_, ptr %12, i64 0, i32 3
  store i64 8, ptr %memberidx1.i29, align 4
  %memberidx2.i30 = getelementptr inbounds %Array_Token_, ptr %12, i64 0, i32 1
  %13 = call ptr @malloc(i32 64)
  store ptr %13, ptr %memberidx2.i30, align 8
  store i64 0, ptr %memberidx.i28, align 4
  %14 = load i64, ptr %memberidx2.i, align 4
  %15 = load ptr, ptr %memberidx.i, align 8
  %memberidx2.i33 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx2.i33, align 4
  %17 = icmp sge i64 %14, %16
  %18 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx3, align 4
  %20 = icmp ne i64 %19, 0
  %21 = or i1 %17, %20
  br i1 %21, label %while.end, label %while.entry

while.entry:                                      ; preds = %Lexer_advance.exit, %Lexer_advance.exit53
  %22 = call fastcc ptr @Lexer_lex_token(ptr nonnull %3)
  %23 = load i64, ptr %memberidx.i28, align 4
  %24 = load i64, ptr %memberidx1.i29, align 4
  %.not.i56 = icmp slt i64 %23, %24
  br i1 %.not.i56, label %Array_Token____sl__.exit63, label %if.entry.i59

if.entry.i59:                                     ; preds = %while.entry
  %25 = shl i64 %24, 1
  store i64 %25, ptr %memberidx1.i29, align 4
  %26 = load ptr, ptr %memberidx2.i30, align 8
  %27 = shl i64 %24, 4
  %28 = call ptr @realloc(ptr %26, i64 %27)
  store ptr %28, ptr %memberidx2.i30, align 8
  br label %Array_Token____sl__.exit63

Array_Token____sl__.exit63:                       ; preds = %while.entry, %if.entry.i59
  %29 = load i64, ptr %memberidx.i28, align 4
  %30 = add nsw i64 %29, 1
  store i64 %30, ptr %memberidx.i28, align 4
  %31 = load ptr, ptr %memberidx2.i30, align 8
  %ptridx.i61 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr %22, ptr %ptridx.i61, align 8
  %32 = load i64, ptr %memberidx2.i, align 4
  %33 = load ptr, ptr %memberidx.i, align 8
  %memberidx2.i.i43 = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  %34 = load i64, ptr %memberidx2.i.i43, align 4
  %.not = icmp slt i64 %32, %34
  br i1 %.not, label %ifend.i47, label %Lexer_advance.exit53

ifend.i47:                                        ; preds = %Array_Token____sl__.exit63
  %35 = load ptr, ptr %33, align 8
  %memberidx2.i45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i64 0, i32 2
  %36 = load ptr, ptr %memberidx2.i45, align 8
  %37 = add nsw i64 %32, 1
  store i64 %37, ptr %memberidx2.i, align 4
  %38 = call i8 %36(ptr nonnull %33, i64 %37)
  store i8 %38, ptr %3, align 8
  %39 = icmp eq i8 %38, 10
  br i1 %39, label %if.entry6.i50, label %Lexer_advance.exit53.sink.split

if.entry6.i50:                                    ; preds = %ifend.i47
  store i64 0, ptr %memberidx4.i, align 4
  br label %Lexer_advance.exit53.sink.split

Lexer_advance.exit53.sink.split:                  ; preds = %ifend.i47, %if.entry6.i50
  %memberidx3.i.sink68 = phi ptr [ %memberidx3.i, %if.entry6.i50 ], [ %memberidx4.i, %ifend.i47 ]
  %40 = load i64, ptr %memberidx3.i.sink68, align 4
  %41 = add nsw i64 %40, 1
  store i64 %41, ptr %memberidx3.i.sink68, align 4
  br label %Lexer_advance.exit53

Lexer_advance.exit53:                             ; preds = %Lexer_advance.exit53.sink.split, %Array_Token____sl__.exit63
  %42 = load i64, ptr %memberidx2.i, align 4
  %43 = load ptr, ptr %memberidx.i, align 8
  %memberidx2.i40 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx2.i40, align 4
  %45 = icmp sge i64 %42, %44
  %46 = load ptr, ptr %memberidx1.i, align 8
  %memberidx5 = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 2
  %47 = load i64, ptr %memberidx5, align 4
  %48 = icmp ne i64 %47, 0
  %49 = or i1 %45, %48
  br i1 %49, label %while.end, label %while.entry

while.end:                                        ; preds = %Lexer_advance.exit53, %Lexer_advance.exit
  %50 = tail call ptr @malloc(i32 16)
  %51 = tail call ptr @malloc(i32 32)
  %52 = load i64, ptr %memberidx4.i, align 4
  %53 = load i64, ptr %memberidx3.i, align 4
  %memberidx2.i36 = getelementptr inbounds %FloRange, ptr %51, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %51, i8 0, i64 16, i1 false)
  store i64 %52, ptr %memberidx2.i36, align 4
  %memberidx3.i37 = getelementptr inbounds %FloRange, ptr %51, i64 0, i32 3
  store i64 %53, ptr %memberidx3.i37, align 4
  store i64 46, ptr %50, align 4
  %memberidx1.i34 = getelementptr inbounds %Token, ptr %50, i64 0, i32 1
  store ptr %51, ptr %memberidx1.i34, align 8
  %54 = load i64, ptr %memberidx.i28, align 4
  %55 = load i64, ptr %memberidx1.i29, align 4
  %.not.i = icmp slt i64 %54, %55
  br i1 %.not.i, label %Array_Token____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %while.end
  %56 = shl i64 %55, 1
  store i64 %56, ptr %memberidx1.i29, align 4
  %57 = load ptr, ptr %memberidx2.i30, align 8
  %58 = shl i64 %55, 4
  %59 = call ptr @realloc(ptr %57, i64 %58)
  store ptr %59, ptr %memberidx2.i30, align 8
  br label %Array_Token____sl__.exit

Array_Token____sl__.exit:                         ; preds = %while.end, %if.entry.i
  %60 = load i64, ptr %memberidx.i28, align 4
  %61 = add nsw i64 %60, 1
  store i64 %61, ptr %memberidx.i28, align 4
  %62 = load ptr, ptr %memberidx2.i30, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %62, i64 %60
  store ptr %50, ptr %ptridx.i, align 8
  ret ptr %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Array_Token___pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Array_Token___find(ptr nocapture readonly %0, ptr nocapture readonly %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx1.i = getelementptr inbounds %Array_Token_, ptr %1, i64 0, i32 2
  %5 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i10.i = getelementptr inbounds %Array_Token_, ptr %1, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %15, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %6 = load ptr, ptr %ptridx, align 8
  %memberidx.i = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %7, %5
  br i1 %.not.i, label %for.cond.preheader.i, label %ifend

for.cond.preheader.i:                             ; preds = %for.body
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %for.body.lr.ph.i, label %common.ret

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %10 = load ptr, ptr %memberidx.i10.i, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %storemerge12.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %13, %for.body.i ]
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %storemerge12.i
  %11 = load ptr, ptr %ptridx.i.i, align 8
  %ptridx.i11.i = getelementptr inbounds ptr, ptr %10, i64 %storemerge12.i
  %12 = load ptr, ptr %ptridx.i11.i, align 8
  %.not9.i = icmp eq ptr %11, %12
  %13 = add nuw nsw i64 %storemerge12.i, 1
  %14 = icmp slt i64 %13, %7
  %or.cond.i = select i1 %.not9.i, i1 %14, i1 false
  br i1 %or.cond.i, label %for.body.i, label %Array_Token____eq__.exit

Array_Token____eq__.exit:                         ; preds = %for.body.i
  br i1 %.not9.i, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %Array_Token____eq__.exit, %for.cond.preheader.i, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %Array_Token____eq__.exit ], [ %i.06, %for.cond.preheader.i ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body, %Array_Token____eq__.exit
  %15 = add nuw nsw i64 %i.06, 1
  %16 = icmp slt i64 %15, %2
  br i1 %16, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal i64 @Array_int__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_int_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds i64, ptr %4, i64 %2
  %5 = load i64, ptr %ptridx, align 4
  ret i64 %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_int__find(ptr nocapture readonly %0, i64 %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_int_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds i64, ptr %4, i64 %i.06
  %5 = load i64, ptr %ptridx, align 4
  %6 = icmp eq i64 %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @Lexer_string_token(ptr %0) unnamed_addr {
  %2 = alloca %StringBuilder, align 8
  %3 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Array_Token__, ptr %3, align 8
  %memberidx.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 1
  %4 = call ptr @malloc(i32 64)
  store ptr %4, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_int_, ptr %5, align 8
  %memberidx.i64 = getelementptr inbounds %Array_int_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i64, align 4
  %memberidx1.i65 = getelementptr inbounds %Array_int_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i65, align 4
  %memberidx2.i66 = getelementptr inbounds %Array_int_, ptr %5, i64 0, i32 1
  %6 = call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i66, align 8
  store i64 0, ptr %memberidx.i64, align 4
  %memberidx.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i, align 4
  %.not = icmp slt i64 %7, %9
  br i1 %.not, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %1
  %10 = load ptr, ptr %8, align 8
  %memberidx2.i68 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 2
  %11 = load ptr, ptr %memberidx2.i68, align 8
  %12 = add nsw i64 %7, 1
  store i64 %12, ptr %memberidx.i.i, align 4
  %13 = call i8 %11(ptr nonnull %8, i64 %12)
  store i8 %13, ptr %0, align 1
  %14 = icmp eq i8 %13, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %14, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink247 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %15 = load i64, ptr %memberidx10.i.sink247, align 4
  %16 = add nsw i64 %15, 1
  store i64 %16, ptr %memberidx10.i.sink247, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %1
  %17 = alloca %StringBuilder, align 8
  store ptr @VTableStringBuilder, ptr %17, align 8
  %memberidx.i69 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 2
  store i64 1, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 1
  %18 = call ptr @malloc(i32 1)
  store ptr %18, ptr %memberidx1.i70, align 8
  %memberidx3.i71 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 3
  store ptr %18, ptr %memberidx3.i71, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 4
  store i64 0, ptr %memberidx5.i, align 8
  %19 = load i64, ptr %memberidx.i.i, align 4
  %20 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i74 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2.i74, align 4
  %.not217 = icmp slt i64 %19, %21
  br i1 %.not217, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Lexer_advance.exit
  %memberidx12.i106 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i103 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i104 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %memberidx12.i138 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i135 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i136 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %memberidx12.i209 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i206 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i207 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %memberidx12.i163 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i160 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i161 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %memberidx27 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx28 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %memberidx12.i122 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i119 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i120 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.outer

while.entry.outer:                                ; preds = %while.entry.preheader, %Lexer_advance.exit124
  %escape_next.0.ph = phi i1 [ false, %while.entry.preheader ], [ %113, %Lexer_advance.exit124 ]
  %length.0.ph = phi i64 [ 2, %while.entry.preheader ], [ %112, %Lexer_advance.exit124 ]
  %22 = load i8, ptr %0, align 1
  %23 = icmp ne i8 %22, 34
  %24 = or i1 %escape_next.0.ph, %23
  br i1 %24, label %ifend.lr.ph, label %while.end

ifend.lr.ph:                                      ; preds = %while.entry.outer
  %25 = add nsw i64 %length.0.ph, -2
  br label %ifend

while.end:                                        ; preds = %while.entry.outer, %Lexer_advance.exit124, %Array_Array_Token_____sl__.exit, %Lexer_advance.exit
  %length.1 = phi i64 [ 2, %Lexer_advance.exit ], [ %length.0.ph, %Array_Array_Token_____sl__.exit ], [ %112, %Lexer_advance.exit124 ], [ %length.0.ph, %while.entry.outer ]
  %26 = call ptr @malloc(i32 32)
  %27 = load i64, ptr %memberidx.i.i, align 4
  %28 = sub i64 1, %length.1
  %29 = add i64 %28, %27
  %30 = add nsw i64 %27, 1
  %memberidx2.i76 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %31 = load i64, ptr %memberidx2.i76, align 4
  %32 = sub i64 %31, %length.1
  %memberidx3.i77 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %33 = load i64, ptr %memberidx3.i77, align 4
  store i64 %29, ptr %26, align 4
  %memberidx1.i.i78 = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  store i64 %30, ptr %memberidx1.i.i78, align 4
  %memberidx2.i.i79 = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 2
  store i64 %32, ptr %memberidx2.i.i79, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  store i64 %33, ptr %memberidx3.i.i, align 4
  %34 = load ptr, ptr %17, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 3
  %35 = load ptr, ptr %memberidx32, align 8
  %36 = call ptr %35(ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %2)
  %memberidx.i80 = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx.i80, align 4
  store ptr @VTableStringBuilder, ptr %2, align 8
  %memberidx.i.i81 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 2
  store i64 %37, ptr %memberidx.i.i81, align 8
  %memberidx1.i.i82 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 1
  %38 = trunc i64 %37 to i32
  %39 = call ptr @malloc(i32 %38)
  store ptr %39, ptr %memberidx1.i.i82, align 8
  %memberidx3.i.i83 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 3
  store ptr %39, ptr %memberidx3.i.i83, align 8
  %memberidx5.i.i = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 4
  store i64 0, ptr %memberidx5.i.i, align 8
  %40 = load i64, ptr %memberidx.i80, align 4
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %for.body.i, label %unescape.exit

for.body.i:                                       ; preds = %while.end, %for.incr.i
  %i.0.i237 = phi i64 [ %46, %for.incr.i ], [ 0, %while.end ]
  %42 = load ptr, ptr %36, align 8
  %memberidx2.i84 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 2
  %43 = load ptr, ptr %memberidx2.i84, align 8
  %44 = call i8 %43(ptr nonnull %36, i64 %i.0.i237)
  %45 = icmp eq i8 %44, 92
  br i1 %45, label %if.entry.i, label %ifend.i85

for.incr.i:                                       ; preds = %if.entry16.i, %if.entry8.i, %ifend.i85
  %i.1.i = phi i64 [ %49, %if.entry8.i ], [ %81, %if.entry16.i ], [ %i.2.i, %ifend.i85 ]
  %46 = add nsw i64 %i.1.i, 1
  %47 = load i64, ptr %memberidx.i80, align 4
  %48 = icmp slt i64 %46, %47
  br i1 %48, label %for.body.i, label %unescape.exit

if.entry.i:                                       ; preds = %for.body.i
  %49 = add nsw i64 %i.0.i237, 3
  %50 = load i64, ptr %memberidx.i80, align 4
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %if.entry4.i, label %ifend6.i

ifend.i85:                                        ; preds = %ifend27.i.i, %get_escape_char.exit.i.fold.split, %get_escape_char.exit.i.fold.split226, %get_escape_char.exit.i.fold.split227, %get_escape_char.exit.i.fold.split228, %get_escape_char.exit.i.fold.split229, %get_escape_char.exit.i.fold.split230, %get_escape_char.exit.i.fold.split231, %get_escape_char.exit.i.fold.split232, %get_escape_char.exit.i.fold.split233, %ifend6.i, %for.body.i
  %char.0.i = phi i8 [ %44, %for.body.i ], [ 7, %ifend6.i ], [ %67, %ifend27.i.i ], [ 8, %get_escape_char.exit.i.fold.split ], [ 9, %get_escape_char.exit.i.fold.split226 ], [ 12, %get_escape_char.exit.i.fold.split227 ], [ 10, %get_escape_char.exit.i.fold.split228 ], [ 13, %get_escape_char.exit.i.fold.split229 ], [ 11, %get_escape_char.exit.i.fold.split230 ], [ 0, %get_escape_char.exit.i.fold.split231 ], [ %67, %get_escape_char.exit.i.fold.split232 ], [ %67, %get_escape_char.exit.i.fold.split233 ]
  %i.2.i = phi i64 [ %i.0.i237, %for.body.i ], [ %66, %ifend6.i ], [ %66, %ifend27.i.i ], [ %66, %get_escape_char.exit.i.fold.split ], [ %66, %get_escape_char.exit.i.fold.split226 ], [ %66, %get_escape_char.exit.i.fold.split227 ], [ %66, %get_escape_char.exit.i.fold.split228 ], [ %66, %get_escape_char.exit.i.fold.split229 ], [ %66, %get_escape_char.exit.i.fold.split230 ], [ %66, %get_escape_char.exit.i.fold.split231 ], [ %66, %get_escape_char.exit.i.fold.split232 ], [ %66, %get_escape_char.exit.i.fold.split233 ]
  %52 = load ptr, ptr %2, align 8
  %memberidx21.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 2
  %53 = load ptr, ptr %memberidx21.i, align 8
  call void %53(ptr nonnull %2, i8 %char.0.i)
  br label %for.incr.i

if.entry4.i:                                      ; preds = %if.entry.i
  %54 = load ptr, ptr %36, align 8
  %memberidx7.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i64 0, i32 3
  %55 = load ptr, ptr %memberidx7.i, align 8
  %56 = call ptr %55(ptr nonnull %36)
  %57 = getelementptr i8, ptr %56, i64 1
  %58 = getelementptr i8, ptr %57, i64 %i.0.i237
  %59 = call i64 @memcmp(ptr %58, ptr nonnull @52, i64 3)
  %60 = icmp eq i64 %59, 0
  %61 = call i64 @memcmp(ptr %58, ptr nonnull @53, i64 3)
  %62 = icmp eq i64 %61, 0
  %63 = or i1 %60, %62
  br i1 %63, label %if.entry8.i, label %ifend10.i

ifend6.i:                                         ; preds = %if.entry13.i, %ifend10.i, %if.entry.i
  %64 = load ptr, ptr %36, align 8
  %memberidx20.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 2
  %65 = load ptr, ptr %memberidx20.i, align 8
  %66 = add nsw i64 %i.0.i237, 1
  %67 = call i8 %65(ptr nonnull %36, i64 %66)
  switch i8 %67, label %ifend27.i.i [
    i8 97, label %ifend.i85
    i8 98, label %get_escape_char.exit.i.fold.split
    i8 116, label %get_escape_char.exit.i.fold.split226
    i8 102, label %get_escape_char.exit.i.fold.split227
    i8 110, label %get_escape_char.exit.i.fold.split228
    i8 114, label %get_escape_char.exit.i.fold.split229
    i8 118, label %get_escape_char.exit.i.fold.split230
    i8 48, label %get_escape_char.exit.i.fold.split231
    i8 39, label %get_escape_char.exit.i.fold.split232
    i8 34, label %get_escape_char.exit.i.fold.split233
  ]

ifend27.i.i:                                      ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split:                ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split226:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split227:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split228:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split229:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split230:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split231:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split232:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split233:             ; preds = %ifend6.i
  br label %ifend.i85

if.entry8.i:                                      ; preds = %if.entry4.i
  %68 = load ptr, ptr %2, align 8
  %memberidx11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx11.i, align 8
  %70 = call ptr @malloc(i32 1)
  store i8 27, ptr %70, align 8
  %71 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %71, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 1
  store ptr %70, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i.i, align 4
  call void %69(ptr nonnull %2, ptr nonnull %71)
  br label %for.incr.i

ifend10.i:                                        ; preds = %if.entry4.i
  %72 = add nsw i64 %i.0.i237, 6
  %73 = load i64, ptr %memberidx.i80, align 4
  %74 = icmp slt i64 %72, %73
  br i1 %74, label %if.entry13.i, label %ifend6.i

if.entry13.i:                                     ; preds = %ifend10.i
  %75 = call i64 @memcmp(ptr %58, ptr nonnull @54, i64 5)
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %if.entry16.i, label %ifend6.i

if.entry16.i:                                     ; preds = %if.entry13.i
  %77 = load ptr, ptr %2, align 8
  %memberidx19.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx19.i, align 8
  %79 = call ptr @malloc(i32 1)
  store i8 27, ptr %79, align 8
  %80 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %80, align 8
  %memberidx.i.i44.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  store ptr %79, ptr %memberidx.i.i44.i, align 8
  %memberidx1.i.i45.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i45.i, align 4
  %memberidx2.i.i46.i = getelementptr inbounds %string, ptr %80, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i46.i, align 4
  call void %78(ptr nonnull %2, ptr nonnull %80)
  %81 = add nsw i64 %i.0.i237, 5
  br label %for.incr.i

unescape.exit:                                    ; preds = %for.incr.i, %while.end
  %82 = load ptr, ptr %2, align 8
  %memberidx22.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %82, i64 0, i32 3
  %83 = load ptr, ptr %memberidx22.i, align 8
  %84 = call ptr %83(ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %2)
  %85 = tail call ptr @malloc(i32 40)
  store i64 34, ptr %85, align 4
  %memberidx1.i.i86 = getelementptr inbounds %Token, ptr %85, i64 0, i32 1
  store ptr %26, ptr %memberidx1.i.i86, align 8
  %memberidx.i87 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 2
  store ptr %84, ptr %memberidx.i87, align 8
  %memberidx1.i88 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 3
  store ptr %5, ptr %memberidx1.i88, align 8
  %memberidx2.i89 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 4
  store ptr %3, ptr %memberidx2.i89, align 8
  ret ptr %85

ifend:                                            ; preds = %ifend.lr.ph, %Array_Array_Token_____sl__.exit
  %86 = phi i8 [ %22, %ifend.lr.ph ], [ %187, %Array_Array_Token_____sl__.exit ]
  %escape_next.0239 = phi i1 [ %escape_next.0.ph, %ifend.lr.ph ], [ false, %Array_Array_Token_____sl__.exit ]
  %87 = icmp ne i8 %86, 36
  %88 = or i1 %escape_next.0239, %87
  br i1 %88, label %ifend8, label %if.entry6

if.entry6:                                        ; preds = %ifend
  %89 = load i64, ptr %memberidx.i64, align 4
  %90 = load i64, ptr %memberidx1.i65, align 4
  %.not.i = icmp slt i64 %89, %90
  br i1 %.not.i, label %Array_int____sl__.exit, label %if.entry.i94

if.entry.i94:                                     ; preds = %if.entry6
  %91 = shl i64 %90, 1
  store i64 %91, ptr %memberidx1.i65, align 4
  %92 = load ptr, ptr %memberidx2.i66, align 8
  %93 = shl i64 %90, 4
  %94 = call ptr @realloc(ptr %92, i64 %93)
  store ptr %94, ptr %memberidx2.i66, align 8
  br label %Array_int____sl__.exit

Array_int____sl__.exit:                           ; preds = %if.entry6, %if.entry.i94
  %95 = load i64, ptr %memberidx.i64, align 4
  %96 = add nsw i64 %95, 1
  store i64 %96, ptr %memberidx.i64, align 4
  %97 = load ptr, ptr %memberidx2.i66, align 8
  %ptridx.i = getelementptr inbounds i64, ptr %97, i64 %95
  store i64 %25, ptr %ptridx.i, align 4
  %98 = load i64, ptr %memberidx.i.i, align 4
  %99 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i98 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  %100 = load i64, ptr %memberidx2.i.i98, align 4
  %.not218 = icmp slt i64 %98, %100
  br i1 %.not218, label %ifend.i102, label %Lexer_advance.exit108

ifend.i102:                                       ; preds = %Array_int____sl__.exit
  %101 = load ptr, ptr %99, align 8
  %memberidx2.i100 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %101, i64 0, i32 2
  %102 = load ptr, ptr %memberidx2.i100, align 8
  %103 = add nsw i64 %98, 1
  store i64 %103, ptr %memberidx.i.i, align 4
  %104 = call i8 %102(ptr nonnull %99, i64 %103)
  store i8 %104, ptr %0, align 1
  %105 = icmp eq i8 %104, 10
  br i1 %105, label %if.entry6.i105, label %Lexer_advance.exit108.sink.split

if.entry6.i105:                                   ; preds = %ifend.i102
  store i64 0, ptr %memberidx9.i103, align 4
  br label %Lexer_advance.exit108.sink.split

Lexer_advance.exit108.sink.split:                 ; preds = %ifend.i102, %if.entry6.i105
  %memberidx10.i104.sink249 = phi ptr [ %memberidx10.i104, %if.entry6.i105 ], [ %memberidx12.i106, %ifend.i102 ]
  %106 = load i64, ptr %memberidx10.i104.sink249, align 4
  %107 = add nsw i64 %106, 1
  store i64 %107, ptr %memberidx10.i104.sink249, align 4
  br label %Lexer_advance.exit108

Lexer_advance.exit108:                            ; preds = %Lexer_advance.exit108.sink.split, %Array_int____sl__.exit
  %108 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Token_, ptr %108, align 8
  %memberidx.i109 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 2
  store i64 0, ptr %memberidx.i109, align 4
  %memberidx1.i110 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 3
  store i64 8, ptr %memberidx1.i110, align 4
  %memberidx2.i111 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 1
  %109 = call ptr @malloc(i32 64)
  store ptr %109, ptr %memberidx2.i111, align 8
  store i64 0, ptr %memberidx.i109, align 4
  %active_open_pars = alloca i64, align 8
  store i64 0, ptr %active_open_pars, align 8
  %110 = load i8, ptr %0, align 1
  %111 = icmp eq i8 %110, 40
  br i1 %111, label %if.entry12, label %else13

ifend8:                                           ; preds = %ifend
  %112 = add nuw nsw i64 %length.0.ph, 1
  %113 = icmp eq i8 %86, 92
  %114 = load ptr, ptr %17, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %114, i64 0, i32 2
  %115 = load ptr, ptr %memberidx30, align 8
  call void %115(ptr nonnull %17, i8 %86)
  %116 = load i64, ptr %memberidx.i.i, align 4
  %117 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i114 = getelementptr inbounds %string, ptr %117, i64 0, i32 2
  %118 = load i64, ptr %memberidx2.i.i114, align 4
  %.not224 = icmp slt i64 %116, %118
  br i1 %.not224, label %ifend.i118, label %Lexer_advance.exit124

ifend.i118:                                       ; preds = %ifend8
  %119 = load ptr, ptr %117, align 8
  %memberidx2.i116 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %119, i64 0, i32 2
  %120 = load ptr, ptr %memberidx2.i116, align 8
  %121 = add nsw i64 %116, 1
  store i64 %121, ptr %memberidx.i.i, align 4
  %122 = call i8 %120(ptr nonnull %117, i64 %121)
  store i8 %122, ptr %0, align 1
  %123 = icmp eq i8 %122, 10
  br i1 %123, label %if.entry6.i121, label %Lexer_advance.exit124.sink.split

if.entry6.i121:                                   ; preds = %ifend.i118
  store i64 0, ptr %memberidx9.i119, align 4
  br label %Lexer_advance.exit124.sink.split

Lexer_advance.exit124.sink.split:                 ; preds = %ifend.i118, %if.entry6.i121
  %memberidx10.i120.sink251 = phi ptr [ %memberidx10.i120, %if.entry6.i121 ], [ %memberidx12.i122, %ifend.i118 ]
  %124 = load i64, ptr %memberidx10.i120.sink251, align 4
  %125 = add nsw i64 %124, 1
  store i64 %125, ptr %memberidx10.i120.sink251, align 4
  br label %Lexer_advance.exit124

Lexer_advance.exit124:                            ; preds = %Lexer_advance.exit124.sink.split, %ifend8
  %126 = load i64, ptr %memberidx.i.i, align 4
  %127 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i127 = getelementptr inbounds %string, ptr %127, i64 0, i32 2
  %128 = load i64, ptr %memberidx2.i127, align 4
  %.not225 = icmp slt i64 %126, %128
  br i1 %.not225, label %while.entry.outer, label %while.end

if.entry12:                                       ; preds = %Lexer_advance.exit108
  %129 = load i64, ptr %memberidx.i.i, align 4
  %130 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i130 = getelementptr inbounds %string, ptr %130, i64 0, i32 2
  %131 = load i64, ptr %memberidx2.i.i130, align 4
  %.not220 = icmp slt i64 %129, %131
  br i1 %.not220, label %ifend.i134, label %Lexer_advance.exit140

ifend.i134:                                       ; preds = %if.entry12
  %132 = load ptr, ptr %130, align 8
  %memberidx2.i132 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %132, i64 0, i32 2
  %133 = load ptr, ptr %memberidx2.i132, align 8
  %134 = add nsw i64 %129, 1
  store i64 %134, ptr %memberidx.i.i, align 4
  %135 = call i8 %133(ptr nonnull %130, i64 %134)
  store i8 %135, ptr %0, align 1
  %136 = icmp eq i8 %135, 10
  br i1 %136, label %if.entry6.i137, label %Lexer_advance.exit140.sink.split

if.entry6.i137:                                   ; preds = %ifend.i134
  store i64 0, ptr %memberidx9.i135, align 4
  br label %Lexer_advance.exit140.sink.split

Lexer_advance.exit140.sink.split:                 ; preds = %ifend.i134, %if.entry6.i137
  %memberidx10.i136.sink253 = phi ptr [ %memberidx10.i136, %if.entry6.i137 ], [ %memberidx12.i138, %ifend.i134 ]
  %137 = load i64, ptr %memberidx10.i136.sink253, align 4
  %138 = add nsw i64 %137, 1
  store i64 %138, ptr %memberidx10.i136.sink253, align 4
  br label %Lexer_advance.exit140

Lexer_advance.exit140:                            ; preds = %Lexer_advance.exit140.sink.split, %if.entry12
  %139 = load i8, ptr %0, align 1
  %140 = icmp ne i8 %139, 41
  %141 = load i64, ptr %memberidx.i.i, align 4
  %142 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i143 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  %143 = load i64, ptr %memberidx2.i143, align 4
  %.not221 = icmp slt i64 %141, %143
  %144 = and i1 %140, %.not221
  br i1 %144, label %while.entry15.preheader, label %ifend14

while.entry15.preheader:                          ; preds = %Lexer_advance.exit140
  %active_open_pars.promoted = load i64, ptr %active_open_pars, align 8
  br label %while.entry15

else13:                                           ; preds = %Lexer_advance.exit108
  %145 = call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  %146 = load i64, ptr %memberidx.i109, align 4
  %147 = load i64, ptr %memberidx1.i110, align 4
  %.not.i146 = icmp slt i64 %146, %147
  br i1 %.not.i146, label %Array_Token____sl__.exit, label %if.entry.i149

if.entry.i149:                                    ; preds = %else13
  %148 = shl i64 %147, 1
  store i64 %148, ptr %memberidx1.i110, align 4
  %149 = load ptr, ptr %memberidx2.i111, align 8
  %150 = shl i64 %147, 4
  %151 = call ptr @realloc(ptr %149, i64 %150)
  store ptr %151, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit

Array_Token____sl__.exit:                         ; preds = %else13, %if.entry.i149
  %152 = load i64, ptr %memberidx.i109, align 4
  %153 = add nsw i64 %152, 1
  store i64 %153, ptr %memberidx.i109, align 4
  %154 = load ptr, ptr %memberidx2.i111, align 8
  %ptridx.i151 = getelementptr inbounds ptr, ptr %154, i64 %152
  store ptr %145, ptr %ptridx.i151, align 8
  br label %ifend14

ifend14.loopexit:                                 ; preds = %Lexer_advance.exit211
  store i64 %192, ptr %active_open_pars, align 8
  br label %ifend14

ifend14:                                          ; preds = %ifend14.loopexit, %Lexer_advance.exit140, %Array_Token____sl__.exit
  %155 = load i64, ptr %memberidx.i.i, align 4
  %156 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i155 = getelementptr inbounds %string, ptr %156, i64 0, i32 2
  %157 = load i64, ptr %memberidx2.i.i155, align 4
  %.not219 = icmp slt i64 %155, %157
  br i1 %.not219, label %ifend.i159, label %Lexer_advance.exit165

ifend.i159:                                       ; preds = %ifend14
  %158 = load ptr, ptr %156, align 8
  %memberidx2.i157 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %158, i64 0, i32 2
  %159 = load ptr, ptr %memberidx2.i157, align 8
  %160 = add nsw i64 %155, 1
  store i64 %160, ptr %memberidx.i.i, align 4
  %161 = call i8 %159(ptr nonnull %156, i64 %160)
  store i8 %161, ptr %0, align 1
  %162 = icmp eq i8 %161, 10
  br i1 %162, label %if.entry6.i162, label %Lexer_advance.exit165.sink.split

if.entry6.i162:                                   ; preds = %ifend.i159
  store i64 0, ptr %memberidx9.i160, align 4
  br label %Lexer_advance.exit165.sink.split

Lexer_advance.exit165.sink.split:                 ; preds = %ifend.i159, %if.entry6.i162
  %memberidx10.i161.sink255 = phi ptr [ %memberidx10.i161, %if.entry6.i162 ], [ %memberidx12.i163, %ifend.i159 ]
  %163 = load i64, ptr %memberidx10.i161.sink255, align 4
  %164 = add nsw i64 %163, 1
  store i64 %164, ptr %memberidx10.i161.sink255, align 4
  br label %Lexer_advance.exit165

Lexer_advance.exit165:                            ; preds = %Lexer_advance.exit165.sink.split, %ifend14
  %165 = tail call ptr @malloc(i32 16)
  %166 = tail call ptr @malloc(i32 32)
  %167 = load i64, ptr %memberidx27, align 4
  %168 = load i64, ptr %memberidx28, align 4
  %memberidx2.i167 = getelementptr inbounds %FloRange, ptr %166, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %166, i8 0, i64 16, i1 false)
  store i64 %167, ptr %memberidx2.i167, align 4
  %memberidx3.i168 = getelementptr inbounds %FloRange, ptr %166, i64 0, i32 3
  store i64 %168, ptr %memberidx3.i168, align 4
  store i64 46, ptr %165, align 4
  %memberidx1.i169 = getelementptr inbounds %Token, ptr %165, i64 0, i32 1
  store ptr %166, ptr %memberidx1.i169, align 8
  %169 = load i64, ptr %memberidx.i109, align 4
  %170 = load i64, ptr %memberidx1.i110, align 4
  %.not.i172 = icmp slt i64 %169, %170
  br i1 %.not.i172, label %Array_Token____sl__.exit179, label %if.entry.i175

if.entry.i175:                                    ; preds = %Lexer_advance.exit165
  %171 = shl i64 %170, 1
  store i64 %171, ptr %memberidx1.i110, align 4
  %172 = load ptr, ptr %memberidx2.i111, align 8
  %173 = shl i64 %170, 4
  %174 = call ptr @realloc(ptr %172, i64 %173)
  store ptr %174, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit179

Array_Token____sl__.exit179:                      ; preds = %Lexer_advance.exit165, %if.entry.i175
  %175 = load i64, ptr %memberidx.i109, align 4
  %176 = add nsw i64 %175, 1
  store i64 %176, ptr %memberidx.i109, align 4
  %177 = load ptr, ptr %memberidx2.i111, align 8
  %ptridx.i177 = getelementptr inbounds ptr, ptr %177, i64 %175
  store ptr %165, ptr %ptridx.i177, align 8
  %178 = load i64, ptr %memberidx.i, align 4
  %179 = load i64, ptr %memberidx1.i, align 4
  %.not.i182 = icmp slt i64 %178, %179
  br i1 %.not.i182, label %Array_Array_Token_____sl__.exit, label %if.entry.i185

if.entry.i185:                                    ; preds = %Array_Token____sl__.exit179
  %180 = shl i64 %179, 1
  store i64 %180, ptr %memberidx1.i, align 4
  %181 = load ptr, ptr %memberidx2.i, align 8
  %182 = shl i64 %179, 4
  %183 = call ptr @realloc(ptr %181, i64 %182)
  store ptr %183, ptr %memberidx2.i, align 8
  br label %Array_Array_Token_____sl__.exit

Array_Array_Token_____sl__.exit:                  ; preds = %Array_Token____sl__.exit179, %if.entry.i185
  %184 = load i64, ptr %memberidx.i, align 4
  %185 = add nsw i64 %184, 1
  store i64 %185, ptr %memberidx.i, align 4
  %186 = load ptr, ptr %memberidx2.i, align 8
  %ptridx.i187 = getelementptr inbounds ptr, ptr %186, i64 %184
  store ptr %108, ptr %ptridx.i187, align 8
  %187 = load i8, ptr %0, align 1
  %.not241 = icmp eq i8 %187, 34
  br i1 %.not241, label %while.end, label %ifend

while.entry15:                                    ; preds = %while.entry15.preheader, %Lexer_advance.exit211
  %188 = phi i64 [ %active_open_pars.promoted, %while.entry15.preheader ], [ %192, %Lexer_advance.exit211 ]
  %189 = load i8, ptr %0, align 1
  switch i8 %189, label %ifend25 [
    i8 40, label %if.entry19
    i8 41, label %if.entry23
  ]

if.entry19:                                       ; preds = %while.entry15
  %190 = add nsw i64 %188, 1
  br label %ifend25

if.entry23:                                       ; preds = %while.entry15
  %191 = add nsw i64 %188, -1
  br label %ifend25

ifend25:                                          ; preds = %if.entry19, %while.entry15, %if.entry23
  %192 = phi i64 [ %190, %if.entry19 ], [ %188, %while.entry15 ], [ %191, %if.entry23 ]
  %193 = call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  %194 = load i64, ptr %memberidx.i109, align 4
  %195 = load i64, ptr %memberidx1.i110, align 4
  %.not.i191 = icmp slt i64 %194, %195
  br i1 %.not.i191, label %Array_Token____sl__.exit198, label %if.entry.i194

if.entry.i194:                                    ; preds = %ifend25
  %196 = shl i64 %195, 1
  store i64 %196, ptr %memberidx1.i110, align 4
  %197 = load ptr, ptr %memberidx2.i111, align 8
  %198 = shl i64 %195, 4
  %199 = call ptr @realloc(ptr %197, i64 %198)
  store ptr %199, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit198

Array_Token____sl__.exit198:                      ; preds = %ifend25, %if.entry.i194
  %200 = load i64, ptr %memberidx.i109, align 4
  %201 = add nsw i64 %200, 1
  store i64 %201, ptr %memberidx.i109, align 4
  %202 = load ptr, ptr %memberidx2.i111, align 8
  %ptridx.i196 = getelementptr inbounds ptr, ptr %202, i64 %200
  store ptr %193, ptr %ptridx.i196, align 8
  %203 = load i64, ptr %memberidx.i.i, align 4
  %204 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i201 = getelementptr inbounds %string, ptr %204, i64 0, i32 2
  %205 = load i64, ptr %memberidx2.i.i201, align 4
  %.not222 = icmp slt i64 %203, %205
  br i1 %.not222, label %ifend.i205, label %Lexer_advance.exit211

ifend.i205:                                       ; preds = %Array_Token____sl__.exit198
  %206 = load ptr, ptr %204, align 8
  %memberidx2.i203 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %206, i64 0, i32 2
  %207 = load ptr, ptr %memberidx2.i203, align 8
  %208 = add nsw i64 %203, 1
  store i64 %208, ptr %memberidx.i.i, align 4
  %209 = call i8 %207(ptr nonnull %204, i64 %208)
  store i8 %209, ptr %0, align 1
  %210 = icmp eq i8 %209, 10
  br i1 %210, label %if.entry6.i208, label %Lexer_advance.exit211.sink.split

if.entry6.i208:                                   ; preds = %ifend.i205
  store i64 0, ptr %memberidx9.i206, align 4
  br label %Lexer_advance.exit211.sink.split

Lexer_advance.exit211.sink.split:                 ; preds = %ifend.i205, %if.entry6.i208
  %memberidx10.i207.sink257 = phi ptr [ %memberidx10.i207, %if.entry6.i208 ], [ %memberidx12.i209, %ifend.i205 ]
  %211 = load i64, ptr %memberidx10.i207.sink257, align 4
  %212 = add nsw i64 %211, 1
  store i64 %212, ptr %memberidx10.i207.sink257, align 4
  br label %Lexer_advance.exit211

Lexer_advance.exit211:                            ; preds = %Lexer_advance.exit211.sink.split, %Array_Token____sl__.exit198
  %213 = load i8, ptr %0, align 1
  %214 = icmp ne i8 %213, 41
  %215 = icmp ne i64 %192, 0
  %216 = or i1 %214, %215
  %217 = load i64, ptr %memberidx.i.i, align 4
  %218 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i214 = getelementptr inbounds %string, ptr %218, i64 0, i32 2
  %219 = load i64, ptr %memberidx2.i214, align 4
  %.not223 = icmp slt i64 %217, %219
  %220 = and i1 %216, %.not223
  br i1 %220, label %while.entry15, label %ifend14.loopexit
}

define internal fastcc ptr @Lexer_base_int_token(ptr nocapture %0, i64 %1) unnamed_addr {
  %memberidx.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2.i.i, align 4
  %.not = icmp slt i64 %3, %5
  br i1 %.not, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %2
  %6 = load ptr, ptr %4, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i, align 8
  %8 = add nsw i64 %3, 1
  store i64 %8, ptr %memberidx.i.i, align 4
  %9 = call i8 %7(ptr nonnull %4, i64 %8)
  store i8 %9, ptr %0, align 1
  %10 = icmp eq i8 %9, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %10, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink66 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %11 = load i64, ptr %memberidx10.i.sink66, align 4
  %12 = add nsw i64 %11, 1
  store i64 %12, ptr %memberidx10.i.sink66, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %2
  %13 = load i64, ptr %memberidx.i.i, align 4
  %14 = add nsw i64 %13, 1
  %15 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i15 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx2.i15, align 4
  %17 = icmp slt i64 %14, %16
  br i1 %17, label %if.entry.i, label %Lexer_peek.exit

if.entry.i:                                       ; preds = %Lexer_advance.exit
  %18 = load ptr, ptr %15, align 8
  %memberidx4.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 2
  %19 = load ptr, ptr %memberidx4.i, align 8
  %20 = call i8 %19(ptr nonnull %15, i64 %14)
  br label %Lexer_peek.exit

Lexer_peek.exit:                                  ; preds = %Lexer_advance.exit, %if.entry.i
  %common.ret.op.i = phi i8 [ %20, %if.entry.i ], [ 0, %Lexer_advance.exit ]
  %21 = add i8 %common.ret.op.i, -97
  %22 = icmp ult i8 %21, 26
  %23 = add i8 %common.ret.op.i, -32
  %common.ret.op.i16 = select i1 %22, i8 %23, i8 %common.ret.op.i
  %24 = icmp slt i64 %1, 10
  %25 = icmp sgt i8 %common.ret.op.i16, 47
  %26 = sext i8 %common.ret.op.i16 to i64
  %27 = add nsw i64 %1, 48
  %28 = icmp sge i64 %27, %26
  %29 = and i1 %25, %28
  br i1 %24, label %in_base_range.exit34, label %ifend.i33

ifend.i33:                                        ; preds = %Lexer_peek.exit
  %30 = icmp sgt i8 %common.ret.op.i16, 64
  %31 = add nsw i64 %1, 65
  %32 = icmp sge i64 %31, %26
  %33 = and i1 %30, %32
  %34 = or i1 %29, %33
  br label %in_base_range.exit34

in_base_range.exit34:                             ; preds = %Lexer_peek.exit, %ifend.i33
  %common.ret.op.i31 = phi i1 [ %34, %ifend.i33 ], [ %29, %Lexer_peek.exit ]
  %35 = load i64, ptr %memberidx.i.i, align 4
  %36 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i50 = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx2.i50, align 4
  %.not60 = icmp slt i64 %35, %37
  %38 = and i1 %common.ret.op.i31, %.not60
  br i1 %38, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %in_base_range.exit34
  %memberidx12.i45 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i42 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i43 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %39 = add nsw i64 %1, 48
  %40 = add nsw i64 %1, 65
  %41 = add nsw i64 %1, 48
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %in_base_range.exit
  %length.0 = phi i64 [ %46, %in_base_range.exit ], [ 3, %while.entry.preheader ]
  %value.0 = phi i64 [ %45, %in_base_range.exit ], [ 0, %while.entry.preheader ]
  %current_char.0 = phi i8 [ %common.ret.op.i23, %in_base_range.exit ], [ %common.ret.op.i16, %while.entry.preheader ]
  %42 = mul i64 %value.0, %1
  %43 = icmp sgt i8 %current_char.0, 64
  %spec.select.v = select i1 %43, i8 -55, i8 -48
  %spec.select = add i8 %spec.select.v, %current_char.0
  %44 = sext i8 %spec.select to i64
  %45 = add nsw i64 %42, %44
  %46 = add nuw nsw i64 %length.0, 1
  %47 = load i64, ptr %memberidx.i.i, align 4
  %48 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i37 = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  %49 = load i64, ptr %memberidx2.i.i37, align 4
  %.not61 = icmp slt i64 %47, %49
  br i1 %.not61, label %ifend.i41, label %Lexer_advance.exit47

while.end:                                        ; preds = %in_base_range.exit, %in_base_range.exit34
  %length.1 = phi i64 [ 3, %in_base_range.exit34 ], [ %46, %in_base_range.exit ]
  %value.1 = phi i64 [ 0, %in_base_range.exit34 ], [ %45, %in_base_range.exit ]
  %50 = tail call ptr @malloc(i32 24)
  %51 = call ptr @malloc(i32 32)
  %52 = load i64, ptr %memberidx.i.i, align 4
  %53 = sub i64 1, %length.1
  %54 = add i64 %53, %52
  %55 = add nsw i64 %52, 1
  %memberidx2.i54 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %56 = load i64, ptr %memberidx2.i54, align 4
  %57 = sub i64 %56, %length.1
  %memberidx3.i55 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %58 = load i64, ptr %memberidx3.i55, align 4
  store i64 %54, ptr %51, align 4
  %memberidx1.i.i56 = getelementptr inbounds %FloRange, ptr %51, i64 0, i32 1
  store i64 %55, ptr %memberidx1.i.i56, align 4
  %memberidx2.i.i57 = getelementptr inbounds %FloRange, ptr %51, i64 0, i32 2
  store i64 %57, ptr %memberidx2.i.i57, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %51, i64 0, i32 3
  store i64 %58, ptr %memberidx3.i.i, align 4
  store i64 31, ptr %50, align 4
  %memberidx1.i.i51 = getelementptr inbounds %Token, ptr %50, i64 0, i32 1
  store ptr %51, ptr %memberidx1.i.i51, align 8
  %memberidx.i52 = getelementptr inbounds %IntToken, ptr %50, i64 0, i32 2
  store i64 %value.1, ptr %memberidx.i52, align 4
  ret ptr %50

ifend.i41:                                        ; preds = %while.entry
  %59 = load ptr, ptr %48, align 8
  %memberidx2.i39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 2
  %60 = load ptr, ptr %memberidx2.i39, align 8
  %61 = add nsw i64 %47, 1
  store i64 %61, ptr %memberidx.i.i, align 4
  %62 = call i8 %60(ptr nonnull %48, i64 %61)
  store i8 %62, ptr %0, align 1
  %63 = icmp eq i8 %62, 10
  br i1 %63, label %if.entry6.i44, label %Lexer_advance.exit47.sink.split

if.entry6.i44:                                    ; preds = %ifend.i41
  store i64 0, ptr %memberidx9.i42, align 4
  br label %Lexer_advance.exit47.sink.split

Lexer_advance.exit47.sink.split:                  ; preds = %ifend.i41, %if.entry6.i44
  %memberidx10.i43.sink68 = phi ptr [ %memberidx10.i43, %if.entry6.i44 ], [ %memberidx12.i45, %ifend.i41 ]
  %64 = load i64, ptr %memberidx10.i43.sink68, align 4
  %65 = add nsw i64 %64, 1
  store i64 %65, ptr %memberidx10.i43.sink68, align 4
  br label %Lexer_advance.exit47

Lexer_advance.exit47:                             ; preds = %Lexer_advance.exit47.sink.split, %while.entry
  %66 = load i64, ptr %memberidx.i.i, align 4
  %67 = add nsw i64 %66, 1
  %68 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i26 = getelementptr inbounds %string, ptr %68, i64 0, i32 2
  %69 = load i64, ptr %memberidx2.i26, align 4
  %70 = icmp slt i64 %67, %69
  br i1 %70, label %if.entry.i29, label %Lexer_peek.exit30

if.entry.i29:                                     ; preds = %Lexer_advance.exit47
  %71 = load ptr, ptr %68, align 8
  %memberidx4.i28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %71, i64 0, i32 2
  %72 = load ptr, ptr %memberidx4.i28, align 8
  %73 = call i8 %72(ptr nonnull %68, i64 %67)
  br label %Lexer_peek.exit30

Lexer_peek.exit30:                                ; preds = %Lexer_advance.exit47, %if.entry.i29
  %common.ret.op.i27 = phi i8 [ %73, %if.entry.i29 ], [ 0, %Lexer_advance.exit47 ]
  %74 = add i8 %common.ret.op.i27, -97
  %75 = icmp ult i8 %74, 26
  %76 = add i8 %common.ret.op.i27, -32
  %common.ret.op.i23 = select i1 %75, i8 %76, i8 %common.ret.op.i27
  %77 = icmp sgt i8 %common.ret.op.i23, 47
  %78 = sext i8 %common.ret.op.i23 to i64
  br i1 %24, label %if.entry.i21, label %ifend.i22

if.entry.i21:                                     ; preds = %Lexer_peek.exit30
  %79 = icmp sge i64 %41, %78
  %80 = and i1 %77, %79
  br label %in_base_range.exit

ifend.i22:                                        ; preds = %Lexer_peek.exit30
  %81 = icmp sge i64 %39, %78
  %82 = and i1 %77, %81
  %83 = icmp sgt i8 %common.ret.op.i23, 64
  %84 = icmp sge i64 %40, %78
  %85 = and i1 %83, %84
  %86 = or i1 %82, %85
  br label %in_base_range.exit

in_base_range.exit:                               ; preds = %if.entry.i21, %ifend.i22
  %common.ret.op.i20 = phi i1 [ %80, %if.entry.i21 ], [ %86, %ifend.i22 ]
  %87 = load i64, ptr %memberidx.i.i, align 4
  %88 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i19 = getelementptr inbounds %string, ptr %88, i64 0, i32 2
  %89 = load i64, ptr %memberidx2.i19, align 4
  %.not62 = icmp slt i64 %87, %89
  %90 = and i1 %common.ret.op.i20, %.not62
  br i1 %90, label %while.entry, label %while.end
}

define internal fastcc ptr @Lexer_identifier_token(ptr nocapture %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, 1
  %memberidx1.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2.i, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %if.entry.i, label %Lexer_peek.exit

if.entry.i:                                       ; preds = %1
  %7 = load ptr, ptr %4, align 8
  %memberidx4.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i64 0, i32 2
  %8 = load ptr, ptr %memberidx4.i, align 8
  %9 = call i8 %8(ptr nonnull %4, i64 %3)
  br label %Lexer_peek.exit

Lexer_peek.exit:                                  ; preds = %1, %if.entry.i
  %10 = load i64, ptr %memberidx, align 4
  %11 = add nsw i64 %10, 1
  %12 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i28 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx2.i28, align 4
  %14 = icmp slt i64 %11, %13
  br i1 %14, label %if.entry.i31, label %Lexer_peek.exit32

if.entry.i31:                                     ; preds = %Lexer_peek.exit
  %15 = load ptr, ptr %12, align 8
  %memberidx4.i30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i64 0, i32 2
  %16 = load ptr, ptr %memberidx4.i30, align 8
  %17 = call i8 %16(ptr nonnull %12, i64 %11)
  br label %Lexer_peek.exit32

Lexer_peek.exit32:                                ; preds = %Lexer_peek.exit, %if.entry.i31
  %common.ret.op.i29 = phi i8 [ %17, %if.entry.i31 ], [ 0, %Lexer_peek.exit ]
  %18 = and i8 %common.ret.op.i29, -33
  %19 = add i8 %18, -65
  %20 = icmp ult i8 %19, 26
  %21 = icmp eq i8 %common.ret.op.i29, 95
  %22 = or i1 %21, %20
  %23 = add i8 %common.ret.op.i29, -48
  %24 = icmp ult i8 %23, 10
  %25 = or i1 %24, %22
  %26 = load i64, ptr %memberidx, align 4
  %27 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i50 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i50, align 4
  %.not131 = icmp slt i64 %26, %28
  %29 = and i1 %.not131, %25
  br i1 %29, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Lexer_peek.exit32
  %memberidx12.i71 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i68 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i69 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Lexer_peek.exit80
  %length.0 = phi i64 [ %30, %Lexer_peek.exit80 ], [ 1, %while.entry.preheader ]
  %30 = add nuw nsw i64 %length.0, 1
  %31 = load i64, ptr %memberidx, align 4
  %32 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i.i63 = getelementptr inbounds %string, ptr %32, i64 0, i32 2
  %33 = load i64, ptr %memberidx2.i.i63, align 4
  %.not134 = icmp slt i64 %31, %33
  br i1 %.not134, label %ifend.i67, label %Lexer_advance.exit73

ifend.i67:                                        ; preds = %while.entry
  %34 = load ptr, ptr %32, align 8
  %memberidx2.i65 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 2
  %35 = load ptr, ptr %memberidx2.i65, align 8
  %36 = add nsw i64 %31, 1
  store i64 %36, ptr %memberidx, align 4
  %37 = call i8 %35(ptr nonnull %32, i64 %36)
  store i8 %37, ptr %0, align 1
  %38 = icmp eq i8 %37, 10
  br i1 %38, label %if.entry6.i70, label %Lexer_advance.exit73.sink.split

if.entry6.i70:                                    ; preds = %ifend.i67
  store i64 0, ptr %memberidx9.i68, align 4
  br label %Lexer_advance.exit73.sink.split

Lexer_advance.exit73.sink.split:                  ; preds = %ifend.i67, %if.entry6.i70
  %memberidx10.i69.sink137 = phi ptr [ %memberidx10.i69, %if.entry6.i70 ], [ %memberidx12.i71, %ifend.i67 ]
  %39 = load i64, ptr %memberidx10.i69.sink137, align 4
  %40 = add nsw i64 %39, 1
  store i64 %40, ptr %memberidx10.i69.sink137, align 4
  br label %Lexer_advance.exit73

Lexer_advance.exit73:                             ; preds = %Lexer_advance.exit73.sink.split, %while.entry
  %41 = load i64, ptr %memberidx, align 4
  %42 = add nsw i64 %41, 1
  %43 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i76 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx2.i76, align 4
  %45 = icmp slt i64 %42, %44
  br i1 %45, label %if.entry.i79, label %Lexer_peek.exit80

if.entry.i79:                                     ; preds = %Lexer_advance.exit73
  %46 = load ptr, ptr %43, align 8
  %memberidx4.i78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx4.i78, align 8
  %48 = call i8 %47(ptr nonnull %43, i64 %42)
  br label %Lexer_peek.exit80

Lexer_peek.exit80:                                ; preds = %Lexer_advance.exit73, %if.entry.i79
  %common.ret.op.i77 = phi i8 [ %48, %if.entry.i79 ], [ 0, %Lexer_advance.exit73 ]
  %49 = and i8 %common.ret.op.i77, -33
  %50 = add i8 %49, -65
  %51 = icmp ult i8 %50, 26
  %52 = icmp eq i8 %common.ret.op.i77, 95
  %53 = or i1 %52, %51
  %54 = add i8 %common.ret.op.i77, -48
  %55 = icmp ult i8 %54, 10
  %56 = or i1 %55, %53
  %57 = load i64, ptr %memberidx, align 4
  %58 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i88 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  %59 = load i64, ptr %memberidx2.i88, align 4
  %.not135 = icmp slt i64 %57, %59
  %60 = and i1 %.not135, %56
  br i1 %60, label %while.entry, label %while.end

while.end:                                        ; preds = %Lexer_peek.exit80, %Lexer_peek.exit32
  %length.1 = phi i64 [ 1, %Lexer_peek.exit32 ], [ %30, %Lexer_peek.exit80 ]
  %value = alloca ptr, align 8
  %61 = load ptr, ptr %memberidx1.i, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 1
  %63 = load ptr, ptr %memberidx2, align 8
  %64 = call ptr %63(ptr nonnull %61, i64 %2, i64 %length.1)
  store ptr %64, ptr %value, align 8
  %range = alloca ptr, align 8
  %65 = call ptr @malloc(i32 32)
  %66 = load i64, ptr %memberidx, align 4
  %67 = sub i64 1, %length.1
  %68 = add i64 %67, %66
  %69 = add nsw i64 %66, 1
  %memberidx2.i90 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %70 = load i64, ptr %memberidx2.i90, align 4
  %71 = sub i64 %70, %length.1
  %memberidx3.i91 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %72 = load i64, ptr %memberidx3.i91, align 4
  store i64 %68, ptr %65, align 4
  %memberidx1.i.i92 = getelementptr inbounds %FloRange, ptr %65, i64 0, i32 1
  store i64 %69, ptr %memberidx1.i.i92, align 4
  %memberidx2.i.i93 = getelementptr inbounds %FloRange, ptr %65, i64 0, i32 2
  store i64 %71, ptr %memberidx2.i.i93, align 4
  %memberidx3.i.i94 = getelementptr inbounds %FloRange, ptr %65, i64 0, i32 3
  store i64 %72, ptr %memberidx3.i.i94, align 4
  store ptr %65, ptr %range, align 8
  %keyword = alloca i64, align 8
  store i64 0, ptr %keyword, align 8
  %73 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %73, ptr noundef nonnull align 8 dereferenceable(3) @30, i64 3, i1 false)
  %74 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %74, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %74, i64 0, i32 1
  store ptr %73, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %74, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %74, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i.i, align 4
  %memberidx.i.i81 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %75 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i.i = icmp eq i64 %75, 3
  br i1 %.not.i.i, label %ifend.i.i, label %ifend.i85

ifend.i.i:                                        ; preds = %while.end
  %memberidx2.i.i83 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %76 = load ptr, ptr %memberidx2.i.i83, align 8
  %77 = call i64 @memcmp(ptr %76, ptr %73, i64 %75)
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %string_to_kw_token.exit, label %ifend.i85

ifend.i85:                                        ; preds = %while.end, %ifend.i.i
  %79 = call ptr @malloc(i32 2)
  store i16 29295, ptr %79, align 8
  %80 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %80, align 8
  %memberidx.i.i129.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  store ptr %79, ptr %memberidx.i.i129.i, align 8
  %memberidx1.i.i130.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i130.i, align 4
  %memberidx2.i.i131.i = getelementptr inbounds %string, ptr %80, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i131.i, align 4
  %81 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i134.i = icmp eq i64 %81, 2
  br i1 %.not.i134.i, label %ifend.i138.i, label %ifend3.i

ifend.i138.i:                                     ; preds = %ifend.i85
  %memberidx2.i136.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %82 = load ptr, ptr %memberidx2.i136.i, align 8
  %83 = call i64 @memcmp(ptr %82, ptr nonnull %79, i64 %81)
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %string_to_kw_token.exit, label %ifend3.i

ifend3.i:                                         ; preds = %ifend.i85, %ifend.i138.i
  %85 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %85, ptr noundef nonnull align 8 dereferenceable(5) @31, i64 5, i1 false)
  %86 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %86, align 8
  %memberidx.i.i140.i = getelementptr inbounds %string, ptr %86, i64 0, i32 1
  store ptr %85, ptr %memberidx.i.i140.i, align 8
  %memberidx1.i.i141.i = getelementptr inbounds %string, ptr %86, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i141.i, align 4
  %memberidx2.i.i142.i = getelementptr inbounds %string, ptr %86, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i142.i, align 4
  %87 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i145.i = icmp eq i64 %87, 5
  br i1 %.not.i145.i, label %ifend.i149.i, label %ifend6.i

ifend.i149.i:                                     ; preds = %ifend3.i
  %memberidx2.i147.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %88 = load ptr, ptr %memberidx2.i147.i, align 8
  %89 = call i64 @memcmp(ptr %88, ptr %85, i64 %87)
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %string_to_kw_token.exit, label %ifend6.i

ifend6.i:                                         ; preds = %ifend3.i, %ifend.i149.i
  %91 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %91, ptr noundef nonnull align 8 dereferenceable(3) @32, i64 3, i1 false)
  %92 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i.i151.i = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i.i151.i, align 8
  %memberidx1.i.i152.i = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i152.i, align 4
  %memberidx2.i.i153.i = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i153.i, align 4
  %93 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i156.i = icmp eq i64 %93, 3
  br i1 %.not.i156.i, label %ifend.i160.i, label %ifend9.i

ifend.i160.i:                                     ; preds = %ifend6.i
  %memberidx2.i158.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %94 = load ptr, ptr %memberidx2.i158.i, align 8
  %95 = call i64 @memcmp(ptr %94, ptr %91, i64 %93)
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %string_to_kw_token.exit, label %ifend9.i

ifend9.i:                                         ; preds = %ifend6.i, %ifend.i160.i
  %97 = call ptr @malloc(i32 2)
  store i16 26217, ptr %97, align 8
  %98 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i.i162.i = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i162.i, align 8
  %memberidx1.i.i163.i = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i163.i, align 4
  %memberidx2.i.i164.i = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i164.i, align 4
  %99 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i167.i = icmp eq i64 %99, 2
  br i1 %.not.i167.i, label %ifend.i171.i, label %ifend12.i

ifend.i171.i:                                     ; preds = %ifend9.i
  %memberidx2.i169.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %100 = load ptr, ptr %memberidx2.i169.i, align 8
  %101 = call i64 @memcmp(ptr %100, ptr nonnull %97, i64 %99)
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %string_to_kw_token.exit, label %ifend12.i

ifend12.i:                                        ; preds = %ifend9.i, %ifend.i171.i
  %103 = call ptr @malloc(i32 4)
  store i32 1702063205, ptr %103, align 8
  %104 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %104, align 8
  %memberidx.i.i173.i = getelementptr inbounds %string, ptr %104, i64 0, i32 1
  store ptr %103, ptr %memberidx.i.i173.i, align 8
  %memberidx1.i.i174.i = getelementptr inbounds %string, ptr %104, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i174.i, align 4
  %memberidx2.i.i175.i = getelementptr inbounds %string, ptr %104, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i175.i, align 4
  %105 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i178.i = icmp eq i64 %105, 4
  br i1 %.not.i178.i, label %ifend.i182.i, label %ifend15.i

ifend.i182.i:                                     ; preds = %ifend12.i
  %memberidx2.i180.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %106 = load ptr, ptr %memberidx2.i180.i, align 8
  %107 = call i64 @memcmp(ptr %106, ptr nonnull %103, i64 %105)
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %string_to_kw_token.exit, label %ifend15.i

ifend15.i:                                        ; preds = %ifend12.i, %ifend.i182.i
  %109 = call ptr @malloc(i32 4)
  store i32 1819242338, ptr %109, align 8
  %110 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %110, align 8
  %memberidx.i.i184.i = getelementptr inbounds %string, ptr %110, i64 0, i32 1
  store ptr %109, ptr %memberidx.i.i184.i, align 8
  %memberidx1.i.i185.i = getelementptr inbounds %string, ptr %110, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i185.i, align 4
  %memberidx2.i.i186.i = getelementptr inbounds %string, ptr %110, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i186.i, align 4
  %111 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i189.i = icmp eq i64 %111, 4
  br i1 %.not.i189.i, label %ifend.i193.i, label %ifend18.i

ifend.i193.i:                                     ; preds = %ifend15.i
  %memberidx2.i191.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %112 = load ptr, ptr %memberidx2.i191.i, align 8
  %113 = call i64 @memcmp(ptr %112, ptr nonnull %109, i64 %111)
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %string_to_kw_token.exit, label %ifend18.i

ifend18.i:                                        ; preds = %ifend15.i, %ifend.i193.i
  %115 = call ptr @malloc(i32 2)
  store i16 13417, ptr %115, align 8
  %116 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %116, align 8
  %memberidx.i.i195.i = getelementptr inbounds %string, ptr %116, i64 0, i32 1
  store ptr %115, ptr %memberidx.i.i195.i, align 8
  %memberidx1.i.i196.i = getelementptr inbounds %string, ptr %116, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i196.i, align 4
  %memberidx2.i.i197.i = getelementptr inbounds %string, ptr %116, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i197.i, align 4
  %117 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i200.i = icmp eq i64 %117, 2
  br i1 %.not.i200.i, label %ifend.i204.i, label %ifend21.i

ifend.i204.i:                                     ; preds = %ifend18.i
  %memberidx2.i202.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %118 = load ptr, ptr %memberidx2.i202.i, align 8
  %119 = call i64 @memcmp(ptr %118, ptr nonnull %115, i64 %117)
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %string_to_kw_token.exit, label %ifend21.i

ifend21.i:                                        ; preds = %ifend18.i, %ifend.i204.i
  %121 = call ptr @malloc(i32 2)
  store i16 14441, ptr %121, align 8
  %122 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %122, align 8
  %memberidx.i.i206.i = getelementptr inbounds %string, ptr %122, i64 0, i32 1
  store ptr %121, ptr %memberidx.i.i206.i, align 8
  %memberidx1.i.i207.i = getelementptr inbounds %string, ptr %122, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i207.i, align 4
  %memberidx2.i.i208.i = getelementptr inbounds %string, ptr %122, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i208.i, align 4
  %123 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i211.i = icmp eq i64 %123, 2
  br i1 %.not.i211.i, label %ifend.i215.i, label %ifend24.i

ifend.i215.i:                                     ; preds = %ifend21.i
  %memberidx2.i213.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %124 = load ptr, ptr %memberidx2.i213.i, align 8
  %125 = call i64 @memcmp(ptr %124, ptr nonnull %121, i64 %123)
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %string_to_kw_token.exit, label %ifend24.i

ifend24.i:                                        ; preds = %ifend21.i, %ifend.i215.i
  %127 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %127, ptr noundef nonnull align 8 dereferenceable(3) @34, i64 3, i1 false)
  %128 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %128, align 8
  %memberidx.i.i217.i = getelementptr inbounds %string, ptr %128, i64 0, i32 1
  store ptr %127, ptr %memberidx.i.i217.i, align 8
  %memberidx1.i.i218.i = getelementptr inbounds %string, ptr %128, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i218.i, align 4
  %memberidx2.i.i219.i = getelementptr inbounds %string, ptr %128, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i219.i, align 4
  %129 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i222.i = icmp eq i64 %129, 3
  br i1 %.not.i222.i, label %ifend.i226.i, label %ifend27.i

ifend.i226.i:                                     ; preds = %ifend24.i
  %memberidx2.i224.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %130 = load ptr, ptr %memberidx2.i224.i, align 8
  %131 = call i64 @memcmp(ptr %130, ptr %127, i64 %129)
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %string_to_kw_token.exit, label %ifend27.i

ifend27.i:                                        ; preds = %ifend24.i, %ifend.i226.i
  %133 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %133, ptr noundef nonnull align 8 dereferenceable(3) @35, i64 3, i1 false)
  %134 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %134, align 8
  %memberidx.i.i228.i = getelementptr inbounds %string, ptr %134, i64 0, i32 1
  store ptr %133, ptr %memberidx.i.i228.i, align 8
  %memberidx1.i.i229.i = getelementptr inbounds %string, ptr %134, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i229.i, align 4
  %memberidx2.i.i230.i = getelementptr inbounds %string, ptr %134, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i230.i, align 4
  %135 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i233.i = icmp eq i64 %135, 3
  br i1 %.not.i233.i, label %ifend.i237.i, label %ifend30.i

ifend.i237.i:                                     ; preds = %ifend27.i
  %memberidx2.i235.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %136 = load ptr, ptr %memberidx2.i235.i, align 8
  %137 = call i64 @memcmp(ptr %136, ptr %133, i64 %135)
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %string_to_kw_token.exit, label %ifend30.i

ifend30.i:                                        ; preds = %ifend27.i, %ifend.i237.i
  %139 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %139, ptr noundef nonnull align 8 dereferenceable(3) @36, i64 3, i1 false)
  %140 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %140, align 8
  %memberidx.i.i239.i = getelementptr inbounds %string, ptr %140, i64 0, i32 1
  store ptr %139, ptr %memberidx.i.i239.i, align 8
  %memberidx1.i.i240.i = getelementptr inbounds %string, ptr %140, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i240.i, align 4
  %memberidx2.i.i241.i = getelementptr inbounds %string, ptr %140, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i241.i, align 4
  %141 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i244.i = icmp eq i64 %141, 3
  br i1 %.not.i244.i, label %ifend.i248.i, label %ifend33.i

ifend.i248.i:                                     ; preds = %ifend30.i
  %memberidx2.i246.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %142 = load ptr, ptr %memberidx2.i246.i, align 8
  %143 = call i64 @memcmp(ptr %142, ptr %139, i64 %141)
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %string_to_kw_token.exit, label %ifend33.i

ifend33.i:                                        ; preds = %ifend30.i, %ifend.i248.i
  %145 = call ptr @malloc(i32 4)
  store i32 942813545, ptr %145, align 8
  %146 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %146, align 8
  %memberidx.i.i250.i = getelementptr inbounds %string, ptr %146, i64 0, i32 1
  store ptr %145, ptr %memberidx.i.i250.i, align 8
  %memberidx1.i.i251.i = getelementptr inbounds %string, ptr %146, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i251.i, align 4
  %memberidx2.i.i252.i = getelementptr inbounds %string, ptr %146, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i252.i, align 4
  %147 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i255.i = icmp eq i64 %147, 4
  br i1 %.not.i255.i, label %ifend.i259.i, label %ifend36.i

ifend.i259.i:                                     ; preds = %ifend33.i
  %memberidx2.i257.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %148 = load ptr, ptr %memberidx2.i257.i, align 8
  %149 = call i64 @memcmp(ptr %148, ptr nonnull %145, i64 %147)
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %string_to_kw_token.exit, label %ifend36.i

ifend36.i:                                        ; preds = %ifend33.i, %ifend.i259.i
  %151 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %151, ptr noundef nonnull align 8 dereferenceable(3) @37, i64 3, i1 false)
  %152 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %152, align 8
  %memberidx.i.i261.i = getelementptr inbounds %string, ptr %152, i64 0, i32 1
  store ptr %151, ptr %memberidx.i.i261.i, align 8
  %memberidx1.i.i262.i = getelementptr inbounds %string, ptr %152, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i262.i, align 4
  %memberidx2.i.i263.i = getelementptr inbounds %string, ptr %152, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i263.i, align 4
  %153 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i266.i = icmp eq i64 %153, 3
  br i1 %.not.i266.i, label %ifend.i270.i, label %ifend39.i

ifend.i270.i:                                     ; preds = %ifend36.i
  %memberidx2.i268.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %154 = load ptr, ptr %memberidx2.i268.i, align 8
  %155 = call i64 @memcmp(ptr %154, ptr %151, i64 %153)
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %string_to_kw_token.exit, label %ifend39.i

ifend39.i:                                        ; preds = %ifend36.i, %ifend.i270.i
  %157 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %157, ptr noundef nonnull align 8 dereferenceable(3) @38, i64 3, i1 false)
  %158 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %158, align 8
  %memberidx.i.i272.i = getelementptr inbounds %string, ptr %158, i64 0, i32 1
  store ptr %157, ptr %memberidx.i.i272.i, align 8
  %memberidx1.i.i273.i = getelementptr inbounds %string, ptr %158, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i273.i, align 4
  %memberidx2.i.i274.i = getelementptr inbounds %string, ptr %158, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i274.i, align 4
  %159 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i277.i = icmp eq i64 %159, 3
  br i1 %.not.i277.i, label %ifend.i281.i, label %ifend42.i

ifend.i281.i:                                     ; preds = %ifend39.i
  %memberidx2.i279.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %160 = load ptr, ptr %memberidx2.i279.i, align 8
  %161 = call i64 @memcmp(ptr %160, ptr %157, i64 %159)
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %string_to_kw_token.exit, label %ifend42.i

ifend42.i:                                        ; preds = %ifend39.i, %ifend.i281.i
  %163 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %163, ptr noundef nonnull align 8 dereferenceable(3) @39, i64 3, i1 false)
  %164 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %164, align 8
  %memberidx.i.i283.i = getelementptr inbounds %string, ptr %164, i64 0, i32 1
  store ptr %163, ptr %memberidx.i.i283.i, align 8
  %memberidx1.i.i284.i = getelementptr inbounds %string, ptr %164, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i284.i, align 4
  %memberidx2.i.i285.i = getelementptr inbounds %string, ptr %164, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i285.i, align 4
  %165 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i288.i = icmp eq i64 %165, 3
  br i1 %.not.i288.i, label %ifend.i292.i, label %ifend45.i

ifend.i292.i:                                     ; preds = %ifend42.i
  %memberidx2.i290.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %166 = load ptr, ptr %memberidx2.i290.i, align 8
  %167 = call i64 @memcmp(ptr %166, ptr %163, i64 %165)
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %string_to_kw_token.exit, label %ifend45.i

ifend45.i:                                        ; preds = %ifend42.i, %ifend.i292.i
  %169 = call ptr @malloc(i32 4)
  store i32 1684631414, ptr %169, align 8
  %170 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %170, align 8
  %memberidx.i.i294.i = getelementptr inbounds %string, ptr %170, i64 0, i32 1
  store ptr %169, ptr %memberidx.i.i294.i, align 8
  %memberidx1.i.i295.i = getelementptr inbounds %string, ptr %170, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i295.i, align 4
  %memberidx2.i.i296.i = getelementptr inbounds %string, ptr %170, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i296.i, align 4
  %171 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i299.i = icmp eq i64 %171, 4
  br i1 %.not.i299.i, label %ifend.i303.i, label %ifend48.i

ifend.i303.i:                                     ; preds = %ifend45.i
  %memberidx2.i301.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %172 = load ptr, ptr %memberidx2.i301.i, align 8
  %173 = call i64 @memcmp(ptr %172, ptr nonnull %169, i64 %171)
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %string_to_kw_token.exit, label %ifend48.i

ifend48.i:                                        ; preds = %ifend45.i, %ifend.i303.i
  %175 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %175, ptr noundef nonnull align 8 dereferenceable(3) @40, i64 3, i1 false)
  %176 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %176, align 8
  %memberidx.i.i305.i = getelementptr inbounds %string, ptr %176, i64 0, i32 1
  store ptr %175, ptr %memberidx.i.i305.i, align 8
  %memberidx1.i.i306.i = getelementptr inbounds %string, ptr %176, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i306.i, align 4
  %memberidx2.i.i307.i = getelementptr inbounds %string, ptr %176, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i307.i, align 4
  %177 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i310.i = icmp eq i64 %177, 3
  br i1 %.not.i310.i, label %ifend.i314.i, label %ifend51.i

ifend.i314.i:                                     ; preds = %ifend48.i
  %memberidx2.i312.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %178 = load ptr, ptr %memberidx2.i312.i, align 8
  %179 = call i64 @memcmp(ptr %178, ptr %175, i64 %177)
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %string_to_kw_token.exit, label %ifend51.i

ifend51.i:                                        ; preds = %ifend48.i, %ifend.i314.i
  %181 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %181, ptr noundef nonnull align 8 dereferenceable(5) @41, i64 5, i1 false)
  %182 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %182, align 8
  %memberidx.i.i316.i = getelementptr inbounds %string, ptr %182, i64 0, i32 1
  store ptr %181, ptr %memberidx.i.i316.i, align 8
  %memberidx1.i.i317.i = getelementptr inbounds %string, ptr %182, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i317.i, align 4
  %memberidx2.i.i318.i = getelementptr inbounds %string, ptr %182, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i318.i, align 4
  %183 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i321.i = icmp eq i64 %183, 5
  br i1 %.not.i321.i, label %ifend.i325.i, label %ifend54.i

ifend.i325.i:                                     ; preds = %ifend51.i
  %memberidx2.i323.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %184 = load ptr, ptr %memberidx2.i323.i, align 8
  %185 = call i64 @memcmp(ptr %184, ptr %181, i64 %183)
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %string_to_kw_token.exit, label %ifend54.i

ifend54.i:                                        ; preds = %ifend51.i, %ifend.i325.i
  %187 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %187, ptr noundef nonnull align 8 dereferenceable(3) @42, i64 3, i1 false)
  %188 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %188, align 8
  %memberidx.i.i327.i = getelementptr inbounds %string, ptr %188, i64 0, i32 1
  store ptr %187, ptr %memberidx.i.i327.i, align 8
  %memberidx1.i.i328.i = getelementptr inbounds %string, ptr %188, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i328.i, align 4
  %memberidx2.i.i329.i = getelementptr inbounds %string, ptr %188, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i329.i, align 4
  %189 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i332.i = icmp eq i64 %189, 3
  br i1 %.not.i332.i, label %ifend.i336.i, label %ifend57.i

ifend.i336.i:                                     ; preds = %ifend54.i
  %memberidx2.i334.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %190 = load ptr, ptr %memberidx2.i334.i, align 8
  %191 = call i64 @memcmp(ptr %190, ptr %187, i64 %189)
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %string_to_kw_token.exit, label %ifend57.i

ifend57.i:                                        ; preds = %ifend54.i, %ifend.i336.i
  %193 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %193, ptr noundef nonnull align 8 dereferenceable(5) @43, i64 5, i1 false)
  %194 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %194, align 8
  %memberidx.i.i338.i = getelementptr inbounds %string, ptr %194, i64 0, i32 1
  store ptr %193, ptr %memberidx.i.i338.i, align 8
  %memberidx1.i.i339.i = getelementptr inbounds %string, ptr %194, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i339.i, align 4
  %memberidx2.i.i340.i = getelementptr inbounds %string, ptr %194, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i340.i, align 4
  %195 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i343.i = icmp eq i64 %195, 5
  br i1 %.not.i343.i, label %ifend.i347.i, label %ifend60.i

ifend.i347.i:                                     ; preds = %ifend57.i
  %memberidx2.i345.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %196 = load ptr, ptr %memberidx2.i345.i, align 8
  %197 = call i64 @memcmp(ptr %196, ptr %193, i64 %195)
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %string_to_kw_token.exit, label %ifend60.i

ifend60.i:                                        ; preds = %ifend57.i, %ifend.i347.i
  %199 = call ptr @malloc(i32 8)
  store i64 7310870969309884259, ptr %199, align 8
  %200 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %200, align 8
  %memberidx.i.i349.i = getelementptr inbounds %string, ptr %200, i64 0, i32 1
  store ptr %199, ptr %memberidx.i.i349.i, align 8
  %memberidx1.i.i350.i = getelementptr inbounds %string, ptr %200, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i350.i, align 4
  %memberidx2.i.i351.i = getelementptr inbounds %string, ptr %200, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i351.i, align 4
  %201 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i354.i = icmp eq i64 %201, 8
  br i1 %.not.i354.i, label %ifend.i358.i, label %ifend63.i

ifend.i358.i:                                     ; preds = %ifend60.i
  %memberidx2.i356.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %202 = load ptr, ptr %memberidx2.i356.i, align 8
  %203 = call i64 @memcmp(ptr %202, ptr nonnull %199, i64 %201)
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %string_to_kw_token.exit, label %ifend63.i

ifend63.i:                                        ; preds = %ifend60.i, %ifend.i358.i
  %205 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %205, ptr noundef nonnull align 8 dereferenceable(6) @44, i64 6, i1 false)
  %206 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %206, align 8
  %memberidx.i.i360.i = getelementptr inbounds %string, ptr %206, i64 0, i32 1
  store ptr %205, ptr %memberidx.i.i360.i, align 8
  %memberidx1.i.i361.i = getelementptr inbounds %string, ptr %206, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i361.i, align 4
  %memberidx2.i.i362.i = getelementptr inbounds %string, ptr %206, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i362.i, align 4
  %207 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i365.i = icmp eq i64 %207, 6
  br i1 %.not.i365.i, label %ifend.i369.i, label %ifend66.i

ifend.i369.i:                                     ; preds = %ifend63.i
  %memberidx2.i367.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %208 = load ptr, ptr %memberidx2.i367.i, align 8
  %209 = call i64 @memcmp(ptr %208, ptr %205, i64 %207)
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %string_to_kw_token.exit, label %ifend66.i

ifend66.i:                                        ; preds = %ifend63.i, %ifend.i369.i
  %211 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %211, ptr noundef nonnull align 8 dereferenceable(6) @45, i64 6, i1 false)
  %212 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %212, align 8
  %memberidx.i.i371.i = getelementptr inbounds %string, ptr %212, i64 0, i32 1
  store ptr %211, ptr %memberidx.i.i371.i, align 8
  %memberidx1.i.i372.i = getelementptr inbounds %string, ptr %212, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i372.i, align 4
  %memberidx2.i.i373.i = getelementptr inbounds %string, ptr %212, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i373.i, align 4
  %213 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i376.i = icmp eq i64 %213, 6
  br i1 %.not.i376.i, label %ifend.i380.i, label %ifend69.i

ifend.i380.i:                                     ; preds = %ifend66.i
  %memberidx2.i378.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %214 = load ptr, ptr %memberidx2.i378.i, align 8
  %215 = call i64 @memcmp(ptr %214, ptr %211, i64 %213)
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %string_to_kw_token.exit, label %ifend69.i

ifend69.i:                                        ; preds = %ifend66.i, %ifend.i380.i
  %217 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %217, ptr noundef nonnull align 8 dereferenceable(7) @46, i64 7, i1 false)
  %218 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %218, align 8
  %memberidx.i.i382.i = getelementptr inbounds %string, ptr %218, i64 0, i32 1
  store ptr %217, ptr %memberidx.i.i382.i, align 8
  %memberidx1.i.i383.i = getelementptr inbounds %string, ptr %218, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i383.i, align 4
  %memberidx2.i.i384.i = getelementptr inbounds %string, ptr %218, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i384.i, align 4
  %219 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i387.i = icmp eq i64 %219, 7
  br i1 %.not.i387.i, label %ifend.i391.i, label %ifend72.i

ifend.i391.i:                                     ; preds = %ifend69.i
  %memberidx2.i389.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %220 = load ptr, ptr %memberidx2.i389.i, align 8
  %221 = call i64 @memcmp(ptr %220, ptr %217, i64 %219)
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %string_to_kw_token.exit, label %ifend72.i

ifend72.i:                                        ; preds = %ifend69.i, %ifend.i391.i
  %223 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %223, ptr noundef nonnull align 8 dereferenceable(6) @47, i64 6, i1 false)
  %224 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %224, align 8
  %memberidx.i.i393.i = getelementptr inbounds %string, ptr %224, i64 0, i32 1
  store ptr %223, ptr %memberidx.i.i393.i, align 8
  %memberidx1.i.i394.i = getelementptr inbounds %string, ptr %224, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i394.i, align 4
  %memberidx2.i.i395.i = getelementptr inbounds %string, ptr %224, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i395.i, align 4
  %225 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i398.i = icmp eq i64 %225, 6
  br i1 %.not.i398.i, label %ifend.i402.i, label %ifend75.i

ifend.i402.i:                                     ; preds = %ifend72.i
  %memberidx2.i400.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %226 = load ptr, ptr %memberidx2.i400.i, align 8
  %227 = call i64 @memcmp(ptr %226, ptr %223, i64 %225)
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %string_to_kw_token.exit, label %ifend75.i

ifend75.i:                                        ; preds = %ifend72.i, %ifend.i402.i
  %229 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %229, ptr noundef nonnull align 8 dereferenceable(9) @48, i64 9, i1 false)
  %230 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %230, align 8
  %memberidx.i.i404.i = getelementptr inbounds %string, ptr %230, i64 0, i32 1
  store ptr %229, ptr %memberidx.i.i404.i, align 8
  %memberidx1.i.i405.i = getelementptr inbounds %string, ptr %230, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i405.i, align 4
  %memberidx2.i.i406.i = getelementptr inbounds %string, ptr %230, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i406.i, align 4
  %231 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i409.i = icmp eq i64 %231, 9
  br i1 %.not.i409.i, label %ifend.i413.i, label %ifend78.i

ifend.i413.i:                                     ; preds = %ifend75.i
  %memberidx2.i411.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %232 = load ptr, ptr %memberidx2.i411.i, align 8
  %233 = call i64 @memcmp(ptr %232, ptr %229, i64 %231)
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %string_to_kw_token.exit, label %ifend78.i

ifend78.i:                                        ; preds = %ifend75.i, %ifend.i413.i
  %235 = call ptr @malloc(i32 2)
  store i16 28265, ptr %235, align 8
  %236 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %236, align 8
  %memberidx.i.i415.i = getelementptr inbounds %string, ptr %236, i64 0, i32 1
  store ptr %235, ptr %memberidx.i.i415.i, align 8
  %memberidx1.i.i416.i = getelementptr inbounds %string, ptr %236, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i416.i, align 4
  %memberidx2.i.i417.i = getelementptr inbounds %string, ptr %236, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i417.i, align 4
  %237 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i420.i = icmp eq i64 %237, 2
  br i1 %.not.i420.i, label %ifend.i424.i, label %ifend81.i

ifend.i424.i:                                     ; preds = %ifend78.i
  %memberidx2.i422.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %238 = load ptr, ptr %memberidx2.i422.i, align 8
  %239 = call i64 @memcmp(ptr %238, ptr nonnull %235, i64 %237)
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %string_to_kw_token.exit, label %ifend81.i

ifend81.i:                                        ; preds = %ifend78.i, %ifend.i424.i
  %241 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %241, ptr noundef nonnull align 8 dereferenceable(5) @49, i64 5, i1 false)
  %242 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %242, align 8
  %memberidx.i.i426.i = getelementptr inbounds %string, ptr %242, i64 0, i32 1
  store ptr %241, ptr %memberidx.i.i426.i, align 8
  %memberidx1.i.i427.i = getelementptr inbounds %string, ptr %242, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i427.i, align 4
  %memberidx2.i.i428.i = getelementptr inbounds %string, ptr %242, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i428.i, align 4
  %243 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i431.i = icmp eq i64 %243, 5
  br i1 %.not.i431.i, label %ifend.i435.i, label %ifend84.i

ifend.i435.i:                                     ; preds = %ifend81.i
  %memberidx2.i433.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %244 = load ptr, ptr %memberidx2.i433.i, align 8
  %245 = call i64 @memcmp(ptr %244, ptr %241, i64 %243)
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %string_to_kw_token.exit, label %ifend84.i

ifend84.i:                                        ; preds = %ifend81.i, %ifend.i435.i
  %247 = call ptr @malloc(i32 4)
  store i32 1836412517, ptr %247, align 8
  %248 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %248, align 8
  %memberidx.i.i437.i = getelementptr inbounds %string, ptr %248, i64 0, i32 1
  store ptr %247, ptr %memberidx.i.i437.i, align 8
  %memberidx1.i.i438.i = getelementptr inbounds %string, ptr %248, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i438.i, align 4
  %memberidx2.i.i439.i = getelementptr inbounds %string, ptr %248, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i439.i, align 4
  %249 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i442.i = icmp eq i64 %249, 4
  br i1 %.not.i442.i, label %ifend.i446.i, label %ifend87.i

ifend.i446.i:                                     ; preds = %ifend84.i
  %memberidx2.i444.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %250 = load ptr, ptr %memberidx2.i444.i, align 8
  %251 = call i64 @memcmp(ptr %250, ptr nonnull %247, i64 %249)
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %string_to_kw_token.exit, label %ifend87.i

ifend87.i:                                        ; preds = %ifend84.i, %ifend.i446.i
  %253 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %253, ptr noundef nonnull align 8 dereferenceable(3) @50, i64 3, i1 false)
  %254 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %254, align 8
  %memberidx.i.i448.i = getelementptr inbounds %string, ptr %254, i64 0, i32 1
  store ptr %253, ptr %memberidx.i.i448.i, align 8
  %memberidx1.i.i449.i = getelementptr inbounds %string, ptr %254, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i449.i, align 4
  %memberidx2.i.i450.i = getelementptr inbounds %string, ptr %254, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i450.i, align 4
  %255 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i453.i = icmp eq i64 %255, 3
  br i1 %.not.i453.i, label %ifend.i457.i, label %ifend90.i

ifend.i457.i:                                     ; preds = %ifend87.i
  %memberidx2.i455.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %256 = load ptr, ptr %memberidx2.i455.i, align 8
  %257 = call i64 @memcmp(ptr %256, ptr %253, i64 %255)
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %string_to_kw_token.exit, label %ifend90.i

ifend90.i:                                        ; preds = %ifend87.i, %ifend.i457.i
  %259 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %259, ptr noundef nonnull align 8 dereferenceable(3) @51, i64 3, i1 false)
  %260 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %260, align 8
  %memberidx.i.i459.i = getelementptr inbounds %string, ptr %260, i64 0, i32 1
  store ptr %259, ptr %memberidx.i.i459.i, align 8
  %memberidx1.i.i460.i = getelementptr inbounds %string, ptr %260, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i460.i, align 4
  %memberidx2.i.i461.i = getelementptr inbounds %string, ptr %260, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i461.i, align 4
  %261 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i464.i = icmp eq i64 %261, 3
  br i1 %.not.i464.i, label %ifend.i468.i, label %ifend93.i

ifend.i468.i:                                     ; preds = %ifend90.i
  %memberidx2.i466.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %262 = load ptr, ptr %memberidx2.i466.i, align 8
  %263 = call i64 @memcmp(ptr %262, ptr %259, i64 %261)
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %string_to_kw_token.exit, label %ifend93.i

ifend93.i:                                        ; preds = %ifend90.i, %ifend.i468.i
  %265 = call ptr @malloc(i32 2)
  store i16 29537, ptr %265, align 8
  %266 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %266, align 8
  %memberidx.i.i470.i = getelementptr inbounds %string, ptr %266, i64 0, i32 1
  store ptr %265, ptr %memberidx.i.i470.i, align 8
  %memberidx1.i.i471.i = getelementptr inbounds %string, ptr %266, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i471.i, align 4
  %memberidx2.i.i472.i = getelementptr inbounds %string, ptr %266, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i472.i, align 4
  %267 = load i64, ptr %memberidx.i.i81, align 4
  %.not.i475.i = icmp eq i64 %267, 2
  br i1 %.not.i475.i, label %ifend.i479.i, label %string_to_kw_token.exit

ifend.i479.i:                                     ; preds = %ifend93.i
  %memberidx2.i477.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %268 = load ptr, ptr %memberidx2.i477.i, align 8
  %269 = call i64 @memcmp(ptr %268, ptr nonnull %265, i64 %267)
  %270 = icmp eq i64 %269, 0
  %phi.sel = select i1 %270, i64 85, i64 0
  br label %string_to_kw_token.exit

string_to_kw_token.exit:                          ; preds = %ifend93.i, %ifend.i479.i, %ifend.i.i, %ifend.i138.i, %ifend.i149.i, %ifend.i160.i, %ifend.i171.i, %ifend.i182.i, %ifend.i193.i, %ifend.i204.i, %ifend.i215.i, %ifend.i226.i, %ifend.i237.i, %ifend.i248.i, %ifend.i259.i, %ifend.i270.i, %ifend.i281.i, %ifend.i292.i, %ifend.i303.i, %ifend.i314.i, %ifend.i325.i, %ifend.i336.i, %ifend.i347.i, %ifend.i358.i, %ifend.i369.i, %ifend.i380.i, %ifend.i391.i, %ifend.i402.i, %ifend.i413.i, %ifend.i424.i, %ifend.i435.i, %ifend.i446.i, %ifend.i457.i, %ifend.i468.i
  %common.ret.op.i84 = phi i64 [ 8, %ifend.i.i ], [ 9, %ifend.i138.i ], [ 55, %ifend.i149.i ], [ 56, %ifend.i160.i ], [ 57, %ifend.i171.i ], [ 58, %ifend.i182.i ], [ 59, %ifend.i193.i ], [ 60, %ifend.i204.i ], [ 61, %ifend.i215.i ], [ 62, %ifend.i226.i ], [ 63, %ifend.i237.i ], [ 64, %ifend.i248.i ], [ 65, %ifend.i259.i ], [ 66, %ifend.i270.i ], [ 67, %ifend.i281.i ], [ 68, %ifend.i292.i ], [ 69, %ifend.i303.i ], [ 70, %ifend.i314.i ], [ 71, %ifend.i325.i ], [ 72, %ifend.i336.i ], [ 73, %ifend.i347.i ], [ 74, %ifend.i358.i ], [ 75, %ifend.i369.i ], [ 76, %ifend.i380.i ], [ 77, %ifend.i391.i ], [ 78, %ifend.i402.i ], [ 79, %ifend.i413.i ], [ 80, %ifend.i424.i ], [ 81, %ifend.i435.i ], [ 82, %ifend.i446.i ], [ 83, %ifend.i457.i ], [ 84, %ifend.i468.i ], [ %phi.sel, %ifend.i479.i ], [ 0, %ifend93.i ]
  store i64 %common.ret.op.i84, ptr %keyword, align 8
  %.not = icmp eq i64 %common.ret.op.i84, 0
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %string_to_kw_token.exit
  %271 = load i64, ptr %memberidx, align 4
  %272 = add nsw i64 %271, 1
  %273 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i56 = getelementptr inbounds %string, ptr %273, i64 0, i32 2
  %274 = load i64, ptr %memberidx2.i56, align 4
  %275 = icmp slt i64 %272, %274
  br i1 %275, label %if.entry.i59, label %ifend5

if.entry.i59:                                     ; preds = %if.entry
  %276 = load ptr, ptr %273, align 8
  %memberidx4.i58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %276, i64 0, i32 2
  %277 = load ptr, ptr %memberidx4.i58, align 8
  %278 = call i8 %277(ptr nonnull %273, i64 %272)
  %phi.cmp = icmp eq i8 %278, 61
  br i1 %phi.cmp, label %if.entry3, label %ifend5

common.ret:                                       ; preds = %ifend5, %ifend
  %common.ret.op = phi ptr [ %279, %ifend ], [ %283, %ifend5 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %string_to_kw_token.exit
  %279 = tail call ptr @malloc(i32 24)
  %280 = load ptr, ptr %value, align 8
  %281 = load ptr, ptr %range, align 8
  store i64 54, ptr %279, align 4
  %memberidx1.i.i52 = getelementptr inbounds %Token, ptr %279, i64 0, i32 1
  store ptr %281, ptr %memberidx1.i.i52, align 8
  %memberidx.i53 = getelementptr inbounds %IdentifierToken, ptr %279, i64 0, i32 2
  store ptr %280, ptr %memberidx.i53, align 8
  br label %common.ret

if.entry3:                                        ; preds = %if.entry.i59
  %282 = icmp eq i64 %common.ret.op.i84, 8
  br i1 %282, label %if.entry6, label %ifend8

ifend5:                                           ; preds = %if.entry, %Lexer_advance.exit, %ifend8, %if.entry.i59
  %283 = tail call ptr @malloc(i32 16)
  %284 = load i64, ptr %keyword, align 8
  %285 = load ptr, ptr %range, align 8
  store i64 %284, ptr %283, align 4
  %memberidx1.i51 = getelementptr inbounds %Token, ptr %283, i64 0, i32 1
  store ptr %285, ptr %memberidx1.i51, align 8
  br label %common.ret

if.entry6:                                        ; preds = %if.entry3
  %286 = load i64, ptr %memberidx, align 4
  %287 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i.i37 = getelementptr inbounds %string, ptr %287, i64 0, i32 2
  %288 = load i64, ptr %memberidx2.i.i37, align 4
  %.not133 = icmp slt i64 %286, %288
  br i1 %.not133, label %ifend.i41, label %Lexer_advance.exit47

ifend.i41:                                        ; preds = %if.entry6
  %289 = load ptr, ptr %287, align 8
  %memberidx2.i39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %289, i64 0, i32 2
  %290 = load ptr, ptr %memberidx2.i39, align 8
  %291 = add nsw i64 %286, 1
  store i64 %291, ptr %memberidx, align 4
  %292 = call i8 %290(ptr nonnull %287, i64 %291)
  store i8 %292, ptr %0, align 1
  %293 = icmp eq i8 %292, 10
  br i1 %293, label %if.entry6.i44, label %Lexer_advance.exit47.sink.split

if.entry6.i44:                                    ; preds = %ifend.i41
  store i64 0, ptr %memberidx2.i90, align 4
  br label %Lexer_advance.exit47.sink.split

Lexer_advance.exit47.sink.split:                  ; preds = %ifend.i41, %if.entry6.i44
  %memberidx3.i91.sink139 = phi ptr [ %memberidx3.i91, %if.entry6.i44 ], [ %memberidx2.i90, %ifend.i41 ]
  %294 = load i64, ptr %memberidx3.i91.sink139, align 4
  %295 = add nsw i64 %294, 1
  store i64 %295, ptr %memberidx3.i91.sink139, align 4
  br label %Lexer_advance.exit47

Lexer_advance.exit47:                             ; preds = %Lexer_advance.exit47.sink.split, %if.entry6
  store i64 18, ptr %keyword, align 8
  br label %ifend8

ifend8:                                           ; preds = %if.entry3, %Lexer_advance.exit47
  %296 = load i64, ptr %keyword, align 8
  %297 = icmp eq i64 %296, 9
  br i1 %297, label %if.entry9, label %ifend5

if.entry9:                                        ; preds = %ifend8
  %298 = load i64, ptr %memberidx, align 4
  %299 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i.i = getelementptr inbounds %string, ptr %299, i64 0, i32 2
  %300 = load i64, ptr %memberidx2.i.i, align 4
  %.not132 = icmp slt i64 %298, %300
  br i1 %.not132, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %if.entry9
  %301 = load ptr, ptr %299, align 8
  %memberidx2.i34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %301, i64 0, i32 2
  %302 = load ptr, ptr %memberidx2.i34, align 8
  %303 = add nsw i64 %298, 1
  store i64 %303, ptr %memberidx, align 4
  %304 = call i8 %302(ptr nonnull %299, i64 %303)
  store i8 %304, ptr %0, align 1
  %305 = icmp eq i8 %304, 10
  br i1 %305, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx2.i90, align 4
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx3.i91.sink142 = phi ptr [ %memberidx3.i91, %if.entry6.i ], [ %memberidx2.i90, %ifend.i ]
  %306 = load i64, ptr %memberidx3.i91.sink142, align 4
  %307 = add nsw i64 %306, 1
  store i64 %307, ptr %memberidx3.i91.sink142, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %if.entry9
  store i64 19, ptr %keyword, align 8
  br label %ifend5
}

define internal fastcc ptr @Lexer_lex_token(ptr %0) unnamed_addr {
  %2 = load i8, ptr %0, align 1
  switch i8 %2, label %ifend [
    i8 32, label %if.entry
    i8 9, label %if.entry
  ]

common.ret:                                       ; preds = %end.i, %if.entry6.i936, %if.entry2.i, %if.entry.i933, %ifend6.i796, %Lexer_advance.exit84.i788, %ifend3.i767, %Lexer_advance.exit.i730, %ifend6.i701, %Lexer_advance.exit84.i693, %ifend3.i672, %Lexer_advance.exit.i635, %ifend.i606, %Lexer_advance.exit.i598, %ifend.i569, %Lexer_advance.exit.i561, %ifend.i444, %Lexer_advance.exit.i436, %ifend.i360, %Lexer_advance.exit.i352, %ifend.i323, %Lexer_advance.exit.i322, %ifend6.i301, %Lexer_advance.exit84.i293, %ifend3.i278, %Lexer_advance.exit.i254, %ifend6.i, %Lexer_advance.exit84.i, %Lexer_advance.exit50.i, %Lexer_advance.exit.i222, %ifend3.i, %Lexer_advance.exit44.i, %Lexer_advance.exit.i, %Array_FloError____sl__.exit, %if.entry87, %Lexer_dot_token.exit, %if.entry69, %if.entry66, %Lexer_char_token.exit, %if.entry60, %if.entry57, %if.entry54, %if.entry51, %if.entry48, %if.entry45, %if.entry42, %Lexer_advance.exit404, %if.entry18, %if.entry15, %if.entry12, %if.entry6, %if.entry3, %Lexer_advance.exit
  %common.ret.op = phi ptr [ %13, %Lexer_advance.exit ], [ %19, %if.entry3 ], [ %21, %if.entry6 ], [ %136, %if.entry12 ], [ %143, %if.entry15 ], [ %150, %if.entry18 ], [ %591, %Lexer_advance.exit404 ], [ %625, %if.entry42 ], [ %632, %if.entry45 ], [ %639, %if.entry48 ], [ %646, %if.entry51 ], [ %653, %if.entry54 ], [ %660, %if.entry57 ], [ %667, %if.entry60 ], [ %707, %Lexer_char_token.exit ], [ %716, %if.entry66 ], [ %723, %if.entry69 ], [ %1002, %Lexer_dot_token.exit ], [ %1011, %if.entry87 ], [ null, %Array_FloError____sl__.exit ], [ %175, %Lexer_advance.exit.i ], [ %209, %ifend3.i ], [ %201, %Lexer_advance.exit44.i ], [ %234, %Lexer_advance.exit.i222 ], [ %294, %ifend6.i ], [ %260, %Lexer_advance.exit50.i ], [ %286, %Lexer_advance.exit84.i ], [ %320, %Lexer_advance.exit.i254 ], [ %354, %ifend3.i278 ], [ %371, %Lexer_advance.exit84.i293 ], [ %379, %ifend6.i301 ], [ %405, %Lexer_advance.exit.i322 ], [ %413, %ifend.i323 ], [ %438, %Lexer_advance.exit.i352 ], [ %446, %ifend.i360 ], [ %610, %Lexer_advance.exit.i436 ], [ %618, %ifend.i444 ], [ %748, %Lexer_advance.exit.i561 ], [ %756, %ifend.i569 ], [ %781, %Lexer_advance.exit.i598 ], [ %789, %ifend.i606 ], [ %814, %Lexer_advance.exit.i635 ], [ %848, %ifend3.i672 ], [ %865, %Lexer_advance.exit84.i693 ], [ %873, %ifend6.i701 ], [ %899, %Lexer_advance.exit.i730 ], [ %933, %ifend3.i767 ], [ %950, %Lexer_advance.exit84.i788 ], [ %958, %ifend6.i796 ], [ %34, %if.entry.i933 ], [ %46, %if.entry2.i ], [ %58, %if.entry6.i936 ], [ %100, %end.i ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1, %1
  %memberidx.i.i166 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx.i.i166, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i167 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2.i.i167, align 4
  %.not918 = icmp slt i64 %3, %5
  br i1 %.not918, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %if.entry
  %6 = load ptr, ptr %4, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i, align 8
  %8 = add nsw i64 %3, 1
  store i64 %8, ptr %memberidx.i.i166, align 4
  %9 = call i8 %7(ptr nonnull %4, i64 %8)
  store i8 %9, ptr %0, align 1
  %10 = icmp eq i8 %9, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %10, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink956 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %11 = load i64, ptr %memberidx10.i.sink956, align 4
  %12 = add nsw i64 %11, 1
  store i64 %12, ptr %memberidx10.i.sink956, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %if.entry
  %13 = call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  br label %common.ret

ifend:                                            ; preds = %1
  %14 = and i8 %2, -33
  %15 = add i8 %14, -65
  %16 = icmp ult i8 %15, 26
  %17 = icmp eq i8 %2, 95
  %18 = or i1 %17, %16
  br i1 %18, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %19 = call fastcc ptr @Lexer_identifier_token(ptr nonnull %0)
  br label %common.ret

ifend5:                                           ; preds = %ifend
  %20 = icmp eq i8 %2, 34
  br i1 %20, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend5
  %21 = call fastcc ptr @Lexer_string_token(ptr nonnull %0)
  br label %common.ret

ifend8:                                           ; preds = %ifend5
  %22 = add i8 %2, -48
  %23 = icmp ult i8 %22, 10
  br i1 %23, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend8
  %24 = icmp eq i8 %2, 48
  %memberidx.i.i928 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %25 = load i64, ptr %memberidx.i.i928, align 4
  %26 = add nsw i64 %25, 1
  %memberidx1.i.i929 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %27 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i.i930 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i.i930, align 4
  %29 = icmp slt i64 %26, %28
  br i1 %29, label %if.entry.i.i932, label %Lexer_peek.exit.i

if.entry.i.i932:                                  ; preds = %if.entry9
  %30 = load ptr, ptr %27, align 8
  %memberidx4.i.i931 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i64 0, i32 2
  %31 = load ptr, ptr %memberidx4.i.i931, align 8
  %32 = call i8 %31(ptr nonnull %27, i64 %26)
  %phi.cmp.i = icmp eq i8 %32, 98
  br label %Lexer_peek.exit.i

Lexer_peek.exit.i:                                ; preds = %if.entry.i.i932, %if.entry9
  %common.ret.op.i.i = phi i1 [ %phi.cmp.i, %if.entry.i.i932 ], [ false, %if.entry9 ]
  %33 = and i1 %24, %common.ret.op.i.i
  br i1 %33, label %if.entry.i933, label %ifend.i934

if.entry.i933:                                    ; preds = %Lexer_peek.exit.i
  %34 = call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 2)
  br label %common.ret

ifend.i934:                                       ; preds = %Lexer_peek.exit.i
  %35 = load i8, ptr %0, align 1
  %36 = icmp eq i8 %35, 48
  %37 = load i64, ptr %memberidx.i.i928, align 4
  %38 = add nsw i64 %37, 1
  %39 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i45.i = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i45.i, align 4
  %41 = icmp slt i64 %38, %40
  br i1 %41, label %if.entry.i48.i, label %Lexer_peek.exit49.i

if.entry.i48.i:                                   ; preds = %ifend.i934
  %42 = load ptr, ptr %39, align 8
  %memberidx4.i47.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 2
  %43 = load ptr, ptr %memberidx4.i47.i, align 8
  %44 = call i8 %43(ptr nonnull %39, i64 %38)
  %phi.cmp101.i = icmp eq i8 %44, 111
  br label %Lexer_peek.exit49.i

Lexer_peek.exit49.i:                              ; preds = %if.entry.i48.i, %ifend.i934
  %common.ret.op.i46.i = phi i1 [ %phi.cmp101.i, %if.entry.i48.i ], [ false, %ifend.i934 ]
  %45 = and i1 %36, %common.ret.op.i46.i
  br i1 %45, label %if.entry2.i, label %ifend4.i

if.entry2.i:                                      ; preds = %Lexer_peek.exit49.i
  %46 = call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 8)
  br label %common.ret

ifend4.i:                                         ; preds = %Lexer_peek.exit49.i
  %47 = load i8, ptr %0, align 1
  %48 = icmp eq i8 %47, 48
  %49 = load i64, ptr %memberidx.i.i928, align 4
  %50 = add nsw i64 %49, 1
  %51 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i52.i935 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  %52 = load i64, ptr %memberidx2.i52.i935, align 4
  %53 = icmp slt i64 %50, %52
  br i1 %53, label %if.entry.i55.i, label %Lexer_peek.exit56.i

if.entry.i55.i:                                   ; preds = %ifend4.i
  %54 = load ptr, ptr %51, align 8
  %memberidx4.i54.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i64 0, i32 2
  %55 = load ptr, ptr %memberidx4.i54.i, align 8
  %56 = call i8 %55(ptr nonnull %51, i64 %50)
  %phi.cmp102.i = icmp eq i8 %56, 120
  br label %Lexer_peek.exit56.i

Lexer_peek.exit56.i:                              ; preds = %if.entry.i55.i, %ifend4.i
  %common.ret.op.i53.i = phi i1 [ %phi.cmp102.i, %if.entry.i55.i ], [ false, %ifend4.i ]
  %57 = and i1 %48, %common.ret.op.i53.i
  br i1 %57, label %if.entry6.i936, label %ifend8.i

if.entry6.i936:                                   ; preds = %Lexer_peek.exit56.i
  %58 = call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 16)
  br label %common.ret

ifend8.i:                                         ; preds = %Lexer_peek.exit56.i
  %59 = load i64, ptr %memberidx.i.i928, align 4
  %60 = add nsw i64 %59, 1
  %61 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i59.i937 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  %62 = load i64, ptr %memberidx2.i59.i937, align 4
  %63 = icmp slt i64 %60, %62
  br i1 %63, label %if.entry.i62.i, label %Lexer_peek.exit63.i

if.entry.i62.i:                                   ; preds = %ifend8.i
  %64 = load ptr, ptr %61, align 8
  %memberidx4.i61.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 2
  %65 = load ptr, ptr %memberidx4.i61.i, align 8
  %66 = call i8 %65(ptr nonnull %61, i64 %60)
  br label %Lexer_peek.exit63.i

Lexer_peek.exit63.i:                              ; preds = %if.entry.i62.i, %ifend8.i
  %common.ret.op.i60.i = phi i8 [ %66, %if.entry.i62.i ], [ 0, %ifend8.i ]
  %67 = add i8 %common.ret.op.i60.i, -48
  %68 = icmp ult i8 %67, 10
  %69 = icmp eq i8 %common.ret.op.i60.i, 46
  %70 = or i1 %69, %68
  %71 = load i64, ptr %memberidx.i.i928, align 4
  %72 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i67.i938 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  %73 = load i64, ptr %memberidx2.i67.i938, align 4
  %.not.i939 = icmp slt i64 %71, %73
  %74 = and i1 %70, %.not.i939
  br i1 %74, label %while.entry.preheader.i, label %while.end.i949

while.entry.preheader.i:                          ; preds = %Lexer_peek.exit63.i
  %memberidx12.i.i940 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i.i942 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.i944

while.entry.i944:                                 ; preds = %Lexer_peek.exit92.i, %while.entry.preheader.i
  %length.0.i943 = phi i64 [ %106, %Lexer_peek.exit92.i ], [ 1, %while.entry.preheader.i ]
  %is_float.0.i = phi i1 [ %spec.select.i, %Lexer_peek.exit92.i ], [ false, %while.entry.preheader.i ]
  %next_char.0.i = phi i8 [ %common.ret.op.i89.i, %Lexer_peek.exit92.i ], [ %common.ret.op.i60.i, %while.entry.preheader.i ]
  %75 = icmp eq i8 %next_char.0.i, 46
  %76 = load i64, ptr %memberidx.i.i928, align 4
  %77 = add nsw i64 %76, 2
  %78 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i71.i = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  %79 = load i64, ptr %memberidx2.i71.i, align 4
  %80 = icmp slt i64 %77, %79
  br i1 %80, label %if.entry.i74.i, label %Lexer_peek.exit75.i

if.entry.i74.i:                                   ; preds = %while.entry.i944
  %81 = load ptr, ptr %78, align 8
  %memberidx4.i73.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %81, i64 0, i32 2
  %82 = load ptr, ptr %memberidx4.i73.i, align 8
  %83 = call i8 %82(ptr nonnull %78, i64 %77)
  br label %Lexer_peek.exit75.i

Lexer_peek.exit75.i:                              ; preds = %if.entry.i74.i, %while.entry.i944
  %common.ret.op.i72.i = phi i8 [ %83, %if.entry.i74.i ], [ 0, %while.entry.i944 ]
  %84 = add i8 %common.ret.op.i72.i, -58
  %85 = icmp ult i8 %84, -10
  %86 = or i1 %is_float.0.i, %85
  %87 = and i1 %75, %86
  br i1 %87, label %while.end.i949, label %ifend11.i

while.end.i949:                                   ; preds = %Lexer_peek.exit92.i, %Lexer_peek.exit75.i, %Lexer_peek.exit63.i
  %length.1.i = phi i64 [ 1, %Lexer_peek.exit63.i ], [ %length.0.i943, %Lexer_peek.exit75.i ], [ %106, %Lexer_peek.exit92.i ]
  %is_float.1.i = phi i1 [ false, %Lexer_peek.exit63.i ], [ %is_float.0.i, %Lexer_peek.exit75.i ], [ %spec.select.i, %Lexer_peek.exit92.i ]
  %88 = call ptr @malloc(i32 32)
  %89 = load i64, ptr %memberidx.i.i928, align 4
  %90 = sub i64 %89, %length.1.i
  %91 = add nsw i64 %90, 1
  %92 = add nsw i64 %89, 1
  %memberidx2.i79.i945 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %93 = load i64, ptr %memberidx2.i79.i945, align 4
  %94 = sub i64 %93, %length.1.i
  %memberidx3.i.i946 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %95 = load i64, ptr %memberidx3.i.i946, align 4
  store i64 %91, ptr %88, align 4
  %memberidx1.i.i80.i = getelementptr inbounds %FloRange, ptr %88, i64 0, i32 1
  store i64 %92, ptr %memberidx1.i.i80.i, align 4
  %memberidx2.i.i.i947 = getelementptr inbounds %FloRange, ptr %88, i64 0, i32 2
  store i64 %94, ptr %memberidx2.i.i.i947, align 4
  %memberidx3.i.i.i948 = getelementptr inbounds %FloRange, ptr %88, i64 0, i32 3
  store i64 %95, ptr %memberidx3.i.i.i948, align 4
  %96 = load ptr, ptr %memberidx1.i.i929, align 8
  %97 = load ptr, ptr %96, align 8
  %memberidx17.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %97, i64 0, i32 1
  %98 = load ptr, ptr %memberidx17.i, align 8
  %99 = call ptr %98(ptr nonnull %96, i64 %91, i64 %length.1.i)
  %100 = call ptr @malloc(i32 24)
  %101 = load ptr, ptr %99, align 8
  %memberidx19.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %101, i64 0, i32 5
  %102 = load ptr, ptr %memberidx19.i, align 8
  %103 = call ptr %102(ptr nonnull %99)
  br i1 %is_float.1.i, label %true_block.i, label %false_block.i

ifend11.i:                                        ; preds = %Lexer_peek.exit75.i
  %104 = load i8, ptr %0, align 1
  %105 = icmp eq i8 %104, 46
  %spec.select.i = select i1 %105, i1 true, i1 %is_float.0.i
  %106 = add nuw nsw i64 %length.0.i943, 1
  %107 = load i64, ptr %memberidx.i.i928, align 4
  %108 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i.i82.i = getelementptr inbounds %string, ptr %108, i64 0, i32 2
  %109 = load i64, ptr %memberidx2.i.i82.i, align 4
  %.not103.i = icmp slt i64 %107, %109
  br i1 %.not103.i, label %ifend.i.i950, label %Lexer_advance.exit.i952

ifend.i.i950:                                     ; preds = %ifend11.i
  %110 = load ptr, ptr %108, align 8
  %memberidx2.i84.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %110, i64 0, i32 2
  %111 = load ptr, ptr %memberidx2.i84.i, align 8
  %112 = add nsw i64 %107, 1
  store i64 %112, ptr %memberidx.i.i928, align 4
  %113 = call i8 %111(ptr nonnull %108, i64 %112)
  store i8 %113, ptr %0, align 1
  %114 = icmp eq i8 %113, 10
  br i1 %114, label %if.entry6.i.i951, label %Lexer_advance.exit.sink.split.i

if.entry6.i.i951:                                 ; preds = %ifend.i.i950
  store i64 0, ptr %memberidx12.i.i940, align 4
  br label %Lexer_advance.exit.sink.split.i

Lexer_advance.exit.sink.split.i:                  ; preds = %if.entry6.i.i951, %ifend.i.i950
  %memberidx10.i.sink106.i = phi ptr [ %memberidx10.i.i942, %if.entry6.i.i951 ], [ %memberidx12.i.i940, %ifend.i.i950 ]
  %115 = load i64, ptr %memberidx10.i.sink106.i, align 4
  %116 = add nsw i64 %115, 1
  store i64 %116, ptr %memberidx10.i.sink106.i, align 4
  br label %Lexer_advance.exit.i952

Lexer_advance.exit.i952:                          ; preds = %Lexer_advance.exit.sink.split.i, %ifend11.i
  %117 = load i64, ptr %memberidx.i.i928, align 4
  %118 = add nsw i64 %117, 1
  %119 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i88.i = getelementptr inbounds %string, ptr %119, i64 0, i32 2
  %120 = load i64, ptr %memberidx2.i88.i, align 4
  %121 = icmp slt i64 %118, %120
  br i1 %121, label %if.entry.i91.i, label %Lexer_peek.exit92.i

if.entry.i91.i:                                   ; preds = %Lexer_advance.exit.i952
  %122 = load ptr, ptr %119, align 8
  %memberidx4.i90.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %122, i64 0, i32 2
  %123 = load ptr, ptr %memberidx4.i90.i, align 8
  %124 = call i8 %123(ptr nonnull %119, i64 %118)
  br label %Lexer_peek.exit92.i

Lexer_peek.exit92.i:                              ; preds = %if.entry.i91.i, %Lexer_advance.exit.i952
  %common.ret.op.i89.i = phi i8 [ %124, %if.entry.i91.i ], [ 0, %Lexer_advance.exit.i952 ]
  %125 = add i8 %common.ret.op.i89.i, -48
  %126 = icmp ult i8 %125, 10
  %127 = icmp eq i8 %common.ret.op.i89.i, 46
  %128 = or i1 %127, %126
  %129 = load i64, ptr %memberidx.i.i928, align 4
  %130 = load ptr, ptr %memberidx1.i.i929, align 8
  %memberidx2.i95.i = getelementptr inbounds %string, ptr %130, i64 0, i32 2
  %131 = load i64, ptr %memberidx2.i95.i, align 4
  %.not104.i = icmp slt i64 %129, %131
  %132 = and i1 %128, %.not104.i
  br i1 %132, label %while.entry.i944, label %while.end.i949

true_block.i:                                     ; preds = %while.end.i949
  %133 = call double @atof(ptr %103)
  call void @free(ptr %103)
  store i64 32, ptr %100, align 4
  %memberidx1.i.i76.i953 = getelementptr inbounds %Token, ptr %100, i64 0, i32 1
  store ptr %88, ptr %memberidx1.i.i76.i953, align 8
  %memberidx.i77.i = getelementptr inbounds %FloatToken, ptr %100, i64 0, i32 2
  store double %133, ptr %memberidx.i77.i, align 8
  br label %end.i

false_block.i:                                    ; preds = %while.end.i949
  %134 = call i64 @atol(ptr nocapture %103)
  call void @free(ptr %103)
  store i64 31, ptr %100, align 4
  %memberidx1.i.i.i954 = getelementptr inbounds %Token, ptr %100, i64 0, i32 1
  store ptr %88, ptr %memberidx1.i.i.i954, align 8
  %memberidx.i68.i = getelementptr inbounds %IntToken, ptr %100, i64 0, i32 2
  store i64 %134, ptr %memberidx.i68.i, align 4
  br label %end.i

end.i:                                            ; preds = %false_block.i, %true_block.i
  %memberidx.i64.i = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  %135 = load ptr, ptr %memberidx.i64.i, align 8
  call void @free(ptr %135)
  call void @free(ptr %99)
  br label %common.ret

ifend11:                                          ; preds = %ifend8
  switch i8 %2, label %ifend89 [
    i8 58, label %if.entry12
    i8 59, label %if.entry15
    i8 44, label %if.entry18
    i8 43, label %if.entry21
    i8 45, label %if.entry24
    i8 42, label %if.entry27
    i8 37, label %if.entry30
    i8 94, label %if.entry33
    i8 47, label %if.entry36
    i8 40, label %if.entry42
    i8 41, label %if.entry45
    i8 123, label %if.entry48
    i8 125, label %if.entry51
    i8 91, label %if.entry54
    i8 93, label %if.entry57
    i8 13, label %if.entry60
    i8 10, label %if.entry60
    i8 39, label %if.entry63
    i8 63, label %if.entry66
    i8 38, label %if.entry69
    i8 61, label %if.entry72
    i8 33, label %if.entry75
    i8 62, label %if.entry78
    i8 60, label %if.entry81
    i8 46, label %if.entry84
    i8 0, label %if.entry87
  ]

if.entry12:                                       ; preds = %ifend11
  %136 = tail call ptr @malloc(i32 16)
  %137 = call ptr @malloc(i32 32)
  %memberidx.i176 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %138 = load i64, ptr %memberidx.i176, align 4
  %139 = add nsw i64 %138, 1
  %memberidx2.i177 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %140 = load i64, ptr %memberidx2.i177, align 4
  %141 = add i64 %140, -1
  %memberidx3.i178 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %142 = load i64, ptr %memberidx3.i178, align 4
  store i64 %138, ptr %137, align 4
  %memberidx1.i.i179 = getelementptr inbounds %FloRange, ptr %137, i64 0, i32 1
  store i64 %139, ptr %memberidx1.i.i179, align 4
  %memberidx2.i.i180 = getelementptr inbounds %FloRange, ptr %137, i64 0, i32 2
  store i64 %141, ptr %memberidx2.i.i180, align 4
  %memberidx3.i.i181 = getelementptr inbounds %FloRange, ptr %137, i64 0, i32 3
  store i64 %142, ptr %memberidx3.i.i181, align 4
  store i64 1, ptr %136, align 4
  %memberidx1.i182 = getelementptr inbounds %Token, ptr %136, i64 0, i32 1
  store ptr %137, ptr %memberidx1.i182, align 8
  br label %common.ret

if.entry15:                                       ; preds = %ifend11
  %143 = tail call ptr @malloc(i32 16)
  %144 = call ptr @malloc(i32 32)
  %memberidx.i183 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %145 = load i64, ptr %memberidx.i183, align 4
  %146 = add nsw i64 %145, 1
  %memberidx2.i184 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %147 = load i64, ptr %memberidx2.i184, align 4
  %148 = add i64 %147, -1
  %memberidx3.i185 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %149 = load i64, ptr %memberidx3.i185, align 4
  store i64 %145, ptr %144, align 4
  %memberidx1.i.i186 = getelementptr inbounds %FloRange, ptr %144, i64 0, i32 1
  store i64 %146, ptr %memberidx1.i.i186, align 4
  %memberidx2.i.i187 = getelementptr inbounds %FloRange, ptr %144, i64 0, i32 2
  store i64 %148, ptr %memberidx2.i.i187, align 4
  %memberidx3.i.i188 = getelementptr inbounds %FloRange, ptr %144, i64 0, i32 3
  store i64 %149, ptr %memberidx3.i.i188, align 4
  store i64 2, ptr %143, align 4
  %memberidx1.i189 = getelementptr inbounds %Token, ptr %143, i64 0, i32 1
  store ptr %144, ptr %memberidx1.i189, align 8
  br label %common.ret

if.entry18:                                       ; preds = %ifend11
  %150 = tail call ptr @malloc(i32 16)
  %151 = call ptr @malloc(i32 32)
  %memberidx.i190 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %152 = load i64, ptr %memberidx.i190, align 4
  %153 = add nsw i64 %152, 1
  %memberidx2.i191 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %154 = load i64, ptr %memberidx2.i191, align 4
  %155 = add i64 %154, -1
  %memberidx3.i192 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %156 = load i64, ptr %memberidx3.i192, align 4
  store i64 %152, ptr %151, align 4
  %memberidx1.i.i193 = getelementptr inbounds %FloRange, ptr %151, i64 0, i32 1
  store i64 %153, ptr %memberidx1.i.i193, align 4
  %memberidx2.i.i194 = getelementptr inbounds %FloRange, ptr %151, i64 0, i32 2
  store i64 %155, ptr %memberidx2.i.i194, align 4
  %memberidx3.i.i195 = getelementptr inbounds %FloRange, ptr %151, i64 0, i32 3
  store i64 %156, ptr %memberidx3.i.i195, align 4
  store i64 3, ptr %150, align 4
  %memberidx1.i196 = getelementptr inbounds %Token, ptr %150, i64 0, i32 1
  store ptr %151, ptr %memberidx1.i196, align 8
  br label %common.ret

if.entry21:                                       ; preds = %ifend11
  %memberidx.i.i197 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %157 = load i64, ptr %memberidx.i.i197, align 4
  %158 = add nsw i64 %157, 1
  %memberidx1.i.i198 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %159 = load ptr, ptr %memberidx1.i.i198, align 8
  %memberidx2.i.i199 = getelementptr inbounds %string, ptr %159, i64 0, i32 2
  %160 = load i64, ptr %memberidx2.i.i199, align 4
  %161 = icmp slt i64 %158, %160
  br i1 %161, label %if.entry.i.i, label %else.i

if.entry.i.i:                                     ; preds = %if.entry21
  %162 = load ptr, ptr %159, align 8
  %memberidx4.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %162, i64 0, i32 2
  %163 = load ptr, ptr %memberidx4.i.i, align 8
  %164 = call i8 %163(ptr nonnull %159, i64 %158)
  %phi.cmp914 = icmp eq i8 %164, 43
  br i1 %phi.cmp914, label %if.entry.i200, label %else.i

if.entry.i200:                                    ; preds = %if.entry.i.i
  %165 = load i64, ptr %memberidx.i.i197, align 4
  %166 = load ptr, ptr %memberidx1.i.i198, align 8
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %166, i64 0, i32 2
  %167 = load i64, ptr %memberidx2.i.i.i, align 4
  %.not917 = icmp slt i64 %165, %167
  br i1 %.not917, label %ifend.i.i, label %Lexer_advance.exit.i

ifend.i.i:                                        ; preds = %if.entry.i200
  %168 = load ptr, ptr %166, align 8
  %memberidx2.i11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %168, i64 0, i32 2
  %169 = load ptr, ptr %memberidx2.i11.i, align 8
  %170 = add nsw i64 %165, 1
  store i64 %170, ptr %memberidx.i.i197, align 4
  %171 = call i8 %169(ptr nonnull %166, i64 %170)
  store i8 %171, ptr %0, align 1
  %172 = icmp eq i8 %171, 10
  %memberidx9.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %172, label %if.entry6.i.i, label %Lexer_advance.exit.i.sink.split

if.entry6.i.i:                                    ; preds = %ifend.i.i
  store i64 0, ptr %memberidx9.i.i, align 4
  %memberidx10.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i.sink.split

Lexer_advance.exit.i.sink.split:                  ; preds = %ifend.i.i, %if.entry6.i.i
  %memberidx9.i.i.sink958 = phi ptr [ %memberidx10.i.i, %if.entry6.i.i ], [ %memberidx9.i.i, %ifend.i.i ]
  %173 = load i64, ptr %memberidx9.i.i.sink958, align 4
  %174 = add nsw i64 %173, 1
  store i64 %174, ptr %memberidx9.i.i.sink958, align 4
  br label %Lexer_advance.exit.i

Lexer_advance.exit.i:                             ; preds = %Lexer_advance.exit.i.sink.split, %if.entry.i200
  %175 = call ptr @malloc(i32 16)
  %176 = call ptr @malloc(i32 32)
  %177 = load i64, ptr %memberidx.i.i197, align 4
  %178 = add i64 %177, -1
  %179 = add nsw i64 %177, 1
  %memberidx2.i13.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %180 = load i64, ptr %memberidx2.i13.i, align 4
  %181 = add i64 %180, -2
  %memberidx3.i14.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %182 = load i64, ptr %memberidx3.i14.i, align 4
  store i64 %178, ptr %176, align 4
  %memberidx1.i.i15.i = getelementptr inbounds %FloRange, ptr %176, i64 0, i32 1
  store i64 %179, ptr %memberidx1.i.i15.i, align 4
  %memberidx2.i.i16.i = getelementptr inbounds %FloRange, ptr %176, i64 0, i32 2
  store i64 %181, ptr %memberidx2.i.i16.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %176, i64 0, i32 3
  store i64 %182, ptr %memberidx3.i.i.i, align 4
  store i64 23, ptr %175, align 4
  %memberidx1.i17.i = getelementptr inbounds %Token, ptr %175, i64 0, i32 1
  store ptr %176, ptr %memberidx1.i17.i, align 8
  br label %common.ret

else.i:                                           ; preds = %if.entry21, %if.entry.i.i
  %183 = load i64, ptr %memberidx.i.i197, align 4
  %184 = add nsw i64 %183, 1
  %185 = load ptr, ptr %memberidx1.i.i198, align 8
  %memberidx2.i27.i = getelementptr inbounds %string, ptr %185, i64 0, i32 2
  %186 = load i64, ptr %memberidx2.i27.i, align 4
  %187 = icmp slt i64 %184, %186
  br i1 %187, label %if.entry.i30.i, label %ifend3.i

if.entry.i30.i:                                   ; preds = %else.i
  %188 = load ptr, ptr %185, align 8
  %memberidx4.i29.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %188, i64 0, i32 2
  %189 = load ptr, ptr %memberidx4.i29.i, align 8
  %190 = call i8 %189(ptr nonnull %185, i64 %184)
  %phi.cmp915 = icmp eq i8 %190, 61
  br i1 %phi.cmp915, label %if.entry1.i, label %ifend3.i

if.entry1.i:                                      ; preds = %if.entry.i30.i
  %191 = load i64, ptr %memberidx.i.i197, align 4
  %192 = load ptr, ptr %memberidx1.i.i198, align 8
  %memberidx2.i.i34.i = getelementptr inbounds %string, ptr %192, i64 0, i32 2
  %193 = load i64, ptr %memberidx2.i.i34.i, align 4
  %.not916 = icmp slt i64 %191, %193
  br i1 %.not916, label %ifend.i38.i, label %Lexer_advance.exit44.i

ifend.i38.i:                                      ; preds = %if.entry1.i
  %194 = load ptr, ptr %192, align 8
  %memberidx2.i36.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %194, i64 0, i32 2
  %195 = load ptr, ptr %memberidx2.i36.i, align 8
  %196 = add nsw i64 %191, 1
  store i64 %196, ptr %memberidx.i.i197, align 4
  %197 = call i8 %195(ptr nonnull %192, i64 %196)
  store i8 %197, ptr %0, align 1
  %198 = icmp eq i8 %197, 10
  %memberidx9.i39.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %198, label %if.entry6.i41.i, label %Lexer_advance.exit44.i.sink.split

if.entry6.i41.i:                                  ; preds = %ifend.i38.i
  store i64 0, ptr %memberidx9.i39.i, align 4
  %memberidx10.i40.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit44.i.sink.split

Lexer_advance.exit44.i.sink.split:                ; preds = %ifend.i38.i, %if.entry6.i41.i
  %memberidx9.i39.i.sink960 = phi ptr [ %memberidx10.i40.i, %if.entry6.i41.i ], [ %memberidx9.i39.i, %ifend.i38.i ]
  %199 = load i64, ptr %memberidx9.i39.i.sink960, align 4
  %200 = add nsw i64 %199, 1
  store i64 %200, ptr %memberidx9.i39.i.sink960, align 4
  br label %Lexer_advance.exit44.i

Lexer_advance.exit44.i:                           ; preds = %Lexer_advance.exit44.i.sink.split, %if.entry1.i
  %201 = call ptr @malloc(i32 16)
  %202 = call ptr @malloc(i32 32)
  %203 = load i64, ptr %memberidx.i.i197, align 4
  %204 = add i64 %203, -1
  %205 = add nsw i64 %203, 1
  %memberidx2.i46.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %206 = load i64, ptr %memberidx2.i46.i, align 4
  %207 = add i64 %206, -2
  %memberidx3.i47.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %208 = load i64, ptr %memberidx3.i47.i, align 4
  store i64 %204, ptr %202, align 4
  %memberidx1.i.i48.i = getelementptr inbounds %FloRange, ptr %202, i64 0, i32 1
  store i64 %205, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %FloRange, ptr %202, i64 0, i32 2
  store i64 %207, ptr %memberidx2.i.i49.i, align 4
  %memberidx3.i.i50.i = getelementptr inbounds %FloRange, ptr %202, i64 0, i32 3
  store i64 %208, ptr %memberidx3.i.i50.i, align 4
  store i64 14, ptr %201, align 4
  %memberidx1.i51.i = getelementptr inbounds %Token, ptr %201, i64 0, i32 1
  store ptr %202, ptr %memberidx1.i51.i, align 8
  br label %common.ret

ifend3.i:                                         ; preds = %else.i, %if.entry.i30.i
  %209 = call ptr @malloc(i32 16)
  %210 = call ptr @malloc(i32 32)
  %211 = load i64, ptr %memberidx.i.i197, align 4
  %212 = add nsw i64 %211, 1
  %memberidx2.i20.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %213 = load i64, ptr %memberidx2.i20.i, align 4
  %214 = add i64 %213, -1
  %memberidx3.i21.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %215 = load i64, ptr %memberidx3.i21.i, align 4
  store i64 %211, ptr %210, align 4
  %memberidx1.i.i22.i = getelementptr inbounds %FloRange, ptr %210, i64 0, i32 1
  store i64 %212, ptr %memberidx1.i.i22.i, align 4
  %memberidx2.i.i23.i = getelementptr inbounds %FloRange, ptr %210, i64 0, i32 2
  store i64 %214, ptr %memberidx2.i.i23.i, align 4
  %memberidx3.i.i24.i = getelementptr inbounds %FloRange, ptr %210, i64 0, i32 3
  store i64 %215, ptr %memberidx3.i.i24.i, align 4
  store i64 6, ptr %209, align 4
  %memberidx1.i18.i = getelementptr inbounds %Token, ptr %209, i64 0, i32 1
  store ptr %210, ptr %memberidx1.i18.i, align 8
  br label %common.ret

if.entry24:                                       ; preds = %ifend11
  %memberidx.i.i202 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %216 = load i64, ptr %memberidx.i.i202, align 4
  %217 = add nsw i64 %216, 1
  %memberidx1.i.i203 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %218 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i.i204 = getelementptr inbounds %string, ptr %218, i64 0, i32 2
  %219 = load i64, ptr %memberidx2.i.i204, align 4
  %220 = icmp slt i64 %217, %219
  br i1 %220, label %if.entry.i.i206, label %else.i223

if.entry.i.i206:                                  ; preds = %if.entry24
  %221 = load ptr, ptr %218, align 8
  %memberidx4.i.i205 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %221, i64 0, i32 2
  %222 = load ptr, ptr %memberidx4.i.i205, align 8
  %223 = call i8 %222(ptr nonnull %218, i64 %217)
  %phi.cmp908 = icmp eq i8 %223, 45
  br i1 %phi.cmp908, label %if.entry.i213, label %else.i223

if.entry.i213:                                    ; preds = %if.entry.i.i206
  %224 = load i64, ptr %memberidx.i.i202, align 4
  %225 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i.i.i212 = getelementptr inbounds %string, ptr %225, i64 0, i32 2
  %226 = load i64, ptr %memberidx2.i.i.i212, align 4
  %.not913 = icmp slt i64 %224, %226
  br i1 %.not913, label %ifend.i.i215, label %Lexer_advance.exit.i222

ifend.i.i215:                                     ; preds = %if.entry.i213
  %227 = load ptr, ptr %225, align 8
  %memberidx2.i17.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %227, i64 0, i32 2
  %228 = load ptr, ptr %memberidx2.i17.i, align 8
  %229 = add nsw i64 %224, 1
  store i64 %229, ptr %memberidx.i.i202, align 4
  %230 = call i8 %228(ptr nonnull %225, i64 %229)
  store i8 %230, ptr %0, align 1
  %231 = icmp eq i8 %230, 10
  %memberidx9.i.i216 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %231, label %if.entry6.i.i218, label %Lexer_advance.exit.i222.sink.split

if.entry6.i.i218:                                 ; preds = %ifend.i.i215
  store i64 0, ptr %memberidx9.i.i216, align 4
  %memberidx10.i.i217 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i222.sink.split

Lexer_advance.exit.i222.sink.split:               ; preds = %ifend.i.i215, %if.entry6.i.i218
  %memberidx9.i.i216.sink962 = phi ptr [ %memberidx10.i.i217, %if.entry6.i.i218 ], [ %memberidx9.i.i216, %ifend.i.i215 ]
  %232 = load i64, ptr %memberidx9.i.i216.sink962, align 4
  %233 = add nsw i64 %232, 1
  store i64 %233, ptr %memberidx9.i.i216.sink962, align 4
  br label %Lexer_advance.exit.i222

Lexer_advance.exit.i222:                          ; preds = %Lexer_advance.exit.i222.sink.split, %if.entry.i213
  %234 = call ptr @malloc(i32 16)
  %235 = call ptr @malloc(i32 32)
  %236 = load i64, ptr %memberidx.i.i202, align 4
  %237 = add i64 %236, -1
  %238 = add nsw i64 %236, 1
  %memberidx2.i19.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %239 = load i64, ptr %memberidx2.i19.i, align 4
  %240 = add i64 %239, -2
  %memberidx3.i20.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %241 = load i64, ptr %memberidx3.i20.i, align 4
  store i64 %237, ptr %235, align 4
  %memberidx1.i.i21.i = getelementptr inbounds %FloRange, ptr %235, i64 0, i32 1
  store i64 %238, ptr %memberidx1.i.i21.i, align 4
  %memberidx2.i.i22.i = getelementptr inbounds %FloRange, ptr %235, i64 0, i32 2
  store i64 %240, ptr %memberidx2.i.i22.i, align 4
  %memberidx3.i.i.i221 = getelementptr inbounds %FloRange, ptr %235, i64 0, i32 3
  store i64 %241, ptr %memberidx3.i.i.i221, align 4
  store i64 24, ptr %234, align 4
  %memberidx1.i23.i = getelementptr inbounds %Token, ptr %234, i64 0, i32 1
  store ptr %235, ptr %memberidx1.i23.i, align 8
  br label %common.ret

else.i223:                                        ; preds = %if.entry24, %if.entry.i.i206
  %242 = load i64, ptr %memberidx.i.i202, align 4
  %243 = add nsw i64 %242, 1
  %244 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i33.i = getelementptr inbounds %string, ptr %244, i64 0, i32 2
  %245 = load i64, ptr %memberidx2.i33.i, align 4
  %246 = icmp slt i64 %243, %245
  br i1 %246, label %if.entry.i36.i, label %else2.i

if.entry.i36.i:                                   ; preds = %else.i223
  %247 = load ptr, ptr %244, align 8
  %memberidx4.i35.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %247, i64 0, i32 2
  %248 = load ptr, ptr %memberidx4.i35.i, align 8
  %249 = call i8 %248(ptr nonnull %244, i64 %243)
  %phi.cmp909 = icmp eq i8 %249, 61
  br i1 %phi.cmp909, label %if.entry1.i224, label %else2.i

if.entry1.i224:                                   ; preds = %if.entry.i36.i
  %250 = load i64, ptr %memberidx.i.i202, align 4
  %251 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i.i40.i = getelementptr inbounds %string, ptr %251, i64 0, i32 2
  %252 = load i64, ptr %memberidx2.i.i40.i, align 4
  %.not912 = icmp slt i64 %250, %252
  br i1 %.not912, label %ifend.i44.i, label %Lexer_advance.exit50.i

ifend.i44.i:                                      ; preds = %if.entry1.i224
  %253 = load ptr, ptr %251, align 8
  %memberidx2.i42.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %253, i64 0, i32 2
  %254 = load ptr, ptr %memberidx2.i42.i, align 8
  %255 = add nsw i64 %250, 1
  store i64 %255, ptr %memberidx.i.i202, align 4
  %256 = call i8 %254(ptr nonnull %251, i64 %255)
  store i8 %256, ptr %0, align 1
  %257 = icmp eq i8 %256, 10
  %memberidx9.i45.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %257, label %if.entry6.i47.i, label %Lexer_advance.exit50.i.sink.split

if.entry6.i47.i:                                  ; preds = %ifend.i44.i
  store i64 0, ptr %memberidx9.i45.i, align 4
  %memberidx10.i46.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i.sink.split

Lexer_advance.exit50.i.sink.split:                ; preds = %ifend.i44.i, %if.entry6.i47.i
  %memberidx9.i45.i.sink964 = phi ptr [ %memberidx10.i46.i, %if.entry6.i47.i ], [ %memberidx9.i45.i, %ifend.i44.i ]
  %258 = load i64, ptr %memberidx9.i45.i.sink964, align 4
  %259 = add nsw i64 %258, 1
  store i64 %259, ptr %memberidx9.i45.i.sink964, align 4
  br label %Lexer_advance.exit50.i

Lexer_advance.exit50.i:                           ; preds = %Lexer_advance.exit50.i.sink.split, %if.entry1.i224
  %260 = call ptr @malloc(i32 16)
  %261 = call ptr @malloc(i32 32)
  %262 = load i64, ptr %memberidx.i.i202, align 4
  %263 = add i64 %262, -1
  %264 = add nsw i64 %262, 1
  %memberidx2.i52.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %265 = load i64, ptr %memberidx2.i52.i, align 4
  %266 = add i64 %265, -2
  %memberidx3.i53.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %267 = load i64, ptr %memberidx3.i53.i, align 4
  store i64 %263, ptr %261, align 4
  %memberidx1.i.i54.i = getelementptr inbounds %FloRange, ptr %261, i64 0, i32 1
  store i64 %264, ptr %memberidx1.i.i54.i, align 4
  %memberidx2.i.i55.i = getelementptr inbounds %FloRange, ptr %261, i64 0, i32 2
  store i64 %266, ptr %memberidx2.i.i55.i, align 4
  %memberidx3.i.i56.i = getelementptr inbounds %FloRange, ptr %261, i64 0, i32 3
  store i64 %267, ptr %memberidx3.i.i56.i, align 4
  store i64 13, ptr %260, align 4
  %memberidx1.i57.i = getelementptr inbounds %Token, ptr %260, i64 0, i32 1
  store ptr %261, ptr %memberidx1.i57.i, align 8
  br label %common.ret

else2.i:                                          ; preds = %else.i223, %if.entry.i36.i
  %268 = load i64, ptr %memberidx.i.i202, align 4
  %269 = add nsw i64 %268, 1
  %270 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i67.i = getelementptr inbounds %string, ptr %270, i64 0, i32 2
  %271 = load i64, ptr %memberidx2.i67.i, align 4
  %272 = icmp slt i64 %269, %271
  br i1 %272, label %if.entry.i70.i, label %ifend6.i

if.entry.i70.i:                                   ; preds = %else2.i
  %273 = load ptr, ptr %270, align 8
  %memberidx4.i69.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %273, i64 0, i32 2
  %274 = load ptr, ptr %memberidx4.i69.i, align 8
  %275 = call i8 %274(ptr nonnull %270, i64 %269)
  %phi.cmp910 = icmp eq i8 %275, 62
  br i1 %phi.cmp910, label %if.entry4.i, label %ifend6.i

if.entry4.i:                                      ; preds = %if.entry.i70.i
  %276 = load i64, ptr %memberidx.i.i202, align 4
  %277 = load ptr, ptr %memberidx1.i.i203, align 8
  %memberidx2.i.i74.i = getelementptr inbounds %string, ptr %277, i64 0, i32 2
  %278 = load i64, ptr %memberidx2.i.i74.i, align 4
  %.not911 = icmp slt i64 %276, %278
  br i1 %.not911, label %ifend.i78.i, label %Lexer_advance.exit84.i

ifend.i78.i:                                      ; preds = %if.entry4.i
  %279 = load ptr, ptr %277, align 8
  %memberidx2.i76.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %279, i64 0, i32 2
  %280 = load ptr, ptr %memberidx2.i76.i, align 8
  %281 = add nsw i64 %276, 1
  store i64 %281, ptr %memberidx.i.i202, align 4
  %282 = call i8 %280(ptr nonnull %277, i64 %281)
  store i8 %282, ptr %0, align 1
  %283 = icmp eq i8 %282, 10
  %memberidx9.i79.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %283, label %if.entry6.i81.i, label %Lexer_advance.exit84.i.sink.split

if.entry6.i81.i:                                  ; preds = %ifend.i78.i
  store i64 0, ptr %memberidx9.i79.i, align 4
  %memberidx10.i80.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i.sink.split

Lexer_advance.exit84.i.sink.split:                ; preds = %ifend.i78.i, %if.entry6.i81.i
  %memberidx9.i79.i.sink966 = phi ptr [ %memberidx10.i80.i, %if.entry6.i81.i ], [ %memberidx9.i79.i, %ifend.i78.i ]
  %284 = load i64, ptr %memberidx9.i79.i.sink966, align 4
  %285 = add nsw i64 %284, 1
  store i64 %285, ptr %memberidx9.i79.i.sink966, align 4
  br label %Lexer_advance.exit84.i

Lexer_advance.exit84.i:                           ; preds = %Lexer_advance.exit84.i.sink.split, %if.entry4.i
  %286 = call ptr @malloc(i32 16)
  %287 = call ptr @malloc(i32 32)
  %288 = load i64, ptr %memberidx.i.i202, align 4
  %289 = add i64 %288, -1
  %290 = add nsw i64 %288, 1
  %memberidx2.i60.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %291 = load i64, ptr %memberidx2.i60.i, align 4
  %292 = add i64 %291, -2
  %memberidx3.i61.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %293 = load i64, ptr %memberidx3.i61.i, align 4
  store i64 %289, ptr %287, align 4
  %memberidx1.i.i62.i = getelementptr inbounds %FloRange, ptr %287, i64 0, i32 1
  store i64 %290, ptr %memberidx1.i.i62.i, align 4
  %memberidx2.i.i63.i = getelementptr inbounds %FloRange, ptr %287, i64 0, i32 2
  store i64 %292, ptr %memberidx2.i.i63.i, align 4
  %memberidx3.i.i64.i = getelementptr inbounds %FloRange, ptr %287, i64 0, i32 3
  store i64 %293, ptr %memberidx3.i.i64.i, align 4
  store i64 45, ptr %286, align 4
  %memberidx1.i58.i = getelementptr inbounds %Token, ptr %286, i64 0, i32 1
  store ptr %287, ptr %memberidx1.i58.i, align 8
  br label %common.ret

ifend6.i:                                         ; preds = %else2.i, %if.entry.i70.i
  %294 = call ptr @malloc(i32 16)
  %295 = call ptr @malloc(i32 32)
  %296 = load i64, ptr %memberidx.i.i202, align 4
  %297 = add i64 %296, -1
  %298 = add nsw i64 %296, 1
  %memberidx2.i26.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %299 = load i64, ptr %memberidx2.i26.i, align 4
  %300 = add i64 %299, -2
  %memberidx3.i27.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %301 = load i64, ptr %memberidx3.i27.i, align 4
  store i64 %297, ptr %295, align 4
  %memberidx1.i.i28.i = getelementptr inbounds %FloRange, ptr %295, i64 0, i32 1
  store i64 %298, ptr %memberidx1.i.i28.i, align 4
  %memberidx2.i.i29.i = getelementptr inbounds %FloRange, ptr %295, i64 0, i32 2
  store i64 %300, ptr %memberidx2.i.i29.i, align 4
  %memberidx3.i.i30.i = getelementptr inbounds %FloRange, ptr %295, i64 0, i32 3
  store i64 %301, ptr %memberidx3.i.i30.i, align 4
  store i64 5, ptr %294, align 4
  %memberidx1.i24.i = getelementptr inbounds %Token, ptr %294, i64 0, i32 1
  store ptr %295, ptr %memberidx1.i24.i, align 8
  br label %common.ret

if.entry27:                                       ; preds = %ifend11
  %memberidx.i.i226 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %302 = load i64, ptr %memberidx.i.i226, align 4
  %303 = add nsw i64 %302, 1
  %memberidx1.i.i227 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %304 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i.i228 = getelementptr inbounds %string, ptr %304, i64 0, i32 2
  %305 = load i64, ptr %memberidx2.i.i228, align 4
  %306 = icmp slt i64 %303, %305
  br i1 %306, label %if.entry.i.i230, label %else.i258

if.entry.i.i230:                                  ; preds = %if.entry27
  %307 = load ptr, ptr %304, align 8
  %memberidx4.i.i229 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %307, i64 0, i32 2
  %308 = load ptr, ptr %memberidx4.i.i229, align 8
  %309 = call i8 %308(ptr nonnull %304, i64 %303)
  %phi.cmp902 = icmp eq i8 %309, 61
  br i1 %phi.cmp902, label %if.entry.i237, label %else.i258

if.entry.i237:                                    ; preds = %if.entry.i.i230
  %310 = load i64, ptr %memberidx.i.i226, align 4
  %311 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i.i.i236 = getelementptr inbounds %string, ptr %311, i64 0, i32 2
  %312 = load i64, ptr %memberidx2.i.i.i236, align 4
  %.not907 = icmp slt i64 %310, %312
  br i1 %.not907, label %ifend.i.i241, label %Lexer_advance.exit.i254

ifend.i.i241:                                     ; preds = %if.entry.i237
  %313 = load ptr, ptr %311, align 8
  %memberidx2.i17.i239 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %313, i64 0, i32 2
  %314 = load ptr, ptr %memberidx2.i17.i239, align 8
  %315 = add nsw i64 %310, 1
  store i64 %315, ptr %memberidx.i.i226, align 4
  %316 = call i8 %314(ptr nonnull %311, i64 %315)
  store i8 %316, ptr %0, align 1
  %317 = icmp eq i8 %316, 10
  %memberidx9.i.i242 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %317, label %if.entry6.i.i244, label %Lexer_advance.exit.i254.sink.split

if.entry6.i.i244:                                 ; preds = %ifend.i.i241
  store i64 0, ptr %memberidx9.i.i242, align 4
  %memberidx10.i.i243 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i254.sink.split

Lexer_advance.exit.i254.sink.split:               ; preds = %ifend.i.i241, %if.entry6.i.i244
  %memberidx9.i.i242.sink968 = phi ptr [ %memberidx10.i.i243, %if.entry6.i.i244 ], [ %memberidx9.i.i242, %ifend.i.i241 ]
  %318 = load i64, ptr %memberidx9.i.i242.sink968, align 4
  %319 = add nsw i64 %318, 1
  store i64 %319, ptr %memberidx9.i.i242.sink968, align 4
  br label %Lexer_advance.exit.i254

Lexer_advance.exit.i254:                          ; preds = %Lexer_advance.exit.i254.sink.split, %if.entry.i237
  %320 = call ptr @malloc(i32 16)
  %321 = call ptr @malloc(i32 32)
  %322 = load i64, ptr %memberidx.i.i226, align 4
  %323 = add i64 %322, -1
  %324 = add nsw i64 %322, 1
  %memberidx2.i19.i248 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %325 = load i64, ptr %memberidx2.i19.i248, align 4
  %326 = add i64 %325, -2
  %memberidx3.i20.i249 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %327 = load i64, ptr %memberidx3.i20.i249, align 4
  store i64 %323, ptr %321, align 4
  %memberidx1.i.i21.i250 = getelementptr inbounds %FloRange, ptr %321, i64 0, i32 1
  store i64 %324, ptr %memberidx1.i.i21.i250, align 4
  %memberidx2.i.i22.i251 = getelementptr inbounds %FloRange, ptr %321, i64 0, i32 2
  store i64 %326, ptr %memberidx2.i.i22.i251, align 4
  %memberidx3.i.i.i252 = getelementptr inbounds %FloRange, ptr %321, i64 0, i32 3
  store i64 %327, ptr %memberidx3.i.i.i252, align 4
  store i64 12, ptr %320, align 4
  %memberidx1.i23.i253 = getelementptr inbounds %Token, ptr %320, i64 0, i32 1
  store ptr %321, ptr %memberidx1.i23.i253, align 8
  br label %common.ret

else.i258:                                        ; preds = %if.entry27, %if.entry.i.i230
  %328 = load i64, ptr %memberidx.i.i226, align 4
  %329 = add nsw i64 %328, 1
  %330 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i33.i257 = getelementptr inbounds %string, ptr %330, i64 0, i32 2
  %331 = load i64, ptr %memberidx2.i33.i257, align 4
  %332 = icmp slt i64 %329, %331
  br i1 %332, label %if.entry.i36.i260, label %ifend3.i278

if.entry.i36.i260:                                ; preds = %else.i258
  %333 = load ptr, ptr %330, align 8
  %memberidx4.i35.i259 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %333, i64 0, i32 2
  %334 = load ptr, ptr %memberidx4.i35.i259, align 8
  %335 = call i8 %334(ptr nonnull %330, i64 %329)
  %phi.cmp903 = icmp eq i8 %335, 42
  br i1 %phi.cmp903, label %if.entry1.i266, label %ifend3.i278

if.entry1.i266:                                   ; preds = %if.entry.i36.i260
  %336 = load i64, ptr %memberidx.i.i226, align 4
  %337 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i.i40.i265 = getelementptr inbounds %string, ptr %337, i64 0, i32 2
  %338 = load i64, ptr %memberidx2.i.i40.i265, align 4
  %.not904 = icmp slt i64 %336, %338
  br i1 %.not904, label %ifend.i44.i270, label %Lexer_advance.exit50.i277

ifend.i44.i270:                                   ; preds = %if.entry1.i266
  %339 = load ptr, ptr %337, align 8
  %memberidx2.i42.i268 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %339, i64 0, i32 2
  %340 = load ptr, ptr %memberidx2.i42.i268, align 8
  %341 = add nsw i64 %336, 1
  store i64 %341, ptr %memberidx.i.i226, align 4
  %342 = call i8 %340(ptr nonnull %337, i64 %341)
  store i8 %342, ptr %0, align 1
  %343 = icmp eq i8 %342, 10
  %memberidx9.i45.i271 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %343, label %if.entry6.i47.i273, label %Lexer_advance.exit50.i277.sink.split

if.entry6.i47.i273:                               ; preds = %ifend.i44.i270
  store i64 0, ptr %memberidx9.i45.i271, align 4
  %memberidx10.i46.i272 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i277.sink.split

Lexer_advance.exit50.i277.sink.split:             ; preds = %ifend.i44.i270, %if.entry6.i47.i273
  %memberidx9.i45.i271.sink970 = phi ptr [ %memberidx10.i46.i272, %if.entry6.i47.i273 ], [ %memberidx9.i45.i271, %ifend.i44.i270 ]
  %344 = load i64, ptr %memberidx9.i45.i271.sink970, align 4
  %345 = add nsw i64 %344, 1
  store i64 %345, ptr %memberidx9.i45.i271.sink970, align 4
  br label %Lexer_advance.exit50.i277

Lexer_advance.exit50.i277:                        ; preds = %Lexer_advance.exit50.i277.sink.split, %if.entry1.i266
  %346 = load i64, ptr %memberidx.i.i226, align 4
  %347 = add nsw i64 %346, 1
  %348 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i53.i = getelementptr inbounds %string, ptr %348, i64 0, i32 2
  %349 = load i64, ptr %memberidx2.i53.i, align 4
  %350 = icmp slt i64 %347, %349
  br i1 %350, label %if.entry.i56.i, label %ifend6.i301

if.entry.i56.i:                                   ; preds = %Lexer_advance.exit50.i277
  %351 = load ptr, ptr %348, align 8
  %memberidx4.i55.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %351, i64 0, i32 2
  %352 = load ptr, ptr %memberidx4.i55.i, align 8
  %353 = call i8 %352(ptr nonnull %348, i64 %347)
  %phi.cmp905 = icmp eq i8 %353, 61
  br i1 %phi.cmp905, label %if.entry4.i282, label %ifend6.i301

ifend3.i278:                                      ; preds = %else.i258, %if.entry.i36.i260
  %354 = call ptr @malloc(i32 16)
  %355 = call ptr @malloc(i32 32)
  %356 = load i64, ptr %memberidx.i.i226, align 4
  %357 = add nsw i64 %356, 1
  %memberidx2.i59.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %358 = load i64, ptr %memberidx2.i59.i, align 4
  %359 = add i64 %358, -1
  %memberidx3.i60.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %360 = load i64, ptr %memberidx3.i60.i, align 4
  store i64 %356, ptr %355, align 4
  %memberidx1.i.i61.i = getelementptr inbounds %FloRange, ptr %355, i64 0, i32 1
  store i64 %357, ptr %memberidx1.i.i61.i, align 4
  %memberidx2.i.i62.i = getelementptr inbounds %FloRange, ptr %355, i64 0, i32 2
  store i64 %359, ptr %memberidx2.i.i62.i, align 4
  %memberidx3.i.i63.i = getelementptr inbounds %FloRange, ptr %355, i64 0, i32 3
  store i64 %360, ptr %memberidx3.i.i63.i, align 4
  store i64 4, ptr %354, align 4
  %memberidx1.i64.i = getelementptr inbounds %Token, ptr %354, i64 0, i32 1
  store ptr %355, ptr %memberidx1.i64.i, align 8
  br label %common.ret

if.entry4.i282:                                   ; preds = %if.entry.i56.i
  %361 = load i64, ptr %memberidx.i.i226, align 4
  %362 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx2.i.i74.i281 = getelementptr inbounds %string, ptr %362, i64 0, i32 2
  %363 = load i64, ptr %memberidx2.i.i74.i281, align 4
  %.not906 = icmp slt i64 %361, %363
  br i1 %.not906, label %ifend.i78.i286, label %Lexer_advance.exit84.i293

ifend.i78.i286:                                   ; preds = %if.entry4.i282
  %364 = load ptr, ptr %362, align 8
  %memberidx2.i76.i284 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %364, i64 0, i32 2
  %365 = load ptr, ptr %memberidx2.i76.i284, align 8
  %366 = add nsw i64 %361, 1
  store i64 %366, ptr %memberidx.i.i226, align 4
  %367 = call i8 %365(ptr nonnull %362, i64 %366)
  store i8 %367, ptr %0, align 1
  %368 = icmp eq i8 %367, 10
  %memberidx9.i79.i287 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %368, label %if.entry6.i81.i289, label %Lexer_advance.exit84.i293.sink.split

if.entry6.i81.i289:                               ; preds = %ifend.i78.i286
  store i64 0, ptr %memberidx9.i79.i287, align 4
  %memberidx10.i80.i288 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i293.sink.split

Lexer_advance.exit84.i293.sink.split:             ; preds = %ifend.i78.i286, %if.entry6.i81.i289
  %memberidx9.i79.i287.sink972 = phi ptr [ %memberidx10.i80.i288, %if.entry6.i81.i289 ], [ %memberidx9.i79.i287, %ifend.i78.i286 ]
  %369 = load i64, ptr %memberidx9.i79.i287.sink972, align 4
  %370 = add nsw i64 %369, 1
  store i64 %370, ptr %memberidx9.i79.i287.sink972, align 4
  br label %Lexer_advance.exit84.i293

Lexer_advance.exit84.i293:                        ; preds = %Lexer_advance.exit84.i293.sink.split, %if.entry4.i282
  %371 = call ptr @malloc(i32 16)
  %372 = call ptr @malloc(i32 32)
  %373 = load i64, ptr %memberidx.i.i226, align 4
  %374 = add i64 %373, -2
  %375 = add nsw i64 %373, 1
  %memberidx2.i67.i292 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %376 = load i64, ptr %memberidx2.i67.i292, align 4
  %377 = add i64 %376, -3
  %memberidx3.i68.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %378 = load i64, ptr %memberidx3.i68.i, align 4
  store i64 %374, ptr %372, align 4
  %memberidx1.i.i69.i = getelementptr inbounds %FloRange, ptr %372, i64 0, i32 1
  store i64 %375, ptr %memberidx1.i.i69.i, align 4
  %memberidx2.i.i70.i = getelementptr inbounds %FloRange, ptr %372, i64 0, i32 2
  store i64 %377, ptr %memberidx2.i.i70.i, align 4
  %memberidx3.i.i71.i = getelementptr inbounds %FloRange, ptr %372, i64 0, i32 3
  store i64 %378, ptr %memberidx3.i.i71.i, align 4
  store i64 17, ptr %371, align 4
  %memberidx1.i65.i = getelementptr inbounds %Token, ptr %371, i64 0, i32 1
  store ptr %372, ptr %memberidx1.i65.i, align 8
  br label %common.ret

ifend6.i301:                                      ; preds = %Lexer_advance.exit50.i277, %if.entry.i56.i
  %379 = call ptr @malloc(i32 16)
  %380 = call ptr @malloc(i32 32)
  %381 = load i64, ptr %memberidx.i.i226, align 4
  %382 = add i64 %381, -1
  %383 = add nsw i64 %381, 1
  %memberidx2.i26.i295 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %384 = load i64, ptr %memberidx2.i26.i295, align 4
  %385 = add i64 %384, -2
  %memberidx3.i27.i296 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %386 = load i64, ptr %memberidx3.i27.i296, align 4
  store i64 %382, ptr %380, align 4
  %memberidx1.i.i28.i297 = getelementptr inbounds %FloRange, ptr %380, i64 0, i32 1
  store i64 %383, ptr %memberidx1.i.i28.i297, align 4
  %memberidx2.i.i29.i298 = getelementptr inbounds %FloRange, ptr %380, i64 0, i32 2
  store i64 %385, ptr %memberidx2.i.i29.i298, align 4
  %memberidx3.i.i30.i299 = getelementptr inbounds %FloRange, ptr %380, i64 0, i32 3
  store i64 %386, ptr %memberidx3.i.i30.i299, align 4
  store i64 11, ptr %379, align 4
  %memberidx1.i24.i300 = getelementptr inbounds %Token, ptr %379, i64 0, i32 1
  store ptr %380, ptr %memberidx1.i24.i300, align 8
  br label %common.ret

if.entry30:                                       ; preds = %ifend11
  %memberidx.i.i302 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %387 = load i64, ptr %memberidx.i.i302, align 4
  %388 = add nsw i64 %387, 1
  %memberidx1.i.i303 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %389 = load ptr, ptr %memberidx1.i.i303, align 8
  %memberidx2.i.i304 = getelementptr inbounds %string, ptr %389, i64 0, i32 2
  %390 = load i64, ptr %memberidx2.i.i304, align 4
  %391 = icmp slt i64 %388, %390
  br i1 %391, label %if.entry.i.i306, label %ifend.i323

if.entry.i.i306:                                  ; preds = %if.entry30
  %392 = load ptr, ptr %389, align 8
  %memberidx4.i.i305 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %392, i64 0, i32 2
  %393 = load ptr, ptr %memberidx4.i.i305, align 8
  %394 = call i8 %393(ptr nonnull %389, i64 %388)
  %phi.cmp900 = icmp eq i8 %394, 61
  br i1 %phi.cmp900, label %if.entry.i313, label %ifend.i323

if.entry.i313:                                    ; preds = %if.entry.i.i306
  %395 = load i64, ptr %memberidx.i.i302, align 4
  %396 = load ptr, ptr %memberidx1.i.i303, align 8
  %memberidx2.i.i.i312 = getelementptr inbounds %string, ptr %396, i64 0, i32 2
  %397 = load i64, ptr %memberidx2.i.i.i312, align 4
  %.not901 = icmp slt i64 %395, %397
  br i1 %.not901, label %ifend.i.i315, label %Lexer_advance.exit.i322

ifend.i.i315:                                     ; preds = %if.entry.i313
  %398 = load ptr, ptr %396, align 8
  %memberidx2.i5.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %398, i64 0, i32 2
  %399 = load ptr, ptr %memberidx2.i5.i, align 8
  %400 = add nsw i64 %395, 1
  store i64 %400, ptr %memberidx.i.i302, align 4
  %401 = call i8 %399(ptr nonnull %396, i64 %400)
  store i8 %401, ptr %0, align 1
  %402 = icmp eq i8 %401, 10
  %memberidx9.i.i316 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %402, label %if.entry6.i.i318, label %Lexer_advance.exit.i322.sink.split

if.entry6.i.i318:                                 ; preds = %ifend.i.i315
  store i64 0, ptr %memberidx9.i.i316, align 4
  %memberidx10.i.i317 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i322.sink.split

Lexer_advance.exit.i322.sink.split:               ; preds = %ifend.i.i315, %if.entry6.i.i318
  %memberidx9.i.i316.sink974 = phi ptr [ %memberidx10.i.i317, %if.entry6.i.i318 ], [ %memberidx9.i.i316, %ifend.i.i315 ]
  %403 = load i64, ptr %memberidx9.i.i316.sink974, align 4
  %404 = add nsw i64 %403, 1
  store i64 %404, ptr %memberidx9.i.i316.sink974, align 4
  br label %Lexer_advance.exit.i322

Lexer_advance.exit.i322:                          ; preds = %Lexer_advance.exit.i322.sink.split, %if.entry.i313
  %405 = call ptr @malloc(i32 16)
  %406 = call ptr @malloc(i32 32)
  %407 = load i64, ptr %memberidx.i.i302, align 4
  %408 = add i64 %407, -1
  %409 = add nsw i64 %407, 1
  %memberidx2.i7.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %410 = load i64, ptr %memberidx2.i7.i, align 4
  %411 = add i64 %410, -2
  %memberidx3.i8.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %412 = load i64, ptr %memberidx3.i8.i, align 4
  store i64 %408, ptr %406, align 4
  %memberidx1.i.i9.i = getelementptr inbounds %FloRange, ptr %406, i64 0, i32 1
  store i64 %409, ptr %memberidx1.i.i9.i, align 4
  %memberidx2.i.i10.i = getelementptr inbounds %FloRange, ptr %406, i64 0, i32 2
  store i64 %411, ptr %memberidx2.i.i10.i, align 4
  %memberidx3.i.i.i321 = getelementptr inbounds %FloRange, ptr %406, i64 0, i32 3
  store i64 %412, ptr %memberidx3.i.i.i321, align 4
  store i64 16, ptr %405, align 4
  %memberidx1.i11.i = getelementptr inbounds %Token, ptr %405, i64 0, i32 1
  store ptr %406, ptr %memberidx1.i11.i, align 8
  br label %common.ret

ifend.i323:                                       ; preds = %if.entry30, %if.entry.i.i306
  %413 = call ptr @malloc(i32 16)
  %414 = call ptr @malloc(i32 32)
  %415 = load i64, ptr %memberidx.i.i302, align 4
  %416 = add nsw i64 %415, 1
  %memberidx2.i14.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %417 = load i64, ptr %memberidx2.i14.i, align 4
  %418 = add i64 %417, -1
  %memberidx3.i15.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %419 = load i64, ptr %memberidx3.i15.i, align 4
  store i64 %415, ptr %414, align 4
  %memberidx1.i.i16.i = getelementptr inbounds %FloRange, ptr %414, i64 0, i32 1
  store i64 %416, ptr %memberidx1.i.i16.i, align 4
  %memberidx2.i.i17.i = getelementptr inbounds %FloRange, ptr %414, i64 0, i32 2
  store i64 %418, ptr %memberidx2.i.i17.i, align 4
  %memberidx3.i.i18.i = getelementptr inbounds %FloRange, ptr %414, i64 0, i32 3
  store i64 %419, ptr %memberidx3.i.i18.i, align 4
  store i64 10, ptr %413, align 4
  %memberidx1.i12.i = getelementptr inbounds %Token, ptr %413, i64 0, i32 1
  store ptr %414, ptr %memberidx1.i12.i, align 8
  br label %common.ret

if.entry33:                                       ; preds = %ifend11
  %memberidx.i.i324 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %420 = load i64, ptr %memberidx.i.i324, align 4
  %421 = add nsw i64 %420, 1
  %memberidx1.i.i325 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %422 = load ptr, ptr %memberidx1.i.i325, align 8
  %memberidx2.i.i326 = getelementptr inbounds %string, ptr %422, i64 0, i32 2
  %423 = load i64, ptr %memberidx2.i.i326, align 4
  %424 = icmp slt i64 %421, %423
  br i1 %424, label %if.entry.i.i328, label %ifend.i360

if.entry.i.i328:                                  ; preds = %if.entry33
  %425 = load ptr, ptr %422, align 8
  %memberidx4.i.i327 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %425, i64 0, i32 2
  %426 = load ptr, ptr %memberidx4.i.i327, align 8
  %427 = call i8 %426(ptr nonnull %422, i64 %421)
  %phi.cmp898 = icmp eq i8 %427, 61
  br i1 %phi.cmp898, label %if.entry.i335, label %ifend.i360

if.entry.i335:                                    ; preds = %if.entry.i.i328
  %428 = load i64, ptr %memberidx.i.i324, align 4
  %429 = load ptr, ptr %memberidx1.i.i325, align 8
  %memberidx2.i.i.i334 = getelementptr inbounds %string, ptr %429, i64 0, i32 2
  %430 = load i64, ptr %memberidx2.i.i.i334, align 4
  %.not899 = icmp slt i64 %428, %430
  br i1 %.not899, label %ifend.i.i339, label %Lexer_advance.exit.i352

ifend.i.i339:                                     ; preds = %if.entry.i335
  %431 = load ptr, ptr %429, align 8
  %memberidx2.i5.i337 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %431, i64 0, i32 2
  %432 = load ptr, ptr %memberidx2.i5.i337, align 8
  %433 = add nsw i64 %428, 1
  store i64 %433, ptr %memberidx.i.i324, align 4
  %434 = call i8 %432(ptr nonnull %429, i64 %433)
  store i8 %434, ptr %0, align 1
  %435 = icmp eq i8 %434, 10
  %memberidx9.i.i340 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %435, label %if.entry6.i.i342, label %Lexer_advance.exit.i352.sink.split

if.entry6.i.i342:                                 ; preds = %ifend.i.i339
  store i64 0, ptr %memberidx9.i.i340, align 4
  %memberidx10.i.i341 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i352.sink.split

Lexer_advance.exit.i352.sink.split:               ; preds = %ifend.i.i339, %if.entry6.i.i342
  %memberidx9.i.i340.sink976 = phi ptr [ %memberidx10.i.i341, %if.entry6.i.i342 ], [ %memberidx9.i.i340, %ifend.i.i339 ]
  %436 = load i64, ptr %memberidx9.i.i340.sink976, align 4
  %437 = add nsw i64 %436, 1
  store i64 %437, ptr %memberidx9.i.i340.sink976, align 4
  br label %Lexer_advance.exit.i352

Lexer_advance.exit.i352:                          ; preds = %Lexer_advance.exit.i352.sink.split, %if.entry.i335
  %438 = call ptr @malloc(i32 16)
  %439 = call ptr @malloc(i32 32)
  %440 = load i64, ptr %memberidx.i.i324, align 4
  %441 = add i64 %440, -1
  %442 = add nsw i64 %440, 1
  %memberidx2.i7.i346 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %443 = load i64, ptr %memberidx2.i7.i346, align 4
  %444 = add i64 %443, -2
  %memberidx3.i8.i347 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %445 = load i64, ptr %memberidx3.i8.i347, align 4
  store i64 %441, ptr %439, align 4
  %memberidx1.i.i9.i348 = getelementptr inbounds %FloRange, ptr %439, i64 0, i32 1
  store i64 %442, ptr %memberidx1.i.i9.i348, align 4
  %memberidx2.i.i10.i349 = getelementptr inbounds %FloRange, ptr %439, i64 0, i32 2
  store i64 %444, ptr %memberidx2.i.i10.i349, align 4
  %memberidx3.i.i.i350 = getelementptr inbounds %FloRange, ptr %439, i64 0, i32 3
  store i64 %445, ptr %memberidx3.i.i.i350, align 4
  store i64 20, ptr %438, align 4
  %memberidx1.i11.i351 = getelementptr inbounds %Token, ptr %438, i64 0, i32 1
  store ptr %439, ptr %memberidx1.i11.i351, align 8
  br label %common.ret

ifend.i360:                                       ; preds = %if.entry33, %if.entry.i.i328
  %446 = call ptr @malloc(i32 16)
  %447 = call ptr @malloc(i32 32)
  %448 = load i64, ptr %memberidx.i.i324, align 4
  %449 = add nsw i64 %448, 1
  %memberidx2.i14.i354 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %450 = load i64, ptr %memberidx2.i14.i354, align 4
  %451 = add i64 %450, -1
  %memberidx3.i15.i355 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %452 = load i64, ptr %memberidx3.i15.i355, align 4
  store i64 %448, ptr %447, align 4
  %memberidx1.i.i16.i356 = getelementptr inbounds %FloRange, ptr %447, i64 0, i32 1
  store i64 %449, ptr %memberidx1.i.i16.i356, align 4
  %memberidx2.i.i17.i357 = getelementptr inbounds %FloRange, ptr %447, i64 0, i32 2
  store i64 %451, ptr %memberidx2.i.i17.i357, align 4
  %memberidx3.i.i18.i358 = getelementptr inbounds %FloRange, ptr %447, i64 0, i32 3
  store i64 %452, ptr %memberidx3.i.i18.i358, align 4
  store i64 51, ptr %446, align 4
  %memberidx1.i12.i359 = getelementptr inbounds %Token, ptr %446, i64 0, i32 1
  store ptr %447, ptr %memberidx1.i12.i359, align 8
  br label %common.ret

if.entry36:                                       ; preds = %ifend11
  %memberidx.i.i361 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %453 = load i64, ptr %memberidx.i.i361, align 4
  %454 = add nsw i64 %453, 1
  %memberidx1.i.i362 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %455 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i363 = getelementptr inbounds %string, ptr %455, i64 0, i32 2
  %456 = load i64, ptr %memberidx2.i.i363, align 4
  %457 = icmp slt i64 %454, %456
  br i1 %457, label %if.entry.i.i365, label %Lexer_peek.exit.i367

if.entry.i.i365:                                  ; preds = %if.entry36
  %458 = load ptr, ptr %455, align 8
  %memberidx4.i.i364 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %458, i64 0, i32 2
  %459 = load ptr, ptr %memberidx4.i.i364, align 8
  %460 = call i8 %459(ptr nonnull %455, i64 %454)
  br label %Lexer_peek.exit.i367

Lexer_peek.exit.i367:                             ; preds = %if.entry.i.i365, %if.entry36
  %common.ret.op.i.i366 = phi i8 [ %460, %if.entry.i.i365 ], [ 0, %if.entry36 ]
  %461 = icmp eq i8 %common.ret.op.i.i366, 42
  %462 = load i64, ptr %memberidx.i.i361, align 4
  br i1 %461, label %if.entry.i371, label %else.i382

if.entry.i371:                                    ; preds = %Lexer_peek.exit.i367
  %463 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i.i370 = getelementptr inbounds %string, ptr %463, i64 0, i32 2
  %464 = load i64, ptr %memberidx2.i.i.i370, align 4
  %.not892 = icmp slt i64 %462, %464
  br i1 %.not892, label %ifend.i.i375, label %Lexer_advance.exit.i381

ifend.i.i375:                                     ; preds = %if.entry.i371
  %465 = load ptr, ptr %463, align 8
  %memberidx2.i27.i373 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %465, i64 0, i32 2
  %466 = load ptr, ptr %memberidx2.i27.i373, align 8
  %467 = add nsw i64 %462, 1
  store i64 %467, ptr %memberidx.i.i361, align 4
  %468 = call i8 %466(ptr nonnull %463, i64 %467)
  store i8 %468, ptr %0, align 1
  %469 = icmp eq i8 %468, 10
  %memberidx9.i.i376 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %469, label %if.entry6.i.i378, label %Lexer_advance.exit.i381.sink.split

if.entry6.i.i378:                                 ; preds = %ifend.i.i375
  store i64 0, ptr %memberidx9.i.i376, align 4
  %memberidx10.i.i377 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i381.sink.split

Lexer_advance.exit.i381.sink.split:               ; preds = %ifend.i.i375, %if.entry6.i.i378
  %memberidx9.i.i376.sink978 = phi ptr [ %memberidx10.i.i377, %if.entry6.i.i378 ], [ %memberidx9.i.i376, %ifend.i.i375 ]
  %470 = load i64, ptr %memberidx9.i.i376.sink978, align 4
  %471 = add nsw i64 %470, 1
  store i64 %471, ptr %memberidx9.i.i376.sink978, align 4
  br label %Lexer_advance.exit.i381

Lexer_advance.exit.i381:                          ; preds = %Lexer_advance.exit.i381.sink.split, %if.entry.i371
  %472 = load i64, ptr %memberidx.i.i361, align 4
  %473 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i30.i = getelementptr inbounds %string, ptr %473, i64 0, i32 2
  %474 = load i64, ptr %memberidx2.i30.i, align 4
  %.not893 = icmp slt i64 %472, %474
  br i1 %.not893, label %while.entry.i.preheader, label %while.end.i

while.entry.i.preheader:                          ; preds = %Lexer_advance.exit.i381
  %memberidx12.i98.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i95.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i96.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.i

else.i382:                                        ; preds = %Lexer_peek.exit.i367
  %475 = add nsw i64 %462, 1
  %476 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i43.i = getelementptr inbounds %string, ptr %476, i64 0, i32 2
  %477 = load i64, ptr %memberidx2.i43.i, align 4
  %478 = icmp slt i64 %475, %477
  br i1 %478, label %if.entry.i46.i, label %ifend41

if.entry.i46.i:                                   ; preds = %else.i382
  %479 = load ptr, ptr %476, align 8
  %memberidx4.i45.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %479, i64 0, i32 2
  %480 = load ptr, ptr %memberidx4.i45.i, align 8
  %481 = call i8 %480(ptr nonnull %476, i64 %475)
  %phi.cmp885 = icmp eq i8 %481, 47
  br i1 %phi.cmp885, label %if.entry4.i386, label %ifend41

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Lexer_advance.exit100.i
  %482 = load i64, ptr %memberidx.i.i361, align 4
  %483 = add nsw i64 %482, 1
  %484 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i50.i = getelementptr inbounds %string, ptr %484, i64 0, i32 2
  %485 = load i64, ptr %memberidx2.i50.i, align 4
  %486 = icmp slt i64 %483, %485
  br i1 %486, label %if.entry.i53.i, label %Lexer_peek.exit54.i

if.entry.i53.i:                                   ; preds = %while.entry.i
  %487 = load ptr, ptr %484, align 8
  %memberidx4.i52.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %487, i64 0, i32 2
  %488 = load ptr, ptr %memberidx4.i52.i, align 8
  %489 = call i8 %488(ptr nonnull %484, i64 %483)
  br label %Lexer_peek.exit54.i

Lexer_peek.exit54.i:                              ; preds = %if.entry.i53.i, %while.entry.i
  %common.ret.op.i51.i = phi i8 [ %489, %if.entry.i53.i ], [ 0, %while.entry.i ]
  %490 = icmp eq i8 %common.ret.op.i51.i, 42
  %491 = load i64, ptr %memberidx.i.i361, align 4
  %492 = add nsw i64 %491, 2
  %493 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i57.i = getelementptr inbounds %string, ptr %493, i64 0, i32 2
  %494 = load i64, ptr %memberidx2.i57.i, align 4
  %495 = icmp slt i64 %492, %494
  br i1 %495, label %if.entry.i60.i, label %Lexer_peek.exit61.i

if.entry.i60.i:                                   ; preds = %Lexer_peek.exit54.i
  %496 = load ptr, ptr %493, align 8
  %memberidx4.i59.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %496, i64 0, i32 2
  %497 = load ptr, ptr %memberidx4.i59.i, align 8
  %498 = call i8 %497(ptr nonnull %493, i64 %492)
  br label %Lexer_peek.exit61.i

Lexer_peek.exit61.i:                              ; preds = %if.entry.i60.i, %Lexer_peek.exit54.i
  %common.ret.op.i58.i = phi i8 [ %498, %if.entry.i60.i ], [ 0, %Lexer_peek.exit54.i ]
  %499 = icmp eq i8 %common.ret.op.i58.i, 47
  %500 = and i1 %490, %499
  br i1 %500, label %while.end.i, label %ifend3.i385

while.end.i:                                      ; preds = %Lexer_advance.exit100.i, %Lexer_peek.exit61.i, %Lexer_advance.exit.i381
  %501 = load i64, ptr %memberidx.i.i361, align 4
  %502 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i64.i = getelementptr inbounds %string, ptr %502, i64 0, i32 2
  %503 = load i64, ptr %memberidx2.i.i64.i, align 4
  %.not896 = icmp slt i64 %501, %503
  br i1 %.not896, label %ifend.i68.i, label %Lexer_advance.exit74.i

ifend.i68.i:                                      ; preds = %while.end.i
  %504 = load ptr, ptr %502, align 8
  %memberidx2.i66.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %504, i64 0, i32 2
  %505 = load ptr, ptr %memberidx2.i66.i, align 8
  %506 = add nsw i64 %501, 1
  store i64 %506, ptr %memberidx.i.i361, align 4
  %507 = call i8 %505(ptr nonnull %502, i64 %506)
  store i8 %507, ptr %0, align 1
  %508 = icmp eq i8 %507, 10
  %memberidx9.i69.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %508, label %if.entry6.i71.i, label %Lexer_advance.exit74.i.sink.split

if.entry6.i71.i:                                  ; preds = %ifend.i68.i
  store i64 0, ptr %memberidx9.i69.i, align 4
  %memberidx10.i70.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit74.i.sink.split

Lexer_advance.exit74.i.sink.split:                ; preds = %ifend.i68.i, %if.entry6.i71.i
  %memberidx9.i69.i.sink980 = phi ptr [ %memberidx10.i70.i, %if.entry6.i71.i ], [ %memberidx9.i69.i, %ifend.i68.i ]
  %509 = load i64, ptr %memberidx9.i69.i.sink980, align 4
  %510 = add nsw i64 %509, 1
  store i64 %510, ptr %memberidx9.i69.i.sink980, align 4
  br label %Lexer_advance.exit74.i

Lexer_advance.exit74.i:                           ; preds = %Lexer_advance.exit74.i.sink.split, %while.end.i
  %511 = load i64, ptr %memberidx.i.i361, align 4
  %512 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i77.i = getelementptr inbounds %string, ptr %512, i64 0, i32 2
  %513 = load i64, ptr %memberidx2.i.i77.i, align 4
  %.not897 = icmp slt i64 %511, %513
  br i1 %.not897, label %ifend.i81.i, label %if.entry39

ifend.i81.i:                                      ; preds = %Lexer_advance.exit74.i
  %514 = load ptr, ptr %512, align 8
  %memberidx2.i79.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %514, i64 0, i32 2
  %515 = load ptr, ptr %memberidx2.i79.i, align 8
  %516 = add nsw i64 %511, 1
  store i64 %516, ptr %memberidx.i.i361, align 4
  %517 = call i8 %515(ptr nonnull %512, i64 %516)
  store i8 %517, ptr %0, align 1
  %518 = icmp eq i8 %517, 10
  %memberidx9.i82.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %518, label %if.entry6.i84.i, label %if.entry39.sink.split

if.entry6.i84.i:                                  ; preds = %ifend.i81.i
  store i64 0, ptr %memberidx9.i82.i, align 4
  %memberidx10.i83.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %if.entry39.sink.split

ifend3.i385:                                      ; preds = %Lexer_peek.exit61.i
  %519 = load i64, ptr %memberidx.i.i361, align 4
  %520 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i90.i = getelementptr inbounds %string, ptr %520, i64 0, i32 2
  %521 = load i64, ptr %memberidx2.i.i90.i, align 4
  %.not894 = icmp slt i64 %519, %521
  br i1 %.not894, label %ifend.i94.i, label %Lexer_advance.exit100.i

ifend.i94.i:                                      ; preds = %ifend3.i385
  %522 = load ptr, ptr %520, align 8
  %memberidx2.i92.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %522, i64 0, i32 2
  %523 = load ptr, ptr %memberidx2.i92.i, align 8
  %524 = add nsw i64 %519, 1
  store i64 %524, ptr %memberidx.i.i361, align 4
  %525 = call i8 %523(ptr nonnull %520, i64 %524)
  store i8 %525, ptr %0, align 1
  %526 = icmp eq i8 %525, 10
  br i1 %526, label %if.entry6.i97.i, label %Lexer_advance.exit100.i.sink.split

if.entry6.i97.i:                                  ; preds = %ifend.i94.i
  store i64 0, ptr %memberidx9.i95.i, align 4
  br label %Lexer_advance.exit100.i.sink.split

Lexer_advance.exit100.i.sink.split:               ; preds = %ifend.i94.i, %if.entry6.i97.i
  %memberidx12.i98.i.sink982 = phi ptr [ %memberidx10.i96.i, %if.entry6.i97.i ], [ %memberidx12.i98.i, %ifend.i94.i ]
  %527 = load i64, ptr %memberidx12.i98.i.sink982, align 4
  %528 = add nsw i64 %527, 1
  store i64 %528, ptr %memberidx12.i98.i.sink982, align 4
  br label %Lexer_advance.exit100.i

Lexer_advance.exit100.i:                          ; preds = %Lexer_advance.exit100.i.sink.split, %ifend3.i385
  %529 = load i64, ptr %memberidx.i.i361, align 4
  %530 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i103.i = getelementptr inbounds %string, ptr %530, i64 0, i32 2
  %531 = load i64, ptr %memberidx2.i103.i, align 4
  %.not895 = icmp slt i64 %529, %531
  br i1 %.not895, label %while.entry.i, label %while.end.i

if.entry4.i386:                                   ; preds = %if.entry.i46.i
  %532 = load i64, ptr %memberidx.i.i361, align 4
  %533 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i119.i = getelementptr inbounds %string, ptr %533, i64 0, i32 2
  %534 = load i64, ptr %memberidx2.i.i119.i, align 4
  %.not889 = icmp slt i64 %532, %534
  br i1 %.not889, label %ifend.i123.i, label %Lexer_advance.exit129.i

ifend.i123.i:                                     ; preds = %if.entry4.i386
  %535 = load ptr, ptr %533, align 8
  %memberidx2.i121.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %535, i64 0, i32 2
  %536 = load ptr, ptr %memberidx2.i121.i, align 8
  %537 = add nsw i64 %532, 1
  store i64 %537, ptr %memberidx.i.i361, align 4
  %538 = call i8 %536(ptr nonnull %533, i64 %537)
  store i8 %538, ptr %0, align 1
  %539 = icmp eq i8 %538, 10
  %memberidx9.i124.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %539, label %if.entry6.i126.i, label %Lexer_advance.exit129.i.sink.split

if.entry6.i126.i:                                 ; preds = %ifend.i123.i
  store i64 0, ptr %memberidx9.i124.i, align 4
  %memberidx10.i125.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit129.i.sink.split

Lexer_advance.exit129.i.sink.split:               ; preds = %ifend.i123.i, %if.entry6.i126.i
  %memberidx9.i124.i.sink984 = phi ptr [ %memberidx10.i125.i, %if.entry6.i126.i ], [ %memberidx9.i124.i, %ifend.i123.i ]
  %540 = load i64, ptr %memberidx9.i124.i.sink984, align 4
  %541 = add nsw i64 %540, 1
  store i64 %541, ptr %memberidx9.i124.i.sink984, align 4
  br label %Lexer_advance.exit129.i

Lexer_advance.exit129.i:                          ; preds = %Lexer_advance.exit129.i.sink.split, %if.entry4.i386
  %542 = load i64, ptr %memberidx.i.i361, align 4
  %543 = add nsw i64 %542, 1
  %544 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i132.i = getelementptr inbounds %string, ptr %544, i64 0, i32 2
  %545 = load i64, ptr %memberidx2.i132.i, align 4
  %546 = icmp slt i64 %543, %545
  br i1 %546, label %if.entry.i135.i, label %Lexer_peek.exit136.i

if.entry.i135.i:                                  ; preds = %Lexer_advance.exit129.i
  %547 = load ptr, ptr %544, align 8
  %memberidx4.i134.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %547, i64 0, i32 2
  %548 = load ptr, ptr %memberidx4.i134.i, align 8
  %549 = call i8 %548(ptr nonnull %544, i64 %543)
  %phi.cmp890 = icmp eq i8 %549, 10
  br label %Lexer_peek.exit136.i

Lexer_peek.exit136.i:                             ; preds = %if.entry.i135.i, %Lexer_advance.exit129.i
  %common.ret.op.i133.i = phi i1 [ %phi.cmp890, %if.entry.i135.i ], [ false, %Lexer_advance.exit129.i ]
  %550 = load i64, ptr %memberidx.i.i361, align 4
  %551 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i139.i = getelementptr inbounds %string, ptr %551, i64 0, i32 2
  %552 = load i64, ptr %memberidx2.i139.i, align 4
  %553 = icmp sge i64 %550, %552
  %554 = or i1 %common.ret.op.i133.i, %553
  br i1 %554, label %if.entry39, label %while.entry7.i.preheader

while.entry7.i.preheader:                         ; preds = %Lexer_peek.exit136.i
  %memberidx12.i114.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx9.i111.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i112.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry7.i

while.entry7.i:                                   ; preds = %while.entry7.i.preheader, %Lexer_peek.exit40.i
  %555 = load i64, ptr %memberidx.i.i361, align 4
  %556 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i106.i = getelementptr inbounds %string, ptr %556, i64 0, i32 2
  %557 = load i64, ptr %memberidx2.i.i106.i, align 4
  %.not891 = icmp slt i64 %555, %557
  br i1 %.not891, label %ifend.i110.i, label %Lexer_advance.exit116.i

ifend.i110.i:                                     ; preds = %while.entry7.i
  %558 = load ptr, ptr %556, align 8
  %memberidx2.i108.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %558, i64 0, i32 2
  %559 = load ptr, ptr %memberidx2.i108.i, align 8
  %560 = add nsw i64 %555, 1
  store i64 %560, ptr %memberidx.i.i361, align 4
  %561 = call i8 %559(ptr nonnull %556, i64 %560)
  store i8 %561, ptr %0, align 1
  %562 = icmp eq i8 %561, 10
  br i1 %562, label %if.entry6.i113.i, label %Lexer_advance.exit116.i.sink.split

if.entry6.i113.i:                                 ; preds = %ifend.i110.i
  store i64 0, ptr %memberidx9.i111.i, align 4
  br label %Lexer_advance.exit116.i.sink.split

Lexer_advance.exit116.i.sink.split:               ; preds = %ifend.i110.i, %if.entry6.i113.i
  %memberidx12.i114.i.sink986 = phi ptr [ %memberidx10.i112.i, %if.entry6.i113.i ], [ %memberidx12.i114.i, %ifend.i110.i ]
  %563 = load i64, ptr %memberidx12.i114.i.sink986, align 4
  %564 = add nsw i64 %563, 1
  store i64 %564, ptr %memberidx12.i114.i.sink986, align 4
  br label %Lexer_advance.exit116.i

Lexer_advance.exit116.i:                          ; preds = %Lexer_advance.exit116.i.sink.split, %while.entry7.i
  %565 = load i64, ptr %memberidx.i.i361, align 4
  %566 = add nsw i64 %565, 1
  %567 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i36.i388 = getelementptr inbounds %string, ptr %567, i64 0, i32 2
  %568 = load i64, ptr %memberidx2.i36.i388, align 4
  %569 = icmp slt i64 %566, %568
  br i1 %569, label %if.entry.i39.i, label %Lexer_peek.exit40.i

if.entry.i39.i:                                   ; preds = %Lexer_advance.exit116.i
  %570 = load ptr, ptr %567, align 8
  %memberidx4.i38.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %570, i64 0, i32 2
  %571 = load ptr, ptr %memberidx4.i38.i, align 8
  %572 = call i8 %571(ptr nonnull %567, i64 %566)
  br label %Lexer_peek.exit40.i

Lexer_peek.exit40.i:                              ; preds = %if.entry.i39.i, %Lexer_advance.exit116.i
  %common.ret.op.i37.i = phi i8 [ %572, %if.entry.i39.i ], [ 0, %Lexer_advance.exit116.i ]
  %573 = icmp eq i8 %common.ret.op.i37.i, 10
  %574 = load i64, ptr %memberidx.i.i361, align 4
  %575 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i33.i391 = getelementptr inbounds %string, ptr %575, i64 0, i32 2
  %576 = load i64, ptr %memberidx2.i33.i391, align 4
  %577 = icmp sge i64 %574, %576
  %578 = or i1 %573, %577
  br i1 %578, label %if.entry39, label %while.entry7.i

if.entry39.sink.split:                            ; preds = %ifend.i81.i, %if.entry6.i84.i
  %memberidx9.i82.i.sink988 = phi ptr [ %memberidx10.i83.i, %if.entry6.i84.i ], [ %memberidx9.i82.i, %ifend.i81.i ]
  %579 = load i64, ptr %memberidx9.i82.i.sink988, align 4
  %580 = add nsw i64 %579, 1
  store i64 %580, ptr %memberidx9.i82.i.sink988, align 4
  br label %if.entry39

if.entry39:                                       ; preds = %Lexer_peek.exit40.i, %if.entry39.sink.split, %Lexer_peek.exit136.i, %Lexer_advance.exit74.i
  %581 = load i64, ptr %memberidx.i.i361, align 4
  %582 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i394 = getelementptr inbounds %string, ptr %582, i64 0, i32 2
  %583 = load i64, ptr %memberidx2.i.i394, align 4
  %.not888 = icmp slt i64 %581, %583
  br i1 %.not888, label %ifend.i398, label %Lexer_advance.exit404

ifend.i398:                                       ; preds = %if.entry39
  %584 = load ptr, ptr %582, align 8
  %memberidx2.i396 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %584, i64 0, i32 2
  %585 = load ptr, ptr %memberidx2.i396, align 8
  %586 = add nsw i64 %581, 1
  store i64 %586, ptr %memberidx.i.i361, align 4
  %587 = call i8 %585(ptr nonnull %582, i64 %586)
  store i8 %587, ptr %0, align 1
  %588 = icmp eq i8 %587, 10
  %memberidx9.i399 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %588, label %if.entry6.i401, label %Lexer_advance.exit404.sink.split

if.entry6.i401:                                   ; preds = %ifend.i398
  store i64 0, ptr %memberidx9.i399, align 4
  %memberidx10.i400 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit404.sink.split

Lexer_advance.exit404.sink.split:                 ; preds = %ifend.i398, %if.entry6.i401
  %memberidx10.i400.sink990 = phi ptr [ %memberidx10.i400, %if.entry6.i401 ], [ %memberidx9.i399, %ifend.i398 ]
  %589 = load i64, ptr %memberidx10.i400.sink990, align 4
  %590 = add nsw i64 %589, 1
  store i64 %590, ptr %memberidx10.i400.sink990, align 4
  br label %Lexer_advance.exit404

Lexer_advance.exit404:                            ; preds = %Lexer_advance.exit404.sink.split, %if.entry39
  %591 = call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  br label %common.ret

ifend41:                                          ; preds = %if.entry.i46.i, %else.i382
  %592 = load i64, ptr %memberidx.i.i361, align 4
  %593 = add nsw i64 %592, 1
  %594 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i410 = getelementptr inbounds %string, ptr %594, i64 0, i32 2
  %595 = load i64, ptr %memberidx2.i.i410, align 4
  %596 = icmp slt i64 %593, %595
  br i1 %596, label %if.entry.i.i412, label %ifend.i444

if.entry.i.i412:                                  ; preds = %ifend41
  %597 = load ptr, ptr %594, align 8
  %memberidx4.i.i411 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %597, i64 0, i32 2
  %598 = load ptr, ptr %memberidx4.i.i411, align 8
  %599 = call i8 %598(ptr nonnull %594, i64 %593)
  %phi.cmp886 = icmp eq i8 %599, 61
  br i1 %phi.cmp886, label %if.entry.i419, label %ifend.i444

if.entry.i419:                                    ; preds = %if.entry.i.i412
  %600 = load i64, ptr %memberidx.i.i361, align 4
  %601 = load ptr, ptr %memberidx1.i.i362, align 8
  %memberidx2.i.i.i418 = getelementptr inbounds %string, ptr %601, i64 0, i32 2
  %602 = load i64, ptr %memberidx2.i.i.i418, align 4
  %.not887 = icmp slt i64 %600, %602
  br i1 %.not887, label %ifend.i.i423, label %Lexer_advance.exit.i436

ifend.i.i423:                                     ; preds = %if.entry.i419
  %603 = load ptr, ptr %601, align 8
  %memberidx2.i5.i421 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %603, i64 0, i32 2
  %604 = load ptr, ptr %memberidx2.i5.i421, align 8
  %605 = add nsw i64 %600, 1
  store i64 %605, ptr %memberidx.i.i361, align 4
  %606 = call i8 %604(ptr nonnull %601, i64 %605)
  store i8 %606, ptr %0, align 1
  %607 = icmp eq i8 %606, 10
  %memberidx9.i.i424 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %607, label %if.entry6.i.i426, label %Lexer_advance.exit.i436.sink.split

if.entry6.i.i426:                                 ; preds = %ifend.i.i423
  store i64 0, ptr %memberidx9.i.i424, align 4
  %memberidx10.i.i425 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i436.sink.split

Lexer_advance.exit.i436.sink.split:               ; preds = %ifend.i.i423, %if.entry6.i.i426
  %memberidx9.i.i424.sink992 = phi ptr [ %memberidx10.i.i425, %if.entry6.i.i426 ], [ %memberidx9.i.i424, %ifend.i.i423 ]
  %608 = load i64, ptr %memberidx9.i.i424.sink992, align 4
  %609 = add nsw i64 %608, 1
  store i64 %609, ptr %memberidx9.i.i424.sink992, align 4
  br label %Lexer_advance.exit.i436

Lexer_advance.exit.i436:                          ; preds = %Lexer_advance.exit.i436.sink.split, %if.entry.i419
  %610 = call ptr @malloc(i32 16)
  %611 = call ptr @malloc(i32 32)
  %612 = load i64, ptr %memberidx.i.i361, align 4
  %613 = add i64 %612, -1
  %614 = add nsw i64 %612, 1
  %memberidx2.i7.i430 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %615 = load i64, ptr %memberidx2.i7.i430, align 4
  %616 = add i64 %615, -2
  %memberidx3.i8.i431 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %617 = load i64, ptr %memberidx3.i8.i431, align 4
  store i64 %613, ptr %611, align 4
  %memberidx1.i.i9.i432 = getelementptr inbounds %FloRange, ptr %611, i64 0, i32 1
  store i64 %614, ptr %memberidx1.i.i9.i432, align 4
  %memberidx2.i.i10.i433 = getelementptr inbounds %FloRange, ptr %611, i64 0, i32 2
  store i64 %616, ptr %memberidx2.i.i10.i433, align 4
  %memberidx3.i.i.i434 = getelementptr inbounds %FloRange, ptr %611, i64 0, i32 3
  store i64 %617, ptr %memberidx3.i.i.i434, align 4
  store i64 15, ptr %610, align 4
  %memberidx1.i11.i435 = getelementptr inbounds %Token, ptr %610, i64 0, i32 1
  store ptr %611, ptr %memberidx1.i11.i435, align 8
  br label %common.ret

ifend.i444:                                       ; preds = %ifend41, %if.entry.i.i412
  %618 = call ptr @malloc(i32 16)
  %619 = call ptr @malloc(i32 32)
  %620 = load i64, ptr %memberidx.i.i361, align 4
  %621 = add nsw i64 %620, 1
  %memberidx2.i14.i438 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %622 = load i64, ptr %memberidx2.i14.i438, align 4
  %623 = add i64 %622, -1
  %memberidx3.i15.i439 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %624 = load i64, ptr %memberidx3.i15.i439, align 4
  store i64 %620, ptr %619, align 4
  %memberidx1.i.i16.i440 = getelementptr inbounds %FloRange, ptr %619, i64 0, i32 1
  store i64 %621, ptr %memberidx1.i.i16.i440, align 4
  %memberidx2.i.i17.i441 = getelementptr inbounds %FloRange, ptr %619, i64 0, i32 2
  store i64 %623, ptr %memberidx2.i.i17.i441, align 4
  %memberidx3.i.i18.i442 = getelementptr inbounds %FloRange, ptr %619, i64 0, i32 3
  store i64 %624, ptr %memberidx3.i.i18.i442, align 4
  store i64 7, ptr %618, align 4
  %memberidx1.i12.i443 = getelementptr inbounds %Token, ptr %618, i64 0, i32 1
  store ptr %619, ptr %memberidx1.i12.i443, align 8
  br label %common.ret

if.entry42:                                       ; preds = %ifend11
  %625 = tail call ptr @malloc(i32 16)
  %626 = call ptr @malloc(i32 32)
  %memberidx.i445 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %627 = load i64, ptr %memberidx.i445, align 4
  %628 = add nsw i64 %627, 1
  %memberidx2.i446 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %629 = load i64, ptr %memberidx2.i446, align 4
  %630 = add i64 %629, -1
  %memberidx3.i447 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %631 = load i64, ptr %memberidx3.i447, align 4
  store i64 %627, ptr %626, align 4
  %memberidx1.i.i448 = getelementptr inbounds %FloRange, ptr %626, i64 0, i32 1
  store i64 %628, ptr %memberidx1.i.i448, align 4
  %memberidx2.i.i449 = getelementptr inbounds %FloRange, ptr %626, i64 0, i32 2
  store i64 %630, ptr %memberidx2.i.i449, align 4
  %memberidx3.i.i450 = getelementptr inbounds %FloRange, ptr %626, i64 0, i32 3
  store i64 %631, ptr %memberidx3.i.i450, align 4
  store i64 25, ptr %625, align 4
  %memberidx1.i451 = getelementptr inbounds %Token, ptr %625, i64 0, i32 1
  store ptr %626, ptr %memberidx1.i451, align 8
  br label %common.ret

if.entry45:                                       ; preds = %ifend11
  %632 = tail call ptr @malloc(i32 16)
  %633 = call ptr @malloc(i32 32)
  %memberidx.i452 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %634 = load i64, ptr %memberidx.i452, align 4
  %635 = add nsw i64 %634, 1
  %memberidx2.i453 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %636 = load i64, ptr %memberidx2.i453, align 4
  %637 = add i64 %636, -1
  %memberidx3.i454 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %638 = load i64, ptr %memberidx3.i454, align 4
  store i64 %634, ptr %633, align 4
  %memberidx1.i.i455 = getelementptr inbounds %FloRange, ptr %633, i64 0, i32 1
  store i64 %635, ptr %memberidx1.i.i455, align 4
  %memberidx2.i.i456 = getelementptr inbounds %FloRange, ptr %633, i64 0, i32 2
  store i64 %637, ptr %memberidx2.i.i456, align 4
  %memberidx3.i.i457 = getelementptr inbounds %FloRange, ptr %633, i64 0, i32 3
  store i64 %638, ptr %memberidx3.i.i457, align 4
  store i64 26, ptr %632, align 4
  %memberidx1.i458 = getelementptr inbounds %Token, ptr %632, i64 0, i32 1
  store ptr %633, ptr %memberidx1.i458, align 8
  br label %common.ret

if.entry48:                                       ; preds = %ifend11
  %639 = tail call ptr @malloc(i32 16)
  %640 = call ptr @malloc(i32 32)
  %memberidx.i459 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %641 = load i64, ptr %memberidx.i459, align 4
  %642 = add nsw i64 %641, 1
  %memberidx2.i460 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %643 = load i64, ptr %memberidx2.i460, align 4
  %644 = add i64 %643, -1
  %memberidx3.i461 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %645 = load i64, ptr %memberidx3.i461, align 4
  store i64 %641, ptr %640, align 4
  %memberidx1.i.i462 = getelementptr inbounds %FloRange, ptr %640, i64 0, i32 1
  store i64 %642, ptr %memberidx1.i.i462, align 4
  %memberidx2.i.i463 = getelementptr inbounds %FloRange, ptr %640, i64 0, i32 2
  store i64 %644, ptr %memberidx2.i.i463, align 4
  %memberidx3.i.i464 = getelementptr inbounds %FloRange, ptr %640, i64 0, i32 3
  store i64 %645, ptr %memberidx3.i.i464, align 4
  store i64 27, ptr %639, align 4
  %memberidx1.i465 = getelementptr inbounds %Token, ptr %639, i64 0, i32 1
  store ptr %640, ptr %memberidx1.i465, align 8
  br label %common.ret

if.entry51:                                       ; preds = %ifend11
  %646 = tail call ptr @malloc(i32 16)
  %647 = call ptr @malloc(i32 32)
  %memberidx.i466 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %648 = load i64, ptr %memberidx.i466, align 4
  %649 = add nsw i64 %648, 1
  %memberidx2.i467 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %650 = load i64, ptr %memberidx2.i467, align 4
  %651 = add i64 %650, -1
  %memberidx3.i468 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %652 = load i64, ptr %memberidx3.i468, align 4
  store i64 %648, ptr %647, align 4
  %memberidx1.i.i469 = getelementptr inbounds %FloRange, ptr %647, i64 0, i32 1
  store i64 %649, ptr %memberidx1.i.i469, align 4
  %memberidx2.i.i470 = getelementptr inbounds %FloRange, ptr %647, i64 0, i32 2
  store i64 %651, ptr %memberidx2.i.i470, align 4
  %memberidx3.i.i471 = getelementptr inbounds %FloRange, ptr %647, i64 0, i32 3
  store i64 %652, ptr %memberidx3.i.i471, align 4
  store i64 28, ptr %646, align 4
  %memberidx1.i472 = getelementptr inbounds %Token, ptr %646, i64 0, i32 1
  store ptr %647, ptr %memberidx1.i472, align 8
  br label %common.ret

if.entry54:                                       ; preds = %ifend11
  %653 = tail call ptr @malloc(i32 16)
  %654 = call ptr @malloc(i32 32)
  %memberidx.i473 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %655 = load i64, ptr %memberidx.i473, align 4
  %656 = add nsw i64 %655, 1
  %memberidx2.i474 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %657 = load i64, ptr %memberidx2.i474, align 4
  %658 = add i64 %657, -1
  %memberidx3.i475 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %659 = load i64, ptr %memberidx3.i475, align 4
  store i64 %655, ptr %654, align 4
  %memberidx1.i.i476 = getelementptr inbounds %FloRange, ptr %654, i64 0, i32 1
  store i64 %656, ptr %memberidx1.i.i476, align 4
  %memberidx2.i.i477 = getelementptr inbounds %FloRange, ptr %654, i64 0, i32 2
  store i64 %658, ptr %memberidx2.i.i477, align 4
  %memberidx3.i.i478 = getelementptr inbounds %FloRange, ptr %654, i64 0, i32 3
  store i64 %659, ptr %memberidx3.i.i478, align 4
  store i64 29, ptr %653, align 4
  %memberidx1.i479 = getelementptr inbounds %Token, ptr %653, i64 0, i32 1
  store ptr %654, ptr %memberidx1.i479, align 8
  br label %common.ret

if.entry57:                                       ; preds = %ifend11
  %660 = tail call ptr @malloc(i32 16)
  %661 = call ptr @malloc(i32 32)
  %memberidx.i480 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %662 = load i64, ptr %memberidx.i480, align 4
  %663 = add nsw i64 %662, 1
  %memberidx2.i481 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %664 = load i64, ptr %memberidx2.i481, align 4
  %665 = add i64 %664, -1
  %memberidx3.i482 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %666 = load i64, ptr %memberidx3.i482, align 4
  store i64 %662, ptr %661, align 4
  %memberidx1.i.i483 = getelementptr inbounds %FloRange, ptr %661, i64 0, i32 1
  store i64 %663, ptr %memberidx1.i.i483, align 4
  %memberidx2.i.i484 = getelementptr inbounds %FloRange, ptr %661, i64 0, i32 2
  store i64 %665, ptr %memberidx2.i.i484, align 4
  %memberidx3.i.i485 = getelementptr inbounds %FloRange, ptr %661, i64 0, i32 3
  store i64 %666, ptr %memberidx3.i.i485, align 4
  store i64 30, ptr %660, align 4
  %memberidx1.i486 = getelementptr inbounds %Token, ptr %660, i64 0, i32 1
  store ptr %661, ptr %memberidx1.i486, align 8
  br label %common.ret

if.entry60:                                       ; preds = %ifend11, %ifend11
  %667 = tail call ptr @malloc(i32 16)
  %668 = call ptr @malloc(i32 32)
  %memberidx.i487 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %669 = load i64, ptr %memberidx.i487, align 4
  %670 = add nsw i64 %669, 1
  %memberidx2.i488 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %671 = load i64, ptr %memberidx2.i488, align 4
  %672 = add i64 %671, -1
  %memberidx3.i489 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %673 = load i64, ptr %memberidx3.i489, align 4
  store i64 %669, ptr %668, align 4
  %memberidx1.i.i490 = getelementptr inbounds %FloRange, ptr %668, i64 0, i32 1
  store i64 %670, ptr %memberidx1.i.i490, align 4
  %memberidx2.i.i491 = getelementptr inbounds %FloRange, ptr %668, i64 0, i32 2
  store i64 %672, ptr %memberidx2.i.i491, align 4
  %memberidx3.i.i492 = getelementptr inbounds %FloRange, ptr %668, i64 0, i32 3
  store i64 %673, ptr %memberidx3.i.i492, align 4
  store i64 33, ptr %667, align 4
  %memberidx1.i493 = getelementptr inbounds %Token, ptr %667, i64 0, i32 1
  store ptr %668, ptr %memberidx1.i493, align 8
  br label %common.ret

if.entry63:                                       ; preds = %ifend11
  %memberidx.i.i.i494 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %674 = load i64, ptr %memberidx.i.i.i494, align 4
  %memberidx1.i.i.i495 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %675 = load ptr, ptr %memberidx1.i.i.i495, align 8
  %memberidx2.i.i.i496 = getelementptr inbounds %string, ptr %675, i64 0, i32 2
  %676 = load i64, ptr %memberidx2.i.i.i496, align 4
  %.not882 = icmp slt i64 %674, %676
  br i1 %.not882, label %ifend.i.i500, label %Lexer_advance.exit.i506

ifend.i.i500:                                     ; preds = %if.entry63
  %677 = load ptr, ptr %675, align 8
  %memberidx2.i.i498 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %677, i64 0, i32 2
  %678 = load ptr, ptr %memberidx2.i.i498, align 8
  %679 = add nsw i64 %674, 1
  store i64 %679, ptr %memberidx.i.i.i494, align 4
  %680 = call i8 %678(ptr nonnull %675, i64 %679)
  store i8 %680, ptr %0, align 1
  %681 = icmp eq i8 %680, 10
  %memberidx9.i.i501 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %681, label %if.entry6.i.i503, label %Lexer_advance.exit.i506.sink.split

if.entry6.i.i503:                                 ; preds = %ifend.i.i500
  store i64 0, ptr %memberidx9.i.i501, align 4
  %memberidx10.i.i502 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i506.sink.split

Lexer_advance.exit.i506.sink.split:               ; preds = %ifend.i.i500, %if.entry6.i.i503
  %memberidx9.i.i501.sink994 = phi ptr [ %memberidx10.i.i502, %if.entry6.i.i503 ], [ %memberidx9.i.i501, %ifend.i.i500 ]
  %682 = load i64, ptr %memberidx9.i.i501.sink994, align 4
  %683 = add nsw i64 %682, 1
  store i64 %683, ptr %memberidx9.i.i501.sink994, align 4
  br label %Lexer_advance.exit.i506

Lexer_advance.exit.i506:                          ; preds = %Lexer_advance.exit.i506.sink.split, %if.entry63
  %684 = load i8, ptr %0, align 1
  %685 = icmp eq i8 %684, 92
  br i1 %685, label %if.entry.i507, label %ifend.i511

if.entry.i507:                                    ; preds = %Lexer_advance.exit.i506
  %686 = load i64, ptr %memberidx.i.i.i494, align 4
  %687 = load ptr, ptr %memberidx1.i.i.i495, align 8
  %memberidx2.i.i12.i = getelementptr inbounds %string, ptr %687, i64 0, i32 2
  %688 = load i64, ptr %memberidx2.i.i12.i, align 4
  %.not884 = icmp slt i64 %686, %688
  br i1 %.not884, label %ifend.i16.i, label %Lexer_advance.exit22.i

ifend.i16.i:                                      ; preds = %if.entry.i507
  %689 = load ptr, ptr %687, align 8
  %memberidx2.i14.i508 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %689, i64 0, i32 2
  %690 = load ptr, ptr %memberidx2.i14.i508, align 8
  %691 = add nsw i64 %686, 1
  store i64 %691, ptr %memberidx.i.i.i494, align 4
  %692 = call i8 %690(ptr nonnull %687, i64 %691)
  store i8 %692, ptr %0, align 1
  %693 = icmp eq i8 %692, 10
  %memberidx9.i17.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %693, label %if.entry6.i19.i, label %Lexer_advance.exit22.i.sink.split

if.entry6.i19.i:                                  ; preds = %ifend.i16.i
  store i64 0, ptr %memberidx9.i17.i, align 4
  %memberidx10.i18.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit22.i.sink.split

Lexer_advance.exit22.i.sink.split:                ; preds = %ifend.i16.i, %if.entry6.i19.i
  %memberidx9.i17.i.sink996 = phi ptr [ %memberidx10.i18.i, %if.entry6.i19.i ], [ %memberidx9.i17.i, %ifend.i16.i ]
  %694 = load i64, ptr %memberidx9.i17.i.sink996, align 4
  %695 = add nsw i64 %694, 1
  store i64 %695, ptr %memberidx9.i17.i.sink996, align 4
  br label %Lexer_advance.exit22.i

Lexer_advance.exit22.i:                           ; preds = %Lexer_advance.exit22.i.sink.split, %if.entry.i507
  %696 = load i8, ptr %0, align 1
  switch i8 %696, label %ifend27.i.i [
    i8 97, label %ifend.i511
    i8 98, label %get_escape_char.exit.i.fold.split
    i8 116, label %get_escape_char.exit.i.fold.split919
    i8 102, label %get_escape_char.exit.i.fold.split920
    i8 110, label %get_escape_char.exit.i.fold.split921
    i8 114, label %get_escape_char.exit.i.fold.split922
    i8 118, label %get_escape_char.exit.i.fold.split923
    i8 48, label %get_escape_char.exit.i.fold.split924
    i8 39, label %get_escape_char.exit.i.fold.split925
    i8 34, label %get_escape_char.exit.i.fold.split926
  ]

ifend27.i.i:                                      ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split:                ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split919:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split920:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split921:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split922:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split923:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split924:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split925:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

get_escape_char.exit.i.fold.split926:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i511

ifend.i511:                                       ; preds = %ifend27.i.i, %get_escape_char.exit.i.fold.split, %get_escape_char.exit.i.fold.split919, %get_escape_char.exit.i.fold.split920, %get_escape_char.exit.i.fold.split921, %get_escape_char.exit.i.fold.split922, %get_escape_char.exit.i.fold.split923, %get_escape_char.exit.i.fold.split924, %get_escape_char.exit.i.fold.split925, %get_escape_char.exit.i.fold.split926, %Lexer_advance.exit22.i, %Lexer_advance.exit.i506
  %length.0.i = phi i64 [ 3, %Lexer_advance.exit.i506 ], [ 5, %Lexer_advance.exit22.i ], [ 5, %get_escape_char.exit.i.fold.split926 ], [ 5, %get_escape_char.exit.i.fold.split925 ], [ 5, %get_escape_char.exit.i.fold.split924 ], [ 5, %get_escape_char.exit.i.fold.split923 ], [ 5, %get_escape_char.exit.i.fold.split922 ], [ 5, %get_escape_char.exit.i.fold.split921 ], [ 5, %get_escape_char.exit.i.fold.split920 ], [ 5, %get_escape_char.exit.i.fold.split919 ], [ 5, %get_escape_char.exit.i.fold.split ], [ 5, %ifend27.i.i ]
  %value.0.i = phi i8 [ %684, %Lexer_advance.exit.i506 ], [ 7, %Lexer_advance.exit22.i ], [ %696, %get_escape_char.exit.i.fold.split926 ], [ %696, %get_escape_char.exit.i.fold.split925 ], [ 0, %get_escape_char.exit.i.fold.split924 ], [ 11, %get_escape_char.exit.i.fold.split923 ], [ 13, %get_escape_char.exit.i.fold.split922 ], [ 10, %get_escape_char.exit.i.fold.split921 ], [ 12, %get_escape_char.exit.i.fold.split920 ], [ 9, %get_escape_char.exit.i.fold.split919 ], [ 8, %get_escape_char.exit.i.fold.split ], [ %696, %ifend27.i.i ]
  %697 = load i64, ptr %memberidx.i.i.i494, align 4
  %698 = load ptr, ptr %memberidx1.i.i.i495, align 8
  %memberidx2.i.i32.i = getelementptr inbounds %string, ptr %698, i64 0, i32 2
  %699 = load i64, ptr %memberidx2.i.i32.i, align 4
  %.not883 = icmp slt i64 %697, %699
  br i1 %.not883, label %ifend.i36.i, label %Lexer_char_token.exit

ifend.i36.i:                                      ; preds = %ifend.i511
  %700 = load ptr, ptr %698, align 8
  %memberidx2.i34.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %700, i64 0, i32 2
  %701 = load ptr, ptr %memberidx2.i34.i, align 8
  %702 = add nsw i64 %697, 1
  store i64 %702, ptr %memberidx.i.i.i494, align 4
  %703 = call i8 %701(ptr nonnull %698, i64 %702)
  store i8 %703, ptr %0, align 1
  %704 = icmp eq i8 %703, 10
  %memberidx9.i37.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %704, label %if.entry6.i39.i, label %Lexer_char_token.exit.sink.split

if.entry6.i39.i:                                  ; preds = %ifend.i36.i
  store i64 0, ptr %memberidx9.i37.i, align 4
  %memberidx10.i38.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_char_token.exit.sink.split

Lexer_char_token.exit.sink.split:                 ; preds = %ifend.i36.i, %if.entry6.i39.i
  %memberidx10.i38.i.sink998 = phi ptr [ %memberidx10.i38.i, %if.entry6.i39.i ], [ %memberidx9.i37.i, %ifend.i36.i ]
  %705 = load i64, ptr %memberidx10.i38.i.sink998, align 4
  %706 = add nsw i64 %705, 1
  store i64 %706, ptr %memberidx10.i38.i.sink998, align 4
  br label %Lexer_char_token.exit

Lexer_char_token.exit:                            ; preds = %Lexer_char_token.exit.sink.split, %ifend.i511
  %707 = call ptr @malloc(i32 17)
  %708 = call ptr @malloc(i32 32)
  %709 = load i64, ptr %memberidx.i.i.i494, align 4
  %710 = sub nsw i64 1, %length.0.i
  %711 = add i64 %710, %709
  %712 = add nsw i64 %709, 1
  %memberidx2.i26.i513 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %713 = load i64, ptr %memberidx2.i26.i513, align 4
  %714 = sub i64 %713, %length.0.i
  %memberidx3.i27.i514 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %715 = load i64, ptr %memberidx3.i27.i514, align 4
  store i64 %711, ptr %708, align 4
  %memberidx1.i.i28.i515 = getelementptr inbounds %FloRange, ptr %708, i64 0, i32 1
  store i64 %712, ptr %memberidx1.i.i28.i515, align 4
  %memberidx2.i.i29.i516 = getelementptr inbounds %FloRange, ptr %708, i64 0, i32 2
  store i64 %714, ptr %memberidx2.i.i29.i516, align 4
  %memberidx3.i.i.i517 = getelementptr inbounds %FloRange, ptr %708, i64 0, i32 3
  store i64 %715, ptr %memberidx3.i.i.i517, align 4
  store i64 35, ptr %707, align 4
  %memberidx1.i.i24.i = getelementptr inbounds %Token, ptr %707, i64 0, i32 1
  store ptr %708, ptr %memberidx1.i.i24.i, align 8
  %memberidx.i.i518 = getelementptr inbounds %CharToken, ptr %707, i64 0, i32 2
  store i8 %value.0.i, ptr %memberidx.i.i518, align 1
  br label %common.ret

if.entry66:                                       ; preds = %ifend11
  %716 = tail call ptr @malloc(i32 16)
  %717 = call ptr @malloc(i32 32)
  %memberidx.i519 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %718 = load i64, ptr %memberidx.i519, align 4
  %719 = add nsw i64 %718, 1
  %memberidx2.i520 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %720 = load i64, ptr %memberidx2.i520, align 4
  %721 = add i64 %720, -1
  %memberidx3.i521 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %722 = load i64, ptr %memberidx3.i521, align 4
  store i64 %718, ptr %717, align 4
  %memberidx1.i.i522 = getelementptr inbounds %FloRange, ptr %717, i64 0, i32 1
  store i64 %719, ptr %memberidx1.i.i522, align 4
  %memberidx2.i.i523 = getelementptr inbounds %FloRange, ptr %717, i64 0, i32 2
  store i64 %721, ptr %memberidx2.i.i523, align 4
  %memberidx3.i.i524 = getelementptr inbounds %FloRange, ptr %717, i64 0, i32 3
  store i64 %722, ptr %memberidx3.i.i524, align 4
  store i64 36, ptr %716, align 4
  %memberidx1.i525 = getelementptr inbounds %Token, ptr %716, i64 0, i32 1
  store ptr %717, ptr %memberidx1.i525, align 8
  br label %common.ret

if.entry69:                                       ; preds = %ifend11
  %723 = tail call ptr @malloc(i32 16)
  %724 = call ptr @malloc(i32 32)
  %memberidx.i526 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %725 = load i64, ptr %memberidx.i526, align 4
  %726 = add nsw i64 %725, 1
  %memberidx2.i527 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %727 = load i64, ptr %memberidx2.i527, align 4
  %728 = add i64 %727, -1
  %memberidx3.i528 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %729 = load i64, ptr %memberidx3.i528, align 4
  store i64 %725, ptr %724, align 4
  %memberidx1.i.i529 = getelementptr inbounds %FloRange, ptr %724, i64 0, i32 1
  store i64 %726, ptr %memberidx1.i.i529, align 4
  %memberidx2.i.i530 = getelementptr inbounds %FloRange, ptr %724, i64 0, i32 2
  store i64 %728, ptr %memberidx2.i.i530, align 4
  %memberidx3.i.i531 = getelementptr inbounds %FloRange, ptr %724, i64 0, i32 3
  store i64 %729, ptr %memberidx3.i.i531, align 4
  store i64 37, ptr %723, align 4
  %memberidx1.i532 = getelementptr inbounds %Token, ptr %723, i64 0, i32 1
  store ptr %724, ptr %memberidx1.i532, align 8
  br label %common.ret

if.entry72:                                       ; preds = %ifend11
  %memberidx.i.i533 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %730 = load i64, ptr %memberidx.i.i533, align 4
  %731 = add nsw i64 %730, 1
  %memberidx1.i.i534 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %732 = load ptr, ptr %memberidx1.i.i534, align 8
  %memberidx2.i.i535 = getelementptr inbounds %string, ptr %732, i64 0, i32 2
  %733 = load i64, ptr %memberidx2.i.i535, align 4
  %734 = icmp slt i64 %731, %733
  br i1 %734, label %if.entry.i.i537, label %ifend.i569

if.entry.i.i537:                                  ; preds = %if.entry72
  %735 = load ptr, ptr %732, align 8
  %memberidx4.i.i536 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %735, i64 0, i32 2
  %736 = load ptr, ptr %memberidx4.i.i536, align 8
  %737 = call i8 %736(ptr nonnull %732, i64 %731)
  %phi.cmp880 = icmp eq i8 %737, 61
  br i1 %phi.cmp880, label %if.entry.i544, label %ifend.i569

if.entry.i544:                                    ; preds = %if.entry.i.i537
  %738 = load i64, ptr %memberidx.i.i533, align 4
  %739 = load ptr, ptr %memberidx1.i.i534, align 8
  %memberidx2.i.i.i543 = getelementptr inbounds %string, ptr %739, i64 0, i32 2
  %740 = load i64, ptr %memberidx2.i.i.i543, align 4
  %.not881 = icmp slt i64 %738, %740
  br i1 %.not881, label %ifend.i.i548, label %Lexer_advance.exit.i561

ifend.i.i548:                                     ; preds = %if.entry.i544
  %741 = load ptr, ptr %739, align 8
  %memberidx2.i5.i546 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %741, i64 0, i32 2
  %742 = load ptr, ptr %memberidx2.i5.i546, align 8
  %743 = add nsw i64 %738, 1
  store i64 %743, ptr %memberidx.i.i533, align 4
  %744 = call i8 %742(ptr nonnull %739, i64 %743)
  store i8 %744, ptr %0, align 1
  %745 = icmp eq i8 %744, 10
  %memberidx9.i.i549 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %745, label %if.entry6.i.i551, label %Lexer_advance.exit.i561.sink.split

if.entry6.i.i551:                                 ; preds = %ifend.i.i548
  store i64 0, ptr %memberidx9.i.i549, align 4
  %memberidx10.i.i550 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i561.sink.split

Lexer_advance.exit.i561.sink.split:               ; preds = %ifend.i.i548, %if.entry6.i.i551
  %memberidx9.i.i549.sink1000 = phi ptr [ %memberidx10.i.i550, %if.entry6.i.i551 ], [ %memberidx9.i.i549, %ifend.i.i548 ]
  %746 = load i64, ptr %memberidx9.i.i549.sink1000, align 4
  %747 = add nsw i64 %746, 1
  store i64 %747, ptr %memberidx9.i.i549.sink1000, align 4
  br label %Lexer_advance.exit.i561

Lexer_advance.exit.i561:                          ; preds = %Lexer_advance.exit.i561.sink.split, %if.entry.i544
  %748 = call ptr @malloc(i32 16)
  %749 = call ptr @malloc(i32 32)
  %750 = load i64, ptr %memberidx.i.i533, align 4
  %751 = add i64 %750, -1
  %752 = add nsw i64 %750, 1
  %memberidx2.i7.i555 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %753 = load i64, ptr %memberidx2.i7.i555, align 4
  %754 = add i64 %753, -2
  %memberidx3.i8.i556 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %755 = load i64, ptr %memberidx3.i8.i556, align 4
  store i64 %751, ptr %749, align 4
  %memberidx1.i.i9.i557 = getelementptr inbounds %FloRange, ptr %749, i64 0, i32 1
  store i64 %752, ptr %memberidx1.i.i9.i557, align 4
  %memberidx2.i.i10.i558 = getelementptr inbounds %FloRange, ptr %749, i64 0, i32 2
  store i64 %754, ptr %memberidx2.i.i10.i558, align 4
  %memberidx3.i.i.i559 = getelementptr inbounds %FloRange, ptr %749, i64 0, i32 3
  store i64 %755, ptr %memberidx3.i.i.i559, align 4
  store i64 39, ptr %748, align 4
  %memberidx1.i11.i560 = getelementptr inbounds %Token, ptr %748, i64 0, i32 1
  store ptr %749, ptr %memberidx1.i11.i560, align 8
  br label %common.ret

ifend.i569:                                       ; preds = %if.entry72, %if.entry.i.i537
  %756 = call ptr @malloc(i32 16)
  %757 = call ptr @malloc(i32 32)
  %758 = load i64, ptr %memberidx.i.i533, align 4
  %759 = add nsw i64 %758, 1
  %memberidx2.i14.i563 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %760 = load i64, ptr %memberidx2.i14.i563, align 4
  %761 = add i64 %760, -1
  %memberidx3.i15.i564 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %762 = load i64, ptr %memberidx3.i15.i564, align 4
  store i64 %758, ptr %757, align 4
  %memberidx1.i.i16.i565 = getelementptr inbounds %FloRange, ptr %757, i64 0, i32 1
  store i64 %759, ptr %memberidx1.i.i16.i565, align 4
  %memberidx2.i.i17.i566 = getelementptr inbounds %FloRange, ptr %757, i64 0, i32 2
  store i64 %761, ptr %memberidx2.i.i17.i566, align 4
  %memberidx3.i.i18.i567 = getelementptr inbounds %FloRange, ptr %757, i64 0, i32 3
  store i64 %762, ptr %memberidx3.i.i18.i567, align 4
  store i64 38, ptr %756, align 4
  %memberidx1.i12.i568 = getelementptr inbounds %Token, ptr %756, i64 0, i32 1
  store ptr %757, ptr %memberidx1.i12.i568, align 8
  br label %common.ret

if.entry75:                                       ; preds = %ifend11
  %memberidx.i.i570 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %763 = load i64, ptr %memberidx.i.i570, align 4
  %764 = add nsw i64 %763, 1
  %memberidx1.i.i571 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %765 = load ptr, ptr %memberidx1.i.i571, align 8
  %memberidx2.i.i572 = getelementptr inbounds %string, ptr %765, i64 0, i32 2
  %766 = load i64, ptr %memberidx2.i.i572, align 4
  %767 = icmp slt i64 %764, %766
  br i1 %767, label %if.entry.i.i574, label %ifend.i606

if.entry.i.i574:                                  ; preds = %if.entry75
  %768 = load ptr, ptr %765, align 8
  %memberidx4.i.i573 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %768, i64 0, i32 2
  %769 = load ptr, ptr %memberidx4.i.i573, align 8
  %770 = call i8 %769(ptr nonnull %765, i64 %764)
  %phi.cmp878 = icmp eq i8 %770, 61
  br i1 %phi.cmp878, label %if.entry.i581, label %ifend.i606

if.entry.i581:                                    ; preds = %if.entry.i.i574
  %771 = load i64, ptr %memberidx.i.i570, align 4
  %772 = load ptr, ptr %memberidx1.i.i571, align 8
  %memberidx2.i.i.i580 = getelementptr inbounds %string, ptr %772, i64 0, i32 2
  %773 = load i64, ptr %memberidx2.i.i.i580, align 4
  %.not879 = icmp slt i64 %771, %773
  br i1 %.not879, label %ifend.i.i585, label %Lexer_advance.exit.i598

ifend.i.i585:                                     ; preds = %if.entry.i581
  %774 = load ptr, ptr %772, align 8
  %memberidx2.i5.i583 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %774, i64 0, i32 2
  %775 = load ptr, ptr %memberidx2.i5.i583, align 8
  %776 = add nsw i64 %771, 1
  store i64 %776, ptr %memberidx.i.i570, align 4
  %777 = call i8 %775(ptr nonnull %772, i64 %776)
  store i8 %777, ptr %0, align 1
  %778 = icmp eq i8 %777, 10
  %memberidx9.i.i586 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %778, label %if.entry6.i.i588, label %Lexer_advance.exit.i598.sink.split

if.entry6.i.i588:                                 ; preds = %ifend.i.i585
  store i64 0, ptr %memberidx9.i.i586, align 4
  %memberidx10.i.i587 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i598.sink.split

Lexer_advance.exit.i598.sink.split:               ; preds = %ifend.i.i585, %if.entry6.i.i588
  %memberidx9.i.i586.sink1002 = phi ptr [ %memberidx10.i.i587, %if.entry6.i.i588 ], [ %memberidx9.i.i586, %ifend.i.i585 ]
  %779 = load i64, ptr %memberidx9.i.i586.sink1002, align 4
  %780 = add nsw i64 %779, 1
  store i64 %780, ptr %memberidx9.i.i586.sink1002, align 4
  br label %Lexer_advance.exit.i598

Lexer_advance.exit.i598:                          ; preds = %Lexer_advance.exit.i598.sink.split, %if.entry.i581
  %781 = call ptr @malloc(i32 16)
  %782 = call ptr @malloc(i32 32)
  %783 = load i64, ptr %memberidx.i.i570, align 4
  %784 = add i64 %783, -1
  %785 = add nsw i64 %783, 1
  %memberidx2.i7.i592 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %786 = load i64, ptr %memberidx2.i7.i592, align 4
  %787 = add i64 %786, -2
  %memberidx3.i8.i593 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %788 = load i64, ptr %memberidx3.i8.i593, align 4
  store i64 %784, ptr %782, align 4
  %memberidx1.i.i9.i594 = getelementptr inbounds %FloRange, ptr %782, i64 0, i32 1
  store i64 %785, ptr %memberidx1.i.i9.i594, align 4
  %memberidx2.i.i10.i595 = getelementptr inbounds %FloRange, ptr %782, i64 0, i32 2
  store i64 %787, ptr %memberidx2.i.i10.i595, align 4
  %memberidx3.i.i.i596 = getelementptr inbounds %FloRange, ptr %782, i64 0, i32 3
  store i64 %788, ptr %memberidx3.i.i.i596, align 4
  store i64 40, ptr %781, align 4
  %memberidx1.i11.i597 = getelementptr inbounds %Token, ptr %781, i64 0, i32 1
  store ptr %782, ptr %memberidx1.i11.i597, align 8
  br label %common.ret

ifend.i606:                                       ; preds = %if.entry75, %if.entry.i.i574
  %789 = call ptr @malloc(i32 16)
  %790 = call ptr @malloc(i32 32)
  %791 = load i64, ptr %memberidx.i.i570, align 4
  %792 = add nsw i64 %791, 1
  %memberidx2.i14.i600 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %793 = load i64, ptr %memberidx2.i14.i600, align 4
  %794 = add i64 %793, -1
  %memberidx3.i15.i601 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %795 = load i64, ptr %memberidx3.i15.i601, align 4
  store i64 %791, ptr %790, align 4
  %memberidx1.i.i16.i602 = getelementptr inbounds %FloRange, ptr %790, i64 0, i32 1
  store i64 %792, ptr %memberidx1.i.i16.i602, align 4
  %memberidx2.i.i17.i603 = getelementptr inbounds %FloRange, ptr %790, i64 0, i32 2
  store i64 %794, ptr %memberidx2.i.i17.i603, align 4
  %memberidx3.i.i18.i604 = getelementptr inbounds %FloRange, ptr %790, i64 0, i32 3
  store i64 %795, ptr %memberidx3.i.i18.i604, align 4
  store i64 47, ptr %789, align 4
  %memberidx1.i12.i605 = getelementptr inbounds %Token, ptr %789, i64 0, i32 1
  store ptr %790, ptr %memberidx1.i12.i605, align 8
  br label %common.ret

if.entry78:                                       ; preds = %ifend11
  %memberidx.i.i607 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %796 = load i64, ptr %memberidx.i.i607, align 4
  %797 = add nsw i64 %796, 1
  %memberidx1.i.i608 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %798 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i.i609 = getelementptr inbounds %string, ptr %798, i64 0, i32 2
  %799 = load i64, ptr %memberidx2.i.i609, align 4
  %800 = icmp slt i64 %797, %799
  br i1 %800, label %if.entry.i.i611, label %else.i639

if.entry.i.i611:                                  ; preds = %if.entry78
  %801 = load ptr, ptr %798, align 8
  %memberidx4.i.i610 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %801, i64 0, i32 2
  %802 = load ptr, ptr %memberidx4.i.i610, align 8
  %803 = call i8 %802(ptr nonnull %798, i64 %797)
  %phi.cmp872 = icmp eq i8 %803, 61
  br i1 %phi.cmp872, label %if.entry.i618, label %else.i639

if.entry.i618:                                    ; preds = %if.entry.i.i611
  %804 = load i64, ptr %memberidx.i.i607, align 4
  %805 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i.i.i617 = getelementptr inbounds %string, ptr %805, i64 0, i32 2
  %806 = load i64, ptr %memberidx2.i.i.i617, align 4
  %.not877 = icmp slt i64 %804, %806
  br i1 %.not877, label %ifend.i.i622, label %Lexer_advance.exit.i635

ifend.i.i622:                                     ; preds = %if.entry.i618
  %807 = load ptr, ptr %805, align 8
  %memberidx2.i17.i620 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %807, i64 0, i32 2
  %808 = load ptr, ptr %memberidx2.i17.i620, align 8
  %809 = add nsw i64 %804, 1
  store i64 %809, ptr %memberidx.i.i607, align 4
  %810 = call i8 %808(ptr nonnull %805, i64 %809)
  store i8 %810, ptr %0, align 1
  %811 = icmp eq i8 %810, 10
  %memberidx9.i.i623 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %811, label %if.entry6.i.i625, label %Lexer_advance.exit.i635.sink.split

if.entry6.i.i625:                                 ; preds = %ifend.i.i622
  store i64 0, ptr %memberidx9.i.i623, align 4
  %memberidx10.i.i624 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i635.sink.split

Lexer_advance.exit.i635.sink.split:               ; preds = %ifend.i.i622, %if.entry6.i.i625
  %memberidx9.i.i623.sink1004 = phi ptr [ %memberidx10.i.i624, %if.entry6.i.i625 ], [ %memberidx9.i.i623, %ifend.i.i622 ]
  %812 = load i64, ptr %memberidx9.i.i623.sink1004, align 4
  %813 = add nsw i64 %812, 1
  store i64 %813, ptr %memberidx9.i.i623.sink1004, align 4
  br label %Lexer_advance.exit.i635

Lexer_advance.exit.i635:                          ; preds = %Lexer_advance.exit.i635.sink.split, %if.entry.i618
  %814 = call ptr @malloc(i32 16)
  %815 = call ptr @malloc(i32 32)
  %816 = load i64, ptr %memberidx.i.i607, align 4
  %817 = add i64 %816, -1
  %818 = add nsw i64 %816, 1
  %memberidx2.i19.i629 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %819 = load i64, ptr %memberidx2.i19.i629, align 4
  %820 = add i64 %819, -2
  %memberidx3.i20.i630 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %821 = load i64, ptr %memberidx3.i20.i630, align 4
  store i64 %817, ptr %815, align 4
  %memberidx1.i.i21.i631 = getelementptr inbounds %FloRange, ptr %815, i64 0, i32 1
  store i64 %818, ptr %memberidx1.i.i21.i631, align 4
  %memberidx2.i.i22.i632 = getelementptr inbounds %FloRange, ptr %815, i64 0, i32 2
  store i64 %820, ptr %memberidx2.i.i22.i632, align 4
  %memberidx3.i.i.i633 = getelementptr inbounds %FloRange, ptr %815, i64 0, i32 3
  store i64 %821, ptr %memberidx3.i.i.i633, align 4
  store i64 44, ptr %814, align 4
  %memberidx1.i23.i634 = getelementptr inbounds %Token, ptr %814, i64 0, i32 1
  store ptr %815, ptr %memberidx1.i23.i634, align 8
  br label %common.ret

else.i639:                                        ; preds = %if.entry78, %if.entry.i.i611
  %822 = load i64, ptr %memberidx.i.i607, align 4
  %823 = add nsw i64 %822, 1
  %824 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i33.i638 = getelementptr inbounds %string, ptr %824, i64 0, i32 2
  %825 = load i64, ptr %memberidx2.i33.i638, align 4
  %826 = icmp slt i64 %823, %825
  br i1 %826, label %if.entry.i36.i641, label %ifend3.i672

if.entry.i36.i641:                                ; preds = %else.i639
  %827 = load ptr, ptr %824, align 8
  %memberidx4.i35.i640 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %827, i64 0, i32 2
  %828 = load ptr, ptr %memberidx4.i35.i640, align 8
  %829 = call i8 %828(ptr nonnull %824, i64 %823)
  %phi.cmp873 = icmp eq i8 %829, 62
  br i1 %phi.cmp873, label %if.entry1.i647, label %ifend3.i672

if.entry1.i647:                                   ; preds = %if.entry.i36.i641
  %830 = load i64, ptr %memberidx.i.i607, align 4
  %831 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i.i40.i646 = getelementptr inbounds %string, ptr %831, i64 0, i32 2
  %832 = load i64, ptr %memberidx2.i.i40.i646, align 4
  %.not874 = icmp slt i64 %830, %832
  br i1 %.not874, label %ifend.i44.i651, label %Lexer_advance.exit50.i660

ifend.i44.i651:                                   ; preds = %if.entry1.i647
  %833 = load ptr, ptr %831, align 8
  %memberidx2.i42.i649 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %833, i64 0, i32 2
  %834 = load ptr, ptr %memberidx2.i42.i649, align 8
  %835 = add nsw i64 %830, 1
  store i64 %835, ptr %memberidx.i.i607, align 4
  %836 = call i8 %834(ptr nonnull %831, i64 %835)
  store i8 %836, ptr %0, align 1
  %837 = icmp eq i8 %836, 10
  %memberidx9.i45.i652 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %837, label %if.entry6.i47.i654, label %Lexer_advance.exit50.i660.sink.split

if.entry6.i47.i654:                               ; preds = %ifend.i44.i651
  store i64 0, ptr %memberidx9.i45.i652, align 4
  %memberidx10.i46.i653 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i660.sink.split

Lexer_advance.exit50.i660.sink.split:             ; preds = %ifend.i44.i651, %if.entry6.i47.i654
  %memberidx9.i45.i652.sink1006 = phi ptr [ %memberidx10.i46.i653, %if.entry6.i47.i654 ], [ %memberidx9.i45.i652, %ifend.i44.i651 ]
  %838 = load i64, ptr %memberidx9.i45.i652.sink1006, align 4
  %839 = add nsw i64 %838, 1
  store i64 %839, ptr %memberidx9.i45.i652.sink1006, align 4
  br label %Lexer_advance.exit50.i660

Lexer_advance.exit50.i660:                        ; preds = %Lexer_advance.exit50.i660.sink.split, %if.entry1.i647
  %840 = load i64, ptr %memberidx.i.i607, align 4
  %841 = add nsw i64 %840, 1
  %842 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i53.i659 = getelementptr inbounds %string, ptr %842, i64 0, i32 2
  %843 = load i64, ptr %memberidx2.i53.i659, align 4
  %844 = icmp slt i64 %841, %843
  br i1 %844, label %if.entry.i56.i662, label %ifend6.i701

if.entry.i56.i662:                                ; preds = %Lexer_advance.exit50.i660
  %845 = load ptr, ptr %842, align 8
  %memberidx4.i55.i661 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %845, i64 0, i32 2
  %846 = load ptr, ptr %memberidx4.i55.i661, align 8
  %847 = call i8 %846(ptr nonnull %842, i64 %841)
  %phi.cmp875 = icmp eq i8 %847, 61
  br i1 %phi.cmp875, label %if.entry4.i676, label %ifend6.i701

ifend3.i672:                                      ; preds = %else.i639, %if.entry.i36.i641
  %848 = call ptr @malloc(i32 16)
  %849 = call ptr @malloc(i32 32)
  %850 = load i64, ptr %memberidx.i.i607, align 4
  %851 = add nsw i64 %850, 1
  %memberidx2.i59.i666 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %852 = load i64, ptr %memberidx2.i59.i666, align 4
  %853 = add i64 %852, -1
  %memberidx3.i60.i667 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %854 = load i64, ptr %memberidx3.i60.i667, align 4
  store i64 %850, ptr %849, align 4
  %memberidx1.i.i61.i668 = getelementptr inbounds %FloRange, ptr %849, i64 0, i32 1
  store i64 %851, ptr %memberidx1.i.i61.i668, align 4
  %memberidx2.i.i62.i669 = getelementptr inbounds %FloRange, ptr %849, i64 0, i32 2
  store i64 %853, ptr %memberidx2.i.i62.i669, align 4
  %memberidx3.i.i63.i670 = getelementptr inbounds %FloRange, ptr %849, i64 0, i32 3
  store i64 %854, ptr %memberidx3.i.i63.i670, align 4
  store i64 41, ptr %848, align 4
  %memberidx1.i64.i671 = getelementptr inbounds %Token, ptr %848, i64 0, i32 1
  store ptr %849, ptr %memberidx1.i64.i671, align 8
  br label %common.ret

if.entry4.i676:                                   ; preds = %if.entry.i56.i662
  %855 = load i64, ptr %memberidx.i.i607, align 4
  %856 = load ptr, ptr %memberidx1.i.i608, align 8
  %memberidx2.i.i74.i675 = getelementptr inbounds %string, ptr %856, i64 0, i32 2
  %857 = load i64, ptr %memberidx2.i.i74.i675, align 4
  %.not876 = icmp slt i64 %855, %857
  br i1 %.not876, label %ifend.i78.i680, label %Lexer_advance.exit84.i693

ifend.i78.i680:                                   ; preds = %if.entry4.i676
  %858 = load ptr, ptr %856, align 8
  %memberidx2.i76.i678 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %858, i64 0, i32 2
  %859 = load ptr, ptr %memberidx2.i76.i678, align 8
  %860 = add nsw i64 %855, 1
  store i64 %860, ptr %memberidx.i.i607, align 4
  %861 = call i8 %859(ptr nonnull %856, i64 %860)
  store i8 %861, ptr %0, align 1
  %862 = icmp eq i8 %861, 10
  %memberidx9.i79.i681 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %862, label %if.entry6.i81.i683, label %Lexer_advance.exit84.i693.sink.split

if.entry6.i81.i683:                               ; preds = %ifend.i78.i680
  store i64 0, ptr %memberidx9.i79.i681, align 4
  %memberidx10.i80.i682 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i693.sink.split

Lexer_advance.exit84.i693.sink.split:             ; preds = %ifend.i78.i680, %if.entry6.i81.i683
  %memberidx9.i79.i681.sink1008 = phi ptr [ %memberidx10.i80.i682, %if.entry6.i81.i683 ], [ %memberidx9.i79.i681, %ifend.i78.i680 ]
  %863 = load i64, ptr %memberidx9.i79.i681.sink1008, align 4
  %864 = add nsw i64 %863, 1
  store i64 %864, ptr %memberidx9.i79.i681.sink1008, align 4
  br label %Lexer_advance.exit84.i693

Lexer_advance.exit84.i693:                        ; preds = %Lexer_advance.exit84.i693.sink.split, %if.entry4.i676
  %865 = call ptr @malloc(i32 16)
  %866 = call ptr @malloc(i32 32)
  %867 = load i64, ptr %memberidx.i.i607, align 4
  %868 = add i64 %867, -2
  %869 = add nsw i64 %867, 1
  %memberidx2.i67.i687 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %870 = load i64, ptr %memberidx2.i67.i687, align 4
  %871 = add i64 %870, -3
  %memberidx3.i68.i688 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %872 = load i64, ptr %memberidx3.i68.i688, align 4
  store i64 %868, ptr %866, align 4
  %memberidx1.i.i69.i689 = getelementptr inbounds %FloRange, ptr %866, i64 0, i32 1
  store i64 %869, ptr %memberidx1.i.i69.i689, align 4
  %memberidx2.i.i70.i690 = getelementptr inbounds %FloRange, ptr %866, i64 0, i32 2
  store i64 %871, ptr %memberidx2.i.i70.i690, align 4
  %memberidx3.i.i71.i691 = getelementptr inbounds %FloRange, ptr %866, i64 0, i32 3
  store i64 %872, ptr %memberidx3.i.i71.i691, align 4
  store i64 21, ptr %865, align 4
  %memberidx1.i65.i692 = getelementptr inbounds %Token, ptr %865, i64 0, i32 1
  store ptr %866, ptr %memberidx1.i65.i692, align 8
  br label %common.ret

ifend6.i701:                                      ; preds = %Lexer_advance.exit50.i660, %if.entry.i56.i662
  %873 = call ptr @malloc(i32 16)
  %874 = call ptr @malloc(i32 32)
  %875 = load i64, ptr %memberidx.i.i607, align 4
  %876 = add i64 %875, -1
  %877 = add nsw i64 %875, 1
  %memberidx2.i26.i695 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %878 = load i64, ptr %memberidx2.i26.i695, align 4
  %879 = add i64 %878, -2
  %memberidx3.i27.i696 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %880 = load i64, ptr %memberidx3.i27.i696, align 4
  store i64 %876, ptr %874, align 4
  %memberidx1.i.i28.i697 = getelementptr inbounds %FloRange, ptr %874, i64 0, i32 1
  store i64 %877, ptr %memberidx1.i.i28.i697, align 4
  %memberidx2.i.i29.i698 = getelementptr inbounds %FloRange, ptr %874, i64 0, i32 2
  store i64 %879, ptr %memberidx2.i.i29.i698, align 4
  %memberidx3.i.i30.i699 = getelementptr inbounds %FloRange, ptr %874, i64 0, i32 3
  store i64 %880, ptr %memberidx3.i.i30.i699, align 4
  store i64 49, ptr %873, align 4
  %memberidx1.i24.i700 = getelementptr inbounds %Token, ptr %873, i64 0, i32 1
  store ptr %874, ptr %memberidx1.i24.i700, align 8
  br label %common.ret

if.entry81:                                       ; preds = %ifend11
  %memberidx.i.i702 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %881 = load i64, ptr %memberidx.i.i702, align 4
  %882 = add nsw i64 %881, 1
  %memberidx1.i.i703 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %883 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i.i704 = getelementptr inbounds %string, ptr %883, i64 0, i32 2
  %884 = load i64, ptr %memberidx2.i.i704, align 4
  %885 = icmp slt i64 %882, %884
  br i1 %885, label %if.entry.i.i706, label %else.i734

if.entry.i.i706:                                  ; preds = %if.entry81
  %886 = load ptr, ptr %883, align 8
  %memberidx4.i.i705 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %886, i64 0, i32 2
  %887 = load ptr, ptr %memberidx4.i.i705, align 8
  %888 = call i8 %887(ptr nonnull %883, i64 %882)
  %phi.cmp866 = icmp eq i8 %888, 61
  br i1 %phi.cmp866, label %if.entry.i713, label %else.i734

if.entry.i713:                                    ; preds = %if.entry.i.i706
  %889 = load i64, ptr %memberidx.i.i702, align 4
  %890 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i.i.i712 = getelementptr inbounds %string, ptr %890, i64 0, i32 2
  %891 = load i64, ptr %memberidx2.i.i.i712, align 4
  %.not871 = icmp slt i64 %889, %891
  br i1 %.not871, label %ifend.i.i717, label %Lexer_advance.exit.i730

ifend.i.i717:                                     ; preds = %if.entry.i713
  %892 = load ptr, ptr %890, align 8
  %memberidx2.i17.i715 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %892, i64 0, i32 2
  %893 = load ptr, ptr %memberidx2.i17.i715, align 8
  %894 = add nsw i64 %889, 1
  store i64 %894, ptr %memberidx.i.i702, align 4
  %895 = call i8 %893(ptr nonnull %890, i64 %894)
  store i8 %895, ptr %0, align 1
  %896 = icmp eq i8 %895, 10
  %memberidx9.i.i718 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %896, label %if.entry6.i.i720, label %Lexer_advance.exit.i730.sink.split

if.entry6.i.i720:                                 ; preds = %ifend.i.i717
  store i64 0, ptr %memberidx9.i.i718, align 4
  %memberidx10.i.i719 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i730.sink.split

Lexer_advance.exit.i730.sink.split:               ; preds = %ifend.i.i717, %if.entry6.i.i720
  %memberidx9.i.i718.sink1010 = phi ptr [ %memberidx10.i.i719, %if.entry6.i.i720 ], [ %memberidx9.i.i718, %ifend.i.i717 ]
  %897 = load i64, ptr %memberidx9.i.i718.sink1010, align 4
  %898 = add nsw i64 %897, 1
  store i64 %898, ptr %memberidx9.i.i718.sink1010, align 4
  br label %Lexer_advance.exit.i730

Lexer_advance.exit.i730:                          ; preds = %Lexer_advance.exit.i730.sink.split, %if.entry.i713
  %899 = call ptr @malloc(i32 16)
  %900 = call ptr @malloc(i32 32)
  %901 = load i64, ptr %memberidx.i.i702, align 4
  %902 = add i64 %901, -1
  %903 = add nsw i64 %901, 1
  %memberidx2.i19.i724 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %904 = load i64, ptr %memberidx2.i19.i724, align 4
  %905 = add i64 %904, -2
  %memberidx3.i20.i725 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %906 = load i64, ptr %memberidx3.i20.i725, align 4
  store i64 %902, ptr %900, align 4
  %memberidx1.i.i21.i726 = getelementptr inbounds %FloRange, ptr %900, i64 0, i32 1
  store i64 %903, ptr %memberidx1.i.i21.i726, align 4
  %memberidx2.i.i22.i727 = getelementptr inbounds %FloRange, ptr %900, i64 0, i32 2
  store i64 %905, ptr %memberidx2.i.i22.i727, align 4
  %memberidx3.i.i.i728 = getelementptr inbounds %FloRange, ptr %900, i64 0, i32 3
  store i64 %906, ptr %memberidx3.i.i.i728, align 4
  store i64 43, ptr %899, align 4
  %memberidx1.i23.i729 = getelementptr inbounds %Token, ptr %899, i64 0, i32 1
  store ptr %900, ptr %memberidx1.i23.i729, align 8
  br label %common.ret

else.i734:                                        ; preds = %if.entry81, %if.entry.i.i706
  %907 = load i64, ptr %memberidx.i.i702, align 4
  %908 = add nsw i64 %907, 1
  %909 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i33.i733 = getelementptr inbounds %string, ptr %909, i64 0, i32 2
  %910 = load i64, ptr %memberidx2.i33.i733, align 4
  %911 = icmp slt i64 %908, %910
  br i1 %911, label %if.entry.i36.i736, label %ifend3.i767

if.entry.i36.i736:                                ; preds = %else.i734
  %912 = load ptr, ptr %909, align 8
  %memberidx4.i35.i735 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %912, i64 0, i32 2
  %913 = load ptr, ptr %memberidx4.i35.i735, align 8
  %914 = call i8 %913(ptr nonnull %909, i64 %908)
  %phi.cmp867 = icmp eq i8 %914, 60
  br i1 %phi.cmp867, label %if.entry1.i742, label %ifend3.i767

if.entry1.i742:                                   ; preds = %if.entry.i36.i736
  %915 = load i64, ptr %memberidx.i.i702, align 4
  %916 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i.i40.i741 = getelementptr inbounds %string, ptr %916, i64 0, i32 2
  %917 = load i64, ptr %memberidx2.i.i40.i741, align 4
  %.not868 = icmp slt i64 %915, %917
  br i1 %.not868, label %ifend.i44.i746, label %Lexer_advance.exit50.i755

ifend.i44.i746:                                   ; preds = %if.entry1.i742
  %918 = load ptr, ptr %916, align 8
  %memberidx2.i42.i744 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %918, i64 0, i32 2
  %919 = load ptr, ptr %memberidx2.i42.i744, align 8
  %920 = add nsw i64 %915, 1
  store i64 %920, ptr %memberidx.i.i702, align 4
  %921 = call i8 %919(ptr nonnull %916, i64 %920)
  store i8 %921, ptr %0, align 1
  %922 = icmp eq i8 %921, 10
  %memberidx9.i45.i747 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %922, label %if.entry6.i47.i749, label %Lexer_advance.exit50.i755.sink.split

if.entry6.i47.i749:                               ; preds = %ifend.i44.i746
  store i64 0, ptr %memberidx9.i45.i747, align 4
  %memberidx10.i46.i748 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i755.sink.split

Lexer_advance.exit50.i755.sink.split:             ; preds = %ifend.i44.i746, %if.entry6.i47.i749
  %memberidx9.i45.i747.sink1012 = phi ptr [ %memberidx10.i46.i748, %if.entry6.i47.i749 ], [ %memberidx9.i45.i747, %ifend.i44.i746 ]
  %923 = load i64, ptr %memberidx9.i45.i747.sink1012, align 4
  %924 = add nsw i64 %923, 1
  store i64 %924, ptr %memberidx9.i45.i747.sink1012, align 4
  br label %Lexer_advance.exit50.i755

Lexer_advance.exit50.i755:                        ; preds = %Lexer_advance.exit50.i755.sink.split, %if.entry1.i742
  %925 = load i64, ptr %memberidx.i.i702, align 4
  %926 = add nsw i64 %925, 1
  %927 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i53.i754 = getelementptr inbounds %string, ptr %927, i64 0, i32 2
  %928 = load i64, ptr %memberidx2.i53.i754, align 4
  %929 = icmp slt i64 %926, %928
  br i1 %929, label %if.entry.i56.i757, label %ifend6.i796

if.entry.i56.i757:                                ; preds = %Lexer_advance.exit50.i755
  %930 = load ptr, ptr %927, align 8
  %memberidx4.i55.i756 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %930, i64 0, i32 2
  %931 = load ptr, ptr %memberidx4.i55.i756, align 8
  %932 = call i8 %931(ptr nonnull %927, i64 %926)
  %phi.cmp869 = icmp eq i8 %932, 61
  br i1 %phi.cmp869, label %if.entry4.i771, label %ifend6.i796

ifend3.i767:                                      ; preds = %else.i734, %if.entry.i36.i736
  %933 = call ptr @malloc(i32 16)
  %934 = call ptr @malloc(i32 32)
  %935 = load i64, ptr %memberidx.i.i702, align 4
  %936 = add nsw i64 %935, 1
  %memberidx2.i59.i761 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %937 = load i64, ptr %memberidx2.i59.i761, align 4
  %938 = add i64 %937, -1
  %memberidx3.i60.i762 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %939 = load i64, ptr %memberidx3.i60.i762, align 4
  store i64 %935, ptr %934, align 4
  %memberidx1.i.i61.i763 = getelementptr inbounds %FloRange, ptr %934, i64 0, i32 1
  store i64 %936, ptr %memberidx1.i.i61.i763, align 4
  %memberidx2.i.i62.i764 = getelementptr inbounds %FloRange, ptr %934, i64 0, i32 2
  store i64 %938, ptr %memberidx2.i.i62.i764, align 4
  %memberidx3.i.i63.i765 = getelementptr inbounds %FloRange, ptr %934, i64 0, i32 3
  store i64 %939, ptr %memberidx3.i.i63.i765, align 4
  store i64 42, ptr %933, align 4
  %memberidx1.i64.i766 = getelementptr inbounds %Token, ptr %933, i64 0, i32 1
  store ptr %934, ptr %memberidx1.i64.i766, align 8
  br label %common.ret

if.entry4.i771:                                   ; preds = %if.entry.i56.i757
  %940 = load i64, ptr %memberidx.i.i702, align 4
  %941 = load ptr, ptr %memberidx1.i.i703, align 8
  %memberidx2.i.i74.i770 = getelementptr inbounds %string, ptr %941, i64 0, i32 2
  %942 = load i64, ptr %memberidx2.i.i74.i770, align 4
  %.not870 = icmp slt i64 %940, %942
  br i1 %.not870, label %ifend.i78.i775, label %Lexer_advance.exit84.i788

ifend.i78.i775:                                   ; preds = %if.entry4.i771
  %943 = load ptr, ptr %941, align 8
  %memberidx2.i76.i773 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %943, i64 0, i32 2
  %944 = load ptr, ptr %memberidx2.i76.i773, align 8
  %945 = add nsw i64 %940, 1
  store i64 %945, ptr %memberidx.i.i702, align 4
  %946 = call i8 %944(ptr nonnull %941, i64 %945)
  store i8 %946, ptr %0, align 1
  %947 = icmp eq i8 %946, 10
  %memberidx9.i79.i776 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %947, label %if.entry6.i81.i778, label %Lexer_advance.exit84.i788.sink.split

if.entry6.i81.i778:                               ; preds = %ifend.i78.i775
  store i64 0, ptr %memberidx9.i79.i776, align 4
  %memberidx10.i80.i777 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i788.sink.split

Lexer_advance.exit84.i788.sink.split:             ; preds = %ifend.i78.i775, %if.entry6.i81.i778
  %memberidx9.i79.i776.sink1014 = phi ptr [ %memberidx10.i80.i777, %if.entry6.i81.i778 ], [ %memberidx9.i79.i776, %ifend.i78.i775 ]
  %948 = load i64, ptr %memberidx9.i79.i776.sink1014, align 4
  %949 = add nsw i64 %948, 1
  store i64 %949, ptr %memberidx9.i79.i776.sink1014, align 4
  br label %Lexer_advance.exit84.i788

Lexer_advance.exit84.i788:                        ; preds = %Lexer_advance.exit84.i788.sink.split, %if.entry4.i771
  %950 = call ptr @malloc(i32 16)
  %951 = call ptr @malloc(i32 32)
  %952 = load i64, ptr %memberidx.i.i702, align 4
  %953 = add i64 %952, -2
  %954 = add nsw i64 %952, 1
  %memberidx2.i67.i782 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %955 = load i64, ptr %memberidx2.i67.i782, align 4
  %956 = add i64 %955, -3
  %memberidx3.i68.i783 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %957 = load i64, ptr %memberidx3.i68.i783, align 4
  store i64 %953, ptr %951, align 4
  %memberidx1.i.i69.i784 = getelementptr inbounds %FloRange, ptr %951, i64 0, i32 1
  store i64 %954, ptr %memberidx1.i.i69.i784, align 4
  %memberidx2.i.i70.i785 = getelementptr inbounds %FloRange, ptr %951, i64 0, i32 2
  store i64 %956, ptr %memberidx2.i.i70.i785, align 4
  %memberidx3.i.i71.i786 = getelementptr inbounds %FloRange, ptr %951, i64 0, i32 3
  store i64 %957, ptr %memberidx3.i.i71.i786, align 4
  store i64 22, ptr %950, align 4
  %memberidx1.i65.i787 = getelementptr inbounds %Token, ptr %950, i64 0, i32 1
  store ptr %951, ptr %memberidx1.i65.i787, align 8
  br label %common.ret

ifend6.i796:                                      ; preds = %Lexer_advance.exit50.i755, %if.entry.i56.i757
  %958 = call ptr @malloc(i32 16)
  %959 = call ptr @malloc(i32 32)
  %960 = load i64, ptr %memberidx.i.i702, align 4
  %961 = add i64 %960, -1
  %962 = add nsw i64 %960, 1
  %memberidx2.i26.i790 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %963 = load i64, ptr %memberidx2.i26.i790, align 4
  %964 = add i64 %963, -2
  %memberidx3.i27.i791 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %965 = load i64, ptr %memberidx3.i27.i791, align 4
  store i64 %961, ptr %959, align 4
  %memberidx1.i.i28.i792 = getelementptr inbounds %FloRange, ptr %959, i64 0, i32 1
  store i64 %962, ptr %memberidx1.i.i28.i792, align 4
  %memberidx2.i.i29.i793 = getelementptr inbounds %FloRange, ptr %959, i64 0, i32 2
  store i64 %964, ptr %memberidx2.i.i29.i793, align 4
  %memberidx3.i.i30.i794 = getelementptr inbounds %FloRange, ptr %959, i64 0, i32 3
  store i64 %965, ptr %memberidx3.i.i30.i794, align 4
  store i64 48, ptr %958, align 4
  %memberidx1.i24.i795 = getelementptr inbounds %Token, ptr %958, i64 0, i32 1
  store ptr %959, ptr %memberidx1.i24.i795, align 8
  br label %common.ret

if.entry84:                                       ; preds = %ifend11
  %memberidx.i.i797 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %966 = load i64, ptr %memberidx.i.i797, align 4
  %967 = add nsw i64 %966, 1
  %memberidx1.i.i798 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %968 = load ptr, ptr %memberidx1.i.i798, align 8
  %memberidx2.i.i799 = getelementptr inbounds %string, ptr %968, i64 0, i32 2
  %969 = load i64, ptr %memberidx2.i.i799, align 4
  %970 = icmp slt i64 %967, %969
  br i1 %970, label %if.entry.i.i801, label %Lexer_dot_token.exit

if.entry.i.i801:                                  ; preds = %if.entry84
  %971 = load ptr, ptr %968, align 8
  %memberidx4.i.i800 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %971, i64 0, i32 2
  %972 = load ptr, ptr %memberidx4.i.i800, align 8
  %973 = call i8 %972(ptr nonnull %968, i64 %967)
  %phi.cmp = icmp eq i8 %973, 46
  br i1 %phi.cmp, label %if.entry.i807, label %Lexer_dot_token.exit

if.entry.i807:                                    ; preds = %if.entry.i.i801
  %974 = load i64, ptr %memberidx.i.i797, align 4
  %975 = load ptr, ptr %memberidx1.i.i798, align 8
  %memberidx2.i.i.i806 = getelementptr inbounds %string, ptr %975, i64 0, i32 2
  %976 = load i64, ptr %memberidx2.i.i.i806, align 4
  %.not = icmp slt i64 %974, %976
  br i1 %.not, label %ifend.i.i811, label %Lexer_advance.exit.i820

ifend.i.i811:                                     ; preds = %if.entry.i807
  %977 = load ptr, ptr %975, align 8
  %memberidx2.i11.i809 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %977, i64 0, i32 2
  %978 = load ptr, ptr %memberidx2.i11.i809, align 8
  %979 = add nsw i64 %974, 1
  store i64 %979, ptr %memberidx.i.i797, align 4
  %980 = call i8 %978(ptr nonnull %975, i64 %979)
  store i8 %980, ptr %0, align 1
  %981 = icmp eq i8 %980, 10
  %memberidx9.i.i812 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %981, label %if.entry6.i.i814, label %Lexer_advance.exit.i820.sink.split

if.entry6.i.i814:                                 ; preds = %ifend.i.i811
  store i64 0, ptr %memberidx9.i.i812, align 4
  %memberidx10.i.i813 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i820.sink.split

Lexer_advance.exit.i820.sink.split:               ; preds = %ifend.i.i811, %if.entry6.i.i814
  %memberidx9.i.i812.sink1016 = phi ptr [ %memberidx10.i.i813, %if.entry6.i.i814 ], [ %memberidx9.i.i812, %ifend.i.i811 ]
  %982 = load i64, ptr %memberidx9.i.i812.sink1016, align 4
  %983 = add nsw i64 %982, 1
  store i64 %983, ptr %memberidx9.i.i812.sink1016, align 4
  br label %Lexer_advance.exit.i820

Lexer_advance.exit.i820:                          ; preds = %Lexer_advance.exit.i820.sink.split, %if.entry.i807
  %984 = load i64, ptr %memberidx.i.i797, align 4
  %985 = add nsw i64 %984, 1
  %986 = load ptr, ptr %memberidx1.i.i798, align 8
  %memberidx2.i14.i819 = getelementptr inbounds %string, ptr %986, i64 0, i32 2
  %987 = load i64, ptr %memberidx2.i14.i819, align 4
  %988 = icmp slt i64 %985, %987
  br i1 %988, label %if.entry.i17.i, label %Lexer_dot_token.exit

if.entry.i17.i:                                   ; preds = %Lexer_advance.exit.i820
  %989 = load ptr, ptr %986, align 8
  %memberidx4.i16.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %989, i64 0, i32 2
  %990 = load ptr, ptr %memberidx4.i16.i, align 8
  %991 = call i8 %990(ptr nonnull %986, i64 %985)
  %phi.cmp864 = icmp eq i8 %991, 46
  br i1 %phi.cmp864, label %if.entry1.i830, label %Lexer_dot_token.exit

if.entry1.i830:                                   ; preds = %if.entry.i17.i
  %992 = load i64, ptr %memberidx.i.i797, align 4
  %993 = load ptr, ptr %memberidx1.i.i798, align 8
  %memberidx2.i.i27.i = getelementptr inbounds %string, ptr %993, i64 0, i32 2
  %994 = load i64, ptr %memberidx2.i.i27.i, align 4
  %.not865 = icmp slt i64 %992, %994
  br i1 %.not865, label %ifend.i31.i, label %Lexer_dot_token.exit

ifend.i31.i:                                      ; preds = %if.entry1.i830
  %995 = load ptr, ptr %993, align 8
  %memberidx2.i29.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %995, i64 0, i32 2
  %996 = load ptr, ptr %memberidx2.i29.i, align 8
  %997 = add nsw i64 %992, 1
  store i64 %997, ptr %memberidx.i.i797, align 4
  %998 = call i8 %996(ptr nonnull %993, i64 %997)
  store i8 %998, ptr %0, align 1
  %999 = icmp eq i8 %998, 10
  %memberidx9.i32.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %999, label %if.entry6.i34.i, label %Lexer_dot_token.exit.sink.split

if.entry6.i34.i:                                  ; preds = %ifend.i31.i
  store i64 0, ptr %memberidx9.i32.i, align 4
  %memberidx10.i33.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_dot_token.exit.sink.split

Lexer_dot_token.exit.sink.split:                  ; preds = %ifend.i31.i, %if.entry6.i34.i
  %memberidx10.i33.i.sink1018 = phi ptr [ %memberidx10.i33.i, %if.entry6.i34.i ], [ %memberidx9.i32.i, %ifend.i31.i ]
  %1000 = load i64, ptr %memberidx10.i33.i.sink1018, align 4
  %1001 = add nsw i64 %1000, 1
  store i64 %1001, ptr %memberidx10.i33.i.sink1018, align 4
  br label %Lexer_dot_token.exit

Lexer_dot_token.exit:                             ; preds = %Lexer_dot_token.exit.sink.split, %Lexer_advance.exit.i820, %if.entry84, %if.entry1.i830, %if.entry.i.i801, %if.entry.i17.i
  %token.0.i = phi i64 [ 52, %if.entry.i17.i ], [ 50, %if.entry.i.i801 ], [ 53, %if.entry1.i830 ], [ 50, %if.entry84 ], [ 52, %Lexer_advance.exit.i820 ], [ 53, %Lexer_dot_token.exit.sink.split ]
  %length.0.i821 = phi i64 [ 2, %if.entry.i17.i ], [ 1, %if.entry.i.i801 ], [ 3, %if.entry1.i830 ], [ 1, %if.entry84 ], [ 2, %Lexer_advance.exit.i820 ], [ 3, %Lexer_dot_token.exit.sink.split ]
  %1002 = call ptr @malloc(i32 16)
  %1003 = call ptr @malloc(i32 32)
  %1004 = load i64, ptr %memberidx.i.i797, align 4
  %1005 = sub nsw i64 1, %length.0.i821
  %1006 = add i64 %1005, %1004
  %1007 = add nsw i64 %1004, 1
  %memberidx2.i20.i823 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1008 = load i64, ptr %memberidx2.i20.i823, align 4
  %1009 = sub i64 %1008, %length.0.i821
  %memberidx3.i21.i824 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1010 = load i64, ptr %memberidx3.i21.i824, align 4
  store i64 %1006, ptr %1003, align 4
  %memberidx1.i.i22.i825 = getelementptr inbounds %FloRange, ptr %1003, i64 0, i32 1
  store i64 %1007, ptr %memberidx1.i.i22.i825, align 4
  %memberidx2.i.i23.i826 = getelementptr inbounds %FloRange, ptr %1003, i64 0, i32 2
  store i64 %1009, ptr %memberidx2.i.i23.i826, align 4
  %memberidx3.i.i.i827 = getelementptr inbounds %FloRange, ptr %1003, i64 0, i32 3
  store i64 %1010, ptr %memberidx3.i.i.i827, align 4
  store i64 %token.0.i, ptr %1002, align 4
  %memberidx1.i24.i828 = getelementptr inbounds %Token, ptr %1002, i64 0, i32 1
  store ptr %1003, ptr %memberidx1.i24.i828, align 8
  br label %common.ret

if.entry87:                                       ; preds = %ifend11
  %1011 = tail call ptr @malloc(i32 16)
  %1012 = tail call ptr @malloc(i32 32)
  %memberidx90 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1013 = load i64, ptr %memberidx90, align 4
  %memberidx91 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1014 = load i64, ptr %memberidx91, align 4
  %memberidx2.i832 = getelementptr inbounds %FloRange, ptr %1012, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %1012, i8 0, i64 16, i1 false)
  store i64 %1013, ptr %memberidx2.i832, align 4
  %memberidx3.i833 = getelementptr inbounds %FloRange, ptr %1012, i64 0, i32 3
  store i64 %1014, ptr %memberidx3.i833, align 4
  store i64 46, ptr %1011, align 4
  %memberidx1.i834 = getelementptr inbounds %Token, ptr %1011, i64 0, i32 1
  store ptr %1012, ptr %memberidx1.i834, align 8
  br label %common.ret

ifend89:                                          ; preds = %ifend11
  %memberidx92 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1015 = load ptr, ptr %memberidx92, align 8
  %1016 = load ptr, ptr %1015, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1016, i64 0, i32 1
  %1017 = load ptr, ptr %memberidx93, align 8
  %memberidx94 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1018 = load i64, ptr %memberidx94, align 4
  %1019 = call ptr %1017(ptr nonnull %1015, i64 %1018, i64 1)
  %memberidx95 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 2
  %1020 = load ptr, ptr %memberidx95, align 8
  %1021 = tail call ptr @malloc(i32 24)
  %1022 = load ptr, ptr %1019, align 8
  %memberidx96 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1022, i64 0, i32 5
  %1023 = load ptr, ptr %memberidx96, align 8
  %1024 = call ptr %1023(ptr nonnull %1019)
  %1025 = alloca ptr, align 8
  %1026 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %1025, ptr nonnull @55, ptr %1024)
  %1027 = load ptr, ptr %1025, align 8
  %1028 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %1028, align 8
  %memberidx.i405 = getelementptr inbounds %string, ptr %1028, i64 0, i32 1
  store ptr %1027, ptr %memberidx.i405, align 8
  %memberidx1.i406 = getelementptr inbounds %string, ptr %1028, i64 0, i32 2
  store i64 %1026, ptr %memberidx1.i406, align 4
  %memberidx2.i407 = getelementptr inbounds %string, ptr %1028, i64 0, i32 3
  store i64 %1026, ptr %memberidx2.i407, align 4
  tail call void @free(ptr %1024)
  %1029 = call ptr @malloc(i32 32)
  %1030 = load i64, ptr %memberidx94, align 4
  %1031 = add nsw i64 %1030, 1
  %memberidx2.i172 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1032 = load i64, ptr %memberidx2.i172, align 4
  %1033 = add i64 %1032, -1
  %memberidx3.i173 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1034 = load i64, ptr %memberidx3.i173, align 4
  store i64 %1030, ptr %1029, align 4
  %memberidx1.i.i174 = getelementptr inbounds %FloRange, ptr %1029, i64 0, i32 1
  store i64 %1031, ptr %memberidx1.i.i174, align 4
  %memberidx2.i.i175 = getelementptr inbounds %FloRange, ptr %1029, i64 0, i32 2
  store i64 %1033, ptr %memberidx2.i.i175, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %1029, i64 0, i32 3
  store i64 %1034, ptr %memberidx3.i.i, align 4
  store i64 0, ptr %1021, align 4
  %memberidx1.i169 = getelementptr inbounds %FloError, ptr %1021, i64 0, i32 2
  store ptr %1029, ptr %memberidx1.i169, align 8
  %memberidx2.i170 = getelementptr inbounds %FloError, ptr %1021, i64 0, i32 1
  store ptr %1028, ptr %memberidx2.i170, align 8
  %memberidx.i165 = getelementptr inbounds %Array_FloError_, ptr %1020, i64 0, i32 2
  %1035 = load i64, ptr %memberidx.i165, align 4
  %memberidx1.i = getelementptr inbounds %Array_FloError_, ptr %1020, i64 0, i32 3
  %1036 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %1035, %1036
  br i1 %.not.i, label %Array_FloError____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %ifend89
  %1037 = shl i64 %1036, 1
  store i64 %1037, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_FloError_, ptr %1020, i64 0, i32 1
  %1038 = load ptr, ptr %memberidx2.i.i, align 8
  %1039 = shl i64 %1036, 4
  %1040 = call ptr @realloc(ptr %1038, i64 %1039)
  store ptr %1040, ptr %memberidx2.i.i, align 8
  br label %Array_FloError____sl__.exit

Array_FloError____sl__.exit:                      ; preds = %ifend89, %if.entry.i
  %1041 = load i64, ptr %memberidx.i165, align 4
  %1042 = add nsw i64 %1041, 1
  store i64 %1042, ptr %memberidx.i165, align 4
  %memberidx4.i = getelementptr inbounds %Array_FloError_, ptr %1020, i64 0, i32 1
  %1043 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %1043, i64 %1041
  store ptr %1021, ptr %ptridx.i, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %1019, i64 0, i32 1
  %1044 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %1044)
  tail call void @free(ptr %1019)
  br label %common.ret
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare double @atof(ptr nocapture) local_unnamed_addr #10

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare i64 @atol(ptr nocapture) local_unnamed_addr #10

; Function Attrs: mustprogress nounwind willreturn
define internal void @StringBuilder_add_byte(ptr nocapture %0, i8 %1) #11 {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  %5 = sub i64 %3, %4
  %6 = icmp slt i64 %5, 2
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %7 = shl i64 %3, 1
  store i64 %7, ptr %memberidx, align 4
  %memberidx2.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %9 = call ptr @realloc(ptr %8, i64 %7)
  store ptr %9, ptr %memberidx2.i, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx1, align 4
  %11 = getelementptr inbounds i8, ptr %9, i64 %10
  store ptr %11, ptr %memberidx5.i, align 8
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %12 = load ptr, ptr %memberidx2, align 8
  store i8 %1, ptr %12, align 1
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 1
  store ptr %14, ptr %memberidx2, align 8
  %15 = load i64, ptr %memberidx1, align 4
  %16 = add nsw i64 %15, 1
  store i64 %16, ptr %memberidx1, align 4
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define internal void @StringBuilder_add_bytes_length(ptr nocapture %0, ptr nocapture readonly %1, i64 %2) #11 {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %5 = load i64, ptr %memberidx1, align 4
  %6 = sub i64 %4, %5
  %.not = icmp sgt i64 %6, %2
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  %7 = shl i64 %4, 1
  store i64 %7, ptr %memberidx, align 4
  %memberidx2.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %9 = call ptr @realloc(ptr %8, i64 %7)
  store ptr %9, ptr %memberidx2.i, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx1, align 4
  %11 = getelementptr inbounds i8, ptr %9, i64 %10
  store ptr %11, ptr %memberidx5.i, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %12 = load ptr, ptr %memberidx2, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %1, i64 %2, i1 false)
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 %2
  store ptr %14, ptr %memberidx2, align 8
  %15 = load i64, ptr %memberidx1, align 4
  %16 = add nsw i64 %15, %2
  store i64 %16, ptr %memberidx1, align 4
  ret void
}

define internal void @StringBuilder_append_string(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr nonnull %1)
  %memberidx2 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void %4(ptr nonnull %0, ptr %7, i64 %8)
  ret void
}

define internal noalias ptr @StringBuilder_get_string(ptr nocapture readonly %0) {
  %2 = tail call ptr @malloc(i32 32)
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %3, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %4, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %4, ptr %memberidx2.i, align 4
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ImportClause__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ImportClause__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ImportNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ImportNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_VarDeclarationStatement__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_VarDeclarationStatement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_EnumNodeField__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumNodeField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_EnumNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_TypeAliasNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_TypeAliasNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ConstDeclarationStatement__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ConstDeclarationStatement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ArgNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ArgNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_StatementNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_StatementNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_MethodNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_MethodNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FieldNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FieldNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_TypeNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_TypeNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_GenericParameterNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_GenericParameterNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ClassDeclarationNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassDeclarationNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FunctionDeclarationNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FunctionDeclarationNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc void @ModuleAST_constructor(ptr nocapture writeonly %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionDeclarationNode_, ptr %2, align 8
  %memberidx.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 1
  %3 = call ptr @malloc(i32 64)
  store ptr %3, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  store ptr %2, ptr %0, align 8
  %memberidx3 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 1
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassDeclarationNode_, ptr %4, align 8
  %memberidx.i27 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i27, align 4
  %memberidx1.i28 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i28, align 4
  %memberidx2.i29 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 1
  %5 = call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i29, align 8
  store i64 0, ptr %memberidx.i27, align 4
  store ptr %4, ptr %memberidx3, align 8
  %memberidx6 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 3
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ImportNode_, ptr %6, align 8
  %memberidx.i30 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx.i30, align 4
  %memberidx1.i31 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 3
  store i64 8, ptr %memberidx1.i31, align 4
  %memberidx2.i32 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 1
  %7 = call ptr @malloc(i32 64)
  store ptr %7, ptr %memberidx2.i32, align 8
  store i64 0, ptr %memberidx.i30, align 4
  store ptr %6, ptr %memberidx6, align 8
  %memberidx9 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 4
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ConstDeclarationStatement_, ptr %8, align 8
  %memberidx.i33 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i33, align 4
  %memberidx1.i34 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i34, align 4
  %memberidx2.i35 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 1
  %9 = call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i35, align 8
  store i64 0, ptr %memberidx.i33, align 4
  store ptr %8, ptr %memberidx9, align 8
  %memberidx12 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 5
  %10 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_VarDeclarationStatement_, ptr %10, align 8
  %memberidx.i36 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 2
  store i64 0, ptr %memberidx.i36, align 4
  %memberidx1.i37 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 3
  store i64 8, ptr %memberidx1.i37, align 4
  %memberidx2.i38 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 1
  %11 = call ptr @malloc(i32 64)
  store ptr %11, ptr %memberidx2.i38, align 8
  store i64 0, ptr %memberidx.i36, align 4
  store ptr %10, ptr %memberidx12, align 8
  %memberidx15 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 2
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumNode_, ptr %12, align 8
  %memberidx.i39 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx.i39, align 4
  %memberidx1.i40 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 3
  store i64 8, ptr %memberidx1.i40, align 4
  %memberidx2.i41 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 1
  %13 = call ptr @malloc(i32 64)
  store ptr %13, ptr %memberidx2.i41, align 8
  store i64 0, ptr %memberidx.i39, align 4
  store ptr %12, ptr %memberidx15, align 8
  %memberidx18 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 6
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeAliasNode_, ptr %14, align 8
  %memberidx.i42 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 2
  store i64 0, ptr %memberidx.i42, align 4
  %memberidx1.i43 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 3
  store i64 8, ptr %memberidx1.i43, align 4
  %memberidx2.i44 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 1
  %15 = call ptr @malloc(i32 64)
  store ptr %15, ptr %memberidx2.i44, align 8
  store i64 0, ptr %memberidx.i42, align 4
  store ptr %14, ptr %memberidx18, align 8
  ret void
}

define internal fastcc noalias ptr @Parser_parse(ptr %0, ptr %1) unnamed_addr {
  %3 = alloca %Parser, align 8
  store ptr %0, ptr %3, align 8
  %memberidx1.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 8
  %memberidx2.i72 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx2.i72, align 4
  %5 = icmp sgt i64 %4, -1
  br i1 %5, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %2
  %memberidx3.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 2
  store i64 0, ptr %memberidx2.i, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i.i73, align 8
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %memberidx3.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %2, %if.entry.i
  %8 = tail call ptr @malloc(i32 56)
  call fastcc void @ModuleAST_constructor(ptr %8)
  %memberidx.i75 = getelementptr inbounds %Parser, ptr %3, i64 0, i32 2
  %9 = load ptr, ptr %memberidx.i75, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp eq i64 %10, 33
  %12 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx3.i.i, align 4
  %14 = icmp eq i64 %13, 0
  %15 = and i1 %11, %14
  br i1 %15, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %Parser_advance.exit
  %16 = load ptr, ptr %3, align 8
  %memberidx2.i12.i = getelementptr inbounds %Array_Token_, ptr %16, i64 0, i32 2
  %memberidx.i.i.i78 = getelementptr inbounds %Array_Token_, ptr %16, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %17 = load i64, ptr %memberidx2.i, align 8
  %18 = load i64, ptr %memberidx2.i12.i, align 4
  %19 = icmp slt i64 %17, %18
  br i1 %19, label %if.entry.i.i79, label %Parser_advance.exit.i

if.entry.i.i79:                                   ; preds = %while.entry.i
  %20 = add nsw i64 %17, 1
  store i64 %20, ptr %memberidx2.i, align 8
  %21 = load ptr, ptr %memberidx.i.i.i78, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %22, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i79, %while.entry.i
  %23 = load ptr, ptr %memberidx.i75, align 8
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 33
  %26 = load i64, ptr %memberidx3.i.i, align 4
  %27 = icmp eq i64 %26, 0
  %28 = and i1 %25, %27
  br i1 %28, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %Parser_advance.exit
  %29 = load ptr, ptr %memberidx.i75, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp ne i64 %30, 46
  %32 = load i64, ptr %memberidx3.i.i, align 4
  %33 = icmp eq i64 %32, 0
  %34 = and i1 %31, %33
  br i1 %34, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_new_lines.exit
  %memberidx32 = getelementptr inbounds %ModuleAST, ptr %8, i64 0, i32 5
  %memberidx26 = getelementptr inbounds %ModuleAST, ptr %8, i64 0, i32 4
  %memberidx20 = getelementptr inbounds %ModuleAST, ptr %8, i64 0, i32 3
  %memberidx14 = getelementptr inbounds %ModuleAST, ptr %8, i64 0, i32 2
  %memberidx8 = getelementptr inbounds %ModuleAST, ptr %8, i64 0, i32 1
  %memberidx40 = getelementptr inbounds %ModuleAST, ptr %8, i64 0, i32 6
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_new_lines.exit135
  %35 = load ptr, ptr %memberidx.i75, align 8
  %36 = load i64, ptr %35, align 4
  switch i64 %36, label %else30 [
    i64 72, label %if.entry
    i64 81, label %if.entry5
    i64 82, label %if.entry11
    i64 76, label %if.entry17
    i64 55, label %if.entry23
    i64 56, label %if.entry29
  ]

while.end:                                        ; preds = %Parser_new_lines.exit135, %Parser_new_lines.exit
  ret ptr %8

if.entry:                                         ; preds = %while.entry
  %37 = load i64, ptr %memberidx2.i, align 8
  %38 = load ptr, ptr %3, align 8
  %memberidx2.i87 = getelementptr inbounds %Array_Token_, ptr %38, i64 0, i32 2
  %39 = load i64, ptr %memberidx2.i87, align 4
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %if.entry.i91, label %Parser_advance.exit92

if.entry.i91:                                     ; preds = %if.entry
  %41 = add nsw i64 %37, 1
  store i64 %41, ptr %memberidx2.i, align 8
  %memberidx.i.i89 = getelementptr inbounds %Array_Token_, ptr %38, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i.i89, align 8
  %ptridx.i.i90 = getelementptr inbounds ptr, ptr %42, i64 %41
  %43 = load ptr, ptr %ptridx.i.i90, align 8
  store ptr %43, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit92

Parser_advance.exit92:                            ; preds = %if.entry, %if.entry.i91
  %44 = load ptr, ptr %8, align 8
  %45 = call ptr @malloc(i32 33)
  %memberidx.i.i98 = getelementptr inbounds %FunctionDeclarationNode, ptr %45, i64 0, i32 1
  %46 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ArgNode_, ptr %46, align 8
  %memberidx.i.i.i99 = getelementptr inbounds %Array_ArgNode_, ptr %46, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i99, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Array_ArgNode_, ptr %46, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i100 = getelementptr inbounds %Array_ArgNode_, ptr %46, i64 0, i32 1
  %47 = call ptr @malloc(i32 64)
  store ptr %47, ptr %memberidx2.i.i.i100, align 8
  store i64 0, ptr %memberidx.i.i.i99, align 4
  store ptr %46, ptr %memberidx.i.i98, align 8
  %memberidx3.i.i102 = getelementptr inbounds %FunctionDeclarationNode, ptr %45, i64 0, i32 4
  store i1 false, ptr %memberidx3.i.i102, align 1
  %48 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %48, ptr %45, align 8
  %49 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 25)
  %50 = load ptr, ptr %memberidx.i75, align 8
  %51 = load i64, ptr %50, align 4
  %.not.i104 = icmp eq i64 %51, 26
  br i1 %.not.i104, label %ifend.i, label %if.entry.i106

if.entry.i106:                                    ; preds = %Parser_advance.exit92
  %52 = load ptr, ptr %memberidx.i.i98, align 8
  call fastcc void @Parser_parse_args(ptr nonnull %3, ptr %52)
  br label %ifend.i

ifend.i:                                          ; preds = %if.entry.i106, %Parser_advance.exit92
  %53 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  %54 = load ptr, ptr %memberidx.i75, align 8
  %55 = load i64, ptr %54, align 4
  %56 = icmp eq i64 %55, 1
  br i1 %56, label %if.entry6.i, label %else7.i

if.entry6.i:                                      ; preds = %ifend.i
  %57 = load i64, ptr %memberidx2.i, align 8
  %58 = load ptr, ptr %3, align 8
  %memberidx2.i34.i = getelementptr inbounds %Array_Token_, ptr %58, i64 0, i32 2
  %59 = load i64, ptr %memberidx2.i34.i, align 4
  %60 = icmp slt i64 %57, %59
  br i1 %60, label %if.entry.i.i108, label %Parser_advance.exit.i109

if.entry.i.i108:                                  ; preds = %if.entry6.i
  %61 = add nsw i64 %57, 1
  store i64 %61, ptr %memberidx2.i, align 8
  %memberidx.i.i36.i = getelementptr inbounds %Array_Token_, ptr %58, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i.i36.i, align 8
  %ptridx.i.i.i107 = getelementptr inbounds ptr, ptr %62, i64 %61
  %63 = load ptr, ptr %ptridx.i.i.i107, align 8
  store ptr %63, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i109

Parser_advance.exit.i109:                         ; preds = %if.entry.i.i108, %if.entry6.i
  %memberidx9.i = getelementptr inbounds %FunctionDeclarationNode, ptr %45, i64 0, i32 3
  %64 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %64, ptr %memberidx9.i, align 8
  br label %ifend8.i

else7.i:                                          ; preds = %ifend.i
  %memberidx10.i = getelementptr inbounds %FunctionDeclarationNode, ptr %45, i64 0, i32 3
  %65 = call ptr @malloc(i32 16)
  %66 = call ptr @malloc(i32 32)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %66, i8 0, i64 32, i1 false)
  store ptr %66, ptr %65, align 8
  %memberidx.i39.i = getelementptr inbounds %TypeNode, ptr %65, i64 0, i32 1
  store i64 10, ptr %memberidx.i39.i, align 4
  store ptr %65, ptr %memberidx10.i, align 8
  br label %ifend8.i

ifend8.i:                                         ; preds = %else7.i, %Parser_advance.exit.i109
  %67 = load ptr, ptr %memberidx.i75, align 8
  %68 = load i64, ptr %67, align 4
  %69 = icmp eq i64 %68, 27
  br i1 %69, label %if.entry13.i, label %else14.i

if.entry13.i:                                     ; preds = %ifend8.i
  %memberidx16.i = getelementptr inbounds %FunctionDeclarationNode, ptr %45, i64 0, i32 2
  %70 = call fastcc ptr @Parser_parse_block(ptr nonnull %3)
  store ptr %70, ptr %memberidx16.i, align 8
  br label %Parser_parse_function.exit

else14.i:                                         ; preds = %ifend8.i
  store i1 true, ptr %memberidx3.i.i102, align 1
  br label %Parser_parse_function.exit

Parser_parse_function.exit:                       ; preds = %if.entry13.i, %else14.i
  %memberidx.i111 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %44, i64 0, i32 2
  %71 = load i64, ptr %memberidx.i111, align 4
  %memberidx1.i112 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %44, i64 0, i32 3
  %72 = load i64, ptr %memberidx1.i112, align 4
  %.not.i113 = icmp slt i64 %71, %72
  br i1 %.not.i113, label %Array_FunctionDeclarationNode____sl__.exit, label %if.entry.i116

if.entry.i116:                                    ; preds = %Parser_parse_function.exit
  %73 = shl i64 %72, 1
  store i64 %73, ptr %memberidx1.i112, align 4
  %memberidx2.i.i115 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %44, i64 0, i32 1
  %74 = load ptr, ptr %memberidx2.i.i115, align 8
  %75 = shl i64 %72, 4
  %76 = call ptr @realloc(ptr %74, i64 %75)
  store ptr %76, ptr %memberidx2.i.i115, align 8
  br label %Array_FunctionDeclarationNode____sl__.exit

Array_FunctionDeclarationNode____sl__.exit:       ; preds = %Parser_parse_function.exit, %if.entry.i116
  %77 = load i64, ptr %memberidx.i111, align 4
  %78 = add nsw i64 %77, 1
  store i64 %78, ptr %memberidx.i111, align 4
  %memberidx4.i117 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %44, i64 0, i32 1
  br label %ifend

ifend:                                            ; preds = %Array_TypeAliasNode____sl__.exit, %Parser_error.exit, %Array_VarDeclarationStatement____sl__.exit, %Array_ConstDeclarationStatement____sl__.exit, %Array_ImportNode____sl__.exit, %Array_EnumNode____sl__.exit, %Array_ClassDeclarationNode____sl__.exit, %Array_FunctionDeclarationNode____sl__.exit
  %memberidx4.i.sink = phi ptr [ %memberidx4.i, %Array_TypeAliasNode____sl__.exit ], [ %memberidx4.i.i, %Parser_error.exit ], [ %memberidx4.i220, %Array_VarDeclarationStatement____sl__.exit ], [ %memberidx4.i211, %Array_ConstDeclarationStatement____sl__.exit ], [ %memberidx4.i202, %Array_ImportNode____sl__.exit ], [ %memberidx4.i170, %Array_EnumNode____sl__.exit ], [ %memberidx4.i161, %Array_ClassDeclarationNode____sl__.exit ], [ %memberidx4.i117, %Array_FunctionDeclarationNode____sl__.exit ]
  %.sink285 = phi i64 [ %509, %Array_TypeAliasNode____sl__.exit ], [ %523, %Parser_error.exit ], [ %480, %Array_VarDeclarationStatement____sl__.exit ], [ %470, %Array_ConstDeclarationStatement____sl__.exit ], [ %460, %Array_ImportNode____sl__.exit ], [ %337, %Array_EnumNode____sl__.exit ], [ %214, %Array_ClassDeclarationNode____sl__.exit ], [ %77, %Array_FunctionDeclarationNode____sl__.exit ]
  %.sink = phi ptr [ %499, %Array_TypeAliasNode____sl__.exit ], [ %514, %Parser_error.exit ], [ %473, %Array_VarDeclarationStatement____sl__.exit ], [ %463, %Array_ConstDeclarationStatement____sl__.exit ], [ %347, %Array_ImportNode____sl__.exit ], [ %224, %Array_EnumNode____sl__.exit ], [ %114, %Array_ClassDeclarationNode____sl__.exit ], [ %45, %Array_FunctionDeclarationNode____sl__.exit ]
  %79 = load ptr, ptr %memberidx4.i.sink, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %79, i64 %.sink285
  store ptr %.sink, ptr %ptridx.i, align 8
  %80 = load ptr, ptr %memberidx.i75, align 8
  %81 = load i64, ptr %80, align 4
  %82 = icmp eq i64 %81, 33
  %83 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i123 = getelementptr inbounds %Array_FloError_, ptr %83, i64 0, i32 2
  %84 = load i64, ptr %memberidx3.i.i123, align 4
  %85 = icmp eq i64 %84, 0
  %86 = and i1 %82, %85
  br i1 %86, label %while.entry.i126.preheader, label %Parser_new_lines.exit135

while.entry.i126.preheader:                       ; preds = %ifend
  %87 = load ptr, ptr %3, align 8
  %memberidx2.i12.i125 = getelementptr inbounds %Array_Token_, ptr %87, i64 0, i32 2
  %memberidx.i.i.i128 = getelementptr inbounds %Array_Token_, ptr %87, i64 0, i32 1
  br label %while.entry.i126

while.entry.i126:                                 ; preds = %while.entry.i126.preheader, %Parser_advance.exit.i134
  %88 = load i64, ptr %memberidx2.i, align 8
  %89 = load i64, ptr %memberidx2.i12.i125, align 4
  %90 = icmp slt i64 %88, %89
  br i1 %90, label %if.entry.i.i130, label %Parser_advance.exit.i134

if.entry.i.i130:                                  ; preds = %while.entry.i126
  %91 = add nsw i64 %88, 1
  store i64 %91, ptr %memberidx2.i, align 8
  %92 = load ptr, ptr %memberidx.i.i.i128, align 8
  %ptridx.i.i.i129 = getelementptr inbounds ptr, ptr %92, i64 %91
  %93 = load ptr, ptr %ptridx.i.i.i129, align 8
  store ptr %93, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i134

Parser_advance.exit.i134:                         ; preds = %if.entry.i.i130, %while.entry.i126
  %94 = load ptr, ptr %memberidx.i75, align 8
  %95 = load i64, ptr %94, align 4
  %96 = icmp eq i64 %95, 33
  %97 = load i64, ptr %memberidx3.i.i123, align 4
  %98 = icmp eq i64 %97, 0
  %99 = and i1 %96, %98
  br i1 %99, label %while.entry.i126, label %Parser_new_lines.exit135

Parser_new_lines.exit135:                         ; preds = %Parser_advance.exit.i134, %ifend
  %100 = load ptr, ptr %memberidx.i75, align 8
  %101 = load i64, ptr %100, align 4
  %102 = icmp ne i64 %101, 46
  %103 = load i64, ptr %memberidx3.i.i123, align 4
  %104 = icmp eq i64 %103, 0
  %105 = and i1 %102, %104
  br i1 %105, label %while.entry, label %while.end

if.entry5:                                        ; preds = %while.entry
  %106 = load ptr, ptr %memberidx8, align 8
  %107 = load i64, ptr %memberidx2.i, align 8
  %108 = load ptr, ptr %3, align 8
  %memberidx2.i.i140 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 2
  %109 = load i64, ptr %memberidx2.i.i140, align 4
  %110 = icmp slt i64 %107, %109
  br i1 %110, label %if.entry.i.i144, label %Parser_advance.exit.i150

if.entry.i.i144:                                  ; preds = %if.entry5
  %111 = add nsw i64 %107, 1
  store i64 %111, ptr %memberidx2.i, align 8
  %memberidx.i.i.i142 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 1
  %112 = load ptr, ptr %memberidx.i.i.i142, align 8
  %ptridx.i.i.i143 = getelementptr inbounds ptr, ptr %112, i64 %111
  %113 = load ptr, ptr %ptridx.i.i.i143, align 8
  store ptr %113, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i150

Parser_advance.exit.i150:                         ; preds = %if.entry.i.i144, %if.entry5
  %114 = call ptr @malloc(i32 40)
  %115 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %115, ptr %114, align 8
  %memberidx1.i.i145 = getelementptr inbounds %ClassDeclarationNode, ptr %114, i64 0, i32 3
  %116 = call ptr @malloc(i32 32)
  store ptr @VTableArray_FieldNode_, ptr %116, align 8
  %memberidx.i.i21.i = getelementptr inbounds %Array_FieldNode_, ptr %116, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i21.i, align 4
  %memberidx1.i.i.i146 = getelementptr inbounds %Array_FieldNode_, ptr %116, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i146, align 4
  %memberidx2.i.i.i147 = getelementptr inbounds %Array_FieldNode_, ptr %116, i64 0, i32 1
  %117 = call ptr @malloc(i32 64)
  store ptr %117, ptr %memberidx2.i.i.i147, align 8
  store i64 0, ptr %memberidx.i.i21.i, align 4
  store ptr %116, ptr %memberidx1.i.i145, align 8
  %memberidx4.i.i148 = getelementptr inbounds %ClassDeclarationNode, ptr %114, i64 0, i32 4
  %118 = call ptr @malloc(i32 32)
  store ptr @VTableArray_MethodNode_, ptr %118, align 8
  %memberidx.i15.i.i = getelementptr inbounds %Array_MethodNode_, ptr %118, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i.i, align 4
  %memberidx1.i16.i.i = getelementptr inbounds %Array_MethodNode_, ptr %118, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i.i, align 4
  %memberidx2.i17.i.i = getelementptr inbounds %Array_MethodNode_, ptr %118, i64 0, i32 1
  %119 = call ptr @malloc(i32 64)
  store ptr %119, ptr %memberidx2.i17.i.i, align 8
  store i64 0, ptr %memberidx.i15.i.i, align 4
  store ptr %118, ptr %memberidx4.i.i148, align 8
  %memberidx7.i.i = getelementptr inbounds %ClassDeclarationNode, ptr %114, i64 0, i32 1
  %120 = call ptr @malloc(i32 32)
  store ptr @VTableArray_GenericParameterNode_, ptr %120, align 8
  %memberidx.i18.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %120, i64 0, i32 2
  store i64 0, ptr %memberidx.i18.i.i, align 4
  %memberidx1.i19.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %120, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19.i.i, align 4
  %memberidx2.i20.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %120, i64 0, i32 1
  %121 = call ptr @malloc(i32 64)
  store ptr %121, ptr %memberidx2.i20.i.i, align 8
  store i64 0, ptr %memberidx.i18.i.i, align 4
  store ptr %120, ptr %memberidx7.i.i, align 8
  %memberidx10.i.i = getelementptr inbounds %ClassDeclarationNode, ptr %114, i64 0, i32 2
  store ptr null, ptr %memberidx10.i.i, align 8
  %122 = load ptr, ptr %memberidx.i75, align 8
  %123 = load i64, ptr %122, align 4
  %124 = icmp eq i64 %123, 42
  br i1 %124, label %if.entry.i152, label %ifend.i153

if.entry.i152:                                    ; preds = %Parser_advance.exit.i150
  %125 = load i64, ptr %memberidx2.i, align 8
  %126 = load ptr, ptr %3, align 8
  %memberidx2.i.i24.i = getelementptr inbounds %Array_Token_, ptr %126, i64 0, i32 2
  %127 = load i64, ptr %memberidx2.i.i24.i, align 4
  %128 = icmp slt i64 %125, %127
  br i1 %128, label %if.entry.i.i.i, label %Parser_advance.exit.i.i

if.entry.i.i.i:                                   ; preds = %if.entry.i152
  %129 = add nsw i64 %125, 1
  store i64 %129, ptr %memberidx2.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %126, i64 0, i32 1
  %130 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %130, i64 %129
  %131 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %131, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i.i.i, %if.entry.i152
  %132 = call ptr @malloc(i32 8)
  %133 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %133, ptr %132, align 8
  %134 = load i64, ptr %memberidx.i18.i.i, align 4
  %135 = load i64, ptr %memberidx1.i19.i.i, align 4
  %.not.i21.i.i = icmp slt i64 %134, %135
  br i1 %.not.i21.i.i, label %Array_GenericParameterNode____sl__.exit27.i.i, label %if.entry.i24.i.i

if.entry.i24.i.i:                                 ; preds = %Parser_advance.exit.i.i
  %136 = shl i64 %135, 1
  store i64 %136, ptr %memberidx1.i19.i.i, align 4
  %137 = load ptr, ptr %memberidx2.i20.i.i, align 8
  %138 = shl i64 %135, 4
  %139 = call ptr @realloc(ptr %137, i64 %138)
  store ptr %139, ptr %memberidx2.i20.i.i, align 8
  br label %Array_GenericParameterNode____sl__.exit27.i.i

Array_GenericParameterNode____sl__.exit27.i.i:    ; preds = %if.entry.i24.i.i, %Parser_advance.exit.i.i
  %140 = load i64, ptr %memberidx.i18.i.i, align 4
  %141 = add nsw i64 %140, 1
  store i64 %141, ptr %memberidx.i18.i.i, align 4
  %142 = load ptr, ptr %memberidx2.i20.i.i, align 8
  %ptridx.i26.i.i = getelementptr inbounds ptr, ptr %142, i64 %140
  store ptr %132, ptr %ptridx.i26.i.i, align 8
  %143 = load ptr, ptr %memberidx.i75, align 8
  %144 = load i64, ptr %143, align 4
  %145 = icmp eq i64 %144, 3
  %146 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i30.i.i = getelementptr inbounds %Array_FloError_, ptr %146, i64 0, i32 2
  %147 = load i64, ptr %memberidx3.i30.i.i, align 4
  %148 = icmp eq i64 %147, 0
  %149 = and i1 %145, %148
  br i1 %149, label %while.entry.i.i, label %Parser_parse_generic_parameters.exit.i

while.entry.i.i:                                  ; preds = %Array_GenericParameterNode____sl__.exit27.i.i, %Array_GenericParameterNode____sl__.exit.i.i
  %150 = load i64, ptr %memberidx2.i, align 8
  %151 = load ptr, ptr %3, align 8
  %memberidx2.i32.i.i = getelementptr inbounds %Array_Token_, ptr %151, i64 0, i32 2
  %152 = load i64, ptr %memberidx2.i32.i.i, align 4
  %153 = icmp slt i64 %150, %152
  br i1 %153, label %if.entry.i36.i.i, label %Parser_advance.exit37.i.i

if.entry.i36.i.i:                                 ; preds = %while.entry.i.i
  %154 = add nsw i64 %150, 1
  store i64 %154, ptr %memberidx2.i, align 8
  %memberidx.i.i34.i.i = getelementptr inbounds %Array_Token_, ptr %151, i64 0, i32 1
  %155 = load ptr, ptr %memberidx.i.i34.i.i, align 8
  %ptridx.i.i35.i.i = getelementptr inbounds ptr, ptr %155, i64 %154
  %156 = load ptr, ptr %ptridx.i.i35.i.i, align 8
  store ptr %156, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit37.i.i

Parser_advance.exit37.i.i:                        ; preds = %if.entry.i36.i.i, %while.entry.i.i
  %157 = call ptr @malloc(i32 8)
  %158 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %158, ptr %157, align 8
  %159 = load i64, ptr %memberidx.i18.i.i, align 4
  %160 = load i64, ptr %memberidx1.i19.i.i, align 4
  %.not.i.i.i = icmp slt i64 %159, %160
  br i1 %.not.i.i.i, label %Array_GenericParameterNode____sl__.exit.i.i, label %if.entry.i18.i.i

if.entry.i18.i.i:                                 ; preds = %Parser_advance.exit37.i.i
  %161 = shl i64 %160, 1
  store i64 %161, ptr %memberidx1.i19.i.i, align 4
  %162 = load ptr, ptr %memberidx2.i20.i.i, align 8
  %163 = shl i64 %160, 4
  %164 = call ptr @realloc(ptr %162, i64 %163)
  store ptr %164, ptr %memberidx2.i20.i.i, align 8
  br label %Array_GenericParameterNode____sl__.exit.i.i

Array_GenericParameterNode____sl__.exit.i.i:      ; preds = %if.entry.i18.i.i, %Parser_advance.exit37.i.i
  %165 = load i64, ptr %memberidx.i18.i.i, align 4
  %166 = add nsw i64 %165, 1
  store i64 %166, ptr %memberidx.i18.i.i, align 4
  %167 = load ptr, ptr %memberidx2.i20.i.i, align 8
  %ptridx.i.i27.i = getelementptr inbounds ptr, ptr %167, i64 %165
  store ptr %157, ptr %ptridx.i.i27.i, align 8
  %168 = load ptr, ptr %memberidx.i75, align 8
  %169 = load i64, ptr %168, align 4
  %170 = icmp eq i64 %169, 3
  %171 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i15.i.i = getelementptr inbounds %Array_FloError_, ptr %171, i64 0, i32 2
  %172 = load i64, ptr %memberidx3.i15.i.i, align 4
  %173 = icmp eq i64 %172, 0
  %174 = and i1 %170, %173
  br i1 %174, label %while.entry.i.i, label %Parser_parse_generic_parameters.exit.i

Parser_parse_generic_parameters.exit.i:           ; preds = %Array_GenericParameterNode____sl__.exit.i.i, %Array_GenericParameterNode____sl__.exit27.i.i
  %175 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 41)
  br label %ifend.i153

ifend.i153:                                       ; preds = %Parser_parse_generic_parameters.exit.i, %Parser_advance.exit.i150
  %176 = load ptr, ptr %memberidx.i75, align 8
  %177 = load i64, ptr %176, align 4
  %178 = icmp eq i64 %177, 25
  br i1 %178, label %if.entry5.i, label %ifend7.i

if.entry5.i:                                      ; preds = %ifend.i153
  %179 = load i64, ptr %memberidx2.i, align 8
  %180 = load ptr, ptr %3, align 8
  %memberidx2.i29.i = getelementptr inbounds %Array_Token_, ptr %180, i64 0, i32 2
  %181 = load i64, ptr %memberidx2.i29.i, align 4
  %182 = icmp slt i64 %179, %181
  br i1 %182, label %if.entry.i33.i, label %Parser_advance.exit34.i

if.entry.i33.i:                                   ; preds = %if.entry5.i
  %183 = add nsw i64 %179, 1
  store i64 %183, ptr %memberidx2.i, align 8
  %memberidx.i.i31.i = getelementptr inbounds %Array_Token_, ptr %180, i64 0, i32 1
  %184 = load ptr, ptr %memberidx.i.i31.i, align 8
  %ptridx.i.i32.i = getelementptr inbounds ptr, ptr %184, i64 %183
  %185 = load ptr, ptr %ptridx.i.i32.i, align 8
  store ptr %185, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit34.i

Parser_advance.exit34.i:                          ; preds = %if.entry.i33.i, %if.entry5.i
  %186 = call fastcc ptr @Parser_parse_object_type(ptr nonnull %3)
  store ptr %186, ptr %memberidx10.i.i, align 8
  %187 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  br label %ifend7.i

ifend7.i:                                         ; preds = %Parser_advance.exit34.i, %ifend.i153
  %188 = load ptr, ptr %memberidx.i75, align 8
  %189 = load i64, ptr %188, align 4
  %190 = icmp eq i64 %189, 33
  %191 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i38.i = getelementptr inbounds %Array_FloError_, ptr %191, i64 0, i32 2
  %192 = load i64, ptr %memberidx3.i.i38.i, align 4
  %193 = icmp eq i64 %192, 0
  %194 = and i1 %190, %193
  br i1 %194, label %while.entry.i39.i.preheader, label %Parser_parse_class.exit

while.entry.i39.i.preheader:                      ; preds = %ifend7.i
  %195 = load ptr, ptr %3, align 8
  %memberidx2.i12.i.i = getelementptr inbounds %Array_Token_, ptr %195, i64 0, i32 2
  %memberidx.i.i.i40.i = getelementptr inbounds %Array_Token_, ptr %195, i64 0, i32 1
  br label %while.entry.i39.i

while.entry.i39.i:                                ; preds = %while.entry.i39.i.preheader, %Parser_advance.exit.i43.i
  %196 = load i64, ptr %memberidx2.i, align 8
  %197 = load i64, ptr %memberidx2.i12.i.i, align 4
  %198 = icmp slt i64 %196, %197
  br i1 %198, label %if.entry.i.i42.i, label %Parser_advance.exit.i43.i

if.entry.i.i42.i:                                 ; preds = %while.entry.i39.i
  %199 = add nsw i64 %196, 1
  store i64 %199, ptr %memberidx2.i, align 8
  %200 = load ptr, ptr %memberidx.i.i.i40.i, align 8
  %ptridx.i.i.i41.i = getelementptr inbounds ptr, ptr %200, i64 %199
  %201 = load ptr, ptr %ptridx.i.i.i41.i, align 8
  store ptr %201, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i43.i

Parser_advance.exit.i43.i:                        ; preds = %if.entry.i.i42.i, %while.entry.i39.i
  %202 = load ptr, ptr %memberidx.i75, align 8
  %203 = load i64, ptr %202, align 4
  %204 = icmp eq i64 %203, 33
  %205 = load i64, ptr %memberidx3.i.i38.i, align 4
  %206 = icmp eq i64 %205, 0
  %207 = and i1 %204, %206
  br i1 %207, label %while.entry.i39.i, label %Parser_parse_class.exit

Parser_parse_class.exit:                          ; preds = %Parser_advance.exit.i43.i, %ifend7.i
  call fastcc void @Parser_parse_class_block(ptr nonnull %3, ptr nonnull %114)
  %memberidx.i155 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %106, i64 0, i32 2
  %208 = load i64, ptr %memberidx.i155, align 4
  %memberidx1.i156 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %106, i64 0, i32 3
  %209 = load i64, ptr %memberidx1.i156, align 4
  %.not.i157 = icmp slt i64 %208, %209
  br i1 %.not.i157, label %Array_ClassDeclarationNode____sl__.exit, label %if.entry.i160

if.entry.i160:                                    ; preds = %Parser_parse_class.exit
  %210 = shl i64 %209, 1
  store i64 %210, ptr %memberidx1.i156, align 4
  %memberidx2.i.i159 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %106, i64 0, i32 1
  %211 = load ptr, ptr %memberidx2.i.i159, align 8
  %212 = shl i64 %209, 4
  %213 = call ptr @realloc(ptr %211, i64 %212)
  store ptr %213, ptr %memberidx2.i.i159, align 8
  br label %Array_ClassDeclarationNode____sl__.exit

Array_ClassDeclarationNode____sl__.exit:          ; preds = %Parser_parse_class.exit, %if.entry.i160
  %214 = load i64, ptr %memberidx.i155, align 4
  %215 = add nsw i64 %214, 1
  store i64 %215, ptr %memberidx.i155, align 4
  %memberidx4.i161 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %106, i64 0, i32 1
  br label %ifend

if.entry11:                                       ; preds = %while.entry
  %216 = load ptr, ptr %memberidx14, align 8
  %217 = load i64, ptr %memberidx2.i, align 8
  %218 = load ptr, ptr %3, align 8
  %memberidx2.i.i260 = getelementptr inbounds %Array_Token_, ptr %218, i64 0, i32 2
  %219 = load i64, ptr %memberidx2.i.i260, align 4
  %220 = icmp slt i64 %217, %219
  br i1 %220, label %if.entry.i.i264, label %Parser_advance.exit.i267

if.entry.i.i264:                                  ; preds = %if.entry11
  %221 = add nsw i64 %217, 1
  store i64 %221, ptr %memberidx2.i, align 8
  %memberidx.i.i.i262 = getelementptr inbounds %Array_Token_, ptr %218, i64 0, i32 1
  %222 = load ptr, ptr %memberidx.i.i.i262, align 8
  %ptridx.i.i.i263 = getelementptr inbounds ptr, ptr %222, i64 %221
  %223 = load ptr, ptr %ptridx.i.i.i263, align 8
  store ptr %223, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i267

Parser_advance.exit.i267:                         ; preds = %if.entry.i.i264, %if.entry11
  %224 = call ptr @malloc(i32 24)
  %225 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %225, ptr %224, align 8
  %memberidx1.i38.i = getelementptr inbounds %EnumNode, ptr %224, i64 0, i32 1
  %226 = call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumNodeField_, ptr %226, align 8
  %memberidx.i.i39.i = getelementptr inbounds %Array_EnumNodeField_, ptr %226, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i39.i, align 4
  %memberidx1.i.i.i265 = getelementptr inbounds %Array_EnumNodeField_, ptr %226, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i265, align 4
  %memberidx2.i.i40.i = getelementptr inbounds %Array_EnumNodeField_, ptr %226, i64 0, i32 1
  %227 = call ptr @malloc(i32 64)
  store ptr %227, ptr %memberidx2.i.i40.i, align 8
  store i64 0, ptr %memberidx.i.i39.i, align 4
  store ptr %226, ptr %memberidx1.i38.i, align 8
  %memberidx4.i42.i = getelementptr inbounds %EnumNode, ptr %224, i64 0, i32 2
  store ptr null, ptr %memberidx4.i42.i, align 8
  %228 = load ptr, ptr %memberidx.i75, align 8
  %229 = load i64, ptr %228, align 4
  %230 = icmp eq i64 %229, 25
  br i1 %230, label %if.entry.i268, label %ifend.i269

if.entry.i268:                                    ; preds = %Parser_advance.exit.i267
  %231 = load i64, ptr %memberidx2.i, align 8
  %232 = load ptr, ptr %3, align 8
  %memberidx2.i44.i = getelementptr inbounds %Array_Token_, ptr %232, i64 0, i32 2
  %233 = load i64, ptr %memberidx2.i44.i, align 4
  %234 = icmp slt i64 %231, %233
  br i1 %234, label %if.entry.i48.i, label %Parser_advance.exit49.i

if.entry.i48.i:                                   ; preds = %if.entry.i268
  %235 = add nsw i64 %231, 1
  store i64 %235, ptr %memberidx2.i, align 8
  %memberidx.i.i46.i = getelementptr inbounds %Array_Token_, ptr %232, i64 0, i32 1
  %236 = load ptr, ptr %memberidx.i.i46.i, align 8
  %ptridx.i.i47.i = getelementptr inbounds ptr, ptr %236, i64 %235
  %237 = load ptr, ptr %ptridx.i.i47.i, align 8
  store ptr %237, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit49.i

Parser_advance.exit49.i:                          ; preds = %if.entry.i48.i, %if.entry.i268
  %238 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %238, ptr %memberidx4.i42.i, align 8
  %239 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  br label %ifend.i269

ifend.i269:                                       ; preds = %Parser_advance.exit49.i, %Parser_advance.exit.i267
  %240 = load ptr, ptr %memberidx.i75, align 8
  %241 = load i64, ptr %240, align 4
  %242 = icmp eq i64 %241, 33
  %243 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i53.i = getelementptr inbounds %Array_FloError_, ptr %243, i64 0, i32 2
  %244 = load i64, ptr %memberidx3.i.i53.i, align 4
  %245 = icmp eq i64 %244, 0
  %246 = and i1 %242, %245
  br i1 %246, label %while.entry.i56.preheader.i, label %Parser_new_lines.exit65.i

while.entry.i56.preheader.i:                      ; preds = %ifend.i269
  %247 = load ptr, ptr %3, align 8
  %memberidx2.i12.i55.i = getelementptr inbounds %Array_Token_, ptr %247, i64 0, i32 2
  %memberidx.i.i.i58.i = getelementptr inbounds %Array_Token_, ptr %247, i64 0, i32 1
  br label %while.entry.i56.i

while.entry.i56.i:                                ; preds = %Parser_advance.exit.i64.i, %while.entry.i56.preheader.i
  %248 = load i64, ptr %memberidx2.i, align 8
  %249 = load i64, ptr %memberidx2.i12.i55.i, align 4
  %250 = icmp slt i64 %248, %249
  br i1 %250, label %if.entry.i.i60.i, label %Parser_advance.exit.i64.i

if.entry.i.i60.i:                                 ; preds = %while.entry.i56.i
  %251 = add nsw i64 %248, 1
  store i64 %251, ptr %memberidx2.i, align 8
  %252 = load ptr, ptr %memberidx.i.i.i58.i, align 8
  %ptridx.i.i.i59.i = getelementptr inbounds ptr, ptr %252, i64 %251
  %253 = load ptr, ptr %ptridx.i.i.i59.i, align 8
  store ptr %253, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i64.i

Parser_advance.exit.i64.i:                        ; preds = %if.entry.i.i60.i, %while.entry.i56.i
  %254 = load ptr, ptr %memberidx.i75, align 8
  %255 = load i64, ptr %254, align 4
  %256 = icmp eq i64 %255, 33
  %257 = load i64, ptr %memberidx3.i.i53.i, align 4
  %258 = icmp eq i64 %257, 0
  %259 = and i1 %256, %258
  br i1 %259, label %while.entry.i56.i, label %Parser_new_lines.exit65.i

Parser_new_lines.exit65.i:                        ; preds = %Parser_advance.exit.i64.i, %ifend.i269
  %260 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 27)
  %261 = load ptr, ptr %memberidx.i75, align 8
  %262 = load i64, ptr %261, align 4
  %263 = icmp eq i64 %262, 33
  %264 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i69.i270 = getelementptr inbounds %Array_FloError_, ptr %264, i64 0, i32 2
  %265 = load i64, ptr %memberidx3.i.i69.i270, align 4
  %266 = icmp eq i64 %265, 0
  %267 = and i1 %263, %266
  br i1 %267, label %while.entry.i72.preheader.i, label %Parser_new_lines.exit81.i

while.entry.i72.preheader.i:                      ; preds = %Parser_new_lines.exit65.i
  %268 = load ptr, ptr %3, align 8
  %memberidx2.i12.i71.i = getelementptr inbounds %Array_Token_, ptr %268, i64 0, i32 2
  %memberidx.i.i.i74.i = getelementptr inbounds %Array_Token_, ptr %268, i64 0, i32 1
  br label %while.entry.i72.i

while.entry.i72.i:                                ; preds = %Parser_advance.exit.i80.i, %while.entry.i72.preheader.i
  %269 = load i64, ptr %memberidx2.i, align 8
  %270 = load i64, ptr %memberidx2.i12.i71.i, align 4
  %271 = icmp slt i64 %269, %270
  br i1 %271, label %if.entry.i.i76.i, label %Parser_advance.exit.i80.i

if.entry.i.i76.i:                                 ; preds = %while.entry.i72.i
  %272 = add nsw i64 %269, 1
  store i64 %272, ptr %memberidx2.i, align 8
  %273 = load ptr, ptr %memberidx.i.i.i74.i, align 8
  %ptridx.i.i.i75.i = getelementptr inbounds ptr, ptr %273, i64 %272
  %274 = load ptr, ptr %ptridx.i.i.i75.i, align 8
  store ptr %274, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i80.i

Parser_advance.exit.i80.i:                        ; preds = %if.entry.i.i76.i, %while.entry.i72.i
  %275 = load ptr, ptr %memberidx.i75, align 8
  %276 = load i64, ptr %275, align 4
  %277 = icmp eq i64 %276, 33
  %278 = load i64, ptr %memberidx3.i.i69.i270, align 4
  %279 = icmp eq i64 %278, 0
  %280 = and i1 %277, %279
  br i1 %280, label %while.entry.i72.i, label %Parser_new_lines.exit81.i

Parser_new_lines.exit81.i:                        ; preds = %Parser_advance.exit.i80.i, %Parser_new_lines.exit65.i
  %281 = load ptr, ptr %memberidx.i75, align 8
  %282 = load i64, ptr %281, align 4
  %283 = icmp eq i64 %282, 54
  br i1 %283, label %while.entry.i271, label %Parser_parse_enum.exit

while.entry.i271:                                 ; preds = %Parser_new_lines.exit81.i, %Parser_new_lines.exit.i
  %284 = call ptr @malloc(i32 16)
  %285 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %285, ptr %284, align 8
  %memberidx1.i89.i = getelementptr inbounds %EnumNodeField, ptr %284, i64 0, i32 1
  store ptr null, ptr %memberidx1.i89.i, align 8
  %286 = load ptr, ptr %memberidx.i75, align 8
  %287 = load i64, ptr %286, align 4
  %288 = icmp eq i64 %287, 38
  br i1 %288, label %if.entry7.i, label %ifend9.i

if.entry7.i:                                      ; preds = %while.entry.i271
  %289 = load i64, ptr %memberidx2.i, align 8
  %290 = load ptr, ptr %3, align 8
  %memberidx2.i83.i = getelementptr inbounds %Array_Token_, ptr %290, i64 0, i32 2
  %291 = load i64, ptr %memberidx2.i83.i, align 4
  %292 = icmp slt i64 %289, %291
  br i1 %292, label %if.entry.i87.i, label %Parser_advance.exit88.i

if.entry.i87.i:                                   ; preds = %if.entry7.i
  %293 = add nsw i64 %289, 1
  store i64 %293, ptr %memberidx2.i, align 8
  %memberidx.i.i85.i = getelementptr inbounds %Array_Token_, ptr %290, i64 0, i32 1
  %294 = load ptr, ptr %memberidx.i.i85.i, align 8
  %ptridx.i.i86.i = getelementptr inbounds ptr, ptr %294, i64 %293
  %295 = load ptr, ptr %ptridx.i.i86.i, align 8
  store ptr %295, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit88.i

Parser_advance.exit88.i:                          ; preds = %if.entry.i87.i, %if.entry7.i
  %296 = call fastcc ptr @Parser_parse_expression(ptr nonnull %3)
  store ptr %296, ptr %memberidx1.i89.i, align 8
  br label %ifend9.i

ifend9.i:                                         ; preds = %Parser_advance.exit88.i, %while.entry.i271
  %297 = load ptr, ptr %memberidx1.i38.i, align 8
  %memberidx.i34.i = getelementptr inbounds %Array_EnumNodeField_, ptr %297, i64 0, i32 2
  %298 = load i64, ptr %memberidx.i34.i, align 4
  %memberidx1.i.i273 = getelementptr inbounds %Array_EnumNodeField_, ptr %297, i64 0, i32 3
  %299 = load i64, ptr %memberidx1.i.i273, align 4
  %.not.i.i274 = icmp slt i64 %298, %299
  br i1 %.not.i.i274, label %Array_EnumNodeField____sl__.exit.i, label %if.entry.i37.i

if.entry.i37.i:                                   ; preds = %ifend9.i
  %300 = shl i64 %299, 1
  store i64 %300, ptr %memberidx1.i.i273, align 4
  %memberidx2.i.i36.i = getelementptr inbounds %Array_EnumNodeField_, ptr %297, i64 0, i32 1
  %301 = load ptr, ptr %memberidx2.i.i36.i, align 8
  %302 = shl i64 %299, 4
  %303 = call ptr @realloc(ptr %301, i64 %302)
  store ptr %303, ptr %memberidx2.i.i36.i, align 8
  br label %Array_EnumNodeField____sl__.exit.i

Array_EnumNodeField____sl__.exit.i:               ; preds = %if.entry.i37.i, %ifend9.i
  %304 = load i64, ptr %memberidx.i34.i, align 4
  %305 = add nsw i64 %304, 1
  store i64 %305, ptr %memberidx.i34.i, align 4
  %memberidx4.i.i275 = getelementptr inbounds %Array_EnumNodeField_, ptr %297, i64 0, i32 1
  %306 = load ptr, ptr %memberidx4.i.i275, align 8
  %ptridx.i.i276 = getelementptr inbounds ptr, ptr %306, i64 %304
  store ptr %284, ptr %ptridx.i.i276, align 8
  %307 = load ptr, ptr %memberidx.i75, align 8
  %308 = load i64, ptr %307, align 4
  %309 = icmp eq i64 %308, 33
  %310 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i.i277 = getelementptr inbounds %Array_FloError_, ptr %310, i64 0, i32 2
  %311 = load i64, ptr %memberidx3.i.i.i277, align 4
  %312 = icmp eq i64 %311, 0
  %313 = and i1 %309, %312
  br i1 %313, label %while.entry.i.preheader.i, label %Parser_new_lines.exit.i

while.entry.i.preheader.i:                        ; preds = %Array_EnumNodeField____sl__.exit.i
  %314 = load ptr, ptr %3, align 8
  %memberidx2.i12.i.i278 = getelementptr inbounds %Array_Token_, ptr %314, i64 0, i32 2
  %memberidx.i.i.i.i279 = getelementptr inbounds %Array_Token_, ptr %314, i64 0, i32 1
  br label %while.entry.i.i280

while.entry.i.i280:                               ; preds = %Parser_advance.exit.i.i283, %while.entry.i.preheader.i
  %315 = load i64, ptr %memberidx2.i, align 8
  %316 = load i64, ptr %memberidx2.i12.i.i278, align 4
  %317 = icmp slt i64 %315, %316
  br i1 %317, label %if.entry.i.i.i282, label %Parser_advance.exit.i.i283

if.entry.i.i.i282:                                ; preds = %while.entry.i.i280
  %318 = add nsw i64 %315, 1
  store i64 %318, ptr %memberidx2.i, align 8
  %319 = load ptr, ptr %memberidx.i.i.i.i279, align 8
  %ptridx.i.i.i.i281 = getelementptr inbounds ptr, ptr %319, i64 %318
  %320 = load ptr, ptr %ptridx.i.i.i.i281, align 8
  store ptr %320, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i.i283

Parser_advance.exit.i.i283:                       ; preds = %if.entry.i.i.i282, %while.entry.i.i280
  %321 = load ptr, ptr %memberidx.i75, align 8
  %322 = load i64, ptr %321, align 4
  %323 = icmp eq i64 %322, 33
  %324 = load i64, ptr %memberidx3.i.i.i277, align 4
  %325 = icmp eq i64 %324, 0
  %326 = and i1 %323, %325
  br i1 %326, label %while.entry.i.i280, label %Parser_new_lines.exit.i

Parser_new_lines.exit.i:                          ; preds = %Parser_advance.exit.i.i283, %Array_EnumNodeField____sl__.exit.i
  %327 = load ptr, ptr %memberidx.i75, align 8
  %328 = load i64, ptr %327, align 4
  %329 = icmp eq i64 %328, 54
  br i1 %329, label %while.entry.i271, label %Parser_parse_enum.exit

Parser_parse_enum.exit:                           ; preds = %Parser_new_lines.exit.i, %Parser_new_lines.exit81.i
  %330 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 28)
  %memberidx.i164 = getelementptr inbounds %Array_EnumNode_, ptr %216, i64 0, i32 2
  %331 = load i64, ptr %memberidx.i164, align 4
  %memberidx1.i165 = getelementptr inbounds %Array_EnumNode_, ptr %216, i64 0, i32 3
  %332 = load i64, ptr %memberidx1.i165, align 4
  %.not.i166 = icmp slt i64 %331, %332
  br i1 %.not.i166, label %Array_EnumNode____sl__.exit, label %if.entry.i169

if.entry.i169:                                    ; preds = %Parser_parse_enum.exit
  %333 = shl i64 %332, 1
  store i64 %333, ptr %memberidx1.i165, align 4
  %memberidx2.i.i168 = getelementptr inbounds %Array_EnumNode_, ptr %216, i64 0, i32 1
  %334 = load ptr, ptr %memberidx2.i.i168, align 8
  %335 = shl i64 %332, 4
  %336 = call ptr @realloc(ptr %334, i64 %335)
  store ptr %336, ptr %memberidx2.i.i168, align 8
  br label %Array_EnumNode____sl__.exit

Array_EnumNode____sl__.exit:                      ; preds = %Parser_parse_enum.exit, %if.entry.i169
  %337 = load i64, ptr %memberidx.i164, align 4
  %338 = add nsw i64 %337, 1
  store i64 %338, ptr %memberidx.i164, align 4
  %memberidx4.i170 = getelementptr inbounds %Array_EnumNode_, ptr %216, i64 0, i32 1
  br label %ifend

if.entry17:                                       ; preds = %while.entry
  %339 = load ptr, ptr %memberidx20, align 8
  %340 = load i64, ptr %memberidx2.i, align 8
  %341 = load ptr, ptr %3, align 8
  %memberidx2.i.i174 = getelementptr inbounds %Array_Token_, ptr %341, i64 0, i32 2
  %342 = load i64, ptr %memberidx2.i.i174, align 4
  %343 = icmp slt i64 %340, %342
  br i1 %343, label %if.entry.i.i178, label %Parser_advance.exit.i182

if.entry.i.i178:                                  ; preds = %if.entry17
  %344 = add nsw i64 %340, 1
  store i64 %344, ptr %memberidx2.i, align 8
  %memberidx.i.i.i176 = getelementptr inbounds %Array_Token_, ptr %341, i64 0, i32 1
  %345 = load ptr, ptr %memberidx.i.i.i176, align 8
  %ptridx.i.i.i177 = getelementptr inbounds ptr, ptr %345, i64 %344
  %346 = load ptr, ptr %ptridx.i.i.i177, align 8
  store ptr %346, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i182

Parser_advance.exit.i182:                         ; preds = %if.entry.i.i178, %if.entry17
  %347 = call ptr @malloc(i32 24)
  %348 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ImportClause_, ptr %348, align 8
  %memberidx.i.i32.i = getelementptr inbounds %Array_ImportClause_, ptr %348, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i32.i, align 4
  %memberidx1.i.i.i179 = getelementptr inbounds %Array_ImportClause_, ptr %348, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i179, align 4
  %memberidx2.i.i.i180 = getelementptr inbounds %Array_ImportClause_, ptr %348, i64 0, i32 1
  %349 = call ptr @malloc(i32 64)
  store ptr %349, ptr %memberidx2.i.i.i180, align 8
  store i64 0, ptr %memberidx.i.i32.i, align 4
  store ptr %348, ptr %347, align 8
  %memberidx3.i34.i = getelementptr inbounds %ImportNode, ptr %347, i64 0, i32 2
  store ptr null, ptr %memberidx3.i34.i, align 8
  %350 = load ptr, ptr %memberidx.i75, align 8
  %351 = load i64, ptr %350, align 4
  %352 = icmp eq i64 %351, 54
  br i1 %352, label %if.entry.i183, label %ifend.i194

if.entry.i183:                                    ; preds = %Parser_advance.exit.i182
  %353 = call ptr @malloc(i32 16)
  %354 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %354, ptr %353, align 8
  %memberidx1.i.i35.i = getelementptr inbounds %ImportClause, ptr %353, i64 0, i32 1
  store ptr null, ptr %memberidx1.i.i35.i, align 8
  %355 = load ptr, ptr %memberidx.i75, align 8
  %356 = load i64, ptr %355, align 4
  %357 = icmp eq i64 %356, 85
  br i1 %357, label %if.entry.i39.i, label %Parser_parse_import_clause.exit.i

if.entry.i39.i:                                   ; preds = %if.entry.i183
  %358 = load i64, ptr %memberidx2.i, align 8
  %359 = load ptr, ptr %3, align 8
  %memberidx2.i.i38.i = getelementptr inbounds %Array_Token_, ptr %359, i64 0, i32 2
  %360 = load i64, ptr %memberidx2.i.i38.i, align 4
  %361 = icmp slt i64 %358, %360
  br i1 %361, label %if.entry.i.i.i187, label %Parser_advance.exit.i.i188

if.entry.i.i.i187:                                ; preds = %if.entry.i39.i
  %362 = add nsw i64 %358, 1
  store i64 %362, ptr %memberidx2.i, align 8
  %memberidx.i.i.i.i185 = getelementptr inbounds %Array_Token_, ptr %359, i64 0, i32 1
  %363 = load ptr, ptr %memberidx.i.i.i.i185, align 8
  %ptridx.i.i.i.i186 = getelementptr inbounds ptr, ptr %363, i64 %362
  %364 = load ptr, ptr %ptridx.i.i.i.i186, align 8
  store ptr %364, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i.i188

Parser_advance.exit.i.i188:                       ; preds = %if.entry.i.i.i187, %if.entry.i39.i
  %365 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %365, ptr %memberidx1.i.i35.i, align 8
  br label %Parser_parse_import_clause.exit.i

Parser_parse_import_clause.exit.i:                ; preds = %Parser_advance.exit.i.i188, %if.entry.i183
  %366 = load i64, ptr %memberidx.i.i32.i, align 4
  %367 = load i64, ptr %memberidx1.i.i.i179, align 4
  %.not.i.i190 = icmp slt i64 %366, %367
  br i1 %.not.i.i190, label %Array_ImportClause____sl__.exit.i, label %if.entry.i44.i

if.entry.i44.i:                                   ; preds = %Parser_parse_import_clause.exit.i
  %368 = shl i64 %367, 1
  store i64 %368, ptr %memberidx1.i.i.i179, align 4
  %369 = load ptr, ptr %memberidx2.i.i.i180, align 8
  %370 = shl i64 %367, 4
  %371 = call ptr @realloc(ptr %369, i64 %370)
  store ptr %371, ptr %memberidx2.i.i.i180, align 8
  br label %Array_ImportClause____sl__.exit.i

Array_ImportClause____sl__.exit.i:                ; preds = %if.entry.i44.i, %Parser_parse_import_clause.exit.i
  %372 = load i64, ptr %memberidx.i.i32.i, align 4
  %373 = add nsw i64 %372, 1
  store i64 %373, ptr %memberidx.i.i32.i, align 4
  %374 = load ptr, ptr %memberidx2.i.i.i180, align 8
  %ptridx.i.i192 = getelementptr inbounds ptr, ptr %374, i64 %372
  store ptr %353, ptr %ptridx.i.i192, align 8
  %375 = load ptr, ptr %memberidx.i75, align 8
  %376 = load i64, ptr %375, align 4
  %377 = icmp eq i64 %376, 3
  %378 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i47.i = getelementptr inbounds %Array_FloError_, ptr %378, i64 0, i32 2
  %379 = load i64, ptr %memberidx3.i47.i, align 4
  %380 = icmp eq i64 %379, 0
  %381 = and i1 %377, %380
  br i1 %381, label %while.entry.i195, label %while.end.i

ifend.i194:                                       ; preds = %else.i98.i, %if.entry.i.i96.i, %if.entry.i92.i, %Parser_advance.exit.i182
  %memberidx8.i193 = getelementptr inbounds %ImportNode, ptr %347, i64 0, i32 1
  %382 = load ptr, ptr %memberidx.i75, align 8
  %383 = load i64, ptr %382, align 4
  %384 = icmp eq i64 %383, 34
  br i1 %384, label %if.entry.i51.i, label %else.i.i

if.entry.i51.i:                                   ; preds = %ifend.i194
  %385 = load i64, ptr %memberidx2.i, align 8
  %386 = load ptr, ptr %3, align 8
  %memberidx2.i.i50.i = getelementptr inbounds %Array_Token_, ptr %386, i64 0, i32 2
  %387 = load i64, ptr %memberidx2.i.i50.i, align 4
  %388 = icmp slt i64 %385, %387
  br i1 %388, label %if.entry.i.i55.i, label %Parser_eat.exit.i

if.entry.i.i55.i:                                 ; preds = %if.entry.i51.i
  %389 = add nsw i64 %385, 1
  store i64 %389, ptr %memberidx2.i, align 8
  %memberidx.i.i.i53.i = getelementptr inbounds %Array_Token_, ptr %386, i64 0, i32 1
  %390 = load ptr, ptr %memberidx.i.i.i53.i, align 8
  %ptridx.i.i.i54.i = getelementptr inbounds ptr, ptr %390, i64 %389
  %391 = load ptr, ptr %ptridx.i.i.i54.i, align 8
  store ptr %391, ptr %memberidx.i75, align 8
  br label %Parser_eat.exit.i

else.i.i:                                         ; preds = %ifend.i194
  %392 = call ptr @malloc(i32 16)
  %memberidx35.i.i = getelementptr inbounds %Token, ptr %382, i64 0, i32 1
  %393 = load ptr, ptr %memberidx35.i.i, align 8
  store i64 46, ptr %392, align 4
  %memberidx1.i82.i.i = getelementptr inbounds %Token, ptr %392, i64 0, i32 1
  store ptr %393, ptr %memberidx1.i82.i.i, align 8
  br label %Parser_eat.exit.i

Parser_eat.exit.i:                                ; preds = %if.entry.i51.i, %if.entry.i.i55.i, %else.i.i
  %common.ret.op.i.i = phi ptr [ %392, %else.i.i ], [ %382, %if.entry.i.i55.i ], [ %382, %if.entry.i51.i ]
  store ptr %common.ret.op.i.i, ptr %memberidx8.i193, align 8
  %394 = load ptr, ptr %memberidx.i75, align 8
  %395 = load i64, ptr %394, align 4
  %396 = icmp eq i64 %395, 85
  br i1 %396, label %if.entry11.i, label %Parser_parse_import.exit

while.entry.i195:                                 ; preds = %Array_ImportClause____sl__.exit.i, %Array_ImportClause____sl__.exit84.i
  %397 = load i64, ptr %memberidx2.i, align 8
  %398 = load ptr, ptr %3, align 8
  %memberidx2.i58.i = getelementptr inbounds %Array_Token_, ptr %398, i64 0, i32 2
  %399 = load i64, ptr %memberidx2.i58.i, align 4
  %400 = icmp slt i64 %397, %399
  br i1 %400, label %if.entry.i62.i, label %Parser_advance.exit63.i

if.entry.i62.i:                                   ; preds = %while.entry.i195
  %401 = add nsw i64 %397, 1
  store i64 %401, ptr %memberidx2.i, align 8
  %memberidx.i.i60.i = getelementptr inbounds %Array_Token_, ptr %398, i64 0, i32 1
  %402 = load ptr, ptr %memberidx.i.i60.i, align 8
  %ptridx.i.i61.i = getelementptr inbounds ptr, ptr %402, i64 %401
  %403 = load ptr, ptr %ptridx.i.i61.i, align 8
  store ptr %403, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit63.i

Parser_advance.exit63.i:                          ; preds = %if.entry.i62.i, %while.entry.i195
  %404 = load ptr, ptr %347, align 8
  %405 = call ptr @malloc(i32 16)
  %406 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %406, ptr %405, align 8
  %memberidx1.i.i64.i = getelementptr inbounds %ImportClause, ptr %405, i64 0, i32 1
  store ptr null, ptr %memberidx1.i.i64.i, align 8
  %407 = load ptr, ptr %memberidx.i75, align 8
  %408 = load i64, ptr %407, align 4
  %409 = icmp eq i64 %408, 85
  br i1 %409, label %if.entry.i68.i, label %Parser_parse_import_clause.exit75.i

if.entry.i68.i:                                   ; preds = %Parser_advance.exit63.i
  %410 = load i64, ptr %memberidx2.i, align 8
  %411 = load ptr, ptr %3, align 8
  %memberidx2.i.i67.i = getelementptr inbounds %Array_Token_, ptr %411, i64 0, i32 2
  %412 = load i64, ptr %memberidx2.i.i67.i, align 4
  %413 = icmp slt i64 %410, %412
  br i1 %413, label %if.entry.i.i72.i, label %Parser_advance.exit.i74.i

if.entry.i.i72.i:                                 ; preds = %if.entry.i68.i
  %414 = add nsw i64 %410, 1
  store i64 %414, ptr %memberidx2.i, align 8
  %memberidx.i.i.i70.i = getelementptr inbounds %Array_Token_, ptr %411, i64 0, i32 1
  %415 = load ptr, ptr %memberidx.i.i.i70.i, align 8
  %ptridx.i.i.i71.i = getelementptr inbounds ptr, ptr %415, i64 %414
  %416 = load ptr, ptr %ptridx.i.i.i71.i, align 8
  store ptr %416, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i74.i

Parser_advance.exit.i74.i:                        ; preds = %if.entry.i.i72.i, %if.entry.i68.i
  %417 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %417, ptr %memberidx1.i.i64.i, align 8
  br label %Parser_parse_import_clause.exit75.i

Parser_parse_import_clause.exit75.i:              ; preds = %Parser_advance.exit.i74.i, %Parser_advance.exit63.i
  %memberidx.i76.i = getelementptr inbounds %Array_ImportClause_, ptr %404, i64 0, i32 2
  %418 = load i64, ptr %memberidx.i76.i, align 4
  %memberidx1.i77.i = getelementptr inbounds %Array_ImportClause_, ptr %404, i64 0, i32 3
  %419 = load i64, ptr %memberidx1.i77.i, align 4
  %.not.i78.i = icmp slt i64 %418, %419
  br i1 %.not.i78.i, label %Array_ImportClause____sl__.exit84.i, label %if.entry.i81.i

if.entry.i81.i:                                   ; preds = %Parser_parse_import_clause.exit75.i
  %420 = shl i64 %419, 1
  store i64 %420, ptr %memberidx1.i77.i, align 4
  %memberidx2.i.i80.i = getelementptr inbounds %Array_ImportClause_, ptr %404, i64 0, i32 1
  %421 = load ptr, ptr %memberidx2.i.i80.i, align 8
  %422 = shl i64 %419, 4
  %423 = call ptr @realloc(ptr %421, i64 %422)
  store ptr %423, ptr %memberidx2.i.i80.i, align 8
  br label %Array_ImportClause____sl__.exit84.i

Array_ImportClause____sl__.exit84.i:              ; preds = %if.entry.i81.i, %Parser_parse_import_clause.exit75.i
  %424 = load i64, ptr %memberidx.i76.i, align 4
  %425 = add nsw i64 %424, 1
  store i64 %425, ptr %memberidx.i76.i, align 4
  %memberidx4.i82.i = getelementptr inbounds %Array_ImportClause_, ptr %404, i64 0, i32 1
  %426 = load ptr, ptr %memberidx4.i82.i, align 8
  %ptridx.i83.i = getelementptr inbounds ptr, ptr %426, i64 %424
  store ptr %405, ptr %ptridx.i83.i, align 8
  %427 = load ptr, ptr %memberidx.i75, align 8
  %428 = load i64, ptr %427, align 4
  %429 = icmp eq i64 %428, 3
  %430 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i87.i = getelementptr inbounds %Array_FloError_, ptr %430, i64 0, i32 2
  %431 = load i64, ptr %memberidx3.i87.i, align 4
  %432 = icmp eq i64 %431, 0
  %433 = and i1 %429, %432
  br i1 %433, label %while.entry.i195, label %while.end.i

while.end.i:                                      ; preds = %Array_ImportClause____sl__.exit84.i, %Array_ImportClause____sl__.exit.i
  %434 = load ptr, ptr %memberidx.i75, align 8
  %435 = load i64, ptr %434, align 4
  %436 = icmp eq i64 %435, 80
  br i1 %436, label %if.entry.i92.i, label %else.i98.i

if.entry.i92.i:                                   ; preds = %while.end.i
  %437 = load i64, ptr %memberidx2.i, align 8
  %438 = load ptr, ptr %3, align 8
  %memberidx2.i.i91.i = getelementptr inbounds %Array_Token_, ptr %438, i64 0, i32 2
  %439 = load i64, ptr %memberidx2.i.i91.i, align 4
  %440 = icmp slt i64 %437, %439
  br i1 %440, label %if.entry.i.i96.i, label %ifend.i194

if.entry.i.i96.i:                                 ; preds = %if.entry.i92.i
  %441 = add nsw i64 %437, 1
  store i64 %441, ptr %memberidx2.i, align 8
  %memberidx.i.i.i94.i = getelementptr inbounds %Array_Token_, ptr %438, i64 0, i32 1
  %442 = load ptr, ptr %memberidx.i.i.i94.i, align 8
  %ptridx.i.i.i95.i = getelementptr inbounds ptr, ptr %442, i64 %441
  %443 = load ptr, ptr %ptridx.i.i.i95.i, align 8
  store ptr %443, ptr %memberidx.i75, align 8
  br label %ifend.i194

else.i98.i:                                       ; preds = %while.end.i
  %444 = call ptr @malloc(i32 16)
  %memberidx35.i99.i = getelementptr inbounds %Token, ptr %434, i64 0, i32 1
  %445 = load ptr, ptr %memberidx35.i99.i, align 8
  store i64 46, ptr %444, align 4
  %memberidx1.i82.i100.i = getelementptr inbounds %Token, ptr %444, i64 0, i32 1
  store ptr %445, ptr %memberidx1.i82.i100.i, align 8
  br label %ifend.i194

if.entry11.i:                                     ; preds = %Parser_eat.exit.i
  %446 = load i64, ptr %memberidx2.i, align 8
  %447 = load ptr, ptr %3, align 8
  %memberidx2.i103.i = getelementptr inbounds %Array_Token_, ptr %447, i64 0, i32 2
  %448 = load i64, ptr %memberidx2.i103.i, align 4
  %449 = icmp slt i64 %446, %448
  br i1 %449, label %if.entry.i107.i, label %Parser_advance.exit108.i

if.entry.i107.i:                                  ; preds = %if.entry11.i
  %450 = add nsw i64 %446, 1
  store i64 %450, ptr %memberidx2.i, align 8
  %memberidx.i.i105.i = getelementptr inbounds %Array_Token_, ptr %447, i64 0, i32 1
  %451 = load ptr, ptr %memberidx.i.i105.i, align 8
  %ptridx.i.i106.i = getelementptr inbounds ptr, ptr %451, i64 %450
  %452 = load ptr, ptr %ptridx.i.i106.i, align 8
  store ptr %452, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit108.i

Parser_advance.exit108.i:                         ; preds = %if.entry.i107.i, %if.entry11.i
  %453 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %453, ptr %memberidx3.i34.i, align 8
  br label %Parser_parse_import.exit

Parser_parse_import.exit:                         ; preds = %Parser_eat.exit.i, %Parser_advance.exit108.i
  %memberidx.i196 = getelementptr inbounds %Array_ImportNode_, ptr %339, i64 0, i32 2
  %454 = load i64, ptr %memberidx.i196, align 4
  %memberidx1.i197 = getelementptr inbounds %Array_ImportNode_, ptr %339, i64 0, i32 3
  %455 = load i64, ptr %memberidx1.i197, align 4
  %.not.i198 = icmp slt i64 %454, %455
  br i1 %.not.i198, label %Array_ImportNode____sl__.exit, label %if.entry.i201

if.entry.i201:                                    ; preds = %Parser_parse_import.exit
  %456 = shl i64 %455, 1
  store i64 %456, ptr %memberidx1.i197, align 4
  %memberidx2.i.i200 = getelementptr inbounds %Array_ImportNode_, ptr %339, i64 0, i32 1
  %457 = load ptr, ptr %memberidx2.i.i200, align 8
  %458 = shl i64 %455, 4
  %459 = call ptr @realloc(ptr %457, i64 %458)
  store ptr %459, ptr %memberidx2.i.i200, align 8
  br label %Array_ImportNode____sl__.exit

Array_ImportNode____sl__.exit:                    ; preds = %Parser_parse_import.exit, %if.entry.i201
  %460 = load i64, ptr %memberidx.i196, align 4
  %461 = add nsw i64 %460, 1
  store i64 %461, ptr %memberidx.i196, align 4
  %memberidx4.i202 = getelementptr inbounds %Array_ImportNode_, ptr %339, i64 0, i32 1
  br label %ifend

if.entry23:                                       ; preds = %while.entry
  %462 = load ptr, ptr %memberidx26, align 8
  %463 = call fastcc ptr @Parser_parse_const_declaration_statement(ptr nonnull %3)
  %memberidx.i205 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %462, i64 0, i32 2
  %464 = load i64, ptr %memberidx.i205, align 4
  %memberidx1.i206 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %462, i64 0, i32 3
  %465 = load i64, ptr %memberidx1.i206, align 4
  %.not.i207 = icmp slt i64 %464, %465
  br i1 %.not.i207, label %Array_ConstDeclarationStatement____sl__.exit, label %if.entry.i210

if.entry.i210:                                    ; preds = %if.entry23
  %466 = shl i64 %465, 1
  store i64 %466, ptr %memberidx1.i206, align 4
  %memberidx2.i.i209 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %462, i64 0, i32 1
  %467 = load ptr, ptr %memberidx2.i.i209, align 8
  %468 = shl i64 %465, 4
  %469 = call ptr @realloc(ptr %467, i64 %468)
  store ptr %469, ptr %memberidx2.i.i209, align 8
  br label %Array_ConstDeclarationStatement____sl__.exit

Array_ConstDeclarationStatement____sl__.exit:     ; preds = %if.entry23, %if.entry.i210
  %470 = load i64, ptr %memberidx.i205, align 4
  %471 = add nsw i64 %470, 1
  store i64 %471, ptr %memberidx.i205, align 4
  %memberidx4.i211 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %462, i64 0, i32 1
  br label %ifend

if.entry29:                                       ; preds = %while.entry
  %472 = load ptr, ptr %memberidx32, align 8
  %473 = call fastcc ptr @Parser_parse_variable_declaration_statement(ptr nonnull %3)
  %memberidx.i214 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %472, i64 0, i32 2
  %474 = load i64, ptr %memberidx.i214, align 4
  %memberidx1.i215 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %472, i64 0, i32 3
  %475 = load i64, ptr %memberidx1.i215, align 4
  %.not.i216 = icmp slt i64 %474, %475
  br i1 %.not.i216, label %Array_VarDeclarationStatement____sl__.exit, label %if.entry.i219

if.entry.i219:                                    ; preds = %if.entry29
  %476 = shl i64 %475, 1
  store i64 %476, ptr %memberidx1.i215, align 4
  %memberidx2.i.i218 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %472, i64 0, i32 1
  %477 = load ptr, ptr %memberidx2.i.i218, align 8
  %478 = shl i64 %475, 4
  %479 = call ptr @realloc(ptr %477, i64 %478)
  store ptr %479, ptr %memberidx2.i.i218, align 8
  br label %Array_VarDeclarationStatement____sl__.exit

Array_VarDeclarationStatement____sl__.exit:       ; preds = %if.entry29, %if.entry.i219
  %480 = load i64, ptr %memberidx.i214, align 4
  %481 = add nsw i64 %480, 1
  store i64 %481, ptr %memberidx.i214, align 4
  %memberidx4.i220 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %472, i64 0, i32 1
  br label %ifend

else30:                                           ; preds = %while.entry
  %482 = icmp eq i64 %36, 54
  %memberidx36 = getelementptr inbounds %IdentifierToken, ptr %35, i64 0, i32 2
  %483 = load ptr, ptr %memberidx36, align 8
  %484 = call ptr @malloc(i32 4)
  store i32 1701869940, ptr %484, align 8
  %485 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %485, align 8
  %memberidx.i.i223 = getelementptr inbounds %string, ptr %485, i64 0, i32 1
  store ptr %484, ptr %memberidx.i.i223, align 8
  %memberidx1.i.i224 = getelementptr inbounds %string, ptr %485, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i224, align 4
  %memberidx2.i.i225 = getelementptr inbounds %string, ptr %485, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i225, align 4
  %memberidx.i226 = getelementptr inbounds %string, ptr %483, i64 0, i32 2
  %486 = load i64, ptr %memberidx.i226, align 4
  %.not.i228 = icmp eq i64 %486, 4
  br i1 %.not.i228, label %ifend.i231, label %string___eq__.exit

ifend.i231:                                       ; preds = %else30
  %memberidx2.i229 = getelementptr inbounds %string, ptr %483, i64 0, i32 1
  %487 = load ptr, ptr %memberidx2.i229, align 8
  %488 = call i64 @memcmp(ptr %487, ptr nonnull %484, i64 %486)
  %489 = icmp eq i64 %488, 0
  br label %string___eq__.exit

string___eq__.exit:                               ; preds = %else30, %ifend.i231
  %common.ret.op.i = phi i1 [ %489, %ifend.i231 ], [ false, %else30 ]
  %490 = and i1 %482, %common.ret.op.i
  br i1 %490, label %if.entry37, label %else38

if.entry37:                                       ; preds = %string___eq__.exit
  %491 = load ptr, ptr %memberidx40, align 8
  %492 = load i64, ptr %memberidx2.i, align 8
  %493 = load ptr, ptr %3, align 8
  %memberidx2.i.i233 = getelementptr inbounds %Array_Token_, ptr %493, i64 0, i32 2
  %494 = load i64, ptr %memberidx2.i.i233, align 4
  %495 = icmp slt i64 %492, %494
  br i1 %495, label %if.entry.i.i237, label %Parser_parse_type_alias.exit

if.entry.i.i237:                                  ; preds = %if.entry37
  %496 = add nsw i64 %492, 1
  store i64 %496, ptr %memberidx2.i, align 8
  %memberidx.i.i.i235 = getelementptr inbounds %Array_Token_, ptr %493, i64 0, i32 1
  %497 = load ptr, ptr %memberidx.i.i.i235, align 8
  %ptridx.i.i.i236 = getelementptr inbounds ptr, ptr %497, i64 %496
  %498 = load ptr, ptr %ptridx.i.i.i236, align 8
  store ptr %498, ptr %memberidx.i75, align 8
  br label %Parser_parse_type_alias.exit

Parser_parse_type_alias.exit:                     ; preds = %if.entry37, %if.entry.i.i237
  %499 = call ptr @malloc(i32 16)
  %500 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 54)
  store ptr %500, ptr %499, align 8
  %501 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 38)
  %memberidx.i238 = getelementptr inbounds %TypeAliasNode, ptr %499, i64 0, i32 1
  %502 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %502, ptr %memberidx.i238, align 8
  %memberidx.i93 = getelementptr inbounds %Array_TypeAliasNode_, ptr %491, i64 0, i32 2
  %503 = load i64, ptr %memberidx.i93, align 4
  %memberidx1.i94 = getelementptr inbounds %Array_TypeAliasNode_, ptr %491, i64 0, i32 3
  %504 = load i64, ptr %memberidx1.i94, align 4
  %.not.i = icmp slt i64 %503, %504
  br i1 %.not.i, label %Array_TypeAliasNode____sl__.exit, label %if.entry.i97

if.entry.i97:                                     ; preds = %Parser_parse_type_alias.exit
  %505 = shl i64 %504, 1
  store i64 %505, ptr %memberidx1.i94, align 4
  %memberidx2.i.i96 = getelementptr inbounds %Array_TypeAliasNode_, ptr %491, i64 0, i32 1
  %506 = load ptr, ptr %memberidx2.i.i96, align 8
  %507 = shl i64 %504, 4
  %508 = call ptr @realloc(ptr %506, i64 %507)
  store ptr %508, ptr %memberidx2.i.i96, align 8
  br label %Array_TypeAliasNode____sl__.exit

Array_TypeAliasNode____sl__.exit:                 ; preds = %Parser_parse_type_alias.exit, %if.entry.i97
  %509 = load i64, ptr %memberidx.i93, align 4
  %510 = add nsw i64 %509, 1
  store i64 %510, ptr %memberidx.i93, align 4
  %memberidx4.i = getelementptr inbounds %Array_TypeAliasNode_, ptr %491, i64 0, i32 1
  br label %ifend

else38:                                           ; preds = %string___eq__.exit
  %511 = call ptr @malloc(i32 79)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(79) %511, ptr noundef nonnull align 8 dereferenceable(79) @74, i64 79, i1 false)
  %512 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %512, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %512, i64 0, i32 1
  store ptr %511, ptr %memberidx.i.i80, align 8
  %memberidx1.i.i81 = getelementptr inbounds %string, ptr %512, i64 0, i32 2
  store i64 79, ptr %memberidx1.i.i81, align 4
  %memberidx2.i.i82 = getelementptr inbounds %string, ptr %512, i64 0, i32 3
  store i64 79, ptr %memberidx2.i.i82, align 4
  %513 = load ptr, ptr %memberidx1.i, align 8
  %514 = call ptr @malloc(i32 24)
  %515 = load ptr, ptr %memberidx.i75, align 8
  %memberidx2.i70 = getelementptr inbounds %Token, ptr %515, i64 0, i32 1
  %516 = load ptr, ptr %memberidx2.i70, align 8
  store i64 2, ptr %514, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %514, i64 0, i32 2
  store ptr %516, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %514, i64 0, i32 1
  store ptr %512, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %513, i64 0, i32 2
  %517 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %513, i64 0, i32 3
  %518 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %517, %518
  br i1 %.not.i.i, label %Parser_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %else38
  %519 = shl i64 %518, 1
  store i64 %519, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %513, i64 0, i32 1
  %520 = load ptr, ptr %memberidx2.i.i.i, align 8
  %521 = shl i64 %518, 4
  %522 = call ptr @realloc(ptr %520, i64 %521)
  store ptr %522, ptr %memberidx2.i.i.i, align 8
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %else38, %if.entry.i.i
  %523 = load i64, ptr %memberidx.i.i, align 4
  %524 = add nsw i64 %523, 1
  store i64 %524, ptr %memberidx.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %513, i64 0, i32 1
  br label %ifend
}

define internal fastcc ptr @Parser_parse_block(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 16)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i77 = getelementptr inbounds %BlockNode, ptr %2, i64 0, i32 1
  %5 = call ptr @malloc(i32 32)
  store ptr @VTableArray_StatementNode_, ptr %5, align 8
  %memberidx.i.i78 = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i78, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i79 = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 1
  %6 = call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i.i79, align 8
  store i64 0, ptr %memberidx.i.i78, align 4
  store ptr %5, ptr %memberidx.i77, align 8
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 33
  %memberidx2.i.i63 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx2.i.i63, align 8
  %memberidx3.i.i64 = getelementptr inbounds %Array_FloError_, ptr %10, i64 0, i32 2
  %11 = load i64, ptr %memberidx3.i.i64, align 4
  %12 = icmp eq i64 %11, 0
  %13 = and i1 %9, %12
  br i1 %13, label %while.entry.i67.preheader, label %Parser_new_lines.exit76

while.entry.i67.preheader:                        ; preds = %1
  %memberidx.i11.i65 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12.i66 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %memberidx.i.i.i69 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  br label %while.entry.i67

while.entry.i67:                                  ; preds = %while.entry.i67.preheader, %Parser_advance.exit.i75
  %15 = load i64, ptr %memberidx.i11.i65, align 4
  %16 = load i64, ptr %memberidx2.i12.i66, align 4
  %17 = icmp slt i64 %15, %16
  br i1 %17, label %if.entry.i.i71, label %Parser_advance.exit.i75

if.entry.i.i71:                                   ; preds = %while.entry.i67
  %18 = add nsw i64 %15, 1
  store i64 %18, ptr %memberidx.i11.i65, align 4
  %19 = load ptr, ptr %memberidx.i.i.i69, align 8
  %ptridx.i.i.i70 = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i.i.i70, align 8
  store ptr %20, ptr %memberidx, align 8
  br label %Parser_advance.exit.i75

Parser_advance.exit.i75:                          ; preds = %if.entry.i.i71, %while.entry.i67
  %21 = load ptr, ptr %memberidx, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 33
  %24 = load i64, ptr %memberidx3.i.i64, align 4
  %25 = icmp eq i64 %24, 0
  %26 = and i1 %23, %25
  br i1 %26, label %while.entry.i67, label %Parser_new_lines.exit76

Parser_new_lines.exit76:                          ; preds = %Parser_advance.exit.i75, %1
  %27 = load ptr, ptr %memberidx, align 8
  %28 = load i64, ptr %27, align 4
  %29 = icmp eq i64 %28, 27
  br i1 %29, label %if.entry, label %else

if.entry:                                         ; preds = %Parser_new_lines.exit76
  %memberidx.i56 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %30 = load i64, ptr %memberidx.i56, align 4
  %31 = load ptr, ptr %0, align 8
  %memberidx2.i57 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 2
  %32 = load i64, ptr %memberidx2.i57, align 4
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %if.entry.i60, label %Parser_advance.exit

if.entry.i60:                                     ; preds = %if.entry
  %34 = add nsw i64 %30, 1
  store i64 %34, ptr %memberidx.i56, align 4
  %memberidx.i.i59 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i59, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %36, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i60
  %37 = load ptr, ptr %memberidx, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 33
  %40 = load i64, ptr %memberidx3.i.i64, align 4
  %41 = icmp eq i64 %40, 0
  %42 = and i1 %39, %41
  br i1 %42, label %while.entry.i46.preheader, label %Parser_new_lines.exit55

while.entry.i46.preheader:                        ; preds = %Parser_advance.exit
  %memberidx.i.i.i48 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 1
  br label %while.entry.i46

while.entry.i46:                                  ; preds = %while.entry.i46.preheader, %Parser_advance.exit.i54
  %43 = load i64, ptr %memberidx.i56, align 4
  %44 = load i64, ptr %memberidx2.i57, align 4
  %45 = icmp slt i64 %43, %44
  br i1 %45, label %if.entry.i.i50, label %Parser_advance.exit.i54

if.entry.i.i50:                                   ; preds = %while.entry.i46
  %46 = add nsw i64 %43, 1
  store i64 %46, ptr %memberidx.i56, align 4
  %47 = load ptr, ptr %memberidx.i.i.i48, align 8
  %ptridx.i.i.i49 = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx.i.i.i49, align 8
  store ptr %48, ptr %memberidx, align 8
  br label %Parser_advance.exit.i54

Parser_advance.exit.i54:                          ; preds = %if.entry.i.i50, %while.entry.i46
  %49 = load ptr, ptr %memberidx, align 8
  %50 = load i64, ptr %49, align 4
  %51 = icmp eq i64 %50, 33
  %52 = load i64, ptr %memberidx3.i.i64, align 4
  %53 = icmp eq i64 %52, 0
  %54 = and i1 %51, %53
  br i1 %54, label %while.entry.i46, label %Parser_new_lines.exit55

Parser_new_lines.exit55:                          ; preds = %Parser_advance.exit.i54, %Parser_advance.exit
  %55 = load i64, ptr %memberidx3.i.i64, align 4
  %.fr = freeze i64 %55
  %56 = icmp eq i64 %.fr, 0
  br i1 %56, label %switch.early.test, label %while.end

switch.early.test:                                ; preds = %Parser_new_lines.exit55
  %57 = load ptr, ptr %memberidx, align 8
  %58 = load i64, ptr %57, align 4
  switch i64 %58, label %while.entry [
    i64 46, label %while.end
    i64 28, label %while.end
  ]

else:                                             ; preds = %Parser_new_lines.exit76
  %59 = call fastcc ptr @Parser_parse_statement(ptr %0)
  %60 = load i64, ptr %memberidx.i.i78, align 4
  %61 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i30 = icmp slt i64 %60, %61
  br i1 %.not.i30, label %Array_StatementNode____sl__.exit36, label %if.entry.i33

if.entry.i33:                                     ; preds = %else
  %62 = shl i64 %61, 1
  store i64 %62, ptr %memberidx1.i.i, align 4
  %63 = load ptr, ptr %memberidx2.i.i79, align 8
  %64 = shl i64 %61, 4
  %65 = call ptr @realloc(ptr %63, i64 %64)
  store ptr %65, ptr %memberidx2.i.i79, align 8
  br label %Array_StatementNode____sl__.exit36

Array_StatementNode____sl__.exit36:               ; preds = %else, %if.entry.i33
  %66 = load i64, ptr %memberidx.i.i78, align 4
  %67 = add nsw i64 %66, 1
  store i64 %67, ptr %memberidx.i.i78, align 4
  %68 = load ptr, ptr %memberidx2.i.i79, align 8
  %ptridx.i35 = getelementptr inbounds ptr, ptr %68, i64 %66
  store ptr %59, ptr %ptridx.i35, align 8
  br label %ifend

ifend:                                            ; preds = %Array_StatementNode____sl__.exit36, %while.end
  ret ptr %2

while.entry:                                      ; preds = %switch.early.test, %switch.early.test84
  %69 = call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  %70 = load i64, ptr %memberidx.i.i78, align 4
  %71 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i = icmp slt i64 %70, %71
  br i1 %.not.i, label %Array_StatementNode____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %while.entry
  %72 = shl i64 %71, 1
  store i64 %72, ptr %memberidx1.i.i, align 4
  %73 = load ptr, ptr %memberidx2.i.i79, align 8
  %74 = shl i64 %71, 4
  %75 = call ptr @realloc(ptr %73, i64 %74)
  store ptr %75, ptr %memberidx2.i.i79, align 8
  br label %Array_StatementNode____sl__.exit

Array_StatementNode____sl__.exit:                 ; preds = %while.entry, %if.entry.i
  %76 = load i64, ptr %memberidx.i.i78, align 4
  %77 = add nsw i64 %76, 1
  store i64 %77, ptr %memberidx.i.i78, align 4
  %78 = load ptr, ptr %memberidx2.i.i79, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %78, i64 %76
  store ptr %69, ptr %ptridx.i, align 8
  %79 = load ptr, ptr %memberidx, align 8
  %80 = load i64, ptr %79, align 4
  %81 = icmp eq i64 %80, 33
  %82 = load ptr, ptr %memberidx2.i.i63, align 8
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 2
  %83 = load i64, ptr %memberidx3.i.i, align 4
  %84 = icmp eq i64 %83, 0
  %85 = and i1 %81, %84
  br i1 %85, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %Array_StatementNode____sl__.exit
  %86 = load ptr, ptr %0, align 8
  %memberidx2.i12.i = getelementptr inbounds %Array_Token_, ptr %86, i64 0, i32 2
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %86, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %87 = load i64, ptr %memberidx.i56, align 4
  %88 = load i64, ptr %memberidx2.i12.i, align 4
  %89 = icmp slt i64 %87, %88
  br i1 %89, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %while.entry.i
  %90 = add nsw i64 %87, 1
  store i64 %90, ptr %memberidx.i56, align 4
  %91 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %91, i64 %90
  %92 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %92, ptr %memberidx, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %while.entry.i
  %93 = load ptr, ptr %memberidx, align 8
  %94 = load i64, ptr %93, align 4
  %95 = icmp eq i64 %94, 33
  %96 = load i64, ptr %memberidx3.i.i, align 4
  %97 = icmp eq i64 %96, 0
  %98 = and i1 %95, %97
  br i1 %98, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %Array_StatementNode____sl__.exit
  %99 = load i64, ptr %memberidx3.i.i, align 4
  %.fr85 = freeze i64 %99
  %100 = icmp eq i64 %.fr85, 0
  br i1 %100, label %switch.early.test84, label %while.end

switch.early.test84:                              ; preds = %Parser_new_lines.exit
  %101 = load ptr, ptr %memberidx, align 8
  %102 = load i64, ptr %101, align 4
  switch i64 %102, label %while.entry [
    i64 46, label %while.end
    i64 28, label %while.end
  ]

while.end:                                        ; preds = %switch.early.test84, %switch.early.test84, %Parser_new_lines.exit, %switch.early.test, %switch.early.test, %Parser_new_lines.exit55
  %103 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 28)
  br label %ifend
}

define internal fastcc ptr @Parser_parse_type(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 16)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i243 = getelementptr inbounds %TypeNode, ptr %2, i64 0, i32 1
  store i64 10, ptr %memberidx.i243, align 4
  %5 = load i64, ptr %3, align 4
  switch i64 %5, label %else12 [
    i64 54, label %if.entry
    i64 25, label %if.entry6
    i64 29, label %if.entry11
  ]

if.entry:                                         ; preds = %1
  %6 = call fastcc ptr @Parser_parse_object_type(ptr %0)
  br label %ifend

ifend:                                            ; preds = %if.entry.i.i179, %ifend.i, %else.i196, %if.entry.i.i194, %if.entry.i190, %Parser_parse_function_type.exit, %if.entry
  %type_node.0 = phi ptr [ %6, %if.entry ], [ %18, %Parser_parse_function_type.exit ], [ %42, %if.entry.i190 ], [ %42, %if.entry.i.i194 ], [ %42, %else.i196 ], [ %92, %ifend.i ], [ %92, %if.entry.i.i179 ]
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 29
  %10 = icmp eq i64 %8, 11
  %11 = or i1 %9, %10
  %12 = icmp eq i64 %8, 4
  %13 = or i1 %12, %11
  %memberidx2.i241 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %14 = load ptr, ptr %memberidx2.i241, align 8
  %memberidx3.i242 = getelementptr inbounds %Array_FloError_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx3.i242, align 4
  %16 = icmp eq i64 %15, 0
  %17 = and i1 %13, %16
  br i1 %17, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %ifend
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %memberidx.i.i111 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %memberidx.i165 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

if.entry6:                                        ; preds = %1
  %18 = call ptr @malloc(i32 32)
  %19 = load ptr, ptr %memberidx, align 8
  %memberidx1.i245 = getelementptr inbounds %Token, ptr %19, i64 0, i32 1
  %20 = load ptr, ptr %memberidx1.i245, align 8
  store ptr %20, ptr %18, align 8
  %memberidx.i.i.i246 = getelementptr inbounds %TypeNode, ptr %18, i64 0, i32 1
  store i64 15, ptr %memberidx.i.i.i246, align 4
  %memberidx.i.i247 = getelementptr inbounds %FunctionTypeNode, ptr %18, i64 0, i32 2
  %21 = call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %21, align 8
  %memberidx.i3.i.i = getelementptr inbounds %Array_TypeNode_, ptr %21, i64 0, i32 2
  store i64 0, ptr %memberidx.i3.i.i, align 4
  %memberidx1.i.i21.i = getelementptr inbounds %Array_TypeNode_, ptr %21, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i21.i, align 4
  %memberidx2.i.i22.i = getelementptr inbounds %Array_TypeNode_, ptr %21, i64 0, i32 1
  %22 = call ptr @malloc(i32 64)
  store ptr %22, ptr %memberidx2.i.i22.i, align 8
  store i64 0, ptr %memberidx.i3.i.i, align 4
  store ptr %21, ptr %memberidx.i.i247, align 8
  %memberidx.i24.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %23 = load i64, ptr %memberidx.i24.i, align 4
  %24 = load ptr, ptr %0, align 8
  %memberidx2.i25.i = getelementptr inbounds %Array_Token_, ptr %24, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i25.i, align 4
  %26 = icmp slt i64 %23, %25
  br i1 %26, label %if.entry.i.i249, label %Parser_advance.exit.i251

if.entry.i.i249:                                  ; preds = %if.entry6
  %27 = add nsw i64 %23, 1
  store i64 %27, ptr %memberidx.i24.i, align 4
  %memberidx.i.i27.i = getelementptr inbounds %Array_Token_, ptr %24, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i27.i, align 8
  %ptridx.i.i.i248 = getelementptr inbounds ptr, ptr %28, i64 %27
  %29 = load ptr, ptr %ptridx.i.i.i248, align 8
  store ptr %29, ptr %memberidx, align 8
  br label %Parser_advance.exit.i251

Parser_advance.exit.i251:                         ; preds = %if.entry.i.i249, %if.entry6
  %30 = load ptr, ptr %memberidx, align 8
  %31 = load i64, ptr %30, align 4
  %.not.i250 = icmp eq i64 %31, 26
  br i1 %.not.i250, label %Parser_parse_function_type.exit, label %if.entry.i253

if.entry.i253:                                    ; preds = %Parser_advance.exit.i251
  call fastcc void @Parser_parse_type_list(ptr nonnull %0, ptr nonnull %21)
  br label %Parser_parse_function_type.exit

Parser_parse_function_type.exit:                  ; preds = %Parser_advance.exit.i251, %if.entry.i253
  %32 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  %33 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 45)
  %memberidx5.i = getelementptr inbounds %FunctionTypeNode, ptr %18, i64 0, i32 3
  %34 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %34, ptr %memberidx5.i, align 8
  %35 = load ptr, ptr %18, align 8
  %36 = load ptr, ptr %34, align 8
  %37 = call ptr @malloc(i32 32)
  %38 = load i64, ptr %35, align 4
  %memberidx1.i.i254 = getelementptr inbounds %FloRange, ptr %36, i64 0, i32 1
  %39 = load i64, ptr %memberidx1.i.i254, align 4
  %memberidx2.i.i255 = getelementptr inbounds %FloRange, ptr %35, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i.i255, align 4
  %memberidx3.i.i256 = getelementptr inbounds %FloRange, ptr %36, i64 0, i32 3
  %41 = load i64, ptr %memberidx3.i.i256, align 4
  store i64 %38, ptr %37, align 4
  %memberidx1.i.i.i257 = getelementptr inbounds %FloRange, ptr %37, i64 0, i32 1
  store i64 %39, ptr %memberidx1.i.i.i257, align 4
  %memberidx2.i.i.i258 = getelementptr inbounds %FloRange, ptr %37, i64 0, i32 2
  store i64 %40, ptr %memberidx2.i.i.i258, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %37, i64 0, i32 3
  store i64 %41, ptr %memberidx3.i.i.i, align 4
  store ptr %37, ptr %18, align 8
  br label %ifend

if.entry11:                                       ; preds = %1
  %42 = tail call ptr @malloc(i32 32)
  %43 = tail call ptr @malloc(i32 24)
  %44 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %44, ptr noundef nonnull align 8 dereferenceable(3) @68, i64 3, i1 false)
  %45 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i.i237 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i.i237, align 8
  %memberidx1.i.i238 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i238, align 4
  %memberidx2.i.i239 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i239, align 4
  %46 = load ptr, ptr %memberidx, align 8
  %memberidx15 = getelementptr inbounds %Token, ptr %46, i64 0, i32 1
  %47 = load ptr, ptr %memberidx15, align 8
  store i64 54, ptr %43, align 4
  %memberidx1.i.i235 = getelementptr inbounds %Token, ptr %43, i64 0, i32 1
  store ptr %47, ptr %memberidx1.i.i235, align 8
  %memberidx.i236 = getelementptr inbounds %IdentifierToken, ptr %43, i64 0, i32 2
  store ptr %45, ptr %memberidx.i236, align 8
  %48 = load ptr, ptr %memberidx15, align 8
  store ptr %48, ptr %42, align 8
  %memberidx.i.i228 = getelementptr inbounds %TypeNode, ptr %42, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i228, align 4
  %memberidx.i229 = getelementptr inbounds %RecordTypeNode, ptr %42, i64 0, i32 2
  store ptr %43, ptr %memberidx.i229, align 8
  %memberidx1.i230 = getelementptr inbounds %RecordTypeNode, ptr %42, i64 0, i32 3
  %49 = call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %49, align 8
  %memberidx.i5.i231 = getelementptr inbounds %Array_TypeNode_, ptr %49, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i231, align 4
  %memberidx1.i.i232 = getelementptr inbounds %Array_TypeNode_, ptr %49, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i232, align 4
  %memberidx2.i.i233 = getelementptr inbounds %Array_TypeNode_, ptr %49, i64 0, i32 1
  %50 = call ptr @malloc(i32 64)
  store ptr %50, ptr %memberidx2.i.i233, align 8
  store i64 0, ptr %memberidx.i5.i231, align 4
  store ptr %49, ptr %memberidx1.i230, align 8
  %memberidx.i220 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %51 = load i64, ptr %memberidx.i220, align 4
  %52 = load ptr, ptr %0, align 8
  %memberidx2.i221 = getelementptr inbounds %Array_Token_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx2.i221, align 4
  %54 = icmp slt i64 %51, %53
  br i1 %54, label %if.entry.i225, label %Parser_advance.exit227

if.entry.i225:                                    ; preds = %if.entry11
  %55 = add nsw i64 %51, 1
  store i64 %55, ptr %memberidx.i220, align 4
  %memberidx.i.i223 = getelementptr inbounds %Array_Token_, ptr %52, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i223, align 8
  %ptridx.i.i224 = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i.i224, align 8
  store ptr %57, ptr %memberidx, align 8
  br label %Parser_advance.exit227

Parser_advance.exit227:                           ; preds = %if.entry11, %if.entry.i225
  %58 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %59 = load i64, ptr %memberidx.i5.i231, align 4
  %60 = load i64, ptr %memberidx1.i.i232, align 4
  %.not.i212 = icmp slt i64 %59, %60
  br i1 %.not.i212, label %Array_TypeNode____sl__.exit219, label %if.entry.i215

if.entry.i215:                                    ; preds = %Parser_advance.exit227
  %61 = shl i64 %60, 1
  store i64 %61, ptr %memberidx1.i.i232, align 4
  %62 = load ptr, ptr %memberidx2.i.i233, align 8
  %63 = shl i64 %60, 4
  %64 = call ptr @realloc(ptr %62, i64 %63)
  store ptr %64, ptr %memberidx2.i.i233, align 8
  br label %Array_TypeNode____sl__.exit219

Array_TypeNode____sl__.exit219:                   ; preds = %Parser_advance.exit227, %if.entry.i215
  %65 = load i64, ptr %memberidx.i5.i231, align 4
  %66 = add nsw i64 %65, 1
  store i64 %66, ptr %memberidx.i5.i231, align 4
  %67 = load ptr, ptr %memberidx2.i.i233, align 8
  %ptridx.i217 = getelementptr inbounds ptr, ptr %67, i64 %65
  store ptr %58, ptr %ptridx.i217, align 8
  %68 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 1)
  %69 = load ptr, ptr %memberidx1.i230, align 8
  %70 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %memberidx.i200 = getelementptr inbounds %Array_TypeNode_, ptr %69, i64 0, i32 2
  %71 = load i64, ptr %memberidx.i200, align 4
  %memberidx1.i201 = getelementptr inbounds %Array_TypeNode_, ptr %69, i64 0, i32 3
  %72 = load i64, ptr %memberidx1.i201, align 4
  %.not.i202 = icmp slt i64 %71, %72
  br i1 %.not.i202, label %Array_TypeNode____sl__.exit209, label %if.entry.i205

if.entry.i205:                                    ; preds = %Array_TypeNode____sl__.exit219
  %73 = shl i64 %72, 1
  store i64 %73, ptr %memberidx1.i201, align 4
  %memberidx2.i.i204 = getelementptr inbounds %Array_TypeNode_, ptr %69, i64 0, i32 1
  %74 = load ptr, ptr %memberidx2.i.i204, align 8
  %75 = shl i64 %72, 4
  %76 = call ptr @realloc(ptr %74, i64 %75)
  store ptr %76, ptr %memberidx2.i.i204, align 8
  br label %Array_TypeNode____sl__.exit209

Array_TypeNode____sl__.exit209:                   ; preds = %Array_TypeNode____sl__.exit219, %if.entry.i205
  %77 = load i64, ptr %memberidx.i200, align 4
  %78 = add nsw i64 %77, 1
  store i64 %78, ptr %memberidx.i200, align 4
  %memberidx4.i206 = getelementptr inbounds %Array_TypeNode_, ptr %69, i64 0, i32 1
  %79 = load ptr, ptr %memberidx4.i206, align 8
  %ptridx.i207 = getelementptr inbounds ptr, ptr %79, i64 %77
  store ptr %70, ptr %ptridx.i207, align 8
  %80 = load ptr, ptr %memberidx, align 8
  %81 = load i64, ptr %80, align 4
  %82 = icmp eq i64 %81, 30
  br i1 %82, label %if.entry.i190, label %else.i196

if.entry.i190:                                    ; preds = %Array_TypeNode____sl__.exit209
  %83 = load i64, ptr %memberidx.i220, align 4
  %84 = load ptr, ptr %0, align 8
  %memberidx2.i.i189 = getelementptr inbounds %Array_Token_, ptr %84, i64 0, i32 2
  %85 = load i64, ptr %memberidx2.i.i189, align 4
  %86 = icmp slt i64 %83, %85
  br i1 %86, label %if.entry.i.i194, label %ifend

if.entry.i.i194:                                  ; preds = %if.entry.i190
  %87 = add nsw i64 %83, 1
  store i64 %87, ptr %memberidx.i220, align 4
  %memberidx.i.i.i192 = getelementptr inbounds %Array_Token_, ptr %84, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i.i.i192, align 8
  %ptridx.i.i.i193 = getelementptr inbounds ptr, ptr %88, i64 %87
  %89 = load ptr, ptr %ptridx.i.i.i193, align 8
  store ptr %89, ptr %memberidx, align 8
  br label %ifend

else.i196:                                        ; preds = %Array_TypeNode____sl__.exit209
  %90 = call ptr @malloc(i32 16)
  %memberidx35.i197 = getelementptr inbounds %Token, ptr %80, i64 0, i32 1
  %91 = load ptr, ptr %memberidx35.i197, align 8
  store i64 46, ptr %90, align 4
  %memberidx1.i82.i198 = getelementptr inbounds %Token, ptr %90, i64 0, i32 1
  store ptr %91, ptr %memberidx1.i82.i198, align 8
  br label %ifend

else12:                                           ; preds = %1
  %92 = call ptr @malloc(i32 16)
  %93 = load ptr, ptr %memberidx, align 8
  %memberidx1.i173 = getelementptr inbounds %Token, ptr %93, i64 0, i32 1
  %94 = load ptr, ptr %memberidx1.i173, align 8
  store ptr %94, ptr %92, align 8
  %memberidx.i.i174 = getelementptr inbounds %TypeNode, ptr %92, i64 0, i32 1
  store i64 10, ptr %memberidx.i.i174, align 4
  %95 = load i64, ptr %93, align 4
  switch i64 %95, label %if.entry61.i [
    i64 59, label %if.entry.i176
    i64 60, label %if.entry7.i
    i64 61, label %if.entry13.i
    i64 62, label %if.entry19.i
    i64 63, label %if.entry25.i
    i64 64, label %if.entry31.i
    i64 65, label %if.entry37.i
    i64 66, label %if.entry43.i
    i64 67, label %if.entry49.i
    i64 68, label %if.entry55.i
    i64 69, label %ifend.i
  ]

if.entry.i176:                                    ; preds = %else12
  store i64 0, ptr %memberidx.i.i174, align 4
  br label %ifend.i

ifend.i:                                          ; preds = %else12, %Parser_error.exit.i, %if.entry55.i, %if.entry49.i, %if.entry43.i, %if.entry37.i, %if.entry31.i, %if.entry25.i, %if.entry19.i, %if.entry13.i, %if.entry7.i, %if.entry.i176
  %memberidx.i88.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %96 = load i64, ptr %memberidx.i88.i, align 4
  %97 = load ptr, ptr %0, align 8
  %memberidx2.i89.i = getelementptr inbounds %Array_Token_, ptr %97, i64 0, i32 2
  %98 = load i64, ptr %memberidx2.i89.i, align 4
  %99 = icmp slt i64 %96, %98
  br i1 %99, label %if.entry.i.i179, label %ifend

if.entry.i.i179:                                  ; preds = %ifend.i
  %100 = add nsw i64 %96, 1
  store i64 %100, ptr %memberidx.i88.i, align 4
  %memberidx.i.i90.i = getelementptr inbounds %Array_Token_, ptr %97, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i.i90.i, align 8
  %ptridx.i.i91.i = getelementptr inbounds ptr, ptr %101, i64 %100
  %102 = load ptr, ptr %ptridx.i.i91.i, align 8
  store ptr %102, ptr %memberidx, align 8
  br label %ifend

if.entry7.i:                                      ; preds = %else12
  store i64 1, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry13.i:                                     ; preds = %else12
  store i64 2, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry19.i:                                     ; preds = %else12
  store i64 3, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry25.i:                                     ; preds = %else12
  store i64 4, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry31.i:                                     ; preds = %else12
  store i64 5, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry37.i:                                     ; preds = %else12
  store i64 7, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry43.i:                                     ; preds = %else12
  store i64 6, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry49.i:                                     ; preds = %else12
  store i64 8, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry55.i:                                     ; preds = %else12
  store i64 9, ptr %memberidx.i.i174, align 4
  br label %ifend.i

if.entry61.i:                                     ; preds = %else12
  %103 = call ptr @malloc(i32 26)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(26) %103, ptr noundef nonnull align 8 dereferenceable(26) @67, i64 26, i1 false)
  %104 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %104, align 8
  %memberidx.i.i92.i = getelementptr inbounds %string, ptr %104, i64 0, i32 1
  store ptr %103, ptr %memberidx.i.i92.i, align 8
  %memberidx1.i.i93.i = getelementptr inbounds %string, ptr %104, i64 0, i32 2
  store i64 26, ptr %memberidx1.i.i93.i, align 4
  %memberidx2.i.i94.i = getelementptr inbounds %string, ptr %104, i64 0, i32 3
  store i64 26, ptr %memberidx2.i.i94.i, align 4
  %memberidx.i87.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %105 = load ptr, ptr %memberidx.i87.i, align 8
  %106 = call ptr @malloc(i32 24)
  %107 = load ptr, ptr %memberidx, align 8
  %memberidx2.i.i183 = getelementptr inbounds %Token, ptr %107, i64 0, i32 1
  %108 = load ptr, ptr %memberidx2.i.i183, align 8
  store i64 2, ptr %106, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloError, ptr %106, i64 0, i32 2
  store ptr %108, ptr %memberidx1.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %FloError, ptr %106, i64 0, i32 1
  store ptr %104, ptr %memberidx2.i.i.i, align 8
  %memberidx.i.i.i184 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 2
  %109 = load i64, ptr %memberidx.i.i.i184, align 4
  %memberidx1.i4.i.i = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 3
  %110 = load i64, ptr %memberidx1.i4.i.i, align 4
  %.not.i.i.i = icmp slt i64 %109, %110
  br i1 %.not.i.i.i, label %Parser_error.exit.i, label %if.entry.i.i.i

if.entry.i.i.i:                                   ; preds = %if.entry61.i
  %111 = shl i64 %110, 1
  store i64 %111, ptr %memberidx1.i4.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %112 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %113 = shl i64 %110, 4
  %114 = call ptr @realloc(ptr %112, i64 %113)
  store ptr %114, ptr %memberidx2.i.i.i.i, align 8
  br label %Parser_error.exit.i

Parser_error.exit.i:                              ; preds = %if.entry.i.i.i, %if.entry61.i
  %115 = load i64, ptr %memberidx.i.i.i184, align 4
  %116 = add nsw i64 %115, 1
  store i64 %116, ptr %memberidx.i.i.i184, align 4
  %memberidx4.i.i.i = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %117 = load ptr, ptr %memberidx4.i.i.i, align 8
  %ptridx.i.i.i185 = getelementptr inbounds ptr, ptr %117, i64 %115
  store ptr %106, ptr %ptridx.i.i.i185, align 8
  br label %ifend.i

while.entry:                                      ; preds = %while.entry.preheader, %ifend30
  %type_node.1 = phi ptr [ %type_node.3, %ifend30 ], [ %type_node.0, %while.entry.preheader ]
  %118 = load ptr, ptr %memberidx, align 8
  %119 = load i64, ptr %118, align 4
  %120 = icmp eq i64 %119, 29
  br i1 %120, label %if.entry28, label %else29

while.end:                                        ; preds = %ifend30, %ifend
  %type_node.2 = phi ptr [ %type_node.0, %ifend ], [ %type_node.3, %ifend30 ]
  ret ptr %type_node.2

if.entry28:                                       ; preds = %while.entry
  %121 = load i64, ptr %memberidx.i165, align 4
  %122 = load ptr, ptr %0, align 8
  %memberidx2.i166 = getelementptr inbounds %Array_Token_, ptr %122, i64 0, i32 2
  %123 = load i64, ptr %memberidx2.i166, align 4
  %124 = icmp slt i64 %121, %123
  br i1 %124, label %if.entry.i170, label %Parser_advance.exit171

if.entry.i170:                                    ; preds = %if.entry28
  %125 = add nsw i64 %121, 1
  store i64 %125, ptr %memberidx.i165, align 4
  %memberidx.i.i168 = getelementptr inbounds %Array_Token_, ptr %122, i64 0, i32 1
  %126 = load ptr, ptr %memberidx.i.i168, align 8
  %ptridx.i.i169 = getelementptr inbounds ptr, ptr %126, i64 %125
  %127 = load ptr, ptr %ptridx.i.i169, align 8
  store ptr %127, ptr %memberidx, align 8
  br label %Parser_advance.exit171

Parser_advance.exit171:                           ; preds = %if.entry28, %if.entry.i170
  %128 = load ptr, ptr %memberidx, align 8
  %129 = load i64, ptr %128, align 4
  %130 = icmp eq i64 %129, 30
  %131 = tail call ptr @malloc(i32 32)
  br i1 %130, label %if.entry33, label %else34

else29:                                           ; preds = %while.entry
  %132 = tail call ptr @malloc(i32 24)
  %133 = load ptr, ptr %type_node.1, align 8
  %134 = load ptr, ptr %memberidx, align 8
  %memberidx50 = getelementptr inbounds %Token, ptr %134, i64 0, i32 1
  %135 = load ptr, ptr %memberidx50, align 8
  %136 = call ptr @malloc(i32 32)
  %137 = load i64, ptr %133, align 4
  %memberidx1.i159 = getelementptr inbounds %FloRange, ptr %135, i64 0, i32 1
  %138 = load i64, ptr %memberidx1.i159, align 4
  %memberidx2.i160 = getelementptr inbounds %FloRange, ptr %133, i64 0, i32 2
  %139 = load i64, ptr %memberidx2.i160, align 4
  %memberidx3.i161 = getelementptr inbounds %FloRange, ptr %135, i64 0, i32 3
  %140 = load i64, ptr %memberidx3.i161, align 4
  store i64 %137, ptr %136, align 4
  %memberidx1.i.i162 = getelementptr inbounds %FloRange, ptr %136, i64 0, i32 1
  store i64 %138, ptr %memberidx1.i.i162, align 4
  %memberidx2.i.i163 = getelementptr inbounds %FloRange, ptr %136, i64 0, i32 2
  store i64 %139, ptr %memberidx2.i.i163, align 4
  %memberidx3.i.i164 = getelementptr inbounds %FloRange, ptr %136, i64 0, i32 3
  store i64 %140, ptr %memberidx3.i.i164, align 4
  store ptr %136, ptr %132, align 8
  %memberidx.i.i157 = getelementptr inbounds %TypeNode, ptr %132, i64 0, i32 1
  store i64 13, ptr %memberidx.i.i157, align 4
  %memberidx.i158 = getelementptr inbounds %PointerTypeNode, ptr %132, i64 0, i32 2
  store ptr %type_node.1, ptr %memberidx.i158, align 8
  %141 = load ptr, ptr %memberidx, align 8
  %142 = load i64, ptr %141, align 4
  %143 = icmp eq i64 %142, 11
  br i1 %143, label %if.entry53, label %else54

ifend30:                                          ; preds = %if.entry.i, %else54, %else.i125, %if.entry.i.i123, %if.entry.i119, %Parser_eat.exit
  %type_node.3 = phi ptr [ %193, %Parser_eat.exit ], [ %131, %if.entry.i119 ], [ %131, %if.entry.i.i123 ], [ %131, %else.i125 ], [ %132, %else54 ], [ %132, %if.entry.i ]
  %144 = load ptr, ptr %memberidx, align 8
  %145 = load i64, ptr %144, align 4
  %146 = icmp eq i64 %145, 29
  %147 = icmp eq i64 %145, 11
  %148 = or i1 %146, %147
  %149 = icmp eq i64 %145, 4
  %150 = or i1 %149, %148
  %151 = load ptr, ptr %memberidx2.i241, align 8
  %memberidx3.i156 = getelementptr inbounds %Array_FloError_, ptr %151, i64 0, i32 2
  %152 = load i64, ptr %memberidx3.i156, align 4
  %153 = icmp eq i64 %152, 0
  %154 = and i1 %150, %153
  br i1 %154, label %while.entry, label %while.end

if.entry33:                                       ; preds = %Parser_advance.exit171
  %155 = tail call ptr @malloc(i32 24)
  %156 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %156, ptr noundef nonnull align 8 dereferenceable(5) @69, i64 5, i1 false)
  %157 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %157, align 8
  %memberidx.i.i151 = getelementptr inbounds %string, ptr %157, i64 0, i32 1
  store ptr %156, ptr %memberidx.i.i151, align 8
  %memberidx1.i.i152 = getelementptr inbounds %string, ptr %157, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i152, align 4
  %memberidx2.i.i153 = getelementptr inbounds %string, ptr %157, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i153, align 4
  %158 = load ptr, ptr %memberidx, align 8
  %memberidx38 = getelementptr inbounds %Token, ptr %158, i64 0, i32 1
  %159 = load ptr, ptr %memberidx38, align 8
  store i64 54, ptr %155, align 4
  %memberidx1.i.i149 = getelementptr inbounds %Token, ptr %155, i64 0, i32 1
  store ptr %159, ptr %memberidx1.i.i149, align 8
  %memberidx.i150 = getelementptr inbounds %IdentifierToken, ptr %155, i64 0, i32 2
  store ptr %157, ptr %memberidx.i150, align 8
  %160 = load ptr, ptr %memberidx38, align 8
  store ptr %160, ptr %131, align 8
  %memberidx.i.i143 = getelementptr inbounds %TypeNode, ptr %131, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i143, align 4
  %memberidx.i144 = getelementptr inbounds %RecordTypeNode, ptr %131, i64 0, i32 2
  store ptr %155, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %RecordTypeNode, ptr %131, i64 0, i32 3
  %161 = call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %161, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_TypeNode_, ptr %161, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i, align 4
  %memberidx1.i.i146 = getelementptr inbounds %Array_TypeNode_, ptr %161, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i146, align 4
  %memberidx2.i.i147 = getelementptr inbounds %Array_TypeNode_, ptr %161, i64 0, i32 1
  %162 = call ptr @malloc(i32 64)
  store ptr %162, ptr %memberidx2.i.i147, align 8
  store i64 0, ptr %memberidx.i5.i, align 4
  store ptr %161, ptr %memberidx1.i145, align 8
  %163 = load i64, ptr %memberidx1.i.i146, align 4
  %.not.i = icmp sgt i64 %163, 0
  br i1 %.not.i, label %Array_TypeNode____sl__.exit, label %if.entry.i142

if.entry.i142:                                    ; preds = %if.entry33
  %164 = shl i64 %163, 1
  store i64 %164, ptr %memberidx1.i.i146, align 4
  %165 = shl i64 %163, 4
  %166 = call ptr @realloc(ptr %162, i64 %165)
  store ptr %166, ptr %memberidx2.i.i147, align 8
  br label %Array_TypeNode____sl__.exit

Array_TypeNode____sl__.exit:                      ; preds = %if.entry33, %if.entry.i142
  %167 = load i64, ptr %memberidx.i5.i, align 4
  %168 = add nsw i64 %167, 1
  store i64 %168, ptr %memberidx.i5.i, align 4
  %169 = load ptr, ptr %memberidx2.i.i147, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %169, i64 %167
  store ptr %type_node.1, ptr %ptridx.i, align 8
  br label %ifend35

else34:                                           ; preds = %Parser_advance.exit171
  %170 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %171 = load ptr, ptr %memberidx, align 8
  %memberidx43 = getelementptr inbounds %Token, ptr %171, i64 0, i32 1
  %172 = load ptr, ptr %memberidx43, align 8
  store ptr %172, ptr %131, align 8
  %memberidx.i.i135 = getelementptr inbounds %TypeNode, ptr %131, i64 0, i32 1
  store i64 14, ptr %memberidx.i.i135, align 4
  %memberidx.i136 = getelementptr inbounds %ArrayTypeNode, ptr %131, i64 0, i32 2
  store ptr %type_node.1, ptr %memberidx.i136, align 8
  %memberidx1.i137 = getelementptr inbounds %ArrayTypeNode, ptr %131, i64 0, i32 3
  store ptr %170, ptr %memberidx1.i137, align 8
  br label %ifend35

ifend35:                                          ; preds = %else34, %Array_TypeNode____sl__.exit
  %173 = load ptr, ptr %131, align 8
  %174 = load ptr, ptr %memberidx, align 8
  %memberidx47 = getelementptr inbounds %Token, ptr %174, i64 0, i32 1
  %175 = load ptr, ptr %memberidx47, align 8
  %176 = call ptr @malloc(i32 32)
  %177 = load i64, ptr %173, align 4
  %memberidx1.i129 = getelementptr inbounds %FloRange, ptr %175, i64 0, i32 1
  %178 = load i64, ptr %memberidx1.i129, align 4
  %memberidx2.i130 = getelementptr inbounds %FloRange, ptr %173, i64 0, i32 2
  %179 = load i64, ptr %memberidx2.i130, align 4
  %memberidx3.i131 = getelementptr inbounds %FloRange, ptr %175, i64 0, i32 3
  %180 = load i64, ptr %memberidx3.i131, align 4
  store i64 %177, ptr %176, align 4
  %memberidx1.i.i132 = getelementptr inbounds %FloRange, ptr %176, i64 0, i32 1
  store i64 %178, ptr %memberidx1.i.i132, align 4
  %memberidx2.i.i133 = getelementptr inbounds %FloRange, ptr %176, i64 0, i32 2
  store i64 %179, ptr %memberidx2.i.i133, align 4
  %memberidx3.i.i134 = getelementptr inbounds %FloRange, ptr %176, i64 0, i32 3
  store i64 %180, ptr %memberidx3.i.i134, align 4
  store ptr %176, ptr %131, align 8
  %181 = load ptr, ptr %memberidx, align 8
  %182 = load i64, ptr %181, align 4
  %183 = icmp eq i64 %182, 30
  br i1 %183, label %if.entry.i119, label %else.i125

if.entry.i119:                                    ; preds = %ifend35
  %184 = load i64, ptr %memberidx.i165, align 4
  %185 = load ptr, ptr %0, align 8
  %memberidx2.i.i118 = getelementptr inbounds %Array_Token_, ptr %185, i64 0, i32 2
  %186 = load i64, ptr %memberidx2.i.i118, align 4
  %187 = icmp slt i64 %184, %186
  br i1 %187, label %if.entry.i.i123, label %ifend30

if.entry.i.i123:                                  ; preds = %if.entry.i119
  %188 = add nsw i64 %184, 1
  store i64 %188, ptr %memberidx.i165, align 4
  %memberidx.i.i.i121 = getelementptr inbounds %Array_Token_, ptr %185, i64 0, i32 1
  %189 = load ptr, ptr %memberidx.i.i.i121, align 8
  %ptridx.i.i.i122 = getelementptr inbounds ptr, ptr %189, i64 %188
  %190 = load ptr, ptr %ptridx.i.i.i122, align 8
  store ptr %190, ptr %memberidx, align 8
  br label %ifend30

else.i125:                                        ; preds = %ifend35
  %191 = call ptr @malloc(i32 16)
  %memberidx35.i126 = getelementptr inbounds %Token, ptr %181, i64 0, i32 1
  %192 = load ptr, ptr %memberidx35.i126, align 8
  store i64 46, ptr %191, align 4
  %memberidx1.i82.i127 = getelementptr inbounds %Token, ptr %191, i64 0, i32 1
  store ptr %192, ptr %memberidx1.i82.i127, align 8
  br label %ifend30

if.entry53:                                       ; preds = %else29
  %193 = tail call ptr @malloc(i32 24)
  %194 = load ptr, ptr %132, align 8
  %195 = load ptr, ptr %memberidx, align 8
  %196 = load i64, ptr %195, align 4
  %197 = icmp eq i64 %196, 11
  br i1 %197, label %if.entry.i113, label %else.i

if.entry.i113:                                    ; preds = %if.entry53
  %198 = load i64, ptr %memberidx.i.i111, align 4
  %199 = load ptr, ptr %0, align 8
  %memberidx2.i.i112 = getelementptr inbounds %Array_Token_, ptr %199, i64 0, i32 2
  %200 = load i64, ptr %memberidx2.i.i112, align 4
  %201 = icmp slt i64 %198, %200
  br i1 %201, label %if.entry.i.i, label %Parser_eat.exit

if.entry.i.i:                                     ; preds = %if.entry.i113
  %202 = add nsw i64 %198, 1
  store i64 %202, ptr %memberidx.i.i111, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %199, i64 0, i32 1
  %203 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %203, i64 %202
  %204 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %204, ptr %memberidx, align 8
  br label %Parser_eat.exit

else.i:                                           ; preds = %if.entry53
  %205 = call ptr @malloc(i32 16)
  %memberidx35.i = getelementptr inbounds %Token, ptr %195, i64 0, i32 1
  %206 = load ptr, ptr %memberidx35.i, align 8
  store i64 46, ptr %205, align 4
  %memberidx1.i82.i = getelementptr inbounds %Token, ptr %205, i64 0, i32 1
  store ptr %206, ptr %memberidx1.i82.i, align 8
  br label %Parser_eat.exit

Parser_eat.exit:                                  ; preds = %if.entry.i113, %if.entry.i.i, %else.i
  %common.ret.op.i = phi ptr [ %205, %else.i ], [ %195, %if.entry.i.i ], [ %195, %if.entry.i113 ]
  %memberidx57 = getelementptr inbounds %Token, ptr %common.ret.op.i, i64 0, i32 1
  %207 = load ptr, ptr %memberidx57, align 8
  %208 = call ptr @malloc(i32 32)
  %209 = load i64, ptr %194, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %207, i64 0, i32 1
  %210 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i108 = getelementptr inbounds %FloRange, ptr %194, i64 0, i32 2
  %211 = load i64, ptr %memberidx2.i108, align 4
  %memberidx3.i109 = getelementptr inbounds %FloRange, ptr %207, i64 0, i32 3
  %212 = load i64, ptr %memberidx3.i109, align 4
  store i64 %209, ptr %208, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %208, i64 0, i32 1
  store i64 %210, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %208, i64 0, i32 2
  store i64 %211, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %208, i64 0, i32 3
  store i64 %212, ptr %memberidx3.i.i, align 4
  store ptr %208, ptr %193, align 8
  %memberidx.i.i106 = getelementptr inbounds %TypeNode, ptr %193, i64 0, i32 1
  store i64 13, ptr %memberidx.i.i106, align 4
  %memberidx.i107 = getelementptr inbounds %PointerTypeNode, ptr %193, i64 0, i32 2
  store ptr %132, ptr %memberidx.i107, align 8
  br label %ifend30

else54:                                           ; preds = %else29
  %213 = load i64, ptr %memberidx.i, align 4
  %214 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %214, i64 0, i32 2
  %215 = load i64, ptr %memberidx2.i, align 4
  %216 = icmp slt i64 %213, %215
  br i1 %216, label %if.entry.i, label %ifend30

if.entry.i:                                       ; preds = %else54
  %217 = add nsw i64 %213, 1
  store i64 %217, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %214, i64 0, i32 1
  %218 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %218, i64 %217
  %219 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %219, ptr %memberidx, align 8
  br label %ifend30
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ExpressionNode__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ExpressionNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc void @Parser_parse_expression_list(ptr %0, ptr nocapture %1) unnamed_addr {
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, 33
  %memberidx2.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx3.i.i, align 4
  %8 = icmp eq i64 %7, 0
  %9 = and i1 %5, %8
  br i1 %9, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %2
  %memberidx.i11.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %10 = load ptr, ptr %0, align 8
  %memberidx2.i12.i = getelementptr inbounds %Array_Token_, ptr %10, i64 0, i32 2
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %10, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %11 = load i64, ptr %memberidx.i11.i, align 4
  %12 = load i64, ptr %memberidx2.i12.i, align 4
  %13 = icmp slt i64 %11, %12
  br i1 %13, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %while.entry.i
  %14 = add nsw i64 %11, 1
  store i64 %14, ptr %memberidx.i11.i, align 4
  %15 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %16, ptr %memberidx.i, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %while.entry.i
  %17 = load ptr, ptr %memberidx.i, align 8
  %18 = load i64, ptr %17, align 4
  %19 = icmp eq i64 %18, 33
  %20 = load i64, ptr %memberidx3.i.i, align 4
  %21 = icmp eq i64 %20, 0
  %22 = and i1 %19, %21
  br i1 %22, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %2
  %23 = call fastcc ptr @Parser_parse_expression(ptr %0)
  %memberidx.i15 = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 2
  %24 = load i64, ptr %memberidx.i15, align 4
  %memberidx1.i = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 3
  %25 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %24, %25
  br i1 %.not.i, label %Array_ExpressionNode____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %Parser_new_lines.exit
  %26 = shl i64 %25, 1
  store i64 %26, ptr %memberidx1.i, align 4
  %memberidx2.i.i17 = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 1
  %27 = load ptr, ptr %memberidx2.i.i17, align 8
  %28 = shl i64 %25, 4
  %29 = call ptr @realloc(ptr %27, i64 %28)
  store ptr %29, ptr %memberidx2.i.i17, align 8
  br label %Array_ExpressionNode____sl__.exit

Array_ExpressionNode____sl__.exit:                ; preds = %Parser_new_lines.exit, %if.entry.i
  %30 = load i64, ptr %memberidx.i15, align 4
  %31 = add nsw i64 %30, 1
  store i64 %31, ptr %memberidx.i15, align 4
  %memberidx4.i = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 1
  %32 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %32, i64 %30
  store ptr %23, ptr %ptridx.i, align 8
  %33 = load ptr, ptr %memberidx.i, align 8
  %34 = load i64, ptr %33, align 4
  %35 = icmp eq i64 %34, 33
  %36 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i21 = getelementptr inbounds %Array_FloError_, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx3.i.i21, align 4
  %38 = icmp eq i64 %37, 0
  %39 = and i1 %35, %38
  br i1 %39, label %while.entry.i24.preheader, label %Parser_new_lines.exit33

while.entry.i24.preheader:                        ; preds = %Array_ExpressionNode____sl__.exit
  %memberidx.i11.i22 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %40 = load ptr, ptr %0, align 8
  %memberidx2.i12.i23 = getelementptr inbounds %Array_Token_, ptr %40, i64 0, i32 2
  %memberidx.i.i.i26 = getelementptr inbounds %Array_Token_, ptr %40, i64 0, i32 1
  br label %while.entry.i24

while.entry.i24:                                  ; preds = %while.entry.i24.preheader, %Parser_advance.exit.i32
  %41 = load i64, ptr %memberidx.i11.i22, align 4
  %42 = load i64, ptr %memberidx2.i12.i23, align 4
  %43 = icmp slt i64 %41, %42
  br i1 %43, label %if.entry.i.i28, label %Parser_advance.exit.i32

if.entry.i.i28:                                   ; preds = %while.entry.i24
  %44 = add nsw i64 %41, 1
  store i64 %44, ptr %memberidx.i11.i22, align 4
  %45 = load ptr, ptr %memberidx.i.i.i26, align 8
  %ptridx.i.i.i27 = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i27, align 8
  store ptr %46, ptr %memberidx.i, align 8
  br label %Parser_advance.exit.i32

Parser_advance.exit.i32:                          ; preds = %if.entry.i.i28, %while.entry.i24
  %47 = load ptr, ptr %memberidx.i, align 8
  %48 = load i64, ptr %47, align 4
  %49 = icmp eq i64 %48, 33
  %50 = load i64, ptr %memberidx3.i.i21, align 4
  %51 = icmp eq i64 %50, 0
  %52 = and i1 %49, %51
  br i1 %52, label %while.entry.i24, label %Parser_new_lines.exit33

Parser_new_lines.exit33:                          ; preds = %Parser_advance.exit.i32, %Array_ExpressionNode____sl__.exit
  %53 = load ptr, ptr %memberidx.i, align 8
  %54 = load i64, ptr %53, align 4
  %55 = icmp eq i64 %54, 3
  %56 = load i64, ptr %memberidx3.i.i21, align 4
  %57 = icmp eq i64 %56, 0
  %58 = and i1 %55, %57
  br i1 %58, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_new_lines.exit33
  %memberidx.i35 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Array_ExpressionNode____sl__.exit64
  %59 = load i64, ptr %memberidx.i35, align 4
  %60 = load ptr, ptr %0, align 8
  %memberidx2.i36 = getelementptr inbounds %Array_Token_, ptr %60, i64 0, i32 2
  %61 = load i64, ptr %memberidx2.i36, align 4
  %62 = icmp slt i64 %59, %61
  br i1 %62, label %if.entry.i39, label %Parser_advance.exit

if.entry.i39:                                     ; preds = %while.entry
  %63 = add nsw i64 %59, 1
  store i64 %63, ptr %memberidx.i35, align 4
  %memberidx.i.i38 = getelementptr inbounds %Array_Token_, ptr %60, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i.i38, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %64, i64 %63
  %65 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %65, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i39
  %66 = load ptr, ptr %memberidx.i, align 8
  %67 = load i64, ptr %66, align 4
  %68 = icmp eq i64 %67, 33
  %69 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i43 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 2
  %70 = load i64, ptr %memberidx3.i.i43, align 4
  %71 = icmp eq i64 %70, 0
  %72 = and i1 %68, %71
  br i1 %72, label %while.entry.i46.preheader, label %Parser_new_lines.exit55

while.entry.i46.preheader:                        ; preds = %Parser_advance.exit
  %memberidx.i.i.i48 = getelementptr inbounds %Array_Token_, ptr %60, i64 0, i32 1
  br label %while.entry.i46

while.entry.i46:                                  ; preds = %while.entry.i46.preheader, %Parser_advance.exit.i54
  %73 = load i64, ptr %memberidx.i35, align 4
  %74 = load i64, ptr %memberidx2.i36, align 4
  %75 = icmp slt i64 %73, %74
  br i1 %75, label %if.entry.i.i50, label %Parser_advance.exit.i54

if.entry.i.i50:                                   ; preds = %while.entry.i46
  %76 = add nsw i64 %73, 1
  store i64 %76, ptr %memberidx.i35, align 4
  %77 = load ptr, ptr %memberidx.i.i.i48, align 8
  %ptridx.i.i.i49 = getelementptr inbounds ptr, ptr %77, i64 %76
  %78 = load ptr, ptr %ptridx.i.i.i49, align 8
  store ptr %78, ptr %memberidx.i, align 8
  br label %Parser_advance.exit.i54

Parser_advance.exit.i54:                          ; preds = %if.entry.i.i50, %while.entry.i46
  %79 = load ptr, ptr %memberidx.i, align 8
  %80 = load i64, ptr %79, align 4
  %81 = icmp eq i64 %80, 33
  %82 = load i64, ptr %memberidx3.i.i43, align 4
  %83 = icmp eq i64 %82, 0
  %84 = and i1 %81, %83
  br i1 %84, label %while.entry.i46, label %Parser_new_lines.exit55

Parser_new_lines.exit55:                          ; preds = %Parser_advance.exit.i54, %Parser_advance.exit
  %85 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %86 = load i64, ptr %memberidx.i15, align 4
  %87 = load i64, ptr %memberidx1.i, align 4
  %.not.i58 = icmp slt i64 %86, %87
  br i1 %.not.i58, label %Array_ExpressionNode____sl__.exit64, label %if.entry.i61

if.entry.i61:                                     ; preds = %Parser_new_lines.exit55
  %88 = shl i64 %87, 1
  store i64 %88, ptr %memberidx1.i, align 4
  %89 = load ptr, ptr %memberidx4.i, align 8
  %90 = shl i64 %87, 4
  %91 = call ptr @realloc(ptr %89, i64 %90)
  store ptr %91, ptr %memberidx4.i, align 8
  br label %Array_ExpressionNode____sl__.exit64

Array_ExpressionNode____sl__.exit64:              ; preds = %Parser_new_lines.exit55, %if.entry.i61
  %92 = load i64, ptr %memberidx.i15, align 4
  %93 = add nsw i64 %92, 1
  store i64 %93, ptr %memberidx.i15, align 4
  %94 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i63 = getelementptr inbounds ptr, ptr %94, i64 %92
  store ptr %85, ptr %ptridx.i63, align 8
  %95 = load ptr, ptr %memberidx.i, align 8
  %96 = load i64, ptr %95, align 4
  %97 = icmp eq i64 %96, 3
  %98 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i67 = getelementptr inbounds %Array_FloError_, ptr %98, i64 0, i32 2
  %99 = load i64, ptr %memberidx3.i67, align 4
  %100 = icmp eq i64 %99, 0
  %101 = and i1 %97, %100
  br i1 %101, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_ExpressionNode____sl__.exit64, %Parser_new_lines.exit33
  %102 = load ptr, ptr %memberidx.i, align 8
  %103 = load i64, ptr %102, align 4
  %104 = icmp eq i64 %103, 33
  %105 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i71 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 2
  %106 = load i64, ptr %memberidx3.i.i71, align 4
  %107 = icmp eq i64 %106, 0
  %108 = and i1 %104, %107
  br i1 %108, label %while.entry.i74.preheader, label %Parser_new_lines.exit83

while.entry.i74.preheader:                        ; preds = %while.end
  %memberidx.i11.i72 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %109 = load ptr, ptr %0, align 8
  %memberidx2.i12.i73 = getelementptr inbounds %Array_Token_, ptr %109, i64 0, i32 2
  %memberidx.i.i.i76 = getelementptr inbounds %Array_Token_, ptr %109, i64 0, i32 1
  br label %while.entry.i74

while.entry.i74:                                  ; preds = %while.entry.i74.preheader, %Parser_advance.exit.i82
  %110 = load i64, ptr %memberidx.i11.i72, align 4
  %111 = load i64, ptr %memberidx2.i12.i73, align 4
  %112 = icmp slt i64 %110, %111
  br i1 %112, label %if.entry.i.i78, label %Parser_advance.exit.i82

if.entry.i.i78:                                   ; preds = %while.entry.i74
  %113 = add nsw i64 %110, 1
  store i64 %113, ptr %memberidx.i11.i72, align 4
  %114 = load ptr, ptr %memberidx.i.i.i76, align 8
  %ptridx.i.i.i77 = getelementptr inbounds ptr, ptr %114, i64 %113
  %115 = load ptr, ptr %ptridx.i.i.i77, align 8
  store ptr %115, ptr %memberidx.i, align 8
  br label %Parser_advance.exit.i82

Parser_advance.exit.i82:                          ; preds = %if.entry.i.i78, %while.entry.i74
  %116 = load ptr, ptr %memberidx.i, align 8
  %117 = load i64, ptr %116, align 4
  %118 = icmp eq i64 %117, 33
  %119 = load i64, ptr %memberidx3.i.i71, align 4
  %120 = icmp eq i64 %119, 0
  %121 = and i1 %118, %120
  br i1 %121, label %while.entry.i74, label %Parser_new_lines.exit83

Parser_new_lines.exit83:                          ; preds = %Parser_advance.exit.i82, %while.end
  ret void
}

define internal fastcc ptr @Parser_parse_string(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %1 = load ptr, ptr %memberidx.i, align 8
  %2 = load i64, ptr %1, align 4
  %3 = icmp eq i64 %2, 34
  br i1 %3, label %if.entry.i, label %else.i

if.entry.i:                                       ; preds = %for.entry
  %memberidx.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %4 = load i64, ptr %memberidx.i.i, align 4
  %5 = load ptr, ptr %0, align 8
  %memberidx2.i.i = getelementptr inbounds %Array_Token_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx2.i.i, align 4
  %7 = icmp slt i64 %4, %6
  br i1 %7, label %if.entry.i.i, label %Parser_eat.exit

if.entry.i.i:                                     ; preds = %if.entry.i
  %8 = add nsw i64 %4, 1
  store i64 %8, ptr %memberidx.i.i, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %5, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %10, ptr %memberidx.i, align 8
  br label %Parser_eat.exit

else.i:                                           ; preds = %for.entry
  %11 = call ptr @malloc(i32 16)
  %memberidx35.i = getelementptr inbounds %Token, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %memberidx35.i, align 8
  store i64 46, ptr %11, align 4
  %memberidx1.i82.i = getelementptr inbounds %Token, ptr %11, i64 0, i32 1
  store ptr %12, ptr %memberidx1.i82.i, align 8
  br label %Parser_eat.exit

Parser_eat.exit:                                  ; preds = %if.entry.i, %if.entry.i.i, %else.i
  %common.ret.op.i = phi ptr [ %11, %else.i ], [ %1, %if.entry.i.i ], [ %1, %if.entry.i ]
  %13 = alloca %Parser, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %14 = load ptr, ptr %memberidx, align 8
  store ptr null, ptr %13, align 8
  %memberidx1.i = getelementptr inbounds %Parser, ptr %13, i64 0, i32 1
  store ptr %14, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Parser, ptr %13, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %15, align 8
  %memberidx.i18 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 2
  store i64 0, ptr %memberidx.i18, align 4
  %memberidx1.i19 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19, align 4
  %memberidx2.i20 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 1
  %16 = call ptr @malloc(i32 64)
  store ptr %16, ptr %memberidx2.i20, align 8
  store i64 0, ptr %memberidx.i18, align 4
  %memberidx3 = getelementptr inbounds %StrToken, ptr %common.ret.op.i, i64 0, i32 4
  %17 = load ptr, ptr %memberidx3, align 8
  %memberidx441 = getelementptr inbounds %Array_Array_Token__, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx441, align 4
  %19 = icmp sgt i64 %18, 0
  %20 = load ptr, ptr %memberidx.i, align 8
  %21 = load i64, ptr %20, align 4
  %22 = icmp ne i64 %21, 46
  %23 = load ptr, ptr %memberidx, align 8
  %memberidx3.i42 = getelementptr inbounds %Array_FloError_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx3.i42, align 4
  %25 = icmp eq i64 %24, 0
  %26 = and i1 %22, %25
  %27 = and i1 %19, %26
  br i1 %27, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %Parser_eat.exit
  %memberidx3.i26 = getelementptr inbounds %Parser, ptr %13, i64 0, i32 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ExpressionNode____sl__.exit
  %28 = phi ptr [ %17, %for.body.lr.ph ], [ %46, %Array_ExpressionNode____sl__.exit ]
  %i.043 = phi i64 [ 0, %for.body.lr.ph ], [ %45, %Array_ExpressionNode____sl__.exit ]
  %memberidx.i23 = getelementptr inbounds %Array_Array_Token__, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i23, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %29, i64 %i.043
  %30 = load ptr, ptr %ptridx.i, align 8
  store ptr %30, ptr %13, align 8
  store i64 -1, ptr %memberidx2.i, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i25, align 4
  %32 = icmp sgt i64 %31, -1
  br i1 %32, label %if.entry.i28, label %Parser_advance.exit

if.entry.i28:                                     ; preds = %for.body
  store i64 0, ptr %memberidx2.i, align 8
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i27, align 8
  %34 = load ptr, ptr %33, align 8
  store ptr %34, ptr %memberidx3.i26, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %for.body, %if.entry.i28
  %35 = call fastcc ptr @Parser_parse_expression(ptr nonnull %13)
  %36 = load i64, ptr %memberidx.i18, align 4
  %37 = load i64, ptr %memberidx1.i19, align 4
  %.not.i = icmp slt i64 %36, %37
  br i1 %.not.i, label %Array_ExpressionNode____sl__.exit, label %if.entry.i33

if.entry.i33:                                     ; preds = %Parser_advance.exit
  %38 = shl i64 %37, 1
  store i64 %38, ptr %memberidx1.i19, align 4
  %39 = load ptr, ptr %memberidx2.i20, align 8
  %40 = shl i64 %37, 4
  %41 = call ptr @realloc(ptr %39, i64 %40)
  store ptr %41, ptr %memberidx2.i20, align 8
  br label %Array_ExpressionNode____sl__.exit

Array_ExpressionNode____sl__.exit:                ; preds = %Parser_advance.exit, %if.entry.i33
  %42 = load i64, ptr %memberidx.i18, align 4
  %43 = add nsw i64 %42, 1
  store i64 %43, ptr %memberidx.i18, align 4
  %44 = load ptr, ptr %memberidx2.i20, align 8
  %ptridx.i34 = getelementptr inbounds ptr, ptr %44, i64 %42
  store ptr %35, ptr %ptridx.i34, align 8
  %45 = add nuw nsw i64 %i.043, 1
  %46 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %46, i64 0, i32 2
  %47 = load i64, ptr %memberidx4, align 4
  %48 = icmp slt i64 %45, %47
  %49 = load ptr, ptr %memberidx.i, align 8
  %50 = load i64, ptr %49, align 4
  %51 = icmp ne i64 %50, 46
  %52 = load ptr, ptr %memberidx, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx3.i, align 4
  %54 = icmp eq i64 %53, 0
  %55 = and i1 %51, %54
  %56 = and i1 %48, %55
  br i1 %56, label %for.body, label %for.end

for.end:                                          ; preds = %Array_ExpressionNode____sl__.exit, %Parser_eat.exit
  %57 = tail call ptr @malloc(i32 40)
  %memberidx.i35 = getelementptr inbounds %Token, ptr %common.ret.op.i, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i35, align 8
  store ptr %58, ptr %57, align 8
  %memberidx.i.i.i36 = getelementptr inbounds %StatementNode, ptr %57, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i36, align 4
  %memberidx.i.i37 = getelementptr inbounds %ExpressionNode, ptr %57, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i37, align 4
  %memberidx1.i38 = getelementptr inbounds %StringExpressionNode, ptr %57, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx1.i38, align 8
  %memberidx2.i39 = getelementptr inbounds %StringExpressionNode, ptr %57, i64 0, i32 4
  store ptr %15, ptr %memberidx2.i39, align 8
  ret ptr %57
}

define internal fastcc noalias ptr @Parser_parse_variable_declaration_statement(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 40)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i.i = getelementptr inbounds %StatementNode, ptr %2, i64 0, i32 1
  store i64 1, ptr %memberidx.i.i, align 4
  %memberidx.i = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 3
  %memberidx1.i = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 4
  %memberidx.i63 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx.i, i8 0, i64 16, i1 false)
  %5 = load i64, ptr %memberidx.i63, align 4
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i64 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i64, align 4
  %8 = icmp slt i64 %5, %7
  br i1 %8, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %1
  %9 = add nsw i64 %5, 1
  store i64 %9, ptr %memberidx.i63, align 4
  %memberidx.i.i66 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i66, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %11, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %1, %if.entry.i
  %memberidx2 = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 2
  %12 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %if.entry, label %ifend

if.entry:                                         ; preds = %Parser_advance.exit
  %16 = load i64, ptr %memberidx.i63, align 4
  %17 = load ptr, ptr %0, align 8
  %memberidx2.i68 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i68, align 4
  %19 = icmp slt i64 %16, %18
  br i1 %19, label %if.entry.i72, label %Parser_advance.exit73

if.entry.i72:                                     ; preds = %if.entry
  %20 = add nsw i64 %16, 1
  store i64 %20, ptr %memberidx.i63, align 4
  %memberidx.i.i70 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i.i70, align 8
  %ptridx.i.i71 = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i.i71, align 8
  store ptr %22, ptr %memberidx, align 8
  br label %Parser_advance.exit73

Parser_advance.exit73:                            ; preds = %if.entry, %if.entry.i72
  %23 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %23, ptr %memberidx.i, align 8
  br label %ifend

ifend:                                            ; preds = %Parser_advance.exit, %Parser_advance.exit73
  %end_range = alloca ptr, align 8
  %24 = load ptr, ptr %memberidx, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %24, i64 0, i32 1
  %25 = load ptr, ptr %memberidx7, align 8
  store ptr %25, ptr %end_range, align 8
  %26 = load i64, ptr %24, align 4
  %27 = icmp eq i64 %26, 38
  br i1 %27, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend
  %28 = load i64, ptr %memberidx.i63, align 4
  %29 = load ptr, ptr %0, align 8
  %memberidx2.i75 = getelementptr inbounds %Array_Token_, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i75, align 4
  %31 = icmp slt i64 %28, %30
  br i1 %31, label %if.entry.i79, label %Parser_advance.exit80

if.entry.i79:                                     ; preds = %if.entry10
  %32 = add nsw i64 %28, 1
  store i64 %32, ptr %memberidx.i63, align 4
  %memberidx.i.i77 = getelementptr inbounds %Array_Token_, ptr %29, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i77, align 8
  %ptridx.i.i78 = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i78, align 8
  store ptr %34, ptr %memberidx, align 8
  br label %Parser_advance.exit80

Parser_advance.exit80:                            ; preds = %if.entry10, %if.entry.i79
  %35 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %35, ptr %memberidx1.i, align 8
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %end_range, align 8
  br label %ifend12

else11:                                           ; preds = %ifend
  %37 = load ptr, ptr %memberidx.i, align 8
  %38 = icmp ne ptr %37, null
  %39 = icmp eq i64 %26, 25
  %40 = and i1 %39, %38
  br i1 %40, label %if.entry19, label %ifend12

ifend12:                                          ; preds = %ifend30, %else11, %Parser_advance.exit80
  %41 = load ptr, ptr %end_range, align 8
  %42 = call ptr @malloc(i32 32)
  %43 = load i64, ptr %4, align 4
  %memberidx1.i94 = getelementptr inbounds %FloRange, ptr %41, i64 0, i32 1
  %44 = load i64, ptr %memberidx1.i94, align 4
  %memberidx2.i95 = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %45 = load i64, ptr %memberidx2.i95, align 4
  %memberidx3.i96 = getelementptr inbounds %FloRange, ptr %41, i64 0, i32 3
  %46 = load i64, ptr %memberidx3.i96, align 4
  store i64 %43, ptr %42, align 4
  %memberidx1.i.i97 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 1
  store i64 %44, ptr %memberidx1.i.i97, align 4
  %memberidx2.i.i98 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 2
  store i64 %45, ptr %memberidx2.i.i98, align 4
  %memberidx3.i.i99 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 3
  store i64 %46, ptr %memberidx3.i.i99, align 4
  store ptr %42, ptr %2, align 8
  ret ptr %2

if.entry19:                                       ; preds = %else11
  %47 = tail call ptr @malloc(i32 41)
  %48 = load ptr, ptr %37, align 8
  %memberidx.i88 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 3
  store ptr %37, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 4
  store i1 true, ptr %memberidx1.i89, align 1
  store ptr %48, ptr %47, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %47, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i90 = getelementptr inbounds %ExpressionNode, ptr %47, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 5
  %49 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %49, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i.i92 = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i92, align 4
  %memberidx2.i.i93 = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 1
  %50 = call ptr @malloc(i32 64)
  store ptr %50, ptr %memberidx2.i.i93, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %49, ptr %memberidx2.i91, align 8
  store i1 false, ptr %memberidx1.i89, align 1
  %51 = load i64, ptr %memberidx.i63, align 4
  %52 = load ptr, ptr %0, align 8
  %memberidx2.i82 = getelementptr inbounds %Array_Token_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx2.i82, align 4
  %54 = icmp slt i64 %51, %53
  br i1 %54, label %if.entry.i86, label %Parser_advance.exit87

if.entry.i86:                                     ; preds = %if.entry19
  %55 = add nsw i64 %51, 1
  store i64 %55, ptr %memberidx.i63, align 4
  %memberidx.i.i84 = getelementptr inbounds %Array_Token_, ptr %52, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i84, align 8
  %ptridx.i.i85 = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i.i85, align 8
  store ptr %57, ptr %memberidx, align 8
  br label %Parser_advance.exit87

Parser_advance.exit87:                            ; preds = %if.entry19, %if.entry.i86
  %58 = load ptr, ptr %memberidx, align 8
  %59 = load i64, ptr %58, align 4
  %.not = icmp eq i64 %59, 26
  br i1 %.not, label %ifend30, label %if.entry28

if.entry28:                                       ; preds = %Parser_advance.exit87
  %60 = load ptr, ptr %memberidx2.i91, align 8
  call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr %60)
  br label %ifend30

ifend30:                                          ; preds = %Parser_advance.exit87, %if.entry28
  %61 = load ptr, ptr %47, align 8
  %62 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  %memberidx34 = getelementptr inbounds %Token, ptr %62, i64 0, i32 1
  %63 = load ptr, ptr %memberidx34, align 8
  %64 = call ptr @malloc(i32 32)
  %65 = load i64, ptr %61, align 4
  %memberidx1.i62 = getelementptr inbounds %FloRange, ptr %63, i64 0, i32 1
  %66 = load i64, ptr %memberidx1.i62, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %61, i64 0, i32 2
  %67 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %63, i64 0, i32 3
  %68 = load i64, ptr %memberidx3.i, align 4
  store i64 %65, ptr %64, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %64, i64 0, i32 1
  store i64 %66, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %64, i64 0, i32 2
  store i64 %67, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %64, i64 0, i32 3
  store i64 %68, ptr %memberidx3.i.i, align 4
  store ptr %64, ptr %47, align 8
  store ptr %47, ptr %memberidx1.i, align 8
  br label %ifend12
}

define internal fastcc ptr @Parser_parse_statement(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load i64, ptr %2, align 4
  switch i64 %4, label %ifend38 [
    i64 57, label %if.entry
    i64 71, label %if.entry6
    i64 70, label %if.entry11
    i64 75, label %if.entry16
    i64 56, label %if.entry21
    i64 55, label %if.entry26
    i64 74, label %if.entry31
    i64 73, label %if.entry36
  ]

common.ret:                                       ; preds = %switch.early.test, %switch.early.test, %switch.early.test, %Parser_advance.exit.i, %if.entry.i, %if.entry28.i, %ifend.i, %Parser_advance.exit38.i, %Parser_new_lines.exit.i, %Parser_advance.exit67, %Parser_advance.exit, %if.entry26, %if.entry21, %Parser_parse_while_statement.exit, %ifend38
  %common.ret.op = phi ptr [ %195, %ifend38 ], [ %55, %Parser_parse_while_statement.exit ], [ %177, %if.entry21 ], [ %178, %if.entry26 ], [ %186, %Parser_advance.exit ], [ %194, %Parser_advance.exit67 ], [ %5, %Parser_new_lines.exit.i ], [ %5, %Parser_advance.exit38.i ], [ %74, %ifend.i ], [ %74, %if.entry28.i ], [ %154, %switch.early.test ], [ %154, %if.entry.i ], [ %154, %Parser_advance.exit.i ], [ %154, %switch.early.test ], [ %154, %switch.early.test ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %5 = call ptr @malloc(i32 40)
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1.i98 = getelementptr inbounds %Token, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx1.i98, align 8
  store ptr %7, ptr %5, align 8
  %memberidx.i.i.i99 = getelementptr inbounds %StatementNode, ptr %5, i64 0, i32 1
  store i64 0, ptr %memberidx.i.i.i99, align 4
  %memberidx.i.i100 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 4
  store ptr null, ptr %memberidx.i.i100, align 8
  %memberidx.i24.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %8 = load i64, ptr %memberidx.i24.i, align 4
  %9 = load ptr, ptr %0, align 8
  %memberidx2.i.i101 = getelementptr inbounds %Array_Token_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx2.i.i101, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %if.entry.i.i104, label %Parser_advance.exit.i111

if.entry.i.i104:                                  ; preds = %if.entry
  %12 = add nsw i64 %8, 1
  store i64 %12, ptr %memberidx.i24.i, align 4
  %memberidx.i.i25.i = getelementptr inbounds %Array_Token_, ptr %9, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i25.i, align 8
  %ptridx.i.i.i103 = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i.i.i103, align 8
  store ptr %14, ptr %memberidx, align 8
  br label %Parser_advance.exit.i111

Parser_advance.exit.i111:                         ; preds = %if.entry.i.i104, %if.entry
  %memberidx2.i105 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 2
  %15 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %15, ptr %memberidx2.i105, align 8
  %16 = load ptr, ptr %5, align 8
  %17 = load ptr, ptr %15, align 8
  %18 = call ptr @malloc(i32 32)
  %19 = load i64, ptr %16, align 4
  %memberidx1.i.i106 = getelementptr inbounds %FloRange, ptr %17, i64 0, i32 1
  %20 = load i64, ptr %memberidx1.i.i106, align 4
  %memberidx2.i26.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 2
  %21 = load i64, ptr %memberidx2.i26.i, align 4
  %memberidx3.i27.i = getelementptr inbounds %FloRange, ptr %17, i64 0, i32 3
  %22 = load i64, ptr %memberidx3.i27.i, align 4
  store i64 %19, ptr %18, align 4
  %memberidx1.i.i.i107 = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 1
  store i64 %20, ptr %memberidx1.i.i.i107, align 4
  %memberidx2.i.i.i108 = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 2
  store i64 %21, ptr %memberidx2.i.i.i108, align 4
  %memberidx3.i.i.i109 = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 3
  store i64 %22, ptr %memberidx3.i.i.i109, align 4
  store ptr %18, ptr %5, align 8
  %memberidx7.i110 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 3
  %23 = call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %23, ptr %memberidx7.i110, align 8
  %24 = load ptr, ptr %memberidx, align 8
  %25 = load i64, ptr %24, align 4
  %26 = icmp eq i64 %25, 33
  %memberidx2.i.i30.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %27 = load ptr, ptr %memberidx2.i.i30.i, align 8
  %memberidx3.i.i31.i = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx3.i.i31.i, align 4
  %29 = icmp eq i64 %28, 0
  %30 = and i1 %26, %29
  br i1 %30, label %while.entry.i.i.preheader, label %Parser_new_lines.exit.i

while.entry.i.i.preheader:                        ; preds = %Parser_advance.exit.i111
  %31 = load ptr, ptr %0, align 8
  %memberidx2.i12.i.i = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 2
  %memberidx.i.i.i.i112 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 1
  br label %while.entry.i.i

while.entry.i.i:                                  ; preds = %while.entry.i.i.preheader, %Parser_advance.exit.i.i115
  %32 = load i64, ptr %memberidx.i24.i, align 4
  %33 = load i64, ptr %memberidx2.i12.i.i, align 4
  %34 = icmp slt i64 %32, %33
  br i1 %34, label %if.entry.i.i.i114, label %Parser_advance.exit.i.i115

if.entry.i.i.i114:                                ; preds = %while.entry.i.i
  %35 = add nsw i64 %32, 1
  store i64 %35, ptr %memberidx.i24.i, align 4
  %36 = load ptr, ptr %memberidx.i.i.i.i112, align 8
  %ptridx.i.i.i.i113 = getelementptr inbounds ptr, ptr %36, i64 %35
  %37 = load ptr, ptr %ptridx.i.i.i.i113, align 8
  store ptr %37, ptr %memberidx, align 8
  br label %Parser_advance.exit.i.i115

Parser_advance.exit.i.i115:                       ; preds = %if.entry.i.i.i114, %while.entry.i.i
  %38 = load ptr, ptr %memberidx, align 8
  %39 = load i64, ptr %38, align 4
  %40 = icmp eq i64 %39, 33
  %41 = load i64, ptr %memberidx3.i.i31.i, align 4
  %42 = icmp eq i64 %41, 0
  %43 = and i1 %40, %42
  br i1 %43, label %while.entry.i.i, label %Parser_new_lines.exit.i

Parser_new_lines.exit.i:                          ; preds = %Parser_advance.exit.i.i115, %Parser_advance.exit.i111
  %44 = load ptr, ptr %memberidx, align 8
  %45 = load i64, ptr %44, align 4
  %46 = icmp eq i64 %45, 58
  br i1 %46, label %if.entry.i116, label %common.ret

if.entry.i116:                                    ; preds = %Parser_new_lines.exit.i
  %47 = load i64, ptr %memberidx.i24.i, align 4
  %48 = load ptr, ptr %0, align 8
  %memberidx2.i33.i = getelementptr inbounds %Array_Token_, ptr %48, i64 0, i32 2
  %49 = load i64, ptr %memberidx2.i33.i, align 4
  %50 = icmp slt i64 %47, %49
  br i1 %50, label %if.entry.i37.i, label %Parser_advance.exit38.i

if.entry.i37.i:                                   ; preds = %if.entry.i116
  %51 = add nsw i64 %47, 1
  store i64 %51, ptr %memberidx.i24.i, align 4
  %memberidx.i.i35.i = getelementptr inbounds %Array_Token_, ptr %48, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i35.i, align 8
  %ptridx.i.i36.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i.i36.i, align 8
  store ptr %53, ptr %memberidx, align 8
  br label %Parser_advance.exit38.i

Parser_advance.exit38.i:                          ; preds = %if.entry.i37.i, %if.entry.i116
  %54 = call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %54, ptr %memberidx.i.i100, align 8
  br label %common.ret

if.entry6:                                        ; preds = %1
  %55 = call ptr @malloc(i32 32)
  %56 = load ptr, ptr %memberidx, align 8
  %memberidx1.i84 = getelementptr inbounds %Token, ptr %56, i64 0, i32 1
  %57 = load ptr, ptr %memberidx1.i84, align 8
  store ptr %57, ptr %55, align 8
  %memberidx.i.i.i85 = getelementptr inbounds %StatementNode, ptr %55, i64 0, i32 1
  store i64 4, ptr %memberidx.i.i.i85, align 4
  %memberidx.i.i86 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %58 = load i64, ptr %memberidx.i.i86, align 4
  %59 = load ptr, ptr %0, align 8
  %memberidx2.i.i87 = getelementptr inbounds %Array_Token_, ptr %59, i64 0, i32 2
  %60 = load i64, ptr %memberidx2.i.i87, align 4
  %61 = icmp slt i64 %58, %60
  br i1 %61, label %if.entry.i.i90, label %Parser_parse_while_statement.exit

if.entry.i.i90:                                   ; preds = %if.entry6
  %62 = add nsw i64 %58, 1
  store i64 %62, ptr %memberidx.i.i86, align 4
  %memberidx.i.i16.i = getelementptr inbounds %Array_Token_, ptr %59, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i.i16.i, align 8
  %ptridx.i.i.i89 = getelementptr inbounds ptr, ptr %63, i64 %62
  %64 = load ptr, ptr %ptridx.i.i.i89, align 8
  store ptr %64, ptr %memberidx, align 8
  br label %Parser_parse_while_statement.exit

Parser_parse_while_statement.exit:                ; preds = %if.entry6, %if.entry.i.i90
  %memberidx2.i91 = getelementptr inbounds %WhileStatementNode, ptr %55, i64 0, i32 2
  %65 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %65, ptr %memberidx2.i91, align 8
  %66 = load ptr, ptr %55, align 8
  %67 = load ptr, ptr %65, align 8
  %68 = call ptr @malloc(i32 32)
  %69 = load i64, ptr %66, align 4
  %memberidx1.i.i92 = getelementptr inbounds %FloRange, ptr %67, i64 0, i32 1
  %70 = load i64, ptr %memberidx1.i.i92, align 4
  %memberidx2.i17.i = getelementptr inbounds %FloRange, ptr %66, i64 0, i32 2
  %71 = load i64, ptr %memberidx2.i17.i, align 4
  %memberidx3.i18.i = getelementptr inbounds %FloRange, ptr %67, i64 0, i32 3
  %72 = load i64, ptr %memberidx3.i18.i, align 4
  store i64 %69, ptr %68, align 4
  %memberidx1.i.i.i93 = getelementptr inbounds %FloRange, ptr %68, i64 0, i32 1
  store i64 %70, ptr %memberidx1.i.i.i93, align 4
  %memberidx2.i.i.i94 = getelementptr inbounds %FloRange, ptr %68, i64 0, i32 2
  store i64 %71, ptr %memberidx2.i.i.i94, align 4
  %memberidx3.i.i.i95 = getelementptr inbounds %FloRange, ptr %68, i64 0, i32 3
  store i64 %72, ptr %memberidx3.i.i.i95, align 4
  store ptr %68, ptr %55, align 8
  %memberidx7.i = getelementptr inbounds %WhileStatementNode, ptr %55, i64 0, i32 3
  %73 = call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %73, ptr %memberidx7.i, align 8
  br label %common.ret

if.entry11:                                       ; preds = %1
  %74 = call ptr @malloc(i32 72)
  %75 = load ptr, ptr %memberidx, align 8
  %memberidx1.i70 = getelementptr inbounds %Token, ptr %75, i64 0, i32 1
  %76 = load ptr, ptr %memberidx1.i70, align 8
  %memberidx.i.i71 = getelementptr inbounds %ForStatementNode, ptr %74, i64 0, i32 2
  %memberidx1.i.i72 = getelementptr inbounds %ForStatementNode, ptr %74, i64 0, i32 3
  %memberidx2.i.i73 = getelementptr inbounds %ForStatementNode, ptr %74, i64 0, i32 4
  %memberidx3.i.i74 = getelementptr inbounds %ForStatementNode, ptr %74, i64 0, i32 6
  store i64 0, ptr %memberidx3.i.i74, align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %memberidx.i.i71, i8 0, i64 24, i1 false)
  store ptr %76, ptr %74, align 8
  %memberidx.i.i.i75 = getelementptr inbounds %StatementNode, ptr %74, i64 0, i32 1
  store i64 3, ptr %memberidx.i.i.i75, align 4
  %memberidx.i60.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %77 = load i64, ptr %memberidx.i60.i, align 4
  %78 = load ptr, ptr %0, align 8
  %memberidx2.i61.i = getelementptr inbounds %Array_Token_, ptr %78, i64 0, i32 2
  %79 = load i64, ptr %memberidx2.i61.i, align 4
  %80 = icmp slt i64 %77, %79
  br i1 %80, label %if.entry.i.i77, label %Parser_advance.exit.i78

if.entry.i.i77:                                   ; preds = %if.entry11
  %81 = add nsw i64 %77, 1
  store i64 %81, ptr %memberidx.i60.i, align 4
  %memberidx.i.i63.i = getelementptr inbounds %Array_Token_, ptr %78, i64 0, i32 1
  %82 = load ptr, ptr %memberidx.i.i63.i, align 8
  %ptridx.i.i.i76 = getelementptr inbounds ptr, ptr %82, i64 %81
  %83 = load ptr, ptr %ptridx.i.i.i76, align 8
  store ptr %83, ptr %memberidx, align 8
  br label %Parser_advance.exit.i78

Parser_advance.exit.i78:                          ; preds = %if.entry.i.i77, %if.entry11
  %84 = load i64, ptr %memberidx.i60.i, align 4
  %85 = add nsw i64 %84, 1
  %86 = load i64, ptr %memberidx2.i61.i, align 4
  %87 = icmp slt i64 %85, %86
  %88 = add i64 %86, -1
  %.sink131 = select i1 %87, i64 %85, i64 %88
  %memberidx.i12.i.i = getelementptr inbounds %Array_Token_, ptr %78, i64 0, i32 1
  %89 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %89, i64 %.sink131
  %common.ret.op.i.i = load ptr, ptr %ptridx.i13.i.i, align 8
  %90 = load i64, ptr %common.ret.op.i.i, align 4
  %.not.i = icmp eq i64 %90, 80
  br i1 %.not.i, label %else.i, label %if.entry.i79

if.entry.i79:                                     ; preds = %Parser_advance.exit.i78
  %91 = load ptr, ptr %memberidx, align 8
  %92 = load i64, ptr %91, align 4
  %.not57.i = icmp eq i64 %92, 2
  br i1 %.not57.i, label %ifend7.i, label %if.entry5.i

else.i:                                           ; preds = %Parser_advance.exit.i78
  store i64 1, ptr %memberidx3.i.i74, align 4
  %memberidx22.i = getelementptr inbounds %ForStatementNode, ptr %74, i64 0, i32 7
  %93 = call fastcc ptr @Parser_eat(ptr %0, i64 54)
  store ptr %93, ptr %memberidx22.i, align 8
  %94 = load ptr, ptr %memberidx, align 8
  %95 = load i64, ptr %94, align 4
  %96 = icmp eq i64 %95, 80
  br i1 %96, label %if.entry.i72.i, label %else.i.i

if.entry.i72.i:                                   ; preds = %else.i
  %97 = load i64, ptr %memberidx.i60.i, align 4
  %98 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i80 = getelementptr inbounds %Array_Token_, ptr %98, i64 0, i32 2
  %99 = load i64, ptr %memberidx2.i.i.i80, align 4
  %100 = icmp slt i64 %97, %99
  br i1 %100, label %if.entry.i.i.i, label %Parser_eat.exit.i

if.entry.i.i.i:                                   ; preds = %if.entry.i72.i
  %101 = add nsw i64 %97, 1
  store i64 %101, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %98, i64 0, i32 1
  %102 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %102, i64 %101
  %103 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %103, ptr %memberidx, align 8
  br label %Parser_eat.exit.i

else.i.i:                                         ; preds = %else.i
  %104 = call ptr @malloc(i32 16)
  %memberidx35.i.i = getelementptr inbounds %Token, ptr %94, i64 0, i32 1
  %105 = load ptr, ptr %memberidx35.i.i, align 8
  store i64 46, ptr %104, align 4
  %memberidx1.i82.i.i = getelementptr inbounds %Token, ptr %104, i64 0, i32 1
  store ptr %105, ptr %memberidx1.i82.i.i, align 8
  br label %Parser_eat.exit.i

Parser_eat.exit.i:                                ; preds = %if.entry.i72.i, %if.entry.i.i.i, %else.i.i
  %memberidx23.i = getelementptr inbounds %ForStatementNode, ptr %74, i64 0, i32 5
  %106 = call fastcc ptr @Parser_parse_expression(ptr %0)
  store ptr %106, ptr %memberidx23.i, align 8
  br label %ifend.i

ifend.i:                                          ; preds = %if.entry17.i, %Parser_eat.exit108.i, %Parser_eat.exit.i
  %107 = load ptr, ptr %74, align 8
  %108 = load ptr, ptr %memberidx, align 8
  %memberidx27.i = getelementptr inbounds %Token, ptr %108, i64 0, i32 1
  %109 = load ptr, ptr %memberidx27.i, align 8
  %110 = call ptr @malloc(i32 32)
  %111 = load i64, ptr %107, align 4
  %memberidx1.i73.i = getelementptr inbounds %FloRange, ptr %109, i64 0, i32 1
  %112 = load i64, ptr %memberidx1.i73.i, align 4
  %memberidx2.i74.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 2
  %113 = load i64, ptr %memberidx2.i74.i, align 4
  %memberidx3.i75.i = getelementptr inbounds %FloRange, ptr %109, i64 0, i32 3
  %114 = load i64, ptr %memberidx3.i75.i, align 4
  store i64 %111, ptr %110, align 4
  %memberidx1.i.i.i82 = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 1
  store i64 %112, ptr %memberidx1.i.i.i82, align 4
  %memberidx2.i.i76.i = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 2
  store i64 %113, ptr %memberidx2.i.i76.i, align 4
  %memberidx3.i.i77.i = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 3
  store i64 %114, ptr %memberidx3.i.i77.i, align 4
  store ptr %110, ptr %74, align 8
  %115 = load ptr, ptr %memberidx, align 8
  %116 = load i64, ptr %115, align 4
  %117 = icmp ne i64 %116, 46
  %memberidx2.i79.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %118 = load ptr, ptr %memberidx2.i79.i, align 8
  %memberidx3.i80.i = getelementptr inbounds %Array_FloError_, ptr %118, i64 0, i32 2
  %119 = load i64, ptr %memberidx3.i80.i, align 4
  %120 = icmp eq i64 %119, 0
  %121 = and i1 %117, %120
  br i1 %121, label %if.entry28.i, label %common.ret

if.entry5.i:                                      ; preds = %if.entry.i79
  %122 = call fastcc ptr @Parser_parse_statement(ptr %0)
  store ptr %122, ptr %memberidx.i.i71, align 8
  br label %ifend7.i

ifend7.i:                                         ; preds = %if.entry5.i, %if.entry.i79
  %123 = load ptr, ptr %memberidx, align 8
  %124 = load i64, ptr %123, align 4
  %125 = icmp eq i64 %124, 2
  br i1 %125, label %if.entry.i85.i, label %else.i91.i

if.entry.i85.i:                                   ; preds = %ifend7.i
  %126 = load i64, ptr %memberidx.i60.i, align 4
  %127 = load ptr, ptr %0, align 8
  %memberidx2.i.i84.i = getelementptr inbounds %Array_Token_, ptr %127, i64 0, i32 2
  %128 = load i64, ptr %memberidx2.i.i84.i, align 4
  %129 = icmp slt i64 %126, %128
  br i1 %129, label %if.entry.i.i89.i, label %Parser_eat.exit94.i

if.entry.i.i89.i:                                 ; preds = %if.entry.i85.i
  %130 = add nsw i64 %126, 1
  store i64 %130, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i87.i = getelementptr inbounds %Array_Token_, ptr %127, i64 0, i32 1
  %131 = load ptr, ptr %memberidx.i.i.i87.i, align 8
  %ptridx.i.i.i88.i = getelementptr inbounds ptr, ptr %131, i64 %130
  %132 = load ptr, ptr %ptridx.i.i.i88.i, align 8
  store ptr %132, ptr %memberidx, align 8
  br label %Parser_eat.exit94.i

else.i91.i:                                       ; preds = %ifend7.i
  %133 = call ptr @malloc(i32 16)
  %memberidx35.i92.i = getelementptr inbounds %Token, ptr %123, i64 0, i32 1
  %134 = load ptr, ptr %memberidx35.i92.i, align 8
  store i64 46, ptr %133, align 4
  %memberidx1.i82.i93.i = getelementptr inbounds %Token, ptr %133, i64 0, i32 1
  store ptr %134, ptr %memberidx1.i82.i93.i, align 8
  br label %Parser_eat.exit94.i

Parser_eat.exit94.i:                              ; preds = %if.entry.i85.i, %if.entry.i.i89.i, %else.i91.i
  %135 = load ptr, ptr %memberidx, align 8
  %136 = load i64, ptr %135, align 4
  %.not58.i = icmp eq i64 %136, 2
  br i1 %.not58.i, label %ifend13.i, label %if.entry11.i

if.entry11.i:                                     ; preds = %Parser_eat.exit94.i
  %137 = call fastcc ptr @Parser_parse_expression(ptr %0)
  store ptr %137, ptr %memberidx1.i.i72, align 8
  br label %ifend13.i

ifend13.i:                                        ; preds = %if.entry11.i, %Parser_eat.exit94.i
  %138 = load ptr, ptr %memberidx, align 8
  %139 = load i64, ptr %138, align 4
  %140 = icmp eq i64 %139, 2
  br i1 %140, label %if.entry.i99.i, label %else.i105.i

if.entry.i99.i:                                   ; preds = %ifend13.i
  %141 = load i64, ptr %memberidx.i60.i, align 4
  %142 = load ptr, ptr %0, align 8
  %memberidx2.i.i98.i = getelementptr inbounds %Array_Token_, ptr %142, i64 0, i32 2
  %143 = load i64, ptr %memberidx2.i.i98.i, align 4
  %144 = icmp slt i64 %141, %143
  br i1 %144, label %if.entry.i.i103.i, label %Parser_eat.exit108.i

if.entry.i.i103.i:                                ; preds = %if.entry.i99.i
  %145 = add nsw i64 %141, 1
  store i64 %145, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i101.i = getelementptr inbounds %Array_Token_, ptr %142, i64 0, i32 1
  %146 = load ptr, ptr %memberidx.i.i.i101.i, align 8
  %ptridx.i.i.i102.i = getelementptr inbounds ptr, ptr %146, i64 %145
  %147 = load ptr, ptr %ptridx.i.i.i102.i, align 8
  store ptr %147, ptr %memberidx, align 8
  br label %Parser_eat.exit108.i

else.i105.i:                                      ; preds = %ifend13.i
  %148 = call ptr @malloc(i32 16)
  %memberidx35.i106.i = getelementptr inbounds %Token, ptr %138, i64 0, i32 1
  %149 = load ptr, ptr %memberidx35.i106.i, align 8
  store i64 46, ptr %148, align 4
  %memberidx1.i82.i107.i = getelementptr inbounds %Token, ptr %148, i64 0, i32 1
  store ptr %149, ptr %memberidx1.i82.i107.i, align 8
  br label %Parser_eat.exit108.i

Parser_eat.exit108.i:                             ; preds = %if.entry.i99.i, %if.entry.i.i103.i, %else.i105.i
  %150 = load ptr, ptr %memberidx, align 8
  %151 = load i64, ptr %150, align 4
  %.not59.i = icmp eq i64 %151, 27
  br i1 %.not59.i, label %ifend.i, label %if.entry17.i

if.entry17.i:                                     ; preds = %Parser_eat.exit108.i
  %152 = call fastcc ptr @Parser_parse_statement(ptr %0)
  store ptr %152, ptr %memberidx2.i.i73, align 8
  br label %ifend.i

if.entry28.i:                                     ; preds = %ifend.i
  %memberidx31.i = getelementptr inbounds %ForStatementNode, ptr %74, i64 0, i32 8
  %153 = call fastcc ptr @Parser_parse_block(ptr %0)
  store ptr %153, ptr %memberidx31.i, align 8
  br label %common.ret

if.entry16:                                       ; preds = %1
  %154 = call ptr @malloc(i32 24)
  %155 = load ptr, ptr %memberidx, align 8
  %memberidx1.i = getelementptr inbounds %Token, ptr %155, i64 0, i32 1
  %156 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %ReturnStatementNode, ptr %154, i64 0, i32 2
  store ptr null, ptr %memberidx.i.i, align 8
  store ptr %156, ptr %154, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %154, i64 0, i32 1
  store i64 7, ptr %memberidx.i.i.i, align 4
  %memberidx.i18.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %157 = load i64, ptr %memberidx.i18.i, align 4
  %158 = load ptr, ptr %0, align 8
  %memberidx2.i19.i = getelementptr inbounds %Array_Token_, ptr %158, i64 0, i32 2
  %159 = load i64, ptr %memberidx2.i19.i, align 4
  %160 = icmp slt i64 %157, %159
  br i1 %160, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %if.entry16
  %161 = add nsw i64 %157, 1
  store i64 %161, ptr %memberidx.i18.i, align 4
  %memberidx.i.i21.i = getelementptr inbounds %Array_Token_, ptr %158, i64 0, i32 1
  %162 = load ptr, ptr %memberidx.i.i21.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %162, i64 %161
  %163 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %163, ptr %memberidx, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %if.entry16
  %memberidx2.i23.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %164 = load ptr, ptr %memberidx2.i23.i, align 8
  %memberidx3.i24.i = getelementptr inbounds %Array_FloError_, ptr %164, i64 0, i32 2
  %165 = load i64, ptr %memberidx3.i24.i, align 4
  %.fr = freeze i64 %165
  %166 = icmp eq i64 %.fr, 0
  br i1 %166, label %switch.early.test, label %common.ret

switch.early.test:                                ; preds = %Parser_advance.exit.i
  %167 = load ptr, ptr %memberidx, align 8
  %168 = load i64, ptr %167, align 4
  switch i64 %168, label %if.entry.i [
    i64 46, label %common.ret
    i64 33, label %common.ret
    i64 28, label %common.ret
  ]

if.entry.i:                                       ; preds = %switch.early.test
  %169 = call fastcc ptr @Parser_parse_expression(ptr %0)
  %170 = load ptr, ptr %154, align 8
  %171 = load ptr, ptr %169, align 8
  %172 = call ptr @malloc(i32 32)
  %173 = load i64, ptr %170, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %171, i64 0, i32 1
  %174 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %170, i64 0, i32 2
  %175 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %171, i64 0, i32 3
  %176 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %173, ptr %172, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %172, i64 0, i32 1
  store i64 %174, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %172, i64 0, i32 2
  store i64 %175, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %172, i64 0, i32 3
  store i64 %176, ptr %memberidx3.i.i.i, align 4
  store ptr %172, ptr %154, align 8
  store ptr %169, ptr %memberidx.i.i, align 8
  br label %common.ret

if.entry21:                                       ; preds = %1
  %177 = call fastcc ptr @Parser_parse_variable_declaration_statement(ptr %0)
  br label %common.ret

if.entry26:                                       ; preds = %1
  %178 = call fastcc ptr @Parser_parse_const_declaration_statement(ptr %0)
  br label %common.ret

if.entry31:                                       ; preds = %1
  %memberidx.i57 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %179 = load i64, ptr %memberidx.i57, align 4
  %180 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %180, i64 0, i32 2
  %181 = load i64, ptr %memberidx2.i, align 4
  %182 = icmp slt i64 %179, %181
  br i1 %182, label %if.entry.i59, label %Parser_advance.exit

if.entry.i59:                                     ; preds = %if.entry31
  %183 = add nsw i64 %179, 1
  store i64 %183, ptr %memberidx.i57, align 4
  %memberidx.i.i58 = getelementptr inbounds %Array_Token_, ptr %180, i64 0, i32 1
  %184 = load ptr, ptr %memberidx.i.i58, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %184, i64 %183
  %185 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %185, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry31, %if.entry.i59
  %186 = tail call ptr @malloc(i32 16)
  store ptr %3, ptr %186, align 8
  %memberidx.i60 = getelementptr inbounds %StatementNode, ptr %186, i64 0, i32 1
  store i64 5, ptr %memberidx.i60, align 4
  br label %common.ret

if.entry36:                                       ; preds = %1
  %memberidx.i61 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %187 = load i64, ptr %memberidx.i61, align 4
  %188 = load ptr, ptr %0, align 8
  %memberidx2.i62 = getelementptr inbounds %Array_Token_, ptr %188, i64 0, i32 2
  %189 = load i64, ptr %memberidx2.i62, align 4
  %190 = icmp slt i64 %187, %189
  br i1 %190, label %if.entry.i66, label %Parser_advance.exit67

if.entry.i66:                                     ; preds = %if.entry36
  %191 = add nsw i64 %187, 1
  store i64 %191, ptr %memberidx.i61, align 4
  %memberidx.i.i64 = getelementptr inbounds %Array_Token_, ptr %188, i64 0, i32 1
  %192 = load ptr, ptr %memberidx.i.i64, align 8
  %ptridx.i.i65 = getelementptr inbounds ptr, ptr %192, i64 %191
  %193 = load ptr, ptr %ptridx.i.i65, align 8
  store ptr %193, ptr %memberidx, align 8
  br label %Parser_advance.exit67

Parser_advance.exit67:                            ; preds = %if.entry36, %if.entry.i66
  %194 = tail call ptr @malloc(i32 16)
  store ptr %3, ptr %194, align 8
  %memberidx.i68 = getelementptr inbounds %StatementNode, ptr %194, i64 0, i32 1
  store i64 6, ptr %memberidx.i68, align 4
  br label %common.ret

ifend38:                                          ; preds = %1
  %195 = call fastcc ptr @Parser_parse_expression(ptr %0)
  br label %common.ret
}

define internal fastcc void @Parser_parse_args(ptr %0, ptr nocapture %1) unnamed_addr {
  %3 = call fastcc ptr @Parser_parse_arg(ptr %0)
  %memberidx.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 3
  %5 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %4, %5
  br i1 %.not.i, label %Array_ArgNode____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %6 = shl i64 %5, 1
  store i64 %6, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i.i, align 8
  %8 = shl i64 %5, 4
  %9 = call ptr @realloc(ptr %7, i64 %8)
  store ptr %9, ptr %memberidx2.i.i, align 8
  br label %Array_ArgNode____sl__.exit

Array_ArgNode____sl__.exit:                       ; preds = %2, %if.entry.i
  %10 = load i64, ptr %memberidx.i, align 4
  %11 = add nsw i64 %10, 1
  store i64 %11, ptr %memberidx.i, align 4
  %memberidx4.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %12, i64 %10
  store ptr %3, ptr %ptridx.i, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 3
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i, align 4
  %18 = icmp eq i64 %17, 0
  %19 = and i1 %15, %18
  br i1 %19, label %while.entry, label %while.end

while.entry:                                      ; preds = %Array_ArgNode____sl__.exit, %Array_ArgNode____sl__.exit23
  %20 = call fastcc ptr @Parser_eat(ptr %0, i64 3)
  %21 = call fastcc ptr @Parser_parse_arg(ptr %0)
  %22 = load i64, ptr %memberidx.i, align 4
  %23 = load i64, ptr %memberidx1.i, align 4
  %.not.i17 = icmp slt i64 %22, %23
  br i1 %.not.i17, label %Array_ArgNode____sl__.exit23, label %if.entry.i20

if.entry.i20:                                     ; preds = %while.entry
  %24 = shl i64 %23, 1
  store i64 %24, ptr %memberidx1.i, align 4
  %25 = load ptr, ptr %memberidx4.i, align 8
  %26 = shl i64 %23, 4
  %27 = call ptr @realloc(ptr %25, i64 %26)
  store ptr %27, ptr %memberidx4.i, align 8
  br label %Array_ArgNode____sl__.exit23

Array_ArgNode____sl__.exit23:                     ; preds = %while.entry, %if.entry.i20
  %28 = load i64, ptr %memberidx.i, align 4
  %29 = add nsw i64 %28, 1
  store i64 %29, ptr %memberidx.i, align 4
  %30 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i22 = getelementptr inbounds ptr, ptr %30, i64 %28
  store ptr %21, ptr %ptridx.i22, align 8
  %31 = load ptr, ptr %memberidx, align 8
  %32 = load i64, ptr %31, align 4
  %33 = icmp eq i64 %32, 3
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i14 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i14, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  br i1 %37, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_ArgNode____sl__.exit23, %Array_ArgNode____sl__.exit
  ret void
}

define internal fastcc noalias ptr @Parser_parse_const_declaration_statement(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 40)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i.i = getelementptr inbounds %StatementNode, ptr %2, i64 0, i32 1
  store i64 2, ptr %memberidx.i.i, align 4
  %memberidx.i = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 3
  store ptr null, ptr %memberidx.i, align 8
  %memberidx.i24 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %5 = load i64, ptr %memberidx.i24, align 4
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i25, align 4
  %8 = icmp slt i64 %5, %7
  br i1 %8, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %1
  %9 = add nsw i64 %5, 1
  store i64 %9, ptr %memberidx.i24, align 4
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i27, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %11, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %1, %if.entry.i
  %memberidx2 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 2
  %12 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %if.entry, label %ifend

if.entry:                                         ; preds = %Parser_advance.exit
  %16 = load i64, ptr %memberidx.i24, align 4
  %17 = load ptr, ptr %0, align 8
  %memberidx2.i29 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i29, align 4
  %19 = icmp slt i64 %16, %18
  br i1 %19, label %if.entry.i33, label %Parser_advance.exit34

if.entry.i33:                                     ; preds = %if.entry
  %20 = add nsw i64 %16, 1
  store i64 %20, ptr %memberidx.i24, align 4
  %memberidx.i.i31 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i.i31, align 8
  %ptridx.i.i32 = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i.i32, align 8
  store ptr %22, ptr %memberidx, align 8
  br label %Parser_advance.exit34

Parser_advance.exit34:                            ; preds = %if.entry, %if.entry.i33
  %23 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %23, ptr %memberidx.i, align 8
  br label %ifend

ifend:                                            ; preds = %Parser_advance.exit, %Parser_advance.exit34
  %24 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 38)
  %memberidx6 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 4
  %25 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %25, ptr %memberidx6, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = call ptr @malloc(i32 32)
  %28 = load i64, ptr %4, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  %29 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  %31 = load i64, ptr %memberidx3.i, align 4
  store i64 %28, ptr %27, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 1
  store i64 %29, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 2
  store i64 %30, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 3
  store i64 %31, ptr %memberidx3.i.i, align 4
  store ptr %27, ptr %2, align 8
  ret ptr %2
}

define internal fastcc void @Parser_parse_type_list(ptr %0, ptr nocapture %1) unnamed_addr {
  %3 = call fastcc ptr @Parser_parse_type(ptr %0)
  %memberidx.i20 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i20, align 4
  %memberidx1.i21 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 3
  %5 = load i64, ptr %memberidx1.i21, align 4
  %.not.i22 = icmp slt i64 %4, %5
  br i1 %.not.i22, label %Array_TypeNode____sl__.exit28, label %if.entry.i25

if.entry.i25:                                     ; preds = %2
  %6 = shl i64 %5, 1
  store i64 %6, ptr %memberidx1.i21, align 4
  %memberidx2.i.i24 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i.i24, align 8
  %8 = shl i64 %5, 4
  %9 = call ptr @realloc(ptr %7, i64 %8)
  store ptr %9, ptr %memberidx2.i.i24, align 8
  br label %Array_TypeNode____sl__.exit28

Array_TypeNode____sl__.exit28:                    ; preds = %2, %if.entry.i25
  %10 = load i64, ptr %memberidx.i20, align 4
  %11 = add nsw i64 %10, 1
  store i64 %11, ptr %memberidx.i20, align 4
  %memberidx4.i26 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %memberidx4.i26, align 8
  %ptridx.i27 = getelementptr inbounds ptr, ptr %12, i64 %10
  store ptr %3, ptr %ptridx.i27, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 3
  %memberidx2.i18 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx2.i18, align 8
  %memberidx3.i19 = getelementptr inbounds %Array_FloError_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i19, align 4
  %18 = icmp eq i64 %17, 0
  %19 = and i1 %15, %18
  br i1 %19, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Array_TypeNode____sl__.exit28
  %memberidx.i12 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Array_TypeNode____sl__.exit
  %20 = load i64, ptr %memberidx.i12, align 4
  %21 = load ptr, ptr %0, align 8
  %memberidx2.i13 = getelementptr inbounds %Array_Token_, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i13, align 4
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %if.entry.i16, label %Parser_advance.exit

if.entry.i16:                                     ; preds = %while.entry
  %24 = add nsw i64 %20, 1
  store i64 %24, ptr %memberidx.i12, align 4
  %memberidx.i.i15 = getelementptr inbounds %Array_Token_, ptr %21, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i.i15, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %25, i64 %24
  %26 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %26, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i16
  %27 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %28 = load i64, ptr %memberidx.i20, align 4
  %29 = load i64, ptr %memberidx1.i21, align 4
  %.not.i = icmp slt i64 %28, %29
  br i1 %.not.i, label %Array_TypeNode____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %Parser_advance.exit
  %30 = shl i64 %29, 1
  store i64 %30, ptr %memberidx1.i21, align 4
  %31 = load ptr, ptr %memberidx4.i26, align 8
  %32 = shl i64 %29, 4
  %33 = call ptr @realloc(ptr %31, i64 %32)
  store ptr %33, ptr %memberidx4.i26, align 8
  br label %Array_TypeNode____sl__.exit

Array_TypeNode____sl__.exit:                      ; preds = %Parser_advance.exit, %if.entry.i
  %34 = load i64, ptr %memberidx.i20, align 4
  %35 = add nsw i64 %34, 1
  store i64 %35, ptr %memberidx.i20, align 4
  %36 = load ptr, ptr %memberidx4.i26, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %36, i64 %34
  store ptr %27, ptr %ptridx.i, align 8
  %37 = load ptr, ptr %memberidx, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 3
  %40 = load ptr, ptr %memberidx2.i18, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx3.i, align 4
  %42 = icmp eq i64 %41, 0
  %43 = and i1 %39, %42
  br i1 %43, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_TypeNode____sl__.exit, %Array_TypeNode____sl__.exit28
  ret void
}

define internal fastcc ptr @Parser_parse_arg(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 24)
  %3 = call fastcc ptr @Parser_eat(ptr %0, i64 54)
  store ptr %3, ptr %2, align 8
  %memberidx1.i = getelementptr inbounds %ArgNode, ptr %2, i64 0, i32 1
  %memberidx2.i = getelementptr inbounds %ArgNode, ptr %2, i64 0, i32 2
  %memberidx.i51 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx1.i, i8 0, i64 16, i1 false)
  %4 = load ptr, ptr %memberidx.i51, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp ne i64 %5, 46
  %memberidx2.i52 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx3.i, align 4
  %9 = icmp eq i64 %8, 0
  %10 = and i1 %6, %9
  br i1 %10, label %ifend, label %common.ret

common.ret:                                       ; preds = %Parser_error.exit, %ifend13, %Parser_advance.exit, %1
  ret ptr %2

ifend:                                            ; preds = %1
  %11 = icmp eq i64 %5, 1
  br i1 %11, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %memberidx.i53 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %12 = load i64, ptr %memberidx.i53, align 4
  %13 = load ptr, ptr %0, align 8
  %memberidx2.i54 = getelementptr inbounds %Array_Token_, ptr %13, i64 0, i32 2
  %14 = load i64, ptr %memberidx2.i54, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry2
  %16 = add nsw i64 %12, 1
  store i64 %16, ptr %memberidx.i53, align 4
  %memberidx.i.i56 = getelementptr inbounds %Array_Token_, ptr %13, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i56, align 8
  %ptridx.i.i57 = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i.i57, align 8
  store ptr %18, ptr %memberidx.i51, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry2, %if.entry.i
  %19 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %19, ptr %memberidx1.i, align 8
  %20 = load ptr, ptr %memberidx.i51, align 8
  %21 = load i64, ptr %20, align 4
  %22 = icmp ne i64 %21, 46
  %23 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx3.i63 = getelementptr inbounds %Array_FloError_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx3.i63, align 4
  %25 = icmp eq i64 %24, 0
  %26 = and i1 %22, %25
  br i1 %26, label %ifend4, label %common.ret

ifend4:                                           ; preds = %Parser_advance.exit, %ifend
  %27 = load ptr, ptr %memberidx.i51, align 8
  %28 = load i64, ptr %27, align 4
  %29 = icmp eq i64 %28, 38
  br i1 %29, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend4
  %memberidx.i64 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %30 = load i64, ptr %memberidx.i64, align 4
  %31 = load ptr, ptr %0, align 8
  %memberidx2.i65 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 2
  %32 = load i64, ptr %memberidx2.i65, align 4
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %if.entry.i69, label %Parser_advance.exit70

if.entry.i69:                                     ; preds = %if.entry11
  %34 = add nsw i64 %30, 1
  store i64 %34, ptr %memberidx.i64, align 4
  %memberidx.i.i67 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i67, align 8
  %ptridx.i.i68 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i.i68, align 8
  store ptr %36, ptr %memberidx.i51, align 8
  br label %Parser_advance.exit70

Parser_advance.exit70:                            ; preds = %if.entry11, %if.entry.i69
  %37 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %37, ptr %memberidx2.i, align 8
  br label %ifend13

ifend13:                                          ; preds = %ifend4, %Parser_advance.exit70
  %38 = load ptr, ptr %memberidx1.i, align 8
  %39 = icmp eq ptr %38, null
  %40 = load ptr, ptr %memberidx2.i, align 8
  %41 = icmp eq ptr %40, null
  %42 = and i1 %39, %41
  br i1 %42, label %if.entry17, label %common.ret

if.entry17:                                       ; preds = %ifend13
  %memberidx21 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %43 = load ptr, ptr %memberidx21, align 8
  %44 = load ptr, ptr %43, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %44, i64 0, i32 5
  %45 = load ptr, ptr %memberidx22, align 8
  %46 = call ptr %45(ptr nonnull %43)
  %47 = alloca ptr, align 8
  %48 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %47, ptr nonnull @71, ptr %46)
  %49 = load ptr, ptr %47, align 8
  %50 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %50, align 8
  %memberidx.i58 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  store ptr %49, ptr %memberidx.i58, align 8
  %memberidx1.i59 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  store i64 %48, ptr %memberidx1.i59, align 4
  %memberidx2.i60 = getelementptr inbounds %string, ptr %50, i64 0, i32 3
  store i64 %48, ptr %memberidx2.i60, align 4
  tail call void @free(ptr %46)
  %51 = load ptr, ptr %memberidx2.i52, align 8
  %52 = call ptr @malloc(i32 24)
  %53 = load ptr, ptr %memberidx.i51, align 8
  %memberidx2.i50 = getelementptr inbounds %Token, ptr %53, i64 0, i32 1
  %54 = load ptr, ptr %memberidx2.i50, align 8
  store i64 2, ptr %52, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %52, i64 0, i32 2
  store ptr %54, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %52, i64 0, i32 1
  store ptr %50, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 2
  %55 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 3
  %56 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %55, %56
  br i1 %.not.i.i, label %Parser_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry17
  %57 = shl i64 %56, 1
  store i64 %57, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 1
  %58 = load ptr, ptr %memberidx2.i.i.i, align 8
  %59 = shl i64 %56, 4
  %60 = call ptr @realloc(ptr %58, i64 %59)
  store ptr %60, ptr %memberidx2.i.i.i, align 8
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %if.entry17, %if.entry.i.i
  %61 = load i64, ptr %memberidx.i.i, align 4
  %62 = add nsw i64 %61, 1
  store i64 %62, ptr %memberidx.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 1
  %63 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %63, i64 %61
  store ptr %52, ptr %ptridx.i.i, align 8
  %64 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx25 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx25, align 4
  %66 = add i64 %65, -1
  %memberidx.i = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %67, i64 %66
  %68 = load ptr, ptr %ptridx.i, align 8
  %memberidx26 = getelementptr inbounds %FloError, ptr %68, i64 0, i32 2
  %memberidx28 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %69 = load ptr, ptr %memberidx28, align 8
  store ptr %69, ptr %memberidx26, align 8
  br label %common.ret
}

define internal fastcc ptr @Parser_parse_object_type(ptr %0) unnamed_addr {
  %2 = call fastcc ptr @Parser_eat(ptr %0, i64 54)
  %3 = tail call ptr @malloc(i32 32)
  %memberidx = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  store ptr %4, ptr %3, align 8
  %memberidx.i.i28 = getelementptr inbounds %TypeNode, ptr %3, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i28, align 4
  %memberidx.i29 = getelementptr inbounds %RecordTypeNode, ptr %3, i64 0, i32 2
  store ptr %2, ptr %memberidx.i29, align 8
  %memberidx1.i30 = getelementptr inbounds %RecordTypeNode, ptr %3, i64 0, i32 3
  %5 = call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %5, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i, align 4
  %memberidx1.i.i31 = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i31, align 4
  %memberidx2.i.i32 = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 1
  %6 = call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i.i32, align 8
  store i64 0, ptr %memberidx.i5.i, align 4
  store ptr %5, ptr %memberidx1.i30, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 42
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx.i, align 4
  %11 = load ptr, ptr %0, align 8
  %memberidx2.i26 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx2.i26, align 4
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry
  %14 = add nsw i64 %10, 1
  store i64 %14, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %16, ptr %memberidx1, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i
  call fastcc void @Parser_parse_type_list(ptr nonnull %0, ptr nonnull %5)
  %17 = load ptr, ptr %memberidx1, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load i64, ptr %17, align 4
  %20 = icmp eq i64 %19, 49
  br i1 %20, label %if.entry8, label %else9

ifend:                                            ; preds = %1, %ifend10
  ret ptr %3

if.entry8:                                        ; preds = %Parser_advance.exit
  store i64 41, ptr %17, align 4
  br label %ifend10

else9:                                            ; preds = %Parser_advance.exit
  %21 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 41)
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  %22 = call ptr @malloc(i32 32)
  %23 = load i64, ptr %4, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 1
  %24 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 3
  %26 = load i64, ptr %memberidx3.i, align 4
  store i64 %23, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 1
  store i64 %24, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  store i64 %25, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 3
  store i64 %26, ptr %memberidx3.i.i, align 4
  store ptr %22, ptr %3, align 8
  br label %ifend
}

define internal fastcc ptr @Parser_parse_unary_expression_pre(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load i64, ptr %2, align 4
  switch i64 %4, label %ifend10.i [
    i64 23, label %Parser_is_unary_op.exit
    i64 24, label %Parser_is_unary_op.exit.fold.split
    i64 5, label %Parser_is_unary_op.exit.fold.split27
    i64 37, label %Parser_is_unary_op.exit.fold.split28
  ]

ifend10.i:                                        ; preds = %1
  %5 = icmp eq i64 %4, 84
  %spec.select.i = zext i1 %5 to i64
  br label %Parser_is_unary_op.exit

Parser_is_unary_op.exit.fold.split:               ; preds = %1
  br label %Parser_is_unary_op.exit

Parser_is_unary_op.exit.fold.split27:             ; preds = %1
  br label %Parser_is_unary_op.exit

Parser_is_unary_op.exit.fold.split28:             ; preds = %1
  br label %Parser_is_unary_op.exit

Parser_is_unary_op.exit:                          ; preds = %1, %Parser_is_unary_op.exit.fold.split28, %Parser_is_unary_op.exit.fold.split27, %Parser_is_unary_op.exit.fold.split, %ifend10.i
  %common.ret.op.i = phi i64 [ 2, %1 ], [ %spec.select.i, %ifend10.i ], [ 3, %Parser_is_unary_op.exit.fold.split ], [ 6, %Parser_is_unary_op.exit.fold.split27 ], [ 8, %Parser_is_unary_op.exit.fold.split28 ]
  %6 = icmp eq i64 %common.ret.op.i, 0
  br i1 %6, label %if.entry, label %ifend

common.ret.sink.split:                            ; preds = %Parser_advance.exit, %Parser_advance.exit.i
  %.sink40 = phi ptr [ %225, %Parser_advance.exit.i ], [ %241, %Parser_advance.exit ]
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %.sink40, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i18.i = getelementptr inbounds %ExpressionNode, ptr %.sink40, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i18.i, align 4
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %Parser_parse_lhs_expression_allow_call.exit
  %common.ret.op = phi ptr [ %expression.1.i, %Parser_parse_lhs_expression_allow_call.exit ], [ %.sink40, %common.ret.sink.split ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %Parser_is_unary_op.exit
  switch i64 %4, label %else35.i.i [
    i64 34, label %if.entry.i58.i
    i64 31, label %if.entry4.i.i
    i64 32, label %if.entry9.i.i
    i64 35, label %if.entry14.i.i
    i64 54, label %if.entry19.i.i
    i64 29, label %if.entry24.i.i
    i64 83, label %if.entry29.i.i
    i64 25, label %if.entry34.i.i
  ]

if.entry.i58.i:                                   ; preds = %if.entry
  %7 = call fastcc ptr @Parser_parse_string(ptr %0)
  br label %Parser_parse_atom.exit.i

if.entry4.i.i:                                    ; preds = %if.entry
  %8 = call ptr @malloc(i32 32)
  %9 = load ptr, ptr %memberidx, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp eq i64 %10, 31
  br i1 %11, label %if.entry.i.i62.i, label %else.i.i70.i

if.entry.i.i62.i:                                 ; preds = %if.entry4.i.i
  %memberidx.i.i.i60.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %12 = load i64, ptr %memberidx.i.i.i60.i, align 4
  %13 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i61.i = getelementptr inbounds %Array_Token_, ptr %13, i64 0, i32 2
  %14 = load i64, ptr %memberidx2.i.i.i61.i, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %if.entry.i.i.i66.i, label %Parser_eat.exit.i73.i

if.entry.i.i.i66.i:                               ; preds = %if.entry.i.i62.i
  %16 = add nsw i64 %12, 1
  store i64 %16, ptr %memberidx.i.i.i60.i, align 4
  %memberidx.i.i.i.i64.i = getelementptr inbounds %Array_Token_, ptr %13, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i.i.i64.i, align 8
  %ptridx.i.i.i.i65.i = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i.i.i.i65.i, align 8
  store ptr %18, ptr %memberidx, align 8
  br label %Parser_eat.exit.i73.i

else.i.i70.i:                                     ; preds = %if.entry4.i.i
  %19 = call ptr @malloc(i32 16)
  %memberidx35.i.i68.i = getelementptr inbounds %Token, ptr %9, i64 0, i32 1
  %20 = load ptr, ptr %memberidx35.i.i68.i, align 8
  store i64 46, ptr %19, align 4
  %memberidx1.i82.i.i69.i = getelementptr inbounds %Token, ptr %19, i64 0, i32 1
  store ptr %20, ptr %memberidx1.i82.i.i69.i, align 8
  br label %Parser_eat.exit.i73.i

Parser_eat.exit.i73.i:                            ; preds = %else.i.i70.i, %if.entry.i.i.i66.i, %if.entry.i.i62.i
  %common.ret.op.i.i71.i = phi ptr [ %19, %else.i.i70.i ], [ %9, %if.entry.i.i.i66.i ], [ %9, %if.entry.i.i62.i ]
  %memberidx.i58.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i.i71.i, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i58.i.i, align 8
  store ptr %21, ptr %8, align 8
  %memberidx.i.i.i59.i.i = getelementptr inbounds %StatementNode, ptr %8, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i59.i.i, align 4
  %memberidx.i.i60.i.i = getelementptr inbounds %ExpressionNode, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i60.i.i, align 4
  %memberidx1.i.i72.i = getelementptr inbounds %IntExpressionNode, ptr %8, i64 0, i32 3
  store ptr %common.ret.op.i.i71.i, ptr %memberidx1.i.i72.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry9.i.i:                                    ; preds = %if.entry
  %22 = call ptr @malloc(i32 32)
  %23 = load ptr, ptr %memberidx, align 8
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 32
  br i1 %25, label %if.entry.i65.i.i, label %else.i71.i.i

if.entry.i65.i.i:                                 ; preds = %if.entry9.i.i
  %memberidx.i.i63.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %26 = load i64, ptr %memberidx.i.i63.i.i, align 4
  %27 = load ptr, ptr %0, align 8
  %memberidx2.i.i64.i.i = getelementptr inbounds %Array_Token_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i.i64.i.i, align 4
  %29 = icmp slt i64 %26, %28
  br i1 %29, label %if.entry.i.i69.i.i, label %Parser_eat.exit74.i.i

if.entry.i.i69.i.i:                               ; preds = %if.entry.i65.i.i
  %30 = add nsw i64 %26, 1
  store i64 %30, ptr %memberidx.i.i63.i.i, align 4
  %memberidx.i.i.i67.i.i = getelementptr inbounds %Array_Token_, ptr %27, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i.i.i67.i.i, align 8
  %ptridx.i.i.i68.i.i = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx.i.i.i68.i.i, align 8
  store ptr %32, ptr %memberidx, align 8
  br label %Parser_eat.exit74.i.i

else.i71.i.i:                                     ; preds = %if.entry9.i.i
  %33 = call ptr @malloc(i32 16)
  %memberidx35.i72.i.i = getelementptr inbounds %Token, ptr %23, i64 0, i32 1
  %34 = load ptr, ptr %memberidx35.i72.i.i, align 8
  store i64 46, ptr %33, align 4
  %memberidx1.i82.i73.i.i = getelementptr inbounds %Token, ptr %33, i64 0, i32 1
  store ptr %34, ptr %memberidx1.i82.i73.i.i, align 8
  br label %Parser_eat.exit74.i.i

Parser_eat.exit74.i.i:                            ; preds = %else.i71.i.i, %if.entry.i.i69.i.i, %if.entry.i65.i.i
  %common.ret.op.i62.i.i = phi ptr [ %33, %else.i71.i.i ], [ %23, %if.entry.i.i69.i.i ], [ %23, %if.entry.i65.i.i ]
  %memberidx.i75.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i62.i.i, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i75.i.i, align 8
  store ptr %35, ptr %22, align 8
  %memberidx.i.i.i76.i.i = getelementptr inbounds %StatementNode, ptr %22, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i76.i.i, align 4
  %memberidx.i.i77.i.i = getelementptr inbounds %ExpressionNode, ptr %22, i64 0, i32 2
  store i64 1, ptr %memberidx.i.i77.i.i, align 4
  %memberidx1.i78.i.i = getelementptr inbounds %FloatExpressionNode, ptr %22, i64 0, i32 3
  store ptr %common.ret.op.i62.i.i, ptr %memberidx1.i78.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry14.i.i:                                   ; preds = %if.entry
  %36 = call ptr @malloc(i32 32)
  %37 = load ptr, ptr %memberidx, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 35
  br i1 %39, label %if.entry.i83.i.i, label %else.i89.i.i

if.entry.i83.i.i:                                 ; preds = %if.entry14.i.i
  %memberidx.i.i81.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %40 = load i64, ptr %memberidx.i.i81.i.i, align 4
  %41 = load ptr, ptr %0, align 8
  %memberidx2.i.i82.i.i = getelementptr inbounds %Array_Token_, ptr %41, i64 0, i32 2
  %42 = load i64, ptr %memberidx2.i.i82.i.i, align 4
  %43 = icmp slt i64 %40, %42
  br i1 %43, label %if.entry.i.i87.i.i, label %Parser_eat.exit92.i.i

if.entry.i.i87.i.i:                               ; preds = %if.entry.i83.i.i
  %44 = add nsw i64 %40, 1
  store i64 %44, ptr %memberidx.i.i81.i.i, align 4
  %memberidx.i.i.i85.i.i = getelementptr inbounds %Array_Token_, ptr %41, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i85.i.i, align 8
  %ptridx.i.i.i86.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i86.i.i, align 8
  store ptr %46, ptr %memberidx, align 8
  br label %Parser_eat.exit92.i.i

else.i89.i.i:                                     ; preds = %if.entry14.i.i
  %47 = call ptr @malloc(i32 16)
  %memberidx35.i90.i.i = getelementptr inbounds %Token, ptr %37, i64 0, i32 1
  %48 = load ptr, ptr %memberidx35.i90.i.i, align 8
  store i64 46, ptr %47, align 4
  %memberidx1.i82.i91.i.i = getelementptr inbounds %Token, ptr %47, i64 0, i32 1
  store ptr %48, ptr %memberidx1.i82.i91.i.i, align 8
  br label %Parser_eat.exit92.i.i

Parser_eat.exit92.i.i:                            ; preds = %else.i89.i.i, %if.entry.i.i87.i.i, %if.entry.i83.i.i
  %common.ret.op.i80.i.i = phi ptr [ %47, %else.i89.i.i ], [ %37, %if.entry.i.i87.i.i ], [ %37, %if.entry.i83.i.i ]
  %memberidx.i93.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i80.i.i, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i93.i.i, align 8
  store ptr %49, ptr %36, align 8
  %memberidx.i.i.i94.i.i = getelementptr inbounds %StatementNode, ptr %36, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i94.i.i, align 4
  %memberidx.i.i95.i.i = getelementptr inbounds %ExpressionNode, ptr %36, i64 0, i32 2
  store i64 3, ptr %memberidx.i.i95.i.i, align 4
  %memberidx1.i96.i.i = getelementptr inbounds %CharExpressionNode, ptr %36, i64 0, i32 3
  store ptr %common.ret.op.i80.i.i, ptr %memberidx1.i96.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry19.i.i:                                   ; preds = %if.entry
  %50 = call ptr @malloc(i32 32)
  %51 = call fastcc ptr @Parser_eat(ptr %0, i64 54)
  %memberidx.i97.i.i = getelementptr inbounds %Token, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i97.i.i, align 8
  store ptr %52, ptr %50, align 8
  %memberidx.i.i.i98.i.i = getelementptr inbounds %StatementNode, ptr %50, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i98.i.i, align 4
  %memberidx.i.i99.i.i = getelementptr inbounds %ExpressionNode, ptr %50, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i99.i.i, align 4
  %memberidx1.i100.i.i = getelementptr inbounds %VarAccessExpressionNode, ptr %50, i64 0, i32 3
  store ptr %51, ptr %memberidx1.i100.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry24.i.i:                                   ; preds = %if.entry
  %53 = call ptr @malloc(i32 32)
  %54 = load ptr, ptr %memberidx, align 8
  %memberidx1.i104.i = getelementptr inbounds %Token, ptr %54, i64 0, i32 1
  %55 = load ptr, ptr %memberidx1.i104.i, align 8
  store ptr %55, ptr %53, align 8
  %memberidx.i.i.i.i105.i = getelementptr inbounds %StatementNode, ptr %53, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i105.i, align 4
  %memberidx.i.i.i106.i = getelementptr inbounds %ExpressionNode, ptr %53, i64 0, i32 2
  store i64 6, ptr %memberidx.i.i.i106.i, align 4
  %memberidx.i.i107.i = getelementptr inbounds %ArrayExpressionNode, ptr %53, i64 0, i32 3
  %56 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %56, align 8
  %memberidx.i3.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %56, i64 0, i32 2
  store i64 0, ptr %memberidx.i3.i.i.i, align 4
  %memberidx1.i.i.i108.i = getelementptr inbounds %Array_ExpressionNode_, ptr %56, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i108.i, align 4
  %memberidx2.i.i.i109.i = getelementptr inbounds %Array_ExpressionNode_, ptr %56, i64 0, i32 1
  %57 = call ptr @malloc(i32 64)
  store ptr %57, ptr %memberidx2.i.i.i109.i, align 8
  store i64 0, ptr %memberidx.i3.i.i.i, align 4
  store ptr %56, ptr %memberidx.i.i107.i, align 8
  %memberidx.i15.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %58 = load i64, ptr %memberidx.i15.i.i, align 4
  %59 = load ptr, ptr %0, align 8
  %memberidx2.i16.i.i = getelementptr inbounds %Array_Token_, ptr %59, i64 0, i32 2
  %60 = load i64, ptr %memberidx2.i16.i.i, align 4
  %61 = icmp slt i64 %58, %60
  br i1 %61, label %if.entry.i.i113.i, label %Parser_advance.exit.i115.i

if.entry.i.i113.i:                                ; preds = %if.entry24.i.i
  %62 = add nsw i64 %58, 1
  store i64 %62, ptr %memberidx.i15.i.i, align 4
  %memberidx.i.i17.i.i = getelementptr inbounds %Array_Token_, ptr %59, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i.i17.i.i, align 8
  %ptridx.i.i.i112.i = getelementptr inbounds ptr, ptr %63, i64 %62
  %64 = load ptr, ptr %ptridx.i.i.i112.i, align 8
  store ptr %64, ptr %memberidx, align 8
  br label %Parser_advance.exit.i115.i

Parser_advance.exit.i115.i:                       ; preds = %if.entry.i.i113.i, %if.entry24.i.i
  %65 = load ptr, ptr %memberidx, align 8
  %66 = load i64, ptr %65, align 4
  %.not.i114.i = icmp eq i64 %66, 30
  br i1 %.not.i114.i, label %ifend.i.i, label %if.entry.i117.i

if.entry.i117.i:                                  ; preds = %Parser_advance.exit.i115.i
  call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %56)
  br label %ifend.i.i

ifend.i.i:                                        ; preds = %if.entry.i117.i, %Parser_advance.exit.i115.i
  %67 = load ptr, ptr %53, align 8
  %68 = load ptr, ptr %memberidx, align 8
  %69 = load i64, ptr %68, align 4
  %70 = icmp eq i64 %69, 30
  br i1 %70, label %if.entry.i21.i.i, label %else.i.i125.i

if.entry.i21.i.i:                                 ; preds = %ifend.i.i
  %71 = load i64, ptr %memberidx.i15.i.i, align 4
  %72 = load ptr, ptr %0, align 8
  %memberidx2.i.i20.i.i = getelementptr inbounds %Array_Token_, ptr %72, i64 0, i32 2
  %73 = load i64, ptr %memberidx2.i.i20.i.i, align 4
  %74 = icmp slt i64 %71, %73
  br i1 %74, label %if.entry.i.i.i122.i, label %Parser_parse_array_expression.exit.i

if.entry.i.i.i122.i:                              ; preds = %if.entry.i21.i.i
  %75 = add nsw i64 %71, 1
  store i64 %75, ptr %memberidx.i15.i.i, align 4
  %memberidx.i.i.i22.i.i = getelementptr inbounds %Array_Token_, ptr %72, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i.i.i22.i.i, align 8
  %ptridx.i.i.i.i121.i = getelementptr inbounds ptr, ptr %76, i64 %75
  %77 = load ptr, ptr %ptridx.i.i.i.i121.i, align 8
  store ptr %77, ptr %memberidx, align 8
  br label %Parser_parse_array_expression.exit.i

else.i.i125.i:                                    ; preds = %ifend.i.i
  %78 = call ptr @malloc(i32 16)
  %memberidx35.i.i123.i = getelementptr inbounds %Token, ptr %68, i64 0, i32 1
  %79 = load ptr, ptr %memberidx35.i.i123.i, align 8
  store i64 46, ptr %78, align 4
  %memberidx1.i82.i.i124.i = getelementptr inbounds %Token, ptr %78, i64 0, i32 1
  store ptr %79, ptr %memberidx1.i82.i.i124.i, align 8
  br label %Parser_parse_array_expression.exit.i

Parser_parse_array_expression.exit.i:             ; preds = %else.i.i125.i, %if.entry.i.i.i122.i, %if.entry.i21.i.i
  %common.ret.op.i.i.i = phi ptr [ %78, %else.i.i125.i ], [ %68, %if.entry.i.i.i122.i ], [ %68, %if.entry.i21.i.i ]
  %memberidx7.i126.i = getelementptr inbounds %Token, ptr %common.ret.op.i.i.i, i64 0, i32 1
  %80 = load ptr, ptr %memberidx7.i126.i, align 8
  %81 = call ptr @malloc(i32 32)
  %82 = load i64, ptr %67, align 4
  %memberidx1.i.i127.i = getelementptr inbounds %FloRange, ptr %80, i64 0, i32 1
  %83 = load i64, ptr %memberidx1.i.i127.i, align 4
  %memberidx2.i23.i.i = getelementptr inbounds %FloRange, ptr %67, i64 0, i32 2
  %84 = load i64, ptr %memberidx2.i23.i.i, align 4
  %memberidx3.i24.i.i = getelementptr inbounds %FloRange, ptr %80, i64 0, i32 3
  %85 = load i64, ptr %memberidx3.i24.i.i, align 4
  store i64 %82, ptr %81, align 4
  %memberidx1.i.i25.i.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 1
  store i64 %83, ptr %memberidx1.i.i25.i.i, align 4
  %memberidx2.i.i26.i.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 2
  store i64 %84, ptr %memberidx2.i.i26.i.i, align 4
  %memberidx3.i.i27.i.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 3
  store i64 %85, ptr %memberidx3.i.i27.i.i, align 4
  store ptr %81, ptr %53, align 8
  br label %Parser_parse_atom.exit.i

if.entry29.i.i:                                   ; preds = %if.entry
  %memberidx.i.i87.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %86 = load i64, ptr %memberidx.i.i87.i, align 4
  %87 = load ptr, ptr %0, align 8
  %memberidx2.i.i88.i = getelementptr inbounds %Array_Token_, ptr %87, i64 0, i32 2
  %88 = load i64, ptr %memberidx2.i.i88.i, align 4
  %89 = icmp slt i64 %86, %88
  br i1 %89, label %if.entry.i.i92.i, label %Parser_advance.exit.i97.i

if.entry.i.i92.i:                                 ; preds = %if.entry29.i.i
  %90 = add nsw i64 %86, 1
  store i64 %90, ptr %memberidx.i.i87.i, align 4
  %memberidx.i.i.i90.i = getelementptr inbounds %Array_Token_, ptr %87, i64 0, i32 1
  %91 = load ptr, ptr %memberidx.i.i.i90.i, align 8
  %ptridx.i.i.i91.i = getelementptr inbounds ptr, ptr %91, i64 %90
  %92 = load ptr, ptr %ptridx.i.i.i91.i, align 8
  store ptr %92, ptr %memberidx, align 8
  br label %Parser_advance.exit.i97.i

Parser_advance.exit.i97.i:                        ; preds = %if.entry.i.i92.i, %if.entry29.i.i
  %93 = call ptr @malloc(i32 41)
  %94 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %memberidx.i18.i.i = getelementptr inbounds %NewExpressionNode, ptr %93, i64 0, i32 3
  store ptr %94, ptr %memberidx.i18.i.i, align 8
  %memberidx1.i.i93.i = getelementptr inbounds %NewExpressionNode, ptr %93, i64 0, i32 4
  store i1 true, ptr %memberidx1.i.i93.i, align 1
  store ptr %3, ptr %93, align 8
  %memberidx.i.i.i.i94.i = getelementptr inbounds %StatementNode, ptr %93, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i94.i, align 4
  %memberidx.i.i19.i.i = getelementptr inbounds %ExpressionNode, ptr %93, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i19.i.i, align 4
  %memberidx2.i20.i.i = getelementptr inbounds %NewExpressionNode, ptr %93, i64 0, i32 5
  %95 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %95, align 8
  %memberidx.i7.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %95, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i.i.i, align 4
  %memberidx1.i.i.i95.i = getelementptr inbounds %Array_ExpressionNode_, ptr %95, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i95.i, align 4
  %memberidx2.i.i.i96.i = getelementptr inbounds %Array_ExpressionNode_, ptr %95, i64 0, i32 1
  %96 = call ptr @malloc(i32 64)
  store ptr %96, ptr %memberidx2.i.i.i96.i, align 8
  store i64 0, ptr %memberidx.i7.i.i.i, align 4
  store ptr %95, ptr %memberidx2.i20.i.i, align 8
  %97 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 25)
  %memberidx2.i22.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %98 = load ptr, ptr %memberidx2.i22.i.i, align 8
  %memberidx3.i23.i.i = getelementptr inbounds %Array_FloError_, ptr %98, i64 0, i32 2
  %99 = load i64, ptr %memberidx3.i23.i.i, align 4
  %.fr = freeze i64 %99
  %100 = icmp eq i64 %.fr, 0
  br i1 %100, label %switch.early.test.i.i, label %Parser_parse_new_expression.exit.i

switch.early.test.i.i:                            ; preds = %Parser_advance.exit.i97.i
  %101 = load ptr, ptr %memberidx, align 8
  %102 = load i64, ptr %101, align 4
  switch i64 %102, label %if.entry.i99.i [
    i64 46, label %Parser_parse_new_expression.exit.i
    i64 26, label %Parser_parse_new_expression.exit.i
  ]

if.entry.i99.i:                                   ; preds = %switch.early.test.i.i
  %103 = load ptr, ptr %memberidx2.i20.i.i, align 8
  call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr %103)
  br label %Parser_parse_new_expression.exit.i

Parser_parse_new_expression.exit.i:               ; preds = %if.entry.i99.i, %switch.early.test.i.i, %switch.early.test.i.i, %Parser_advance.exit.i97.i
  %104 = load ptr, ptr %93, align 8
  %105 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  %memberidx7.i100.i = getelementptr inbounds %Token, ptr %105, i64 0, i32 1
  %106 = load ptr, ptr %memberidx7.i100.i, align 8
  %107 = call ptr @malloc(i32 32)
  %108 = load i64, ptr %104, align 4
  %memberidx1.i24.i.i = getelementptr inbounds %FloRange, ptr %106, i64 0, i32 1
  %109 = load i64, ptr %memberidx1.i24.i.i, align 4
  %memberidx2.i25.i.i = getelementptr inbounds %FloRange, ptr %104, i64 0, i32 2
  %110 = load i64, ptr %memberidx2.i25.i.i, align 4
  %memberidx3.i26.i.i = getelementptr inbounds %FloRange, ptr %106, i64 0, i32 3
  %111 = load i64, ptr %memberidx3.i26.i.i, align 4
  store i64 %108, ptr %107, align 4
  %memberidx1.i.i27.i.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 1
  store i64 %109, ptr %memberidx1.i.i27.i.i, align 4
  %memberidx2.i.i28.i101.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 2
  store i64 %110, ptr %memberidx2.i.i28.i101.i, align 4
  %memberidx3.i.i.i102.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 3
  store i64 %111, ptr %memberidx3.i.i.i102.i, align 4
  store ptr %107, ptr %93, align 8
  br label %Parser_parse_atom.exit.i

if.entry34.i.i:                                   ; preds = %if.entry
  %memberidx.i101.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %112 = load i64, ptr %memberidx.i101.i.i, align 4
  %113 = load ptr, ptr %0, align 8
  %memberidx2.i.i74.i = getelementptr inbounds %Array_Token_, ptr %113, i64 0, i32 2
  %114 = load i64, ptr %memberidx2.i.i74.i, align 4
  %115 = icmp slt i64 %112, %114
  br i1 %115, label %if.entry.i103.i.i, label %Parser_advance.exit.i.i

if.entry.i103.i.i:                                ; preds = %if.entry34.i.i
  %116 = add nsw i64 %112, 1
  store i64 %116, ptr %memberidx.i101.i.i, align 4
  %memberidx.i.i102.i.i = getelementptr inbounds %Array_Token_, ptr %113, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i.i102.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %117, i64 %116
  %118 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %118, ptr %memberidx, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i103.i.i, %if.entry34.i.i
  %119 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %120 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  br label %Parser_parse_atom.exit.i

else35.i.i:                                       ; preds = %if.entry
  %121 = call ptr @malloc(i32 28)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %121, ptr noundef nonnull align 8 dereferenceable(28) @70, i64 28, i1 false)
  %122 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %122, align 8
  %memberidx.i.i104.i.i = getelementptr inbounds %string, ptr %122, i64 0, i32 1
  store ptr %121, ptr %memberidx.i.i104.i.i, align 8
  %memberidx1.i.i.i76.i = getelementptr inbounds %string, ptr %122, i64 0, i32 2
  store i64 28, ptr %memberidx1.i.i.i76.i, align 4
  %memberidx2.i.i105.i.i = getelementptr inbounds %string, ptr %122, i64 0, i32 3
  store i64 28, ptr %memberidx2.i.i105.i.i, align 4
  %memberidx.i106.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %123 = load ptr, ptr %memberidx.i106.i.i, align 8
  %124 = call ptr @malloc(i32 24)
  %125 = load ptr, ptr %memberidx, align 8
  %memberidx2.i108.i.i = getelementptr inbounds %Token, ptr %125, i64 0, i32 1
  %126 = load ptr, ptr %memberidx2.i108.i.i, align 8
  store i64 2, ptr %124, align 4
  %memberidx1.i.i109.i.i = getelementptr inbounds %FloError, ptr %124, i64 0, i32 2
  store ptr %126, ptr %memberidx1.i.i109.i.i, align 8
  %memberidx2.i.i110.i.i = getelementptr inbounds %FloError, ptr %124, i64 0, i32 1
  store ptr %122, ptr %memberidx2.i.i110.i.i, align 8
  %memberidx.i.i111.i.i = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 2
  %127 = load i64, ptr %memberidx.i.i111.i.i, align 4
  %memberidx1.i4.i.i.i = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 3
  %128 = load i64, ptr %memberidx1.i4.i.i.i, align 4
  %.not.i.i.i.i = icmp slt i64 %127, %128
  br i1 %.not.i.i.i.i, label %Parser_error.exit.i.i, label %if.entry.i.i113.i.i

if.entry.i.i113.i.i:                              ; preds = %else35.i.i
  %129 = shl i64 %128, 1
  store i64 %129, ptr %memberidx1.i4.i.i.i, align 4
  %memberidx2.i.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 1
  %130 = load ptr, ptr %memberidx2.i.i.i.i.i, align 8
  %131 = shl i64 %128, 4
  %132 = call ptr @realloc(ptr %130, i64 %131)
  store ptr %132, ptr %memberidx2.i.i.i.i.i, align 8
  br label %Parser_error.exit.i.i

Parser_error.exit.i.i:                            ; preds = %if.entry.i.i113.i.i, %else35.i.i
  %133 = load i64, ptr %memberidx.i.i111.i.i, align 4
  %134 = add nsw i64 %133, 1
  store i64 %134, ptr %memberidx.i.i111.i.i, align 4
  %memberidx4.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 1
  %135 = load ptr, ptr %memberidx4.i.i.i.i, align 8
  %ptridx.i.i114.i.i = getelementptr inbounds ptr, ptr %135, i64 %133
  store ptr %124, ptr %ptridx.i.i114.i.i, align 8
  %136 = call ptr @malloc(i32 24)
  %137 = load ptr, ptr %memberidx, align 8
  %memberidx38.i.i = getelementptr inbounds %Token, ptr %137, i64 0, i32 1
  %138 = load ptr, ptr %memberidx38.i.i, align 8
  store ptr %138, ptr %136, align 8
  %memberidx.i.i115.i.i = getelementptr inbounds %StatementNode, ptr %136, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i115.i.i, align 4
  %memberidx.i116.i.i = getelementptr inbounds %ExpressionNode, ptr %136, i64 0, i32 2
  store i64 7, ptr %memberidx.i116.i.i, align 4
  br label %Parser_parse_atom.exit.i

Parser_parse_atom.exit.i:                         ; preds = %Parser_error.exit.i.i, %Parser_advance.exit.i.i, %Parser_parse_new_expression.exit.i, %Parser_parse_array_expression.exit.i, %if.entry19.i.i, %Parser_eat.exit92.i.i, %Parser_eat.exit74.i.i, %Parser_eat.exit.i73.i, %if.entry.i58.i
  %common.ret.op.i.i = phi ptr [ %7, %if.entry.i58.i ], [ %136, %Parser_error.exit.i.i ], [ %8, %Parser_eat.exit.i73.i ], [ %22, %Parser_eat.exit74.i.i ], [ %36, %Parser_eat.exit92.i.i ], [ %50, %if.entry19.i.i ], [ %53, %Parser_parse_array_expression.exit.i ], [ %93, %Parser_parse_new_expression.exit.i ], [ %119, %Parser_advance.exit.i.i ]
  %139 = load ptr, ptr %memberidx, align 8
  %140 = load i64, ptr %139, align 4
  %141 = icmp ne i64 %140, 46
  %memberidx2.i.i30 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %142 = load ptr, ptr %memberidx2.i.i30, align 8
  %memberidx3.i.i31 = getelementptr inbounds %Array_FloError_, ptr %142, i64 0, i32 2
  %143 = load i64, ptr %memberidx3.i.i31, align 4
  %144 = icmp eq i64 %143, 0
  %145 = and i1 %141, %144
  br i1 %145, label %while.entry.i.preheader, label %Parser_parse_lhs_expression_allow_call.exit

while.entry.i.preheader:                          ; preds = %Parser_parse_atom.exit.i
  %memberidx.i.i.i.i35 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %memberidx.i.i.i27.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %memberidx.i.i15.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %ifend.i
  %expression.0.i = phi ptr [ %expression.2.i, %ifend.i ], [ %common.ret.op.i.i, %while.entry.i.preheader ]
  %146 = load ptr, ptr %memberidx, align 8
  %147 = load i64, ptr %146, align 4
  switch i64 %147, label %Parser_parse_lhs_expression_allow_call.exit [
    i64 25, label %if.entry.i32
    i64 29, label %if.entry.i.i29.i
    i64 50, label %if.entry.i.i.i
  ]

if.entry.i32:                                     ; preds = %while.entry.i
  %148 = call fastcc ptr @Parser_eat(ptr %0, i64 25)
  %149 = call ptr @malloc(i32 40)
  %150 = load ptr, ptr %memberidx, align 8
  %memberidx1.i46.i = getelementptr inbounds %Token, ptr %150, i64 0, i32 1
  %151 = load ptr, ptr %memberidx1.i46.i, align 8
  store ptr %151, ptr %149, align 8
  %memberidx.i.i.i.i47.i = getelementptr inbounds %StatementNode, ptr %149, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i47.i, align 4
  %memberidx.i.i.i48.i = getelementptr inbounds %ExpressionNode, ptr %149, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i.i48.i, align 4
  %memberidx.i.i49.i = getelementptr inbounds %CallExpressionNode, ptr %149, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i.i49.i, align 8
  %memberidx1.i.i50.i = getelementptr inbounds %CallExpressionNode, ptr %149, i64 0, i32 4
  %152 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %152, align 8
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %152, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i.i.i, align 4
  %memberidx1.i.i.i51.i = getelementptr inbounds %Array_ExpressionNode_, ptr %152, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i51.i, align 4
  %memberidx2.i.i.i52.i = getelementptr inbounds %Array_ExpressionNode_, ptr %152, i64 0, i32 1
  %153 = call ptr @malloc(i32 64)
  store ptr %153, ptr %memberidx2.i.i.i52.i, align 8
  store i64 0, ptr %memberidx.i5.i.i.i, align 4
  store ptr %152, ptr %memberidx1.i.i50.i, align 8
  %154 = load ptr, ptr %memberidx, align 8
  %155 = load i64, ptr %154, align 4
  %.not.i.i = icmp eq i64 %155, 26
  br i1 %.not.i.i, label %Parser_parse_call_expression.exit.i, label %if.entry.i.i33

if.entry.i.i33:                                   ; preds = %if.entry.i32
  call fastcc void @Parser_parse_expression_list(ptr %0, ptr nonnull %152)
  br label %Parser_parse_call_expression.exit.i

Parser_parse_call_expression.exit.i:              ; preds = %if.entry.i.i33, %if.entry.i32
  %156 = load ptr, ptr %expression.0.i, align 8
  %157 = call fastcc ptr @Parser_eat(ptr %0, i64 26)
  %memberidx7.i.i = getelementptr inbounds %Token, ptr %157, i64 0, i32 1
  %158 = load ptr, ptr %memberidx7.i.i, align 8
  %159 = call ptr @malloc(i32 32)
  %160 = load i64, ptr %156, align 4
  %memberidx1.i15.i.i = getelementptr inbounds %FloRange, ptr %158, i64 0, i32 1
  %161 = load i64, ptr %memberidx1.i15.i.i, align 4
  %memberidx2.i.i55.i = getelementptr inbounds %FloRange, ptr %156, i64 0, i32 2
  %162 = load i64, ptr %memberidx2.i.i55.i, align 4
  %memberidx3.i16.i.i = getelementptr inbounds %FloRange, ptr %158, i64 0, i32 3
  %163 = load i64, ptr %memberidx3.i16.i.i, align 4
  store i64 %160, ptr %159, align 4
  %memberidx1.i.i17.i.i = getelementptr inbounds %FloRange, ptr %159, i64 0, i32 1
  store i64 %161, ptr %memberidx1.i.i17.i.i, align 4
  %memberidx2.i.i18.i.i = getelementptr inbounds %FloRange, ptr %159, i64 0, i32 2
  store i64 %162, ptr %memberidx2.i.i18.i.i, align 4
  %memberidx3.i.i.i56.i = getelementptr inbounds %FloRange, ptr %159, i64 0, i32 3
  store i64 %163, ptr %memberidx3.i.i.i56.i, align 4
  store ptr %159, ptr %149, align 8
  br label %ifend.i

ifend.i:                                          ; preds = %Parser_parse_member_expression.exit.i, %Parser_parse_index_expression.exit.i, %Parser_parse_call_expression.exit.i
  %expression.2.i = phi ptr [ %149, %Parser_parse_call_expression.exit.i ], [ %178, %Parser_parse_index_expression.exit.i ], [ %208, %Parser_parse_member_expression.exit.i ]
  %164 = load ptr, ptr %memberidx, align 8
  %165 = load i64, ptr %164, align 4
  %166 = icmp ne i64 %165, 46
  %167 = load ptr, ptr %memberidx2.i.i30, align 8
  %memberidx3.i25.i = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 2
  %168 = load i64, ptr %memberidx3.i25.i, align 4
  %169 = icmp eq i64 %168, 0
  %170 = and i1 %166, %169
  br i1 %170, label %while.entry.i, label %Parser_parse_lhs_expression_allow_call.exit

if.entry.i.i29.i:                                 ; preds = %while.entry.i
  %171 = load i64, ptr %memberidx.i.i.i27.i, align 4
  %172 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i28.i = getelementptr inbounds %Array_Token_, ptr %172, i64 0, i32 2
  %173 = load i64, ptr %memberidx2.i.i.i28.i, align 4
  %174 = icmp slt i64 %171, %173
  br i1 %174, label %if.entry.i.i.i33.i, label %Parser_eat.exit.i.i

if.entry.i.i.i33.i:                               ; preds = %if.entry.i.i29.i
  %175 = add nsw i64 %171, 1
  store i64 %175, ptr %memberidx.i.i.i27.i, align 4
  %memberidx.i.i.i.i31.i = getelementptr inbounds %Array_Token_, ptr %172, i64 0, i32 1
  %176 = load ptr, ptr %memberidx.i.i.i.i31.i, align 8
  %ptridx.i.i.i.i32.i = getelementptr inbounds ptr, ptr %176, i64 %175
  %177 = load ptr, ptr %ptridx.i.i.i.i32.i, align 8
  store ptr %177, ptr %memberidx, align 8
  br label %Parser_eat.exit.i.i

Parser_eat.exit.i.i:                              ; preds = %if.entry.i.i.i33.i, %if.entry.i.i29.i
  %178 = call ptr @malloc(i32 40)
  %179 = call fastcc ptr @Parser_parse_expression(ptr %0)
  %180 = load ptr, ptr %memberidx, align 8
  %memberidx1.i40.i = getelementptr inbounds %Token, ptr %180, i64 0, i32 1
  %181 = load ptr, ptr %memberidx1.i40.i, align 8
  %memberidx.i10.i.i = getelementptr inbounds %ExpressionIndexNode, ptr %178, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i10.i.i, align 8
  %memberidx1.i.i41.i = getelementptr inbounds %ExpressionIndexNode, ptr %178, i64 0, i32 4
  store ptr %179, ptr %memberidx1.i.i41.i, align 8
  store ptr %181, ptr %178, align 8
  %memberidx.i.i.i11.i.i = getelementptr inbounds %StatementNode, ptr %178, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i11.i.i, align 4
  %memberidx.i.i12.i.i = getelementptr inbounds %ExpressionNode, ptr %178, i64 0, i32 2
  store i64 13, ptr %memberidx.i.i12.i.i, align 4
  %182 = load ptr, ptr %expression.0.i, align 8
  %183 = load i64, ptr %180, align 4
  %184 = icmp eq i64 %183, 30
  br i1 %184, label %if.entry.i17.i.i, label %else.i23.i.i

if.entry.i17.i.i:                                 ; preds = %Parser_eat.exit.i.i
  %185 = load i64, ptr %memberidx.i.i15.i.i, align 4
  %186 = load ptr, ptr %0, align 8
  %memberidx2.i.i16.i.i = getelementptr inbounds %Array_Token_, ptr %186, i64 0, i32 2
  %187 = load i64, ptr %memberidx2.i.i16.i.i, align 4
  %188 = icmp slt i64 %185, %187
  br i1 %188, label %if.entry.i.i21.i.i, label %Parser_parse_index_expression.exit.i

if.entry.i.i21.i.i:                               ; preds = %if.entry.i17.i.i
  %189 = add nsw i64 %185, 1
  store i64 %189, ptr %memberidx.i.i15.i.i, align 4
  %memberidx.i.i.i19.i.i = getelementptr inbounds %Array_Token_, ptr %186, i64 0, i32 1
  %190 = load ptr, ptr %memberidx.i.i.i19.i.i, align 8
  %ptridx.i.i.i20.i.i = getelementptr inbounds ptr, ptr %190, i64 %189
  %191 = load ptr, ptr %ptridx.i.i.i20.i.i, align 8
  store ptr %191, ptr %memberidx, align 8
  br label %Parser_parse_index_expression.exit.i

else.i23.i.i:                                     ; preds = %Parser_eat.exit.i.i
  %192 = call ptr @malloc(i32 16)
  %193 = load ptr, ptr %memberidx1.i40.i, align 8
  store i64 46, ptr %192, align 4
  %memberidx1.i82.i25.i.i = getelementptr inbounds %Token, ptr %192, i64 0, i32 1
  store ptr %193, ptr %memberidx1.i82.i25.i.i, align 8
  br label %Parser_parse_index_expression.exit.i

Parser_parse_index_expression.exit.i:             ; preds = %else.i23.i.i, %if.entry.i.i21.i.i, %if.entry.i17.i.i
  %common.ret.op.i14.i.i = phi ptr [ %192, %else.i23.i.i ], [ %180, %if.entry.i.i21.i.i ], [ %180, %if.entry.i17.i.i ]
  %memberidx4.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i14.i.i, i64 0, i32 1
  %194 = load ptr, ptr %memberidx4.i.i, align 8
  %195 = call ptr @malloc(i32 32)
  %196 = load i64, ptr %182, align 4
  %memberidx1.i27.i.i = getelementptr inbounds %FloRange, ptr %194, i64 0, i32 1
  %197 = load i64, ptr %memberidx1.i27.i.i, align 4
  %memberidx2.i.i42.i = getelementptr inbounds %FloRange, ptr %182, i64 0, i32 2
  %198 = load i64, ptr %memberidx2.i.i42.i, align 4
  %memberidx3.i.i43.i = getelementptr inbounds %FloRange, ptr %194, i64 0, i32 3
  %199 = load i64, ptr %memberidx3.i.i43.i, align 4
  store i64 %196, ptr %195, align 4
  %memberidx1.i.i.i44.i = getelementptr inbounds %FloRange, ptr %195, i64 0, i32 1
  store i64 %197, ptr %memberidx1.i.i.i44.i, align 4
  %memberidx2.i.i28.i.i = getelementptr inbounds %FloRange, ptr %195, i64 0, i32 2
  store i64 %198, ptr %memberidx2.i.i28.i.i, align 4
  %memberidx3.i.i29.i.i = getelementptr inbounds %FloRange, ptr %195, i64 0, i32 3
  store i64 %199, ptr %memberidx3.i.i29.i.i, align 4
  store ptr %195, ptr %178, align 8
  br label %ifend.i

if.entry.i.i.i:                                   ; preds = %while.entry.i
  %200 = load i64, ptr %memberidx.i.i.i.i35, align 4
  %201 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %201, i64 0, i32 2
  %202 = load i64, ptr %memberidx2.i.i.i.i, align 4
  %203 = icmp slt i64 %200, %202
  br i1 %203, label %if.entry.i.i.i.i, label %Parser_parse_member_expression.exit.i

if.entry.i.i.i.i:                                 ; preds = %if.entry.i.i.i
  %204 = add nsw i64 %200, 1
  store i64 %204, ptr %memberidx.i.i.i.i35, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %201, i64 0, i32 1
  %205 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %205, i64 %204
  %206 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  store ptr %206, ptr %memberidx, align 8
  br label %Parser_parse_member_expression.exit.i

Parser_parse_member_expression.exit.i:            ; preds = %if.entry.i.i.i.i, %if.entry.i.i.i
  %207 = call fastcc ptr @Parser_eat(ptr %0, i64 54)
  %208 = call ptr @malloc(i32 40)
  %209 = load ptr, ptr %expression.0.i, align 8
  %memberidx1.i.i36 = getelementptr inbounds %Token, ptr %207, i64 0, i32 1
  %210 = load ptr, ptr %memberidx1.i.i36, align 8
  %211 = call ptr @malloc(i32 32)
  %212 = load i64, ptr %209, align 4
  %memberidx1.i.i.i37 = getelementptr inbounds %FloRange, ptr %210, i64 0, i32 1
  %213 = load i64, ptr %memberidx1.i.i.i37, align 4
  %memberidx2.i.i.i38 = getelementptr inbounds %FloRange, ptr %209, i64 0, i32 2
  %214 = load i64, ptr %memberidx2.i.i.i38, align 4
  %memberidx3.i.i.i39 = getelementptr inbounds %FloRange, ptr %210, i64 0, i32 3
  %215 = load i64, ptr %memberidx3.i.i.i39, align 4
  store i64 %212, ptr %211, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %211, i64 0, i32 1
  store i64 %213, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i5.i.i = getelementptr inbounds %FloRange, ptr %211, i64 0, i32 2
  store i64 %214, ptr %memberidx2.i.i5.i.i, align 4
  %memberidx3.i.i6.i.i = getelementptr inbounds %FloRange, ptr %211, i64 0, i32 3
  store i64 %215, ptr %memberidx3.i.i6.i.i, align 4
  store ptr %211, ptr %208, align 8
  %memberidx.i.i.i7.i.i = getelementptr inbounds %StatementNode, ptr %208, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i7.i.i, align 4
  %memberidx.i.i8.i.i = getelementptr inbounds %ExpressionNode, ptr %208, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i8.i.i, align 4
  %memberidx.i9.i.i = getelementptr inbounds %MemberExpressionNode, ptr %208, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i9.i.i, align 8
  %memberidx1.i10.i.i = getelementptr inbounds %MemberExpressionNode, ptr %208, i64 0, i32 4
  store ptr %207, ptr %memberidx1.i10.i.i, align 8
  br label %ifend.i

Parser_parse_lhs_expression_allow_call.exit:      ; preds = %while.entry.i, %ifend.i, %Parser_parse_atom.exit.i
  %expression.1.i = phi ptr [ %common.ret.op.i.i, %Parser_parse_atom.exit.i ], [ %expression.2.i, %ifend.i ], [ %expression.0.i, %while.entry.i ]
  %216 = load ptr, ptr %memberidx, align 8
  %217 = load i64, ptr %216, align 4
  switch i64 %217, label %common.ret [
    i64 23, label %ifend.i20
    i64 24, label %if.entry3.i
  ]

ifend.i20:                                        ; preds = %Parser_parse_lhs_expression_allow_call.exit, %if.entry3.i
  %op.0.i = phi i64 [ 5, %if.entry3.i ], [ 4, %Parser_parse_lhs_expression_allow_call.exit ]
  %memberidx.i.i18 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %218 = load i64, ptr %memberidx.i.i18, align 4
  %219 = load ptr, ptr %0, align 8
  %memberidx2.i.i19 = getelementptr inbounds %Array_Token_, ptr %219, i64 0, i32 2
  %220 = load i64, ptr %memberidx2.i.i19, align 4
  %221 = icmp slt i64 %218, %220
  br i1 %221, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %ifend.i20
  %222 = add nsw i64 %218, 1
  store i64 %222, ptr %memberidx.i.i18, align 4
  %memberidx.i.i.i22 = getelementptr inbounds %Array_Token_, ptr %219, i64 0, i32 1
  %223 = load ptr, ptr %memberidx.i.i.i22, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %223, i64 %222
  %224 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %224, ptr %memberidx, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %ifend.i20
  %225 = call ptr @malloc(i32 40)
  %226 = load ptr, ptr %expression.1.i, align 8
  %memberidx7.i = getelementptr inbounds %Token, ptr %216, i64 0, i32 1
  %227 = load ptr, ptr %memberidx7.i, align 8
  %228 = call ptr @malloc(i32 32)
  %229 = load i64, ptr %226, align 4
  %memberidx1.i.i23 = getelementptr inbounds %FloRange, ptr %227, i64 0, i32 1
  %230 = load i64, ptr %memberidx1.i.i23, align 4
  %memberidx2.i14.i = getelementptr inbounds %FloRange, ptr %226, i64 0, i32 2
  %231 = load i64, ptr %memberidx2.i14.i, align 4
  %memberidx3.i15.i = getelementptr inbounds %FloRange, ptr %227, i64 0, i32 3
  %232 = load i64, ptr %memberidx3.i15.i, align 4
  store i64 %229, ptr %228, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %228, i64 0, i32 1
  store i64 %230, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %228, i64 0, i32 2
  store i64 %231, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %228, i64 0, i32 3
  store i64 %232, ptr %memberidx3.i.i.i, align 4
  %memberidx.i16.i = getelementptr inbounds %UnaryExpressionNode, ptr %225, i64 0, i32 3
  store i64 %op.0.i, ptr %memberidx.i16.i, align 4
  %memberidx1.i17.i = getelementptr inbounds %UnaryExpressionNode, ptr %225, i64 0, i32 4
  store ptr %expression.1.i, ptr %memberidx1.i17.i, align 8
  store ptr %228, ptr %225, align 8
  br label %common.ret.sink.split

if.entry3.i:                                      ; preds = %Parser_parse_lhs_expression_allow_call.exit
  br label %ifend.i20

ifend:                                            ; preds = %Parser_is_unary_op.exit
  %memberidx.i8 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %233 = load i64, ptr %memberidx.i8, align 4
  %234 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %234, i64 0, i32 2
  %235 = load i64, ptr %memberidx2.i, align 4
  %236 = icmp slt i64 %233, %235
  br i1 %236, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %ifend
  %237 = add nsw i64 %233, 1
  store i64 %237, ptr %memberidx.i8, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %234, i64 0, i32 1
  %238 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %238, i64 %237
  %239 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %239, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %ifend, %if.entry.i
  %240 = call fastcc ptr @Parser_parse_unary_expression_pre(ptr nonnull %0)
  %241 = tail call ptr @malloc(i32 40)
  %242 = load ptr, ptr %240, align 8
  %243 = call ptr @malloc(i32 32)
  %244 = load i64, ptr %3, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %242, i64 0, i32 1
  %245 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i10 = getelementptr inbounds %FloRange, ptr %3, i64 0, i32 2
  %246 = load i64, ptr %memberidx2.i10, align 4
  %memberidx3.i11 = getelementptr inbounds %FloRange, ptr %242, i64 0, i32 3
  %247 = load i64, ptr %memberidx3.i11, align 4
  store i64 %244, ptr %243, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %243, i64 0, i32 1
  store i64 %245, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %243, i64 0, i32 2
  store i64 %246, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %243, i64 0, i32 3
  store i64 %247, ptr %memberidx3.i.i, align 4
  %memberidx.i12 = getelementptr inbounds %UnaryExpressionNode, ptr %241, i64 0, i32 3
  store i64 %common.ret.op.i, ptr %memberidx.i12, align 4
  %memberidx1.i13 = getelementptr inbounds %UnaryExpressionNode, ptr %241, i64 0, i32 4
  store ptr %240, ptr %memberidx1.i13, align 8
  store ptr %243, ptr %241, align 8
  br label %common.ret.sink.split
}

define internal fastcc void @Parser_parse_class_block(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = call fastcc ptr @Parser_eat(ptr %0, i64 27)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %memberidx.i, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 33
  %memberidx2.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx3.i.i, align 4
  %9 = icmp eq i64 %8, 0
  %10 = and i1 %6, %9
  br i1 %10, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %2
  %memberidx.i11.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %11 = load ptr, ptr %0, align 8
  %memberidx2.i12.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 2
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %12 = load i64, ptr %memberidx.i11.i, align 4
  %13 = load i64, ptr %memberidx2.i12.i, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %while.entry.i
  %15 = add nsw i64 %12, 1
  store i64 %15, ptr %memberidx.i11.i, align 4
  %16 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %17, ptr %memberidx.i, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %while.entry.i
  %18 = load ptr, ptr %memberidx.i, align 8
  %19 = load i64, ptr %18, align 4
  %20 = icmp eq i64 %19, 33
  %21 = load i64, ptr %memberidx3.i.i, align 4
  %22 = icmp eq i64 %21, 0
  %23 = and i1 %20, %22
  br i1 %23, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %2
  %24 = load i64, ptr %memberidx3.i.i, align 4
  %.fr = freeze i64 %24
  %25 = icmp eq i64 %.fr, 0
  br i1 %25, label %switch.early.test, label %while.end

switch.early.test:                                ; preds = %Parser_new_lines.exit
  %26 = load ptr, ptr %memberidx.i, align 8
  %27 = load i64, ptr %26, align 4
  switch i64 %27, label %while.entry.preheader [
    i64 46, label %while.end
    i64 28, label %while.end
  ]

while.entry.preheader:                            ; preds = %switch.early.test
  %memberidx.i60 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %memberidx.i54 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %memberidx20 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 4
  %memberidx14 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %switch.early.test147
  %access_modifier = alloca i64, align 8
  %28 = load ptr, ptr %memberidx.i, align 8
  %29 = load i64, ptr %28, align 4
  switch i64 %29, label %ifend6.i [
    i64 78, label %Parser_parse_access_modifier.exit
    i64 77, label %Parser_parse_access_modifier.exit.fold.split
  ]

ifend6.i:                                         ; preds = %while.entry
  %30 = icmp eq i64 %29, 79
  %spec.select.i = select i1 %30, i64 3, i64 0
  br label %Parser_parse_access_modifier.exit

Parser_parse_access_modifier.exit.fold.split:     ; preds = %while.entry
  br label %Parser_parse_access_modifier.exit

Parser_parse_access_modifier.exit:                ; preds = %while.entry, %Parser_parse_access_modifier.exit.fold.split, %ifend6.i
  %common.ret.op.i = phi i64 [ 2, %while.entry ], [ %spec.select.i, %ifend6.i ], [ 1, %Parser_parse_access_modifier.exit.fold.split ]
  store i64 %common.ret.op.i, ptr %access_modifier, align 8
  %31 = icmp eq i64 %common.ret.op.i, 0
  br i1 %31, label %if.entry, label %else

common.ret:                                       ; preds = %Parser_error.exit, %while.end
  ret void

while.end:                                        ; preds = %switch.early.test147, %switch.early.test147, %Parser_new_lines.exit115, %switch.early.test, %switch.early.test, %Parser_new_lines.exit
  %32 = call fastcc ptr @Parser_eat(ptr %0, i64 28)
  br label %common.ret

if.entry:                                         ; preds = %Parser_parse_access_modifier.exit
  store i64 2, ptr %access_modifier, align 8
  br label %ifend

else:                                             ; preds = %Parser_parse_access_modifier.exit
  %33 = load i64, ptr %memberidx.i54, align 4
  %34 = load ptr, ptr %0, align 8
  %memberidx2.i55 = getelementptr inbounds %Array_Token_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx2.i55, align 4
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %if.entry.i, label %ifend

if.entry.i:                                       ; preds = %else
  %37 = add nsw i64 %33, 1
  store i64 %37, ptr %memberidx.i54, align 4
  %memberidx.i.i57 = getelementptr inbounds %Array_Token_, ptr %34, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i.i57, align 8
  %ptridx.i.i58 = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i.i58, align 8
  store ptr %39, ptr %memberidx.i, align 8
  br label %ifend

ifend:                                            ; preds = %if.entry.i, %else, %if.entry
  %40 = load i64, ptr %memberidx.i60, align 4
  %41 = add nsw i64 %40, 1
  %42 = load ptr, ptr %0, align 8
  %memberidx2.i61 = getelementptr inbounds %Array_Token_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx2.i61, align 4
  %44 = icmp slt i64 %41, %43
  %45 = add i64 %43, -1
  %.sink149 = select i1 %44, i64 %41, i64 %45
  %memberidx.i.i63 = getelementptr inbounds %Array_Token_, ptr %42, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i.i63, align 8
  %ptridx.i.i64 = getelementptr inbounds ptr, ptr %46, i64 %.sink149
  %common.ret.op.i62 = load ptr, ptr %ptridx.i.i64, align 8
  %47 = load i64, ptr %common.ret.op.i62, align 4
  %48 = icmp eq i64 %47, 1
  br i1 %48, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %49 = tail call ptr @malloc(i32 32)
  %50 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  store ptr %50, ptr %49, align 8
  %memberidx1.i73 = getelementptr inbounds %FieldNode, ptr %49, i64 0, i32 2
  store ptr null, ptr %memberidx1.i73, align 8
  %51 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 1)
  %memberidx6 = getelementptr inbounds %FieldNode, ptr %49, i64 0, i32 3
  %52 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %52, ptr %memberidx6, align 8
  %53 = load ptr, ptr %memberidx.i, align 8
  %54 = load i64, ptr %53, align 4
  %55 = icmp eq i64 %54, 38
  br i1 %55, label %if.entry9, label %ifend11

else4:                                            ; preds = %ifend
  %56 = add i64 %43, -1
  %.sink150 = select i1 %44, i64 %41, i64 %56
  %memberidx.i.i93 = getelementptr inbounds %Array_Token_, ptr %42, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i.i93, align 8
  %ptridx.i.i94 = getelementptr inbounds ptr, ptr %57, i64 %.sink150
  %common.ret.op.i92 = load ptr, ptr %ptridx.i.i94, align 8
  %58 = load i64, ptr %common.ret.op.i92, align 4
  %59 = icmp eq i64 %58, 25
  br i1 %59, label %if.entry16, label %else17

ifend5:                                           ; preds = %Array_MethodNode____sl__.exit, %Array_FieldNode____sl__.exit
  %memberidx4.i.sink = phi ptr [ %memberidx4.i, %Array_MethodNode____sl__.exit ], [ %memberidx4.i133, %Array_FieldNode____sl__.exit ]
  %.sink152 = phi i64 [ %155, %Array_MethodNode____sl__.exit ], [ %101, %Array_FieldNode____sl__.exit ]
  %.sink = phi ptr [ %103, %Array_MethodNode____sl__.exit ], [ %49, %Array_FieldNode____sl__.exit ]
  %60 = load ptr, ptr %memberidx4.i.sink, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %60, i64 %.sink152
  store ptr %.sink, ptr %ptridx.i, align 8
  %61 = load ptr, ptr %memberidx.i, align 8
  %62 = load i64, ptr %61, align 4
  %63 = icmp eq i64 %62, 33
  %64 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i103 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx3.i.i103, align 4
  %66 = icmp eq i64 %65, 0
  %67 = and i1 %63, %66
  br i1 %67, label %while.entry.i106.preheader, label %Parser_new_lines.exit115

while.entry.i106.preheader:                       ; preds = %ifend5
  %68 = load ptr, ptr %0, align 8
  %memberidx2.i12.i105 = getelementptr inbounds %Array_Token_, ptr %68, i64 0, i32 2
  %memberidx.i.i.i108 = getelementptr inbounds %Array_Token_, ptr %68, i64 0, i32 1
  br label %while.entry.i106

while.entry.i106:                                 ; preds = %while.entry.i106.preheader, %Parser_advance.exit.i114
  %69 = load i64, ptr %memberidx.i60, align 4
  %70 = load i64, ptr %memberidx2.i12.i105, align 4
  %71 = icmp slt i64 %69, %70
  br i1 %71, label %if.entry.i.i110, label %Parser_advance.exit.i114

if.entry.i.i110:                                  ; preds = %while.entry.i106
  %72 = add nsw i64 %69, 1
  store i64 %72, ptr %memberidx.i60, align 4
  %73 = load ptr, ptr %memberidx.i.i.i108, align 8
  %ptridx.i.i.i109 = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i.i.i109, align 8
  store ptr %74, ptr %memberidx.i, align 8
  br label %Parser_advance.exit.i114

Parser_advance.exit.i114:                         ; preds = %if.entry.i.i110, %while.entry.i106
  %75 = load ptr, ptr %memberidx.i, align 8
  %76 = load i64, ptr %75, align 4
  %77 = icmp eq i64 %76, 33
  %78 = load i64, ptr %memberidx3.i.i103, align 4
  %79 = icmp eq i64 %78, 0
  %80 = and i1 %77, %79
  br i1 %80, label %while.entry.i106, label %Parser_new_lines.exit115

Parser_new_lines.exit115:                         ; preds = %Parser_advance.exit.i114, %ifend5
  %81 = load i64, ptr %memberidx3.i.i103, align 4
  %.fr148 = freeze i64 %81
  %82 = icmp eq i64 %.fr148, 0
  br i1 %82, label %switch.early.test147, label %while.end

switch.early.test147:                             ; preds = %Parser_new_lines.exit115
  %83 = load ptr, ptr %memberidx.i, align 8
  %84 = load i64, ptr %83, align 4
  switch i64 %84, label %while.entry [
    i64 46, label %while.end
    i64 28, label %while.end
  ]

if.entry9:                                        ; preds = %if.entry3
  %85 = load i64, ptr %memberidx.i60, align 4
  %86 = load ptr, ptr %0, align 8
  %memberidx2.i120 = getelementptr inbounds %Array_Token_, ptr %86, i64 0, i32 2
  %87 = load i64, ptr %memberidx2.i120, align 4
  %88 = icmp slt i64 %85, %87
  br i1 %88, label %if.entry.i124, label %Parser_advance.exit126

if.entry.i124:                                    ; preds = %if.entry9
  %89 = add nsw i64 %85, 1
  store i64 %89, ptr %memberidx.i60, align 4
  %memberidx.i.i122 = getelementptr inbounds %Array_Token_, ptr %86, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i.i122, align 8
  %ptridx.i.i123 = getelementptr inbounds ptr, ptr %90, i64 %89
  %91 = load ptr, ptr %ptridx.i.i123, align 8
  store ptr %91, ptr %memberidx.i, align 8
  br label %Parser_advance.exit126

Parser_advance.exit126:                           ; preds = %if.entry9, %if.entry.i124
  %92 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %92, ptr %memberidx1.i73, align 8
  br label %ifend11

ifend11:                                          ; preds = %if.entry3, %Parser_advance.exit126
  %memberidx13 = getelementptr inbounds %FieldNode, ptr %49, i64 0, i32 1
  %93 = load i64, ptr %access_modifier, align 8
  store i64 %93, ptr %memberidx13, align 4
  %94 = load ptr, ptr %memberidx14, align 8
  %memberidx.i127 = getelementptr inbounds %Array_FieldNode_, ptr %94, i64 0, i32 2
  %95 = load i64, ptr %memberidx.i127, align 4
  %memberidx1.i128 = getelementptr inbounds %Array_FieldNode_, ptr %94, i64 0, i32 3
  %96 = load i64, ptr %memberidx1.i128, align 4
  %.not.i129 = icmp slt i64 %95, %96
  br i1 %.not.i129, label %Array_FieldNode____sl__.exit, label %if.entry.i132

if.entry.i132:                                    ; preds = %ifend11
  %97 = shl i64 %96, 1
  store i64 %97, ptr %memberidx1.i128, align 4
  %memberidx2.i.i131 = getelementptr inbounds %Array_FieldNode_, ptr %94, i64 0, i32 1
  %98 = load ptr, ptr %memberidx2.i.i131, align 8
  %99 = shl i64 %96, 4
  %100 = call ptr @realloc(ptr %98, i64 %99)
  store ptr %100, ptr %memberidx2.i.i131, align 8
  br label %Array_FieldNode____sl__.exit

Array_FieldNode____sl__.exit:                     ; preds = %ifend11, %if.entry.i132
  %101 = load i64, ptr %memberidx.i127, align 4
  %102 = add nsw i64 %101, 1
  store i64 %102, ptr %memberidx.i127, align 4
  %memberidx4.i133 = getelementptr inbounds %Array_FieldNode_, ptr %94, i64 0, i32 1
  br label %ifend5

if.entry16:                                       ; preds = %else4
  %103 = call ptr @malloc(i32 42)
  %104 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 54)
  store ptr %104, ptr %103, align 8
  %memberidx1.i.i74 = getelementptr inbounds %MethodNode, ptr %103, i64 0, i32 1
  %105 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ArgNode_, ptr %105, align 8
  %memberidx.i.i.i75 = getelementptr inbounds %Array_ArgNode_, ptr %105, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i75, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Array_ArgNode_, ptr %105, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i76 = getelementptr inbounds %Array_ArgNode_, ptr %105, i64 0, i32 1
  %106 = call ptr @malloc(i32 64)
  store ptr %106, ptr %memberidx2.i.i.i76, align 8
  store i64 0, ptr %memberidx.i.i.i75, align 4
  store ptr %105, ptr %memberidx1.i.i74, align 8
  %memberidx4.i.i78 = getelementptr inbounds %MethodNode, ptr %103, i64 0, i32 5
  store i1 true, ptr %memberidx4.i.i78, align 1
  %memberidx5.i.i = getelementptr inbounds %MethodNode, ptr %103, i64 0, i32 6
  store i1 false, ptr %memberidx5.i.i, align 1
  %107 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 25)
  %108 = load ptr, ptr %memberidx.i, align 8
  %109 = load i64, ptr %108, align 4
  %.not.i80 = icmp eq i64 %109, 26
  br i1 %.not.i80, label %ifend.i86, label %if.entry.i84

if.entry.i84:                                     ; preds = %if.entry16
  %memberidx3.i81 = getelementptr inbounds %IdentifierToken, ptr %108, i64 0, i32 2
  %110 = load ptr, ptr %memberidx3.i81, align 8
  %111 = call ptr @malloc(i32 4)
  store i32 1936287860, ptr %111, align 8
  %112 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i.i53.i = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i.i53.i, align 8
  %memberidx1.i.i54.i = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i54.i, align 4
  %memberidx2.i.i55.i = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i55.i, align 4
  %memberidx.i.i82 = getelementptr inbounds %string, ptr %110, i64 0, i32 2
  %113 = load i64, ptr %memberidx.i.i82, align 4
  %.not.i.i83 = icmp eq i64 %113, 4
  br i1 %.not.i.i83, label %ifend.i.i, label %ifend.i86

ifend.i.i:                                        ; preds = %if.entry.i84
  %memberidx2.i.i85 = getelementptr inbounds %string, ptr %110, i64 0, i32 1
  %114 = load ptr, ptr %memberidx2.i.i85, align 8
  %115 = call i64 @memcmp(ptr %114, ptr nonnull %111, i64 %113)
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %if.entry4.i, label %ifend.i86

ifend.i86:                                        ; preds = %if.entry.i84, %if.entry4.i, %if.entry.i.i88, %ifend.i.i, %if.entry16
  %117 = load ptr, ptr %memberidx.i, align 8
  %118 = load i64, ptr %117, align 4
  %.not52.i = icmp eq i64 %118, 26
  br i1 %.not52.i, label %ifend12.i, label %if.entry10.i

if.entry4.i:                                      ; preds = %ifend.i.i
  store i1 false, ptr %memberidx4.i.i78, align 1
  %119 = load i64, ptr %memberidx.i60, align 4
  %120 = load ptr, ptr %0, align 8
  %memberidx2.i59.i = getelementptr inbounds %Array_Token_, ptr %120, i64 0, i32 2
  %121 = load i64, ptr %memberidx2.i59.i, align 4
  %122 = icmp slt i64 %119, %121
  br i1 %122, label %if.entry.i.i88, label %ifend.i86

if.entry.i.i88:                                   ; preds = %if.entry4.i
  %123 = add nsw i64 %119, 1
  store i64 %123, ptr %memberidx.i60, align 4
  %memberidx.i.i61.i = getelementptr inbounds %Array_Token_, ptr %120, i64 0, i32 1
  %124 = load ptr, ptr %memberidx.i.i61.i, align 8
  %ptridx.i.i.i87 = getelementptr inbounds ptr, ptr %124, i64 %123
  %125 = load ptr, ptr %ptridx.i.i.i87, align 8
  store ptr %125, ptr %memberidx.i, align 8
  br label %ifend.i86

if.entry10.i:                                     ; preds = %ifend.i86
  %126 = load i1, ptr %memberidx4.i.i78, align 1
  br i1 %126, label %ifend16.i, label %if.entry14.i

ifend12.i:                                        ; preds = %ifend16.i, %ifend.i86
  %127 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  %128 = load ptr, ptr %memberidx.i, align 8
  %129 = load i64, ptr %128, align 4
  %130 = icmp eq i64 %129, 1
  br i1 %130, label %if.entry20.i, label %else21.i

if.entry14.i:                                     ; preds = %if.entry10.i
  %131 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 3)
  br label %ifend16.i

ifend16.i:                                        ; preds = %if.entry14.i, %if.entry10.i
  %132 = load ptr, ptr %memberidx1.i.i74, align 8
  call fastcc void @Parser_parse_args(ptr nonnull %0, ptr %132)
  br label %ifend12.i

if.entry20.i:                                     ; preds = %ifend12.i
  %133 = load i64, ptr %memberidx.i60, align 4
  %134 = load ptr, ptr %0, align 8
  %memberidx2.i64.i = getelementptr inbounds %Array_Token_, ptr %134, i64 0, i32 2
  %135 = load i64, ptr %memberidx2.i64.i, align 4
  %136 = icmp slt i64 %133, %135
  br i1 %136, label %if.entry.i68.i, label %Parser_advance.exit70.i

if.entry.i68.i:                                   ; preds = %if.entry20.i
  %137 = add nsw i64 %133, 1
  store i64 %137, ptr %memberidx.i60, align 4
  %memberidx.i.i66.i = getelementptr inbounds %Array_Token_, ptr %134, i64 0, i32 1
  %138 = load ptr, ptr %memberidx.i.i66.i, align 8
  %ptridx.i.i67.i = getelementptr inbounds ptr, ptr %138, i64 %137
  %139 = load ptr, ptr %ptridx.i.i67.i, align 8
  store ptr %139, ptr %memberidx.i, align 8
  br label %Parser_advance.exit70.i

Parser_advance.exit70.i:                          ; preds = %if.entry.i68.i, %if.entry20.i
  %memberidx23.i = getelementptr inbounds %MethodNode, ptr %103, i64 0, i32 4
  %140 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %140, ptr %memberidx23.i, align 8
  br label %ifend22.i

else21.i:                                         ; preds = %ifend12.i
  %memberidx24.i = getelementptr inbounds %MethodNode, ptr %103, i64 0, i32 4
  %141 = call ptr @malloc(i32 16)
  %142 = call ptr @malloc(i32 32)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %142, i8 0, i64 32, i1 false)
  store ptr %142, ptr %141, align 8
  %memberidx.i74.i = getelementptr inbounds %TypeNode, ptr %141, i64 0, i32 1
  store i64 10, ptr %memberidx.i74.i, align 4
  store ptr %141, ptr %memberidx24.i, align 8
  br label %ifend22.i

ifend22.i:                                        ; preds = %else21.i, %Parser_advance.exit70.i
  %143 = load ptr, ptr %memberidx.i, align 8
  %144 = load i64, ptr %143, align 4
  %145 = icmp eq i64 %144, 27
  br i1 %145, label %if.entry27.i, label %else28.i

if.entry27.i:                                     ; preds = %ifend22.i
  %memberidx30.i = getelementptr inbounds %MethodNode, ptr %103, i64 0, i32 2
  %146 = call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %146, ptr %memberidx30.i, align 8
  br label %Parser_parse_method.exit

else28.i:                                         ; preds = %ifend22.i
  store i1 true, ptr %memberidx5.i.i, align 1
  br label %Parser_parse_method.exit

Parser_parse_method.exit:                         ; preds = %if.entry27.i, %else28.i
  %memberidx19 = getelementptr inbounds %MethodNode, ptr %103, i64 0, i32 3
  %147 = load i64, ptr %access_modifier, align 8
  store i64 %147, ptr %memberidx19, align 4
  %148 = load ptr, ptr %memberidx20, align 8
  %memberidx.i67 = getelementptr inbounds %Array_MethodNode_, ptr %148, i64 0, i32 2
  %149 = load i64, ptr %memberidx.i67, align 4
  %memberidx1.i68 = getelementptr inbounds %Array_MethodNode_, ptr %148, i64 0, i32 3
  %150 = load i64, ptr %memberidx1.i68, align 4
  %.not.i = icmp slt i64 %149, %150
  br i1 %.not.i, label %Array_MethodNode____sl__.exit, label %if.entry.i71

if.entry.i71:                                     ; preds = %Parser_parse_method.exit
  %151 = shl i64 %150, 1
  store i64 %151, ptr %memberidx1.i68, align 4
  %memberidx2.i.i70 = getelementptr inbounds %Array_MethodNode_, ptr %148, i64 0, i32 1
  %152 = load ptr, ptr %memberidx2.i.i70, align 8
  %153 = shl i64 %150, 4
  %154 = call ptr @realloc(ptr %152, i64 %153)
  store ptr %154, ptr %memberidx2.i.i70, align 8
  br label %Array_MethodNode____sl__.exit

Array_MethodNode____sl__.exit:                    ; preds = %Parser_parse_method.exit, %if.entry.i71
  %155 = load i64, ptr %memberidx.i67, align 4
  %156 = add nsw i64 %155, 1
  store i64 %156, ptr %memberidx.i67, align 4
  %memberidx4.i = getelementptr inbounds %Array_MethodNode_, ptr %148, i64 0, i32 1
  br label %ifend5

else17:                                           ; preds = %else4
  %157 = call ptr @malloc(i32 19)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(19) %157, ptr noundef nonnull align 8 dereferenceable(19) @73, i64 19, i1 false)
  %158 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %158, align 8
  %memberidx.i.i51 = getelementptr inbounds %string, ptr %158, i64 0, i32 1
  store ptr %157, ptr %memberidx.i.i51, align 8
  %memberidx1.i.i52 = getelementptr inbounds %string, ptr %158, i64 0, i32 2
  store i64 19, ptr %memberidx1.i.i52, align 4
  %memberidx2.i.i53 = getelementptr inbounds %string, ptr %158, i64 0, i32 3
  store i64 19, ptr %memberidx2.i.i53, align 4
  %159 = load ptr, ptr %memberidx2.i.i, align 8
  %160 = call ptr @malloc(i32 24)
  %161 = load ptr, ptr %memberidx.i, align 8
  %memberidx2.i = getelementptr inbounds %Token, ptr %161, i64 0, i32 1
  %162 = load ptr, ptr %memberidx2.i, align 8
  store i64 2, ptr %160, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %160, i64 0, i32 2
  store ptr %162, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i44 = getelementptr inbounds %FloError, ptr %160, i64 0, i32 1
  store ptr %158, ptr %memberidx2.i.i44, align 8
  %memberidx.i.i45 = getelementptr inbounds %Array_FloError_, ptr %159, i64 0, i32 2
  %163 = load i64, ptr %memberidx.i.i45, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %159, i64 0, i32 3
  %164 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %163, %164
  br i1 %.not.i.i, label %Parser_error.exit, label %if.entry.i.i47

if.entry.i.i47:                                   ; preds = %else17
  %165 = shl i64 %164, 1
  store i64 %165, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %159, i64 0, i32 1
  %166 = load ptr, ptr %memberidx2.i.i.i, align 8
  %167 = shl i64 %164, 4
  %168 = call ptr @realloc(ptr %166, i64 %167)
  store ptr %168, ptr %memberidx2.i.i.i, align 8
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %else17, %if.entry.i.i47
  %169 = load i64, ptr %memberidx.i.i45, align 4
  %170 = add nsw i64 %169, 1
  store i64 %170, ptr %memberidx.i.i45, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %159, i64 0, i32 1
  %171 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %171, i64 %169
  store ptr %160, ptr %ptridx.i.i, align 8
  br label %common.ret
}

define internal fastcc ptr @Parser_eat(ptr nocapture %0, i64 %1) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, %1
  br i1 %5, label %if.entry, label %else

common.ret:                                       ; preds = %if.entry.i, %if.entry, %ifend4
  %common.ret.op = phi ptr [ %28, %ifend4 ], [ %3, %if.entry ], [ %3, %if.entry.i ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp slt i64 %6, %8
  br i1 %9, label %if.entry.i, label %common.ret

if.entry.i:                                       ; preds = %if.entry
  %10 = add nsw i64 %6, 1
  store i64 %10, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %12, ptr %memberidx, align 8
  br label %common.ret

else:                                             ; preds = %2
  switch i64 %1, label %ifend4 [
    i64 54, label %if.entry2
    i64 38, label %if.entry5
    i64 1, label %if.entry8
    i64 25, label %if.entry11
    i64 26, label %if.entry14
    i64 27, label %if.entry17
    i64 28, label %if.entry20
    i64 3, label %if.entry23
    i64 42, label %if.entry26
    i64 41, label %if.entry29
    i64 45, label %if.entry32
  ]

if.entry2:                                        ; preds = %else
  %13 = call ptr @malloc(i32 22)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(22) %13, ptr noundef nonnull align 8 dereferenceable(22) @56, i64 22, i1 false)
  %14 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i65 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i65, align 8
  %memberidx1.i.i66 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 22, ptr %memberidx1.i.i66, align 4
  %memberidx2.i.i67 = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 22, ptr %memberidx2.i.i67, align 4
  %memberidx.i68 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i68, align 8
  %16 = call ptr @malloc(i32 24)
  %17 = load ptr, ptr %memberidx, align 8
  %memberidx2.i70 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2.i70, align 8
  store i64 2, ptr %16, align 4
  %memberidx1.i.i71 = getelementptr inbounds %FloError, ptr %16, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i71, align 8
  %memberidx2.i.i72 = getelementptr inbounds %FloError, ptr %16, i64 0, i32 1
  store ptr %14, ptr %memberidx2.i.i72, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i.i73, align 4
  %memberidx1.i4.i74 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 3
  %20 = load i64, ptr %memberidx1.i4.i74, align 4
  %.not.i.i75 = icmp slt i64 %19, %20
  br i1 %.not.i.i75, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

ifend4.sink.split.sink.split:                     ; preds = %if.entry2, %if.entry32, %if.entry29, %if.entry26, %if.entry23, %if.entry20, %if.entry17, %if.entry14, %if.entry11, %if.entry8, %if.entry5
  %.sink252 = phi i64 [ %37, %if.entry5 ], [ %45, %if.entry8 ], [ %53, %if.entry11 ], [ %61, %if.entry14 ], [ %69, %if.entry17 ], [ %77, %if.entry20 ], [ %85, %if.entry23 ], [ %93, %if.entry26 ], [ %101, %if.entry29 ], [ %109, %if.entry32 ], [ %20, %if.entry2 ]
  %memberidx1.i4.i92.sink = phi ptr [ %memberidx1.i4.i92, %if.entry5 ], [ %memberidx1.i4.i109, %if.entry8 ], [ %memberidx1.i4.i126, %if.entry11 ], [ %memberidx1.i4.i143, %if.entry14 ], [ %memberidx1.i4.i160, %if.entry17 ], [ %memberidx1.i4.i177, %if.entry20 ], [ %memberidx1.i4.i194, %if.entry23 ], [ %memberidx1.i4.i211, %if.entry26 ], [ %memberidx1.i4.i228, %if.entry29 ], [ %memberidx1.i4.i, %if.entry32 ], [ %memberidx1.i4.i74, %if.entry2 ]
  %.sink250 = phi ptr [ %32, %if.entry5 ], [ %40, %if.entry8 ], [ %48, %if.entry11 ], [ %56, %if.entry14 ], [ %64, %if.entry17 ], [ %72, %if.entry20 ], [ %80, %if.entry23 ], [ %88, %if.entry26 ], [ %96, %if.entry29 ], [ %104, %if.entry32 ], [ %15, %if.entry2 ]
  %memberidx.i.i73.sink.ph = phi ptr [ %memberidx.i.i91, %if.entry5 ], [ %memberidx.i.i108, %if.entry8 ], [ %memberidx.i.i125, %if.entry11 ], [ %memberidx.i.i142, %if.entry14 ], [ %memberidx.i.i159, %if.entry17 ], [ %memberidx.i.i176, %if.entry20 ], [ %memberidx.i.i193, %if.entry23 ], [ %memberidx.i.i210, %if.entry26 ], [ %memberidx.i.i227, %if.entry29 ], [ %memberidx.i.i63, %if.entry32 ], [ %memberidx.i.i73, %if.entry2 ]
  %.sink.ph = phi ptr [ %33, %if.entry5 ], [ %41, %if.entry8 ], [ %49, %if.entry11 ], [ %57, %if.entry14 ], [ %65, %if.entry17 ], [ %73, %if.entry20 ], [ %81, %if.entry23 ], [ %89, %if.entry26 ], [ %97, %if.entry29 ], [ %105, %if.entry32 ], [ %16, %if.entry2 ]
  %21 = shl i64 %.sink252, 1
  store i64 %21, ptr %memberidx1.i4.i92.sink, align 4
  %memberidx2.i.i.i95 = getelementptr inbounds %Array_FloError_, ptr %.sink250, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i.i95, align 8
  %23 = shl i64 %.sink252, 4
  %24 = call ptr @realloc(ptr %22, i64 %23)
  store ptr %24, ptr %memberidx2.i.i.i95, align 8
  br label %ifend4.sink.split

ifend4.sink.split:                                ; preds = %ifend4.sink.split.sink.split, %if.entry2, %if.entry32, %if.entry29, %if.entry26, %if.entry23, %if.entry20, %if.entry17, %if.entry14, %if.entry11, %if.entry8, %if.entry5
  %memberidx.i.i73.sink = phi ptr [ %memberidx.i.i91, %if.entry5 ], [ %memberidx.i.i108, %if.entry8 ], [ %memberidx.i.i125, %if.entry11 ], [ %memberidx.i.i142, %if.entry14 ], [ %memberidx.i.i159, %if.entry17 ], [ %memberidx.i.i176, %if.entry20 ], [ %memberidx.i.i193, %if.entry23 ], [ %memberidx.i.i210, %if.entry26 ], [ %memberidx.i.i227, %if.entry29 ], [ %memberidx.i.i63, %if.entry32 ], [ %memberidx.i.i73, %if.entry2 ], [ %memberidx.i.i73.sink.ph, %ifend4.sink.split.sink.split ]
  %.sink242 = phi ptr [ %32, %if.entry5 ], [ %40, %if.entry8 ], [ %48, %if.entry11 ], [ %56, %if.entry14 ], [ %64, %if.entry17 ], [ %72, %if.entry20 ], [ %80, %if.entry23 ], [ %88, %if.entry26 ], [ %96, %if.entry29 ], [ %104, %if.entry32 ], [ %15, %if.entry2 ], [ %.sink250, %ifend4.sink.split.sink.split ]
  %.sink = phi ptr [ %33, %if.entry5 ], [ %41, %if.entry8 ], [ %49, %if.entry11 ], [ %57, %if.entry14 ], [ %65, %if.entry17 ], [ %73, %if.entry20 ], [ %81, %if.entry23 ], [ %89, %if.entry26 ], [ %97, %if.entry29 ], [ %105, %if.entry32 ], [ %16, %if.entry2 ], [ %.sink.ph, %ifend4.sink.split.sink.split ]
  %25 = load i64, ptr %memberidx.i.i73.sink, align 4
  %26 = add nsw i64 %25, 1
  store i64 %26, ptr %memberidx.i.i73.sink, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %.sink242, i64 0, i32 1
  %27 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i64 = getelementptr inbounds ptr, ptr %27, i64 %25
  store ptr %.sink, ptr %ptridx.i.i64, align 8
  br label %ifend4

ifend4:                                           ; preds = %ifend4.sink.split, %else
  %28 = tail call ptr @malloc(i32 16)
  %memberidx35 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %29 = load ptr, ptr %memberidx35, align 8
  store i64 46, ptr %28, align 4
  %memberidx1.i82 = getelementptr inbounds %Token, ptr %28, i64 0, i32 1
  store ptr %29, ptr %memberidx1.i82, align 8
  br label %common.ret

if.entry5:                                        ; preds = %else
  %30 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %30, ptr noundef nonnull align 8 dereferenceable(12) @57, i64 12, i1 false)
  %31 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i83 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i83, align 8
  %memberidx1.i.i84 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i84, align 4
  %memberidx2.i.i85 = getelementptr inbounds %string, ptr %31, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i85, align 4
  %memberidx.i86 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i86, align 8
  %33 = call ptr @malloc(i32 24)
  %34 = load ptr, ptr %memberidx, align 8
  %memberidx2.i88 = getelementptr inbounds %Token, ptr %34, i64 0, i32 1
  %35 = load ptr, ptr %memberidx2.i88, align 8
  store i64 2, ptr %33, align 4
  %memberidx1.i.i89 = getelementptr inbounds %FloError, ptr %33, i64 0, i32 2
  store ptr %35, ptr %memberidx1.i.i89, align 8
  %memberidx2.i.i90 = getelementptr inbounds %FloError, ptr %33, i64 0, i32 1
  store ptr %31, ptr %memberidx2.i.i90, align 8
  %memberidx.i.i91 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 2
  %36 = load i64, ptr %memberidx.i.i91, align 4
  %memberidx1.i4.i92 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 3
  %37 = load i64, ptr %memberidx1.i4.i92, align 4
  %.not.i.i93 = icmp slt i64 %36, %37
  br i1 %.not.i.i93, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry8:                                        ; preds = %else
  %38 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %38, ptr noundef nonnull align 8 dereferenceable(12) @58, i64 12, i1 false)
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i100 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i100, align 8
  %memberidx1.i.i101 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i101, align 4
  %memberidx2.i.i102 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i102, align 4
  %memberidx.i103 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %40 = load ptr, ptr %memberidx.i103, align 8
  %41 = call ptr @malloc(i32 24)
  %42 = load ptr, ptr %memberidx, align 8
  %memberidx2.i105 = getelementptr inbounds %Token, ptr %42, i64 0, i32 1
  %43 = load ptr, ptr %memberidx2.i105, align 8
  store i64 2, ptr %41, align 4
  %memberidx1.i.i106 = getelementptr inbounds %FloError, ptr %41, i64 0, i32 2
  store ptr %43, ptr %memberidx1.i.i106, align 8
  %memberidx2.i.i107 = getelementptr inbounds %FloError, ptr %41, i64 0, i32 1
  store ptr %39, ptr %memberidx2.i.i107, align 8
  %memberidx.i.i108 = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 2
  %44 = load i64, ptr %memberidx.i.i108, align 4
  %memberidx1.i4.i109 = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 3
  %45 = load i64, ptr %memberidx1.i4.i109, align 4
  %.not.i.i110 = icmp slt i64 %44, %45
  br i1 %.not.i.i110, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry11:                                       ; preds = %else
  %46 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %46, ptr noundef nonnull align 8 dereferenceable(12) @59, i64 12, i1 false)
  %47 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i.i117 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i.i117, align 8
  %memberidx1.i.i118 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i118, align 4
  %memberidx2.i.i119 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i119, align 4
  %memberidx.i120 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i120, align 8
  %49 = call ptr @malloc(i32 24)
  %50 = load ptr, ptr %memberidx, align 8
  %memberidx2.i122 = getelementptr inbounds %Token, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx2.i122, align 8
  store i64 2, ptr %49, align 4
  %memberidx1.i.i123 = getelementptr inbounds %FloError, ptr %49, i64 0, i32 2
  store ptr %51, ptr %memberidx1.i.i123, align 8
  %memberidx2.i.i124 = getelementptr inbounds %FloError, ptr %49, i64 0, i32 1
  store ptr %47, ptr %memberidx2.i.i124, align 8
  %memberidx.i.i125 = getelementptr inbounds %Array_FloError_, ptr %48, i64 0, i32 2
  %52 = load i64, ptr %memberidx.i.i125, align 4
  %memberidx1.i4.i126 = getelementptr inbounds %Array_FloError_, ptr %48, i64 0, i32 3
  %53 = load i64, ptr %memberidx1.i4.i126, align 4
  %.not.i.i127 = icmp slt i64 %52, %53
  br i1 %.not.i.i127, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry14:                                       ; preds = %else
  %54 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %54, ptr noundef nonnull align 8 dereferenceable(12) @60, i64 12, i1 false)
  %55 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %55, align 8
  %memberidx.i.i134 = getelementptr inbounds %string, ptr %55, i64 0, i32 1
  store ptr %54, ptr %memberidx.i.i134, align 8
  %memberidx1.i.i135 = getelementptr inbounds %string, ptr %55, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i135, align 4
  %memberidx2.i.i136 = getelementptr inbounds %string, ptr %55, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i136, align 4
  %memberidx.i137 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i137, align 8
  %57 = call ptr @malloc(i32 24)
  %58 = load ptr, ptr %memberidx, align 8
  %memberidx2.i139 = getelementptr inbounds %Token, ptr %58, i64 0, i32 1
  %59 = load ptr, ptr %memberidx2.i139, align 8
  store i64 2, ptr %57, align 4
  %memberidx1.i.i140 = getelementptr inbounds %FloError, ptr %57, i64 0, i32 2
  store ptr %59, ptr %memberidx1.i.i140, align 8
  %memberidx2.i.i141 = getelementptr inbounds %FloError, ptr %57, i64 0, i32 1
  store ptr %55, ptr %memberidx2.i.i141, align 8
  %memberidx.i.i142 = getelementptr inbounds %Array_FloError_, ptr %56, i64 0, i32 2
  %60 = load i64, ptr %memberidx.i.i142, align 4
  %memberidx1.i4.i143 = getelementptr inbounds %Array_FloError_, ptr %56, i64 0, i32 3
  %61 = load i64, ptr %memberidx1.i4.i143, align 4
  %.not.i.i144 = icmp slt i64 %60, %61
  br i1 %.not.i.i144, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry17:                                       ; preds = %else
  %62 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %62, ptr noundef nonnull align 8 dereferenceable(12) @61, i64 12, i1 false)
  %63 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %63, align 8
  %memberidx.i.i151 = getelementptr inbounds %string, ptr %63, i64 0, i32 1
  store ptr %62, ptr %memberidx.i.i151, align 8
  %memberidx1.i.i152 = getelementptr inbounds %string, ptr %63, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i152, align 4
  %memberidx2.i.i153 = getelementptr inbounds %string, ptr %63, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i153, align 4
  %memberidx.i154 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i154, align 8
  %65 = call ptr @malloc(i32 24)
  %66 = load ptr, ptr %memberidx, align 8
  %memberidx2.i156 = getelementptr inbounds %Token, ptr %66, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i156, align 8
  store i64 2, ptr %65, align 4
  %memberidx1.i.i157 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 2
  store ptr %67, ptr %memberidx1.i.i157, align 8
  %memberidx2.i.i158 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 1
  store ptr %63, ptr %memberidx2.i.i158, align 8
  %memberidx.i.i159 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 2
  %68 = load i64, ptr %memberidx.i.i159, align 4
  %memberidx1.i4.i160 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 3
  %69 = load i64, ptr %memberidx1.i4.i160, align 4
  %.not.i.i161 = icmp slt i64 %68, %69
  br i1 %.not.i.i161, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry20:                                       ; preds = %else
  %70 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %70, ptr noundef nonnull align 8 dereferenceable(12) @62, i64 12, i1 false)
  %71 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %71, align 8
  %memberidx.i.i168 = getelementptr inbounds %string, ptr %71, i64 0, i32 1
  store ptr %70, ptr %memberidx.i.i168, align 8
  %memberidx1.i.i169 = getelementptr inbounds %string, ptr %71, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i169, align 4
  %memberidx2.i.i170 = getelementptr inbounds %string, ptr %71, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i170, align 4
  %memberidx.i171 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i171, align 8
  %73 = call ptr @malloc(i32 24)
  %74 = load ptr, ptr %memberidx, align 8
  %memberidx2.i173 = getelementptr inbounds %Token, ptr %74, i64 0, i32 1
  %75 = load ptr, ptr %memberidx2.i173, align 8
  store i64 2, ptr %73, align 4
  %memberidx1.i.i174 = getelementptr inbounds %FloError, ptr %73, i64 0, i32 2
  store ptr %75, ptr %memberidx1.i.i174, align 8
  %memberidx2.i.i175 = getelementptr inbounds %FloError, ptr %73, i64 0, i32 1
  store ptr %71, ptr %memberidx2.i.i175, align 8
  %memberidx.i.i176 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 2
  %76 = load i64, ptr %memberidx.i.i176, align 4
  %memberidx1.i4.i177 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 3
  %77 = load i64, ptr %memberidx1.i4.i177, align 4
  %.not.i.i178 = icmp slt i64 %76, %77
  br i1 %.not.i.i178, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry23:                                       ; preds = %else
  %78 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %78, ptr noundef nonnull align 8 dereferenceable(12) @63, i64 12, i1 false)
  %79 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %79, align 8
  %memberidx.i.i185 = getelementptr inbounds %string, ptr %79, i64 0, i32 1
  store ptr %78, ptr %memberidx.i.i185, align 8
  %memberidx1.i.i186 = getelementptr inbounds %string, ptr %79, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i186, align 4
  %memberidx2.i.i187 = getelementptr inbounds %string, ptr %79, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i187, align 4
  %memberidx.i188 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %80 = load ptr, ptr %memberidx.i188, align 8
  %81 = call ptr @malloc(i32 24)
  %82 = load ptr, ptr %memberidx, align 8
  %memberidx2.i190 = getelementptr inbounds %Token, ptr %82, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i190, align 8
  store i64 2, ptr %81, align 4
  %memberidx1.i.i191 = getelementptr inbounds %FloError, ptr %81, i64 0, i32 2
  store ptr %83, ptr %memberidx1.i.i191, align 8
  %memberidx2.i.i192 = getelementptr inbounds %FloError, ptr %81, i64 0, i32 1
  store ptr %79, ptr %memberidx2.i.i192, align 8
  %memberidx.i.i193 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 2
  %84 = load i64, ptr %memberidx.i.i193, align 4
  %memberidx1.i4.i194 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 3
  %85 = load i64, ptr %memberidx1.i4.i194, align 4
  %.not.i.i195 = icmp slt i64 %84, %85
  br i1 %.not.i.i195, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry26:                                       ; preds = %else
  %86 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %86, ptr noundef nonnull align 8 dereferenceable(12) @64, i64 12, i1 false)
  %87 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %87, align 8
  %memberidx.i.i202 = getelementptr inbounds %string, ptr %87, i64 0, i32 1
  store ptr %86, ptr %memberidx.i.i202, align 8
  %memberidx1.i.i203 = getelementptr inbounds %string, ptr %87, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i203, align 4
  %memberidx2.i.i204 = getelementptr inbounds %string, ptr %87, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i204, align 4
  %memberidx.i205 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i205, align 8
  %89 = call ptr @malloc(i32 24)
  %90 = load ptr, ptr %memberidx, align 8
  %memberidx2.i207 = getelementptr inbounds %Token, ptr %90, i64 0, i32 1
  %91 = load ptr, ptr %memberidx2.i207, align 8
  store i64 2, ptr %89, align 4
  %memberidx1.i.i208 = getelementptr inbounds %FloError, ptr %89, i64 0, i32 2
  store ptr %91, ptr %memberidx1.i.i208, align 8
  %memberidx2.i.i209 = getelementptr inbounds %FloError, ptr %89, i64 0, i32 1
  store ptr %87, ptr %memberidx2.i.i209, align 8
  %memberidx.i.i210 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 2
  %92 = load i64, ptr %memberidx.i.i210, align 4
  %memberidx1.i4.i211 = getelementptr inbounds %Array_FloError_, ptr %88, i64 0, i32 3
  %93 = load i64, ptr %memberidx1.i4.i211, align 4
  %.not.i.i212 = icmp slt i64 %92, %93
  br i1 %.not.i.i212, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry29:                                       ; preds = %else
  %94 = call ptr @malloc(i32 12)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %94, ptr noundef nonnull align 8 dereferenceable(12) @65, i64 12, i1 false)
  %95 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %95, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %95, i64 0, i32 1
  store ptr %94, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %95, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %95, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i221, align 4
  %memberidx.i222 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %96 = load ptr, ptr %memberidx.i222, align 8
  %97 = call ptr @malloc(i32 24)
  %98 = load ptr, ptr %memberidx, align 8
  %memberidx2.i224 = getelementptr inbounds %Token, ptr %98, i64 0, i32 1
  %99 = load ptr, ptr %memberidx2.i224, align 8
  store i64 2, ptr %97, align 4
  %memberidx1.i.i225 = getelementptr inbounds %FloError, ptr %97, i64 0, i32 2
  store ptr %99, ptr %memberidx1.i.i225, align 8
  %memberidx2.i.i226 = getelementptr inbounds %FloError, ptr %97, i64 0, i32 1
  store ptr %95, ptr %memberidx2.i.i226, align 8
  %memberidx.i.i227 = getelementptr inbounds %Array_FloError_, ptr %96, i64 0, i32 2
  %100 = load i64, ptr %memberidx.i.i227, align 4
  %memberidx1.i4.i228 = getelementptr inbounds %Array_FloError_, ptr %96, i64 0, i32 3
  %101 = load i64, ptr %memberidx1.i4.i228, align 4
  %.not.i.i229 = icmp slt i64 %100, %101
  br i1 %.not.i.i229, label %ifend4.sink.split, label %ifend4.sink.split.sink.split

if.entry32:                                       ; preds = %else
  %102 = call ptr @malloc(i32 13)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(13) %102, ptr noundef nonnull align 8 dereferenceable(13) @66, i64 13, i1 false)
  %103 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %103, align 8
  %memberidx.i.i236 = getelementptr inbounds %string, ptr %103, i64 0, i32 1
  store ptr %102, ptr %memberidx.i.i236, align 8
  %memberidx1.i.i237 = getelementptr inbounds %string, ptr %103, i64 0, i32 2
  store i64 13, ptr %memberidx1.i.i237, align 4
  %memberidx2.i.i238 = getelementptr inbounds %string, ptr %103, i64 0, i32 3
  store i64 13, ptr %memberidx2.i.i238, align 4
  %memberidx.i61 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %104 = load ptr, ptr %memberidx.i61, align 8
  %105 = call ptr @malloc(i32 24)
  %106 = load ptr, ptr %memberidx, align 8
  %memberidx2.i62 = getelementptr inbounds %Token, ptr %106, i64 0, i32 1
  %107 = load ptr, ptr %memberidx2.i62, align 8
  store i64 2, ptr %105, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %105, i64 0, i32 2
  store ptr %107, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %105, i64 0, i32 1
  store ptr %103, ptr %memberidx2.i.i, align 8
  %memberidx.i.i63 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 2
  %108 = load i64, ptr %memberidx.i.i63, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 3
  %109 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %108, %109
  br i1 %.not.i.i, label %ifend4.sink.split, label %ifend4.sink.split.sink.split
}

define internal fastcc ptr @Parser_parse_term_expression(ptr %0) unnamed_addr {
  %2 = call fastcc ptr @Parser_parse_unary_expression_pre(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  switch i64 %4, label %ifend7.i [
    i64 4, label %Parser_is_term_expr_op.exit
    i64 7, label %Parser_is_term_expr_op.exit.fold.split
    i64 10, label %Parser_is_term_expr_op.exit.fold.split30
  ]

ifend7.i:                                         ; preds = %1
  %5 = icmp eq i64 %4, 11
  %spec.select.i = select i1 %5, i64 6, i64 0
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit.fold.split:           ; preds = %1
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit.fold.split30:         ; preds = %1
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit:                      ; preds = %1, %Parser_is_term_expr_op.exit.fold.split30, %Parser_is_term_expr_op.exit.fold.split, %ifend7.i
  %common.ret.op.i = phi i64 [ 3, %1 ], [ %spec.select.i, %ifend7.i ], [ 4, %Parser_is_term_expr_op.exit.fold.split ], [ 5, %Parser_is_term_expr_op.exit.fold.split30 ]
  %6 = icmp ne i64 %common.ret.op.i, 0
  %7 = icmp ne i64 %4, 46
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_is_term_expr_op.exit
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_term_expr_op.exit24
  %unary.0 = phi ptr [ %20, %Parser_is_term_expr_op.exit24 ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_is_term_expr_op.exit24 ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = call fastcc ptr @Parser_parse_unary_expression_pre(ptr nonnull %0)
  %22 = load ptr, ptr %unary.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i15 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i15, align 4
  %memberidx2.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %unary.0, ptr %memberidx2.i16, align 8
  %memberidx3.i17 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i17, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  switch i64 %30, label %ifend7.i23 [
    i64 4, label %Parser_is_term_expr_op.exit24
    i64 7, label %Parser_is_term_expr_op.exit24.fold.split
    i64 10, label %Parser_is_term_expr_op.exit24.fold.split31
  ]

ifend7.i23:                                       ; preds = %Parser_advance.exit
  %31 = icmp eq i64 %30, 11
  %spec.select.i22 = select i1 %31, i64 6, i64 0
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24.fold.split:         ; preds = %Parser_advance.exit
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24.fold.split31:       ; preds = %Parser_advance.exit
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24:                    ; preds = %Parser_advance.exit, %Parser_is_term_expr_op.exit24.fold.split31, %Parser_is_term_expr_op.exit24.fold.split, %ifend7.i23
  %common.ret.op.i19 = phi i64 [ 3, %Parser_advance.exit ], [ %spec.select.i22, %ifend7.i23 ], [ 4, %Parser_is_term_expr_op.exit24.fold.split ], [ 5, %Parser_is_term_expr_op.exit24.fold.split31 ]
  %32 = icmp ne i64 %common.ret.op.i19, 0
  %33 = icmp ne i64 %30, 46
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i27 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i27, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  %38 = and i1 %32, %37
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_is_term_expr_op.exit24, %Parser_is_term_expr_op.exit
  %unary.1 = phi ptr [ %2, %Parser_is_term_expr_op.exit ], [ %20, %Parser_is_term_expr_op.exit24 ]
  ret ptr %unary.1
}

define internal fastcc ptr @Parser_parse_arithmetic_expression(ptr %0) unnamed_addr {
  %2 = call fastcc ptr @Parser_parse_term_expression(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx3.i, align 4
  %7 = icmp eq i64 %6, 0
  %8 = add i64 %4, -5
  %9 = icmp ult i64 %8, 2
  %10 = and i1 %9, %7
  br i1 %10, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %1
  %11 = icmp eq i64 %4, 6
  %12 = icmp eq i64 %4, 5
  %spec.select.i = select i1 %12, i64 2, i64 0
  %common.ret.op.i = select i1 %11, i64 1, i64 %spec.select.i
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_advance.exit
  %term.0 = phi ptr [ %20, %Parser_advance.exit ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_advance.exit ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = call fastcc ptr @Parser_parse_term_expression(ptr nonnull %0)
  %22 = load ptr, ptr %term.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i14 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i14, align 4
  %memberidx2.i15 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %term.0, ptr %memberidx2.i15, align 8
  %memberidx3.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i16, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp eq i64 %30, 6
  %32 = icmp eq i64 %30, 5
  %spec.select.i18 = select i1 %32, i64 2, i64 0
  %common.ret.op.i19 = select i1 %31, i64 1, i64 %spec.select.i18
  %33 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i22 = getelementptr inbounds %Array_FloError_, ptr %33, i64 0, i32 2
  %34 = load i64, ptr %memberidx3.i22, align 4
  %35 = icmp eq i64 %34, 0
  %36 = add i64 %30, -5
  %37 = icmp ult i64 %36, 2
  %38 = and i1 %37, %35
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_advance.exit, %1
  %term.1 = phi ptr [ %2, %1 ], [ %20, %Parser_advance.exit ]
  ret ptr %term.1
}

define internal fastcc ptr @Parser_parse_bitshift_expression(ptr %0) unnamed_addr {
  %2 = call fastcc ptr @Parser_parse_arithmetic_expression(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  switch i64 %4, label %ifend4.i [
    i64 48, label %Parser_is_bitshift_expr_op.exit
    i64 49, label %Parser_is_bitshift_expr_op.exit.fold.split
  ]

ifend4.i:                                         ; preds = %1
  %5 = icmp eq i64 %4, 51
  %spec.select.i = select i1 %5, i64 17, i64 0
  br label %Parser_is_bitshift_expr_op.exit

Parser_is_bitshift_expr_op.exit.fold.split:       ; preds = %1
  br label %Parser_is_bitshift_expr_op.exit

Parser_is_bitshift_expr_op.exit:                  ; preds = %1, %Parser_is_bitshift_expr_op.exit.fold.split, %ifend4.i
  %common.ret.op.i = phi i64 [ 13, %1 ], [ %spec.select.i, %ifend4.i ], [ 14, %Parser_is_bitshift_expr_op.exit.fold.split ]
  %6 = icmp ne i64 %common.ret.op.i, 0
  %7 = icmp ne i64 %4, 46
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_is_bitshift_expr_op.exit
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_bitshift_expr_op.exit23
  %arith.0 = phi ptr [ %20, %Parser_is_bitshift_expr_op.exit23 ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_is_bitshift_expr_op.exit23 ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = call fastcc ptr @Parser_parse_arithmetic_expression(ptr nonnull %0)
  %22 = load ptr, ptr %arith.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i15 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i15, align 4
  %memberidx2.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %arith.0, ptr %memberidx2.i16, align 8
  %memberidx3.i17 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i17, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  switch i64 %30, label %ifend4.i22 [
    i64 48, label %Parser_is_bitshift_expr_op.exit23
    i64 49, label %Parser_is_bitshift_expr_op.exit23.fold.split
  ]

ifend4.i22:                                       ; preds = %Parser_advance.exit
  %31 = icmp eq i64 %30, 51
  %spec.select.i21 = select i1 %31, i64 17, i64 0
  br label %Parser_is_bitshift_expr_op.exit23

Parser_is_bitshift_expr_op.exit23.fold.split:     ; preds = %Parser_advance.exit
  br label %Parser_is_bitshift_expr_op.exit23

Parser_is_bitshift_expr_op.exit23:                ; preds = %Parser_advance.exit, %Parser_is_bitshift_expr_op.exit23.fold.split, %ifend4.i22
  %common.ret.op.i19 = phi i64 [ 13, %Parser_advance.exit ], [ %spec.select.i21, %ifend4.i22 ], [ 14, %Parser_is_bitshift_expr_op.exit23.fold.split ]
  %32 = icmp ne i64 %common.ret.op.i19, 0
  %33 = icmp ne i64 %30, 46
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i26 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i26, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  %38 = and i1 %32, %37
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_is_bitshift_expr_op.exit23, %Parser_is_bitshift_expr_op.exit
  %arith.1 = phi ptr [ %2, %Parser_is_bitshift_expr_op.exit ], [ %20, %Parser_is_bitshift_expr_op.exit23 ]
  ret ptr %arith.1
}

define internal fastcc ptr @Parser_parse_comparasion_expression(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 47
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %while.end, %Parser_advance.exit
  %common.ret.op = phi ptr [ %14, %Parser_advance.exit ], [ %59, %while.end ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp slt i64 %6, %8
  br i1 %9, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry
  %10 = add nsw i64 %6, 1
  store i64 %10, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %12, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i
  %13 = call fastcc ptr @Parser_parse_comparasion_expression(ptr nonnull %0)
  %14 = tail call ptr @malloc(i32 40)
  %15 = load ptr, ptr %13, align 8
  %16 = call ptr @malloc(i32 32)
  %17 = load i64, ptr %5, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %15, i64 0, i32 1
  %18 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i15 = getelementptr inbounds %FloRange, ptr %5, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i15, align 4
  %memberidx3.i16 = getelementptr inbounds %FloRange, ptr %15, i64 0, i32 3
  %20 = load i64, ptr %memberidx3.i16, align 4
  store i64 %17, ptr %16, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 1
  store i64 %18, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 2
  store i64 %19, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 3
  store i64 %20, ptr %memberidx3.i.i, align 4
  %memberidx.i17 = getelementptr inbounds %UnaryExpressionNode, ptr %14, i64 0, i32 3
  store i64 7, ptr %memberidx.i17, align 4
  %memberidx1.i18 = getelementptr inbounds %UnaryExpressionNode, ptr %14, i64 0, i32 4
  store ptr %13, ptr %memberidx1.i18, align 8
  store ptr %16, ptr %14, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %14, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i19 = getelementptr inbounds %ExpressionNode, ptr %14, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i19, align 4
  br label %common.ret

ifend:                                            ; preds = %1
  %bit = alloca ptr, align 8
  %21 = call fastcc ptr @Parser_parse_bitshift_expression(ptr %0)
  store ptr %21, ptr %bit, align 8
  %op = alloca i64, align 8
  %22 = load ptr, ptr %memberidx, align 8
  %23 = load i64, ptr %22, align 4
  switch i64 %23, label %ifend13.i [
    i64 41, label %Parser_is_comp_expr_op.exit
    i64 42, label %Parser_is_comp_expr_op.exit.fold.split
    i64 44, label %Parser_is_comp_expr_op.exit.fold.split54
    i64 43, label %Parser_is_comp_expr_op.exit.fold.split55
    i64 39, label %Parser_is_comp_expr_op.exit.fold.split56
  ]

ifend13.i:                                        ; preds = %ifend
  %24 = icmp eq i64 %23, 40
  %spec.select.i = select i1 %24, i64 12, i64 0
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split:           ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split54:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split55:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split56:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit:                      ; preds = %ifend, %Parser_is_comp_expr_op.exit.fold.split56, %Parser_is_comp_expr_op.exit.fold.split55, %Parser_is_comp_expr_op.exit.fold.split54, %Parser_is_comp_expr_op.exit.fold.split, %ifend13.i
  %common.ret.op.i = phi i64 [ 7, %ifend ], [ %spec.select.i, %ifend13.i ], [ 9, %Parser_is_comp_expr_op.exit.fold.split ], [ 8, %Parser_is_comp_expr_op.exit.fold.split54 ], [ 10, %Parser_is_comp_expr_op.exit.fold.split55 ], [ 11, %Parser_is_comp_expr_op.exit.fold.split56 ]
  store i64 %common.ret.op.i, ptr %op, align 8
  %25 = icmp ne i64 %common.ret.op.i, 0
  %26 = icmp ne i64 %23, 46
  %memberidx2.i22 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %27 = load ptr, ptr %memberidx2.i22, align 8
  %memberidx3.i23 = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx3.i23, align 4
  %29 = icmp eq i64 %28, 0
  %30 = and i1 %26, %29
  %31 = and i1 %25, %30
  br i1 %31, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_is_comp_expr_op.exit
  %memberidx.i24 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %bit.promoted = load ptr, ptr %bit, align 8
  %op.promoted = load i64, ptr %op, align 8
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_comp_expr_op.exit47
  %common.ret.op.i4060 = phi i64 [ %op.promoted, %while.entry.preheader ], [ %common.ret.op.i40, %Parser_is_comp_expr_op.exit47 ]
  %32 = phi ptr [ %bit.promoted, %while.entry.preheader ], [ %40, %Parser_is_comp_expr_op.exit47 ]
  %33 = load i64, ptr %memberidx.i24, align 4
  %34 = load ptr, ptr %0, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx2.i25, align 4
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %if.entry.i29, label %Parser_advance.exit31

if.entry.i29:                                     ; preds = %while.entry
  %37 = add nsw i64 %33, 1
  store i64 %37, ptr %memberidx.i24, align 4
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %34, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i.i27, align 8
  %ptridx.i.i28 = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i.i28, align 8
  store ptr %39, ptr %memberidx, align 8
  br label %Parser_advance.exit31

Parser_advance.exit31:                            ; preds = %while.entry, %if.entry.i29
  %40 = tail call ptr @malloc(i32 48)
  %41 = call fastcc ptr @Parser_parse_bitshift_expression(ptr nonnull %0)
  %42 = load ptr, ptr %32, align 8
  %43 = load ptr, ptr %41, align 8
  %44 = call ptr @malloc(i32 32)
  %45 = load i64, ptr %42, align 4
  %memberidx1.i.i32 = getelementptr inbounds %FloRange, ptr %43, i64 0, i32 1
  %46 = load i64, ptr %memberidx1.i.i32, align 4
  %memberidx2.i.i33 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i.i33, align 4
  %memberidx3.i.i34 = getelementptr inbounds %FloRange, ptr %43, i64 0, i32 3
  %48 = load i64, ptr %memberidx3.i.i34, align 4
  store i64 %45, ptr %44, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 1
  store i64 %46, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 2
  store i64 %47, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 3
  store i64 %48, ptr %memberidx3.i.i.i, align 4
  store ptr %44, ptr %40, align 8
  %memberidx.i.i.i35 = getelementptr inbounds %StatementNode, ptr %40, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i35, align 4
  %memberidx.i.i36 = getelementptr inbounds %ExpressionNode, ptr %40, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i36, align 4
  %memberidx2.i37 = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 3
  store ptr %32, ptr %memberidx2.i37, align 8
  %memberidx3.i38 = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 4
  store i64 %common.ret.op.i4060, ptr %memberidx3.i38, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 5
  store ptr %41, ptr %memberidx4.i, align 8
  %49 = load ptr, ptr %memberidx, align 8
  %50 = load i64, ptr %49, align 4
  switch i64 %50, label %ifend13.i46 [
    i64 41, label %Parser_is_comp_expr_op.exit47
    i64 42, label %Parser_is_comp_expr_op.exit47.fold.split
    i64 44, label %Parser_is_comp_expr_op.exit47.fold.split57
    i64 43, label %Parser_is_comp_expr_op.exit47.fold.split58
    i64 39, label %Parser_is_comp_expr_op.exit47.fold.split59
  ]

ifend13.i46:                                      ; preds = %Parser_advance.exit31
  %51 = icmp eq i64 %50, 40
  %spec.select.i45 = select i1 %51, i64 12, i64 0
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split:         ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split57:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split58:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split59:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47:                    ; preds = %Parser_advance.exit31, %Parser_is_comp_expr_op.exit47.fold.split59, %Parser_is_comp_expr_op.exit47.fold.split58, %Parser_is_comp_expr_op.exit47.fold.split57, %Parser_is_comp_expr_op.exit47.fold.split, %ifend13.i46
  %common.ret.op.i40 = phi i64 [ 7, %Parser_advance.exit31 ], [ %spec.select.i45, %ifend13.i46 ], [ 9, %Parser_is_comp_expr_op.exit47.fold.split ], [ 8, %Parser_is_comp_expr_op.exit47.fold.split57 ], [ 10, %Parser_is_comp_expr_op.exit47.fold.split58 ], [ 11, %Parser_is_comp_expr_op.exit47.fold.split59 ]
  %52 = icmp ne i64 %common.ret.op.i40, 0
  %53 = icmp ne i64 %50, 46
  %54 = load ptr, ptr %memberidx2.i22, align 8
  %memberidx3.i50 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 2
  %55 = load i64, ptr %memberidx3.i50, align 4
  %56 = icmp eq i64 %55, 0
  %57 = and i1 %53, %56
  %58 = and i1 %52, %57
  br i1 %58, label %while.entry, label %while.end.loopexit

while.end.loopexit:                               ; preds = %Parser_is_comp_expr_op.exit47
  store ptr %40, ptr %bit, align 8
  store i64 %common.ret.op.i40, ptr %op, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %Parser_is_comp_expr_op.exit
  %59 = load ptr, ptr %bit, align 8
  br label %common.ret
}

define internal fastcc ptr @Parser_parse_expression(ptr %0) unnamed_addr {
  %2 = call fastcc ptr @Parser_parse_comparasion_expression(ptr %0)
  %memberidx.i.i19.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i.i19.i, align 8
  %4 = load i64, ptr %3, align 4
  %5 = and i64 %4, -2
  %6 = icmp eq i64 %5, 8
  %7 = icmp ne i64 %4, 46
  %memberidx2.i.i20.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i.i21.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i.i21.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.i.i.preheader, label %Parser_parse_bit_expression.exit.i

while.entry.i.i.preheader:                        ; preds = %1
  %13 = icmp eq i64 %4, 9
  %14 = icmp eq i64 %4, 8
  %spec.select.i.i.i = select i1 %14, i64 16, i64 0
  %common.ret.op.i.i.i = select i1 %13, i64 15, i64 %spec.select.i.i.i
  %memberidx.i11.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry.i.i

while.entry.i.i:                                  ; preds = %while.entry.i.i.preheader, %Parser_advance.exit.i35.i
  %cmp.0.i.i = phi ptr [ %22, %Parser_advance.exit.i35.i ], [ %2, %while.entry.i.i.preheader ]
  %op.0.i.i = phi i64 [ %common.ret.op.i19.i.i, %Parser_advance.exit.i35.i ], [ %common.ret.op.i.i.i, %while.entry.i.i.preheader ]
  %15 = load i64, ptr %memberidx.i11.i.i, align 4
  %16 = load ptr, ptr %0, align 8
  %memberidx2.i12.i22.i = getelementptr inbounds %Array_Token_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i12.i22.i, align 4
  %18 = icmp slt i64 %15, %17
  br i1 %18, label %if.entry.i.i26.i, label %Parser_advance.exit.i35.i

if.entry.i.i26.i:                                 ; preds = %while.entry.i.i
  %19 = add nsw i64 %15, 1
  store i64 %19, ptr %memberidx.i11.i.i, align 4
  %memberidx.i.i.i24.i = getelementptr inbounds %Array_Token_, ptr %16, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i.i.i24.i, align 8
  %ptridx.i.i.i25.i = getelementptr inbounds ptr, ptr %20, i64 %19
  %21 = load ptr, ptr %ptridx.i.i.i25.i, align 8
  store ptr %21, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i35.i

Parser_advance.exit.i35.i:                        ; preds = %if.entry.i.i26.i, %while.entry.i.i
  %22 = call ptr @malloc(i32 48)
  %23 = call fastcc ptr @Parser_parse_comparasion_expression(ptr nonnull %0)
  %24 = load ptr, ptr %cmp.0.i.i, align 8
  %25 = load ptr, ptr %23, align 8
  %26 = call ptr @malloc(i32 32)
  %27 = load i64, ptr %24, align 4
  %memberidx1.i.i.i27.i = getelementptr inbounds %FloRange, ptr %25, i64 0, i32 1
  %28 = load i64, ptr %memberidx1.i.i.i27.i, align 4
  %memberidx2.i.i.i28.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  %29 = load i64, ptr %memberidx2.i.i.i28.i, align 4
  %memberidx3.i.i.i29.i = getelementptr inbounds %FloRange, ptr %25, i64 0, i32 3
  %30 = load i64, ptr %memberidx3.i.i.i29.i, align 4
  store i64 %27, ptr %26, align 4
  %memberidx1.i.i.i.i30.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  store i64 %28, ptr %memberidx1.i.i.i.i30.i, align 4
  %memberidx2.i.i.i.i31.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 2
  store i64 %29, ptr %memberidx2.i.i.i.i31.i, align 4
  %memberidx3.i.i.i.i32.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  store i64 %30, ptr %memberidx3.i.i.i.i32.i, align 4
  store ptr %26, ptr %22, align 8
  %memberidx.i.i.i.i33.i = getelementptr inbounds %StatementNode, ptr %22, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i33.i, align 4
  %memberidx.i.i14.i.i = getelementptr inbounds %ExpressionNode, ptr %22, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i14.i.i, align 4
  %memberidx2.i15.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 3
  store ptr %cmp.0.i.i, ptr %memberidx2.i15.i.i, align 8
  %memberidx3.i16.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 4
  store i64 %op.0.i.i, ptr %memberidx3.i16.i.i, align 4
  %memberidx4.i.i34.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 5
  store ptr %23, ptr %memberidx4.i.i34.i, align 8
  %31 = load ptr, ptr %memberidx.i.i19.i, align 8
  %32 = load i64, ptr %31, align 4
  %33 = icmp eq i64 %32, 9
  %34 = icmp eq i64 %32, 8
  %spec.select.i18.i.i = select i1 %34, i64 16, i64 0
  %common.ret.op.i19.i.i = select i1 %33, i64 15, i64 %spec.select.i18.i.i
  %35 = and i64 %32, -2
  %36 = icmp eq i64 %35, 8
  %37 = icmp ne i64 %32, 46
  %38 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i22.i.i = getelementptr inbounds %Array_FloError_, ptr %38, i64 0, i32 2
  %39 = load i64, ptr %memberidx3.i22.i.i, align 4
  %40 = icmp eq i64 %39, 0
  %41 = and i1 %37, %40
  %42 = and i1 %36, %41
  br i1 %42, label %while.entry.i.i, label %Parser_parse_bit_expression.exit.i

Parser_parse_bit_expression.exit.i:               ; preds = %Parser_advance.exit.i35.i, %1
  %cmp.1.i.i = phi ptr [ %2, %1 ], [ %22, %Parser_advance.exit.i35.i ]
  %43 = load ptr, ptr %memberidx.i.i19.i, align 8
  %44 = load i64, ptr %43, align 4
  %45 = icmp eq i64 %44, 52
  %46 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i.i12.i = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 2
  %47 = load i64, ptr %memberidx3.i.i12.i, align 4
  %48 = icmp eq i64 %47, 0
  %49 = and i1 %45, %48
  br i1 %49, label %ifend.i.i, label %Parser_parse_range_expression.exit.i

ifend.i.i:                                        ; preds = %Parser_parse_bit_expression.exit.i
  %memberidx.i8.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %50 = load i64, ptr %memberidx.i8.i.i, align 4
  %51 = load ptr, ptr %0, align 8
  %memberidx2.i9.i.i = getelementptr inbounds %Array_Token_, ptr %51, i64 0, i32 2
  %52 = load i64, ptr %memberidx2.i9.i.i, align 4
  %53 = icmp slt i64 %50, %52
  br i1 %53, label %if.entry.i.i.i, label %Parser_advance.exit.i.i

if.entry.i.i.i:                                   ; preds = %ifend.i.i
  %54 = add nsw i64 %50, 1
  store i64 %54, ptr %memberidx.i8.i.i, align 4
  %memberidx.i.i.i14.i = getelementptr inbounds %Array_Token_, ptr %51, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i.i.i14.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %56, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i.i.i, %ifend.i.i
  %57 = call ptr @malloc(i32 48)
  %58 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %59 = load ptr, ptr %cmp.1.i.i, align 8
  %60 = load ptr, ptr %58, align 8
  %61 = call ptr @malloc(i32 32)
  %62 = load i64, ptr %59, align 4
  %memberidx1.i.i.i15.i = getelementptr inbounds %FloRange, ptr %60, i64 0, i32 1
  %63 = load i64, ptr %memberidx1.i.i.i15.i, align 4
  %memberidx2.i.i.i16.i = getelementptr inbounds %FloRange, ptr %59, i64 0, i32 2
  %64 = load i64, ptr %memberidx2.i.i.i16.i, align 4
  %memberidx3.i.i.i17.i = getelementptr inbounds %FloRange, ptr %60, i64 0, i32 3
  %65 = load i64, ptr %memberidx3.i.i.i17.i, align 4
  store i64 %62, ptr %61, align 4
  %memberidx1.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %61, i64 0, i32 1
  store i64 %63, ptr %memberidx1.i.i.i.i.i, align 4
  %memberidx2.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %61, i64 0, i32 2
  store i64 %64, ptr %memberidx2.i.i.i.i.i, align 4
  %memberidx3.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %61, i64 0, i32 3
  store i64 %65, ptr %memberidx3.i.i.i.i.i, align 4
  store ptr %61, ptr %57, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %StatementNode, ptr %57, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i.i, align 4
  %memberidx.i.i11.i.i = getelementptr inbounds %ExpressionNode, ptr %57, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i11.i.i, align 4
  %memberidx2.i12.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %57, i64 0, i32 3
  store ptr %cmp.1.i.i, ptr %memberidx2.i12.i.i, align 8
  %memberidx3.i13.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %57, i64 0, i32 4
  store i64 31, ptr %memberidx3.i13.i.i, align 4
  %memberidx4.i.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %57, i64 0, i32 5
  store ptr %58, ptr %memberidx4.i.i.i, align 8
  br label %Parser_parse_range_expression.exit.i

Parser_parse_range_expression.exit.i:             ; preds = %Parser_advance.exit.i.i, %Parser_parse_bit_expression.exit.i
  %common.ret.op.i.i = phi ptr [ %57, %Parser_advance.exit.i.i ], [ %cmp.1.i.i, %Parser_parse_bit_expression.exit.i ]
  %66 = load ptr, ptr %memberidx.i.i19.i, align 8
  %67 = load i64, ptr %66, align 4
  %.not.i = icmp eq i64 %67, 85
  br i1 %.not.i, label %ifend.i, label %Parser_parse_typecast_expression.exit

ifend.i:                                          ; preds = %Parser_parse_range_expression.exit.i
  %memberidx.i.i69 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %68 = load i64, ptr %memberidx.i.i69, align 4
  %69 = load ptr, ptr %0, align 8
  %memberidx2.i.i70 = getelementptr inbounds %Array_Token_, ptr %69, i64 0, i32 2
  %70 = load i64, ptr %memberidx2.i.i70, align 4
  %71 = icmp slt i64 %68, %70
  br i1 %71, label %if.entry.i.i74, label %Parser_advance.exit.i82

if.entry.i.i74:                                   ; preds = %ifend.i
  %72 = add nsw i64 %68, 1
  store i64 %72, ptr %memberidx.i.i69, align 4
  %memberidx.i.i.i72 = getelementptr inbounds %Array_Token_, ptr %69, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i.i.i72, align 8
  %ptridx.i.i.i73 = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i.i.i73, align 8
  store ptr %74, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i82

Parser_advance.exit.i82:                          ; preds = %if.entry.i.i74, %ifend.i
  %75 = call ptr @malloc(i32 40)
  %76 = call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %77 = load ptr, ptr %common.ret.op.i.i, align 8
  %78 = load ptr, ptr %76, align 8
  %79 = call ptr @malloc(i32 32)
  %80 = load i64, ptr %77, align 4
  %memberidx1.i.i.i75 = getelementptr inbounds %FloRange, ptr %78, i64 0, i32 1
  %81 = load i64, ptr %memberidx1.i.i.i75, align 4
  %memberidx2.i.i.i76 = getelementptr inbounds %FloRange, ptr %77, i64 0, i32 2
  %82 = load i64, ptr %memberidx2.i.i.i76, align 4
  %memberidx3.i.i.i77 = getelementptr inbounds %FloRange, ptr %78, i64 0, i32 3
  %83 = load i64, ptr %memberidx3.i.i.i77, align 4
  store i64 %80, ptr %79, align 4
  %memberidx1.i.i.i.i78 = getelementptr inbounds %FloRange, ptr %79, i64 0, i32 1
  store i64 %81, ptr %memberidx1.i.i.i.i78, align 4
  %memberidx2.i.i.i.i79 = getelementptr inbounds %FloRange, ptr %79, i64 0, i32 2
  store i64 %82, ptr %memberidx2.i.i.i.i79, align 4
  %memberidx3.i.i.i.i80 = getelementptr inbounds %FloRange, ptr %79, i64 0, i32 3
  store i64 %83, ptr %memberidx3.i.i.i.i80, align 4
  store ptr %79, ptr %75, align 8
  %memberidx.i.i.i.i81 = getelementptr inbounds %StatementNode, ptr %75, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i81, align 4
  %memberidx.i.i6.i = getelementptr inbounds %ExpressionNode, ptr %75, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %TypeCastExpressionNode, ptr %75, i64 0, i32 3
  store ptr %common.ret.op.i.i, ptr %memberidx2.i7.i, align 8
  %memberidx3.i8.i = getelementptr inbounds %TypeCastExpressionNode, ptr %75, i64 0, i32 4
  store ptr %76, ptr %memberidx3.i8.i, align 8
  br label %Parser_parse_typecast_expression.exit

Parser_parse_typecast_expression.exit:            ; preds = %Parser_parse_range_expression.exit.i, %Parser_advance.exit.i82
  %common.ret.op.i68 = phi ptr [ %75, %Parser_advance.exit.i82 ], [ %common.ret.op.i.i, %Parser_parse_range_expression.exit.i ]
  %84 = load ptr, ptr %memberidx.i.i19.i, align 8
  %85 = load i64, ptr %84, align 4
  %86 = icmp eq i64 %85, 36
  %87 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i.i48 = getelementptr inbounds %Array_FloError_, ptr %87, i64 0, i32 2
  %88 = load i64, ptr %memberidx3.i.i48, align 4
  %89 = icmp eq i64 %88, 0
  %90 = and i1 %86, %89
  br i1 %90, label %ifend.i51, label %Parser_parse_ternary_expression.exit

ifend.i51:                                        ; preds = %Parser_parse_typecast_expression.exit
  %memberidx.i10.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %91 = load i64, ptr %memberidx.i10.i, align 4
  %92 = load ptr, ptr %0, align 8
  %memberidx2.i11.i = getelementptr inbounds %Array_Token_, ptr %92, i64 0, i32 2
  %93 = load i64, ptr %memberidx2.i11.i, align 4
  %94 = icmp slt i64 %91, %93
  br i1 %94, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %ifend.i51
  %95 = add nsw i64 %91, 1
  store i64 %95, ptr %memberidx.i10.i, align 4
  %memberidx.i.i.i52 = getelementptr inbounds %Array_Token_, ptr %92, i64 0, i32 1
  %96 = load ptr, ptr %memberidx.i.i.i52, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %96, i64 %95
  %97 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %97, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %ifend.i51
  %98 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %99 = call fastcc ptr @Parser_eat(ptr nonnull %0, i64 1)
  %100 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %101 = call ptr @malloc(i32 48)
  %102 = load ptr, ptr %common.ret.op.i68, align 8
  %103 = load ptr, ptr %100, align 8
  %104 = call ptr @malloc(i32 32)
  %105 = load i64, ptr %102, align 4
  %memberidx1.i.i.i53 = getelementptr inbounds %FloRange, ptr %103, i64 0, i32 1
  %106 = load i64, ptr %memberidx1.i.i.i53, align 4
  %memberidx2.i.i.i54 = getelementptr inbounds %FloRange, ptr %102, i64 0, i32 2
  %107 = load i64, ptr %memberidx2.i.i.i54, align 4
  %memberidx3.i.i.i55 = getelementptr inbounds %FloRange, ptr %103, i64 0, i32 3
  %108 = load i64, ptr %memberidx3.i.i.i55, align 4
  store i64 %105, ptr %104, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %104, i64 0, i32 1
  store i64 %106, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %FloRange, ptr %104, i64 0, i32 2
  store i64 %107, ptr %memberidx2.i.i.i.i, align 4
  %memberidx3.i.i.i.i = getelementptr inbounds %FloRange, ptr %104, i64 0, i32 3
  store i64 %108, ptr %memberidx3.i.i.i.i, align 4
  store ptr %104, ptr %101, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %101, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i13.i = getelementptr inbounds %ExpressionNode, ptr %101, i64 0, i32 2
  store i64 15, ptr %memberidx.i.i13.i, align 4
  %memberidx2.i14.i = getelementptr inbounds %TernaryExpressionNode, ptr %101, i64 0, i32 3
  store ptr %common.ret.op.i68, ptr %memberidx2.i14.i, align 8
  %memberidx3.i15.i = getelementptr inbounds %TernaryExpressionNode, ptr %101, i64 0, i32 4
  store ptr %98, ptr %memberidx3.i15.i, align 8
  %memberidx4.i.i = getelementptr inbounds %TernaryExpressionNode, ptr %101, i64 0, i32 5
  store ptr %100, ptr %memberidx4.i.i, align 8
  %109 = load ptr, ptr %98, align 8
  %110 = load ptr, ptr %100, align 8
  %111 = call ptr @malloc(i32 32)
  %112 = load i64, ptr %109, align 4
  %memberidx1.i15.i.i = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 1
  %113 = load i64, ptr %memberidx1.i15.i.i, align 4
  %memberidx2.i16.i.i = getelementptr inbounds %FloRange, ptr %109, i64 0, i32 2
  %114 = load i64, ptr %memberidx2.i16.i.i, align 4
  %memberidx3.i17.i.i = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 3
  %115 = load i64, ptr %memberidx3.i17.i.i, align 4
  store i64 %112, ptr %111, align 4
  %memberidx1.i.i18.i.i = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 1
  store i64 %113, ptr %memberidx1.i.i18.i.i, align 4
  %memberidx2.i.i19.i.i = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 2
  store i64 %114, ptr %memberidx2.i.i19.i.i, align 4
  %memberidx3.i.i20.i.i = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 3
  store i64 %115, ptr %memberidx3.i.i20.i.i, align 4
  store ptr %111, ptr %101, align 8
  br label %Parser_parse_ternary_expression.exit

Parser_parse_ternary_expression.exit:             ; preds = %Parser_parse_typecast_expression.exit, %Parser_advance.exit.i
  %common.ret.op.i49 = phi ptr [ %101, %Parser_advance.exit.i ], [ %common.ret.op.i68, %Parser_parse_typecast_expression.exit ]
  %116 = load ptr, ptr %memberidx.i.i19.i, align 8
  %117 = load i64, ptr %116, align 4
  %118 = icmp eq i64 %117, 80
  %119 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %119, i64 0, i32 2
  %120 = load i64, ptr %memberidx3.i, align 4
  %121 = icmp eq i64 %120, 0
  %122 = and i1 %118, %121
  br i1 %122, label %if.entry, label %ifend

common.ret.sink.split:                            ; preds = %Parser_advance.exit, %Parser_advance.exit33
  %.sink87 = phi ptr [ %151, %Parser_advance.exit33 ], [ %130, %Parser_advance.exit ]
  %common.ret.op.i.sink = phi i64 [ %common.ret.op.i, %Parser_advance.exit33 ], [ 18, %Parser_advance.exit ]
  %.sink = phi ptr [ %152, %Parser_advance.exit33 ], [ %131, %Parser_advance.exit ]
  %memberidx.i.i.i40 = getelementptr inbounds %StatementNode, ptr %.sink87, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i40, align 4
  %memberidx.i.i41 = getelementptr inbounds %ExpressionNode, ptr %.sink87, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i41, align 4
  %memberidx2.i42 = getelementptr inbounds %BinaryExpressionNode, ptr %.sink87, i64 0, i32 3
  store ptr %common.ret.op.i49, ptr %memberidx2.i42, align 8
  %memberidx3.i43 = getelementptr inbounds %BinaryExpressionNode, ptr %.sink87, i64 0, i32 4
  store i64 %common.ret.op.i.sink, ptr %memberidx3.i43, align 4
  %memberidx4.i44 = getelementptr inbounds %BinaryExpressionNode, ptr %.sink87, i64 0, i32 5
  store ptr %.sink, ptr %memberidx4.i44, align 8
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %Parser_is_assign_op.exit
  %common.ret.op = phi ptr [ %common.ret.op.i49, %Parser_is_assign_op.exit ], [ %.sink87, %common.ret.sink.split ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %Parser_parse_ternary_expression.exit
  %memberidx.i16 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %123 = load i64, ptr %memberidx.i16, align 4
  %124 = load ptr, ptr %0, align 8
  %memberidx2.i17 = getelementptr inbounds %Array_Token_, ptr %124, i64 0, i32 2
  %125 = load i64, ptr %memberidx2.i17, align 4
  %126 = icmp slt i64 %123, %125
  br i1 %126, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry
  %127 = add nsw i64 %123, 1
  store i64 %127, ptr %memberidx.i16, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %124, i64 0, i32 1
  %128 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %128, i64 %127
  %129 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %129, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i
  %130 = tail call ptr @malloc(i32 48)
  %131 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %132 = load ptr, ptr %common.ret.op.i49, align 8
  %133 = load ptr, ptr %131, align 8
  %134 = call ptr @malloc(i32 32)
  %135 = load i64, ptr %132, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %133, i64 0, i32 1
  %136 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %132, i64 0, i32 2
  %137 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %133, i64 0, i32 3
  %138 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %135, ptr %134, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %134, i64 0, i32 1
  store i64 %136, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %134, i64 0, i32 2
  store i64 %137, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %134, i64 0, i32 3
  store i64 %138, ptr %memberidx3.i.i.i, align 4
  store ptr %134, ptr %130, align 8
  br label %common.ret.sink.split

ifend:                                            ; preds = %Parser_parse_ternary_expression.exit
  switch i64 %117, label %ifend51.i [
    i64 38, label %Parser_is_assign_op.exit
    i64 12, label %Parser_is_assign_op.exit.fold.split
    i64 13, label %Parser_is_assign_op.exit.fold.split59
    i64 14, label %Parser_is_assign_op.exit.fold.split60
    i64 15, label %Parser_is_assign_op.exit.fold.split61
    i64 16, label %Parser_is_assign_op.exit.fold.split62
    i64 17, label %Parser_is_assign_op.exit.fold.split63
    i64 18, label %Parser_is_assign_op.exit.fold.split64
    i64 19, label %Parser_is_assign_op.exit.fold.split65
    i64 20, label %Parser_is_assign_op.exit.fold.split66
    i64 22, label %Parser_is_assign_op.exit.fold.split67
  ]

ifend51.i:                                        ; preds = %ifend
  %139 = icmp eq i64 %117, 21
  %spec.select.i = select i1 %139, i64 30, i64 0
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split:              ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split59:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split60:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split61:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split62:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split63:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split64:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split65:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split66:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split67:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit:                         ; preds = %ifend, %Parser_is_assign_op.exit.fold.split67, %Parser_is_assign_op.exit.fold.split66, %Parser_is_assign_op.exit.fold.split65, %Parser_is_assign_op.exit.fold.split64, %Parser_is_assign_op.exit.fold.split63, %Parser_is_assign_op.exit.fold.split62, %Parser_is_assign_op.exit.fold.split61, %Parser_is_assign_op.exit.fold.split60, %Parser_is_assign_op.exit.fold.split59, %Parser_is_assign_op.exit.fold.split, %ifend51.i
  %common.ret.op.i = phi i64 [ 19, %ifend ], [ %spec.select.i, %ifend51.i ], [ 22, %Parser_is_assign_op.exit.fold.split ], [ 21, %Parser_is_assign_op.exit.fold.split59 ], [ 20, %Parser_is_assign_op.exit.fold.split60 ], [ 23, %Parser_is_assign_op.exit.fold.split61 ], [ 24, %Parser_is_assign_op.exit.fold.split62 ], [ 25, %Parser_is_assign_op.exit.fold.split63 ], [ 26, %Parser_is_assign_op.exit.fold.split64 ], [ 27, %Parser_is_assign_op.exit.fold.split65 ], [ 28, %Parser_is_assign_op.exit.fold.split66 ], [ 29, %Parser_is_assign_op.exit.fold.split67 ]
  %140 = icmp ne i64 %common.ret.op.i, 0
  %141 = icmp ne i64 %117, 46
  %142 = and i1 %141, %121
  %143 = and i1 %142, %140
  br i1 %143, label %ifend4, label %common.ret

ifend4:                                           ; preds = %Parser_is_assign_op.exit
  %memberidx.i26 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %144 = load i64, ptr %memberidx.i26, align 4
  %145 = load ptr, ptr %0, align 8
  %memberidx2.i27 = getelementptr inbounds %Array_Token_, ptr %145, i64 0, i32 2
  %146 = load i64, ptr %memberidx2.i27, align 4
  %147 = icmp slt i64 %144, %146
  br i1 %147, label %if.entry.i31, label %Parser_advance.exit33

if.entry.i31:                                     ; preds = %ifend4
  %148 = add nsw i64 %144, 1
  store i64 %148, ptr %memberidx.i26, align 4
  %memberidx.i.i29 = getelementptr inbounds %Array_Token_, ptr %145, i64 0, i32 1
  %149 = load ptr, ptr %memberidx.i.i29, align 8
  %ptridx.i.i30 = getelementptr inbounds ptr, ptr %149, i64 %148
  %150 = load ptr, ptr %ptridx.i.i30, align 8
  store ptr %150, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit33

Parser_advance.exit33:                            ; preds = %ifend4, %if.entry.i31
  %151 = tail call ptr @malloc(i32 48)
  %152 = call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %153 = load ptr, ptr %common.ret.op.i49, align 8
  %154 = load ptr, ptr %152, align 8
  %155 = call ptr @malloc(i32 32)
  %156 = load i64, ptr %153, align 4
  %memberidx1.i.i34 = getelementptr inbounds %FloRange, ptr %154, i64 0, i32 1
  %157 = load i64, ptr %memberidx1.i.i34, align 4
  %memberidx2.i.i35 = getelementptr inbounds %FloRange, ptr %153, i64 0, i32 2
  %158 = load i64, ptr %memberidx2.i.i35, align 4
  %memberidx3.i.i36 = getelementptr inbounds %FloRange, ptr %154, i64 0, i32 3
  %159 = load i64, ptr %memberidx3.i.i36, align 4
  store i64 %156, ptr %155, align 4
  %memberidx1.i.i.i37 = getelementptr inbounds %FloRange, ptr %155, i64 0, i32 1
  store i64 %157, ptr %memberidx1.i.i.i37, align 4
  %memberidx2.i.i.i38 = getelementptr inbounds %FloRange, ptr %155, i64 0, i32 2
  store i64 %158, ptr %memberidx2.i.i.i38, align 4
  %memberidx3.i.i.i39 = getelementptr inbounds %FloRange, ptr %155, i64 0, i32 3
  store i64 %159, ptr %memberidx3.i.i.i39, align 4
  store ptr %155, ptr %151, align 8
  br label %common.ret.sink.split
}

define internal fastcc void @Map_string_VarId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_VarId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_VarId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_VarId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_VarId_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_VarId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

; Function Attrs: mustprogress nounwind willreturn
define internal fastcc void @Scope___del__(ptr nocapture readonly %0) unnamed_addr #11 {
  %2 = load ptr, ptr %0, align 8
  tail call void @free(ptr %2)
  %memberidx1 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load ptr, ptr %3, align 8
  call void @free(ptr %4)
  tail call void @free(ptr %3)
  %memberidx2 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %memberidx2, align 8
  %6 = load ptr, ptr %5, align 8
  call void @free(ptr %6)
  tail call void @free(ptr %5)
  %memberidx3 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 3
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = load ptr, ptr %7, align 8
  call void @free(ptr %8)
  tail call void @free(ptr %7)
  %memberidx4 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 4
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = load ptr, ptr %9, align 8
  call void @free(ptr %10)
  tail call void @free(ptr %9)
  %memberidx5 = getelementptr inbounds %Scope, ptr %0, i64 0, i32 6
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = load ptr, ptr %11, align 8
  call void @free(ptr %12)
  tail call void @free(ptr %11)
  ret void
}

define internal fastcc void @Map_string_EnumId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_EnumId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_EnumId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_EnumId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_EnumId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_EnumId_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_EnumId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

define internal fastcc void @Map_string_Type__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_Type_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_Type____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_Type____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_Type__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_Type__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_Type_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_Type__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

define internal fastcc void @Map_string_ClassId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_ClassId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_ClassId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_ClassId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_ClassId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_ClassId_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_ClassId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Scope__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Scope__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_VarDeclaration__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_VarDeclaration__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Var__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Var__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ConstDeclaration__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ConstDeclaration__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc void @Map_string_PropId__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_PropId_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_PropId____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_PropId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_PropId__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_EnumField__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Enum__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Enum__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Const__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Const__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_FunctionArg__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FunctionArg__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Statement__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Statement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Type__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Type__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ClassMethod__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassMethod__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_ClassField__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Class__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Class__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Function__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Function__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Module__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Module__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @TypeChecker_check_module(ptr %0, ptr nocapture readonly %1, ptr %2) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 8
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %3 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = tail call ptr @malloc(i32 88)
  %memberidx.i188 = getelementptr inbounds %Module, ptr %5, i64 0, i32 1
  store ptr %2, ptr %memberidx.i188, align 8
  %memberidx1.i189 = getelementptr inbounds %Module, ptr %5, i64 0, i32 5
  %6 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Function_, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 1
  %7 = call ptr @malloc(i32 64)
  store ptr %7, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %6, ptr %memberidx1.i189, align 8
  %memberidx4.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 2
  %8 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Var_, ptr %8, align 8
  %memberidx.i33.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i33.i, align 4
  %memberidx1.i34.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i34.i, align 4
  %memberidx2.i35.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 1
  %9 = call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i35.i, align 8
  store i64 0, ptr %memberidx.i33.i, align 4
  store ptr %8, ptr %memberidx4.i, align 8
  %memberidx7.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 4
  %10 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Class_, ptr %10, align 8
  %memberidx.i36.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 2
  store i64 0, ptr %memberidx.i36.i, align 4
  %memberidx1.i37.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 3
  store i64 8, ptr %memberidx1.i37.i, align 4
  %memberidx2.i38.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 1
  %11 = call ptr @malloc(i32 64)
  store ptr %11, ptr %memberidx2.i38.i, align 8
  store i64 0, ptr %memberidx.i36.i, align 4
  store ptr %10, ptr %memberidx7.i, align 8
  %memberidx10.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 7
  %12 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Enum_, ptr %12, align 8
  %memberidx.i39.i = getelementptr inbounds %Array_Enum_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx.i39.i, align 4
  %memberidx1.i40.i = getelementptr inbounds %Array_Enum_, ptr %12, i64 0, i32 3
  store i64 8, ptr %memberidx1.i40.i, align 4
  %memberidx2.i41.i = getelementptr inbounds %Array_Enum_, ptr %12, i64 0, i32 1
  %13 = call ptr @malloc(i32 64)
  store ptr %13, ptr %memberidx2.i41.i, align 8
  store i64 0, ptr %memberidx.i39.i, align 4
  store ptr %12, ptr %memberidx10.i, align 8
  %memberidx13.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 8
  %14 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Scope_, ptr %14, align 8
  %memberidx.i42.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 2
  store i64 0, ptr %memberidx.i42.i, align 4
  %memberidx1.i43.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 3
  store i64 8, ptr %memberidx1.i43.i, align 4
  %memberidx2.i44.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 1
  %15 = call ptr @malloc(i32 64)
  store ptr %15, ptr %memberidx2.i44.i, align 8
  store i64 0, ptr %memberidx.i42.i, align 4
  store ptr %14, ptr %memberidx13.i, align 8
  %memberidx16.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 9
  %16 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ConstDeclaration_, ptr %16, align 8
  %memberidx.i45.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %16, i64 0, i32 2
  store i64 0, ptr %memberidx.i45.i, align 4
  %memberidx1.i46.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %16, i64 0, i32 3
  store i64 8, ptr %memberidx1.i46.i, align 4
  %memberidx2.i47.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %16, i64 0, i32 1
  %17 = call ptr @malloc(i32 64)
  store ptr %17, ptr %memberidx2.i47.i, align 8
  store i64 0, ptr %memberidx.i45.i, align 4
  store ptr %16, ptr %memberidx16.i, align 8
  %memberidx19.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 10
  %18 = call ptr @malloc(i32 32)
  store ptr @VTableArray_VarDeclaration_, ptr %18, align 8
  %memberidx.i48.i = getelementptr inbounds %Array_VarDeclaration_, ptr %18, i64 0, i32 2
  store i64 0, ptr %memberidx.i48.i, align 4
  %memberidx1.i49.i = getelementptr inbounds %Array_VarDeclaration_, ptr %18, i64 0, i32 3
  store i64 8, ptr %memberidx1.i49.i, align 4
  %memberidx2.i50.i = getelementptr inbounds %Array_VarDeclaration_, ptr %18, i64 0, i32 1
  %19 = call ptr @malloc(i32 64)
  store ptr %19, ptr %memberidx2.i50.i, align 8
  store i64 0, ptr %memberidx.i48.i, align 4
  store ptr %18, ptr %memberidx19.i, align 8
  %memberidx22.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 3
  %20 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Const_, ptr %20, align 8
  %memberidx.i51.i = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 2
  store i64 0, ptr %memberidx.i51.i, align 4
  %memberidx1.i52.i = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 3
  store i64 8, ptr %memberidx1.i52.i, align 4
  %memberidx2.i53.i = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 1
  %21 = call ptr @malloc(i32 64)
  store ptr %21, ptr %memberidx2.i53.i, align 8
  store i64 0, ptr %memberidx.i51.i, align 4
  store ptr %20, ptr %memberidx22.i, align 8
  %22 = load ptr, ptr %0, align 8
  %memberidx5 = getelementptr inbounds %Program, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_Module_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx6, align 4
  store i64 %24, ptr %memberidx1, align 4
  %25 = load ptr, ptr %memberidx5, align 8
  %memberidx.i190 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 2
  %26 = load i64, ptr %memberidx.i190, align 4
  %memberidx1.i191 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 3
  %27 = load i64, ptr %memberidx1.i191, align 4
  %.not.i = icmp slt i64 %26, %27
  br i1 %.not.i, label %Array_Module____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %for.entry
  %28 = shl i64 %27, 1
  store i64 %28, ptr %memberidx1.i191, align 4
  %memberidx2.i.i193 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i193, align 8
  %30 = shl i64 %27, 4
  %31 = call ptr @realloc(ptr %29, i64 %30)
  store ptr %31, ptr %memberidx2.i.i193, align 8
  br label %Array_Module____sl__.exit

Array_Module____sl__.exit:                        ; preds = %for.entry, %if.entry.i
  %32 = load i64, ptr %memberidx.i190, align 4
  %33 = add nsw i64 %32, 1
  store i64 %33, ptr %memberidx.i190, align 4
  %memberidx4.i194 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 1
  %34 = load ptr, ptr %memberidx4.i194, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %34, i64 %32
  store ptr %5, ptr %ptridx.i, align 8
  %35 = call fastcc ptr @TypeChecker_create_scope(ptr nonnull %0)
  %memberidx9 = getelementptr inbounds %Module, ptr %5, i64 0, i32 6
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %memberidx9, align 8
  %memberidx11 = getelementptr inbounds %Scope, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx11, align 8
  %38 = call ptr @malloc(i32 4)
  store i32 1702195828, ptr %38, align 8
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i195 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i195, align 8
  %memberidx1.i.i196 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i196, align 4
  %memberidx2.i.i197 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i197, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %37, ptr nonnull %39, ptr null)
  %40 = load ptr, ptr %memberidx11, align 8
  %41 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %41, ptr noundef nonnull align 8 dereferenceable(5) @84, i64 5, i1 false)
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i198 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i198, align 8
  %memberidx1.i.i199 = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i199, align 4
  %memberidx2.i.i200 = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i200, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %40, ptr nonnull %42, ptr null)
  %43 = load ptr, ptr %memberidx11, align 8
  %44 = call ptr @malloc(i32 4)
  store i32 1819047278, ptr %44, align 8
  %45 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i.i201 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i.i201, align 8
  %memberidx1.i.i202 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i202, align 4
  %memberidx2.i.i203 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i203, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %43, ptr nonnull %45, ptr null)
  %46 = load ptr, ptr %35, align 8
  store ptr %46, ptr %memberidx2, align 8
  %memberidx17 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %memberidx18 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 3
  %memberidx19 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %memberidx17, i8 0, i64 24, i1 false)
  %47 = load ptr, ptr %memberidx19, align 8
  %48 = call ptr @malloc(i32 25)
  %memberidx.i204 = getelementptr inbounds %Array_ImportNode_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i204, align 8
  %memberidx1.i205 = getelementptr inbounds %Array_ImportNode_, ptr %47, i64 0, i32 2
  %50 = load i64, ptr %memberidx1.i205, align 4
  store i1 false, ptr %48, align 1
  %memberidx1.i.i206 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %48, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i206, align 4
  %memberidx2.i.i207 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %48, i64 0, i32 3
  store ptr %49, ptr %memberidx2.i.i207, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %48, i64 0, i32 2
  store i64 %50, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i206, align 4
  %51 = icmp slt i64 %50, 1
  br i1 %51, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %Array_Module____sl__.exit
  %memberidx.i215 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %module_import.0435469 = load ptr, ptr %49, align 8
  call fastcc void @TypeChecker_check_module_import(ptr nonnull %0, ptr %module_import.0435469)
  %52 = load ptr, ptr %memberidx.i215, align 8
  %memberidx1.i216470 = getelementptr inbounds %Compiler, ptr %52, i64 0, i32 6
  %53 = load ptr, ptr %memberidx1.i216470, align 8
  %memberidx2.i217471 = getelementptr inbounds %Array_FloError_, ptr %53, i64 0, i32 2
  %54 = load i64, ptr %memberidx2.i217471, align 4
  %55 = icmp sgt i64 %54, 0
  br i1 %55, label %common.ret.loopexit, label %ifend.preheader

ifend.preheader:                                  ; preds = %for.body.lr.ph
  %memberidx1.i.i206.promoted = load i64, ptr %memberidx1.i.i206, align 4
  br label %ifend

for.body:                                         ; preds = %ifend
  %56 = load ptr, ptr %memberidx2.i.i207, align 8
  %ptridx.i229 = getelementptr inbounds ptr, ptr %56, i64 %66
  %module_import.0435 = load ptr, ptr %ptridx.i229, align 8
  call fastcc void @TypeChecker_check_module_import(ptr nonnull %0, ptr %module_import.0435)
  %57 = load ptr, ptr %memberidx.i215, align 8
  %memberidx1.i216 = getelementptr inbounds %Compiler, ptr %57, i64 0, i32 6
  %58 = load ptr, ptr %memberidx1.i216, align 8
  %memberidx2.i217 = getelementptr inbounds %Array_FloError_, ptr %58, i64 0, i32 2
  %59 = load i64, ptr %memberidx2.i217, align 4
  %60 = icmp sgt i64 %59, 0
  br i1 %60, label %common.ret.loopexit.loopexit, label %ifend

for.end.loopexit:                                 ; preds = %ifend
  store i64 %67, ptr %memberidx1.i.i206, align 4
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %Array_Module____sl__.exit
  %storemerge397.lcssa = phi i1 [ %51, %Array_Module____sl__.exit ], [ %69, %for.end.loopexit ]
  store i1 %storemerge397.lcssa, ptr %48, align 1
  tail call void @free(ptr nonnull %48)
  %memberidx23 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 2
  %61 = load ptr, ptr %memberidx23, align 8
  %62 = call ptr @malloc(i32 25)
  %memberidx.i218 = getelementptr inbounds %Array_EnumNode_, ptr %61, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i218, align 8
  %memberidx1.i219 = getelementptr inbounds %Array_EnumNode_, ptr %61, i64 0, i32 2
  %64 = load i64, ptr %memberidx1.i219, align 4
  store i1 false, ptr %62, align 1
  %memberidx1.i.i220 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %62, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %62, i64 0, i32 3
  store ptr %63, ptr %memberidx2.i.i221, align 8
  %memberidx3.i.i222 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %62, i64 0, i32 2
  store i64 %64, ptr %memberidx3.i.i222, align 4
  store i64 1, ptr %memberidx1.i.i220, align 4
  %65 = icmp slt i64 %64, 1
  br i1 %65, label %for.end27, label %for.body25

common.ret.loopexit.loopexit:                     ; preds = %for.body
  store i64 %67, ptr %memberidx1.i.i206, align 4
  br label %common.ret.loopexit

common.ret.loopexit:                              ; preds = %common.ret.loopexit.loopexit, %for.body.lr.ph
  %storemerge397434.lcssa = phi i1 [ %51, %for.body.lr.ph ], [ %69, %common.ret.loopexit.loopexit ]
  store i1 %storemerge397434.lcssa, ptr %48, align 1
  br label %common.ret

common.ret:                                       ; preds = %common.ret.loopexit, %ifend118, %for.end81, %for.end35, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %for.end35 ], [ null, %for.end81 ], [ %spec.select, %ifend118 ], [ null, %common.ret.loopexit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %ifend.preheader, %for.body
  %66 = phi i64 [ %memberidx1.i.i206.promoted, %ifend.preheader ], [ %67, %for.body ]
  %67 = add nsw i64 %66, 1
  %68 = load i64, ptr %memberidx3.i.i, align 4
  %69 = icmp sge i64 %66, %68
  br i1 %69, label %for.end.loopexit, label %for.body

for.body25:                                       ; preds = %for.end, %for.body25
  %storemerge430.in = phi ptr [ %ptridx.i233, %for.body25 ], [ %63, %for.end ]
  %storemerge430 = load ptr, ptr %storemerge430.in, align 8
  call fastcc void @TypeChecker_declare_enum_within_module(ptr nonnull %0, ptr %storemerge430)
  %70 = load i64, ptr %memberidx1.i.i220, align 4
  %71 = add nsw i64 %70, 1
  store i64 %71, ptr %memberidx1.i.i220, align 4
  %72 = load ptr, ptr %memberidx2.i.i221, align 8
  %ptridx.i233 = getelementptr inbounds ptr, ptr %72, i64 %70
  %73 = load i64, ptr %memberidx3.i.i222, align 4
  %74 = icmp sge i64 %70, %73
  br i1 %74, label %for.end27, label %for.body25

for.end27:                                        ; preds = %for.body25, %for.end
  %storemerge398.lcssa = phi i1 [ %65, %for.end ], [ %74, %for.body25 ]
  store i1 %storemerge398.lcssa, ptr %62, align 1
  tail call void @free(ptr nonnull %62)
  %memberidx31 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 1
  %75 = load ptr, ptr %memberidx31, align 8
  %76 = call ptr @malloc(i32 25)
  %memberidx.i235 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %75, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i235, align 8
  %memberidx1.i236 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %75, i64 0, i32 2
  %78 = load i64, ptr %memberidx1.i236, align 4
  store i1 false, ptr %76, align 1
  %memberidx1.i.i237 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %76, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i237, align 4
  %memberidx2.i.i238 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %76, i64 0, i32 3
  store ptr %77, ptr %memberidx2.i.i238, align 8
  %memberidx3.i.i239 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %76, i64 0, i32 2
  store i64 %78, ptr %memberidx3.i.i239, align 4
  store i64 1, ptr %memberidx1.i.i237, align 4
  %79 = icmp slt i64 %78, 1
  br i1 %79, label %for.end35, label %for.body33

for.body33:                                       ; preds = %for.end27, %for.body33
  %storemerge180427.in = phi ptr [ %ptridx.i246, %for.body33 ], [ %77, %for.end27 ]
  %storemerge180427 = load ptr, ptr %storemerge180427.in, align 8
  call fastcc void @TypeChecker_declare_class_within_module(ptr nonnull %0, ptr %storemerge180427)
  %80 = load i64, ptr %memberidx1.i.i237, align 4
  %81 = add nsw i64 %80, 1
  store i64 %81, ptr %memberidx1.i.i237, align 4
  %82 = load ptr, ptr %memberidx2.i.i238, align 8
  %ptridx.i246 = getelementptr inbounds ptr, ptr %82, i64 %80
  %83 = load i64, ptr %memberidx3.i.i239, align 4
  %84 = icmp sge i64 %80, %83
  br i1 %84, label %for.end35, label %for.body33

for.end35:                                        ; preds = %for.body33, %for.end27
  %storemerge399.lcssa = phi i1 [ %79, %for.end27 ], [ %84, %for.body33 ]
  store i1 %storemerge399.lcssa, ptr %76, align 1
  tail call void @free(ptr nonnull %76)
  %memberidx.i248 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %85 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i249 = getelementptr inbounds %Compiler, ptr %85, i64 0, i32 6
  %86 = load ptr, ptr %memberidx1.i249, align 8
  %memberidx2.i250 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 2
  %87 = load i64, ptr %memberidx2.i250, align 4
  %88 = icmp sgt i64 %87, 0
  br i1 %88, label %common.ret, label %for.entry40

for.entry40:                                      ; preds = %for.end35
  %memberidx42 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 6
  %89 = load ptr, ptr %memberidx42, align 8
  %90 = call ptr @malloc(i32 25)
  %memberidx.i251 = getelementptr inbounds %Array_TypeAliasNode_, ptr %89, i64 0, i32 1
  %91 = load ptr, ptr %memberidx.i251, align 8
  %memberidx1.i252 = getelementptr inbounds %Array_TypeAliasNode_, ptr %89, i64 0, i32 2
  %92 = load i64, ptr %memberidx1.i252, align 4
  store i1 false, ptr %90, align 1
  %memberidx1.i.i253 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %90, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i253, align 4
  %memberidx2.i.i254 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %90, i64 0, i32 3
  store ptr %91, ptr %memberidx2.i.i254, align 8
  %memberidx3.i.i255 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %90, i64 0, i32 2
  store i64 %92, ptr %memberidx3.i.i255, align 4
  store i64 1, ptr %memberidx1.i.i253, align 4
  %93 = icmp slt i64 %92, 1
  br i1 %93, label %for.end46, label %for.body44.lr.ph

for.body44.lr.ph:                                 ; preds = %for.entry40
  %memberidx58 = getelementptr inbounds %Scope, ptr %35, i64 0, i32 6
  %storemerge181424463 = load ptr, ptr %91, align 8
  %memberidx48464 = getelementptr inbounds %TypeAliasNode, ptr %storemerge181424463, i64 0, i32 1
  %94 = load ptr, ptr %memberidx48464, align 8
  %95 = call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr %94)
  %96 = load ptr, ptr %storemerge181424463, align 8
  %memberidx50465 = getelementptr inbounds %IdentifierToken, ptr %96, i64 0, i32 2
  %97 = load ptr, ptr %memberidx50465, align 8
  %98 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %97)
  %99 = load i64, ptr %98, align 4
  %.not466 = icmp eq i64 %99, 20
  br i1 %.not466, label %ifend54, label %if.entry52

for.body44:                                       ; preds = %ifend54
  %100 = load ptr, ptr %memberidx2.i.i254, align 8
  %ptridx.i280 = getelementptr inbounds ptr, ptr %100, i64 %136
  %storemerge181424 = load ptr, ptr %ptridx.i280, align 8
  %memberidx48 = getelementptr inbounds %TypeAliasNode, ptr %storemerge181424, i64 0, i32 1
  %101 = load ptr, ptr %memberidx48, align 8
  %102 = call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr %101)
  %103 = load ptr, ptr %storemerge181424, align 8
  %memberidx50 = getelementptr inbounds %IdentifierToken, ptr %103, i64 0, i32 2
  %104 = load ptr, ptr %memberidx50, align 8
  %105 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %104)
  %106 = load i64, ptr %105, align 4
  %.not = icmp eq i64 %106, 20
  br i1 %.not, label %ifend54, label %if.entry52

for.end46:                                        ; preds = %ifend54, %for.entry40
  %storemerge400.lcssa = phi i1 [ %93, %for.entry40 ], [ %139, %ifend54 ]
  store i1 %storemerge400.lcssa, ptr %90, align 1
  tail call void @free(ptr nonnull %90)
  %memberidx61 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 4
  %107 = load ptr, ptr %memberidx61, align 8
  %108 = call ptr @malloc(i32 25)
  %memberidx.i260 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %memberidx.i260, align 8
  %memberidx1.i261 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %107, i64 0, i32 2
  %110 = load i64, ptr %memberidx1.i261, align 4
  store i1 false, ptr %108, align 1
  %memberidx1.i.i262 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %108, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i262, align 4
  %memberidx2.i.i263 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %108, i64 0, i32 3
  store ptr %109, ptr %memberidx2.i.i263, align 8
  %memberidx3.i.i264 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %108, i64 0, i32 2
  store i64 %110, ptr %memberidx3.i.i264, align 4
  store i64 1, ptr %memberidx1.i.i262, align 4
  %111 = icmp slt i64 %110, 1
  br i1 %111, label %for.end65, label %for.body63

if.entry52:                                       ; preds = %for.body44, %for.body44.lr.ph
  %storemerge400423.lcssa = phi i1 [ %93, %for.body44.lr.ph ], [ %139, %for.body44 ]
  %storemerge181424.lcssa = phi ptr [ %storemerge181424463, %for.body44.lr.ph ], [ %storemerge181424, %for.body44 ]
  %.lcssa454 = phi ptr [ %97, %for.body44.lr.ph ], [ %104, %for.body44 ]
  store i1 %storemerge400423.lcssa, ptr %90, align 1
  %112 = load ptr, ptr %.lcssa454, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %112, i64 0, i32 5
  %113 = load ptr, ptr %memberidx55, align 8
  %114 = call ptr %113(ptr nonnull %.lcssa454)
  %115 = alloca ptr, align 8
  %116 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %115, ptr nonnull @85, ptr %114)
  %117 = load ptr, ptr %115, align 8
  %118 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %118, align 8
  %memberidx.i269 = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  store ptr %117, ptr %memberidx.i269, align 8
  %memberidx1.i270 = getelementptr inbounds %string, ptr %118, i64 0, i32 2
  store i64 %116, ptr %memberidx1.i270, align 4
  %memberidx2.i271 = getelementptr inbounds %string, ptr %118, i64 0, i32 3
  store i64 %116, ptr %memberidx2.i271, align 4
  tail call void @free(ptr %114)
  %119 = load ptr, ptr %storemerge181424.lcssa, align 8
  %memberidx57 = getelementptr inbounds %Token, ptr %119, i64 0, i32 1
  %120 = load ptr, ptr %memberidx57, align 8
  %121 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i273 = getelementptr inbounds %Compiler, ptr %121, i64 0, i32 6
  %122 = load ptr, ptr %memberidx1.i273, align 8
  %123 = call ptr @malloc(i32 24)
  store i64 1, ptr %123, align 4
  %memberidx1.i.i274 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 2
  store ptr %120, ptr %memberidx1.i.i274, align 8
  %memberidx2.i.i275 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 1
  store ptr %118, ptr %memberidx2.i.i275, align 8
  %memberidx.i.i276 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 2
  %124 = load i64, ptr %memberidx.i.i276, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 3
  %125 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %124, %125
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry52
  %126 = shl i64 %125, 1
  store i64 %126, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %127 = load ptr, ptr %memberidx2.i.i.i, align 8
  %128 = shl i64 %125, 4
  %129 = call ptr @realloc(ptr %127, i64 %128)
  store ptr %129, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry52, %if.entry.i.i
  %130 = load i64, ptr %memberidx.i.i276, align 4
  %131 = add nsw i64 %130, 1
  store i64 %131, ptr %memberidx.i.i276, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %132 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %132, i64 %130
  store ptr %123, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend54:                                          ; preds = %for.body44.lr.ph, %for.body44
  %133 = phi ptr [ %104, %for.body44 ], [ %97, %for.body44.lr.ph ]
  %134 = phi ptr [ %102, %for.body44 ], [ %95, %for.body44.lr.ph ]
  %135 = load ptr, ptr %memberidx58, align 8
  call fastcc void @Map_string_Type____setitem__(ptr %135, ptr %133, ptr %134)
  %136 = load i64, ptr %memberidx1.i.i253, align 4
  %137 = add nsw i64 %136, 1
  store i64 %137, ptr %memberidx1.i.i253, align 4
  %138 = load i64, ptr %memberidx3.i.i255, align 4
  %139 = icmp sge i64 %136, %138
  br i1 %139, label %for.end46, label %for.body44

for.body63:                                       ; preds = %for.end46, %TypeChecker_declare_global_const.exit
  %storemerge182419.in = phi ptr [ %ptridx.i295, %TypeChecker_declare_global_const.exit ], [ %109, %for.end46 ]
  %storemerge182419 = load ptr, ptr %storemerge182419.in, align 8
  %140 = call fastcc ptr @TypeChecker_check_const_declaration(ptr nonnull %0, ptr %storemerge182419)
  %141 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i.i283 = getelementptr inbounds %Compiler, ptr %141, i64 0, i32 6
  %142 = load ptr, ptr %memberidx1.i.i283, align 8
  %memberidx2.i.i284 = getelementptr inbounds %Array_FloError_, ptr %142, i64 0, i32 2
  %143 = load i64, ptr %memberidx2.i.i284, align 4
  %144 = icmp sgt i64 %143, 0
  br i1 %144, label %TypeChecker_declare_global_const.exit, label %ifend.i

ifend.i:                                          ; preds = %for.body63
  %memberidx.i285 = getelementptr inbounds %ConstDeclaration, ptr %140, i64 0, i32 3
  store i1 true, ptr %memberidx.i285, align 1
  %145 = load i64, ptr %memberidx1, align 4
  %146 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %146, i64 0, i32 1
  %147 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %147, i64 0, i32 1
  %148 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %148, i64 %145
  %149 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i286 = getelementptr inbounds %Module, ptr %149, i64 0, i32 9
  %150 = load ptr, ptr %memberidx1.i286, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %150, i64 0, i32 2
  %151 = load i64, ptr %memberidx.i5.i, align 4
  %memberidx1.i6.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %150, i64 0, i32 3
  %152 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i287 = icmp slt i64 %151, %152
  br i1 %.not.i.i287, label %Array_ConstDeclaration____sl__.exit.i, label %if.entry.i.i290

if.entry.i.i290:                                  ; preds = %ifend.i
  %153 = shl i64 %152, 1
  store i64 %153, ptr %memberidx1.i6.i, align 4
  %memberidx2.i.i.i289 = getelementptr inbounds %Array_ConstDeclaration_, ptr %150, i64 0, i32 1
  %154 = load ptr, ptr %memberidx2.i.i.i289, align 8
  %155 = shl i64 %152, 4
  %156 = call ptr @realloc(ptr %154, i64 %155)
  store ptr %156, ptr %memberidx2.i.i.i289, align 8
  br label %Array_ConstDeclaration____sl__.exit.i

Array_ConstDeclaration____sl__.exit.i:            ; preds = %if.entry.i.i290, %ifend.i
  %157 = load i64, ptr %memberidx.i5.i, align 4
  %158 = add nsw i64 %157, 1
  store i64 %158, ptr %memberidx.i5.i, align 4
  %memberidx4.i.i291 = getelementptr inbounds %Array_ConstDeclaration_, ptr %150, i64 0, i32 1
  %159 = load ptr, ptr %memberidx4.i.i291, align 8
  %ptridx.i.i292 = getelementptr inbounds ptr, ptr %159, i64 %157
  store ptr %140, ptr %ptridx.i.i292, align 8
  br label %TypeChecker_declare_global_const.exit

TypeChecker_declare_global_const.exit:            ; preds = %for.body63, %Array_ConstDeclaration____sl__.exit.i
  %160 = load i64, ptr %memberidx1.i.i262, align 4
  %161 = add nsw i64 %160, 1
  store i64 %161, ptr %memberidx1.i.i262, align 4
  %162 = load ptr, ptr %memberidx2.i.i263, align 8
  %ptridx.i295 = getelementptr inbounds ptr, ptr %162, i64 %160
  %163 = load i64, ptr %memberidx3.i.i264, align 4
  %164 = icmp sge i64 %160, %163
  br i1 %164, label %for.end65, label %for.body63

for.end65:                                        ; preds = %TypeChecker_declare_global_const.exit, %for.end46
  %storemerge401.lcssa = phi i1 [ %111, %for.end46 ], [ %164, %TypeChecker_declare_global_const.exit ]
  store i1 %storemerge401.lcssa, ptr %108, align 1
  tail call void @free(ptr nonnull %108)
  %memberidx69 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 5
  %165 = load ptr, ptr %memberidx69, align 8
  %166 = call ptr @malloc(i32 25)
  %memberidx.i297 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %165, i64 0, i32 1
  %167 = load ptr, ptr %memberidx.i297, align 8
  %memberidx1.i298 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %165, i64 0, i32 2
  %168 = load i64, ptr %memberidx1.i298, align 4
  store i1 false, ptr %166, align 1
  %memberidx1.i.i299 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %166, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i299, align 4
  %memberidx2.i.i300 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %166, i64 0, i32 3
  store ptr %167, ptr %memberidx2.i.i300, align 8
  %memberidx3.i.i301 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %166, i64 0, i32 2
  store i64 %168, ptr %memberidx3.i.i301, align 4
  store i64 1, ptr %memberidx1.i.i299, align 4
  %169 = icmp slt i64 %168, 1
  br i1 %169, label %for.end73, label %for.body71

for.body71:                                       ; preds = %for.end65, %TypeChecker_declare_global_var.exit
  %storemerge183416.in = phi ptr [ %ptridx.i329, %TypeChecker_declare_global_var.exit ], [ %167, %for.end65 ]
  %storemerge183416 = load ptr, ptr %storemerge183416.in, align 8
  %170 = call fastcc ptr @TypeChecker_check_var_declaration(ptr nonnull %0, ptr %storemerge183416)
  %171 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i.i307 = getelementptr inbounds %Compiler, ptr %171, i64 0, i32 6
  %172 = load ptr, ptr %memberidx1.i.i307, align 8
  %memberidx2.i.i308 = getelementptr inbounds %Array_FloError_, ptr %172, i64 0, i32 2
  %173 = load i64, ptr %memberidx2.i.i308, align 4
  %174 = icmp sgt i64 %173, 0
  br i1 %174, label %TypeChecker_declare_global_var.exit, label %ifend.i313

ifend.i313:                                       ; preds = %for.body71
  %175 = load ptr, ptr %0, align 8
  %memberidx1.i309 = getelementptr inbounds %VarDeclaration, ptr %170, i64 0, i32 2
  %176 = load ptr, ptr %memberidx1.i309, align 8
  %memberidx.i23.i = getelementptr inbounds %Program, ptr %175, i64 0, i32 1
  %177 = load ptr, ptr %memberidx.i23.i, align 8
  %memberidx1.i24.i = getelementptr inbounds %VarId, ptr %176, i64 0, i32 1
  %178 = load i64, ptr %memberidx1.i24.i, align 4
  %memberidx.i.i25.i = getelementptr inbounds %Array_Module_, ptr %177, i64 0, i32 1
  %179 = load ptr, ptr %memberidx.i.i25.i, align 8
  %ptridx.i.i26.i = getelementptr inbounds ptr, ptr %179, i64 %178
  %180 = load ptr, ptr %ptridx.i.i26.i, align 8
  %memberidx2.i27.i = getelementptr inbounds %Module, ptr %180, i64 0, i32 2
  %181 = load ptr, ptr %memberidx2.i27.i, align 8
  %memberidx3.i.i310 = getelementptr inbounds %VarId, ptr %176, i64 0, i32 2
  %182 = load i64, ptr %memberidx3.i.i310, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Var_, ptr %181, i64 0, i32 1
  %183 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %183, i64 %182
  %184 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx2.i311 = getelementptr inbounds %Var, ptr %184, i64 0, i32 2
  %185 = load ptr, ptr %memberidx2.i311, align 8
  %.not.i312 = icmp eq ptr %185, null
  br i1 %.not.i312, label %ifend5.i, label %if.entry3.i

if.entry3.i:                                      ; preds = %ifend.i313
  %memberidx6.i314 = getelementptr inbounds %Expression, ptr %185, i64 0, i32 1
  %186 = load i1, ptr %memberidx6.i314, align 1
  br i1 %186, label %ifend5.i, label %if.entry7.i

ifend5.i:                                         ; preds = %if.entry3.i, %ifend.i313
  %memberidx12.i315 = getelementptr inbounds %VarDeclaration, ptr %170, i64 0, i32 3
  store i1 true, ptr %memberidx12.i315, align 1
  %187 = load i64, ptr %memberidx1, align 4
  %188 = load ptr, ptr %0, align 8
  %memberidx1.i.i29.i = getelementptr inbounds %Program, ptr %188, i64 0, i32 1
  %189 = load ptr, ptr %memberidx1.i.i29.i, align 8
  %memberidx.i.i.i30.i = getelementptr inbounds %Array_Module_, ptr %189, i64 0, i32 1
  %190 = load ptr, ptr %memberidx.i.i.i30.i, align 8
  %ptridx.i.i.i.i316 = getelementptr inbounds ptr, ptr %190, i64 %187
  %191 = load ptr, ptr %ptridx.i.i.i.i316, align 8
  %memberidx13.i317 = getelementptr inbounds %Module, ptr %191, i64 0, i32 10
  %192 = load ptr, ptr %memberidx13.i317, align 8
  %memberidx.i34.i = getelementptr inbounds %Array_VarDeclaration_, ptr %192, i64 0, i32 2
  %193 = load i64, ptr %memberidx.i34.i, align 4
  %memberidx1.i35.i = getelementptr inbounds %Array_VarDeclaration_, ptr %192, i64 0, i32 3
  %194 = load i64, ptr %memberidx1.i35.i, align 4
  %.not.i.i318 = icmp slt i64 %193, %194
  br i1 %.not.i.i318, label %Array_VarDeclaration____sl__.exit.i, label %if.entry.i.i319

if.entry.i.i319:                                  ; preds = %ifend5.i
  %195 = shl i64 %194, 1
  store i64 %195, ptr %memberidx1.i35.i, align 4
  %memberidx2.i.i37.i = getelementptr inbounds %Array_VarDeclaration_, ptr %192, i64 0, i32 1
  %196 = load ptr, ptr %memberidx2.i.i37.i, align 8
  %197 = shl i64 %194, 4
  %198 = call ptr @realloc(ptr %196, i64 %197)
  store ptr %198, ptr %memberidx2.i.i37.i, align 8
  br label %Array_VarDeclaration____sl__.exit.i

Array_VarDeclaration____sl__.exit.i:              ; preds = %if.entry.i.i319, %ifend5.i
  %199 = load i64, ptr %memberidx.i34.i, align 4
  %200 = add nsw i64 %199, 1
  store i64 %200, ptr %memberidx.i34.i, align 4
  %memberidx4.i.i320 = getelementptr inbounds %Array_VarDeclaration_, ptr %192, i64 0, i32 1
  br label %TypeChecker_declare_global_var.exit.sink.split

if.entry7.i:                                      ; preds = %if.entry3.i
  %201 = call ptr @malloc(i32 54)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %201, ptr noundef nonnull align 8 dereferenceable(54) @89, i64 54, i1 false)
  %202 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %202, align 8
  %memberidx.i.i31.i = getelementptr inbounds %string, ptr %202, i64 0, i32 1
  store ptr %201, ptr %memberidx.i.i31.i, align 8
  %memberidx1.i.i32.i = getelementptr inbounds %string, ptr %202, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i32.i, align 4
  %memberidx2.i.i33.i = getelementptr inbounds %string, ptr %202, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i33.i, align 4
  %memberidx10.i322 = getelementptr inbounds %VarDeclarationStatement, ptr %storemerge183416, i64 0, i32 4
  %203 = load ptr, ptr %memberidx10.i322, align 8
  %204 = load ptr, ptr %203, align 8
  %205 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i22.i = getelementptr inbounds %Compiler, ptr %205, i64 0, i32 6
  %206 = load ptr, ptr %memberidx1.i22.i, align 8
  %207 = call ptr @malloc(i32 24)
  store i64 4, ptr %207, align 4
  %memberidx1.i.i.i323 = getelementptr inbounds %FloError, ptr %207, i64 0, i32 2
  store ptr %204, ptr %memberidx1.i.i.i323, align 8
  %memberidx2.i.i.i324 = getelementptr inbounds %FloError, ptr %207, i64 0, i32 1
  store ptr %202, ptr %memberidx2.i.i.i324, align 8
  %memberidx.i.i.i325 = getelementptr inbounds %Array_FloError_, ptr %206, i64 0, i32 2
  %208 = load i64, ptr %memberidx.i.i.i325, align 4
  %memberidx1.i2.i.i = getelementptr inbounds %Array_FloError_, ptr %206, i64 0, i32 3
  %209 = load i64, ptr %memberidx1.i2.i.i, align 4
  %.not.i.i.i = icmp slt i64 %208, %209
  br i1 %.not.i.i.i, label %TypeChecker_error.exit.i, label %if.entry.i.i.i

if.entry.i.i.i:                                   ; preds = %if.entry7.i
  %210 = shl i64 %209, 1
  store i64 %210, ptr %memberidx1.i2.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %206, i64 0, i32 1
  %211 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %212 = shl i64 %209, 4
  %213 = call ptr @realloc(ptr %211, i64 %212)
  store ptr %213, ptr %memberidx2.i.i.i.i, align 8
  br label %TypeChecker_error.exit.i

TypeChecker_error.exit.i:                         ; preds = %if.entry.i.i.i, %if.entry7.i
  %214 = load i64, ptr %memberidx.i.i.i325, align 4
  %215 = add nsw i64 %214, 1
  store i64 %215, ptr %memberidx.i.i.i325, align 4
  %memberidx4.i.i.i = getelementptr inbounds %Array_FloError_, ptr %206, i64 0, i32 1
  br label %TypeChecker_declare_global_var.exit.sink.split

TypeChecker_declare_global_var.exit.sink.split:   ; preds = %TypeChecker_error.exit.i, %Array_VarDeclaration____sl__.exit.i
  %memberidx4.i.i320.sink = phi ptr [ %memberidx4.i.i320, %Array_VarDeclaration____sl__.exit.i ], [ %memberidx4.i.i.i, %TypeChecker_error.exit.i ]
  %.sink450 = phi i64 [ %199, %Array_VarDeclaration____sl__.exit.i ], [ %214, %TypeChecker_error.exit.i ]
  %.sink = phi ptr [ %170, %Array_VarDeclaration____sl__.exit.i ], [ %207, %TypeChecker_error.exit.i ]
  %216 = load ptr, ptr %memberidx4.i.i320.sink, align 8
  %ptridx.i.i321 = getelementptr inbounds ptr, ptr %216, i64 %.sink450
  store ptr %.sink, ptr %ptridx.i.i321, align 8
  br label %TypeChecker_declare_global_var.exit

TypeChecker_declare_global_var.exit:              ; preds = %TypeChecker_declare_global_var.exit.sink.split, %for.body71
  %217 = load i64, ptr %memberidx1.i.i299, align 4
  %218 = add nsw i64 %217, 1
  store i64 %218, ptr %memberidx1.i.i299, align 4
  %219 = load ptr, ptr %memberidx2.i.i300, align 8
  %ptridx.i329 = getelementptr inbounds ptr, ptr %219, i64 %217
  %220 = load i64, ptr %memberidx3.i.i301, align 4
  %221 = icmp sge i64 %217, %220
  br i1 %221, label %for.end73, label %for.body71

for.end73:                                        ; preds = %TypeChecker_declare_global_var.exit, %for.end65
  %storemerge402.lcssa = phi i1 [ %169, %for.end65 ], [ %221, %TypeChecker_declare_global_var.exit ]
  store i1 %storemerge402.lcssa, ptr %166, align 1
  tail call void @free(ptr nonnull %166)
  %222 = load ptr, ptr %1, align 8
  %223 = call ptr @malloc(i32 25)
  %memberidx.i331 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %222, i64 0, i32 1
  %224 = load ptr, ptr %memberidx.i331, align 8
  %memberidx1.i332 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %222, i64 0, i32 2
  %225 = load i64, ptr %memberidx1.i332, align 4
  store i1 false, ptr %223, align 1
  %memberidx1.i.i333 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %223, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i333, align 4
  %memberidx2.i.i334 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %223, i64 0, i32 3
  store ptr %224, ptr %memberidx2.i.i334, align 8
  %memberidx3.i.i335 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %223, i64 0, i32 2
  store i64 %225, ptr %memberidx3.i.i335, align 4
  store i64 1, ptr %memberidx1.i.i333, align 4
  %226 = icmp slt i64 %225, 1
  br i1 %226, label %for.end81, label %for.body79

for.body79:                                       ; preds = %for.end73, %for.body79
  %storemerge184413.in = phi ptr [ %ptridx.i342, %for.body79 ], [ %224, %for.end73 ]
  %storemerge184413 = load ptr, ptr %storemerge184413.in, align 8
  call fastcc void @TypeChecker_declare_function_within_module(ptr nonnull %0, ptr %storemerge184413)
  %227 = load i64, ptr %memberidx1.i.i333, align 4
  %228 = add nsw i64 %227, 1
  store i64 %228, ptr %memberidx1.i.i333, align 4
  %229 = load ptr, ptr %memberidx2.i.i334, align 8
  %ptridx.i342 = getelementptr inbounds ptr, ptr %229, i64 %227
  %230 = load i64, ptr %memberidx3.i.i335, align 4
  %231 = icmp sge i64 %227, %230
  br i1 %231, label %for.end81, label %for.body79

for.end81:                                        ; preds = %for.body79, %for.end73
  %storemerge403.lcssa = phi i1 [ %226, %for.end73 ], [ %231, %for.body79 ]
  store i1 %storemerge403.lcssa, ptr %223, align 1
  tail call void @free(ptr nonnull %223)
  %232 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i345 = getelementptr inbounds %Compiler, ptr %232, i64 0, i32 6
  %233 = load ptr, ptr %memberidx1.i345, align 8
  %memberidx2.i346 = getelementptr inbounds %Array_FloError_, ptr %233, i64 0, i32 2
  %234 = load i64, ptr %memberidx2.i346, align 4
  %235 = icmp sgt i64 %234, 0
  br i1 %235, label %common.ret, label %for.cond87.preheader

for.cond87.preheader:                             ; preds = %for.end81
  %236 = load ptr, ptr %memberidx23, align 8
  %memberidx92410 = getelementptr inbounds %Array_EnumNode_, ptr %236, i64 0, i32 2
  %237 = load i64, ptr %memberidx92410, align 4
  %238 = icmp sgt i64 %237, 0
  br i1 %238, label %for.body88, label %for.entry95

for.body88:                                       ; preds = %for.cond87.preheader, %for.body88
  %239 = phi ptr [ %246, %for.body88 ], [ %236, %for.cond87.preheader ]
  %storemerge187411 = phi i64 [ %245, %for.body88 ], [ 0, %for.cond87.preheader ]
  %240 = load ptr, ptr %memberidx10.i, align 8
  %memberidx.i347 = getelementptr inbounds %Array_Enum_, ptr %240, i64 0, i32 1
  %241 = load ptr, ptr %memberidx.i347, align 8
  %ptridx.i348 = getelementptr inbounds ptr, ptr %241, i64 %storemerge187411
  %242 = load ptr, ptr %ptridx.i348, align 8
  %memberidx.i349 = getelementptr inbounds %Array_EnumNode_, ptr %239, i64 0, i32 1
  %243 = load ptr, ptr %memberidx.i349, align 8
  %ptridx.i350 = getelementptr inbounds ptr, ptr %243, i64 %storemerge187411
  %244 = load ptr, ptr %ptridx.i350, align 8
  call fastcc void @TypeChecker_check_enum_body(ptr nonnull %0, ptr %242, ptr %244)
  %245 = add nuw nsw i64 %storemerge187411, 1
  %246 = load ptr, ptr %memberidx23, align 8
  %memberidx92 = getelementptr inbounds %Array_EnumNode_, ptr %246, i64 0, i32 2
  %247 = load i64, ptr %memberidx92, align 4
  %248 = icmp slt i64 %245, %247
  br i1 %248, label %for.body88, label %for.entry95

for.entry95:                                      ; preds = %for.body88, %for.cond87.preheader
  %249 = load ptr, ptr %memberidx31, align 8
  %250 = call ptr @malloc(i32 25)
  %memberidx.i351 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %249, i64 0, i32 1
  %251 = load ptr, ptr %memberidx.i351, align 8
  %memberidx1.i352 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %249, i64 0, i32 2
  %252 = load i64, ptr %memberidx1.i352, align 4
  store i1 false, ptr %250, align 1
  %memberidx1.i.i353 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %250, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i353, align 4
  %memberidx2.i.i354 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %250, i64 0, i32 3
  store ptr %251, ptr %memberidx2.i.i354, align 8
  %memberidx3.i.i355 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %250, i64 0, i32 2
  store i64 %252, ptr %memberidx3.i.i355, align 4
  store i64 1, ptr %memberidx1.i.i353, align 4
  %253 = icmp slt i64 %252, 1
  br i1 %253, label %for.end102, label %for.body100

for.body100:                                      ; preds = %for.entry95, %for.body100
  %storemerge185409.in = phi ptr [ %ptridx.i362, %for.body100 ], [ %251, %for.entry95 ]
  %storemerge185409 = load ptr, ptr %storemerge185409.in, align 8
  call fastcc void @TypeChecker_check_class_body(ptr nonnull %0, ptr %storemerge185409)
  %254 = load i64, ptr %memberidx1.i.i353, align 4
  %255 = add nsw i64 %254, 1
  store i64 %255, ptr %memberidx1.i.i353, align 4
  %256 = load ptr, ptr %memberidx2.i.i354, align 8
  %ptridx.i362 = getelementptr inbounds ptr, ptr %256, i64 %254
  %257 = load i64, ptr %memberidx3.i.i355, align 4
  %258 = icmp sge i64 %254, %257
  br i1 %258, label %for.end102, label %for.body100

for.end102:                                       ; preds = %for.body100, %for.entry95
  %storemerge404.lcssa = phi i1 [ %253, %for.entry95 ], [ %258, %for.body100 ]
  store i1 %storemerge404.lcssa, ptr %250, align 1
  tail call void @free(ptr nonnull %250)
  %259 = load ptr, ptr %1, align 8
  %memberidx111406 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %259, i64 0, i32 2
  %260 = load i64, ptr %memberidx111406, align 4
  %261 = icmp sgt i64 %260, 0
  br i1 %261, label %for.body107, label %for.end109

for.body107:                                      ; preds = %for.end102, %TypeChecker_check_function_body.exit
  %262 = phi ptr [ %321, %TypeChecker_check_function_body.exit ], [ %259, %for.end102 ]
  %storemerge186407 = phi i64 [ %320, %TypeChecker_check_function_body.exit ], [ 0, %for.end102 ]
  %263 = load ptr, ptr %memberidx1.i189, align 8
  %memberidx.i364 = getelementptr inbounds %Array_Function_, ptr %263, i64 0, i32 1
  %264 = load ptr, ptr %memberidx.i364, align 8
  %ptridx.i365 = getelementptr inbounds ptr, ptr %264, i64 %storemerge186407
  %265 = load ptr, ptr %ptridx.i365, align 8
  %memberidx.i366 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %262, i64 0, i32 1
  %266 = load ptr, ptr %memberidx.i366, align 8
  %ptridx.i367 = getelementptr inbounds ptr, ptr %266, i64 %storemerge186407
  %267 = load ptr, ptr %ptridx.i367, align 8
  %memberidx.i368 = getelementptr inbounds %Function, ptr %265, i64 0, i32 6
  %268 = load i1, ptr %memberidx.i368, align 1
  br i1 %268, label %TypeChecker_check_function_body.exit, label %ifend.i376

ifend.i376:                                       ; preds = %for.body107
  %269 = load ptr, ptr %265, align 8
  store ptr %269, ptr %memberidx18, align 8
  %memberidx6.i371 = getelementptr inbounds %Function, ptr %265, i64 0, i32 5
  %270 = load ptr, ptr %memberidx6.i371, align 8
  store ptr %270, ptr %memberidx2, align 8
  %memberidx7.i372 = getelementptr inbounds %Function, ptr %265, i64 0, i32 3
  %memberidx8.i = getelementptr inbounds %FunctionDeclarationNode, ptr %267, i64 0, i32 2
  %271 = load ptr, ptr %memberidx8.i, align 8
  %272 = call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %271, ptr null)
  store ptr %272, ptr %memberidx7.i372, align 8
  %273 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i.i374 = getelementptr inbounds %Compiler, ptr %273, i64 0, i32 6
  %274 = load ptr, ptr %memberidx1.i.i374, align 8
  %memberidx2.i.i375 = getelementptr inbounds %Array_FloError_, ptr %274, i64 0, i32 2
  %275 = load i64, ptr %memberidx2.i.i375, align 4
  %276 = icmp sgt i64 %275, 0
  br i1 %276, label %TypeChecker_check_function_body.exit, label %ifend11.i

ifend11.i:                                        ; preds = %ifend.i376
  %memberidx13.i377 = getelementptr inbounds %Block, ptr %272, i64 0, i32 1
  %277 = load i1, ptr %memberidx13.i377, align 1
  br i1 %277, label %ifend16.i, label %if.entry14.i

if.entry14.i:                                     ; preds = %ifend11.i
  %memberidx17.i = getelementptr inbounds %Function, ptr %265, i64 0, i32 4
  %278 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i378 = getelementptr inbounds %FunctionType, ptr %278, i64 0, i32 2
  %279 = load ptr, ptr %memberidx18.i378, align 8
  %280 = load i64, ptr %279, align 4
  %281 = icmp eq i64 %280, 10
  br i1 %281, label %if.entry20.i, label %else21.i

ifend16.i:                                        ; preds = %Array_Statement____sl__.exit.i, %ifend11.i
  %282 = load ptr, ptr %0, align 8
  %283 = load ptr, ptr %memberidx6.i371, align 8
  %memberidx.i49.i = getelementptr inbounds %Program, ptr %282, i64 0, i32 1
  %284 = load ptr, ptr %memberidx.i49.i, align 8
  %285 = load i64, ptr %283, align 4
  %memberidx.i.i50.i = getelementptr inbounds %Array_Module_, ptr %284, i64 0, i32 1
  %286 = load ptr, ptr %memberidx.i.i50.i, align 8
  %ptridx.i.i51.i = getelementptr inbounds ptr, ptr %286, i64 %285
  %287 = load ptr, ptr %ptridx.i.i51.i, align 8
  %memberidx2.i52.i = getelementptr inbounds %Module, ptr %287, i64 0, i32 8
  %288 = load ptr, ptr %memberidx2.i52.i, align 8
  %memberidx3.i.i379 = getelementptr inbounds %ScopeId, ptr %283, i64 0, i32 1
  %289 = load i64, ptr %memberidx3.i.i379, align 4
  %memberidx.i5.i.i380 = getelementptr inbounds %Array_Scope_, ptr %288, i64 0, i32 1
  %290 = load ptr, ptr %memberidx.i5.i.i380, align 8
  %ptridx.i6.i.i381 = getelementptr inbounds ptr, ptr %290, i64 %289
  %291 = load ptr, ptr %ptridx.i6.i.i381, align 8
  %memberidx30.i = getelementptr inbounds %Scope, ptr %291, i64 0, i32 5
  %292 = load ptr, ptr %memberidx30.i, align 8
  store ptr %292, ptr %memberidx2, align 8
  br label %TypeChecker_check_function_body.exit

if.entry20.i:                                     ; preds = %if.entry14.i
  %293 = load ptr, ptr %272, align 8
  %294 = call ptr @malloc(i32 16)
  store i64 7, ptr %294, align 4
  %memberidx.i53.i = getelementptr inbounds %ReturnStatement, ptr %294, i64 0, i32 1
  store ptr null, ptr %memberidx.i53.i, align 8
  %memberidx.i57.i = getelementptr inbounds %Array_Statement_, ptr %293, i64 0, i32 2
  %295 = load i64, ptr %memberidx.i57.i, align 4
  %memberidx1.i58.i = getelementptr inbounds %Array_Statement_, ptr %293, i64 0, i32 3
  %296 = load i64, ptr %memberidx1.i58.i, align 4
  %.not.i.i382 = icmp slt i64 %295, %296
  br i1 %.not.i.i382, label %Array_Statement____sl__.exit.i, label %if.entry.i.i383

if.entry.i.i383:                                  ; preds = %if.entry20.i
  %297 = shl i64 %296, 1
  store i64 %297, ptr %memberidx1.i58.i, align 4
  %memberidx2.i.i60.i = getelementptr inbounds %Array_Statement_, ptr %293, i64 0, i32 1
  %298 = load ptr, ptr %memberidx2.i.i60.i, align 8
  %299 = shl i64 %296, 4
  %300 = call ptr @realloc(ptr %298, i64 %299)
  store ptr %300, ptr %memberidx2.i.i60.i, align 8
  br label %Array_Statement____sl__.exit.i

Array_Statement____sl__.exit.i:                   ; preds = %if.entry.i.i383, %if.entry20.i
  %301 = load i64, ptr %memberidx.i57.i, align 4
  %302 = add nsw i64 %301, 1
  store i64 %302, ptr %memberidx.i57.i, align 4
  %memberidx4.i.i384 = getelementptr inbounds %Array_Statement_, ptr %293, i64 0, i32 1
  %303 = load ptr, ptr %memberidx4.i.i384, align 8
  %ptridx.i.i385 = getelementptr inbounds ptr, ptr %303, i64 %301
  store ptr %294, ptr %ptridx.i.i385, align 8
  br label %ifend16.i

else21.i:                                         ; preds = %if.entry14.i
  %304 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %304, ptr noundef nonnull align 8 dereferenceable(40) @141, i64 40, i1 false)
  %305 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %305, align 8
  %memberidx.i.i54.i = getelementptr inbounds %string, ptr %305, i64 0, i32 1
  store ptr %304, ptr %memberidx.i.i54.i, align 8
  %memberidx1.i.i55.i = getelementptr inbounds %string, ptr %305, i64 0, i32 2
  store i64 40, ptr %memberidx1.i.i55.i, align 4
  %memberidx2.i.i56.i = getelementptr inbounds %string, ptr %305, i64 0, i32 3
  store i64 40, ptr %memberidx2.i.i56.i, align 4
  %memberidx25.i = getelementptr inbounds %FunctionDeclarationNode, ptr %267, i64 0, i32 3
  %306 = load ptr, ptr %memberidx25.i, align 8
  %307 = load ptr, ptr %306, align 8
  %308 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i48.i = getelementptr inbounds %Compiler, ptr %308, i64 0, i32 6
  %309 = load ptr, ptr %memberidx1.i48.i, align 8
  %310 = call ptr @malloc(i32 24)
  store i64 4, ptr %310, align 4
  %memberidx1.i.i.i386 = getelementptr inbounds %FloError, ptr %310, i64 0, i32 2
  store ptr %307, ptr %memberidx1.i.i.i386, align 8
  %memberidx2.i.i.i387 = getelementptr inbounds %FloError, ptr %310, i64 0, i32 1
  store ptr %305, ptr %memberidx2.i.i.i387, align 8
  %memberidx.i.i.i388 = getelementptr inbounds %Array_FloError_, ptr %309, i64 0, i32 2
  %311 = load i64, ptr %memberidx.i.i.i388, align 4
  %memberidx1.i2.i.i389 = getelementptr inbounds %Array_FloError_, ptr %309, i64 0, i32 3
  %312 = load i64, ptr %memberidx1.i2.i.i389, align 4
  %.not.i.i.i390 = icmp slt i64 %311, %312
  br i1 %.not.i.i.i390, label %TypeChecker_error.exit.i396, label %if.entry.i.i.i393

if.entry.i.i.i393:                                ; preds = %else21.i
  %313 = shl i64 %312, 1
  store i64 %313, ptr %memberidx1.i2.i.i389, align 4
  %memberidx2.i.i.i.i392 = getelementptr inbounds %Array_FloError_, ptr %309, i64 0, i32 1
  %314 = load ptr, ptr %memberidx2.i.i.i.i392, align 8
  %315 = shl i64 %312, 4
  %316 = call ptr @realloc(ptr %314, i64 %315)
  store ptr %316, ptr %memberidx2.i.i.i.i392, align 8
  br label %TypeChecker_error.exit.i396

TypeChecker_error.exit.i396:                      ; preds = %if.entry.i.i.i393, %else21.i
  %317 = load i64, ptr %memberidx.i.i.i388, align 4
  %318 = add nsw i64 %317, 1
  store i64 %318, ptr %memberidx.i.i.i388, align 4
  %memberidx4.i.i.i394 = getelementptr inbounds %Array_FloError_, ptr %309, i64 0, i32 1
  %319 = load ptr, ptr %memberidx4.i.i.i394, align 8
  %ptridx.i.i.i395 = getelementptr inbounds ptr, ptr %319, i64 %317
  store ptr %310, ptr %ptridx.i.i.i395, align 8
  br label %TypeChecker_check_function_body.exit

TypeChecker_check_function_body.exit:             ; preds = %for.body107, %ifend.i376, %ifend16.i, %TypeChecker_error.exit.i396
  %320 = add nuw nsw i64 %storemerge186407, 1
  %321 = load ptr, ptr %1, align 8
  %memberidx111 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %321, i64 0, i32 2
  %322 = load i64, ptr %memberidx111, align 4
  %323 = icmp slt i64 %320, %322
  br i1 %323, label %for.body107, label %for.end109

for.end109:                                       ; preds = %TypeChecker_check_function_body.exit, %for.end102
  %324 = load i1, ptr %memberidx, align 1
  %325 = load i64, ptr %memberidx1, align 4
  %326 = icmp ne i64 %325, 0
  %327 = and i1 %324, %326
  br i1 %327, label %if.entry116, label %ifend118

if.entry116:                                      ; preds = %for.end109
  store i64 0, ptr %memberidx1, align 4
  %328 = load ptr, ptr %0, align 8
  %memberidx1.i.i213 = getelementptr inbounds %Program, ptr %328, i64 0, i32 1
  %329 = load ptr, ptr %memberidx1.i.i213, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %329, i64 0, i32 1
  %330 = load ptr, ptr %memberidx.i.i.i, align 8
  %331 = load ptr, ptr %330, align 8
  %memberidx2.i214 = getelementptr inbounds %Module, ptr %331, i64 0, i32 6
  %332 = load ptr, ptr %memberidx2.i214, align 8
  store ptr %332, ptr %memberidx2, align 8
  call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %0, ptr %5)
  br label %ifend118

ifend118:                                         ; preds = %for.end109, %if.entry116
  store ptr %4, ptr %memberidx2, align 8
  store i64 %3, ptr %memberidx1, align 4
  %333 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %333, i64 0, i32 6
  %334 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %334, i64 0, i32 2
  %335 = load i64, ptr %memberidx2.i, align 4
  %336 = icmp sgt i64 %335, 0
  %spec.select = select i1 %336, ptr null, ptr %5
  br label %common.ret
}

define internal fastcc void @TypeChecker_import_all_from_module(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
for.entry:
  %2 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %Module, ptr %1, i64 0, i32 6
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %memberidx.i, align 8
  %5 = load i64, ptr %3, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %7, i64 0, i32 8
  %8 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %3, i64 0, i32 1
  %9 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx2 = getelementptr inbounds %Module, ptr %1, i64 0, i32 10
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call ptr @malloc(i32 25)
  %memberidx.i78 = getelementptr inbounds %Array_VarDeclaration_, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i78, align 8
  %memberidx1.i = getelementptr inbounds %Array_VarDeclaration_, ptr %12, i64 0, i32 2
  %15 = load i64, ptr %memberidx1.i, align 4
  store i1 false, ptr %13, align 1
  %memberidx1.i.i79 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %13, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i79, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %13, i64 0, i32 3
  store ptr %14, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %13, i64 0, i32 2
  store i64 %15, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i79, align 4
  %16 = icmp slt i64 %15, 1
  br i1 %16, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx.i.i.i97 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %imported_var.0250.in = phi ptr [ %14, %for.body.lr.ph ], [ %ptridx.i112, %for.body ]
  %imported_var.0250 = load ptr, ptr %imported_var.0250.in, align 8
  %memberidx4 = getelementptr inbounds %VarDeclaration, ptr %imported_var.0250, i64 0, i32 1
  %17 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %VarDeclaration, ptr %imported_var.0250, i64 0, i32 2
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %0, align 8
  %20 = load i64, ptr %memberidx.i.i.i97, align 4
  %memberidx1.i.i.i.i98 = getelementptr inbounds %Program, ptr %19, i64 0, i32 1
  %21 = load ptr, ptr %memberidx1.i.i.i.i98, align 8
  %memberidx.i.i.i.i.i99 = getelementptr inbounds %Array_Module_, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i.i.i.i.i99, align 8
  %ptridx.i.i.i.i.i100 = getelementptr inbounds ptr, ptr %22, i64 %20
  %23 = load ptr, ptr %ptridx.i.i.i.i.i100, align 8
  %memberidx1.i.i101 = getelementptr inbounds %Module, ptr %23, i64 0, i32 6
  %24 = load ptr, ptr %memberidx1.i.i101, align 8
  %25 = load i64, ptr %24, align 4
  %ptridx.i.i.i.i104 = getelementptr inbounds ptr, ptr %22, i64 %25
  %26 = load ptr, ptr %ptridx.i.i.i.i104, align 8
  %memberidx2.i.i.i105 = getelementptr inbounds %Module, ptr %26, i64 0, i32 8
  %27 = load ptr, ptr %memberidx2.i.i.i105, align 8
  %memberidx3.i.i.i106 = getelementptr inbounds %ScopeId, ptr %24, i64 0, i32 1
  %28 = load i64, ptr %memberidx3.i.i.i106, align 4
  %memberidx.i5.i.i.i107 = getelementptr inbounds %Array_Scope_, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i5.i.i.i107, align 8
  %ptridx.i6.i.i.i108 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx.i6.i.i.i108, align 8
  %memberidx.i109 = getelementptr inbounds %Scope, ptr %30, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i109, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %31, ptr %17, ptr %18)
  %32 = load i64, ptr %memberidx1.i.i79, align 4
  %33 = add nsw i64 %32, 1
  store i64 %33, ptr %memberidx1.i.i79, align 4
  %ptridx.i112 = getelementptr inbounds ptr, ptr %14, i64 %32
  %34 = icmp sge i64 %32, %15
  br i1 %34, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.entry
  %storemerge223.lcssa = phi i1 [ %16, %for.entry ], [ %34, %for.body ]
  store i1 %storemerge223.lcssa, ptr %13, align 1
  tail call void @free(ptr nonnull %13)
  %memberidx8 = getelementptr inbounds %Module, ptr %1, i64 0, i32 9
  %35 = load ptr, ptr %memberidx8, align 8
  %36 = call ptr @malloc(i32 25)
  %memberidx.i132 = getelementptr inbounds %Array_ConstDeclaration_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i132, align 8
  %memberidx1.i133 = getelementptr inbounds %Array_ConstDeclaration_, ptr %35, i64 0, i32 2
  %38 = load i64, ptr %memberidx1.i133, align 4
  store i1 false, ptr %36, align 1
  %memberidx1.i.i134 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %36, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i134, align 4
  %memberidx2.i.i135 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %36, i64 0, i32 3
  store ptr %37, ptr %memberidx2.i.i135, align 8
  %memberidx3.i.i136 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %36, i64 0, i32 2
  store i64 %38, ptr %memberidx3.i.i136, align 4
  store i64 1, ptr %memberidx1.i.i134, align 4
  %39 = icmp slt i64 %38, 1
  br i1 %39, label %for.end12, label %for.body10.lr.ph

for.body10.lr.ph:                                 ; preds = %for.end
  %memberidx.i.i.i141 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body10

for.body10:                                       ; preds = %for.body10.lr.ph, %for.body10
  %storemerge247.in = phi ptr [ %37, %for.body10.lr.ph ], [ %ptridx.i156, %for.body10 ]
  %storemerge247 = load ptr, ptr %storemerge247.in, align 8
  %memberidx14 = getelementptr inbounds %ConstDeclaration, ptr %storemerge247, i64 0, i32 1
  %40 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %ConstDeclaration, ptr %storemerge247, i64 0, i32 2
  %41 = load ptr, ptr %memberidx15, align 8
  %42 = load ptr, ptr %0, align 8
  %43 = load i64, ptr %memberidx.i.i.i141, align 4
  %memberidx1.i.i.i.i142 = getelementptr inbounds %Program, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %memberidx1.i.i.i.i142, align 8
  %memberidx.i.i.i.i.i143 = getelementptr inbounds %Array_Module_, ptr %44, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i.i.i143, align 8
  %ptridx.i.i.i.i.i144 = getelementptr inbounds ptr, ptr %45, i64 %43
  %46 = load ptr, ptr %ptridx.i.i.i.i.i144, align 8
  %memberidx1.i.i145 = getelementptr inbounds %Module, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i.i145, align 8
  %48 = load i64, ptr %47, align 4
  %ptridx.i.i.i.i148 = getelementptr inbounds ptr, ptr %45, i64 %48
  %49 = load ptr, ptr %ptridx.i.i.i.i148, align 8
  %memberidx2.i.i.i149 = getelementptr inbounds %Module, ptr %49, i64 0, i32 8
  %50 = load ptr, ptr %memberidx2.i.i.i149, align 8
  %memberidx3.i.i.i150 = getelementptr inbounds %ScopeId, ptr %47, i64 0, i32 1
  %51 = load i64, ptr %memberidx3.i.i.i150, align 4
  %memberidx.i5.i.i.i151 = getelementptr inbounds %Array_Scope_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i5.i.i.i151, align 8
  %ptridx.i6.i.i.i152 = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i6.i.i.i152, align 8
  %memberidx.i153 = getelementptr inbounds %Scope, ptr %53, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i153, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %54, ptr %40, ptr %41)
  %55 = load i64, ptr %memberidx1.i.i134, align 4
  %56 = add nsw i64 %55, 1
  store i64 %56, ptr %memberidx1.i.i134, align 4
  %57 = load ptr, ptr %memberidx2.i.i135, align 8
  %ptridx.i156 = getelementptr inbounds ptr, ptr %57, i64 %55
  %58 = load i64, ptr %memberidx3.i.i136, align 4
  %59 = icmp sge i64 %55, %58
  br i1 %59, label %for.end12, label %for.body10

for.end12:                                        ; preds = %for.body10, %for.end
  %storemerge225.lcssa = phi i1 [ %39, %for.end ], [ %59, %for.body10 ]
  store i1 %storemerge225.lcssa, ptr %36, align 1
  tail call void @free(ptr nonnull %36)
  %memberidx18 = getelementptr inbounds %Module, ptr %1, i64 0, i32 5
  %60 = load ptr, ptr %memberidx18, align 8
  %61 = call ptr @malloc(i32 25)
  %memberidx.i158 = getelementptr inbounds %Array_Function_, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i158, align 8
  %memberidx1.i159 = getelementptr inbounds %Array_Function_, ptr %60, i64 0, i32 2
  %63 = load i64, ptr %memberidx1.i159, align 4
  store i1 false, ptr %61, align 1
  %memberidx1.i.i160 = getelementptr inbounds %ArrayIterator_Function_, ptr %61, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i160, align 4
  %memberidx2.i.i161 = getelementptr inbounds %ArrayIterator_Function_, ptr %61, i64 0, i32 3
  store ptr %62, ptr %memberidx2.i.i161, align 8
  %memberidx3.i.i162 = getelementptr inbounds %ArrayIterator_Function_, ptr %61, i64 0, i32 2
  store i64 %63, ptr %memberidx3.i.i162, align 4
  store i64 1, ptr %memberidx1.i.i160, align 4
  %64 = icmp slt i64 %63, 1
  br i1 %64, label %for.end22, label %for.body20.lr.ph

for.body20.lr.ph:                                 ; preds = %for.end12
  %memberidx.i.i.i176 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body20

for.body20:                                       ; preds = %for.body20.lr.ph, %for.body20
  %storemerge71244.in = phi ptr [ %62, %for.body20.lr.ph ], [ %ptridx.i191, %for.body20 ]
  %storemerge71244 = load ptr, ptr %storemerge71244.in, align 8
  %memberidx24 = getelementptr inbounds %Function, ptr %storemerge71244, i64 0, i32 1
  %65 = load ptr, ptr %memberidx24, align 8
  %66 = load ptr, ptr %storemerge71244, align 8
  %67 = load ptr, ptr %0, align 8
  %68 = load i64, ptr %memberidx.i.i.i176, align 4
  %memberidx1.i.i.i.i177 = getelementptr inbounds %Program, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx1.i.i.i.i177, align 8
  %memberidx.i.i.i.i.i178 = getelementptr inbounds %Array_Module_, ptr %69, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i.i.i.i.i178, align 8
  %ptridx.i.i.i.i.i179 = getelementptr inbounds ptr, ptr %70, i64 %68
  %71 = load ptr, ptr %ptridx.i.i.i.i.i179, align 8
  %memberidx1.i.i180 = getelementptr inbounds %Module, ptr %71, i64 0, i32 6
  %72 = load ptr, ptr %memberidx1.i.i180, align 8
  %73 = load i64, ptr %72, align 4
  %ptridx.i.i.i.i183 = getelementptr inbounds ptr, ptr %70, i64 %73
  %74 = load ptr, ptr %ptridx.i.i.i.i183, align 8
  %memberidx2.i.i.i184 = getelementptr inbounds %Module, ptr %74, i64 0, i32 8
  %75 = load ptr, ptr %memberidx2.i.i.i184, align 8
  %memberidx3.i.i.i185 = getelementptr inbounds %ScopeId, ptr %72, i64 0, i32 1
  %76 = load i64, ptr %memberidx3.i.i.i185, align 4
  %memberidx.i5.i.i.i186 = getelementptr inbounds %Array_Scope_, ptr %75, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i5.i.i.i186, align 8
  %ptridx.i6.i.i.i187 = getelementptr inbounds ptr, ptr %77, i64 %76
  %78 = load ptr, ptr %ptridx.i6.i.i.i187, align 8
  %memberidx.i188 = getelementptr inbounds %Scope, ptr %78, i64 0, i32 3
  %79 = load ptr, ptr %memberidx.i188, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %79, ptr %65, ptr %66)
  %80 = load i64, ptr %memberidx1.i.i160, align 4
  %81 = add nsw i64 %80, 1
  store i64 %81, ptr %memberidx1.i.i160, align 4
  %82 = load ptr, ptr %memberidx2.i.i161, align 8
  %ptridx.i191 = getelementptr inbounds ptr, ptr %82, i64 %80
  %83 = load i64, ptr %memberidx3.i.i162, align 4
  %84 = icmp sge i64 %80, %83
  br i1 %84, label %for.end22, label %for.body20

for.end22:                                        ; preds = %for.body20, %for.end12
  %storemerge226.lcssa = phi i1 [ %64, %for.end12 ], [ %84, %for.body20 ]
  store i1 %storemerge226.lcssa, ptr %61, align 1
  tail call void @free(ptr nonnull %61)
  %memberidx28 = getelementptr inbounds %Module, ptr %1, i64 0, i32 4
  %85 = load ptr, ptr %memberidx28, align 8
  %86 = call ptr @malloc(i32 25)
  %memberidx.i214 = getelementptr inbounds %Array_Class_, ptr %85, i64 0, i32 1
  %87 = load ptr, ptr %memberidx.i214, align 8
  %memberidx1.i215 = getelementptr inbounds %Array_Class_, ptr %85, i64 0, i32 2
  %88 = load i64, ptr %memberidx1.i215, align 4
  store i1 false, ptr %86, align 1
  %memberidx1.i.i216 = getelementptr inbounds %ArrayIterator_Class_, ptr %86, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i216, align 4
  %memberidx2.i.i217 = getelementptr inbounds %ArrayIterator_Class_, ptr %86, i64 0, i32 3
  store ptr %87, ptr %memberidx2.i.i217, align 8
  %memberidx3.i.i218 = getelementptr inbounds %ArrayIterator_Class_, ptr %86, i64 0, i32 2
  store i64 %88, ptr %memberidx3.i.i218, align 4
  store i64 1, ptr %memberidx1.i.i216, align 4
  %89 = icmp slt i64 %88, 1
  br i1 %89, label %for.end32, label %for.body30.lr.ph

for.body30.lr.ph:                                 ; preds = %for.end22
  %memberidx.i.i.i197 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body30

for.body30:                                       ; preds = %for.body30.lr.ph, %for.body30
  %storemerge72241.in = phi ptr [ %87, %for.body30.lr.ph ], [ %ptridx.i195, %for.body30 ]
  %storemerge72241 = load ptr, ptr %storemerge72241.in, align 8
  %memberidx34 = getelementptr inbounds %Class, ptr %storemerge72241, i64 0, i32 1
  %90 = load ptr, ptr %memberidx34, align 8
  %91 = load ptr, ptr %storemerge72241, align 8
  %92 = load ptr, ptr %0, align 8
  %93 = load i64, ptr %memberidx.i.i.i197, align 4
  %memberidx1.i.i.i.i198 = getelementptr inbounds %Program, ptr %92, i64 0, i32 1
  %94 = load ptr, ptr %memberidx1.i.i.i.i198, align 8
  %memberidx.i.i.i.i.i199 = getelementptr inbounds %Array_Module_, ptr %94, i64 0, i32 1
  %95 = load ptr, ptr %memberidx.i.i.i.i.i199, align 8
  %ptridx.i.i.i.i.i200 = getelementptr inbounds ptr, ptr %95, i64 %93
  %96 = load ptr, ptr %ptridx.i.i.i.i.i200, align 8
  %memberidx1.i.i201 = getelementptr inbounds %Module, ptr %96, i64 0, i32 6
  %97 = load ptr, ptr %memberidx1.i.i201, align 8
  %98 = load i64, ptr %97, align 4
  %ptridx.i.i.i.i204 = getelementptr inbounds ptr, ptr %95, i64 %98
  %99 = load ptr, ptr %ptridx.i.i.i.i204, align 8
  %memberidx2.i.i.i205 = getelementptr inbounds %Module, ptr %99, i64 0, i32 8
  %100 = load ptr, ptr %memberidx2.i.i.i205, align 8
  %memberidx3.i.i.i206 = getelementptr inbounds %ScopeId, ptr %97, i64 0, i32 1
  %101 = load i64, ptr %memberidx3.i.i.i206, align 4
  %memberidx.i5.i.i.i207 = getelementptr inbounds %Array_Scope_, ptr %100, i64 0, i32 1
  %102 = load ptr, ptr %memberidx.i5.i.i.i207, align 8
  %ptridx.i6.i.i.i208 = getelementptr inbounds ptr, ptr %102, i64 %101
  %103 = load ptr, ptr %ptridx.i6.i.i.i208, align 8
  %memberidx.i209 = getelementptr inbounds %Scope, ptr %103, i64 0, i32 2
  %104 = load ptr, ptr %memberidx.i209, align 8
  call fastcc void @Map_string_ClassId____setitem__(ptr %104, ptr %90, ptr %91)
  %memberidx1.i210 = getelementptr inbounds %Scope, ptr %103, i64 0, i32 1
  %105 = load ptr, ptr %memberidx1.i210, align 8
  %106 = call ptr @malloc(i32 24)
  %107 = load i64, ptr %91, align 4
  %memberidx1.i5.i211 = getelementptr inbounds %TypeId, ptr %91, i64 0, i32 2
  %108 = load i64, ptr %memberidx1.i5.i211, align 4
  store i64 3, ptr %106, align 4
  %memberidx1.i.i.i212 = getelementptr inbounds %VarId, ptr %106, i64 0, i32 1
  store i64 %107, ptr %memberidx1.i.i.i212, align 4
  %memberidx2.i.i6.i213 = getelementptr inbounds %VarId, ptr %106, i64 0, i32 2
  store i64 %108, ptr %memberidx2.i.i6.i213, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %105, ptr %90, ptr nonnull %106)
  %109 = load i64, ptr %memberidx1.i.i216, align 4
  %110 = add nsw i64 %109, 1
  store i64 %110, ptr %memberidx1.i.i216, align 4
  %111 = load ptr, ptr %memberidx2.i.i217, align 8
  %ptridx.i195 = getelementptr inbounds ptr, ptr %111, i64 %109
  %112 = load i64, ptr %memberidx3.i.i218, align 4
  %113 = icmp sge i64 %109, %112
  br i1 %113, label %for.end32, label %for.body30

for.end32:                                        ; preds = %for.body30, %for.end22
  %storemerge227.lcssa = phi i1 [ %89, %for.end22 ], [ %113, %for.body30 ]
  store i1 %storemerge227.lcssa, ptr %86, align 1
  tail call void @free(ptr nonnull %86)
  %memberidx38 = getelementptr inbounds %Module, ptr %1, i64 0, i32 7
  %114 = load ptr, ptr %memberidx38, align 8
  %115 = call ptr @malloc(i32 25)
  %memberidx.i171 = getelementptr inbounds %Array_Enum_, ptr %114, i64 0, i32 1
  %116 = load ptr, ptr %memberidx.i171, align 8
  %memberidx1.i172 = getelementptr inbounds %Array_Enum_, ptr %114, i64 0, i32 2
  %117 = load i64, ptr %memberidx1.i172, align 4
  store i1 false, ptr %115, align 1
  %memberidx1.i.i173 = getelementptr inbounds %ArrayIterator_Enum_, ptr %115, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i173, align 4
  %memberidx2.i.i174 = getelementptr inbounds %ArrayIterator_Enum_, ptr %115, i64 0, i32 3
  store ptr %116, ptr %memberidx2.i.i174, align 8
  %memberidx3.i.i175 = getelementptr inbounds %ArrayIterator_Enum_, ptr %115, i64 0, i32 2
  store i64 %117, ptr %memberidx3.i.i175, align 4
  store i64 1, ptr %memberidx1.i.i173, align 4
  %118 = icmp slt i64 %117, 1
  br i1 %118, label %for.end42, label %for.body40.lr.ph

for.body40.lr.ph:                                 ; preds = %for.end32
  %memberidx.i.i.i118 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body40

for.body40:                                       ; preds = %for.body40.lr.ph, %for.body40
  %storemerge73238.in = phi ptr [ %116, %for.body40.lr.ph ], [ %ptridx.i116, %for.body40 ]
  %storemerge73238 = load ptr, ptr %storemerge73238.in, align 8
  %memberidx44 = getelementptr inbounds %Enum, ptr %storemerge73238, i64 0, i32 1
  %119 = load ptr, ptr %memberidx44, align 8
  %120 = load ptr, ptr %storemerge73238, align 8
  %121 = load ptr, ptr %0, align 8
  %122 = load i64, ptr %memberidx.i.i.i118, align 4
  %memberidx1.i.i.i.i119 = getelementptr inbounds %Program, ptr %121, i64 0, i32 1
  %123 = load ptr, ptr %memberidx1.i.i.i.i119, align 8
  %memberidx.i.i.i.i.i120 = getelementptr inbounds %Array_Module_, ptr %123, i64 0, i32 1
  %124 = load ptr, ptr %memberidx.i.i.i.i.i120, align 8
  %ptridx.i.i.i.i.i121 = getelementptr inbounds ptr, ptr %124, i64 %122
  %125 = load ptr, ptr %ptridx.i.i.i.i.i121, align 8
  %memberidx1.i.i122 = getelementptr inbounds %Module, ptr %125, i64 0, i32 6
  %126 = load ptr, ptr %memberidx1.i.i122, align 8
  %127 = load i64, ptr %126, align 4
  %ptridx.i.i.i.i125 = getelementptr inbounds ptr, ptr %124, i64 %127
  %128 = load ptr, ptr %ptridx.i.i.i.i125, align 8
  %memberidx2.i.i.i126 = getelementptr inbounds %Module, ptr %128, i64 0, i32 8
  %129 = load ptr, ptr %memberidx2.i.i.i126, align 8
  %memberidx3.i.i.i127 = getelementptr inbounds %ScopeId, ptr %126, i64 0, i32 1
  %130 = load i64, ptr %memberidx3.i.i.i127, align 4
  %memberidx.i5.i.i.i128 = getelementptr inbounds %Array_Scope_, ptr %129, i64 0, i32 1
  %131 = load ptr, ptr %memberidx.i5.i.i.i128, align 8
  %ptridx.i6.i.i.i129 = getelementptr inbounds ptr, ptr %131, i64 %130
  %132 = load ptr, ptr %ptridx.i6.i.i.i129, align 8
  %memberidx.i130 = getelementptr inbounds %Scope, ptr %132, i64 0, i32 4
  %133 = load ptr, ptr %memberidx.i130, align 8
  call fastcc void @Map_string_EnumId____setitem__(ptr %133, ptr %119, ptr %120)
  %memberidx1.i131 = getelementptr inbounds %Scope, ptr %132, i64 0, i32 1
  %134 = load ptr, ptr %memberidx1.i131, align 8
  %135 = call ptr @malloc(i32 24)
  %136 = load i64, ptr %120, align 4
  %memberidx1.i5.i = getelementptr inbounds %TypeId, ptr %120, i64 0, i32 2
  %137 = load i64, ptr %memberidx1.i5.i, align 4
  store i64 4, ptr %135, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %135, i64 0, i32 1
  store i64 %136, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i6.i = getelementptr inbounds %VarId, ptr %135, i64 0, i32 2
  store i64 %137, ptr %memberidx2.i.i6.i, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %134, ptr %119, ptr nonnull %135)
  %138 = load i64, ptr %memberidx1.i.i173, align 4
  %139 = add nsw i64 %138, 1
  store i64 %139, ptr %memberidx1.i.i173, align 4
  %140 = load ptr, ptr %memberidx2.i.i174, align 8
  %ptridx.i116 = getelementptr inbounds ptr, ptr %140, i64 %138
  %141 = load i64, ptr %memberidx3.i.i175, align 4
  %142 = icmp sge i64 %138, %141
  br i1 %142, label %for.end42, label %for.body40

for.end42:                                        ; preds = %for.body40, %for.end32
  %storemerge228.lcssa = phi i1 [ %118, %for.end32 ], [ %142, %for.body40 ]
  store i1 %storemerge228.lcssa, ptr %115, align 1
  tail call void @free(ptr nonnull %115)
  %memberidx48 = getelementptr inbounds %Scope, ptr %11, i64 0, i32 6
  %143 = load ptr, ptr %memberidx48, align 8
  %144 = call ptr @malloc(i32 25)
  %145 = load ptr, ptr %143, align 8
  %memberidx1.i92 = getelementptr inbounds %Map_string_Type_, ptr %143, i64 0, i32 1
  %146 = load i64, ptr %memberidx1.i92, align 4
  %memberidx2.i93 = getelementptr inbounds %Map_string_Type_, ptr %143, i64 0, i32 2
  %147 = load i64, ptr %memberidx2.i93, align 4
  store i1 false, ptr %144, align 1
  %memberidx1.i.i94 = getelementptr inbounds %MapIterator_string_Type_, ptr %144, i64 0, i32 1
  store ptr %145, ptr %memberidx1.i.i94, align 8
  %memberidx2.i.i95 = getelementptr inbounds %MapIterator_string_Type_, ptr %144, i64 0, i32 2
  store i64 %146, ptr %memberidx2.i.i95, align 4
  %memberidx3.i.i96 = getelementptr inbounds %MapIterator_string_Type_, ptr %144, i64 0, i32 3
  store i64 %147, ptr %memberidx3.i.i96, align 4
  %148 = add nsw i64 %146, -1
  store i64 %148, ptr %memberidx2.i.i95, align 4
  %149 = icmp sgt i64 %146, 0
  br i1 %149, label %while.entry.i86.preheader, label %MapIterator_string_Type__next.exit91

while.entry.i86.preheader:                        ; preds = %for.end42
  %memberidx1.i.i94.promoted = load ptr, ptr %memberidx1.i.i94, align 8
  br label %while.entry.i86

while.entry.i86:                                  ; preds = %while.entry.i86.preheader, %ifend.i90
  %150 = phi ptr [ %memberidx1.i.i94.promoted, %while.entry.i86.preheader ], [ %incdec.ptr.i84, %ifend.i90 ]
  %incdec.ptr.i84 = getelementptr inbounds ptr, ptr %150, i64 1
  %151 = load ptr, ptr %150, align 8
  %.not.i85 = icmp eq ptr %151, null
  br i1 %.not.i85, label %ifend.i90, label %MapIterator_string_Type__next.exit91.loopexit

ifend.i90:                                        ; preds = %while.entry.i86
  %152 = load i64, ptr %memberidx2.i.i95, align 4
  %153 = add nsw i64 %152, -1
  store i64 %153, ptr %memberidx2.i.i95, align 4
  %154 = icmp sgt i64 %152, 0
  br i1 %154, label %while.entry.i86, label %MapIterator_string_Type__next.exit91.loopexit

MapIterator_string_Type__next.exit91.loopexit:    ; preds = %ifend.i90, %while.entry.i86
  store ptr %incdec.ptr.i84, ptr %memberidx1.i.i94, align 8
  br label %MapIterator_string_Type__next.exit91

MapIterator_string_Type__next.exit91:             ; preds = %MapIterator_string_Type__next.exit91.loopexit, %for.end42
  %memberidx3.i.i96.promoted = load i64, ptr %memberidx3.i.i96, align 4
  %storemerge230232 = add nsw i64 %memberidx3.i.i96.promoted, -1
  %storemerge229233 = icmp slt i64 %memberidx3.i.i96.promoted, 1
  store i1 %storemerge229233, ptr %144, align 1
  br i1 %storemerge229233, label %for.end52, label %for.body50.lr.ph

for.body50.lr.ph:                                 ; preds = %MapIterator_string_Type__next.exit91
  %.pn.in = getelementptr inbounds %MapIterator_string_Type_, ptr %144, i64 0, i32 1
  %memberidx.i.i.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %.pn.in.promoted = load ptr, ptr %.pn.in, align 8
  br label %for.body50

for.body50:                                       ; preds = %for.body50.lr.ph, %MapIterator_string_Type__next.exit
  %.pn236 = phi ptr [ %.pn.in.promoted, %for.body50.lr.ph ], [ %.pn235, %MapIterator_string_Type__next.exit ]
  %storemerge230234 = phi i64 [ %storemerge230232, %for.body50.lr.ph ], [ %storemerge230, %MapIterator_string_Type__next.exit ]
  %storemerge74.in = getelementptr inbounds ptr, ptr %.pn236, i64 -1
  %storemerge74 = load ptr, ptr %storemerge74.in, align 8
  %155 = load ptr, ptr %storemerge74, align 8
  %memberidx55 = getelementptr inbounds %MapEntry_string_Type_, ptr %storemerge74, i64 0, i32 1
  %156 = load ptr, ptr %memberidx55, align 8
  %157 = load ptr, ptr %0, align 8
  %158 = load i64, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %157, i64 0, i32 1
  %159 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %159, i64 0, i32 1
  %160 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %160, i64 %158
  %161 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Module, ptr %161, i64 0, i32 6
  %162 = load ptr, ptr %memberidx1.i.i, align 8
  %163 = load i64, ptr %162, align 4
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %160, i64 %163
  %164 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %164, i64 0, i32 8
  %165 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ScopeId, ptr %162, i64 0, i32 1
  %166 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Scope_, ptr %165, i64 0, i32 1
  %167 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %167, i64 %166
  %168 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i77 = getelementptr inbounds %Scope, ptr %168, i64 0, i32 6
  %169 = load ptr, ptr %memberidx.i77, align 8
  call fastcc void @Map_string_Type____setitem__(ptr %169, ptr %155, ptr %156)
  %170 = load i64, ptr %memberidx2.i.i95, align 4
  %171 = add nsw i64 %170, -1
  store i64 %171, ptr %memberidx2.i.i95, align 4
  %172 = icmp sgt i64 %170, 0
  br i1 %172, label %while.entry.i, label %MapIterator_string_Type__next.exit

while.entry.i:                                    ; preds = %for.body50, %ifend.i
  %173 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %.pn236, %for.body50 ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %173, i64 1
  %174 = load ptr, ptr %173, align 8
  %.not.i = icmp eq ptr %174, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_Type__next.exit

ifend.i:                                          ; preds = %while.entry.i
  %175 = load i64, ptr %memberidx2.i.i95, align 4
  %176 = add nsw i64 %175, -1
  store i64 %176, ptr %memberidx2.i.i95, align 4
  %177 = icmp sgt i64 %175, 0
  br i1 %177, label %while.entry.i, label %MapIterator_string_Type__next.exit

MapIterator_string_Type__next.exit:               ; preds = %while.entry.i, %ifend.i, %for.body50
  %.pn235 = phi ptr [ %.pn236, %for.body50 ], [ %incdec.ptr.i, %ifend.i ], [ %incdec.ptr.i, %while.entry.i ]
  %storemerge230 = add nsw i64 %storemerge230234, -1
  %storemerge229 = icmp slt i64 %storemerge230234, 1
  store i1 %storemerge229, ptr %144, align 1
  br i1 %storemerge229, label %for.cond49.for.end52_crit_edge, label %for.body50

for.cond49.for.end52_crit_edge:                   ; preds = %MapIterator_string_Type__next.exit
  store ptr %.pn235, ptr %.pn.in, align 8
  br label %for.end52

for.end52:                                        ; preds = %for.cond49.for.end52_crit_edge, %MapIterator_string_Type__next.exit91
  %storemerge230.lcssa = phi i64 [ -1, %for.cond49.for.end52_crit_edge ], [ %storemerge230232, %MapIterator_string_Type__next.exit91 ]
  store i64 %storemerge230.lcssa, ptr %memberidx3.i.i96, align 4
  tail call void @free(ptr nonnull %144)
  ret void
}

define internal fastcc ptr @TypeChecker_check_typecast_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = call ptr @malloc(i32 8)
  store i64 20, ptr %3, align 4
  %memberidx = getelementptr inbounds %TypeCastExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx1 = getelementptr inbounds %TypeCastExpressionNode, ptr %1, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %6)
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %9 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %9, i64 0, i32 6
  %10 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %10, i64 0, i32 2
  %11 = load i64, ptr %memberidx2.i, align 4
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend46, %TypeChecker_error.exit, %if.entry4
  %common.ret.op = phi ptr [ %27, %if.entry4 ], [ null, %TypeChecker_error.exit ], [ %126, %ifend46 ], [ null, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %13 = load ptr, ptr %0, align 8
  %14 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %14, ptr noundef nonnull align 8 dereferenceable(6) @164, i64 6, i1 false)
  %15 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %16 = call fastcc i1 @is_object(ptr %7)
  br i1 %16, label %ifend.i, label %ifend6

ifend.i:                                          ; preds = %ifend
  %17 = call fastcc ptr @get_class_from_type(ptr %13, ptr %7)
  %memberidx.i81 = getelementptr inbounds %Class, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i81, align 8
  %memberidx.i.i82 = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i.i82, align 4
  %.not.i.i = icmp eq i64 %19, 6
  br i1 %.not.i.i, label %ifend.i.i, label %string___eq__.exit.i

ifend.i.i:                                        ; preds = %ifend.i
  %memberidx2.i.i84 = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %20 = load ptr, ptr %memberidx2.i.i84, align 8
  %21 = call i64 @memcmp(ptr %20, ptr %14, i64 %19)
  %22 = icmp eq i64 %21, 0
  br label %string___eq__.exit.i

string___eq__.exit.i:                             ; preds = %ifend.i.i, %ifend.i
  %common.ret.op.i.i = phi i1 [ %22, %ifend.i.i ], [ false, %ifend.i ]
  %23 = load ptr, ptr %17, align 8
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 1
  %26 = and i1 %common.ret.op.i.i, %25
  br i1 %26, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %string___eq__.exit.i
  %27 = tail call ptr @malloc(i32 49)
  %28 = call ptr @malloc(i32 0)
  %29 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %29, align 8
  %memberidx.i.i85 = getelementptr inbounds %string, ptr %29, i64 0, i32 1
  store ptr %28, ptr %memberidx.i.i85, align 8
  %memberidx1.i.i86 = getelementptr inbounds %string, ptr %29, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i86, i8 0, i64 16, i1 false)
  %30 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_int_, ptr %30, align 8
  %memberidx.i88 = getelementptr inbounds %Array_int_, ptr %30, i64 0, i32 2
  store i64 0, ptr %memberidx.i88, align 4
  %memberidx1.i89 = getelementptr inbounds %Array_int_, ptr %30, i64 0, i32 3
  store i64 8, ptr %memberidx1.i89, align 4
  %memberidx2.i90 = getelementptr inbounds %Array_int_, ptr %30, i64 0, i32 1
  %31 = call ptr @malloc(i32 64)
  store ptr %31, ptr %memberidx2.i90, align 8
  store i64 0, ptr %31, align 4
  store i64 1, ptr %memberidx.i88, align 4
  %32 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %32, align 8
  %memberidx.i91 = getelementptr inbounds %Array_Expression_, ptr %32, i64 0, i32 2
  store i64 0, ptr %memberidx.i91, align 4
  %memberidx1.i92 = getelementptr inbounds %Array_Expression_, ptr %32, i64 0, i32 3
  store i64 8, ptr %memberidx1.i92, align 4
  %memberidx2.i93 = getelementptr inbounds %Array_Expression_, ptr %32, i64 0, i32 1
  %33 = call ptr @malloc(i32 64)
  store ptr %33, ptr %memberidx2.i93, align 8
  store ptr %5, ptr %33, align 8
  store i64 1, ptr %memberidx.i91, align 4
  store i64 8, ptr %27, align 4
  %memberidx.i.i94 = getelementptr inbounds %Expression, ptr %27, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i94, align 4
  %memberidx1.i.i95 = getelementptr inbounds %Expression, ptr %27, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i95, align 1
  %memberidx.i96 = getelementptr inbounds %StringExpression, ptr %27, i64 0, i32 6
  store ptr %32, ptr %memberidx.i96, align 8
  %memberidx1.i97 = getelementptr inbounds %StringExpression, ptr %27, i64 0, i32 5
  store ptr %30, ptr %memberidx1.i97, align 8
  %memberidx2.i98 = getelementptr inbounds %Expression, ptr %27, i64 0, i32 3
  store ptr %7, ptr %memberidx2.i98, align 8
  %memberidx3.i = getelementptr inbounds %StringExpression, ptr %27, i64 0, i32 4
  store ptr %29, ptr %memberidx3.i, align 8
  store i1 true, ptr %memberidx1.i.i95, align 1
  br label %common.ret

ifend6:                                           ; preds = %ifend, %string___eq__.exit.i
  %is_valid_cast = alloca i1, align 1
  store i1 false, ptr %is_valid_cast, align 1
  %34 = load i64, ptr %7, align 4
  %35 = add i64 %34, -1
  %36 = icmp ult i64 %35, 9
  %37 = load i64, ptr %8, align 4
  %38 = add i64 %37, -1
  %39 = icmp ult i64 %38, 9
  %40 = and i1 %36, %39
  %41 = icmp ult i64 %35, 7
  %42 = icmp eq i64 %37, 12
  %43 = and i1 %41, %42
  %44 = icmp ult i64 %38, 7
  %45 = icmp eq i64 %34, 12
  %46 = and i1 %45, %44
  %47 = select i1 %46, i1 true, i1 %43
  %spec.store.select162 = select i1 %47, i1 true, i1 %40
  store i1 %spec.store.select162, ptr %is_valid_cast, align 1
  %48 = load ptr, ptr %0, align 8
  %49 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %49, ptr noundef nonnull align 8 dereferenceable(6) @164, i64 6, i1 false)
  %50 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %50, align 8
  %memberidx.i.i99 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  store ptr %49, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i100, align 4
  %memberidx2.i.i101 = getelementptr inbounds %string, ptr %50, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i101, align 4
  %51 = call fastcc i1 @is_object(ptr nonnull %8)
  br i1 %51, label %ifend.i107, label %is_buitin.exit113

ifend.i107:                                       ; preds = %ifend6
  %52 = call fastcc ptr @get_class_from_type(ptr %48, ptr nonnull %8)
  %memberidx.i103 = getelementptr inbounds %Class, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i103, align 8
  %memberidx.i.i104 = getelementptr inbounds %string, ptr %53, i64 0, i32 2
  %54 = load i64, ptr %memberidx.i.i104, align 4
  %.not.i.i106 = icmp eq i64 %54, 6
  br i1 %.not.i.i106, label %ifend.i.i110, label %string___eq__.exit.i112

ifend.i.i110:                                     ; preds = %ifend.i107
  %memberidx2.i.i108 = getelementptr inbounds %string, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx2.i.i108, align 8
  %56 = call i64 @memcmp(ptr %55, ptr %49, i64 %54)
  %57 = icmp eq i64 %56, 0
  br label %string___eq__.exit.i112

string___eq__.exit.i112:                          ; preds = %ifend.i.i110, %ifend.i107
  %common.ret.op.i.i111 = phi i1 [ %57, %ifend.i.i110 ], [ false, %ifend.i107 ]
  %58 = load ptr, ptr %52, align 8
  %59 = load i64, ptr %58, align 4
  %60 = icmp eq i64 %59, 1
  %61 = and i1 %common.ret.op.i.i111, %60
  br label %is_buitin.exit113

is_buitin.exit113:                                ; preds = %ifend6, %string___eq__.exit.i112
  %common.ret.op.i102 = phi i1 [ %61, %string___eq__.exit.i112 ], [ false, %ifend6 ]
  %62 = and i1 %36, %common.ret.op.i102
  br i1 %62, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %is_buitin.exit113
  %call = alloca ptr, align 8
  store ptr null, ptr %call, align 8
  %63 = load i64, ptr %7, align 4
  %64 = and i64 %63, -2
  %65 = icmp eq i64 %64, 8
  br i1 %65, label %if.entry26, label %else27

ifend25:                                          ; preds = %is_buitin.exit113, %Array_Expression____sl__.exit
  %exp.0 = phi ptr [ %75, %Array_Expression____sl__.exit ], [ %5, %is_buitin.exit113 ]
  %66 = call fastcc i1 @is_object(ptr nonnull %7)
  %67 = call fastcc i1 @is_object(ptr nonnull %8)
  %68 = and i1 %66, %67
  br i1 %68, label %if.entry35, label %ifend37

if.entry26:                                       ; preds = %if.entry23
  %69 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %69, align 4
  %memberidx.i.i114 = getelementptr inbounds %Expression, ptr %69, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i114, align 4
  %memberidx1.i.i115 = getelementptr inbounds %Expression, ptr %69, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i115, align 1
  %memberidx.i116 = getelementptr inbounds %IntrinsicCall, ptr %69, i64 0, i32 4
  store i64 0, ptr %memberidx.i116, align 4
  %memberidx1.i117 = getelementptr inbounds %IntrinsicCall, ptr %69, i64 0, i32 5
  %70 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %70, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_Expression_, ptr %70, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i8.i = getelementptr inbounds %Array_Expression_, ptr %70, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i, align 4
  %memberidx2.i.i118 = getelementptr inbounds %Array_Expression_, ptr %70, i64 0, i32 1
  %71 = call ptr @malloc(i32 64)
  store ptr %71, ptr %memberidx2.i.i118, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %70, ptr %memberidx1.i117, align 8
  %memberidx4.i120 = getelementptr inbounds %Expression, ptr %69, i64 0, i32 3
  %72 = call ptr @malloc(i32 8)
  store i64 20, ptr %72, align 4
  store ptr %72, ptr %memberidx4.i120, align 8
  store ptr %69, ptr %call, align 8
  br label %ifend28

else27:                                           ; preds = %if.entry23
  %73 = icmp slt i64 %63, 5
  %74 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %74, align 4
  %memberidx.i.i127 = getelementptr inbounds %Expression, ptr %74, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i127, align 4
  %memberidx1.i.i128 = getelementptr inbounds %Expression, ptr %74, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i128, align 1
  %memberidx.i129 = getelementptr inbounds %IntrinsicCall, ptr %74, i64 0, i32 4
  br i1 %73, label %if.entry31, label %else32

ifend28:                                          ; preds = %if.entry31, %else32, %if.entry26
  %75 = load ptr, ptr %call, align 8
  %memberidx34 = getelementptr inbounds %IntrinsicCall, ptr %75, i64 0, i32 5
  %76 = load ptr, ptr %memberidx34, align 8
  %memberidx.i121 = getelementptr inbounds %Array_Expression_, ptr %76, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i121, align 4
  %memberidx1.i122 = getelementptr inbounds %Array_Expression_, ptr %76, i64 0, i32 3
  %78 = load i64, ptr %memberidx1.i122, align 4
  %.not.i = icmp slt i64 %77, %78
  br i1 %.not.i, label %Array_Expression____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %ifend28
  %79 = shl i64 %78, 1
  store i64 %79, ptr %memberidx1.i122, align 4
  %memberidx2.i.i124 = getelementptr inbounds %Array_Expression_, ptr %76, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i124, align 8
  %81 = shl i64 %78, 4
  %82 = call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i.i124, align 8
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %ifend28, %if.entry.i
  %83 = load i64, ptr %memberidx.i121, align 4
  %84 = add nsw i64 %83, 1
  store i64 %84, ptr %memberidx.i121, align 4
  %memberidx4.i125 = getelementptr inbounds %Array_Expression_, ptr %76, i64 0, i32 1
  %85 = load ptr, ptr %memberidx4.i125, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %85, i64 %83
  store ptr %5, ptr %ptridx.i, align 8
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend25

if.entry31:                                       ; preds = %else27
  store i64 1, ptr %memberidx.i129, align 4
  %memberidx1.i130 = getelementptr inbounds %IntrinsicCall, ptr %74, i64 0, i32 5
  %86 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %86, align 8
  %memberidx.i7.i131 = getelementptr inbounds %Array_Expression_, ptr %86, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i131, align 4
  %memberidx1.i8.i132 = getelementptr inbounds %Array_Expression_, ptr %86, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i132, align 4
  %memberidx2.i.i133 = getelementptr inbounds %Array_Expression_, ptr %86, i64 0, i32 1
  %87 = call ptr @malloc(i32 64)
  store ptr %87, ptr %memberidx2.i.i133, align 8
  store i64 0, ptr %memberidx.i7.i131, align 4
  store ptr %86, ptr %memberidx1.i130, align 8
  %memberidx4.i135 = getelementptr inbounds %Expression, ptr %74, i64 0, i32 3
  %88 = call ptr @malloc(i32 8)
  store i64 20, ptr %88, align 4
  store ptr %88, ptr %memberidx4.i135, align 8
  store ptr %74, ptr %call, align 8
  br label %ifend28

else32:                                           ; preds = %else27
  store i64 2, ptr %memberidx.i129, align 4
  %memberidx1.i139 = getelementptr inbounds %IntrinsicCall, ptr %74, i64 0, i32 5
  %89 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %89, align 8
  %memberidx.i7.i140 = getelementptr inbounds %Array_Expression_, ptr %89, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i140, align 4
  %memberidx1.i8.i141 = getelementptr inbounds %Array_Expression_, ptr %89, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i141, align 4
  %memberidx2.i.i142 = getelementptr inbounds %Array_Expression_, ptr %89, i64 0, i32 1
  %90 = call ptr @malloc(i32 64)
  store ptr %90, ptr %memberidx2.i.i142, align 8
  store i64 0, ptr %memberidx.i7.i140, align 4
  store ptr %89, ptr %memberidx1.i139, align 8
  %memberidx4.i144 = getelementptr inbounds %Expression, ptr %74, i64 0, i32 3
  %91 = call ptr @malloc(i32 8)
  store i64 20, ptr %91, align 4
  store ptr %91, ptr %memberidx4.i144, align 8
  store ptr %74, ptr %call, align 8
  br label %ifend28

if.entry35:                                       ; preds = %ifend25
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend37

ifend37:                                          ; preds = %ifend25, %if.entry35
  %92 = load i64, ptr %7, align 4
  %93 = icmp eq i64 %92, 13
  %94 = load i64, ptr %8, align 4
  %95 = icmp eq i64 %94, 13
  %.not = icmp eq i64 %92, 0
  %96 = and i1 %93, %95
  %97 = or i1 %.not, %96
  br i1 %97, label %98, label %99

98:                                               ; preds = %ifend37
  store i1 true, ptr %is_valid_cast, align 1
  br label %99

99:                                               ; preds = %ifend37, %98
  %100 = load i1, ptr %is_valid_cast, align 1
  br i1 %100, label %ifend46, label %if.entry44

if.entry44:                                       ; preds = %99
  %101 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %8)
  %102 = load ptr, ptr %101, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %102, i64 0, i32 5
  %103 = load ptr, ptr %memberidx47, align 8
  %104 = call ptr %103(ptr nonnull %101)
  %105 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %7)
  %106 = load ptr, ptr %105, align 8
  %memberidx48 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %106, i64 0, i32 5
  %107 = load ptr, ptr %memberidx48, align 8
  %108 = call ptr %107(ptr nonnull %105)
  %109 = alloca ptr, align 8
  %110 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %109, ptr nonnull @165, ptr %104, ptr %108)
  %111 = load ptr, ptr %109, align 8
  %112 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i145 = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i145, align 8
  %memberidx1.i146 = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 %110, ptr %memberidx1.i146, align 4
  %memberidx2.i147 = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 %110, ptr %memberidx2.i147, align 4
  tail call void @free(ptr %104)
  tail call void @free(ptr %108)
  %113 = load ptr, ptr %1, align 8
  %114 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i149 = getelementptr inbounds %Compiler, ptr %114, i64 0, i32 6
  %115 = load ptr, ptr %memberidx1.i149, align 8
  %116 = call ptr @malloc(i32 24)
  store i64 5, ptr %116, align 4
  %memberidx1.i.i150 = getelementptr inbounds %FloError, ptr %116, i64 0, i32 2
  store ptr %113, ptr %memberidx1.i.i150, align 8
  %memberidx2.i.i151 = getelementptr inbounds %FloError, ptr %116, i64 0, i32 1
  store ptr %112, ptr %memberidx2.i.i151, align 8
  %memberidx.i.i152 = getelementptr inbounds %Array_FloError_, ptr %115, i64 0, i32 2
  %117 = load i64, ptr %memberidx.i.i152, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %115, i64 0, i32 3
  %118 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i153 = icmp slt i64 %117, %118
  br i1 %.not.i.i153, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry44
  %119 = shl i64 %118, 1
  store i64 %119, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %115, i64 0, i32 1
  %120 = load ptr, ptr %memberidx2.i.i.i, align 8
  %121 = shl i64 %118, 4
  %122 = call ptr @realloc(ptr %120, i64 %121)
  store ptr %122, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry44, %if.entry.i.i
  %123 = load i64, ptr %memberidx.i.i152, align 4
  %124 = add nsw i64 %123, 1
  store i64 %124, ptr %memberidx.i.i152, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %115, i64 0, i32 1
  %125 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %125, i64 %123
  store ptr %116, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend46:                                          ; preds = %99
  %126 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %126, align 4
  %memberidx.i.i154 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i154, align 4
  %memberidx1.i.i155 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i155, align 1
  %memberidx.i156 = getelementptr inbounds %TypeCastExpression, ptr %126, i64 0, i32 4
  store ptr %exp.0, ptr %memberidx.i156, align 8
  %memberidx1.i157 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 3
  store ptr %7, ptr %memberidx1.i157, align 8
  %memberidx3.i159 = getelementptr inbounds %Expression, ptr %exp.0, i64 0, i32 1
  %127 = load i1, ptr %memberidx3.i159, align 1
  store i1 %127, ptr %memberidx1.i.i155, align 1
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_Expression__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Expression__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @TypeChecker_fill_in_call_args(ptr %0, ptr nocapture readonly %1, ptr readonly %2, ptr nocapture readonly %3) unnamed_addr {
for.entry:
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %4, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 1
  %5 = call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 1
  %memberidx.i43 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_Expression____sl__.exit
  %i.062 = phi i64 [ 0, %for.body.lr.ph ], [ %31, %Array_Expression____sl__.exit ]
  %8 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx4, align 4
  %10 = icmp sgt i64 %9, %i.062
  br i1 %10, label %true_block, label %false_block

for.end:                                          ; preds = %Array_Expression____sl__.exit, %for.entry
  %.lcssa = phi i64 [ %6, %for.entry ], [ %32, %Array_Expression____sl__.exit ]
  %memberidx.i39 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %11 = load ptr, ptr %memberidx.i39, align 8
  %memberidx1.i40 = getelementptr inbounds %Compiler, ptr %11, i64 0, i32 6
  %12 = load ptr, ptr %memberidx1.i40, align 8
  %memberidx2.i41 = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx2.i41, align 4
  %14 = icmp sgt i64 %13, 0
  %15 = icmp eq ptr %2, null
  %16 = or i1 %15, %14
  br i1 %16, label %common.ret, label %ifend

true_block:                                       ; preds = %for.body
  %memberidx.i42 = getelementptr inbounds %Array_Type_, ptr %8, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i42, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %17, i64 %i.062
  %18 = load ptr, ptr %ptridx.i, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %19 = call ptr @malloc(i32 8)
  store i64 20, ptr %19, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %18, %true_block ], [ %19, %false_block ]
  %20 = load ptr, ptr %memberidx.i43, align 8
  %ptridx.i44 = getelementptr inbounds ptr, ptr %20, i64 %i.062
  %21 = load ptr, ptr %ptridx.i44, align 8
  %22 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %ternary, ptr %21)
  %23 = load i64, ptr %memberidx.i, align 4
  %24 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %23, %24
  br i1 %.not.i, label %Array_Expression____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %end
  %25 = shl i64 %24, 1
  store i64 %25, ptr %memberidx1.i, align 4
  %26 = load ptr, ptr %memberidx2.i, align 8
  %27 = shl i64 %24, 4
  %28 = call ptr @realloc(ptr %26, i64 %27)
  store ptr %28, ptr %memberidx2.i, align 8
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %end, %if.entry.i
  %29 = add nsw i64 %23, 1
  store i64 %29, ptr %memberidx.i, align 4
  %30 = load ptr, ptr %memberidx2.i, align 8
  %ptridx.i47 = getelementptr inbounds ptr, ptr %30, i64 %23
  store ptr %22, ptr %ptridx.i47, align 8
  %31 = add nuw nsw i64 %i.062, 1
  %32 = load i64, ptr %memberidx2, align 4
  %33 = icmp slt i64 %31, %32
  br i1 %33, label %for.body, label %for.end

common.ret:                                       ; preds = %ifend22, %for.cond14.preheader, %ifend, %for.end
  ret ptr %4

ifend:                                            ; preds = %for.end
  %memberidx6 = getelementptr inbounds %Array_FunctionArg_, ptr %2, i64 0, i32 2
  %34 = load i64, ptr %memberidx6, align 4
  %35 = icmp sgt i64 %34, %.lcssa
  br i1 %35, label %for.cond14.preheader, label %common.ret

for.cond14.preheader:                             ; preds = %ifend
  %36 = load i64, ptr %memberidx6, align 4
  %37 = icmp slt i64 %.lcssa, %36
  br i1 %37, label %for.body15.lr.ph, label %common.ret

for.body15.lr.ph:                                 ; preds = %for.cond14.preheader
  %memberidx.i48 = getelementptr inbounds %Array_FunctionArg_, ptr %2, i64 0, i32 1
  br label %for.body15

for.body15:                                       ; preds = %for.body15.lr.ph, %ifend22
  %storemerge61 = phi i64 [ %.lcssa, %for.body15.lr.ph ], [ %49, %ifend22 ]
  %38 = load ptr, ptr %memberidx.i48, align 8
  %ptridx.i49 = getelementptr inbounds ptr, ptr %38, i64 %storemerge61
  %39 = load ptr, ptr %ptridx.i49, align 8
  %memberidx19 = getelementptr inbounds %FunctionArg, ptr %39, i64 0, i32 6
  %40 = load ptr, ptr %memberidx19, align 8
  %.not = icmp eq ptr %40, null
  br i1 %.not, label %ifend22, label %if.entry20

if.entry20:                                       ; preds = %for.body15
  %41 = load i64, ptr %memberidx.i, align 4
  %42 = load i64, ptr %memberidx1.i, align 4
  %.not.i52 = icmp slt i64 %41, %42
  br i1 %.not.i52, label %Array_Expression____sl__.exit58, label %if.entry.i55

if.entry.i55:                                     ; preds = %if.entry20
  %43 = shl i64 %42, 1
  store i64 %43, ptr %memberidx1.i, align 4
  %44 = load ptr, ptr %memberidx2.i, align 8
  %45 = shl i64 %42, 4
  %46 = call ptr @realloc(ptr %44, i64 %45)
  store ptr %46, ptr %memberidx2.i, align 8
  br label %Array_Expression____sl__.exit58

Array_Expression____sl__.exit58:                  ; preds = %if.entry20, %if.entry.i55
  %47 = add nsw i64 %41, 1
  store i64 %47, ptr %memberidx.i, align 4
  %48 = load ptr, ptr %memberidx2.i, align 8
  %ptridx.i57 = getelementptr inbounds ptr, ptr %48, i64 %41
  store ptr %40, ptr %ptridx.i57, align 8
  br label %ifend22

ifend22:                                          ; preds = %for.body15, %Array_Expression____sl__.exit58
  %49 = add nsw i64 %storemerge61, 1
  %50 = load i64, ptr %memberidx6, align 4
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %for.body15, label %common.ret
}

define internal fastcc void @TypeChecker_add_inherited_props_to_class(ptr %0, ptr nocapture %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc i1 @is_object(ptr %4)
  br i1 %5, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  %6 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %4)
  %7 = load ptr, ptr %6, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i64 0, i32 5
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr %8(ptr nonnull %6)
  %10 = alloca ptr, align 8
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %10, ptr nonnull @138, ptr %9)
  %12 = load ptr, ptr %10, align 8
  %13 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i, align 4
  tail call void @free(ptr %9)
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2, align 8
  %15 = load ptr, ptr %14, align 8
  %memberidx.i49 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %16 = load ptr, ptr %memberidx.i49, align 8
  %memberidx1.i50 = getelementptr inbounds %Compiler, ptr %16, i64 0, i32 6
  %17 = load ptr, ptr %memberidx1.i50, align 8
  %18 = call ptr @malloc(i32 24)
  store i64 5, ptr %18, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %18, i64 0, i32 2
  store ptr %15, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %18, i64 0, i32 1
  store ptr %13, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %17, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %17, i64 0, i32 3
  %20 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %19, %20
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %21 = shl i64 %20, 1
  store i64 %21, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %17, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i.i, align 8
  %23 = shl i64 %20, 4
  %24 = call ptr @realloc(ptr %22, i64 %23)
  store ptr %24, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %25 = load i64, ptr %memberidx.i.i, align 4
  %26 = add nsw i64 %25, 1
  store i64 %26, ptr %memberidx.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %17, i64 0, i32 1
  %27 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %27, i64 %25
  store ptr %18, ptr %ptridx.i.i, align 8
  br label %ifend

ifend:                                            ; preds = %3, %TypeChecker_error.exit
  %28 = load ptr, ptr %0, align 8
  %29 = call fastcc ptr @get_class_from_type(ptr %28, ptr %4)
  %memberidx5 = getelementptr inbounds %Class, ptr %29, i64 0, i32 6
  %30 = load ptr, ptr %memberidx5, align 8
  %31 = call ptr @malloc(i32 25)
  %32 = load ptr, ptr %30, align 8
  %memberidx1.i51 = getelementptr inbounds %Map_string_PropId_, ptr %30, i64 0, i32 1
  %33 = load i64, ptr %memberidx1.i51, align 4
  %memberidx2.i52 = getelementptr inbounds %Map_string_PropId_, ptr %30, i64 0, i32 2
  %34 = load i64, ptr %memberidx2.i52, align 4
  store i1 false, ptr %31, align 1
  %memberidx1.i.i53 = getelementptr inbounds %MapIterator_string_PropId_, ptr %31, i64 0, i32 1
  store ptr %32, ptr %memberidx1.i.i53, align 8
  %memberidx2.i.i54 = getelementptr inbounds %MapIterator_string_PropId_, ptr %31, i64 0, i32 2
  store i64 %33, ptr %memberidx2.i.i54, align 4
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %31, i64 0, i32 3
  store i64 %34, ptr %memberidx3.i.i, align 4
  %35 = add nsw i64 %33, -1
  store i64 %35, ptr %memberidx2.i.i54, align 4
  %36 = icmp sgt i64 %33, 0
  br i1 %36, label %while.entry.i.preheader, label %MapIterator_string_PropId__next.exit

while.entry.i.preheader:                          ; preds = %ifend
  %memberidx1.i.i53.promoted = load ptr, ptr %memberidx1.i.i53, align 8
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %ifend.i
  %37 = phi ptr [ %memberidx1.i.i53.promoted, %while.entry.i.preheader ], [ %incdec.ptr.i, %ifend.i ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %37, i64 1
  %38 = load ptr, ptr %37, align 8
  %.not.i = icmp eq ptr %38, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit.loopexit

ifend.i:                                          ; preds = %while.entry.i
  %39 = load i64, ptr %memberidx2.i.i54, align 4
  %40 = add nsw i64 %39, -1
  store i64 %40, ptr %memberidx2.i.i54, align 4
  %41 = icmp sgt i64 %39, 0
  br i1 %41, label %while.entry.i, label %MapIterator_string_PropId__next.exit.loopexit

MapIterator_string_PropId__next.exit.loopexit:    ; preds = %ifend.i, %while.entry.i
  store ptr %incdec.ptr.i, ptr %memberidx1.i.i53, align 8
  br label %MapIterator_string_PropId__next.exit

MapIterator_string_PropId__next.exit:             ; preds = %MapIterator_string_PropId__next.exit.loopexit, %ifend
  %memberidx3.i.i.promoted = load i64, ptr %memberidx3.i.i, align 4
  %storemerge130132 = add nsw i64 %memberidx3.i.i.promoted, -1
  %storemerge129133 = icmp slt i64 %memberidx3.i.i.promoted, 1
  store i1 %storemerge129133, ptr %31, align 1
  br i1 %storemerge129133, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit
  %.pn.in = getelementptr inbounds %MapIterator_string_PropId_, ptr %31, i64 0, i32 1
  %memberidx10 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx26 = getelementptr inbounds %Class, ptr %1, i64 0, i32 9
  %memberidx32 = getelementptr inbounds %Class, ptr %1, i64 0, i32 8
  %.pn.in.promoted = load ptr, ptr %.pn.in, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit73
  %.pn136 = phi ptr [ %.pn.in.promoted, %for.body.lr.ph ], [ %.pn135, %MapIterator_string_PropId__next.exit73 ]
  %storemerge130134 = phi i64 [ %storemerge130132, %for.body.lr.ph ], [ %storemerge130, %MapIterator_string_PropId__next.exit73 ]
  %storemerge.in = getelementptr inbounds ptr, ptr %.pn136, i64 -1
  %storemerge = load ptr, ptr %storemerge.in, align 8
  %42 = load ptr, ptr %storemerge, align 8
  %memberidx8 = getelementptr inbounds %MapEntry_string_PropId_, ptr %storemerge, i64 0, i32 1
  %43 = load ptr, ptr %memberidx8, align 8
  %44 = load ptr, ptr %0, align 8
  %memberidx.i.i57 = getelementptr inbounds %PropId, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i57, align 8
  %memberidx.i.i.i58 = getelementptr inbounds %Program, ptr %44, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i.i.i58, align 8
  %47 = load i64, ptr %45, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %48, i64 %47
  %49 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i59 = getelementptr inbounds %Module, ptr %49, i64 0, i32 4
  %50 = load ptr, ptr %memberidx2.i.i.i59, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %45, i64 0, i32 2
  %51 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %54 = load i64, ptr %43, align 4
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %if.entry.i, label %ifend.i63

if.entry.i:                                       ; preds = %for.body
  %memberidx1.i60 = getelementptr inbounds %Class, ptr %53, i64 0, i32 5
  %56 = load ptr, ptr %memberidx1.i60, align 8
  %memberidx2.i61 = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %57 = load i64, ptr %memberidx2.i61, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %56, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %58, i64 %57
  %59 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %59, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i63:                                        ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %53, i64 0, i32 4
  %60 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %61 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i62 = getelementptr inbounds ptr, ptr %62, i64 %61
  %63 = load ptr, ptr %ptridx.i.i62, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %63, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i63
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i63 ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %64 = load ptr, ptr %memberidx10, align 8
  %65 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %42)
  %memberidx.i118 = getelementptr inbounds %Map_string_PropId_, ptr %64, i64 0, i32 1
  %66 = load i64, ptr %memberidx.i118, align 4
  %67 = srem i64 %65, %66
  %68 = load ptr, ptr %64, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %68, i64 %67
  %69 = load ptr, ptr %ptridx.i, align 8
  %.not.i119 = icmp eq ptr %69, null
  br i1 %.not.i119, label %while.end.i, label %while.entry.i123.preheader

while.entry.i123.preheader:                       ; preds = %get_class_prop_type.exit
  %memberidx1.i.i121 = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  %memberidx3.i.i125 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  br label %while.entry.i123

while.entry.i123:                                 ; preds = %while.entry.i123.preheader, %else.i
  %hash.0.i = phi i64 [ %83, %else.i ], [ %67, %while.entry.i123.preheader ]
  %70 = load ptr, ptr %64, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %70, i64 %hash.0.i
  %71 = load ptr, ptr %ptridx3.i, align 8
  %72 = load ptr, ptr %71, align 8
  %memberidx.i.i120 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  %73 = load i64, ptr %memberidx.i.i120, align 4
  %74 = load i64, ptr %memberidx1.i.i121, align 4
  %.not.i.i122 = icmp eq i64 %73, %74
  br i1 %.not.i.i122, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i123
  %memberidx2.i.i124 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  %75 = load ptr, ptr %memberidx2.i.i124, align 8
  %76 = load ptr, ptr %memberidx3.i.i125, align 8
  %77 = call i64 @memcmp(ptr %75, ptr %76, i64 %73)
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %get_class_prop_type.exit
  %hash.1.i = phi i64 [ %67, %get_class_prop_type.exit ], [ %hash.0.i, %ifend.i.i ], [ %83, %else.i ]
  %79 = load ptr, ptr %64, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %79, i64 %hash.1.i
  %80 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %80, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i123, %ifend.i.i
  %81 = add nsw i64 %hash.0.i, 1
  %82 = load i64, ptr %memberidx.i118, align 4
  %83 = srem i64 %81, %82
  %84 = load ptr, ptr %64, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %85, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i123

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %80, i64 0, i32 1
  %86 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i126 = phi ptr [ %86, %if.entry10.i ], [ null, %while.end.i ]
  %87 = load ptr, ptr %0, align 8
  %88 = load ptr, ptr %memberidx.i.i57, align 8
  %memberidx.i.i.i97 = getelementptr inbounds %Program, ptr %87, i64 0, i32 1
  %89 = load ptr, ptr %memberidx.i.i.i97, align 8
  %90 = load i64, ptr %88, align 4
  %memberidx.i.i.i.i98 = getelementptr inbounds %Array_Module_, ptr %89, i64 0, i32 1
  %91 = load ptr, ptr %memberidx.i.i.i.i98, align 8
  %ptridx.i.i.i.i99 = getelementptr inbounds ptr, ptr %91, i64 %90
  %92 = load ptr, ptr %ptridx.i.i.i.i99, align 8
  %memberidx2.i.i.i100 = getelementptr inbounds %Module, ptr %92, i64 0, i32 4
  %93 = load ptr, ptr %memberidx2.i.i.i100, align 8
  %memberidx3.i.i.i101 = getelementptr inbounds %TypeId, ptr %88, i64 0, i32 2
  %94 = load i64, ptr %memberidx3.i.i.i101, align 4
  %memberidx.i5.i.i.i102 = getelementptr inbounds %Array_Class_, ptr %93, i64 0, i32 1
  %95 = load ptr, ptr %memberidx.i5.i.i.i102, align 8
  %ptridx.i6.i.i.i103 = getelementptr inbounds ptr, ptr %95, i64 %94
  %96 = load ptr, ptr %ptridx.i6.i.i.i103, align 8
  %97 = load i64, ptr %43, align 4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %if.entry.i111, label %ifend.i117

if.entry.i111:                                    ; preds = %Map_string_PropId____getitem__.exit
  %memberidx1.i106 = getelementptr inbounds %Class, ptr %96, i64 0, i32 5
  %99 = load ptr, ptr %memberidx1.i106, align 8
  %memberidx2.i107 = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %100 = load i64, ptr %memberidx2.i107, align 4
  %memberidx.i12.i108 = getelementptr inbounds %Array_ClassMethod_, ptr %99, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i12.i108, align 8
  %ptridx.i13.i109 = getelementptr inbounds ptr, ptr %101, i64 %100
  %102 = load ptr, ptr %ptridx.i13.i109, align 8
  %memberidx3.i110 = getelementptr inbounds %ClassMethod, ptr %102, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i117:                                       ; preds = %Map_string_PropId____getitem__.exit
  %memberidx4.i112 = getelementptr inbounds %Class, ptr %96, i64 0, i32 4
  %103 = load ptr, ptr %memberidx4.i112, align 8
  %memberidx5.i113 = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %104 = load i64, ptr %memberidx5.i113, align 4
  %memberidx.i11.i114 = getelementptr inbounds %Array_ClassField_, ptr %103, i64 0, i32 1
  %105 = load ptr, ptr %memberidx.i11.i114, align 8
  %ptridx.i.i115 = getelementptr inbounds ptr, ptr %105, i64 %104
  %106 = load ptr, ptr %ptridx.i.i115, align 8
  %memberidx6.i116 = getelementptr inbounds %ClassField, ptr %106, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i111, %ifend.i117
  %common.ret.op.in.i104 = phi ptr [ %memberidx3.i110, %if.entry.i111 ], [ %memberidx6.i116, %ifend.i117 ]
  %common.ret.op.i105 = load i64, ptr %common.ret.op.in.i104, align 4
  br i1 %98, label %if.entry.i89, label %ifend.i95

if.entry.i89:                                     ; preds = %get_class_prop_visibility.exit
  %memberidx1.i84 = getelementptr inbounds %Class, ptr %96, i64 0, i32 5
  %107 = load ptr, ptr %memberidx1.i84, align 8
  %memberidx2.i85 = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %108 = load i64, ptr %memberidx2.i85, align 4
  %memberidx.i12.i86 = getelementptr inbounds %Array_ClassMethod_, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %memberidx.i12.i86, align 8
  %ptridx.i13.i87 = getelementptr inbounds ptr, ptr %109, i64 %108
  %110 = load ptr, ptr %ptridx.i13.i87, align 8
  %memberidx3.i88 = getelementptr inbounds %ClassMethod, ptr %110, i64 0, i32 1
  br label %is_class_prop_static.exit

ifend.i95:                                        ; preds = %get_class_prop_visibility.exit
  %memberidx4.i90 = getelementptr inbounds %Class, ptr %96, i64 0, i32 4
  %111 = load ptr, ptr %memberidx4.i90, align 8
  %memberidx5.i91 = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %112 = load i64, ptr %memberidx5.i91, align 4
  %memberidx.i11.i92 = getelementptr inbounds %Array_ClassField_, ptr %111, i64 0, i32 1
  %113 = load ptr, ptr %memberidx.i11.i92, align 8
  %ptridx.i.i93 = getelementptr inbounds ptr, ptr %113, i64 %112
  %114 = load ptr, ptr %ptridx.i.i93, align 8
  %memberidx6.i94 = getelementptr inbounds %ClassField, ptr %114, i64 0, i32 1
  br label %is_class_prop_static.exit

is_class_prop_static.exit:                        ; preds = %if.entry.i89, %ifend.i95
  %common.ret.op.in.i82 = phi ptr [ %memberidx3.i88, %if.entry.i89 ], [ %memberidx6.i94, %ifend.i95 ]
  %common.ret.op.i83 = load i1, ptr %common.ret.op.in.i82, align 1
  br i1 %common.ret.op.i83, label %for.incr, label %ifend15

for.incr:                                         ; preds = %ifend31, %ifend15, %is_class_prop_static.exit
  %115 = load i64, ptr %memberidx2.i.i54, align 4
  %116 = add nsw i64 %115, -1
  store i64 %116, ptr %memberidx2.i.i54, align 4
  %117 = icmp sgt i64 %115, 0
  br i1 %117, label %while.entry.i68, label %MapIterator_string_PropId__next.exit73

while.entry.i68:                                  ; preds = %for.incr, %ifend.i72
  %118 = phi ptr [ %incdec.ptr.i66, %ifend.i72 ], [ %.pn136, %for.incr ]
  %incdec.ptr.i66 = getelementptr inbounds ptr, ptr %118, i64 1
  %119 = load ptr, ptr %118, align 8
  %.not.i67 = icmp eq ptr %119, null
  br i1 %.not.i67, label %ifend.i72, label %MapIterator_string_PropId__next.exit73

ifend.i72:                                        ; preds = %while.entry.i68
  %120 = load i64, ptr %memberidx2.i.i54, align 4
  %121 = add nsw i64 %120, -1
  store i64 %121, ptr %memberidx2.i.i54, align 4
  %122 = icmp sgt i64 %120, 0
  br i1 %122, label %while.entry.i68, label %MapIterator_string_PropId__next.exit73

MapIterator_string_PropId__next.exit73:           ; preds = %while.entry.i68, %ifend.i72, %for.incr
  %.pn135 = phi ptr [ %.pn136, %for.incr ], [ %incdec.ptr.i66, %ifend.i72 ], [ %incdec.ptr.i66, %while.entry.i68 ]
  %storemerge130 = add nsw i64 %storemerge130134, -1
  %storemerge129 = icmp slt i64 %storemerge130134, 1
  store i1 %storemerge129, ptr %31, align 1
  br i1 %storemerge129, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %MapIterator_string_PropId__next.exit73
  store ptr %.pn135, ptr %.pn.in, align 8
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %MapIterator_string_PropId__next.exit
  %storemerge130.lcssa = phi i64 [ -1, %for.cond.for.end_crit_edge ], [ %storemerge130132, %MapIterator_string_PropId__next.exit ]
  store i64 %storemerge130.lcssa, ptr %memberidx3.i.i, align 4
  tail call void @free(ptr nonnull %31)
  ret void

ifend15:                                          ; preds = %is_class_prop_static.exit
  %123 = icmp ne i64 %common.ret.op.i105, 1
  %124 = load i64, ptr %common.ret.op.i, align 4
  %125 = icmp ne i64 %124, 15
  %.not = or i1 %123, %125
  %126 = icmp eq ptr %common.ret.op.i126, null
  %or.cond = select i1 %.not, i1 %126, i1 false
  br i1 %or.cond, label %if.entry19, label %for.incr

if.entry19:                                       ; preds = %ifend15
  %127 = icmp eq i64 %97, 1
  br i1 %127, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %if.entry19
  %128 = load i64, ptr %memberidx26, align 4
  %129 = add nsw i64 %128, 1
  store i64 %129, ptr %memberidx26, align 4
  br label %ifend25

ifend25:                                          ; preds = %if.entry19, %if.entry23
  %130 = load i64, ptr %43, align 4
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %if.entry29, label %ifend31

if.entry29:                                       ; preds = %ifend25
  %132 = load i64, ptr %memberidx32, align 4
  %133 = add nsw i64 %132, 1
  store i64 %133, ptr %memberidx32, align 4
  br label %ifend31

ifend31:                                          ; preds = %ifend25, %if.entry29
  %134 = load ptr, ptr %memberidx10, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %134, ptr %42, ptr nonnull %43)
  br label %for.incr
}

define internal fastcc ptr @TypeChecker_check_member_access(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx.i = getelementptr inbounds %PropId, ptr %1, i64 0, i32 1
  %4 = load ptr, ptr %memberidx.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 4
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %4, i64 0, i32 2
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i6.i.i, align 8
  %13 = call ptr @malloc(i32 0)
  %14 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i55 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i55, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %15 = load i64, ptr %1, align 4
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Class, ptr %12, i64 0, i32 5
  %17 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %1, i64 0, i32 2
  %18 = load i64, ptr %memberidx3, align 4
  %memberidx.i57 = getelementptr inbounds %Array_ClassMethod_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i57, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 2
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 3
  br label %ifend

else:                                             ; preds = %2
  %memberidx6 = getelementptr inbounds %Class, ptr %12, i64 0, i32 4
  %21 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %PropId, ptr %1, i64 0, i32 2
  %22 = load i64, ptr %memberidx7, align 4
  %memberidx.i58 = getelementptr inbounds %Array_ClassField_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i58, align 8
  %ptridx.i59 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i59, align 8
  %memberidx8 = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 2
  %memberidx9 = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %visibility.0.in = phi ptr [ %memberidx4, %if.entry ], [ %memberidx8, %else ]
  %member_name.0.in = phi ptr [ %memberidx5, %if.entry ], [ %memberidx9, %else ]
  %member_name.0 = load ptr, ptr %member_name.0.in, align 8
  %visibility.0 = load i64, ptr %visibility.0.in, align 4
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %25 = load ptr, ptr %memberidx10, align 8
  %.not = icmp eq ptr %25, null
  br i1 %.not, label %else12, label %if.entry11

if.entry11:                                       ; preds = %ifend
  %26 = load i64, ptr %25, align 4
  %27 = load ptr, ptr %12, align 8
  %28 = load i64, ptr %27, align 4
  %29 = icmp ne i64 %26, %28
  %memberidx19 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %30 = load i64, ptr %memberidx19, align 4
  %memberidx21 = getelementptr inbounds %TypeId, ptr %25, i64 0, i32 2
  %31 = load i64, ptr %memberidx21, align 4
  %32 = icmp ne i64 %30, %31
  %33 = or i1 %29, %32
  %34 = icmp eq i64 %visibility.0, 1
  %or.cond = select i1 %33, i1 %34, i1 false
  br i1 %or.cond, label %if.entry25, label %common.ret

else12:                                           ; preds = %ifend
  %.not53 = icmp eq i64 %visibility.0, 2
  br i1 %.not53, label %common.ret, label %if.entry31

common.ret.sink.split:                            ; preds = %if.entry25, %dump_access.exit
  %.sink67 = phi ptr [ %55, %dump_access.exit ], [ %37, %if.entry25 ]
  %.sink = phi ptr [ %59, %dump_access.exit ], [ %41, %if.entry25 ]
  %common.ret.op.ph = phi ptr [ %63, %dump_access.exit ], [ %45, %if.entry25 ]
  tail call void @free(ptr %.sink67)
  tail call void @free(ptr %.sink)
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %else12, %if.entry11
  %common.ret.op = phi ptr [ null, %if.entry11 ], [ null, %else12 ], [ %common.ret.op.ph, %common.ret.sink.split ]
  ret ptr %common.ret.op

if.entry25:                                       ; preds = %if.entry11
  %35 = load ptr, ptr %member_name.0, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i64 0, i32 5
  %36 = load ptr, ptr %memberidx28, align 8
  %37 = call ptr %36(ptr nonnull %member_name.0)
  %memberidx29 = getelementptr inbounds %Class, ptr %12, i64 0, i32 1
  %38 = load ptr, ptr %memberidx29, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i64 0, i32 5
  %40 = load ptr, ptr %memberidx30, align 8
  %41 = call ptr %40(ptr nonnull %38)
  %42 = alloca ptr, align 8
  %43 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %42, ptr nonnull @172, ptr %37, ptr %41)
  %44 = load ptr, ptr %42, align 8
  %45 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i60 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i60, align 8
  %memberidx1.i61 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 %43, ptr %memberidx1.i61, align 4
  %memberidx2.i62 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 %43, ptr %memberidx2.i62, align 4
  br label %common.ret.sink.split

if.entry31:                                       ; preds = %else12
  %46 = load ptr, ptr %member_name.0, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx34, align 8
  %48 = call ptr %47(ptr nonnull %member_name.0)
  %49 = icmp eq i64 %visibility.0, 1
  br i1 %49, label %if.entry.i, label %ifend3.i

if.entry.i:                                       ; preds = %if.entry31
  %50 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %50, ptr noundef nonnull align 8 dereferenceable(7) @46, i64 7, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry31
  %51 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %51, ptr noundef nonnull align 8 dereferenceable(9) @48, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i, %ifend3.i
  %.sink72 = phi ptr [ %50, %if.entry.i ], [ %51, %ifend3.i ]
  %.sink70 = phi i64 [ 7, %if.entry.i ], [ 9, %ifend3.i ]
  %52 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %52, align 8
  %memberidx.i.i.i63 = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  store ptr %.sink72, ptr %memberidx.i.i.i63, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  store i64 %.sink70, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 3
  store i64 %.sink70, ptr %memberidx2.i.i.i, align 4
  %53 = load ptr, ptr %52, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i64 0, i32 5
  %54 = load ptr, ptr %memberidx35, align 8
  %55 = call ptr %54(ptr nonnull %52)
  %memberidx36 = getelementptr inbounds %Class, ptr %12, i64 0, i32 1
  %56 = load ptr, ptr %memberidx36, align 8
  %57 = load ptr, ptr %56, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %57, i64 0, i32 5
  %58 = load ptr, ptr %memberidx37, align 8
  %59 = call ptr %58(ptr nonnull %56)
  %60 = alloca ptr, align 8
  %61 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %60, ptr nonnull @173, ptr %48, ptr %55, ptr %59)
  %62 = load ptr, ptr %60, align 8
  %63 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %63, align 8
  %memberidx.i54 = getelementptr inbounds %string, ptr %63, i64 0, i32 1
  store ptr %62, ptr %memberidx.i54, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %63, i64 0, i32 2
  store i64 %61, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %63, i64 0, i32 3
  store i64 %61, ptr %memberidx2.i, align 4
  tail call void @free(ptr %48)
  br label %common.ret.sink.split
}

define internal fastcc ptr @TypeChecker_check_can_return(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ReturnStatementNode, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx.i, align 8
  %.not.i = icmp eq ptr %4, null
  br i1 %.not.i, label %ifend.i, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %5 = load ptr, ptr %0, align 8
  %memberidx.i.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %6, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %15 = load i64, ptr %4, align 4
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %if.entry.i.i, label %ifend.i.i

if.entry.i.i:                                     ; preds = %if.entry.i
  %memberidx1.i.i = getelementptr inbounds %Class, ptr %14, i64 0, i32 5
  %17 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

ifend.i.i:                                        ; preds = %if.entry.i
  %memberidx4.i.i = getelementptr inbounds %Class, ptr %14, i64 0, i32 4
  %21 = load ptr, ptr %memberidx4.i.i, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 2
  %22 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

ifend.i:                                          ; preds = %2
  %memberidx.i.i7.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %25 = load i64, ptr %memberidx.i.i7.i, align 4
  %26 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i8.i = getelementptr inbounds %Array_Module_, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i.i.i8.i, align 8
  %ptridx.i.i.i.i9.i = getelementptr inbounds ptr, ptr %28, i64 %25
  %29 = load ptr, ptr %ptridx.i.i.i.i9.i, align 8
  %memberidx.i.i = getelementptr inbounds %Module, ptr %29, i64 0, i32 5
  %30 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i10.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 3
  %31 = load ptr, ptr %memberidx1.i10.i, align 8
  %memberidx2.i11.i = getelementptr inbounds %VarId, ptr %31, i64 0, i32 2
  %32 = load i64, ptr %memberidx2.i11.i, align 4
  %memberidx.i4.i.i = getelementptr inbounds %Array_Function_, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i4.i.i, align 8
  %ptridx.i.i12.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i12.i, align 8
  %memberidx3.i = getelementptr inbounds %Function, ptr %34, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

TypeChecker_get_current_function_type.exit:       ; preds = %if.entry.i.i, %ifend.i.i, %ifend.i
  %common.ret.op.i.in = phi ptr [ %memberidx3.i, %ifend.i ], [ %memberidx3.i.i, %if.entry.i.i ], [ %memberidx6.i.i, %ifend.i.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.i.in, align 8
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 2
  %35 = load ptr, ptr %memberidx1, align 8
  %36 = tail call ptr @malloc(i32 16)
  store i64 7, ptr %36, align 4
  %memberidx.i34 = getelementptr inbounds %ReturnStatement, ptr %36, i64 0, i32 1
  store ptr null, ptr %memberidx.i34, align 8
  %.not = icmp eq ptr %3, null
  br i1 %.not, label %else, label %if.entry

if.entry:                                         ; preds = %TypeChecker_get_current_function_type.exit
  %37 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %35, ptr nonnull %3)
  %memberidx.i35 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %38 = load ptr, ptr %memberidx.i35, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %38, i64 0, i32 6
  %39 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i, align 4
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %common.ret, label %ifend4

else:                                             ; preds = %TypeChecker_get_current_function_type.exit
  %42 = load i64, ptr %35, align 4
  %.not33 = icmp eq i64 %42, 10
  br i1 %.not33, label %common.ret, label %if.entry15

common.ret:                                       ; preds = %ifend8, %else, %if.entry, %TypeChecker_error.exit62, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit62 ], [ null, %if.entry ], [ %36, %else ], [ %36, %ifend8 ]
  ret ptr %common.ret.op

ifend4:                                           ; preds = %if.entry
  %memberidx5 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %43 = load ptr, ptr %memberidx5, align 8
  %44 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %35, ptr %43)
  br i1 %44, label %ifend8, label %if.entry6

if.entry6:                                        ; preds = %ifend4
  %45 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %35)
  %46 = load ptr, ptr %45, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx9, align 8
  %48 = call ptr %47(ptr nonnull %45)
  %49 = load ptr, ptr %memberidx5, align 8
  %50 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %49)
  %51 = load ptr, ptr %50, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx11, align 8
  %53 = call ptr %52(ptr nonnull %50)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %54, ptr nonnull @208, ptr %48, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i36 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i36, align 8
  %memberidx1.i37 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i37, align 4
  %memberidx2.i38 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i38, align 4
  tail call void @free(ptr %48)
  tail call void @free(ptr %53)
  %58 = load ptr, ptr %3, align 8
  %59 = load ptr, ptr %memberidx.i35, align 8
  %memberidx1.i40 = getelementptr inbounds %Compiler, ptr %59, i64 0, i32 6
  %60 = load ptr, ptr %memberidx1.i40, align 8
  %61 = call ptr @malloc(i32 24)
  store i64 5, ptr %61, align 4
  %memberidx1.i.i41 = getelementptr inbounds %FloError, ptr %61, i64 0, i32 2
  store ptr %58, ptr %memberidx1.i.i41, align 8
  %memberidx2.i.i42 = getelementptr inbounds %FloError, ptr %61, i64 0, i32 1
  store ptr %57, ptr %memberidx2.i.i42, align 8
  %memberidx.i.i43 = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 2
  %62 = load i64, ptr %memberidx.i.i43, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 3
  %63 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %62, %63
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i45

if.entry.i.i45:                                   ; preds = %if.entry6
  %64 = shl i64 %63, 1
  store i64 %64, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i.i.i, align 8
  %66 = shl i64 %63, 4
  %67 = call ptr @realloc(ptr %65, i64 %66)
  store ptr %67, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry6, %if.entry.i.i45
  %68 = load i64, ptr %memberidx.i.i43, align 4
  %69 = add nsw i64 %68, 1
  store i64 %69, ptr %memberidx.i.i43, align 4
  %memberidx4.i.i46 = getelementptr inbounds %Array_FloError_, ptr %60, i64 0, i32 1
  %70 = load ptr, ptr %memberidx4.i.i46, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %70, i64 %68
  store ptr %61, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  store ptr %37, ptr %memberidx.i34, align 8
  br label %common.ret

if.entry15:                                       ; preds = %else
  %71 = call ptr @malloc(i32 32)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %71, ptr noundef nonnull align 8 dereferenceable(32) @209, i64 32, i1 false)
  %72 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i.i47 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i.i47, align 8
  %memberidx1.i.i48 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i48, align 4
  %memberidx2.i.i49 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i49, align 4
  %73 = load ptr, ptr %1, align 8
  %memberidx.i50 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %74 = load ptr, ptr %memberidx.i50, align 8
  %memberidx1.i51 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i51, align 8
  %76 = call ptr @malloc(i32 24)
  store i64 5, ptr %76, align 4
  %memberidx1.i.i52 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 2
  store ptr %73, ptr %memberidx1.i.i52, align 8
  %memberidx2.i.i53 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 1
  store ptr %72, ptr %memberidx2.i.i53, align 8
  %memberidx.i.i54 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i.i54, align 4
  %memberidx1.i2.i55 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 3
  %78 = load i64, ptr %memberidx1.i2.i55, align 4
  %.not.i.i56 = icmp slt i64 %77, %78
  br i1 %.not.i.i56, label %TypeChecker_error.exit62, label %if.entry.i.i59

if.entry.i.i59:                                   ; preds = %if.entry15
  %79 = shl i64 %78, 1
  store i64 %79, ptr %memberidx1.i2.i55, align 4
  %memberidx2.i.i.i58 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i.i58, align 8
  %81 = shl i64 %78, 4
  %82 = call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i.i.i58, align 8
  br label %TypeChecker_error.exit62

TypeChecker_error.exit62:                         ; preds = %if.entry15, %if.entry.i.i59
  %83 = load i64, ptr %memberidx.i.i54, align 4
  %84 = add nsw i64 %83, 1
  store i64 %84, ptr %memberidx.i.i54, align 4
  %memberidx4.i.i60 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %85 = load ptr, ptr %memberidx4.i.i60, align 8
  %ptridx.i.i61 = getelementptr inbounds ptr, ptr %85, i64 %83
  store ptr %76, ptr %ptridx.i.i61, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_var_declaration(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %4)
  %.not.i = icmp eq ptr %5, null
  br i1 %.not.i, label %ifend, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 2
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %end20, %end, %ifend53, %TypeChecker_error.exit176, %TypeChecker_error.exit160, %TypeChecker_error.exit144, %TypeChecker_error.exit117, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit117 ], [ null, %TypeChecker_error.exit144 ], [ null, %TypeChecker_error.exit160 ], [ null, %TypeChecker_error.exit176 ], [ %177, %ifend53 ], [ null, %end ], [ null, %end20 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %if.entry.i
  %8 = load ptr, ptr %4, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 5
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr %9(ptr nonnull %4)
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %11, ptr nonnull @93, ptr %10)
  %13 = load ptr, ptr %11, align 8
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i, align 4
  tail call void @free(ptr %10)
  %15 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4, align 8
  %memberidx.i93 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i93, align 8
  %memberidx1.i94 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i94, align 8
  %19 = call ptr @malloc(i32 24)
  store i64 1, ptr %19, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 2
  store ptr %16, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 1
  store ptr %14, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 3
  %21 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %20, %21
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %22 = shl i64 %21, 1
  store i64 %22, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i.i, align 8
  %24 = shl i64 %21, 4
  %25 = call ptr @realloc(ptr %23, i64 %24)
  store ptr %25, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %26 = load i64, ptr %memberidx.i.i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %memberidx.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %28 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %28, i64 %26
  store ptr %19, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2, %if.entry.i
  %29 = load ptr, ptr %0, align 8
  %memberidx1.i95 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %30 = load ptr, ptr %memberidx1.i95, align 8
  %memberidx.i.i96 = getelementptr inbounds %Program, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i.i96, align 8
  %32 = load i64, ptr %30, align 4
  %memberidx.i.i.i97 = getelementptr inbounds %Array_Module_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i.i97, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i98 = getelementptr inbounds %Module, ptr %34, i64 0, i32 8
  %35 = load ptr, ptr %memberidx2.i.i98, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %30, i64 0, i32 1
  %36 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx.i6.i.i, align 8
  %var_type = alloca ptr, align 8
  %memberidx5 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 3
  %39 = load ptr, ptr %memberidx5, align 8
  %.not = icmp eq ptr %39, null
  br i1 %.not, label %false_block, label %true_block

true_block:                                       ; preds = %ifend
  %40 = call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %39)
  br label %end

false_block:                                      ; preds = %ifend
  %41 = call ptr @malloc(i32 8)
  store i64 20, ptr %41, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %40, %true_block ], [ %41, %false_block ]
  store ptr %ternary, ptr %var_type, align 8
  %memberidx.i99 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %42 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i100 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i100, align 8
  %memberidx2.i101 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx2.i101, align 4
  %45 = icmp sgt i64 %44, 0
  br i1 %45, label %common.ret, label %ifend9

ifend9:                                           ; preds = %end
  %memberidx10 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 4
  %46 = load ptr, ptr %memberidx10, align 8
  %47 = icmp eq ptr %46, null
  %48 = load i64, ptr %ternary, align 4
  %49 = icmp eq i64 %48, 20
  %50 = and i1 %47, %49
  br i1 %50, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %ifend9
  %51 = load ptr, ptr %4, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx15, align 8
  %53 = call ptr %52(ptr nonnull %4)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %54, ptr nonnull @197, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i102 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i103, align 4
  %memberidx2.i104 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i104, align 4
  tail call void @free(ptr %53)
  %58 = load ptr, ptr %memberidx, align 8
  %memberidx17 = getelementptr inbounds %Token, ptr %58, i64 0, i32 1
  %59 = load ptr, ptr %memberidx17, align 8
  %60 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i106 = getelementptr inbounds %Compiler, ptr %60, i64 0, i32 6
  %61 = load ptr, ptr %memberidx1.i106, align 8
  %62 = call ptr @malloc(i32 24)
  store i64 4, ptr %62, align 4
  %memberidx1.i.i107 = getelementptr inbounds %FloError, ptr %62, i64 0, i32 2
  store ptr %59, ptr %memberidx1.i.i107, align 8
  %memberidx2.i.i108 = getelementptr inbounds %FloError, ptr %62, i64 0, i32 1
  store ptr %57, ptr %memberidx2.i.i108, align 8
  %memberidx.i.i109 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 2
  %63 = load i64, ptr %memberidx.i.i109, align 4
  %memberidx1.i2.i110 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 3
  %64 = load i64, ptr %memberidx1.i2.i110, align 4
  %.not.i.i111 = icmp slt i64 %63, %64
  br i1 %.not.i.i111, label %TypeChecker_error.exit117, label %if.entry.i.i114

if.entry.i.i114:                                  ; preds = %if.entry12
  %65 = shl i64 %64, 1
  store i64 %65, ptr %memberidx1.i2.i110, align 4
  %memberidx2.i.i.i113 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 1
  %66 = load ptr, ptr %memberidx2.i.i.i113, align 8
  %67 = shl i64 %64, 4
  %68 = call ptr @realloc(ptr %66, i64 %67)
  store ptr %68, ptr %memberidx2.i.i.i113, align 8
  br label %TypeChecker_error.exit117

TypeChecker_error.exit117:                        ; preds = %if.entry12, %if.entry.i.i114
  %69 = load i64, ptr %memberidx.i.i109, align 4
  %70 = add nsw i64 %69, 1
  store i64 %70, ptr %memberidx.i.i109, align 4
  %memberidx4.i.i115 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 1
  %71 = load ptr, ptr %memberidx4.i.i115, align 8
  %ptridx.i.i116 = getelementptr inbounds ptr, ptr %71, i64 %69
  store ptr %62, ptr %ptridx.i.i116, align 8
  br label %common.ret

ifend14:                                          ; preds = %ifend9
  br i1 %47, label %end20, label %true_block18

true_block18:                                     ; preds = %ifend14
  %72 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr nonnull %ternary, ptr nonnull %46)
  br label %end20

end20:                                            ; preds = %ifend14, %true_block18
  %ternary23 = phi ptr [ %72, %true_block18 ], [ null, %ifend14 ]
  %73 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i119 = getelementptr inbounds %Compiler, ptr %73, i64 0, i32 6
  %74 = load ptr, ptr %memberidx1.i119, align 8
  %memberidx2.i120 = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 2
  %75 = load i64, ptr %memberidx2.i120, align 4
  %76 = icmp sgt i64 %75, 0
  br i1 %76, label %common.ret, label %ifend26

ifend26:                                          ; preds = %end20
  %.not89 = icmp eq ptr %ternary23, null
  br i1 %.not89, label %ifend29, label %if.entry27

if.entry27:                                       ; preds = %ifend26
  %memberidx.i121 = getelementptr inbounds %Expression, ptr %ternary23, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i121, align 4
  %78 = icmp eq i64 %77, 5
  %memberidx30 = getelementptr inbounds %Expression, ptr %ternary23, i64 0, i32 3
  %79 = load ptr, ptr %memberidx30, align 8
  %80 = load i64, ptr %79, align 4
  %81 = icmp eq i64 %80, 20
  %82 = and i1 %78, %81
  br i1 %82, label %if.entry32, label %ifend34

ifend29:                                          ; preds = %if.entry46, %ifend40, %ifend26
  %memberidx50 = getelementptr inbounds %Scope, ptr %38, i64 0, i32 1
  %83 = load ptr, ptr %memberidx50, align 8
  %84 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr %4)
  %memberidx.i122 = getelementptr inbounds %Map_string_VarId_, ptr %83, i64 0, i32 1
  %85 = load i64, ptr %memberidx.i122, align 4
  %86 = srem i64 %84, %85
  %87 = load ptr, ptr %83, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %87, i64 %86
  %88 = load ptr, ptr %ptridx.i, align 8
  %.not.i123 = icmp eq ptr %88, null
  br i1 %.not.i123, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %ifend29
  %memberidx1.i.i125 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i128 = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %102, %else.i ], [ %86, %while.entry.i.preheader ]
  %89 = load ptr, ptr %83, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %89, i64 %hash.0.i
  %90 = load ptr, ptr %ptridx3.i, align 8
  %91 = load ptr, ptr %90, align 8
  %memberidx.i.i124 = getelementptr inbounds %string, ptr %91, i64 0, i32 2
  %92 = load i64, ptr %memberidx.i.i124, align 4
  %93 = load i64, ptr %memberidx1.i.i125, align 4
  %.not.i.i126 = icmp eq i64 %92, %93
  br i1 %.not.i.i126, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i127 = getelementptr inbounds %string, ptr %91, i64 0, i32 1
  %94 = load ptr, ptr %memberidx2.i.i127, align 8
  %95 = load ptr, ptr %memberidx3.i.i128, align 8
  %96 = call i64 @memcmp(ptr %94, ptr %95, i64 %92)
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %ifend29
  %hash.1.i = phi i64 [ %86, %ifend29 ], [ %hash.0.i, %ifend.i.i ], [ %102, %else.i ]
  %98 = load ptr, ptr %83, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %98, i64 %hash.1.i
  %99 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %99, null
  br i1 %.not29.i, label %ifend53, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %100 = add nsw i64 %hash.0.i, 1
  %101 = load i64, ptr %memberidx.i122, align 4
  %102 = srem i64 %100, %101
  %103 = load ptr, ptr %83, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %103, i64 %102
  %104 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %104, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_VarId_, ptr %99, i64 0, i32 1
  %105 = load ptr, ptr %memberidx15.i, align 8
  %phi.cmp = icmp eq ptr %105, null
  br i1 %phi.cmp, label %ifend53, label %if.entry51

if.entry32:                                       ; preds = %if.entry27
  %106 = call ptr @malloc(i32 69)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(69) %106, ptr noundef nonnull align 8 dereferenceable(69) @198, i64 69, i1 false)
  %107 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %107, align 8
  %memberidx.i.i129 = getelementptr inbounds %string, ptr %107, i64 0, i32 1
  store ptr %106, ptr %memberidx.i.i129, align 8
  %memberidx1.i.i130 = getelementptr inbounds %string, ptr %107, i64 0, i32 2
  store i64 69, ptr %memberidx1.i.i130, align 4
  %memberidx2.i.i131 = getelementptr inbounds %string, ptr %107, i64 0, i32 3
  store i64 69, ptr %memberidx2.i.i131, align 4
  %108 = load ptr, ptr %1, align 8
  %109 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i133 = getelementptr inbounds %Compiler, ptr %109, i64 0, i32 6
  %110 = load ptr, ptr %memberidx1.i133, align 8
  %111 = call ptr @malloc(i32 24)
  store i64 5, ptr %111, align 4
  %memberidx1.i.i134 = getelementptr inbounds %FloError, ptr %111, i64 0, i32 2
  store ptr %108, ptr %memberidx1.i.i134, align 8
  %memberidx2.i.i135 = getelementptr inbounds %FloError, ptr %111, i64 0, i32 1
  store ptr %107, ptr %memberidx2.i.i135, align 8
  %memberidx.i.i136 = getelementptr inbounds %Array_FloError_, ptr %110, i64 0, i32 2
  %112 = load i64, ptr %memberidx.i.i136, align 4
  %memberidx1.i2.i137 = getelementptr inbounds %Array_FloError_, ptr %110, i64 0, i32 3
  %113 = load i64, ptr %memberidx1.i2.i137, align 4
  %.not.i.i138 = icmp slt i64 %112, %113
  br i1 %.not.i.i138, label %TypeChecker_error.exit144, label %if.entry.i.i141

if.entry.i.i141:                                  ; preds = %if.entry32
  %114 = shl i64 %113, 1
  store i64 %114, ptr %memberidx1.i2.i137, align 4
  %memberidx2.i.i.i140 = getelementptr inbounds %Array_FloError_, ptr %110, i64 0, i32 1
  %115 = load ptr, ptr %memberidx2.i.i.i140, align 8
  %116 = shl i64 %113, 4
  %117 = call ptr @realloc(ptr %115, i64 %116)
  store ptr %117, ptr %memberidx2.i.i.i140, align 8
  br label %TypeChecker_error.exit144

TypeChecker_error.exit144:                        ; preds = %if.entry32, %if.entry.i.i141
  %118 = load i64, ptr %memberidx.i.i136, align 4
  %119 = add nsw i64 %118, 1
  store i64 %119, ptr %memberidx.i.i136, align 4
  %memberidx4.i.i142 = getelementptr inbounds %Array_FloError_, ptr %110, i64 0, i32 1
  %120 = load ptr, ptr %memberidx4.i.i142, align 8
  %ptridx.i.i143 = getelementptr inbounds ptr, ptr %120, i64 %118
  store ptr %111, ptr %ptridx.i.i143, align 8
  br label %common.ret

ifend34:                                          ; preds = %if.entry27
  %121 = load i64, ptr %ternary, align 4
  %122 = icmp eq i64 %121, 20
  %123 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %ternary, ptr nonnull %79)
  %124 = or i1 %123, %122
  br i1 %124, label %ifend40, label %if.entry38

if.entry38:                                       ; preds = %ifend34
  %125 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %ternary)
  %126 = load ptr, ptr %125, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %126, i64 0, i32 5
  %127 = load ptr, ptr %memberidx41, align 8
  %128 = call ptr %127(ptr nonnull %125)
  %129 = load ptr, ptr %memberidx30, align 8
  %130 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %129)
  %131 = load ptr, ptr %130, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %131, i64 0, i32 5
  %132 = load ptr, ptr %memberidx43, align 8
  %133 = call ptr %132(ptr nonnull %130)
  %134 = alloca ptr, align 8
  %135 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %134, ptr nonnull @199, ptr %128, ptr %133)
  %136 = load ptr, ptr %134, align 8
  %137 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %137, align 8
  %memberidx.i145 = getelementptr inbounds %string, ptr %137, i64 0, i32 1
  store ptr %136, ptr %memberidx.i145, align 8
  %memberidx1.i146 = getelementptr inbounds %string, ptr %137, i64 0, i32 2
  store i64 %135, ptr %memberidx1.i146, align 4
  %memberidx2.i147 = getelementptr inbounds %string, ptr %137, i64 0, i32 3
  store i64 %135, ptr %memberidx2.i147, align 4
  tail call void @free(ptr %128)
  tail call void @free(ptr %133)
  %138 = load ptr, ptr %1, align 8
  %139 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i149 = getelementptr inbounds %Compiler, ptr %139, i64 0, i32 6
  %140 = load ptr, ptr %memberidx1.i149, align 8
  %141 = call ptr @malloc(i32 24)
  store i64 5, ptr %141, align 4
  %memberidx1.i.i150 = getelementptr inbounds %FloError, ptr %141, i64 0, i32 2
  store ptr %138, ptr %memberidx1.i.i150, align 8
  %memberidx2.i.i151 = getelementptr inbounds %FloError, ptr %141, i64 0, i32 1
  store ptr %137, ptr %memberidx2.i.i151, align 8
  %memberidx.i.i152 = getelementptr inbounds %Array_FloError_, ptr %140, i64 0, i32 2
  %142 = load i64, ptr %memberidx.i.i152, align 4
  %memberidx1.i2.i153 = getelementptr inbounds %Array_FloError_, ptr %140, i64 0, i32 3
  %143 = load i64, ptr %memberidx1.i2.i153, align 4
  %.not.i.i154 = icmp slt i64 %142, %143
  br i1 %.not.i.i154, label %TypeChecker_error.exit160, label %if.entry.i.i157

if.entry.i.i157:                                  ; preds = %if.entry38
  %144 = shl i64 %143, 1
  store i64 %144, ptr %memberidx1.i2.i153, align 4
  %memberidx2.i.i.i156 = getelementptr inbounds %Array_FloError_, ptr %140, i64 0, i32 1
  %145 = load ptr, ptr %memberidx2.i.i.i156, align 8
  %146 = shl i64 %143, 4
  %147 = call ptr @realloc(ptr %145, i64 %146)
  store ptr %147, ptr %memberidx2.i.i.i156, align 8
  br label %TypeChecker_error.exit160

TypeChecker_error.exit160:                        ; preds = %if.entry38, %if.entry.i.i157
  %148 = load i64, ptr %memberidx.i.i152, align 4
  %149 = add nsw i64 %148, 1
  store i64 %149, ptr %memberidx.i.i152, align 4
  %memberidx4.i.i158 = getelementptr inbounds %Array_FloError_, ptr %140, i64 0, i32 1
  %150 = load ptr, ptr %memberidx4.i.i158, align 8
  %ptridx.i.i159 = getelementptr inbounds ptr, ptr %150, i64 %148
  store ptr %141, ptr %ptridx.i.i159, align 8
  br label %common.ret

ifend40:                                          ; preds = %ifend34
  %151 = load i64, ptr %ternary, align 4
  %152 = icmp eq i64 %151, 20
  br i1 %152, label %if.entry46, label %ifend29

if.entry46:                                       ; preds = %ifend40
  %153 = load ptr, ptr %memberidx30, align 8
  store ptr %153, ptr %var_type, align 8
  br label %ifend29

if.entry51:                                       ; preds = %if.entry10.i
  %154 = load ptr, ptr %4, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %154, i64 0, i32 5
  %155 = load ptr, ptr %memberidx54, align 8
  %156 = call ptr %155(ptr nonnull %4)
  %157 = alloca ptr, align 8
  %158 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %157, ptr nonnull @200, ptr %156)
  %159 = load ptr, ptr %157, align 8
  %160 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %160, align 8
  %memberidx.i161 = getelementptr inbounds %string, ptr %160, i64 0, i32 1
  store ptr %159, ptr %memberidx.i161, align 8
  %memberidx1.i162 = getelementptr inbounds %string, ptr %160, i64 0, i32 2
  store i64 %158, ptr %memberidx1.i162, align 4
  %memberidx2.i163 = getelementptr inbounds %string, ptr %160, i64 0, i32 3
  store i64 %158, ptr %memberidx2.i163, align 4
  tail call void @free(ptr %156)
  %161 = load ptr, ptr %memberidx, align 8
  %memberidx56 = getelementptr inbounds %Token, ptr %161, i64 0, i32 1
  %162 = load ptr, ptr %memberidx56, align 8
  %163 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i165 = getelementptr inbounds %Compiler, ptr %163, i64 0, i32 6
  %164 = load ptr, ptr %memberidx1.i165, align 8
  %165 = call ptr @malloc(i32 24)
  store i64 1, ptr %165, align 4
  %memberidx1.i.i166 = getelementptr inbounds %FloError, ptr %165, i64 0, i32 2
  store ptr %162, ptr %memberidx1.i.i166, align 8
  %memberidx2.i.i167 = getelementptr inbounds %FloError, ptr %165, i64 0, i32 1
  store ptr %160, ptr %memberidx2.i.i167, align 8
  %memberidx.i.i168 = getelementptr inbounds %Array_FloError_, ptr %164, i64 0, i32 2
  %166 = load i64, ptr %memberidx.i.i168, align 4
  %memberidx1.i2.i169 = getelementptr inbounds %Array_FloError_, ptr %164, i64 0, i32 3
  %167 = load i64, ptr %memberidx1.i2.i169, align 4
  %.not.i.i170 = icmp slt i64 %166, %167
  br i1 %.not.i.i170, label %TypeChecker_error.exit176, label %if.entry.i.i173

if.entry.i.i173:                                  ; preds = %if.entry51
  %168 = shl i64 %167, 1
  store i64 %168, ptr %memberidx1.i2.i169, align 4
  %memberidx2.i.i.i172 = getelementptr inbounds %Array_FloError_, ptr %164, i64 0, i32 1
  %169 = load ptr, ptr %memberidx2.i.i.i172, align 8
  %170 = shl i64 %167, 4
  %171 = call ptr @realloc(ptr %169, i64 %170)
  store ptr %171, ptr %memberidx2.i.i.i172, align 8
  br label %TypeChecker_error.exit176

TypeChecker_error.exit176:                        ; preds = %if.entry51, %if.entry.i.i173
  %172 = load i64, ptr %memberidx.i.i168, align 4
  %173 = add nsw i64 %172, 1
  store i64 %173, ptr %memberidx.i.i168, align 4
  %memberidx4.i.i174 = getelementptr inbounds %Array_FloError_, ptr %164, i64 0, i32 1
  %174 = load ptr, ptr %memberidx4.i.i174, align 8
  %ptridx.i.i175 = getelementptr inbounds ptr, ptr %174, i64 %172
  store ptr %165, ptr %ptridx.i.i175, align 8
  br label %common.ret

ifend53:                                          ; preds = %while.end.i, %if.entry10.i
  %175 = load ptr, ptr %var_type, align 8
  %176 = call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr %4, ptr %ternary23, ptr %175)
  %177 = tail call ptr @malloc(i32 25)
  %memberidx57 = getelementptr inbounds %Var, ptr %176, i64 0, i32 1
  %178 = load ptr, ptr %memberidx57, align 8
  store i64 1, ptr %177, align 4
  %memberidx.i177 = getelementptr inbounds %VarDeclaration, ptr %177, i64 0, i32 2
  store ptr %178, ptr %memberidx.i177, align 8
  %memberidx1.i178 = getelementptr inbounds %VarDeclaration, ptr %177, i64 0, i32 1
  store ptr %4, ptr %memberidx1.i178, align 8
  %memberidx2.i179 = getelementptr inbounds %VarDeclaration, ptr %177, i64 0, i32 3
  store i1 false, ptr %memberidx2.i179, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_const_declaration(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 8
  %11 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %6, i64 0, i32 1
  %12 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i.i, align 8
  %15 = call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nonnull %0, ptr %4)
  %.not.i = icmp eq ptr %15, null
  br i1 %.not.i, label %TypeChecker_is_constant_in_scope.exit, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %16 = load i64, ptr %15, align 4
  %17 = icmp eq i64 %16, 2
  br label %TypeChecker_is_constant_in_scope.exit

TypeChecker_is_constant_in_scope.exit:            ; preds = %2, %if.entry.i
  %is_constant.0.i = phi i1 [ %17, %if.entry.i ], [ false, %2 ]
  %memberidx2 = getelementptr inbounds %Scope, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2, align 8
  %19 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr %4)
  %memberidx.i = getelementptr inbounds %Map_string_VarId_, ptr %18, i64 0, i32 1
  %20 = load i64, ptr %memberidx.i, align 4
  %21 = srem i64 %19, %20
  %22 = load ptr, ptr %18, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %22, i64 %21
  %23 = load ptr, ptr %ptridx.i, align 8
  %.not.i63 = icmp eq ptr %23, null
  br i1 %.not.i63, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %TypeChecker_is_constant_in_scope.exit
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i66 = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %37, %else.i ], [ %21, %while.entry.i.preheader ]
  %24 = load ptr, ptr %18, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %24, i64 %hash.0.i
  %25 = load ptr, ptr %ptridx3.i, align 8
  %26 = load ptr, ptr %25, align 8
  %memberidx.i.i64 = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i.i64, align 4
  %28 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %27, %28
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i65 = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i65, align 8
  %30 = load ptr, ptr %memberidx3.i.i66, align 8
  %31 = call i64 @memcmp(ptr %29, ptr %30, i64 %27)
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %TypeChecker_is_constant_in_scope.exit
  %hash.1.i = phi i64 [ %21, %TypeChecker_is_constant_in_scope.exit ], [ %hash.0.i, %ifend.i.i ], [ %37, %else.i ]
  %33 = load ptr, ptr %18, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %33, i64 %hash.1.i
  %34 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %34, null
  br i1 %.not29.i, label %Map_string_VarId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %35 = add nsw i64 %hash.0.i, 1
  %36 = load i64, ptr %memberidx.i, align 4
  %37 = srem i64 %35, %36
  %38 = load ptr, ptr %18, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %39, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_VarId_, ptr %34, i64 0, i32 1
  %40 = load ptr, ptr %memberidx15.i, align 8
  %phi.cmp = icmp ne ptr %40, null
  br label %Map_string_VarId____getitem__.exit

Map_string_VarId____getitem__.exit:               ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi i1 [ %phi.cmp, %if.entry10.i ], [ false, %while.end.i ]
  %41 = or i1 %is_constant.0.i, %common.ret.op.i
  br i1 %41, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend10, %end, %ifend30, %TypeChecker_error.exit130, %TypeChecker_error.exit114, %TypeChecker_error.exit97, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit97 ], [ null, %TypeChecker_error.exit114 ], [ null, %TypeChecker_error.exit130 ], [ %144, %ifend30 ], [ null, %end ], [ null, %ifend10 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %Map_string_VarId____getitem__.exit
  %42 = load ptr, ptr %4, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 5
  %43 = load ptr, ptr %memberidx3, align 8
  %44 = call ptr %43(ptr nonnull %4)
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %45, ptr nonnull @93, ptr %44)
  %47 = load ptr, ptr %45, align 8
  %48 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i67 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i67, align 8
  %memberidx1.i68 = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 %46, ptr %memberidx1.i68, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 %46, ptr %memberidx2.i, align 4
  tail call void @free(ptr %44)
  %49 = load ptr, ptr %memberidx, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx5, align 8
  %memberidx.i69 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %51 = load ptr, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %Compiler, ptr %51, i64 0, i32 6
  %52 = load ptr, ptr %memberidx1.i70, align 8
  %53 = call ptr @malloc(i32 24)
  store i64 1, ptr %53, align 4
  %memberidx1.i.i71 = getelementptr inbounds %FloError, ptr %53, i64 0, i32 2
  store ptr %50, ptr %memberidx1.i.i71, align 8
  %memberidx2.i.i72 = getelementptr inbounds %FloError, ptr %53, i64 0, i32 1
  store ptr %48, ptr %memberidx2.i.i72, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 2
  %54 = load i64, ptr %memberidx.i.i73, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 3
  %55 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i74 = icmp slt i64 %54, %55
  br i1 %.not.i.i74, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %56 = shl i64 %55, 1
  store i64 %56, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 1
  %57 = load ptr, ptr %memberidx2.i.i.i, align 8
  %58 = shl i64 %55, 4
  %59 = call ptr @realloc(ptr %57, i64 %58)
  store ptr %59, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %60 = load i64, ptr %memberidx.i.i73, align 4
  %61 = add nsw i64 %60, 1
  store i64 %61, ptr %memberidx.i.i73, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 1
  %62 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %62, i64 %60
  store ptr %53, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %Map_string_VarId____getitem__.exit
  %memberidx6 = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 3
  %63 = load ptr, ptr %memberidx6, align 8
  %.not = icmp eq ptr %63, null
  br i1 %.not, label %false_block, label %true_block

true_block:                                       ; preds = %ifend
  %64 = call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %63)
  br label %end

false_block:                                      ; preds = %ifend
  %65 = call ptr @malloc(i32 8)
  store i64 20, ptr %65, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %64, %true_block ], [ %65, %false_block ]
  %memberidx.i76 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %66 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %66, i64 0, i32 6
  %67 = load ptr, ptr %memberidx1.i77, align 8
  %memberidx2.i78 = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 2
  %68 = load i64, ptr %memberidx2.i78, align 4
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %common.ret, label %ifend10

ifend10:                                          ; preds = %end
  %memberidx11 = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 4
  %70 = load ptr, ptr %memberidx11, align 8
  %71 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %ternary, ptr %70)
  %72 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i80 = getelementptr inbounds %Compiler, ptr %72, i64 0, i32 6
  %73 = load ptr, ptr %memberidx1.i80, align 8
  %memberidx2.i81 = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 2
  %74 = load i64, ptr %memberidx2.i81, align 4
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %common.ret, label %ifend14

ifend14:                                          ; preds = %ifend10
  %memberidx15 = getelementptr inbounds %Expression, ptr %71, i64 0, i32 1
  %76 = load i1, ptr %memberidx15, align 1
  br i1 %76, label %ifend18, label %if.entry16

if.entry16:                                       ; preds = %ifend14
  %77 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %77, ptr noundef nonnull align 8 dereferenceable(48) @201, i64 48, i1 false)
  %78 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %78, align 8
  %memberidx.i.i82 = getelementptr inbounds %string, ptr %78, i64 0, i32 1
  store ptr %77, ptr %memberidx.i.i82, align 8
  %memberidx1.i.i83 = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  store i64 48, ptr %memberidx1.i.i83, align 4
  %memberidx2.i.i84 = getelementptr inbounds %string, ptr %78, i64 0, i32 3
  store i64 48, ptr %memberidx2.i.i84, align 4
  %79 = load ptr, ptr %memberidx11, align 8
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i86 = getelementptr inbounds %Compiler, ptr %81, i64 0, i32 6
  %82 = load ptr, ptr %memberidx1.i86, align 8
  %83 = call ptr @malloc(i32 24)
  store i64 4, ptr %83, align 4
  %memberidx1.i.i87 = getelementptr inbounds %FloError, ptr %83, i64 0, i32 2
  store ptr %80, ptr %memberidx1.i.i87, align 8
  %memberidx2.i.i88 = getelementptr inbounds %FloError, ptr %83, i64 0, i32 1
  store ptr %78, ptr %memberidx2.i.i88, align 8
  %memberidx.i.i89 = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 2
  %84 = load i64, ptr %memberidx.i.i89, align 4
  %memberidx1.i2.i90 = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 3
  %85 = load i64, ptr %memberidx1.i2.i90, align 4
  %.not.i.i91 = icmp slt i64 %84, %85
  br i1 %.not.i.i91, label %TypeChecker_error.exit97, label %if.entry.i.i94

if.entry.i.i94:                                   ; preds = %if.entry16
  %86 = shl i64 %85, 1
  store i64 %86, ptr %memberidx1.i2.i90, align 4
  %memberidx2.i.i.i93 = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 1
  %87 = load ptr, ptr %memberidx2.i.i.i93, align 8
  %88 = shl i64 %85, 4
  %89 = call ptr @realloc(ptr %87, i64 %88)
  store ptr %89, ptr %memberidx2.i.i.i93, align 8
  br label %TypeChecker_error.exit97

TypeChecker_error.exit97:                         ; preds = %if.entry16, %if.entry.i.i94
  %90 = load i64, ptr %memberidx.i.i89, align 4
  %91 = add nsw i64 %90, 1
  store i64 %91, ptr %memberidx.i.i89, align 4
  %memberidx4.i.i95 = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 1
  %92 = load ptr, ptr %memberidx4.i.i95, align 8
  %ptridx.i.i96 = getelementptr inbounds ptr, ptr %92, i64 %90
  store ptr %83, ptr %ptridx.i.i96, align 8
  br label %common.ret

ifend18:                                          ; preds = %ifend14
  %memberidx.i98 = getelementptr inbounds %Expression, ptr %71, i64 0, i32 2
  %93 = load i64, ptr %memberidx.i98, align 4
  %94 = icmp eq i64 %93, 5
  %95 = load i64, ptr %ternary, align 4
  %96 = icmp eq i64 %95, 20
  %97 = and i1 %94, %96
  br i1 %97, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend18
  %98 = call ptr @malloc(i32 69)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(69) %98, ptr noundef nonnull align 8 dereferenceable(69) @198, i64 69, i1 false)
  %99 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i.i99 = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 69, ptr %memberidx1.i.i100, align 4
  %memberidx2.i.i101 = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 69, ptr %memberidx2.i.i101, align 4
  %100 = load ptr, ptr %1, align 8
  %101 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i103 = getelementptr inbounds %Compiler, ptr %101, i64 0, i32 6
  %102 = load ptr, ptr %memberidx1.i103, align 8
  %103 = call ptr @malloc(i32 24)
  store i64 5, ptr %103, align 4
  %memberidx1.i.i104 = getelementptr inbounds %FloError, ptr %103, i64 0, i32 2
  store ptr %100, ptr %memberidx1.i.i104, align 8
  %memberidx2.i.i105 = getelementptr inbounds %FloError, ptr %103, i64 0, i32 1
  store ptr %99, ptr %memberidx2.i.i105, align 8
  %memberidx.i.i106 = getelementptr inbounds %Array_FloError_, ptr %102, i64 0, i32 2
  %104 = load i64, ptr %memberidx.i.i106, align 4
  %memberidx1.i2.i107 = getelementptr inbounds %Array_FloError_, ptr %102, i64 0, i32 3
  %105 = load i64, ptr %memberidx1.i2.i107, align 4
  %.not.i.i108 = icmp slt i64 %104, %105
  br i1 %.not.i.i108, label %TypeChecker_error.exit114, label %if.entry.i.i111

if.entry.i.i111:                                  ; preds = %if.entry22
  %106 = shl i64 %105, 1
  store i64 %106, ptr %memberidx1.i2.i107, align 4
  %memberidx2.i.i.i110 = getelementptr inbounds %Array_FloError_, ptr %102, i64 0, i32 1
  %107 = load ptr, ptr %memberidx2.i.i.i110, align 8
  %108 = shl i64 %105, 4
  %109 = call ptr @realloc(ptr %107, i64 %108)
  store ptr %109, ptr %memberidx2.i.i.i110, align 8
  br label %TypeChecker_error.exit114

TypeChecker_error.exit114:                        ; preds = %if.entry22, %if.entry.i.i111
  %110 = load i64, ptr %memberidx.i.i106, align 4
  %111 = add nsw i64 %110, 1
  store i64 %111, ptr %memberidx.i.i106, align 4
  %memberidx4.i.i112 = getelementptr inbounds %Array_FloError_, ptr %102, i64 0, i32 1
  %112 = load ptr, ptr %memberidx4.i.i112, align 8
  %ptridx.i.i113 = getelementptr inbounds ptr, ptr %112, i64 %110
  store ptr %103, ptr %ptridx.i.i113, align 8
  br label %common.ret

ifend24:                                          ; preds = %ifend18
  %memberidx27 = getelementptr inbounds %Expression, ptr %71, i64 0, i32 3
  %113 = load ptr, ptr %memberidx27, align 8
  %114 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %ternary, ptr %113)
  %115 = or i1 %96, %114
  br i1 %115, label %ifend30, label %if.entry28

if.entry28:                                       ; preds = %ifend24
  %116 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %ternary)
  %117 = load ptr, ptr %116, align 8
  %memberidx31 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %117, i64 0, i32 5
  %118 = load ptr, ptr %memberidx31, align 8
  %119 = call ptr %118(ptr nonnull %116)
  %120 = load ptr, ptr %memberidx27, align 8
  %121 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %120)
  %122 = load ptr, ptr %121, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %122, i64 0, i32 5
  %123 = load ptr, ptr %memberidx33, align 8
  %124 = call ptr %123(ptr nonnull %121)
  %125 = alloca ptr, align 8
  %126 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %125, ptr nonnull @202, ptr %119, ptr %124)
  %127 = load ptr, ptr %125, align 8
  %128 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %128, align 8
  %memberidx.i115 = getelementptr inbounds %string, ptr %128, i64 0, i32 1
  store ptr %127, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %string, ptr %128, i64 0, i32 2
  store i64 %126, ptr %memberidx1.i116, align 4
  %memberidx2.i117 = getelementptr inbounds %string, ptr %128, i64 0, i32 3
  store i64 %126, ptr %memberidx2.i117, align 4
  tail call void @free(ptr %119)
  tail call void @free(ptr %124)
  %129 = load ptr, ptr %1, align 8
  %130 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i119 = getelementptr inbounds %Compiler, ptr %130, i64 0, i32 6
  %131 = load ptr, ptr %memberidx1.i119, align 8
  %132 = call ptr @malloc(i32 24)
  store i64 5, ptr %132, align 4
  %memberidx1.i.i120 = getelementptr inbounds %FloError, ptr %132, i64 0, i32 2
  store ptr %129, ptr %memberidx1.i.i120, align 8
  %memberidx2.i.i121 = getelementptr inbounds %FloError, ptr %132, i64 0, i32 1
  store ptr %128, ptr %memberidx2.i.i121, align 8
  %memberidx.i.i122 = getelementptr inbounds %Array_FloError_, ptr %131, i64 0, i32 2
  %133 = load i64, ptr %memberidx.i.i122, align 4
  %memberidx1.i2.i123 = getelementptr inbounds %Array_FloError_, ptr %131, i64 0, i32 3
  %134 = load i64, ptr %memberidx1.i2.i123, align 4
  %.not.i.i124 = icmp slt i64 %133, %134
  br i1 %.not.i.i124, label %TypeChecker_error.exit130, label %if.entry.i.i127

if.entry.i.i127:                                  ; preds = %if.entry28
  %135 = shl i64 %134, 1
  store i64 %135, ptr %memberidx1.i2.i123, align 4
  %memberidx2.i.i.i126 = getelementptr inbounds %Array_FloError_, ptr %131, i64 0, i32 1
  %136 = load ptr, ptr %memberidx2.i.i.i126, align 8
  %137 = shl i64 %134, 4
  %138 = call ptr @realloc(ptr %136, i64 %137)
  store ptr %138, ptr %memberidx2.i.i.i126, align 8
  br label %TypeChecker_error.exit130

TypeChecker_error.exit130:                        ; preds = %if.entry28, %if.entry.i.i127
  %139 = load i64, ptr %memberidx.i.i122, align 4
  %140 = add nsw i64 %139, 1
  store i64 %140, ptr %memberidx.i.i122, align 4
  %memberidx4.i.i128 = getelementptr inbounds %Array_FloError_, ptr %131, i64 0, i32 1
  %141 = load ptr, ptr %memberidx4.i.i128, align 8
  %ptridx.i.i129 = getelementptr inbounds ptr, ptr %141, i64 %139
  store ptr %132, ptr %ptridx.i.i129, align 8
  br label %common.ret

ifend30:                                          ; preds = %ifend24
  %142 = load ptr, ptr %memberidx27, align 8
  %143 = call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nonnull %0, ptr %4, ptr %71, ptr %142)
  %144 = tail call ptr @malloc(i32 25)
  %memberidx36 = getelementptr inbounds %Const, ptr %143, i64 0, i32 1
  %145 = load ptr, ptr %memberidx36, align 8
  store i64 2, ptr %144, align 4
  %memberidx.i131 = getelementptr inbounds %ConstDeclaration, ptr %144, i64 0, i32 2
  store ptr %145, ptr %memberidx.i131, align 8
  %memberidx1.i132 = getelementptr inbounds %ConstDeclaration, ptr %144, i64 0, i32 1
  store ptr %4, ptr %memberidx1.i132, align 8
  %memberidx2.i133 = getelementptr inbounds %ConstDeclaration, ptr %144, i64 0, i32 3
  store i1 false, ptr %memberidx2.i133, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 8
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %4, i64 0, i32 1
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %memberidx1.i.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i79 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %memberidx1.i.i86 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i90 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %ifend5, %2
  %current_scope.0.in = phi ptr [ %ptridx.i6.i.i, %2 ], [ %ptridx.i6.i, %ifend5 ]
  %current_scope.0 = load ptr, ptr %current_scope.0.in, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 1
  %12 = load ptr, ptr %memberidx, align 8
  %13 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr %1)
  %memberidx.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i, align 4
  %15 = srem i64 %13, %14
  %16 = load ptr, ptr %12, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %17, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %while.entry, %else.i
  %hash.0.i = phi i64 [ %31, %else.i ], [ %15, %while.entry ]
  %18 = load ptr, ptr %12, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %18, i64 %hash.0.i
  %19 = load ptr, ptr %ptridx3.i, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx.i.i77 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx.i.i77, align 4
  %22 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %21, %22
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i78 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i78, align 8
  %24 = load ptr, ptr %memberidx3.i.i79, align 8
  %25 = call i64 @memcmp(ptr %23, ptr %24, i64 %21)
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %while.entry
  %hash.1.i = phi i64 [ %15, %while.entry ], [ %hash.0.i, %ifend.i.i ], [ %31, %else.i ]
  %27 = load ptr, ptr %12, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %27, i64 %hash.1.i
  %28 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %28, null
  br i1 %.not29.i, label %Map_string_VarId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %29 = add nsw i64 %hash.0.i, 1
  %30 = load i64, ptr %memberidx.i, align 4
  %31 = srem i64 %29, %30
  %32 = load ptr, ptr %12, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %32, i64 %31
  %33 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %33, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_VarId_, ptr %28, i64 0, i32 1
  %34 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_VarId____getitem__.exit

Map_string_VarId____getitem__.exit:               ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %34, %if.entry10.i ], [ null, %while.end.i ]
  %35 = icmp eq ptr %common.ret.op.i, null
  br i1 %35, label %if.entry, label %ifend

while.end:                                        ; preds = %ifend
  %36 = icmp eq ptr %value.1, null
  %37 = load ptr, ptr %memberidx1.i, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp ne i64 %38, 0
  %40 = and i1 %36, %39
  br i1 %40, label %if.entry10, label %ifend12

if.entry:                                         ; preds = %Map_string_VarId____getitem__.exit
  %memberidx1 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 3
  %41 = load ptr, ptr %memberidx1, align 8
  %42 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr %1)
  %memberidx.i80 = getelementptr inbounds %Map_string_VarId_, ptr %41, i64 0, i32 1
  %43 = load i64, ptr %memberidx.i80, align 4
  %44 = srem i64 %42, %43
  %45 = load ptr, ptr %41, align 8
  %ptridx.i81 = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i81, align 8
  %.not.i82 = icmp eq ptr %46, null
  br i1 %.not.i82, label %while.end.i97, label %while.entry.i88

while.entry.i88:                                  ; preds = %if.entry, %else.i100
  %hash.0.i83 = phi i64 [ %60, %else.i100 ], [ %44, %if.entry ]
  %47 = load ptr, ptr %41, align 8
  %ptridx3.i84 = getelementptr inbounds ptr, ptr %47, i64 %hash.0.i83
  %48 = load ptr, ptr %ptridx3.i84, align 8
  %49 = load ptr, ptr %48, align 8
  %memberidx.i.i85 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx.i.i85, align 4
  %51 = load i64, ptr %memberidx1.i.i86, align 4
  %.not.i.i87 = icmp eq i64 %50, %51
  br i1 %.not.i.i87, label %ifend.i.i91, label %else.i100

ifend.i.i91:                                      ; preds = %while.entry.i88
  %memberidx2.i.i89 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i89, align 8
  %53 = load ptr, ptr %memberidx3.i.i90, align 8
  %54 = call i64 @memcmp(ptr %52, ptr %53, i64 %50)
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %while.end.i97, label %else.i100

while.end.i97:                                    ; preds = %else.i100, %ifend.i.i91, %if.entry
  %hash.1.i94 = phi i64 [ %44, %if.entry ], [ %hash.0.i83, %ifend.i.i91 ], [ %60, %else.i100 ]
  %56 = load ptr, ptr %41, align 8
  %ptridx9.i95 = getelementptr inbounds ptr, ptr %56, i64 %hash.1.i94
  %57 = load ptr, ptr %ptridx9.i95, align 8
  %.not29.i96 = icmp eq ptr %57, null
  br i1 %.not29.i96, label %ifend, label %if.entry10.i103

else.i100:                                        ; preds = %while.entry.i88, %ifend.i.i91
  %58 = add nsw i64 %hash.0.i83, 1
  %59 = load i64, ptr %memberidx.i80, align 4
  %60 = srem i64 %58, %59
  %61 = load ptr, ptr %41, align 8
  %ptridx7.i98 = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx7.i98, align 8
  %.not30.i99 = icmp eq ptr %62, null
  br i1 %.not30.i99, label %while.end.i97, label %while.entry.i88

if.entry10.i103:                                  ; preds = %while.end.i97
  %memberidx15.i102 = getelementptr inbounds %MapEntry_string_VarId_, ptr %57, i64 0, i32 1
  %63 = load ptr, ptr %memberidx15.i102, align 8
  br label %ifend

ifend:                                            ; preds = %if.entry10.i103, %while.end.i97, %Map_string_VarId____getitem__.exit
  %value.1 = phi ptr [ %common.ret.op.i, %Map_string_VarId____getitem__.exit ], [ %63, %if.entry10.i103 ], [ null, %while.end.i97 ]
  %memberidx2 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 5
  %64 = load ptr, ptr %memberidx2, align 8
  %65 = icmp eq ptr %64, null
  %66 = icmp ne ptr %value.1, null
  %67 = or i1 %66, %65
  br i1 %67, label %while.end, label %ifend5

ifend5:                                           ; preds = %ifend
  %68 = load ptr, ptr %0, align 8
  %memberidx.i105 = getelementptr inbounds %Program, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i105, align 8
  %70 = load i64, ptr %64, align 4
  %memberidx.i.i106 = getelementptr inbounds %Array_Module_, ptr %69, i64 0, i32 1
  %71 = load ptr, ptr %memberidx.i.i106, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %71, i64 %70
  %72 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %72, i64 0, i32 8
  %73 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %64, i64 0, i32 1
  %74 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %73, i64 0, i32 1
  %75 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %75, i64 %74
  br label %while.entry

if.entry10:                                       ; preds = %while.end
  %76 = load ptr, ptr %0, align 8
  %memberidx16 = getelementptr inbounds %Program, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx16, align 8
  %memberidx.i107 = getelementptr inbounds %Array_Module_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i107, align 8
  %79 = load ptr, ptr %78, align 8
  %memberidx17 = getelementptr inbounds %Module, ptr %79, i64 0, i32 6
  %80 = load ptr, ptr %memberidx17, align 8
  store ptr %80, ptr %memberidx1.i, align 8
  %81 = call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nonnull %0, ptr %1)
  store ptr %37, ptr %memberidx1.i, align 8
  %.not = icmp eq ptr %81, null
  br i1 %.not, label %ifend12, label %if.entry19

ifend12:                                          ; preds = %if.entry38, %ifend36, %if.entry10, %while.end
  %value.2 = phi ptr [ %81, %if.entry38 ], [ %81, %ifend36 ], [ null, %if.entry10 ], [ %value.1, %while.end ]
  ret ptr %value.2

if.entry19:                                       ; preds = %if.entry10
  %82 = load ptr, ptr %0, align 8
  store i1 true, ptr %82, align 1
  %83 = load i64, ptr %81, align 4
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %if.entry25, label %ifend27

if.entry25:                                       ; preds = %if.entry19
  %85 = load ptr, ptr %0, align 8
  %memberidx.i.i.i112 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %86 = load i64, ptr %memberidx.i.i.i112, align 4
  %memberidx1.i.i.i.i113 = getelementptr inbounds %Program, ptr %85, i64 0, i32 1
  %87 = load ptr, ptr %memberidx1.i.i.i.i113, align 8
  %memberidx.i.i.i.i.i114 = getelementptr inbounds %Array_Module_, ptr %87, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i.i.i.i.i114, align 8
  %ptridx.i.i.i.i.i115 = getelementptr inbounds ptr, ptr %88, i64 %86
  %89 = load ptr, ptr %ptridx.i.i.i.i.i115, align 8
  %memberidx1.i.i116 = getelementptr inbounds %Module, ptr %89, i64 0, i32 6
  %90 = load ptr, ptr %memberidx1.i.i116, align 8
  %91 = load i64, ptr %90, align 4
  %ptridx.i.i.i.i119 = getelementptr inbounds ptr, ptr %88, i64 %91
  %92 = load ptr, ptr %ptridx.i.i.i.i119, align 8
  %memberidx2.i.i.i120 = getelementptr inbounds %Module, ptr %92, i64 0, i32 8
  %93 = load ptr, ptr %memberidx2.i.i.i120, align 8
  %memberidx3.i.i.i121 = getelementptr inbounds %ScopeId, ptr %90, i64 0, i32 1
  %94 = load i64, ptr %memberidx3.i.i.i121, align 4
  %memberidx.i5.i.i.i122 = getelementptr inbounds %Array_Scope_, ptr %93, i64 0, i32 1
  %95 = load ptr, ptr %memberidx.i5.i.i.i122, align 8
  %ptridx.i6.i.i.i123 = getelementptr inbounds ptr, ptr %95, i64 %94
  %96 = load ptr, ptr %ptridx.i6.i.i.i123, align 8
  %memberidx.i124 = getelementptr inbounds %Scope, ptr %96, i64 0, i32 3
  %97 = load ptr, ptr %memberidx.i124, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %97, ptr %1, ptr nonnull %81)
  br label %ifend27

ifend27:                                          ; preds = %if.entry19, %if.entry25
  %98 = load i64, ptr %81, align 4
  %99 = add i64 %98, -1
  %100 = icmp ult i64 %99, 2
  br i1 %100, label %if.entry30, label %ifend32

if.entry30:                                       ; preds = %ifend27
  %101 = load ptr, ptr %0, align 8
  %memberidx.i.i.i125 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %102 = load i64, ptr %memberidx.i.i.i125, align 4
  %memberidx1.i.i.i.i126 = getelementptr inbounds %Program, ptr %101, i64 0, i32 1
  %103 = load ptr, ptr %memberidx1.i.i.i.i126, align 8
  %memberidx.i.i.i.i.i127 = getelementptr inbounds %Array_Module_, ptr %103, i64 0, i32 1
  %104 = load ptr, ptr %memberidx.i.i.i.i.i127, align 8
  %ptridx.i.i.i.i.i128 = getelementptr inbounds ptr, ptr %104, i64 %102
  %105 = load ptr, ptr %ptridx.i.i.i.i.i128, align 8
  %memberidx1.i.i129 = getelementptr inbounds %Module, ptr %105, i64 0, i32 6
  %106 = load ptr, ptr %memberidx1.i.i129, align 8
  %107 = load i64, ptr %106, align 4
  %ptridx.i.i.i.i132 = getelementptr inbounds ptr, ptr %104, i64 %107
  %108 = load ptr, ptr %ptridx.i.i.i.i132, align 8
  %memberidx2.i.i.i133 = getelementptr inbounds %Module, ptr %108, i64 0, i32 8
  %109 = load ptr, ptr %memberidx2.i.i.i133, align 8
  %memberidx3.i.i.i134 = getelementptr inbounds %ScopeId, ptr %106, i64 0, i32 1
  %110 = load i64, ptr %memberidx3.i.i.i134, align 4
  %memberidx.i5.i.i.i135 = getelementptr inbounds %Array_Scope_, ptr %109, i64 0, i32 1
  %111 = load ptr, ptr %memberidx.i5.i.i.i135, align 8
  %ptridx.i6.i.i.i136 = getelementptr inbounds ptr, ptr %111, i64 %110
  %112 = load ptr, ptr %ptridx.i6.i.i.i136, align 8
  %memberidx.i137 = getelementptr inbounds %Scope, ptr %112, i64 0, i32 1
  %113 = load ptr, ptr %memberidx.i137, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %113, ptr %1, ptr nonnull %81)
  br label %ifend32

ifend32:                                          ; preds = %ifend27, %if.entry30
  %114 = load i64, ptr %81, align 4
  %115 = icmp eq i64 %114, 3
  br i1 %115, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend32
  %116 = call ptr @malloc(i32 24)
  %memberidx.i138 = getelementptr inbounds %VarId, ptr %81, i64 0, i32 1
  %117 = load i64, ptr %memberidx.i138, align 4
  %memberidx1.i139 = getelementptr inbounds %VarId, ptr %81, i64 0, i32 2
  %118 = load i64, ptr %memberidx1.i139, align 4
  store i64 %117, ptr %116, align 4
  %memberidx1.i.i.i140 = getelementptr inbounds %TypeId, ptr %116, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i140, align 4
  %memberidx2.i.i.i141 = getelementptr inbounds %TypeId, ptr %116, i64 0, i32 2
  store i64 %118, ptr %memberidx2.i.i.i141, align 4
  %119 = load ptr, ptr %0, align 8
  %memberidx.i.i.i142 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %120 = load i64, ptr %memberidx.i.i.i142, align 4
  %memberidx1.i.i.i.i143 = getelementptr inbounds %Program, ptr %119, i64 0, i32 1
  %121 = load ptr, ptr %memberidx1.i.i.i.i143, align 8
  %memberidx.i.i.i.i.i144 = getelementptr inbounds %Array_Module_, ptr %121, i64 0, i32 1
  %122 = load ptr, ptr %memberidx.i.i.i.i.i144, align 8
  %ptridx.i.i.i.i.i145 = getelementptr inbounds ptr, ptr %122, i64 %120
  %123 = load ptr, ptr %ptridx.i.i.i.i.i145, align 8
  %memberidx1.i.i146 = getelementptr inbounds %Module, ptr %123, i64 0, i32 6
  %124 = load ptr, ptr %memberidx1.i.i146, align 8
  %125 = load i64, ptr %124, align 4
  %ptridx.i.i.i.i149 = getelementptr inbounds ptr, ptr %122, i64 %125
  %126 = load ptr, ptr %ptridx.i.i.i.i149, align 8
  %memberidx2.i.i.i150 = getelementptr inbounds %Module, ptr %126, i64 0, i32 8
  %127 = load ptr, ptr %memberidx2.i.i.i150, align 8
  %memberidx3.i.i.i151 = getelementptr inbounds %ScopeId, ptr %124, i64 0, i32 1
  %128 = load i64, ptr %memberidx3.i.i.i151, align 4
  %memberidx.i5.i.i.i152 = getelementptr inbounds %Array_Scope_, ptr %127, i64 0, i32 1
  %129 = load ptr, ptr %memberidx.i5.i.i.i152, align 8
  %ptridx.i6.i.i.i153 = getelementptr inbounds ptr, ptr %129, i64 %128
  %130 = load ptr, ptr %ptridx.i6.i.i.i153, align 8
  %memberidx.i154 = getelementptr inbounds %Scope, ptr %130, i64 0, i32 2
  %131 = load ptr, ptr %memberidx.i154, align 8
  call fastcc void @Map_string_ClassId____setitem__(ptr %131, ptr %1, ptr nonnull %116)
  %memberidx1.i155 = getelementptr inbounds %Scope, ptr %130, i64 0, i32 1
  %132 = load ptr, ptr %memberidx1.i155, align 8
  %133 = call ptr @malloc(i32 24)
  %134 = load i64, ptr %116, align 4
  %135 = load i64, ptr %memberidx2.i.i.i141, align 4
  store i64 3, ptr %133, align 4
  %memberidx1.i.i.i157 = getelementptr inbounds %VarId, ptr %133, i64 0, i32 1
  store i64 %134, ptr %memberidx1.i.i.i157, align 4
  %memberidx2.i.i6.i158 = getelementptr inbounds %VarId, ptr %133, i64 0, i32 2
  store i64 %135, ptr %memberidx2.i.i6.i158, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %132, ptr %1, ptr nonnull %133)
  br label %ifend36

ifend36:                                          ; preds = %ifend32, %if.entry34
  %136 = load i64, ptr %81, align 4
  %137 = icmp eq i64 %136, 4
  br i1 %137, label %if.entry38, label %ifend12

if.entry38:                                       ; preds = %ifend36
  %138 = call ptr @malloc(i32 24)
  %memberidx.i159 = getelementptr inbounds %VarId, ptr %81, i64 0, i32 1
  %139 = load i64, ptr %memberidx.i159, align 4
  %memberidx1.i160 = getelementptr inbounds %VarId, ptr %81, i64 0, i32 2
  %140 = load i64, ptr %memberidx1.i160, align 4
  store i64 %139, ptr %138, align 4
  %memberidx1.i.i.i161 = getelementptr inbounds %TypeId, ptr %138, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i.i161, align 4
  %memberidx2.i.i.i162 = getelementptr inbounds %TypeId, ptr %138, i64 0, i32 2
  store i64 %140, ptr %memberidx2.i.i.i162, align 4
  %141 = load ptr, ptr %0, align 8
  %memberidx.i.i.i108 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %142 = load i64, ptr %memberidx.i.i.i108, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %141, i64 0, i32 1
  %143 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %143, i64 0, i32 1
  %144 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %144, i64 %142
  %145 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx1.i.i109 = getelementptr inbounds %Module, ptr %145, i64 0, i32 6
  %146 = load ptr, ptr %memberidx1.i.i109, align 8
  %147 = load i64, ptr %146, align 4
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %144, i64 %147
  %148 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %148, i64 0, i32 8
  %149 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ScopeId, ptr %146, i64 0, i32 1
  %150 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Scope_, ptr %149, i64 0, i32 1
  %151 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %151, i64 %150
  %152 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i110 = getelementptr inbounds %Scope, ptr %152, i64 0, i32 4
  %153 = load ptr, ptr %memberidx.i110, align 8
  call fastcc void @Map_string_EnumId____setitem__(ptr %153, ptr %1, ptr nonnull %138)
  %memberidx1.i111 = getelementptr inbounds %Scope, ptr %152, i64 0, i32 1
  %154 = load ptr, ptr %memberidx1.i111, align 8
  %155 = call ptr @malloc(i32 24)
  %156 = load i64, ptr %138, align 4
  %157 = load i64, ptr %memberidx2.i.i.i162, align 4
  store i64 4, ptr %155, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %155, i64 0, i32 1
  store i64 %156, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i6.i = getelementptr inbounds %VarId, ptr %155, i64 0, i32 2
  store i64 %157, ptr %memberidx2.i.i6.i, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %154, ptr %1, ptr nonnull %155)
  br label %ifend12
}

define internal fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 8
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %4, i64 0, i32 1
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %memberidx1.i.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i63 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %memberidx1.i.i70 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i74 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %memberidx1.i.i95 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i99 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %ifend12, %2
  %current_scope.0.in = phi ptr [ %ptridx.i6.i.i, %2 ], [ %ptridx.i6.i, %ifend12 ]
  %current_scope.0 = load ptr, ptr %current_scope.0.in, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 6
  %12 = load ptr, ptr %memberidx, align 8
  %13 = call fastcc i64 @Map_string_Type__hash_fnc(ptr %1)
  %memberidx.i = getelementptr inbounds %Map_string_Type_, ptr %12, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i, align 4
  %15 = srem i64 %13, %14
  %16 = load ptr, ptr %12, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %17, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %while.entry, %else.i
  %hash.0.i = phi i64 [ %31, %else.i ], [ %15, %while.entry ]
  %18 = load ptr, ptr %12, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %18, i64 %hash.0.i
  %19 = load ptr, ptr %ptridx3.i, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx.i.i61 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx.i.i61, align 4
  %22 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %21, %22
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i62 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i62, align 8
  %24 = load ptr, ptr %memberidx3.i.i63, align 8
  %25 = call i64 @memcmp(ptr %23, ptr %24, i64 %21)
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %while.entry
  %hash.1.i = phi i64 [ %15, %while.entry ], [ %hash.0.i, %ifend.i.i ], [ %31, %else.i ]
  %27 = load ptr, ptr %12, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %27, i64 %hash.1.i
  %28 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %28, null
  br i1 %.not29.i, label %Map_string_Type____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %29 = add nsw i64 %hash.0.i, 1
  %30 = load i64, ptr %memberidx.i, align 4
  %31 = srem i64 %29, %30
  %32 = load ptr, ptr %12, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %32, i64 %31
  %33 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %33, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_Type_, ptr %28, i64 0, i32 1
  %34 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_Type____getitem__.exit

Map_string_Type____getitem__.exit:                ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %34, %if.entry10.i ], [ null, %while.end.i ]
  %.not = icmp eq ptr %common.ret.op.i, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %Map_string_Type____getitem__.exit, %ifend28, %ifend19, %if.entry6, %if.entry2
  %common.ret.op = phi ptr [ %58, %if.entry2 ], [ %82, %if.entry6 ], [ %102, %ifend19 ], [ %100, %ifend28 ], [ %common.ret.op.i, %Map_string_Type____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_Type____getitem__.exit
  %memberidx1 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 2
  %35 = load ptr, ptr %memberidx1, align 8
  %36 = call fastcc i64 @Map_string_ClassId__hash_fnc(ptr %1)
  %memberidx.i64 = getelementptr inbounds %Map_string_ClassId_, ptr %35, i64 0, i32 1
  %37 = load i64, ptr %memberidx.i64, align 4
  %38 = srem i64 %36, %37
  %39 = load ptr, ptr %35, align 8
  %ptridx.i65 = getelementptr inbounds ptr, ptr %39, i64 %38
  %40 = load ptr, ptr %ptridx.i65, align 8
  %.not.i66 = icmp eq ptr %40, null
  br i1 %.not.i66, label %while.end.i81, label %while.entry.i72

while.entry.i72:                                  ; preds = %ifend, %else.i84
  %hash.0.i67 = phi i64 [ %54, %else.i84 ], [ %38, %ifend ]
  %41 = load ptr, ptr %35, align 8
  %ptridx3.i68 = getelementptr inbounds ptr, ptr %41, i64 %hash.0.i67
  %42 = load ptr, ptr %ptridx3.i68, align 8
  %43 = load ptr, ptr %42, align 8
  %memberidx.i.i69 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx.i.i69, align 4
  %45 = load i64, ptr %memberidx1.i.i70, align 4
  %.not.i.i71 = icmp eq i64 %44, %45
  br i1 %.not.i.i71, label %ifend.i.i75, label %else.i84

ifend.i.i75:                                      ; preds = %while.entry.i72
  %memberidx2.i.i73 = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i73, align 8
  %47 = load ptr, ptr %memberidx3.i.i74, align 8
  %48 = call i64 @memcmp(ptr %46, ptr %47, i64 %44)
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %while.end.i81, label %else.i84

while.end.i81:                                    ; preds = %else.i84, %ifend.i.i75, %ifend
  %hash.1.i78 = phi i64 [ %38, %ifend ], [ %hash.0.i67, %ifend.i.i75 ], [ %54, %else.i84 ]
  %50 = load ptr, ptr %35, align 8
  %ptridx9.i79 = getelementptr inbounds ptr, ptr %50, i64 %hash.1.i78
  %51 = load ptr, ptr %ptridx9.i79, align 8
  %.not29.i80 = icmp eq ptr %51, null
  br i1 %.not29.i80, label %Map_string_ClassId____getitem__.exit, label %if.entry10.i87

else.i84:                                         ; preds = %while.entry.i72, %ifend.i.i75
  %52 = add nsw i64 %hash.0.i67, 1
  %53 = load i64, ptr %memberidx.i64, align 4
  %54 = srem i64 %52, %53
  %55 = load ptr, ptr %35, align 8
  %ptridx7.i82 = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx7.i82, align 8
  %.not30.i83 = icmp eq ptr %56, null
  br i1 %.not30.i83, label %while.end.i81, label %while.entry.i72

if.entry10.i87:                                   ; preds = %while.end.i81
  %memberidx15.i86 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %51, i64 0, i32 1
  %57 = load ptr, ptr %memberidx15.i86, align 8
  br label %Map_string_ClassId____getitem__.exit

Map_string_ClassId____getitem__.exit:             ; preds = %while.end.i81, %if.entry10.i87
  %common.ret.op.i85 = phi ptr [ %57, %if.entry10.i87 ], [ null, %while.end.i81 ]
  %.not57 = icmp eq ptr %common.ret.op.i85, null
  br i1 %.not57, label %ifend4, label %if.entry2

if.entry2:                                        ; preds = %Map_string_ClassId____getitem__.exit
  %58 = tail call ptr @malloc(i32 16)
  store i64 11, ptr %58, align 4
  %memberidx.i88 = getelementptr inbounds %ObjectType, ptr %58, i64 0, i32 1
  store ptr %common.ret.op.i85, ptr %memberidx.i88, align 8
  br label %common.ret

ifend4:                                           ; preds = %Map_string_ClassId____getitem__.exit
  %memberidx5 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 4
  %59 = load ptr, ptr %memberidx5, align 8
  %60 = call fastcc i64 @Map_string_EnumId__hash_fnc(ptr %1)
  %memberidx.i89 = getelementptr inbounds %Map_string_EnumId_, ptr %59, i64 0, i32 1
  %61 = load i64, ptr %memberidx.i89, align 4
  %62 = srem i64 %60, %61
  %63 = load ptr, ptr %59, align 8
  %ptridx.i90 = getelementptr inbounds ptr, ptr %63, i64 %62
  %64 = load ptr, ptr %ptridx.i90, align 8
  %.not.i91 = icmp eq ptr %64, null
  br i1 %.not.i91, label %while.end.i106, label %while.entry.i97

while.entry.i97:                                  ; preds = %ifend4, %else.i109
  %hash.0.i92 = phi i64 [ %78, %else.i109 ], [ %62, %ifend4 ]
  %65 = load ptr, ptr %59, align 8
  %ptridx3.i93 = getelementptr inbounds ptr, ptr %65, i64 %hash.0.i92
  %66 = load ptr, ptr %ptridx3.i93, align 8
  %67 = load ptr, ptr %66, align 8
  %memberidx.i.i94 = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  %68 = load i64, ptr %memberidx.i.i94, align 4
  %69 = load i64, ptr %memberidx1.i.i95, align 4
  %.not.i.i96 = icmp eq i64 %68, %69
  br i1 %.not.i.i96, label %ifend.i.i100, label %else.i109

ifend.i.i100:                                     ; preds = %while.entry.i97
  %memberidx2.i.i98 = getelementptr inbounds %string, ptr %67, i64 0, i32 1
  %70 = load ptr, ptr %memberidx2.i.i98, align 8
  %71 = load ptr, ptr %memberidx3.i.i99, align 8
  %72 = call i64 @memcmp(ptr %70, ptr %71, i64 %68)
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %while.end.i106, label %else.i109

while.end.i106:                                   ; preds = %else.i109, %ifend.i.i100, %ifend4
  %hash.1.i103 = phi i64 [ %62, %ifend4 ], [ %hash.0.i92, %ifend.i.i100 ], [ %78, %else.i109 ]
  %74 = load ptr, ptr %59, align 8
  %ptridx9.i104 = getelementptr inbounds ptr, ptr %74, i64 %hash.1.i103
  %75 = load ptr, ptr %ptridx9.i104, align 8
  %.not29.i105 = icmp eq ptr %75, null
  br i1 %.not29.i105, label %Map_string_EnumId____getitem__.exit, label %if.entry10.i112

else.i109:                                        ; preds = %while.entry.i97, %ifend.i.i100
  %76 = add nsw i64 %hash.0.i92, 1
  %77 = load i64, ptr %memberidx.i89, align 4
  %78 = srem i64 %76, %77
  %79 = load ptr, ptr %59, align 8
  %ptridx7.i107 = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx7.i107, align 8
  %.not30.i108 = icmp eq ptr %80, null
  br i1 %.not30.i108, label %while.end.i106, label %while.entry.i97

if.entry10.i112:                                  ; preds = %while.end.i106
  %memberidx15.i111 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %75, i64 0, i32 1
  %81 = load ptr, ptr %memberidx15.i111, align 8
  br label %Map_string_EnumId____getitem__.exit

Map_string_EnumId____getitem__.exit:              ; preds = %while.end.i106, %if.entry10.i112
  %common.ret.op.i110 = phi ptr [ %81, %if.entry10.i112 ], [ null, %while.end.i106 ]
  %.not58 = icmp eq ptr %common.ret.op.i110, null
  br i1 %.not58, label %ifend8, label %if.entry6

if.entry6:                                        ; preds = %Map_string_EnumId____getitem__.exit
  %82 = tail call ptr @malloc(i32 16)
  store i64 12, ptr %82, align 4
  %memberidx.i113 = getelementptr inbounds %EnumType, ptr %82, i64 0, i32 1
  store ptr %common.ret.op.i110, ptr %memberidx.i113, align 8
  br label %common.ret

ifend8:                                           ; preds = %Map_string_EnumId____getitem__.exit
  %memberidx9 = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 5
  %83 = load ptr, ptr %memberidx9, align 8
  %84 = icmp eq ptr %83, null
  br i1 %84, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %85 = load ptr, ptr %memberidx1.i, align 8
  %86 = load i64, ptr %85, align 4
  %.not59 = icmp eq i64 %86, 0
  br i1 %.not59, label %ifend19, label %if.entry17

ifend12:                                          ; preds = %ifend8
  %87 = load ptr, ptr %0, align 8
  %memberidx.i114 = getelementptr inbounds %Program, ptr %87, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i114, align 8
  %89 = load i64, ptr %83, align 4
  %memberidx.i.i115 = getelementptr inbounds %Array_Module_, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i.i115, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %90, i64 %89
  %91 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %91, i64 0, i32 8
  %92 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %83, i64 0, i32 1
  %93 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %92, i64 0, i32 1
  %94 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %94, i64 %93
  br label %while.entry

if.entry17:                                       ; preds = %if.entry10
  %95 = load ptr, ptr %0, align 8
  %memberidx23 = getelementptr inbounds %Program, ptr %95, i64 0, i32 1
  %96 = load ptr, ptr %memberidx23, align 8
  %memberidx.i116 = getelementptr inbounds %Array_Module_, ptr %96, i64 0, i32 1
  %97 = load ptr, ptr %memberidx.i116, align 8
  %98 = load ptr, ptr %97, align 8
  %memberidx24 = getelementptr inbounds %Module, ptr %98, i64 0, i32 6
  %99 = load ptr, ptr %memberidx24, align 8
  store ptr %99, ptr %memberidx1.i, align 8
  %100 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %1)
  %101 = load i64, ptr %100, align 4
  %.not60 = icmp eq i64 %101, 20
  br i1 %.not60, label %ifend28, label %if.entry26

ifend19:                                          ; preds = %if.entry10
  %102 = call ptr @malloc(i32 8)
  store i64 20, ptr %102, align 4
  br label %common.ret

if.entry26:                                       ; preds = %if.entry17
  %103 = load ptr, ptr %0, align 8
  store i1 true, ptr %103, align 1
  %104 = load i64, ptr %100, align 4
  %105 = icmp eq i64 %104, 11
  br i1 %105, label %if.entry32, label %else33

ifend28:                                          ; preds = %if.entry32, %else33, %if.entry17
  store ptr %85, ptr %memberidx1.i, align 8
  br label %common.ret

if.entry32:                                       ; preds = %if.entry26
  %memberidx35 = getelementptr inbounds %ObjectType, ptr %100, i64 0, i32 1
  %106 = load ptr, ptr %memberidx35, align 8
  %107 = load ptr, ptr %0, align 8
  %memberidx.i.i.i117 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %108 = load i64, ptr %memberidx.i.i.i117, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %109, i64 0, i32 1
  %110 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %110, i64 %108
  %111 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx1.i.i118 = getelementptr inbounds %Module, ptr %111, i64 0, i32 6
  %112 = load ptr, ptr %memberidx1.i.i118, align 8
  %113 = load i64, ptr %112, align 4
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %110, i64 %113
  %114 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %114, i64 0, i32 8
  %115 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ScopeId, ptr %112, i64 0, i32 1
  %116 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Scope_, ptr %115, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %117, i64 %116
  %118 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i119 = getelementptr inbounds %Scope, ptr %118, i64 0, i32 2
  %119 = load ptr, ptr %memberidx.i119, align 8
  call fastcc void @Map_string_ClassId____setitem__(ptr %119, ptr %1, ptr %106)
  %memberidx1.i120 = getelementptr inbounds %Scope, ptr %118, i64 0, i32 1
  %120 = load ptr, ptr %memberidx1.i120, align 8
  %121 = call ptr @malloc(i32 24)
  %122 = load i64, ptr %106, align 4
  %memberidx1.i5.i = getelementptr inbounds %TypeId, ptr %106, i64 0, i32 2
  %123 = load i64, ptr %memberidx1.i5.i, align 4
  store i64 3, ptr %121, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %121, i64 0, i32 1
  store i64 %122, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i6.i = getelementptr inbounds %VarId, ptr %121, i64 0, i32 2
  store i64 %123, ptr %memberidx2.i.i6.i, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %120, ptr %1, ptr nonnull %121)
  br label %ifend28

else33:                                           ; preds = %if.entry26
  %memberidx36 = getelementptr inbounds %EnumType, ptr %100, i64 0, i32 1
  %124 = load ptr, ptr %memberidx36, align 8
  %125 = load ptr, ptr %0, align 8
  %memberidx.i.i.i121 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %126 = load i64, ptr %memberidx.i.i.i121, align 4
  %memberidx1.i.i.i.i122 = getelementptr inbounds %Program, ptr %125, i64 0, i32 1
  %127 = load ptr, ptr %memberidx1.i.i.i.i122, align 8
  %memberidx.i.i.i.i.i123 = getelementptr inbounds %Array_Module_, ptr %127, i64 0, i32 1
  %128 = load ptr, ptr %memberidx.i.i.i.i.i123, align 8
  %ptridx.i.i.i.i.i124 = getelementptr inbounds ptr, ptr %128, i64 %126
  %129 = load ptr, ptr %ptridx.i.i.i.i.i124, align 8
  %memberidx1.i.i125 = getelementptr inbounds %Module, ptr %129, i64 0, i32 6
  %130 = load ptr, ptr %memberidx1.i.i125, align 8
  %131 = load i64, ptr %130, align 4
  %ptridx.i.i.i.i128 = getelementptr inbounds ptr, ptr %128, i64 %131
  %132 = load ptr, ptr %ptridx.i.i.i.i128, align 8
  %memberidx2.i.i.i129 = getelementptr inbounds %Module, ptr %132, i64 0, i32 8
  %133 = load ptr, ptr %memberidx2.i.i.i129, align 8
  %memberidx3.i.i.i130 = getelementptr inbounds %ScopeId, ptr %130, i64 0, i32 1
  %134 = load i64, ptr %memberidx3.i.i.i130, align 4
  %memberidx.i5.i.i.i131 = getelementptr inbounds %Array_Scope_, ptr %133, i64 0, i32 1
  %135 = load ptr, ptr %memberidx.i5.i.i.i131, align 8
  %ptridx.i6.i.i.i132 = getelementptr inbounds ptr, ptr %135, i64 %134
  %136 = load ptr, ptr %ptridx.i6.i.i.i132, align 8
  %memberidx.i133 = getelementptr inbounds %Scope, ptr %136, i64 0, i32 4
  %137 = load ptr, ptr %memberidx.i133, align 8
  call fastcc void @Map_string_EnumId____setitem__(ptr %137, ptr %1, ptr %124)
  %memberidx1.i134 = getelementptr inbounds %Scope, ptr %136, i64 0, i32 1
  %138 = load ptr, ptr %memberidx1.i134, align 8
  %139 = call ptr @malloc(i32 24)
  %140 = load i64, ptr %124, align 4
  %memberidx1.i5.i135 = getelementptr inbounds %TypeId, ptr %124, i64 0, i32 2
  %141 = load i64, ptr %memberidx1.i5.i135, align 4
  store i64 4, ptr %139, align 4
  %memberidx1.i.i.i136 = getelementptr inbounds %VarId, ptr %139, i64 0, i32 1
  store i64 %140, ptr %memberidx1.i.i.i136, align 4
  %memberidx2.i.i6.i137 = getelementptr inbounds %VarId, ptr %139, i64 0, i32 2
  store i64 %141, ptr %memberidx2.i.i6.i137, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %138, ptr %1, ptr nonnull %139)
  br label %ifend28
}

define internal fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nocapture readonly %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %5 = tail call ptr @malloc(i32 24)
  %memberidx.i = getelementptr inbounds %Var, ptr %5, i64 0, i32 2
  store ptr %2, ptr %memberidx.i, align 8
  store ptr %3, ptr %5, align 8
  %memberidx.i12 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx.i12, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %8, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %6
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx1.i14 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %memberidx1.i14, align 8
  %12 = load i64, ptr %11, align 4
  %ptridx.i.i.i17 = getelementptr inbounds ptr, ptr %9, i64 %12
  %13 = load ptr, ptr %ptridx.i.i.i17, align 8
  %memberidx2.i.i18 = getelementptr inbounds %Module, ptr %13, i64 0, i32 8
  %14 = load ptr, ptr %memberidx2.i.i18, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  %15 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i6.i.i, align 8
  %18 = tail call ptr @malloc(i32 24)
  %19 = load i64, ptr %memberidx.i12, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %10, i64 0, i32 2
  %20 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2, align 4
  store i64 1, ptr %18, align 4
  %memberidx1.i19 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 1
  store i64 %19, ptr %memberidx1.i19, align 4
  %memberidx2.i = getelementptr inbounds %VarId, ptr %18, i64 0, i32 2
  store i64 %21, ptr %memberidx2.i, align 4
  %memberidx3 = getelementptr inbounds %Var, ptr %5, i64 0, i32 1
  store ptr %18, ptr %memberidx3, align 8
  %22 = load ptr, ptr %memberidx1, align 8
  %memberidx.i13 = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx.i13, align 4
  %memberidx1.i = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 3
  %24 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %23, %24
  br i1 %.not.i, label %Array_Var____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %4
  %25 = shl i64 %24, 1
  store i64 %25, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i.i, align 8
  %27 = shl i64 %24, 4
  %28 = call ptr @realloc(ptr %26, i64 %27)
  store ptr %28, ptr %memberidx2.i.i, align 8
  br label %Array_Var____sl__.exit

Array_Var____sl__.exit:                           ; preds = %4, %if.entry.i
  %29 = load i64, ptr %memberidx.i13, align 4
  %30 = add nsw i64 %29, 1
  store i64 %30, ptr %memberidx.i13, align 4
  %memberidx4.i = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 1
  %31 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr %5, ptr %ptridx.i, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %17, i64 0, i32 1
  %32 = load ptr, ptr %memberidx5, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %32, ptr %1, ptr nonnull %18)
  ret ptr %5
}

define internal fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nocapture readonly %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %5 = tail call ptr @malloc(i32 24)
  %memberidx.i = getelementptr inbounds %Const, ptr %5, i64 0, i32 2
  store ptr %2, ptr %memberidx.i, align 8
  store ptr %3, ptr %5, align 8
  %memberidx.i12 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx.i12, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %8, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %6
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx1.i14 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %memberidx1.i14, align 8
  %12 = load i64, ptr %11, align 4
  %ptridx.i.i.i17 = getelementptr inbounds ptr, ptr %9, i64 %12
  %13 = load ptr, ptr %ptridx.i.i.i17, align 8
  %memberidx2.i.i18 = getelementptr inbounds %Module, ptr %13, i64 0, i32 8
  %14 = load ptr, ptr %memberidx2.i.i18, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  %15 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i6.i.i, align 8
  %18 = tail call ptr @malloc(i32 24)
  %19 = load i64, ptr %memberidx.i12, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %10, i64 0, i32 3
  %20 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2, align 4
  store i64 2, ptr %18, align 4
  %memberidx1.i.i19 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 1
  store i64 %19, ptr %memberidx1.i.i19, align 4
  %memberidx2.i.i20 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 2
  store i64 %21, ptr %memberidx2.i.i20, align 4
  %memberidx3 = getelementptr inbounds %Const, ptr %5, i64 0, i32 1
  store ptr %18, ptr %memberidx3, align 8
  %22 = load ptr, ptr %memberidx1, align 8
  %memberidx.i13 = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx.i13, align 4
  %memberidx1.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 3
  %24 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %23, %24
  br i1 %.not.i, label %Array_Const____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %4
  %25 = shl i64 %24, 1
  store i64 %25, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i.i, align 8
  %27 = shl i64 %24, 4
  %28 = call ptr @realloc(ptr %26, i64 %27)
  store ptr %28, ptr %memberidx2.i.i, align 8
  br label %Array_Const____sl__.exit

Array_Const____sl__.exit:                         ; preds = %4, %if.entry.i
  %29 = load i64, ptr %memberidx.i13, align 4
  %30 = add nsw i64 %29, 1
  store i64 %30, ptr %memberidx.i13, align 4
  %memberidx4.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 1
  %31 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr %5, ptr %ptridx.i, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %17, i64 0, i32 1
  %32 = load ptr, ptr %memberidx5, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %32, ptr %1, ptr nonnull %18)
  ret ptr %5
}

define internal fastcc ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %0, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = call fastcc ptr @get_class_from_type(ptr %5, ptr %6)
  %memberidx3 = getelementptr inbounds %Class, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %9, ptr noundef nonnull align 8 dereferenceable(11) @106, i64 11, i1 false)
  %10 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %10, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 1
  store ptr %9, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i, align 4
  %11 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %10)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %8, i64 0, i32 1
  %12 = load i64, ptr %memberidx.i, align 4
  %13 = srem i64 %11, %12
  %14 = load ptr, ptr %8, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %15, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %3, %else.i
  %hash.0.i = phi i64 [ %29, %else.i ], [ %13, %3 ]
  %16 = load ptr, ptr %8, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %16, i64 %hash.0.i
  %17 = load ptr, ptr %ptridx3.i, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i.i65 = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i.i65, align 4
  %20 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %19, %20
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i67 = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i.i67, align 8
  %22 = load ptr, ptr %memberidx.i.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %3
  %hash.1.i = phi i64 [ %13, %3 ], [ %hash.0.i, %ifend.i.i ], [ %29, %else.i ]
  %25 = load ptr, ptr %8, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %25, i64 %hash.1.i
  %26 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %26, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %27 = add nsw i64 %hash.0.i, 1
  %28 = load i64, ptr %memberidx.i, align 4
  %29 = srem i64 %27, %28
  %30 = load ptr, ptr %8, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %31, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %26, i64 0, i32 1
  %32 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %32, %if.entry10.i ], [ null, %while.end.i ]
  %33 = icmp eq ptr %common.ret.op.i, null
  br i1 %33, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend20, %ifend12, %get_class_prop_type.exit, %ifend33, %TypeChecker_error.exit125, %TypeChecker_error.exit106, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit106 ], [ null, %TypeChecker_error.exit125 ], [ %157, %ifend33 ], [ null, %get_class_prop_type.exit ], [ null, %ifend12 ], [ null, %ifend20 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %Map_string_PropId____getitem__.exit
  %memberidx4 = getelementptr inbounds %Class, ptr %7, i64 0, i32 1
  %34 = load ptr, ptr %memberidx4, align 8
  %35 = load ptr, ptr %34, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i64 0, i32 5
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = call ptr %36(ptr nonnull %34)
  %38 = alloca ptr, align 8
  %39 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %38, ptr nonnull @157, ptr %37)
  %40 = load ptr, ptr %38, align 8
  %41 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %41, align 8
  %memberidx.i68 = getelementptr inbounds %string, ptr %41, i64 0, i32 1
  store ptr %40, ptr %memberidx.i68, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %41, i64 0, i32 2
  store i64 %39, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %41, i64 0, i32 3
  store i64 %39, ptr %memberidx2.i, align 4
  tail call void @free(ptr %37)
  %42 = load ptr, ptr %4, align 8
  %memberidx.i69 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %43 = load ptr, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %Compiler, ptr %43, i64 0, i32 6
  %44 = load ptr, ptr %memberidx1.i70, align 8
  %45 = call ptr @malloc(i32 24)
  store i64 4, ptr %45, align 4
  %memberidx1.i.i71 = getelementptr inbounds %FloError, ptr %45, i64 0, i32 2
  store ptr %42, ptr %memberidx1.i.i71, align 8
  %memberidx2.i.i72 = getelementptr inbounds %FloError, ptr %45, i64 0, i32 1
  store ptr %41, ptr %memberidx2.i.i72, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_FloError_, ptr %44, i64 0, i32 2
  %46 = load i64, ptr %memberidx.i.i73, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %44, i64 0, i32 3
  %47 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i74 = icmp slt i64 %46, %47
  br i1 %.not.i.i74, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %48 = shl i64 %47, 1
  store i64 %48, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %44, i64 0, i32 1
  %49 = load ptr, ptr %memberidx2.i.i.i, align 8
  %50 = shl i64 %47, 4
  %51 = call ptr @realloc(ptr %49, i64 %50)
  store ptr %51, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %52 = load i64, ptr %memberidx.i.i73, align 4
  %53 = add nsw i64 %52, 1
  store i64 %53, ptr %memberidx.i.i73, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %44, i64 0, i32 1
  %54 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %54, i64 %52
  store ptr %45, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %55 = load ptr, ptr %0, align 8
  %memberidx.i.i75 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i75, align 8
  %memberidx.i.i.i76 = getelementptr inbounds %Program, ptr %55, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i.i.i76, align 8
  %58 = load i64, ptr %56, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %59, i64 %58
  %60 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i77 = getelementptr inbounds %Module, ptr %60, i64 0, i32 4
  %61 = load ptr, ptr %memberidx2.i.i.i77, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %56, i64 0, i32 2
  %62 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %61, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %63, i64 %62
  %64 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %65 = load i64, ptr %common.ret.op.i, align 4
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i79 = getelementptr inbounds %Class, ptr %64, i64 0, i32 5
  %67 = load ptr, ptr %memberidx1.i79, align 8
  %memberidx2.i80 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %68 = load i64, ptr %memberidx2.i80, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %70, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %64, i64 0, i32 4
  %71 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %72 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i81 = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i.i81, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %74, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i78 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx8 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i78, i64 0, i32 1
  %75 = load ptr, ptr %memberidx8, align 8
  %memberidx.i82 = getelementptr inbounds %Array_Type_, ptr %75, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i82, align 8
  %77 = load ptr, ptr %76, align 8
  %ptridx.i84 = getelementptr inbounds ptr, ptr %76, i64 1
  %78 = load ptr, ptr %ptridx.i84, align 8
  %memberidx.i85 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %79 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i86 = getelementptr inbounds %Compiler, ptr %79, i64 0, i32 6
  %80 = load ptr, ptr %memberidx1.i86, align 8
  %memberidx2.i87 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx2.i87, align 4
  %82 = icmp sgt i64 %81, 0
  br i1 %82, label %common.ret, label %ifend12

ifend12:                                          ; preds = %get_class_prop_type.exit
  %memberidx13 = getelementptr inbounds %ExpressionIndexNode, ptr %4, i64 0, i32 4
  %83 = load ptr, ptr %memberidx13, align 8
  %84 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %77, ptr %83)
  %85 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i89 = getelementptr inbounds %Compiler, ptr %85, i64 0, i32 6
  %86 = load ptr, ptr %memberidx1.i89, align 8
  %memberidx2.i90 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 2
  %87 = load i64, ptr %memberidx2.i90, align 4
  %88 = icmp sgt i64 %87, 0
  br i1 %88, label %common.ret, label %ifend16

ifend16:                                          ; preds = %ifend12
  %memberidx17 = getelementptr inbounds %Expression, ptr %84, i64 0, i32 3
  %89 = load ptr, ptr %memberidx17, align 8
  %90 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %77, ptr %89)
  br i1 %90, label %ifend20, label %if.entry18

if.entry18:                                       ; preds = %ifend16
  %91 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %77)
  %92 = load ptr, ptr %91, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i64 0, i32 5
  %93 = load ptr, ptr %memberidx21, align 8
  %94 = call ptr %93(ptr nonnull %91)
  %95 = load ptr, ptr %memberidx17, align 8
  %96 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %95)
  %97 = load ptr, ptr %96, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %97, i64 0, i32 5
  %98 = load ptr, ptr %memberidx23, align 8
  %99 = call ptr %98(ptr nonnull %96)
  %100 = alloca ptr, align 8
  %101 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %100, ptr nonnull @154, ptr %94, ptr %99)
  %102 = load ptr, ptr %100, align 8
  %103 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %103, align 8
  %memberidx.i91 = getelementptr inbounds %string, ptr %103, i64 0, i32 1
  store ptr %102, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %string, ptr %103, i64 0, i32 2
  store i64 %101, ptr %memberidx1.i92, align 4
  %memberidx2.i93 = getelementptr inbounds %string, ptr %103, i64 0, i32 3
  store i64 %101, ptr %memberidx2.i93, align 4
  tail call void @free(ptr %94)
  tail call void @free(ptr %99)
  %104 = load ptr, ptr %memberidx13, align 8
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i95 = getelementptr inbounds %Compiler, ptr %106, i64 0, i32 6
  %107 = load ptr, ptr %memberidx1.i95, align 8
  %108 = call ptr @malloc(i32 24)
  store i64 5, ptr %108, align 4
  %memberidx1.i.i96 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 2
  store ptr %105, ptr %memberidx1.i.i96, align 8
  %memberidx2.i.i97 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 1
  store ptr %103, ptr %memberidx2.i.i97, align 8
  %memberidx.i.i98 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 2
  %109 = load i64, ptr %memberidx.i.i98, align 4
  %memberidx1.i2.i99 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 3
  %110 = load i64, ptr %memberidx1.i2.i99, align 4
  %.not.i.i100 = icmp slt i64 %109, %110
  br i1 %.not.i.i100, label %TypeChecker_error.exit106, label %if.entry.i.i103

if.entry.i.i103:                                  ; preds = %if.entry18
  %111 = shl i64 %110, 1
  store i64 %111, ptr %memberidx1.i2.i99, align 4
  %memberidx2.i.i.i102 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %112 = load ptr, ptr %memberidx2.i.i.i102, align 8
  %113 = shl i64 %110, 4
  %114 = call ptr @realloc(ptr %112, i64 %113)
  store ptr %114, ptr %memberidx2.i.i.i102, align 8
  br label %TypeChecker_error.exit106

TypeChecker_error.exit106:                        ; preds = %if.entry18, %if.entry.i.i103
  %115 = load i64, ptr %memberidx.i.i98, align 4
  %116 = add nsw i64 %115, 1
  store i64 %116, ptr %memberidx.i.i98, align 4
  %memberidx4.i.i104 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %117 = load ptr, ptr %memberidx4.i.i104, align 8
  %ptridx.i.i105 = getelementptr inbounds ptr, ptr %117, i64 %115
  store ptr %108, ptr %ptridx.i.i105, align 8
  br label %common.ret

ifend20:                                          ; preds = %ifend16
  %memberidx26 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %118 = load ptr, ptr %memberidx26, align 8
  %119 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %78, ptr %118)
  %120 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i108 = getelementptr inbounds %Compiler, ptr %120, i64 0, i32 6
  %121 = load ptr, ptr %memberidx1.i108, align 8
  %memberidx2.i109 = getelementptr inbounds %Array_FloError_, ptr %121, i64 0, i32 2
  %122 = load i64, ptr %memberidx2.i109, align 4
  %123 = icmp sgt i64 %122, 0
  br i1 %123, label %common.ret, label %ifend29

ifend29:                                          ; preds = %ifend20
  %124 = load ptr, ptr %memberidx17, align 8
  %125 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %77, ptr %124)
  br i1 %125, label %ifend33, label %if.entry31

if.entry31:                                       ; preds = %ifend29
  %126 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %78)
  %127 = load ptr, ptr %126, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %127, i64 0, i32 5
  %128 = load ptr, ptr %memberidx34, align 8
  %129 = call ptr %128(ptr nonnull %126)
  %memberidx35 = getelementptr inbounds %Expression, ptr %119, i64 0, i32 3
  %130 = load ptr, ptr %memberidx35, align 8
  %131 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %130)
  %132 = load ptr, ptr %131, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %132, i64 0, i32 5
  %133 = load ptr, ptr %memberidx36, align 8
  %134 = call ptr %133(ptr nonnull %131)
  %135 = alloca ptr, align 8
  %136 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %135, ptr nonnull @154, ptr %129, ptr %134)
  %137 = load ptr, ptr %135, align 8
  %138 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %138, align 8
  %memberidx.i110 = getelementptr inbounds %string, ptr %138, i64 0, i32 1
  store ptr %137, ptr %memberidx.i110, align 8
  %memberidx1.i111 = getelementptr inbounds %string, ptr %138, i64 0, i32 2
  store i64 %136, ptr %memberidx1.i111, align 4
  %memberidx2.i112 = getelementptr inbounds %string, ptr %138, i64 0, i32 3
  store i64 %136, ptr %memberidx2.i112, align 4
  tail call void @free(ptr %129)
  tail call void @free(ptr %134)
  %139 = load ptr, ptr %memberidx26, align 8
  %140 = load ptr, ptr %139, align 8
  %141 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i114 = getelementptr inbounds %Compiler, ptr %141, i64 0, i32 6
  %142 = load ptr, ptr %memberidx1.i114, align 8
  %143 = call ptr @malloc(i32 24)
  store i64 5, ptr %143, align 4
  %memberidx1.i.i115 = getelementptr inbounds %FloError, ptr %143, i64 0, i32 2
  store ptr %140, ptr %memberidx1.i.i115, align 8
  %memberidx2.i.i116 = getelementptr inbounds %FloError, ptr %143, i64 0, i32 1
  store ptr %138, ptr %memberidx2.i.i116, align 8
  %memberidx.i.i117 = getelementptr inbounds %Array_FloError_, ptr %142, i64 0, i32 2
  %144 = load i64, ptr %memberidx.i.i117, align 4
  %memberidx1.i2.i118 = getelementptr inbounds %Array_FloError_, ptr %142, i64 0, i32 3
  %145 = load i64, ptr %memberidx1.i2.i118, align 4
  %.not.i.i119 = icmp slt i64 %144, %145
  br i1 %.not.i.i119, label %TypeChecker_error.exit125, label %if.entry.i.i122

if.entry.i.i122:                                  ; preds = %if.entry31
  %146 = shl i64 %145, 1
  store i64 %146, ptr %memberidx1.i2.i118, align 4
  %memberidx2.i.i.i121 = getelementptr inbounds %Array_FloError_, ptr %142, i64 0, i32 1
  %147 = load ptr, ptr %memberidx2.i.i.i121, align 8
  %148 = shl i64 %145, 4
  %149 = call ptr @realloc(ptr %147, i64 %148)
  store ptr %149, ptr %memberidx2.i.i.i121, align 8
  br label %TypeChecker_error.exit125

TypeChecker_error.exit125:                        ; preds = %if.entry31, %if.entry.i.i122
  %150 = load i64, ptr %memberidx.i.i117, align 4
  %151 = add nsw i64 %150, 1
  store i64 %151, ptr %memberidx.i.i117, align 4
  %memberidx4.i.i123 = getelementptr inbounds %Array_FloError_, ptr %142, i64 0, i32 1
  %152 = load ptr, ptr %memberidx4.i.i123, align 8
  %ptridx.i.i124 = getelementptr inbounds ptr, ptr %152, i64 %150
  store ptr %143, ptr %ptridx.i.i124, align 8
  br label %common.ret

ifend33:                                          ; preds = %ifend29
  %153 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %153, align 4
  %memberidx.i.i126 = getelementptr inbounds %Expression, ptr %153, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i126, align 4
  %memberidx1.i.i127 = getelementptr inbounds %Expression, ptr %153, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i127, align 1
  %memberidx.i128 = getelementptr inbounds %MemberExpression, ptr %153, i64 0, i32 4
  store ptr %1, ptr %memberidx.i128, align 8
  %memberidx1.i129 = getelementptr inbounds %MemberExpression, ptr %153, i64 0, i32 5
  store ptr %common.ret.op.i, ptr %memberidx1.i129, align 8
  %memberidx2.i130 = getelementptr inbounds %Expression, ptr %153, i64 0, i32 3
  store ptr %common.ret.op.i78, ptr %memberidx2.i130, align 8
  %154 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %154, align 8
  %memberidx.i131 = getelementptr inbounds %Array_Expression_, ptr %154, i64 0, i32 2
  store i64 0, ptr %memberidx.i131, align 4
  %memberidx1.i132 = getelementptr inbounds %Array_Expression_, ptr %154, i64 0, i32 3
  store i64 16, ptr %memberidx1.i132, align 4
  %memberidx2.i133 = getelementptr inbounds %Array_Expression_, ptr %154, i64 0, i32 1
  %155 = call ptr @malloc(i32 128)
  store ptr %155, ptr %memberidx2.i133, align 8
  store ptr %84, ptr %155, align 8
  %156 = getelementptr inbounds ptr, ptr %155, i64 1
  store ptr %119, ptr %156, align 8
  store i64 2, ptr %memberidx.i131, align 4
  %157 = tail call ptr @malloc(i32 41)
  %memberidx41 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i78, i64 0, i32 2
  %158 = load ptr, ptr %memberidx41, align 8
  store i64 8, ptr %157, align 4
  %memberidx.i.i134 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i134, align 4
  %memberidx1.i.i135 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i135, align 1
  %memberidx.i136 = getelementptr inbounds %CallExpression, ptr %157, i64 0, i32 4
  store ptr %153, ptr %memberidx.i136, align 8
  %memberidx1.i137 = getelementptr inbounds %CallExpression, ptr %157, i64 0, i32 5
  store ptr %154, ptr %memberidx1.i137, align 8
  %memberidx2.i138 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 3
  store ptr %158, ptr %memberidx2.i138, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = add i64 %4, -19
  %6 = icmp ult i64 %5, 12
  %7 = icmp eq i64 %4, 19
  %memberidx1 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 3
  %8 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ExpressionNode, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp eq i64 %9, 13
  %11 = and i1 %7, %10
  br i1 %11, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %12 = call ptr @malloc(i32 8)
  store i64 20, ptr %12, align 4
  %13 = load ptr, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %ExpressionIndexNode, ptr %13, i64 0, i32 3
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %12, ptr %14)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %16 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %16, i64 0, i32 6
  %17 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i, align 4
  %19 = icmp sgt i64 %18, 0
  br i1 %19, label %common.ret, label %ifend7

ifend:                                            ; preds = %ifend7, %3
  %left = alloca ptr, align 8
  %20 = load ptr, ptr %memberidx1, align 8
  %21 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %20)
  store ptr %21, ptr %left, align 8
  %memberidx.i170 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %22 = load ptr, ptr %memberidx.i170, align 8
  %memberidx1.i171 = getelementptr inbounds %Compiler, ptr %22, i64 0, i32 6
  %23 = load ptr, ptr %memberidx1.i171, align 8
  %memberidx2.i172 = getelementptr inbounds %Array_FloError_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx2.i172, align 4
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %common.ret, label %ifend15

common.ret:                                       ; preds = %ifend19, %ifend, %if.entry, %TypeChecker_error.exit, %if.entry110, %if.entry102, %ifend98, %if.entry87, %ifend80, %ifend69, %ifend61, %if.entry34, %if.entry26, %if.entry17, %if.entry9
  %common.ret.op = phi ptr [ %28, %if.entry9 ], [ %35, %if.entry17 ], [ %46, %if.entry26 ], [ %50, %if.entry34 ], [ %86, %ifend61 ], [ %96, %ifend69 ], [ %111, %ifend80 ], [ %115, %if.entry87 ], [ %124, %ifend98 ], [ %127, %if.entry102 ], [ %136, %if.entry110 ], [ null, %TypeChecker_error.exit ], [ null, %if.entry ], [ null, %ifend ], [ null, %ifend19 ]
  ret ptr %common.ret.op

ifend7:                                           ; preds = %if.entry
  %memberidx8 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  %26 = load ptr, ptr %memberidx8, align 8
  %27 = call fastcc i1 @is_object(ptr %26)
  br i1 %27, label %if.entry9, label %ifend

if.entry9:                                        ; preds = %ifend7
  %28 = call fastcc ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %15, ptr %2)
  br label %common.ret

ifend15:                                          ; preds = %ifend
  %memberidx16 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 3
  %29 = load ptr, ptr %memberidx16, align 8
  %30 = call fastcc i1 @is_object(ptr %29)
  %31 = xor i1 %6, true
  %32 = and i1 %30, %31
  %33 = icmp ne i64 %4, 18
  %34 = and i1 %33, %32
  br i1 %34, label %if.entry17, label %ifend19

if.entry17:                                       ; preds = %ifend15
  %35 = call fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %21, ptr %2, ptr null)
  br label %common.ret

ifend19:                                          ; preds = %ifend15
  %right = alloca ptr, align 8
  %memberidx21 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %36 = load ptr, ptr %memberidx21, align 8
  %37 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %29, ptr %36)
  store ptr %37, ptr %right, align 8
  %38 = load ptr, ptr %memberidx.i170, align 8
  %memberidx1.i174 = getelementptr inbounds %Compiler, ptr %38, i64 0, i32 6
  %39 = load ptr, ptr %memberidx1.i174, align 8
  %memberidx2.i175 = getelementptr inbounds %Array_FloError_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i175, align 4
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend19
  %memberidx25 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %42 = load ptr, ptr %memberidx25, align 8
  %43 = call fastcc i1 @is_object(ptr %42)
  %44 = icmp eq i64 %4, 18
  %45 = and i1 %44, %43
  br i1 %45, label %if.entry26, label %ifend31

if.entry26:                                       ; preds = %ifend24
  %46 = call fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %37, ptr %2, ptr %21)
  br label %common.ret

ifend31:                                          ; preds = %ifend24
  %memberidx32 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 1
  %47 = load i1, ptr %memberidx32, align 1
  %memberidx33 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 1
  %48 = load i1, ptr %memberidx33, align 1
  %49 = and i1 %47, %48
  br i1 %6, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend31
  %50 = call fastcc ptr @TypeChecker_check_assignment(ptr %0, ptr %21, ptr %37, ptr %2)
  br label %common.ret

ifend36:                                          ; preds = %ifend31
  %51 = load ptr, ptr %memberidx16, align 8
  %52 = load i64, ptr %51, align 4
  %53 = icmp eq i64 %52, 20
  %54 = load i64, ptr %42, align 4
  %55 = icmp ne i64 %54, 20
  %56 = and i1 %53, %55
  br i1 %56, label %if.entry41, label %ifend43

if.entry41:                                       ; preds = %ifend36
  store ptr %42, ptr %memberidx16, align 8
  br label %ifend43

ifend43:                                          ; preds = %ifend36, %if.entry41
  %57 = load ptr, ptr %memberidx16, align 8
  %58 = load i64, ptr %57, align 4
  %59 = add i64 %58, -1
  %60 = icmp ult i64 %59, 9
  %61 = load ptr, ptr %memberidx25, align 8
  %62 = load i64, ptr %61, align 4
  %63 = add i64 %62, -1
  %64 = icmp ult i64 %63, 9
  %65 = and i1 %60, %64
  br i1 %65, label %if.entry48, label %else49

if.entry48:                                       ; preds = %ifend43
  %66 = icmp eq i64 %4, 6
  br i1 %66, label %if.entry51, label %ifend53

else49:                                           ; preds = %ifend43
  %67 = or i64 %62, %58
  %68 = icmp eq i64 %67, 0
  %69 = add i64 %4, -15
  %70 = icmp ult i64 %69, 2
  %or.cond = select i1 %68, i1 %70, i1 false
  br i1 %or.cond, label %if.entry87, label %ifend50

ifend50:                                          ; preds = %else49, %ifend65
  %71 = add i64 %4, -7
  %72 = icmp ult i64 %71, 6
  br i1 %72, label %if.entry91, label %ifend93

if.entry51:                                       ; preds = %if.entry48
  %73 = icmp ult i64 %59, 7
  br i1 %73, label %if.entry55, label %ifend57

ifend53:                                          ; preds = %if.entry48
  %74 = add i64 %4, -1
  %75 = icmp ult i64 %74, 10
  br i1 %75, label %if.entry63, label %ifend65

if.entry55:                                       ; preds = %if.entry51
  %76 = tail call ptr @malloc(i32 8)
  store i64 9, ptr %76, align 4
  %77 = call ptr @malloc(i32 33)
  store i64 8, ptr %77, align 4
  %memberidx.i.i.i = getelementptr inbounds %Expression, ptr %77, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %77, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i, align 1
  %memberidx.i.i = getelementptr inbounds %TypeCastExpression, ptr %77, i64 0, i32 4
  store ptr %21, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %77, i64 0, i32 3
  store ptr %76, ptr %memberidx1.i.i, align 8
  %78 = load i1, ptr %memberidx32, align 1
  store i1 %78, ptr %memberidx1.i.i.i, align 1
  store ptr %77, ptr %left, align 8
  br label %ifend57

ifend57:                                          ; preds = %if.entry51, %if.entry55
  %79 = load ptr, ptr %memberidx25, align 8
  %80 = load i64, ptr %79, align 4
  %81 = add i64 %80, -1
  %82 = icmp ult i64 %81, 7
  br i1 %82, label %if.entry59, label %ifend61

if.entry59:                                       ; preds = %ifend57
  %83 = tail call ptr @malloc(i32 8)
  store i64 9, ptr %83, align 4
  %84 = call ptr @malloc(i32 33)
  store i64 8, ptr %84, align 4
  %memberidx.i.i.i179 = getelementptr inbounds %Expression, ptr %84, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i179, align 4
  %memberidx1.i.i.i180 = getelementptr inbounds %Expression, ptr %84, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i180, align 1
  %memberidx.i.i181 = getelementptr inbounds %TypeCastExpression, ptr %84, i64 0, i32 4
  store ptr %37, ptr %memberidx.i.i181, align 8
  %memberidx1.i.i182 = getelementptr inbounds %Expression, ptr %84, i64 0, i32 3
  store ptr %83, ptr %memberidx1.i.i182, align 8
  %85 = load i1, ptr %memberidx33, align 1
  store i1 %85, ptr %memberidx1.i.i.i180, align 1
  store ptr %84, ptr %right, align 8
  br label %ifend61

ifend61:                                          ; preds = %ifend57, %if.entry59
  %86 = tail call ptr @malloc(i32 49)
  %87 = load ptr, ptr %left, align 8
  %88 = load ptr, ptr %right, align 8
  %memberidx62 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  %89 = load ptr, ptr %memberidx62, align 8
  store i64 8, ptr %86, align 4
  %memberidx.i.i185 = getelementptr inbounds %Expression, ptr %86, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i185, align 4
  %memberidx1.i.i186 = getelementptr inbounds %Expression, ptr %86, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i186, align 1
  %memberidx.i187 = getelementptr inbounds %BinaryExpression, ptr %86, i64 0, i32 4
  store ptr %87, ptr %memberidx.i187, align 8
  %memberidx1.i188 = getelementptr inbounds %BinaryExpression, ptr %86, i64 0, i32 5
  store i64 6, ptr %memberidx1.i188, align 4
  %memberidx2.i189 = getelementptr inbounds %BinaryExpression, ptr %86, i64 0, i32 6
  store ptr %88, ptr %memberidx2.i189, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %86, i64 0, i32 3
  store ptr %89, ptr %memberidx3.i, align 8
  store i1 false, ptr %memberidx1.i.i186, align 1
  br label %common.ret

if.entry63:                                       ; preds = %ifend53
  call fastcc void @check_cast_lower_bits(ptr nonnull %left, ptr nonnull %right)
  %exp_type = alloca ptr, align 8
  %90 = load ptr, ptr %left, align 8
  %memberidx66 = getelementptr inbounds %Expression, ptr %90, i64 0, i32 3
  %91 = load ptr, ptr %memberidx66, align 8
  store ptr %91, ptr %exp_type, align 8
  %92 = icmp sgt i64 %4, 6
  br i1 %92, label %if.entry67, label %ifend69

ifend65:                                          ; preds = %ifend53
  %93 = add i64 %4, -13
  %94 = icmp ult i64 %93, 5
  br i1 %94, label %if.entry70, label %ifend50

if.entry67:                                       ; preds = %if.entry63
  %95 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %95, align 4
  store ptr %95, ptr %exp_type, align 8
  br label %ifend69

ifend69:                                          ; preds = %if.entry63, %if.entry67
  %96 = tail call ptr @malloc(i32 49)
  %97 = load ptr, ptr %right, align 8
  %98 = load ptr, ptr %exp_type, align 8
  store i64 8, ptr %96, align 4
  %memberidx.i.i190 = getelementptr inbounds %Expression, ptr %96, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i190, align 4
  %memberidx1.i.i191 = getelementptr inbounds %Expression, ptr %96, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i191, align 1
  %memberidx.i192 = getelementptr inbounds %BinaryExpression, ptr %96, i64 0, i32 4
  store ptr %90, ptr %memberidx.i192, align 8
  %memberidx1.i193 = getelementptr inbounds %BinaryExpression, ptr %96, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i193, align 4
  %memberidx2.i194 = getelementptr inbounds %BinaryExpression, ptr %96, i64 0, i32 6
  store ptr %97, ptr %memberidx2.i194, align 8
  %memberidx3.i195 = getelementptr inbounds %Expression, ptr %96, i64 0, i32 3
  store ptr %98, ptr %memberidx3.i195, align 8
  store i1 %49, ptr %memberidx1.i.i191, align 1
  br label %common.ret

if.entry70:                                       ; preds = %ifend65
  %99 = and i64 %58, -2
  %100 = icmp eq i64 %99, 8
  br i1 %100, label %if.entry74, label %ifend76

if.entry74:                                       ; preds = %if.entry70
  %101 = tail call ptr @malloc(i32 8)
  store i64 6, ptr %101, align 4
  %102 = call ptr @malloc(i32 33)
  store i64 8, ptr %102, align 4
  %memberidx.i.i.i197 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i197, align 4
  %memberidx1.i.i.i198 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i198, align 1
  %memberidx.i.i199 = getelementptr inbounds %TypeCastExpression, ptr %102, i64 0, i32 4
  store ptr %21, ptr %memberidx.i.i199, align 8
  %memberidx1.i.i200 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 3
  store ptr %101, ptr %memberidx1.i.i200, align 8
  %103 = load i1, ptr %memberidx32, align 1
  store i1 %103, ptr %memberidx1.i.i.i198, align 1
  store ptr %102, ptr %left, align 8
  br label %ifend76

ifend76:                                          ; preds = %if.entry70, %if.entry74
  %104 = load ptr, ptr %memberidx25, align 8
  %105 = load i64, ptr %104, align 4
  %106 = and i64 %105, -2
  %107 = icmp eq i64 %106, 8
  br i1 %107, label %if.entry78, label %ifend80

if.entry78:                                       ; preds = %ifend76
  %108 = tail call ptr @malloc(i32 8)
  store i64 6, ptr %108, align 4
  %109 = call ptr @malloc(i32 33)
  store i64 8, ptr %109, align 4
  %memberidx.i.i.i203 = getelementptr inbounds %Expression, ptr %109, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i203, align 4
  %memberidx1.i.i.i204 = getelementptr inbounds %Expression, ptr %109, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i204, align 1
  %memberidx.i.i205 = getelementptr inbounds %TypeCastExpression, ptr %109, i64 0, i32 4
  store ptr %37, ptr %memberidx.i.i205, align 8
  %memberidx1.i.i206 = getelementptr inbounds %Expression, ptr %109, i64 0, i32 3
  store ptr %108, ptr %memberidx1.i.i206, align 8
  %110 = load i1, ptr %memberidx33, align 1
  store i1 %110, ptr %memberidx1.i.i.i204, align 1
  store ptr %109, ptr %right, align 8
  br label %ifend80

ifend80:                                          ; preds = %ifend76, %if.entry78
  call fastcc void @check_cast_lower_bits(ptr nonnull %left, ptr nonnull %right)
  %111 = tail call ptr @malloc(i32 49)
  %112 = load ptr, ptr %left, align 8
  %113 = load ptr, ptr %right, align 8
  %memberidx81 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 3
  %114 = load ptr, ptr %memberidx81, align 8
  store i64 8, ptr %111, align 4
  %memberidx.i.i209 = getelementptr inbounds %Expression, ptr %111, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i209, align 4
  %memberidx1.i.i210 = getelementptr inbounds %Expression, ptr %111, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i210, align 1
  %memberidx.i211 = getelementptr inbounds %BinaryExpression, ptr %111, i64 0, i32 4
  store ptr %112, ptr %memberidx.i211, align 8
  %memberidx1.i212 = getelementptr inbounds %BinaryExpression, ptr %111, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i212, align 4
  %memberidx2.i213 = getelementptr inbounds %BinaryExpression, ptr %111, i64 0, i32 6
  store ptr %113, ptr %memberidx2.i213, align 8
  %memberidx3.i214 = getelementptr inbounds %Expression, ptr %111, i64 0, i32 3
  store ptr %114, ptr %memberidx3.i214, align 8
  store i1 %49, ptr %memberidx1.i.i210, align 1
  br label %common.ret

if.entry87:                                       ; preds = %else49
  %115 = tail call ptr @malloc(i32 49)
  %116 = load ptr, ptr %memberidx16, align 8
  store i64 8, ptr %115, align 4
  %memberidx.i.i216 = getelementptr inbounds %Expression, ptr %115, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i216, align 4
  %memberidx1.i.i217 = getelementptr inbounds %Expression, ptr %115, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i217, align 1
  %memberidx.i218 = getelementptr inbounds %BinaryExpression, ptr %115, i64 0, i32 4
  store ptr %21, ptr %memberidx.i218, align 8
  %memberidx1.i219 = getelementptr inbounds %BinaryExpression, ptr %115, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i219, align 4
  %memberidx2.i220 = getelementptr inbounds %BinaryExpression, ptr %115, i64 0, i32 6
  store ptr %37, ptr %memberidx2.i220, align 8
  %memberidx3.i221 = getelementptr inbounds %Expression, ptr %115, i64 0, i32 3
  store ptr %116, ptr %memberidx3.i221, align 8
  store i1 %49, ptr %memberidx1.i.i217, align 1
  br label %common.ret

if.entry91:                                       ; preds = %ifend50
  br i1 %65, label %if.entry96, label %ifend98

ifend93:                                          ; preds = %ifend50
  %117 = add i64 %4, -1
  %118 = icmp ult i64 %117, 2
  %119 = icmp eq i64 %58, 13
  %120 = and i1 %118, %119
  %121 = icmp eq i64 %62, 6
  %122 = and i1 %120, %121
  br i1 %122, label %if.entry102, label %ifend104

if.entry96:                                       ; preds = %if.entry91
  call fastcc void @check_cast_lower_bits(ptr nonnull %left, ptr nonnull %right)
  br label %ifend98

ifend98:                                          ; preds = %if.entry91, %if.entry96
  %123 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %123, align 4
  %124 = tail call ptr @malloc(i32 49)
  %125 = load ptr, ptr %left, align 8
  %126 = load ptr, ptr %right, align 8
  store i64 8, ptr %124, align 4
  %memberidx.i.i223 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i223, align 4
  %memberidx1.i.i224 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i224, align 1
  %memberidx.i225 = getelementptr inbounds %BinaryExpression, ptr %124, i64 0, i32 4
  store ptr %125, ptr %memberidx.i225, align 8
  %memberidx1.i226 = getelementptr inbounds %BinaryExpression, ptr %124, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i226, align 4
  %memberidx2.i227 = getelementptr inbounds %BinaryExpression, ptr %124, i64 0, i32 6
  store ptr %126, ptr %memberidx2.i227, align 8
  %memberidx3.i228 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 3
  store ptr %123, ptr %memberidx3.i228, align 8
  store i1 %49, ptr %memberidx1.i.i224, align 1
  br label %common.ret

if.entry102:                                      ; preds = %ifend93
  %127 = tail call ptr @malloc(i32 49)
  %128 = load ptr, ptr %memberidx16, align 8
  store i64 8, ptr %127, align 4
  %memberidx.i.i230 = getelementptr inbounds %Expression, ptr %127, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i230, align 4
  %memberidx1.i.i231 = getelementptr inbounds %Expression, ptr %127, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i231, align 1
  %memberidx.i232 = getelementptr inbounds %BinaryExpression, ptr %127, i64 0, i32 4
  store ptr %21, ptr %memberidx.i232, align 8
  %memberidx1.i233 = getelementptr inbounds %BinaryExpression, ptr %127, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i233, align 4
  %memberidx2.i234 = getelementptr inbounds %BinaryExpression, ptr %127, i64 0, i32 6
  store ptr %37, ptr %memberidx2.i234, align 8
  %memberidx3.i235 = getelementptr inbounds %Expression, ptr %127, i64 0, i32 3
  store ptr %128, ptr %memberidx3.i235, align 8
  store i1 false, ptr %memberidx1.i.i231, align 1
  br label %common.ret

ifend104:                                         ; preds = %ifend93
  %129 = icmp eq i64 %4, 31
  %130 = icmp eq i64 %58, 6
  %131 = and i1 %129, %130
  %132 = and i1 %131, %121
  br i1 %132, label %if.entry110, label %ifend112

if.entry110:                                      ; preds = %ifend104
  %133 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %133, ptr noundef nonnull align 8 dereferenceable(5) @158, i64 5, i1 false)
  %134 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %134, align 8
  %memberidx.i.i237 = getelementptr inbounds %string, ptr %134, i64 0, i32 1
  store ptr %133, ptr %memberidx.i.i237, align 8
  %memberidx1.i.i238 = getelementptr inbounds %string, ptr %134, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i238, align 4
  %memberidx2.i.i239 = getelementptr inbounds %string, ptr %134, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i239, align 4
  %135 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr nonnull %134)
  %136 = tail call ptr @malloc(i32 42)
  %137 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %137, align 8
  %memberidx.i240 = getelementptr inbounds %Array_Expression_, ptr %137, i64 0, i32 2
  store i64 0, ptr %memberidx.i240, align 4
  %memberidx1.i241 = getelementptr inbounds %Array_Expression_, ptr %137, i64 0, i32 3
  store i64 16, ptr %memberidx1.i241, align 4
  %memberidx2.i242 = getelementptr inbounds %Array_Expression_, ptr %137, i64 0, i32 1
  %138 = call ptr @malloc(i32 128)
  store ptr %138, ptr %memberidx2.i242, align 8
  store ptr %21, ptr %138, align 8
  %139 = getelementptr inbounds ptr, ptr %138, i64 1
  store ptr %37, ptr %139, align 8
  store i64 2, ptr %memberidx.i240, align 4
  store i64 8, ptr %136, align 4
  %memberidx.i.i243 = getelementptr inbounds %Expression, ptr %136, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i243, align 4
  %memberidx1.i.i244 = getelementptr inbounds %Expression, ptr %136, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i244, align 1
  %memberidx.i245 = getelementptr inbounds %NewExpression, ptr %136, i64 0, i32 6
  store ptr %135, ptr %memberidx.i245, align 8
  %memberidx1.i246 = getelementptr inbounds %NewExpression, ptr %136, i64 0, i32 5
  store i1 true, ptr %memberidx1.i246, align 1
  %memberidx2.i247 = getelementptr inbounds %NewExpression, ptr %136, i64 0, i32 4
  store ptr %137, ptr %memberidx2.i247, align 8
  %memberidx3.i248 = getelementptr inbounds %Expression, ptr %136, i64 0, i32 3
  store ptr %135, ptr %memberidx3.i248, align 8
  br label %common.ret

ifend112:                                         ; preds = %ifend104
  %140 = call fastcc ptr @dump_bin_op(i64 %4)
  %141 = load ptr, ptr %140, align 8
  %memberidx115 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %141, i64 0, i32 5
  %142 = load ptr, ptr %memberidx115, align 8
  %143 = call ptr %142(ptr nonnull %140)
  %144 = load ptr, ptr %memberidx16, align 8
  %145 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %144)
  %146 = load ptr, ptr %145, align 8
  %memberidx117 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %146, i64 0, i32 5
  %147 = load ptr, ptr %memberidx117, align 8
  %148 = call ptr %147(ptr nonnull %145)
  %149 = load ptr, ptr %memberidx25, align 8
  %150 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %149)
  %151 = load ptr, ptr %150, align 8
  %memberidx119 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %151, i64 0, i32 5
  %152 = load ptr, ptr %memberidx119, align 8
  %153 = call ptr %152(ptr nonnull %150)
  %154 = alloca ptr, align 8
  %155 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %154, ptr nonnull @159, ptr %143, ptr %148, ptr %153)
  %156 = load ptr, ptr %154, align 8
  %157 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %157, align 8
  %memberidx.i249 = getelementptr inbounds %string, ptr %157, i64 0, i32 1
  store ptr %156, ptr %memberidx.i249, align 8
  %memberidx1.i250 = getelementptr inbounds %string, ptr %157, i64 0, i32 2
  store i64 %155, ptr %memberidx1.i250, align 4
  %memberidx2.i251 = getelementptr inbounds %string, ptr %157, i64 0, i32 3
  store i64 %155, ptr %memberidx2.i251, align 4
  tail call void @free(ptr %143)
  tail call void @free(ptr %148)
  tail call void @free(ptr %153)
  %158 = load ptr, ptr %2, align 8
  %159 = load ptr, ptr %memberidx.i170, align 8
  %memberidx1.i253 = getelementptr inbounds %Compiler, ptr %159, i64 0, i32 6
  %160 = load ptr, ptr %memberidx1.i253, align 8
  %161 = call ptr @malloc(i32 24)
  store i64 5, ptr %161, align 4
  %memberidx1.i.i254 = getelementptr inbounds %FloError, ptr %161, i64 0, i32 2
  store ptr %158, ptr %memberidx1.i.i254, align 8
  %memberidx2.i.i255 = getelementptr inbounds %FloError, ptr %161, i64 0, i32 1
  store ptr %157, ptr %memberidx2.i.i255, align 8
  %memberidx.i.i256 = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 2
  %162 = load i64, ptr %memberidx.i.i256, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 3
  %163 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %162, %163
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %ifend112
  %164 = shl i64 %163, 1
  store i64 %164, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 1
  %165 = load ptr, ptr %memberidx2.i.i.i, align 8
  %166 = shl i64 %163, 4
  %167 = call ptr @realloc(ptr %165, i64 %166)
  store ptr %167, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %ifend112, %if.entry.i.i
  %168 = load i64, ptr %memberidx.i.i256, align 4
  %169 = add nsw i64 %168, 1
  store i64 %169, ptr %memberidx.i.i256, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 1
  %170 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %170, i64 %168
  store ptr %161, ptr %ptridx.i.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_call_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = call ptr @malloc(i32 8)
  store i64 20, ptr %3, align 4
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %TypeChecker_error.exit96, %TypeChecker_error.exit117, %TypeChecker_get_func_args_from_expression.exit, %2, %ifend23, %TypeChecker_error.exit, %if.entry4
  %common.ret.op = phi ptr [ %16, %if.entry4 ], [ null, %TypeChecker_error.exit ], [ %90, %ifend23 ], [ null, %2 ], [ null, %TypeChecker_get_func_args_from_expression.exit ], [ null, %TypeChecker_error.exit117 ], [ null, %TypeChecker_error.exit96 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 2
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp eq i64 %10, 16
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = load i64, ptr %12, align 4
  %14 = icmp eq i64 %13, 20
  %15 = and i1 %11, %14
  br i1 %15, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %16 = call fastcc ptr @TypeChecker_check_intrinsic_call(ptr %0, ptr %5, ptr %1)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %.not = icmp eq i64 %13, 15
  br i1 %.not, label %ifend11, label %if.entry9

if.entry9:                                        ; preds = %ifend6
  %17 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %12)
  %18 = load ptr, ptr %17, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 5
  %19 = load ptr, ptr %memberidx13, align 8
  %20 = call ptr %19(ptr nonnull %17)
  %21 = alloca ptr, align 8
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %21, ptr nonnull @188, ptr %20)
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i62 = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %22, ptr %memberidx1.i63, align 4
  %memberidx2.i64 = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %22, ptr %memberidx2.i64, align 4
  tail call void @free(ptr %20)
  %25 = load ptr, ptr %memberidx, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i66 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i66, align 8
  %29 = call ptr @malloc(i32 24)
  store i64 5, ptr %29, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %29, i64 0, i32 2
  store ptr %26, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %29, i64 0, i32 1
  store ptr %24, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 3
  %31 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %30, %31
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry9
  %32 = shl i64 %31, 1
  store i64 %32, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i.i.i, align 8
  %34 = shl i64 %31, 4
  %35 = call ptr @realloc(ptr %33, i64 %34)
  store ptr %35, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry9, %if.entry.i.i
  %36 = load i64, ptr %memberidx.i.i, align 4
  %37 = add nsw i64 %36, 1
  store i64 %37, ptr %memberidx.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %38 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %38, i64 %36
  store ptr %29, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend11:                                          ; preds = %ifend6
  switch i64 %10, label %TypeChecker_get_func_args_from_expression.exit [
    i64 7, label %if.entry.i
    i64 12, label %if.entry9.i
  ]

if.entry.i:                                       ; preds = %ifend11
  %memberidx1.i68 = getelementptr inbounds %VarAccessExpression, ptr %5, i64 0, i32 4
  %39 = load ptr, ptr %memberidx1.i68, align 8
  %40 = load i64, ptr %39, align 4
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %if.entry3.i, label %TypeChecker_get_func_args_from_expression.exit

if.entry3.i:                                      ; preds = %if.entry.i
  %42 = load ptr, ptr %0, align 8
  %memberidx.i.i69 = getelementptr inbounds %Program, ptr %42, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i69, align 8
  %memberidx1.i.i70 = getelementptr inbounds %VarId, ptr %39, i64 0, i32 1
  %44 = load i64, ptr %memberidx1.i.i70, align 4
  %memberidx.i.i.i71 = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i71, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i72 = getelementptr inbounds %Module, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx2.i.i72, align 8
  %memberidx3.i.i = getelementptr inbounds %VarId, ptr %39, i64 0, i32 2
  %48 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Function_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx7.i = getelementptr inbounds %Function, ptr %50, i64 0, i32 2
  br label %TypeChecker_get_func_args_from_expression.exit.sink.split

if.entry9.i:                                      ; preds = %ifend11
  %memberidx12.i = getelementptr inbounds %MemberExpression, ptr %5, i64 0, i32 5
  %51 = load ptr, ptr %memberidx12.i, align 8
  %52 = load ptr, ptr %0, align 8
  %memberidx.i.i19.i = getelementptr inbounds %PropId, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i.i19.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Program, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %55 = load i64, ptr %53, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %57, i64 0, i32 4
  %58 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %53, i64 0, i32 2
  %59 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %60, i64 %59
  %61 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %memberidx.i20.i = getelementptr inbounds %Class, ptr %61, i64 0, i32 5
  %62 = load ptr, ptr %memberidx.i20.i, align 8
  %memberidx1.i21.i = getelementptr inbounds %PropId, ptr %51, i64 0, i32 2
  %63 = load i64, ptr %memberidx1.i21.i, align 4
  %memberidx.i3.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i3.i.i, align 8
  %ptridx.i.i22.i = getelementptr inbounds ptr, ptr %64, i64 %63
  %65 = load ptr, ptr %ptridx.i.i22.i, align 8
  %memberidx14.i = getelementptr inbounds %ClassMethod, ptr %65, i64 0, i32 6
  br label %TypeChecker_get_func_args_from_expression.exit.sink.split

TypeChecker_get_func_args_from_expression.exit.sink.split: ; preds = %if.entry9.i, %if.entry3.i
  %memberidx7.i.sink = phi ptr [ %memberidx7.i, %if.entry3.i ], [ %memberidx14.i, %if.entry9.i ]
  %66 = load ptr, ptr %memberidx7.i.sink, align 8
  br label %TypeChecker_get_func_args_from_expression.exit

TypeChecker_get_func_args_from_expression.exit:   ; preds = %TypeChecker_get_func_args_from_expression.exit.sink.split, %ifend11, %if.entry.i
  %common.ret.op.i = phi ptr [ null, %if.entry.i ], [ null, %ifend11 ], [ %66, %TypeChecker_get_func_args_from_expression.exit.sink.split ]
  %memberidx17 = getelementptr inbounds %CallExpressionNode, ptr %1, i64 0, i32 4
  %67 = load ptr, ptr %memberidx17, align 8
  %68 = call fastcc ptr @TypeChecker_fill_in_call_args(ptr %0, ptr nonnull %12, ptr %common.ret.op.i, ptr %67)
  %69 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i74 = getelementptr inbounds %Compiler, ptr %69, i64 0, i32 6
  %70 = load ptr, ptr %memberidx1.i74, align 8
  %memberidx2.i75 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 2
  %71 = load i64, ptr %memberidx2.i75, align 4
  %72 = icmp sgt i64 %71, 0
  br i1 %72, label %common.ret, label %ifend20

ifend20:                                          ; preds = %TypeChecker_get_func_args_from_expression.exit
  %memberidx.i1 = getelementptr inbounds %FunctionType, ptr %12, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i1, align 8
  %memberidx1.i2 = getelementptr inbounds %Array_Type_, ptr %73, i64 0, i32 2
  %74 = load i64, ptr %memberidx1.i2, align 4
  %memberidx2.i3 = getelementptr inbounds %Array_Expression_, ptr %68, i64 0, i32 2
  %75 = load i64, ptr %memberidx2.i3, align 4
  %.not.i = icmp eq i64 %74, %75
  br i1 %.not.i, label %for.cond.preheader.i, label %TypeChecker_check_function_call_args_match.exit

for.cond.preheader.i:                             ; preds = %ifend20
  %76 = icmp sgt i64 %75, 0
  br i1 %76, label %for.body.lr.ph.i, label %TypeChecker_check_function_call_args_match.exit

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i12.i = getelementptr inbounds %Array_Expression_, ptr %68, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %ifend8.i, %for.body.lr.ph.i
  %storemerge14.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %84, %ifend8.i ]
  %77 = load ptr, ptr %memberidx.i1, align 8
  %memberidx.i.i5 = getelementptr inbounds %Array_Type_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i.i5, align 8
  %ptridx.i.i6 = getelementptr inbounds ptr, ptr %78, i64 %storemerge14.i
  %79 = load ptr, ptr %ptridx.i.i6, align 8
  %80 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %80, i64 %storemerge14.i
  %81 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx5.i = getelementptr inbounds %Expression, ptr %81, i64 0, i32 3
  %82 = load ptr, ptr %memberidx5.i, align 8
  %83 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %79, ptr %82)
  br i1 %83, label %ifend8.i, label %TypeChecker_check_function_call_args_match.exit

ifend8.i:                                         ; preds = %for.body.i
  %84 = add nuw nsw i64 %storemerge14.i, 1
  %85 = load i64, ptr %memberidx2.i3, align 4
  %86 = icmp slt i64 %84, %85
  br i1 %86, label %for.body.i, label %TypeChecker_check_function_call_args_match.exit

TypeChecker_check_function_call_args_match.exit:  ; preds = %for.body.i, %ifend8.i, %ifend20, %for.cond.preheader.i
  %common.ret.op.i4 = phi i64 [ -1, %ifend20 ], [ -2, %for.cond.preheader.i ], [ %storemerge14.i, %for.body.i ], [ -2, %ifend8.i ]
  %87 = icmp sgt i64 %common.ret.op.i4, -2
  br i1 %87, label %if.entry21, label %ifend23

if.entry21:                                       ; preds = %TypeChecker_check_function_call_args_match.exit
  %88 = icmp eq i64 %common.ret.op.i4, -1
  %89 = load ptr, ptr %memberidx.i1, align 8
  br i1 %88, label %if.entry24, label %else25

ifend23:                                          ; preds = %TypeChecker_check_function_call_args_match.exit
  %90 = tail call ptr @malloc(i32 41)
  %memberidx37 = getelementptr inbounds %FunctionType, ptr %12, i64 0, i32 2
  %91 = load ptr, ptr %memberidx37, align 8
  store i64 8, ptr %90, align 4
  %memberidx.i.i76 = getelementptr inbounds %Expression, ptr %90, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i76, align 4
  %memberidx1.i.i77 = getelementptr inbounds %Expression, ptr %90, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i77, align 1
  %memberidx.i78 = getelementptr inbounds %CallExpression, ptr %90, i64 0, i32 4
  store ptr %5, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %CallExpression, ptr %90, i64 0, i32 5
  store ptr %68, ptr %memberidx1.i79, align 8
  %memberidx2.i80 = getelementptr inbounds %Expression, ptr %90, i64 0, i32 3
  store ptr %91, ptr %memberidx2.i80, align 8
  br label %common.ret

if.entry24:                                       ; preds = %if.entry21
  %memberidx28 = getelementptr inbounds %Array_Type_, ptr %89, i64 0, i32 2
  %92 = load i64, ptr %memberidx28, align 4
  %93 = load i64, ptr %memberidx2.i3, align 4
  %94 = alloca ptr, align 8
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %94, ptr nonnull @189, i64 %92, i64 %93)
  %96 = load ptr, ptr %94, align 8
  %97 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i81 = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i81, align 8
  %memberidx1.i82 = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 %95, ptr %memberidx1.i82, align 4
  %memberidx2.i83 = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 %95, ptr %memberidx2.i83, align 4
  %98 = load ptr, ptr %1, align 8
  %99 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i85 = getelementptr inbounds %Compiler, ptr %99, i64 0, i32 6
  %100 = load ptr, ptr %memberidx1.i85, align 8
  %101 = call ptr @malloc(i32 24)
  store i64 4, ptr %101, align 4
  %memberidx1.i.i86 = getelementptr inbounds %FloError, ptr %101, i64 0, i32 2
  store ptr %98, ptr %memberidx1.i.i86, align 8
  %memberidx2.i.i87 = getelementptr inbounds %FloError, ptr %101, i64 0, i32 1
  store ptr %97, ptr %memberidx2.i.i87, align 8
  %memberidx.i.i88 = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 2
  %102 = load i64, ptr %memberidx.i.i88, align 4
  %memberidx1.i2.i89 = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 3
  %103 = load i64, ptr %memberidx1.i2.i89, align 4
  %.not.i.i90 = icmp slt i64 %102, %103
  br i1 %.not.i.i90, label %TypeChecker_error.exit96, label %if.entry.i.i93

if.entry.i.i93:                                   ; preds = %if.entry24
  %104 = shl i64 %103, 1
  store i64 %104, ptr %memberidx1.i2.i89, align 4
  %memberidx2.i.i.i92 = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 1
  %105 = load ptr, ptr %memberidx2.i.i.i92, align 8
  %106 = shl i64 %103, 4
  %107 = call ptr @realloc(ptr %105, i64 %106)
  store ptr %107, ptr %memberidx2.i.i.i92, align 8
  br label %TypeChecker_error.exit96

TypeChecker_error.exit96:                         ; preds = %if.entry24, %if.entry.i.i93
  %108 = load i64, ptr %memberidx.i.i88, align 4
  %109 = add nsw i64 %108, 1
  store i64 %109, ptr %memberidx.i.i88, align 4
  %memberidx4.i.i94 = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 1
  %110 = load ptr, ptr %memberidx4.i.i94, align 8
  %ptridx.i.i95 = getelementptr inbounds ptr, ptr %110, i64 %108
  store ptr %101, ptr %ptridx.i.i95, align 8
  br label %common.ret

else25:                                           ; preds = %if.entry21
  %memberidx.i97 = getelementptr inbounds %Array_Type_, ptr %89, i64 0, i32 1
  %111 = load ptr, ptr %memberidx.i97, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %111, i64 %common.ret.op.i4
  %112 = load ptr, ptr %ptridx.i, align 8
  %113 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %112)
  %114 = load ptr, ptr %113, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %114, i64 0, i32 5
  %115 = load ptr, ptr %memberidx32, align 8
  %116 = call ptr %115(ptr nonnull %113)
  %memberidx.i98 = getelementptr inbounds %Array_Expression_, ptr %68, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i98, align 8
  %ptridx.i99 = getelementptr inbounds ptr, ptr %117, i64 %common.ret.op.i4
  %118 = load ptr, ptr %ptridx.i99, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %118, i64 0, i32 3
  %119 = load ptr, ptr %memberidx33, align 8
  %120 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %119)
  %121 = load ptr, ptr %120, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %121, i64 0, i32 5
  %122 = load ptr, ptr %memberidx34, align 8
  %123 = call ptr %122(ptr nonnull %120)
  %124 = alloca ptr, align 8
  %125 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %124, ptr nonnull @190, ptr %116, ptr %123)
  %126 = load ptr, ptr %124, align 8
  %127 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %127, align 8
  %memberidx.i100 = getelementptr inbounds %string, ptr %127, i64 0, i32 1
  store ptr %126, ptr %memberidx.i100, align 8
  %memberidx1.i101 = getelementptr inbounds %string, ptr %127, i64 0, i32 2
  store i64 %125, ptr %memberidx1.i101, align 4
  %memberidx2.i102 = getelementptr inbounds %string, ptr %127, i64 0, i32 3
  store i64 %125, ptr %memberidx2.i102, align 4
  tail call void @free(ptr %116)
  tail call void @free(ptr %123)
  %128 = load ptr, ptr %memberidx17, align 8
  %memberidx.i103 = getelementptr inbounds %Array_ExpressionNode_, ptr %128, i64 0, i32 1
  %129 = load ptr, ptr %memberidx.i103, align 8
  %ptridx.i104 = getelementptr inbounds ptr, ptr %129, i64 %common.ret.op.i4
  %130 = load ptr, ptr %ptridx.i104, align 8
  %131 = load ptr, ptr %130, align 8
  %132 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i106 = getelementptr inbounds %Compiler, ptr %132, i64 0, i32 6
  %133 = load ptr, ptr %memberidx1.i106, align 8
  %134 = call ptr @malloc(i32 24)
  store i64 5, ptr %134, align 4
  %memberidx1.i.i107 = getelementptr inbounds %FloError, ptr %134, i64 0, i32 2
  store ptr %131, ptr %memberidx1.i.i107, align 8
  %memberidx2.i.i108 = getelementptr inbounds %FloError, ptr %134, i64 0, i32 1
  store ptr %127, ptr %memberidx2.i.i108, align 8
  %memberidx.i.i109 = getelementptr inbounds %Array_FloError_, ptr %133, i64 0, i32 2
  %135 = load i64, ptr %memberidx.i.i109, align 4
  %memberidx1.i2.i110 = getelementptr inbounds %Array_FloError_, ptr %133, i64 0, i32 3
  %136 = load i64, ptr %memberidx1.i2.i110, align 4
  %.not.i.i111 = icmp slt i64 %135, %136
  br i1 %.not.i.i111, label %TypeChecker_error.exit117, label %if.entry.i.i114

if.entry.i.i114:                                  ; preds = %else25
  %137 = shl i64 %136, 1
  store i64 %137, ptr %memberidx1.i2.i110, align 4
  %memberidx2.i.i.i113 = getelementptr inbounds %Array_FloError_, ptr %133, i64 0, i32 1
  %138 = load ptr, ptr %memberidx2.i.i.i113, align 8
  %139 = shl i64 %136, 4
  %140 = call ptr @realloc(ptr %138, i64 %139)
  store ptr %140, ptr %memberidx2.i.i.i113, align 8
  br label %TypeChecker_error.exit117

TypeChecker_error.exit117:                        ; preds = %else25, %if.entry.i.i114
  %141 = load i64, ptr %memberidx.i.i109, align 4
  %142 = add nsw i64 %141, 1
  store i64 %142, ptr %memberidx.i.i109, align 4
  %memberidx4.i.i115 = getelementptr inbounds %Array_FloError_, ptr %133, i64 0, i32 1
  %143 = load ptr, ptr %memberidx4.i.i115, align 8
  %ptridx.i.i116 = getelementptr inbounds ptr, ptr %143, i64 %141
  store ptr %134, ptr %ptridx.i.i116, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_type(ptr %0, ptr %1) unnamed_addr {
  %memberidx = getelementptr inbounds %TypeNode, ptr %1, i64 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend63, %ifend79, %for.end71, %TypeChecker_error.exit, %ifend55, %for.end, %ifend39, %TypeChecker_error.exit193, %TypeChecker_error.exit209, %TypeChecker_error.exit225, %if.entry21, %if.entry12, %if.entry8, %if.entry3, %if.entry
  %common.ret.op = phi ptr [ %5, %if.entry ], [ %8, %if.entry3 ], [ %10, %if.entry8 ], [ %11, %if.entry12 ], [ %21, %if.entry21 ], [ null, %TypeChecker_error.exit225 ], [ null, %TypeChecker_error.exit209 ], [ null, %TypeChecker_error.exit193 ], [ %80, %ifend39 ], [ %105, %for.end ], [ %112, %ifend55 ], [ null, %TypeChecker_error.exit ], [ null, %for.end71 ], [ %141, %ifend79 ], [ %114, %ifend63 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %5 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %5, align 4
  br label %common.ret

ifend:                                            ; preds = %2
  %6 = add i64 %3, -1
  %7 = icmp ult i64 %6, 9
  br i1 %7, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %8 = tail call ptr @malloc(i32 8)
  %9 = load i64, ptr %memberidx, align 4
  store i64 %9, ptr %8, align 4
  br label %common.ret

ifend5:                                           ; preds = %ifend
  switch i64 %3, label %ifend55 [
    i64 10, label %if.entry8
    i64 13, label %if.entry12
    i64 14, label %if.entry17
    i64 15, label %if.entry44
    i64 16, label %if.entry53
  ]

if.entry8:                                        ; preds = %ifend5
  %10 = tail call ptr @malloc(i32 8)
  store i64 10, ptr %10, align 4
  br label %common.ret

if.entry12:                                       ; preds = %ifend5
  %11 = tail call ptr @malloc(i32 16)
  %memberidx15 = getelementptr inbounds %PointerTypeNode, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %memberidx15, align 8
  %13 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %12)
  store i64 13, ptr %11, align 4
  %memberidx.i232 = getelementptr inbounds %PointerType, ptr %11, i64 0, i32 1
  store ptr %13, ptr %memberidx.i232, align 8
  br label %common.ret

if.entry17:                                       ; preds = %ifend5
  %14 = alloca %Type, align 8
  store i64 6, ptr %14, align 8
  %memberidx20 = getelementptr inbounds %ArrayTypeNode, ptr %1, i64 0, i32 3
  %15 = load ptr, ptr %memberidx20, align 8
  %16 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %14, ptr %15)
  %memberidx.i229 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i229, align 8
  %memberidx1.i230 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i230, align 8
  %memberidx2.i231 = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i231, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %if.entry21, label %ifend23

if.entry21:                                       ; preds = %if.entry17
  %21 = call ptr @malloc(i32 8)
  store i64 20, ptr %21, align 4
  br label %common.ret

ifend23:                                          ; preds = %if.entry17
  %memberidx24 = getelementptr inbounds %Expression, ptr %16, i64 0, i32 3
  %22 = load ptr, ptr %memberidx24, align 8
  %23 = load i64, ptr %22, align 4
  %24 = add i64 %23, -1
  %25 = icmp ult i64 %24, 7
  br i1 %25, label %ifend27, label %if.entry25

if.entry25:                                       ; preds = %ifend23
  %26 = call ptr @malloc(i32 23)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(23) %26, ptr noundef nonnull align 8 dereferenceable(23) @142, i64 23, i1 false)
  %27 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i226 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i226, align 8
  %memberidx1.i.i227 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 23, ptr %memberidx1.i.i227, align 4
  %memberidx2.i.i228 = getelementptr inbounds %string, ptr %27, i64 0, i32 3
  store i64 23, ptr %memberidx2.i.i228, align 4
  %28 = load ptr, ptr %memberidx20, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i229, align 8
  %memberidx1.i214 = getelementptr inbounds %Compiler, ptr %30, i64 0, i32 6
  %31 = load ptr, ptr %memberidx1.i214, align 8
  %32 = call ptr @malloc(i32 24)
  store i64 4, ptr %32, align 4
  %memberidx1.i.i215 = getelementptr inbounds %FloError, ptr %32, i64 0, i32 2
  store ptr %29, ptr %memberidx1.i.i215, align 8
  %memberidx2.i.i216 = getelementptr inbounds %FloError, ptr %32, i64 0, i32 1
  store ptr %27, ptr %memberidx2.i.i216, align 8
  %memberidx.i.i217 = getelementptr inbounds %Array_FloError_, ptr %31, i64 0, i32 2
  %33 = load i64, ptr %memberidx.i.i217, align 4
  %memberidx1.i2.i218 = getelementptr inbounds %Array_FloError_, ptr %31, i64 0, i32 3
  %34 = load i64, ptr %memberidx1.i2.i218, align 4
  %.not.i.i219 = icmp slt i64 %33, %34
  br i1 %.not.i.i219, label %TypeChecker_error.exit225, label %if.entry.i.i222

if.entry.i.i222:                                  ; preds = %if.entry25
  %35 = shl i64 %34, 1
  store i64 %35, ptr %memberidx1.i2.i218, align 4
  %memberidx2.i.i.i221 = getelementptr inbounds %Array_FloError_, ptr %31, i64 0, i32 1
  %36 = load ptr, ptr %memberidx2.i.i.i221, align 8
  %37 = shl i64 %34, 4
  %38 = call ptr @realloc(ptr %36, i64 %37)
  store ptr %38, ptr %memberidx2.i.i.i221, align 8
  br label %TypeChecker_error.exit225

TypeChecker_error.exit225:                        ; preds = %if.entry25, %if.entry.i.i222
  %39 = load i64, ptr %memberidx.i.i217, align 4
  %40 = add nsw i64 %39, 1
  store i64 %40, ptr %memberidx.i.i217, align 4
  %memberidx4.i.i223 = getelementptr inbounds %Array_FloError_, ptr %31, i64 0, i32 1
  %41 = load ptr, ptr %memberidx4.i.i223, align 8
  %ptridx.i.i224 = getelementptr inbounds ptr, ptr %41, i64 %39
  store ptr %32, ptr %ptridx.i.i224, align 8
  br label %common.ret

ifend27:                                          ; preds = %ifend23
  %memberidx30 = getelementptr inbounds %Expression, ptr %16, i64 0, i32 1
  %42 = load i1, ptr %memberidx30, align 1
  br i1 %42, label %ifend33, label %if.entry31

if.entry31:                                       ; preds = %ifend27
  %43 = call ptr @malloc(i32 30)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(30) %43, ptr noundef nonnull align 8 dereferenceable(30) @143, i64 30, i1 false)
  %44 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i210 = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i210, align 8
  %memberidx1.i.i211 = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 30, ptr %memberidx1.i.i211, align 4
  %memberidx2.i.i212 = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 30, ptr %memberidx2.i.i212, align 4
  %45 = load ptr, ptr %memberidx20, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %memberidx.i229, align 8
  %memberidx1.i198 = getelementptr inbounds %Compiler, ptr %47, i64 0, i32 6
  %48 = load ptr, ptr %memberidx1.i198, align 8
  %49 = call ptr @malloc(i32 24)
  store i64 4, ptr %49, align 4
  %memberidx1.i.i199 = getelementptr inbounds %FloError, ptr %49, i64 0, i32 2
  store ptr %46, ptr %memberidx1.i.i199, align 8
  %memberidx2.i.i200 = getelementptr inbounds %FloError, ptr %49, i64 0, i32 1
  store ptr %44, ptr %memberidx2.i.i200, align 8
  %memberidx.i.i201 = getelementptr inbounds %Array_FloError_, ptr %48, i64 0, i32 2
  %50 = load i64, ptr %memberidx.i.i201, align 4
  %memberidx1.i2.i202 = getelementptr inbounds %Array_FloError_, ptr %48, i64 0, i32 3
  %51 = load i64, ptr %memberidx1.i2.i202, align 4
  %.not.i.i203 = icmp slt i64 %50, %51
  br i1 %.not.i.i203, label %TypeChecker_error.exit209, label %if.entry.i.i206

if.entry.i.i206:                                  ; preds = %if.entry31
  %52 = shl i64 %51, 1
  store i64 %52, ptr %memberidx1.i2.i202, align 4
  %memberidx2.i.i.i205 = getelementptr inbounds %Array_FloError_, ptr %48, i64 0, i32 1
  %53 = load ptr, ptr %memberidx2.i.i.i205, align 8
  %54 = shl i64 %51, 4
  %55 = call ptr @realloc(ptr %53, i64 %54)
  store ptr %55, ptr %memberidx2.i.i.i205, align 8
  br label %TypeChecker_error.exit209

TypeChecker_error.exit209:                        ; preds = %if.entry31, %if.entry.i.i206
  %56 = load i64, ptr %memberidx.i.i201, align 4
  %57 = add nsw i64 %56, 1
  store i64 %57, ptr %memberidx.i.i201, align 4
  %memberidx4.i.i207 = getelementptr inbounds %Array_FloError_, ptr %48, i64 0, i32 1
  %58 = load ptr, ptr %memberidx4.i.i207, align 8
  %ptridx.i.i208 = getelementptr inbounds ptr, ptr %58, i64 %56
  store ptr %49, ptr %ptridx.i.i208, align 8
  br label %common.ret

ifend33:                                          ; preds = %ifend27
  %59 = load ptr, ptr %0, align 8
  %60 = call fastcc i64 @evaluate_const_int_expression(ptr %59, ptr %16)
  %61 = icmp slt i64 %60, 0
  br i1 %61, label %if.entry37, label %ifend39

if.entry37:                                       ; preds = %ifend33
  %62 = call ptr @malloc(i32 28)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %62, ptr noundef nonnull align 8 dereferenceable(28) @144, i64 28, i1 false)
  %63 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %63, align 8
  %memberidx.i.i194 = getelementptr inbounds %string, ptr %63, i64 0, i32 1
  store ptr %62, ptr %memberidx.i.i194, align 8
  %memberidx1.i.i195 = getelementptr inbounds %string, ptr %63, i64 0, i32 2
  store i64 28, ptr %memberidx1.i.i195, align 4
  %memberidx2.i.i196 = getelementptr inbounds %string, ptr %63, i64 0, i32 3
  store i64 28, ptr %memberidx2.i.i196, align 4
  %64 = load ptr, ptr %memberidx20, align 8
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %memberidx.i229, align 8
  %memberidx1.i182 = getelementptr inbounds %Compiler, ptr %66, i64 0, i32 6
  %67 = load ptr, ptr %memberidx1.i182, align 8
  %68 = call ptr @malloc(i32 24)
  store i64 4, ptr %68, align 4
  %memberidx1.i.i183 = getelementptr inbounds %FloError, ptr %68, i64 0, i32 2
  store ptr %65, ptr %memberidx1.i.i183, align 8
  %memberidx2.i.i184 = getelementptr inbounds %FloError, ptr %68, i64 0, i32 1
  store ptr %63, ptr %memberidx2.i.i184, align 8
  %memberidx.i.i185 = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 2
  %69 = load i64, ptr %memberidx.i.i185, align 4
  %memberidx1.i2.i186 = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 3
  %70 = load i64, ptr %memberidx1.i2.i186, align 4
  %.not.i.i187 = icmp slt i64 %69, %70
  br i1 %.not.i.i187, label %TypeChecker_error.exit193, label %if.entry.i.i190

if.entry.i.i190:                                  ; preds = %if.entry37
  %71 = shl i64 %70, 1
  store i64 %71, ptr %memberidx1.i2.i186, align 4
  %memberidx2.i.i.i189 = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 1
  %72 = load ptr, ptr %memberidx2.i.i.i189, align 8
  %73 = shl i64 %70, 4
  %74 = call ptr @realloc(ptr %72, i64 %73)
  store ptr %74, ptr %memberidx2.i.i.i189, align 8
  br label %TypeChecker_error.exit193

TypeChecker_error.exit193:                        ; preds = %if.entry37, %if.entry.i.i190
  %75 = load i64, ptr %memberidx.i.i185, align 4
  %76 = add nsw i64 %75, 1
  store i64 %76, ptr %memberidx.i.i185, align 4
  %memberidx4.i.i191 = getelementptr inbounds %Array_FloError_, ptr %67, i64 0, i32 1
  %77 = load ptr, ptr %memberidx4.i.i191, align 8
  %ptridx.i.i192 = getelementptr inbounds ptr, ptr %77, i64 %75
  store ptr %68, ptr %ptridx.i.i192, align 8
  br label %common.ret

ifend39:                                          ; preds = %ifend33
  %memberidx42 = getelementptr inbounds %ArrayTypeNode, ptr %1, i64 0, i32 2
  %78 = load ptr, ptr %memberidx42, align 8
  %79 = call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr %78)
  %80 = tail call ptr @malloc(i32 24)
  store i64 14, ptr %80, align 4
  %memberidx.i179 = getelementptr inbounds %ArrayType, ptr %80, i64 0, i32 1
  store ptr %79, ptr %memberidx.i179, align 8
  %memberidx1.i180 = getelementptr inbounds %ArrayType, ptr %80, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i180, align 4
  br label %common.ret

if.entry44:                                       ; preds = %ifend5
  %81 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %81, align 8
  %memberidx.i176 = getelementptr inbounds %Array_Type_, ptr %81, i64 0, i32 2
  store i64 0, ptr %memberidx.i176, align 4
  %memberidx1.i177 = getelementptr inbounds %Array_Type_, ptr %81, i64 0, i32 3
  store i64 8, ptr %memberidx1.i177, align 4
  %memberidx2.i178 = getelementptr inbounds %Array_Type_, ptr %81, i64 0, i32 1
  %82 = call ptr @malloc(i32 64)
  store ptr %82, ptr %memberidx2.i178, align 8
  store i64 0, ptr %memberidx.i176, align 4
  %memberidx49 = getelementptr inbounds %FunctionTypeNode, ptr %1, i64 0, i32 2
  %83 = load ptr, ptr %memberidx49, align 8
  %84 = call ptr @malloc(i32 25)
  %memberidx.i171 = getelementptr inbounds %Array_TypeNode_, ptr %83, i64 0, i32 1
  %85 = load ptr, ptr %memberidx.i171, align 8
  %memberidx1.i172 = getelementptr inbounds %Array_TypeNode_, ptr %83, i64 0, i32 2
  %86 = load i64, ptr %memberidx1.i172, align 4
  store i1 false, ptr %84, align 1
  %memberidx1.i.i173 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %84, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i173, align 4
  %memberidx2.i.i174 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %84, i64 0, i32 3
  store ptr %85, ptr %memberidx2.i.i174, align 8
  %memberidx3.i.i175 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %84, i64 0, i32 2
  store i64 %86, ptr %memberidx3.i.i175, align 4
  store i64 1, ptr %memberidx1.i.i173, align 4
  %87 = icmp slt i64 %86, 1
  br i1 %87, label %for.end, label %for.body

for.body:                                         ; preds = %if.entry44, %Array_Type____sl__.exit166
  %storemerge124237.in = phi ptr [ %ptridx.i156, %Array_Type____sl__.exit166 ], [ %85, %if.entry44 ]
  %storemerge124237 = load ptr, ptr %storemerge124237.in, align 8
  %88 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %storemerge124237)
  %89 = load i64, ptr %memberidx.i176, align 4
  %90 = load i64, ptr %memberidx1.i177, align 4
  %.not.i160 = icmp slt i64 %89, %90
  br i1 %.not.i160, label %Array_Type____sl__.exit166, label %if.entry.i163

if.entry.i163:                                    ; preds = %for.body
  %91 = shl i64 %90, 1
  store i64 %91, ptr %memberidx1.i177, align 4
  %92 = load ptr, ptr %memberidx2.i178, align 8
  %93 = shl i64 %90, 4
  %94 = call ptr @realloc(ptr %92, i64 %93)
  store ptr %94, ptr %memberidx2.i178, align 8
  br label %Array_Type____sl__.exit166

Array_Type____sl__.exit166:                       ; preds = %for.body, %if.entry.i163
  %95 = load i64, ptr %memberidx.i176, align 4
  %96 = add nsw i64 %95, 1
  store i64 %96, ptr %memberidx.i176, align 4
  %97 = load ptr, ptr %memberidx2.i178, align 8
  %ptridx.i165 = getelementptr inbounds ptr, ptr %97, i64 %95
  store ptr %88, ptr %ptridx.i165, align 8
  %98 = load i64, ptr %memberidx1.i.i173, align 4
  %99 = add nsw i64 %98, 1
  store i64 %99, ptr %memberidx1.i.i173, align 4
  %100 = load ptr, ptr %memberidx2.i.i174, align 8
  %ptridx.i156 = getelementptr inbounds ptr, ptr %100, i64 %98
  %101 = load i64, ptr %memberidx3.i.i175, align 4
  %102 = icmp sge i64 %98, %101
  br i1 %102, label %for.end, label %for.body

for.end:                                          ; preds = %Array_Type____sl__.exit166, %if.entry44
  %storemerge235.lcssa = phi i1 [ %87, %if.entry44 ], [ %102, %Array_Type____sl__.exit166 ]
  store i1 %storemerge235.lcssa, ptr %84, align 1
  tail call void @free(ptr nonnull %84)
  %memberidx51 = getelementptr inbounds %FunctionTypeNode, ptr %1, i64 0, i32 3
  %103 = load ptr, ptr %memberidx51, align 8
  %104 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %103)
  %105 = tail call ptr @malloc(i32 25)
  store i64 15, ptr %105, align 4
  %memberidx.i152 = getelementptr inbounds %FunctionType, ptr %105, i64 0, i32 1
  store ptr %81, ptr %memberidx.i152, align 8
  %memberidx1.i153 = getelementptr inbounds %FunctionType, ptr %105, i64 0, i32 2
  store ptr %104, ptr %memberidx1.i153, align 8
  br label %common.ret

if.entry53:                                       ; preds = %ifend5
  %106 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %106, align 8
  %memberidx.i149 = getelementptr inbounds %Array_Type_, ptr %106, i64 0, i32 2
  store i64 0, ptr %memberidx.i149, align 4
  %memberidx1.i150 = getelementptr inbounds %Array_Type_, ptr %106, i64 0, i32 3
  store i64 8, ptr %memberidx1.i150, align 4
  %memberidx2.i151 = getelementptr inbounds %Array_Type_, ptr %106, i64 0, i32 1
  %107 = call ptr @malloc(i32 64)
  store ptr %107, ptr %memberidx2.i151, align 8
  store i64 0, ptr %memberidx.i149, align 4
  %memberidx58 = getelementptr inbounds %RecordTypeNode, ptr %1, i64 0, i32 2
  %108 = load ptr, ptr %memberidx58, align 8
  %memberidx59 = getelementptr inbounds %RecordTypeNode, ptr %1, i64 0, i32 3
  %109 = load ptr, ptr %memberidx59, align 8
  %memberidx60 = getelementptr inbounds %Array_TypeNode_, ptr %109, i64 0, i32 2
  %110 = load i64, ptr %memberidx60, align 4
  %111 = icmp sgt i64 %110, 0
  br i1 %111, label %for.entry64, label %ifend63

ifend55:                                          ; preds = %ifend5
  %112 = call ptr @malloc(i32 8)
  store i64 20, ptr %112, align 4
  br label %common.ret

ifend63:                                          ; preds = %ifend79, %if.entry53
  %memberidx87 = getelementptr inbounds %IdentifierToken, ptr %108, i64 0, i32 2
  %113 = load ptr, ptr %memberidx87, align 8
  %114 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %113)
  %115 = load i64, ptr %114, align 4
  %116 = icmp eq i64 %115, 20
  br i1 %116, label %if.entry89, label %common.ret

for.entry64:                                      ; preds = %if.entry53
  %117 = call ptr @malloc(i32 25)
  %memberidx.i145 = getelementptr inbounds %Array_TypeNode_, ptr %109, i64 0, i32 1
  %118 = load ptr, ptr %memberidx.i145, align 8
  %119 = load i64, ptr %memberidx60, align 4
  store i1 false, ptr %117, align 1
  %memberidx1.i.i147 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %117, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i147, align 4
  %memberidx2.i.i148 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %117, i64 0, i32 3
  store ptr %118, ptr %memberidx2.i.i148, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %117, i64 0, i32 2
  store i64 %119, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i147, align 4
  %120 = icmp slt i64 %119, 1
  br i1 %120, label %for.end71, label %for.body69

for.body69:                                       ; preds = %for.entry64, %Array_Type____sl__.exit
  %storemerge239.in = phi ptr [ %ptridx.i, %Array_Type____sl__.exit ], [ %118, %for.entry64 ]
  %storemerge239 = load ptr, ptr %storemerge239.in, align 8
  %121 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %storemerge239)
  %122 = load i64, ptr %memberidx.i149, align 4
  %123 = load i64, ptr %memberidx1.i150, align 4
  %.not.i = icmp slt i64 %122, %123
  br i1 %.not.i, label %Array_Type____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %for.body69
  %124 = shl i64 %123, 1
  store i64 %124, ptr %memberidx1.i150, align 4
  %125 = load ptr, ptr %memberidx2.i151, align 8
  %126 = shl i64 %123, 4
  %127 = call ptr @realloc(ptr %125, i64 %126)
  store ptr %127, ptr %memberidx2.i151, align 8
  br label %Array_Type____sl__.exit

Array_Type____sl__.exit:                          ; preds = %for.body69, %if.entry.i
  %128 = load i64, ptr %memberidx.i149, align 4
  %129 = add nsw i64 %128, 1
  store i64 %129, ptr %memberidx.i149, align 4
  %130 = load ptr, ptr %memberidx2.i151, align 8
  %ptridx.i140 = getelementptr inbounds ptr, ptr %130, i64 %128
  store ptr %121, ptr %ptridx.i140, align 8
  %131 = load i64, ptr %memberidx1.i.i147, align 4
  %132 = add nsw i64 %131, 1
  store i64 %132, ptr %memberidx1.i.i147, align 4
  %133 = load ptr, ptr %memberidx2.i.i148, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %133, i64 %131
  %134 = load i64, ptr %memberidx3.i.i, align 4
  %135 = icmp sge i64 %131, %134
  br i1 %135, label %for.end71, label %for.body69

for.end71:                                        ; preds = %Array_Type____sl__.exit, %for.entry64
  %storemerge234.lcssa = phi i1 [ %120, %for.entry64 ], [ %135, %Array_Type____sl__.exit ]
  store i1 %storemerge234.lcssa, ptr %117, align 1
  tail call void @free(ptr nonnull %117)
  %memberidx.i131 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %136 = load ptr, ptr %memberidx.i131, align 8
  %memberidx1.i132 = getelementptr inbounds %Compiler, ptr %136, i64 0, i32 6
  %137 = load ptr, ptr %memberidx1.i132, align 8
  %memberidx2.i133 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 2
  %138 = load i64, ptr %memberidx2.i133, align 4
  %139 = icmp sgt i64 %138, 0
  br i1 %139, label %common.ret, label %ifend75

ifend75:                                          ; preds = %for.end71
  %memberidx76 = getelementptr inbounds %IdentifierToken, ptr %108, i64 0, i32 2
  %140 = load ptr, ptr %memberidx76, align 8
  %141 = call fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr %140, ptr nonnull %106)
  %142 = load ptr, ptr %memberidx.i131, align 8
  %memberidx1.i129 = getelementptr inbounds %Compiler, ptr %142, i64 0, i32 6
  %143 = load ptr, ptr %memberidx1.i129, align 8
  %memberidx2.i130 = getelementptr inbounds %Array_FloError_, ptr %143, i64 0, i32 2
  %144 = load i64, ptr %memberidx2.i130, align 4
  %145 = icmp sgt i64 %144, 0
  br i1 %145, label %if.entry77, label %ifend79

if.entry77:                                       ; preds = %ifend75
  %memberidx.i127 = getelementptr inbounds %Array_FloError_, ptr %143, i64 0, i32 1
  %146 = load ptr, ptr %memberidx.i127, align 8
  %147 = load ptr, ptr %146, align 8
  %memberidx82 = getelementptr inbounds %FloError, ptr %147, i64 0, i32 2
  %148 = load ptr, ptr %1, align 8
  store ptr %148, ptr %memberidx82, align 8
  br label %ifend79

ifend79:                                          ; preds = %ifend75, %if.entry77
  %.not = icmp eq ptr %141, null
  br i1 %.not, label %ifend63, label %common.ret

if.entry89:                                       ; preds = %ifend63
  %149 = load ptr, ptr %memberidx87, align 8
  %150 = load ptr, ptr %149, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %150, i64 0, i32 5
  %151 = load ptr, ptr %memberidx93, align 8
  %152 = call ptr %151(ptr nonnull %149)
  %153 = alloca ptr, align 8
  %154 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %153, ptr nonnull @145, ptr %152)
  %155 = load ptr, ptr %153, align 8
  %156 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %156, align 8
  %memberidx.i125 = getelementptr inbounds %string, ptr %156, i64 0, i32 1
  store ptr %155, ptr %memberidx.i125, align 8
  %memberidx1.i126 = getelementptr inbounds %string, ptr %156, i64 0, i32 2
  store i64 %154, ptr %memberidx1.i126, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %156, i64 0, i32 3
  store i64 %154, ptr %memberidx2.i, align 4
  tail call void @free(ptr %152)
  %memberidx94 = getelementptr inbounds %Token, ptr %108, i64 0, i32 1
  %157 = load ptr, ptr %memberidx94, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %158 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %158, i64 0, i32 6
  %159 = load ptr, ptr %memberidx1.i, align 8
  %160 = call ptr @malloc(i32 24)
  store i64 5, ptr %160, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %160, i64 0, i32 2
  store ptr %157, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %160, i64 0, i32 1
  store ptr %156, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %159, i64 0, i32 2
  %161 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %159, i64 0, i32 3
  %162 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %161, %162
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry89
  %163 = shl i64 %162, 1
  store i64 %163, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %159, i64 0, i32 1
  %164 = load ptr, ptr %memberidx2.i.i.i, align 8
  %165 = shl i64 %162, 4
  %166 = call ptr @realloc(ptr %164, i64 %165)
  store ptr %166, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry89, %if.entry.i.i
  %167 = load i64, ptr %memberidx.i.i, align 4
  %168 = add nsw i64 %167, 1
  store i64 %168, ptr %memberidx.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %159, i64 0, i32 1
  %169 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %169, i64 %167
  store ptr %160, ptr %ptridx.i.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_for_statement(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 48)
  store i64 3, ptr %3, align 4
  %memberidx.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 1
  %memberidx1.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 2
  %memberidx2.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 3
  %memberidx3.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %memberidx.i, i8 0, i64 32, i1 false)
  %4 = call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i111 = getelementptr inbounds %Scope, ptr %4, i64 0, i32 5
  %memberidx1.i112 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1.i112, align 8
  store ptr %5, ptr %memberidx.i111, align 8
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %memberidx1.i112, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %7 = load i1, ptr %memberidx2, align 1
  %memberidx3 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 6
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %memberidx4 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 2
  %10 = load ptr, ptr %memberidx4, align 8
  %.not = icmp eq ptr %10, null
  br i1 %.not, label %ifend7, label %if.entry5

else:                                             ; preds = %2
  %11 = call ptr @malloc(i32 8)
  store i64 20, ptr %11, align 4
  %memberidx22 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 5
  %12 = load ptr, ptr %memberidx22, align 8
  %13 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %11, ptr %12)
  %memberidx.i113 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %14 = load ptr, ptr %memberidx.i113, align 8
  %memberidx1.i114 = getelementptr inbounds %Compiler, ptr %14, i64 0, i32 6
  %15 = load ptr, ptr %memberidx1.i114, align 8
  %memberidx2.i115 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx2.i115, align 4
  %17 = icmp sgt i64 %16, 0
  br i1 %17, label %common.ret, label %ifend25

ifend.sink.split:                                 ; preds = %get_class_prop_type.exit269, %if.entry17
  %.sink = phi ptr [ %37, %if.entry17 ], [ %218, %get_class_prop_type.exit269 ]
  store ptr %.sink, ptr %memberidx3.i, align 8
  br label %ifend

ifend:                                            ; preds = %ifend.sink.split, %ifend13
  %memberidx.i116 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %18 = load ptr, ptr %memberidx.i116, align 8
  %memberidx1.i117 = getelementptr inbounds %Compiler, ptr %18, i64 0, i32 6
  %19 = load ptr, ptr %memberidx1.i117, align 8
  %memberidx2.i118 = getelementptr inbounds %Array_FloError_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i118, align 4
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %common.ret, label %ifend61

if.entry5:                                        ; preds = %if.entry
  %22 = call fastcc ptr @TypeChecker_check_statement(ptr %0, ptr nonnull %10)
  store ptr %22, ptr %memberidx1.i, align 8
  br label %ifend7

ifend7:                                           ; preds = %if.entry, %if.entry5
  %memberidx10 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 3
  %23 = load ptr, ptr %memberidx10, align 8
  %.not109 = icmp eq ptr %23, null
  br i1 %.not109, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend7
  %24 = call ptr @malloc(i32 8)
  store i64 20, ptr %24, align 4
  %25 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %24, ptr nonnull %23)
  %memberidx.i.i298 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %26 = load ptr, ptr %memberidx.i.i298, align 8
  %memberidx1.i.i299 = getelementptr inbounds %Compiler, ptr %26, i64 0, i32 6
  %27 = load ptr, ptr %memberidx1.i.i299, align 8
  %memberidx2.i.i300 = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i.i300, align 4
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %TypeChecker_check_condition.exit, label %ifend.i303

ifend.i303:                                       ; preds = %if.entry11
  %memberidx.i302 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %30 = load ptr, ptr %memberidx.i302, align 8
  %31 = load i64, ptr %30, align 4
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %TypeChecker_check_condition.exit, label %true_block.i

true_block.i:                                     ; preds = %ifend.i303
  %33 = call ptr @malloc(i32 8)
  store i64 0, ptr %33, align 4
  %34 = call ptr @malloc(i32 33)
  store i64 8, ptr %34, align 4
  %memberidx.i.i.i.i304 = getelementptr inbounds %Expression, ptr %34, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i304, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %34, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i.i, align 1
  %memberidx.i.i.i305 = getelementptr inbounds %TypeCastExpression, ptr %34, i64 0, i32 4
  store ptr %25, ptr %memberidx.i.i.i305, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %34, i64 0, i32 3
  store ptr %33, ptr %memberidx1.i.i.i, align 8
  %memberidx3.i.i.i307 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 1
  %35 = load i1, ptr %memberidx3.i.i.i307, align 1
  store i1 %35, ptr %memberidx1.i.i.i.i, align 1
  br label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i303, %if.entry11, %true_block.i
  %common.ret.op.i301 = phi ptr [ null, %if.entry11 ], [ %34, %true_block.i ], [ %25, %ifend.i303 ]
  store ptr %common.ret.op.i301, ptr %memberidx2.i, align 8
  br label %ifend13

ifend13:                                          ; preds = %ifend7, %TypeChecker_check_condition.exit
  %memberidx16 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 4
  %36 = load ptr, ptr %memberidx16, align 8
  %.not110 = icmp eq ptr %36, null
  br i1 %.not110, label %ifend, label %if.entry17

if.entry17:                                       ; preds = %ifend13
  %37 = call fastcc ptr @TypeChecker_check_statement(ptr %0, ptr nonnull %36)
  br label %ifend.sink.split

common.ret:                                       ; preds = %ifend, %else, %ifend61, %TypeChecker_error.exit147, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit147 ], [ %3, %ifend61 ], [ null, %else ], [ null, %ifend ]
  ret ptr %common.ret.op

ifend25:                                          ; preds = %else
  %memberidx26 = getelementptr inbounds %Expression, ptr %13, i64 0, i32 3
  %38 = load ptr, ptr %memberidx26, align 8
  %39 = call fastcc i1 @is_object(ptr %38)
  br i1 %39, label %ifend29, label %if.entry27

if.entry27:                                       ; preds = %ifend25
  %40 = call ptr @malloc(i32 28)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %40, ptr noundef nonnull align 8 dereferenceable(28) @203, i64 28, i1 false)
  %41 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %41, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %41, i64 0, i32 1
  store ptr %40, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %41, i64 0, i32 2
  store i64 28, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %41, i64 0, i32 3
  store i64 28, ptr %memberidx2.i.i, align 4
  %42 = load ptr, ptr %memberidx22, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %memberidx.i113, align 8
  %memberidx1.i120 = getelementptr inbounds %Compiler, ptr %44, i64 0, i32 6
  %45 = load ptr, ptr %memberidx1.i120, align 8
  %46 = call ptr @malloc(i32 24)
  store i64 5, ptr %46, align 4
  %memberidx1.i.i121 = getelementptr inbounds %FloError, ptr %46, i64 0, i32 2
  store ptr %43, ptr %memberidx1.i.i121, align 8
  %memberidx2.i.i122 = getelementptr inbounds %FloError, ptr %46, i64 0, i32 1
  store ptr %41, ptr %memberidx2.i.i122, align 8
  %memberidx.i.i123 = getelementptr inbounds %Array_FloError_, ptr %45, i64 0, i32 2
  %47 = load i64, ptr %memberidx.i.i123, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %45, i64 0, i32 3
  %48 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %47, %48
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry27
  %49 = shl i64 %48, 1
  store i64 %49, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %45, i64 0, i32 1
  %50 = load ptr, ptr %memberidx2.i.i.i, align 8
  %51 = shl i64 %48, 4
  %52 = call ptr @realloc(ptr %50, i64 %51)
  store ptr %52, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry27, %if.entry.i.i
  %53 = load i64, ptr %memberidx.i.i123, align 4
  %54 = add nsw i64 %53, 1
  store i64 %54, ptr %memberidx.i.i123, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %45, i64 0, i32 1
  %55 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %55, i64 %53
  store ptr %46, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend29:                                          ; preds = %ifend25
  %56 = load ptr, ptr %0, align 8
  %57 = call fastcc ptr @get_class_from_type(ptr %56, ptr %38)
  %memberidx34 = getelementptr inbounds %Class, ptr %57, i64 0, i32 6
  %58 = load ptr, ptr %memberidx34, align 8
  %59 = call ptr @malloc(i32 8)
  store i64 6872337336460992351, ptr %59, align 8
  %60 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %60, align 8
  %memberidx.i.i124 = getelementptr inbounds %string, ptr %60, i64 0, i32 1
  store ptr %59, ptr %memberidx.i.i124, align 8
  %memberidx1.i.i125 = getelementptr inbounds %string, ptr %60, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i125, align 4
  %memberidx2.i.i126 = getelementptr inbounds %string, ptr %60, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i126, align 4
  %61 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %60)
  %memberidx.i127 = getelementptr inbounds %Map_string_PropId_, ptr %58, i64 0, i32 1
  %62 = load i64, ptr %memberidx.i127, align 4
  %63 = srem i64 %61, %62
  %64 = load ptr, ptr %58, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %64, i64 %63
  %65 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %65, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %ifend29, %else.i
  %hash.0.i = phi i64 [ %79, %else.i ], [ %63, %ifend29 ]
  %66 = load ptr, ptr %58, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %66, i64 %hash.0.i
  %67 = load ptr, ptr %ptridx3.i, align 8
  %68 = load ptr, ptr %67, align 8
  %memberidx.i.i128 = getelementptr inbounds %string, ptr %68, i64 0, i32 2
  %69 = load i64, ptr %memberidx.i.i128, align 4
  %70 = load i64, ptr %memberidx1.i.i125, align 4
  %.not.i.i130 = icmp eq i64 %69, %70
  br i1 %.not.i.i130, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i131 = getelementptr inbounds %string, ptr %68, i64 0, i32 1
  %71 = load ptr, ptr %memberidx2.i.i131, align 8
  %72 = load ptr, ptr %memberidx.i.i124, align 8
  %73 = call i64 @memcmp(ptr %71, ptr %72, i64 %69)
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %ifend29
  %hash.1.i = phi i64 [ %63, %ifend29 ], [ %hash.0.i, %ifend.i.i ], [ %79, %else.i ]
  %75 = load ptr, ptr %58, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %75, i64 %hash.1.i
  %76 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %76, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %77 = add nsw i64 %hash.0.i, 1
  %78 = load i64, ptr %memberidx.i127, align 4
  %79 = srem i64 %77, %78
  %80 = load ptr, ptr %58, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %80, i64 %79
  %81 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %81, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %76, i64 0, i32 1
  %82 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %82, %if.entry10.i ], [ null, %while.end.i ]
  %83 = icmp eq ptr %common.ret.op.i, null
  br i1 %83, label %if.entry35, label %ifend37

if.entry35:                                       ; preds = %Map_string_PropId____getitem__.exit
  %84 = call ptr @malloc(i32 46)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(46) %84, ptr noundef nonnull align 8 dereferenceable(46) @204, i64 46, i1 false)
  %85 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %85, align 8
  %memberidx.i.i132 = getelementptr inbounds %string, ptr %85, i64 0, i32 1
  store ptr %84, ptr %memberidx.i.i132, align 8
  %memberidx1.i.i133 = getelementptr inbounds %string, ptr %85, i64 0, i32 2
  store i64 46, ptr %memberidx1.i.i133, align 4
  %memberidx2.i.i134 = getelementptr inbounds %string, ptr %85, i64 0, i32 3
  store i64 46, ptr %memberidx2.i.i134, align 4
  %86 = load ptr, ptr %memberidx22, align 8
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %memberidx.i113, align 8
  %memberidx1.i136 = getelementptr inbounds %Compiler, ptr %88, i64 0, i32 6
  %89 = load ptr, ptr %memberidx1.i136, align 8
  %90 = call ptr @malloc(i32 24)
  store i64 5, ptr %90, align 4
  %memberidx1.i.i137 = getelementptr inbounds %FloError, ptr %90, i64 0, i32 2
  store ptr %87, ptr %memberidx1.i.i137, align 8
  %memberidx2.i.i138 = getelementptr inbounds %FloError, ptr %90, i64 0, i32 1
  store ptr %85, ptr %memberidx2.i.i138, align 8
  %memberidx.i.i139 = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 2
  %91 = load i64, ptr %memberidx.i.i139, align 4
  %memberidx1.i2.i140 = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 3
  %92 = load i64, ptr %memberidx1.i2.i140, align 4
  %.not.i.i141 = icmp slt i64 %91, %92
  br i1 %.not.i.i141, label %TypeChecker_error.exit147, label %if.entry.i.i144

if.entry.i.i144:                                  ; preds = %if.entry35
  %93 = shl i64 %92, 1
  store i64 %93, ptr %memberidx1.i2.i140, align 4
  %memberidx2.i.i.i143 = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 1
  %94 = load ptr, ptr %memberidx2.i.i.i143, align 8
  %95 = shl i64 %92, 4
  %96 = call ptr @realloc(ptr %94, i64 %95)
  store ptr %96, ptr %memberidx2.i.i.i143, align 8
  br label %TypeChecker_error.exit147

TypeChecker_error.exit147:                        ; preds = %if.entry35, %if.entry.i.i144
  %97 = load i64, ptr %memberidx.i.i139, align 4
  %98 = add nsw i64 %97, 1
  store i64 %98, ptr %memberidx.i.i139, align 4
  %memberidx4.i.i145 = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 1
  %99 = load ptr, ptr %memberidx4.i.i145, align 8
  %ptridx.i.i146 = getelementptr inbounds ptr, ptr %99, i64 %97
  store ptr %90, ptr %ptridx.i.i146, align 8
  br label %common.ret

ifend37:                                          ; preds = %Map_string_PropId____getitem__.exit
  %100 = load ptr, ptr %0, align 8
  %memberidx.i.i148 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i.i148, align 8
  %memberidx.i.i.i149 = getelementptr inbounds %Program, ptr %100, i64 0, i32 1
  %102 = load ptr, ptr %memberidx.i.i.i149, align 8
  %103 = load i64, ptr %101, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %102, i64 0, i32 1
  %104 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %104, i64 %103
  %105 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i150 = getelementptr inbounds %Module, ptr %105, i64 0, i32 4
  %106 = load ptr, ptr %memberidx2.i.i.i150, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %101, i64 0, i32 2
  %107 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %106, i64 0, i32 1
  %108 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %108, i64 %107
  %109 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %110 = load i64, ptr %common.ret.op.i, align 4
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend37
  %memberidx1.i152 = getelementptr inbounds %Class, ptr %109, i64 0, i32 5
  %112 = load ptr, ptr %memberidx1.i152, align 8
  %memberidx2.i153 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %113 = load i64, ptr %memberidx2.i153, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %112, i64 0, i32 1
  %114 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %114, i64 %113
  %115 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i154 = getelementptr inbounds %ClassMethod, ptr %115, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend37
  %memberidx4.i = getelementptr inbounds %Class, ptr %109, i64 0, i32 4
  %116 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %117 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %116, i64 0, i32 1
  %118 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i155 = getelementptr inbounds ptr, ptr %118, i64 %117
  %119 = load ptr, ptr %ptridx.i.i155, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %119, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i154, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i151 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx41 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i151, i64 0, i32 2
  %120 = load ptr, ptr %memberidx41, align 8
  %121 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %121, ptr noundef nonnull align 8 dereferenceable(6) @205, i64 6, i1 false)
  %122 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %122, align 8
  %memberidx.i.i156 = getelementptr inbounds %string, ptr %122, i64 0, i32 1
  store ptr %121, ptr %memberidx.i.i156, align 8
  %memberidx1.i.i157 = getelementptr inbounds %string, ptr %122, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i157, align 4
  %memberidx2.i.i158 = getelementptr inbounds %string, ptr %122, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i158, align 4
  %123 = tail call ptr @malloc(i32 41)
  %124 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %124, align 4
  %memberidx.i.i159 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i159, align 4
  %memberidx1.i.i160 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i160, align 1
  %memberidx.i161 = getelementptr inbounds %MemberExpression, ptr %124, i64 0, i32 4
  store ptr %13, ptr %memberidx.i161, align 8
  %memberidx1.i162 = getelementptr inbounds %MemberExpression, ptr %124, i64 0, i32 5
  store ptr %common.ret.op.i, ptr %memberidx1.i162, align 8
  %memberidx2.i163 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 3
  store ptr %common.ret.op.i151, ptr %memberidx2.i163, align 8
  %125 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %125, align 8
  %memberidx.i164 = getelementptr inbounds %Array_Expression_, ptr %125, i64 0, i32 2
  store i64 0, ptr %memberidx.i164, align 4
  %memberidx1.i165 = getelementptr inbounds %Array_Expression_, ptr %125, i64 0, i32 3
  store i64 8, ptr %memberidx1.i165, align 4
  %memberidx2.i166 = getelementptr inbounds %Array_Expression_, ptr %125, i64 0, i32 1
  %126 = call ptr @malloc(i32 64)
  store ptr %126, ptr %memberidx2.i166, align 8
  store i64 0, ptr %memberidx.i164, align 4
  store i64 8, ptr %123, align 4
  %memberidx.i.i167 = getelementptr inbounds %Expression, ptr %123, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i167, align 4
  %memberidx1.i.i168 = getelementptr inbounds %Expression, ptr %123, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i168, align 1
  %memberidx.i169 = getelementptr inbounds %CallExpression, ptr %123, i64 0, i32 4
  store ptr %124, ptr %memberidx.i169, align 8
  %memberidx1.i170 = getelementptr inbounds %CallExpression, ptr %123, i64 0, i32 5
  store ptr %125, ptr %memberidx1.i170, align 8
  %memberidx2.i171 = getelementptr inbounds %Expression, ptr %123, i64 0, i32 3
  store ptr %120, ptr %memberidx2.i171, align 8
  %127 = call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr nonnull %122, ptr nonnull %123, ptr %120)
  %memberidx44 = getelementptr inbounds %Var, ptr %127, i64 0, i32 1
  %128 = load ptr, ptr %memberidx44, align 8
  %129 = tail call ptr @malloc(i32 25)
  store i64 1, ptr %129, align 4
  %memberidx.i172 = getelementptr inbounds %VarDeclaration, ptr %129, i64 0, i32 2
  store ptr %128, ptr %memberidx.i172, align 8
  %memberidx1.i173 = getelementptr inbounds %VarDeclaration, ptr %129, i64 0, i32 1
  store ptr %122, ptr %memberidx1.i173, align 8
  %memberidx2.i174 = getelementptr inbounds %VarDeclaration, ptr %129, i64 0, i32 3
  store i1 false, ptr %memberidx2.i174, align 1
  store ptr %129, ptr %memberidx.i, align 8
  %130 = load ptr, ptr %0, align 8
  %131 = call fastcc ptr @get_class_from_type(ptr %130, ptr %120)
  %memberidx47 = getelementptr inbounds %Class, ptr %131, i64 0, i32 6
  %132 = load ptr, ptr %memberidx47, align 8
  %133 = call ptr @malloc(i32 4)
  store i32 1701736292, ptr %133, align 8
  %134 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %134, align 8
  %memberidx.i.i175 = getelementptr inbounds %string, ptr %134, i64 0, i32 1
  store ptr %133, ptr %memberidx.i.i175, align 8
  %memberidx1.i.i176 = getelementptr inbounds %string, ptr %134, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i176, align 4
  %memberidx2.i.i177 = getelementptr inbounds %string, ptr %134, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i177, align 4
  %135 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %134)
  %memberidx.i178 = getelementptr inbounds %Map_string_PropId_, ptr %132, i64 0, i32 1
  %136 = load i64, ptr %memberidx.i178, align 4
  %137 = srem i64 %135, %136
  %138 = load ptr, ptr %132, align 8
  %ptridx.i179 = getelementptr inbounds ptr, ptr %138, i64 %137
  %139 = load ptr, ptr %ptridx.i179, align 8
  %.not.i180 = icmp eq ptr %139, null
  br i1 %.not.i180, label %while.end.i195, label %while.entry.i186

while.entry.i186:                                 ; preds = %get_class_prop_type.exit, %else.i198
  %hash.0.i181 = phi i64 [ %153, %else.i198 ], [ %137, %get_class_prop_type.exit ]
  %140 = load ptr, ptr %132, align 8
  %ptridx3.i182 = getelementptr inbounds ptr, ptr %140, i64 %hash.0.i181
  %141 = load ptr, ptr %ptridx3.i182, align 8
  %142 = load ptr, ptr %141, align 8
  %memberidx.i.i183 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  %143 = load i64, ptr %memberidx.i.i183, align 4
  %144 = load i64, ptr %memberidx1.i.i176, align 4
  %.not.i.i185 = icmp eq i64 %143, %144
  br i1 %.not.i.i185, label %ifend.i.i189, label %else.i198

ifend.i.i189:                                     ; preds = %while.entry.i186
  %memberidx2.i.i187 = getelementptr inbounds %string, ptr %142, i64 0, i32 1
  %145 = load ptr, ptr %memberidx2.i.i187, align 8
  %146 = load ptr, ptr %memberidx.i.i175, align 8
  %147 = call i64 @memcmp(ptr %145, ptr %146, i64 %143)
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %while.end.i195, label %else.i198

while.end.i195:                                   ; preds = %else.i198, %ifend.i.i189, %get_class_prop_type.exit
  %hash.1.i192 = phi i64 [ %137, %get_class_prop_type.exit ], [ %hash.0.i181, %ifend.i.i189 ], [ %153, %else.i198 ]
  %149 = load ptr, ptr %132, align 8
  %ptridx9.i193 = getelementptr inbounds ptr, ptr %149, i64 %hash.1.i192
  %150 = load ptr, ptr %ptridx9.i193, align 8
  %.not29.i194 = icmp eq ptr %150, null
  br i1 %.not29.i194, label %Map_string_PropId____getitem__.exit202, label %if.entry10.i201

else.i198:                                        ; preds = %while.entry.i186, %ifend.i.i189
  %151 = add nsw i64 %hash.0.i181, 1
  %152 = load i64, ptr %memberidx.i178, align 4
  %153 = srem i64 %151, %152
  %154 = load ptr, ptr %132, align 8
  %ptridx7.i196 = getelementptr inbounds ptr, ptr %154, i64 %153
  %155 = load ptr, ptr %ptridx7.i196, align 8
  %.not30.i197 = icmp eq ptr %155, null
  br i1 %.not30.i197, label %while.end.i195, label %while.entry.i186

if.entry10.i201:                                  ; preds = %while.end.i195
  %memberidx15.i200 = getelementptr inbounds %MapEntry_string_PropId_, ptr %150, i64 0, i32 1
  %156 = load ptr, ptr %memberidx15.i200, align 8
  br label %Map_string_PropId____getitem__.exit202

Map_string_PropId____getitem__.exit202:           ; preds = %while.end.i195, %if.entry10.i201
  %common.ret.op.i199 = phi ptr [ %156, %if.entry10.i201 ], [ null, %while.end.i195 ]
  %157 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %157, align 4
  %memberidx.i.i203 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i203, align 4
  %memberidx1.i.i204 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i204, align 1
  %memberidx.i205 = getelementptr inbounds %VarAccessExpression, ptr %157, i64 0, i32 4
  store ptr %128, ptr %memberidx.i205, align 8
  %memberidx1.i206 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 3
  store ptr %120, ptr %memberidx1.i206, align 8
  %158 = load i64, ptr %128, align 4
  %159 = icmp eq i64 %158, 2
  store i1 %159, ptr %memberidx1.i.i204, align 1
  %160 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %160, align 4
  %161 = tail call ptr @malloc(i32 41)
  %162 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %162, align 4
  %memberidx.i.i208 = getelementptr inbounds %Expression, ptr %162, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i208, align 4
  %memberidx1.i.i209 = getelementptr inbounds %Expression, ptr %162, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i209, align 1
  %memberidx.i210 = getelementptr inbounds %MemberExpression, ptr %162, i64 0, i32 4
  store ptr %157, ptr %memberidx.i210, align 8
  %memberidx1.i211 = getelementptr inbounds %MemberExpression, ptr %162, i64 0, i32 5
  store ptr %common.ret.op.i199, ptr %memberidx1.i211, align 8
  %memberidx2.i212 = getelementptr inbounds %Expression, ptr %162, i64 0, i32 3
  store ptr %160, ptr %memberidx2.i212, align 8
  store i64 8, ptr %161, align 4
  %memberidx.i.i213 = getelementptr inbounds %Expression, ptr %161, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i213, align 4
  %memberidx1.i.i214 = getelementptr inbounds %Expression, ptr %161, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i214, align 1
  %memberidx.i215 = getelementptr inbounds %UnaryExpression, ptr %161, i64 0, i32 4
  store i64 7, ptr %memberidx.i215, align 4
  %memberidx1.i216 = getelementptr inbounds %UnaryExpression, ptr %161, i64 0, i32 5
  store ptr %162, ptr %memberidx1.i216, align 8
  %memberidx2.i217 = getelementptr inbounds %Expression, ptr %161, i64 0, i32 3
  store ptr %160, ptr %memberidx2.i217, align 8
  store i1 false, ptr %memberidx1.i.i214, align 1
  store ptr %161, ptr %memberidx2.i, align 8
  %memberidx49 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 7
  %163 = load ptr, ptr %memberidx49, align 8
  %memberidx50 = getelementptr inbounds %IdentifierToken, ptr %163, i64 0, i32 2
  %164 = load ptr, ptr %memberidx50, align 8
  %165 = load ptr, ptr %memberidx47, align 8
  %166 = call ptr @malloc(i32 4)
  store i32 1954047342, ptr %166, align 8
  %167 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %167, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %167, i64 0, i32 1
  store ptr %166, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %167, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %167, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i221, align 4
  %168 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %167)
  %memberidx.i222 = getelementptr inbounds %Map_string_PropId_, ptr %165, i64 0, i32 1
  %169 = load i64, ptr %memberidx.i222, align 4
  %170 = srem i64 %168, %169
  %171 = load ptr, ptr %165, align 8
  %ptridx.i223 = getelementptr inbounds ptr, ptr %171, i64 %170
  %172 = load ptr, ptr %ptridx.i223, align 8
  %.not.i224 = icmp eq ptr %172, null
  br i1 %.not.i224, label %while.end.i239, label %while.entry.i230

while.entry.i230:                                 ; preds = %Map_string_PropId____getitem__.exit202, %else.i242
  %hash.0.i225 = phi i64 [ %186, %else.i242 ], [ %170, %Map_string_PropId____getitem__.exit202 ]
  %173 = load ptr, ptr %165, align 8
  %ptridx3.i226 = getelementptr inbounds ptr, ptr %173, i64 %hash.0.i225
  %174 = load ptr, ptr %ptridx3.i226, align 8
  %175 = load ptr, ptr %174, align 8
  %memberidx.i.i227 = getelementptr inbounds %string, ptr %175, i64 0, i32 2
  %176 = load i64, ptr %memberidx.i.i227, align 4
  %177 = load i64, ptr %memberidx1.i.i220, align 4
  %.not.i.i229 = icmp eq i64 %176, %177
  br i1 %.not.i.i229, label %ifend.i.i233, label %else.i242

ifend.i.i233:                                     ; preds = %while.entry.i230
  %memberidx2.i.i231 = getelementptr inbounds %string, ptr %175, i64 0, i32 1
  %178 = load ptr, ptr %memberidx2.i.i231, align 8
  %179 = load ptr, ptr %memberidx.i.i219, align 8
  %180 = call i64 @memcmp(ptr %178, ptr %179, i64 %176)
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %while.end.i239, label %else.i242

while.end.i239:                                   ; preds = %else.i242, %ifend.i.i233, %Map_string_PropId____getitem__.exit202
  %hash.1.i236 = phi i64 [ %170, %Map_string_PropId____getitem__.exit202 ], [ %hash.0.i225, %ifend.i.i233 ], [ %186, %else.i242 ]
  %182 = load ptr, ptr %165, align 8
  %ptridx9.i237 = getelementptr inbounds ptr, ptr %182, i64 %hash.1.i236
  %183 = load ptr, ptr %ptridx9.i237, align 8
  %.not29.i238 = icmp eq ptr %183, null
  br i1 %.not29.i238, label %Map_string_PropId____getitem__.exit246, label %if.entry10.i245

else.i242:                                        ; preds = %while.entry.i230, %ifend.i.i233
  %184 = add nsw i64 %hash.0.i225, 1
  %185 = load i64, ptr %memberidx.i222, align 4
  %186 = srem i64 %184, %185
  %187 = load ptr, ptr %165, align 8
  %ptridx7.i240 = getelementptr inbounds ptr, ptr %187, i64 %186
  %188 = load ptr, ptr %ptridx7.i240, align 8
  %.not30.i241 = icmp eq ptr %188, null
  br i1 %.not30.i241, label %while.end.i239, label %while.entry.i230

if.entry10.i245:                                  ; preds = %while.end.i239
  %memberidx15.i244 = getelementptr inbounds %MapEntry_string_PropId_, ptr %183, i64 0, i32 1
  %189 = load ptr, ptr %memberidx15.i244, align 8
  br label %Map_string_PropId____getitem__.exit246

Map_string_PropId____getitem__.exit246:           ; preds = %while.end.i239, %if.entry10.i245
  %common.ret.op.i243 = phi ptr [ %189, %if.entry10.i245 ], [ null, %while.end.i239 ]
  %190 = load ptr, ptr %0, align 8
  %memberidx.i.i247 = getelementptr inbounds %PropId, ptr %common.ret.op.i243, i64 0, i32 1
  %191 = load ptr, ptr %memberidx.i.i247, align 8
  %memberidx.i.i.i248 = getelementptr inbounds %Program, ptr %190, i64 0, i32 1
  %192 = load ptr, ptr %memberidx.i.i.i248, align 8
  %193 = load i64, ptr %191, align 4
  %memberidx.i.i.i.i249 = getelementptr inbounds %Array_Module_, ptr %192, i64 0, i32 1
  %194 = load ptr, ptr %memberidx.i.i.i.i249, align 8
  %ptridx.i.i.i.i250 = getelementptr inbounds ptr, ptr %194, i64 %193
  %195 = load ptr, ptr %ptridx.i.i.i.i250, align 8
  %memberidx2.i.i.i251 = getelementptr inbounds %Module, ptr %195, i64 0, i32 4
  %196 = load ptr, ptr %memberidx2.i.i.i251, align 8
  %memberidx3.i.i.i252 = getelementptr inbounds %TypeId, ptr %191, i64 0, i32 2
  %197 = load i64, ptr %memberidx3.i.i.i252, align 4
  %memberidx.i5.i.i.i253 = getelementptr inbounds %Array_Class_, ptr %196, i64 0, i32 1
  %198 = load ptr, ptr %memberidx.i5.i.i.i253, align 8
  %ptridx.i6.i.i.i254 = getelementptr inbounds ptr, ptr %198, i64 %197
  %199 = load ptr, ptr %ptridx.i6.i.i.i254, align 8
  %200 = load i64, ptr %common.ret.op.i243, align 4
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %if.entry.i262, label %ifend.i268

if.entry.i262:                                    ; preds = %Map_string_PropId____getitem__.exit246
  %memberidx1.i257 = getelementptr inbounds %Class, ptr %199, i64 0, i32 5
  %202 = load ptr, ptr %memberidx1.i257, align 8
  %memberidx2.i258 = getelementptr inbounds %PropId, ptr %common.ret.op.i243, i64 0, i32 2
  %203 = load i64, ptr %memberidx2.i258, align 4
  %memberidx.i12.i259 = getelementptr inbounds %Array_ClassMethod_, ptr %202, i64 0, i32 1
  %204 = load ptr, ptr %memberidx.i12.i259, align 8
  %ptridx.i13.i260 = getelementptr inbounds ptr, ptr %204, i64 %203
  %205 = load ptr, ptr %ptridx.i13.i260, align 8
  %memberidx3.i261 = getelementptr inbounds %ClassMethod, ptr %205, i64 0, i32 4
  br label %get_class_prop_type.exit269

ifend.i268:                                       ; preds = %Map_string_PropId____getitem__.exit246
  %memberidx4.i263 = getelementptr inbounds %Class, ptr %199, i64 0, i32 4
  %206 = load ptr, ptr %memberidx4.i263, align 8
  %memberidx5.i264 = getelementptr inbounds %PropId, ptr %common.ret.op.i243, i64 0, i32 2
  %207 = load i64, ptr %memberidx5.i264, align 4
  %memberidx.i11.i265 = getelementptr inbounds %Array_ClassField_, ptr %206, i64 0, i32 1
  %208 = load ptr, ptr %memberidx.i11.i265, align 8
  %ptridx.i.i266 = getelementptr inbounds ptr, ptr %208, i64 %207
  %209 = load ptr, ptr %ptridx.i.i266, align 8
  %memberidx6.i267 = getelementptr inbounds %ClassField, ptr %209, i64 0, i32 4
  br label %get_class_prop_type.exit269

get_class_prop_type.exit269:                      ; preds = %if.entry.i262, %ifend.i268
  %common.ret.op.in.i255 = phi ptr [ %memberidx3.i261, %if.entry.i262 ], [ %memberidx6.i267, %ifend.i268 ]
  %common.ret.op.i256 = load ptr, ptr %common.ret.op.in.i255, align 8
  %memberidx53 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i256, i64 0, i32 2
  %210 = load ptr, ptr %memberidx53, align 8
  %211 = tail call ptr @malloc(i32 41)
  %212 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %212, align 4
  %memberidx.i.i270 = getelementptr inbounds %Expression, ptr %212, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i270, align 4
  %memberidx1.i.i271 = getelementptr inbounds %Expression, ptr %212, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i271, align 1
  %memberidx.i272 = getelementptr inbounds %MemberExpression, ptr %212, i64 0, i32 4
  store ptr %157, ptr %memberidx.i272, align 8
  %memberidx1.i273 = getelementptr inbounds %MemberExpression, ptr %212, i64 0, i32 5
  store ptr %common.ret.op.i243, ptr %memberidx1.i273, align 8
  %memberidx2.i274 = getelementptr inbounds %Expression, ptr %212, i64 0, i32 3
  store ptr %common.ret.op.i256, ptr %memberidx2.i274, align 8
  %213 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %213, align 8
  %memberidx.i275 = getelementptr inbounds %Array_Expression_, ptr %213, i64 0, i32 2
  store i64 0, ptr %memberidx.i275, align 4
  %memberidx1.i276 = getelementptr inbounds %Array_Expression_, ptr %213, i64 0, i32 3
  store i64 8, ptr %memberidx1.i276, align 4
  %memberidx2.i277 = getelementptr inbounds %Array_Expression_, ptr %213, i64 0, i32 1
  %214 = call ptr @malloc(i32 64)
  store ptr %214, ptr %memberidx2.i277, align 8
  store i64 0, ptr %memberidx.i275, align 4
  store i64 8, ptr %211, align 4
  %memberidx.i.i278 = getelementptr inbounds %Expression, ptr %211, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i278, align 4
  %memberidx1.i.i279 = getelementptr inbounds %Expression, ptr %211, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i279, align 1
  %memberidx.i280 = getelementptr inbounds %CallExpression, ptr %211, i64 0, i32 4
  store ptr %212, ptr %memberidx.i280, align 8
  %memberidx1.i281 = getelementptr inbounds %CallExpression, ptr %211, i64 0, i32 5
  store ptr %213, ptr %memberidx1.i281, align 8
  %memberidx2.i282 = getelementptr inbounds %Expression, ptr %211, i64 0, i32 3
  store ptr %210, ptr %memberidx2.i282, align 8
  %215 = call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr %164, ptr nonnull %211, ptr %210)
  %memberidx56 = getelementptr inbounds %Var, ptr %215, i64 0, i32 1
  %216 = load ptr, ptr %memberidx56, align 8
  %217 = tail call ptr @malloc(i32 25)
  store i64 1, ptr %217, align 4
  %memberidx.i283 = getelementptr inbounds %VarDeclaration, ptr %217, i64 0, i32 2
  store ptr %216, ptr %memberidx.i283, align 8
  %memberidx1.i284 = getelementptr inbounds %VarDeclaration, ptr %217, i64 0, i32 1
  store ptr %164, ptr %memberidx1.i284, align 8
  %memberidx2.i285 = getelementptr inbounds %VarDeclaration, ptr %217, i64 0, i32 3
  store i1 false, ptr %memberidx2.i285, align 1
  store ptr %217, ptr %memberidx1.i, align 8
  %218 = tail call ptr @malloc(i32 49)
  %219 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %219, align 4
  %memberidx.i.i286 = getelementptr inbounds %Expression, ptr %219, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i286, align 4
  %memberidx1.i.i287 = getelementptr inbounds %Expression, ptr %219, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i287, align 1
  %memberidx.i288 = getelementptr inbounds %VarAccessExpression, ptr %219, i64 0, i32 4
  store ptr %216, ptr %memberidx.i288, align 8
  %memberidx1.i289 = getelementptr inbounds %Expression, ptr %219, i64 0, i32 3
  store ptr %210, ptr %memberidx1.i289, align 8
  %220 = load i64, ptr %216, align 4
  %221 = icmp eq i64 %220, 2
  store i1 %221, ptr %memberidx1.i.i287, align 1
  store i64 8, ptr %218, align 4
  %memberidx.i.i291 = getelementptr inbounds %Expression, ptr %218, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i291, align 4
  %memberidx1.i.i292 = getelementptr inbounds %Expression, ptr %218, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i292, align 1
  %memberidx.i293 = getelementptr inbounds %BinaryExpression, ptr %218, i64 0, i32 4
  store ptr %219, ptr %memberidx.i293, align 8
  %memberidx1.i294 = getelementptr inbounds %BinaryExpression, ptr %218, i64 0, i32 5
  store i64 19, ptr %memberidx1.i294, align 4
  %memberidx2.i295 = getelementptr inbounds %BinaryExpression, ptr %218, i64 0, i32 6
  store ptr %211, ptr %memberidx2.i295, align 8
  %memberidx3.i296 = getelementptr inbounds %Expression, ptr %218, i64 0, i32 3
  store ptr %210, ptr %memberidx3.i296, align 8
  store i1 false, ptr %memberidx1.i.i292, align 1
  br label %ifend.sink.split

ifend61:                                          ; preds = %ifend
  store i1 true, ptr %memberidx2, align 1
  %memberidx63 = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 5
  %memberidx64 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 8
  %222 = load ptr, ptr %memberidx64, align 8
  %223 = call fastcc ptr @TypeChecker_check_block(ptr %0, ptr %222, ptr nonnull %4)
  store ptr %223, ptr %memberidx63, align 8
  store i1 %7, ptr %memberidx2, align 1
  %224 = load ptr, ptr %memberidx.i111, align 8
  store ptr %224, ptr %memberidx1.i112, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_statement(ptr %0, ptr %1) unnamed_addr {
  %memberidx = getelementptr inbounds %StatementNode, ptr %1, i64 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  switch i64 %3, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry2
    i64 2, label %if.entry6
    i64 3, label %if.entry10
    i64 4, label %if.entry14
    i64 5, label %if.entry18
    i64 6, label %if.entry22
    i64 7, label %if.entry26
    i64 8, label %if.entry30
  ]

common.ret:                                       ; preds = %2, %ifend.i77, %TypeChecker_error.exit.i76, %ifend.i, %TypeChecker_error.exit.i, %if.entry30, %if.entry26, %TypeChecker_check_condition.exit, %if.entry10, %if.entry6, %if.entry2, %TypeChecker_check_if_stamement.exit
  %common.ret.op = phi ptr [ %21, %TypeChecker_check_if_stamement.exit ], [ %22, %if.entry2 ], [ %23, %if.entry6 ], [ %24, %if.entry10 ], [ %41, %TypeChecker_check_condition.exit ], [ %76, %if.entry26 ], [ %78, %if.entry30 ], [ null, %TypeChecker_error.exit.i ], [ %58, %ifend.i ], [ null, %TypeChecker_error.exit.i76 ], [ %75, %ifend.i77 ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx.i81 = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %memberidx.i81, align 8
  %5 = call ptr @malloc(i32 8)
  store i64 20, ptr %5, align 4
  %6 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %5, ptr %4)
  %memberidx.i.i96 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i.i96, align 8
  %memberidx1.i.i97 = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i.i97, align 8
  %memberidx2.i.i98 = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i98, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %TypeChecker_check_condition.exit110, label %ifend.i101

ifend.i101:                                       ; preds = %if.entry
  %memberidx.i100 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx.i100, align 8
  %12 = load i64, ptr %11, align 4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %TypeChecker_check_condition.exit110, label %true_block.i108

true_block.i108:                                  ; preds = %ifend.i101
  %14 = call ptr @malloc(i32 8)
  store i64 0, ptr %14, align 4
  %15 = call ptr @malloc(i32 33)
  store i64 8, ptr %15, align 4
  %memberidx.i.i.i.i102 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i102, align 4
  %memberidx1.i.i.i.i103 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i.i103, align 1
  %memberidx.i.i.i104 = getelementptr inbounds %TypeCastExpression, ptr %15, i64 0, i32 4
  store ptr %6, ptr %memberidx.i.i.i104, align 8
  %memberidx1.i.i.i105 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  store ptr %14, ptr %memberidx1.i.i.i105, align 8
  %memberidx3.i.i.i107 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %16 = load i1, ptr %memberidx3.i.i.i107, align 1
  store i1 %16, ptr %memberidx1.i.i.i.i103, align 1
  br label %TypeChecker_check_condition.exit110

TypeChecker_check_condition.exit110:              ; preds = %ifend.i101, %if.entry, %true_block.i108
  %common.ret.op.i99 = phi ptr [ null, %if.entry ], [ %15, %true_block.i108 ], [ %6, %ifend.i101 ]
  %memberidx1.i82 = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 3
  %17 = load ptr, ptr %memberidx1.i82, align 8
  %18 = call fastcc ptr @TypeChecker_check_block(ptr %0, ptr %17, ptr null)
  %memberidx2.i = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 4
  %19 = load ptr, ptr %memberidx2.i, align 8
  %.not.i = icmp eq ptr %19, null
  br i1 %.not.i, label %TypeChecker_check_if_stamement.exit, label %true_block.i

true_block.i:                                     ; preds = %TypeChecker_check_condition.exit110
  %20 = call fastcc ptr @TypeChecker_check_block(ptr %0, ptr nonnull %19, ptr null)
  br label %TypeChecker_check_if_stamement.exit

TypeChecker_check_if_stamement.exit:              ; preds = %TypeChecker_check_condition.exit110, %true_block.i
  %ternary.i = phi ptr [ %20, %true_block.i ], [ null, %TypeChecker_check_condition.exit110 ]
  %21 = call ptr @malloc(i32 32)
  store i64 0, ptr %21, align 4
  %memberidx.i.i83 = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 1
  store ptr %common.ret.op.i99, ptr %memberidx.i.i83, align 8
  %memberidx1.i.i84 = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i84, align 8
  %memberidx2.i.i = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 3
  store ptr %ternary.i, ptr %memberidx2.i.i, align 8
  br label %common.ret

if.entry2:                                        ; preds = %2
  %22 = call fastcc ptr @TypeChecker_check_var_declaration(ptr %0, ptr %1)
  br label %common.ret

if.entry6:                                        ; preds = %2
  %23 = call fastcc ptr @TypeChecker_check_const_declaration(ptr %0, ptr %1)
  br label %common.ret

if.entry10:                                       ; preds = %2
  %24 = call fastcc ptr @TypeChecker_check_for_statement(ptr %0, ptr %1)
  br label %common.ret

if.entry14:                                       ; preds = %2
  %memberidx.i78 = getelementptr inbounds %WhileStatementNode, ptr %1, i64 0, i32 2
  %25 = load ptr, ptr %memberidx.i78, align 8
  %26 = call ptr @malloc(i32 8)
  store i64 20, ptr %26, align 4
  %27 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %26, ptr %25)
  %memberidx.i.i85 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %28 = load ptr, ptr %memberidx.i.i85, align 8
  %memberidx1.i.i86 = getelementptr inbounds %Compiler, ptr %28, i64 0, i32 6
  %29 = load ptr, ptr %memberidx1.i.i86, align 8
  %memberidx2.i.i87 = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i.i87, align 4
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %TypeChecker_check_condition.exit, label %ifend.i90

ifend.i90:                                        ; preds = %if.entry14
  %memberidx.i89 = getelementptr inbounds %Expression, ptr %27, i64 0, i32 3
  %32 = load ptr, ptr %memberidx.i89, align 8
  %33 = load i64, ptr %32, align 4
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %TypeChecker_check_condition.exit, label %true_block.i95

true_block.i95:                                   ; preds = %ifend.i90
  %35 = call ptr @malloc(i32 8)
  store i64 0, ptr %35, align 4
  %36 = call ptr @malloc(i32 33)
  store i64 8, ptr %36, align 4
  %memberidx.i.i.i.i91 = getelementptr inbounds %Expression, ptr %36, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i91, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %36, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i.i, align 1
  %memberidx.i.i.i92 = getelementptr inbounds %TypeCastExpression, ptr %36, i64 0, i32 4
  store ptr %27, ptr %memberidx.i.i.i92, align 8
  %memberidx1.i.i.i93 = getelementptr inbounds %Expression, ptr %36, i64 0, i32 3
  store ptr %35, ptr %memberidx1.i.i.i93, align 8
  %memberidx3.i.i.i = getelementptr inbounds %Expression, ptr %27, i64 0, i32 1
  %37 = load i1, ptr %memberidx3.i.i.i, align 1
  store i1 %37, ptr %memberidx1.i.i.i.i, align 1
  br label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i90, %if.entry14, %true_block.i95
  %common.ret.op.i88 = phi ptr [ null, %if.entry14 ], [ %36, %true_block.i95 ], [ %27, %ifend.i90 ]
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %38 = load i1, ptr %memberidx1.i, align 1
  store i1 true, ptr %memberidx1.i, align 1
  %memberidx3.i = getelementptr inbounds %WhileStatementNode, ptr %1, i64 0, i32 3
  %39 = load ptr, ptr %memberidx3.i, align 8
  %40 = call fastcc ptr @TypeChecker_check_block(ptr %0, ptr %39, ptr null)
  store i1 %38, ptr %memberidx1.i, align 1
  %41 = call ptr @malloc(i32 24)
  store i64 4, ptr %41, align 4
  %memberidx.i.i79 = getelementptr inbounds %WhileStatement, ptr %41, i64 0, i32 1
  store ptr %common.ret.op.i88, ptr %memberidx.i.i79, align 8
  %memberidx1.i.i80 = getelementptr inbounds %WhileStatement, ptr %41, i64 0, i32 2
  store ptr %40, ptr %memberidx1.i.i80, align 8
  br label %common.ret

if.entry18:                                       ; preds = %2
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %42 = load i1, ptr %memberidx.i, align 1
  br i1 %42, label %ifend.i, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry18
  %43 = call ptr @malloc(i32 32)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %43, ptr noundef nonnull align 8 dereferenceable(32) @207, i64 32, i1 false)
  %44 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i.i, align 4
  %45 = load ptr, ptr %1, align 8
  %memberidx.i.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %46 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Compiler, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i.i, align 8
  %48 = call ptr @malloc(i32 24)
  store i64 4, ptr %48, align 4
  %memberidx1.i.i3.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 2
  store ptr %45, ptr %memberidx1.i.i3.i, align 8
  %memberidx2.i.i4.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 1
  store ptr %44, ptr %memberidx2.i.i4.i, align 8
  %memberidx.i.i5.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %49 = load i64, ptr %memberidx.i.i5.i, align 4
  %memberidx1.i2.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 3
  %50 = load i64, ptr %memberidx1.i2.i.i, align 4
  %.not.i.i.i = icmp slt i64 %49, %50
  br i1 %.not.i.i.i, label %TypeChecker_error.exit.i, label %if.entry.i.i.i

if.entry.i.i.i:                                   ; preds = %if.entry.i
  %51 = shl i64 %50, 1
  store i64 %51, ptr %memberidx1.i2.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %53 = shl i64 %50, 4
  %54 = call ptr @realloc(ptr %52, i64 %53)
  store ptr %54, ptr %memberidx2.i.i.i.i, align 8
  br label %TypeChecker_error.exit.i

TypeChecker_error.exit.i:                         ; preds = %if.entry.i.i.i, %if.entry.i
  %55 = load i64, ptr %memberidx.i.i5.i, align 4
  %56 = add nsw i64 %55, 1
  store i64 %56, ptr %memberidx.i.i5.i, align 4
  %memberidx4.i.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %57 = load ptr, ptr %memberidx4.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %57, i64 %55
  store ptr %48, ptr %ptridx.i.i.i, align 8
  br label %common.ret

ifend.i:                                          ; preds = %if.entry18
  %58 = call ptr @malloc(i32 8)
  store i64 5, ptr %58, align 4
  br label %common.ret

if.entry22:                                       ; preds = %2
  %memberidx.i58 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %59 = load i1, ptr %memberidx.i58, align 1
  br i1 %59, label %ifend.i77, label %if.entry.i70

if.entry.i70:                                     ; preds = %if.entry22
  %60 = call ptr @malloc(i32 29)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(29) %60, ptr noundef nonnull align 8 dereferenceable(29) @206, i64 29, i1 false)
  %61 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i.i60 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i.i60, align 8
  %memberidx1.i.i.i61 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 29, ptr %memberidx1.i.i.i61, align 4
  %memberidx2.i.i.i62 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 29, ptr %memberidx2.i.i.i62, align 4
  %62 = load ptr, ptr %1, align 8
  %memberidx.i.i63 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %63 = load ptr, ptr %memberidx.i.i63, align 8
  %memberidx1.i.i64 = getelementptr inbounds %Compiler, ptr %63, i64 0, i32 6
  %64 = load ptr, ptr %memberidx1.i.i64, align 8
  %65 = call ptr @malloc(i32 24)
  store i64 4, ptr %65, align 4
  %memberidx1.i.i3.i65 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 2
  store ptr %62, ptr %memberidx1.i.i3.i65, align 8
  %memberidx2.i.i4.i66 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 1
  store ptr %61, ptr %memberidx2.i.i4.i66, align 8
  %memberidx.i.i5.i67 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 2
  %66 = load i64, ptr %memberidx.i.i5.i67, align 4
  %memberidx1.i2.i.i68 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 3
  %67 = load i64, ptr %memberidx1.i2.i.i68, align 4
  %.not.i.i.i69 = icmp slt i64 %66, %67
  br i1 %.not.i.i.i69, label %TypeChecker_error.exit.i76, label %if.entry.i.i.i73

if.entry.i.i.i73:                                 ; preds = %if.entry.i70
  %68 = shl i64 %67, 1
  store i64 %68, ptr %memberidx1.i2.i.i68, align 4
  %memberidx2.i.i.i.i72 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %69 = load ptr, ptr %memberidx2.i.i.i.i72, align 8
  %70 = shl i64 %67, 4
  %71 = call ptr @realloc(ptr %69, i64 %70)
  store ptr %71, ptr %memberidx2.i.i.i.i72, align 8
  br label %TypeChecker_error.exit.i76

TypeChecker_error.exit.i76:                       ; preds = %if.entry.i.i.i73, %if.entry.i70
  %72 = load i64, ptr %memberidx.i.i5.i67, align 4
  %73 = add nsw i64 %72, 1
  store i64 %73, ptr %memberidx.i.i5.i67, align 4
  %memberidx4.i.i.i74 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %74 = load ptr, ptr %memberidx4.i.i.i74, align 8
  %ptridx.i.i.i75 = getelementptr inbounds ptr, ptr %74, i64 %72
  store ptr %65, ptr %ptridx.i.i.i75, align 8
  br label %common.ret

ifend.i77:                                        ; preds = %if.entry22
  %75 = call ptr @malloc(i32 8)
  store i64 6, ptr %75, align 4
  br label %common.ret

if.entry26:                                       ; preds = %2
  %76 = call fastcc ptr @TypeChecker_check_can_return(ptr %0, ptr %1)
  br label %common.ret

if.entry30:                                       ; preds = %2
  %77 = call ptr @malloc(i32 8)
  store i64 20, ptr %77, align 4
  %78 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %77, ptr %1)
  br label %common.ret
}

define internal fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %1, ptr %2) unnamed_addr {
  %4 = load i64, ptr %1, align 4
  %5 = load i64, ptr %2, align 4
  %.not = icmp eq i64 %4, %5
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %for.body, %for.cond83, %for.body84, %for.cond83.preheader, %if.entry66, %ifend4, %ifend73, %ifend.i.i, %ifend52, %if.entry39, %ifend11, %if.entry2, %3, %if.entry60, %if.entry55, %if.entry33, %if.entry25
  %common.ret.op = phi i1 [ %35, %if.entry25 ], [ %38, %if.entry33 ], [ %60, %if.entry55 ], [ %63, %if.entry60 ], [ false, %3 ], [ false, %if.entry2 ], [ false, %ifend11 ], [ true, %if.entry39 ], [ false, %ifend52 ], [ false, %ifend.i.i ], [ false, %ifend73 ], [ true, %ifend4 ], [ false, %if.entry66 ], [ true, %for.cond83.preheader ], [ %88, %for.body84 ], [ %88, %for.cond83 ], [ false, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %3
  %6 = icmp eq i64 %4, 15
  br i1 %6, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %memberidx5 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_Type_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx6, align 4
  %memberidx7 = getelementptr inbounds %FunctionType, ptr %2, i64 0, i32 1
  %9 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_Type_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx8, align 4
  %.not120 = icmp eq i64 %8, %10
  br i1 %.not120, label %ifend11, label %common.ret

ifend4:                                           ; preds = %for.cond, %for.cond.preheader, %ifend
  %11 = load i64, ptr %1, align 4
  switch i64 %11, label %common.ret [
    i64 14, label %if.entry25
    i64 13, label %if.entry33
    i64 11, label %if.entry39
    i64 12, label %if.entry60
    i64 19, label %if.entry66
  ]

ifend11:                                          ; preds = %if.entry2
  %memberidx12 = getelementptr inbounds %FunctionType, ptr %2, i64 0, i32 2
  %12 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 2
  %13 = load ptr, ptr %memberidx13, align 8
  %14 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %12, ptr %13)
  br i1 %14, label %for.cond.preheader, label %common.ret

for.cond.preheader:                               ; preds = %ifend11
  %15 = load ptr, ptr %memberidx5, align 8
  %memberidx18137 = getelementptr inbounds %Array_Type_, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx18137, align 4
  %17 = icmp sgt i64 %16, 0
  br i1 %17, label %for.body, label %ifend4

for.cond:                                         ; preds = %for.body
  %18 = add nuw nsw i64 %storemerge121138, 1
  %19 = load ptr, ptr %memberidx5, align 8
  %memberidx18 = getelementptr inbounds %Array_Type_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx18, align 4
  %21 = icmp slt i64 %18, %20
  br i1 %21, label %for.body, label %ifend4

for.body:                                         ; preds = %for.cond.preheader, %for.cond
  %22 = phi ptr [ %19, %for.cond ], [ %15, %for.cond.preheader ]
  %storemerge121138 = phi i64 [ %18, %for.cond ], [ 0, %for.cond.preheader ]
  %memberidx.i122 = getelementptr inbounds %Array_Type_, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i122, align 8
  %ptridx.i123 = getelementptr inbounds ptr, ptr %23, i64 %storemerge121138
  %24 = load ptr, ptr %ptridx.i123, align 8
  %25 = load ptr, ptr %memberidx7, align 8
  %memberidx.i124 = getelementptr inbounds %Array_Type_, ptr %25, i64 0, i32 1
  %26 = load ptr, ptr %memberidx.i124, align 8
  %ptridx.i125 = getelementptr inbounds ptr, ptr %26, i64 %storemerge121138
  %27 = load ptr, ptr %ptridx.i125, align 8
  %28 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %24, ptr %27)
  br i1 %28, label %for.cond, label %common.ret

if.entry25:                                       ; preds = %ifend4
  %memberidx28 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 2
  %29 = load i64, ptr %memberidx28, align 4
  %memberidx29 = getelementptr inbounds %ArrayType, ptr %2, i64 0, i32 2
  %30 = load i64, ptr %memberidx29, align 4
  %31 = icmp eq i64 %29, %30
  %memberidx30 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  %32 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %ArrayType, ptr %2, i64 0, i32 1
  %33 = load ptr, ptr %memberidx31, align 8
  %34 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %32, ptr %33)
  %35 = and i1 %31, %34
  br label %common.ret

if.entry33:                                       ; preds = %ifend4
  %memberidx36 = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %36 = load ptr, ptr %memberidx36, align 8
  %memberidx37 = getelementptr inbounds %PointerType, ptr %2, i64 0, i32 1
  %37 = load ptr, ptr %memberidx37, align 8
  %38 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %36, ptr %37)
  br label %common.ret

if.entry39:                                       ; preds = %ifend4
  %memberidx42 = getelementptr inbounds %ObjectType, ptr %1, i64 0, i32 1
  %39 = load ptr, ptr %memberidx42, align 8
  %memberidx43 = getelementptr inbounds %ObjectType, ptr %2, i64 0, i32 1
  %40 = load ptr, ptr %memberidx43, align 8
  %memberidx44 = getelementptr inbounds %TypeId, ptr %39, i64 0, i32 1
  %41 = load i64, ptr %memberidx44, align 4
  %memberidx45 = getelementptr inbounds %TypeId, ptr %40, i64 0, i32 1
  %42 = load i64, ptr %memberidx45, align 4
  %43 = icmp eq i64 %41, %42
  %44 = load i64, ptr %39, align 4
  %45 = load i64, ptr %40, align 4
  %46 = icmp eq i64 %44, %45
  %47 = and i1 %43, %46
  %memberidx48 = getelementptr inbounds %TypeId, ptr %39, i64 0, i32 2
  %48 = load i64, ptr %memberidx48, align 4
  %memberidx49 = getelementptr inbounds %TypeId, ptr %40, i64 0, i32 2
  %49 = load i64, ptr %memberidx49, align 4
  %50 = icmp eq i64 %48, %49
  %51 = and i1 %47, %50
  br i1 %51, label %common.ret, label %ifend52

ifend52:                                          ; preds = %if.entry39
  %52 = load ptr, ptr %0, align 8
  %memberidx.i128 = getelementptr inbounds %Program, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i128, align 8
  %memberidx.i.i129 = getelementptr inbounds %Array_Module_, ptr %53, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i.i129, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %54, i64 %45
  %55 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %55, i64 0, i32 4
  %56 = load ptr, ptr %memberidx2.i, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_Class_, ptr %56, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %57, i64 %49
  %58 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx54 = getelementptr inbounds %Class, ptr %58, i64 0, i32 2
  %59 = load ptr, ptr %memberidx54, align 8
  %.not119 = icmp eq ptr %59, null
  br i1 %.not119, label %common.ret, label %if.entry55

if.entry55:                                       ; preds = %ifend52
  %60 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %1, ptr nonnull %59)
  br label %common.ret

if.entry60:                                       ; preds = %ifend4
  %memberidx63 = getelementptr inbounds %EnumType, ptr %1, i64 0, i32 1
  %61 = load ptr, ptr %memberidx63, align 8
  %memberidx64 = getelementptr inbounds %EnumType, ptr %2, i64 0, i32 1
  %62 = load ptr, ptr %memberidx64, align 8
  %63 = icmp eq ptr %61, %62
  br label %common.ret

if.entry66:                                       ; preds = %ifend4
  %memberidx69 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 1
  %64 = load ptr, ptr %memberidx69, align 8
  %memberidx70 = getelementptr inbounds %GenericType, ptr %2, i64 0, i32 1
  %65 = load ptr, ptr %memberidx70, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %66 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  %67 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %66, %67
  br i1 %.not.i.i, label %ifend.i.i, label %common.ret

ifend.i.i:                                        ; preds = %if.entry66
  %memberidx2.i.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %68 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  %69 = load ptr, ptr %memberidx3.i.i, align 8
  %70 = call i64 @memcmp(ptr %68, ptr %69, i64 %66)
  %.not132 = icmp eq i64 %70, 0
  br i1 %.not132, label %ifend73, label %common.ret

ifend73:                                          ; preds = %ifend.i.i
  %memberidx74 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 2
  %71 = load ptr, ptr %memberidx74, align 8
  %memberidx75 = getelementptr inbounds %Array_Type_, ptr %71, i64 0, i32 2
  %72 = load i64, ptr %memberidx75, align 4
  %memberidx76 = getelementptr inbounds %GenericType, ptr %2, i64 0, i32 2
  %73 = load ptr, ptr %memberidx76, align 8
  %memberidx77 = getelementptr inbounds %Array_Type_, ptr %73, i64 0, i32 2
  %74 = load i64, ptr %memberidx77, align 4
  %.not118 = icmp eq i64 %72, %74
  br i1 %.not118, label %for.cond83.preheader, label %common.ret

for.cond83.preheader:                             ; preds = %ifend73
  %75 = load ptr, ptr %memberidx74, align 8
  %memberidx88134 = getelementptr inbounds %Array_Type_, ptr %75, i64 0, i32 2
  %76 = load i64, ptr %memberidx88134, align 4
  %77 = icmp sgt i64 %76, 0
  br i1 %77, label %for.body84, label %common.ret

for.cond83:                                       ; preds = %for.body84
  %78 = add nuw nsw i64 %storemerge135, 1
  %79 = load ptr, ptr %memberidx74, align 8
  %memberidx88 = getelementptr inbounds %Array_Type_, ptr %79, i64 0, i32 2
  %80 = load i64, ptr %memberidx88, align 4
  %81 = icmp slt i64 %78, %80
  br i1 %81, label %for.body84, label %common.ret

for.body84:                                       ; preds = %for.cond83.preheader, %for.cond83
  %82 = phi ptr [ %79, %for.cond83 ], [ %75, %for.cond83.preheader ]
  %storemerge135 = phi i64 [ %78, %for.cond83 ], [ 0, %for.cond83.preheader ]
  %memberidx.i126 = getelementptr inbounds %Array_Type_, ptr %82, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i126, align 8
  %ptridx.i127 = getelementptr inbounds ptr, ptr %83, i64 %storemerge135
  %84 = load ptr, ptr %ptridx.i127, align 8
  %85 = load ptr, ptr %memberidx76, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %85, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %86, i64 %storemerge135
  %87 = load ptr, ptr %ptridx.i, align 8
  %88 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %84, ptr %87)
  br i1 %88, label %for.cond83, label %common.ret
}

define internal fastcc ptr @TypeChecker_create_scope(ptr nocapture readonly %0) unnamed_addr {
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %2 = load i64, ptr %memberidx.i, align 4
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %4, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %5, i64 %2
  %6 = load ptr, ptr %ptridx.i.i.i, align 8
  %7 = tail call ptr @malloc(i32 56)
  %8 = load i64, ptr %memberidx.i, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %6, i64 0, i32 8
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = call ptr @malloc(i32 16)
  store i64 %8, ptr %11, align 4
  %memberidx1.i.i8 = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  store i64 %10, ptr %memberidx1.i.i8, align 4
  store ptr %11, ptr %7, align 8
  %12 = call ptr @malloc(i32 24)
  %13 = call ptr @malloc(i32 2048)
  store ptr %13, ptr %12, align 8
  br label %for.body.i16.i

for.body.i16.i:                                   ; preds = %1, %for.body.i16.i
  %i.0.i13.i16 = phi i64 [ 0, %1 ], [ %15, %for.body.i16.i ]
  %14 = load ptr, ptr %12, align 8
  %ptridx.i15.i = getelementptr inbounds ptr, ptr %14, i64 %i.0.i13.i16
  store ptr null, ptr %ptridx.i15.i, align 8
  %15 = add nuw nsw i64 %i.0.i13.i16, 1
  %16 = icmp ult i64 %i.0.i13.i16, 255
  br i1 %16, label %for.body.i16.i, label %Map_string_VarId__constructor.exit.i

Map_string_VarId__constructor.exit.i:             ; preds = %for.body.i16.i
  %memberidx1.i9 = getelementptr inbounds %Scope, ptr %7, i64 0, i32 1
  %memberidx2.i17.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 1
  store i64 256, ptr %memberidx2.i17.i, align 4
  %memberidx3.i18.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx3.i18.i, align 4
  store ptr %12, ptr %memberidx1.i9, align 8
  %17 = call ptr @malloc(i32 24)
  %18 = call ptr @malloc(i32 2048)
  store ptr %18, ptr %17, align 8
  br label %for.body.i22.i

for.body.i22.i:                                   ; preds = %Map_string_VarId__constructor.exit.i, %for.body.i22.i
  %i.0.i19.i15 = phi i64 [ 0, %Map_string_VarId__constructor.exit.i ], [ %20, %for.body.i22.i ]
  %19 = load ptr, ptr %17, align 8
  %ptridx.i21.i = getelementptr inbounds ptr, ptr %19, i64 %i.0.i19.i15
  store ptr null, ptr %ptridx.i21.i, align 8
  %20 = add nuw nsw i64 %i.0.i19.i15, 1
  %21 = icmp ult i64 %i.0.i19.i15, 255
  br i1 %21, label %for.body.i22.i, label %Map_string_ClassId__constructor.exit.i

Map_string_ClassId__constructor.exit.i:           ; preds = %for.body.i22.i
  %memberidx2.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 2
  %memberidx2.i23.i = getelementptr inbounds %Map_string_ClassId_, ptr %17, i64 0, i32 1
  store i64 256, ptr %memberidx2.i23.i, align 4
  %memberidx3.i24.i = getelementptr inbounds %Map_string_ClassId_, ptr %17, i64 0, i32 2
  store i64 0, ptr %memberidx3.i24.i, align 4
  store ptr %17, ptr %memberidx2.i, align 8
  %22 = call ptr @malloc(i32 24)
  %23 = call ptr @malloc(i32 2048)
  store ptr %23, ptr %22, align 8
  br label %for.body.i28.i

for.body.i28.i:                                   ; preds = %Map_string_ClassId__constructor.exit.i, %for.body.i28.i
  %i.0.i25.i14 = phi i64 [ 0, %Map_string_ClassId__constructor.exit.i ], [ %25, %for.body.i28.i ]
  %24 = load ptr, ptr %22, align 8
  %ptridx.i27.i = getelementptr inbounds ptr, ptr %24, i64 %i.0.i25.i14
  store ptr null, ptr %ptridx.i27.i, align 8
  %25 = add nuw nsw i64 %i.0.i25.i14, 1
  %26 = icmp ult i64 %i.0.i25.i14, 255
  br i1 %26, label %for.body.i28.i, label %Map_string_VarId__constructor.exit31.i

Map_string_VarId__constructor.exit31.i:           ; preds = %for.body.i28.i
  %memberidx3.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 3
  %memberidx2.i29.i = getelementptr inbounds %Map_string_VarId_, ptr %22, i64 0, i32 1
  store i64 256, ptr %memberidx2.i29.i, align 4
  %memberidx3.i30.i = getelementptr inbounds %Map_string_VarId_, ptr %22, i64 0, i32 2
  store i64 0, ptr %memberidx3.i30.i, align 4
  store ptr %22, ptr %memberidx3.i, align 8
  %27 = call ptr @malloc(i32 24)
  %28 = call ptr @malloc(i32 2048)
  store ptr %28, ptr %27, align 8
  br label %for.body.i35.i

for.body.i35.i:                                   ; preds = %Map_string_VarId__constructor.exit31.i, %for.body.i35.i
  %i.0.i32.i13 = phi i64 [ 0, %Map_string_VarId__constructor.exit31.i ], [ %30, %for.body.i35.i ]
  %29 = load ptr, ptr %27, align 8
  %ptridx.i34.i = getelementptr inbounds ptr, ptr %29, i64 %i.0.i32.i13
  store ptr null, ptr %ptridx.i34.i, align 8
  %30 = add nuw nsw i64 %i.0.i32.i13, 1
  %31 = icmp ult i64 %i.0.i32.i13, 255
  br i1 %31, label %for.body.i35.i, label %Map_string_EnumId__constructor.exit.i

Map_string_EnumId__constructor.exit.i:            ; preds = %for.body.i35.i
  %memberidx4.i10 = getelementptr inbounds %Scope, ptr %7, i64 0, i32 4
  %memberidx2.i36.i = getelementptr inbounds %Map_string_EnumId_, ptr %27, i64 0, i32 1
  store i64 256, ptr %memberidx2.i36.i, align 4
  %memberidx3.i37.i = getelementptr inbounds %Map_string_EnumId_, ptr %27, i64 0, i32 2
  store i64 0, ptr %memberidx3.i37.i, align 4
  store ptr %27, ptr %memberidx4.i10, align 8
  %32 = call ptr @malloc(i32 24)
  %33 = call ptr @malloc(i32 2048)
  store ptr %33, ptr %32, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %Map_string_EnumId__constructor.exit.i, %for.body.i.i
  %i.0.i.i12 = phi i64 [ 0, %Map_string_EnumId__constructor.exit.i ], [ %35, %for.body.i.i ]
  %34 = load ptr, ptr %32, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %34, i64 %i.0.i.i12
  store ptr null, ptr %ptridx.i.i, align 8
  %35 = add nuw nsw i64 %i.0.i.i12, 1
  %36 = icmp ult i64 %i.0.i.i12, 255
  br i1 %36, label %for.body.i.i, label %Scope_constructor.exit

Scope_constructor.exit:                           ; preds = %for.body.i.i
  %memberidx5.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 6
  %memberidx2.i.i11 = getelementptr inbounds %Map_string_Type_, ptr %32, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i11, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_Type_, ptr %32, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %32, ptr %memberidx5.i, align 8
  %memberidx6.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 5
  store ptr null, ptr %memberidx6.i, align 8
  %37 = load ptr, ptr %memberidx1, align 8
  %memberidx.i7 = getelementptr inbounds %Array_Scope_, ptr %37, i64 0, i32 2
  %38 = load i64, ptr %memberidx.i7, align 4
  %memberidx1.i = getelementptr inbounds %Array_Scope_, ptr %37, i64 0, i32 3
  %39 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %38, %39
  br i1 %.not.i, label %Array_Scope____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %Scope_constructor.exit
  %40 = shl i64 %39, 1
  store i64 %40, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Scope_, ptr %37, i64 0, i32 1
  %41 = load ptr, ptr %memberidx2.i.i, align 8
  %42 = shl i64 %39, 4
  %43 = call ptr @realloc(ptr %41, i64 %42)
  store ptr %43, ptr %memberidx2.i.i, align 8
  br label %Array_Scope____sl__.exit

Array_Scope____sl__.exit:                         ; preds = %Scope_constructor.exit, %if.entry.i
  %44 = load i64, ptr %memberidx.i7, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %memberidx.i7, align 4
  %memberidx4.i = getelementptr inbounds %Array_Scope_, ptr %37, i64 0, i32 1
  %46 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %46, i64 %44
  store ptr %7, ptr %ptridx.i, align 8
  ret ptr %7
}

define internal fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %6 = call fastcc ptr @bin_op_to_op_overload_name(i64 %5)
  %7 = icmp eq ptr %6, null
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend23, %ifend34, %TypeChecker_error.exit141, %if.entry28, %TypeChecker_error.exit114, %if.entry9, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %82, %if.entry9 ], [ null, %TypeChecker_error.exit114 ], [ %126, %if.entry28 ], [ null, %TypeChecker_error.exit141 ], [ %160, %ifend34 ], [ null, %ifend23 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  %8 = call fastcc ptr @dump_bin_op(i64 %5)
  %9 = load ptr, ptr %8, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i64 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr %10(ptr nonnull %8)
  %12 = alloca ptr, align 8
  %13 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %12, ptr nonnull @155, ptr %11)
  %14 = load ptr, ptr %12, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 %13, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 %13, ptr %memberidx2.i, align 4
  tail call void @free(ptr %11)
  %16 = load ptr, ptr %2, align 8
  %memberidx.i77 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i77, align 8
  %memberidx1.i78 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i78, align 8
  %19 = call ptr @malloc(i32 24)
  store i64 4, ptr %19, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 2
  store ptr %16, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 1
  store ptr %15, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 3
  %21 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %20, %21
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %22 = shl i64 %21, 1
  store i64 %22, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i.i, align 8
  %24 = shl i64 %21, 4
  %25 = call ptr @realloc(ptr %23, i64 %24)
  store ptr %25, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %26 = load i64, ptr %memberidx.i.i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %memberidx.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %28 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %28, i64 %26
  store ptr %19, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %4
  %29 = load ptr, ptr %0, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %30 = load ptr, ptr %memberidx4, align 8
  %31 = call fastcc ptr @get_class_from_type(ptr %29, ptr %30)
  %memberidx5 = getelementptr inbounds %Class, ptr %31, i64 0, i32 6
  %32 = load ptr, ptr %memberidx5, align 8
  %33 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %6)
  %memberidx.i79 = getelementptr inbounds %Map_string_PropId_, ptr %32, i64 0, i32 1
  %34 = load i64, ptr %memberidx.i79, align 4
  %35 = srem i64 %33, %34
  %36 = load ptr, ptr %32, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %36, i64 %35
  %37 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %37, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %ifend
  %memberidx1.i.i81 = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %51, %else.i ], [ %35, %while.entry.i.preheader ]
  %38 = load ptr, ptr %32, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %38, i64 %hash.0.i
  %39 = load ptr, ptr %ptridx3.i, align 8
  %40 = load ptr, ptr %39, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx.i.i80, align 4
  %42 = load i64, ptr %memberidx1.i.i81, align 4
  %.not.i.i82 = icmp eq i64 %41, %42
  br i1 %.not.i.i82, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i83 = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  %43 = load ptr, ptr %memberidx2.i.i83, align 8
  %44 = load ptr, ptr %memberidx3.i.i, align 8
  %45 = call i64 @memcmp(ptr %43, ptr %44, i64 %41)
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %ifend
  %hash.1.i = phi i64 [ %35, %ifend ], [ %hash.0.i, %ifend.i.i ], [ %51, %else.i ]
  %47 = load ptr, ptr %32, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %47, i64 %hash.1.i
  %48 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %48, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %49 = add nsw i64 %hash.0.i, 1
  %50 = load i64, ptr %memberidx.i79, align 4
  %51 = srem i64 %49, %50
  %52 = load ptr, ptr %32, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %53, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %48, i64 0, i32 1
  %54 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %54, %if.entry10.i ], [ null, %while.end.i ]
  %55 = icmp eq ptr %common.ret.op.i, null
  br i1 %55, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %Map_string_PropId____getitem__.exit
  %56 = add i64 %5, -11
  %57 = icmp ult i64 %56, 2
  br i1 %57, label %if.entry9, label %ifend11

ifend8:                                           ; preds = %Map_string_PropId____getitem__.exit
  %58 = load ptr, ptr %0, align 8
  %memberidx.i.i84 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i.i84, align 8
  %memberidx.i.i.i85 = getelementptr inbounds %Program, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i.i.i85, align 8
  %61 = load i64, ptr %59, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %62, i64 %61
  %63 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i86 = getelementptr inbounds %Module, ptr %63, i64 0, i32 4
  %64 = load ptr, ptr %memberidx2.i.i.i86, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %59, i64 0, i32 2
  %65 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %68 = load i64, ptr %common.ret.op.i, align 4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend8
  %memberidx1.i88 = getelementptr inbounds %Class, ptr %67, i64 0, i32 5
  %70 = load ptr, ptr %memberidx1.i88, align 8
  %memberidx2.i89 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %71 = load i64, ptr %memberidx2.i89, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %72, i64 %71
  %73 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %73, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend8
  %memberidx4.i = getelementptr inbounds %Class, ptr %67, i64 0, i32 4
  %74 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %75 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i90 = getelementptr inbounds ptr, ptr %76, i64 %75
  %77 = load ptr, ptr %ptridx.i.i90, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %77, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i87 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx20 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i87, i64 0, i32 1
  %78 = load ptr, ptr %memberidx20, align 8
  %memberidx.i91 = getelementptr inbounds %Array_Type_, ptr %78, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i91, align 8
  %80 = load ptr, ptr %79, align 8
  %81 = icmp eq ptr %3, null
  br i1 %81, label %if.entry21, label %ifend23

if.entry9:                                        ; preds = %if.entry6
  %82 = tail call ptr @malloc(i32 49)
  %83 = load ptr, ptr %memberidx4, align 8
  %memberidx13 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %84 = load ptr, ptr %memberidx13, align 8
  %85 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %83, ptr %84)
  %86 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %86, align 4
  store i64 8, ptr %82, align 4
  %memberidx.i.i92 = getelementptr inbounds %Expression, ptr %82, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i92, align 4
  %memberidx1.i.i93 = getelementptr inbounds %Expression, ptr %82, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i93, align 1
  %memberidx.i94 = getelementptr inbounds %BinaryExpression, ptr %82, i64 0, i32 4
  store ptr %1, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %BinaryExpression, ptr %82, i64 0, i32 5
  store i64 %5, ptr %memberidx1.i95, align 4
  %memberidx2.i96 = getelementptr inbounds %BinaryExpression, ptr %82, i64 0, i32 6
  store ptr %85, ptr %memberidx2.i96, align 8
  %memberidx3.i97 = getelementptr inbounds %Expression, ptr %82, i64 0, i32 3
  store ptr %86, ptr %memberidx3.i97, align 8
  store i1 false, ptr %memberidx1.i.i93, align 1
  br label %common.ret

ifend11:                                          ; preds = %if.entry6
  %87 = call fastcc ptr @dump_bin_op(i64 %5)
  %88 = load ptr, ptr %87, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %88, i64 0, i32 5
  %89 = load ptr, ptr %memberidx14, align 8
  %90 = call ptr %89(ptr nonnull %87)
  %memberidx15 = getelementptr inbounds %Class, ptr %31, i64 0, i32 1
  %91 = load ptr, ptr %memberidx15, align 8
  %92 = load ptr, ptr %91, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i64 0, i32 5
  %93 = load ptr, ptr %memberidx16, align 8
  %94 = call ptr %93(ptr nonnull %91)
  %95 = load ptr, ptr %6, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %95, i64 0, i32 5
  %96 = load ptr, ptr %memberidx17, align 8
  %97 = call ptr %96(ptr nonnull %6)
  %98 = alloca ptr, align 8
  %99 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %98, ptr nonnull @156, ptr %90, ptr %94, ptr %97)
  %100 = load ptr, ptr %98, align 8
  %101 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %101, align 8
  %memberidx.i99 = getelementptr inbounds %string, ptr %101, i64 0, i32 1
  store ptr %100, ptr %memberidx.i99, align 8
  %memberidx1.i100 = getelementptr inbounds %string, ptr %101, i64 0, i32 2
  store i64 %99, ptr %memberidx1.i100, align 4
  %memberidx2.i101 = getelementptr inbounds %string, ptr %101, i64 0, i32 3
  store i64 %99, ptr %memberidx2.i101, align 4
  tail call void @free(ptr %90)
  tail call void @free(ptr %94)
  tail call void @free(ptr %97)
  %102 = load ptr, ptr %2, align 8
  %memberidx.i102 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %103 = load ptr, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %Compiler, ptr %103, i64 0, i32 6
  %104 = load ptr, ptr %memberidx1.i103, align 8
  %105 = call ptr @malloc(i32 24)
  store i64 1, ptr %105, align 4
  %memberidx1.i.i104 = getelementptr inbounds %FloError, ptr %105, i64 0, i32 2
  store ptr %102, ptr %memberidx1.i.i104, align 8
  %memberidx2.i.i105 = getelementptr inbounds %FloError, ptr %105, i64 0, i32 1
  store ptr %101, ptr %memberidx2.i.i105, align 8
  %memberidx.i.i106 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 2
  %106 = load i64, ptr %memberidx.i.i106, align 4
  %memberidx1.i2.i107 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 3
  %107 = load i64, ptr %memberidx1.i2.i107, align 4
  %.not.i.i108 = icmp slt i64 %106, %107
  br i1 %.not.i.i108, label %TypeChecker_error.exit114, label %if.entry.i.i111

if.entry.i.i111:                                  ; preds = %ifend11
  %108 = shl i64 %107, 1
  store i64 %108, ptr %memberidx1.i2.i107, align 4
  %memberidx2.i.i.i110 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 1
  %109 = load ptr, ptr %memberidx2.i.i.i110, align 8
  %110 = shl i64 %107, 4
  %111 = call ptr @realloc(ptr %109, i64 %110)
  store ptr %111, ptr %memberidx2.i.i.i110, align 8
  br label %TypeChecker_error.exit114

TypeChecker_error.exit114:                        ; preds = %ifend11, %if.entry.i.i111
  %112 = load i64, ptr %memberidx.i.i106, align 4
  %113 = add nsw i64 %112, 1
  store i64 %113, ptr %memberidx.i.i106, align 4
  %memberidx4.i.i112 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 1
  %114 = load ptr, ptr %memberidx4.i.i112, align 8
  %ptridx.i.i113 = getelementptr inbounds ptr, ptr %114, i64 %112
  store ptr %105, ptr %ptridx.i.i113, align 8
  br label %common.ret

if.entry21:                                       ; preds = %get_class_prop_type.exit
  %memberidx24 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %115 = load ptr, ptr %memberidx24, align 8
  %116 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %80, ptr %115)
  br label %ifend23

ifend23:                                          ; preds = %get_class_prop_type.exit, %if.entry21
  %right.0 = phi ptr [ %116, %if.entry21 ], [ %3, %get_class_prop_type.exit ]
  %memberidx.i115 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %117 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 6
  %118 = load ptr, ptr %memberidx1.i116, align 8
  %memberidx2.i117 = getelementptr inbounds %Array_FloError_, ptr %118, i64 0, i32 2
  %119 = load i64, ptr %memberidx2.i117, align 4
  %120 = icmp sgt i64 %119, 0
  br i1 %120, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend23
  %memberidx.i118 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 2
  %121 = load i64, ptr %memberidx.i118, align 4
  %122 = icmp eq i64 %121, 5
  %123 = add i64 %5, -11
  %124 = icmp ult i64 %123, 2
  %125 = and i1 %124, %122
  br i1 %125, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend27
  %126 = tail call ptr @malloc(i32 49)
  %127 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %127, align 4
  store i64 8, ptr %126, align 4
  %memberidx.i.i119 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i119, align 4
  %memberidx1.i.i120 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i120, align 1
  %memberidx.i121 = getelementptr inbounds %BinaryExpression, ptr %126, i64 0, i32 4
  store ptr %1, ptr %memberidx.i121, align 8
  %memberidx1.i122 = getelementptr inbounds %BinaryExpression, ptr %126, i64 0, i32 5
  store i64 %5, ptr %memberidx1.i122, align 4
  %memberidx2.i123 = getelementptr inbounds %BinaryExpression, ptr %126, i64 0, i32 6
  store ptr %right.0, ptr %memberidx2.i123, align 8
  %memberidx3.i124 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 3
  store ptr %127, ptr %memberidx3.i124, align 8
  store i1 false, ptr %memberidx1.i.i120, align 1
  br label %common.ret

ifend30:                                          ; preds = %ifend27
  %memberidx31 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 3
  %128 = load ptr, ptr %memberidx31, align 8
  %129 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %80, ptr %128)
  br i1 %129, label %ifend34, label %if.entry32

if.entry32:                                       ; preds = %ifend30
  %130 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %80)
  %131 = load ptr, ptr %130, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %131, i64 0, i32 5
  %132 = load ptr, ptr %memberidx35, align 8
  %133 = call ptr %132(ptr nonnull %130)
  %134 = load ptr, ptr %memberidx31, align 8
  %135 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %134)
  %136 = load ptr, ptr %135, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %136, i64 0, i32 5
  %137 = load ptr, ptr %memberidx37, align 8
  %138 = call ptr %137(ptr nonnull %135)
  %139 = alloca ptr, align 8
  %140 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %139, ptr nonnull @154, ptr %133, ptr %138)
  %141 = load ptr, ptr %139, align 8
  %142 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %142, align 8
  %memberidx.i126 = getelementptr inbounds %string, ptr %142, i64 0, i32 1
  store ptr %141, ptr %memberidx.i126, align 8
  %memberidx1.i127 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  store i64 %140, ptr %memberidx1.i127, align 4
  %memberidx2.i128 = getelementptr inbounds %string, ptr %142, i64 0, i32 3
  store i64 %140, ptr %memberidx2.i128, align 4
  tail call void @free(ptr %133)
  tail call void @free(ptr %138)
  %memberidx38 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %143 = load ptr, ptr %memberidx38, align 8
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i130 = getelementptr inbounds %Compiler, ptr %145, i64 0, i32 6
  %146 = load ptr, ptr %memberidx1.i130, align 8
  %147 = call ptr @malloc(i32 24)
  store i64 5, ptr %147, align 4
  %memberidx1.i.i131 = getelementptr inbounds %FloError, ptr %147, i64 0, i32 2
  store ptr %144, ptr %memberidx1.i.i131, align 8
  %memberidx2.i.i132 = getelementptr inbounds %FloError, ptr %147, i64 0, i32 1
  store ptr %142, ptr %memberidx2.i.i132, align 8
  %memberidx.i.i133 = getelementptr inbounds %Array_FloError_, ptr %146, i64 0, i32 2
  %148 = load i64, ptr %memberidx.i.i133, align 4
  %memberidx1.i2.i134 = getelementptr inbounds %Array_FloError_, ptr %146, i64 0, i32 3
  %149 = load i64, ptr %memberidx1.i2.i134, align 4
  %.not.i.i135 = icmp slt i64 %148, %149
  br i1 %.not.i.i135, label %TypeChecker_error.exit141, label %if.entry.i.i138

if.entry.i.i138:                                  ; preds = %if.entry32
  %150 = shl i64 %149, 1
  store i64 %150, ptr %memberidx1.i2.i134, align 4
  %memberidx2.i.i.i137 = getelementptr inbounds %Array_FloError_, ptr %146, i64 0, i32 1
  %151 = load ptr, ptr %memberidx2.i.i.i137, align 8
  %152 = shl i64 %149, 4
  %153 = call ptr @realloc(ptr %151, i64 %152)
  store ptr %153, ptr %memberidx2.i.i.i137, align 8
  br label %TypeChecker_error.exit141

TypeChecker_error.exit141:                        ; preds = %if.entry32, %if.entry.i.i138
  %154 = load i64, ptr %memberidx.i.i133, align 4
  %155 = add nsw i64 %154, 1
  store i64 %155, ptr %memberidx.i.i133, align 4
  %memberidx4.i.i139 = getelementptr inbounds %Array_FloError_, ptr %146, i64 0, i32 1
  %156 = load ptr, ptr %memberidx4.i.i139, align 8
  %ptridx.i.i140 = getelementptr inbounds ptr, ptr %156, i64 %154
  store ptr %147, ptr %ptridx.i.i140, align 8
  br label %common.ret

ifend34:                                          ; preds = %ifend30
  %157 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %157, align 4
  %memberidx.i.i142 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i142, align 4
  %memberidx1.i.i143 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i143, align 1
  %memberidx.i144 = getelementptr inbounds %MemberExpression, ptr %157, i64 0, i32 4
  store ptr %1, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %MemberExpression, ptr %157, i64 0, i32 5
  store ptr %common.ret.op.i, ptr %memberidx1.i145, align 8
  %memberidx2.i146 = getelementptr inbounds %Expression, ptr %157, i64 0, i32 3
  store ptr %common.ret.op.i87, ptr %memberidx2.i146, align 8
  %158 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %158, align 8
  %memberidx.i147 = getelementptr inbounds %Array_Expression_, ptr %158, i64 0, i32 2
  store i64 0, ptr %memberidx.i147, align 4
  %memberidx1.i148 = getelementptr inbounds %Array_Expression_, ptr %158, i64 0, i32 3
  store i64 8, ptr %memberidx1.i148, align 4
  %memberidx2.i149 = getelementptr inbounds %Array_Expression_, ptr %158, i64 0, i32 1
  %159 = call ptr @malloc(i32 64)
  store ptr %159, ptr %memberidx2.i149, align 8
  store ptr %right.0, ptr %159, align 8
  store i64 1, ptr %memberidx.i147, align 4
  %160 = tail call ptr @malloc(i32 41)
  %memberidx42 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i87, i64 0, i32 2
  %161 = load ptr, ptr %memberidx42, align 8
  store i64 8, ptr %160, align 4
  %memberidx.i.i150 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i150, align 4
  %memberidx1.i.i151 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i151, align 1
  %memberidx.i152 = getelementptr inbounds %CallExpression, ptr %160, i64 0, i32 4
  store ptr %157, ptr %memberidx.i152, align 8
  %memberidx1.i153 = getelementptr inbounds %CallExpression, ptr %160, i64 0, i32 5
  store ptr %158, ptr %memberidx1.i153, align 8
  %memberidx2.i154 = getelementptr inbounds %Expression, ptr %160, i64 0, i32 3
  store ptr %161, ptr %memberidx2.i154, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %UnaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpressionNode, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %5)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %if.entry38, %TypeChecker_error.exit127, %if.entry31, %ifend24, %TypeChecker_error.exit, %if.entry13, %if.entry7
  %common.ret.op = phi ptr [ %17, %if.entry7 ], [ %22, %if.entry13 ], [ null, %TypeChecker_error.exit ], [ %51, %ifend24 ], [ %54, %if.entry31 ], [ null, %TypeChecker_error.exit127 ], [ %86, %if.entry38 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %12 = load i1, ptr %memberidx3, align 1
  switch i64 %4, label %ifend12 [
    i64 6, label %if.entry4
    i64 7, label %if.entry10
  ]

if.entry4:                                        ; preds = %ifend
  %13 = load i64, ptr %11, align 4
  %14 = add i64 %13, -1
  %15 = icmp ult i64 %14, 9
  br i1 %15, label %if.entry7, label %ifend6

ifend6:                                           ; preds = %if.entry4
  %16 = icmp eq i64 %4, 7
  br i1 %16, label %if.entry10, label %ifend12

if.entry7:                                        ; preds = %if.entry4
  %17 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %17, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %17, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %17, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i72 = getelementptr inbounds %UnaryExpression, ptr %17, i64 0, i32 4
  store i64 6, ptr %memberidx.i72, align 4
  %memberidx1.i73 = getelementptr inbounds %UnaryExpression, ptr %17, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i73, align 8
  %memberidx2.i74 = getelementptr inbounds %Expression, ptr %17, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i74, align 8
  store i1 %12, ptr %memberidx1.i.i, align 1
  br label %common.ret

if.entry10:                                       ; preds = %ifend, %ifend6
  %18 = load i64, ptr %11, align 4
  %19 = icmp ult i64 %18, 10
  br i1 %19, label %if.entry13, label %ifend12

ifend12:                                          ; preds = %ifend, %if.entry10, %ifend6
  %20 = add i64 %4, -2
  %21 = icmp ult i64 %20, 4
  br i1 %21, label %if.entry16, label %ifend18

if.entry13:                                       ; preds = %if.entry10
  %22 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %22, align 4
  %memberidx.i.i75 = getelementptr inbounds %Expression, ptr %22, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i75, align 4
  %memberidx1.i.i76 = getelementptr inbounds %Expression, ptr %22, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i76, align 1
  %memberidx.i77 = getelementptr inbounds %UnaryExpression, ptr %22, i64 0, i32 4
  store i64 7, ptr %memberidx.i77, align 4
  %memberidx1.i78 = getelementptr inbounds %UnaryExpression, ptr %22, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i78, align 8
  %memberidx2.i79 = getelementptr inbounds %Expression, ptr %22, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i79, align 8
  store i1 %12, ptr %memberidx1.i.i76, align 1
  br label %common.ret

if.entry16:                                       ; preds = %ifend12
  %23 = load i64, ptr %11, align 4
  %24 = add i64 %23, -1
  %25 = icmp ult i64 %24, 9
  %26 = icmp eq i64 %23, 13
  %27 = or i1 %26, %25
  br i1 %27, label %if.entry19, label %ifend18

ifend18:                                          ; preds = %if.entry16, %ifend12
  switch i64 %4, label %ifend37 [
    i64 8, label %if.entry28
    i64 1, label %if.entry35
  ]

if.entry19:                                       ; preds = %if.entry16
  %memberidx.i81 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 2
  %28 = load i64, ptr %memberidx.i81, align 4
  switch i64 %28, label %if.entry22 [
    i64 7, label %if.entry.i
    i64 12, label %if.entry4.i
    i64 13, label %ifend24
  ]

if.entry.i:                                       ; preds = %if.entry19
  %memberidx1.i82 = getelementptr inbounds %VarAccessExpression, ptr %6, i64 0, i32 4
  br label %check_is_var.exit

if.entry4.i:                                      ; preds = %if.entry19
  %memberidx7.i = getelementptr inbounds %MemberExpression, ptr %6, i64 0, i32 5
  br label %check_is_var.exit

check_is_var.exit:                                ; preds = %if.entry.i, %if.entry4.i
  %common.ret.op.i.in.in.in = phi ptr [ %memberidx1.i82, %if.entry.i ], [ %memberidx7.i, %if.entry4.i ]
  %common.ret.op.i.in.in = load ptr, ptr %common.ret.op.i.in.in.in, align 8
  %common.ret.op.i.in = load i64, ptr %common.ret.op.i.in.in, align 4
  %common.ret.op.i = icmp eq i64 %common.ret.op.i.in, 1
  br i1 %common.ret.op.i, label %ifend24, label %if.entry22

if.entry22:                                       ; preds = %if.entry19, %check_is_var.exit
  %29 = call fastcc ptr @dump_unary_op(i64 %4)
  %30 = load ptr, ptr %29, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i64 0, i32 5
  %31 = load ptr, ptr %memberidx25, align 8
  %32 = call ptr %31(ptr nonnull %29)
  %33 = alloca ptr, align 8
  %34 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %33, ptr nonnull @162, ptr %32)
  %35 = load ptr, ptr %33, align 8
  %36 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %36, align 8
  %memberidx.i83 = getelementptr inbounds %string, ptr %36, i64 0, i32 1
  store ptr %35, ptr %memberidx.i83, align 8
  %memberidx1.i84 = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  store i64 %34, ptr %memberidx1.i84, align 4
  %memberidx2.i85 = getelementptr inbounds %string, ptr %36, i64 0, i32 3
  store i64 %34, ptr %memberidx2.i85, align 4
  tail call void @free(ptr %32)
  %37 = load ptr, ptr %memberidx1, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i87 = getelementptr inbounds %Compiler, ptr %39, i64 0, i32 6
  %40 = load ptr, ptr %memberidx1.i87, align 8
  %41 = call ptr @malloc(i32 24)
  store i64 4, ptr %41, align 4
  %memberidx1.i.i88 = getelementptr inbounds %FloError, ptr %41, i64 0, i32 2
  store ptr %38, ptr %memberidx1.i.i88, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %41, i64 0, i32 1
  store ptr %36, ptr %memberidx2.i.i, align 8
  %memberidx.i.i89 = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 2
  %42 = load i64, ptr %memberidx.i.i89, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 3
  %43 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %42, %43
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry22
  %44 = shl i64 %43, 1
  store i64 %44, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 1
  %45 = load ptr, ptr %memberidx2.i.i.i, align 8
  %46 = shl i64 %43, 4
  %47 = call ptr @realloc(ptr %45, i64 %46)
  store ptr %47, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry22, %if.entry.i.i
  %48 = load i64, ptr %memberidx.i.i89, align 4
  %49 = add nsw i64 %48, 1
  store i64 %49, ptr %memberidx.i.i89, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 1
  %50 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %50, i64 %48
  store ptr %41, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend24:                                          ; preds = %if.entry19, %check_is_var.exit
  %51 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %51, align 4
  %memberidx.i.i90 = getelementptr inbounds %Expression, ptr %51, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i90, align 4
  %memberidx1.i.i91 = getelementptr inbounds %Expression, ptr %51, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i91, align 1
  %memberidx.i92 = getelementptr inbounds %UnaryExpression, ptr %51, i64 0, i32 4
  store i64 %4, ptr %memberidx.i92, align 4
  %memberidx1.i93 = getelementptr inbounds %UnaryExpression, ptr %51, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i93, align 8
  %memberidx2.i94 = getelementptr inbounds %Expression, ptr %51, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i94, align 8
  store i1 false, ptr %memberidx1.i.i91, align 1
  br label %common.ret

if.entry28:                                       ; preds = %ifend18
  %memberidx.i96 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 2
  %52 = load i64, ptr %memberidx.i96, align 4
  switch i64 %52, label %ifend30 [
    i64 7, label %if.entry.i99
    i64 12, label %if.entry4.i102
    i64 13, label %if.entry31
  ]

if.entry.i99:                                     ; preds = %if.entry28
  %memberidx1.i98 = getelementptr inbounds %VarAccessExpression, ptr %6, i64 0, i32 4
  br label %check_is_var.exit104

if.entry4.i102:                                   ; preds = %if.entry28
  %memberidx7.i101 = getelementptr inbounds %MemberExpression, ptr %6, i64 0, i32 5
  br label %check_is_var.exit104

check_is_var.exit104:                             ; preds = %if.entry.i99, %if.entry4.i102
  %common.ret.op.i97.in.in.in = phi ptr [ %memberidx1.i98, %if.entry.i99 ], [ %memberidx7.i101, %if.entry4.i102 ]
  %common.ret.op.i97.in.in = load ptr, ptr %common.ret.op.i97.in.in.in, align 8
  %common.ret.op.i97.in = load i64, ptr %common.ret.op.i97.in.in, align 4
  %common.ret.op.i97 = icmp eq i64 %common.ret.op.i97.in, 1
  br i1 %common.ret.op.i97, label %if.entry31, label %ifend30

ifend30:                                          ; preds = %if.entry28, %check_is_var.exit104
  %53 = icmp eq i64 %4, 1
  br i1 %53, label %if.entry35, label %ifend37

if.entry31:                                       ; preds = %if.entry28, %check_is_var.exit104
  %54 = tail call ptr @malloc(i32 41)
  %55 = tail call ptr @malloc(i32 16)
  %56 = load ptr, ptr %memberidx2, align 8
  store i64 13, ptr %55, align 4
  %memberidx.i105 = getelementptr inbounds %PointerType, ptr %55, i64 0, i32 1
  store ptr %56, ptr %memberidx.i105, align 8
  store i64 8, ptr %54, align 4
  %memberidx.i.i106 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i106, align 4
  %memberidx1.i.i107 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i107, align 1
  %memberidx.i108 = getelementptr inbounds %UnaryExpression, ptr %54, i64 0, i32 4
  store i64 8, ptr %memberidx.i108, align 4
  %memberidx1.i109 = getelementptr inbounds %UnaryExpression, ptr %54, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i109, align 8
  %memberidx2.i110 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 3
  store ptr %55, ptr %memberidx2.i110, align 8
  store i1 false, ptr %memberidx1.i.i107, align 1
  br label %common.ret

if.entry35:                                       ; preds = %ifend18, %ifend30
  %57 = call fastcc i1 @is_object(ptr %11)
  %58 = load i64, ptr %11, align 4
  %59 = icmp eq i64 %58, 13
  %60 = or i1 %57, %59
  br i1 %60, label %if.entry38, label %ifend37

ifend37:                                          ; preds = %ifend18, %if.entry35, %ifend30
  %61 = call fastcc ptr @dump_unary_op(i64 %4)
  %62 = load ptr, ptr %61, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 5
  %63 = load ptr, ptr %memberidx41, align 8
  %64 = call ptr %63(ptr nonnull %61)
  %65 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %11)
  %66 = load ptr, ptr %65, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i64 0, i32 5
  %67 = load ptr, ptr %memberidx42, align 8
  %68 = call ptr %67(ptr nonnull %65)
  %69 = alloca ptr, align 8
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %69, ptr nonnull @163, ptr %64, ptr %68)
  %71 = load ptr, ptr %69, align 8
  %72 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i112 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i112, align 8
  %memberidx1.i113 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 %70, ptr %memberidx1.i113, align 4
  %memberidx2.i114 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 %70, ptr %memberidx2.i114, align 4
  tail call void @free(ptr %64)
  tail call void @free(ptr %68)
  %73 = load ptr, ptr %2, align 8
  %74 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i116 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i116, align 8
  %76 = call ptr @malloc(i32 24)
  store i64 5, ptr %76, align 4
  %memberidx1.i.i117 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 2
  store ptr %73, ptr %memberidx1.i.i117, align 8
  %memberidx2.i.i118 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 1
  store ptr %72, ptr %memberidx2.i.i118, align 8
  %memberidx.i.i119 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i.i119, align 4
  %memberidx1.i2.i120 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 3
  %78 = load i64, ptr %memberidx1.i2.i120, align 4
  %.not.i.i121 = icmp slt i64 %77, %78
  br i1 %.not.i.i121, label %TypeChecker_error.exit127, label %if.entry.i.i124

if.entry.i.i124:                                  ; preds = %ifend37
  %79 = shl i64 %78, 1
  store i64 %79, ptr %memberidx1.i2.i120, align 4
  %memberidx2.i.i.i123 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i.i123, align 8
  %81 = shl i64 %78, 4
  %82 = call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i.i.i123, align 8
  br label %TypeChecker_error.exit127

TypeChecker_error.exit127:                        ; preds = %ifend37, %if.entry.i.i124
  %83 = load i64, ptr %memberidx.i.i119, align 4
  %84 = add nsw i64 %83, 1
  store i64 %84, ptr %memberidx.i.i119, align 4
  %memberidx4.i.i125 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %85 = load ptr, ptr %memberidx4.i.i125, align 8
  %ptridx.i.i126 = getelementptr inbounds ptr, ptr %85, i64 %83
  store ptr %76, ptr %ptridx.i.i126, align 8
  br label %common.ret

if.entry38:                                       ; preds = %if.entry35
  %86 = tail call ptr @malloc(i32 41)
  %87 = tail call ptr @malloc(i32 8)
  store i64 10, ptr %87, align 4
  store i64 8, ptr %86, align 4
  %memberidx.i.i128 = getelementptr inbounds %Expression, ptr %86, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i128, align 4
  %memberidx1.i.i129 = getelementptr inbounds %Expression, ptr %86, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i129, align 1
  %memberidx.i130 = getelementptr inbounds %UnaryExpression, ptr %86, i64 0, i32 4
  store i64 1, ptr %memberidx.i130, align 4
  %memberidx1.i131 = getelementptr inbounds %UnaryExpression, ptr %86, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i131, align 8
  %memberidx2.i132 = getelementptr inbounds %Expression, ptr %86, i64 0, i32 3
  store ptr %87, ptr %memberidx2.i132, align 8
  store i1 false, ptr %memberidx1.i.i129, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_new_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %3)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %5 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %5, i64 0, i32 6
  %6 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i, align 4
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend27, %2, %TypeChecker_error.exit130, %TypeChecker_error.exit109, %TypeChecker_error.exit93, %TypeChecker_error.exit, %ifend10
  %common.ret.op = phi ptr [ %23, %ifend10 ], [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit93 ], [ null, %TypeChecker_error.exit109 ], [ null, %TypeChecker_error.exit130 ], [ null, %2 ], [ null, %ifend27 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memory_type = alloca ptr, align 8
  store ptr %4, ptr %memory_type, align 8
  %9 = load i64, ptr %4, align 4
  %10 = icmp eq i64 %9, 19
  br i1 %10, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %memberidx5 = getelementptr inbounds %GenericType, ptr %4, i64 0, i32 3
  %11 = load ptr, ptr %memberidx5, align 8
  store ptr %11, ptr %memory_type, align 8
  br label %ifend4

ifend4:                                           ; preds = %ifend, %if.entry2
  %args = alloca ptr, align 8
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %12, align 8
  %memberidx.i68 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx.i68, align 4
  %memberidx1.i69 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 3
  store i64 8, ptr %memberidx1.i69, align 4
  %memberidx2.i70 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 1
  %13 = call ptr @malloc(i32 64)
  store ptr %13, ptr %memberidx2.i70, align 8
  store i64 0, ptr %memberidx.i68, align 4
  store ptr %12, ptr %args, align 8
  %14 = load ptr, ptr %memory_type, align 8
  %15 = call fastcc i1 @is_object(ptr %14)
  br i1 %15, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend4
  %16 = load ptr, ptr %0, align 8
  %17 = call fastcc ptr @get_class_from_type(ptr %16, ptr %14)
  %18 = load ptr, ptr %17, align 8
  %memberidx13 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 5
  %19 = load ptr, ptr %memberidx13, align 8
  %20 = call fastcc ptr @TypeChecker_check_constructor_call(ptr nonnull %0, ptr %18, ptr %19, ptr nonnull %args)
  %.not67 = icmp eq ptr %20, null
  br i1 %.not67, label %ifend10, label %if.entry14

else9:                                            ; preds = %ifend4
  %21 = load i64, ptr %14, align 4
  %22 = icmp eq i64 %21, 13
  br i1 %22, label %if.entry19, label %else20

ifend10:                                          ; preds = %if.entry8, %Array_Expression____sl__.exit
  %23 = tail call ptr @malloc(i32 42)
  %24 = load ptr, ptr %memory_type, align 8
  %25 = load ptr, ptr %args, align 8
  %memberidx44 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 4
  %26 = load i1, ptr %memberidx44, align 1
  store i64 8, ptr %23, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %23, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %23, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i71 = getelementptr inbounds %NewExpression, ptr %23, i64 0, i32 6
  store ptr %24, ptr %memberidx.i71, align 8
  %memberidx1.i72 = getelementptr inbounds %NewExpression, ptr %23, i64 0, i32 5
  store i1 %26, ptr %memberidx1.i72, align 1
  %memberidx2.i73 = getelementptr inbounds %NewExpression, ptr %23, i64 0, i32 4
  store ptr %25, ptr %memberidx2.i73, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %23, i64 0, i32 3
  store ptr %4, ptr %memberidx3.i, align 8
  br label %common.ret

if.entry14:                                       ; preds = %if.entry8
  %27 = load ptr, ptr %1, align 8
  %28 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i75 = getelementptr inbounds %Compiler, ptr %28, i64 0, i32 6
  %29 = load ptr, ptr %memberidx1.i75, align 8
  %30 = call ptr @malloc(i32 24)
  store i64 4, ptr %30, align 4
  %memberidx1.i.i76 = getelementptr inbounds %FloError, ptr %30, i64 0, i32 2
  store ptr %27, ptr %memberidx1.i.i76, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %30, i64 0, i32 1
  store ptr %20, ptr %memberidx2.i.i, align 8
  %memberidx.i.i77 = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i.i77, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 3
  %32 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %31, %32
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry14
  %33 = shl i64 %32, 1
  store i64 %33, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 1
  %34 = load ptr, ptr %memberidx2.i.i.i, align 8
  %35 = shl i64 %32, 4
  %36 = call ptr @realloc(ptr %34, i64 %35)
  store ptr %36, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry14, %if.entry.i.i
  %37 = load i64, ptr %memberidx.i.i77, align 4
  %38 = add nsw i64 %37, 1
  store i64 %38, ptr %memberidx.i.i77, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 1
  %39 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %39, i64 %37
  store ptr %30, ptr %ptridx.i.i, align 8
  br label %common.ret

if.entry19:                                       ; preds = %else9
  %memberidx22 = getelementptr inbounds %PointerType, ptr %14, i64 0, i32 1
  %40 = load ptr, ptr %memberidx22, align 8
  store ptr %40, ptr %memory_type, align 8
  %memberidx23 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 5
  %41 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Array_ExpressionNode_, ptr %41, i64 0, i32 2
  %42 = load i64, ptr %memberidx24, align 4
  %.not = icmp eq i64 %42, 1
  br i1 %.not, label %ifend27, label %if.entry25

else20:                                           ; preds = %else9
  %43 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %14)
  %44 = load ptr, ptr %43, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %44, i64 0, i32 5
  %45 = load ptr, ptr %memberidx42, align 8
  %46 = call ptr %45(ptr nonnull %43)
  %47 = alloca ptr, align 8
  %48 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %47, ptr nonnull @171, ptr %46)
  %49 = load ptr, ptr %47, align 8
  %50 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %50, align 8
  %memberidx.i78 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  store ptr %49, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  store i64 %48, ptr %memberidx1.i79, align 4
  %memberidx2.i80 = getelementptr inbounds %string, ptr %50, i64 0, i32 3
  store i64 %48, ptr %memberidx2.i80, align 4
  tail call void @free(ptr %46)
  %51 = load ptr, ptr %1, align 8
  %52 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i82 = getelementptr inbounds %Compiler, ptr %52, i64 0, i32 6
  %53 = load ptr, ptr %memberidx1.i82, align 8
  %54 = call ptr @malloc(i32 24)
  store i64 5, ptr %54, align 4
  %memberidx1.i.i83 = getelementptr inbounds %FloError, ptr %54, i64 0, i32 2
  store ptr %51, ptr %memberidx1.i.i83, align 8
  %memberidx2.i.i84 = getelementptr inbounds %FloError, ptr %54, i64 0, i32 1
  store ptr %50, ptr %memberidx2.i.i84, align 8
  %memberidx.i.i85 = getelementptr inbounds %Array_FloError_, ptr %53, i64 0, i32 2
  %55 = load i64, ptr %memberidx.i.i85, align 4
  %memberidx1.i2.i86 = getelementptr inbounds %Array_FloError_, ptr %53, i64 0, i32 3
  %56 = load i64, ptr %memberidx1.i2.i86, align 4
  %.not.i.i87 = icmp slt i64 %55, %56
  br i1 %.not.i.i87, label %TypeChecker_error.exit93, label %if.entry.i.i90

if.entry.i.i90:                                   ; preds = %else20
  %57 = shl i64 %56, 1
  store i64 %57, ptr %memberidx1.i2.i86, align 4
  %memberidx2.i.i.i89 = getelementptr inbounds %Array_FloError_, ptr %53, i64 0, i32 1
  %58 = load ptr, ptr %memberidx2.i.i.i89, align 8
  %59 = shl i64 %56, 4
  %60 = call ptr @realloc(ptr %58, i64 %59)
  store ptr %60, ptr %memberidx2.i.i.i89, align 8
  br label %TypeChecker_error.exit93

TypeChecker_error.exit93:                         ; preds = %else20, %if.entry.i.i90
  %61 = load i64, ptr %memberidx.i.i85, align 4
  %62 = add nsw i64 %61, 1
  store i64 %62, ptr %memberidx.i.i85, align 4
  %memberidx4.i.i91 = getelementptr inbounds %Array_FloError_, ptr %53, i64 0, i32 1
  %63 = load ptr, ptr %memberidx4.i.i91, align 8
  %ptridx.i.i92 = getelementptr inbounds ptr, ptr %63, i64 %61
  store ptr %54, ptr %ptridx.i.i92, align 8
  br label %common.ret

if.entry25:                                       ; preds = %if.entry19
  %64 = alloca ptr, align 8
  %65 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %64, ptr nonnull @169, i64 %42)
  %66 = load ptr, ptr %64, align 8
  %67 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %67, align 8
  %memberidx.i94 = getelementptr inbounds %string, ptr %67, i64 0, i32 1
  store ptr %66, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  store i64 %65, ptr %memberidx1.i95, align 4
  %memberidx2.i96 = getelementptr inbounds %string, ptr %67, i64 0, i32 3
  store i64 %65, ptr %memberidx2.i96, align 4
  %68 = load ptr, ptr %1, align 8
  %69 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i98 = getelementptr inbounds %Compiler, ptr %69, i64 0, i32 6
  %70 = load ptr, ptr %memberidx1.i98, align 8
  %71 = call ptr @malloc(i32 24)
  store i64 4, ptr %71, align 4
  %memberidx1.i.i99 = getelementptr inbounds %FloError, ptr %71, i64 0, i32 2
  store ptr %68, ptr %memberidx1.i.i99, align 8
  %memberidx2.i.i100 = getelementptr inbounds %FloError, ptr %71, i64 0, i32 1
  store ptr %67, ptr %memberidx2.i.i100, align 8
  %memberidx.i.i101 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 2
  %72 = load i64, ptr %memberidx.i.i101, align 4
  %memberidx1.i2.i102 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 3
  %73 = load i64, ptr %memberidx1.i2.i102, align 4
  %.not.i.i103 = icmp slt i64 %72, %73
  br i1 %.not.i.i103, label %TypeChecker_error.exit109, label %if.entry.i.i106

if.entry.i.i106:                                  ; preds = %if.entry25
  %74 = shl i64 %73, 1
  store i64 %74, ptr %memberidx1.i2.i102, align 4
  %memberidx2.i.i.i105 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 1
  %75 = load ptr, ptr %memberidx2.i.i.i105, align 8
  %76 = shl i64 %73, 4
  %77 = call ptr @realloc(ptr %75, i64 %76)
  store ptr %77, ptr %memberidx2.i.i.i105, align 8
  br label %TypeChecker_error.exit109

TypeChecker_error.exit109:                        ; preds = %if.entry25, %if.entry.i.i106
  %78 = load i64, ptr %memberidx.i.i101, align 4
  %79 = add nsw i64 %78, 1
  store i64 %79, ptr %memberidx.i.i101, align 4
  %memberidx4.i.i107 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 1
  %80 = load ptr, ptr %memberidx4.i.i107, align 8
  %ptridx.i.i108 = getelementptr inbounds ptr, ptr %80, i64 %78
  store ptr %71, ptr %ptridx.i.i108, align 8
  br label %common.ret

ifend27:                                          ; preds = %if.entry19
  %81 = tail call ptr @malloc(i32 8)
  store i64 6, ptr %81, align 4
  %82 = load ptr, ptr %memberidx23, align 8
  %memberidx.i110 = getelementptr inbounds %Array_ExpressionNode_, ptr %82, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i110, align 8
  %84 = load ptr, ptr %83, align 8
  %85 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %81, ptr %84)
  %86 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i112 = getelementptr inbounds %Compiler, ptr %86, i64 0, i32 6
  %87 = load ptr, ptr %memberidx1.i112, align 8
  %memberidx2.i113 = getelementptr inbounds %Array_FloError_, ptr %87, i64 0, i32 2
  %88 = load i64, ptr %memberidx2.i113, align 4
  %89 = icmp sgt i64 %88, 0
  br i1 %89, label %common.ret, label %ifend32

ifend32:                                          ; preds = %ifend27
  %memberidx33 = getelementptr inbounds %Expression, ptr %85, i64 0, i32 3
  %90 = load ptr, ptr %memberidx33, align 8
  %91 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %81, ptr %90)
  br i1 %91, label %ifend36, label %if.entry34

if.entry34:                                       ; preds = %ifend32
  %92 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %81)
  %93 = load ptr, ptr %92, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %93, i64 0, i32 5
  %94 = load ptr, ptr %memberidx37, align 8
  %95 = call ptr %94(ptr nonnull %92)
  %96 = load ptr, ptr %memberidx33, align 8
  %97 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %96)
  %98 = load ptr, ptr %97, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %98, i64 0, i32 5
  %99 = load ptr, ptr %memberidx39, align 8
  %100 = call ptr %99(ptr nonnull %97)
  %101 = alloca ptr, align 8
  %102 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %101, ptr nonnull @170, ptr %95, ptr %100)
  %103 = load ptr, ptr %101, align 8
  %104 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %104, align 8
  %memberidx.i114 = getelementptr inbounds %string, ptr %104, i64 0, i32 1
  store ptr %103, ptr %memberidx.i114, align 8
  %memberidx1.i115 = getelementptr inbounds %string, ptr %104, i64 0, i32 2
  store i64 %102, ptr %memberidx1.i115, align 4
  %memberidx2.i116 = getelementptr inbounds %string, ptr %104, i64 0, i32 3
  store i64 %102, ptr %memberidx2.i116, align 4
  tail call void @free(ptr %95)
  tail call void @free(ptr %100)
  %105 = load ptr, ptr %memberidx23, align 8
  %memberidx.i117 = getelementptr inbounds %Array_ExpressionNode_, ptr %105, i64 0, i32 1
  %106 = load ptr, ptr %memberidx.i117, align 8
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i119 = getelementptr inbounds %Compiler, ptr %109, i64 0, i32 6
  %110 = load ptr, ptr %memberidx1.i119, align 8
  %111 = call ptr @malloc(i32 24)
  store i64 4, ptr %111, align 4
  %memberidx1.i.i120 = getelementptr inbounds %FloError, ptr %111, i64 0, i32 2
  store ptr %108, ptr %memberidx1.i.i120, align 8
  %memberidx2.i.i121 = getelementptr inbounds %FloError, ptr %111, i64 0, i32 1
  store ptr %104, ptr %memberidx2.i.i121, align 8
  %memberidx.i.i122 = getelementptr inbounds %Array_FloError_, ptr %110, i64 0, i32 2
  %112 = load i64, ptr %memberidx.i.i122, align 4
  %memberidx1.i2.i123 = getelementptr inbounds %Array_FloError_, ptr %110, i64 0, i32 3
  %113 = load i64, ptr %memberidx1.i2.i123, align 4
  %.not.i.i124 = icmp slt i64 %112, %113
  br i1 %.not.i.i124, label %TypeChecker_error.exit130, label %if.entry.i.i127

if.entry.i.i127:                                  ; preds = %if.entry34
  %114 = shl i64 %113, 1
  store i64 %114, ptr %memberidx1.i2.i123, align 4
  %memberidx2.i.i.i126 = getelementptr inbounds %Array_FloError_, ptr %110, i64 0, i32 1
  %115 = load ptr, ptr %memberidx2.i.i.i126, align 8
  %116 = shl i64 %113, 4
  %117 = call ptr @realloc(ptr %115, i64 %116)
  store ptr %117, ptr %memberidx2.i.i.i126, align 8
  br label %TypeChecker_error.exit130

TypeChecker_error.exit130:                        ; preds = %if.entry34, %if.entry.i.i127
  %118 = load i64, ptr %memberidx.i.i122, align 4
  %119 = add nsw i64 %118, 1
  store i64 %119, ptr %memberidx.i.i122, align 4
  %memberidx4.i.i128 = getelementptr inbounds %Array_FloError_, ptr %110, i64 0, i32 1
  %120 = load ptr, ptr %memberidx4.i.i128, align 8
  %ptridx.i.i129 = getelementptr inbounds ptr, ptr %120, i64 %118
  store ptr %111, ptr %ptridx.i.i129, align 8
  tail call void @free(ptr %81)
  br label %common.ret

ifend36:                                          ; preds = %ifend32
  %121 = load i64, ptr %memberidx.i68, align 4
  %122 = load i64, ptr %memberidx1.i69, align 4
  %.not.i = icmp slt i64 %121, %122
  br i1 %.not.i, label %Array_Expression____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %ifend36
  %123 = shl i64 %122, 1
  store i64 %123, ptr %memberidx1.i69, align 4
  %124 = load ptr, ptr %memberidx2.i70, align 8
  %125 = shl i64 %122, 4
  %126 = call ptr @realloc(ptr %124, i64 %125)
  store ptr %126, ptr %memberidx2.i70, align 8
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %ifend36, %if.entry.i
  %127 = load i64, ptr %memberidx.i68, align 4
  %128 = add nsw i64 %127, 1
  store i64 %128, ptr %memberidx.i68, align 4
  %129 = load ptr, ptr %memberidx2.i70, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %129, i64 %127
  store ptr %85, ptr %ptridx.i, align 8
  br label %ifend10
}

define internal fastcc ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @malloc(i32 8)
  store i64 20, ptr %5, align 4
  %6 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %5, ptr %4)
  %memberidx.i.i45 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i.i46 = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i.i46, align 8
  %memberidx2.i.i47 = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i47, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %TypeChecker_check_condition.exit, label %ifend.i

ifend.i:                                          ; preds = %3
  %memberidx.i48 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx.i48, align 8
  %12 = load i64, ptr %11, align 4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %TypeChecker_check_condition.exit, label %true_block.i

true_block.i:                                     ; preds = %ifend.i
  %14 = call ptr @malloc(i32 8)
  store i64 0, ptr %14, align 4
  %15 = call ptr @malloc(i32 33)
  store i64 8, ptr %15, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i.i, align 1
  %memberidx.i.i.i49 = getelementptr inbounds %TypeCastExpression, ptr %15, i64 0, i32 4
  store ptr %6, ptr %memberidx.i.i.i49, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  store ptr %14, ptr %memberidx1.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %16 = load i1, ptr %memberidx3.i.i.i, align 1
  store i1 %16, ptr %memberidx1.i.i.i.i, align 1
  br label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i, %3, %true_block.i
  %common.ret.op.i = phi ptr [ null, %3 ], [ %15, %true_block.i ], [ %6, %ifend.i ]
  %17 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend4, %ifend, %TypeChecker_check_condition.exit, %ifend13, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %61, %ifend13 ], [ null, %TypeChecker_check_condition.exit ], [ null, %ifend ], [ null, %ifend4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %TypeChecker_check_condition.exit
  %memberidx1 = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 4
  %21 = load ptr, ptr %memberidx1, align 8
  %22 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %21)
  %23 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i30 = getelementptr inbounds %Compiler, ptr %23, i64 0, i32 6
  %24 = load ptr, ptr %memberidx1.i30, align 8
  %memberidx2.i31 = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i31, align 4
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %memberidx5 = getelementptr inbounds %Expression, ptr %22, i64 0, i32 3
  %27 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 5
  %28 = load ptr, ptr %memberidx6, align 8
  %29 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %27, ptr %28)
  %30 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i33 = getelementptr inbounds %Compiler, ptr %30, i64 0, i32 6
  %31 = load ptr, ptr %memberidx1.i33, align 8
  %memberidx2.i34 = getelementptr inbounds %Array_FloError_, ptr %31, i64 0, i32 2
  %32 = load i64, ptr %memberidx2.i34, align 4
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend4
  %memberidx10 = getelementptr inbounds %Expression, ptr %29, i64 0, i32 3
  %34 = load ptr, ptr %memberidx10, align 8
  %35 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %27, ptr %34)
  br i1 %35, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend9
  %36 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %27)
  %37 = load ptr, ptr %36, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx14, align 8
  %39 = call ptr %38(ptr nonnull %36)
  %40 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %34)
  %41 = load ptr, ptr %40, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i64 0, i32 5
  %42 = load ptr, ptr %memberidx15, align 8
  %43 = call ptr %42(ptr nonnull %40)
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %44, ptr nonnull @184, ptr %39, ptr %43)
  %46 = load ptr, ptr %44, align 8
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i35 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i35, align 8
  %memberidx1.i36 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 %45, ptr %memberidx1.i36, align 4
  %memberidx2.i37 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 %45, ptr %memberidx2.i37, align 4
  tail call void @free(ptr %39)
  tail call void @free(ptr %43)
  %48 = load ptr, ptr %2, align 8
  %49 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i39 = getelementptr inbounds %Compiler, ptr %49, i64 0, i32 6
  %50 = load ptr, ptr %memberidx1.i39, align 8
  %51 = call ptr @malloc(i32 24)
  store i64 5, ptr %51, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %51, i64 0, i32 2
  store ptr %48, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %51, i64 0, i32 1
  store ptr %47, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 2
  %52 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 3
  %53 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %52, %53
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry11
  %54 = shl i64 %53, 1
  store i64 %54, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %55 = load ptr, ptr %memberidx2.i.i.i, align 8
  %56 = shl i64 %53, 4
  %57 = call ptr @realloc(ptr %55, i64 %56)
  store ptr %57, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry11, %if.entry.i.i
  %58 = load i64, ptr %memberidx.i.i, align 4
  %59 = add nsw i64 %58, 1
  store i64 %59, ptr %memberidx.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %60 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %60, i64 %58
  store ptr %51, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend13:                                          ; preds = %ifend9
  %61 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %61, align 4
  %memberidx.i.i40 = getelementptr inbounds %Expression, ptr %61, i64 0, i32 2
  store i64 15, ptr %memberidx.i.i40, align 4
  %memberidx1.i.i41 = getelementptr inbounds %Expression, ptr %61, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i41, align 1
  %memberidx.i42 = getelementptr inbounds %TernaryExpression, ptr %61, i64 0, i32 4
  store ptr %common.ret.op.i, ptr %memberidx.i42, align 8
  %memberidx1.i43 = getelementptr inbounds %TernaryExpression, ptr %61, i64 0, i32 5
  store ptr %22, ptr %memberidx1.i43, align 8
  %memberidx2.i44 = getelementptr inbounds %TernaryExpression, ptr %61, i64 0, i32 6
  store ptr %29, ptr %memberidx2.i44, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %61, i64 0, i32 3
  %62 = load ptr, ptr %memberidx5, align 8
  store ptr %62, ptr %memberidx3.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %1) unnamed_addr {
  %3 = load i64, ptr %1, align 4
  switch i64 %3, label %ifend57 [
    i64 15, label %if.entry
    i64 13, label %if.entry12
    i64 11, label %if.entry18
    i64 12, label %if.entry24
    i64 14, label %if.entry31
    i64 19, label %if.entry38
    i64 17, label %if.entry51
    i64 16, label %if.entry55
  ]

if.entry:                                         ; preds = %2
  %4 = call ptr @malloc(i32 0)
  %5 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %5, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  store ptr %4, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %memberidx = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1130 = getelementptr inbounds %Array_Type_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx1130, align 4
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %if.entry, %ifend7
  %9 = phi ptr [ %48, %ifend7 ], [ %6, %if.entry ]
  %storemerge78131 = phi i64 [ %47, %ifend7 ], [ 0, %if.entry ]
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %9, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %10, i64 %storemerge78131
  %11 = load ptr, ptr %ptridx.i, align 8
  %12 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %11)
  %13 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx1.i = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %14 = load i64, ptr %memberidx1.i, align 4
  %15 = add nsw i64 %14, %13
  %16 = load ptr, ptr %memberidx.i.i, align 8
  %17 = call ptr @realloc(ptr %16, i64 %15)
  store ptr %17, ptr %memberidx.i.i, align 8
  %18 = load i64, ptr %memberidx1.i.i, align 4
  %19 = getelementptr inbounds i8, ptr %17, i64 %18
  %memberidx6.i = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %20 = load ptr, ptr %memberidx6.i, align 8
  %21 = load i64, ptr %memberidx1.i, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %19, ptr align 8 %20, i64 %21, i1 false)
  store i64 %15, ptr %memberidx1.i.i, align 4
  %22 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx4, align 4
  %24 = add i64 %23, -1
  %25 = icmp slt i64 %storemerge78131, %24
  br i1 %25, label %if.entry5, label %ifend7

common.ret:                                       ; preds = %ifend57, %if.entry55, %if.entry51, %for.end46, %if.entry31, %if.entry24, %if.entry18, %if.entry12, %for.end
  %common.ret.op = phi ptr [ %37, %for.end ], [ %59, %if.entry12 ], [ %62, %if.entry18 ], [ %73, %if.entry24 ], [ %83, %if.entry31 ], [ %125, %for.end46 ], [ %127, %if.entry51 ], [ %129, %if.entry55 ], [ %130, %ifend57 ]
  ret ptr %common.ret.op

for.end:                                          ; preds = %ifend7, %if.entry
  %26 = load ptr, ptr %5, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %26, i64 0, i32 5
  %27 = load ptr, ptr %memberidx8, align 8
  %28 = call ptr %27(ptr nonnull %5)
  %memberidx9 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 2
  %29 = load ptr, ptr %memberidx9, align 8
  %30 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %29)
  %31 = load ptr, ptr %30, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 5
  %32 = load ptr, ptr %memberidx10, align 8
  %33 = call ptr %32(ptr nonnull %30)
  %34 = alloca ptr, align 8
  %35 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %34, ptr nonnull @75, ptr %28, ptr %33)
  %36 = load ptr, ptr %34, align 8
  %37 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %37, align 8
  %memberidx.i83 = getelementptr inbounds %string, ptr %37, i64 0, i32 1
  store ptr %36, ptr %memberidx.i83, align 8
  %memberidx1.i84 = getelementptr inbounds %string, ptr %37, i64 0, i32 2
  store i64 %35, ptr %memberidx1.i84, align 4
  %memberidx2.i85 = getelementptr inbounds %string, ptr %37, i64 0, i32 3
  store i64 %35, ptr %memberidx2.i85, align 4
  tail call void @free(ptr %28)
  tail call void @free(ptr %33)
  br label %common.ret

if.entry5:                                        ; preds = %for.body
  %38 = call ptr @malloc(i32 2)
  store i16 8236, ptr %38, align 8
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i86 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i86, align 8
  %memberidx1.i.i87 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i87, align 4
  %memberidx2.i.i88 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i88, align 4
  %40 = load i64, ptr %memberidx1.i.i, align 4
  %41 = add nsw i64 %40, 2
  %42 = load ptr, ptr %memberidx.i.i, align 8
  %43 = call ptr @realloc(ptr %42, i64 %41)
  store ptr %43, ptr %memberidx.i.i, align 8
  %44 = load i64, ptr %memberidx1.i.i, align 4
  %45 = getelementptr inbounds i8, ptr %43, i64 %44
  %46 = load i16, ptr %38, align 8
  store i16 %46, ptr %45, align 2147483648
  store i64 %41, ptr %memberidx1.i.i, align 4
  br label %ifend7

ifend7:                                           ; preds = %for.body, %if.entry5
  %47 = add nuw nsw i64 %storemerge78131, 1
  %48 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %48, i64 0, i32 2
  %49 = load i64, ptr %memberidx1, align 4
  %50 = icmp slt i64 %47, %49
  br i1 %50, label %for.body, label %for.end

if.entry12:                                       ; preds = %2
  %memberidx15 = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %51 = load ptr, ptr %memberidx15, align 8
  %52 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %51)
  %53 = load ptr, ptr %52, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i64 0, i32 5
  %54 = load ptr, ptr %memberidx16, align 8
  %55 = call ptr %54(ptr nonnull %52)
  %56 = alloca ptr, align 8
  %57 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %56, ptr nonnull @76, ptr %55)
  %58 = load ptr, ptr %56, align 8
  %59 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %59, align 8
  %memberidx.i96 = getelementptr inbounds %string, ptr %59, i64 0, i32 1
  store ptr %58, ptr %memberidx.i96, align 8
  %memberidx1.i97 = getelementptr inbounds %string, ptr %59, i64 0, i32 2
  store i64 %57, ptr %memberidx1.i97, align 4
  %memberidx2.i98 = getelementptr inbounds %string, ptr %59, i64 0, i32 3
  store i64 %57, ptr %memberidx2.i98, align 4
  tail call void @free(ptr %55)
  br label %common.ret

if.entry18:                                       ; preds = %2
  %60 = load ptr, ptr %0, align 8
  %61 = call fastcc ptr @get_class_from_type(ptr %60, ptr nonnull %1)
  %memberidx22 = getelementptr inbounds %Class, ptr %61, i64 0, i32 1
  %62 = load ptr, ptr %memberidx22, align 8
  br label %common.ret

if.entry24:                                       ; preds = %2
  %63 = load ptr, ptr %0, align 8
  %memberidx28 = getelementptr inbounds %EnumType, ptr %1, i64 0, i32 1
  %64 = load ptr, ptr %memberidx28, align 8
  %memberidx.i99 = getelementptr inbounds %Program, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i99, align 8
  %66 = load i64, ptr %64, align 4
  %memberidx.i.i100 = getelementptr inbounds %Array_Module_, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i.i100, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %67, i64 %66
  %68 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i101 = getelementptr inbounds %Module, ptr %68, i64 0, i32 7
  %69 = load ptr, ptr %memberidx2.i101, align 8
  %memberidx3.i = getelementptr inbounds %TypeId, ptr %64, i64 0, i32 2
  %70 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Enum_, ptr %69, i64 0, i32 1
  %71 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %71, i64 %70
  %72 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx29 = getelementptr inbounds %Enum, ptr %72, i64 0, i32 1
  %73 = load ptr, ptr %memberidx29, align 8
  br label %common.ret

if.entry31:                                       ; preds = %2
  %memberidx34 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  %74 = load ptr, ptr %memberidx34, align 8
  %75 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %74)
  %76 = load ptr, ptr %75, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %76, i64 0, i32 5
  %77 = load ptr, ptr %memberidx35, align 8
  %78 = call ptr %77(ptr nonnull %75)
  %memberidx36 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 2
  %79 = load i64, ptr %memberidx36, align 4
  %80 = alloca ptr, align 8
  %81 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %80, ptr nonnull @77, ptr %78, i64 %79)
  %82 = load ptr, ptr %80, align 8
  %83 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %83, align 8
  %memberidx.i108 = getelementptr inbounds %string, ptr %83, i64 0, i32 1
  store ptr %82, ptr %memberidx.i108, align 8
  %memberidx1.i109 = getelementptr inbounds %string, ptr %83, i64 0, i32 2
  store i64 %81, ptr %memberidx1.i109, align 4
  %memberidx2.i110 = getelementptr inbounds %string, ptr %83, i64 0, i32 3
  store i64 %81, ptr %memberidx2.i110, align 4
  tail call void @free(ptr %78)
  br label %common.ret

if.entry38:                                       ; preds = %2
  %memberidx41 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 1
  %84 = load ptr, ptr %memberidx41, align 8
  %85 = call ptr @malloc(i32 1)
  store i8 60, ptr %85, align 8
  %86 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %86, align 8
  %memberidx.i.i111 = getelementptr inbounds %string, ptr %86, i64 0, i32 1
  store ptr %85, ptr %memberidx.i.i111, align 8
  %memberidx1.i.i112 = getelementptr inbounds %string, ptr %86, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i112, align 4
  %memberidx2.i.i113 = getelementptr inbounds %string, ptr %86, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i113, align 4
  %memberidx.i114 = getelementptr inbounds %string, ptr %84, i64 0, i32 2
  %87 = load i64, ptr %memberidx.i114, align 4
  %88 = add nsw i64 %87, 1
  %89 = trunc i64 %88 to i32
  %90 = call ptr @malloc(i32 %89)
  %memberidx2.i116 = getelementptr inbounds %string, ptr %84, i64 0, i32 1
  %91 = load ptr, ptr %memberidx2.i116, align 8
  %92 = load i64, ptr %memberidx.i114, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %90, ptr align 8 %91, i64 %92, i1 false)
  %93 = getelementptr inbounds i8, ptr %90, i64 %92
  %94 = load i8, ptr %85, align 8
  store i8 %94, ptr %93, align 8
  %95 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %95, align 8
  %memberidx.i.i118 = getelementptr inbounds %string, ptr %95, i64 0, i32 1
  store ptr %90, ptr %memberidx.i.i118, align 8
  %memberidx1.i.i119 = getelementptr inbounds %string, ptr %95, i64 0, i32 2
  store i64 %88, ptr %memberidx1.i.i119, align 4
  %memberidx2.i.i120 = getelementptr inbounds %string, ptr %95, i64 0, i32 3
  store i64 %88, ptr %memberidx2.i.i120, align 4
  %memberidx47 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 2
  %96 = load ptr, ptr %memberidx47, align 8
  %memberidx48132 = getelementptr inbounds %Array_Type_, ptr %96, i64 0, i32 2
  %97 = load i64, ptr %memberidx48132, align 4
  %98 = icmp sgt i64 %97, 0
  br i1 %98, label %for.body44, label %for.end46

for.body44:                                       ; preds = %if.entry38, %for.body44
  %99 = phi ptr [ %113, %for.body44 ], [ %96, %if.entry38 ]
  %storemerge133 = phi i64 [ %112, %for.body44 ], [ 0, %if.entry38 ]
  %memberidx.i121 = getelementptr inbounds %Array_Type_, ptr %99, i64 0, i32 1
  %100 = load ptr, ptr %memberidx.i121, align 8
  %ptridx.i122 = getelementptr inbounds ptr, ptr %100, i64 %storemerge133
  %101 = load ptr, ptr %ptridx.i122, align 8
  %102 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %101)
  %103 = load i64, ptr %memberidx1.i.i119, align 4
  %memberidx1.i127 = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  %104 = load i64, ptr %memberidx1.i127, align 4
  %105 = add nsw i64 %104, %103
  %106 = load ptr, ptr %memberidx.i.i118, align 8
  %107 = call ptr @realloc(ptr %106, i64 %105)
  store ptr %107, ptr %memberidx.i.i118, align 8
  %108 = load i64, ptr %memberidx1.i.i119, align 4
  %109 = getelementptr inbounds i8, ptr %107, i64 %108
  %memberidx6.i129 = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  %110 = load ptr, ptr %memberidx6.i129, align 8
  %111 = load i64, ptr %memberidx1.i127, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %109, ptr align 8 %110, i64 %111, i1 false)
  store i64 %105, ptr %memberidx1.i.i119, align 4
  %112 = add nuw nsw i64 %storemerge133, 1
  %113 = load ptr, ptr %memberidx47, align 8
  %memberidx48 = getelementptr inbounds %Array_Type_, ptr %113, i64 0, i32 2
  %114 = load i64, ptr %memberidx48, align 4
  %115 = icmp slt i64 %112, %114
  br i1 %115, label %for.body44, label %for.end46

for.end46:                                        ; preds = %for.body44, %if.entry38
  %116 = call ptr @malloc(i32 1)
  store i8 62, ptr %116, align 8
  %117 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %117, align 8
  %memberidx.i.i123 = getelementptr inbounds %string, ptr %117, i64 0, i32 1
  store ptr %116, ptr %memberidx.i.i123, align 8
  %memberidx1.i.i124 = getelementptr inbounds %string, ptr %117, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i124, align 4
  %memberidx2.i.i125 = getelementptr inbounds %string, ptr %117, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i125, align 4
  %118 = load i64, ptr %memberidx1.i.i119, align 4
  %119 = add nsw i64 %118, 1
  %120 = trunc i64 %119 to i32
  %121 = call ptr @malloc(i32 %120)
  %122 = load ptr, ptr %memberidx.i.i118, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %121, ptr align 8 %122, i64 %118, i1 false)
  %123 = getelementptr inbounds i8, ptr %121, i64 %118
  %124 = load i8, ptr %116, align 8
  store i8 %124, ptr %123, align 8
  %125 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %125, align 8
  %memberidx.i.i105 = getelementptr inbounds %string, ptr %125, i64 0, i32 1
  store ptr %121, ptr %memberidx.i.i105, align 8
  %memberidx1.i.i106 = getelementptr inbounds %string, ptr %125, i64 0, i32 2
  store i64 %119, ptr %memberidx1.i.i106, align 4
  %memberidx2.i.i107 = getelementptr inbounds %string, ptr %125, i64 0, i32 3
  store i64 %119, ptr %memberidx2.i.i107, align 4
  br label %common.ret

if.entry51:                                       ; preds = %2
  %126 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %126, ptr noundef nonnull align 8 dereferenceable(9) @78, i64 9, i1 false)
  %127 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %127, align 8
  %memberidx.i.i93 = getelementptr inbounds %string, ptr %127, i64 0, i32 1
  store ptr %126, ptr %memberidx.i.i93, align 8
  %memberidx1.i.i94 = getelementptr inbounds %string, ptr %127, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i94, align 4
  %memberidx2.i.i95 = getelementptr inbounds %string, ptr %127, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i95, align 4
  br label %common.ret

if.entry55:                                       ; preds = %2
  %128 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %128, ptr noundef nonnull align 8 dereferenceable(6) @79, i64 6, i1 false)
  %129 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %129, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %129, i64 0, i32 1
  store ptr %128, ptr %memberidx.i.i80, align 8
  %memberidx1.i.i81 = getelementptr inbounds %string, ptr %129, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i81, align 4
  %memberidx2.i.i82 = getelementptr inbounds %string, ptr %129, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i82, align 4
  br label %common.ret

ifend57:                                          ; preds = %2
  %130 = call fastcc ptr @dump_type(ptr nonnull %1, i1 false)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc i64 @Map_string_Generic__hash_fnc(ptr %1)
  %memberidx.i = getelementptr inbounds %Map_string_Generic_, ptr %4, i64 0, i32 1
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = srem i64 %5, %6
  %8 = load ptr, ptr %4, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %8, i64 %7
  %9 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %9, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %3
  %memberidx1.i.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %23, %else.i ], [ %7, %while.entry.i.preheader ]
  %10 = load ptr, ptr %4, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %10, i64 %hash.0.i
  %11 = load ptr, ptr %ptridx3.i, align 8
  %12 = load ptr, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx.i.i, align 4
  %14 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %13, %14
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %15 = load ptr, ptr %memberidx2.i.i, align 8
  %16 = load ptr, ptr %memberidx3.i.i, align 8
  %17 = call i64 @memcmp(ptr %15, ptr %16, i64 %13)
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %3
  %hash.1.i = phi i64 [ %7, %3 ], [ %hash.0.i, %ifend.i.i ], [ %23, %else.i ]
  %19 = load ptr, ptr %4, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %19, i64 %hash.1.i
  %20 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %20, null
  br i1 %.not29.i, label %Map_string_Generic____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %21 = add nsw i64 %hash.0.i, 1
  %22 = load i64, ptr %memberidx.i, align 4
  %23 = srem i64 %21, %22
  %24 = load ptr, ptr %4, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %25, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_Generic_, ptr %20, i64 0, i32 1
  %26 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_Generic____getitem__.exit

Map_string_Generic____getitem__.exit:             ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %26, %if.entry10.i ], [ null, %while.end.i ]
  %27 = icmp eq ptr %common.ret.op.i, null
  br i1 %27, label %common.ret, label %ifend

common.ret:                                       ; preds = %Map_string_Generic____getitem__.exit, %ifend24, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %121, %ifend24 ], [ null, %Map_string_Generic____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_Generic____getitem__.exit
  %memberidx1 = getelementptr inbounds %Generic, ptr %common.ret.op.i, i64 0, i32 1
  %28 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_GenericParameterNode_, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %2, i64 0, i32 2
  %31 = load i64, ptr %memberidx4, align 4
  %.not = icmp eq i64 %30, %31
  br i1 %.not, label %ifend7, label %if.entry5

if.entry5:                                        ; preds = %ifend
  %32 = alloca ptr, align 8
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %32, ptr nonnull @86, i64 %30, i64 %31)
  %34 = load ptr, ptr %32, align 8
  %35 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i67 = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i67, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i, align 4
  %memberidx.i68 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %36 = load ptr, ptr %memberidx.i68, align 8
  %memberidx1.i69 = getelementptr inbounds %Compiler, ptr %36, i64 0, i32 6
  %37 = load ptr, ptr %memberidx1.i69, align 8
  %38 = call ptr @malloc(i32 24)
  store i64 5, ptr %38, align 4
  %memberidx1.i.i70 = getelementptr inbounds %FloError, ptr %38, i64 0, i32 2
  store ptr null, ptr %memberidx1.i.i70, align 8
  %memberidx2.i.i71 = getelementptr inbounds %FloError, ptr %38, i64 0, i32 1
  store ptr %35, ptr %memberidx2.i.i71, align 8
  %memberidx.i.i72 = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 2
  %39 = load i64, ptr %memberidx.i.i72, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 3
  %40 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i73 = icmp slt i64 %39, %40
  br i1 %.not.i.i73, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry5
  %41 = shl i64 %40, 1
  store i64 %41, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 1
  %42 = load ptr, ptr %memberidx2.i.i.i, align 8
  %43 = shl i64 %40, 4
  %44 = call ptr @realloc(ptr %42, i64 %43)
  store ptr %44, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry5, %if.entry.i.i
  %45 = load i64, ptr %memberidx.i.i72, align 4
  %46 = add nsw i64 %45, 1
  store i64 %46, ptr %memberidx.i.i72, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 1
  %47 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %47, i64 %45
  store ptr %38, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend7:                                           ; preds = %ifend
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %48 = load i64, ptr %memberidx10, align 4
  %memberidx11 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %49 = load ptr, ptr %memberidx11, align 8
  store i64 0, ptr %memberidx10, align 4
  %50 = load ptr, ptr %0, align 8
  %memberidx1.i.i76 = getelementptr inbounds %Program, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx1.i.i76, align 8
  %memberidx.i.i.i77 = getelementptr inbounds %Array_Module_, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i.i77, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx2.i78 = getelementptr inbounds %Module, ptr %53, i64 0, i32 6
  %54 = load ptr, ptr %memberidx2.i78, align 8
  store ptr %54, ptr %memberidx11, align 8
  %55 = call fastcc ptr @TypeChecker_create_scope(ptr nonnull %0)
  %memberidx.i79 = getelementptr inbounds %Scope, ptr %55, i64 0, i32 5
  %56 = load ptr, ptr %memberidx11, align 8
  store ptr %56, ptr %memberidx.i79, align 8
  %57 = call ptr @malloc(i32 0)
  %58 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %58, align 8
  %memberidx.i.i81 = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  store ptr %57, ptr %memberidx.i.i81, align 8
  %memberidx1.i.i82 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i82, i8 0, i64 16, i1 false)
  %59 = load i64, ptr %memberidx3, align 4
  %60 = icmp sgt i64 %59, 0
  br i1 %60, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %ifend7
  %memberidx.i84 = getelementptr inbounds %Array_GenericParameterNode_, ptr %29, i64 0, i32 1
  %memberidx.i86 = getelementptr inbounds %Array_Type_, ptr %2, i64 0, i32 1
  %memberidx18 = getelementptr inbounds %Scope, ptr %55, i64 0, i32 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %storemerge116 = phi i64 [ 0, %for.body.lr.ph ], [ %86, %for.body ]
  %61 = load ptr, ptr %memberidx.i84, align 8
  %ptridx.i85 = getelementptr inbounds ptr, ptr %61, i64 %storemerge116
  %62 = load ptr, ptr %ptridx.i85, align 8
  %63 = load ptr, ptr %62, align 8
  %memberidx14 = getelementptr inbounds %IdentifierToken, ptr %63, i64 0, i32 2
  %64 = load ptr, ptr %memberidx14, align 8
  %65 = load ptr, ptr %memberidx.i86, align 8
  %ptridx.i87 = getelementptr inbounds ptr, ptr %65, i64 %storemerge116
  %66 = load ptr, ptr %ptridx.i87, align 8
  %67 = load i64, ptr %66, align 4
  %68 = icmp eq i64 %67, 19
  %memberidx16 = getelementptr inbounds %GenericType, ptr %66, i64 0, i32 3
  %ternary.in = select i1 %68, ptr %memberidx16, ptr %ptridx.i87
  %ternary = load ptr, ptr %ternary.in, align 8
  %69 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %ternary)
  %70 = load ptr, ptr %69, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i64 0, i32 5
  %71 = load ptr, ptr %memberidx17, align 8
  %72 = call ptr %71(ptr nonnull %69)
  %73 = alloca ptr, align 8
  %74 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %73, ptr nonnull @87, ptr %72)
  %75 = load ptr, ptr %73, align 8
  %76 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %76, align 8
  %memberidx.i95 = getelementptr inbounds %string, ptr %76, i64 0, i32 1
  store ptr %75, ptr %memberidx.i95, align 8
  %memberidx1.i96 = getelementptr inbounds %string, ptr %76, i64 0, i32 2
  store i64 %74, ptr %memberidx1.i96, align 4
  %memberidx2.i97 = getelementptr inbounds %string, ptr %76, i64 0, i32 3
  store i64 %74, ptr %memberidx2.i97, align 4
  tail call void @free(ptr %72)
  %77 = load i64, ptr %memberidx1.i.i82, align 4
  %78 = add nsw i64 %77, %74
  %79 = load ptr, ptr %memberidx.i.i81, align 8
  %80 = call ptr @realloc(ptr %79, i64 %78)
  store ptr %80, ptr %memberidx.i.i81, align 8
  %81 = load i64, ptr %memberidx1.i.i82, align 4
  %82 = getelementptr inbounds i8, ptr %80, i64 %81
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %82, ptr align 8 %75, i64 %74, i1 false)
  store i64 %78, ptr %memberidx1.i.i82, align 4
  %83 = load ptr, ptr %memberidx18, align 8
  %84 = load ptr, ptr %memberidx.i86, align 8
  %ptridx.i102 = getelementptr inbounds ptr, ptr %84, i64 %storemerge116
  %85 = load ptr, ptr %ptridx.i102, align 8
  call fastcc void @Map_string_Type____setitem__(ptr %83, ptr %64, ptr %85)
  %86 = add nuw nsw i64 %storemerge116, 1
  %87 = load i64, ptr %memberidx3, align 4
  %88 = icmp slt i64 %86, %87
  br i1 %88, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %ifend7
  %89 = load ptr, ptr %1, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %89, i64 0, i32 5
  %90 = load ptr, ptr %memberidx19, align 8
  %91 = call ptr %90(ptr nonnull %1)
  %92 = load ptr, ptr %58, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i64 0, i32 5
  %93 = load ptr, ptr %memberidx20, align 8
  %94 = call ptr %93(ptr nonnull %58)
  %95 = alloca ptr, align 8
  %96 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %95, ptr nonnull @88, ptr %91, ptr %94)
  %97 = load ptr, ptr %95, align 8
  %98 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i88 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 %96, ptr %memberidx1.i89, align 4
  %memberidx2.i90 = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 %96, ptr %memberidx2.i90, align 4
  tail call void @free(ptr %91)
  tail call void @free(ptr %94)
  %possible_type = alloca ptr, align 8
  %99 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr nonnull %98)
  store ptr %99, ptr %possible_type, align 8
  %100 = load i64, ptr %99, align 4
  %101 = icmp eq i64 %100, 20
  br i1 %101, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %for.end
  %102 = alloca %IdentifierToken, align 8
  %103 = load ptr, ptr %memberidx1, align 8
  %104 = load ptr, ptr %103, align 8
  %memberidx27 = getelementptr inbounds %Token, ptr %104, i64 0, i32 1
  %105 = load ptr, ptr %memberidx27, align 8
  store i64 54, ptr %102, align 8
  %memberidx1.i.i103 = getelementptr inbounds %Token, ptr %102, i64 0, i32 1
  store ptr %105, ptr %memberidx1.i.i103, align 8
  %memberidx.i104 = getelementptr inbounds %IdentifierToken, ptr %102, i64 0, i32 2
  store ptr %98, ptr %memberidx.i104, align 8
  %106 = alloca %ClassDeclarationNode, align 8
  store ptr %102, ptr %106, align 8
  %memberidx1.i105 = getelementptr inbounds %ClassDeclarationNode, ptr %106, i64 0, i32 3
  %107 = call ptr @malloc(i32 32)
  store ptr @VTableArray_FieldNode_, ptr %107, align 8
  %memberidx.i.i106 = getelementptr inbounds %Array_FieldNode_, ptr %107, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i106, align 4
  %memberidx1.i.i107 = getelementptr inbounds %Array_FieldNode_, ptr %107, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i107, align 4
  %memberidx2.i.i108 = getelementptr inbounds %Array_FieldNode_, ptr %107, i64 0, i32 1
  %108 = call ptr @malloc(i32 64)
  store ptr %108, ptr %memberidx2.i.i108, align 8
  store i64 0, ptr %memberidx.i.i106, align 4
  store ptr %107, ptr %memberidx1.i105, align 8
  %memberidx4.i = getelementptr inbounds %ClassDeclarationNode, ptr %106, i64 0, i32 4
  %109 = call ptr @malloc(i32 32)
  store ptr @VTableArray_MethodNode_, ptr %109, align 8
  %memberidx.i15.i = getelementptr inbounds %Array_MethodNode_, ptr %109, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx1.i16.i = getelementptr inbounds %Array_MethodNode_, ptr %109, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i, align 4
  %memberidx2.i17.i = getelementptr inbounds %Array_MethodNode_, ptr %109, i64 0, i32 1
  %110 = call ptr @malloc(i32 64)
  store ptr %110, ptr %memberidx2.i17.i, align 8
  store i64 0, ptr %memberidx.i15.i, align 4
  store ptr %109, ptr %memberidx4.i, align 8
  %memberidx7.i = getelementptr inbounds %ClassDeclarationNode, ptr %106, i64 0, i32 1
  %111 = call ptr @malloc(i32 32)
  store ptr @VTableArray_GenericParameterNode_, ptr %111, align 8
  %memberidx.i18.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %111, i64 0, i32 2
  store i64 0, ptr %memberidx.i18.i, align 4
  %memberidx1.i19.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %111, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19.i, align 4
  %memberidx2.i20.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %111, i64 0, i32 1
  %112 = call ptr @malloc(i32 64)
  store ptr %112, ptr %memberidx2.i20.i, align 8
  store i64 0, ptr %memberidx.i18.i, align 4
  store ptr %111, ptr %memberidx7.i, align 8
  %memberidx10.i = getelementptr inbounds %ClassDeclarationNode, ptr %106, i64 0, i32 2
  store ptr null, ptr %memberidx10.i, align 8
  %113 = load ptr, ptr %memberidx1, align 8
  %memberidx30 = getelementptr inbounds %ClassDeclarationNode, ptr %113, i64 0, i32 2
  %114 = load ptr, ptr %memberidx30, align 8
  store ptr %114, ptr %memberidx10.i, align 8
  %115 = load ptr, ptr %memberidx1, align 8
  %memberidx33 = getelementptr inbounds %ClassDeclarationNode, ptr %115, i64 0, i32 3
  %116 = load ptr, ptr %memberidx33, align 8
  store ptr %116, ptr %memberidx1.i105, align 8
  %117 = load ptr, ptr %memberidx1, align 8
  %memberidx36 = getelementptr inbounds %ClassDeclarationNode, ptr %117, i64 0, i32 4
  %118 = load ptr, ptr %memberidx36, align 8
  store ptr %118, ptr %memberidx4.i, align 8
  %119 = load ptr, ptr %55, align 8
  store ptr %119, ptr %memberidx11, align 8
  call fastcc void @TypeChecker_declare_class_within_module(ptr nonnull %0, ptr nonnull %106)
  call fastcc void @TypeChecker_check_class_body(ptr nonnull %0, ptr nonnull %106)
  %120 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr nonnull %98)
  store ptr %120, ptr %possible_type, align 8
  br label %ifend24

ifend24:                                          ; preds = %for.end, %if.entry22
  store i64 %48, ptr %memberidx10, align 4
  store ptr %49, ptr %memberidx11, align 8
  call fastcc void @Scope___del__(ptr %55)
  tail call void @free(ptr %55)
  %121 = tail call ptr @malloc(i32 32)
  %122 = load ptr, ptr %possible_type, align 8
  store i64 19, ptr %121, align 4
  %memberidx.i110 = getelementptr inbounds %GenericType, ptr %121, i64 0, i32 1
  store ptr %1, ptr %memberidx.i110, align 8
  %memberidx1.i111 = getelementptr inbounds %GenericType, ptr %121, i64 0, i32 2
  store ptr %2, ptr %memberidx1.i111, align 8
  %memberidx2.i112 = getelementptr inbounds %GenericType, ptr %121, i64 0, i32 3
  store ptr %122, ptr %memberidx2.i112, align 8
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_enum_within_module(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 32)
  %memberidx.i = getelementptr inbounds %Enum, ptr %3, i64 0, i32 2
  %4 = call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumField_, ptr %4, align 8
  %memberidx.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 1
  %5 = call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %4, ptr %memberidx.i, align 8
  %6 = call ptr @malloc(i32 24)
  %7 = call ptr @malloc(i32 2048)
  store ptr %7, ptr %6, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %2, %for.body.i.i
  %i.0.i.i63 = phi i64 [ 0, %2 ], [ %9, %for.body.i.i ]
  %8 = load ptr, ptr %6, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %8, i64 %i.0.i.i63
  store ptr null, ptr %ptridx.i.i, align 8
  %9 = add nuw nsw i64 %i.0.i.i63, 1
  %10 = icmp ult i64 %i.0.i.i63, 255
  br i1 %10, label %for.body.i.i, label %Enum_constructor.exit

Enum_constructor.exit:                            ; preds = %for.body.i.i
  %memberidx3.i = getelementptr inbounds %Enum, ptr %3, i64 0, i32 3
  %memberidx2.i5.i = getelementptr inbounds %Map_string_PropId_, ptr %6, i64 0, i32 1
  store i64 256, ptr %memberidx2.i5.i, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_PropId_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %6, ptr %memberidx3.i, align 8
  %11 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = load ptr, ptr %0, align 8
  %memberidx.i.i33 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i.i33, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %16, i64 %14
  %17 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i = getelementptr inbounds %Module, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i, align 8
  %19 = load i64, ptr %18, align 4
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %16, i64 %19
  %20 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i34 = getelementptr inbounds %Module, ptr %20, i64 0, i32 8
  %21 = load ptr, ptr %memberidx2.i.i34, align 8
  %memberidx3.i.i35 = getelementptr inbounds %ScopeId, ptr %18, i64 0, i32 1
  %22 = load i64, ptr %memberidx3.i.i35, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx2 = getelementptr inbounds %Enum, ptr %3, i64 0, i32 1
  store ptr %12, ptr %memberidx2, align 8
  %25 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %12)
  %26 = load i64, ptr %25, align 4
  %.not = icmp eq i64 %26, 20
  br i1 %.not, label %ifend, label %if.entry

common.ret:                                       ; preds = %Array_Enum____sl__.exit, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %Enum_constructor.exit
  %27 = load ptr, ptr %12, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i64 0, i32 5
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = call ptr %28(ptr nonnull %12)
  %30 = alloca ptr, align 8
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %30, ptr nonnull @85, ptr %29)
  %32 = load ptr, ptr %30, align 8
  %33 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i36 = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i36, align 8
  %memberidx1.i37 = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 %31, ptr %memberidx1.i37, align 4
  %memberidx2.i38 = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 %31, ptr %memberidx2.i38, align 4
  tail call void @free(ptr %29)
  %34 = load ptr, ptr %1, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %34, i64 0, i32 1
  %35 = load ptr, ptr %memberidx6, align 8
  %memberidx.i39 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %36 = load ptr, ptr %memberidx.i39, align 8
  %memberidx1.i40 = getelementptr inbounds %Compiler, ptr %36, i64 0, i32 6
  %37 = load ptr, ptr %memberidx1.i40, align 8
  %38 = call ptr @malloc(i32 24)
  store i64 1, ptr %38, align 4
  %memberidx1.i.i41 = getelementptr inbounds %FloError, ptr %38, i64 0, i32 2
  store ptr %35, ptr %memberidx1.i.i41, align 8
  %memberidx2.i.i42 = getelementptr inbounds %FloError, ptr %38, i64 0, i32 1
  store ptr %33, ptr %memberidx2.i.i42, align 8
  %memberidx.i.i43 = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 2
  %39 = load i64, ptr %memberidx.i.i43, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 3
  %40 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %39, %40
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %41 = shl i64 %40, 1
  store i64 %41, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 1
  %42 = load ptr, ptr %memberidx2.i.i.i, align 8
  %43 = shl i64 %40, 4
  %44 = call ptr @realloc(ptr %42, i64 %43)
  store ptr %44, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %45 = load i64, ptr %memberidx.i.i43, align 4
  %46 = add nsw i64 %45, 1
  store i64 %46, ptr %memberidx.i.i43, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %37, i64 0, i32 1
  %47 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i45 = getelementptr inbounds ptr, ptr %47, i64 %45
  store ptr %38, ptr %ptridx.i.i45, align 8
  br label %common.ret

ifend:                                            ; preds = %Enum_constructor.exit
  %48 = tail call ptr @malloc(i32 24)
  %49 = load i64, ptr %memberidx.i.i33, align 4
  %50 = load ptr, ptr %0, align 8
  %memberidx1.i.i47 = getelementptr inbounds %Program, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx1.i.i47, align 8
  %memberidx.i.i.i48 = getelementptr inbounds %Array_Module_, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i.i48, align 8
  %ptridx.i.i.i49 = getelementptr inbounds ptr, ptr %52, i64 %49
  %53 = load ptr, ptr %ptridx.i.i.i49, align 8
  %memberidx9 = getelementptr inbounds %Module, ptr %53, i64 0, i32 7
  %54 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Array_Enum_, ptr %54, i64 0, i32 2
  %55 = load i64, ptr %memberidx10, align 4
  store i64 %49, ptr %48, align 4
  %memberidx1.i.i50 = getelementptr inbounds %TypeId, ptr %48, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i50, align 4
  %memberidx2.i.i51 = getelementptr inbounds %TypeId, ptr %48, i64 0, i32 2
  store i64 %55, ptr %memberidx2.i.i51, align 4
  store ptr %48, ptr %3, align 8
  %56 = load ptr, ptr %memberidx1.i.i47, align 8
  %memberidx.i.i.i54 = getelementptr inbounds %Array_Module_, ptr %56, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i.i.i54, align 8
  %ptridx.i.i.i55 = getelementptr inbounds ptr, ptr %57, i64 %49
  %58 = load ptr, ptr %ptridx.i.i.i55, align 8
  %memberidx11 = getelementptr inbounds %Module, ptr %58, i64 0, i32 7
  %59 = load ptr, ptr %memberidx11, align 8
  %memberidx.i56 = getelementptr inbounds %Array_Enum_, ptr %59, i64 0, i32 2
  %60 = load i64, ptr %memberidx.i56, align 4
  %memberidx1.i57 = getelementptr inbounds %Array_Enum_, ptr %59, i64 0, i32 3
  %61 = load i64, ptr %memberidx1.i57, align 4
  %.not.i = icmp slt i64 %60, %61
  br i1 %.not.i, label %Array_Enum____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %ifend
  %62 = shl i64 %61, 1
  store i64 %62, ptr %memberidx1.i57, align 4
  %memberidx2.i.i59 = getelementptr inbounds %Array_Enum_, ptr %59, i64 0, i32 1
  %63 = load ptr, ptr %memberidx2.i.i59, align 8
  %64 = shl i64 %61, 4
  %65 = call ptr @realloc(ptr %63, i64 %64)
  store ptr %65, ptr %memberidx2.i.i59, align 8
  br label %Array_Enum____sl__.exit

Array_Enum____sl__.exit:                          ; preds = %ifend, %if.entry.i
  %66 = load i64, ptr %memberidx.i56, align 4
  %67 = add nsw i64 %66, 1
  store i64 %67, ptr %memberidx.i56, align 4
  %memberidx4.i = getelementptr inbounds %Array_Enum_, ptr %59, i64 0, i32 1
  %68 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %68, i64 %66
  store ptr %3, ptr %ptridx.i, align 8
  %memberidx12 = getelementptr inbounds %Scope, ptr %24, i64 0, i32 4
  %69 = load ptr, ptr %memberidx12, align 8
  %70 = load ptr, ptr %memberidx2, align 8
  %71 = load ptr, ptr %3, align 8
  call fastcc void @Map_string_EnumId____setitem__(ptr %69, ptr %70, ptr %71)
  %memberidx15 = getelementptr inbounds %Scope, ptr %24, i64 0, i32 1
  %72 = load ptr, ptr %memberidx15, align 8
  %73 = load ptr, ptr %memberidx2, align 8
  %74 = tail call ptr @malloc(i32 24)
  %75 = load ptr, ptr %3, align 8
  %76 = load i64, ptr %75, align 4
  %memberidx1.i60 = getelementptr inbounds %TypeId, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx1.i60, align 4
  store i64 4, ptr %74, align 4
  %memberidx1.i.i61 = getelementptr inbounds %VarId, ptr %74, i64 0, i32 1
  store i64 %76, ptr %memberidx1.i.i61, align 4
  %memberidx2.i.i62 = getelementptr inbounds %VarId, ptr %74, i64 0, i32 2
  store i64 %77, ptr %memberidx2.i.i62, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %72, ptr %73, ptr nonnull %74)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_within_module(ptr %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %4)
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 20
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = call fastcc i64 @Map_string_Generic__hash_fnc(ptr %4)
  %memberidx.i92 = getelementptr inbounds %Map_string_Generic_, ptr %8, i64 0, i32 1
  %10 = load i64, ptr %memberidx.i92, align 4
  %11 = srem i64 %9, %10
  %12 = load ptr, ptr %8, align 8
  %ptridx.i93 = getelementptr inbounds ptr, ptr %12, i64 %11
  %13 = load ptr, ptr %ptridx.i93, align 8
  %.not.i94 = icmp eq ptr %13, null
  br i1 %.not.i94, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %2
  %memberidx1.i.i96 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i99 = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %27, %else.i ], [ %11, %while.entry.i.preheader ]
  %14 = load ptr, ptr %8, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %14, i64 %hash.0.i
  %15 = load ptr, ptr %ptridx3.i, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx.i.i95 = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx.i.i95, align 4
  %18 = load i64, ptr %memberidx1.i.i96, align 4
  %.not.i.i97 = icmp eq i64 %17, %18
  br i1 %.not.i.i97, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i98 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  %19 = load ptr, ptr %memberidx2.i.i98, align 8
  %20 = load ptr, ptr %memberidx3.i.i99, align 8
  %21 = call i64 @memcmp(ptr %19, ptr %20, i64 %17)
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %2
  %hash.1.i = phi i64 [ %11, %2 ], [ %hash.0.i, %ifend.i.i ], [ %27, %else.i ]
  %23 = load ptr, ptr %8, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %23, i64 %hash.1.i
  %24 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %24, null
  br i1 %.not29.i, label %Map_string_Generic____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %25 = add nsw i64 %hash.0.i, 1
  %26 = load i64, ptr %memberidx.i92, align 4
  %27 = srem i64 %25, %26
  %28 = load ptr, ptr %8, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %28, i64 %27
  %29 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %29, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_Generic_, ptr %24, i64 0, i32 1
  %30 = load ptr, ptr %memberidx15.i, align 8
  %phi.cmp = icmp ne ptr %30, null
  br label %Map_string_Generic____getitem__.exit

Map_string_Generic____getitem__.exit:             ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi i1 [ %phi.cmp, %if.entry10.i ], [ false, %while.end.i ]
  %31 = or i1 %7, %common.ret.op.i
  br i1 %31, label %if.entry, label %ifend

common.ret:                                       ; preds = %if.entry16, %Array_Class____sl__.exit, %if.entry9, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %Map_string_Generic____getitem__.exit
  %32 = load ptr, ptr %4, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i64 0, i32 5
  %33 = load ptr, ptr %memberidx4, align 8
  %34 = call ptr %33(ptr nonnull %4)
  %35 = alloca ptr, align 8
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %35, ptr nonnull @85, ptr %34)
  %37 = load ptr, ptr %35, align 8
  %38 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %38, align 8
  %memberidx.i89 = getelementptr inbounds %string, ptr %38, i64 0, i32 1
  store ptr %37, ptr %memberidx.i89, align 8
  %memberidx1.i90 = getelementptr inbounds %string, ptr %38, i64 0, i32 2
  store i64 %36, ptr %memberidx1.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %string, ptr %38, i64 0, i32 3
  store i64 %36, ptr %memberidx2.i91, align 4
  tail call void @free(ptr %34)
  %39 = load ptr, ptr %1, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %39, i64 0, i32 1
  %40 = load ptr, ptr %memberidx6, align 8
  %memberidx.i82 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %41 = load ptr, ptr %memberidx.i82, align 8
  %memberidx1.i83 = getelementptr inbounds %Compiler, ptr %41, i64 0, i32 6
  %42 = load ptr, ptr %memberidx1.i83, align 8
  %43 = call ptr @malloc(i32 24)
  store i64 1, ptr %43, align 4
  %memberidx1.i.i84 = getelementptr inbounds %FloError, ptr %43, i64 0, i32 2
  store ptr %40, ptr %memberidx1.i.i84, align 8
  %memberidx2.i.i85 = getelementptr inbounds %FloError, ptr %43, i64 0, i32 1
  store ptr %38, ptr %memberidx2.i.i85, align 8
  %memberidx.i.i86 = getelementptr inbounds %Array_FloError_, ptr %42, i64 0, i32 2
  %44 = load i64, ptr %memberidx.i.i86, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %42, i64 0, i32 3
  %45 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %44, %45
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %46 = shl i64 %45, 1
  store i64 %46, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %42, i64 0, i32 1
  %47 = load ptr, ptr %memberidx2.i.i.i, align 8
  %48 = shl i64 %45, 4
  %49 = call ptr @realloc(ptr %47, i64 %48)
  store ptr %49, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %50 = load i64, ptr %memberidx.i.i86, align 4
  %51 = add nsw i64 %50, 1
  store i64 %51, ptr %memberidx.i.i86, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %42, i64 0, i32 1
  %52 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i88 = getelementptr inbounds ptr, ptr %52, i64 %50
  store ptr %43, ptr %ptridx.i.i88, align 8
  br label %common.ret

ifend:                                            ; preds = %Map_string_Generic____getitem__.exit
  %memberidx7 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 1
  %53 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_GenericParameterNode_, ptr %53, i64 0, i32 2
  %54 = load i64, ptr %memberidx8, align 4
  %55 = icmp sgt i64 %54, 0
  br i1 %55, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend
  %memberidx12 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 8
  store i1 true, ptr %memberidx12, align 1
  %56 = load ptr, ptr %memberidx3, align 8
  %57 = tail call ptr @malloc(i32 16)
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %58 = load i64, ptr %memberidx14, align 4
  store i64 %58, ptr %57, align 4
  %memberidx1.i81 = getelementptr inbounds %Generic, ptr %57, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i81, align 8
  call fastcc void @Map_string_Generic____setitem__(ptr %56, ptr %4, ptr nonnull %57)
  br label %common.ret

ifend11:                                          ; preds = %ifend
  %59 = tail call ptr @malloc(i32 81)
  %memberidx.i74 = getelementptr inbounds %Class, ptr %59, i64 0, i32 3
  store ptr null, ptr %memberidx.i74, align 8
  %memberidx2.i76 = getelementptr inbounds %Class, ptr %59, i64 0, i32 8
  %memberidx3.i = getelementptr inbounds %Class, ptr %59, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx2.i76, i8 0, i64 16, i1 false)
  %60 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassField_, ptr %60, align 8
  %memberidx.i.i77 = getelementptr inbounds %Array_ClassField_, ptr %60, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i77, align 4
  %memberidx1.i.i78 = getelementptr inbounds %Array_ClassField_, ptr %60, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i78, align 4
  %memberidx2.i.i79 = getelementptr inbounds %Array_ClassField_, ptr %60, i64 0, i32 1
  %61 = call ptr @malloc(i32 64)
  store ptr %61, ptr %memberidx2.i.i79, align 8
  store i64 0, ptr %memberidx.i.i77, align 4
  store ptr %60, ptr %memberidx3.i, align 8
  %memberidx6.i = getelementptr inbounds %Class, ptr %59, i64 0, i32 5
  %62 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassMethod_, ptr %62, align 8
  %memberidx.i19.i = getelementptr inbounds %Array_ClassMethod_, ptr %62, i64 0, i32 2
  store i64 0, ptr %memberidx.i19.i, align 4
  %memberidx1.i20.i = getelementptr inbounds %Array_ClassMethod_, ptr %62, i64 0, i32 3
  store i64 8, ptr %memberidx1.i20.i, align 4
  %memberidx2.i21.i = getelementptr inbounds %Array_ClassMethod_, ptr %62, i64 0, i32 1
  %63 = call ptr @malloc(i32 64)
  store ptr %63, ptr %memberidx2.i21.i, align 8
  store i64 0, ptr %memberidx.i19.i, align 4
  store ptr %62, ptr %memberidx6.i, align 8
  %64 = call ptr @malloc(i32 24)
  %65 = call ptr @malloc(i32 2048)
  store ptr %65, ptr %64, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %ifend11, %for.body.i.i
  %i.0.i.i103 = phi i64 [ 0, %ifend11 ], [ %67, %for.body.i.i ]
  %66 = load ptr, ptr %64, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %66, i64 %i.0.i.i103
  store ptr null, ptr %ptridx.i.i, align 8
  %67 = add nuw nsw i64 %i.0.i.i103, 1
  %68 = icmp ult i64 %i.0.i.i103, 255
  br i1 %68, label %for.body.i.i, label %Map_string_PropId__constructor.exit.i

Map_string_PropId__constructor.exit.i:            ; preds = %for.body.i.i
  %memberidx9.i = getelementptr inbounds %Class, ptr %59, i64 0, i32 6
  %memberidx2.i22.i = getelementptr inbounds %Map_string_PropId_, ptr %64, i64 0, i32 1
  store i64 256, ptr %memberidx2.i22.i, align 4
  %memberidx3.i.i80 = getelementptr inbounds %Map_string_PropId_, ptr %64, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i80, align 4
  store ptr %64, ptr %memberidx9.i, align 8
  %69 = call ptr @malloc(i32 24)
  %70 = call ptr @malloc(i32 2048)
  store ptr %70, ptr %69, align 8
  br label %for.body.i26.i

for.body.i26.i:                                   ; preds = %Map_string_PropId__constructor.exit.i, %for.body.i26.i
  %i.0.i23.i102 = phi i64 [ 0, %Map_string_PropId__constructor.exit.i ], [ %72, %for.body.i26.i ]
  %71 = load ptr, ptr %69, align 8
  %ptridx.i25.i = getelementptr inbounds ptr, ptr %71, i64 %i.0.i23.i102
  store ptr null, ptr %ptridx.i25.i, align 8
  %72 = add nuw nsw i64 %i.0.i23.i102, 1
  %73 = icmp ult i64 %i.0.i23.i102, 255
  br i1 %73, label %for.body.i26.i, label %Class_constructor.exit

Class_constructor.exit:                           ; preds = %for.body.i26.i
  %memberidx10.i = getelementptr inbounds %Class, ptr %59, i64 0, i32 7
  %memberidx2.i27.i = getelementptr inbounds %Map_string_PropId_, ptr %69, i64 0, i32 1
  store i64 256, ptr %memberidx2.i27.i, align 4
  %memberidx3.i28.i = getelementptr inbounds %Map_string_PropId_, ptr %69, i64 0, i32 2
  store i64 0, ptr %memberidx3.i28.i, align 4
  store ptr %69, ptr %memberidx10.i, align 8
  %memberidx11.i = getelementptr inbounds %Class, ptr %59, i64 0, i32 10
  store i1 false, ptr %memberidx11.i, align 1
  %74 = load ptr, ptr %0, align 8
  %memberidx.i.i69 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %75 = load i64, ptr %memberidx.i.i69, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %77, i64 %75
  %78 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i70 = getelementptr inbounds %Module, ptr %78, i64 0, i32 6
  %79 = load ptr, ptr %memberidx1.i70, align 8
  %80 = load i64, ptr %79, align 4
  %ptridx.i.i.i72 = getelementptr inbounds ptr, ptr %77, i64 %80
  %81 = load ptr, ptr %ptridx.i.i.i72, align 8
  %memberidx2.i.i73 = getelementptr inbounds %Module, ptr %81, i64 0, i32 8
  %82 = load ptr, ptr %memberidx2.i.i73, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %79, i64 0, i32 1
  %83 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx15 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 2
  %86 = load ptr, ptr %memberidx15, align 8
  %.not = icmp eq ptr %86, null
  %memberidx24 = getelementptr inbounds %Class, ptr %59, i64 0, i32 2
  br i1 %.not, label %else17, label %if.entry16

if.entry16:                                       ; preds = %Class_constructor.exit
  %87 = call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %86)
  store ptr %87, ptr %memberidx24, align 8
  %memberidx.i67 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %88 = load ptr, ptr %memberidx.i67, align 8
  %memberidx1.i68 = getelementptr inbounds %Compiler, ptr %88, i64 0, i32 6
  %89 = load ptr, ptr %memberidx1.i68, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 2
  %90 = load i64, ptr %memberidx2.i, align 4
  %91 = icmp sgt i64 %90, 0
  br i1 %91, label %common.ret, label %ifend18

else17:                                           ; preds = %Class_constructor.exit
  store ptr null, ptr %memberidx24, align 8
  br label %ifend18

ifend18:                                          ; preds = %if.entry16, %else17
  %memberidx25 = getelementptr inbounds %Class, ptr %59, i64 0, i32 1
  store ptr %4, ptr %memberidx25, align 8
  %92 = tail call ptr @malloc(i32 24)
  %93 = load i64, ptr %memberidx.i.i69, align 4
  %94 = load ptr, ptr %0, align 8
  %memberidx1.i.i64 = getelementptr inbounds %Program, ptr %94, i64 0, i32 1
  %95 = load ptr, ptr %memberidx1.i.i64, align 8
  %memberidx.i.i.i65 = getelementptr inbounds %Array_Module_, ptr %95, i64 0, i32 1
  %96 = load ptr, ptr %memberidx.i.i.i65, align 8
  %ptridx.i.i.i66 = getelementptr inbounds ptr, ptr %96, i64 %93
  %97 = load ptr, ptr %ptridx.i.i.i66, align 8
  %memberidx28 = getelementptr inbounds %Module, ptr %97, i64 0, i32 4
  %98 = load ptr, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %Array_Class_, ptr %98, i64 0, i32 2
  %99 = load i64, ptr %memberidx29, align 4
  store i64 %93, ptr %92, align 4
  %memberidx1.i.i61 = getelementptr inbounds %TypeId, ptr %92, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i61, align 4
  %memberidx2.i.i62 = getelementptr inbounds %TypeId, ptr %92, i64 0, i32 2
  store i64 %99, ptr %memberidx2.i.i62, align 4
  store ptr %92, ptr %59, align 8
  %100 = load ptr, ptr %memberidx1.i.i64, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %100, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %101, i64 %93
  %102 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx30 = getelementptr inbounds %Module, ptr %102, i64 0, i32 4
  %103 = load ptr, ptr %memberidx30, align 8
  %memberidx.i = getelementptr inbounds %Array_Class_, ptr %103, i64 0, i32 2
  %104 = load i64, ptr %memberidx.i, align 4
  %memberidx1.i57 = getelementptr inbounds %Array_Class_, ptr %103, i64 0, i32 3
  %105 = load i64, ptr %memberidx1.i57, align 4
  %.not.i = icmp slt i64 %104, %105
  br i1 %.not.i, label %Array_Class____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %ifend18
  %106 = shl i64 %105, 1
  store i64 %106, ptr %memberidx1.i57, align 4
  %memberidx2.i.i58 = getelementptr inbounds %Array_Class_, ptr %103, i64 0, i32 1
  %107 = load ptr, ptr %memberidx2.i.i58, align 8
  %108 = shl i64 %105, 4
  %109 = call ptr @realloc(ptr %107, i64 %108)
  store ptr %109, ptr %memberidx2.i.i58, align 8
  br label %Array_Class____sl__.exit

Array_Class____sl__.exit:                         ; preds = %ifend18, %if.entry.i
  %110 = load i64, ptr %memberidx.i, align 4
  %111 = add nsw i64 %110, 1
  store i64 %111, ptr %memberidx.i, align 4
  %memberidx4.i = getelementptr inbounds %Array_Class_, ptr %103, i64 0, i32 1
  %112 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %112, i64 %110
  store ptr %59, ptr %ptridx.i, align 8
  %memberidx31 = getelementptr inbounds %Scope, ptr %85, i64 0, i32 2
  %113 = load ptr, ptr %memberidx31, align 8
  %114 = load ptr, ptr %59, align 8
  call fastcc void @Map_string_ClassId____setitem__(ptr %113, ptr %4, ptr %114)
  %memberidx33 = getelementptr inbounds %Scope, ptr %85, i64 0, i32 1
  %115 = load ptr, ptr %memberidx33, align 8
  %116 = tail call ptr @malloc(i32 24)
  %117 = load ptr, ptr %59, align 8
  %118 = load i64, ptr %117, align 4
  %memberidx1.i = getelementptr inbounds %TypeId, ptr %117, i64 0, i32 2
  %119 = load i64, ptr %memberidx1.i, align 4
  store i64 3, ptr %116, align 4
  %memberidx1.i.i = getelementptr inbounds %VarId, ptr %116, i64 0, i32 1
  store i64 %118, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %116, i64 0, i32 2
  store i64 %119, ptr %memberidx2.i.i, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %115, ptr %4, ptr nonnull %116)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_function_within_module(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 49)
  %memberidx.i = getelementptr inbounds %Function, ptr %3, i64 0, i32 6
  store i1 false, ptr %memberidx.i, align 1
  %memberidx1 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 4
  %4 = load i1, ptr %memberidx1, align 1
  store i1 %4, ptr %memberidx.i, align 1
  %5 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %5, i64 0, i32 2
  %6 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Function, ptr %3, i64 0, i32 1
  store ptr %6, ptr %memberidx4, align 8
  %7 = call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %6)
  %.not.i = icmp eq ptr %7, null
  br i1 %.not.i, label %ifend, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 2
  br i1 %9, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend11, %Array_Function____sl__.exit, %TypeChecker_error.exit95, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %if.entry.i
  %10 = load ptr, ptr %6, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 5
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = call ptr %11(ptr nonnull %6)
  %13 = alloca ptr, align 8
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %13, ptr nonnull @93, ptr %12)
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i71 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i71, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 %14, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 %14, ptr %memberidx2.i, align 4
  tail call void @free(ptr %12)
  %17 = load ptr, ptr %1, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx7, align 8
  %memberidx.i76 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %19 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %19, i64 0, i32 6
  %20 = load ptr, ptr %memberidx1.i77, align 8
  %21 = call ptr @malloc(i32 24)
  store i64 1, ptr %21, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %21, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i78 = getelementptr inbounds %FloError, ptr %21, i64 0, i32 1
  store ptr %16, ptr %memberidx2.i.i78, align 8
  %memberidx.i.i79 = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 2
  %22 = load i64, ptr %memberidx.i.i79, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 3
  %23 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %22, %23
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %24 = shl i64 %23, 1
  store i64 %24, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 1
  %25 = load ptr, ptr %memberidx2.i.i.i, align 8
  %26 = shl i64 %23, 4
  %27 = call ptr @realloc(ptr %25, i64 %26)
  store ptr %27, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %28 = load i64, ptr %memberidx.i.i79, align 4
  %29 = add nsw i64 %28, 1
  store i64 %29, ptr %memberidx.i.i79, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 1
  %30 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %28
  store ptr %21, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2, %if.entry.i
  %31 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %6)
  %32 = load i64, ptr %31, align 4
  %.not = icmp eq i64 %32, 20
  br i1 %.not, label %ifend11, label %if.entry9

if.entry9:                                        ; preds = %ifend
  %33 = load ptr, ptr %6, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %33, i64 0, i32 5
  %34 = load ptr, ptr %memberidx12, align 8
  %35 = call ptr %34(ptr nonnull %6)
  %36 = alloca ptr, align 8
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %36, ptr nonnull @94, ptr %35)
  %38 = load ptr, ptr %36, align 8
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i80 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i80, align 8
  %memberidx1.i81 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 %37, ptr %memberidx1.i81, align 4
  %memberidx2.i82 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 %37, ptr %memberidx2.i82, align 4
  tail call void @free(ptr %35)
  %40 = load ptr, ptr %1, align 8
  %memberidx14 = getelementptr inbounds %Token, ptr %40, i64 0, i32 1
  %41 = load ptr, ptr %memberidx14, align 8
  %memberidx.i83 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %42 = load ptr, ptr %memberidx.i83, align 8
  %memberidx1.i84 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i84, align 8
  %44 = call ptr @malloc(i32 24)
  store i64 1, ptr %44, align 4
  %memberidx1.i.i85 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 2
  store ptr %41, ptr %memberidx1.i.i85, align 8
  %memberidx2.i.i86 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 1
  store ptr %39, ptr %memberidx2.i.i86, align 8
  %memberidx.i.i87 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %45 = load i64, ptr %memberidx.i.i87, align 4
  %memberidx1.i2.i88 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 3
  %46 = load i64, ptr %memberidx1.i2.i88, align 4
  %.not.i.i89 = icmp slt i64 %45, %46
  br i1 %.not.i.i89, label %TypeChecker_error.exit95, label %if.entry.i.i92

if.entry.i.i92:                                   ; preds = %if.entry9
  %47 = shl i64 %46, 1
  store i64 %47, ptr %memberidx1.i2.i88, align 4
  %memberidx2.i.i.i91 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i.i91, align 8
  %49 = shl i64 %46, 4
  %50 = call ptr @realloc(ptr %48, i64 %49)
  store ptr %50, ptr %memberidx2.i.i.i91, align 8
  br label %TypeChecker_error.exit95

TypeChecker_error.exit95:                         ; preds = %if.entry9, %if.entry.i.i92
  %51 = load i64, ptr %memberidx.i.i87, align 4
  %52 = add nsw i64 %51, 1
  store i64 %52, ptr %memberidx.i.i87, align 4
  %memberidx4.i.i93 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %53 = load ptr, ptr %memberidx4.i.i93, align 8
  %ptridx.i.i94 = getelementptr inbounds ptr, ptr %53, i64 %51
  store ptr %44, ptr %ptridx.i.i94, align 8
  br label %common.ret

ifend11:                                          ; preds = %ifend
  %memberidx15 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %54 = call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i96 = getelementptr inbounds %Scope, ptr %54, i64 0, i32 5
  %55 = load ptr, ptr %memberidx15, align 8
  store ptr %55, ptr %memberidx.i96, align 8
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %memberidx15, align 8
  %memberidx18 = getelementptr inbounds %Function, ptr %3, i64 0, i32 2
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionArg_, ptr %57, align 8
  %memberidx.i98 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 2
  store i64 0, ptr %memberidx.i98, align 4
  %memberidx1.i99 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 3
  store i64 8, ptr %memberidx1.i99, align 4
  %memberidx2.i100 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 1
  %58 = call ptr @malloc(i32 64)
  store ptr %58, ptr %memberidx2.i100, align 8
  store i64 0, ptr %memberidx.i98, align 4
  store ptr %57, ptr %memberidx18, align 8
  %memberidx21 = getelementptr inbounds %Function, ptr %3, i64 0, i32 4
  %memberidx22 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 1
  %59 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 3
  %60 = load ptr, ptr %memberidx23, align 8
  %61 = call fastcc ptr @TypeChecker_init_function_signature(ptr %0, ptr %59, ptr %60, ptr nonnull %57)
  store ptr %61, ptr %memberidx21, align 8
  %memberidx.i101 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %62 = load ptr, ptr %memberidx.i101, align 8
  %memberidx1.i102 = getelementptr inbounds %Compiler, ptr %62, i64 0, i32 6
  %63 = load ptr, ptr %memberidx1.i102, align 8
  %memberidx2.i103 = getelementptr inbounds %Array_FloError_, ptr %63, i64 0, i32 2
  %64 = load i64, ptr %memberidx2.i103, align 4
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend11
  %66 = tail call ptr @malloc(i32 24)
  %memberidx29 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %67 = load i64, ptr %memberidx29, align 4
  %68 = load ptr, ptr %0, align 8
  %memberidx1.i.i105 = getelementptr inbounds %Program, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx1.i.i105, align 8
  %memberidx.i.i.i106 = getelementptr inbounds %Array_Module_, ptr %69, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i.i.i106, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %70, i64 %67
  %71 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx30 = getelementptr inbounds %Module, ptr %71, i64 0, i32 5
  %72 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %Array_Function_, ptr %72, i64 0, i32 2
  %73 = load i64, ptr %memberidx31, align 4
  store i64 0, ptr %66, align 4
  %memberidx1.i116 = getelementptr inbounds %VarId, ptr %66, i64 0, i32 1
  store i64 %67, ptr %memberidx1.i116, align 4
  %memberidx2.i117 = getelementptr inbounds %VarId, ptr %66, i64 0, i32 2
  store i64 %73, ptr %memberidx2.i117, align 4
  store ptr %66, ptr %3, align 8
  %74 = load ptr, ptr %memberidx.i96, align 8
  store ptr %74, ptr %memberidx15, align 8
  %memberidx34 = getelementptr inbounds %Function, ptr %3, i64 0, i32 5
  %75 = load ptr, ptr %54, align 8
  store ptr %75, ptr %memberidx34, align 8
  %76 = load ptr, ptr %memberidx1.i.i105, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %77, i64 %67
  %78 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i112 = getelementptr inbounds %Module, ptr %78, i64 0, i32 6
  %79 = load ptr, ptr %memberidx1.i112, align 8
  %80 = load i64, ptr %79, align 4
  %ptridx.i.i.i114 = getelementptr inbounds ptr, ptr %77, i64 %80
  %81 = load ptr, ptr %ptridx.i.i.i114, align 8
  %memberidx2.i.i115 = getelementptr inbounds %Module, ptr %81, i64 0, i32 8
  %82 = load ptr, ptr %memberidx2.i.i115, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %79, i64 0, i32 1
  %83 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx36 = getelementptr inbounds %Module, ptr %78, i64 0, i32 5
  %86 = load ptr, ptr %memberidx36, align 8
  %memberidx.i72 = getelementptr inbounds %Array_Function_, ptr %86, i64 0, i32 2
  %87 = load i64, ptr %memberidx.i72, align 4
  %memberidx1.i73 = getelementptr inbounds %Array_Function_, ptr %86, i64 0, i32 3
  %88 = load i64, ptr %memberidx1.i73, align 4
  %.not.i74 = icmp slt i64 %87, %88
  br i1 %.not.i74, label %Array_Function____sl__.exit, label %if.entry.i75

if.entry.i75:                                     ; preds = %ifend27
  %89 = shl i64 %88, 1
  store i64 %89, ptr %memberidx1.i73, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Function_, ptr %86, i64 0, i32 1
  %90 = load ptr, ptr %memberidx2.i.i, align 8
  %91 = shl i64 %88, 4
  %92 = call ptr @realloc(ptr %90, i64 %91)
  store ptr %92, ptr %memberidx2.i.i, align 8
  br label %Array_Function____sl__.exit

Array_Function____sl__.exit:                      ; preds = %ifend27, %if.entry.i75
  %93 = load i64, ptr %memberidx.i72, align 4
  %94 = add nsw i64 %93, 1
  store i64 %94, ptr %memberidx.i72, align 4
  %memberidx4.i = getelementptr inbounds %Array_Function_, ptr %86, i64 0, i32 1
  %95 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %95, i64 %93
  store ptr %3, ptr %ptridx.i, align 8
  %memberidx37 = getelementptr inbounds %Scope, ptr %85, i64 0, i32 3
  %96 = load ptr, ptr %memberidx37, align 8
  %97 = load ptr, ptr %memberidx4, align 8
  %98 = load ptr, ptr %3, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %96, ptr %97, ptr %98)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = call fastcc ptr @bin_op_to_op_overload_name(i64 %4)
  %6 = load ptr, ptr %0, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call fastcc ptr @get_class_from_type(ptr %6, ptr %7)
  %memberidx3 = getelementptr inbounds %Class, ptr %8, i64 0, i32 6
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %5)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %9, i64 0, i32 1
  %11 = load i64, ptr %memberidx.i, align 4
  %12 = srem i64 %10, %11
  %13 = load ptr, ptr %9, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %14, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %3
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %28, %else.i ], [ %12, %while.entry.i.preheader ]
  %15 = load ptr, ptr %9, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %15, i64 %hash.0.i
  %16 = load ptr, ptr %ptridx3.i, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx.i.i, align 4
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %18, %19
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  %20 = load ptr, ptr %memberidx2.i.i, align 8
  %21 = load ptr, ptr %memberidx3.i.i, align 8
  %22 = call i64 @memcmp(ptr %20, ptr %21, i64 %18)
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %3
  %hash.1.i = phi i64 [ %12, %3 ], [ %hash.0.i, %ifend.i.i ], [ %28, %else.i ]
  %24 = load ptr, ptr %9, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %24, i64 %hash.1.i
  %25 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %25, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %26 = add nsw i64 %hash.0.i, 1
  %27 = load i64, ptr %memberidx.i, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %9, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %30, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %25, i64 0, i32 1
  %31 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %31, %if.entry10.i ], [ null, %while.end.i ]
  %32 = icmp eq ptr %common.ret.op.i, null
  br i1 %32, label %common.ret, label %ifend

common.ret:                                       ; preds = %get_class_prop_type.exit, %Map_string_PropId____getitem__.exit, %ifend13, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %94, %ifend13 ], [ null, %Map_string_PropId____getitem__.exit ], [ null, %get_class_prop_type.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %33 = load ptr, ptr %0, align 8
  %memberidx.i.i34 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i34, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i.i, align 8
  %36 = load i64, ptr %34, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %38, i64 0, i32 4
  %39 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %34, i64 0, i32 2
  %40 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %43 = load i64, ptr %common.ret.op.i, align 4
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i = getelementptr inbounds %Class, ptr %42, i64 0, i32 5
  %45 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %46 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %48, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %42, i64 0, i32 4
  %49 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %50 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %51, i64 %50
  %52 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %52, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i35 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx5 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i35, i64 0, i32 1
  %53 = load ptr, ptr %memberidx5, align 8
  %memberidx.i36 = getelementptr inbounds %Array_Type_, ptr %53, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i36, align 8
  %55 = load ptr, ptr %54, align 8
  %memberidx6 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %56 = load ptr, ptr %memberidx6, align 8
  %57 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %55, ptr %56)
  %memberidx.i37 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %58 = load ptr, ptr %memberidx.i37, align 8
  %memberidx1.i38 = getelementptr inbounds %Compiler, ptr %58, i64 0, i32 6
  %59 = load ptr, ptr %memberidx1.i38, align 8
  %memberidx2.i39 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 2
  %60 = load i64, ptr %memberidx2.i39, align 4
  %61 = icmp sgt i64 %60, 0
  br i1 %61, label %common.ret, label %ifend9

ifend9:                                           ; preds = %get_class_prop_type.exit
  %memberidx10 = getelementptr inbounds %Expression, ptr %57, i64 0, i32 3
  %62 = load ptr, ptr %memberidx10, align 8
  %63 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %55, ptr %62)
  br i1 %63, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend9
  %64 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %55)
  %65 = load ptr, ptr %64, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %65, i64 0, i32 5
  %66 = load ptr, ptr %memberidx14, align 8
  %67 = call ptr %66(ptr nonnull %64)
  %68 = load ptr, ptr %memberidx10, align 8
  %69 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %68)
  %70 = load ptr, ptr %69, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i64 0, i32 5
  %71 = load ptr, ptr %memberidx16, align 8
  %72 = call ptr %71(ptr nonnull %69)
  %73 = alloca ptr, align 8
  %74 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %73, ptr nonnull @154, ptr %67, ptr %72)
  %75 = load ptr, ptr %73, align 8
  %76 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %76, align 8
  %memberidx.i40 = getelementptr inbounds %string, ptr %76, i64 0, i32 1
  store ptr %75, ptr %memberidx.i40, align 8
  %memberidx1.i41 = getelementptr inbounds %string, ptr %76, i64 0, i32 2
  store i64 %74, ptr %memberidx1.i41, align 4
  %memberidx2.i42 = getelementptr inbounds %string, ptr %76, i64 0, i32 3
  store i64 %74, ptr %memberidx2.i42, align 4
  tail call void @free(ptr %67)
  tail call void @free(ptr %72)
  %77 = load ptr, ptr %memberidx6, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %memberidx.i37, align 8
  %memberidx1.i44 = getelementptr inbounds %Compiler, ptr %79, i64 0, i32 6
  %80 = load ptr, ptr %memberidx1.i44, align 8
  %81 = call ptr @malloc(i32 24)
  store i64 5, ptr %81, align 4
  %memberidx1.i.i45 = getelementptr inbounds %FloError, ptr %81, i64 0, i32 2
  store ptr %78, ptr %memberidx1.i.i45, align 8
  %memberidx2.i.i46 = getelementptr inbounds %FloError, ptr %81, i64 0, i32 1
  store ptr %76, ptr %memberidx2.i.i46, align 8
  %memberidx.i.i47 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 2
  %82 = load i64, ptr %memberidx.i.i47, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 3
  %83 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i48 = icmp slt i64 %82, %83
  br i1 %.not.i.i48, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry11
  %84 = shl i64 %83, 1
  store i64 %84, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i50 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 1
  %85 = load ptr, ptr %memberidx2.i.i.i50, align 8
  %86 = shl i64 %83, 4
  %87 = call ptr @realloc(ptr %85, i64 %86)
  store ptr %87, ptr %memberidx2.i.i.i50, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry11, %if.entry.i.i
  %88 = load i64, ptr %memberidx.i.i47, align 4
  %89 = add nsw i64 %88, 1
  store i64 %89, ptr %memberidx.i.i47, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 1
  %90 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i51 = getelementptr inbounds ptr, ptr %90, i64 %88
  store ptr %81, ptr %ptridx.i.i51, align 8
  br label %common.ret

ifend13:                                          ; preds = %ifend9
  %91 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %91, align 4
  %memberidx.i.i52 = getelementptr inbounds %Expression, ptr %91, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i52, align 4
  %memberidx1.i.i53 = getelementptr inbounds %Expression, ptr %91, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i53, align 1
  %memberidx.i54 = getelementptr inbounds %MemberExpression, ptr %91, i64 0, i32 4
  store ptr %1, ptr %memberidx.i54, align 8
  %memberidx1.i55 = getelementptr inbounds %MemberExpression, ptr %91, i64 0, i32 5
  store ptr %common.ret.op.i, ptr %memberidx1.i55, align 8
  %memberidx2.i56 = getelementptr inbounds %Expression, ptr %91, i64 0, i32 3
  store ptr %common.ret.op.i35, ptr %memberidx2.i56, align 8
  %92 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %92, align 8
  %memberidx.i57 = getelementptr inbounds %Array_Expression_, ptr %92, i64 0, i32 2
  store i64 0, ptr %memberidx.i57, align 4
  %memberidx1.i58 = getelementptr inbounds %Array_Expression_, ptr %92, i64 0, i32 3
  store i64 8, ptr %memberidx1.i58, align 4
  %memberidx2.i59 = getelementptr inbounds %Array_Expression_, ptr %92, i64 0, i32 1
  %93 = call ptr @malloc(i32 64)
  store ptr %93, ptr %memberidx2.i59, align 8
  store ptr %57, ptr %93, align 8
  store i64 1, ptr %memberidx.i57, align 4
  %94 = tail call ptr @malloc(i32 41)
  %memberidx21 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i35, i64 0, i32 2
  %95 = load ptr, ptr %memberidx21, align 8
  store i64 8, ptr %94, align 4
  %memberidx.i.i60 = getelementptr inbounds %Expression, ptr %94, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i60, align 4
  %memberidx1.i.i61 = getelementptr inbounds %Expression, ptr %94, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i61, align 1
  %memberidx.i62 = getelementptr inbounds %CallExpression, ptr %94, i64 0, i32 4
  store ptr %91, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %CallExpression, ptr %94, i64 0, i32 5
  store ptr %92, ptr %memberidx1.i63, align 8
  %memberidx2.i64 = getelementptr inbounds %Expression, ptr %94, i64 0, i32 3
  store ptr %95, ptr %memberidx2.i64, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call fastcc ptr @get_class_from_type(ptr %4, ptr %5)
  %memberidx2 = getelementptr inbounds %Class, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %8, ptr noundef nonnull align 8 dereferenceable(11) @105, i64 11, i1 false)
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i, align 4
  %10 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %9)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %7, i64 0, i32 1
  %11 = load i64, ptr %memberidx.i, align 4
  %12 = srem i64 %10, %11
  %13 = load ptr, ptr %7, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %14, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %3, %else.i
  %hash.0.i = phi i64 [ %28, %else.i ], [ %12, %3 ]
  %15 = load ptr, ptr %7, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %15, i64 %hash.0.i
  %16 = load ptr, ptr %ptridx3.i, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i38 = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx.i.i38, align 4
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %18, %19
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i40 = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  %20 = load ptr, ptr %memberidx2.i.i40, align 8
  %21 = load ptr, ptr %memberidx.i.i, align 8
  %22 = call i64 @memcmp(ptr %20, ptr %21, i64 %18)
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %3
  %hash.1.i = phi i64 [ %12, %3 ], [ %hash.0.i, %ifend.i.i ], [ %28, %else.i ]
  %24 = load ptr, ptr %7, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %24, i64 %hash.1.i
  %25 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %25, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %26 = add nsw i64 %hash.0.i, 1
  %27 = load i64, ptr %memberidx.i, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %7, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %30, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %25, i64 0, i32 1
  %31 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %31, %if.entry10.i ], [ null, %while.end.i ]
  %32 = icmp eq ptr %common.ret.op.i, null
  br i1 %32, label %if.entry, label %ifend

common.ret:                                       ; preds = %get_class_prop_type.exit, %ifend15, %TypeChecker_error.exit74, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit74 ], [ %113, %ifend15 ], [ null, %get_class_prop_type.exit ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %Map_string_PropId____getitem__.exit
  %memberidx3 = getelementptr inbounds %Class, ptr %6, i64 0, i32 1
  %33 = load ptr, ptr %memberidx3, align 8
  %34 = load ptr, ptr %33, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 5
  %35 = load ptr, ptr %memberidx4, align 8
  %36 = call ptr %35(ptr nonnull %33)
  %37 = alloca ptr, align 8
  %38 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %37, ptr nonnull @185, ptr %36)
  %39 = load ptr, ptr %37, align 8
  %40 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %40, align 8
  %memberidx.i41 = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  store ptr %39, ptr %memberidx.i41, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  store i64 %38, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %40, i64 0, i32 3
  store i64 %38, ptr %memberidx2.i, align 4
  tail call void @free(ptr %36)
  %41 = load ptr, ptr %2, align 8
  %memberidx.i42 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %42 = load ptr, ptr %memberidx.i42, align 8
  %memberidx1.i43 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i43, align 8
  %44 = call ptr @malloc(i32 24)
  store i64 4, ptr %44, align 4
  %memberidx1.i.i44 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 2
  store ptr %41, ptr %memberidx1.i.i44, align 8
  %memberidx2.i.i45 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 1
  store ptr %40, ptr %memberidx2.i.i45, align 8
  %memberidx.i.i46 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %45 = load i64, ptr %memberidx.i.i46, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 3
  %46 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i47 = icmp slt i64 %45, %46
  br i1 %.not.i.i47, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %47 = shl i64 %46, 1
  store i64 %47, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i.i, align 8
  %49 = shl i64 %46, 4
  %50 = call ptr @realloc(ptr %48, i64 %49)
  store ptr %50, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %51 = load i64, ptr %memberidx.i.i46, align 4
  %52 = add nsw i64 %51, 1
  store i64 %52, ptr %memberidx.i.i46, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %53 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %53, i64 %51
  store ptr %44, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %54 = load ptr, ptr %0, align 8
  %memberidx.i.i48 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i.i48, align 8
  %memberidx.i.i.i49 = getelementptr inbounds %Program, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i.i49, align 8
  %57 = load i64, ptr %55, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %56, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %58, i64 %57
  %59 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i50 = getelementptr inbounds %Module, ptr %59, i64 0, i32 4
  %60 = load ptr, ptr %memberidx2.i.i.i50, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %55, i64 0, i32 2
  %61 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %62, i64 %61
  %63 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %64 = load i64, ptr %common.ret.op.i, align 4
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i52 = getelementptr inbounds %Class, ptr %63, i64 0, i32 5
  %66 = load ptr, ptr %memberidx1.i52, align 8
  %memberidx2.i53 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %67 = load i64, ptr %memberidx2.i53, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %66, i64 0, i32 1
  %68 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %68, i64 %67
  %69 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %69, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %63, i64 0, i32 4
  %70 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %71 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i54 = getelementptr inbounds ptr, ptr %72, i64 %71
  %73 = load ptr, ptr %ptridx.i.i54, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %73, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i51 = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx7 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i51, i64 0, i32 1
  %74 = load ptr, ptr %memberidx7, align 8
  %memberidx.i55 = getelementptr inbounds %Array_Type_, ptr %74, i64 0, i32 1
  %75 = load ptr, ptr %memberidx.i55, align 8
  %76 = load ptr, ptr %75, align 8
  %memberidx8 = getelementptr inbounds %ExpressionIndexNode, ptr %2, i64 0, i32 4
  %77 = load ptr, ptr %memberidx8, align 8
  %78 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %76, ptr %77)
  %memberidx.i56 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %79 = load ptr, ptr %memberidx.i56, align 8
  %memberidx1.i57 = getelementptr inbounds %Compiler, ptr %79, i64 0, i32 6
  %80 = load ptr, ptr %memberidx1.i57, align 8
  %memberidx2.i58 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx2.i58, align 4
  %82 = icmp sgt i64 %81, 0
  br i1 %82, label %common.ret, label %ifend11

ifend11:                                          ; preds = %get_class_prop_type.exit
  %memberidx12 = getelementptr inbounds %Expression, ptr %78, i64 0, i32 3
  %83 = load ptr, ptr %memberidx12, align 8
  %84 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %76, ptr %83)
  br i1 %84, label %ifend15, label %if.entry13

if.entry13:                                       ; preds = %ifend11
  %85 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %76)
  %86 = load ptr, ptr %85, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %86, i64 0, i32 5
  %87 = load ptr, ptr %memberidx16, align 8
  %88 = call ptr %87(ptr nonnull %85)
  %89 = load ptr, ptr %memberidx12, align 8
  %90 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %89)
  %91 = load ptr, ptr %90, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %91, i64 0, i32 5
  %92 = load ptr, ptr %memberidx18, align 8
  %93 = call ptr %92(ptr nonnull %90)
  %94 = alloca ptr, align 8
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %94, ptr nonnull @154, ptr %88, ptr %93)
  %96 = load ptr, ptr %94, align 8
  %97 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i59 = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i59, align 8
  %memberidx1.i60 = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 %95, ptr %memberidx1.i60, align 4
  %memberidx2.i61 = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 %95, ptr %memberidx2.i61, align 4
  tail call void @free(ptr %88)
  tail call void @free(ptr %93)
  %98 = load ptr, ptr %memberidx8, align 8
  %99 = load ptr, ptr %98, align 8
  %100 = load ptr, ptr %memberidx.i56, align 8
  %memberidx1.i63 = getelementptr inbounds %Compiler, ptr %100, i64 0, i32 6
  %101 = load ptr, ptr %memberidx1.i63, align 8
  %102 = call ptr @malloc(i32 24)
  store i64 5, ptr %102, align 4
  %memberidx1.i.i64 = getelementptr inbounds %FloError, ptr %102, i64 0, i32 2
  store ptr %99, ptr %memberidx1.i.i64, align 8
  %memberidx2.i.i65 = getelementptr inbounds %FloError, ptr %102, i64 0, i32 1
  store ptr %97, ptr %memberidx2.i.i65, align 8
  %memberidx.i.i66 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 2
  %103 = load i64, ptr %memberidx.i.i66, align 4
  %memberidx1.i2.i67 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 3
  %104 = load i64, ptr %memberidx1.i2.i67, align 4
  %.not.i.i68 = icmp slt i64 %103, %104
  br i1 %.not.i.i68, label %TypeChecker_error.exit74, label %if.entry.i.i71

if.entry.i.i71:                                   ; preds = %if.entry13
  %105 = shl i64 %104, 1
  store i64 %105, ptr %memberidx1.i2.i67, align 4
  %memberidx2.i.i.i70 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 1
  %106 = load ptr, ptr %memberidx2.i.i.i70, align 8
  %107 = shl i64 %104, 4
  %108 = call ptr @realloc(ptr %106, i64 %107)
  store ptr %108, ptr %memberidx2.i.i.i70, align 8
  br label %TypeChecker_error.exit74

TypeChecker_error.exit74:                         ; preds = %if.entry13, %if.entry.i.i71
  %109 = load i64, ptr %memberidx.i.i66, align 4
  %110 = add nsw i64 %109, 1
  store i64 %110, ptr %memberidx.i.i66, align 4
  %memberidx4.i.i72 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 1
  %111 = load ptr, ptr %memberidx4.i.i72, align 8
  %ptridx.i.i73 = getelementptr inbounds ptr, ptr %111, i64 %109
  store ptr %102, ptr %ptridx.i.i73, align 8
  br label %common.ret

ifend15:                                          ; preds = %ifend11
  %112 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %112, align 4
  %memberidx.i.i75 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i75, align 4
  %memberidx1.i.i76 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i76, align 1
  %memberidx.i77 = getelementptr inbounds %MemberExpression, ptr %112, i64 0, i32 4
  store ptr %1, ptr %memberidx.i77, align 8
  %memberidx1.i78 = getelementptr inbounds %MemberExpression, ptr %112, i64 0, i32 5
  store ptr %common.ret.op.i, ptr %memberidx1.i78, align 8
  %memberidx2.i79 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 3
  store ptr %common.ret.op.i51, ptr %memberidx2.i79, align 8
  %113 = tail call ptr @malloc(i32 41)
  %114 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %114, align 8
  %memberidx.i80 = getelementptr inbounds %Array_Expression_, ptr %114, i64 0, i32 2
  store i64 0, ptr %memberidx.i80, align 4
  %memberidx1.i81 = getelementptr inbounds %Array_Expression_, ptr %114, i64 0, i32 3
  store i64 8, ptr %memberidx1.i81, align 4
  %memberidx2.i82 = getelementptr inbounds %Array_Expression_, ptr %114, i64 0, i32 1
  %115 = call ptr @malloc(i32 64)
  store ptr %115, ptr %memberidx2.i82, align 8
  store ptr %78, ptr %115, align 8
  store i64 1, ptr %memberidx.i80, align 4
  %memberidx23 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i51, i64 0, i32 2
  %116 = load ptr, ptr %memberidx23, align 8
  store i64 8, ptr %113, align 4
  %memberidx.i.i83 = getelementptr inbounds %Expression, ptr %113, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i83, align 4
  %memberidx1.i.i84 = getelementptr inbounds %Expression, ptr %113, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i84, align 1
  %memberidx.i85 = getelementptr inbounds %CallExpression, ptr %113, i64 0, i32 4
  store ptr %112, ptr %memberidx.i85, align 8
  %memberidx1.i86 = getelementptr inbounds %CallExpression, ptr %113, i64 0, i32 5
  store ptr %114, ptr %memberidx1.i86, align 8
  %memberidx2.i87 = getelementptr inbounds %Expression, ptr %113, i64 0, i32 3
  store ptr %116, ptr %memberidx2.i87, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_index_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = call ptr @malloc(i32 8)
  store i64 20, ptr %3, align 4
  %memberidx = getelementptr inbounds %ExpressionIndexNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend4, %2, %TypeChecker_error.exit70, %ifend19, %TypeChecker_error.exit, %if.entry2
  %common.ret.op = phi ptr [ %12, %if.entry2 ], [ null, %TypeChecker_error.exit ], [ %43, %ifend19 ], [ null, %TypeChecker_error.exit70 ], [ null, %2 ], [ null, %ifend4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call fastcc i1 @is_object(ptr %10)
  br i1 %11, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %12 = call fastcc ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %5, ptr %1)
  br label %common.ret

ifend4:                                           ; preds = %ifend
  %13 = tail call ptr @malloc(i32 8)
  store i64 6, ptr %13, align 4
  %memberidx5 = getelementptr inbounds %ExpressionIndexNode, ptr %1, i64 0, i32 4
  %14 = load ptr, ptr %memberidx5, align 8
  %15 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %13, ptr %14)
  %16 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i43 = getelementptr inbounds %Compiler, ptr %16, i64 0, i32 6
  %17 = load ptr, ptr %memberidx1.i43, align 8
  %memberidx2.i44 = getelementptr inbounds %Array_FloError_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i44, align 4
  %19 = icmp sgt i64 %18, 0
  br i1 %19, label %common.ret, label %ifend8

ifend8:                                           ; preds = %ifend4
  %memberidx9 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load i64, ptr %20, align 4
  %22 = add i64 %21, -1
  %23 = icmp ult i64 %22, 7
  br i1 %23, label %ifend12, label %if.entry10

if.entry10:                                       ; preds = %ifend8
  %24 = call ptr @malloc(i32 34)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(34) %24, ptr noundef nonnull align 8 dereferenceable(34) @186, i64 34, i1 false)
  %25 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %25, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %25, i64 0, i32 1
  store ptr %24, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %25, i64 0, i32 2
  store i64 34, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %25, i64 0, i32 3
  store i64 34, ptr %memberidx2.i.i, align 4
  %26 = load ptr, ptr %memberidx5, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i46 = getelementptr inbounds %Compiler, ptr %28, i64 0, i32 6
  %29 = load ptr, ptr %memberidx1.i46, align 8
  %30 = call ptr @malloc(i32 24)
  store i64 5, ptr %30, align 4
  %memberidx1.i.i47 = getelementptr inbounds %FloError, ptr %30, i64 0, i32 2
  store ptr %27, ptr %memberidx1.i.i47, align 8
  %memberidx2.i.i48 = getelementptr inbounds %FloError, ptr %30, i64 0, i32 1
  store ptr %25, ptr %memberidx2.i.i48, align 8
  %memberidx.i.i49 = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i.i49, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 3
  %32 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %31, %32
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry10
  %33 = shl i64 %32, 1
  store i64 %33, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 1
  %34 = load ptr, ptr %memberidx2.i.i.i, align 8
  %35 = shl i64 %32, 4
  %36 = call ptr @realloc(ptr %34, i64 %35)
  store ptr %36, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry10, %if.entry.i.i
  %37 = load i64, ptr %memberidx.i.i49, align 4
  %38 = add nsw i64 %37, 1
  store i64 %38, ptr %memberidx.i.i49, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 1
  %39 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %39, i64 %37
  store ptr %30, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend12:                                          ; preds = %ifend8
  %40 = call ptr @malloc(i32 8)
  store i64 20, ptr %40, align 4
  %41 = load ptr, ptr %memberidx1, align 8
  %42 = load i64, ptr %41, align 4
  switch i64 %42, label %else23 [
    i64 13, label %if.entry17
    i64 14, label %if.entry22
  ]

if.entry17:                                       ; preds = %ifend12
  %memberidx20 = getelementptr inbounds %PointerType, ptr %41, i64 0, i32 1
  br label %ifend19

ifend19:                                          ; preds = %if.entry22, %if.entry17
  %storemerge.in = phi ptr [ %memberidx25, %if.entry22 ], [ %memberidx20, %if.entry17 ]
  %storemerge = load ptr, ptr %storemerge.in, align 8
  %43 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %43, align 4
  %memberidx.i.i50 = getelementptr inbounds %Expression, ptr %43, i64 0, i32 2
  store i64 13, ptr %memberidx.i.i50, align 4
  %memberidx1.i.i51 = getelementptr inbounds %Expression, ptr %43, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i51, align 1
  %memberidx.i52 = getelementptr inbounds %IndexExpression, ptr %43, i64 0, i32 4
  store ptr %5, ptr %memberidx.i52, align 8
  %memberidx1.i53 = getelementptr inbounds %IndexExpression, ptr %43, i64 0, i32 5
  store ptr %15, ptr %memberidx1.i53, align 8
  %memberidx2.i54 = getelementptr inbounds %Expression, ptr %43, i64 0, i32 3
  store ptr %storemerge, ptr %memberidx2.i54, align 8
  br label %common.ret

if.entry22:                                       ; preds = %ifend12
  %memberidx25 = getelementptr inbounds %ArrayType, ptr %41, i64 0, i32 1
  br label %ifend19

else23:                                           ; preds = %ifend12
  %44 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %41)
  %45 = load ptr, ptr %44, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i64 0, i32 5
  %46 = load ptr, ptr %memberidx26, align 8
  %47 = call ptr %46(ptr nonnull %44)
  %48 = alloca ptr, align 8
  %49 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %48, ptr nonnull @187, ptr %47)
  %50 = load ptr, ptr %48, align 8
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i55 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i55, align 8
  %memberidx1.i56 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 %49, ptr %memberidx1.i56, align 4
  %memberidx2.i57 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 %49, ptr %memberidx2.i57, align 4
  tail call void @free(ptr %47)
  %52 = load ptr, ptr %1, align 8
  %53 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i59 = getelementptr inbounds %Compiler, ptr %53, i64 0, i32 6
  %54 = load ptr, ptr %memberidx1.i59, align 8
  %55 = call ptr @malloc(i32 24)
  store i64 5, ptr %55, align 4
  %memberidx1.i.i60 = getelementptr inbounds %FloError, ptr %55, i64 0, i32 2
  store ptr %52, ptr %memberidx1.i.i60, align 8
  %memberidx2.i.i61 = getelementptr inbounds %FloError, ptr %55, i64 0, i32 1
  store ptr %51, ptr %memberidx2.i.i61, align 8
  %memberidx.i.i62 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 2
  %56 = load i64, ptr %memberidx.i.i62, align 4
  %memberidx1.i2.i63 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 3
  %57 = load i64, ptr %memberidx1.i2.i63, align 4
  %.not.i.i64 = icmp slt i64 %56, %57
  br i1 %.not.i.i64, label %TypeChecker_error.exit70, label %if.entry.i.i67

if.entry.i.i67:                                   ; preds = %else23
  %58 = shl i64 %57, 1
  store i64 %58, ptr %memberidx1.i2.i63, align 4
  %memberidx2.i.i.i66 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 1
  %59 = load ptr, ptr %memberidx2.i.i.i66, align 8
  %60 = shl i64 %57, 4
  %61 = call ptr @realloc(ptr %59, i64 %60)
  store ptr %61, ptr %memberidx2.i.i.i66, align 8
  br label %TypeChecker_error.exit70

TypeChecker_error.exit70:                         ; preds = %else23, %if.entry.i.i67
  %62 = load i64, ptr %memberidx.i.i62, align 4
  %63 = add nsw i64 %62, 1
  store i64 %63, ptr %memberidx.i.i62, align 4
  %memberidx4.i.i68 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 1
  %64 = load ptr, ptr %memberidx4.i.i68, align 8
  %ptridx.i.i69 = getelementptr inbounds ptr, ptr %64, i64 %62
  store ptr %55, ptr %ptridx.i.i69, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_block(ptr %0, ptr nocapture readonly %1, ptr %2) unnamed_addr {
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %4 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %4, i64 0, i32 6
  %5 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx2.i, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %common.ret, label %ifend

common.ret.loopexit:                              ; preds = %for.body
  store i1 %storemerge7784, ptr %15, align 1
  br label %common.ret

common.ret:                                       ; preds = %common.ret.loopexit, %3, %for.end
  %common.ret.op = phi ptr [ %8, %for.end ], [ null, %3 ], [ null, %common.ret.loopexit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %8 = tail call ptr @malloc(i32 11)
  %9 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Statement_, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %Array_Statement_, ptr %9, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %9, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Statement_, ptr %9, i64 0, i32 1
  %10 = call ptr @malloc(i32 64)
  store ptr %10, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %9, ptr %8, align 8
  %memberidx3.i = getelementptr inbounds %Block, ptr %8, i64 0, i32 1
  store i1 false, ptr %memberidx3.i, align 1
  %memberidx4.i = getelementptr inbounds %Block, ptr %8, i64 0, i32 2
  store i1 false, ptr %memberidx4.i, align 1
  %memberidx5.i = getelementptr inbounds %Block, ptr %8, i64 0, i32 3
  store i1 false, ptr %memberidx5.i, align 1
  %.not = icmp eq ptr %2, null
  br i1 %.not, label %false_block, label %end

false_block:                                      ; preds = %ifend
  %11 = call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i52 = getelementptr inbounds %Scope, ptr %11, i64 0, i32 5
  %memberidx1.i53 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %12 = load ptr, ptr %memberidx1.i53, align 8
  store ptr %12, ptr %memberidx.i52, align 8
  br label %end

end:                                              ; preds = %ifend, %false_block
  %ternary = phi ptr [ %11, %false_block ], [ %2, %ifend ]
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %13 = load ptr, ptr %ternary, align 8
  store ptr %13, ptr %memberidx, align 8
  %memberidx2 = getelementptr inbounds %BlockNode, ptr %1, i64 0, i32 1
  %14 = load ptr, ptr %memberidx2, align 8
  %15 = call ptr @malloc(i32 25)
  %memberidx.i54 = getelementptr inbounds %Array_StatementNode_, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i54, align 8
  %memberidx1.i55 = getelementptr inbounds %Array_StatementNode_, ptr %14, i64 0, i32 2
  %17 = load i64, ptr %memberidx1.i55, align 4
  store i1 false, ptr %15, align 1
  %memberidx1.i.i56 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %15, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i56, align 4
  %memberidx2.i.i57 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %15, i64 0, i32 3
  store ptr %16, ptr %memberidx2.i.i57, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %15, i64 0, i32 2
  store i64 %17, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i56, align 4
  %18 = icmp slt i64 %17, 1
  br i1 %18, label %for.end.loopexit, label %for.body

for.body:                                         ; preds = %end, %ifend37
  %storemerge85.in = phi ptr [ %ptridx.i72, %ifend37 ], [ %16, %end ]
  %storemerge7784 = phi i1 [ %45, %ifend37 ], [ %18, %end ]
  %storemerge85 = load ptr, ptr %storemerge85.in, align 8
  %19 = call fastcc ptr @TypeChecker_check_statement(ptr %0, ptr %storemerge85)
  %20 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i62 = getelementptr inbounds %Compiler, ptr %20, i64 0, i32 6
  %21 = load ptr, ptr %memberidx1.i62, align 8
  %memberidx2.i63 = getelementptr inbounds %Array_FloError_, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i63, align 4
  %23 = icmp sgt i64 %22, 0
  br i1 %23, label %common.ret.loopexit, label %ifend6

for.end.loopexit:                                 ; preds = %ifend37, %end
  %storemerge77.lcssa = phi i1 [ %18, %end ], [ %45, %ifend37 ]
  store i1 %storemerge77.lcssa, ptr %15, align 1
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.entry35, %if.entry30, %if.entry25, %if.entry9
  tail call void @free(ptr %15)
  %memberidx40 = getelementptr inbounds %Scope, ptr %ternary, i64 0, i32 5
  %24 = load ptr, ptr %memberidx40, align 8
  store ptr %24, ptr %memberidx, align 8
  call fastcc void @Scope___del__(ptr nonnull %ternary)
  tail call void @free(ptr nonnull %ternary)
  br label %common.ret

ifend6:                                           ; preds = %for.body
  %25 = load ptr, ptr %8, align 8
  %memberidx.i64 = getelementptr inbounds %Array_Statement_, ptr %25, i64 0, i32 2
  %26 = load i64, ptr %memberidx.i64, align 4
  %memberidx1.i65 = getelementptr inbounds %Array_Statement_, ptr %25, i64 0, i32 3
  %27 = load i64, ptr %memberidx1.i65, align 4
  %.not.i = icmp slt i64 %26, %27
  br i1 %.not.i, label %Array_Statement____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %ifend6
  %28 = shl i64 %27, 1
  store i64 %28, ptr %memberidx1.i65, align 4
  %memberidx2.i.i67 = getelementptr inbounds %Array_Statement_, ptr %25, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i67, align 8
  %30 = shl i64 %27, 4
  %31 = call ptr @realloc(ptr %29, i64 %30)
  store ptr %31, ptr %memberidx2.i.i67, align 8
  br label %Array_Statement____sl__.exit

Array_Statement____sl__.exit:                     ; preds = %ifend6, %if.entry.i
  %32 = load i64, ptr %memberidx.i64, align 4
  %33 = add nsw i64 %32, 1
  store i64 %33, ptr %memberidx.i64, align 4
  %memberidx4.i68 = getelementptr inbounds %Array_Statement_, ptr %25, i64 0, i32 1
  %34 = load ptr, ptr %memberidx4.i68, align 8
  %ptridx.i69 = getelementptr inbounds ptr, ptr %34, i64 %32
  store ptr %19, ptr %ptridx.i69, align 8
  %35 = load i64, ptr %19, align 4
  switch i64 %35, label %ifend37 [
    i64 7, label %if.entry9
    i64 0, label %if.entry14
    i64 5, label %if.entry30
    i64 6, label %if.entry35
  ]

if.entry9:                                        ; preds = %Array_Statement____sl__.exit
  store i1 %storemerge7784, ptr %15, align 1
  store i1 true, ptr %memberidx3.i, align 1
  br label %for.end

if.entry14:                                       ; preds = %Array_Statement____sl__.exit
  %memberidx17 = getelementptr inbounds %IfStatement, ptr %19, i64 0, i32 3
  %36 = load ptr, ptr %memberidx17, align 8
  %.not50 = icmp eq ptr %36, null
  br i1 %.not50, label %ifend16, label %if.entry18

ifend16:                                          ; preds = %if.entry18, %if.entry14
  switch i64 %35, label %ifend37 [
    i64 5, label %if.entry30
    i64 6, label %if.entry35
  ]

if.entry18:                                       ; preds = %if.entry14
  %memberidx21 = getelementptr inbounds %IfStatement, ptr %19, i64 0, i32 2
  %37 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Block, ptr %37, i64 0, i32 1
  %38 = load i1, ptr %memberidx22, align 1
  %memberidx24 = getelementptr inbounds %Block, ptr %36, i64 0, i32 1
  %39 = load i1, ptr %memberidx24, align 1
  %40 = and i1 %38, %39
  br i1 %40, label %if.entry25, label %ifend16

if.entry25:                                       ; preds = %if.entry18
  store i1 %storemerge7784, ptr %15, align 1
  store i1 true, ptr %memberidx3.i, align 1
  br label %for.end

if.entry30:                                       ; preds = %Array_Statement____sl__.exit, %ifend16
  store i1 %storemerge7784, ptr %15, align 1
  store i1 true, ptr %memberidx4.i, align 1
  br label %for.end

if.entry35:                                       ; preds = %Array_Statement____sl__.exit, %ifend16
  store i1 %storemerge7784, ptr %15, align 1
  store i1 true, ptr %memberidx5.i, align 1
  br label %for.end

ifend37:                                          ; preds = %Array_Statement____sl__.exit, %ifend16
  %41 = load i64, ptr %memberidx1.i.i56, align 4
  %42 = add nsw i64 %41, 1
  store i64 %42, ptr %memberidx1.i.i56, align 4
  %43 = load ptr, ptr %memberidx2.i.i57, align 8
  %ptridx.i72 = getelementptr inbounds ptr, ptr %43, i64 %41
  %44 = load i64, ptr %memberidx3.i.i, align 4
  %45 = icmp sge i64 %41, %44
  br i1 %45, label %for.end.loopexit, label %for.body
}

define internal fastcc void @Map_string_Generic__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_Generic_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_Generic____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_Generic____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_Generic__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_Generic__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_Generic_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_Generic__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

define internal fastcc void @TypeChecker_check_class_body(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %4)
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend54, %ifend13, %ifend10, %2, %TypeChecker_error.exit171, %for.end42, %TypeChecker_error.exit
  ret void

ifend:                                            ; preds = %2
  %8 = load ptr, ptr %0, align 8
  %9 = call fastcc ptr @get_class_from_type(ptr %8, ptr nonnull %5)
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %memberidx4, align 8
  %memberidx7 = getelementptr inbounds %Class, ptr %9, i64 0, i32 2
  %12 = load ptr, ptr %memberidx7, align 8
  %.not = icmp eq ptr %12, null
  br i1 %.not, label %ifend10, label %if.entry8

if.entry8:                                        ; preds = %ifend
  call fastcc void @TypeChecker_add_inherited_props_to_class(ptr nonnull %0, ptr nonnull %9, ptr nonnull %1)
  br label %ifend10

ifend10:                                          ; preds = %ifend, %if.entry8
  call fastcc void @TypeChecker_declare_class_fields(ptr nonnull %0, ptr nonnull %9, ptr nonnull %1)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %13 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %13, i64 0, i32 6
  %14 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i, align 4
  %16 = icmp sgt i64 %15, 0
  br i1 %16, label %common.ret, label %ifend13

ifend13:                                          ; preds = %ifend10
  call fastcc void @TypeChecker_declare_class_methods(ptr nonnull %0, ptr nonnull %9, ptr nonnull %1)
  %17 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i109 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i109, align 8
  %memberidx2.i110 = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i110, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %common.ret, label %for.entry

for.entry:                                        ; preds = %ifend13
  %memberidx17 = getelementptr inbounds %Class, ptr %9, i64 0, i32 6
  %21 = load ptr, ptr %memberidx17, align 8
  %22 = call ptr @malloc(i32 25)
  %23 = load ptr, ptr %21, align 8
  %memberidx1.i111 = getelementptr inbounds %Map_string_PropId_, ptr %21, i64 0, i32 1
  %24 = load i64, ptr %memberidx1.i111, align 4
  %memberidx2.i112 = getelementptr inbounds %Map_string_PropId_, ptr %21, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i112, align 4
  store i1 false, ptr %22, align 1
  %memberidx1.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %22, i64 0, i32 1
  store ptr %23, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %22, i64 0, i32 2
  store i64 %24, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %22, i64 0, i32 3
  store i64 %25, ptr %memberidx3.i.i, align 4
  %26 = add nsw i64 %24, -1
  store i64 %26, ptr %memberidx2.i.i, align 4
  %27 = icmp sgt i64 %24, 0
  br i1 %27, label %while.entry.i.preheader, label %MapIterator_string_PropId__next.exit

while.entry.i.preheader:                          ; preds = %for.entry
  %memberidx1.i.i.promoted = load ptr, ptr %memberidx1.i.i, align 8
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %ifend.i
  %28 = phi ptr [ %memberidx1.i.i.promoted, %while.entry.i.preheader ], [ %incdec.ptr.i, %ifend.i ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %28, i64 1
  %29 = load ptr, ptr %28, align 8
  %.not.i = icmp eq ptr %29, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit.loopexit

ifend.i:                                          ; preds = %while.entry.i
  %30 = load i64, ptr %memberidx2.i.i, align 4
  %31 = add nsw i64 %30, -1
  store i64 %31, ptr %memberidx2.i.i, align 4
  %32 = icmp sgt i64 %30, 0
  br i1 %32, label %while.entry.i, label %MapIterator_string_PropId__next.exit.loopexit

MapIterator_string_PropId__next.exit.loopexit:    ; preds = %ifend.i, %while.entry.i
  store ptr %incdec.ptr.i, ptr %memberidx1.i.i, align 8
  br label %MapIterator_string_PropId__next.exit

MapIterator_string_PropId__next.exit:             ; preds = %MapIterator_string_PropId__next.exit.loopexit, %for.entry
  %memberidx3.i.i.promoted = load i64, ptr %memberidx3.i.i, align 4
  %storemerge174180 = add nsw i64 %memberidx3.i.i.promoted, -1
  %storemerge173181 = icmp slt i64 %memberidx3.i.i.promoted, 1
  store i1 %storemerge173181, ptr %22, align 1
  br i1 %storemerge173181, label %for.end.loopexit, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit
  %.pn.in = getelementptr inbounds %MapIterator_string_PropId_, ptr %22, i64 0, i32 1
  %.pn.in.promoted = load ptr, ptr %.pn.in, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit126
  %.pn184 = phi ptr [ %.pn.in.promoted, %for.body.lr.ph ], [ %.pn183, %MapIterator_string_PropId__next.exit126 ]
  %storemerge174182 = phi i64 [ %storemerge174180, %for.body.lr.ph ], [ %storemerge174, %MapIterator_string_PropId__next.exit126 ]
  %storemerge.in = getelementptr inbounds ptr, ptr %.pn184, i64 -1
  %storemerge = load ptr, ptr %storemerge.in, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_PropId_, ptr %storemerge, i64 0, i32 1
  %33 = load ptr, ptr %memberidx19, align 8
  %34 = load i64, ptr %33, align 4
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %if.entry22, label %ifend24

for.cond.for.end.loopexit_crit_edge:              ; preds = %MapIterator_string_PropId__next.exit126
  store ptr %.pn183, ptr %.pn.in, align 8
  br label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.cond.for.end.loopexit_crit_edge, %MapIterator_string_PropId__next.exit
  %storemerge174.lcssa = phi i64 [ -1, %for.cond.for.end.loopexit_crit_edge ], [ %storemerge174180, %MapIterator_string_PropId__next.exit ]
  store i64 %storemerge174.lcssa, ptr %memberidx3.i.i, align 4
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %ifend33
  tail call void @free(ptr %22)
  %memberidx43 = getelementptr inbounds %Class, ptr %9, i64 0, i32 5
  %36 = load ptr, ptr %memberidx43, align 8
  %memberidx44176 = getelementptr inbounds %Array_ClassMethod_, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx44176, align 4
  %38 = icmp sgt i64 %37, 0
  br i1 %38, label %for.body40.lr.ph, label %for.end42

for.body40.lr.ph:                                 ; preds = %for.end
  %memberidx46 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 4
  %memberidx48 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 4
  %memberidx49 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  br label %for.body40

if.entry22:                                       ; preds = %for.body
  %39 = load ptr, ptr %storemerge, align 8
  %40 = load ptr, ptr %0, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %33, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i.i.i, align 8
  %43 = load i64, ptr %41, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %44, i64 %43
  %45 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %45, i64 0, i32 4
  %46 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %41, i64 0, i32 2
  %47 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %48, i64 %47
  %49 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i115 = getelementptr inbounds %Class, ptr %49, i64 0, i32 5
  %50 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %PropId, ptr %33, i64 0, i32 2
  %51 = load i64, ptr %memberidx1.i116, align 4
  %memberidx.i3.i = getelementptr inbounds %Array_ClassMethod_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i3.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx26 = getelementptr inbounds %ClassMethod, ptr %53, i64 0, i32 7
  %54 = load i1, ptr %memberidx26, align 1
  br i1 %54, label %if.entry27, label %ifend24

ifend24:                                          ; preds = %if.entry22, %for.body
  %55 = load i64, ptr %memberidx2.i.i, align 4
  %56 = add nsw i64 %55, -1
  store i64 %56, ptr %memberidx2.i.i, align 4
  %57 = icmp sgt i64 %55, 0
  br i1 %57, label %while.entry.i121, label %MapIterator_string_PropId__next.exit126

while.entry.i121:                                 ; preds = %ifend24, %ifend.i125
  %58 = phi ptr [ %incdec.ptr.i119, %ifend.i125 ], [ %.pn184, %ifend24 ]
  %incdec.ptr.i119 = getelementptr inbounds ptr, ptr %58, i64 1
  %59 = load ptr, ptr %58, align 8
  %.not.i120 = icmp eq ptr %59, null
  br i1 %.not.i120, label %ifend.i125, label %MapIterator_string_PropId__next.exit126

ifend.i125:                                       ; preds = %while.entry.i121
  %60 = load i64, ptr %memberidx2.i.i, align 4
  %61 = add nsw i64 %60, -1
  store i64 %61, ptr %memberidx2.i.i, align 4
  %62 = icmp sgt i64 %60, 0
  br i1 %62, label %while.entry.i121, label %MapIterator_string_PropId__next.exit126

MapIterator_string_PropId__next.exit126:          ; preds = %while.entry.i121, %ifend.i125, %ifend24
  %.pn183 = phi ptr [ %.pn184, %ifend24 ], [ %incdec.ptr.i119, %ifend.i125 ], [ %incdec.ptr.i119, %while.entry.i121 ]
  %storemerge174 = add nsw i64 %storemerge174182, -1
  %storemerge173 = icmp slt i64 %storemerge174182, 1
  store i1 %storemerge173, ptr %22, align 1
  br i1 %storemerge173, label %for.cond.for.end.loopexit_crit_edge, label %for.body

if.entry27:                                       ; preds = %if.entry22
  store ptr %.pn184, ptr %.pn.in, align 8
  store i64 %storemerge174182, ptr %memberidx3.i.i, align 4
  %memberidx30 = getelementptr inbounds %Class, ptr %9, i64 0, i32 3
  %63 = load ptr, ptr %memberidx30, align 8
  %.not107 = icmp eq ptr %63, null
  br i1 %.not107, label %ifend33, label %if.entry31

if.entry31:                                       ; preds = %if.entry27
  %64 = load ptr, ptr %39, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 5
  %65 = load ptr, ptr %memberidx34, align 8
  %66 = call ptr %65(ptr nonnull %39)
  %67 = alloca ptr, align 8
  %68 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %67, ptr nonnull @139, ptr %66)
  %69 = load ptr, ptr %67, align 8
  %70 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %70, align 8
  %memberidx.i127 = getelementptr inbounds %string, ptr %70, i64 0, i32 1
  store ptr %69, ptr %memberidx.i127, align 8
  %memberidx1.i128 = getelementptr inbounds %string, ptr %70, i64 0, i32 2
  store i64 %68, ptr %memberidx1.i128, align 4
  %memberidx2.i129 = getelementptr inbounds %string, ptr %70, i64 0, i32 3
  store i64 %68, ptr %memberidx2.i129, align 4
  tail call void @free(ptr %66)
  %71 = load ptr, ptr %1, align 8
  %memberidx36 = getelementptr inbounds %Token, ptr %71, i64 0, i32 1
  %72 = load ptr, ptr %memberidx36, align 8
  %73 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i131 = getelementptr inbounds %Compiler, ptr %73, i64 0, i32 6
  %74 = load ptr, ptr %memberidx1.i131, align 8
  %75 = call ptr @malloc(i32 24)
  store i64 4, ptr %75, align 4
  %memberidx1.i.i132 = getelementptr inbounds %FloError, ptr %75, i64 0, i32 2
  store ptr %72, ptr %memberidx1.i.i132, align 8
  %memberidx2.i.i133 = getelementptr inbounds %FloError, ptr %75, i64 0, i32 1
  store ptr %70, ptr %memberidx2.i.i133, align 8
  %memberidx.i.i134 = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 2
  %76 = load i64, ptr %memberidx.i.i134, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 3
  %77 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %76, %77
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry31
  %78 = shl i64 %77, 1
  store i64 %78, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i136 = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 1
  %79 = load ptr, ptr %memberidx2.i.i.i136, align 8
  %80 = shl i64 %77, 4
  %81 = call ptr @realloc(ptr %79, i64 %80)
  store ptr %81, ptr %memberidx2.i.i.i136, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry31, %if.entry.i.i
  %82 = load i64, ptr %memberidx.i.i134, align 4
  %83 = add nsw i64 %82, 1
  store i64 %83, ptr %memberidx.i.i134, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %74, i64 0, i32 1
  %84 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i137 = getelementptr inbounds ptr, ptr %84, i64 %82
  store ptr %75, ptr %ptridx.i.i137, align 8
  br label %common.ret

ifend33:                                          ; preds = %if.entry27
  %memberidx37 = getelementptr inbounds %Class, ptr %9, i64 0, i32 10
  store i1 true, ptr %memberidx37, align 1
  br label %for.end

for.body40:                                       ; preds = %for.body40.lr.ph, %for.incr41
  %85 = phi ptr [ %36, %for.body40.lr.ph ], [ %95, %for.incr41 ]
  %storemerge106177 = phi i64 [ 0, %for.body40.lr.ph ], [ %94, %for.incr41 ]
  %memberidx.i138 = getelementptr inbounds %Array_ClassMethod_, ptr %85, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i138, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %86, i64 %storemerge106177
  %87 = load ptr, ptr %ptridx.i, align 8
  %88 = load ptr, ptr %87, align 8
  store ptr %88, ptr %memberidx46, align 8
  %89 = load ptr, ptr %memberidx48, align 8
  %memberidx.i139 = getelementptr inbounds %Array_MethodNode_, ptr %89, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i139, align 8
  %ptridx.i140 = getelementptr inbounds ptr, ptr %90, i64 %storemerge106177
  %91 = load ptr, ptr %ptridx.i140, align 8
  %memberidx50 = getelementptr inbounds %ClassMethod, ptr %87, i64 0, i32 8
  %92 = load ptr, ptr %memberidx50, align 8
  store ptr %92, ptr %memberidx49, align 8
  %memberidx51 = getelementptr inbounds %ClassMethod, ptr %87, i64 0, i32 7
  %93 = load i1, ptr %memberidx51, align 1
  br i1 %93, label %for.incr41, label %ifend54

for.incr41:                                       ; preds = %for.body40, %ifend64
  %94 = add nuw nsw i64 %storemerge106177, 1
  %95 = load ptr, ptr %memberidx43, align 8
  %memberidx44 = getelementptr inbounds %Array_ClassMethod_, ptr %95, i64 0, i32 2
  %96 = load i64, ptr %memberidx44, align 4
  %97 = icmp slt i64 %94, %96
  br i1 %97, label %for.body40, label %for.end42

for.end42:                                        ; preds = %for.incr41, %for.end
  store ptr %10, ptr %memberidx4, align 8
  br label %common.ret

ifend54:                                          ; preds = %for.body40
  %memberidx55 = getelementptr inbounds %ClassMethod, ptr %87, i64 0, i32 5
  %memberidx56 = getelementptr inbounds %MethodNode, ptr %91, i64 0, i32 2
  %98 = load ptr, ptr %memberidx56, align 8
  %99 = call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %98, ptr null)
  store ptr %99, ptr %memberidx55, align 8
  %100 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i142 = getelementptr inbounds %Compiler, ptr %100, i64 0, i32 6
  %101 = load ptr, ptr %memberidx1.i142, align 8
  %memberidx2.i143 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 2
  %102 = load i64, ptr %memberidx2.i143, align 4
  %103 = icmp sgt i64 %102, 0
  br i1 %103, label %common.ret, label %ifend59

ifend59:                                          ; preds = %ifend54
  %memberidx61 = getelementptr inbounds %Block, ptr %99, i64 0, i32 1
  %104 = load i1, ptr %memberidx61, align 1
  br i1 %104, label %ifend64, label %if.entry62

if.entry62:                                       ; preds = %ifend59
  %memberidx65 = getelementptr inbounds %ClassMethod, ptr %87, i64 0, i32 4
  %105 = load ptr, ptr %memberidx65, align 8
  %memberidx66 = getelementptr inbounds %FunctionType, ptr %105, i64 0, i32 2
  %106 = load ptr, ptr %memberidx66, align 8
  %107 = load i64, ptr %106, align 4
  %108 = icmp eq i64 %107, 10
  br i1 %108, label %if.entry68, label %else69

ifend64:                                          ; preds = %ifend59, %Array_Statement____sl__.exit
  store ptr null, ptr %memberidx46, align 8
  %109 = load ptr, ptr %0, align 8
  %110 = load ptr, ptr %memberidx50, align 8
  %memberidx.i144 = getelementptr inbounds %Program, ptr %109, i64 0, i32 1
  %111 = load ptr, ptr %memberidx.i144, align 8
  %112 = load i64, ptr %110, align 4
  %memberidx.i.i145 = getelementptr inbounds %Array_Module_, ptr %111, i64 0, i32 1
  %113 = load ptr, ptr %memberidx.i.i145, align 8
  %ptridx.i.i146 = getelementptr inbounds ptr, ptr %113, i64 %112
  %114 = load ptr, ptr %ptridx.i.i146, align 8
  %memberidx2.i147 = getelementptr inbounds %Module, ptr %114, i64 0, i32 8
  %115 = load ptr, ptr %memberidx2.i147, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %110, i64 0, i32 1
  %116 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %115, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %117, i64 %116
  %118 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx79 = getelementptr inbounds %Scope, ptr %118, i64 0, i32 5
  %119 = load ptr, ptr %memberidx79, align 8
  store ptr %119, ptr %memberidx49, align 8
  br label %for.incr41

if.entry68:                                       ; preds = %if.entry62
  %120 = load ptr, ptr %99, align 8
  %121 = tail call ptr @malloc(i32 16)
  store i64 7, ptr %121, align 4
  %memberidx.i148 = getelementptr inbounds %ReturnStatement, ptr %121, i64 0, i32 1
  store ptr null, ptr %memberidx.i148, align 8
  %memberidx.i149 = getelementptr inbounds %Array_Statement_, ptr %120, i64 0, i32 2
  %122 = load i64, ptr %memberidx.i149, align 4
  %memberidx1.i150 = getelementptr inbounds %Array_Statement_, ptr %120, i64 0, i32 3
  %123 = load i64, ptr %memberidx1.i150, align 4
  %.not.i151 = icmp slt i64 %122, %123
  br i1 %.not.i151, label %Array_Statement____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry68
  %124 = shl i64 %123, 1
  store i64 %124, ptr %memberidx1.i150, align 4
  %memberidx2.i.i153 = getelementptr inbounds %Array_Statement_, ptr %120, i64 0, i32 1
  %125 = load ptr, ptr %memberidx2.i.i153, align 8
  %126 = shl i64 %123, 4
  %127 = call ptr @realloc(ptr %125, i64 %126)
  store ptr %127, ptr %memberidx2.i.i153, align 8
  br label %Array_Statement____sl__.exit

Array_Statement____sl__.exit:                     ; preds = %if.entry68, %if.entry.i
  %128 = load i64, ptr %memberidx.i149, align 4
  %129 = add nsw i64 %128, 1
  store i64 %129, ptr %memberidx.i149, align 4
  %memberidx4.i = getelementptr inbounds %Array_Statement_, ptr %120, i64 0, i32 1
  %130 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i154 = getelementptr inbounds ptr, ptr %130, i64 %128
  store ptr %121, ptr %ptridx.i154, align 8
  br label %ifend64

else69:                                           ; preds = %if.entry62
  %131 = call ptr @malloc(i32 38)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(38) %131, ptr noundef nonnull align 8 dereferenceable(38) @140, i64 38, i1 false)
  %132 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %132, align 8
  %memberidx.i.i156 = getelementptr inbounds %string, ptr %132, i64 0, i32 1
  store ptr %131, ptr %memberidx.i.i156, align 8
  %memberidx1.i.i157 = getelementptr inbounds %string, ptr %132, i64 0, i32 2
  store i64 38, ptr %memberidx1.i.i157, align 4
  %memberidx2.i.i158 = getelementptr inbounds %string, ptr %132, i64 0, i32 3
  store i64 38, ptr %memberidx2.i.i158, align 4
  %memberidx73 = getelementptr inbounds %MethodNode, ptr %91, i64 0, i32 4
  %133 = load ptr, ptr %memberidx73, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i160 = getelementptr inbounds %Compiler, ptr %135, i64 0, i32 6
  %136 = load ptr, ptr %memberidx1.i160, align 8
  %137 = call ptr @malloc(i32 24)
  store i64 4, ptr %137, align 4
  %memberidx1.i.i161 = getelementptr inbounds %FloError, ptr %137, i64 0, i32 2
  store ptr %134, ptr %memberidx1.i.i161, align 8
  %memberidx2.i.i162 = getelementptr inbounds %FloError, ptr %137, i64 0, i32 1
  store ptr %132, ptr %memberidx2.i.i162, align 8
  %memberidx.i.i163 = getelementptr inbounds %Array_FloError_, ptr %136, i64 0, i32 2
  %138 = load i64, ptr %memberidx.i.i163, align 4
  %memberidx1.i2.i164 = getelementptr inbounds %Array_FloError_, ptr %136, i64 0, i32 3
  %139 = load i64, ptr %memberidx1.i2.i164, align 4
  %.not.i.i165 = icmp slt i64 %138, %139
  br i1 %.not.i.i165, label %TypeChecker_error.exit171, label %if.entry.i.i168

if.entry.i.i168:                                  ; preds = %else69
  %140 = shl i64 %139, 1
  store i64 %140, ptr %memberidx1.i2.i164, align 4
  %memberidx2.i.i.i167 = getelementptr inbounds %Array_FloError_, ptr %136, i64 0, i32 1
  %141 = load ptr, ptr %memberidx2.i.i.i167, align 8
  %142 = shl i64 %139, 4
  %143 = call ptr @realloc(ptr %141, i64 %142)
  store ptr %143, ptr %memberidx2.i.i.i167, align 8
  br label %TypeChecker_error.exit171

TypeChecker_error.exit171:                        ; preds = %else69, %if.entry.i.i168
  %144 = load i64, ptr %memberidx.i.i163, align 4
  %145 = add nsw i64 %144, 1
  store i64 %145, ptr %memberidx.i.i163, align 4
  %memberidx4.i.i169 = getelementptr inbounds %Array_FloError_, ptr %136, i64 0, i32 1
  %146 = load ptr, ptr %memberidx4.i.i169, align 8
  %ptridx.i.i170 = getelementptr inbounds ptr, ptr %146, i64 %144
  store ptr %137, ptr %ptridx.i.i170, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %1, ptr %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = icmp eq ptr %2, null
  %8 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 7
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr @malloc(i32 1)
  store i8 64, ptr %10, align 8
  %11 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i, align 4
  %12 = call i1 %9(ptr nonnull %1, ptr nonnull %11)
  %13 = or i1 %7, %12
  br i1 %13, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i, align 4
  %15 = load ptr, ptr %0, align 8
  %memberidx1.i.i57 = getelementptr inbounds %Program, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx1.i.i57, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %16, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %17, i64 %14
  %18 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx3 = getelementptr inbounds %Module, ptr %18, i64 0, i32 1
  %19 = load ptr, ptr %memberidx3, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx.i58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %20, i64 0, i32 5
  %21 = load ptr, ptr %memberidx.i58, align 8
  %22 = call ptr %21(ptr nonnull %19)
  %23 = call ptr @dirname(ptr %22)
  %24 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %23)
  %25 = trunc i64 %24 to i32
  %26 = call ptr @malloc(i32 %25)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %26, ptr align 8 %23, i64 %24, i1 false)
  %27 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i.i59 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i.i59, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 %24, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 3
  store i64 %24, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %28 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %29 = call ptr %28(ptr nonnull %27)
  %30 = load ptr, ptr %1, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i64 0, i32 5
  %31 = load ptr, ptr %memberidx1.i, align 8
  %32 = call ptr %31(ptr nonnull %1)
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @24, ptr %29, ptr %32)
  %34 = load ptr, ptr %4, align 8
  %35 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i61 = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i61, align 8
  %memberidx1.i.i62 = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i.i62, align 4
  %memberidx2.i.i63 = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i.i63, align 4
  call void @free(ptr %29)
  call void @free(ptr %32)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %filepath.0 = phi ptr [ %35, %if.entry ], [ %1, %3 ]
  %36 = load ptr, ptr %memberidx, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx5, align 8
  %39 = call ptr %38(ptr nonnull %36, ptr nonnull %filepath.0)
  %40 = load i64, ptr %39, align 4
  %41 = load ptr, ptr %0, align 8
  %memberidx8 = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %42 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Module_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx9, align 4
  %44 = icmp slt i64 %40, %43
  br i1 %44, label %if.entry10, label %ifend12

common.ret:                                       ; preds = %ifend31, %ifend26, %ifend18, %ifend34, %TypeChecker_error.exit, %if.entry10
  %common.ret.op = phi ptr [ %46, %if.entry10 ], [ null, %TypeChecker_error.exit ], [ %83, %ifend34 ], [ null, %ifend18 ], [ null, %ifend26 ], [ null, %ifend31 ]
  ret ptr %common.ret.op

if.entry10:                                       ; preds = %ifend
  %memberidx.i.i65 = getelementptr inbounds %Array_Module_, ptr %42, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i65, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %45, i64 %40
  %46 = load ptr, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %47 = load ptr, ptr %memberidx, align 8
  %48 = load ptr, ptr %47, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %48, i64 0, i32 2
  %49 = load ptr, ptr %memberidx15, align 8
  %50 = call i1 %49(ptr nonnull %47, ptr nonnull %39)
  br i1 %50, label %ifend18, label %if.entry16

if.entry16:                                       ; preds = %ifend12
  %51 = load ptr, ptr %1, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx19, align 8
  %53 = call ptr %52(ptr nonnull %1)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %54, ptr nonnull @29, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i66 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i66, align 8
  %memberidx1.i67 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i67, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i, align 4
  tail call void @free(ptr %53)
  %58 = load ptr, ptr %memberidx, align 8
  %memberidx1.i69 = getelementptr inbounds %Compiler, ptr %58, i64 0, i32 6
  %59 = load ptr, ptr %memberidx1.i69, align 8
  %60 = call ptr @malloc(i32 24)
  store i64 3, ptr %60, align 4
  %memberidx1.i.i70 = getelementptr inbounds %FloError, ptr %60, i64 0, i32 2
  store ptr %2, ptr %memberidx1.i.i70, align 8
  %memberidx2.i.i71 = getelementptr inbounds %FloError, ptr %60, i64 0, i32 1
  store ptr %57, ptr %memberidx2.i.i71, align 8
  %memberidx.i.i72 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 2
  %61 = load i64, ptr %memberidx.i.i72, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 3
  %62 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %61, %62
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry16
  %63 = shl i64 %62, 1
  store i64 %63, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i74 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 1
  %64 = load ptr, ptr %memberidx2.i.i.i74, align 8
  %65 = shl i64 %62, 4
  %66 = call ptr @realloc(ptr %64, i64 %65)
  store ptr %66, ptr %memberidx2.i.i.i74, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry16, %if.entry.i.i
  %67 = load i64, ptr %memberidx.i.i72, align 4
  %68 = add nsw i64 %67, 1
  store i64 %68, ptr %memberidx.i.i72, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 1
  %69 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i75 = getelementptr inbounds ptr, ptr %69, i64 %67
  store ptr %60, ptr %ptridx.i.i75, align 8
  br label %common.ret

ifend18:                                          ; preds = %ifend12
  %70 = load ptr, ptr %memberidx, align 8
  %memberidx21 = getelementptr inbounds %Compiler, ptr %70, i64 0, i32 3
  %71 = load ptr, ptr %memberidx21, align 8
  %memberidx23 = getelementptr inbounds %Compiler, ptr %70, i64 0, i32 6
  %72 = load ptr, ptr %memberidx23, align 8
  %73 = call fastcc ptr @Lexer_tokenize(ptr %71, ptr %72)
  %74 = load ptr, ptr %memberidx, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i77, align 8
  %memberidx2.i78 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %76 = load i64, ptr %memberidx2.i78, align 4
  %77 = icmp sgt i64 %76, 0
  br i1 %77, label %common.ret, label %ifend26

ifend26:                                          ; preds = %ifend18
  %78 = call fastcc ptr @Parser_parse(ptr %73, ptr %75)
  %79 = load ptr, ptr %memberidx, align 8
  %memberidx1.i80 = getelementptr inbounds %Compiler, ptr %79, i64 0, i32 6
  %80 = load ptr, ptr %memberidx1.i80, align 8
  %memberidx2.i81 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx2.i81, align 4
  %82 = icmp sgt i64 %81, 0
  br i1 %82, label %common.ret, label %ifend31

ifend31:                                          ; preds = %ifend26
  %83 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %0, ptr %78, ptr nonnull %filepath.0)
  %84 = load ptr, ptr %memberidx, align 8
  %memberidx1.i83 = getelementptr inbounds %Compiler, ptr %84, i64 0, i32 6
  %85 = load ptr, ptr %memberidx1.i83, align 8
  %memberidx2.i84 = getelementptr inbounds %Array_FloError_, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx2.i84, align 4
  %87 = icmp sgt i64 %86, 0
  br i1 %87, label %common.ret, label %ifend34

ifend34:                                          ; preds = %ifend31
  %88 = load ptr, ptr %84, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %88, i64 0, i32 2
  %89 = load ptr, ptr %memberidx36, align 8
  %90 = call i1 %89(ptr nonnull %84, ptr %6)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_fields(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 3
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2300 = getelementptr inbounds %Array_FieldNode_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx2300, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 9
  %6 = load i64, ptr %memberidx, align 4
  %memberidx.i137 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %memberidx.i144 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %memberidx21 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx92 = getelementptr inbounds %Class, ptr %1, i64 0, i32 7
  %memberidx99 = getelementptr inbounds %Class, ptr %1, i64 0, i32 4
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ClassField____sl__.exit
  %7 = phi ptr [ %3, %for.body.lr.ph ], [ %204, %Array_ClassField____sl__.exit ]
  %i.0302 = phi i64 [ 0, %for.body.lr.ph ], [ %203, %Array_ClassField____sl__.exit ]
  %current_vtable_index.0301 = phi i64 [ %6, %for.body.lr.ph ], [ %current_vtable_index.1, %Array_ClassField____sl__.exit ]
  %field_node = alloca ptr, align 8
  %memberidx.i = getelementptr inbounds %Array_FieldNode_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %8, i64 %i.0302
  %9 = load ptr, ptr %ptridx.i, align 8
  store ptr %9, ptr %field_node, align 8
  %field = alloca ptr, align 8
  %10 = tail call ptr @malloc(i32 49)
  %memberidx.i132 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 1
  store i1 false, ptr %memberidx.i132, align 1
  store ptr %10, ptr %field, align 8
  %memberidx4 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %9, align 8
  %memberidx6 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx6, align 8
  store ptr %12, ptr %memberidx4, align 8
  %13 = call fastcc i1 @is_operator_overload_name(ptr %12)
  br i1 %13, label %if.entry, label %ifend

common.ret.sink.split.sink.split:                 ; preds = %if.entry86, %dump_access.exit, %if.entry40, %if.entry28
  %.sink336 = phi i64 [ %101, %if.entry28 ], [ %153, %if.entry40 ], [ %181, %dump_access.exit ], [ %251, %if.entry86 ]
  %memberidx1.i2.i161.sink = phi ptr [ %memberidx1.i2.i161, %if.entry28 ], [ %memberidx1.i2.i207, %if.entry40 ], [ %memberidx1.i2.i228, %dump_access.exit ], [ %memberidx1.i2.i272, %if.entry86 ]
  %.sink334 = phi ptr [ %98, %if.entry28 ], [ %150, %if.entry40 ], [ %178, %dump_access.exit ], [ %248, %if.entry86 ]
  %memberidx.i.i160.sink.ph = phi ptr [ %memberidx.i.i160, %if.entry28 ], [ %memberidx.i.i206, %if.entry40 ], [ %memberidx.i.i227, %dump_access.exit ], [ %memberidx.i.i271, %if.entry86 ]
  %.sink.ph = phi ptr [ %99, %if.entry28 ], [ %151, %if.entry40 ], [ %179, %dump_access.exit ], [ %249, %if.entry86 ]
  %14 = shl i64 %.sink336, 1
  store i64 %14, ptr %memberidx1.i2.i161.sink, align 4
  %memberidx2.i.i.i164 = getelementptr inbounds %Array_FloError_, ptr %.sink334, i64 0, i32 1
  %15 = load ptr, ptr %memberidx2.i.i.i164, align 8
  %16 = shl i64 %.sink336, 4
  %17 = call ptr @realloc(ptr %15, i64 %16)
  store ptr %17, ptr %memberidx2.i.i.i164, align 8
  br label %common.ret.sink.split

common.ret.sink.split:                            ; preds = %common.ret.sink.split.sink.split, %if.entry86, %dump_access.exit, %if.entry40, %if.entry28
  %memberidx.i.i160.sink = phi ptr [ %memberidx.i.i160, %if.entry28 ], [ %memberidx.i.i206, %if.entry40 ], [ %memberidx.i.i227, %dump_access.exit ], [ %memberidx.i.i271, %if.entry86 ], [ %memberidx.i.i160.sink.ph, %common.ret.sink.split.sink.split ]
  %.sink319 = phi ptr [ %98, %if.entry28 ], [ %150, %if.entry40 ], [ %178, %dump_access.exit ], [ %248, %if.entry86 ], [ %.sink334, %common.ret.sink.split.sink.split ]
  %.sink = phi ptr [ %99, %if.entry28 ], [ %151, %if.entry40 ], [ %179, %dump_access.exit ], [ %249, %if.entry86 ], [ %.sink.ph, %common.ret.sink.split.sink.split ]
  %18 = load i64, ptr %memberidx.i.i160.sink, align 4
  %19 = add nsw i64 %18, 1
  store i64 %19, ptr %memberidx.i.i160.sink, align 4
  %memberidx4.i.i277 = getelementptr inbounds %Array_FloError_, ptr %.sink319, i64 0, i32 1
  %20 = load ptr, ptr %memberidx4.i.i277, align 8
  %ptridx.i.i278 = getelementptr inbounds ptr, ptr %20, i64 %18
  store ptr %.sink, ptr %ptridx.i.i278, align 8
  br label %common.ret

common.ret:                                       ; preds = %Array_ClassField____sl__.exit, %ifend, %if.entry62, %common.ret.sink.split, %for.entry
  ret void

if.entry:                                         ; preds = %for.body
  %21 = load ptr, ptr %memberidx4, align 8
  %22 = call ptr @malloc(i32 75)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(75) %22, ptr noundef nonnull align 8 dereferenceable(75) @120, i64 75, i1 false)
  %23 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 75, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 75, ptr %memberidx2.i.i, align 4
  %memberidx.i133 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  %24 = load i64, ptr %memberidx.i133, align 4
  %25 = add nsw i64 %24, 75
  %26 = trunc i64 %25 to i32
  %27 = call ptr @malloc(i32 %26)
  %memberidx2.i = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  %28 = load ptr, ptr %memberidx2.i, align 8
  %29 = load i64, ptr %memberidx.i133, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %27, ptr align 8 %28, i64 %29, i1 false)
  %30 = getelementptr inbounds i8, ptr %27, i64 %29
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(75) %30, ptr noundef nonnull align 8 dereferenceable(75) %22, i64 75, i1 false)
  %31 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i134 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %27, ptr %memberidx.i.i134, align 8
  %memberidx1.i.i135 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 %25, ptr %memberidx1.i.i135, align 4
  %memberidx2.i.i136 = getelementptr inbounds %string, ptr %31, i64 0, i32 3
  store i64 %25, ptr %memberidx2.i.i136, align 4
  %32 = load ptr, ptr %9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %32, i64 0, i32 1
  %33 = load ptr, ptr %memberidx10, align 8
  %34 = load ptr, ptr %memberidx.i137, align 8
  %memberidx1.i138 = getelementptr inbounds %Compiler, ptr %34, i64 0, i32 6
  %35 = load ptr, ptr %memberidx1.i138, align 8
  %36 = call ptr @malloc(i32 24)
  store i64 1, ptr %36, align 4
  %memberidx1.i.i139 = getelementptr inbounds %FloError, ptr %36, i64 0, i32 2
  store ptr %33, ptr %memberidx1.i.i139, align 8
  %memberidx2.i.i140 = getelementptr inbounds %FloError, ptr %36, i64 0, i32 1
  store ptr %31, ptr %memberidx2.i.i140, align 8
  %memberidx.i.i141 = getelementptr inbounds %Array_FloError_, ptr %35, i64 0, i32 2
  %37 = load i64, ptr %memberidx.i.i141, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %35, i64 0, i32 3
  %38 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %37, %38
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %39 = shl i64 %38, 1
  store i64 %39, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %35, i64 0, i32 1
  %40 = load ptr, ptr %memberidx2.i.i.i, align 8
  %41 = shl i64 %38, 4
  %42 = call ptr @realloc(ptr %40, i64 %41)
  store ptr %42, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %43 = load i64, ptr %memberidx.i.i141, align 4
  %44 = add nsw i64 %43, 1
  store i64 %44, ptr %memberidx.i.i141, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %35, i64 0, i32 1
  %45 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %45, i64 %43
  store ptr %36, ptr %ptridx.i.i, align 8
  br label %ifend

ifend:                                            ; preds = %for.body, %TypeChecker_error.exit
  %memberidx11 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 2
  %memberidx12 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 1
  %46 = load i64, ptr %memberidx12, align 4
  store i64 %46, ptr %memberidx11, align 4
  %47 = tail call ptr @malloc(i32 24)
  %48 = load ptr, ptr %1, align 8
  store i64 1, ptr %47, align 4
  %memberidx1.i142 = getelementptr inbounds %PropId, ptr %47, i64 0, i32 1
  store ptr %48, ptr %memberidx1.i142, align 8
  %memberidx2.i143 = getelementptr inbounds %PropId, ptr %47, i64 0, i32 2
  store i64 %i.0302, ptr %memberidx2.i143, align 4
  store ptr %47, ptr %10, align 8
  %memberidx15 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 4
  %memberidx16 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 3
  %49 = load ptr, ptr %memberidx16, align 8
  %50 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %49)
  store ptr %50, ptr %memberidx15, align 8
  %memberidx17 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 6
  store i64 %current_vtable_index.0301, ptr %memberidx17, align 4
  %51 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %Compiler, ptr %51, i64 0, i32 6
  %52 = load ptr, ptr %memberidx1.i145, align 8
  %memberidx2.i146 = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx2.i146, align 4
  %54 = icmp sgt i64 %53, 0
  br i1 %54, label %common.ret, label %ifend20

ifend20:                                          ; preds = %ifend
  %55 = load ptr, ptr %memberidx21, align 8
  %56 = load ptr, ptr %memberidx4, align 8
  %57 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %56)
  %memberidx.i147 = getelementptr inbounds %Map_string_PropId_, ptr %55, i64 0, i32 1
  %58 = load i64, ptr %memberidx.i147, align 4
  %59 = srem i64 %57, %58
  %60 = load ptr, ptr %55, align 8
  %ptridx.i148 = getelementptr inbounds ptr, ptr %60, i64 %59
  %61 = load ptr, ptr %ptridx.i148, align 8
  %.not.i = icmp eq ptr %61, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %ifend20
  %memberidx1.i.i150 = getelementptr inbounds %string, ptr %56, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %56, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %75, %else.i ], [ %59, %while.entry.i.preheader ]
  %62 = load ptr, ptr %55, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %62, i64 %hash.0.i
  %63 = load ptr, ptr %ptridx3.i, align 8
  %64 = load ptr, ptr %63, align 8
  %memberidx.i.i149 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i.i149, align 4
  %66 = load i64, ptr %memberidx1.i.i150, align 4
  %.not.i.i151 = icmp eq i64 %65, %66
  br i1 %.not.i.i151, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i152 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i.i152, align 8
  %68 = load ptr, ptr %memberidx3.i.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %ifend20
  %hash.1.i = phi i64 [ %59, %ifend20 ], [ %hash.0.i, %ifend.i.i ], [ %75, %else.i ]
  %71 = load ptr, ptr %55, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %71, i64 %hash.1.i
  %72 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %72, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %73 = add nsw i64 %hash.0.i, 1
  %74 = load i64, ptr %memberidx.i147, align 4
  %75 = srem i64 %73, %74
  %76 = load ptr, ptr %55, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %76, i64 %75
  %77 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %77, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %72, i64 0, i32 1
  %78 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %78, %if.entry10.i ], [ null, %while.end.i ]
  %.not = icmp eq ptr %common.ret.op.i, null
  br i1 %.not, label %ifend25, label %if.entry23

if.entry23:                                       ; preds = %Map_string_PropId____getitem__.exit
  %memberidx26 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %79 = load ptr, ptr %memberidx26, align 8
  %80 = load ptr, ptr %1, align 8
  %81 = icmp eq ptr %79, %80
  br i1 %81, label %if.entry28, label %ifend30

ifend25:                                          ; preds = %ifend42, %Map_string_PropId____getitem__.exit
  %memberidx61 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 2
  %82 = load ptr, ptr %memberidx61, align 8
  %.not130 = icmp eq ptr %82, null
  br i1 %.not130, label %else63, label %if.entry62

if.entry28:                                       ; preds = %if.entry23
  %83 = load ptr, ptr %memberidx4, align 8
  %84 = load ptr, ptr %83, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i64 0, i32 5
  %85 = load ptr, ptr %memberidx32, align 8
  %86 = call ptr %85(ptr nonnull %83)
  %memberidx33 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %87 = load ptr, ptr %memberidx33, align 8
  %88 = load ptr, ptr %87, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %88, i64 0, i32 5
  %89 = load ptr, ptr %memberidx34, align 8
  %90 = call ptr %89(ptr nonnull %87)
  %91 = alloca ptr, align 8
  %92 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %91, ptr nonnull @121, ptr %86, ptr %90)
  %93 = load ptr, ptr %91, align 8
  %94 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %94, align 8
  %memberidx.i153 = getelementptr inbounds %string, ptr %94, i64 0, i32 1
  store ptr %93, ptr %memberidx.i153, align 8
  %memberidx1.i154 = getelementptr inbounds %string, ptr %94, i64 0, i32 2
  store i64 %92, ptr %memberidx1.i154, align 4
  %memberidx2.i155 = getelementptr inbounds %string, ptr %94, i64 0, i32 3
  store i64 %92, ptr %memberidx2.i155, align 4
  tail call void @free(ptr %86)
  tail call void @free(ptr %90)
  %95 = load ptr, ptr %9, align 8
  %memberidx36 = getelementptr inbounds %Token, ptr %95, i64 0, i32 1
  %96 = load ptr, ptr %memberidx36, align 8
  %97 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i157 = getelementptr inbounds %Compiler, ptr %97, i64 0, i32 6
  %98 = load ptr, ptr %memberidx1.i157, align 8
  %99 = call ptr @malloc(i32 24)
  store i64 1, ptr %99, align 4
  %memberidx1.i.i158 = getelementptr inbounds %FloError, ptr %99, i64 0, i32 2
  store ptr %96, ptr %memberidx1.i.i158, align 8
  %memberidx2.i.i159 = getelementptr inbounds %FloError, ptr %99, i64 0, i32 1
  store ptr %94, ptr %memberidx2.i.i159, align 8
  %memberidx.i.i160 = getelementptr inbounds %Array_FloError_, ptr %98, i64 0, i32 2
  %100 = load i64, ptr %memberidx.i.i160, align 4
  %memberidx1.i2.i161 = getelementptr inbounds %Array_FloError_, ptr %98, i64 0, i32 3
  %101 = load i64, ptr %memberidx1.i2.i161, align 4
  %.not.i.i162 = icmp slt i64 %100, %101
  br i1 %.not.i.i162, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend30:                                          ; preds = %if.entry23
  %102 = load ptr, ptr %0, align 8
  %memberidx.i.i.i170 = getelementptr inbounds %Program, ptr %102, i64 0, i32 1
  %103 = load ptr, ptr %memberidx.i.i.i170, align 8
  %104 = load i64, ptr %79, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %103, i64 0, i32 1
  %105 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %105, i64 %104
  %106 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i171 = getelementptr inbounds %Module, ptr %106, i64 0, i32 4
  %107 = load ptr, ptr %memberidx2.i.i.i171, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %79, i64 0, i32 2
  %108 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %109, i64 %108
  %110 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %111 = load i64, ptr %common.ret.op.i, align 4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend30
  %memberidx1.i173 = getelementptr inbounds %Class, ptr %110, i64 0, i32 5
  %113 = load ptr, ptr %memberidx1.i173, align 8
  %memberidx2.i174 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %114 = load i64, ptr %memberidx2.i174, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %113, i64 0, i32 1
  %115 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %115, i64 %114
  %116 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %116, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend30
  %memberidx4.i = getelementptr inbounds %Class, ptr %110, i64 0, i32 4
  %117 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i175 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %118 = load i64, ptr %memberidx5.i175, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %117, i64 0, i32 1
  %119 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i176 = getelementptr inbounds ptr, ptr %119, i64 %118
  %120 = load ptr, ptr %ptridx.i.i176, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %120, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i172 = load ptr, ptr %common.ret.op.in.i, align 8
  br i1 %112, label %if.entry.i192, label %ifend.i198

if.entry.i192:                                    ; preds = %get_class_prop_type.exit
  %memberidx1.i187 = getelementptr inbounds %Class, ptr %110, i64 0, i32 5
  %121 = load ptr, ptr %memberidx1.i187, align 8
  %memberidx2.i188 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %122 = load i64, ptr %memberidx2.i188, align 4
  %memberidx.i12.i189 = getelementptr inbounds %Array_ClassMethod_, ptr %121, i64 0, i32 1
  %123 = load ptr, ptr %memberidx.i12.i189, align 8
  %ptridx.i13.i190 = getelementptr inbounds ptr, ptr %123, i64 %122
  %124 = load ptr, ptr %ptridx.i13.i190, align 8
  %memberidx3.i191 = getelementptr inbounds %ClassMethod, ptr %124, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i198:                                       ; preds = %get_class_prop_type.exit
  %memberidx4.i193 = getelementptr inbounds %Class, ptr %110, i64 0, i32 4
  %125 = load ptr, ptr %memberidx4.i193, align 8
  %memberidx5.i194 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %126 = load i64, ptr %memberidx5.i194, align 4
  %memberidx.i11.i195 = getelementptr inbounds %Array_ClassField_, ptr %125, i64 0, i32 1
  %127 = load ptr, ptr %memberidx.i11.i195, align 8
  %ptridx.i.i196 = getelementptr inbounds ptr, ptr %127, i64 %126
  %128 = load ptr, ptr %ptridx.i.i196, align 8
  %memberidx6.i197 = getelementptr inbounds %ClassField, ptr %128, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i192, %ifend.i198
  %common.ret.op.in.i185 = phi ptr [ %memberidx3.i191, %if.entry.i192 ], [ %memberidx6.i197, %ifend.i198 ]
  %common.ret.op.i186 = load i64, ptr %common.ret.op.in.i185, align 4
  %129 = load ptr, ptr %memberidx15, align 8
  %130 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %common.ret.op.i172, ptr %129)
  br i1 %130, label %ifend42, label %if.entry40

if.entry40:                                       ; preds = %get_class_prop_visibility.exit
  %131 = load ptr, ptr %memberidx4, align 8
  %132 = load ptr, ptr %131, align 8
  %memberidx44 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %132, i64 0, i32 5
  %133 = load ptr, ptr %memberidx44, align 8
  %134 = call ptr %133(ptr nonnull %131)
  %memberidx45 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %135 = load ptr, ptr %memberidx45, align 8
  %136 = load ptr, ptr %135, align 8
  %memberidx46 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %136, i64 0, i32 5
  %137 = load ptr, ptr %memberidx46, align 8
  %138 = call ptr %137(ptr nonnull %135)
  %139 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %common.ret.op.i172)
  %140 = load ptr, ptr %139, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %140, i64 0, i32 5
  %141 = load ptr, ptr %memberidx47, align 8
  %142 = call ptr %141(ptr nonnull %139)
  %143 = alloca ptr, align 8
  %144 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %143, ptr nonnull @122, ptr %134, ptr %138, ptr %142)
  %145 = load ptr, ptr %143, align 8
  %146 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %146, align 8
  %memberidx.i199 = getelementptr inbounds %string, ptr %146, i64 0, i32 1
  store ptr %145, ptr %memberidx.i199, align 8
  %memberidx1.i200 = getelementptr inbounds %string, ptr %146, i64 0, i32 2
  store i64 %144, ptr %memberidx1.i200, align 4
  %memberidx2.i201 = getelementptr inbounds %string, ptr %146, i64 0, i32 3
  store i64 %144, ptr %memberidx2.i201, align 4
  tail call void @free(ptr %134)
  tail call void @free(ptr %138)
  tail call void @free(ptr %142)
  %147 = load ptr, ptr %9, align 8
  %memberidx49 = getelementptr inbounds %Token, ptr %147, i64 0, i32 1
  %148 = load ptr, ptr %memberidx49, align 8
  %149 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i203 = getelementptr inbounds %Compiler, ptr %149, i64 0, i32 6
  %150 = load ptr, ptr %memberidx1.i203, align 8
  %151 = call ptr @malloc(i32 24)
  store i64 5, ptr %151, align 4
  %memberidx1.i.i204 = getelementptr inbounds %FloError, ptr %151, i64 0, i32 2
  store ptr %148, ptr %memberidx1.i.i204, align 8
  %memberidx2.i.i205 = getelementptr inbounds %FloError, ptr %151, i64 0, i32 1
  store ptr %146, ptr %memberidx2.i.i205, align 8
  %memberidx.i.i206 = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 2
  %152 = load i64, ptr %memberidx.i.i206, align 4
  %memberidx1.i2.i207 = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 3
  %153 = load i64, ptr %memberidx1.i2.i207, align 4
  %.not.i.i208 = icmp slt i64 %152, %153
  br i1 %.not.i.i208, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend42:                                          ; preds = %get_class_prop_visibility.exit
  %154 = load i64, ptr %memberidx11, align 4
  %.not131 = icmp eq i64 %154, %common.ret.op.i186
  br i1 %.not131, label %ifend25, label %if.entry51

if.entry51:                                       ; preds = %ifend42
  %155 = load ptr, ptr %memberidx4, align 8
  %156 = load ptr, ptr %155, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %156, i64 0, i32 5
  %157 = load ptr, ptr %memberidx55, align 8
  %158 = call ptr %157(ptr nonnull %155)
  %memberidx56 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %159 = load ptr, ptr %memberidx56, align 8
  %160 = load ptr, ptr %159, align 8
  %memberidx57 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %160, i64 0, i32 5
  %161 = load ptr, ptr %memberidx57, align 8
  %162 = call ptr %161(ptr nonnull %159)
  switch i64 %common.ret.op.i186, label %ifend3.i [
    i64 1, label %if.entry.i218
    i64 2, label %if.entry1.i
  ]

if.entry.i218:                                    ; preds = %if.entry51
  %163 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %163, ptr noundef nonnull align 8 dereferenceable(7) @46, i64 7, i1 false)
  br label %dump_access.exit

if.entry1.i:                                      ; preds = %if.entry51
  %164 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %164, ptr noundef nonnull align 8 dereferenceable(6) @47, i64 6, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry51
  %165 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %165, ptr noundef nonnull align 8 dereferenceable(9) @48, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i218, %if.entry1.i, %ifend3.i
  %.sink326 = phi ptr [ %163, %if.entry.i218 ], [ %164, %if.entry1.i ], [ %165, %ifend3.i ]
  %.sink324 = phi i64 [ 7, %if.entry.i218 ], [ 6, %if.entry1.i ], [ 9, %ifend3.i ]
  %166 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %166, align 8
  %memberidx.i.i.i216 = getelementptr inbounds %string, ptr %166, i64 0, i32 1
  store ptr %.sink326, ptr %memberidx.i.i.i216, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %166, i64 0, i32 2
  store i64 %.sink324, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i217 = getelementptr inbounds %string, ptr %166, i64 0, i32 3
  store i64 %.sink324, ptr %memberidx2.i.i.i217, align 4
  %167 = load ptr, ptr %166, align 8
  %memberidx58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %167, i64 0, i32 5
  %168 = load ptr, ptr %memberidx58, align 8
  %169 = call ptr %168(ptr nonnull %166)
  %170 = alloca ptr, align 8
  %171 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %170, ptr nonnull @123, ptr %158, ptr %162, ptr %169)
  %172 = load ptr, ptr %170, align 8
  %173 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %173, align 8
  %memberidx.i220 = getelementptr inbounds %string, ptr %173, i64 0, i32 1
  store ptr %172, ptr %memberidx.i220, align 8
  %memberidx1.i221 = getelementptr inbounds %string, ptr %173, i64 0, i32 2
  store i64 %171, ptr %memberidx1.i221, align 4
  %memberidx2.i222 = getelementptr inbounds %string, ptr %173, i64 0, i32 3
  store i64 %171, ptr %memberidx2.i222, align 4
  tail call void @free(ptr %158)
  tail call void @free(ptr %162)
  tail call void @free(ptr %169)
  %174 = load ptr, ptr %field_node, align 8
  %175 = load ptr, ptr %174, align 8
  %memberidx60 = getelementptr inbounds %Token, ptr %175, i64 0, i32 1
  %176 = load ptr, ptr %memberidx60, align 8
  %177 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i224 = getelementptr inbounds %Compiler, ptr %177, i64 0, i32 6
  %178 = load ptr, ptr %memberidx1.i224, align 8
  %179 = call ptr @malloc(i32 24)
  store i64 4, ptr %179, align 4
  %memberidx1.i.i225 = getelementptr inbounds %FloError, ptr %179, i64 0, i32 2
  store ptr %176, ptr %memberidx1.i.i225, align 8
  %memberidx2.i.i226 = getelementptr inbounds %FloError, ptr %179, i64 0, i32 1
  store ptr %173, ptr %memberidx2.i.i226, align 8
  %memberidx.i.i227 = getelementptr inbounds %Array_FloError_, ptr %178, i64 0, i32 2
  %180 = load i64, ptr %memberidx.i.i227, align 4
  %memberidx1.i2.i228 = getelementptr inbounds %Array_FloError_, ptr %178, i64 0, i32 3
  %181 = load i64, ptr %memberidx1.i2.i228, align 4
  %.not.i.i229 = icmp slt i64 %180, %181
  br i1 %.not.i.i229, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

if.entry62:                                       ; preds = %ifend25
  %memberidx65 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 5
  %182 = load ptr, ptr %memberidx15, align 8
  %183 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %182, ptr nonnull %82)
  store ptr %183, ptr %memberidx65, align 8
  %184 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i237 = getelementptr inbounds %Compiler, ptr %184, i64 0, i32 6
  %185 = load ptr, ptr %memberidx1.i237, align 8
  %memberidx2.i238 = getelementptr inbounds %Array_FloError_, ptr %185, i64 0, i32 2
  %186 = load i64, ptr %memberidx2.i238, align 4
  %187 = icmp sgt i64 %186, 0
  br i1 %187, label %common.ret, label %ifend70

else63:                                           ; preds = %ifend25
  store i1 false, ptr %memberidx.i132, align 1
  %188 = load ptr, ptr %memberidx21, align 8
  %189 = load ptr, ptr %memberidx4, align 8
  %190 = load ptr, ptr %10, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %188, ptr %189, ptr %190)
  %191 = add nsw i64 %current_vtable_index.0301, 1
  br label %ifend64

ifend64:                                          ; preds = %else63, %ifend88
  %current_vtable_index.1 = phi i64 [ %current_vtable_index.0301, %ifend88 ], [ %191, %else63 ]
  %192 = load ptr, ptr %memberidx99, align 8
  %193 = load ptr, ptr %field, align 8
  %memberidx.i239 = getelementptr inbounds %Array_ClassField_, ptr %192, i64 0, i32 2
  %194 = load i64, ptr %memberidx.i239, align 4
  %memberidx1.i240 = getelementptr inbounds %Array_ClassField_, ptr %192, i64 0, i32 3
  %195 = load i64, ptr %memberidx1.i240, align 4
  %.not.i241 = icmp slt i64 %194, %195
  br i1 %.not.i241, label %Array_ClassField____sl__.exit, label %if.entry.i244

if.entry.i244:                                    ; preds = %ifend64
  %196 = shl i64 %195, 1
  store i64 %196, ptr %memberidx1.i240, align 4
  %memberidx2.i.i243 = getelementptr inbounds %Array_ClassField_, ptr %192, i64 0, i32 1
  %197 = load ptr, ptr %memberidx2.i.i243, align 8
  %198 = shl i64 %195, 4
  %199 = call ptr @realloc(ptr %197, i64 %198)
  store ptr %199, ptr %memberidx2.i.i243, align 8
  br label %Array_ClassField____sl__.exit

Array_ClassField____sl__.exit:                    ; preds = %ifend64, %if.entry.i244
  %200 = load i64, ptr %memberidx.i239, align 4
  %201 = add nsw i64 %200, 1
  store i64 %201, ptr %memberidx.i239, align 4
  %memberidx4.i245 = getelementptr inbounds %Array_ClassField_, ptr %192, i64 0, i32 1
  %202 = load ptr, ptr %memberidx4.i245, align 8
  %ptridx.i246 = getelementptr inbounds ptr, ptr %202, i64 %200
  store ptr %193, ptr %ptridx.i246, align 8
  %203 = add nuw nsw i64 %i.0302, 1
  %204 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %204, i64 0, i32 2
  %205 = load i64, ptr %memberidx2, align 4
  %206 = icmp slt i64 %203, %205
  br i1 %206, label %for.body, label %common.ret

ifend70:                                          ; preds = %if.entry62
  %207 = load ptr, ptr %memberidx15, align 8
  %memberidx73 = getelementptr inbounds %Expression, ptr %183, i64 0, i32 3
  %208 = load ptr, ptr %memberidx73, align 8
  %209 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %207, ptr %208)
  br i1 %209, label %ifend76, label %if.entry74

if.entry74:                                       ; preds = %ifend70
  %210 = load ptr, ptr %memberidx15, align 8
  %211 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %210)
  %212 = load ptr, ptr %211, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %212, i64 0, i32 5
  %213 = load ptr, ptr %memberidx78, align 8
  %214 = call ptr %213(ptr nonnull %211)
  %215 = load ptr, ptr %memberidx65, align 8
  %memberidx80 = getelementptr inbounds %Expression, ptr %215, i64 0, i32 3
  %216 = load ptr, ptr %memberidx80, align 8
  %217 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %216)
  %218 = load ptr, ptr %217, align 8
  %memberidx81 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %218, i64 0, i32 5
  %219 = load ptr, ptr %memberidx81, align 8
  %220 = call ptr %219(ptr nonnull %217)
  %221 = alloca ptr, align 8
  %222 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %221, ptr nonnull @124, ptr %214, ptr %220)
  %223 = load ptr, ptr %221, align 8
  %224 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %224, align 8
  %memberidx.i248 = getelementptr inbounds %string, ptr %224, i64 0, i32 1
  store ptr %223, ptr %memberidx.i248, align 8
  %memberidx1.i249 = getelementptr inbounds %string, ptr %224, i64 0, i32 2
  store i64 %222, ptr %memberidx1.i249, align 4
  %memberidx2.i250 = getelementptr inbounds %string, ptr %224, i64 0, i32 3
  store i64 %222, ptr %memberidx2.i250, align 4
  tail call void @free(ptr %214)
  tail call void @free(ptr %220)
  %225 = load ptr, ptr %memberidx61, align 8
  %226 = load ptr, ptr %225, align 8
  %227 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i252 = getelementptr inbounds %Compiler, ptr %227, i64 0, i32 6
  %228 = load ptr, ptr %memberidx1.i252, align 8
  %229 = call ptr @malloc(i32 24)
  store i64 5, ptr %229, align 4
  %memberidx1.i.i253 = getelementptr inbounds %FloError, ptr %229, i64 0, i32 2
  store ptr %226, ptr %memberidx1.i.i253, align 8
  %memberidx2.i.i254 = getelementptr inbounds %FloError, ptr %229, i64 0, i32 1
  store ptr %224, ptr %memberidx2.i.i254, align 8
  %memberidx.i.i255 = getelementptr inbounds %Array_FloError_, ptr %228, i64 0, i32 2
  %230 = load i64, ptr %memberidx.i.i255, align 4
  %memberidx1.i2.i256 = getelementptr inbounds %Array_FloError_, ptr %228, i64 0, i32 3
  %231 = load i64, ptr %memberidx1.i2.i256, align 4
  %.not.i.i257 = icmp slt i64 %230, %231
  br i1 %.not.i.i257, label %TypeChecker_error.exit263, label %if.entry.i.i260

if.entry.i.i260:                                  ; preds = %if.entry74
  %232 = shl i64 %231, 1
  store i64 %232, ptr %memberidx1.i2.i256, align 4
  %memberidx2.i.i.i259 = getelementptr inbounds %Array_FloError_, ptr %228, i64 0, i32 1
  %233 = load ptr, ptr %memberidx2.i.i.i259, align 8
  %234 = shl i64 %231, 4
  %235 = call ptr @realloc(ptr %233, i64 %234)
  store ptr %235, ptr %memberidx2.i.i.i259, align 8
  br label %TypeChecker_error.exit263

TypeChecker_error.exit263:                        ; preds = %if.entry74, %if.entry.i.i260
  %236 = load i64, ptr %memberidx.i.i255, align 4
  %237 = add nsw i64 %236, 1
  store i64 %237, ptr %memberidx.i.i255, align 4
  %memberidx4.i.i261 = getelementptr inbounds %Array_FloError_, ptr %228, i64 0, i32 1
  %238 = load ptr, ptr %memberidx4.i.i261, align 8
  %ptridx.i.i262 = getelementptr inbounds ptr, ptr %238, i64 %236
  store ptr %229, ptr %ptridx.i.i262, align 8
  br label %ifend76

ifend76:                                          ; preds = %ifend70, %TypeChecker_error.exit263
  %239 = load ptr, ptr %field, align 8
  %memberidx84 = getelementptr inbounds %ClassField, ptr %239, i64 0, i32 5
  %240 = load ptr, ptr %memberidx84, align 8
  %memberidx85 = getelementptr inbounds %Expression, ptr %240, i64 0, i32 1
  %241 = load i1, ptr %memberidx85, align 1
  br i1 %241, label %ifend88, label %if.entry86

if.entry86:                                       ; preds = %ifend76
  %242 = call ptr @malloc(i32 45)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(45) %242, ptr noundef nonnull align 8 dereferenceable(45) @125, i64 45, i1 false)
  %243 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %243, align 8
  %memberidx.i.i264 = getelementptr inbounds %string, ptr %243, i64 0, i32 1
  store ptr %242, ptr %memberidx.i.i264, align 8
  %memberidx1.i.i265 = getelementptr inbounds %string, ptr %243, i64 0, i32 2
  store i64 45, ptr %memberidx1.i.i265, align 4
  %memberidx2.i.i266 = getelementptr inbounds %string, ptr %243, i64 0, i32 3
  store i64 45, ptr %memberidx2.i.i266, align 4
  %244 = load ptr, ptr %field_node, align 8
  %memberidx89 = getelementptr inbounds %FieldNode, ptr %244, i64 0, i32 2
  %245 = load ptr, ptr %memberidx89, align 8
  %246 = load ptr, ptr %245, align 8
  %247 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i268 = getelementptr inbounds %Compiler, ptr %247, i64 0, i32 6
  %248 = load ptr, ptr %memberidx1.i268, align 8
  %249 = call ptr @malloc(i32 24)
  store i64 4, ptr %249, align 4
  %memberidx1.i.i269 = getelementptr inbounds %FloError, ptr %249, i64 0, i32 2
  store ptr %246, ptr %memberidx1.i.i269, align 8
  %memberidx2.i.i270 = getelementptr inbounds %FloError, ptr %249, i64 0, i32 1
  store ptr %243, ptr %memberidx2.i.i270, align 8
  %memberidx.i.i271 = getelementptr inbounds %Array_FloError_, ptr %248, i64 0, i32 2
  %250 = load i64, ptr %memberidx.i.i271, align 4
  %memberidx1.i2.i272 = getelementptr inbounds %Array_FloError_, ptr %248, i64 0, i32 3
  %251 = load i64, ptr %memberidx1.i2.i272, align 4
  %.not.i.i273 = icmp slt i64 %250, %251
  br i1 %.not.i.i273, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend88:                                          ; preds = %ifend76
  %memberidx91 = getelementptr inbounds %ClassField, ptr %239, i64 0, i32 1
  store i1 true, ptr %memberidx91, align 1
  %252 = load ptr, ptr %memberidx92, align 8
  %memberidx93 = getelementptr inbounds %ClassField, ptr %239, i64 0, i32 3
  %253 = load ptr, ptr %memberidx93, align 8
  %254 = load ptr, ptr %239, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %252, ptr %253, ptr %254)
  br label %ifend64
}

define internal fastcc void @TypeChecker_check_module_import(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ImportNode, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StrToken, ptr %3, i64 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp sgt i64 %5, 0
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %if.entry55, %else56, %for.end, %ifend, %TypeChecker_error.exit311, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %2
  %7 = call ptr @malloc(i32 51)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(51) %7, ptr noundef nonnull align 8 dereferenceable(51) @91, i64 51, i1 false)
  %8 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 51, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 51, ptr %memberidx2.i.i, align 4
  %9 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %9, i64 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %11 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %11, i64 0, i32 6
  %12 = load ptr, ptr %memberidx1.i, align 8
  %13 = call ptr @malloc(i32 24)
  store i64 4, ptr %13, align 4
  %memberidx1.i.i88 = getelementptr inbounds %FloError, ptr %13, i64 0, i32 2
  store ptr %10, ptr %memberidx1.i.i88, align 8
  %memberidx2.i.i89 = getelementptr inbounds %FloError, ptr %13, i64 0, i32 1
  store ptr %8, ptr %memberidx2.i.i89, align 8
  %memberidx.i.i90 = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 2
  %14 = load i64, ptr %memberidx.i.i90, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 3
  %15 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %14, %15
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry
  %16 = shl i64 %15, 1
  store i64 %16, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i.i.i, align 8
  %18 = shl i64 %15, 4
  %19 = call ptr @realloc(ptr %17, i64 %18)
  store ptr %19, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry, %if.entry.i.i
  %20 = load i64, ptr %memberidx.i.i90, align 4
  %21 = add nsw i64 %20, 1
  store i64 %21, ptr %memberidx.i.i90, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 1
  %22 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %22, i64 %20
  store ptr %13, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx6 = getelementptr inbounds %StrToken, ptr %3, i64 0, i32 2
  %23 = load ptr, ptr %memberidx6, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %24 = load ptr, ptr %memberidx8, align 8
  %25 = call fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %23, ptr %24)
  %memberidx.i91 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %26 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %Compiler, ptr %26, i64 0, i32 6
  %27 = load ptr, ptr %memberidx1.i92, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i, align 4
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %common.ret, label %ifend11

ifend11:                                          ; preds = %ifend
  %30 = load ptr, ptr %0, align 8
  %memberidx13 = getelementptr inbounds %Module, ptr %25, i64 0, i32 6
  %31 = load ptr, ptr %memberidx13, align 8
  %memberidx.i93 = getelementptr inbounds %Program, ptr %30, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i93, align 8
  %33 = load i64, ptr %31, align 4
  %memberidx.i.i94 = getelementptr inbounds %Array_Module_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i94, align 8
  %ptridx.i.i95 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i.i95, align 8
  %memberidx2.i96 = getelementptr inbounds %Module, ptr %35, i64 0, i32 8
  %36 = load ptr, ptr %memberidx2.i96, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %31, i64 0, i32 1
  %37 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i6.i, align 8
  %40 = load ptr, ptr %1, align 8
  %memberidx15 = getelementptr inbounds %Array_ImportClause_, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx15, align 4
  %42 = icmp sgt i64 %41, 0
  br i1 %42, label %for.entry, label %else17

else17:                                           ; preds = %ifend11
  %memberidx54 = getelementptr inbounds %ImportNode, ptr %1, i64 0, i32 2
  %43 = load ptr, ptr %memberidx54, align 8
  %.not = icmp eq ptr %43, null
  br i1 %.not, label %else56, label %if.entry55

for.entry:                                        ; preds = %ifend11
  %44 = call ptr @malloc(i32 25)
  %memberidx.i97 = getelementptr inbounds %Array_ImportClause_, ptr %40, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i97, align 8
  %46 = load i64, ptr %memberidx15, align 4
  store i1 false, ptr %44, align 1
  %memberidx1.i.i99 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %44, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i99, align 4
  %memberidx2.i.i100 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %44, i64 0, i32 3
  store ptr %45, ptr %memberidx2.i.i100, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %44, i64 0, i32 2
  store i64 %46, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i99, align 4
  %47 = icmp slt i64 %46, 1
  br i1 %47, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx26 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %memberidx30 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 2
  %memberidx.i.i.i138 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %memberidx34 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 4
  %memberidx.i.i.i167 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %memberidx38 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 1
  %memberidx.i.i.i208 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %memberidx42 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 3
  %memberidx.i.i.i246 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %memberidx46 = getelementptr inbounds %Scope, ptr %39, i64 0, i32 6
  %memberidx.i.i.i283 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.incr
  %storemerge342.in = phi ptr [ %45, %for.body.lr.ph ], [ %ptridx.i105, %for.incr ]
  %storemerge337341 = phi i1 [ %47, %for.body.lr.ph ], [ %55, %for.incr ]
  %storemerge342 = load ptr, ptr %storemerge342.in, align 8
  %48 = load ptr, ptr %storemerge342, align 8
  %memberidx22 = getelementptr inbounds %IdentifierToken, ptr %48, i64 0, i32 2
  %49 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %ImportClause, ptr %storemerge342, i64 0, i32 1
  %50 = load ptr, ptr %memberidx23, align 8
  %.not81 = icmp eq ptr %50, null
  br i1 %.not81, label %end, label %true_block

for.incr:                                         ; preds = %Map_string_Generic____getitem__.exit, %if.entry47, %if.entry43, %if.entry39, %if.entry35, %if.entry31
  %51 = load i64, ptr %memberidx1.i.i99, align 4
  %52 = add nsw i64 %51, 1
  store i64 %52, ptr %memberidx1.i.i99, align 4
  %53 = load ptr, ptr %memberidx2.i.i100, align 8
  %ptridx.i105 = getelementptr inbounds ptr, ptr %53, i64 %51
  %54 = load i64, ptr %memberidx3.i.i, align 4
  %55 = icmp sge i64 %51, %54
  br i1 %55, label %for.end, label %for.body

for.end:                                          ; preds = %for.incr, %for.entry
  %storemerge337.lcssa = phi i1 [ %47, %for.entry ], [ %55, %for.incr ]
  store i1 %storemerge337.lcssa, ptr %44, align 1
  tail call void @free(ptr nonnull %44)
  br label %common.ret

true_block:                                       ; preds = %for.body
  %memberidx25 = getelementptr inbounds %IdentifierToken, ptr %50, i64 0, i32 2
  %56 = load ptr, ptr %memberidx25, align 8
  br label %end

end:                                              ; preds = %for.body, %true_block
  %ternary = phi ptr [ %56, %true_block ], [ %49, %for.body ]
  %57 = load ptr, ptr %memberidx26, align 8
  %58 = call fastcc i64 @Map_string_Generic__hash_fnc(ptr %49)
  %memberidx.i107 = getelementptr inbounds %Map_string_Generic_, ptr %57, i64 0, i32 1
  %59 = load i64, ptr %memberidx.i107, align 4
  %60 = srem i64 %58, %59
  %61 = load ptr, ptr %57, align 8
  %ptridx.i108 = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i108, align 8
  %.not.i = icmp eq ptr %62, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %end
  %memberidx1.i.i110 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %memberidx3.i.i113 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %76, %else.i ], [ %60, %while.entry.i.preheader ]
  %63 = load ptr, ptr %57, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %63, i64 %hash.0.i
  %64 = load ptr, ptr %ptridx3.i, align 8
  %65 = load ptr, ptr %64, align 8
  %memberidx.i.i109 = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  %66 = load i64, ptr %memberidx.i.i109, align 4
  %67 = load i64, ptr %memberidx1.i.i110, align 4
  %.not.i.i111 = icmp eq i64 %66, %67
  br i1 %.not.i.i111, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i112 = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  %68 = load ptr, ptr %memberidx2.i.i112, align 8
  %69 = load ptr, ptr %memberidx3.i.i113, align 8
  %70 = call i64 @memcmp(ptr %68, ptr %69, i64 %66)
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %end
  %hash.1.i = phi i64 [ %60, %end ], [ %hash.0.i, %ifend.i.i ], [ %76, %else.i ]
  %72 = load ptr, ptr %57, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %72, i64 %hash.1.i
  %73 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %73, null
  br i1 %.not29.i, label %Map_string_Generic____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %74 = add nsw i64 %hash.0.i, 1
  %75 = load i64, ptr %memberidx.i107, align 4
  %76 = srem i64 %74, %75
  %77 = load ptr, ptr %57, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %77, i64 %76
  %78 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %78, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_Generic_, ptr %73, i64 0, i32 1
  %79 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_Generic____getitem__.exit

Map_string_Generic____getitem__.exit:             ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %79, %if.entry10.i ], [ null, %while.end.i ]
  %.not82 = icmp eq ptr %common.ret.op.i, null
  br i1 %.not82, label %ifend29, label %for.incr

ifend29:                                          ; preds = %Map_string_Generic____getitem__.exit
  %80 = load ptr, ptr %memberidx30, align 8
  %81 = call fastcc i64 @Map_string_ClassId__hash_fnc(ptr %49)
  %memberidx.i114 = getelementptr inbounds %Map_string_ClassId_, ptr %80, i64 0, i32 1
  %82 = load i64, ptr %memberidx.i114, align 4
  %83 = srem i64 %81, %82
  %84 = load ptr, ptr %80, align 8
  %ptridx.i115 = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx.i115, align 8
  %.not.i116 = icmp eq ptr %85, null
  br i1 %.not.i116, label %while.end.i131, label %while.entry.i122.preheader

while.entry.i122.preheader:                       ; preds = %ifend29
  %memberidx1.i.i120 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %memberidx3.i.i124 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  br label %while.entry.i122

while.entry.i122:                                 ; preds = %while.entry.i122.preheader, %else.i134
  %hash.0.i117 = phi i64 [ %99, %else.i134 ], [ %83, %while.entry.i122.preheader ]
  %86 = load ptr, ptr %80, align 8
  %ptridx3.i118 = getelementptr inbounds ptr, ptr %86, i64 %hash.0.i117
  %87 = load ptr, ptr %ptridx3.i118, align 8
  %88 = load ptr, ptr %87, align 8
  %memberidx.i.i119 = getelementptr inbounds %string, ptr %88, i64 0, i32 2
  %89 = load i64, ptr %memberidx.i.i119, align 4
  %90 = load i64, ptr %memberidx1.i.i120, align 4
  %.not.i.i121 = icmp eq i64 %89, %90
  br i1 %.not.i.i121, label %ifend.i.i125, label %else.i134

ifend.i.i125:                                     ; preds = %while.entry.i122
  %memberidx2.i.i123 = getelementptr inbounds %string, ptr %88, i64 0, i32 1
  %91 = load ptr, ptr %memberidx2.i.i123, align 8
  %92 = load ptr, ptr %memberidx3.i.i124, align 8
  %93 = call i64 @memcmp(ptr %91, ptr %92, i64 %89)
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %while.end.i131, label %else.i134

while.end.i131:                                   ; preds = %else.i134, %ifend.i.i125, %ifend29
  %hash.1.i128 = phi i64 [ %83, %ifend29 ], [ %hash.0.i117, %ifend.i.i125 ], [ %99, %else.i134 ]
  %95 = load ptr, ptr %80, align 8
  %ptridx9.i129 = getelementptr inbounds ptr, ptr %95, i64 %hash.1.i128
  %96 = load ptr, ptr %ptridx9.i129, align 8
  %.not29.i130 = icmp eq ptr %96, null
  br i1 %.not29.i130, label %Map_string_ClassId____getitem__.exit, label %if.entry10.i137

else.i134:                                        ; preds = %while.entry.i122, %ifend.i.i125
  %97 = add nsw i64 %hash.0.i117, 1
  %98 = load i64, ptr %memberidx.i114, align 4
  %99 = srem i64 %97, %98
  %100 = load ptr, ptr %80, align 8
  %ptridx7.i132 = getelementptr inbounds ptr, ptr %100, i64 %99
  %101 = load ptr, ptr %ptridx7.i132, align 8
  %.not30.i133 = icmp eq ptr %101, null
  br i1 %.not30.i133, label %while.end.i131, label %while.entry.i122

if.entry10.i137:                                  ; preds = %while.end.i131
  %memberidx15.i136 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %96, i64 0, i32 1
  %102 = load ptr, ptr %memberidx15.i136, align 8
  br label %Map_string_ClassId____getitem__.exit

Map_string_ClassId____getitem__.exit:             ; preds = %while.end.i131, %if.entry10.i137
  %common.ret.op.i135 = phi ptr [ %102, %if.entry10.i137 ], [ null, %while.end.i131 ]
  %.not83 = icmp eq ptr %common.ret.op.i135, null
  br i1 %.not83, label %ifend33, label %if.entry31

if.entry31:                                       ; preds = %Map_string_ClassId____getitem__.exit
  %103 = load ptr, ptr %0, align 8
  %104 = load i64, ptr %memberidx.i.i.i138, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %103, i64 0, i32 1
  %105 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %105, i64 0, i32 1
  %106 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %106, i64 %104
  %107 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx1.i.i139 = getelementptr inbounds %Module, ptr %107, i64 0, i32 6
  %108 = load ptr, ptr %memberidx1.i.i139, align 8
  %109 = load i64, ptr %108, align 4
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %106, i64 %109
  %110 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i140 = getelementptr inbounds %Module, ptr %110, i64 0, i32 8
  %111 = load ptr, ptr %memberidx2.i.i.i140, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ScopeId, ptr %108, i64 0, i32 1
  %112 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Scope_, ptr %111, i64 0, i32 1
  %113 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %113, i64 %112
  %114 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i141 = getelementptr inbounds %Scope, ptr %114, i64 0, i32 2
  %115 = load ptr, ptr %memberidx.i141, align 8
  call fastcc void @Map_string_ClassId____setitem__(ptr %115, ptr %ternary, ptr nonnull %common.ret.op.i135)
  %memberidx1.i142 = getelementptr inbounds %Scope, ptr %114, i64 0, i32 1
  %116 = load ptr, ptr %memberidx1.i142, align 8
  %117 = call ptr @malloc(i32 24)
  %118 = load i64, ptr %common.ret.op.i135, align 4
  %memberidx1.i5.i = getelementptr inbounds %TypeId, ptr %common.ret.op.i135, i64 0, i32 2
  %119 = load i64, ptr %memberidx1.i5.i, align 4
  store i64 3, ptr %117, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %117, i64 0, i32 1
  store i64 %118, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i6.i = getelementptr inbounds %VarId, ptr %117, i64 0, i32 2
  store i64 %119, ptr %memberidx2.i.i6.i, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %116, ptr %ternary, ptr nonnull %117)
  br label %for.incr

ifend33:                                          ; preds = %Map_string_ClassId____getitem__.exit
  %120 = load ptr, ptr %memberidx34, align 8
  %121 = call fastcc i64 @Map_string_EnumId__hash_fnc(ptr %49)
  %memberidx.i143 = getelementptr inbounds %Map_string_EnumId_, ptr %120, i64 0, i32 1
  %122 = load i64, ptr %memberidx.i143, align 4
  %123 = srem i64 %121, %122
  %124 = load ptr, ptr %120, align 8
  %ptridx.i144 = getelementptr inbounds ptr, ptr %124, i64 %123
  %125 = load ptr, ptr %ptridx.i144, align 8
  %.not.i145 = icmp eq ptr %125, null
  br i1 %.not.i145, label %while.end.i160, label %while.entry.i151.preheader

while.entry.i151.preheader:                       ; preds = %ifend33
  %memberidx1.i.i149 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %memberidx3.i.i153 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  br label %while.entry.i151

while.entry.i151:                                 ; preds = %while.entry.i151.preheader, %else.i163
  %hash.0.i146 = phi i64 [ %139, %else.i163 ], [ %123, %while.entry.i151.preheader ]
  %126 = load ptr, ptr %120, align 8
  %ptridx3.i147 = getelementptr inbounds ptr, ptr %126, i64 %hash.0.i146
  %127 = load ptr, ptr %ptridx3.i147, align 8
  %128 = load ptr, ptr %127, align 8
  %memberidx.i.i148 = getelementptr inbounds %string, ptr %128, i64 0, i32 2
  %129 = load i64, ptr %memberidx.i.i148, align 4
  %130 = load i64, ptr %memberidx1.i.i149, align 4
  %.not.i.i150 = icmp eq i64 %129, %130
  br i1 %.not.i.i150, label %ifend.i.i154, label %else.i163

ifend.i.i154:                                     ; preds = %while.entry.i151
  %memberidx2.i.i152 = getelementptr inbounds %string, ptr %128, i64 0, i32 1
  %131 = load ptr, ptr %memberidx2.i.i152, align 8
  %132 = load ptr, ptr %memberidx3.i.i153, align 8
  %133 = call i64 @memcmp(ptr %131, ptr %132, i64 %129)
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %while.end.i160, label %else.i163

while.end.i160:                                   ; preds = %else.i163, %ifend.i.i154, %ifend33
  %hash.1.i157 = phi i64 [ %123, %ifend33 ], [ %hash.0.i146, %ifend.i.i154 ], [ %139, %else.i163 ]
  %135 = load ptr, ptr %120, align 8
  %ptridx9.i158 = getelementptr inbounds ptr, ptr %135, i64 %hash.1.i157
  %136 = load ptr, ptr %ptridx9.i158, align 8
  %.not29.i159 = icmp eq ptr %136, null
  br i1 %.not29.i159, label %Map_string_EnumId____getitem__.exit, label %if.entry10.i166

else.i163:                                        ; preds = %while.entry.i151, %ifend.i.i154
  %137 = add nsw i64 %hash.0.i146, 1
  %138 = load i64, ptr %memberidx.i143, align 4
  %139 = srem i64 %137, %138
  %140 = load ptr, ptr %120, align 8
  %ptridx7.i161 = getelementptr inbounds ptr, ptr %140, i64 %139
  %141 = load ptr, ptr %ptridx7.i161, align 8
  %.not30.i162 = icmp eq ptr %141, null
  br i1 %.not30.i162, label %while.end.i160, label %while.entry.i151

if.entry10.i166:                                  ; preds = %while.end.i160
  %memberidx15.i165 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %136, i64 0, i32 1
  %142 = load ptr, ptr %memberidx15.i165, align 8
  br label %Map_string_EnumId____getitem__.exit

Map_string_EnumId____getitem__.exit:              ; preds = %while.end.i160, %if.entry10.i166
  %common.ret.op.i164 = phi ptr [ %142, %if.entry10.i166 ], [ null, %while.end.i160 ]
  %.not84 = icmp eq ptr %common.ret.op.i164, null
  br i1 %.not84, label %ifend37, label %if.entry35

if.entry35:                                       ; preds = %Map_string_EnumId____getitem__.exit
  %143 = load ptr, ptr %0, align 8
  %144 = load i64, ptr %memberidx.i.i.i167, align 4
  %memberidx1.i.i.i.i168 = getelementptr inbounds %Program, ptr %143, i64 0, i32 1
  %145 = load ptr, ptr %memberidx1.i.i.i.i168, align 8
  %memberidx.i.i.i.i.i169 = getelementptr inbounds %Array_Module_, ptr %145, i64 0, i32 1
  %146 = load ptr, ptr %memberidx.i.i.i.i.i169, align 8
  %ptridx.i.i.i.i.i170 = getelementptr inbounds ptr, ptr %146, i64 %144
  %147 = load ptr, ptr %ptridx.i.i.i.i.i170, align 8
  %memberidx1.i.i171 = getelementptr inbounds %Module, ptr %147, i64 0, i32 6
  %148 = load ptr, ptr %memberidx1.i.i171, align 8
  %149 = load i64, ptr %148, align 4
  %ptridx.i.i.i.i174 = getelementptr inbounds ptr, ptr %146, i64 %149
  %150 = load ptr, ptr %ptridx.i.i.i.i174, align 8
  %memberidx2.i.i.i175 = getelementptr inbounds %Module, ptr %150, i64 0, i32 8
  %151 = load ptr, ptr %memberidx2.i.i.i175, align 8
  %memberidx3.i.i.i176 = getelementptr inbounds %ScopeId, ptr %148, i64 0, i32 1
  %152 = load i64, ptr %memberidx3.i.i.i176, align 4
  %memberidx.i5.i.i.i177 = getelementptr inbounds %Array_Scope_, ptr %151, i64 0, i32 1
  %153 = load ptr, ptr %memberidx.i5.i.i.i177, align 8
  %ptridx.i6.i.i.i178 = getelementptr inbounds ptr, ptr %153, i64 %152
  %154 = load ptr, ptr %ptridx.i6.i.i.i178, align 8
  %memberidx.i179 = getelementptr inbounds %Scope, ptr %154, i64 0, i32 4
  %155 = load ptr, ptr %memberidx.i179, align 8
  call fastcc void @Map_string_EnumId____setitem__(ptr %155, ptr %ternary, ptr nonnull %common.ret.op.i164)
  %memberidx1.i180 = getelementptr inbounds %Scope, ptr %154, i64 0, i32 1
  %156 = load ptr, ptr %memberidx1.i180, align 8
  %157 = call ptr @malloc(i32 24)
  %158 = load i64, ptr %common.ret.op.i164, align 4
  %memberidx1.i5.i181 = getelementptr inbounds %TypeId, ptr %common.ret.op.i164, i64 0, i32 2
  %159 = load i64, ptr %memberidx1.i5.i181, align 4
  store i64 4, ptr %157, align 4
  %memberidx1.i.i.i182 = getelementptr inbounds %VarId, ptr %157, i64 0, i32 1
  store i64 %158, ptr %memberidx1.i.i.i182, align 4
  %memberidx2.i.i6.i183 = getelementptr inbounds %VarId, ptr %157, i64 0, i32 2
  store i64 %159, ptr %memberidx2.i.i6.i183, align 4
  call fastcc void @Map_string_VarId____setitem__(ptr %156, ptr %ternary, ptr nonnull %157)
  br label %for.incr

ifend37:                                          ; preds = %Map_string_EnumId____getitem__.exit
  %160 = load ptr, ptr %memberidx38, align 8
  %161 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr %49)
  %memberidx.i184 = getelementptr inbounds %Map_string_VarId_, ptr %160, i64 0, i32 1
  %162 = load i64, ptr %memberidx.i184, align 4
  %163 = srem i64 %161, %162
  %164 = load ptr, ptr %160, align 8
  %ptridx.i185 = getelementptr inbounds ptr, ptr %164, i64 %163
  %165 = load ptr, ptr %ptridx.i185, align 8
  %.not.i186 = icmp eq ptr %165, null
  br i1 %.not.i186, label %while.end.i201, label %while.entry.i192.preheader

while.entry.i192.preheader:                       ; preds = %ifend37
  %memberidx1.i.i190 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %memberidx3.i.i194 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  br label %while.entry.i192

while.entry.i192:                                 ; preds = %while.entry.i192.preheader, %else.i204
  %hash.0.i187 = phi i64 [ %179, %else.i204 ], [ %163, %while.entry.i192.preheader ]
  %166 = load ptr, ptr %160, align 8
  %ptridx3.i188 = getelementptr inbounds ptr, ptr %166, i64 %hash.0.i187
  %167 = load ptr, ptr %ptridx3.i188, align 8
  %168 = load ptr, ptr %167, align 8
  %memberidx.i.i189 = getelementptr inbounds %string, ptr %168, i64 0, i32 2
  %169 = load i64, ptr %memberidx.i.i189, align 4
  %170 = load i64, ptr %memberidx1.i.i190, align 4
  %.not.i.i191 = icmp eq i64 %169, %170
  br i1 %.not.i.i191, label %ifend.i.i195, label %else.i204

ifend.i.i195:                                     ; preds = %while.entry.i192
  %memberidx2.i.i193 = getelementptr inbounds %string, ptr %168, i64 0, i32 1
  %171 = load ptr, ptr %memberidx2.i.i193, align 8
  %172 = load ptr, ptr %memberidx3.i.i194, align 8
  %173 = call i64 @memcmp(ptr %171, ptr %172, i64 %169)
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %while.end.i201, label %else.i204

while.end.i201:                                   ; preds = %else.i204, %ifend.i.i195, %ifend37
  %hash.1.i198 = phi i64 [ %163, %ifend37 ], [ %hash.0.i187, %ifend.i.i195 ], [ %179, %else.i204 ]
  %175 = load ptr, ptr %160, align 8
  %ptridx9.i199 = getelementptr inbounds ptr, ptr %175, i64 %hash.1.i198
  %176 = load ptr, ptr %ptridx9.i199, align 8
  %.not29.i200 = icmp eq ptr %176, null
  br i1 %.not29.i200, label %Map_string_VarId____getitem__.exit, label %if.entry10.i207

else.i204:                                        ; preds = %while.entry.i192, %ifend.i.i195
  %177 = add nsw i64 %hash.0.i187, 1
  %178 = load i64, ptr %memberidx.i184, align 4
  %179 = srem i64 %177, %178
  %180 = load ptr, ptr %160, align 8
  %ptridx7.i202 = getelementptr inbounds ptr, ptr %180, i64 %179
  %181 = load ptr, ptr %ptridx7.i202, align 8
  %.not30.i203 = icmp eq ptr %181, null
  br i1 %.not30.i203, label %while.end.i201, label %while.entry.i192

if.entry10.i207:                                  ; preds = %while.end.i201
  %memberidx15.i206 = getelementptr inbounds %MapEntry_string_VarId_, ptr %176, i64 0, i32 1
  %182 = load ptr, ptr %memberidx15.i206, align 8
  br label %Map_string_VarId____getitem__.exit

Map_string_VarId____getitem__.exit:               ; preds = %while.end.i201, %if.entry10.i207
  %common.ret.op.i205 = phi ptr [ %182, %if.entry10.i207 ], [ null, %while.end.i201 ]
  %.not85 = icmp eq ptr %common.ret.op.i205, null
  br i1 %.not85, label %ifend41, label %if.entry39

if.entry39:                                       ; preds = %Map_string_VarId____getitem__.exit
  %183 = load ptr, ptr %0, align 8
  %184 = load i64, ptr %memberidx.i.i.i208, align 4
  %memberidx1.i.i.i.i209 = getelementptr inbounds %Program, ptr %183, i64 0, i32 1
  %185 = load ptr, ptr %memberidx1.i.i.i.i209, align 8
  %memberidx.i.i.i.i.i210 = getelementptr inbounds %Array_Module_, ptr %185, i64 0, i32 1
  %186 = load ptr, ptr %memberidx.i.i.i.i.i210, align 8
  %ptridx.i.i.i.i.i211 = getelementptr inbounds ptr, ptr %186, i64 %184
  %187 = load ptr, ptr %ptridx.i.i.i.i.i211, align 8
  %memberidx1.i.i212 = getelementptr inbounds %Module, ptr %187, i64 0, i32 6
  %188 = load ptr, ptr %memberidx1.i.i212, align 8
  %189 = load i64, ptr %188, align 4
  %ptridx.i.i.i.i215 = getelementptr inbounds ptr, ptr %186, i64 %189
  %190 = load ptr, ptr %ptridx.i.i.i.i215, align 8
  %memberidx2.i.i.i216 = getelementptr inbounds %Module, ptr %190, i64 0, i32 8
  %191 = load ptr, ptr %memberidx2.i.i.i216, align 8
  %memberidx3.i.i.i217 = getelementptr inbounds %ScopeId, ptr %188, i64 0, i32 1
  %192 = load i64, ptr %memberidx3.i.i.i217, align 4
  %memberidx.i5.i.i.i218 = getelementptr inbounds %Array_Scope_, ptr %191, i64 0, i32 1
  %193 = load ptr, ptr %memberidx.i5.i.i.i218, align 8
  %ptridx.i6.i.i.i219 = getelementptr inbounds ptr, ptr %193, i64 %192
  %194 = load ptr, ptr %ptridx.i6.i.i.i219, align 8
  %memberidx.i220 = getelementptr inbounds %Scope, ptr %194, i64 0, i32 1
  %195 = load ptr, ptr %memberidx.i220, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %195, ptr %ternary, ptr nonnull %common.ret.op.i205)
  br label %for.incr

ifend41:                                          ; preds = %Map_string_VarId____getitem__.exit
  %196 = load ptr, ptr %memberidx42, align 8
  %197 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr %49)
  %memberidx.i221 = getelementptr inbounds %Map_string_VarId_, ptr %196, i64 0, i32 1
  %198 = load i64, ptr %memberidx.i221, align 4
  %199 = srem i64 %197, %198
  %200 = load ptr, ptr %196, align 8
  %ptridx.i222 = getelementptr inbounds ptr, ptr %200, i64 %199
  %201 = load ptr, ptr %ptridx.i222, align 8
  %.not.i223 = icmp eq ptr %201, null
  br i1 %.not.i223, label %while.end.i238, label %while.entry.i229.preheader

while.entry.i229.preheader:                       ; preds = %ifend41
  %memberidx1.i.i227 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %memberidx3.i.i231 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  br label %while.entry.i229

while.entry.i229:                                 ; preds = %while.entry.i229.preheader, %else.i241
  %hash.0.i224 = phi i64 [ %215, %else.i241 ], [ %199, %while.entry.i229.preheader ]
  %202 = load ptr, ptr %196, align 8
  %ptridx3.i225 = getelementptr inbounds ptr, ptr %202, i64 %hash.0.i224
  %203 = load ptr, ptr %ptridx3.i225, align 8
  %204 = load ptr, ptr %203, align 8
  %memberidx.i.i226 = getelementptr inbounds %string, ptr %204, i64 0, i32 2
  %205 = load i64, ptr %memberidx.i.i226, align 4
  %206 = load i64, ptr %memberidx1.i.i227, align 4
  %.not.i.i228 = icmp eq i64 %205, %206
  br i1 %.not.i.i228, label %ifend.i.i232, label %else.i241

ifend.i.i232:                                     ; preds = %while.entry.i229
  %memberidx2.i.i230 = getelementptr inbounds %string, ptr %204, i64 0, i32 1
  %207 = load ptr, ptr %memberidx2.i.i230, align 8
  %208 = load ptr, ptr %memberidx3.i.i231, align 8
  %209 = call i64 @memcmp(ptr %207, ptr %208, i64 %205)
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %while.end.i238, label %else.i241

while.end.i238:                                   ; preds = %else.i241, %ifend.i.i232, %ifend41
  %hash.1.i235 = phi i64 [ %199, %ifend41 ], [ %hash.0.i224, %ifend.i.i232 ], [ %215, %else.i241 ]
  %211 = load ptr, ptr %196, align 8
  %ptridx9.i236 = getelementptr inbounds ptr, ptr %211, i64 %hash.1.i235
  %212 = load ptr, ptr %ptridx9.i236, align 8
  %.not29.i237 = icmp eq ptr %212, null
  br i1 %.not29.i237, label %Map_string_VarId____getitem__.exit245, label %if.entry10.i244

else.i241:                                        ; preds = %while.entry.i229, %ifend.i.i232
  %213 = add nsw i64 %hash.0.i224, 1
  %214 = load i64, ptr %memberidx.i221, align 4
  %215 = srem i64 %213, %214
  %216 = load ptr, ptr %196, align 8
  %ptridx7.i239 = getelementptr inbounds ptr, ptr %216, i64 %215
  %217 = load ptr, ptr %ptridx7.i239, align 8
  %.not30.i240 = icmp eq ptr %217, null
  br i1 %.not30.i240, label %while.end.i238, label %while.entry.i229

if.entry10.i244:                                  ; preds = %while.end.i238
  %memberidx15.i243 = getelementptr inbounds %MapEntry_string_VarId_, ptr %212, i64 0, i32 1
  %218 = load ptr, ptr %memberidx15.i243, align 8
  br label %Map_string_VarId____getitem__.exit245

Map_string_VarId____getitem__.exit245:            ; preds = %while.end.i238, %if.entry10.i244
  %common.ret.op.i242 = phi ptr [ %218, %if.entry10.i244 ], [ null, %while.end.i238 ]
  %.not86 = icmp eq ptr %common.ret.op.i242, null
  br i1 %.not86, label %ifend45, label %if.entry43

if.entry43:                                       ; preds = %Map_string_VarId____getitem__.exit245
  %219 = load ptr, ptr %0, align 8
  %220 = load i64, ptr %memberidx.i.i.i246, align 4
  %memberidx1.i.i.i.i247 = getelementptr inbounds %Program, ptr %219, i64 0, i32 1
  %221 = load ptr, ptr %memberidx1.i.i.i.i247, align 8
  %memberidx.i.i.i.i.i248 = getelementptr inbounds %Array_Module_, ptr %221, i64 0, i32 1
  %222 = load ptr, ptr %memberidx.i.i.i.i.i248, align 8
  %ptridx.i.i.i.i.i249 = getelementptr inbounds ptr, ptr %222, i64 %220
  %223 = load ptr, ptr %ptridx.i.i.i.i.i249, align 8
  %memberidx1.i.i250 = getelementptr inbounds %Module, ptr %223, i64 0, i32 6
  %224 = load ptr, ptr %memberidx1.i.i250, align 8
  %225 = load i64, ptr %224, align 4
  %ptridx.i.i.i.i253 = getelementptr inbounds ptr, ptr %222, i64 %225
  %226 = load ptr, ptr %ptridx.i.i.i.i253, align 8
  %memberidx2.i.i.i254 = getelementptr inbounds %Module, ptr %226, i64 0, i32 8
  %227 = load ptr, ptr %memberidx2.i.i.i254, align 8
  %memberidx3.i.i.i255 = getelementptr inbounds %ScopeId, ptr %224, i64 0, i32 1
  %228 = load i64, ptr %memberidx3.i.i.i255, align 4
  %memberidx.i5.i.i.i256 = getelementptr inbounds %Array_Scope_, ptr %227, i64 0, i32 1
  %229 = load ptr, ptr %memberidx.i5.i.i.i256, align 8
  %ptridx.i6.i.i.i257 = getelementptr inbounds ptr, ptr %229, i64 %228
  %230 = load ptr, ptr %ptridx.i6.i.i.i257, align 8
  %memberidx.i258 = getelementptr inbounds %Scope, ptr %230, i64 0, i32 3
  %231 = load ptr, ptr %memberidx.i258, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %231, ptr %ternary, ptr nonnull %common.ret.op.i242)
  br label %for.incr

ifend45:                                          ; preds = %Map_string_VarId____getitem__.exit245
  %232 = load ptr, ptr %memberidx46, align 8
  %233 = call fastcc i64 @Map_string_Type__hash_fnc(ptr %49)
  %memberidx.i259 = getelementptr inbounds %Map_string_Type_, ptr %232, i64 0, i32 1
  %234 = load i64, ptr %memberidx.i259, align 4
  %235 = srem i64 %233, %234
  %236 = load ptr, ptr %232, align 8
  %ptridx.i260 = getelementptr inbounds ptr, ptr %236, i64 %235
  %237 = load ptr, ptr %ptridx.i260, align 8
  %.not.i261 = icmp eq ptr %237, null
  br i1 %.not.i261, label %while.end.i276, label %while.entry.i267.preheader

while.entry.i267.preheader:                       ; preds = %ifend45
  %memberidx1.i.i265 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  %memberidx3.i.i269 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  br label %while.entry.i267

while.entry.i267:                                 ; preds = %while.entry.i267.preheader, %else.i279
  %hash.0.i262 = phi i64 [ %251, %else.i279 ], [ %235, %while.entry.i267.preheader ]
  %238 = load ptr, ptr %232, align 8
  %ptridx3.i263 = getelementptr inbounds ptr, ptr %238, i64 %hash.0.i262
  %239 = load ptr, ptr %ptridx3.i263, align 8
  %240 = load ptr, ptr %239, align 8
  %memberidx.i.i264 = getelementptr inbounds %string, ptr %240, i64 0, i32 2
  %241 = load i64, ptr %memberidx.i.i264, align 4
  %242 = load i64, ptr %memberidx1.i.i265, align 4
  %.not.i.i266 = icmp eq i64 %241, %242
  br i1 %.not.i.i266, label %ifend.i.i270, label %else.i279

ifend.i.i270:                                     ; preds = %while.entry.i267
  %memberidx2.i.i268 = getelementptr inbounds %string, ptr %240, i64 0, i32 1
  %243 = load ptr, ptr %memberidx2.i.i268, align 8
  %244 = load ptr, ptr %memberidx3.i.i269, align 8
  %245 = call i64 @memcmp(ptr %243, ptr %244, i64 %241)
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %while.end.i276, label %else.i279

while.end.i276:                                   ; preds = %else.i279, %ifend.i.i270, %ifend45
  %hash.1.i273 = phi i64 [ %235, %ifend45 ], [ %hash.0.i262, %ifend.i.i270 ], [ %251, %else.i279 ]
  %247 = load ptr, ptr %232, align 8
  %ptridx9.i274 = getelementptr inbounds ptr, ptr %247, i64 %hash.1.i273
  %248 = load ptr, ptr %ptridx9.i274, align 8
  %.not29.i275 = icmp eq ptr %248, null
  br i1 %.not29.i275, label %Map_string_Type____getitem__.exit, label %if.entry10.i282

else.i279:                                        ; preds = %while.entry.i267, %ifend.i.i270
  %249 = add nsw i64 %hash.0.i262, 1
  %250 = load i64, ptr %memberidx.i259, align 4
  %251 = srem i64 %249, %250
  %252 = load ptr, ptr %232, align 8
  %ptridx7.i277 = getelementptr inbounds ptr, ptr %252, i64 %251
  %253 = load ptr, ptr %ptridx7.i277, align 8
  %.not30.i278 = icmp eq ptr %253, null
  br i1 %.not30.i278, label %while.end.i276, label %while.entry.i267

if.entry10.i282:                                  ; preds = %while.end.i276
  %memberidx15.i281 = getelementptr inbounds %MapEntry_string_Type_, ptr %248, i64 0, i32 1
  %254 = load ptr, ptr %memberidx15.i281, align 8
  br label %Map_string_Type____getitem__.exit

Map_string_Type____getitem__.exit:                ; preds = %while.end.i276, %if.entry10.i282
  %common.ret.op.i280 = phi ptr [ %254, %if.entry10.i282 ], [ null, %while.end.i276 ]
  %.not87 = icmp eq ptr %common.ret.op.i280, null
  br i1 %.not87, label %else48, label %if.entry47

if.entry47:                                       ; preds = %Map_string_Type____getitem__.exit
  %255 = load ptr, ptr %0, align 8
  %256 = load i64, ptr %memberidx.i.i.i283, align 4
  %memberidx1.i.i.i.i284 = getelementptr inbounds %Program, ptr %255, i64 0, i32 1
  %257 = load ptr, ptr %memberidx1.i.i.i.i284, align 8
  %memberidx.i.i.i.i.i285 = getelementptr inbounds %Array_Module_, ptr %257, i64 0, i32 1
  %258 = load ptr, ptr %memberidx.i.i.i.i.i285, align 8
  %ptridx.i.i.i.i.i286 = getelementptr inbounds ptr, ptr %258, i64 %256
  %259 = load ptr, ptr %ptridx.i.i.i.i.i286, align 8
  %memberidx1.i.i287 = getelementptr inbounds %Module, ptr %259, i64 0, i32 6
  %260 = load ptr, ptr %memberidx1.i.i287, align 8
  %261 = load i64, ptr %260, align 4
  %ptridx.i.i.i.i290 = getelementptr inbounds ptr, ptr %258, i64 %261
  %262 = load ptr, ptr %ptridx.i.i.i.i290, align 8
  %memberidx2.i.i.i291 = getelementptr inbounds %Module, ptr %262, i64 0, i32 8
  %263 = load ptr, ptr %memberidx2.i.i.i291, align 8
  %memberidx3.i.i.i292 = getelementptr inbounds %ScopeId, ptr %260, i64 0, i32 1
  %264 = load i64, ptr %memberidx3.i.i.i292, align 4
  %memberidx.i5.i.i.i293 = getelementptr inbounds %Array_Scope_, ptr %263, i64 0, i32 1
  %265 = load ptr, ptr %memberidx.i5.i.i.i293, align 8
  %ptridx.i6.i.i.i294 = getelementptr inbounds ptr, ptr %265, i64 %264
  %266 = load ptr, ptr %ptridx.i6.i.i.i294, align 8
  %memberidx.i295 = getelementptr inbounds %Scope, ptr %266, i64 0, i32 6
  %267 = load ptr, ptr %memberidx.i295, align 8
  call fastcc void @Map_string_Type____setitem__(ptr %267, ptr %ternary, ptr nonnull %common.ret.op.i280)
  br label %for.incr

else48:                                           ; preds = %Map_string_Type____getitem__.exit
  store i1 %storemerge337341, ptr %44, align 1
  %268 = load ptr, ptr %49, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %268, i64 0, i32 5
  %269 = load ptr, ptr %memberidx50, align 8
  %270 = call ptr %269(ptr nonnull %49)
  %271 = load ptr, ptr %23, align 8
  %memberidx51 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %271, i64 0, i32 5
  %272 = load ptr, ptr %memberidx51, align 8
  %273 = call ptr %272(ptr nonnull %23)
  %274 = alloca ptr, align 8
  %275 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %274, ptr nonnull @92, ptr %270, ptr %273)
  %276 = load ptr, ptr %274, align 8
  %277 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %277, align 8
  %memberidx.i296 = getelementptr inbounds %string, ptr %277, i64 0, i32 1
  store ptr %276, ptr %memberidx.i296, align 8
  %memberidx1.i297 = getelementptr inbounds %string, ptr %277, i64 0, i32 2
  store i64 %275, ptr %memberidx1.i297, align 4
  %memberidx2.i298 = getelementptr inbounds %string, ptr %277, i64 0, i32 3
  store i64 %275, ptr %memberidx2.i298, align 4
  tail call void @free(ptr %270)
  tail call void @free(ptr %273)
  %278 = load ptr, ptr %storemerge342, align 8
  %memberidx53 = getelementptr inbounds %Token, ptr %278, i64 0, i32 1
  %279 = load ptr, ptr %memberidx53, align 8
  %280 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i300 = getelementptr inbounds %Compiler, ptr %280, i64 0, i32 6
  %281 = load ptr, ptr %memberidx1.i300, align 8
  %282 = call ptr @malloc(i32 24)
  store i64 1, ptr %282, align 4
  %memberidx1.i.i301 = getelementptr inbounds %FloError, ptr %282, i64 0, i32 2
  store ptr %279, ptr %memberidx1.i.i301, align 8
  %memberidx2.i.i302 = getelementptr inbounds %FloError, ptr %282, i64 0, i32 1
  store ptr %277, ptr %memberidx2.i.i302, align 8
  %memberidx.i.i303 = getelementptr inbounds %Array_FloError_, ptr %281, i64 0, i32 2
  %283 = load i64, ptr %memberidx.i.i303, align 4
  %memberidx1.i2.i304 = getelementptr inbounds %Array_FloError_, ptr %281, i64 0, i32 3
  %284 = load i64, ptr %memberidx1.i2.i304, align 4
  %.not.i.i305 = icmp slt i64 %283, %284
  br i1 %.not.i.i305, label %TypeChecker_error.exit311, label %if.entry.i.i308

if.entry.i.i308:                                  ; preds = %else48
  %285 = shl i64 %284, 1
  store i64 %285, ptr %memberidx1.i2.i304, align 4
  %memberidx2.i.i.i307 = getelementptr inbounds %Array_FloError_, ptr %281, i64 0, i32 1
  %286 = load ptr, ptr %memberidx2.i.i.i307, align 8
  %287 = shl i64 %284, 4
  %288 = call ptr @realloc(ptr %286, i64 %287)
  store ptr %288, ptr %memberidx2.i.i.i307, align 8
  br label %TypeChecker_error.exit311

TypeChecker_error.exit311:                        ; preds = %else48, %if.entry.i.i308
  %289 = load i64, ptr %memberidx.i.i303, align 4
  %290 = add nsw i64 %289, 1
  store i64 %290, ptr %memberidx.i.i303, align 4
  %memberidx4.i.i309 = getelementptr inbounds %Array_FloError_, ptr %281, i64 0, i32 1
  %291 = load ptr, ptr %memberidx4.i.i309, align 8
  %ptridx.i.i310 = getelementptr inbounds ptr, ptr %291, i64 %289
  store ptr %282, ptr %ptridx.i.i310, align 8
  br label %common.ret

if.entry55:                                       ; preds = %else17
  %memberidx59 = getelementptr inbounds %IdentifierToken, ptr %43, i64 0, i32 2
  %292 = load ptr, ptr %memberidx59, align 8
  %memberidx.i.i312 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %293 = load i64, ptr %memberidx.i.i312, align 4
  %ptridx.i.i.i.i315 = getelementptr inbounds ptr, ptr %34, i64 %293
  %294 = load ptr, ptr %ptridx.i.i.i.i315, align 8
  %memberidx1.i316 = getelementptr inbounds %Module, ptr %294, i64 0, i32 6
  %295 = load ptr, ptr %memberidx1.i316, align 8
  %296 = load i64, ptr %295, align 4
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %34, i64 %296
  %297 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i318 = getelementptr inbounds %Module, ptr %297, i64 0, i32 8
  %298 = load ptr, ptr %memberidx2.i.i318, align 8
  %memberidx3.i.i319 = getelementptr inbounds %ScopeId, ptr %295, i64 0, i32 1
  %299 = load i64, ptr %memberidx3.i.i319, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %298, i64 0, i32 1
  %300 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %300, i64 %299
  %301 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx60 = getelementptr inbounds %Scope, ptr %301, i64 0, i32 1
  %302 = load ptr, ptr %memberidx60, align 8
  %303 = tail call ptr @malloc(i32 32)
  %304 = load ptr, ptr %39, align 8
  %305 = load i64, ptr %304, align 4
  %memberidx1.i320 = getelementptr inbounds %ScopeId, ptr %304, i64 0, i32 1
  %306 = load i64, ptr %memberidx1.i320, align 4
  store i64 5, ptr %303, align 4
  %memberidx1.i.i321 = getelementptr inbounds %VarId, ptr %303, i64 0, i32 1
  store i64 %305, ptr %memberidx1.i.i321, align 4
  %memberidx2.i.i322 = getelementptr inbounds %VarId, ptr %303, i64 0, i32 2
  store i64 %306, ptr %memberidx2.i.i322, align 4
  %memberidx2.i323 = getelementptr inbounds %ModuleVarId, ptr %303, i64 0, i32 3
  store ptr %304, ptr %memberidx2.i323, align 8
  call fastcc void @Map_string_VarId____setitem__(ptr %302, ptr %292, ptr nonnull %303)
  br label %common.ret

else56:                                           ; preds = %else17
  call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %0, ptr %25)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_member_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = call ptr @malloc(i32 8)
  store i64 20, ptr %3, align 4
  %memberidx = getelementptr inbounds %MemberExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %TypeChecker_error.exit412, %if.entry83, %TypeChecker_error.exit392, %Array_Expression____sl__.exit, %TypeChecker_error.exit305, %TypeChecker_error.exit266, %TypeChecker_error.exit253, %TypeChecker_error.exit165, %TypeChecker_error.exit, %ifend6
  %common.ret.op = phi ptr [ %17, %ifend6 ], [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit165 ], [ null, %TypeChecker_error.exit253 ], [ null, %TypeChecker_error.exit266 ], [ null, %TypeChecker_error.exit305 ], [ %274, %Array_Expression____sl__.exit ], [ null, %TypeChecker_error.exit392 ], [ %335, %if.entry83 ], [ null, %TypeChecker_error.exit412 ], [ null, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %prop_owner_type = alloca ptr, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  store ptr %10, ptr %prop_owner_type, align 8
  %memberidx2 = getelementptr inbounds %MemberExpressionNode, ptr %1, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx3, align 8
  %prop_ty = alloca ptr, align 8
  %13 = call ptr @malloc(i32 8)
  store i64 20, ptr %13, align 4
  store ptr %13, ptr %prop_ty, align 8
  %prop_id = alloca ptr, align 8
  store ptr null, ptr %prop_id, align 8
  %14 = call fastcc i1 @is_object(ptr %10)
  %15 = load i64, ptr %10, align 4
  br i1 %14, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %16 = icmp eq i64 %15, 19
  br i1 %16, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %if.entry4
  %prop_owner_type.promoted = load ptr, ptr %prop_owner_type, align 8
  br label %while.entry

else5:                                            ; preds = %ifend
  switch i64 %15, label %else84 [
    i64 16, label %if.entry27
    i64 13, label %if.entry60
    i64 17, label %if.entry83
  ]

ifend6:                                           ; preds = %get_class_prop_type.exit289, %ifend53, %get_class_prop_type.exit
  %17 = tail call ptr @malloc(i32 41)
  %18 = load ptr, ptr %prop_id, align 8
  %19 = load ptr, ptr %prop_ty, align 8
  store i64 8, ptr %17, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %17, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %17, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i138 = getelementptr inbounds %MemberExpression, ptr %17, i64 0, i32 4
  store ptr %5, ptr %memberidx.i138, align 8
  %memberidx1.i139 = getelementptr inbounds %MemberExpression, ptr %17, i64 0, i32 5
  store ptr %18, ptr %memberidx1.i139, align 8
  %memberidx2.i140 = getelementptr inbounds %Expression, ptr %17, i64 0, i32 3
  store ptr %19, ptr %memberidx2.i140, align 8
  br label %common.ret

while.entry:                                      ; preds = %while.entry.preheader, %while.entry
  %20 = phi ptr [ %prop_owner_type.promoted, %while.entry.preheader ], [ %21, %while.entry ]
  %memberidx8 = getelementptr inbounds %GenericType, ptr %20, i64 0, i32 3
  %21 = load ptr, ptr %memberidx8, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 19
  br i1 %23, label %while.entry, label %while.end.loopexit

while.end.loopexit:                               ; preds = %while.entry
  store ptr %21, ptr %prop_owner_type, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry4
  %24 = load ptr, ptr %0, align 8
  %25 = load ptr, ptr %prop_owner_type, align 8
  %26 = call fastcc ptr @get_class_from_type(ptr %24, ptr %25)
  %memberidx11 = getelementptr inbounds %Class, ptr %26, i64 0, i32 6
  %27 = load ptr, ptr %memberidx11, align 8
  %28 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %12)
  %memberidx.i141 = getelementptr inbounds %Map_string_PropId_, ptr %27, i64 0, i32 1
  %29 = load i64, ptr %memberidx.i141, align 4
  %30 = srem i64 %28, %29
  %31 = load ptr, ptr %27, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %32, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %while.end
  %memberidx1.i.i143 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %46, %else.i ], [ %30, %while.entry.i.preheader ]
  %33 = load ptr, ptr %27, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %33, i64 %hash.0.i
  %34 = load ptr, ptr %ptridx3.i, align 8
  %35 = load ptr, ptr %34, align 8
  %memberidx.i.i142 = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  %36 = load i64, ptr %memberidx.i.i142, align 4
  %37 = load i64, ptr %memberidx1.i.i143, align 4
  %.not.i.i = icmp eq i64 %36, %37
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  %38 = load ptr, ptr %memberidx2.i.i, align 8
  %39 = load ptr, ptr %memberidx3.i.i, align 8
  %40 = call i64 @memcmp(ptr %38, ptr %39, i64 %36)
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %while.end
  %hash.1.i = phi i64 [ %30, %while.end ], [ %hash.0.i, %ifend.i.i ], [ %46, %else.i ]
  %42 = load ptr, ptr %27, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %42, i64 %hash.1.i
  %43 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %43, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %44 = add nsw i64 %hash.0.i, 1
  %45 = load i64, ptr %memberidx.i141, align 4
  %46 = srem i64 %44, %45
  %47 = load ptr, ptr %27, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %48, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %43, i64 0, i32 1
  %49 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %49, %if.entry10.i ], [ null, %while.end.i ]
  store ptr %common.ret.op.i, ptr %prop_id, align 8
  %50 = icmp eq ptr %common.ret.op.i, null
  br i1 %50, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %Map_string_PropId____getitem__.exit
  %51 = load ptr, ptr %12, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx15, align 8
  %53 = call ptr %52(ptr nonnull %12)
  %memberidx16 = getelementptr inbounds %Class, ptr %26, i64 0, i32 1
  %54 = load ptr, ptr %memberidx16, align 8
  %55 = load ptr, ptr %54, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %55, i64 0, i32 5
  %56 = load ptr, ptr %memberidx17, align 8
  %57 = call ptr %56(ptr nonnull %54)
  %58 = alloca ptr, align 8
  %59 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %58, ptr nonnull @174, ptr %53, ptr %57)
  %60 = load ptr, ptr %58, align 8
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i144 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 %59, ptr %memberidx1.i145, align 4
  %memberidx2.i146 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 %59, ptr %memberidx2.i146, align 4
  tail call void @free(ptr %53)
  tail call void @free(ptr %57)
  %62 = load ptr, ptr %memberidx2, align 8
  %memberidx19 = getelementptr inbounds %Token, ptr %62, i64 0, i32 1
  %63 = load ptr, ptr %memberidx19, align 8
  %64 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i148 = getelementptr inbounds %Compiler, ptr %64, i64 0, i32 6
  %65 = load ptr, ptr %memberidx1.i148, align 8
  %66 = call ptr @malloc(i32 24)
  store i64 1, ptr %66, align 4
  %memberidx1.i.i149 = getelementptr inbounds %FloError, ptr %66, i64 0, i32 2
  store ptr %63, ptr %memberidx1.i.i149, align 8
  %memberidx2.i.i150 = getelementptr inbounds %FloError, ptr %66, i64 0, i32 1
  store ptr %61, ptr %memberidx2.i.i150, align 8
  %memberidx.i.i151 = getelementptr inbounds %Array_FloError_, ptr %65, i64 0, i32 2
  %67 = load i64, ptr %memberidx.i.i151, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %65, i64 0, i32 3
  %68 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i152 = icmp slt i64 %67, %68
  br i1 %.not.i.i152, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry12
  %69 = shl i64 %68, 1
  store i64 %69, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %65, i64 0, i32 1
  %70 = load ptr, ptr %memberidx2.i.i.i, align 8
  %71 = shl i64 %68, 4
  %72 = call ptr @realloc(ptr %70, i64 %71)
  store ptr %72, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry12, %if.entry.i.i
  %73 = load i64, ptr %memberidx.i.i151, align 4
  %74 = add nsw i64 %73, 1
  store i64 %74, ptr %memberidx.i.i151, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %65, i64 0, i32 1
  %75 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %75, i64 %73
  store ptr %66, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend14:                                          ; preds = %Map_string_PropId____getitem__.exit
  %76 = call fastcc ptr @TypeChecker_check_member_access(ptr nonnull %0, ptr nonnull %common.ret.op.i)
  %.not137 = icmp eq ptr %76, null
  br i1 %.not137, label %ifend22, label %if.entry20

if.entry20:                                       ; preds = %ifend14
  %77 = load ptr, ptr %memberidx2, align 8
  %memberidx24 = getelementptr inbounds %Token, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx24, align 8
  %79 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i154 = getelementptr inbounds %Compiler, ptr %79, i64 0, i32 6
  %80 = load ptr, ptr %memberidx1.i154, align 8
  %81 = call ptr @malloc(i32 24)
  store i64 4, ptr %81, align 4
  %memberidx1.i.i155 = getelementptr inbounds %FloError, ptr %81, i64 0, i32 2
  store ptr %78, ptr %memberidx1.i.i155, align 8
  %memberidx2.i.i156 = getelementptr inbounds %FloError, ptr %81, i64 0, i32 1
  store ptr %76, ptr %memberidx2.i.i156, align 8
  %memberidx.i.i157 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 2
  %82 = load i64, ptr %memberidx.i.i157, align 4
  %memberidx1.i2.i158 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 3
  %83 = load i64, ptr %memberidx1.i2.i158, align 4
  %.not.i.i159 = icmp slt i64 %82, %83
  br i1 %.not.i.i159, label %TypeChecker_error.exit165, label %if.entry.i.i162

if.entry.i.i162:                                  ; preds = %if.entry20
  %84 = shl i64 %83, 1
  store i64 %84, ptr %memberidx1.i2.i158, align 4
  %memberidx2.i.i.i161 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 1
  %85 = load ptr, ptr %memberidx2.i.i.i161, align 8
  %86 = shl i64 %83, 4
  %87 = call ptr @realloc(ptr %85, i64 %86)
  store ptr %87, ptr %memberidx2.i.i.i161, align 8
  br label %TypeChecker_error.exit165

TypeChecker_error.exit165:                        ; preds = %if.entry20, %if.entry.i.i162
  %88 = load i64, ptr %memberidx.i.i157, align 4
  %89 = add nsw i64 %88, 1
  store i64 %89, ptr %memberidx.i.i157, align 4
  %memberidx4.i.i163 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 1
  %90 = load ptr, ptr %memberidx4.i.i163, align 8
  %ptridx.i.i164 = getelementptr inbounds ptr, ptr %90, i64 %88
  store ptr %81, ptr %ptridx.i.i164, align 8
  br label %common.ret

ifend22:                                          ; preds = %ifend14
  %91 = load ptr, ptr %0, align 8
  %memberidx.i.i166 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i.i166, align 8
  %memberidx.i.i.i167 = getelementptr inbounds %Program, ptr %91, i64 0, i32 1
  %93 = load ptr, ptr %memberidx.i.i.i167, align 8
  %94 = load i64, ptr %92, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %93, i64 0, i32 1
  %95 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %95, i64 %94
  %96 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i168 = getelementptr inbounds %Module, ptr %96, i64 0, i32 4
  %97 = load ptr, ptr %memberidx2.i.i.i168, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %92, i64 0, i32 2
  %98 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %97, i64 0, i32 1
  %99 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %99, i64 %98
  %100 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %101 = load i64, ptr %common.ret.op.i, align 4
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend22
  %memberidx1.i170 = getelementptr inbounds %Class, ptr %100, i64 0, i32 5
  %103 = load ptr, ptr %memberidx1.i170, align 8
  %memberidx2.i171 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %104 = load i64, ptr %memberidx2.i171, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %103, i64 0, i32 1
  %105 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %105, i64 %104
  %106 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %106, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend22
  %memberidx4.i = getelementptr inbounds %Class, ptr %100, i64 0, i32 4
  %107 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %108 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i172 = getelementptr inbounds ptr, ptr %109, i64 %108
  %110 = load ptr, ptr %ptridx.i.i172, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %110, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i169 = load ptr, ptr %common.ret.op.in.i, align 8
  store ptr %common.ret.op.i169, ptr %prop_ty, align 8
  br label %ifend6

if.entry27:                                       ; preds = %else5
  %memberidx30 = getelementptr inbounds %VarAccessExpression, ptr %5, i64 0, i32 4
  %111 = load ptr, ptr %memberidx30, align 8
  %112 = load i64, ptr %111, align 4
  %113 = icmp eq i64 %112, 3
  %memberidx.i173 = getelementptr inbounds %VarId, ptr %111, i64 0, i32 1
  %114 = load i64, ptr %memberidx.i173, align 4
  %115 = load ptr, ptr %0, align 8
  %memberidx1.i.i174 = getelementptr inbounds %Program, ptr %115, i64 0, i32 1
  %116 = load ptr, ptr %memberidx1.i.i174, align 8
  %memberidx.i.i.i175 = getelementptr inbounds %Array_Module_, ptr %116, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i.i.i175, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %117, i64 %114
  %118 = load ptr, ptr %ptridx.i.i.i, align 8
  br i1 %113, label %if.entry32, label %else33

if.entry32:                                       ; preds = %if.entry27
  %memberidx1.i176 = getelementptr inbounds %Module, ptr %118, i64 0, i32 4
  %119 = load ptr, ptr %memberidx1.i176, align 8
  %memberidx2.i177 = getelementptr inbounds %VarId, ptr %111, i64 0, i32 2
  %120 = load i64, ptr %memberidx2.i177, align 4
  %memberidx.i.i178 = getelementptr inbounds %Array_Class_, ptr %119, i64 0, i32 1
  %121 = load ptr, ptr %memberidx.i.i178, align 8
  %ptridx.i.i179 = getelementptr inbounds ptr, ptr %121, i64 %120
  %122 = load ptr, ptr %ptridx.i.i179, align 8
  %memberidx35 = getelementptr inbounds %Class, ptr %122, i64 0, i32 7
  %123 = load ptr, ptr %memberidx35, align 8
  %124 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %12)
  %memberidx.i180 = getelementptr inbounds %Map_string_PropId_, ptr %123, i64 0, i32 1
  %125 = load i64, ptr %memberidx.i180, align 4
  %126 = srem i64 %124, %125
  %127 = load ptr, ptr %123, align 8
  %ptridx.i181 = getelementptr inbounds ptr, ptr %127, i64 %126
  %128 = load ptr, ptr %ptridx.i181, align 8
  %.not.i182 = icmp eq ptr %128, null
  br i1 %.not.i182, label %while.end.i197, label %while.entry.i188.preheader

while.entry.i188.preheader:                       ; preds = %if.entry32
  %memberidx1.i.i186 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %memberidx3.i.i190 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  br label %while.entry.i188

while.entry.i188:                                 ; preds = %while.entry.i188.preheader, %else.i200
  %hash.0.i183 = phi i64 [ %142, %else.i200 ], [ %126, %while.entry.i188.preheader ]
  %129 = load ptr, ptr %123, align 8
  %ptridx3.i184 = getelementptr inbounds ptr, ptr %129, i64 %hash.0.i183
  %130 = load ptr, ptr %ptridx3.i184, align 8
  %131 = load ptr, ptr %130, align 8
  %memberidx.i.i185 = getelementptr inbounds %string, ptr %131, i64 0, i32 2
  %132 = load i64, ptr %memberidx.i.i185, align 4
  %133 = load i64, ptr %memberidx1.i.i186, align 4
  %.not.i.i187 = icmp eq i64 %132, %133
  br i1 %.not.i.i187, label %ifend.i.i191, label %else.i200

ifend.i.i191:                                     ; preds = %while.entry.i188
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %131, i64 0, i32 1
  %134 = load ptr, ptr %memberidx2.i.i189, align 8
  %135 = load ptr, ptr %memberidx3.i.i190, align 8
  %136 = call i64 @memcmp(ptr %134, ptr %135, i64 %132)
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %while.end.i197, label %else.i200

while.end.i197:                                   ; preds = %else.i200, %ifend.i.i191, %if.entry32
  %hash.1.i194 = phi i64 [ %126, %if.entry32 ], [ %hash.0.i183, %ifend.i.i191 ], [ %142, %else.i200 ]
  %138 = load ptr, ptr %123, align 8
  %ptridx9.i195 = getelementptr inbounds ptr, ptr %138, i64 %hash.1.i194
  %139 = load ptr, ptr %ptridx9.i195, align 8
  %.not29.i196 = icmp eq ptr %139, null
  br i1 %.not29.i196, label %Map_string_PropId____getitem__.exit204, label %if.entry10.i203

else.i200:                                        ; preds = %while.entry.i188, %ifend.i.i191
  %140 = add nsw i64 %hash.0.i183, 1
  %141 = load i64, ptr %memberidx.i180, align 4
  %142 = srem i64 %140, %141
  %143 = load ptr, ptr %123, align 8
  %ptridx7.i198 = getelementptr inbounds ptr, ptr %143, i64 %142
  %144 = load ptr, ptr %ptridx7.i198, align 8
  %.not30.i199 = icmp eq ptr %144, null
  br i1 %.not30.i199, label %while.end.i197, label %while.entry.i188

if.entry10.i203:                                  ; preds = %while.end.i197
  %memberidx15.i202 = getelementptr inbounds %MapEntry_string_PropId_, ptr %139, i64 0, i32 1
  %145 = load ptr, ptr %memberidx15.i202, align 8
  br label %Map_string_PropId____getitem__.exit204

Map_string_PropId____getitem__.exit204:           ; preds = %while.end.i197, %if.entry10.i203
  %common.ret.op.i201 = phi ptr [ %145, %if.entry10.i203 ], [ null, %while.end.i197 ]
  store ptr %common.ret.op.i201, ptr %prop_id, align 8
  %146 = icmp eq ptr %common.ret.op.i201, null
  br i1 %146, label %if.entry36, label %ifend38

else33:                                           ; preds = %if.entry27
  %memberidx1.i209 = getelementptr inbounds %Module, ptr %118, i64 0, i32 7
  %147 = load ptr, ptr %memberidx1.i209, align 8
  %memberidx2.i210 = getelementptr inbounds %VarId, ptr %111, i64 0, i32 2
  %148 = load i64, ptr %memberidx2.i210, align 4
  %memberidx.i.i211 = getelementptr inbounds %Array_Enum_, ptr %147, i64 0, i32 1
  %149 = load ptr, ptr %memberidx.i.i211, align 8
  %ptridx.i.i212 = getelementptr inbounds ptr, ptr %149, i64 %148
  %150 = load ptr, ptr %ptridx.i.i212, align 8
  %memberidx50 = getelementptr inbounds %Enum, ptr %150, i64 0, i32 3
  %151 = load ptr, ptr %memberidx50, align 8
  %152 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %12)
  %memberidx.i213 = getelementptr inbounds %Map_string_PropId_, ptr %151, i64 0, i32 1
  %153 = load i64, ptr %memberidx.i213, align 4
  %154 = srem i64 %152, %153
  %155 = load ptr, ptr %151, align 8
  %ptridx.i214 = getelementptr inbounds ptr, ptr %155, i64 %154
  %156 = load ptr, ptr %ptridx.i214, align 8
  %.not.i215 = icmp eq ptr %156, null
  br i1 %.not.i215, label %while.end.i230, label %while.entry.i221.preheader

while.entry.i221.preheader:                       ; preds = %else33
  %memberidx1.i.i219 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %memberidx3.i.i223 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  br label %while.entry.i221

while.entry.i221:                                 ; preds = %while.entry.i221.preheader, %else.i233
  %hash.0.i216 = phi i64 [ %170, %else.i233 ], [ %154, %while.entry.i221.preheader ]
  %157 = load ptr, ptr %151, align 8
  %ptridx3.i217 = getelementptr inbounds ptr, ptr %157, i64 %hash.0.i216
  %158 = load ptr, ptr %ptridx3.i217, align 8
  %159 = load ptr, ptr %158, align 8
  %memberidx.i.i218 = getelementptr inbounds %string, ptr %159, i64 0, i32 2
  %160 = load i64, ptr %memberidx.i.i218, align 4
  %161 = load i64, ptr %memberidx1.i.i219, align 4
  %.not.i.i220 = icmp eq i64 %160, %161
  br i1 %.not.i.i220, label %ifend.i.i224, label %else.i233

ifend.i.i224:                                     ; preds = %while.entry.i221
  %memberidx2.i.i222 = getelementptr inbounds %string, ptr %159, i64 0, i32 1
  %162 = load ptr, ptr %memberidx2.i.i222, align 8
  %163 = load ptr, ptr %memberidx3.i.i223, align 8
  %164 = call i64 @memcmp(ptr %162, ptr %163, i64 %160)
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %while.end.i230, label %else.i233

while.end.i230:                                   ; preds = %else.i233, %ifend.i.i224, %else33
  %hash.1.i227 = phi i64 [ %154, %else33 ], [ %hash.0.i216, %ifend.i.i224 ], [ %170, %else.i233 ]
  %166 = load ptr, ptr %151, align 8
  %ptridx9.i228 = getelementptr inbounds ptr, ptr %166, i64 %hash.1.i227
  %167 = load ptr, ptr %ptridx9.i228, align 8
  %.not29.i229 = icmp eq ptr %167, null
  br i1 %.not29.i229, label %Map_string_PropId____getitem__.exit237, label %if.entry10.i236

else.i233:                                        ; preds = %while.entry.i221, %ifend.i.i224
  %168 = add nsw i64 %hash.0.i216, 1
  %169 = load i64, ptr %memberidx.i213, align 4
  %170 = srem i64 %168, %169
  %171 = load ptr, ptr %151, align 8
  %ptridx7.i231 = getelementptr inbounds ptr, ptr %171, i64 %170
  %172 = load ptr, ptr %ptridx7.i231, align 8
  %.not30.i232 = icmp eq ptr %172, null
  br i1 %.not30.i232, label %while.end.i230, label %while.entry.i221

if.entry10.i236:                                  ; preds = %while.end.i230
  %memberidx15.i235 = getelementptr inbounds %MapEntry_string_PropId_, ptr %167, i64 0, i32 1
  %173 = load ptr, ptr %memberidx15.i235, align 8
  br label %Map_string_PropId____getitem__.exit237

Map_string_PropId____getitem__.exit237:           ; preds = %while.end.i230, %if.entry10.i236
  %common.ret.op.i234 = phi ptr [ %173, %if.entry10.i236 ], [ null, %while.end.i230 ]
  store ptr %common.ret.op.i234, ptr %prop_id, align 8
  %174 = icmp eq ptr %common.ret.op.i234, null
  br i1 %174, label %if.entry51, label %ifend53

if.entry36:                                       ; preds = %Map_string_PropId____getitem__.exit204
  %175 = load ptr, ptr %12, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %175, i64 0, i32 5
  %176 = load ptr, ptr %memberidx39, align 8
  %177 = call ptr %176(ptr nonnull %12)
  %memberidx40 = getelementptr inbounds %Class, ptr %122, i64 0, i32 1
  %178 = load ptr, ptr %memberidx40, align 8
  %179 = load ptr, ptr %178, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %179, i64 0, i32 5
  %180 = load ptr, ptr %memberidx41, align 8
  %181 = call ptr %180(ptr nonnull %178)
  %182 = alloca ptr, align 8
  %183 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %182, ptr nonnull @175, ptr %177, ptr %181)
  %184 = load ptr, ptr %182, align 8
  %185 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %185, align 8
  %memberidx.i238 = getelementptr inbounds %string, ptr %185, i64 0, i32 1
  store ptr %184, ptr %memberidx.i238, align 8
  %memberidx1.i239 = getelementptr inbounds %string, ptr %185, i64 0, i32 2
  store i64 %183, ptr %memberidx1.i239, align 4
  %memberidx2.i240 = getelementptr inbounds %string, ptr %185, i64 0, i32 3
  store i64 %183, ptr %memberidx2.i240, align 4
  tail call void @free(ptr %177)
  tail call void @free(ptr %181)
  %186 = load ptr, ptr %memberidx2, align 8
  %memberidx43 = getelementptr inbounds %Token, ptr %186, i64 0, i32 1
  %187 = load ptr, ptr %memberidx43, align 8
  %188 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i242 = getelementptr inbounds %Compiler, ptr %188, i64 0, i32 6
  %189 = load ptr, ptr %memberidx1.i242, align 8
  %190 = call ptr @malloc(i32 24)
  store i64 1, ptr %190, align 4
  %memberidx1.i.i243 = getelementptr inbounds %FloError, ptr %190, i64 0, i32 2
  store ptr %187, ptr %memberidx1.i.i243, align 8
  %memberidx2.i.i244 = getelementptr inbounds %FloError, ptr %190, i64 0, i32 1
  store ptr %185, ptr %memberidx2.i.i244, align 8
  %memberidx.i.i245 = getelementptr inbounds %Array_FloError_, ptr %189, i64 0, i32 2
  %191 = load i64, ptr %memberidx.i.i245, align 4
  %memberidx1.i2.i246 = getelementptr inbounds %Array_FloError_, ptr %189, i64 0, i32 3
  %192 = load i64, ptr %memberidx1.i2.i246, align 4
  %.not.i.i247 = icmp slt i64 %191, %192
  br i1 %.not.i.i247, label %TypeChecker_error.exit253, label %if.entry.i.i250

if.entry.i.i250:                                  ; preds = %if.entry36
  %193 = shl i64 %192, 1
  store i64 %193, ptr %memberidx1.i2.i246, align 4
  %memberidx2.i.i.i249 = getelementptr inbounds %Array_FloError_, ptr %189, i64 0, i32 1
  %194 = load ptr, ptr %memberidx2.i.i.i249, align 8
  %195 = shl i64 %192, 4
  %196 = call ptr @realloc(ptr %194, i64 %195)
  store ptr %196, ptr %memberidx2.i.i.i249, align 8
  br label %TypeChecker_error.exit253

TypeChecker_error.exit253:                        ; preds = %if.entry36, %if.entry.i.i250
  %197 = load i64, ptr %memberidx.i.i245, align 4
  %198 = add nsw i64 %197, 1
  store i64 %198, ptr %memberidx.i.i245, align 4
  %memberidx4.i.i251 = getelementptr inbounds %Array_FloError_, ptr %189, i64 0, i32 1
  %199 = load ptr, ptr %memberidx4.i.i251, align 8
  %ptridx.i.i252 = getelementptr inbounds ptr, ptr %199, i64 %197
  store ptr %190, ptr %ptridx.i.i252, align 8
  br label %common.ret

ifend38:                                          ; preds = %Map_string_PropId____getitem__.exit204
  %200 = call fastcc ptr @TypeChecker_check_member_access(ptr nonnull %0, ptr nonnull %common.ret.op.i201)
  %.not = icmp eq ptr %200, null
  br i1 %.not, label %ifend46, label %if.entry44

if.entry44:                                       ; preds = %ifend38
  %201 = load ptr, ptr %memberidx2, align 8
  %memberidx48 = getelementptr inbounds %Token, ptr %201, i64 0, i32 1
  %202 = load ptr, ptr %memberidx48, align 8
  %203 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i255 = getelementptr inbounds %Compiler, ptr %203, i64 0, i32 6
  %204 = load ptr, ptr %memberidx1.i255, align 8
  %205 = call ptr @malloc(i32 24)
  store i64 4, ptr %205, align 4
  %memberidx1.i.i256 = getelementptr inbounds %FloError, ptr %205, i64 0, i32 2
  store ptr %202, ptr %memberidx1.i.i256, align 8
  %memberidx2.i.i257 = getelementptr inbounds %FloError, ptr %205, i64 0, i32 1
  store ptr %200, ptr %memberidx2.i.i257, align 8
  %memberidx.i.i258 = getelementptr inbounds %Array_FloError_, ptr %204, i64 0, i32 2
  %206 = load i64, ptr %memberidx.i.i258, align 4
  %memberidx1.i2.i259 = getelementptr inbounds %Array_FloError_, ptr %204, i64 0, i32 3
  %207 = load i64, ptr %memberidx1.i2.i259, align 4
  %.not.i.i260 = icmp slt i64 %206, %207
  br i1 %.not.i.i260, label %TypeChecker_error.exit266, label %if.entry.i.i263

if.entry.i.i263:                                  ; preds = %if.entry44
  %208 = shl i64 %207, 1
  store i64 %208, ptr %memberidx1.i2.i259, align 4
  %memberidx2.i.i.i262 = getelementptr inbounds %Array_FloError_, ptr %204, i64 0, i32 1
  %209 = load ptr, ptr %memberidx2.i.i.i262, align 8
  %210 = shl i64 %207, 4
  %211 = call ptr @realloc(ptr %209, i64 %210)
  store ptr %211, ptr %memberidx2.i.i.i262, align 8
  br label %TypeChecker_error.exit266

TypeChecker_error.exit266:                        ; preds = %if.entry44, %if.entry.i.i263
  %212 = load i64, ptr %memberidx.i.i258, align 4
  %213 = add nsw i64 %212, 1
  store i64 %213, ptr %memberidx.i.i258, align 4
  %memberidx4.i.i264 = getelementptr inbounds %Array_FloError_, ptr %204, i64 0, i32 1
  %214 = load ptr, ptr %memberidx4.i.i264, align 8
  %ptridx.i.i265 = getelementptr inbounds ptr, ptr %214, i64 %212
  store ptr %205, ptr %ptridx.i.i265, align 8
  br label %common.ret

ifend46:                                          ; preds = %ifend38
  %215 = load ptr, ptr %0, align 8
  %memberidx.i.i267 = getelementptr inbounds %PropId, ptr %common.ret.op.i201, i64 0, i32 1
  %216 = load ptr, ptr %memberidx.i.i267, align 8
  %memberidx.i.i.i268 = getelementptr inbounds %Program, ptr %215, i64 0, i32 1
  %217 = load ptr, ptr %memberidx.i.i.i268, align 8
  %218 = load i64, ptr %216, align 4
  %memberidx.i.i.i.i269 = getelementptr inbounds %Array_Module_, ptr %217, i64 0, i32 1
  %219 = load ptr, ptr %memberidx.i.i.i.i269, align 8
  %ptridx.i.i.i.i270 = getelementptr inbounds ptr, ptr %219, i64 %218
  %220 = load ptr, ptr %ptridx.i.i.i.i270, align 8
  %memberidx2.i.i.i271 = getelementptr inbounds %Module, ptr %220, i64 0, i32 4
  %221 = load ptr, ptr %memberidx2.i.i.i271, align 8
  %memberidx3.i.i.i272 = getelementptr inbounds %TypeId, ptr %216, i64 0, i32 2
  %222 = load i64, ptr %memberidx3.i.i.i272, align 4
  %memberidx.i5.i.i.i273 = getelementptr inbounds %Array_Class_, ptr %221, i64 0, i32 1
  %223 = load ptr, ptr %memberidx.i5.i.i.i273, align 8
  %ptridx.i6.i.i.i274 = getelementptr inbounds ptr, ptr %223, i64 %222
  %224 = load ptr, ptr %ptridx.i6.i.i.i274, align 8
  %225 = load i64, ptr %common.ret.op.i201, align 4
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %if.entry.i282, label %ifend.i288

if.entry.i282:                                    ; preds = %ifend46
  %memberidx1.i277 = getelementptr inbounds %Class, ptr %224, i64 0, i32 5
  %227 = load ptr, ptr %memberidx1.i277, align 8
  %memberidx2.i278 = getelementptr inbounds %PropId, ptr %common.ret.op.i201, i64 0, i32 2
  %228 = load i64, ptr %memberidx2.i278, align 4
  %memberidx.i12.i279 = getelementptr inbounds %Array_ClassMethod_, ptr %227, i64 0, i32 1
  %229 = load ptr, ptr %memberidx.i12.i279, align 8
  %ptridx.i13.i280 = getelementptr inbounds ptr, ptr %229, i64 %228
  %230 = load ptr, ptr %ptridx.i13.i280, align 8
  %memberidx3.i281 = getelementptr inbounds %ClassMethod, ptr %230, i64 0, i32 4
  br label %get_class_prop_type.exit289

ifend.i288:                                       ; preds = %ifend46
  %memberidx4.i283 = getelementptr inbounds %Class, ptr %224, i64 0, i32 4
  %231 = load ptr, ptr %memberidx4.i283, align 8
  %memberidx5.i284 = getelementptr inbounds %PropId, ptr %common.ret.op.i201, i64 0, i32 2
  %232 = load i64, ptr %memberidx5.i284, align 4
  %memberidx.i11.i285 = getelementptr inbounds %Array_ClassField_, ptr %231, i64 0, i32 1
  %233 = load ptr, ptr %memberidx.i11.i285, align 8
  %ptridx.i.i286 = getelementptr inbounds ptr, ptr %233, i64 %232
  %234 = load ptr, ptr %ptridx.i.i286, align 8
  %memberidx6.i287 = getelementptr inbounds %ClassField, ptr %234, i64 0, i32 4
  br label %get_class_prop_type.exit289

get_class_prop_type.exit289:                      ; preds = %if.entry.i282, %ifend.i288
  %common.ret.op.in.i275 = phi ptr [ %memberidx3.i281, %if.entry.i282 ], [ %memberidx6.i287, %ifend.i288 ]
  %common.ret.op.i276 = load ptr, ptr %common.ret.op.in.i275, align 8
  store ptr %common.ret.op.i276, ptr %prop_ty, align 8
  br label %ifend6

if.entry51:                                       ; preds = %Map_string_PropId____getitem__.exit237
  %235 = load ptr, ptr %12, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %235, i64 0, i32 5
  %236 = load ptr, ptr %memberidx54, align 8
  %237 = call ptr %236(ptr nonnull %12)
  %memberidx55 = getelementptr inbounds %Enum, ptr %150, i64 0, i32 1
  %238 = load ptr, ptr %memberidx55, align 8
  %239 = load ptr, ptr %238, align 8
  %memberidx56 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %239, i64 0, i32 5
  %240 = load ptr, ptr %memberidx56, align 8
  %241 = call ptr %240(ptr nonnull %238)
  %242 = alloca ptr, align 8
  %243 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %242, ptr nonnull @176, ptr %237, ptr %241)
  %244 = load ptr, ptr %242, align 8
  %245 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %245, align 8
  %memberidx.i290 = getelementptr inbounds %string, ptr %245, i64 0, i32 1
  store ptr %244, ptr %memberidx.i290, align 8
  %memberidx1.i291 = getelementptr inbounds %string, ptr %245, i64 0, i32 2
  store i64 %243, ptr %memberidx1.i291, align 4
  %memberidx2.i292 = getelementptr inbounds %string, ptr %245, i64 0, i32 3
  store i64 %243, ptr %memberidx2.i292, align 4
  tail call void @free(ptr %237)
  tail call void @free(ptr %241)
  %246 = load ptr, ptr %memberidx2, align 8
  %memberidx58 = getelementptr inbounds %Token, ptr %246, i64 0, i32 1
  %247 = load ptr, ptr %memberidx58, align 8
  %248 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i294 = getelementptr inbounds %Compiler, ptr %248, i64 0, i32 6
  %249 = load ptr, ptr %memberidx1.i294, align 8
  %250 = call ptr @malloc(i32 24)
  store i64 1, ptr %250, align 4
  %memberidx1.i.i295 = getelementptr inbounds %FloError, ptr %250, i64 0, i32 2
  store ptr %247, ptr %memberidx1.i.i295, align 8
  %memberidx2.i.i296 = getelementptr inbounds %FloError, ptr %250, i64 0, i32 1
  store ptr %245, ptr %memberidx2.i.i296, align 8
  %memberidx.i.i297 = getelementptr inbounds %Array_FloError_, ptr %249, i64 0, i32 2
  %251 = load i64, ptr %memberidx.i.i297, align 4
  %memberidx1.i2.i298 = getelementptr inbounds %Array_FloError_, ptr %249, i64 0, i32 3
  %252 = load i64, ptr %memberidx1.i2.i298, align 4
  %.not.i.i299 = icmp slt i64 %251, %252
  br i1 %.not.i.i299, label %TypeChecker_error.exit305, label %if.entry.i.i302

if.entry.i.i302:                                  ; preds = %if.entry51
  %253 = shl i64 %252, 1
  store i64 %253, ptr %memberidx1.i2.i298, align 4
  %memberidx2.i.i.i301 = getelementptr inbounds %Array_FloError_, ptr %249, i64 0, i32 1
  %254 = load ptr, ptr %memberidx2.i.i.i301, align 8
  %255 = shl i64 %252, 4
  %256 = call ptr @realloc(ptr %254, i64 %255)
  store ptr %256, ptr %memberidx2.i.i.i301, align 8
  br label %TypeChecker_error.exit305

TypeChecker_error.exit305:                        ; preds = %if.entry51, %if.entry.i.i302
  %257 = load i64, ptr %memberidx.i.i297, align 4
  %258 = add nsw i64 %257, 1
  store i64 %258, ptr %memberidx.i.i297, align 4
  %memberidx4.i.i303 = getelementptr inbounds %Array_FloError_, ptr %249, i64 0, i32 1
  %259 = load ptr, ptr %memberidx4.i.i303, align 8
  %ptridx.i.i304 = getelementptr inbounds ptr, ptr %259, i64 %257
  store ptr %250, ptr %ptridx.i.i304, align 8
  br label %common.ret

ifend53:                                          ; preds = %Map_string_PropId____getitem__.exit237
  %260 = tail call ptr @malloc(i32 16)
  %261 = load ptr, ptr %150, align 8
  store i64 12, ptr %260, align 4
  %memberidx.i306 = getelementptr inbounds %EnumType, ptr %260, i64 0, i32 1
  store ptr %261, ptr %memberidx.i306, align 8
  store ptr %260, ptr %prop_ty, align 8
  br label %ifend6

if.entry60:                                       ; preds = %else5
  %mem_intrinsic = alloca i64, align 8
  store i64 3, ptr %mem_intrinsic, align 8
  %262 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %262, ptr noundef nonnull align 8 dereferenceable(9) @177, i64 9, i1 false)
  %263 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %263, align 8
  %memberidx.i.i307 = getelementptr inbounds %string, ptr %263, i64 0, i32 1
  store ptr %262, ptr %memberidx.i.i307, align 8
  %memberidx1.i.i308 = getelementptr inbounds %string, ptr %263, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i308, align 4
  %memberidx2.i.i309 = getelementptr inbounds %string, ptr %263, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i309, align 4
  %memberidx.i310 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %264 = load i64, ptr %memberidx.i310, align 4
  %.not.i312 = icmp eq i64 %264, 9
  br i1 %.not.i312, label %ifend.i316, label %else64

ifend.i316:                                       ; preds = %if.entry60
  %memberidx2.i314 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %265 = load ptr, ptr %memberidx2.i314, align 8
  %266 = call i64 @memcmp(ptr %265, ptr %262, i64 %264)
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %if.entry63, label %else64

if.entry63:                                       ; preds = %ifend.i316
  store i64 3, ptr %mem_intrinsic, align 8
  br label %ifend65

else64:                                           ; preds = %if.entry60, %ifend.i316
  %268 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %268, ptr noundef nonnull align 8 dereferenceable(9) @178, i64 9, i1 false)
  %269 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %269, align 8
  %memberidx.i.i317 = getelementptr inbounds %string, ptr %269, i64 0, i32 1
  store ptr %268, ptr %memberidx.i.i317, align 8
  %memberidx1.i.i318 = getelementptr inbounds %string, ptr %269, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i318, align 4
  %memberidx2.i.i319 = getelementptr inbounds %string, ptr %269, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i319, align 4
  %270 = load i64, ptr %memberidx.i310, align 4
  %.not.i322 = icmp eq i64 %270, 9
  br i1 %.not.i322, label %ifend.i326, label %else67

ifend.i326:                                       ; preds = %else64
  %memberidx2.i324 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %271 = load ptr, ptr %memberidx2.i324, align 8
  %272 = call i64 @memcmp(ptr %271, ptr %268, i64 %270)
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %if.entry66, label %else67

ifend65:                                          ; preds = %if.entry72, %if.entry75, %if.entry69, %if.entry66, %if.entry63
  %274 = tail call ptr @malloc(i32 41)
  %275 = load i64, ptr %mem_intrinsic, align 8
  store i64 8, ptr %274, align 4
  %memberidx.i.i328 = getelementptr inbounds %Expression, ptr %274, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i328, align 4
  %memberidx1.i.i329 = getelementptr inbounds %Expression, ptr %274, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i329, align 1
  %memberidx.i330 = getelementptr inbounds %IntrinsicCall, ptr %274, i64 0, i32 4
  store i64 %275, ptr %memberidx.i330, align 4
  %memberidx1.i331 = getelementptr inbounds %IntrinsicCall, ptr %274, i64 0, i32 5
  %276 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %276, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_Expression_, ptr %276, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i8.i = getelementptr inbounds %Array_Expression_, ptr %276, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i, align 4
  %memberidx2.i.i332 = getelementptr inbounds %Array_Expression_, ptr %276, i64 0, i32 1
  %277 = call ptr @malloc(i32 64)
  store ptr %277, ptr %memberidx2.i.i332, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %276, ptr %memberidx1.i331, align 8
  %memberidx4.i334 = getelementptr inbounds %Expression, ptr %274, i64 0, i32 3
  %278 = call ptr @malloc(i32 8)
  store i64 20, ptr %278, align 4
  store ptr %278, ptr %memberidx4.i334, align 8
  %279 = load i64, ptr %memberidx.i7.i, align 4
  %280 = load i64, ptr %memberidx1.i8.i, align 4
  %.not.i337 = icmp slt i64 %279, %280
  br i1 %.not.i337, label %Array_Expression____sl__.exit, label %if.entry.i340

if.entry.i340:                                    ; preds = %ifend65
  %281 = shl i64 %280, 1
  store i64 %281, ptr %memberidx1.i8.i, align 4
  %282 = load ptr, ptr %memberidx2.i.i332, align 8
  %283 = shl i64 %280, 4
  %284 = call ptr @realloc(ptr %282, i64 %283)
  store ptr %284, ptr %memberidx2.i.i332, align 8
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %ifend65, %if.entry.i340
  %285 = load i64, ptr %memberidx.i7.i, align 4
  %286 = add nsw i64 %285, 1
  store i64 %286, ptr %memberidx.i7.i, align 4
  %287 = load ptr, ptr %memberidx2.i.i332, align 8
  %ptridx.i342 = getelementptr inbounds ptr, ptr %287, i64 %285
  store ptr %5, ptr %ptridx.i342, align 8
  br label %common.ret

if.entry66:                                       ; preds = %ifend.i326
  store i64 4, ptr %mem_intrinsic, align 8
  br label %ifend65

else67:                                           ; preds = %else64, %ifend.i326
  %288 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %288, ptr noundef nonnull align 8 dereferenceable(9) @179, i64 9, i1 false)
  %289 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %289, align 8
  %memberidx.i.i344 = getelementptr inbounds %string, ptr %289, i64 0, i32 1
  store ptr %288, ptr %memberidx.i.i344, align 8
  %memberidx1.i.i345 = getelementptr inbounds %string, ptr %289, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i345, align 4
  %memberidx2.i.i346 = getelementptr inbounds %string, ptr %289, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i346, align 4
  %290 = load i64, ptr %memberidx.i310, align 4
  %.not.i349 = icmp eq i64 %290, 9
  br i1 %.not.i349, label %ifend.i353, label %else70

ifend.i353:                                       ; preds = %else67
  %memberidx2.i351 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %291 = load ptr, ptr %memberidx2.i351, align 8
  %292 = call i64 @memcmp(ptr %291, ptr %288, i64 %290)
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %if.entry69, label %else70

if.entry69:                                       ; preds = %ifend.i353
  store i64 5, ptr %mem_intrinsic, align 8
  br label %ifend65

else70:                                           ; preds = %else67, %ifend.i353
  %294 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %294, ptr noundef nonnull align 8 dereferenceable(6) @180, i64 6, i1 false)
  %295 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %295, align 8
  %memberidx.i.i355 = getelementptr inbounds %string, ptr %295, i64 0, i32 1
  store ptr %294, ptr %memberidx.i.i355, align 8
  %memberidx1.i.i356 = getelementptr inbounds %string, ptr %295, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i356, align 4
  %memberidx2.i.i357 = getelementptr inbounds %string, ptr %295, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i357, align 4
  %296 = load i64, ptr %memberidx.i310, align 4
  %.not.i360 = icmp eq i64 %296, 6
  br i1 %.not.i360, label %ifend.i364, label %else73

ifend.i364:                                       ; preds = %else70
  %memberidx2.i362 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %297 = load ptr, ptr %memberidx2.i362, align 8
  %298 = call i64 @memcmp(ptr %297, ptr %294, i64 %296)
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %if.entry72, label %else73

if.entry72:                                       ; preds = %ifend.i364
  store i64 6, ptr %mem_intrinsic, align 8
  br label %ifend65

else73:                                           ; preds = %else70, %ifend.i364
  %300 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %300, ptr noundef nonnull align 8 dereferenceable(7) @181, i64 7, i1 false)
  %301 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %301, align 8
  %memberidx.i.i366 = getelementptr inbounds %string, ptr %301, i64 0, i32 1
  store ptr %300, ptr %memberidx.i.i366, align 8
  %memberidx1.i.i367 = getelementptr inbounds %string, ptr %301, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i367, align 4
  %memberidx2.i.i368 = getelementptr inbounds %string, ptr %301, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i368, align 4
  %302 = load i64, ptr %memberidx.i310, align 4
  %.not.i371 = icmp eq i64 %302, 7
  br i1 %.not.i371, label %ifend.i375, label %else76

ifend.i375:                                       ; preds = %else73
  %memberidx2.i373 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %303 = load ptr, ptr %memberidx2.i373, align 8
  %304 = call i64 @memcmp(ptr %303, ptr %300, i64 %302)
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %if.entry75, label %else76

if.entry75:                                       ; preds = %ifend.i375
  store i64 7, ptr %mem_intrinsic, align 8
  br label %ifend65

else76:                                           ; preds = %else73, %ifend.i375
  %306 = load ptr, ptr %12, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %306, i64 0, i32 5
  %307 = load ptr, ptr %memberidx78, align 8
  %308 = call ptr %307(ptr nonnull %12)
  %309 = alloca ptr, align 8
  %310 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %309, ptr nonnull @182, ptr %308)
  %311 = load ptr, ptr %309, align 8
  %312 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %312, align 8
  %memberidx.i377 = getelementptr inbounds %string, ptr %312, i64 0, i32 1
  store ptr %311, ptr %memberidx.i377, align 8
  %memberidx1.i378 = getelementptr inbounds %string, ptr %312, i64 0, i32 2
  store i64 %310, ptr %memberidx1.i378, align 4
  %memberidx2.i379 = getelementptr inbounds %string, ptr %312, i64 0, i32 3
  store i64 %310, ptr %memberidx2.i379, align 4
  tail call void @free(ptr %308)
  %313 = load ptr, ptr %memberidx2, align 8
  %memberidx80 = getelementptr inbounds %Token, ptr %313, i64 0, i32 1
  %314 = load ptr, ptr %memberidx80, align 8
  %315 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i381 = getelementptr inbounds %Compiler, ptr %315, i64 0, i32 6
  %316 = load ptr, ptr %memberidx1.i381, align 8
  %317 = call ptr @malloc(i32 24)
  store i64 1, ptr %317, align 4
  %memberidx1.i.i382 = getelementptr inbounds %FloError, ptr %317, i64 0, i32 2
  store ptr %314, ptr %memberidx1.i.i382, align 8
  %memberidx2.i.i383 = getelementptr inbounds %FloError, ptr %317, i64 0, i32 1
  store ptr %312, ptr %memberidx2.i.i383, align 8
  %memberidx.i.i384 = getelementptr inbounds %Array_FloError_, ptr %316, i64 0, i32 2
  %318 = load i64, ptr %memberidx.i.i384, align 4
  %memberidx1.i2.i385 = getelementptr inbounds %Array_FloError_, ptr %316, i64 0, i32 3
  %319 = load i64, ptr %memberidx1.i2.i385, align 4
  %.not.i.i386 = icmp slt i64 %318, %319
  br i1 %.not.i.i386, label %TypeChecker_error.exit392, label %if.entry.i.i389

if.entry.i.i389:                                  ; preds = %else76
  %320 = shl i64 %319, 1
  store i64 %320, ptr %memberidx1.i2.i385, align 4
  %memberidx2.i.i.i388 = getelementptr inbounds %Array_FloError_, ptr %316, i64 0, i32 1
  %321 = load ptr, ptr %memberidx2.i.i.i388, align 8
  %322 = shl i64 %319, 4
  %323 = call ptr @realloc(ptr %321, i64 %322)
  store ptr %323, ptr %memberidx2.i.i.i388, align 8
  br label %TypeChecker_error.exit392

TypeChecker_error.exit392:                        ; preds = %else76, %if.entry.i.i389
  %324 = load i64, ptr %memberidx.i.i384, align 4
  %325 = add nsw i64 %324, 1
  store i64 %325, ptr %memberidx.i.i384, align 4
  %memberidx4.i.i390 = getelementptr inbounds %Array_FloError_, ptr %316, i64 0, i32 1
  %326 = load ptr, ptr %memberidx4.i.i390, align 8
  %ptridx.i.i391 = getelementptr inbounds ptr, ptr %326, i64 %324
  store ptr %317, ptr %ptridx.i.i391, align 8
  br label %common.ret

if.entry83:                                       ; preds = %else5
  %memberidx86 = getelementptr inbounds %VarAccessExpression, ptr %5, i64 0, i32 4
  %327 = load ptr, ptr %memberidx86, align 8
  %memberidx87 = getelementptr inbounds %ModuleVarId, ptr %327, i64 0, i32 3
  %328 = load ptr, ptr %memberidx87, align 8
  %memberidx88 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %329 = load ptr, ptr %memberidx88, align 8
  %memberidx89 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %330 = load i64, ptr %328, align 4
  store i64 %330, ptr %memberidx89, align 4
  store ptr %328, ptr %memberidx88, align 8
  %331 = alloca %VarAccessExpressionNode, align 8
  %332 = load ptr, ptr %memberidx2, align 8
  %memberidx.i393 = getelementptr inbounds %Token, ptr %332, i64 0, i32 1
  %333 = load ptr, ptr %memberidx.i393, align 8
  store ptr %333, ptr %331, align 8
  %memberidx.i.i.i394 = getelementptr inbounds %StatementNode, ptr %331, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i394, align 8
  %memberidx.i.i395 = getelementptr inbounds %ExpressionNode, ptr %331, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i395, align 8
  %memberidx1.i396 = getelementptr inbounds %VarAccessExpressionNode, ptr %331, i64 0, i32 3
  store ptr %332, ptr %memberidx1.i396, align 8
  %334 = call ptr @malloc(i32 8)
  store i64 20, ptr %334, align 4
  %335 = call fastcc ptr @TypeChecker_check_var_access_expr(ptr %0, ptr nonnull %334, ptr nonnull %331)
  %336 = load i64, ptr %329, align 4
  store i64 %336, ptr %memberidx89, align 4
  store ptr %329, ptr %memberidx88, align 8
  br label %common.ret

else84:                                           ; preds = %else5
  %337 = load ptr, ptr %12, align 8
  %memberidx96 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %337, i64 0, i32 5
  %338 = load ptr, ptr %memberidx96, align 8
  %339 = call ptr %338(ptr nonnull %12)
  %340 = load ptr, ptr %memberidx1, align 8
  %341 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %340)
  %342 = load ptr, ptr %341, align 8
  %memberidx98 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %342, i64 0, i32 5
  %343 = load ptr, ptr %memberidx98, align 8
  %344 = call ptr %343(ptr nonnull %341)
  %345 = alloca ptr, align 8
  %346 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %345, ptr nonnull @183, ptr %339, ptr %344)
  %347 = load ptr, ptr %345, align 8
  %348 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %348, align 8
  %memberidx.i397 = getelementptr inbounds %string, ptr %348, i64 0, i32 1
  store ptr %347, ptr %memberidx.i397, align 8
  %memberidx1.i398 = getelementptr inbounds %string, ptr %348, i64 0, i32 2
  store i64 %346, ptr %memberidx1.i398, align 4
  %memberidx2.i399 = getelementptr inbounds %string, ptr %348, i64 0, i32 3
  store i64 %346, ptr %memberidx2.i399, align 4
  tail call void @free(ptr %339)
  tail call void @free(ptr %344)
  %349 = load ptr, ptr %memberidx, align 8
  %350 = load ptr, ptr %349, align 8
  %351 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i401 = getelementptr inbounds %Compiler, ptr %351, i64 0, i32 6
  %352 = load ptr, ptr %memberidx1.i401, align 8
  %353 = call ptr @malloc(i32 24)
  store i64 4, ptr %353, align 4
  %memberidx1.i.i402 = getelementptr inbounds %FloError, ptr %353, i64 0, i32 2
  store ptr %350, ptr %memberidx1.i.i402, align 8
  %memberidx2.i.i403 = getelementptr inbounds %FloError, ptr %353, i64 0, i32 1
  store ptr %348, ptr %memberidx2.i.i403, align 8
  %memberidx.i.i404 = getelementptr inbounds %Array_FloError_, ptr %352, i64 0, i32 2
  %354 = load i64, ptr %memberidx.i.i404, align 4
  %memberidx1.i2.i405 = getelementptr inbounds %Array_FloError_, ptr %352, i64 0, i32 3
  %355 = load i64, ptr %memberidx1.i2.i405, align 4
  %.not.i.i406 = icmp slt i64 %354, %355
  br i1 %.not.i.i406, label %TypeChecker_error.exit412, label %if.entry.i.i409

if.entry.i.i409:                                  ; preds = %else84
  %356 = shl i64 %355, 1
  store i64 %356, ptr %memberidx1.i2.i405, align 4
  %memberidx2.i.i.i408 = getelementptr inbounds %Array_FloError_, ptr %352, i64 0, i32 1
  %357 = load ptr, ptr %memberidx2.i.i.i408, align 8
  %358 = shl i64 %355, 4
  %359 = call ptr @realloc(ptr %357, i64 %358)
  store ptr %359, ptr %memberidx2.i.i.i408, align 8
  br label %TypeChecker_error.exit412

TypeChecker_error.exit412:                        ; preds = %else84, %if.entry.i.i409
  %360 = load i64, ptr %memberidx.i.i404, align 4
  %361 = add nsw i64 %360, 1
  store i64 %361, ptr %memberidx.i.i404, align 4
  %memberidx4.i.i410 = getelementptr inbounds %Array_FloError_, ptr %352, i64 0, i32 1
  %362 = load ptr, ptr %memberidx4.i.i410, align 8
  %ptridx.i.i411 = getelementptr inbounds ptr, ptr %362, i64 %360
  store ptr %353, ptr %ptridx.i.i411, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_assignment(ptr %0, ptr %1, ptr %2, ptr nocapture readonly %3) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %.not = icmp eq i64 %5, 19
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %4
  %memberidx1 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call fastcc i1 @is_object(ptr %6)
  br i1 %7, label %if.entry2, label %ifend4

ifend:                                            ; preds = %ifend4, %4
  %right.0 = phi ptr [ %40, %ifend4 ], [ %2, %4 ]
  %memberidx12 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %8 = load ptr, ptr %memberidx12, align 8
  %9 = load i64, ptr %8, align 4
  %10 = icmp eq i64 %9, 16
  br i1 %10, label %if.entry14, label %ifend16

if.entry2:                                        ; preds = %if.entry
  %11 = call fastcc ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr %3)
  %12 = icmp ne ptr %11, null
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %13 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %13, i64 0, i32 6
  %14 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i, align 4
  %16 = icmp sgt i64 %15, 0
  %17 = or i1 %12, %16
  br i1 %17, label %common.ret, label %ifend4

ifend4:                                           ; preds = %if.entry2, %if.entry
  %18 = load ptr, ptr %memberidx1, align 8
  %19 = load i64, ptr %memberidx, align 4
  %20 = icmp eq i64 %19, 20
  %spec.store.select.i = select i1 %20, i64 1, i64 %19
  %21 = icmp eq i64 %spec.store.select.i, 21
  %spec.store.select34.i = select i1 %21, i64 2, i64 %spec.store.select.i
  %22 = icmp eq i64 %spec.store.select34.i, 22
  %spec.store.select30.i = select i1 %22, i64 3, i64 %spec.store.select34.i
  %23 = icmp eq i64 %spec.store.select30.i, 23
  %spec.store.select37.i = select i1 %23, i64 4, i64 %spec.store.select30.i
  %24 = icmp eq i64 %spec.store.select37.i, 24
  %spec.store.select31.i = select i1 %24, i64 5, i64 %spec.store.select37.i
  %25 = icmp eq i64 %spec.store.select31.i, 25
  %spec.store.select35.i = select i1 %25, i64 6, i64 %spec.store.select31.i
  %26 = icmp eq i64 %spec.store.select35.i, 26
  %spec.store.select32.i = select i1 %26, i64 16, i64 %spec.store.select35.i
  %27 = icmp eq i64 %spec.store.select32.i, 27
  %spec.store.select38.i = select i1 %27, i64 15, i64 %spec.store.select32.i
  %28 = icmp eq i64 %spec.store.select38.i, 29
  %spec.store.select33.i = select i1 %28, i64 13, i64 %spec.store.select38.i
  %29 = icmp eq i64 %spec.store.select33.i, 30
  %spec.store.select36.i = select i1 %29, i64 14, i64 %spec.store.select33.i
  %30 = call ptr @malloc(i32 48)
  %memberidx28.i = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 3
  %31 = load ptr, ptr %memberidx28.i, align 8
  %memberidx29.i = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 5
  %32 = load ptr, ptr %memberidx29.i, align 8
  %33 = load ptr, ptr %31, align 8
  %34 = load ptr, ptr %32, align 8
  %35 = call ptr @malloc(i32 32)
  %36 = load i64, ptr %33, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %34, i64 0, i32 1
  %37 = load i64, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %33, i64 0, i32 2
  %38 = load i64, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %34, i64 0, i32 3
  %39 = load i64, ptr %memberidx3.i.i.i, align 4
  store i64 %36, ptr %35, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %35, i64 0, i32 1
  store i64 %37, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %FloRange, ptr %35, i64 0, i32 2
  store i64 %38, ptr %memberidx2.i.i.i.i, align 4
  %memberidx3.i.i.i.i = getelementptr inbounds %FloRange, ptr %35, i64 0, i32 3
  store i64 %39, ptr %memberidx3.i.i.i.i, align 4
  store ptr %35, ptr %30, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %30, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i.i = getelementptr inbounds %ExpressionNode, ptr %30, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %30, i64 0, i32 3
  store ptr %31, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %30, i64 0, i32 4
  store i64 %spec.store.select36.i, ptr %memberidx3.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %30, i64 0, i32 5
  store ptr %32, ptr %memberidx4.i.i, align 8
  %40 = call fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %18, ptr nonnull %30)
  %memberidx.i58 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %41 = load ptr, ptr %memberidx.i58, align 8
  %memberidx1.i59 = getelementptr inbounds %Compiler, ptr %41, i64 0, i32 6
  %42 = load ptr, ptr %memberidx1.i59, align 8
  %memberidx2.i60 = getelementptr inbounds %Array_FloError_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx2.i60, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %common.ret, label %ifend

common.ret:                                       ; preds = %if.entry2, %ifend4, %ifend26, %TypeChecker_error.exit103, %TypeChecker_error.exit87, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit87 ], [ null, %TypeChecker_error.exit103 ], [ %105, %ifend26 ], [ null, %ifend4 ], [ %11, %if.entry2 ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %ifend
  %45 = call ptr @malloc(i32 33)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %45, ptr noundef nonnull align 8 dereferenceable(33) @148, i64 33, i1 false)
  %46 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i61 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i61, align 4
  %47 = load ptr, ptr %3, align 8
  %memberidx.i62 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %48 = load ptr, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %Compiler, ptr %48, i64 0, i32 6
  %49 = load ptr, ptr %memberidx1.i63, align 8
  %50 = call ptr @malloc(i32 24)
  store i64 5, ptr %50, align 4
  %memberidx1.i.i64 = getelementptr inbounds %FloError, ptr %50, i64 0, i32 2
  store ptr %47, ptr %memberidx1.i.i64, align 8
  %memberidx2.i.i65 = getelementptr inbounds %FloError, ptr %50, i64 0, i32 1
  store ptr %46, ptr %memberidx2.i.i65, align 8
  %memberidx.i.i66 = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 2
  %51 = load i64, ptr %memberidx.i.i66, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 3
  %52 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %51, %52
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry14
  %53 = shl i64 %52, 1
  store i64 %53, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i68 = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 1
  %54 = load ptr, ptr %memberidx2.i.i.i68, align 8
  %55 = shl i64 %52, 4
  %56 = call ptr @realloc(ptr %54, i64 %55)
  store ptr %56, ptr %memberidx2.i.i.i68, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry14, %if.entry.i.i
  %57 = load i64, ptr %memberidx.i.i66, align 4
  %58 = add nsw i64 %57, 1
  store i64 %58, ptr %memberidx.i.i66, align 4
  %memberidx4.i.i69 = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 1
  %59 = load ptr, ptr %memberidx4.i.i69, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %57
  store ptr %50, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend16:                                          ; preds = %ifend
  %memberidx.i70 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 2
  %60 = load i64, ptr %memberidx.i70, align 4
  switch i64 %60, label %if.entry18 [
    i64 7, label %if.entry.i
    i64 12, label %if.entry4.i
    i64 13, label %ifend20
  ]

if.entry.i:                                       ; preds = %ifend16
  %memberidx1.i71 = getelementptr inbounds %VarAccessExpression, ptr %1, i64 0, i32 4
  br label %check_is_var.exit

if.entry4.i:                                      ; preds = %ifend16
  %memberidx7.i = getelementptr inbounds %MemberExpression, ptr %1, i64 0, i32 5
  br label %check_is_var.exit

check_is_var.exit:                                ; preds = %if.entry.i, %if.entry4.i
  %common.ret.op.i.in.in.in = phi ptr [ %memberidx1.i71, %if.entry.i ], [ %memberidx7.i, %if.entry4.i ]
  %common.ret.op.i.in.in = load ptr, ptr %common.ret.op.i.in.in.in, align 8
  %common.ret.op.i.in = load i64, ptr %common.ret.op.i.in.in, align 4
  %common.ret.op.i = icmp eq i64 %common.ret.op.i.in, 1
  br i1 %common.ret.op.i, label %ifend20, label %if.entry18

if.entry18:                                       ; preds = %ifend16, %check_is_var.exit
  %61 = call ptr @malloc(i32 35)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %61, ptr noundef nonnull align 8 dereferenceable(35) @149, i64 35, i1 false)
  %62 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i.i72 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i.i72, align 8
  %memberidx1.i.i73 = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i73, align 4
  %memberidx2.i.i74 = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i74, align 4
  %63 = load ptr, ptr %3, align 8
  %memberidx.i75 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %64 = load ptr, ptr %memberidx.i75, align 8
  %memberidx1.i76 = getelementptr inbounds %Compiler, ptr %64, i64 0, i32 6
  %65 = load ptr, ptr %memberidx1.i76, align 8
  %66 = call ptr @malloc(i32 24)
  store i64 5, ptr %66, align 4
  %memberidx1.i.i77 = getelementptr inbounds %FloError, ptr %66, i64 0, i32 2
  store ptr %63, ptr %memberidx1.i.i77, align 8
  %memberidx2.i.i78 = getelementptr inbounds %FloError, ptr %66, i64 0, i32 1
  store ptr %62, ptr %memberidx2.i.i78, align 8
  %memberidx.i.i79 = getelementptr inbounds %Array_FloError_, ptr %65, i64 0, i32 2
  %67 = load i64, ptr %memberidx.i.i79, align 4
  %memberidx1.i2.i80 = getelementptr inbounds %Array_FloError_, ptr %65, i64 0, i32 3
  %68 = load i64, ptr %memberidx1.i2.i80, align 4
  %.not.i.i81 = icmp slt i64 %67, %68
  br i1 %.not.i.i81, label %TypeChecker_error.exit87, label %if.entry.i.i84

if.entry.i.i84:                                   ; preds = %if.entry18
  %69 = shl i64 %68, 1
  store i64 %69, ptr %memberidx1.i2.i80, align 4
  %memberidx2.i.i.i83 = getelementptr inbounds %Array_FloError_, ptr %65, i64 0, i32 1
  %70 = load ptr, ptr %memberidx2.i.i.i83, align 8
  %71 = shl i64 %68, 4
  %72 = call ptr @realloc(ptr %70, i64 %71)
  store ptr %72, ptr %memberidx2.i.i.i83, align 8
  br label %TypeChecker_error.exit87

TypeChecker_error.exit87:                         ; preds = %if.entry18, %if.entry.i.i84
  %73 = load i64, ptr %memberidx.i.i79, align 4
  %74 = add nsw i64 %73, 1
  store i64 %74, ptr %memberidx.i.i79, align 4
  %memberidx4.i.i85 = getelementptr inbounds %Array_FloError_, ptr %65, i64 0, i32 1
  %75 = load ptr, ptr %memberidx4.i.i85, align 8
  %ptridx.i.i86 = getelementptr inbounds ptr, ptr %75, i64 %73
  store ptr %66, ptr %ptridx.i.i86, align 8
  br label %common.ret

ifend20:                                          ; preds = %ifend16, %check_is_var.exit
  %memberidx23 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 3
  %76 = load ptr, ptr %memberidx23, align 8
  %77 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %8, ptr %76)
  br i1 %77, label %ifend26, label %if.entry24

if.entry24:                                       ; preds = %ifend20
  %78 = load ptr, ptr %memberidx23, align 8
  %79 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %78)
  %80 = load ptr, ptr %79, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %80, i64 0, i32 5
  %81 = load ptr, ptr %memberidx28, align 8
  %82 = call ptr %81(ptr nonnull %79)
  %83 = load ptr, ptr %memberidx12, align 8
  %84 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %83)
  %85 = load ptr, ptr %84, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %85, i64 0, i32 5
  %86 = load ptr, ptr %memberidx30, align 8
  %87 = call ptr %86(ptr nonnull %84)
  %88 = alloca ptr, align 8
  %89 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %88, ptr nonnull @150, ptr %82, ptr %87)
  %90 = load ptr, ptr %88, align 8
  %91 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %91, align 8
  %memberidx.i88 = getelementptr inbounds %string, ptr %91, i64 0, i32 1
  store ptr %90, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %string, ptr %91, i64 0, i32 2
  store i64 %89, ptr %memberidx1.i89, align 4
  %memberidx2.i90 = getelementptr inbounds %string, ptr %91, i64 0, i32 3
  store i64 %89, ptr %memberidx2.i90, align 4
  tail call void @free(ptr %82)
  tail call void @free(ptr %87)
  %92 = load ptr, ptr %3, align 8
  %memberidx.i91 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %93 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %Compiler, ptr %93, i64 0, i32 6
  %94 = load ptr, ptr %memberidx1.i92, align 8
  %95 = call ptr @malloc(i32 24)
  store i64 5, ptr %95, align 4
  %memberidx1.i.i93 = getelementptr inbounds %FloError, ptr %95, i64 0, i32 2
  store ptr %92, ptr %memberidx1.i.i93, align 8
  %memberidx2.i.i94 = getelementptr inbounds %FloError, ptr %95, i64 0, i32 1
  store ptr %91, ptr %memberidx2.i.i94, align 8
  %memberidx.i.i95 = getelementptr inbounds %Array_FloError_, ptr %94, i64 0, i32 2
  %96 = load i64, ptr %memberidx.i.i95, align 4
  %memberidx1.i2.i96 = getelementptr inbounds %Array_FloError_, ptr %94, i64 0, i32 3
  %97 = load i64, ptr %memberidx1.i2.i96, align 4
  %.not.i.i97 = icmp slt i64 %96, %97
  br i1 %.not.i.i97, label %TypeChecker_error.exit103, label %if.entry.i.i100

if.entry.i.i100:                                  ; preds = %if.entry24
  %98 = shl i64 %97, 1
  store i64 %98, ptr %memberidx1.i2.i96, align 4
  %memberidx2.i.i.i99 = getelementptr inbounds %Array_FloError_, ptr %94, i64 0, i32 1
  %99 = load ptr, ptr %memberidx2.i.i.i99, align 8
  %100 = shl i64 %97, 4
  %101 = call ptr @realloc(ptr %99, i64 %100)
  store ptr %101, ptr %memberidx2.i.i.i99, align 8
  br label %TypeChecker_error.exit103

TypeChecker_error.exit103:                        ; preds = %if.entry24, %if.entry.i.i100
  %102 = load i64, ptr %memberidx.i.i95, align 4
  %103 = add nsw i64 %102, 1
  store i64 %103, ptr %memberidx.i.i95, align 4
  %memberidx4.i.i101 = getelementptr inbounds %Array_FloError_, ptr %94, i64 0, i32 1
  %104 = load ptr, ptr %memberidx4.i.i101, align 8
  %ptridx.i.i102 = getelementptr inbounds ptr, ptr %104, i64 %102
  store ptr %95, ptr %ptridx.i.i102, align 8
  br label %common.ret

ifend26:                                          ; preds = %ifend20
  %105 = tail call ptr @malloc(i32 49)
  %106 = load ptr, ptr %memberidx23, align 8
  store i64 8, ptr %105, align 4
  %memberidx.i.i104 = getelementptr inbounds %Expression, ptr %105, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i104, align 4
  %memberidx1.i.i105 = getelementptr inbounds %Expression, ptr %105, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i105, align 1
  %memberidx.i106 = getelementptr inbounds %BinaryExpression, ptr %105, i64 0, i32 4
  store ptr %1, ptr %memberidx.i106, align 8
  %memberidx1.i107 = getelementptr inbounds %BinaryExpression, ptr %105, i64 0, i32 5
  store i64 19, ptr %memberidx1.i107, align 4
  %memberidx2.i108 = getelementptr inbounds %BinaryExpression, ptr %105, i64 0, i32 6
  store ptr %right.0, ptr %memberidx2.i108, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %105, i64 0, i32 3
  store ptr %106, ptr %memberidx3.i, align 8
  store i1 false, ptr %memberidx1.i.i105, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_init_function_signature(ptr %0, ptr nocapture readonly %1, ptr %2, ptr nocapture %3) unnamed_addr {
for.entry:
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %4, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 1
  %5 = call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %6 = call ptr @malloc(i32 25)
  %memberidx.i61 = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i61, align 8
  %memberidx1.i62 = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 2
  %8 = load i64, ptr %memberidx1.i62, align 4
  store i1 false, ptr %6, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 3
  store ptr %7, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 2
  store i64 %8, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i, align 4
  %9 = icmp slt i64 %8, 1
  br i1 %9, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx.i68 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %memberidx.i71 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %memberidx.i74 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 2
  %memberidx1.i75 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 3
  %memberidx2.i.i77 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 1
  %memberidx4.i = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_Type____sl__.exit
  %arg.0103.in = phi ptr [ %7, %for.body.lr.ph ], [ %ptridx.i89, %Array_Type____sl__.exit ]
  %storemerge102 = phi i1 [ %9, %for.body.lr.ph ], [ %53, %Array_Type____sl__.exit ]
  %arg.0103 = load ptr, ptr %arg.0103.in, align 8
  %10 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %10, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %10, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i, align 4
  %memberidx1.i.i65 = getelementptr inbounds %Expression, ptr %10, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i65, align 1
  %memberidx3 = getelementptr inbounds %FunctionArg, ptr %10, i64 0, i32 5
  %11 = load ptr, ptr %arg.0103, align 8
  %memberidx5 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx5, align 8
  store ptr %12, ptr %memberidx3, align 8
  %memberidx6 = getelementptr inbounds %FunctionArg, ptr %10, i64 0, i32 6
  store ptr null, ptr %memberidx6, align 8
  %arg_type = alloca ptr, align 8
  %13 = call ptr @malloc(i32 8)
  store i64 20, ptr %13, align 4
  store ptr %13, ptr %arg_type, align 8
  %memberidx7 = getelementptr inbounds %ArgNode, ptr %arg.0103, i64 0, i32 1
  %14 = load ptr, ptr %memberidx7, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %ifend, label %if.entry

common.ret.loopexit:                              ; preds = %if.entry, %if.entry13
  store i1 %storemerge102, ptr %6, align 1
  br label %common.ret

common.ret:                                       ; preds = %common.ret.loopexit, %for.end
  %common.ret.op = phi ptr [ %16, %for.end ], [ null, %common.ret.loopexit ]
  ret ptr %common.ret.op

for.end:                                          ; preds = %Array_Type____sl__.exit, %for.entry
  %storemerge.lcssa = phi i1 [ %9, %for.entry ], [ %53, %Array_Type____sl__.exit ]
  store i1 %storemerge.lcssa, ptr %6, align 1
  tail call void @free(ptr nonnull %6)
  %15 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %2)
  %16 = tail call ptr @malloc(i32 25)
  store i64 15, ptr %16, align 4
  %memberidx.i66 = getelementptr inbounds %FunctionType, ptr %16, i64 0, i32 1
  store ptr %4, ptr %memberidx.i66, align 8
  %memberidx1.i67 = getelementptr inbounds %FunctionType, ptr %16, i64 0, i32 2
  store ptr %15, ptr %memberidx1.i67, align 8
  br label %common.ret

if.entry:                                         ; preds = %for.body
  %17 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr nonnull %14)
  store ptr %17, ptr %arg_type, align 8
  %18 = load ptr, ptr %memberidx.i68, align 8
  %memberidx1.i69 = getelementptr inbounds %Compiler, ptr %18, i64 0, i32 6
  %19 = load ptr, ptr %memberidx1.i69, align 8
  %memberidx2.i70 = getelementptr inbounds %Array_FloError_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i70, align 4
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %common.ret.loopexit, label %ifend

ifend:                                            ; preds = %if.entry, %for.body
  %memberidx12 = getelementptr inbounds %ArgNode, ptr %arg.0103, i64 0, i32 2
  %22 = load ptr, ptr %memberidx12, align 8
  %.not60 = icmp eq ptr %22, null
  br i1 %.not60, label %ifend15, label %if.entry13

if.entry13:                                       ; preds = %ifend
  %23 = load ptr, ptr %arg_type, align 8
  %24 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %23, ptr nonnull %22)
  store ptr %24, ptr %memberidx6, align 8
  %25 = load ptr, ptr %memberidx.i71, align 8
  %memberidx1.i72 = getelementptr inbounds %Compiler, ptr %25, i64 0, i32 6
  %26 = load ptr, ptr %memberidx1.i72, align 8
  %memberidx2.i73 = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i73, align 4
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %common.ret.loopexit, label %ifend20

ifend15:                                          ; preds = %TypeChecker_error.exit, %else23, %if.entry22, %ifend
  %29 = load i64, ptr %memberidx.i74, align 4
  %30 = load i64, ptr %memberidx1.i75, align 4
  %.not.i = icmp slt i64 %29, %30
  br i1 %.not.i, label %Array_FunctionArg____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %ifend15
  %31 = shl i64 %30, 1
  store i64 %31, ptr %memberidx1.i75, align 4
  %32 = load ptr, ptr %memberidx2.i.i77, align 8
  %33 = shl i64 %30, 4
  %34 = call ptr @realloc(ptr %32, i64 %33)
  store ptr %34, ptr %memberidx2.i.i77, align 8
  br label %Array_FunctionArg____sl__.exit

Array_FunctionArg____sl__.exit:                   ; preds = %ifend15, %if.entry.i
  %35 = load i64, ptr %memberidx.i74, align 4
  %36 = add nsw i64 %35, 1
  store i64 %36, ptr %memberidx.i74, align 4
  %37 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i78 = getelementptr inbounds ptr, ptr %37, i64 %35
  store ptr %10, ptr %ptridx.i78, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %10, i64 0, i32 3
  %38 = load ptr, ptr %arg_type, align 8
  store ptr %38, ptr %memberidx38, align 8
  %39 = load ptr, ptr %memberidx3, align 8
  %40 = call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr %0, ptr %39, ptr nonnull %10, ptr %38)
  %memberidx40 = getelementptr inbounds %FunctionArg, ptr %10, i64 0, i32 4
  %memberidx41 = getelementptr inbounds %Var, ptr %40, i64 0, i32 1
  %41 = load ptr, ptr %memberidx41, align 8
  store ptr %41, ptr %memberidx40, align 8
  %42 = load i64, ptr %memberidx.i, align 4
  %43 = load i64, ptr %memberidx1.i, align 4
  %.not.i81 = icmp slt i64 %42, %43
  br i1 %.not.i81, label %Array_Type____sl__.exit, label %if.entry.i84

if.entry.i84:                                     ; preds = %Array_FunctionArg____sl__.exit
  %44 = shl i64 %43, 1
  store i64 %44, ptr %memberidx1.i, align 4
  %45 = load ptr, ptr %memberidx2.i, align 8
  %46 = shl i64 %43, 4
  %47 = call ptr @realloc(ptr %45, i64 %46)
  store ptr %47, ptr %memberidx2.i, align 8
  br label %Array_Type____sl__.exit

Array_Type____sl__.exit:                          ; preds = %Array_FunctionArg____sl__.exit, %if.entry.i84
  %48 = load i64, ptr %memberidx.i, align 4
  %49 = add nsw i64 %48, 1
  store i64 %49, ptr %memberidx.i, align 4
  %50 = load ptr, ptr %memberidx2.i, align 8
  %ptridx.i86 = getelementptr inbounds ptr, ptr %50, i64 %48
  store ptr %38, ptr %ptridx.i86, align 8
  %51 = load i64, ptr %memberidx1.i.i, align 4
  %52 = add nsw i64 %51, 1
  store i64 %52, ptr %memberidx1.i.i, align 4
  %ptridx.i89 = getelementptr inbounds ptr, ptr %7, i64 %51
  %53 = icmp sge i64 %51, %8
  br i1 %53, label %for.end, label %for.body

ifend20:                                          ; preds = %if.entry13
  %54 = load i64, ptr %23, align 4
  %55 = icmp eq i64 %54, 20
  %memberidx26 = getelementptr inbounds %Expression, ptr %24, i64 0, i32 3
  %56 = load ptr, ptr %memberidx26, align 8
  br i1 %55, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend20
  store ptr %56, ptr %arg_type, align 8
  br label %ifend15

else23:                                           ; preds = %ifend20
  %57 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %23, ptr %56)
  br i1 %57, label %ifend15, label %if.entry29

if.entry29:                                       ; preds = %else23
  %58 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %23)
  %59 = load ptr, ptr %58, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 5
  %60 = load ptr, ptr %memberidx32, align 8
  %61 = call ptr %60(ptr nonnull %58)
  %62 = load ptr, ptr %memberidx6, align 8
  %memberidx34 = getelementptr inbounds %Expression, ptr %62, i64 0, i32 3
  %63 = load ptr, ptr %memberidx34, align 8
  %64 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %63)
  %65 = load ptr, ptr %64, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %65, i64 0, i32 5
  %66 = load ptr, ptr %memberidx35, align 8
  %67 = call ptr %66(ptr nonnull %64)
  %68 = alloca ptr, align 8
  %69 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %68, ptr nonnull @90, ptr %61, ptr %67)
  %70 = load ptr, ptr %68, align 8
  %71 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %71, align 8
  %memberidx.i91 = getelementptr inbounds %string, ptr %71, i64 0, i32 1
  store ptr %70, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %string, ptr %71, i64 0, i32 2
  store i64 %69, ptr %memberidx1.i92, align 4
  %memberidx2.i93 = getelementptr inbounds %string, ptr %71, i64 0, i32 3
  store i64 %69, ptr %memberidx2.i93, align 4
  tail call void @free(ptr %61)
  tail call void @free(ptr %67)
  %72 = load ptr, ptr %memberidx12, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %memberidx.i71, align 8
  %memberidx1.i95 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i95, align 8
  %76 = call ptr @malloc(i32 24)
  store i64 5, ptr %76, align 4
  %memberidx1.i.i96 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 2
  store ptr %73, ptr %memberidx1.i.i96, align 8
  %memberidx2.i.i97 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 1
  store ptr %71, ptr %memberidx2.i.i97, align 8
  %memberidx.i.i98 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i.i98, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 3
  %78 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %77, %78
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry29
  %79 = shl i64 %78, 1
  store i64 %79, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i.i, align 8
  %81 = shl i64 %78, 4
  %82 = call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry29, %if.entry.i.i
  %83 = load i64, ptr %memberidx.i.i98, align 4
  %84 = add nsw i64 %83, 1
  store i64 %84, ptr %memberidx.i.i98, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %85 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %85, i64 %83
  store ptr %76, ptr %ptridx.i.i, align 8
  br label %ifend15
}

define internal fastcc ptr @TypeChecker_check_constructor_call(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2, ptr nocapture writeonly %3) unnamed_addr {
  %5 = load ptr, ptr %0, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i, align 8
  %7 = load i64, ptr %1, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %8, i64 %7
  %9 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %9, i64 0, i32 4
  %10 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 2
  %11 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %12, i64 %11
  %13 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %13, i64 0, i32 3
  %14 = load ptr, ptr %memberidx1, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %else13, %if.entry12, %ifend11, %if.entry
  %common.ret.op = phi ptr [ %17, %if.entry ], [ null, %ifend11 ], [ %51, %if.entry12 ], [ %68, %else13 ], [ null, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  %16 = call ptr @malloc(i32 44)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(44) %16, ptr noundef nonnull align 8 dereferenceable(44) @166, i64 44, i1 false)
  %17 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %17, align 8
  %memberidx.i.i30 = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  store ptr %16, ptr %memberidx.i.i30, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  store i64 44, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 3
  store i64 44, ptr %memberidx2.i.i, align 4
  br label %common.ret

ifend:                                            ; preds = %4
  %memberidx2 = getelementptr inbounds %Class, ptr %13, i64 0, i32 5
  %18 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %14, i64 0, i32 2
  %19 = load i64, ptr %memberidx3, align 4
  %memberidx.i31 = getelementptr inbounds %Array_ClassMethod_, ptr %18, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i31, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %20, i64 %19
  %21 = load ptr, ptr %ptridx.i, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %21, i64 0, i32 4
  %22 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %21, i64 0, i32 6
  %23 = load ptr, ptr %memberidx5, align 8
  %24 = call fastcc ptr @TypeChecker_fill_in_call_args(ptr nonnull %0, ptr %22, ptr %23, ptr %2)
  %memberidx.i32 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %25 = load ptr, ptr %memberidx.i32, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %25, i64 0, i32 6
  %26 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i33 = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i33, align 4
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %common.ret, label %ifend8

ifend8:                                           ; preds = %ifend
  %memberidx.i45 = getelementptr inbounds %FunctionType, ptr %22, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i45, align 8
  %memberidx1.i46 = getelementptr inbounds %Array_Type_, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx1.i46, align 4
  %memberidx2.i47 = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i47, align 4
  %.not.i = icmp eq i64 %30, %31
  br i1 %.not.i, label %for.cond.preheader.i, label %TypeChecker_check_function_call_args_match.exit

for.cond.preheader.i:                             ; preds = %ifend8
  %32 = icmp sgt i64 %31, 0
  br i1 %32, label %for.body.lr.ph.i, label %TypeChecker_check_function_call_args_match.exit

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i12.i = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %ifend8.i, %for.body.lr.ph.i
  %storemerge14.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %40, %ifend8.i ]
  %33 = load ptr, ptr %memberidx.i45, align 8
  %memberidx.i.i48 = getelementptr inbounds %Array_Type_, ptr %33, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i48, align 8
  %ptridx.i.i49 = getelementptr inbounds ptr, ptr %34, i64 %storemerge14.i
  %35 = load ptr, ptr %ptridx.i.i49, align 8
  %36 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %36, i64 %storemerge14.i
  %37 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx5.i = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %38 = load ptr, ptr %memberidx5.i, align 8
  %39 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %35, ptr %38)
  br i1 %39, label %ifend8.i, label %TypeChecker_check_function_call_args_match.exit

ifend8.i:                                         ; preds = %for.body.i
  %40 = add nuw nsw i64 %storemerge14.i, 1
  %41 = load i64, ptr %memberidx2.i47, align 4
  %42 = icmp slt i64 %40, %41
  br i1 %42, label %for.body.i, label %TypeChecker_check_function_call_args_match.exit

TypeChecker_check_function_call_args_match.exit:  ; preds = %for.body.i, %ifend8.i, %ifend8, %for.cond.preheader.i
  %common.ret.op.i = phi i64 [ -1, %ifend8 ], [ -2, %for.cond.preheader.i ], [ %storemerge14.i, %for.body.i ], [ -2, %ifend8.i ]
  %43 = icmp sgt i64 %common.ret.op.i, -2
  br i1 %43, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %TypeChecker_check_function_call_args_match.exit
  %44 = icmp eq i64 %common.ret.op.i, -1
  %45 = load ptr, ptr %memberidx.i45, align 8
  br i1 %44, label %if.entry12, label %else13

ifend11:                                          ; preds = %TypeChecker_check_function_call_args_match.exit
  store ptr %24, ptr %3, align 8
  br label %common.ret

if.entry12:                                       ; preds = %if.entry9
  %memberidx16 = getelementptr inbounds %Array_Type_, ptr %45, i64 0, i32 2
  %46 = load i64, ptr %memberidx16, align 4
  %memberidx17 = getelementptr inbounds %Array_ExpressionNode_, ptr %2, i64 0, i32 2
  %47 = load i64, ptr %memberidx17, align 4
  %48 = alloca ptr, align 8
  %49 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %48, ptr nonnull @167, i64 %46, i64 %47)
  %50 = load ptr, ptr %48, align 8
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i34 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i34, align 8
  %memberidx1.i35 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 %49, ptr %memberidx1.i35, align 4
  %memberidx2.i36 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 %49, ptr %memberidx2.i36, align 4
  br label %common.ret

else13:                                           ; preds = %if.entry9
  %memberidx.i37 = getelementptr inbounds %Array_Type_, ptr %45, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i37, align 8
  %ptridx.i38 = getelementptr inbounds ptr, ptr %52, i64 %common.ret.op.i
  %53 = load ptr, ptr %ptridx.i38, align 8
  %54 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %53)
  %55 = load ptr, ptr %54, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %55, i64 0, i32 5
  %56 = load ptr, ptr %memberidx19, align 8
  %57 = call ptr %56(ptr nonnull %54)
  %memberidx.i39 = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i39, align 8
  %ptridx.i40 = getelementptr inbounds ptr, ptr %58, i64 %common.ret.op.i
  %59 = load ptr, ptr %ptridx.i40, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %59, i64 0, i32 3
  %60 = load ptr, ptr %memberidx20, align 8
  %61 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %60)
  %62 = load ptr, ptr %61, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 5
  %63 = load ptr, ptr %memberidx21, align 8
  %64 = call ptr %63(ptr nonnull %61)
  %65 = alloca ptr, align 8
  %66 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %65, ptr nonnull @168, ptr %57, ptr %64, i64 %common.ret.op.i)
  %67 = load ptr, ptr %65, align 8
  %68 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %68, align 8
  %memberidx.i41 = getelementptr inbounds %string, ptr %68, i64 0, i32 1
  store ptr %67, ptr %memberidx.i41, align 8
  %memberidx1.i42 = getelementptr inbounds %string, ptr %68, i64 0, i32 2
  store i64 %66, ptr %memberidx1.i42, align 4
  %memberidx2.i43 = getelementptr inbounds %string, ptr %68, i64 0, i32 3
  store i64 %66, ptr %memberidx2.i43, align 4
  tail call void @free(ptr %57)
  tail call void @free(ptr %64)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_methods(ptr %0, ptr nocapture %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 4
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2592 = getelementptr inbounds %Array_MethodNode_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx2592, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 8
  %6 = load i64, ptr %memberidx, align 4
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %memberidx55 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx124 = getelementptr inbounds %Class, ptr %1, i64 0, i32 3
  %memberidx139 = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %memberidx112 = getelementptr inbounds %Class, ptr %1, i64 0, i32 7
  %memberidx152 = getelementptr inbounds %Class, ptr %1, i64 0, i32 5
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ClassMethod____sl__.exit
  %7 = phi ptr [ %3, %for.body.lr.ph ], [ %375, %Array_ClassMethod____sl__.exit ]
  %i.0594 = phi i64 [ 0, %for.body.lr.ph ], [ %374, %Array_ClassMethod____sl__.exit ]
  %current_vtable_index.0593 = phi i64 [ %6, %for.body.lr.ph ], [ %current_vtable_index.1, %Array_ClassMethod____sl__.exit ]
  %method_node = alloca ptr, align 8
  %memberidx.i = getelementptr inbounds %Array_MethodNode_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %8, i64 %i.0594
  %9 = load ptr, ptr %ptridx.i, align 8
  store ptr %9, ptr %method_node, align 8
  %method = alloca ptr, align 8
  %10 = tail call ptr @malloc(i32 66)
  %memberidx.i201 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 7
  store i1 false, ptr %memberidx.i201, align 1
  store ptr %10, ptr %method, align 8
  %name = alloca ptr, align 8
  %11 = load ptr, ptr %9, align 8
  %memberidx5 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx5, align 8
  store ptr %12, ptr %name, align 8
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 3
  store ptr %12, ptr %memberidx6, align 8
  %method_scope = alloca ptr, align 8
  %13 = call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i202 = getelementptr inbounds %Scope, ptr %13, i64 0, i32 5
  %14 = load ptr, ptr %memberidx1.i, align 8
  store ptr %14, ptr %memberidx.i202, align 8
  store ptr %13, ptr %method_scope, align 8
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %memberidx1.i, align 8
  %memberidx9 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 6
  %16 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionArg_, ptr %16, align 8
  %memberidx.i203 = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 2
  store i64 0, ptr %memberidx.i203, align 4
  %memberidx1.i204 = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 3
  store i64 8, ptr %memberidx1.i204, align 4
  %memberidx2.i = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 1
  %17 = call ptr @malloc(i32 64)
  store ptr %17, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i203, align 4
  store ptr %16, ptr %memberidx9, align 8
  %18 = call fastcc i1 @is_operator_overload_name(ptr %12)
  br i1 %18, label %if.entry, label %ifend

common.ret.sink.split.sink.split:                 ; preds = %if.entry131, %if.entry119, %if.entry107, %if.entry101, %dump_access.exit, %if.entry72, %if.entry61, %if.entry50, %if.entry29, %if.entry20
  %.sink657 = phi i64 [ %80, %if.entry20 ], [ %96, %if.entry29 ], [ %229, %if.entry50 ], [ %253, %if.entry61 ], [ %304, %if.entry72 ], [ %331, %dump_access.exit ], [ %386, %if.entry101 ], [ %402, %if.entry107 ], [ %421, %if.entry119 ], [ %435, %if.entry131 ]
  %memberidx1.i2.i.sink = phi ptr [ %memberidx1.i2.i, %if.entry20 ], [ %memberidx1.i2.i257, %if.entry29 ], [ %memberidx1.i2.i281, %if.entry50 ], [ %memberidx1.i2.i299, %if.entry61 ], [ %memberidx1.i2.i346, %if.entry72 ], [ %memberidx1.i2.i367, %dump_access.exit ], [ %memberidx1.i2.i425, %if.entry101 ], [ %memberidx1.i2.i452, %if.entry107 ], [ %memberidx1.i2.i472, %if.entry119 ], [ %memberidx1.i2.i488, %if.entry131 ]
  %.sink655 = phi ptr [ %77, %if.entry20 ], [ %93, %if.entry29 ], [ %226, %if.entry50 ], [ %250, %if.entry61 ], [ %301, %if.entry72 ], [ %328, %dump_access.exit ], [ %383, %if.entry101 ], [ %399, %if.entry107 ], [ %418, %if.entry119 ], [ %432, %if.entry131 ]
  %memberidx.i.i248.sink.ph = phi ptr [ %memberidx.i.i248, %if.entry20 ], [ %memberidx.i.i256, %if.entry29 ], [ %memberidx.i.i280, %if.entry50 ], [ %memberidx.i.i298, %if.entry61 ], [ %memberidx.i.i345, %if.entry72 ], [ %memberidx.i.i366, %dump_access.exit ], [ %memberidx.i.i424, %if.entry101 ], [ %memberidx.i.i451, %if.entry107 ], [ %memberidx.i.i471, %if.entry119 ], [ %memberidx.i.i487, %if.entry131 ]
  %.sink.ph = phi ptr [ %78, %if.entry20 ], [ %94, %if.entry29 ], [ %227, %if.entry50 ], [ %251, %if.entry61 ], [ %302, %if.entry72 ], [ %329, %dump_access.exit ], [ %384, %if.entry101 ], [ %400, %if.entry107 ], [ %419, %if.entry119 ], [ %433, %if.entry131 ]
  %19 = shl i64 %.sink657, 1
  store i64 %19, ptr %memberidx1.i2.i.sink, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %.sink655, i64 0, i32 1
  %20 = load ptr, ptr %memberidx2.i.i.i, align 8
  %21 = shl i64 %.sink657, 4
  %22 = call ptr @realloc(ptr %20, i64 %21)
  store ptr %22, ptr %memberidx2.i.i.i, align 8
  br label %common.ret.sink.split

common.ret.sink.split:                            ; preds = %common.ret.sink.split.sink.split, %if.entry131, %if.entry119, %if.entry107, %if.entry101, %dump_access.exit, %if.entry72, %if.entry61, %if.entry50, %if.entry29, %if.entry20
  %memberidx.i.i248.sink = phi ptr [ %memberidx.i.i248, %if.entry20 ], [ %memberidx.i.i256, %if.entry29 ], [ %memberidx.i.i280, %if.entry50 ], [ %memberidx.i.i298, %if.entry61 ], [ %memberidx.i.i345, %if.entry72 ], [ %memberidx.i.i366, %dump_access.exit ], [ %memberidx.i.i424, %if.entry101 ], [ %memberidx.i.i451, %if.entry107 ], [ %memberidx.i.i471, %if.entry119 ], [ %memberidx.i.i487, %if.entry131 ], [ %memberidx.i.i248.sink.ph, %common.ret.sink.split.sink.split ]
  %.sink640 = phi ptr [ %77, %if.entry20 ], [ %93, %if.entry29 ], [ %226, %if.entry50 ], [ %250, %if.entry61 ], [ %301, %if.entry72 ], [ %328, %dump_access.exit ], [ %383, %if.entry101 ], [ %399, %if.entry107 ], [ %418, %if.entry119 ], [ %432, %if.entry131 ], [ %.sink655, %common.ret.sink.split.sink.split ]
  %.sink = phi ptr [ %78, %if.entry20 ], [ %94, %if.entry29 ], [ %227, %if.entry50 ], [ %251, %if.entry61 ], [ %302, %if.entry72 ], [ %329, %dump_access.exit ], [ %384, %if.entry101 ], [ %400, %if.entry107 ], [ %419, %if.entry119 ], [ %433, %if.entry131 ], [ %.sink.ph, %common.ret.sink.split.sink.split ]
  %23 = load i64, ptr %memberidx.i.i248.sink, align 4
  %24 = add nsw i64 %23, 1
  store i64 %24, ptr %memberidx.i.i248.sink, align 4
  %memberidx4.i.i493 = getelementptr inbounds %Array_FloError_, ptr %.sink640, i64 0, i32 1
  %25 = load ptr, ptr %memberidx4.i.i493, align 8
  %ptridx.i.i494 = getelementptr inbounds ptr, ptr %25, i64 %23
  store ptr %.sink, ptr %ptridx.i.i494, align 8
  br label %common.ret

common.ret:                                       ; preds = %Array_ClassMethod____sl__.exit, %common.ret.sink.split, %for.entry
  ret void

if.entry:                                         ; preds = %for.body
  %args_num = alloca i64, align 8
  store i64 1, ptr %args_num, align 8
  %26 = call ptr @malloc(i32 8)
  store i64 6872337336460992351, ptr %26, align 8
  %27 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i, align 4
  %memberidx.i205 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %28 = load i64, ptr %memberidx.i205, align 4
  %.not.i = icmp eq i64 %28, 8
  br i1 %.not.i, label %ifend.i, label %string___eq__.exit

ifend.i:                                          ; preds = %if.entry
  %memberidx2.i207 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i207, align 8
  %30 = call i64 @memcmp(ptr %29, ptr nonnull %26, i64 %28)
  %31 = icmp eq i64 %30, 0
  br label %string___eq__.exit

string___eq__.exit:                               ; preds = %if.entry, %ifend.i
  %common.ret.op.i = phi i1 [ %31, %ifend.i ], [ false, %if.entry ]
  %32 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %32, ptr noundef nonnull align 8 dereferenceable(7) @119, i64 7, i1 false)
  %33 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i.i208 = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i.i208, align 8
  %memberidx1.i.i209 = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i209, align 4
  %memberidx2.i.i210 = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i210, align 4
  %34 = load i64, ptr %memberidx.i205, align 4
  %.not.i213 = icmp eq i64 %34, 7
  br i1 %.not.i213, label %ifend.i217, label %string___eq__.exit218

ifend.i217:                                       ; preds = %string___eq__.exit
  %memberidx2.i215 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %35 = load ptr, ptr %memberidx2.i215, align 8
  %36 = call i64 @memcmp(ptr %35, ptr %32, i64 %34)
  %37 = icmp eq i64 %36, 0
  br label %string___eq__.exit218

string___eq__.exit218:                            ; preds = %string___eq__.exit, %ifend.i217
  %common.ret.op.i214 = phi i1 [ %37, %ifend.i217 ], [ false, %string___eq__.exit ]
  %38 = or i1 %common.ret.op.i, %common.ret.op.i214
  br i1 %38, label %if.entry12, label %else13

ifend:                                            ; preds = %ifend22, %for.body
  %39 = load ptr, ptr %method, align 8
  %memberidx35 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 7
  %40 = load ptr, ptr %method_node, align 8
  %memberidx36 = getelementptr inbounds %MethodNode, ptr %40, i64 0, i32 6
  %41 = load i1, ptr %memberidx36, align 1
  store i1 %41, ptr %memberidx35, align 1
  %memberidx37 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 1
  %memberidx38 = getelementptr inbounds %MethodNode, ptr %40, i64 0, i32 5
  %42 = load i1, ptr %memberidx38, align 1
  store i1 %42, ptr %memberidx37, align 1
  %memberidx39 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 2
  %memberidx40 = getelementptr inbounds %MethodNode, ptr %40, i64 0, i32 3
  %43 = load i64, ptr %memberidx40, align 4
  store i64 %43, ptr %memberidx39, align 4
  %memberidx41 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 4
  %memberidx42 = getelementptr inbounds %MethodNode, ptr %40, i64 0, i32 1
  %44 = load ptr, ptr %memberidx42, align 8
  %memberidx43 = getelementptr inbounds %MethodNode, ptr %40, i64 0, i32 4
  %45 = load ptr, ptr %memberidx43, align 8
  %memberidx44 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 6
  %46 = load ptr, ptr %memberidx44, align 8
  %47 = call fastcc ptr @TypeChecker_init_function_signature(ptr %0, ptr %44, ptr %45, ptr %46)
  store ptr %47, ptr %memberidx41, align 8
  %48 = load ptr, ptr %name, align 8
  %49 = call ptr @malloc(i32 8)
  store i64 6872337336460992351, ptr %49, align 8
  %50 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %50, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  store ptr %49, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %50, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i221, align 4
  %memberidx.i222 = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  %51 = load i64, ptr %memberidx.i222, align 4
  %.not.i224 = icmp eq i64 %51, 8
  br i1 %.not.i224, label %ifend.i228, label %ifend47

ifend.i228:                                       ; preds = %ifend
  %memberidx2.i226 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i226, align 8
  %53 = call i64 @memcmp(ptr %52, ptr nonnull %49, i64 %51)
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %if.entry45, label %ifend47

if.entry12:                                       ; preds = %string___eq__.exit218
  store i64 0, ptr %args_num, align 8
  br label %ifend14

else13:                                           ; preds = %string___eq__.exit218
  %55 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %55, ptr noundef nonnull align 8 dereferenceable(11) @106, i64 11, i1 false)
  %56 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %56, align 8
  %memberidx.i.i230 = getelementptr inbounds %string, ptr %56, i64 0, i32 1
  store ptr %55, ptr %memberidx.i.i230, align 8
  %memberidx1.i.i231 = getelementptr inbounds %string, ptr %56, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i231, align 4
  %memberidx2.i.i232 = getelementptr inbounds %string, ptr %56, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i232, align 4
  %57 = load i64, ptr %memberidx.i205, align 4
  %.not.i235 = icmp eq i64 %57, 11
  br i1 %.not.i235, label %ifend.i239, label %ifend14

ifend.i239:                                       ; preds = %else13
  %memberidx2.i237 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %58 = load ptr, ptr %memberidx2.i237, align 8
  %59 = call i64 @memcmp(ptr %58, ptr %55, i64 %57)
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %if.entry15, label %ifend14

ifend14:                                          ; preds = %else13, %if.entry15, %ifend.i239, %if.entry12
  %memberidx18 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 1
  %61 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Array_ArgNode_, ptr %61, i64 0, i32 2
  %62 = load i64, ptr %memberidx19, align 4
  %63 = load i64, ptr %args_num, align 8
  %.not200 = icmp eq i64 %62, %63
  br i1 %.not200, label %ifend22, label %if.entry20

if.entry15:                                       ; preds = %ifend.i239
  store i64 2, ptr %args_num, align 8
  br label %ifend14

if.entry20:                                       ; preds = %ifend14
  %64 = load ptr, ptr %12, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 5
  %65 = load ptr, ptr %memberidx23, align 8
  %66 = call ptr %65(ptr nonnull %12)
  %67 = load ptr, ptr %memberidx18, align 8
  %memberidx25 = getelementptr inbounds %Array_ArgNode_, ptr %67, i64 0, i32 2
  %68 = load i64, ptr %memberidx25, align 4
  %69 = alloca ptr, align 8
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %69, ptr nonnull @126, i64 %63, ptr %66, i64 %68)
  %71 = load ptr, ptr %69, align 8
  %72 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i241 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i241, align 8
  %memberidx1.i242 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 %70, ptr %memberidx1.i242, align 4
  %memberidx2.i243 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 %70, ptr %memberidx2.i243, align 4
  tail call void @free(ptr %66)
  %73 = load ptr, ptr %method_node, align 8
  %74 = load ptr, ptr %73, align 8
  %memberidx27 = getelementptr inbounds %Token, ptr %74, i64 0, i32 1
  %75 = load ptr, ptr %memberidx27, align 8
  %memberidx.i244 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %76 = load ptr, ptr %memberidx.i244, align 8
  %memberidx1.i245 = getelementptr inbounds %Compiler, ptr %76, i64 0, i32 6
  %77 = load ptr, ptr %memberidx1.i245, align 8
  %78 = call ptr @malloc(i32 24)
  store i64 4, ptr %78, align 4
  %memberidx1.i.i246 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 2
  store ptr %75, ptr %memberidx1.i.i246, align 8
  %memberidx2.i.i247 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 1
  store ptr %72, ptr %memberidx2.i.i247, align 8
  %memberidx.i.i248 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 2
  %79 = load i64, ptr %memberidx.i.i248, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 3
  %80 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %79, %80
  br i1 %.not.i.i, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend22:                                          ; preds = %ifend14
  %memberidx28 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 5
  %81 = load i1, ptr %memberidx28, align 1
  br i1 %81, label %if.entry29, label %ifend

if.entry29:                                       ; preds = %ifend22
  %82 = load ptr, ptr %12, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %82, i64 0, i32 5
  %83 = load ptr, ptr %memberidx32, align 8
  %84 = call ptr %83(ptr nonnull %12)
  %85 = alloca ptr, align 8
  %86 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %85, ptr nonnull @127, ptr %84)
  %87 = load ptr, ptr %85, align 8
  %88 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %88, align 8
  %memberidx.i249 = getelementptr inbounds %string, ptr %88, i64 0, i32 1
  store ptr %87, ptr %memberidx.i249, align 8
  %memberidx1.i250 = getelementptr inbounds %string, ptr %88, i64 0, i32 2
  store i64 %86, ptr %memberidx1.i250, align 4
  %memberidx2.i251 = getelementptr inbounds %string, ptr %88, i64 0, i32 3
  store i64 %86, ptr %memberidx2.i251, align 4
  tail call void @free(ptr %84)
  %89 = load ptr, ptr %method_node, align 8
  %90 = load ptr, ptr %89, align 8
  %memberidx34 = getelementptr inbounds %Token, ptr %90, i64 0, i32 1
  %91 = load ptr, ptr %memberidx34, align 8
  %memberidx.i252 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %92 = load ptr, ptr %memberidx.i252, align 8
  %memberidx1.i253 = getelementptr inbounds %Compiler, ptr %92, i64 0, i32 6
  %93 = load ptr, ptr %memberidx1.i253, align 8
  %94 = call ptr @malloc(i32 24)
  store i64 4, ptr %94, align 4
  %memberidx1.i.i254 = getelementptr inbounds %FloError, ptr %94, i64 0, i32 2
  store ptr %91, ptr %memberidx1.i.i254, align 8
  %memberidx2.i.i255 = getelementptr inbounds %FloError, ptr %94, i64 0, i32 1
  store ptr %88, ptr %memberidx2.i.i255, align 8
  %memberidx.i.i256 = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 2
  %95 = load i64, ptr %memberidx.i.i256, align 4
  %memberidx1.i2.i257 = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 3
  %96 = load i64, ptr %memberidx1.i2.i257, align 4
  %.not.i.i258 = icmp slt i64 %95, %96
  br i1 %.not.i.i258, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

if.entry45:                                       ; preds = %ifend.i228
  %97 = load ptr, ptr %memberidx41, align 8
  %memberidx49 = getelementptr inbounds %FunctionType, ptr %97, i64 0, i32 2
  %98 = load ptr, ptr %memberidx49, align 8
  %99 = call fastcc i1 @is_object(ptr %98)
  br i1 %99, label %ifend.i544, label %if.entry50

ifend.i544:                                       ; preds = %if.entry45
  %100 = load ptr, ptr %0, align 8
  %101 = call fastcc ptr @get_class_from_type(ptr %100, ptr %98)
  %memberidx1.i537 = getelementptr inbounds %Class, ptr %101, i64 0, i32 6
  %102 = load ptr, ptr %memberidx1.i537, align 8
  %103 = call ptr @malloc(i32 4)
  store i32 1701736292, ptr %103, align 8
  %104 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %104, align 8
  %memberidx.i.i.i538 = getelementptr inbounds %string, ptr %104, i64 0, i32 1
  store ptr %103, ptr %memberidx.i.i.i538, align 8
  %memberidx1.i.i.i539 = getelementptr inbounds %string, ptr %104, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i539, align 4
  %memberidx2.i.i.i540 = getelementptr inbounds %string, ptr %104, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i540, align 4
  %105 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %104)
  %memberidx.i.i541 = getelementptr inbounds %Map_string_PropId_, ptr %102, i64 0, i32 1
  %106 = load i64, ptr %memberidx.i.i541, align 4
  %107 = srem i64 %105, %106
  %108 = load ptr, ptr %102, align 8
  %ptridx.i.i542 = getelementptr inbounds ptr, ptr %108, i64 %107
  %109 = load ptr, ptr %ptridx.i.i542, align 8
  %.not.i.i543 = icmp eq ptr %109, null
  br i1 %.not.i.i543, label %while.end.i.i, label %while.entry.i.i

while.entry.i.i:                                  ; preds = %ifend.i544, %else.i.i
  %hash.0.i.i = phi i64 [ %123, %else.i.i ], [ %107, %ifend.i544 ]
  %110 = load ptr, ptr %102, align 8
  %ptridx3.i.i = getelementptr inbounds ptr, ptr %110, i64 %hash.0.i.i
  %111 = load ptr, ptr %ptridx3.i.i, align 8
  %112 = load ptr, ptr %111, align 8
  %memberidx.i.i29.i = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  %113 = load i64, ptr %memberidx.i.i29.i, align 4
  %114 = load i64, ptr %memberidx1.i.i.i539, align 4
  %.not.i.i.i = icmp eq i64 %113, %114
  br i1 %.not.i.i.i, label %ifend.i.i.i, label %else.i.i

ifend.i.i.i:                                      ; preds = %while.entry.i.i
  %memberidx2.i.i31.i = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  %115 = load ptr, ptr %memberidx2.i.i31.i, align 8
  %116 = load ptr, ptr %memberidx.i.i.i538, align 8
  %117 = call i64 @memcmp(ptr %115, ptr %116, i64 %113)
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %while.end.i.i, label %else.i.i

while.end.i.i:                                    ; preds = %else.i.i, %ifend.i.i.i, %ifend.i544
  %hash.1.i.i = phi i64 [ %107, %ifend.i544 ], [ %hash.0.i.i, %ifend.i.i.i ], [ %123, %else.i.i ]
  %119 = load ptr, ptr %102, align 8
  %ptridx9.i.i = getelementptr inbounds ptr, ptr %119, i64 %hash.1.i.i
  %120 = load ptr, ptr %ptridx9.i.i, align 8
  %.not29.i.i = icmp eq ptr %120, null
  br i1 %.not29.i.i, label %Map_string_PropId____getitem__.exit.i, label %if.entry10.i.i

else.i.i:                                         ; preds = %ifend.i.i.i, %while.entry.i.i
  %121 = add nsw i64 %hash.0.i.i, 1
  %122 = load i64, ptr %memberidx.i.i541, align 4
  %123 = srem i64 %121, %122
  %124 = load ptr, ptr %102, align 8
  %ptridx7.i.i = getelementptr inbounds ptr, ptr %124, i64 %123
  %125 = load ptr, ptr %ptridx7.i.i, align 8
  %.not30.i.i = icmp eq ptr %125, null
  br i1 %.not30.i.i, label %while.end.i.i, label %while.entry.i.i

if.entry10.i.i:                                   ; preds = %while.end.i.i
  %memberidx15.i.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %120, i64 0, i32 1
  %126 = load ptr, ptr %memberidx15.i.i, align 8
  br label %Map_string_PropId____getitem__.exit.i

Map_string_PropId____getitem__.exit.i:            ; preds = %if.entry10.i.i, %while.end.i.i
  %common.ret.op.i.i = phi ptr [ %126, %if.entry10.i.i ], [ null, %while.end.i.i ]
  %127 = icmp eq ptr %common.ret.op.i.i, null
  br i1 %127, label %if.entry50, label %ifend4.i

ifend4.i:                                         ; preds = %Map_string_PropId____getitem__.exit.i
  %128 = load ptr, ptr %0, align 8
  %memberidx.i.i32.i = getelementptr inbounds %PropId, ptr %common.ret.op.i.i, i64 0, i32 1
  %129 = load ptr, ptr %memberidx.i.i32.i, align 8
  %memberidx.i.i.i.i545 = getelementptr inbounds %Program, ptr %128, i64 0, i32 1
  %130 = load ptr, ptr %memberidx.i.i.i.i545, align 8
  %131 = load i64, ptr %129, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %130, i64 0, i32 1
  %132 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %132, i64 %131
  %133 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %133, i64 0, i32 4
  %134 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %129, i64 0, i32 2
  %135 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %134, i64 0, i32 1
  %136 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %136, i64 %135
  %137 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %138 = load i64, ptr %common.ret.op.i.i, align 4
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %if.entry.i.i549, label %ifend.i.i551

if.entry.i.i549:                                  ; preds = %ifend4.i
  %memberidx1.i.i546 = getelementptr inbounds %Class, ptr %137, i64 0, i32 5
  %140 = load ptr, ptr %memberidx1.i.i546, align 8
  %memberidx2.i.i547 = getelementptr inbounds %PropId, ptr %common.ret.op.i.i, i64 0, i32 2
  %141 = load i64, ptr %memberidx2.i.i547, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %140, i64 0, i32 1
  %142 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %142, i64 %141
  %143 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i548 = getelementptr inbounds %ClassMethod, ptr %143, i64 0, i32 4
  br label %get_class_prop_type.exit.i

ifend.i.i551:                                     ; preds = %ifend4.i
  %memberidx4.i.i550 = getelementptr inbounds %Class, ptr %137, i64 0, i32 4
  %144 = load ptr, ptr %memberidx4.i.i550, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %common.ret.op.i.i, i64 0, i32 2
  %145 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %144, i64 0, i32 1
  %146 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %146, i64 %145
  %147 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %147, i64 0, i32 4
  br label %get_class_prop_type.exit.i

get_class_prop_type.exit.i:                       ; preds = %ifend.i.i551, %if.entry.i.i549
  %common.ret.op.in.i.i = phi ptr [ %memberidx3.i.i548, %if.entry.i.i549 ], [ %memberidx6.i.i, %ifend.i.i551 ]
  %common.ret.op.i33.i = load ptr, ptr %common.ret.op.in.i.i, align 8
  %148 = load i64, ptr %common.ret.op.i33.i, align 4
  %.not.i552 = icmp eq i64 %148, 0
  br i1 %.not.i552, label %ifend9.i, label %if.entry50

ifend9.i:                                         ; preds = %get_class_prop_type.exit.i
  %149 = load ptr, ptr %memberidx1.i537, align 8
  %150 = call ptr @malloc(i32 4)
  store i32 1954047342, ptr %150, align 8
  %151 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %151, align 8
  %memberidx.i.i34.i = getelementptr inbounds %string, ptr %151, i64 0, i32 1
  store ptr %150, ptr %memberidx.i.i34.i, align 8
  %memberidx1.i.i35.i = getelementptr inbounds %string, ptr %151, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i35.i, align 4
  %memberidx2.i.i36.i = getelementptr inbounds %string, ptr %151, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i36.i, align 4
  %152 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %151)
  %memberidx.i37.i = getelementptr inbounds %Map_string_PropId_, ptr %149, i64 0, i32 1
  %153 = load i64, ptr %memberidx.i37.i, align 4
  %154 = srem i64 %152, %153
  %155 = load ptr, ptr %149, align 8
  %ptridx.i38.i = getelementptr inbounds ptr, ptr %155, i64 %154
  %156 = load ptr, ptr %ptridx.i38.i, align 8
  %.not.i39.i = icmp eq ptr %156, null
  br i1 %.not.i39.i, label %while.end.i54.i, label %while.entry.i45.i

while.entry.i45.i:                                ; preds = %ifend9.i, %else.i57.i
  %hash.0.i40.i = phi i64 [ %170, %else.i57.i ], [ %154, %ifend9.i ]
  %157 = load ptr, ptr %149, align 8
  %ptridx3.i41.i = getelementptr inbounds ptr, ptr %157, i64 %hash.0.i40.i
  %158 = load ptr, ptr %ptridx3.i41.i, align 8
  %159 = load ptr, ptr %158, align 8
  %memberidx.i.i42.i = getelementptr inbounds %string, ptr %159, i64 0, i32 2
  %160 = load i64, ptr %memberidx.i.i42.i, align 4
  %161 = load i64, ptr %memberidx1.i.i35.i, align 4
  %.not.i.i44.i = icmp eq i64 %160, %161
  br i1 %.not.i.i44.i, label %ifend.i.i48.i, label %else.i57.i

ifend.i.i48.i:                                    ; preds = %while.entry.i45.i
  %memberidx2.i.i46.i = getelementptr inbounds %string, ptr %159, i64 0, i32 1
  %162 = load ptr, ptr %memberidx2.i.i46.i, align 8
  %163 = load ptr, ptr %memberidx.i.i34.i, align 8
  %164 = call i64 @memcmp(ptr %162, ptr %163, i64 %160)
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %while.end.i54.i, label %else.i57.i

while.end.i54.i:                                  ; preds = %else.i57.i, %ifend.i.i48.i, %ifend9.i
  %hash.1.i51.i = phi i64 [ %154, %ifend9.i ], [ %hash.0.i40.i, %ifend.i.i48.i ], [ %170, %else.i57.i ]
  %166 = load ptr, ptr %149, align 8
  %ptridx9.i52.i = getelementptr inbounds ptr, ptr %166, i64 %hash.1.i51.i
  %167 = load ptr, ptr %ptridx9.i52.i, align 8
  %.not29.i53.i = icmp eq ptr %167, null
  br i1 %.not29.i53.i, label %Map_string_PropId____getitem__.exit61.i, label %if.entry10.i60.i

else.i57.i:                                       ; preds = %ifend.i.i48.i, %while.entry.i45.i
  %168 = add nsw i64 %hash.0.i40.i, 1
  %169 = load i64, ptr %memberidx.i37.i, align 4
  %170 = srem i64 %168, %169
  %171 = load ptr, ptr %149, align 8
  %ptridx7.i55.i = getelementptr inbounds ptr, ptr %171, i64 %170
  %172 = load ptr, ptr %ptridx7.i55.i, align 8
  %.not30.i56.i = icmp eq ptr %172, null
  br i1 %.not30.i56.i, label %while.end.i54.i, label %while.entry.i45.i

if.entry10.i60.i:                                 ; preds = %while.end.i54.i
  %memberidx15.i59.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %167, i64 0, i32 1
  %173 = load ptr, ptr %memberidx15.i59.i, align 8
  br label %Map_string_PropId____getitem__.exit61.i

Map_string_PropId____getitem__.exit61.i:          ; preds = %if.entry10.i60.i, %while.end.i54.i
  %common.ret.op.i58.i = phi ptr [ %173, %if.entry10.i60.i ], [ null, %while.end.i54.i ]
  %174 = icmp eq ptr %common.ret.op.i58.i, null
  br i1 %174, label %if.entry50, label %ifend13.i

ifend13.i:                                        ; preds = %Map_string_PropId____getitem__.exit61.i
  %175 = load ptr, ptr %0, align 8
  %memberidx.i.i62.i = getelementptr inbounds %PropId, ptr %common.ret.op.i58.i, i64 0, i32 1
  %176 = load ptr, ptr %memberidx.i.i62.i, align 8
  %memberidx.i.i.i63.i = getelementptr inbounds %Program, ptr %175, i64 0, i32 1
  %177 = load ptr, ptr %memberidx.i.i.i63.i, align 8
  %178 = load i64, ptr %176, align 4
  %memberidx.i.i.i.i64.i = getelementptr inbounds %Array_Module_, ptr %177, i64 0, i32 1
  %179 = load ptr, ptr %memberidx.i.i.i.i64.i, align 8
  %ptridx.i.i.i.i65.i = getelementptr inbounds ptr, ptr %179, i64 %178
  %180 = load ptr, ptr %ptridx.i.i.i.i65.i, align 8
  %memberidx2.i.i.i66.i = getelementptr inbounds %Module, ptr %180, i64 0, i32 4
  %181 = load ptr, ptr %memberidx2.i.i.i66.i, align 8
  %memberidx3.i.i.i67.i = getelementptr inbounds %TypeId, ptr %176, i64 0, i32 2
  %182 = load i64, ptr %memberidx3.i.i.i67.i, align 4
  %memberidx.i5.i.i.i68.i = getelementptr inbounds %Array_Class_, ptr %181, i64 0, i32 1
  %183 = load ptr, ptr %memberidx.i5.i.i.i68.i, align 8
  %ptridx.i6.i.i.i69.i = getelementptr inbounds ptr, ptr %183, i64 %182
  %184 = load ptr, ptr %ptridx.i6.i.i.i69.i, align 8
  %185 = load i64, ptr %common.ret.op.i58.i, align 4
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %if.entry.i77.i, label %ifend.i83.i

if.entry.i77.i:                                   ; preds = %ifend13.i
  %memberidx1.i72.i = getelementptr inbounds %Class, ptr %184, i64 0, i32 5
  %187 = load ptr, ptr %memberidx1.i72.i, align 8
  %memberidx2.i73.i = getelementptr inbounds %PropId, ptr %common.ret.op.i58.i, i64 0, i32 2
  %188 = load i64, ptr %memberidx2.i73.i, align 4
  %memberidx.i12.i74.i = getelementptr inbounds %Array_ClassMethod_, ptr %187, i64 0, i32 1
  %189 = load ptr, ptr %memberidx.i12.i74.i, align 8
  %ptridx.i13.i75.i = getelementptr inbounds ptr, ptr %189, i64 %188
  %190 = load ptr, ptr %ptridx.i13.i75.i, align 8
  %memberidx3.i76.i = getelementptr inbounds %ClassMethod, ptr %190, i64 0, i32 4
  br label %get_class_prop_type.exit84.i

ifend.i83.i:                                      ; preds = %ifend13.i
  %memberidx4.i78.i = getelementptr inbounds %Class, ptr %184, i64 0, i32 4
  %191 = load ptr, ptr %memberidx4.i78.i, align 8
  %memberidx5.i79.i = getelementptr inbounds %PropId, ptr %common.ret.op.i58.i, i64 0, i32 2
  %192 = load i64, ptr %memberidx5.i79.i, align 4
  %memberidx.i11.i80.i = getelementptr inbounds %Array_ClassField_, ptr %191, i64 0, i32 1
  %193 = load ptr, ptr %memberidx.i11.i80.i, align 8
  %ptridx.i.i81.i = getelementptr inbounds ptr, ptr %193, i64 %192
  %194 = load ptr, ptr %ptridx.i.i81.i, align 8
  %memberidx6.i82.i = getelementptr inbounds %ClassField, ptr %194, i64 0, i32 4
  br label %get_class_prop_type.exit84.i

get_class_prop_type.exit84.i:                     ; preds = %ifend.i83.i, %if.entry.i77.i
  %common.ret.op.in.i70.i = phi ptr [ %memberidx3.i76.i, %if.entry.i77.i ], [ %memberidx6.i82.i, %ifend.i83.i ]
  %common.ret.op.i71.i = load ptr, ptr %common.ret.op.in.i70.i, align 8
  %195 = load i64, ptr %common.ret.op.i71.i, align 4
  %.not27.i = icmp eq i64 %195, 15
  br i1 %.not27.i, label %ifend18.i, label %if.entry50

ifend18.i:                                        ; preds = %get_class_prop_type.exit84.i
  %memberidx19.i = getelementptr inbounds %FunctionType, ptr %common.ret.op.i71.i, i64 0, i32 1
  %196 = load ptr, ptr %memberidx19.i, align 8
  %memberidx20.i = getelementptr inbounds %Array_Type_, ptr %196, i64 0, i32 2
  %197 = load i64, ptr %memberidx20.i, align 4
  %.not28.i = icmp eq i64 %197, 0
  br i1 %.not28.i, label %ifend47, label %if.entry50

ifend47:                                          ; preds = %ifend, %ifend18.i, %ifend.i228
  %198 = load ptr, ptr %memberidx55, align 8
  %199 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %48)
  %memberidx.i265 = getelementptr inbounds %Map_string_PropId_, ptr %198, i64 0, i32 1
  %200 = load i64, ptr %memberidx.i265, align 4
  %201 = srem i64 %199, %200
  %202 = load ptr, ptr %198, align 8
  %ptridx.i266 = getelementptr inbounds ptr, ptr %202, i64 %201
  %203 = load ptr, ptr %ptridx.i266, align 8
  %.not.i267 = icmp eq ptr %203, null
  br i1 %.not.i267, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %ifend47
  %memberidx3.i.i = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %217, %else.i ], [ %201, %while.entry.i.preheader ]
  %204 = load ptr, ptr %198, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %204, i64 %hash.0.i
  %205 = load ptr, ptr %ptridx3.i, align 8
  %206 = load ptr, ptr %205, align 8
  %memberidx.i.i268 = getelementptr inbounds %string, ptr %206, i64 0, i32 2
  %207 = load i64, ptr %memberidx.i.i268, align 4
  %208 = load i64, ptr %memberidx.i222, align 4
  %.not.i.i270 = icmp eq i64 %207, %208
  br i1 %.not.i.i270, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i271 = getelementptr inbounds %string, ptr %206, i64 0, i32 1
  %209 = load ptr, ptr %memberidx2.i.i271, align 8
  %210 = load ptr, ptr %memberidx3.i.i, align 8
  %211 = call i64 @memcmp(ptr %209, ptr %210, i64 %207)
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %ifend47
  %hash.1.i = phi i64 [ %201, %ifend47 ], [ %hash.0.i, %ifend.i.i ], [ %217, %else.i ]
  %213 = load ptr, ptr %198, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %213, i64 %hash.1.i
  %214 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %214, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %215 = add nsw i64 %hash.0.i, 1
  %216 = load i64, ptr %memberidx.i265, align 4
  %217 = srem i64 %215, %216
  %218 = load ptr, ptr %198, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %218, i64 %217
  %219 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %219, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %214, i64 0, i32 1
  %220 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i272 = phi ptr [ %220, %if.entry10.i ], [ null, %while.end.i ]
  %.not = icmp eq ptr %common.ret.op.i272, null
  br i1 %.not, label %else57, label %if.entry56

if.entry50:                                       ; preds = %if.entry45, %Map_string_PropId____getitem__.exit.i, %get_class_prop_type.exit.i, %Map_string_PropId____getitem__.exit61.i, %get_class_prop_type.exit84.i, %ifend18.i
  %221 = call ptr @malloc(i32 74)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(74) %221, ptr noundef nonnull align 8 dereferenceable(74) @128, i64 74, i1 false)
  %222 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %222, align 8
  %memberidx.i.i273 = getelementptr inbounds %string, ptr %222, i64 0, i32 1
  store ptr %221, ptr %memberidx.i.i273, align 8
  %memberidx1.i.i274 = getelementptr inbounds %string, ptr %222, i64 0, i32 2
  store i64 74, ptr %memberidx1.i.i274, align 4
  %memberidx2.i.i275 = getelementptr inbounds %string, ptr %222, i64 0, i32 3
  store i64 74, ptr %memberidx2.i.i275, align 4
  %223 = load ptr, ptr %40, align 8
  %memberidx54 = getelementptr inbounds %Token, ptr %223, i64 0, i32 1
  %224 = load ptr, ptr %memberidx54, align 8
  %memberidx.i276 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %225 = load ptr, ptr %memberidx.i276, align 8
  %memberidx1.i277 = getelementptr inbounds %Compiler, ptr %225, i64 0, i32 6
  %226 = load ptr, ptr %memberidx1.i277, align 8
  %227 = call ptr @malloc(i32 24)
  store i64 5, ptr %227, align 4
  %memberidx1.i.i278 = getelementptr inbounds %FloError, ptr %227, i64 0, i32 2
  store ptr %224, ptr %memberidx1.i.i278, align 8
  %memberidx2.i.i279 = getelementptr inbounds %FloError, ptr %227, i64 0, i32 1
  store ptr %222, ptr %memberidx2.i.i279, align 8
  %memberidx.i.i280 = getelementptr inbounds %Array_FloError_, ptr %226, i64 0, i32 2
  %228 = load i64, ptr %memberidx.i.i280, align 4
  %memberidx1.i2.i281 = getelementptr inbounds %Array_FloError_, ptr %226, i64 0, i32 3
  %229 = load i64, ptr %memberidx1.i2.i281, align 4
  %.not.i.i282 = icmp slt i64 %228, %229
  br i1 %.not.i.i282, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

if.entry56:                                       ; preds = %Map_string_PropId____getitem__.exit
  %memberidx59 = getelementptr inbounds %PropId, ptr %common.ret.op.i272, i64 0, i32 1
  %230 = load ptr, ptr %memberidx59, align 8
  %231 = load ptr, ptr %1, align 8
  %232 = icmp eq ptr %230, %231
  br i1 %232, label %if.entry61, label %ifend63

else57:                                           ; preds = %Map_string_PropId____getitem__.exit
  %memberidx93 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 9
  store i64 %current_vtable_index.0593, ptr %memberidx93, align 4
  br label %ifend58

ifend58:                                          ; preds = %else57, %get_vtable_index.exit
  %233 = tail call ptr @malloc(i32 24)
  %234 = load ptr, ptr %1, align 8
  store i64 0, ptr %233, align 4
  %memberidx1.i289 = getelementptr inbounds %PropId, ptr %233, i64 0, i32 1
  store ptr %234, ptr %memberidx1.i289, align 8
  %memberidx2.i290 = getelementptr inbounds %PropId, ptr %233, i64 0, i32 2
  store i64 %i.0594, ptr %memberidx2.i290, align 4
  store ptr %233, ptr %39, align 8
  %235 = load i1, ptr %memberidx38, align 1
  br i1 %235, label %if.entry97, label %else98

if.entry61:                                       ; preds = %if.entry56
  %236 = load ptr, ptr %48, align 8
  %memberidx64 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %236, i64 0, i32 5
  %237 = load ptr, ptr %memberidx64, align 8
  %238 = call ptr %237(ptr nonnull %48)
  %memberidx65 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %239 = load ptr, ptr %memberidx65, align 8
  %240 = load ptr, ptr %239, align 8
  %memberidx66 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %240, i64 0, i32 5
  %241 = load ptr, ptr %memberidx66, align 8
  %242 = call ptr %241(ptr nonnull %239)
  %243 = alloca ptr, align 8
  %244 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %243, ptr nonnull @129, ptr %238, ptr %242)
  %245 = load ptr, ptr %243, align 8
  %246 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %246, align 8
  %memberidx.i291 = getelementptr inbounds %string, ptr %246, i64 0, i32 1
  store ptr %245, ptr %memberidx.i291, align 8
  %memberidx1.i292 = getelementptr inbounds %string, ptr %246, i64 0, i32 2
  store i64 %244, ptr %memberidx1.i292, align 4
  %memberidx2.i293 = getelementptr inbounds %string, ptr %246, i64 0, i32 3
  store i64 %244, ptr %memberidx2.i293, align 4
  tail call void @free(ptr %238)
  tail call void @free(ptr %242)
  %247 = load ptr, ptr %40, align 8
  %memberidx68 = getelementptr inbounds %Token, ptr %247, i64 0, i32 1
  %248 = load ptr, ptr %memberidx68, align 8
  %memberidx.i294 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %249 = load ptr, ptr %memberidx.i294, align 8
  %memberidx1.i295 = getelementptr inbounds %Compiler, ptr %249, i64 0, i32 6
  %250 = load ptr, ptr %memberidx1.i295, align 8
  %251 = call ptr @malloc(i32 24)
  store i64 1, ptr %251, align 4
  %memberidx1.i.i296 = getelementptr inbounds %FloError, ptr %251, i64 0, i32 2
  store ptr %248, ptr %memberidx1.i.i296, align 8
  %memberidx2.i.i297 = getelementptr inbounds %FloError, ptr %251, i64 0, i32 1
  store ptr %246, ptr %memberidx2.i.i297, align 8
  %memberidx.i.i298 = getelementptr inbounds %Array_FloError_, ptr %250, i64 0, i32 2
  %252 = load i64, ptr %memberidx.i.i298, align 4
  %memberidx1.i2.i299 = getelementptr inbounds %Array_FloError_, ptr %250, i64 0, i32 3
  %253 = load i64, ptr %memberidx1.i2.i299, align 4
  %.not.i.i300 = icmp slt i64 %252, %253
  br i1 %.not.i.i300, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend63:                                          ; preds = %if.entry56
  %254 = load ptr, ptr %0, align 8
  %memberidx.i.i.i308 = getelementptr inbounds %Program, ptr %254, i64 0, i32 1
  %255 = load ptr, ptr %memberidx.i.i.i308, align 8
  %256 = load i64, ptr %230, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %255, i64 0, i32 1
  %257 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %257, i64 %256
  %258 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i309 = getelementptr inbounds %Module, ptr %258, i64 0, i32 4
  %259 = load ptr, ptr %memberidx2.i.i.i309, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %230, i64 0, i32 2
  %260 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %259, i64 0, i32 1
  %261 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %261, i64 %260
  %262 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %263 = load i64, ptr %common.ret.op.i272, align 4
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %if.entry.i, label %ifend.i315

if.entry.i:                                       ; preds = %ifend63
  %memberidx1.i311 = getelementptr inbounds %Class, ptr %262, i64 0, i32 5
  %265 = load ptr, ptr %memberidx1.i311, align 8
  %memberidx2.i312 = getelementptr inbounds %PropId, ptr %common.ret.op.i272, i64 0, i32 2
  %266 = load i64, ptr %memberidx2.i312, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %265, i64 0, i32 1
  %267 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %267, i64 %266
  %268 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i313 = getelementptr inbounds %ClassMethod, ptr %268, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i315:                                       ; preds = %ifend63
  %memberidx4.i = getelementptr inbounds %Class, ptr %262, i64 0, i32 4
  %269 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i272, i64 0, i32 2
  %270 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %269, i64 0, i32 1
  %271 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i314 = getelementptr inbounds ptr, ptr %271, i64 %270
  %272 = load ptr, ptr %ptridx.i.i314, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %272, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i315
  %common.ret.op.in.i = phi ptr [ %memberidx3.i313, %if.entry.i ], [ %memberidx6.i, %ifend.i315 ]
  %common.ret.op.i310 = load ptr, ptr %common.ret.op.in.i, align 8
  br i1 %264, label %if.entry.i331, label %ifend.i337

if.entry.i331:                                    ; preds = %get_class_prop_type.exit
  %memberidx1.i326 = getelementptr inbounds %Class, ptr %262, i64 0, i32 5
  %273 = load ptr, ptr %memberidx1.i326, align 8
  %memberidx2.i327 = getelementptr inbounds %PropId, ptr %common.ret.op.i272, i64 0, i32 2
  %274 = load i64, ptr %memberidx2.i327, align 4
  %memberidx.i12.i328 = getelementptr inbounds %Array_ClassMethod_, ptr %273, i64 0, i32 1
  %275 = load ptr, ptr %memberidx.i12.i328, align 8
  %ptridx.i13.i329 = getelementptr inbounds ptr, ptr %275, i64 %274
  %276 = load ptr, ptr %ptridx.i13.i329, align 8
  %memberidx3.i330 = getelementptr inbounds %ClassMethod, ptr %276, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i337:                                       ; preds = %get_class_prop_type.exit
  %memberidx4.i332 = getelementptr inbounds %Class, ptr %262, i64 0, i32 4
  %277 = load ptr, ptr %memberidx4.i332, align 8
  %memberidx5.i333 = getelementptr inbounds %PropId, ptr %common.ret.op.i272, i64 0, i32 2
  %278 = load i64, ptr %memberidx5.i333, align 4
  %memberidx.i11.i334 = getelementptr inbounds %Array_ClassField_, ptr %277, i64 0, i32 1
  %279 = load ptr, ptr %memberidx.i11.i334, align 8
  %ptridx.i.i335 = getelementptr inbounds ptr, ptr %279, i64 %278
  %280 = load ptr, ptr %ptridx.i.i335, align 8
  %memberidx6.i336 = getelementptr inbounds %ClassField, ptr %280, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i331, %ifend.i337
  %common.ret.op.in.i324 = phi ptr [ %memberidx3.i330, %if.entry.i331 ], [ %memberidx6.i336, %ifend.i337 ]
  %common.ret.op.i325 = load i64, ptr %common.ret.op.in.i324, align 4
  %281 = load ptr, ptr %memberidx41, align 8
  %282 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %common.ret.op.i310, ptr %281)
  br i1 %282, label %ifend74, label %if.entry72

if.entry72:                                       ; preds = %get_class_prop_visibility.exit
  %283 = load ptr, ptr %48, align 8
  %memberidx75 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %283, i64 0, i32 5
  %284 = load ptr, ptr %memberidx75, align 8
  %285 = call ptr %284(ptr nonnull %48)
  %memberidx76 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %286 = load ptr, ptr %memberidx76, align 8
  %287 = load ptr, ptr %286, align 8
  %memberidx77 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %287, i64 0, i32 5
  %288 = load ptr, ptr %memberidx77, align 8
  %289 = call ptr %288(ptr nonnull %286)
  %290 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %common.ret.op.i310)
  %291 = load ptr, ptr %290, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %291, i64 0, i32 5
  %292 = load ptr, ptr %memberidx78, align 8
  %293 = call ptr %292(ptr nonnull %290)
  %294 = alloca ptr, align 8
  %295 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %294, ptr nonnull @130, ptr %285, ptr %289, ptr %293)
  %296 = load ptr, ptr %294, align 8
  %297 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %297, align 8
  %memberidx.i338 = getelementptr inbounds %string, ptr %297, i64 0, i32 1
  store ptr %296, ptr %memberidx.i338, align 8
  %memberidx1.i339 = getelementptr inbounds %string, ptr %297, i64 0, i32 2
  store i64 %295, ptr %memberidx1.i339, align 4
  %memberidx2.i340 = getelementptr inbounds %string, ptr %297, i64 0, i32 3
  store i64 %295, ptr %memberidx2.i340, align 4
  tail call void @free(ptr %285)
  tail call void @free(ptr %289)
  tail call void @free(ptr %293)
  %298 = load ptr, ptr %40, align 8
  %memberidx80 = getelementptr inbounds %Token, ptr %298, i64 0, i32 1
  %299 = load ptr, ptr %memberidx80, align 8
  %memberidx.i341 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %300 = load ptr, ptr %memberidx.i341, align 8
  %memberidx1.i342 = getelementptr inbounds %Compiler, ptr %300, i64 0, i32 6
  %301 = load ptr, ptr %memberidx1.i342, align 8
  %302 = call ptr @malloc(i32 24)
  store i64 5, ptr %302, align 4
  %memberidx1.i.i343 = getelementptr inbounds %FloError, ptr %302, i64 0, i32 2
  store ptr %299, ptr %memberidx1.i.i343, align 8
  %memberidx2.i.i344 = getelementptr inbounds %FloError, ptr %302, i64 0, i32 1
  store ptr %297, ptr %memberidx2.i.i344, align 8
  %memberidx.i.i345 = getelementptr inbounds %Array_FloError_, ptr %301, i64 0, i32 2
  %303 = load i64, ptr %memberidx.i.i345, align 4
  %memberidx1.i2.i346 = getelementptr inbounds %Array_FloError_, ptr %301, i64 0, i32 3
  %304 = load i64, ptr %memberidx1.i2.i346, align 4
  %.not.i.i347 = icmp slt i64 %303, %304
  br i1 %.not.i.i347, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend74:                                          ; preds = %get_class_prop_visibility.exit
  %305 = load i64, ptr %memberidx39, align 4
  %.not199 = icmp eq i64 %305, %common.ret.op.i325
  br i1 %.not199, label %ifend84, label %if.entry82

if.entry82:                                       ; preds = %ifend74
  %306 = load ptr, ptr %48, align 8
  %memberidx85 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %306, i64 0, i32 5
  %307 = load ptr, ptr %memberidx85, align 8
  %308 = call ptr %307(ptr nonnull %48)
  %memberidx86 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %309 = load ptr, ptr %memberidx86, align 8
  %310 = load ptr, ptr %309, align 8
  %memberidx87 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %310, i64 0, i32 5
  %311 = load ptr, ptr %memberidx87, align 8
  %312 = call ptr %311(ptr nonnull %309)
  switch i64 %common.ret.op.i325, label %ifend3.i [
    i64 1, label %if.entry.i357
    i64 2, label %if.entry1.i
  ]

if.entry.i357:                                    ; preds = %if.entry82
  %313 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %313, ptr noundef nonnull align 8 dereferenceable(7) @46, i64 7, i1 false)
  br label %dump_access.exit

if.entry1.i:                                      ; preds = %if.entry82
  %314 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %314, ptr noundef nonnull align 8 dereferenceable(6) @47, i64 6, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry82
  %315 = call ptr @malloc(i32 9)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %315, ptr noundef nonnull align 8 dereferenceable(9) @48, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i357, %if.entry1.i, %ifend3.i
  %.sink647 = phi ptr [ %313, %if.entry.i357 ], [ %314, %if.entry1.i ], [ %315, %ifend3.i ]
  %.sink645 = phi i64 [ 7, %if.entry.i357 ], [ 6, %if.entry1.i ], [ 9, %ifend3.i ]
  %316 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %316, align 8
  %memberidx.i.i.i355 = getelementptr inbounds %string, ptr %316, i64 0, i32 1
  store ptr %.sink647, ptr %memberidx.i.i.i355, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %316, i64 0, i32 2
  store i64 %.sink645, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i356 = getelementptr inbounds %string, ptr %316, i64 0, i32 3
  store i64 %.sink645, ptr %memberidx2.i.i.i356, align 4
  %317 = load ptr, ptr %316, align 8
  %memberidx88 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %317, i64 0, i32 5
  %318 = load ptr, ptr %memberidx88, align 8
  %319 = call ptr %318(ptr nonnull %316)
  %320 = alloca ptr, align 8
  %321 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %320, ptr nonnull @131, ptr %308, ptr %312, ptr %319)
  %322 = load ptr, ptr %320, align 8
  %323 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %323, align 8
  %memberidx.i359 = getelementptr inbounds %string, ptr %323, i64 0, i32 1
  store ptr %322, ptr %memberidx.i359, align 8
  %memberidx1.i360 = getelementptr inbounds %string, ptr %323, i64 0, i32 2
  store i64 %321, ptr %memberidx1.i360, align 4
  %memberidx2.i361 = getelementptr inbounds %string, ptr %323, i64 0, i32 3
  store i64 %321, ptr %memberidx2.i361, align 4
  tail call void @free(ptr %308)
  tail call void @free(ptr %312)
  tail call void @free(ptr %319)
  %324 = load ptr, ptr %method_node, align 8
  %325 = load ptr, ptr %324, align 8
  %memberidx90 = getelementptr inbounds %Token, ptr %325, i64 0, i32 1
  %326 = load ptr, ptr %memberidx90, align 8
  %memberidx.i362 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %327 = load ptr, ptr %memberidx.i362, align 8
  %memberidx1.i363 = getelementptr inbounds %Compiler, ptr %327, i64 0, i32 6
  %328 = load ptr, ptr %memberidx1.i363, align 8
  %329 = call ptr @malloc(i32 24)
  store i64 4, ptr %329, align 4
  %memberidx1.i.i364 = getelementptr inbounds %FloError, ptr %329, i64 0, i32 2
  store ptr %326, ptr %memberidx1.i.i364, align 8
  %memberidx2.i.i365 = getelementptr inbounds %FloError, ptr %329, i64 0, i32 1
  store ptr %323, ptr %memberidx2.i.i365, align 8
  %memberidx.i.i366 = getelementptr inbounds %Array_FloError_, ptr %328, i64 0, i32 2
  %330 = load i64, ptr %memberidx.i.i366, align 4
  %memberidx1.i2.i367 = getelementptr inbounds %Array_FloError_, ptr %328, i64 0, i32 3
  %331 = load i64, ptr %memberidx1.i2.i367, align 4
  %.not.i.i368 = icmp slt i64 %330, %331
  br i1 %.not.i.i368, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend84:                                          ; preds = %ifend74
  %memberidx91 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 9
  %332 = load ptr, ptr %0, align 8
  %333 = load ptr, ptr %memberidx59, align 8
  %memberidx.i.i.i376 = getelementptr inbounds %Program, ptr %332, i64 0, i32 1
  %334 = load ptr, ptr %memberidx.i.i.i376, align 8
  %335 = load i64, ptr %333, align 4
  %memberidx.i.i.i.i377 = getelementptr inbounds %Array_Module_, ptr %334, i64 0, i32 1
  %336 = load ptr, ptr %memberidx.i.i.i.i377, align 8
  %ptridx.i.i.i.i378 = getelementptr inbounds ptr, ptr %336, i64 %335
  %337 = load ptr, ptr %ptridx.i.i.i.i378, align 8
  %memberidx2.i.i.i379 = getelementptr inbounds %Module, ptr %337, i64 0, i32 4
  %338 = load ptr, ptr %memberidx2.i.i.i379, align 8
  %memberidx3.i.i.i380 = getelementptr inbounds %TypeId, ptr %333, i64 0, i32 2
  %339 = load i64, ptr %memberidx3.i.i.i380, align 4
  %memberidx.i5.i.i.i381 = getelementptr inbounds %Array_Class_, ptr %338, i64 0, i32 1
  %340 = load ptr, ptr %memberidx.i5.i.i.i381, align 8
  %ptridx.i6.i.i.i382 = getelementptr inbounds ptr, ptr %340, i64 %339
  %341 = load ptr, ptr %ptridx.i6.i.i.i382, align 8
  %342 = load i64, ptr %common.ret.op.i272, align 4
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %if.entry.i390, label %ifend.i396

if.entry.i390:                                    ; preds = %ifend84
  %memberidx1.i385 = getelementptr inbounds %Class, ptr %341, i64 0, i32 5
  %344 = load ptr, ptr %memberidx1.i385, align 8
  %memberidx2.i386 = getelementptr inbounds %PropId, ptr %common.ret.op.i272, i64 0, i32 2
  %345 = load i64, ptr %memberidx2.i386, align 4
  %memberidx.i12.i387 = getelementptr inbounds %Array_ClassMethod_, ptr %344, i64 0, i32 1
  %346 = load ptr, ptr %memberidx.i12.i387, align 8
  %ptridx.i13.i388 = getelementptr inbounds ptr, ptr %346, i64 %345
  %347 = load ptr, ptr %ptridx.i13.i388, align 8
  %memberidx3.i389 = getelementptr inbounds %ClassMethod, ptr %347, i64 0, i32 9
  br label %get_vtable_index.exit

ifend.i396:                                       ; preds = %ifend84
  %memberidx4.i391 = getelementptr inbounds %Class, ptr %341, i64 0, i32 4
  %348 = load ptr, ptr %memberidx4.i391, align 8
  %memberidx5.i392 = getelementptr inbounds %PropId, ptr %common.ret.op.i272, i64 0, i32 2
  %349 = load i64, ptr %memberidx5.i392, align 4
  %memberidx.i11.i393 = getelementptr inbounds %Array_ClassField_, ptr %348, i64 0, i32 1
  %350 = load ptr, ptr %memberidx.i11.i393, align 8
  %ptridx.i.i394 = getelementptr inbounds ptr, ptr %350, i64 %349
  %351 = load ptr, ptr %ptridx.i.i394, align 8
  %memberidx6.i395 = getelementptr inbounds %ClassField, ptr %351, i64 0, i32 6
  br label %get_vtable_index.exit

get_vtable_index.exit:                            ; preds = %if.entry.i390, %ifend.i396
  %common.ret.op.in.i383 = phi ptr [ %memberidx3.i389, %if.entry.i390 ], [ %memberidx6.i395, %ifend.i396 ]
  %common.ret.op.i384 = load i64, ptr %common.ret.op.in.i383, align 4
  store i64 %common.ret.op.i384, ptr %memberidx91, align 4
  br label %ifend58

if.entry97:                                       ; preds = %ifend58
  %352 = load i1, ptr %memberidx36, align 1
  br i1 %352, label %if.entry101, label %ifend103

else98:                                           ; preds = %ifend58
  %memberidx114 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 3
  %353 = load ptr, ptr %memberidx114, align 8
  %354 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %354, ptr noundef nonnull align 8 dereferenceable(11) @133, i64 11, i1 false)
  %355 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %355, align 8
  %memberidx.i.i397 = getelementptr inbounds %string, ptr %355, i64 0, i32 1
  store ptr %354, ptr %memberidx.i.i397, align 8
  %memberidx1.i.i398 = getelementptr inbounds %string, ptr %355, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i398, align 4
  %memberidx2.i.i399 = getelementptr inbounds %string, ptr %355, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i399, align 4
  %memberidx.i400 = getelementptr inbounds %string, ptr %353, i64 0, i32 2
  %356 = load i64, ptr %memberidx.i400, align 4
  %.not.i402 = icmp eq i64 %356, 11
  br i1 %.not.i402, label %ifend.i406, label %else116

ifend.i406:                                       ; preds = %else98
  %memberidx2.i404 = getelementptr inbounds %string, ptr %353, i64 0, i32 1
  %357 = load ptr, ptr %memberidx2.i404, align 8
  %358 = call i64 @memcmp(ptr %357, ptr %354, i64 %356)
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %if.entry115, label %else116

ifend99:                                          ; preds = %get_class_prop_type.exit518, %if.entry140, %ifend117, %ifend109
  %current_vtable_index.1 = phi i64 [ %current_vtable_index.0593, %ifend109 ], [ %current_vtable_index.2, %get_class_prop_type.exit518 ], [ %current_vtable_index.2, %if.entry140 ], [ %current_vtable_index.2, %ifend117 ]
  %360 = load ptr, ptr %method, align 8
  %memberidx150 = getelementptr inbounds %ClassMethod, ptr %360, i64 0, i32 8
  %361 = load ptr, ptr %method_scope, align 8
  %362 = load ptr, ptr %361, align 8
  store ptr %362, ptr %memberidx150, align 8
  %363 = load ptr, ptr %memberidx152, align 8
  %memberidx.i408 = getelementptr inbounds %Array_ClassMethod_, ptr %363, i64 0, i32 2
  %364 = load i64, ptr %memberidx.i408, align 4
  %memberidx1.i409 = getelementptr inbounds %Array_ClassMethod_, ptr %363, i64 0, i32 3
  %365 = load i64, ptr %memberidx1.i409, align 4
  %.not.i410 = icmp slt i64 %364, %365
  br i1 %.not.i410, label %Array_ClassMethod____sl__.exit, label %if.entry.i413

if.entry.i413:                                    ; preds = %ifend99
  %366 = shl i64 %365, 1
  store i64 %366, ptr %memberidx1.i409, align 4
  %memberidx2.i.i412 = getelementptr inbounds %Array_ClassMethod_, ptr %363, i64 0, i32 1
  %367 = load ptr, ptr %memberidx2.i.i412, align 8
  %368 = shl i64 %365, 4
  %369 = call ptr @realloc(ptr %367, i64 %368)
  store ptr %369, ptr %memberidx2.i.i412, align 8
  br label %Array_ClassMethod____sl__.exit

Array_ClassMethod____sl__.exit:                   ; preds = %ifend99, %if.entry.i413
  %370 = load i64, ptr %memberidx.i408, align 4
  %371 = add nsw i64 %370, 1
  store i64 %371, ptr %memberidx.i408, align 4
  %memberidx4.i414 = getelementptr inbounds %Array_ClassMethod_, ptr %363, i64 0, i32 1
  %372 = load ptr, ptr %memberidx4.i414, align 8
  %ptridx.i415 = getelementptr inbounds ptr, ptr %372, i64 %370
  store ptr %360, ptr %ptridx.i415, align 8
  %memberidx154 = getelementptr inbounds %Scope, ptr %361, i64 0, i32 5
  %373 = load ptr, ptr %memberidx154, align 8
  store ptr %373, ptr %memberidx1.i, align 8
  %374 = add nuw nsw i64 %i.0594, 1
  %375 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %375, i64 0, i32 2
  %376 = load i64, ptr %memberidx2, align 4
  %377 = icmp slt i64 %374, %376
  br i1 %377, label %for.body, label %common.ret

if.entry101:                                      ; preds = %if.entry97
  %378 = call ptr @malloc(i32 31)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(31) %378, ptr noundef nonnull align 8 dereferenceable(31) @132, i64 31, i1 false)
  %379 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %379, align 8
  %memberidx.i.i417 = getelementptr inbounds %string, ptr %379, i64 0, i32 1
  store ptr %378, ptr %memberidx.i.i417, align 8
  %memberidx1.i.i418 = getelementptr inbounds %string, ptr %379, i64 0, i32 2
  store i64 31, ptr %memberidx1.i.i418, align 4
  %memberidx2.i.i419 = getelementptr inbounds %string, ptr %379, i64 0, i32 3
  store i64 31, ptr %memberidx2.i.i419, align 4
  %380 = load ptr, ptr %40, align 8
  %memberidx105 = getelementptr inbounds %Token, ptr %380, i64 0, i32 1
  %381 = load ptr, ptr %memberidx105, align 8
  %memberidx.i420 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %382 = load ptr, ptr %memberidx.i420, align 8
  %memberidx1.i421 = getelementptr inbounds %Compiler, ptr %382, i64 0, i32 6
  %383 = load ptr, ptr %memberidx1.i421, align 8
  %384 = call ptr @malloc(i32 24)
  store i64 4, ptr %384, align 4
  %memberidx1.i.i422 = getelementptr inbounds %FloError, ptr %384, i64 0, i32 2
  store ptr %381, ptr %memberidx1.i.i422, align 8
  %memberidx2.i.i423 = getelementptr inbounds %FloError, ptr %384, i64 0, i32 1
  store ptr %379, ptr %memberidx2.i.i423, align 8
  %memberidx.i.i424 = getelementptr inbounds %Array_FloError_, ptr %383, i64 0, i32 2
  %385 = load i64, ptr %memberidx.i.i424, align 4
  %memberidx1.i2.i425 = getelementptr inbounds %Array_FloError_, ptr %383, i64 0, i32 3
  %386 = load i64, ptr %memberidx1.i2.i425, align 4
  %.not.i.i426 = icmp slt i64 %385, %386
  br i1 %.not.i.i426, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend103:                                         ; preds = %if.entry97
  %memberidx106 = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 3
  %387 = load ptr, ptr %memberidx106, align 8
  %388 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %388, ptr noundef nonnull align 8 dereferenceable(11) @133, i64 11, i1 false)
  %389 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %389, align 8
  %memberidx.i.i433 = getelementptr inbounds %string, ptr %389, i64 0, i32 1
  store ptr %388, ptr %memberidx.i.i433, align 8
  %memberidx1.i.i434 = getelementptr inbounds %string, ptr %389, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i434, align 4
  %memberidx2.i.i435 = getelementptr inbounds %string, ptr %389, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i435, align 4
  %memberidx.i436 = getelementptr inbounds %string, ptr %387, i64 0, i32 2
  %390 = load i64, ptr %memberidx.i436, align 4
  %.not.i438 = icmp eq i64 %390, 11
  br i1 %.not.i438, label %ifend.i442, label %ifend109

ifend.i442:                                       ; preds = %ifend103
  %memberidx2.i440 = getelementptr inbounds %string, ptr %387, i64 0, i32 1
  %391 = load ptr, ptr %memberidx2.i440, align 8
  %392 = call i64 @memcmp(ptr %391, ptr %388, i64 %390)
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %if.entry107, label %ifend109

if.entry107:                                      ; preds = %ifend.i442
  %394 = call ptr @malloc(i32 33)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %394, ptr noundef nonnull align 8 dereferenceable(33) @134, i64 33, i1 false)
  %395 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %395, align 8
  %memberidx.i.i444 = getelementptr inbounds %string, ptr %395, i64 0, i32 1
  store ptr %394, ptr %memberidx.i.i444, align 8
  %memberidx1.i.i445 = getelementptr inbounds %string, ptr %395, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i445, align 4
  %memberidx2.i.i446 = getelementptr inbounds %string, ptr %395, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i446, align 4
  %396 = load ptr, ptr %40, align 8
  %memberidx111 = getelementptr inbounds %Token, ptr %396, i64 0, i32 1
  %397 = load ptr, ptr %memberidx111, align 8
  %memberidx.i447 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %398 = load ptr, ptr %memberidx.i447, align 8
  %memberidx1.i448 = getelementptr inbounds %Compiler, ptr %398, i64 0, i32 6
  %399 = load ptr, ptr %memberidx1.i448, align 8
  %400 = call ptr @malloc(i32 24)
  store i64 4, ptr %400, align 4
  %memberidx1.i.i449 = getelementptr inbounds %FloError, ptr %400, i64 0, i32 2
  store ptr %397, ptr %memberidx1.i.i449, align 8
  %memberidx2.i.i450 = getelementptr inbounds %FloError, ptr %400, i64 0, i32 1
  store ptr %395, ptr %memberidx2.i.i450, align 8
  %memberidx.i.i451 = getelementptr inbounds %Array_FloError_, ptr %399, i64 0, i32 2
  %401 = load i64, ptr %memberidx.i.i451, align 4
  %memberidx1.i2.i452 = getelementptr inbounds %Array_FloError_, ptr %399, i64 0, i32 3
  %402 = load i64, ptr %memberidx1.i2.i452, align 4
  %.not.i.i453 = icmp slt i64 %401, %402
  br i1 %.not.i.i453, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend109:                                         ; preds = %ifend103, %ifend.i442
  %403 = load ptr, ptr %memberidx112, align 8
  %404 = load ptr, ptr %39, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %403, ptr %48, ptr %404)
  br label %ifend99

if.entry115:                                      ; preds = %ifend.i406
  %405 = load i1, ptr %memberidx36, align 1
  br i1 %405, label %if.entry119, label %ifend121

else116:                                          ; preds = %else98, %ifend.i406
  %406 = load i64, ptr %memberidx39, align 4
  %.not196 = icmp eq i64 %406, 1
  br i1 %.not196, label %else128, label %if.entry127

ifend117:                                         ; preds = %ifend129, %ifend121
  %current_vtable_index.2 = phi i64 [ %current_vtable_index.0593, %ifend121 ], [ %current_vtable_index.3, %ifend129 ]
  %407 = tail call ptr @malloc(i32 16)
  %408 = load ptr, ptr %1, align 8
  store i64 11, ptr %407, align 4
  %memberidx.i460 = getelementptr inbounds %ObjectType, ptr %407, i64 0, i32 1
  store ptr %408, ptr %memberidx.i460, align 8
  %409 = call ptr @malloc(i32 4)
  store i32 1936287860, ptr %409, align 8
  %410 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %410, align 8
  %memberidx.i.i461 = getelementptr inbounds %string, ptr %410, i64 0, i32 1
  store ptr %409, ptr %memberidx.i.i461, align 8
  %memberidx1.i.i462 = getelementptr inbounds %string, ptr %410, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i462, align 4
  %memberidx2.i.i463 = getelementptr inbounds %string, ptr %410, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i463, align 4
  %411 = call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr %0, ptr nonnull %410, ptr null, ptr nonnull %407)
  %412 = load ptr, ptr %memberidx139, align 8
  %.not197 = icmp eq ptr %412, null
  br i1 %.not197, label %ifend99, label %if.entry140

if.entry119:                                      ; preds = %if.entry115
  %413 = call ptr @malloc(i32 35)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %413, ptr noundef nonnull align 8 dereferenceable(35) @135, i64 35, i1 false)
  %414 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %414, align 8
  %memberidx.i.i464 = getelementptr inbounds %string, ptr %414, i64 0, i32 1
  store ptr %413, ptr %memberidx.i.i464, align 8
  %memberidx1.i.i465 = getelementptr inbounds %string, ptr %414, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i465, align 4
  %memberidx2.i.i466 = getelementptr inbounds %string, ptr %414, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i466, align 4
  %415 = load ptr, ptr %40, align 8
  %memberidx123 = getelementptr inbounds %Token, ptr %415, i64 0, i32 1
  %416 = load ptr, ptr %memberidx123, align 8
  %memberidx.i467 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %417 = load ptr, ptr %memberidx.i467, align 8
  %memberidx1.i468 = getelementptr inbounds %Compiler, ptr %417, i64 0, i32 6
  %418 = load ptr, ptr %memberidx1.i468, align 8
  %419 = call ptr @malloc(i32 24)
  store i64 4, ptr %419, align 4
  %memberidx1.i.i469 = getelementptr inbounds %FloError, ptr %419, i64 0, i32 2
  store ptr %416, ptr %memberidx1.i.i469, align 8
  %memberidx2.i.i470 = getelementptr inbounds %FloError, ptr %419, i64 0, i32 1
  store ptr %414, ptr %memberidx2.i.i470, align 8
  %memberidx.i.i471 = getelementptr inbounds %Array_FloError_, ptr %418, i64 0, i32 2
  %420 = load i64, ptr %memberidx.i.i471, align 4
  %memberidx1.i2.i472 = getelementptr inbounds %Array_FloError_, ptr %418, i64 0, i32 3
  %421 = load i64, ptr %memberidx1.i2.i472, align 4
  %.not.i.i473 = icmp slt i64 %420, %421
  br i1 %.not.i.i473, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend121:                                         ; preds = %if.entry115
  %422 = load ptr, ptr %39, align 8
  store ptr %422, ptr %memberidx124, align 8
  br label %ifend117

if.entry127:                                      ; preds = %else116
  %423 = add nsw i64 %current_vtable_index.0593, 1
  br label %ifend129

else128:                                          ; preds = %else116
  %424 = load i1, ptr %memberidx36, align 1
  br i1 %424, label %if.entry131, label %ifend129

ifend129:                                         ; preds = %else128, %if.entry127
  %current_vtable_index.3 = phi i64 [ %423, %if.entry127 ], [ %current_vtable_index.0593, %else128 ]
  %425 = load ptr, ptr %memberidx55, align 8
  %426 = load ptr, ptr %39, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %425, ptr %48, ptr %426)
  br label %ifend117

if.entry131:                                      ; preds = %else128
  %427 = call ptr @malloc(i32 58)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(58) %427, ptr noundef nonnull align 8 dereferenceable(58) @136, i64 58, i1 false)
  %428 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %428, align 8
  %memberidx.i.i480 = getelementptr inbounds %string, ptr %428, i64 0, i32 1
  store ptr %427, ptr %memberidx.i.i480, align 8
  %memberidx1.i.i481 = getelementptr inbounds %string, ptr %428, i64 0, i32 2
  store i64 58, ptr %memberidx1.i.i481, align 4
  %memberidx2.i.i482 = getelementptr inbounds %string, ptr %428, i64 0, i32 3
  store i64 58, ptr %memberidx2.i.i482, align 4
  %429 = load ptr, ptr %40, align 8
  %memberidx135 = getelementptr inbounds %Token, ptr %429, i64 0, i32 1
  %430 = load ptr, ptr %memberidx135, align 8
  %memberidx.i483 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %431 = load ptr, ptr %memberidx.i483, align 8
  %memberidx1.i484 = getelementptr inbounds %Compiler, ptr %431, i64 0, i32 6
  %432 = load ptr, ptr %memberidx1.i484, align 8
  %433 = call ptr @malloc(i32 24)
  store i64 4, ptr %433, align 4
  %memberidx1.i.i485 = getelementptr inbounds %FloError, ptr %433, i64 0, i32 2
  store ptr %430, ptr %memberidx1.i.i485, align 8
  %memberidx2.i.i486 = getelementptr inbounds %FloError, ptr %433, i64 0, i32 1
  store ptr %428, ptr %memberidx2.i.i486, align 8
  %memberidx.i.i487 = getelementptr inbounds %Array_FloError_, ptr %432, i64 0, i32 2
  %434 = load i64, ptr %memberidx.i.i487, align 4
  %memberidx1.i2.i488 = getelementptr inbounds %Array_FloError_, ptr %432, i64 0, i32 3
  %435 = load i64, ptr %memberidx1.i2.i488, align 4
  %.not.i.i489 = icmp slt i64 %434, %435
  br i1 %.not.i.i489, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

if.entry140:                                      ; preds = %ifend117
  %436 = load ptr, ptr %0, align 8
  %437 = call fastcc ptr @get_class_from_type(ptr %436, ptr nonnull %412)
  %memberidx145 = getelementptr inbounds %Class, ptr %437, i64 0, i32 3
  %438 = load ptr, ptr %memberidx145, align 8
  %.not198 = icmp eq ptr %438, null
  br i1 %.not198, label %ifend99, label %if.entry146

if.entry146:                                      ; preds = %if.entry140
  %memberidx.i.i496 = getelementptr inbounds %PropId, ptr %438, i64 0, i32 1
  %439 = load ptr, ptr %memberidx.i.i496, align 8
  %memberidx.i.i.i497 = getelementptr inbounds %Program, ptr %436, i64 0, i32 1
  %440 = load ptr, ptr %memberidx.i.i.i497, align 8
  %441 = load i64, ptr %439, align 4
  %memberidx.i.i.i.i498 = getelementptr inbounds %Array_Module_, ptr %440, i64 0, i32 1
  %442 = load ptr, ptr %memberidx.i.i.i.i498, align 8
  %ptridx.i.i.i.i499 = getelementptr inbounds ptr, ptr %442, i64 %441
  %443 = load ptr, ptr %ptridx.i.i.i.i499, align 8
  %memberidx2.i.i.i500 = getelementptr inbounds %Module, ptr %443, i64 0, i32 4
  %444 = load ptr, ptr %memberidx2.i.i.i500, align 8
  %memberidx3.i.i.i501 = getelementptr inbounds %TypeId, ptr %439, i64 0, i32 2
  %445 = load i64, ptr %memberidx3.i.i.i501, align 4
  %memberidx.i5.i.i.i502 = getelementptr inbounds %Array_Class_, ptr %444, i64 0, i32 1
  %446 = load ptr, ptr %memberidx.i5.i.i.i502, align 8
  %ptridx.i6.i.i.i503 = getelementptr inbounds ptr, ptr %446, i64 %445
  %447 = load ptr, ptr %ptridx.i6.i.i.i503, align 8
  %448 = load i64, ptr %438, align 4
  %449 = icmp eq i64 %448, 0
  br i1 %449, label %if.entry.i511, label %ifend.i517

if.entry.i511:                                    ; preds = %if.entry146
  %memberidx1.i506 = getelementptr inbounds %Class, ptr %447, i64 0, i32 5
  %450 = load ptr, ptr %memberidx1.i506, align 8
  %memberidx2.i507 = getelementptr inbounds %PropId, ptr %438, i64 0, i32 2
  %451 = load i64, ptr %memberidx2.i507, align 4
  %memberidx.i12.i508 = getelementptr inbounds %Array_ClassMethod_, ptr %450, i64 0, i32 1
  %452 = load ptr, ptr %memberidx.i12.i508, align 8
  %ptridx.i13.i509 = getelementptr inbounds ptr, ptr %452, i64 %451
  %453 = load ptr, ptr %ptridx.i13.i509, align 8
  %memberidx3.i510 = getelementptr inbounds %ClassMethod, ptr %453, i64 0, i32 4
  br label %get_class_prop_type.exit518

ifend.i517:                                       ; preds = %if.entry146
  %memberidx4.i512 = getelementptr inbounds %Class, ptr %447, i64 0, i32 4
  %454 = load ptr, ptr %memberidx4.i512, align 8
  %memberidx5.i513 = getelementptr inbounds %PropId, ptr %438, i64 0, i32 2
  %455 = load i64, ptr %memberidx5.i513, align 4
  %memberidx.i11.i514 = getelementptr inbounds %Array_ClassField_, ptr %454, i64 0, i32 1
  %456 = load ptr, ptr %memberidx.i11.i514, align 8
  %ptridx.i.i515 = getelementptr inbounds ptr, ptr %456, i64 %455
  %457 = load ptr, ptr %ptridx.i.i515, align 8
  %memberidx6.i516 = getelementptr inbounds %ClassField, ptr %457, i64 0, i32 4
  br label %get_class_prop_type.exit518

get_class_prop_type.exit518:                      ; preds = %if.entry.i511, %ifend.i517
  %common.ret.op.in.i504 = phi ptr [ %memberidx3.i510, %if.entry.i511 ], [ %memberidx6.i516, %ifend.i517 ]
  %common.ret.op.i505 = load ptr, ptr %common.ret.op.in.i504, align 8
  %458 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %458, ptr noundef nonnull align 8 dereferenceable(5) @137, i64 5, i1 false)
  %459 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %459, align 8
  %memberidx.i.i519 = getelementptr inbounds %string, ptr %459, i64 0, i32 1
  store ptr %458, ptr %memberidx.i.i519, align 8
  %memberidx1.i.i520 = getelementptr inbounds %string, ptr %459, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i520, align 4
  %memberidx2.i.i521 = getelementptr inbounds %string, ptr %459, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i521, align 4
  %460 = call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nonnull %0, ptr nonnull %459, ptr null, ptr %common.ret.op.i505)
  br label %ifend99
}

define internal fastcc ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx.i72 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %4 = load ptr, ptr %memberidx.i72, align 8
  %memberidx1.i73 = getelementptr inbounds %Compiler, ptr %4, i64 0, i32 6
  %5 = load ptr, ptr %memberidx1.i73, align 8
  %memberidx2.i74 = getelementptr inbounds %Array_FloError_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx2.i74, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %common.ret, label %ifend

common.ret.loopexit:                              ; preds = %for.body
  store ptr %33, ptr %element_type, align 8
  store i1 %34, ptr %is_constant, align 1
  br label %common.ret

common.ret:                                       ; preds = %common.ret.loopexit, %3, %ifend45, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %103, %ifend45 ], [ null, %3 ], [ null, %common.ret.loopexit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %elements = alloca ptr, align 8
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %8, align 8
  %memberidx.i75 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i75, align 4
  %memberidx1.i76 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i76, align 4
  %memberidx2.i77 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 1
  %9 = call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i77, align 8
  store i64 0, ptr %memberidx.i75, align 4
  store ptr %8, ptr %elements, align 8
  %element_type = alloca ptr, align 8
  %10 = call ptr @malloc(i32 8)
  store i64 20, ptr %10, align 4
  store ptr %10, ptr %element_type, align 8
  %is_constant = alloca i1, align 1
  store i1 true, ptr %is_constant, align 1
  %array_type = alloca ptr, align 8
  store ptr %1, ptr %array_type, align 8
  %11 = load i64, ptr %1, align 4
  switch i64 %11, label %ifend5 [
    i64 14, label %if.entry3
    i64 19, label %if.entry8
  ]

if.entry3:                                        ; preds = %ifend
  %memberidx6 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %memberidx6, align 8
  store ptr %12, ptr %element_type, align 8
  br label %ifend5

ifend5:                                           ; preds = %ifend, %if.entry12, %string___eq__.exit, %if.entry3
  %memberidx16 = getelementptr inbounds %ArrayExpressionNode, ptr %2, i64 0, i32 3
  %13 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %Array_ExpressionNode_, ptr %13, i64 0, i32 2
  %14 = load i64, ptr %memberidx17, align 4
  %15 = icmp sgt i64 %14, 0
  br i1 %15, label %for.cond.preheader, label %ifend20

for.cond.preheader:                               ; preds = %ifend5
  %element_type.promoted = load ptr, ptr %element_type, align 8
  %is_constant.promoted = load i1, ptr %is_constant, align 1
  %16 = load ptr, ptr %memberidx16, align 8
  %memberidx22118 = getelementptr inbounds %Array_ExpressionNode_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx22118, align 4
  %18 = icmp sgt i64 %17, 0
  br i1 %18, label %for.body, label %ifend20.loopexit

if.entry8:                                        ; preds = %ifend
  store i1 false, ptr %is_constant, align 1
  %19 = call fastcc i1 @is_object(ptr nonnull %1)
  %memberidx11 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 1
  %20 = load ptr, ptr %memberidx11, align 8
  %21 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %21, ptr noundef nonnull align 8 dereferenceable(5) @69, i64 5, i1 false)
  %22 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %22, align 8
  %memberidx.i.i78 = getelementptr inbounds %string, ptr %22, i64 0, i32 1
  store ptr %21, ptr %memberidx.i.i78, align 8
  %memberidx1.i.i79 = getelementptr inbounds %string, ptr %22, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i79, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %22, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i, align 4
  %memberidx.i80 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  %23 = load i64, ptr %memberidx.i80, align 4
  %.not.i = icmp eq i64 %23, 5
  br i1 %.not.i, label %ifend.i, label %string___eq__.exit

ifend.i:                                          ; preds = %if.entry8
  %memberidx2.i82 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  %24 = load ptr, ptr %memberidx2.i82, align 8
  %25 = call i64 @memcmp(ptr %24, ptr %21, i64 %23)
  %26 = icmp eq i64 %25, 0
  br label %string___eq__.exit

string___eq__.exit:                               ; preds = %if.entry8, %ifend.i
  %common.ret.op.i = phi i1 [ %26, %ifend.i ], [ false, %if.entry8 ]
  %27 = and i1 %19, %common.ret.op.i
  br i1 %27, label %if.entry12, label %ifend5

if.entry12:                                       ; preds = %string___eq__.exit
  %memberidx15 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 2
  %28 = load ptr, ptr %memberidx15, align 8
  %memberidx.i83 = getelementptr inbounds %Array_Type_, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i83, align 8
  %30 = load ptr, ptr %29, align 8
  store ptr %30, ptr %element_type, align 8
  br label %ifend5

ifend20.loopexit:                                 ; preds = %Array_Expression____sl__.exit, %for.cond.preheader
  %.lcssa115 = phi i1 [ %is_constant.promoted, %for.cond.preheader ], [ %49, %Array_Expression____sl__.exit ]
  %.lcssa112 = phi ptr [ %element_type.promoted, %for.cond.preheader ], [ %47, %Array_Expression____sl__.exit ]
  store ptr %.lcssa112, ptr %element_type, align 8
  store i1 %.lcssa115, ptr %is_constant, align 1
  br label %ifend20

ifend20:                                          ; preds = %ifend20.loopexit, %ifend5
  %31 = load i64, ptr %1, align 4
  %.not = icmp eq i64 %31, 14
  br i1 %.not, label %else44, label %if.entry43

for.body:                                         ; preds = %for.cond.preheader, %Array_Expression____sl__.exit
  %32 = phi ptr [ %62, %Array_Expression____sl__.exit ], [ %16, %for.cond.preheader ]
  %storemerge119 = phi i64 [ %61, %Array_Expression____sl__.exit ], [ 0, %for.cond.preheader ]
  %33 = phi ptr [ %47, %Array_Expression____sl__.exit ], [ %element_type.promoted, %for.cond.preheader ]
  %34 = phi i1 [ %49, %Array_Expression____sl__.exit ], [ %is_constant.promoted, %for.cond.preheader ]
  %memberidx.i84 = getelementptr inbounds %Array_ExpressionNode_, ptr %32, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i84, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %35, i64 %storemerge119
  %36 = load ptr, ptr %ptridx.i, align 8
  %37 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %33, ptr %36)
  %38 = load ptr, ptr %memberidx.i72, align 8
  %memberidx1.i89 = getelementptr inbounds %Compiler, ptr %38, i64 0, i32 6
  %39 = load ptr, ptr %memberidx1.i89, align 8
  %memberidx2.i90 = getelementptr inbounds %Array_FloError_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i90, align 4
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %common.ret.loopexit, label %ifend26

ifend26:                                          ; preds = %for.body
  %42 = icmp eq i64 %storemerge119, 0
  %43 = load i64, ptr %33, align 4
  %44 = icmp eq i64 %43, 20
  %45 = and i1 %42, %44
  br i1 %45, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend26
  %memberidx31 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %46 = load ptr, ptr %memberidx31, align 8
  br label %ifend30

ifend30:                                          ; preds = %ifend26, %if.entry28
  %47 = phi ptr [ %33, %ifend26 ], [ %46, %if.entry28 ]
  %memberidx32 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 1
  %48 = load i1, ptr %memberidx32, align 1
  %49 = and i1 %34, %48
  %memberidx33 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %50 = load ptr, ptr %memberidx33, align 8
  %51 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %47, ptr %50)
  br i1 %51, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend30
  %52 = load i64, ptr %memberidx.i75, align 4
  %53 = load i64, ptr %memberidx1.i76, align 4
  %.not.i93 = icmp slt i64 %52, %53
  br i1 %.not.i93, label %Array_Expression____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry34
  %54 = shl i64 %53, 1
  store i64 %54, ptr %memberidx1.i76, align 4
  %55 = load ptr, ptr %memberidx2.i77, align 8
  %56 = shl i64 %53, 4
  %57 = call ptr @realloc(ptr %55, i64 %56)
  store ptr %57, ptr %memberidx2.i77, align 8
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %if.entry34, %if.entry.i
  %58 = load i64, ptr %memberidx.i75, align 4
  %59 = add nsw i64 %58, 1
  store i64 %59, ptr %memberidx.i75, align 4
  %60 = load ptr, ptr %memberidx2.i77, align 8
  %ptridx.i96 = getelementptr inbounds ptr, ptr %60, i64 %58
  store ptr %37, ptr %ptridx.i96, align 8
  %61 = add nuw nsw i64 %storemerge119, 1
  %62 = load ptr, ptr %memberidx16, align 8
  %memberidx22 = getelementptr inbounds %Array_ExpressionNode_, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx22, align 4
  %64 = icmp slt i64 %61, %63
  br i1 %64, label %for.body, label %ifend20.loopexit

else35:                                           ; preds = %ifend30
  store ptr %47, ptr %element_type, align 8
  store i1 %49, ptr %is_constant, align 1
  %65 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %47)
  %66 = load ptr, ptr %65, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i64 0, i32 5
  %67 = load ptr, ptr %memberidx37, align 8
  %68 = call ptr %67(ptr nonnull %65)
  %69 = load ptr, ptr %memberidx33, align 8
  %70 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %69)
  %71 = load ptr, ptr %70, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %71, i64 0, i32 5
  %72 = load ptr, ptr %memberidx39, align 8
  %73 = call ptr %72(ptr nonnull %70)
  %74 = alloca ptr, align 8
  %75 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %74, ptr nonnull @146, ptr %68, ptr %73)
  %76 = load ptr, ptr %74, align 8
  %77 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %77, align 8
  %memberidx.i98 = getelementptr inbounds %string, ptr %77, i64 0, i32 1
  store ptr %76, ptr %memberidx.i98, align 8
  %memberidx1.i99 = getelementptr inbounds %string, ptr %77, i64 0, i32 2
  store i64 %75, ptr %memberidx1.i99, align 4
  %memberidx2.i100 = getelementptr inbounds %string, ptr %77, i64 0, i32 3
  store i64 %75, ptr %memberidx2.i100, align 4
  tail call void @free(ptr %68)
  tail call void @free(ptr %73)
  %78 = load ptr, ptr %memberidx16, align 8
  %memberidx.i101 = getelementptr inbounds %Array_ExpressionNode_, ptr %78, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i101, align 8
  %ptridx.i102 = getelementptr inbounds ptr, ptr %79, i64 %storemerge119
  %80 = load ptr, ptr %ptridx.i102, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = load ptr, ptr %memberidx.i72, align 8
  %memberidx1.i104 = getelementptr inbounds %Compiler, ptr %82, i64 0, i32 6
  %83 = load ptr, ptr %memberidx1.i104, align 8
  %84 = call ptr @malloc(i32 24)
  store i64 5, ptr %84, align 4
  %memberidx1.i.i105 = getelementptr inbounds %FloError, ptr %84, i64 0, i32 2
  store ptr %81, ptr %memberidx1.i.i105, align 8
  %memberidx2.i.i106 = getelementptr inbounds %FloError, ptr %84, i64 0, i32 1
  store ptr %77, ptr %memberidx2.i.i106, align 8
  %memberidx.i.i107 = getelementptr inbounds %Array_FloError_, ptr %83, i64 0, i32 2
  %85 = load i64, ptr %memberidx.i.i107, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %83, i64 0, i32 3
  %86 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %85, %86
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %else35
  %87 = shl i64 %86, 1
  store i64 %87, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %83, i64 0, i32 1
  %88 = load ptr, ptr %memberidx2.i.i.i, align 8
  %89 = shl i64 %86, 4
  %90 = call ptr @realloc(ptr %88, i64 %89)
  store ptr %90, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %else35, %if.entry.i.i
  %91 = load i64, ptr %memberidx.i.i107, align 4
  %92 = add nsw i64 %91, 1
  store i64 %92, ptr %memberidx.i.i107, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %83, i64 0, i32 1
  %93 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %93, i64 %91
  store ptr %84, ptr %ptridx.i.i, align 8
  br label %common.ret

if.entry43:                                       ; preds = %ifend20
  %94 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %94, ptr noundef nonnull align 8 dereferenceable(5) @69, i64 5, i1 false)
  %95 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %95, align 8
  %memberidx.i.i85 = getelementptr inbounds %string, ptr %95, i64 0, i32 1
  store ptr %94, ptr %memberidx.i.i85, align 8
  %memberidx1.i.i86 = getelementptr inbounds %string, ptr %95, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i86, align 4
  %memberidx2.i.i87 = getelementptr inbounds %string, ptr %95, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i87, align 4
  %96 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %96, align 8
  %memberidx.i70 = getelementptr inbounds %Array_Type_, ptr %96, i64 0, i32 2
  store i64 0, ptr %memberidx.i70, align 4
  %memberidx1.i71 = getelementptr inbounds %Array_Type_, ptr %96, i64 0, i32 3
  store i64 8, ptr %memberidx1.i71, align 4
  %memberidx2.i = getelementptr inbounds %Array_Type_, ptr %96, i64 0, i32 1
  %97 = call ptr @malloc(i32 64)
  store ptr %97, ptr %memberidx2.i, align 8
  %98 = load ptr, ptr %element_type, align 8
  store ptr %98, ptr %97, align 8
  store i64 1, ptr %memberidx.i70, align 4
  %99 = call fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr nonnull %95, ptr nonnull %96)
  %.not68 = icmp eq ptr %99, null
  br i1 %.not68, label %ifend45, label %if.entry48

else44:                                           ; preds = %ifend20
  %100 = tail call ptr @malloc(i32 24)
  %101 = load ptr, ptr %element_type, align 8
  %102 = load i64, ptr %memberidx.i75, align 4
  store i64 14, ptr %100, align 4
  %memberidx.i69 = getelementptr inbounds %ArrayType, ptr %100, i64 0, i32 1
  store ptr %101, ptr %memberidx.i69, align 8
  %memberidx1.i = getelementptr inbounds %ArrayType, ptr %100, i64 0, i32 2
  store i64 %102, ptr %memberidx1.i, align 4
  store ptr %100, ptr %array_type, align 8
  br label %ifend45

ifend45:                                          ; preds = %if.entry48, %if.entry43, %else44
  %103 = tail call ptr @malloc(i32 33)
  %104 = load ptr, ptr %elements, align 8
  store i64 8, ptr %103, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %103, i64 0, i32 2
  store i64 6, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %103, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i = getelementptr inbounds %ArrayExpression, ptr %103, i64 0, i32 4
  store ptr %104, ptr %memberidx.i, align 8
  %105 = load i1, ptr %is_constant, align 1
  store i1 %105, ptr %memberidx1.i.i, align 1
  %memberidx53 = getelementptr inbounds %Expression, ptr %103, i64 0, i32 3
  %106 = load ptr, ptr %array_type, align 8
  store ptr %106, ptr %memberidx53, align 8
  br label %common.ret

if.entry48:                                       ; preds = %if.entry43
  store ptr %99, ptr %array_type, align 8
  store i1 false, ptr %is_constant, align 1
  br label %ifend45
}

define internal fastcc void @TypeChecker_check_enum_body(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %EnumNode, ptr %2, i64 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = icmp eq ptr %4, null
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %6 = tail call ptr @malloc(i32 8)
  store i64 6, ptr %6, align 4
  br label %ifend

else:                                             ; preds = %3
  %7 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr nonnull %4)
  %8 = load i64, ptr %7, align 4
  %9 = add i64 %8, -1
  %10 = icmp ult i64 %9, 7
  br i1 %10, label %ifend, label %if.entry2

ifend:                                            ; preds = %TypeChecker_error.exit82, %else, %if.entry
  %enum_variant.0 = phi ptr [ %6, %if.entry ], [ %7, %TypeChecker_error.exit82 ], [ %7, %else ]
  %memberidx8 = getelementptr inbounds %EnumNode, ptr %2, i64 0, i32 1
  %11 = load ptr, ptr %memberidx8, align 8
  %memberidx9122 = getelementptr inbounds %Array_EnumNodeField_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx9122, align 4
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %ifend
  %memberidx44 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 3
  %memberidx46 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 2
  br label %for.body

if.entry2:                                        ; preds = %else
  %14 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %7)
  %15 = load ptr, ptr %14, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i64 0, i32 5
  %16 = load ptr, ptr %memberidx5, align 8
  %17 = call ptr %16(ptr nonnull %14)
  %18 = alloca ptr, align 8
  %19 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %18, ptr nonnull @95, ptr %17)
  %20 = load ptr, ptr %18, align 8
  %21 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %21, align 8
  %memberidx.i68 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  store ptr %20, ptr %memberidx.i68, align 8
  %memberidx1.i69 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  store i64 %19, ptr %memberidx1.i69, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %21, i64 0, i32 3
  store i64 %19, ptr %memberidx2.i, align 4
  tail call void @free(ptr %17)
  %22 = load ptr, ptr %memberidx, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx.i70 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %24 = load ptr, ptr %memberidx.i70, align 8
  %memberidx1.i71 = getelementptr inbounds %Compiler, ptr %24, i64 0, i32 6
  %25 = load ptr, ptr %memberidx1.i71, align 8
  %26 = call ptr @malloc(i32 24)
  store i64 5, ptr %26, align 4
  %memberidx1.i.i72 = getelementptr inbounds %FloError, ptr %26, i64 0, i32 2
  store ptr %23, ptr %memberidx1.i.i72, align 8
  %memberidx2.i.i73 = getelementptr inbounds %FloError, ptr %26, i64 0, i32 1
  store ptr %21, ptr %memberidx2.i.i73, align 8
  %memberidx.i.i74 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i.i74, align 4
  %memberidx1.i2.i75 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 3
  %28 = load i64, ptr %memberidx1.i2.i75, align 4
  %.not.i.i76 = icmp slt i64 %27, %28
  br i1 %.not.i.i76, label %TypeChecker_error.exit82, label %if.entry.i.i79

if.entry.i.i79:                                   ; preds = %if.entry2
  %29 = shl i64 %28, 1
  store i64 %29, ptr %memberidx1.i2.i75, align 4
  %memberidx2.i.i.i78 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 1
  %30 = load ptr, ptr %memberidx2.i.i.i78, align 8
  %31 = shl i64 %28, 4
  %32 = call ptr @realloc(ptr %30, i64 %31)
  store ptr %32, ptr %memberidx2.i.i.i78, align 8
  br label %TypeChecker_error.exit82

TypeChecker_error.exit82:                         ; preds = %if.entry2, %if.entry.i.i79
  %33 = load i64, ptr %memberidx.i.i74, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx.i.i74, align 4
  %memberidx4.i.i80 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 1
  %35 = load ptr, ptr %memberidx4.i.i80, align 8
  %ptridx.i.i81 = getelementptr inbounds ptr, ptr %35, i64 %33
  store ptr %26, ptr %ptridx.i.i81, align 8
  br label %ifend

for.body:                                         ; preds = %for.body.lr.ph, %Array_EnumField____sl__.exit
  %36 = phi ptr [ %11, %for.body.lr.ph ], [ %69, %Array_EnumField____sl__.exit ]
  %storemerge124 = phi i64 [ 0, %for.body.lr.ph ], [ %68, %Array_EnumField____sl__.exit ]
  %storemerge67119123 = phi i64 [ 0, %for.body.lr.ph ], [ %storemerge67, %Array_EnumField____sl__.exit ]
  %memberidx.i83 = getelementptr inbounds %Array_EnumNodeField_, ptr %36, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i83, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %37, i64 %storemerge124
  %38 = load ptr, ptr %ptridx.i, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx12 = getelementptr inbounds %IdentifierToken, ptr %39, i64 0, i32 2
  %40 = load ptr, ptr %memberidx12, align 8
  %41 = tail call ptr @malloc(i32 24)
  %memberidx.i84 = getelementptr inbounds %EnumField, ptr %41, i64 0, i32 1
  store ptr %40, ptr %memberidx.i84, align 8
  %42 = tail call ptr @malloc(i32 24)
  %43 = load ptr, ptr %1, align 8
  store i64 1, ptr %42, align 4
  %memberidx1.i88 = getelementptr inbounds %PropId, ptr %42, i64 0, i32 1
  store ptr %43, ptr %memberidx1.i88, align 8
  %memberidx2.i89 = getelementptr inbounds %PropId, ptr %42, i64 0, i32 2
  store i64 %storemerge124, ptr %memberidx2.i89, align 4
  store ptr %42, ptr %41, align 8
  %memberidx15 = getelementptr inbounds %EnumNodeField, ptr %38, i64 0, i32 1
  %44 = load ptr, ptr %memberidx15, align 8
  %.not = icmp eq ptr %44, null
  %memberidx41 = getelementptr inbounds %EnumField, ptr %41, i64 0, i32 2
  br i1 %.not, label %else17, label %if.entry16

common.ret.sink.split.sink.split:                 ; preds = %if.entry30, %if.entry23
  %.sink140 = phi i64 [ %80, %if.entry23 ], [ %103, %if.entry30 ]
  %memberidx1.i2.i108.sink = phi ptr [ %memberidx1.i2.i108, %if.entry23 ], [ %memberidx1.i2.i, %if.entry30 ]
  %.sink138 = phi ptr [ %77, %if.entry23 ], [ %100, %if.entry30 ]
  %memberidx.i.i107.sink.ph = phi ptr [ %memberidx.i.i107, %if.entry23 ], [ %memberidx.i.i, %if.entry30 ]
  %.sink.ph = phi ptr [ %78, %if.entry23 ], [ %101, %if.entry30 ]
  %45 = shl i64 %.sink140, 1
  store i64 %45, ptr %memberidx1.i2.i108.sink, align 4
  %memberidx2.i.i.i111 = getelementptr inbounds %Array_FloError_, ptr %.sink138, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i.i111, align 8
  %47 = shl i64 %.sink140, 4
  %48 = call ptr @realloc(ptr %46, i64 %47)
  store ptr %48, ptr %memberidx2.i.i.i111, align 8
  br label %common.ret.sink.split

common.ret.sink.split:                            ; preds = %common.ret.sink.split.sink.split, %if.entry30, %if.entry23
  %memberidx.i.i107.sink = phi ptr [ %memberidx.i.i107, %if.entry23 ], [ %memberidx.i.i, %if.entry30 ], [ %memberidx.i.i107.sink.ph, %common.ret.sink.split.sink.split ]
  %.sink130 = phi ptr [ %77, %if.entry23 ], [ %100, %if.entry30 ], [ %.sink138, %common.ret.sink.split.sink.split ]
  %.sink = phi ptr [ %78, %if.entry23 ], [ %101, %if.entry30 ], [ %.sink.ph, %common.ret.sink.split.sink.split ]
  %49 = load i64, ptr %memberidx.i.i107.sink, align 4
  %50 = add nsw i64 %49, 1
  store i64 %50, ptr %memberidx.i.i107.sink, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %.sink130, i64 0, i32 1
  %51 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %51, i64 %49
  store ptr %.sink, ptr %ptridx.i.i, align 8
  br label %common.ret

common.ret:                                       ; preds = %Array_EnumField____sl__.exit, %common.ret.sink.split, %ifend
  ret void

if.entry16:                                       ; preds = %for.body
  %52 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %enum_variant.0, ptr nonnull %44)
  store ptr %52, ptr %memberidx41, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %52, i64 0, i32 1
  %53 = load i1, ptr %memberidx22, align 1
  br i1 %53, label %ifend25, label %if.entry23

else17:                                           ; preds = %for.body
  %54 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %54, align 4
  %memberidx.i.i90 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i90, align 4
  %memberidx1.i.i91 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i91, align 1
  %memberidx.i92 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 3
  %55 = call ptr @malloc(i32 8)
  store i64 6, ptr %55, align 4
  store ptr %55, ptr %memberidx.i92, align 8
  %memberidx1.i93 = getelementptr inbounds %IntExpression, ptr %54, i64 0, i32 4
  store i64 %storemerge67119123, ptr %memberidx1.i93, align 4
  store i1 true, ptr %memberidx1.i.i91, align 1
  store ptr %54, ptr %memberidx41, align 8
  store ptr %enum_variant.0, ptr %memberidx.i92, align 8
  br label %ifend18

ifend18:                                          ; preds = %else17, %ifend32
  %storemerge67.in = phi i64 [ %106, %ifend32 ], [ %storemerge67119123, %else17 ]
  %storemerge67 = add nsw i64 %storemerge67.in, 1
  %56 = load ptr, ptr %memberidx44, align 8
  %57 = load ptr, ptr %41, align 8
  call fastcc void @Map_string_PropId____setitem__(ptr %56, ptr %40, ptr %57)
  %58 = load ptr, ptr %memberidx46, align 8
  %memberidx.i95 = getelementptr inbounds %Array_EnumField_, ptr %58, i64 0, i32 2
  %59 = load i64, ptr %memberidx.i95, align 4
  %memberidx1.i96 = getelementptr inbounds %Array_EnumField_, ptr %58, i64 0, i32 3
  %60 = load i64, ptr %memberidx1.i96, align 4
  %.not.i = icmp slt i64 %59, %60
  br i1 %.not.i, label %Array_EnumField____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %ifend18
  %61 = shl i64 %60, 1
  store i64 %61, ptr %memberidx1.i96, align 4
  %memberidx2.i.i98 = getelementptr inbounds %Array_EnumField_, ptr %58, i64 0, i32 1
  %62 = load ptr, ptr %memberidx2.i.i98, align 8
  %63 = shl i64 %60, 4
  %64 = call ptr @realloc(ptr %62, i64 %63)
  store ptr %64, ptr %memberidx2.i.i98, align 8
  br label %Array_EnumField____sl__.exit

Array_EnumField____sl__.exit:                     ; preds = %ifend18, %if.entry.i
  %65 = load i64, ptr %memberidx.i95, align 4
  %66 = add nsw i64 %65, 1
  store i64 %66, ptr %memberidx.i95, align 4
  %memberidx4.i = getelementptr inbounds %Array_EnumField_, ptr %58, i64 0, i32 1
  %67 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i99 = getelementptr inbounds ptr, ptr %67, i64 %65
  store ptr %41, ptr %ptridx.i99, align 8
  %68 = add nuw nsw i64 %storemerge124, 1
  %69 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNodeField_, ptr %69, i64 0, i32 2
  %70 = load i64, ptr %memberidx9, align 4
  %71 = icmp slt i64 %68, %70
  br i1 %71, label %for.body, label %common.ret

if.entry23:                                       ; preds = %if.entry16
  %72 = call ptr @malloc(i32 37)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(37) %72, ptr noundef nonnull align 8 dereferenceable(37) @96, i64 37, i1 false)
  %73 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %73, align 8
  %memberidx.i.i100 = getelementptr inbounds %string, ptr %73, i64 0, i32 1
  store ptr %72, ptr %memberidx.i.i100, align 8
  %memberidx1.i.i101 = getelementptr inbounds %string, ptr %73, i64 0, i32 2
  store i64 37, ptr %memberidx1.i.i101, align 4
  %memberidx2.i.i102 = getelementptr inbounds %string, ptr %73, i64 0, i32 3
  store i64 37, ptr %memberidx2.i.i102, align 4
  %74 = load ptr, ptr %memberidx15, align 8
  %75 = load ptr, ptr %74, align 8
  %memberidx.i103 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %76 = load ptr, ptr %memberidx.i103, align 8
  %memberidx1.i104 = getelementptr inbounds %Compiler, ptr %76, i64 0, i32 6
  %77 = load ptr, ptr %memberidx1.i104, align 8
  %78 = call ptr @malloc(i32 24)
  store i64 5, ptr %78, align 4
  %memberidx1.i.i105 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 2
  store ptr %75, ptr %memberidx1.i.i105, align 8
  %memberidx2.i.i106 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 1
  store ptr %73, ptr %memberidx2.i.i106, align 8
  %memberidx.i.i107 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 2
  %79 = load i64, ptr %memberidx.i.i107, align 4
  %memberidx1.i2.i108 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 3
  %80 = load i64, ptr %memberidx1.i2.i108, align 4
  %.not.i.i109 = icmp slt i64 %79, %80
  br i1 %.not.i.i109, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend25:                                          ; preds = %if.entry16
  %memberidx29 = getelementptr inbounds %Expression, ptr %52, i64 0, i32 3
  %81 = load ptr, ptr %memberidx29, align 8
  %82 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %enum_variant.0, ptr %81)
  br i1 %82, label %ifend32, label %if.entry30

if.entry30:                                       ; preds = %ifend25
  %83 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %enum_variant.0)
  %84 = load ptr, ptr %83, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i64 0, i32 5
  %85 = load ptr, ptr %memberidx33, align 8
  %86 = call ptr %85(ptr nonnull %83)
  %87 = load ptr, ptr %memberidx41, align 8
  %memberidx35 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  %88 = load ptr, ptr %memberidx35, align 8
  %89 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %88)
  %90 = load ptr, ptr %89, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %90, i64 0, i32 5
  %91 = load ptr, ptr %memberidx36, align 8
  %92 = call ptr %91(ptr nonnull %89)
  %93 = alloca ptr, align 8
  %94 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %93, ptr nonnull @97, ptr %86, ptr %92)
  %95 = load ptr, ptr %93, align 8
  %96 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %96, align 8
  %memberidx.i85 = getelementptr inbounds %string, ptr %96, i64 0, i32 1
  store ptr %95, ptr %memberidx.i85, align 8
  %memberidx1.i86 = getelementptr inbounds %string, ptr %96, i64 0, i32 2
  store i64 %94, ptr %memberidx1.i86, align 4
  %memberidx2.i87 = getelementptr inbounds %string, ptr %96, i64 0, i32 3
  store i64 %94, ptr %memberidx2.i87, align 4
  tail call void @free(ptr %86)
  tail call void @free(ptr %92)
  %97 = load ptr, ptr %memberidx15, align 8
  %98 = load ptr, ptr %97, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %99 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %99, i64 0, i32 6
  %100 = load ptr, ptr %memberidx1.i, align 8
  %101 = call ptr @malloc(i32 24)
  store i64 5, ptr %101, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %101, i64 0, i32 2
  store ptr %98, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %101, i64 0, i32 1
  store ptr %96, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 2
  %102 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 3
  %103 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %102, %103
  br i1 %.not.i.i, label %common.ret.sink.split, label %common.ret.sink.split.sink.split

ifend32:                                          ; preds = %ifend25
  %104 = load ptr, ptr %0, align 8
  %105 = load ptr, ptr %memberidx41, align 8
  %106 = call fastcc i64 @evaluate_const_int_expression(ptr %104, ptr %105)
  br label %ifend18
}

define internal fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %ExpressionNode, ptr %2, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  switch i64 %4, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry2
    i64 3, label %if.entry6
    i64 2, label %if.entry10
    i64 6, label %if.entry14
    i64 7, label %if.entry18
    i64 8, label %if.entry22
    i64 9, label %if.entry26
    i64 15, label %if.entry30
    i64 10, label %if.entry34
    i64 11, label %if.entry38
    i64 12, label %if.entry42
    i64 13, label %if.entry46
    i64 14, label %if.entry50
  ]

common.ret:                                       ; preds = %3, %if.entry8.i, %ifend.i, %if.entry39.i, %ifend32.i, %if.entry50, %if.entry46, %if.entry42, %if.entry38, %if.entry34, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %TypeChecker_check_string_expression.exit, %if.entry6
  %common.ret.op = phi ptr [ %58, %if.entry6 ], [ %94, %TypeChecker_check_string_expression.exit ], [ %98, %if.entry14 ], [ %99, %if.entry18 ], [ %100, %if.entry22 ], [ %101, %if.entry26 ], [ %102, %if.entry30 ], [ %103, %if.entry34 ], [ %104, %if.entry38 ], [ %105, %if.entry42 ], [ %106, %if.entry46 ], [ %107, %if.entry50 ], [ %7, %ifend32.i ], [ %7, %if.entry39.i ], [ %40, %ifend.i ], [ %40, %if.entry8.i ], [ null, %3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx.i111 = getelementptr inbounds %IntExpressionNode, ptr %2, i64 0, i32 3
  %5 = load ptr, ptr %memberidx.i111, align 8
  %memberidx1.i112 = getelementptr inbounds %IntToken, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx1.i112, align 4
  %7 = call ptr @malloc(i32 33)
  store i64 8, ptr %7, align 4
  %memberidx.i.i.i113 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i113, align 4
  %memberidx1.i.i.i114 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i114, align 1
  %memberidx.i.i115 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 3
  %8 = call ptr @malloc(i32 8)
  store i64 6, ptr %8, align 4
  store ptr %8, ptr %memberidx.i.i115, align 8
  %memberidx1.i.i116 = getelementptr inbounds %IntExpression, ptr %7, i64 0, i32 4
  store i64 %6, ptr %memberidx1.i.i116, align 4
  store i1 true, ptr %memberidx1.i.i.i114, align 1
  %9 = load i64, ptr %1, align 4
  %10 = add i64 %9, -1
  %11 = icmp ult i64 %10, 7
  br i1 %11, label %if.entry.i119, label %ifend.i120

if.entry.i119:                                    ; preds = %if.entry
  store i64 %9, ptr %8, align 4
  br label %ifend.i120

ifend.i120:                                       ; preds = %if.entry.i119, %if.entry
  %12 = add i64 %6, -8
  %13 = icmp ult i64 %12, -16
  %14 = load ptr, ptr %memberidx.i.i115, align 8
  %15 = load i64, ptr %14, align 4
  %16 = icmp eq i64 %15, 1
  %17 = and i1 %13, %16
  br i1 %17, label %if.entry7.i, label %ifend9.i

if.entry7.i:                                      ; preds = %ifend.i120
  store i64 2, ptr %14, align 4
  br label %ifend9.i

ifend9.i:                                         ; preds = %if.entry7.i, %ifend.i120
  %18 = add i64 %6, -128
  %19 = icmp ult i64 %18, -256
  %20 = load i64, ptr %14, align 4
  %21 = icmp eq i64 %20, 2
  %22 = and i1 %19, %21
  br i1 %22, label %if.entry14.i, label %ifend16.i

if.entry14.i:                                     ; preds = %ifend9.i
  store i64 3, ptr %14, align 4
  br label %ifend16.i

ifend16.i:                                        ; preds = %if.entry14.i, %ifend9.i
  %23 = add i64 %6, -32768
  %24 = icmp ult i64 %23, -65536
  %25 = load i64, ptr %14, align 4
  %26 = icmp eq i64 %25, 3
  %27 = and i1 %24, %26
  br i1 %27, label %if.entry21.i, label %ifend23.i

if.entry21.i:                                     ; preds = %ifend16.i
  store i64 4, ptr %14, align 4
  br label %ifend23.i

ifend23.i:                                        ; preds = %if.entry21.i, %ifend16.i
  %28 = add i64 %6, -2147483648
  %29 = icmp ult i64 %28, -4294967296
  %30 = load i64, ptr %14, align 4
  %31 = icmp eq i64 %30, 4
  %32 = and i1 %29, %31
  br i1 %32, label %if.entry30.i, label %ifend32.i

if.entry30.i:                                     ; preds = %ifend23.i
  store i64 5, ptr %14, align 4
  br label %ifend32.i

ifend32.i:                                        ; preds = %if.entry30.i, %ifend23.i
  %33 = icmp eq i64 %6, -9223372036854775808
  %34 = load i64, ptr %14, align 4
  %35 = add i64 %34, -5
  %36 = icmp ult i64 %35, 2
  %37 = and i1 %33, %36
  br i1 %37, label %if.entry39.i, label %common.ret

if.entry39.i:                                     ; preds = %ifend32.i
  store i64 7, ptr %14, align 4
  br label %common.ret

if.entry2:                                        ; preds = %3
  %memberidx.i103 = getelementptr inbounds %FloatExpressionNode, ptr %2, i64 0, i32 3
  %38 = load ptr, ptr %memberidx.i103, align 8
  %memberidx1.i104 = getelementptr inbounds %FloatToken, ptr %38, i64 0, i32 2
  %39 = load double, ptr %memberidx1.i104, align 8
  %40 = call ptr @malloc(i32 33)
  store i64 8, ptr %40, align 4
  %memberidx.i.i.i105 = getelementptr inbounds %Expression, ptr %40, i64 0, i32 2
  store i64 1, ptr %memberidx.i.i.i105, align 4
  %memberidx1.i.i.i106 = getelementptr inbounds %Expression, ptr %40, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i106, align 1
  %memberidx.i.i107 = getelementptr inbounds %Expression, ptr %40, i64 0, i32 3
  %41 = call ptr @malloc(i32 8)
  store i64 9, ptr %41, align 4
  store ptr %41, ptr %memberidx.i.i107, align 8
  %memberidx1.i.i108 = getelementptr inbounds %FloatExpression, ptr %40, i64 0, i32 4
  store double %39, ptr %memberidx1.i.i108, align 8
  store i1 true, ptr %memberidx1.i.i.i106, align 1
  %42 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %42, ptr noundef nonnull align 8 dereferenceable(6) @196, i64 6, i1 false)
  %43 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %43, align 8
  %memberidx.i.i20.i = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  store ptr %42, ptr %memberidx.i.i20.i, align 8
  %memberidx1.i.i21.i = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i21.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %43, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i.i, align 4
  %44 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %45 = call ptr %44(ptr nonnull %43)
  %46 = call double @atof(ptr %45)
  call void @free(ptr %45)
  %47 = load i64, ptr %1, align 4
  %48 = and i64 %47, -2
  %49 = icmp eq i64 %48, 8
  br i1 %49, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry2
  store i64 %47, ptr %41, align 4
  br label %ifend.i

ifend.i:                                          ; preds = %if.entry.i, %if.entry2
  %50 = fneg double %46
  %51 = fcmp olt double %39, %50
  %52 = fcmp ogt double %39, %46
  %53 = or i1 %51, %52
  %54 = load ptr, ptr %memberidx.i.i107, align 8
  %55 = load i64, ptr %54, align 4
  %56 = icmp eq i64 %55, 8
  %57 = and i1 %53, %56
  br i1 %57, label %if.entry8.i, label %common.ret

if.entry8.i:                                      ; preds = %ifend.i
  store i64 9, ptr %54, align 4
  br label %common.ret

if.entry6:                                        ; preds = %3
  %58 = call ptr @malloc(i32 33)
  %memberidx.i = getelementptr inbounds %CharExpressionNode, ptr %2, i64 0, i32 3
  %59 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %CharToken, ptr %59, i64 0, i32 2
  %60 = load i8, ptr %memberidx1.i, align 1
  %61 = sext i8 %60 to i64
  store i64 8, ptr %58, align 4
  %memberidx.i.i.i = getelementptr inbounds %Expression, ptr %58, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %58, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i, align 1
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %58, i64 0, i32 3
  %62 = call ptr @malloc(i32 8)
  store i64 6, ptr %62, align 4
  store ptr %62, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %IntExpression, ptr %58, i64 0, i32 4
  store i64 %61, ptr %memberidx1.i.i, align 4
  store i1 true, ptr %memberidx1.i.i.i, align 1
  store i64 2, ptr %62, align 4
  br label %common.ret

if.entry10:                                       ; preds = %3
  %63 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %63, align 8
  %memberidx.i38.i = getelementptr inbounds %Array_Expression_, ptr %63, i64 0, i32 2
  store i64 0, ptr %memberidx.i38.i, align 4
  %memberidx1.i39.i = getelementptr inbounds %Array_Expression_, ptr %63, i64 0, i32 3
  store i64 8, ptr %memberidx1.i39.i, align 4
  %memberidx2.i40.i = getelementptr inbounds %Array_Expression_, ptr %63, i64 0, i32 1
  %64 = call ptr @malloc(i32 64)
  store ptr %64, ptr %memberidx2.i40.i, align 8
  store i64 0, ptr %memberidx.i38.i, align 4
  %memberidx2.i122 = getelementptr inbounds %StringExpressionNode, ptr %2, i64 0, i32 4
  %65 = load ptr, ptr %memberidx2.i122, align 8
  %66 = call ptr @malloc(i32 25)
  %memberidx.i34.i = getelementptr inbounds %Array_ExpressionNode_, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i34.i, align 8
  %memberidx1.i35.i = getelementptr inbounds %Array_ExpressionNode_, ptr %65, i64 0, i32 2
  %68 = load i64, ptr %memberidx1.i35.i, align 4
  store i1 false, ptr %66, align 1
  %memberidx1.i.i36.i = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %66, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i36.i, align 4
  %memberidx2.i.i37.i = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %66, i64 0, i32 3
  store ptr %67, ptr %memberidx2.i.i37.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %66, i64 0, i32 2
  store i64 %68, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i36.i, align 4
  %69 = icmp slt i64 %68, 1
  br i1 %69, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %if.entry10, %Array_Expression____sl__.exit.i
  %arg.0.i133.in = phi ptr [ %ptridx.i.i, %Array_Expression____sl__.exit.i ], [ %67, %if.entry10 ]
  %arg.0.i133 = load ptr, ptr %arg.0.i133.in, align 8
  %70 = call ptr @malloc(i32 8)
  store i64 20, ptr %70, align 4
  %71 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %70, ptr %arg.0.i133)
  %72 = load i64, ptr %memberidx.i38.i, align 4
  %73 = load i64, ptr %memberidx1.i39.i, align 4
  %.not.i.i = icmp slt i64 %72, %73
  br i1 %.not.i.i, label %Array_Expression____sl__.exit.i, label %if.entry.i27.i

if.entry.i27.i:                                   ; preds = %for.body.i
  %74 = shl i64 %73, 1
  store i64 %74, ptr %memberidx1.i39.i, align 4
  %75 = load ptr, ptr %memberidx2.i40.i, align 8
  %76 = shl i64 %73, 4
  %77 = call ptr @realloc(ptr %75, i64 %76)
  store ptr %77, ptr %memberidx2.i40.i, align 8
  br label %Array_Expression____sl__.exit.i

Array_Expression____sl__.exit.i:                  ; preds = %if.entry.i27.i, %for.body.i
  %78 = load i64, ptr %memberidx.i38.i, align 4
  %79 = add nsw i64 %78, 1
  store i64 %79, ptr %memberidx.i38.i, align 4
  %80 = load ptr, ptr %memberidx2.i40.i, align 8
  %ptridx.i29.i = getelementptr inbounds ptr, ptr %80, i64 %78
  store ptr %71, ptr %ptridx.i29.i, align 8
  %81 = load i64, ptr %memberidx1.i.i36.i, align 4
  %82 = add nsw i64 %81, 1
  store i64 %82, ptr %memberidx1.i.i36.i, align 4
  %83 = load ptr, ptr %memberidx2.i.i37.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %83, i64 %81
  %84 = load i64, ptr %memberidx3.i.i.i, align 4
  %85 = icmp sge i64 %81, %84
  br i1 %85, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %Array_Expression____sl__.exit.i, %if.entry10
  %storemerge.lcssa = phi i1 [ %69, %if.entry10 ], [ %85, %Array_Expression____sl__.exit.i ]
  store i1 %storemerge.lcssa, ptr %66, align 1
  call void @free(ptr nonnull %66)
  %86 = load i64, ptr %1, align 4
  %87 = icmp eq i64 %86, 13
  br i1 %87, label %if.entry.i.i, label %if.entry.i124

if.entry.i.i:                                     ; preds = %for.end.i
  %memberidx1.i20.i = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %88 = load ptr, ptr %memberidx1.i20.i, align 8
  %89 = load i64, ptr %88, align 4
  %90 = icmp eq i64 %89, 2
  br i1 %90, label %TypeChecker_check_string_expression.exit, label %if.entry.i124

if.entry.i124:                                    ; preds = %for.end.i, %if.entry.i.i
  %91 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %91, ptr noundef nonnull align 8 dereferenceable(6) @164, i64 6, i1 false)
  %92 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i.i18.i = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i.i18.i, align 8
  %memberidx1.i.i19.i = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i19.i, align 4
  %memberidx2.i.i.i123 = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i.i123, align 4
  %93 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr nonnull %92)
  br label %TypeChecker_check_string_expression.exit

TypeChecker_check_string_expression.exit:         ; preds = %if.entry.i.i, %if.entry.i124
  %expected_type.0.i = phi ptr [ %93, %if.entry.i124 ], [ %1, %if.entry.i.i ]
  %94 = call ptr @malloc(i32 49)
  %memberidx4.i = getelementptr inbounds %StringExpressionNode, ptr %2, i64 0, i32 3
  %95 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i125 = getelementptr inbounds %StrToken, ptr %95, i64 0, i32 2
  %96 = load ptr, ptr %memberidx5.i125, align 8
  %memberidx7.i = getelementptr inbounds %StrToken, ptr %95, i64 0, i32 3
  %97 = load ptr, ptr %memberidx7.i, align 8
  store i64 8, ptr %94, align 4
  %memberidx.i.i.i126 = getelementptr inbounds %Expression, ptr %94, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i.i126, align 4
  %memberidx1.i.i.i127 = getelementptr inbounds %Expression, ptr %94, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i127, align 1
  %memberidx.i.i128 = getelementptr inbounds %StringExpression, ptr %94, i64 0, i32 6
  store ptr %63, ptr %memberidx.i.i128, align 8
  %memberidx1.i.i129 = getelementptr inbounds %StringExpression, ptr %94, i64 0, i32 5
  store ptr %97, ptr %memberidx1.i.i129, align 8
  %memberidx2.i.i130 = getelementptr inbounds %Expression, ptr %94, i64 0, i32 3
  store ptr %expected_type.0.i, ptr %memberidx2.i.i130, align 8
  %memberidx3.i.i = getelementptr inbounds %StringExpression, ptr %94, i64 0, i32 4
  store ptr %96, ptr %memberidx3.i.i, align 8
  store i1 true, ptr %memberidx1.i.i.i127, align 1
  store ptr %expected_type.0.i, ptr %memberidx2.i.i130, align 8
  br label %common.ret

if.entry14:                                       ; preds = %3
  %98 = call fastcc ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry18:                                       ; preds = %3
  %99 = call fastcc ptr @TypeChecker_check_var_access_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry22:                                       ; preds = %3
  %100 = call fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry26:                                       ; preds = %3
  %101 = call fastcc ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry30:                                       ; preds = %3
  %102 = call fastcc ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry34:                                       ; preds = %3
  %103 = call fastcc ptr @TypeChecker_check_typecast_expr(ptr %0, ptr %2)
  br label %common.ret

if.entry38:                                       ; preds = %3
  %104 = call fastcc ptr @TypeChecker_check_new_expr(ptr %0, ptr %2)
  br label %common.ret

if.entry42:                                       ; preds = %3
  %105 = call fastcc ptr @TypeChecker_check_member_expr(ptr %0, ptr %2)
  br label %common.ret

if.entry46:                                       ; preds = %3
  %106 = call fastcc ptr @TypeChecker_check_index_expr(ptr %0, ptr %2)
  br label %common.ret

if.entry50:                                       ; preds = %3
  %107 = call fastcc ptr @TypeChecker_check_call_expr(ptr %0, ptr %2)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_var_access_expr(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %VarAccessExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i64 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @malloc(i32 4)
  store i32 1702195828, ptr %6, align 8
  %7 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %8 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %8, 4
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %3
  %memberidx2.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %9 = load ptr, ptr %memberidx2.i, align 8
  %10 = call i64 @memcmp(ptr %9, ptr nonnull %6, i64 %8)
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend14, %TypeChecker_error.exit, %if.entry5, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %12, %if.entry ], [ %20, %if.entry2 ], [ %28, %if.entry5 ], [ null, %TypeChecker_error.exit ], [ %62, %ifend14 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %ifend.i
  %12 = tail call ptr @malloc(i32 26)
  store i64 8, ptr %12, align 4
  %memberidx.i.i50 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 2
  store i64 4, ptr %memberidx.i.i50, align 4
  %memberidx1.i.i51 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i51, align 1
  %13 = call ptr @malloc(i32 8)
  store i64 0, ptr %13, align 4
  %memberidx.i52 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 3
  store ptr %13, ptr %memberidx.i52, align 8
  %memberidx1.i53 = getelementptr inbounds %BooleanExpression, ptr %12, i64 0, i32 4
  store i1 true, ptr %memberidx1.i53, align 1
  store i1 true, ptr %memberidx1.i.i51, align 1
  br label %common.ret

ifend:                                            ; preds = %3, %ifend.i
  %14 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %14, ptr noundef nonnull align 8 dereferenceable(5) @84, i64 5, i1 false)
  %15 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i55 = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i55, align 8
  %memberidx1.i.i56 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i56, align 4
  %memberidx2.i.i57 = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i57, align 4
  %16 = load i64, ptr %memberidx.i, align 4
  %.not.i60 = icmp eq i64 %16, 5
  br i1 %.not.i60, label %ifend.i64, label %ifend4

ifend.i64:                                        ; preds = %ifend
  %memberidx2.i62 = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i62, align 8
  %18 = call i64 @memcmp(ptr %17, ptr %14, i64 %16)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend.i64
  %20 = tail call ptr @malloc(i32 26)
  store i64 8, ptr %20, align 4
  %memberidx.i.i66 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 2
  store i64 4, ptr %memberidx.i.i66, align 4
  %memberidx1.i.i67 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i67, align 1
  %21 = call ptr @malloc(i32 8)
  store i64 0, ptr %21, align 4
  %memberidx.i68 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 3
  store ptr %21, ptr %memberidx.i68, align 8
  %memberidx1.i69 = getelementptr inbounds %BooleanExpression, ptr %20, i64 0, i32 4
  store i1 false, ptr %memberidx1.i69, align 1
  store i1 true, ptr %memberidx1.i.i67, align 1
  br label %common.ret

ifend4:                                           ; preds = %ifend, %ifend.i64
  %22 = call ptr @malloc(i32 4)
  store i32 1819047278, ptr %22, align 8
  %23 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i71 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i71, align 8
  %memberidx1.i.i72 = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i72, align 4
  %memberidx2.i.i73 = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i73, align 4
  %24 = load i64, ptr %memberidx.i, align 4
  %.not.i76 = icmp eq i64 %24, 4
  br i1 %.not.i76, label %ifend.i80, label %ifend7

ifend.i80:                                        ; preds = %ifend4
  %memberidx2.i78 = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %25 = load ptr, ptr %memberidx2.i78, align 8
  %26 = call i64 @memcmp(ptr %25, ptr nonnull %22, i64 %24)
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %if.entry5, label %ifend7

if.entry5:                                        ; preds = %ifend.i80
  %28 = tail call ptr @malloc(i32 25)
  store i64 8, ptr %28, align 4
  %memberidx.i.i82 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 2
  store i64 5, ptr %memberidx.i.i82, align 4
  %memberidx1.i.i83 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i83, align 1
  %memberidx.i84 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 3
  store ptr %1, ptr %memberidx.i84, align 8
  store i1 true, ptr %memberidx1.i.i83, align 1
  br label %common.ret

ifend7:                                           ; preds = %ifend4, %ifend.i80
  %29 = call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %5)
  %var_ty = alloca ptr, align 8
  %30 = call ptr @malloc(i32 8)
  store i64 20, ptr %30, align 4
  store ptr %30, ptr %var_ty, align 8
  %.not = icmp eq ptr %29, null
  br i1 %.not, label %ifend10, label %if.entry8

if.entry8:                                        ; preds = %ifend7
  %31 = load i64, ptr %29, align 4
  switch i64 %31, label %else25 [
    i64 0, label %if.entry12
    i64 1, label %if.entry18
    i64 2, label %if.entry24
  ]

ifend10:                                          ; preds = %ifend7
  %32 = load ptr, ptr %5, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i64 0, i32 5
  %33 = load ptr, ptr %memberidx38, align 8
  %34 = call ptr %33(ptr nonnull %5)
  %35 = alloca ptr, align 8
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %35, ptr nonnull @147, ptr %34)
  %37 = load ptr, ptr %35, align 8
  %38 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %38, align 8
  %memberidx.i89 = getelementptr inbounds %string, ptr %38, i64 0, i32 1
  store ptr %37, ptr %memberidx.i89, align 8
  %memberidx1.i90 = getelementptr inbounds %string, ptr %38, i64 0, i32 2
  store i64 %36, ptr %memberidx1.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %string, ptr %38, i64 0, i32 3
  store i64 %36, ptr %memberidx2.i91, align 4
  tail call void @free(ptr %34)
  %39 = load ptr, ptr %2, align 8
  %memberidx.i92 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %40 = load ptr, ptr %memberidx.i92, align 8
  %memberidx1.i93 = getelementptr inbounds %Compiler, ptr %40, i64 0, i32 6
  %41 = load ptr, ptr %memberidx1.i93, align 8
  %42 = call ptr @malloc(i32 24)
  store i64 1, ptr %42, align 4
  %memberidx1.i.i94 = getelementptr inbounds %FloError, ptr %42, i64 0, i32 2
  store ptr %39, ptr %memberidx1.i.i94, align 8
  %memberidx2.i.i95 = getelementptr inbounds %FloError, ptr %42, i64 0, i32 1
  store ptr %38, ptr %memberidx2.i.i95, align 8
  %memberidx.i.i96 = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 2
  %43 = load i64, ptr %memberidx.i.i96, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 3
  %44 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %43, %44
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %ifend10
  %45 = shl i64 %44, 1
  store i64 %45, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i.i, align 8
  %47 = shl i64 %44, 4
  %48 = call ptr @realloc(ptr %46, i64 %47)
  store ptr %48, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %ifend10, %if.entry.i.i
  %49 = load i64, ptr %memberidx.i.i96, align 4
  %50 = add nsw i64 %49, 1
  store i64 %50, ptr %memberidx.i.i96, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 1
  %51 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %51, i64 %49
  store ptr %42, ptr %ptridx.i.i, align 8
  br label %common.ret

if.entry12:                                       ; preds = %if.entry8
  %52 = load ptr, ptr %0, align 8
  %memberidx.i98 = getelementptr inbounds %Program, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i98, align 8
  %memberidx1.i99 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %54 = load i64, ptr %memberidx1.i99, align 4
  %memberidx.i.i100 = getelementptr inbounds %Array_Module_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i.i100, align 8
  %ptridx.i.i101 = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i.i101, align 8
  %memberidx2.i102 = getelementptr inbounds %Module, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx2.i102, align 8
  %memberidx3.i103 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %58 = load i64, ptr %memberidx3.i103, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Function_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %59, i64 %58
  %60 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx16 = getelementptr inbounds %Function, ptr %60, i64 0, i32 4
  %61 = load ptr, ptr %memberidx16, align 8
  store ptr %61, ptr %var_ty, align 8
  br label %ifend14

ifend14:                                          ; preds = %if.entry35, %else32, %if.entry31, %if.entry24, %if.entry18, %if.entry12
  %62 = tail call ptr @malloc(i32 33)
  %63 = load ptr, ptr %var_ty, align 8
  store i64 8, ptr %62, align 4
  %memberidx.i.i104 = getelementptr inbounds %Expression, ptr %62, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i104, align 4
  %memberidx1.i.i105 = getelementptr inbounds %Expression, ptr %62, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i105, align 1
  %memberidx.i106 = getelementptr inbounds %VarAccessExpression, ptr %62, i64 0, i32 4
  store ptr %29, ptr %memberidx.i106, align 8
  %memberidx1.i107 = getelementptr inbounds %Expression, ptr %62, i64 0, i32 3
  store ptr %63, ptr %memberidx1.i107, align 8
  %64 = load i64, ptr %29, align 4
  %65 = icmp eq i64 %64, 2
  store i1 %65, ptr %memberidx1.i.i105, align 1
  br label %common.ret

if.entry18:                                       ; preds = %if.entry8
  %66 = load ptr, ptr %0, align 8
  %memberidx.i117 = getelementptr inbounds %Program, ptr %66, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i117, align 8
  %memberidx1.i118 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %68 = load i64, ptr %memberidx1.i118, align 4
  %memberidx.i.i119 = getelementptr inbounds %Array_Module_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i.i119, align 8
  %ptridx.i.i120 = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i.i120, align 8
  %memberidx2.i121 = getelementptr inbounds %Module, ptr %70, i64 0, i32 2
  %71 = load ptr, ptr %memberidx2.i121, align 8
  %memberidx3.i122 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %72 = load i64, ptr %memberidx3.i122, align 4
  %memberidx.i5.i123 = getelementptr inbounds %Array_Var_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i5.i123, align 8
  %ptridx.i6.i124 = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i6.i124, align 8
  %75 = load ptr, ptr %74, align 8
  store ptr %75, ptr %var_ty, align 8
  br label %ifend14

if.entry24:                                       ; preds = %if.entry8
  %76 = load ptr, ptr %0, align 8
  %memberidx.i109 = getelementptr inbounds %Program, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i109, align 8
  %memberidx1.i110 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %78 = load i64, ptr %memberidx1.i110, align 4
  %memberidx.i.i111 = getelementptr inbounds %Array_Module_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i.i111, align 8
  %ptridx.i.i112 = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i.i112, align 8
  %memberidx2.i113 = getelementptr inbounds %Module, ptr %80, i64 0, i32 3
  %81 = load ptr, ptr %memberidx2.i113, align 8
  %memberidx3.i114 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %82 = load i64, ptr %memberidx3.i114, align 4
  %memberidx.i5.i115 = getelementptr inbounds %Array_Const_, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i5.i115, align 8
  %ptridx.i6.i116 = getelementptr inbounds ptr, ptr %83, i64 %82
  %84 = load ptr, ptr %ptridx.i6.i116, align 8
  %85 = load ptr, ptr %84, align 8
  store ptr %85, ptr %var_ty, align 8
  br label %ifend14

else25:                                           ; preds = %if.entry8
  %86 = add i64 %31, -3
  %87 = icmp ult i64 %86, 2
  br i1 %87, label %if.entry31, label %else32

if.entry31:                                       ; preds = %else25
  %88 = tail call ptr @malloc(i32 8)
  store i64 16, ptr %88, align 4
  store ptr %88, ptr %var_ty, align 8
  br label %ifend14

else32:                                           ; preds = %else25
  %89 = icmp eq i64 %31, 5
  br i1 %89, label %if.entry35, label %ifend14

if.entry35:                                       ; preds = %else32
  %90 = tail call ptr @malloc(i32 8)
  store i64 17, ptr %90, align 4
  store ptr %90, ptr %var_ty, align 8
  br label %ifend14
}

define internal fastcc ptr @TypeChecker_check_intrinsic_call(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %2, i64 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  %5 = add i64 %4, -3
  %6 = icmp ult i64 %5, 2
  %7 = icmp eq i64 %4, 7
  %8 = or i1 %7, %6
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 5
  %memberidx5 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 5
  %memberidx.i135 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 1
  %memberidx.i138 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  br label %for.body

for.cond:                                         ; preds = %Array_Expression____sl__.exit
  %11 = add nuw nsw i64 %i.0248, 1
  %12 = load i64, ptr %memberidx2, align 4
  %13 = icmp slt i64 %11, %12
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %i.0248 = phi i64 [ 0, %for.body.lr.ph ], [ %11, %for.cond ]
  %14 = icmp eq i64 %i.0248, 1
  %15 = and i1 %8, %14
  br i1 %15, label %true_block, label %false_block

for.end:                                          ; preds = %for.cond, %for.entry
  %memberidx6 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 5
  %16 = load ptr, ptr %memberidx6, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx7 = getelementptr inbounds %Expression, ptr %18, i64 0, i32 3
  %19 = load ptr, ptr %memberidx7, align 8
  %20 = load i64, ptr %19, align 4
  %21 = icmp eq i64 %20, 13
  br i1 %21, label %ifend10, label %if.entry8

true_block:                                       ; preds = %for.body
  %22 = call ptr @malloc(i32 8)
  store i64 20, ptr %22, align 4
  br label %end

false_block:                                      ; preds = %for.body
  %23 = load ptr, ptr %memberidx3, align 8
  %memberidx.i134 = getelementptr inbounds %Array_Expression_, ptr %23, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i134, align 8
  %25 = load ptr, ptr %24, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx4, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %22, %true_block ], [ %26, %false_block ]
  %27 = load ptr, ptr %memberidx5, align 8
  %28 = load ptr, ptr %memberidx.i135, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %28, i64 %i.0248
  %29 = load ptr, ptr %ptridx.i, align 8
  %30 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %ternary, ptr %29)
  %memberidx.i136 = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i136, align 4
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 3
  %32 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %31, %32
  br i1 %.not.i, label %Array_Expression____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %end
  %33 = shl i64 %32, 1
  store i64 %33, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 1
  %34 = load ptr, ptr %memberidx2.i.i, align 8
  %35 = shl i64 %32, 4
  %36 = call ptr @realloc(ptr %34, i64 %35)
  store ptr %36, ptr %memberidx2.i.i, align 8
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %end, %if.entry.i
  %37 = load i64, ptr %memberidx.i136, align 4
  %38 = add nsw i64 %37, 1
  store i64 %38, ptr %memberidx.i136, align 4
  %memberidx4.i = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 1
  %39 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i137 = getelementptr inbounds ptr, ptr %39, i64 %37
  store ptr %30, ptr %ptridx.i137, align 8
  %40 = load ptr, ptr %memberidx.i138, align 8
  %memberidx1.i139 = getelementptr inbounds %Compiler, ptr %40, i64 0, i32 6
  %41 = load ptr, ptr %memberidx1.i139, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 2
  %42 = load i64, ptr %memberidx2.i, align 4
  %43 = icmp sgt i64 %42, 0
  br i1 %43, label %common.ret, label %for.cond

common.ret:                                       ; preds = %Array_Expression____sl__.exit, %ifend23, %ifend73, %if.entry79, %else17, %TypeChecker_error.exit245, %TypeChecker_error.exit223, %TypeChecker_error.exit201, %TypeChecker_error.exit185, %TypeChecker_error.exit163, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit163 ], [ null, %TypeChecker_error.exit185 ], [ null, %TypeChecker_error.exit201 ], [ null, %TypeChecker_error.exit223 ], [ null, %TypeChecker_error.exit245 ], [ %1, %else17 ], [ %1, %if.entry79 ], [ %1, %ifend73 ], [ %1, %ifend23 ], [ null, %Array_Expression____sl__.exit ]
  ret ptr %common.ret.op

if.entry8:                                        ; preds = %for.end
  %44 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %19)
  %45 = load ptr, ptr %44, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i64 0, i32 5
  %46 = load ptr, ptr %memberidx13, align 8
  %47 = call ptr %46(ptr nonnull %44)
  %48 = alloca ptr, align 8
  %49 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %48, ptr nonnull @191, ptr %47)
  %50 = load ptr, ptr %48, align 8
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i141 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i141, align 8
  %memberidx1.i142 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 %49, ptr %memberidx1.i142, align 4
  %memberidx2.i143 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 %49, ptr %memberidx2.i143, align 4
  tail call void @free(ptr %47)
  %memberidx14 = getelementptr inbounds %CallExpressionNode, ptr %2, i64 0, i32 3
  %52 = load ptr, ptr %memberidx14, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx.i144 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %54 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %Compiler, ptr %54, i64 0, i32 6
  %55 = load ptr, ptr %memberidx1.i145, align 8
  %56 = call ptr @malloc(i32 24)
  store i64 5, ptr %56, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %56, i64 0, i32 2
  store ptr %53, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i146 = getelementptr inbounds %FloError, ptr %56, i64 0, i32 1
  store ptr %51, ptr %memberidx2.i.i146, align 8
  %memberidx.i.i147 = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 2
  %57 = load i64, ptr %memberidx.i.i147, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 3
  %58 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %57, %58
  br i1 %.not.i.i, label %TypeChecker_error.exit, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %if.entry8
  %59 = shl i64 %58, 1
  store i64 %59, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %60 = load ptr, ptr %memberidx2.i.i.i, align 8
  %61 = shl i64 %58, 4
  %62 = call ptr @realloc(ptr %60, i64 %61)
  store ptr %62, ptr %memberidx2.i.i.i, align 8
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry8, %if.entry.i.i
  %63 = load i64, ptr %memberidx.i.i147, align 4
  %64 = add nsw i64 %63, 1
  store i64 %64, ptr %memberidx.i.i147, align 4
  %memberidx4.i.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %65 = load ptr, ptr %memberidx4.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %65, i64 %63
  store ptr %56, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend10:                                          ; preds = %for.end
  %66 = icmp eq i64 %4, 6
  br i1 %66, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend10
  %memberidx20 = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 2
  %67 = load i64, ptr %memberidx20, align 4
  %.not133 = icmp eq i64 %67, 2
  br i1 %.not133, label %ifend23, label %if.entry21

else17:                                           ; preds = %ifend10
  %68 = icmp eq i64 %4, 5
  switch i64 %4, label %common.ret [
    i64 7, label %if.entry40
    i64 5, label %if.entry40
    i64 4, label %if.entry40
    i64 3, label %if.entry40
  ]

if.entry21:                                       ; preds = %if.entry16
  %69 = alloca ptr, align 8
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %69, ptr nonnull @192, i64 %67)
  %71 = load ptr, ptr %69, align 8
  %72 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i148 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i148, align 8
  %memberidx1.i149 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 %70, ptr %memberidx1.i149, align 4
  %memberidx2.i150 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 %70, ptr %memberidx2.i150, align 4
  %73 = load ptr, ptr %2, align 8
  %memberidx.i151 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %74 = load ptr, ptr %memberidx.i151, align 8
  %memberidx1.i152 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i152, align 8
  %76 = call ptr @malloc(i32 24)
  store i64 4, ptr %76, align 4
  %memberidx1.i.i153 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 2
  store ptr %73, ptr %memberidx1.i.i153, align 8
  %memberidx2.i.i154 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 1
  store ptr %72, ptr %memberidx2.i.i154, align 8
  %memberidx.i.i155 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i.i155, align 4
  %memberidx1.i2.i156 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 3
  %78 = load i64, ptr %memberidx1.i2.i156, align 4
  %.not.i.i157 = icmp slt i64 %77, %78
  br i1 %.not.i.i157, label %TypeChecker_error.exit163, label %if.entry.i.i160

if.entry.i.i160:                                  ; preds = %if.entry21
  %79 = shl i64 %78, 1
  store i64 %79, ptr %memberidx1.i2.i156, align 4
  %memberidx2.i.i.i159 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i.i159, align 8
  %81 = shl i64 %78, 4
  %82 = call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i.i.i159, align 8
  br label %TypeChecker_error.exit163

TypeChecker_error.exit163:                        ; preds = %if.entry21, %if.entry.i.i160
  %83 = load i64, ptr %memberidx.i.i155, align 4
  %84 = add nsw i64 %83, 1
  store i64 %84, ptr %memberidx.i.i155, align 4
  %memberidx4.i.i161 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %85 = load ptr, ptr %memberidx4.i.i161, align 8
  %ptridx.i.i162 = getelementptr inbounds ptr, ptr %85, i64 %83
  store ptr %76, ptr %ptridx.i.i162, align 8
  br label %common.ret

ifend23:                                          ; preds = %if.entry16
  %memberidx27 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  store ptr %19, ptr %memberidx27, align 8
  %86 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i166 = getelementptr inbounds ptr, ptr %86, i64 1
  %87 = load ptr, ptr %ptridx.i166, align 8
  %memberidx31 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  %88 = load ptr, ptr %memberidx31, align 8
  %89 = load i64, ptr %88, align 4
  %90 = add i64 %89, -1
  %91 = icmp ult i64 %90, 7
  br i1 %91, label %common.ret, label %if.entry32

if.entry32:                                       ; preds = %ifend23
  %92 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %88)
  %93 = load ptr, ptr %92, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %93, i64 0, i32 5
  %94 = load ptr, ptr %memberidx37, align 8
  %95 = call ptr %94(ptr nonnull %92)
  %96 = alloca ptr, align 8
  %97 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %96, ptr nonnull @193, ptr %95)
  %98 = load ptr, ptr %96, align 8
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i169 = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i169, align 8
  %memberidx1.i170 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 %97, ptr %memberidx1.i170, align 4
  %memberidx2.i171 = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 %97, ptr %memberidx2.i171, align 4
  tail call void @free(ptr %95)
  %100 = load ptr, ptr %memberidx, align 8
  %memberidx.i172 = getelementptr inbounds %Array_ExpressionNode_, ptr %100, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i172, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %102, align 8
  %memberidx.i173 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %104 = load ptr, ptr %memberidx.i173, align 8
  %memberidx1.i174 = getelementptr inbounds %Compiler, ptr %104, i64 0, i32 6
  %105 = load ptr, ptr %memberidx1.i174, align 8
  %106 = call ptr @malloc(i32 24)
  store i64 5, ptr %106, align 4
  %memberidx1.i.i175 = getelementptr inbounds %FloError, ptr %106, i64 0, i32 2
  store ptr %103, ptr %memberidx1.i.i175, align 8
  %memberidx2.i.i176 = getelementptr inbounds %FloError, ptr %106, i64 0, i32 1
  store ptr %99, ptr %memberidx2.i.i176, align 8
  %memberidx.i.i177 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 2
  %107 = load i64, ptr %memberidx.i.i177, align 4
  %memberidx1.i2.i178 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 3
  %108 = load i64, ptr %memberidx1.i2.i178, align 4
  %.not.i.i179 = icmp slt i64 %107, %108
  br i1 %.not.i.i179, label %TypeChecker_error.exit185, label %if.entry.i.i182

if.entry.i.i182:                                  ; preds = %if.entry32
  %109 = shl i64 %108, 1
  store i64 %109, ptr %memberidx1.i2.i178, align 4
  %memberidx2.i.i.i181 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i.i.i181, align 8
  %111 = shl i64 %108, 4
  %112 = call ptr @realloc(ptr %110, i64 %111)
  store ptr %112, ptr %memberidx2.i.i.i181, align 8
  br label %TypeChecker_error.exit185

TypeChecker_error.exit185:                        ; preds = %if.entry32, %if.entry.i.i182
  %113 = load i64, ptr %memberidx.i.i177, align 4
  %114 = add nsw i64 %113, 1
  store i64 %114, ptr %memberidx.i.i177, align 4
  %memberidx4.i.i183 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %115 = load ptr, ptr %memberidx4.i.i183, align 8
  %ptridx.i.i184 = getelementptr inbounds ptr, ptr %115, i64 %113
  store ptr %106, ptr %ptridx.i.i184, align 8
  br label %common.ret

if.entry40:                                       ; preds = %else17, %else17, %else17, %else17
  %memberidx44 = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 2
  %116 = load i64, ptr %memberidx44, align 4
  %.not = icmp eq i64 %116, 3
  %exp_arg2_type = alloca ptr, align 8
  br i1 %.not, label %ifend47, label %if.entry45

if.entry45:                                       ; preds = %if.entry40
  %117 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %exp_arg2_type, ptr nonnull @194, i64 %116)
  %118 = load ptr, ptr %exp_arg2_type, align 8
  %119 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %119, align 8
  %memberidx.i186 = getelementptr inbounds %string, ptr %119, i64 0, i32 1
  store ptr %118, ptr %memberidx.i186, align 8
  %memberidx1.i187 = getelementptr inbounds %string, ptr %119, i64 0, i32 2
  store i64 %117, ptr %memberidx1.i187, align 4
  %memberidx2.i188 = getelementptr inbounds %string, ptr %119, i64 0, i32 3
  store i64 %117, ptr %memberidx2.i188, align 4
  %120 = load ptr, ptr %2, align 8
  %memberidx.i189 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %121 = load ptr, ptr %memberidx.i189, align 8
  %memberidx1.i190 = getelementptr inbounds %Compiler, ptr %121, i64 0, i32 6
  %122 = load ptr, ptr %memberidx1.i190, align 8
  %123 = call ptr @malloc(i32 24)
  store i64 4, ptr %123, align 4
  %memberidx1.i.i191 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 2
  store ptr %120, ptr %memberidx1.i.i191, align 8
  %memberidx2.i.i192 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 1
  store ptr %119, ptr %memberidx2.i.i192, align 8
  %memberidx.i.i193 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 2
  %124 = load i64, ptr %memberidx.i.i193, align 4
  %memberidx1.i2.i194 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 3
  %125 = load i64, ptr %memberidx1.i2.i194, align 4
  %.not.i.i195 = icmp slt i64 %124, %125
  br i1 %.not.i.i195, label %TypeChecker_error.exit201, label %if.entry.i.i198

if.entry.i.i198:                                  ; preds = %if.entry45
  %126 = shl i64 %125, 1
  store i64 %126, ptr %memberidx1.i2.i194, align 4
  %memberidx2.i.i.i197 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %127 = load ptr, ptr %memberidx2.i.i.i197, align 8
  %128 = shl i64 %125, 4
  %129 = call ptr @realloc(ptr %127, i64 %128)
  store ptr %129, ptr %memberidx2.i.i.i197, align 8
  br label %TypeChecker_error.exit201

TypeChecker_error.exit201:                        ; preds = %if.entry45, %if.entry.i.i198
  %130 = load i64, ptr %memberidx.i.i193, align 4
  %131 = add nsw i64 %130, 1
  store i64 %131, ptr %memberidx.i.i193, align 4
  %memberidx4.i.i199 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %132 = load ptr, ptr %memberidx4.i.i199, align 8
  %ptridx.i.i200 = getelementptr inbounds ptr, ptr %132, i64 %130
  store ptr %123, ptr %ptridx.i.i200, align 8
  br label %common.ret

ifend47:                                          ; preds = %if.entry40
  store ptr %19, ptr %exp_arg2_type, align 8
  %memberidx53 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  store ptr %19, ptr %memberidx53, align 8
  br i1 %68, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %ifend47
  %memberidx57 = getelementptr inbounds %PointerType, ptr %19, i64 0, i32 1
  %133 = load ptr, ptr %memberidx57, align 8
  store ptr %133, ptr %exp_arg2_type, align 8
  br label %ifend56

ifend56:                                          ; preds = %ifend47, %if.entry54
  %134 = load ptr, ptr %exp_arg2_type, align 8
  %135 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i204 = getelementptr inbounds ptr, ptr %135, i64 1
  %136 = load ptr, ptr %ptridx.i204, align 8
  %memberidx59 = getelementptr inbounds %Expression, ptr %136, i64 0, i32 3
  %137 = load ptr, ptr %memberidx59, align 8
  %138 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %134, ptr %137)
  br i1 %138, label %ifend62, label %if.entry60

if.entry60:                                       ; preds = %ifend56
  %139 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %134)
  %140 = load ptr, ptr %139, align 8
  %memberidx63 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %140, i64 0, i32 5
  %141 = load ptr, ptr %memberidx63, align 8
  %142 = call ptr %141(ptr nonnull %139)
  %143 = load ptr, ptr %memberidx6, align 8
  %memberidx.i205 = getelementptr inbounds %Array_Expression_, ptr %143, i64 0, i32 1
  %144 = load ptr, ptr %memberidx.i205, align 8
  %ptridx.i206 = getelementptr inbounds ptr, ptr %144, i64 1
  %145 = load ptr, ptr %ptridx.i206, align 8
  %memberidx65 = getelementptr inbounds %Expression, ptr %145, i64 0, i32 3
  %146 = load ptr, ptr %memberidx65, align 8
  %147 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %146)
  %148 = load ptr, ptr %147, align 8
  %memberidx66 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %148, i64 0, i32 5
  %149 = load ptr, ptr %memberidx66, align 8
  %150 = call ptr %149(ptr nonnull %147)
  %151 = alloca ptr, align 8
  %152 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %151, ptr nonnull @195, ptr %142, ptr %150)
  %153 = load ptr, ptr %151, align 8
  %154 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %154, align 8
  %memberidx.i207 = getelementptr inbounds %string, ptr %154, i64 0, i32 1
  store ptr %153, ptr %memberidx.i207, align 8
  %memberidx1.i208 = getelementptr inbounds %string, ptr %154, i64 0, i32 2
  store i64 %152, ptr %memberidx1.i208, align 4
  %memberidx2.i209 = getelementptr inbounds %string, ptr %154, i64 0, i32 3
  store i64 %152, ptr %memberidx2.i209, align 4
  tail call void @free(ptr %142)
  tail call void @free(ptr %150)
  %155 = load ptr, ptr %memberidx, align 8
  %memberidx.i210 = getelementptr inbounds %Array_ExpressionNode_, ptr %155, i64 0, i32 1
  %156 = load ptr, ptr %memberidx.i210, align 8
  %157 = load ptr, ptr %156, align 8
  %158 = load ptr, ptr %157, align 8
  %memberidx.i211 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %159 = load ptr, ptr %memberidx.i211, align 8
  %memberidx1.i212 = getelementptr inbounds %Compiler, ptr %159, i64 0, i32 6
  %160 = load ptr, ptr %memberidx1.i212, align 8
  %161 = call ptr @malloc(i32 24)
  store i64 5, ptr %161, align 4
  %memberidx1.i.i213 = getelementptr inbounds %FloError, ptr %161, i64 0, i32 2
  store ptr %158, ptr %memberidx1.i.i213, align 8
  %memberidx2.i.i214 = getelementptr inbounds %FloError, ptr %161, i64 0, i32 1
  store ptr %154, ptr %memberidx2.i.i214, align 8
  %memberidx.i.i215 = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 2
  %162 = load i64, ptr %memberidx.i.i215, align 4
  %memberidx1.i2.i216 = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 3
  %163 = load i64, ptr %memberidx1.i2.i216, align 4
  %.not.i.i217 = icmp slt i64 %162, %163
  br i1 %.not.i.i217, label %TypeChecker_error.exit223, label %if.entry.i.i220

if.entry.i.i220:                                  ; preds = %if.entry60
  %164 = shl i64 %163, 1
  store i64 %164, ptr %memberidx1.i2.i216, align 4
  %memberidx2.i.i.i219 = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 1
  %165 = load ptr, ptr %memberidx2.i.i.i219, align 8
  %166 = shl i64 %163, 4
  %167 = call ptr @realloc(ptr %165, i64 %166)
  store ptr %167, ptr %memberidx2.i.i.i219, align 8
  br label %TypeChecker_error.exit223

TypeChecker_error.exit223:                        ; preds = %if.entry60, %if.entry.i.i220
  %168 = load i64, ptr %memberidx.i.i215, align 4
  %169 = add nsw i64 %168, 1
  store i64 %169, ptr %memberidx.i.i215, align 4
  %memberidx4.i.i221 = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 1
  %170 = load ptr, ptr %memberidx4.i.i221, align 8
  %ptridx.i.i222 = getelementptr inbounds ptr, ptr %170, i64 %168
  store ptr %161, ptr %ptridx.i.i222, align 8
  br label %common.ret

ifend62:                                          ; preds = %ifend56
  %171 = load ptr, ptr %memberidx6, align 8
  %memberidx.i224 = getelementptr inbounds %Array_Expression_, ptr %171, i64 0, i32 1
  %172 = load ptr, ptr %memberidx.i224, align 8
  %ptridx.i225 = getelementptr inbounds ptr, ptr %172, i64 2
  %173 = load ptr, ptr %ptridx.i225, align 8
  %memberidx70 = getelementptr inbounds %Expression, ptr %173, i64 0, i32 3
  %174 = load ptr, ptr %memberidx70, align 8
  %175 = load i64, ptr %174, align 4
  %176 = add i64 %175, -1
  %177 = icmp ult i64 %176, 7
  br i1 %177, label %ifend73, label %if.entry71

if.entry71:                                       ; preds = %ifend62
  %178 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %174)
  %179 = load ptr, ptr %178, align 8
  %memberidx76 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %179, i64 0, i32 5
  %180 = load ptr, ptr %memberidx76, align 8
  %181 = call ptr %180(ptr nonnull %178)
  %182 = alloca ptr, align 8
  %183 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %182, ptr nonnull @193, ptr %181)
  %184 = load ptr, ptr %182, align 8
  %185 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %185, align 8
  %memberidx.i228 = getelementptr inbounds %string, ptr %185, i64 0, i32 1
  store ptr %184, ptr %memberidx.i228, align 8
  %memberidx1.i229 = getelementptr inbounds %string, ptr %185, i64 0, i32 2
  store i64 %183, ptr %memberidx1.i229, align 4
  %memberidx2.i230 = getelementptr inbounds %string, ptr %185, i64 0, i32 3
  store i64 %183, ptr %memberidx2.i230, align 4
  tail call void @free(ptr %181)
  %186 = load ptr, ptr %memberidx, align 8
  %memberidx.i231 = getelementptr inbounds %Array_ExpressionNode_, ptr %186, i64 0, i32 1
  %187 = load ptr, ptr %memberidx.i231, align 8
  %ptridx.i232 = getelementptr inbounds ptr, ptr %187, i64 1
  %188 = load ptr, ptr %ptridx.i232, align 8
  %189 = load ptr, ptr %188, align 8
  %memberidx.i233 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %190 = load ptr, ptr %memberidx.i233, align 8
  %memberidx1.i234 = getelementptr inbounds %Compiler, ptr %190, i64 0, i32 6
  %191 = load ptr, ptr %memberidx1.i234, align 8
  %192 = call ptr @malloc(i32 24)
  store i64 5, ptr %192, align 4
  %memberidx1.i.i235 = getelementptr inbounds %FloError, ptr %192, i64 0, i32 2
  store ptr %189, ptr %memberidx1.i.i235, align 8
  %memberidx2.i.i236 = getelementptr inbounds %FloError, ptr %192, i64 0, i32 1
  store ptr %185, ptr %memberidx2.i.i236, align 8
  %memberidx.i.i237 = getelementptr inbounds %Array_FloError_, ptr %191, i64 0, i32 2
  %193 = load i64, ptr %memberidx.i.i237, align 4
  %memberidx1.i2.i238 = getelementptr inbounds %Array_FloError_, ptr %191, i64 0, i32 3
  %194 = load i64, ptr %memberidx1.i2.i238, align 4
  %.not.i.i239 = icmp slt i64 %193, %194
  br i1 %.not.i.i239, label %TypeChecker_error.exit245, label %if.entry.i.i242

if.entry.i.i242:                                  ; preds = %if.entry71
  %195 = shl i64 %194, 1
  store i64 %195, ptr %memberidx1.i2.i238, align 4
  %memberidx2.i.i.i241 = getelementptr inbounds %Array_FloError_, ptr %191, i64 0, i32 1
  %196 = load ptr, ptr %memberidx2.i.i.i241, align 8
  %197 = shl i64 %194, 4
  %198 = call ptr @realloc(ptr %196, i64 %197)
  store ptr %198, ptr %memberidx2.i.i.i241, align 8
  br label %TypeChecker_error.exit245

TypeChecker_error.exit245:                        ; preds = %if.entry71, %if.entry.i.i242
  %199 = load i64, ptr %memberidx.i.i237, align 4
  %200 = add nsw i64 %199, 1
  store i64 %200, ptr %memberidx.i.i237, align 4
  %memberidx4.i.i243 = getelementptr inbounds %Array_FloError_, ptr %191, i64 0, i32 1
  %201 = load ptr, ptr %memberidx4.i.i243, align 8
  %ptridx.i.i244 = getelementptr inbounds ptr, ptr %201, i64 %199
  store ptr %192, ptr %ptridx.i.i244, align 8
  br label %common.ret

ifend73:                                          ; preds = %ifend62
  br i1 %7, label %if.entry79, label %common.ret

if.entry79:                                       ; preds = %ifend73
  %202 = tail call ptr @malloc(i32 8)
  store i64 6, ptr %202, align 4
  store ptr %202, ptr %memberidx53, align 8
  br label %common.ret
}

; Function Attrs: nofree nosync nounwind readonly
define internal fastcc ptr @get_class_from_type(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr #12 {
  %3 = load i64, ptr %1, align 4
  switch i64 %3, label %common.ret [
    i64 19, label %if.entry
    i64 11, label %if.entry3
  ]

common.ret:                                       ; preds = %2, %if.entry3, %if.entry
  %common.ret.op = phi ptr [ %5, %if.entry ], [ %14, %if.entry3 ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx1 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call fastcc ptr @get_class_from_type(ptr %0, ptr %4)
  br label %common.ret

if.entry3:                                        ; preds = %2
  %memberidx6 = getelementptr inbounds %ObjectType, ptr %1, i64 0, i32 1
  %6 = load ptr, ptr %memberidx6, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %TypeId, ptr %6, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Class_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  br label %common.ret
}

define internal fastcc noalias ptr @dump_type(ptr nocapture readonly %0, i1 %1) unnamed_addr {
  %3 = load i64, ptr %0, align 4
  switch i64 %3, label %ifend44 [
    i64 0, label %if.entry
    i64 1, label %if.entry2
    i64 2, label %if.entry6
    i64 3, label %if.entry10
    i64 4, label %if.entry14
    i64 5, label %if.entry18
    i64 7, label %if.entry22
    i64 6, label %if.entry26
    i64 8, label %if.entry30
    i64 9, label %if.entry34
    i64 10, label %if.entry38
    i64 16, label %if.entry42
  ]

common.ret:                                       ; preds = %true_block, %false_block, %ifend44, %if.entry42, %if.entry38, %if.entry34, %if.entry30, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %.sink97 = phi ptr [ %21, %true_block ], [ %23, %false_block ], [ %33, %ifend44 ], [ %31, %if.entry42 ], [ %29, %if.entry38 ], [ %27, %if.entry34 ], [ %25, %if.entry30 ], [ %17, %if.entry22 ], [ %15, %if.entry18 ], [ %13, %if.entry14 ], [ %11, %if.entry10 ], [ %9, %if.entry6 ], [ %7, %if.entry2 ], [ %5, %if.entry ]
  %.sink95 = phi ptr [ %20, %true_block ], [ %22, %false_block ], [ %32, %ifend44 ], [ %30, %if.entry42 ], [ %28, %if.entry38 ], [ %26, %if.entry34 ], [ %24, %if.entry30 ], [ %16, %if.entry22 ], [ %14, %if.entry18 ], [ %12, %if.entry14 ], [ %10, %if.entry10 ], [ %8, %if.entry6 ], [ %6, %if.entry2 ], [ %4, %if.entry ]
  %.sink93 = phi i64 [ %19, %true_block ], [ 3, %false_block ], [ 7, %ifend44 ], [ 6, %if.entry42 ], [ 4, %if.entry38 ], [ 3, %if.entry34 ], [ 3, %if.entry30 ], [ 4, %if.entry22 ], [ 3, %if.entry18 ], [ 3, %if.entry14 ], [ 3, %if.entry10 ], [ 2, %if.entry6 ], [ 2, %if.entry2 ], [ 4, %if.entry ]
  store ptr @VTablestring, ptr %.sink97, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %.sink97, i64 0, i32 1
  store ptr %.sink95, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %.sink97, i64 0, i32 2
  store i64 %.sink93, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %.sink97, i64 0, i32 3
  store i64 %.sink93, ptr %memberidx2.i, align 4
  ret ptr %.sink97

if.entry:                                         ; preds = %2
  %4 = call ptr @malloc(i32 4)
  store i32 1819242338, ptr %4, align 8
  %5 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry2:                                        ; preds = %2
  %6 = call ptr @malloc(i32 2)
  store i16 13417, ptr %6, align 8
  %7 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry6:                                        ; preds = %2
  %8 = call ptr @malloc(i32 2)
  store i16 14441, ptr %8, align 8
  %9 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry10:                                       ; preds = %2
  %10 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %10, ptr noundef nonnull align 8 dereferenceable(3) @34, i64 3, i1 false)
  %11 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry14:                                       ; preds = %2
  %12 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %12, ptr noundef nonnull align 8 dereferenceable(3) @35, i64 3, i1 false)
  %13 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry18:                                       ; preds = %2
  %14 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %14, ptr noundef nonnull align 8 dereferenceable(3) @36, i64 3, i1 false)
  %15 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry22:                                       ; preds = %2
  %16 = call ptr @malloc(i32 4)
  store i32 942813545, ptr %16, align 8
  %17 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry26:                                       ; preds = %2
  br i1 %1, label %true_block, label %false_block

true_block:                                       ; preds = %if.entry26
  %18 = alloca ptr, align 8
  %19 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %18, ptr nonnull @80, i64 64)
  %20 = load ptr, ptr %18, align 8
  %21 = tail call ptr @malloc(i32 32)
  br label %common.ret

false_block:                                      ; preds = %if.entry26
  %22 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %22, ptr noundef nonnull align 8 dereferenceable(3) @37, i64 3, i1 false)
  %23 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry30:                                       ; preds = %2
  %24 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %24, ptr noundef nonnull align 8 dereferenceable(3) @38, i64 3, i1 false)
  %25 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry34:                                       ; preds = %2
  %26 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %26, ptr noundef nonnull align 8 dereferenceable(3) @39, i64 3, i1 false)
  %27 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry38:                                       ; preds = %2
  %28 = call ptr @malloc(i32 4)
  store i32 1684631414, ptr %28, align 8
  %29 = call ptr @malloc(i32 32)
  br label %common.ret

if.entry42:                                       ; preds = %2
  %30 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %30, ptr noundef nonnull align 8 dereferenceable(6) @81, i64 6, i1 false)
  %31 = call ptr @malloc(i32 32)
  br label %common.ret

ifend44:                                          ; preds = %2
  %32 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %32, ptr noundef nonnull align 8 dereferenceable(7) @82, i64 7, i1 false)
  %33 = call ptr @malloc(i32 32)
  br label %common.ret
}

; Function Attrs: nofree nosync nounwind readonly
define internal fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %1) unnamed_addr #12 {
  %memberidx = getelementptr inbounds %Expression, ptr %1, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  switch i64 %3, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry3
    i64 8, label %if.entry8
    i64 9, label %if.entry72
    i64 7, label %if.entry86
  ]

common.ret:                                       ; preds = %2, %ifend10, %ifend74, %if.entry86, %if.entry81, %if.entry76, %if.entry66, %if.entry60, %if.entry54, %if.entry48, %if.entry42, %if.entry36, %if.entry30, %if.entry24, %if.entry18, %if.entry12, %if.entry3, %if.entry
  %common.ret.op = phi i64 [ %4, %if.entry ], [ %6, %if.entry3 ], [ %12, %if.entry12 ], [ %17, %if.entry18 ], [ %22, %if.entry24 ], [ %27, %if.entry30 ], [ %32, %if.entry36 ], [ %37, %if.entry42 ], [ %42, %if.entry48 ], [ %47, %if.entry54 ], [ %52, %if.entry60 ], [ %57, %if.entry66 ], [ %62, %if.entry76 ], [ %65, %if.entry81 ], [ %76, %if.entry86 ], [ -99999999, %ifend74 ], [ -99999999, %ifend10 ], [ -99999999, %2 ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %1, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  br label %common.ret

if.entry3:                                        ; preds = %2
  %memberidx6 = getelementptr inbounds %FloatExpression, ptr %1, i64 0, i32 4
  %5 = load double, ptr %memberidx6, align 8
  %6 = fptosi double %5 to i64
  br label %common.ret

if.entry8:                                        ; preds = %2
  %memberidx11 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 5
  %7 = load i64, ptr %memberidx11, align 4
  switch i64 %7, label %ifend10 [
    i64 1, label %if.entry12
    i64 2, label %if.entry18
    i64 3, label %if.entry24
    i64 4, label %if.entry30
    i64 5, label %if.entry36
    i64 13, label %if.entry42
    i64 14, label %if.entry48
    i64 15, label %if.entry54
    i64 16, label %if.entry60
    i64 17, label %if.entry66
  ]

ifend10:                                          ; preds = %if.entry8
  switch i64 %3, label %common.ret [
    i64 9, label %if.entry72
    i64 7, label %if.entry86
  ]

if.entry12:                                       ; preds = %if.entry8
  %memberidx15 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %8 = load ptr, ptr %memberidx15, align 8
  %9 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %8)
  %memberidx16 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %10 = load ptr, ptr %memberidx16, align 8
  %11 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %10)
  %12 = add nsw i64 %11, %9
  br label %common.ret

if.entry18:                                       ; preds = %if.entry8
  %memberidx21 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %13 = load ptr, ptr %memberidx21, align 8
  %14 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %13)
  %memberidx22 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %15 = load ptr, ptr %memberidx22, align 8
  %16 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %15)
  %17 = sub i64 %14, %16
  br label %common.ret

if.entry24:                                       ; preds = %if.entry8
  %memberidx27 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %18 = load ptr, ptr %memberidx27, align 8
  %19 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %18)
  %memberidx28 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %20 = load ptr, ptr %memberidx28, align 8
  %21 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %20)
  %22 = mul i64 %21, %19
  br label %common.ret

if.entry30:                                       ; preds = %if.entry8
  %memberidx33 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %23 = load ptr, ptr %memberidx33, align 8
  %24 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %23)
  %memberidx34 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %25 = load ptr, ptr %memberidx34, align 8
  %26 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %25)
  %27 = sdiv i64 %24, %26
  br label %common.ret

if.entry36:                                       ; preds = %if.entry8
  %memberidx39 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %28 = load ptr, ptr %memberidx39, align 8
  %29 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %28)
  %memberidx40 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %30 = load ptr, ptr %memberidx40, align 8
  %31 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %30)
  %32 = srem i64 %29, %31
  br label %common.ret

if.entry42:                                       ; preds = %if.entry8
  %memberidx45 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %33 = load ptr, ptr %memberidx45, align 8
  %34 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %33)
  %memberidx46 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %35 = load ptr, ptr %memberidx46, align 8
  %36 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %35)
  %37 = shl i64 %34, %36
  br label %common.ret

if.entry48:                                       ; preds = %if.entry8
  %memberidx51 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %38 = load ptr, ptr %memberidx51, align 8
  %39 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %38)
  %memberidx52 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %40 = load ptr, ptr %memberidx52, align 8
  %41 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %40)
  %42 = lshr i64 %39, %41
  br label %common.ret

if.entry54:                                       ; preds = %if.entry8
  %memberidx57 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %43 = load ptr, ptr %memberidx57, align 8
  %44 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %43)
  %memberidx58 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %45 = load ptr, ptr %memberidx58, align 8
  %46 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %45)
  %47 = or i64 %46, %44
  br label %common.ret

if.entry60:                                       ; preds = %if.entry8
  %memberidx63 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %48 = load ptr, ptr %memberidx63, align 8
  %49 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %48)
  %memberidx64 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %50 = load ptr, ptr %memberidx64, align 8
  %51 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %50)
  %52 = and i64 %51, %49
  br label %common.ret

if.entry66:                                       ; preds = %if.entry8
  %memberidx69 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 4
  %53 = load ptr, ptr %memberidx69, align 8
  %54 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %53)
  %memberidx70 = getelementptr inbounds %BinaryExpression, ptr %1, i64 0, i32 6
  %55 = load ptr, ptr %memberidx70, align 8
  %56 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %55)
  %57 = xor i64 %56, %54
  br label %common.ret

if.entry72:                                       ; preds = %2, %ifend10
  %memberidx75 = getelementptr inbounds %UnaryExpression, ptr %1, i64 0, i32 4
  %58 = load i64, ptr %memberidx75, align 4
  switch i64 %58, label %ifend74 [
    i64 6, label %if.entry76
    i64 7, label %if.entry81
  ]

ifend74:                                          ; preds = %if.entry72
  %59 = icmp eq i64 %3, 7
  br i1 %59, label %if.entry86, label %common.ret

if.entry76:                                       ; preds = %if.entry72
  %memberidx79 = getelementptr inbounds %UnaryExpression, ptr %1, i64 0, i32 5
  %60 = load ptr, ptr %memberidx79, align 8
  %61 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %60)
  %62 = sub i64 0, %61
  br label %common.ret

if.entry81:                                       ; preds = %if.entry72
  %memberidx84 = getelementptr inbounds %UnaryExpression, ptr %1, i64 0, i32 5
  %63 = load ptr, ptr %memberidx84, align 8
  %64 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %63)
  %65 = xor i64 %64, -1
  br label %common.ret

if.entry86:                                       ; preds = %2, %ifend10, %ifend74
  %memberidx89 = getelementptr inbounds %VarAccessExpression, ptr %1, i64 0, i32 4
  %66 = load ptr, ptr %memberidx89, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %0, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %66, i64 0, i32 1
  %68 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %70, i64 0, i32 3
  %71 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %66, i64 0, i32 2
  %72 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Const_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx90 = getelementptr inbounds %Const, ptr %74, i64 0, i32 2
  %75 = load ptr, ptr %memberidx90, align 8
  %76 = call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %75)
  br label %common.ret
}

define internal fastcc i1 @is_operator_overload_name(ptr readonly %0) unnamed_addr {
  %2 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %2, ptr noundef nonnull align 8 dereferenceable(6) @98, i64 6, i1 false)
  %3 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %3, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 1
  store ptr %2, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %4, 6
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %1
  %memberidx2.i = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx2.i, align 8
  %6 = call i64 @memcmp(ptr %5, ptr %2, i64 %4)
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend.i449, %ifend87, %ifend.i438, %ifend.i427, %ifend.i416, %ifend.i405, %ifend.i394, %ifend.i383, %ifend.i372, %ifend.i361, %ifend.i350, %ifend.i339, %ifend.i328, %ifend.i317, %ifend.i306, %ifend.i295, %ifend.i284, %ifend.i273, %ifend.i262, %ifend.i251, %ifend.i240, %ifend.i229, %ifend.i218, %ifend.i207, %ifend.i196, %ifend.i185, %ifend.i174, %ifend.i163, %ifend.i152, %ifend.i141, %ifend.i130, %ifend.i
  %common.ret.op = phi i1 [ true, %ifend.i ], [ true, %ifend.i130 ], [ true, %ifend.i141 ], [ true, %ifend.i152 ], [ true, %ifend.i163 ], [ true, %ifend.i174 ], [ true, %ifend.i185 ], [ true, %ifend.i196 ], [ true, %ifend.i207 ], [ true, %ifend.i218 ], [ true, %ifend.i229 ], [ true, %ifend.i240 ], [ true, %ifend.i251 ], [ true, %ifend.i262 ], [ true, %ifend.i273 ], [ true, %ifend.i284 ], [ true, %ifend.i295 ], [ true, %ifend.i306 ], [ true, %ifend.i317 ], [ true, %ifend.i328 ], [ true, %ifend.i339 ], [ true, %ifend.i350 ], [ true, %ifend.i361 ], [ true, %ifend.i372 ], [ true, %ifend.i383 ], [ true, %ifend.i394 ], [ true, %ifend.i405 ], [ true, %ifend.i416 ], [ true, %ifend.i427 ], [ true, %ifend.i438 ], [ %187, %ifend.i449 ], [ false, %ifend87 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %1, %ifend.i
  %8 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %8, ptr noundef nonnull align 8 dereferenceable(7) @99, i64 7, i1 false)
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i121 = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i121, align 8
  %memberidx1.i.i122 = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i122, align 4
  %memberidx2.i.i123 = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i123, align 4
  %10 = load i64, ptr %memberidx.i, align 4
  %.not.i126 = icmp eq i64 %10, 7
  br i1 %.not.i126, label %ifend.i130, label %ifend3

ifend.i130:                                       ; preds = %ifend
  %memberidx2.i128 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %memberidx2.i128, align 8
  %12 = call i64 @memcmp(ptr %11, ptr %8, i64 %10)
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %common.ret, label %ifend3

ifend3:                                           ; preds = %ifend, %ifend.i130
  %14 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %14, ptr noundef nonnull align 8 dereferenceable(7) @100, i64 7, i1 false)
  %15 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i132 = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i132, align 8
  %memberidx1.i.i133 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i133, align 4
  %memberidx2.i.i134 = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i134, align 4
  %16 = load i64, ptr %memberidx.i, align 4
  %.not.i137 = icmp eq i64 %16, 7
  br i1 %.not.i137, label %ifend.i141, label %ifend6

ifend.i141:                                       ; preds = %ifend3
  %memberidx2.i139 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i139, align 8
  %18 = call i64 @memcmp(ptr %17, ptr %14, i64 %16)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %common.ret, label %ifend6

ifend6:                                           ; preds = %ifend3, %ifend.i141
  %20 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %20, ptr noundef nonnull align 8 dereferenceable(7) @101, i64 7, i1 false)
  %21 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %21, align 8
  %memberidx.i.i143 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  store ptr %20, ptr %memberidx.i.i143, align 8
  %memberidx1.i.i144 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i144, align 4
  %memberidx2.i.i145 = getelementptr inbounds %string, ptr %21, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i145, align 4
  %22 = load i64, ptr %memberidx.i, align 4
  %.not.i148 = icmp eq i64 %22, 7
  br i1 %.not.i148, label %ifend.i152, label %ifend9

ifend.i152:                                       ; preds = %ifend6
  %memberidx2.i150 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i150, align 8
  %24 = call i64 @memcmp(ptr %23, ptr %20, i64 %22)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend6, %ifend.i152
  %26 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %26, ptr noundef nonnull align 8 dereferenceable(7) @102, i64 7, i1 false)
  %27 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i154 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i154, align 8
  %memberidx1.i.i155 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i155, align 4
  %memberidx2.i.i156 = getelementptr inbounds %string, ptr %27, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i156, align 4
  %28 = load i64, ptr %memberidx.i, align 4
  %.not.i159 = icmp eq i64 %28, 7
  br i1 %.not.i159, label %ifend.i163, label %ifend12

ifend.i163:                                       ; preds = %ifend9
  %memberidx2.i161 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i161, align 8
  %30 = call i64 @memcmp(ptr %29, ptr %26, i64 %28)
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %common.ret, label %ifend12

ifend12:                                          ; preds = %ifend9, %ifend.i163
  %32 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %32, ptr noundef nonnull align 8 dereferenceable(6) @103, i64 6, i1 false)
  %33 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i.i165 = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i.i165, align 8
  %memberidx1.i.i166 = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i166, align 4
  %memberidx2.i.i167 = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i167, align 4
  %34 = load i64, ptr %memberidx.i, align 4
  %.not.i170 = icmp eq i64 %34, 6
  br i1 %.not.i170, label %ifend.i174, label %ifend15

ifend.i174:                                       ; preds = %ifend12
  %memberidx2.i172 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %35 = load ptr, ptr %memberidx2.i172, align 8
  %36 = call i64 @memcmp(ptr %35, ptr %32, i64 %34)
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %common.ret, label %ifend15

ifend15:                                          ; preds = %ifend12, %ifend.i174
  %38 = call ptr @malloc(i32 8)
  store i64 6872318640199393119, ptr %38, align 8
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i176 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i176, align 8
  %memberidx1.i.i177 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i177, align 4
  %memberidx2.i.i178 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i178, align 4
  %40 = load i64, ptr %memberidx.i, align 4
  %.not.i181 = icmp eq i64 %40, 8
  br i1 %.not.i181, label %ifend.i185, label %ifend18

ifend.i185:                                       ; preds = %ifend15
  %memberidx2.i183 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %41 = load ptr, ptr %memberidx2.i183, align 8
  %42 = call i64 @memcmp(ptr %41, ptr nonnull %38, i64 %40)
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %common.ret, label %ifend18

ifend18:                                          ; preds = %ifend15, %ifend.i185
  %44 = call ptr @malloc(i32 8)
  store i64 6872318631895850847, ptr %44, align 8
  %45 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i.i187 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i.i187, align 8
  %memberidx1.i.i188 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i188, align 4
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i189, align 4
  %46 = load i64, ptr %memberidx.i, align 4
  %.not.i192 = icmp eq i64 %46, 8
  br i1 %.not.i192, label %ifend.i196, label %ifend21

ifend.i196:                                       ; preds = %ifend18
  %memberidx2.i194 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %memberidx2.i194, align 8
  %48 = call i64 @memcmp(ptr %47, ptr nonnull %44, i64 %46)
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %common.ret, label %ifend21

ifend21:                                          ; preds = %ifend18, %ifend.i196
  %50 = call ptr @malloc(i32 8)
  store i64 6872318674845130591, ptr %50, align 8
  %51 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i.i198 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i.i198, align 8
  %memberidx1.i.i199 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i199, align 4
  %memberidx2.i.i200 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i200, align 4
  %52 = load i64, ptr %memberidx.i, align 4
  %.not.i203 = icmp eq i64 %52, 8
  br i1 %.not.i203, label %ifend.i207, label %ifend24

ifend.i207:                                       ; preds = %ifend21
  %memberidx2.i205 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %53 = load ptr, ptr %memberidx2.i205, align 8
  %54 = call i64 @memcmp(ptr %53, ptr nonnull %50, i64 %52)
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend21, %ifend.i207
  %56 = call ptr @malloc(i32 8)
  store i64 6872318717592887135, ptr %56, align 8
  %57 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i209 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i209, align 8
  %memberidx1.i.i210 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i210, align 4
  %memberidx2.i.i211 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i211, align 4
  %58 = load i64, ptr %memberidx.i, align 4
  %.not.i214 = icmp eq i64 %58, 8
  br i1 %.not.i214, label %ifend.i218, label %ifend27

ifend.i218:                                       ; preds = %ifend24
  %memberidx2.i216 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %59 = load ptr, ptr %memberidx2.i216, align 8
  %60 = call i64 @memcmp(ptr %59, ptr nonnull %56, i64 %58)
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend24, %ifend.i218
  %62 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %62, ptr noundef nonnull align 8 dereferenceable(7) @104, i64 7, i1 false)
  %63 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %63, align 8
  %memberidx.i.i220 = getelementptr inbounds %string, ptr %63, i64 0, i32 1
  store ptr %62, ptr %memberidx.i.i220, align 8
  %memberidx1.i.i221 = getelementptr inbounds %string, ptr %63, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i221, align 4
  %memberidx2.i.i222 = getelementptr inbounds %string, ptr %63, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i222, align 4
  %64 = load i64, ptr %memberidx.i, align 4
  %.not.i225 = icmp eq i64 %64, 7
  br i1 %.not.i225, label %ifend.i229, label %ifend30

ifend.i229:                                       ; preds = %ifend27
  %memberidx2.i227 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i227, align 8
  %66 = call i64 @memcmp(ptr %65, ptr %62, i64 %64)
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %common.ret, label %ifend30

ifend30:                                          ; preds = %ifend27, %ifend.i229
  %68 = call ptr @malloc(i32 8)
  store i64 6872318640367165279, ptr %68, align 8
  %69 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %69, align 8
  %memberidx.i.i231 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  store ptr %68, ptr %memberidx.i.i231, align 8
  %memberidx1.i.i232 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i232, align 4
  %memberidx2.i.i233 = getelementptr inbounds %string, ptr %69, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i233, align 4
  %70 = load i64, ptr %memberidx.i, align 4
  %.not.i236 = icmp eq i64 %70, 8
  br i1 %.not.i236, label %ifend.i240, label %ifend33

ifend.i240:                                       ; preds = %ifend30
  %memberidx2.i238 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %71 = load ptr, ptr %memberidx2.i238, align 8
  %72 = call i64 @memcmp(ptr %71, ptr nonnull %68, i64 %70)
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %common.ret, label %ifend33

ifend33:                                          ; preds = %ifend30, %ifend.i240
  %74 = call ptr @malloc(i32 8)
  store i64 6872318700514991967, ptr %74, align 8
  %75 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %75, align 8
  %memberidx.i.i242 = getelementptr inbounds %string, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i.i242, align 8
  %memberidx1.i.i243 = getelementptr inbounds %string, ptr %75, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i243, align 4
  %memberidx2.i.i244 = getelementptr inbounds %string, ptr %75, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i244, align 4
  %76 = load i64, ptr %memberidx.i, align 4
  %.not.i247 = icmp eq i64 %76, 8
  br i1 %.not.i247, label %ifend.i251, label %ifend36

ifend.i251:                                       ; preds = %ifend33
  %memberidx2.i249 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %77 = load ptr, ptr %memberidx2.i249, align 8
  %78 = call i64 @memcmp(ptr %77, ptr nonnull %74, i64 %76)
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %common.ret, label %ifend36

ifend36:                                          ; preds = %ifend33, %ifend.i251
  %80 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %80, ptr noundef nonnull align 8 dereferenceable(11) @105, i64 11, i1 false)
  %81 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %81, align 8
  %memberidx.i.i253 = getelementptr inbounds %string, ptr %81, i64 0, i32 1
  store ptr %80, ptr %memberidx.i.i253, align 8
  %memberidx1.i.i254 = getelementptr inbounds %string, ptr %81, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i254, align 4
  %memberidx2.i.i255 = getelementptr inbounds %string, ptr %81, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i255, align 4
  %82 = load i64, ptr %memberidx.i, align 4
  %.not.i258 = icmp eq i64 %82, 11
  br i1 %.not.i258, label %ifend.i262, label %ifend39

ifend.i262:                                       ; preds = %ifend36
  %memberidx2.i260 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i260, align 8
  %84 = call i64 @memcmp(ptr %83, ptr %80, i64 %82)
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %common.ret, label %ifend39

ifend39:                                          ; preds = %ifend36, %ifend.i262
  %86 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %86, ptr noundef nonnull align 8 dereferenceable(11) @106, i64 11, i1 false)
  %87 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %87, align 8
  %memberidx.i.i264 = getelementptr inbounds %string, ptr %87, i64 0, i32 1
  store ptr %86, ptr %memberidx.i.i264, align 8
  %memberidx1.i.i265 = getelementptr inbounds %string, ptr %87, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i265, align 4
  %memberidx2.i.i266 = getelementptr inbounds %string, ptr %87, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i266, align 4
  %88 = load i64, ptr %memberidx.i, align 4
  %.not.i269 = icmp eq i64 %88, 11
  br i1 %.not.i269, label %ifend.i273, label %ifend42

ifend.i273:                                       ; preds = %ifend39
  %memberidx2.i271 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %89 = load ptr, ptr %memberidx2.i271, align 8
  %90 = call i64 @memcmp(ptr %89, ptr %86, i64 %88)
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %common.ret, label %ifend42

ifend42:                                          ; preds = %ifend39, %ifend.i273
  %92 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %92, ptr noundef nonnull align 8 dereferenceable(6) @107, i64 6, i1 false)
  %93 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %93, align 8
  %memberidx.i.i275 = getelementptr inbounds %string, ptr %93, i64 0, i32 1
  store ptr %92, ptr %memberidx.i.i275, align 8
  %memberidx1.i.i276 = getelementptr inbounds %string, ptr %93, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i276, align 4
  %memberidx2.i.i277 = getelementptr inbounds %string, ptr %93, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i277, align 4
  %94 = load i64, ptr %memberidx.i, align 4
  %.not.i280 = icmp eq i64 %94, 6
  br i1 %.not.i280, label %ifend.i284, label %ifend45

ifend.i284:                                       ; preds = %ifend42
  %memberidx2.i282 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i282, align 8
  %96 = call i64 @memcmp(ptr %95, ptr %92, i64 %94)
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %common.ret, label %ifend45

ifend45:                                          ; preds = %ifend42, %ifend.i284
  %98 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %98, ptr noundef nonnull align 8 dereferenceable(6) @108, i64 6, i1 false)
  %99 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i.i286 = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i.i286, align 8
  %memberidx1.i.i287 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i287, align 4
  %memberidx2.i.i288 = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i288, align 4
  %100 = load i64, ptr %memberidx.i, align 4
  %.not.i291 = icmp eq i64 %100, 6
  br i1 %.not.i291, label %ifend.i295, label %ifend48

ifend.i295:                                       ; preds = %ifend45
  %memberidx2.i293 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %101 = load ptr, ptr %memberidx2.i293, align 8
  %102 = call i64 @memcmp(ptr %101, ptr %98, i64 %100)
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %common.ret, label %ifend48

ifend48:                                          ; preds = %ifend45, %ifend.i295
  %104 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %104, ptr noundef nonnull align 8 dereferenceable(7) @109, i64 7, i1 false)
  %105 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %105, align 8
  %memberidx.i.i297 = getelementptr inbounds %string, ptr %105, i64 0, i32 1
  store ptr %104, ptr %memberidx.i.i297, align 8
  %memberidx1.i.i298 = getelementptr inbounds %string, ptr %105, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i298, align 4
  %memberidx2.i.i299 = getelementptr inbounds %string, ptr %105, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i299, align 4
  %106 = load i64, ptr %memberidx.i, align 4
  %.not.i302 = icmp eq i64 %106, 7
  br i1 %.not.i302, label %ifend.i306, label %ifend51

ifend.i306:                                       ; preds = %ifend48
  %memberidx2.i304 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %107 = load ptr, ptr %memberidx2.i304, align 8
  %108 = call i64 @memcmp(ptr %107, ptr %104, i64 %106)
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %common.ret, label %ifend51

ifend51:                                          ; preds = %ifend48, %ifend.i306
  %110 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %110, ptr noundef nonnull align 8 dereferenceable(7) @110, i64 7, i1 false)
  %111 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %111, align 8
  %memberidx.i.i308 = getelementptr inbounds %string, ptr %111, i64 0, i32 1
  store ptr %110, ptr %memberidx.i.i308, align 8
  %memberidx1.i.i309 = getelementptr inbounds %string, ptr %111, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i309, align 4
  %memberidx2.i.i310 = getelementptr inbounds %string, ptr %111, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i310, align 4
  %112 = load i64, ptr %memberidx.i, align 4
  %.not.i313 = icmp eq i64 %112, 7
  br i1 %.not.i313, label %ifend.i317, label %ifend54

ifend.i317:                                       ; preds = %ifend51
  %memberidx2.i315 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %113 = load ptr, ptr %memberidx2.i315, align 8
  %114 = call i64 @memcmp(ptr %113, ptr %110, i64 %112)
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %common.ret, label %ifend54

ifend54:                                          ; preds = %ifend51, %ifend.i317
  %116 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %116, ptr noundef nonnull align 8 dereferenceable(6) @111, i64 6, i1 false)
  %117 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %117, align 8
  %memberidx.i.i319 = getelementptr inbounds %string, ptr %117, i64 0, i32 1
  store ptr %116, ptr %memberidx.i.i319, align 8
  %memberidx1.i.i320 = getelementptr inbounds %string, ptr %117, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i320, align 4
  %memberidx2.i.i321 = getelementptr inbounds %string, ptr %117, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i321, align 4
  %118 = load i64, ptr %memberidx.i, align 4
  %.not.i324 = icmp eq i64 %118, 6
  br i1 %.not.i324, label %ifend.i328, label %ifend57

ifend.i328:                                       ; preds = %ifend54
  %memberidx2.i326 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i326, align 8
  %120 = call i64 @memcmp(ptr %119, ptr %116, i64 %118)
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %common.ret, label %ifend57

ifend57:                                          ; preds = %ifend54, %ifend.i328
  %122 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %122, ptr noundef nonnull align 8 dereferenceable(6) @112, i64 6, i1 false)
  %123 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %123, align 8
  %memberidx.i.i330 = getelementptr inbounds %string, ptr %123, i64 0, i32 1
  store ptr %122, ptr %memberidx.i.i330, align 8
  %memberidx1.i.i331 = getelementptr inbounds %string, ptr %123, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i331, align 4
  %memberidx2.i.i332 = getelementptr inbounds %string, ptr %123, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i332, align 4
  %124 = load i64, ptr %memberidx.i, align 4
  %.not.i335 = icmp eq i64 %124, 6
  br i1 %.not.i335, label %ifend.i339, label %ifend60

ifend.i339:                                       ; preds = %ifend57
  %memberidx2.i337 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %125 = load ptr, ptr %memberidx2.i337, align 8
  %126 = call i64 @memcmp(ptr %125, ptr %122, i64 %124)
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %common.ret, label %ifend60

ifend60:                                          ; preds = %ifend57, %ifend.i339
  %128 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %128, ptr noundef nonnull align 8 dereferenceable(6) @113, i64 6, i1 false)
  %129 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %129, align 8
  %memberidx.i.i341 = getelementptr inbounds %string, ptr %129, i64 0, i32 1
  store ptr %128, ptr %memberidx.i.i341, align 8
  %memberidx1.i.i342 = getelementptr inbounds %string, ptr %129, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i342, align 4
  %memberidx2.i.i343 = getelementptr inbounds %string, ptr %129, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i343, align 4
  %130 = load i64, ptr %memberidx.i, align 4
  %.not.i346 = icmp eq i64 %130, 6
  br i1 %.not.i346, label %ifend.i350, label %ifend63

ifend.i350:                                       ; preds = %ifend60
  %memberidx2.i348 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %131 = load ptr, ptr %memberidx2.i348, align 8
  %132 = call i64 @memcmp(ptr %131, ptr %128, i64 %130)
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %common.ret, label %ifend63

ifend63:                                          ; preds = %ifend60, %ifend.i350
  %134 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %134, ptr noundef nonnull align 8 dereferenceable(6) @114, i64 6, i1 false)
  %135 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %135, align 8
  %memberidx.i.i352 = getelementptr inbounds %string, ptr %135, i64 0, i32 1
  store ptr %134, ptr %memberidx.i.i352, align 8
  %memberidx1.i.i353 = getelementptr inbounds %string, ptr %135, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i353, align 4
  %memberidx2.i.i354 = getelementptr inbounds %string, ptr %135, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i354, align 4
  %136 = load i64, ptr %memberidx.i, align 4
  %.not.i357 = icmp eq i64 %136, 6
  br i1 %.not.i357, label %ifend.i361, label %ifend66

ifend.i361:                                       ; preds = %ifend63
  %memberidx2.i359 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %137 = load ptr, ptr %memberidx2.i359, align 8
  %138 = call i64 @memcmp(ptr %137, ptr %134, i64 %136)
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %common.ret, label %ifend66

ifend66:                                          ; preds = %ifend63, %ifend.i361
  %140 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %140, ptr noundef nonnull align 8 dereferenceable(6) @115, i64 6, i1 false)
  %141 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %141, align 8
  %memberidx.i.i363 = getelementptr inbounds %string, ptr %141, i64 0, i32 1
  store ptr %140, ptr %memberidx.i.i363, align 8
  %memberidx1.i.i364 = getelementptr inbounds %string, ptr %141, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i364, align 4
  %memberidx2.i.i365 = getelementptr inbounds %string, ptr %141, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i365, align 4
  %142 = load i64, ptr %memberidx.i, align 4
  %.not.i368 = icmp eq i64 %142, 6
  br i1 %.not.i368, label %ifend.i372, label %ifend69

ifend.i372:                                       ; preds = %ifend66
  %memberidx2.i370 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %143 = load ptr, ptr %memberidx2.i370, align 8
  %144 = call i64 @memcmp(ptr %143, ptr %140, i64 %142)
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %common.ret, label %ifend69

ifend69:                                          ; preds = %ifend66, %ifend.i372
  %146 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %146, ptr noundef nonnull align 8 dereferenceable(6) @116, i64 6, i1 false)
  %147 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %147, align 8
  %memberidx.i.i374 = getelementptr inbounds %string, ptr %147, i64 0, i32 1
  store ptr %146, ptr %memberidx.i.i374, align 8
  %memberidx1.i.i375 = getelementptr inbounds %string, ptr %147, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i375, align 4
  %memberidx2.i.i376 = getelementptr inbounds %string, ptr %147, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i376, align 4
  %148 = load i64, ptr %memberidx.i, align 4
  %.not.i379 = icmp eq i64 %148, 6
  br i1 %.not.i379, label %ifend.i383, label %ifend72

ifend.i383:                                       ; preds = %ifend69
  %memberidx2.i381 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %149 = load ptr, ptr %memberidx2.i381, align 8
  %150 = call i64 @memcmp(ptr %149, ptr %146, i64 %148)
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %common.ret, label %ifend72

ifend72:                                          ; preds = %ifend69, %ifend.i383
  %152 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %152, ptr noundef nonnull align 8 dereferenceable(7) @117, i64 7, i1 false)
  %153 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %153, align 8
  %memberidx.i.i385 = getelementptr inbounds %string, ptr %153, i64 0, i32 1
  store ptr %152, ptr %memberidx.i.i385, align 8
  %memberidx1.i.i386 = getelementptr inbounds %string, ptr %153, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i386, align 4
  %memberidx2.i.i387 = getelementptr inbounds %string, ptr %153, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i387, align 4
  %154 = load i64, ptr %memberidx.i, align 4
  %.not.i390 = icmp eq i64 %154, 7
  br i1 %.not.i390, label %ifend.i394, label %ifend75

ifend.i394:                                       ; preds = %ifend72
  %memberidx2.i392 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %155 = load ptr, ptr %memberidx2.i392, align 8
  %156 = call i64 @memcmp(ptr %155, ptr %152, i64 %154)
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %common.ret, label %ifend75

ifend75:                                          ; preds = %ifend72, %ifend.i394
  %158 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %158, ptr noundef nonnull align 8 dereferenceable(7) @118, i64 7, i1 false)
  %159 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %159, align 8
  %memberidx.i.i396 = getelementptr inbounds %string, ptr %159, i64 0, i32 1
  store ptr %158, ptr %memberidx.i.i396, align 8
  %memberidx1.i.i397 = getelementptr inbounds %string, ptr %159, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i397, align 4
  %memberidx2.i.i398 = getelementptr inbounds %string, ptr %159, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i398, align 4
  %160 = load i64, ptr %memberidx.i, align 4
  %.not.i401 = icmp eq i64 %160, 7
  br i1 %.not.i401, label %ifend.i405, label %ifend78

ifend.i405:                                       ; preds = %ifend75
  %memberidx2.i403 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %161 = load ptr, ptr %memberidx2.i403, align 8
  %162 = call i64 @memcmp(ptr %161, ptr %158, i64 %160)
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %common.ret, label %ifend78

ifend78:                                          ; preds = %ifend75, %ifend.i405
  %164 = call ptr @malloc(i32 8)
  store i64 6872318721989304159, ptr %164, align 8
  %165 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %165, align 8
  %memberidx.i.i407 = getelementptr inbounds %string, ptr %165, i64 0, i32 1
  store ptr %164, ptr %memberidx.i.i407, align 8
  %memberidx1.i.i408 = getelementptr inbounds %string, ptr %165, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i408, align 4
  %memberidx2.i.i409 = getelementptr inbounds %string, ptr %165, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i409, align 4
  %166 = load i64, ptr %memberidx.i, align 4
  %.not.i412 = icmp eq i64 %166, 8
  br i1 %.not.i412, label %ifend.i416, label %ifend81

ifend.i416:                                       ; preds = %ifend78
  %memberidx2.i414 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %167 = load ptr, ptr %memberidx2.i414, align 8
  %168 = call i64 @memcmp(ptr %167, ptr nonnull %164, i64 %166)
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %common.ret, label %ifend81

ifend81:                                          ; preds = %ifend78, %ifend.i416
  %170 = call ptr @malloc(i32 8)
  store i64 6872318640384728927, ptr %170, align 8
  %171 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %171, align 8
  %memberidx.i.i418 = getelementptr inbounds %string, ptr %171, i64 0, i32 1
  store ptr %170, ptr %memberidx.i.i418, align 8
  %memberidx1.i.i419 = getelementptr inbounds %string, ptr %171, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i419, align 4
  %memberidx2.i.i420 = getelementptr inbounds %string, ptr %171, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i420, align 4
  %172 = load i64, ptr %memberidx.i, align 4
  %.not.i423 = icmp eq i64 %172, 8
  br i1 %.not.i423, label %ifend.i427, label %ifend84

ifend.i427:                                       ; preds = %ifend81
  %memberidx2.i425 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %173 = load ptr, ptr %memberidx2.i425, align 8
  %174 = call i64 @memcmp(ptr %173, ptr nonnull %170, i64 %172)
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %common.ret, label %ifend84

ifend84:                                          ; preds = %ifend81, %ifend.i427
  %176 = call ptr @malloc(i32 8)
  store i64 6872337336460992351, ptr %176, align 8
  %177 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %177, align 8
  %memberidx.i.i429 = getelementptr inbounds %string, ptr %177, i64 0, i32 1
  store ptr %176, ptr %memberidx.i.i429, align 8
  %memberidx1.i.i430 = getelementptr inbounds %string, ptr %177, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i430, align 4
  %memberidx2.i.i431 = getelementptr inbounds %string, ptr %177, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i431, align 4
  %178 = load i64, ptr %memberidx.i, align 4
  %.not.i434 = icmp eq i64 %178, 8
  br i1 %.not.i434, label %ifend.i438, label %ifend87

ifend.i438:                                       ; preds = %ifend84
  %memberidx2.i436 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %179 = load ptr, ptr %memberidx2.i436, align 8
  %180 = call i64 @memcmp(ptr %179, ptr nonnull %176, i64 %178)
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %common.ret, label %ifend87

ifend87:                                          ; preds = %ifend84, %ifend.i438
  %182 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %182, ptr noundef nonnull align 8 dereferenceable(7) @119, i64 7, i1 false)
  %183 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %183, align 8
  %memberidx.i.i440 = getelementptr inbounds %string, ptr %183, i64 0, i32 1
  store ptr %182, ptr %memberidx.i.i440, align 8
  %memberidx1.i.i441 = getelementptr inbounds %string, ptr %183, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i441, align 4
  %memberidx2.i.i442 = getelementptr inbounds %string, ptr %183, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i442, align 4
  %184 = load i64, ptr %memberidx.i, align 4
  %.not.i445 = icmp eq i64 %184, 7
  br i1 %.not.i445, label %ifend.i449, label %common.ret

ifend.i449:                                       ; preds = %ifend87
  %memberidx2.i447 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %185 = load ptr, ptr %memberidx2.i447, align 8
  %186 = call i64 @memcmp(ptr %185, ptr %182, i64 %184)
  %187 = icmp eq i64 %186, 0
  br label %common.ret
}

; Function Attrs: argmemonly nofree nosync nounwind readonly
define internal fastcc i1 @is_object(ptr nocapture readonly %0) unnamed_addr #13 {
  %2 = load i64, ptr %0, align 4
  %3 = icmp eq i64 %2, 19
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi i1 [ %5, %if.entry ], [ %6, %ifend ]
  ret i1 %common.ret.op

if.entry:                                         ; preds = %1
  %memberidx1 = getelementptr inbounds %GenericType, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call fastcc i1 @is_object(ptr %4)
  br label %common.ret

ifend:                                            ; preds = %1
  %6 = icmp eq i64 %2, 11
  br label %common.ret
}

define internal fastcc noalias ptr @bin_op_to_op_overload_name(i64 %0) unnamed_addr {
  switch i64 %0, label %common.ret [
    i64 1, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 4, label %if.entry7
    i64 5, label %if.entry10
    i64 6, label %if.entry13
    i64 20, label %if.entry16
    i64 21, label %if.entry19
    i64 22, label %if.entry22
    i64 23, label %if.entry25
    i64 24, label %if.entry28
    i64 25, label %if.entry31
    i64 7, label %if.entry34
    i64 8, label %if.entry37
    i64 9, label %if.entry40
    i64 10, label %if.entry43
    i64 11, label %if.entry46
    i64 12, label %if.entry49
    i64 13, label %if.entry52
    i64 14, label %if.entry55
    i64 29, label %if.entry58
    i64 30, label %if.entry61
    i64 15, label %if.entry64
    i64 16, label %if.entry67
    i64 17, label %if.entry70
    i64 26, label %if.entry73
    i64 28, label %if.entry76
    i64 18, label %if.entry79
  ]

common.ret.sink.split:                            ; preds = %if.entry, %if.entry1, %if.entry4, %if.entry7, %if.entry10, %if.entry13, %if.entry16, %if.entry19, %if.entry22, %if.entry25, %if.entry28, %if.entry31, %if.entry34, %if.entry37, %if.entry40, %if.entry43, %if.entry46, %if.entry49, %if.entry52, %if.entry55, %if.entry58, %if.entry61, %if.entry64, %if.entry67, %if.entry70, %if.entry73, %if.entry76, %if.entry79
  %.sink193 = phi ptr [ %30, %if.entry79 ], [ %29, %if.entry76 ], [ %28, %if.entry73 ], [ %27, %if.entry70 ], [ %26, %if.entry67 ], [ %25, %if.entry64 ], [ %24, %if.entry61 ], [ %23, %if.entry58 ], [ %22, %if.entry55 ], [ %21, %if.entry52 ], [ %20, %if.entry49 ], [ %19, %if.entry46 ], [ %18, %if.entry43 ], [ %17, %if.entry40 ], [ %16, %if.entry37 ], [ %15, %if.entry34 ], [ %14, %if.entry31 ], [ %13, %if.entry28 ], [ %12, %if.entry25 ], [ %11, %if.entry22 ], [ %10, %if.entry19 ], [ %9, %if.entry16 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink191 = phi i64 [ 6, %if.entry79 ], [ 8, %if.entry76 ], [ 8, %if.entry73 ], [ 7, %if.entry70 ], [ 7, %if.entry67 ], [ 6, %if.entry64 ], [ 7, %if.entry61 ], [ 7, %if.entry58 ], [ 6, %if.entry55 ], [ 6, %if.entry52 ], [ 6, %if.entry49 ], [ 6, %if.entry46 ], [ 6, %if.entry43 ], [ 6, %if.entry40 ], [ 6, %if.entry37 ], [ 6, %if.entry34 ], [ 8, %if.entry31 ], [ 8, %if.entry28 ], [ 8, %if.entry25 ], [ 8, %if.entry22 ], [ 8, %if.entry19 ], [ 8, %if.entry16 ], [ 7, %if.entry13 ], [ 7, %if.entry10 ], [ 7, %if.entry7 ], [ 7, %if.entry4 ], [ 7, %if.entry1 ], [ 7, %if.entry ]
  %2 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i187 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink193, ptr %memberidx.i.i187, align 8
  %memberidx1.i.i188 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink191, ptr %memberidx1.i.i188, align 4
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink191, ptr %memberidx2.i.i189, align 4
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %1
  %common.ret.op = phi ptr [ null, %1 ], [ %2, %common.ret.sink.split ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %3 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @99, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry1:                                        ; preds = %1
  %4 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %4, ptr noundef nonnull align 8 dereferenceable(7) @100, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry4:                                        ; preds = %1
  %5 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %5, ptr noundef nonnull align 8 dereferenceable(7) @101, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry7:                                        ; preds = %1
  %6 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %6, ptr noundef nonnull align 8 dereferenceable(7) @102, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry10:                                       ; preds = %1
  %7 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %7, ptr noundef nonnull align 8 dereferenceable(7) @118, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry13:                                       ; preds = %1
  %8 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %8, ptr noundef nonnull align 8 dereferenceable(7) @117, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry16:                                       ; preds = %1
  %9 = call ptr @malloc(i32 8)
  store i64 6872318640199393119, ptr %9, align 8
  br label %common.ret.sink.split

if.entry19:                                       ; preds = %1
  %10 = call ptr @malloc(i32 8)
  store i64 6872318631895850847, ptr %10, align 8
  br label %common.ret.sink.split

if.entry22:                                       ; preds = %1
  %11 = call ptr @malloc(i32 8)
  store i64 6872318674845130591, ptr %11, align 8
  br label %common.ret.sink.split

if.entry25:                                       ; preds = %1
  %12 = call ptr @malloc(i32 8)
  store i64 6872318717592887135, ptr %12, align 8
  br label %common.ret.sink.split

if.entry28:                                       ; preds = %1
  %13 = call ptr @malloc(i32 8)
  store i64 6872318640384728927, ptr %13, align 8
  br label %common.ret.sink.split

if.entry31:                                       ; preds = %1
  %14 = call ptr @malloc(i32 8)
  store i64 6872318721989304159, ptr %14, align 8
  br label %common.ret.sink.split

if.entry34:                                       ; preds = %1
  %15 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %15, ptr noundef nonnull align 8 dereferenceable(6) @151, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry37:                                       ; preds = %1
  %16 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %16, ptr noundef nonnull align 8 dereferenceable(6) @116, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry40:                                       ; preds = %1
  %17 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %17, ptr noundef nonnull align 8 dereferenceable(6) @112, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry43:                                       ; preds = %1
  %18 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %18, ptr noundef nonnull align 8 dereferenceable(6) @115, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry46:                                       ; preds = %1
  %19 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %19, ptr noundef nonnull align 8 dereferenceable(6) @98, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry49:                                       ; preds = %1
  %20 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %20, ptr noundef nonnull align 8 dereferenceable(6) @114, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry52:                                       ; preds = %1
  %21 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %21, ptr noundef nonnull align 8 dereferenceable(6) @107, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry55:                                       ; preds = %1
  %22 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %22, ptr noundef nonnull align 8 dereferenceable(6) @108, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry58:                                       ; preds = %1
  %23 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %23, ptr noundef nonnull align 8 dereferenceable(7) @109, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry61:                                       ; preds = %1
  %24 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %24, ptr noundef nonnull align 8 dereferenceable(7) @110, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry64:                                       ; preds = %1
  %25 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %25, ptr noundef nonnull align 8 dereferenceable(6) @103, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry67:                                       ; preds = %1
  %26 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %26, ptr noundef nonnull align 8 dereferenceable(7) @152, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry70:                                       ; preds = %1
  %27 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %27, ptr noundef nonnull align 8 dereferenceable(7) @153, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry73:                                       ; preds = %1
  %28 = call ptr @malloc(i32 8)
  store i64 6872318640367165279, ptr %28, align 8
  br label %common.ret.sink.split

if.entry76:                                       ; preds = %1
  %29 = call ptr @malloc(i32 8)
  store i64 6872318700514991967, ptr %29, align 8
  br label %common.ret.sink.split

if.entry79:                                       ; preds = %1
  %30 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %30, ptr noundef nonnull align 8 dereferenceable(6) @111, i64 6, i1 false)
  br label %common.ret.sink.split
}

define internal fastcc noalias ptr @dump_bin_op(i64 %0) unnamed_addr {
  switch i64 %0, label %ifend54 [
    i64 1, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 4, label %if.entry7
    i64 5, label %if.entry10
    i64 6, label %if.entry13
    i64 7, label %if.entry16
    i64 8, label %if.entry19
    i64 9, label %if.entry22
    i64 10, label %if.entry25
    i64 11, label %if.entry28
    i64 12, label %if.entry31
    i64 13, label %if.entry34
    i64 14, label %if.entry37
    i64 15, label %if.entry40
    i64 16, label %if.entry43
    i64 17, label %if.entry46
    i64 18, label %if.entry49
    i64 19, label %if.entry52
  ]

common.ret:                                       ; preds = %ifend54, %if.entry52, %if.entry49, %if.entry46, %if.entry43, %if.entry40, %if.entry37, %if.entry34, %if.entry31, %if.entry28, %if.entry25, %if.entry22, %if.entry19, %if.entry16, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink133 = phi ptr [ %22, %ifend54 ], [ %21, %if.entry52 ], [ %20, %if.entry49 ], [ %19, %if.entry46 ], [ %18, %if.entry43 ], [ %17, %if.entry40 ], [ %16, %if.entry37 ], [ %15, %if.entry34 ], [ %14, %if.entry31 ], [ %13, %if.entry28 ], [ %12, %if.entry25 ], [ %11, %if.entry22 ], [ %10, %if.entry19 ], [ %9, %if.entry16 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink131 = phi i64 [ 2, %ifend54 ], [ 1, %if.entry52 ], [ 2, %if.entry49 ], [ 1, %if.entry46 ], [ 3, %if.entry43 ], [ 2, %if.entry40 ], [ 2, %if.entry37 ], [ 2, %if.entry34 ], [ 2, %if.entry31 ], [ 2, %if.entry28 ], [ 2, %if.entry25 ], [ 1, %if.entry22 ], [ 2, %if.entry19 ], [ 1, %if.entry16 ], [ 1, %if.entry13 ], [ 2, %if.entry10 ], [ 1, %if.entry7 ], [ 1, %if.entry4 ], [ 1, %if.entry1 ], [ 1, %if.entry ]
  %2 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i127 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink133, ptr %memberidx.i.i127, align 8
  %memberidx1.i.i128 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink131, ptr %memberidx1.i.i128, align 4
  %memberidx2.i.i129 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink131, ptr %memberidx2.i.i129, align 4
  ret ptr %2

if.entry:                                         ; preds = %1
  %3 = call ptr @malloc(i32 1)
  store i8 43, ptr %3, align 8
  br label %common.ret

if.entry1:                                        ; preds = %1
  %4 = call ptr @malloc(i32 1)
  store i8 45, ptr %4, align 8
  br label %common.ret

if.entry4:                                        ; preds = %1
  %5 = call ptr @malloc(i32 1)
  store i8 42, ptr %5, align 8
  br label %common.ret

if.entry7:                                        ; preds = %1
  %6 = call ptr @malloc(i32 1)
  store i8 47, ptr %6, align 8
  br label %common.ret

if.entry10:                                       ; preds = %1
  %7 = call ptr @malloc(i32 2)
  store i16 10794, ptr %7, align 8
  br label %common.ret

if.entry13:                                       ; preds = %1
  %8 = call ptr @malloc(i32 1)
  store i8 94, ptr %8, align 8
  br label %common.ret

if.entry16:                                       ; preds = %1
  %9 = call ptr @malloc(i32 1)
  store i8 62, ptr %9, align 8
  br label %common.ret

if.entry19:                                       ; preds = %1
  %10 = call ptr @malloc(i32 2)
  store i16 15678, ptr %10, align 8
  br label %common.ret

if.entry22:                                       ; preds = %1
  %11 = call ptr @malloc(i32 1)
  store i8 60, ptr %11, align 8
  br label %common.ret

if.entry25:                                       ; preds = %1
  %12 = call ptr @malloc(i32 2)
  store i16 15676, ptr %12, align 8
  br label %common.ret

if.entry28:                                       ; preds = %1
  %13 = call ptr @malloc(i32 2)
  store i16 15677, ptr %13, align 8
  br label %common.ret

if.entry31:                                       ; preds = %1
  %14 = call ptr @malloc(i32 2)
  store i16 15649, ptr %14, align 8
  br label %common.ret

if.entry34:                                       ; preds = %1
  %15 = call ptr @malloc(i32 2)
  store i16 15420, ptr %15, align 8
  br label %common.ret

if.entry37:                                       ; preds = %1
  %16 = call ptr @malloc(i32 2)
  store i16 15934, ptr %16, align 8
  br label %common.ret

if.entry40:                                       ; preds = %1
  %17 = call ptr @malloc(i32 2)
  store i16 29295, ptr %17, align 8
  br label %common.ret

if.entry43:                                       ; preds = %1
  %18 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %18, ptr noundef nonnull align 8 dereferenceable(3) @30, i64 3, i1 false)
  br label %common.ret

if.entry46:                                       ; preds = %1
  %19 = call ptr @malloc(i32 1)
  store i8 94, ptr %19, align 8
  br label %common.ret

if.entry49:                                       ; preds = %1
  %20 = call ptr @malloc(i32 2)
  store i16 28265, ptr %20, align 8
  br label %common.ret

if.entry52:                                       ; preds = %1
  %21 = call ptr @malloc(i32 1)
  store i8 61, ptr %21, align 8
  br label %common.ret

ifend54:                                          ; preds = %1
  %22 = call ptr @malloc(i32 2)
  store i16 11822, ptr %22, align 8
  br label %common.ret
}

define internal fastcc void @check_cast_lower_bits(ptr nocapture %0, ptr nocapture %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %3, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = load i64, ptr %4, align 4
  %8 = load i64, ptr %6, align 4
  %.not = icmp eq i64 %7, %8
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %2
  %9 = and i64 %7, -2
  %10 = icmp eq i64 %9, 8
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, 7
  %13 = and i1 %10, %12
  br i1 %13, label %if.entry5, label %else6

ifend:                                            ; preds = %if.entry10, %else11, %if.entry5, %2
  ret void

if.entry5:                                        ; preds = %if.entry
  %14 = call ptr @malloc(i32 33)
  store i64 8, ptr %14, align 4
  %memberidx.i.i.i43 = getelementptr inbounds %Expression, ptr %14, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i43, align 4
  %memberidx1.i.i.i44 = getelementptr inbounds %Expression, ptr %14, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i44, align 1
  %memberidx.i.i45 = getelementptr inbounds %TypeCastExpression, ptr %14, i64 0, i32 4
  store ptr %5, ptr %memberidx.i.i45, align 8
  %memberidx1.i.i46 = getelementptr inbounds %Expression, ptr %14, i64 0, i32 3
  store ptr %4, ptr %memberidx1.i.i46, align 8
  %memberidx3.i.i48 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 1
  %15 = load i1, ptr %memberidx3.i.i48, align 1
  store i1 %15, ptr %memberidx1.i.i.i44, align 1
  store ptr %14, ptr %1, align 8
  br label %ifend

else6:                                            ; preds = %if.entry
  %16 = add i64 %7, -1
  %17 = icmp ult i64 %16, 7
  %18 = and i64 %8, -2
  %19 = icmp eq i64 %18, 8
  %20 = and i1 %17, %19
  br i1 %20, label %if.entry10, label %else11

if.entry10:                                       ; preds = %else6
  %21 = call ptr @malloc(i32 33)
  store i64 8, ptr %21, align 4
  %memberidx.i.i.i49 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i49, align 4
  %memberidx1.i.i.i50 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i50, align 1
  %memberidx.i.i51 = getelementptr inbounds %TypeCastExpression, ptr %21, i64 0, i32 4
  store ptr %3, ptr %memberidx.i.i51, align 8
  %memberidx1.i.i52 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 3
  store ptr %6, ptr %memberidx1.i.i52, align 8
  %memberidx3.i.i54 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 1
  %22 = load i1, ptr %memberidx3.i.i54, align 1
  store i1 %22, ptr %memberidx1.i.i.i50, align 1
  store ptr %21, ptr %0, align 8
  br label %ifend

else11:                                           ; preds = %else6
  %23 = icmp sgt i64 %7, %8
  %ternary.i = select i1 %23, ptr %4, ptr %6
  %24 = call ptr @malloc(i32 33)
  store i64 8, ptr %24, align 4
  %memberidx.i.i.i37 = getelementptr inbounds %Expression, ptr %24, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i37, align 4
  %memberidx1.i.i.i38 = getelementptr inbounds %Expression, ptr %24, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i38, align 1
  %memberidx.i.i39 = getelementptr inbounds %TypeCastExpression, ptr %24, i64 0, i32 4
  store ptr %3, ptr %memberidx.i.i39, align 8
  %memberidx1.i.i40 = getelementptr inbounds %Expression, ptr %24, i64 0, i32 3
  store ptr %ternary.i, ptr %memberidx1.i.i40, align 8
  %memberidx3.i.i42 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 1
  %25 = load i1, ptr %memberidx3.i.i42, align 1
  store i1 %25, ptr %memberidx1.i.i.i38, align 1
  store ptr %24, ptr %0, align 8
  %26 = load ptr, ptr %1, align 8
  %27 = call ptr @malloc(i32 33)
  store i64 8, ptr %27, align 4
  %memberidx.i.i.i = getelementptr inbounds %Expression, ptr %27, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %27, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i.i, align 1
  %memberidx.i.i = getelementptr inbounds %TypeCastExpression, ptr %27, i64 0, i32 4
  store ptr %26, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %27, i64 0, i32 3
  store ptr %ternary.i, ptr %memberidx1.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %Expression, ptr %26, i64 0, i32 1
  %28 = load i1, ptr %memberidx3.i.i, align 1
  store i1 %28, ptr %memberidx1.i.i.i, align 1
  store ptr %27, ptr %1, align 8
  br label %ifend
}

define internal fastcc noalias ptr @dump_unary_op(i64 %0) unnamed_addr {
  switch i64 %0, label %ifend15 [
    i64 2, label %if.entry
    i64 3, label %if.entry1
    i64 4, label %if.entry4
    i64 5, label %if.entry7
    i64 6, label %if.entry10
    i64 7, label %if.entry13
  ]

common.ret:                                       ; preds = %ifend15, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink42 = phi ptr [ %9, %ifend15 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink40 = phi i64 [ 1, %ifend15 ], [ 1, %if.entry13 ], [ 1, %if.entry10 ], [ 8, %if.entry7 ], [ 8, %if.entry4 ], [ 7, %if.entry1 ], [ 7, %if.entry ]
  %2 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i36 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink42, ptr %memberidx.i.i36, align 8
  %memberidx1.i.i37 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink40, ptr %memberidx1.i.i37, align 4
  %memberidx2.i.i38 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink40, ptr %memberidx2.i.i38, align 4
  ret ptr %2

if.entry:                                         ; preds = %1
  %3 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @160, i64 7, i1 false)
  br label %common.ret

if.entry1:                                        ; preds = %1
  %4 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %4, ptr noundef nonnull align 8 dereferenceable(7) @161, i64 7, i1 false)
  br label %common.ret

if.entry4:                                        ; preds = %1
  %5 = call ptr @malloc(i32 8)
  store i64 3110625547759087656, ptr %5, align 8
  br label %common.ret

if.entry7:                                        ; preds = %1
  %6 = call ptr @malloc(i32 8)
  store i64 3255303685788364840, ptr %6, align 8
  br label %common.ret

if.entry10:                                       ; preds = %1
  %7 = call ptr @malloc(i32 1)
  store i8 45, ptr %7, align 8
  br label %common.ret

if.entry13:                                       ; preds = %1
  %8 = call ptr @malloc(i32 1)
  store i8 33, ptr %8, align 8
  br label %common.ret

ifend15:                                          ; preds = %1
  %9 = call ptr @malloc(i32 1)
  store i8 38, ptr %9, align 8
  br label %common.ret
}

define internal fastcc void @GeneratedModule_print_errors(ptr nocapture readonly %0) unnamed_addr {
  %2 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %3)
  %5 = trunc i64 %4 to i32
  %6 = call ptr @malloc(i32 %5)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %3, i64 %4, i1 false)
  %7 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i.i5 = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i.i5, align 8
  %memberidx1.i.i6 = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %4, ptr %memberidx1.i.i6, align 4
  %memberidx2.i.i7 = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %4, ptr %memberidx2.i.i7, align 4
  %8 = load ptr, ptr %memberidx, align 8
  call void @LLVMDisposeMessage(ptr %8)
  %9 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i64 0, i32 5
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = call ptr %10(ptr nonnull %7)
  %12 = alloca ptr, align 8
  %13 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %12, ptr nonnull @211, ptr %11)
  %14 = load ptr, ptr %12, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 %13, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 %13, ptr %memberidx2.i, align 4
  tail call void @free(ptr %11)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %16 = load ptr, ptr %15, align 8
  %memberidx.i4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i64 0, i32 5
  %17 = load ptr, ptr %memberidx.i4, align 8
  %18 = call ptr %17(ptr nonnull %15)
  %19 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @210, ptr %18)
  %20 = load ptr, ptr %2, align 8
  %21 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %21, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  store ptr %20, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  store i64 %19, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %21, i64 0, i32 3
  store i64 %19, ptr %memberidx2.i.i, align 4
  call void @free(ptr %18)
  %22 = load ptr, ptr %21, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i64 0, i32 3
  %23 = load ptr, ptr %memberidx.i.i.i, align 8
  %24 = call ptr %23(ptr nonnull %21)
  %25 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %24, i64 %25)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  ret void
}

define internal void @GeneratedModule_write_bc(ptr nocapture readonly %0, ptr %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr nonnull %1)
  %7 = call i64 @LLVMWriteBitcodeToFile(ptr %3, ptr %6)
  ret void
}

define internal i64 @GeneratedModule_exec(ptr %0) {
  call void @LLVMLinkInMCJIT()
  %engine = alloca ptr, align 8
  store ptr null, ptr %engine, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %3 = call i1 @LLVMCreateExecutionEngineForModule(ptr nonnull %engine, ptr %2, ptr nonnull %memberidx1)
  br i1 %3, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call fastcc void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMGetNamedFunction(ptr %4, ptr nonnull @212)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry4, label %ifend6

common.ret:                                       ; preds = %if.entry12, %ifend6, %if.entry4
  %common.ret.op = phi i64 [ 1, %if.entry4 ], [ %13, %ifend6 ], [ %13, %if.entry12 ]
  %.sink = load ptr, ptr %engine, align 8
  call void @LLVMDisposeExecutionEngine(ptr %.sink)
  ret i64 %common.ret.op

if.entry4:                                        ; preds = %ifend
  %7 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %7, ptr noundef nonnull align 8 dereferenceable(48) @213, i64 48, i1 false)
  %8 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 48, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 48, ptr %memberidx2.i.i, align 4
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %10 = call ptr %9(ptr nonnull %8)
  %11 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %10, i64 %11)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %12 = load ptr, ptr %engine, align 8
  %13 = call i64 @LLVMRunFunctionAsMain(ptr %12, ptr nonnull %5, i64 0, ptr null, ptr null)
  %14 = load ptr, ptr %engine, align 8
  %15 = load ptr, ptr %memberidx, align 8
  %16 = call i1 @LLVMRemoveModule(ptr %14, ptr %15, ptr nonnull %memberidx, ptr nonnull %memberidx1)
  br i1 %16, label %if.entry12, label %common.ret

if.entry12:                                       ; preds = %ifend6
  call fastcc void @GeneratedModule_print_errors(ptr %0)
  br label %common.ret
}

define internal void @GeneratedModule_set_target_machine(ptr %0, ptr %1) {
  %3 = call ptr @malloc(i32 0)
  %4 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %4, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  store ptr %3, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %5 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %5, 0
  br i1 %.not.i, label %ifend.i, label %false_block

ifend.i:                                          ; preds = %2
  %memberidx2.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2.i, align 8
  %7 = call i64 @memcmp(ptr %6, ptr %3, i64 %5)
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %true_block, label %false_block

true_block:                                       ; preds = %ifend.i
  %9 = call ptr @LLVMGetDefaultTargetTriple()
  br label %end

false_block:                                      ; preds = %2, %ifend.i
  %10 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 5
  %11 = load ptr, ptr %memberidx, align 8
  %12 = call ptr %11(ptr nonnull %1)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %9, %true_block ], [ %12, %false_block ]
  %target = alloca ptr, align 8
  store ptr null, ptr %target, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %13 = call i1 @LLVMGetTargetFromTriple(ptr %ternary, ptr nonnull %target, ptr nonnull %memberidx1)
  br i1 %13, label %if.entry, label %ifend

if.entry:                                         ; preds = %end
  call fastcc void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %end, %if.entry
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %target, align 8
  %15 = call ptr @LLVMGetHostCPUFeatures()
  %16 = call ptr @LLVMCreateTargetMachine(ptr %14, ptr %ternary, ptr nonnull @214, ptr %15, i64 3, i64 0, i64 0)
  store ptr %16, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %17 = load ptr, ptr %memberidx4, align 8
  %18 = call ptr @LLVMCreateTargetDataLayout(ptr %16)
  call void @LLVMSetDataLayout(ptr %17, ptr %18)
  %19 = load ptr, ptr %memberidx4, align 8
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = call ptr @LLVMGetTargetMachineTriple(ptr %20)
  call void @LLVMSetTarget(ptr %19, ptr %21)
  ret void
}

define internal void @GeneratedModule_write_ir(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr nonnull %1)
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %7 = call i1 @LLVMPrintModuleToFile(ptr %3, ptr %6, ptr nonnull %memberidx2)
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  call fastcc void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret void
}

define internal void @GeneratedModule_run_passes(ptr nocapture readonly %0, i64 %1) {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %while.end
  ret void

ifend:                                            ; preds = %2
  %4 = call ptr @LLVMCreatePassManager()
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @LLVMCreateFunctionPassManagerForModule(ptr %5)
  %7 = call ptr @LLVMPassManagerBuilderCreate()
  call void @LLVMAddInternalizePass(ptr %4, i64 1)
  call void @LLVMAddGlobalDCEPass(ptr %4)
  call void @LLVMAddGlobalOptimizerPass(ptr %4)
  call void @LLVMAddInstructionCombiningPass(ptr %4)
  call void @LLVMAddScalarReplAggregatesPass(ptr %4)
  call void @LLVMAddFunctionInliningPass(ptr %4)
  call void @LLVMPassManagerBuilderSetOptLevel(ptr %7, i64 %1)
  call void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr %7, i64 255)
  call void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr %7, ptr %6)
  %func = alloca ptr, align 8
  %8 = load ptr, ptr %memberidx, align 8
  %9 = call ptr @LLVMGetFirstFunction(ptr %8)
  store ptr %9, ptr %func, align 8
  %.not = icmp eq ptr %9, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %func.promoted = load ptr, ptr %func, align 8
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %while.entry
  %10 = phi ptr [ %func.promoted, %while.entry.preheader ], [ %12, %while.entry ]
  %11 = call i1 @LLVMRunFunctionPassManager(ptr %6, ptr %10)
  %12 = call ptr @LLVMGetNextFunction(ptr %10)
  %.not6 = icmp eq ptr %12, null
  br i1 %.not6, label %while.end.loopexit, label %while.entry

while.end.loopexit:                               ; preds = %while.entry
  store ptr %12, ptr %func, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %ifend
  call void @LLVMPassManagerBuilderPopulateModulePassManager(ptr %7, ptr %4)
  %13 = load ptr, ptr %memberidx, align 8
  %14 = call i1 @LLVMRunPassManager(ptr %4, ptr %13)
  call void @LLVMDisposePassManager(ptr %6)
  call void @LLVMPassManagerBuilderDispose(ptr %7)
  call void @LLVMDisposePassManager(ptr %4)
  br label %common.ret
}

define internal void @GeneratedModule_write_asm(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i64 0, i32 5
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = call ptr %6(ptr nonnull %1)
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %8 = call i1 @LLVMTargetMachineEmitToFile(ptr %3, ptr %4, ptr %7, i64 0, ptr nonnull %memberidx3)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  call fastcc void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret void
}

define internal void @GeneratedModule_write_obj(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i64 0, i32 5
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = call ptr %6(ptr nonnull %1)
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %8 = call i1 @LLVMTargetMachineEmitToFile(ptr %3, ptr %4, ptr %7, i64 1, ptr nonnull %memberidx3)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  call fastcc void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret void
}

declare i1 @LLVMVerifyModule(ptr, i64, ptr) local_unnamed_addr

declare void @LLVM_InitializeAllTargetInfos() local_unnamed_addr

declare void @LLVM_InitializeAllTargets() local_unnamed_addr

declare void @LLVM_InitializeAllTargetMCs() local_unnamed_addr

declare void @LLVM_InitializeAllAsmParsers() local_unnamed_addr

declare void @LLVM_InitializeAllAsmPrinters() local_unnamed_addr

declare void @LLVMDisposeMessage(ptr) local_unnamed_addr

declare void @exit(i64) local_unnamed_addr

declare ptr @LLVMCreatePassManager() local_unnamed_addr

declare ptr @LLVMCreateFunctionPassManagerForModule(ptr) local_unnamed_addr

declare ptr @LLVMPassManagerBuilderCreate() local_unnamed_addr

declare void @LLVMAddInternalizePass(ptr, i64) local_unnamed_addr

declare void @LLVMAddGlobalDCEPass(ptr) local_unnamed_addr

declare void @LLVMAddGlobalOptimizerPass(ptr) local_unnamed_addr

declare void @LLVMAddInstructionCombiningPass(ptr) local_unnamed_addr

declare void @LLVMAddScalarReplAggregatesPass(ptr) local_unnamed_addr

declare void @LLVMAddFunctionInliningPass(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderSetOptLevel(ptr, i64) local_unnamed_addr

declare void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr, i64) local_unnamed_addr

declare void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetFirstFunction(ptr) local_unnamed_addr

declare i1 @LLVMRunFunctionPassManager(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetNextFunction(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderPopulateModulePassManager(ptr, ptr) local_unnamed_addr

declare i1 @LLVMRunPassManager(ptr, ptr) local_unnamed_addr

declare void @LLVMDisposePassManager(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderDispose(ptr) local_unnamed_addr

declare void @LLVMLinkInMCJIT() local_unnamed_addr

declare i1 @LLVMCreateExecutionEngineForModule(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetNamedFunction(ptr, ptr) local_unnamed_addr

declare void @LLVMDisposeExecutionEngine(ptr) local_unnamed_addr

declare i64 @LLVMRunFunctionAsMain(ptr, ptr, i64, ptr, ptr) local_unnamed_addr

declare i1 @LLVMRemoveModule(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetDefaultTargetTriple() local_unnamed_addr

declare i1 @LLVMGetTargetFromTriple(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMCreateTargetMachine(ptr, ptr, ptr, ptr, i64, i64, i64) local_unnamed_addr

declare ptr @LLVMGetHostCPUFeatures() local_unnamed_addr

declare void @LLVMSetDataLayout(ptr, ptr) local_unnamed_addr

declare ptr @LLVMCreateTargetDataLayout(ptr) local_unnamed_addr

declare void @LLVMSetTarget(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetTargetMachineTriple(ptr) local_unnamed_addr

declare i1 @LLVMTargetMachineEmitToFile(ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare i1 @LLVMPrintModuleToFile(ptr, ptr, ptr) local_unnamed_addr

declare i64 @LLVMWriteBitcodeToFile(ptr, ptr) local_unnamed_addr

define internal fastcc ptr @CodeGen_store_expr_to_mem(ptr nocapture %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %memberidx = getelementptr inbounds %Expression, ptr %3, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp ne i64 %5, 6
  %memberidx1 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 1
  %7 = load i1, ptr %memberidx1, align 1
  %8 = or i1 %7, %6
  br i1 %8, label %else, label %if.entry

if.entry:                                         ; preds = %4
  %memberidx2 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 3
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load i64, ptr %9, align 4
  %.not = icmp eq i64 %10, 19
  br i1 %.not, label %ifend6, label %if.entry4

else:                                             ; preds = %4
  %11 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %3)
  br label %ifend

common.ret:                                       ; preds = %if.entry4, %ifend
  %common.ret.op = phi ptr [ %value.0, %ifend ], [ %18, %if.entry4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else, %ifend6
  %value.0 = phi ptr [ %19, %ifend6 ], [ %11, %else ]
  %12 = call ptr @LLVMBuildStore(ptr %1, ptr %value.0, ptr %2)
  br label %common.ret

if.entry4:                                        ; preds = %if.entry
  %13 = call ptr @LLVMIntType(i64 64)
  %14 = call ptr @LLVMConstInt(ptr %13, i64 0, i1 false)
  %args = alloca [2 x ptr], align 8
  store ptr %14, ptr %args, align 8
  %15 = getelementptr inbounds ptr, ptr %args, i64 1
  store ptr %14, ptr %15, align 8
  %16 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %9, i1 true)
  %17 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %16, ptr %2, ptr nonnull %args, i64 2, ptr nonnull @28)
  %18 = call fastcc ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %17, ptr %3)
  br label %common.ret

ifend6:                                           ; preds = %if.entry
  %19 = call fastcc ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr nonnull %9, ptr %3)
  br label %ifend
}

define internal fastcc ptr @CodeGen_codegen_array_exp(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 19
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.end, %if.entry
  %common.ret.op = phi ptr [ %8, %if.entry ], [ %41, %for.end ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %8 = call fastcc ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr nonnull %5, ptr %2)
  br label %common.ret

ifend:                                            ; preds = %3
  %memberidx3 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 1
  %9 = load i1, ptr %memberidx3, align 1
  br i1 %9, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend
  %10 = call ptr @malloc(i32 54)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %10, ptr noundef nonnull align 8 dereferenceable(54) @227, i64 54, i1 false)
  %11 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %12 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %13 = call ptr %12(ptr nonnull %11)
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @210, ptr %13)
  %15 = load ptr, ptr %4, align 8
  %16 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i.i25 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i.i25, align 8
  %memberidx1.i.i26 = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 %14, ptr %memberidx1.i.i26, align 4
  %memberidx2.i.i27 = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 %14, ptr %memberidx2.i.i27, align 4
  call void @free(ptr %13)
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i64 0, i32 3
  %18 = load ptr, ptr %memberidx.i.i.i, align 8
  %19 = call ptr %18(ptr nonnull %16)
  %20 = load i64, ptr %memberidx1.i.i26, align 4
  call void @write(i64 1, ptr %19, i64 %20)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend6

ifend6:                                           ; preds = %ifend, %if.entry4
  %21 = load ptr, ptr %memberidx, align 8
  %memberidx8 = getelementptr inbounds %ArrayType, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %22, i1 true)
  %memberidx9 = getelementptr inbounds %ArrayExpression, ptr %2, i64 0, i32 4
  %24 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 2
  %25 = load i64, ptr %memberidx10, align 4
  %26 = alloca ptr, i64 %25, align 8
  %idx = alloca i64, align 8
  store i64 0, ptr %idx, align 8
  %27 = call ptr @malloc(i32 25)
  %memberidx.i28 = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i28, align 8
  %29 = load i64, ptr %memberidx10, align 4
  store i1 false, ptr %27, align 1
  %memberidx1.i.i29 = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i29, align 4
  %memberidx2.i.i30 = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 3
  store ptr %28, ptr %memberidx2.i.i30, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 2
  store i64 %29, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i29, align 4
  %30 = icmp slt i64 %29, 1
  %idx.promoted = load i64, ptr %idx, align 8
  br i1 %30, label %for.end, label %for.body

for.body:                                         ; preds = %ifend6, %for.body
  %storemerge38.in = phi ptr [ %ptridx.i34, %for.body ], [ %28, %ifend6 ]
  %31 = phi i64 [ %32, %for.body ], [ %idx.promoted, %ifend6 ]
  %storemerge38 = load ptr, ptr %storemerge38.in, align 8
  %32 = add nsw i64 %31, 1
  %ptridx = getelementptr inbounds ptr, ptr %26, i64 %31
  %33 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %storemerge38)
  store ptr %33, ptr %ptridx, align 8
  %34 = load i64, ptr %memberidx1.i.i29, align 4
  %35 = add nsw i64 %34, 1
  store i64 %35, ptr %memberidx1.i.i29, align 4
  %36 = load ptr, ptr %memberidx2.i.i30, align 8
  %ptridx.i34 = getelementptr inbounds ptr, ptr %36, i64 %34
  %37 = load i64, ptr %memberidx3.i.i, align 4
  %38 = icmp sge i64 %34, %37
  br i1 %38, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %ifend6
  %.lcssa = phi i64 [ %idx.promoted, %ifend6 ], [ %32, %for.body ]
  %storemerge36.lcssa = phi i1 [ %30, %ifend6 ], [ %38, %for.body ]
  store i1 %storemerge36.lcssa, ptr %27, align 1
  store i64 %.lcssa, ptr %idx, align 8
  tail call void @free(ptr nonnull %27)
  %39 = load ptr, ptr %memberidx9, align 8
  %memberidx14 = getelementptr inbounds %Array_Expression_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx14, align 4
  %41 = call ptr @LLVMConstArray(ptr %23, ptr nonnull %26, i64 %40)
  br label %common.ret
}

define internal fastcc void @CodeGen_codegen_var_declaration(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 2
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Var_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx2 = getelementptr inbounds %Var, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %14, align 8
  %17 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %memberidx4 = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 1
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i64 0, i32 5
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = call ptr %20(ptr nonnull %18)
  %memberidx6 = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 3
  %22 = load i1, ptr %memberidx6, align 1
  br i1 %22, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %23 = load ptr, ptr %0, align 8
  %24 = call ptr @LLVMAddGlobal(ptr %23, ptr %17, ptr %21)
  %.not32 = icmp eq ptr %15, null
  br i1 %.not32, label %ifend, label %if.entry8

else:                                             ; preds = %3
  %25 = call ptr @LLVMBuildAlloca(ptr %1, ptr %17, ptr %21)
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry11

ifend:                                            ; preds = %if.entry11, %else, %if.entry8, %if.entry
  %ptr.0 = phi ptr [ %24, %if.entry8 ], [ %24, %if.entry ], [ %25, %if.entry11 ], [ %25, %else ]
  %memberidx.i33 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %26 = load ptr, ptr %memberidx.i33, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %27 = load i64, ptr %memberidx1.i, align 4
  %28 = load i64, ptr %5, align 4
  %29 = load i64, ptr %memberidx3.i, align 4
  %30 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @215, i64 %27, i64 %28, i64 %29)
  %31 = load ptr, ptr %4, align 8
  %32 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %32, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %32, i64 0, i32 1
  store ptr %31, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %32, i64 0, i32 2
  store i64 %30, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %32, i64 0, i32 3
  store i64 %30, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %26, ptr nonnull %32, ptr %ptr.0)
  ret void

if.entry8:                                        ; preds = %if.entry
  %33 = call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr nonnull %15)
  call void @LLVMSetInitializer(ptr %24, ptr %33)
  br label %ifend

if.entry11:                                       ; preds = %else
  %34 = call fastcc ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %25, ptr nonnull %15)
  br label %ifend
}

define internal fastcc void @CodeGen_codegen_const_declaration(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Const_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx2 = getelementptr inbounds %Const, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %memberidx4 = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 1
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i64 0, i32 5
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = call ptr %20(ptr nonnull %18)
  %memberidx6 = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 3
  %22 = load i1, ptr %memberidx6, align 1
  br i1 %22, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %23 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %15)
  %24 = load ptr, ptr %0, align 8
  %25 = call ptr @LLVMAddGlobal(ptr %24, ptr %17, ptr %21)
  call void @LLVMSetInitializer(ptr %25, ptr %23)
  call void @LLVMSetGlobalConstant(ptr %25, i1 true)
  br label %ifend

else:                                             ; preds = %3
  %26 = call ptr @LLVMBuildAlloca(ptr %1, ptr %17, ptr %21)
  %27 = call fastcc ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %26, ptr %15)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %ptr.0 = phi ptr [ %25, %if.entry ], [ %26, %else ]
  %memberidx.i25 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %28 = load ptr, ptr %memberidx.i25, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %29 = load i64, ptr %memberidx1.i, align 4
  %30 = load i64, ptr %5, align 4
  %31 = load i64, ptr %memberidx3.i, align 4
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @215, i64 %29, i64 %30, i64 %31)
  %33 = load ptr, ptr %4, align 8
  %34 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %34, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %34, i64 0, i32 1
  store ptr %33, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %34, i64 0, i32 2
  store i64 %32, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %34, i64 0, i32 3
  store i64 %32, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %28, ptr nonnull %34, ptr %ptr.0)
  ret void
}

define internal fastcc void @CodeGen_codegen_if_stmt(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @LLVMAppendBasicBlock(ptr %6, ptr nonnull @248)
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @LLVMAppendBasicBlock(ptr %8, ptr nonnull @33)
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr @LLVMAppendBasicBlock(ptr %10, ptr nonnull @249)
  %12 = call ptr @LLVMBuildCondBr(ptr %1, ptr %5, ptr %7, ptr %9)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %7)
  %memberidx4 = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 2
  %13 = load ptr, ptr %memberidx4, align 8
  %memberidx.i46 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %14 = load i1, ptr %memberidx.i46, align 1
  store i1 false, ptr %memberidx.i46, align 1
  %15 = load ptr, ptr %13, align 8
  %16 = call ptr @malloc(i32 25)
  %memberidx.i.i47 = getelementptr inbounds %Array_Statement_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i47, align 8
  %memberidx1.i.i48 = getelementptr inbounds %Array_Statement_, ptr %15, i64 0, i32 2
  %18 = load i64, ptr %memberidx1.i.i48, align 4
  store i1 false, ptr %16, align 1
  %memberidx1.i.i.i49 = getelementptr inbounds %ArrayIterator_Statement_, ptr %16, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i49, align 4
  %memberidx2.i.i.i50 = getelementptr inbounds %ArrayIterator_Statement_, ptr %16, i64 0, i32 3
  store ptr %17, ptr %memberidx2.i.i.i50, align 8
  %memberidx3.i.i.i51 = getelementptr inbounds %ArrayIterator_Statement_, ptr %16, i64 0, i32 2
  store i64 %18, ptr %memberidx3.i.i.i51, align 4
  store i64 1, ptr %memberidx1.i.i.i49, align 4
  %19 = icmp slt i64 %18, 1
  br i1 %19, label %CodeGen_codegen_block.exit63, label %for.body.i62

for.body.i62:                                     ; preds = %3, %for.body.i62
  %statement.0.i5668.in = phi ptr [ %ptridx.i14.i60, %for.body.i62 ], [ %17, %3 ]
  %statement.0.i5668 = load ptr, ptr %statement.0.i5668.in, align 8
  call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i5668)
  %20 = load i64, ptr %memberidx1.i.i.i49, align 4
  %21 = add nsw i64 %20, 1
  store i64 %21, ptr %memberidx1.i.i.i49, align 4
  %ptridx.i14.i60 = getelementptr inbounds ptr, ptr %17, i64 %20
  %22 = icmp sge i64 %20, %18
  br i1 %22, label %CodeGen_codegen_block.exit63, label %for.body.i62

CodeGen_codegen_block.exit63:                     ; preds = %for.body.i62, %3
  %storemerge.lcssa = phi i1 [ %19, %3 ], [ %22, %for.body.i62 ]
  store i1 %storemerge.lcssa, ptr %16, align 1
  call void @free(ptr nonnull %16)
  store i1 %14, ptr %memberidx.i46, align 1
  %23 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %Block, ptr %23, i64 0, i32 1
  %24 = load i1, ptr %memberidx.i, align 1
  %memberidx1.i = getelementptr inbounds %Block, ptr %23, i64 0, i32 2
  %25 = load i1, ptr %memberidx1.i, align 1
  %26 = or i1 %24, %25
  %memberidx2.i = getelementptr inbounds %Block, ptr %23, i64 0, i32 3
  %27 = load i1, ptr %memberidx2.i, align 1
  %28 = or i1 %26, %27
  br i1 %28, label %ifend, label %if.entry

if.entry:                                         ; preds = %CodeGen_codegen_block.exit63
  %29 = call ptr @LLVMBuildBr(ptr %1, ptr %11)
  br label %ifend

ifend:                                            ; preds = %CodeGen_codegen_block.exit63, %if.entry
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %9)
  %else_terminated = alloca i1, align 1
  store i1 false, ptr %else_terminated, align 1
  %memberidx6 = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 3
  %30 = load ptr, ptr %memberidx6, align 8
  %.not = icmp eq ptr %30, null
  br i1 %.not, label %ifend9, label %if.entry7

if.entry7:                                        ; preds = %ifend
  %31 = load i1, ptr %memberidx.i46, align 1
  store i1 false, ptr %memberidx.i46, align 1
  %32 = load ptr, ptr %30, align 8
  %33 = call ptr @malloc(i32 25)
  %memberidx.i.i = getelementptr inbounds %Array_Statement_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %32, i64 0, i32 2
  %35 = load i64, ptr %memberidx1.i.i, align 4
  store i1 false, ptr %33, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %33, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %33, i64 0, i32 3
  store ptr %34, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %33, i64 0, i32 2
  store i64 %35, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %36 = icmp slt i64 %35, 1
  br i1 %36, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %if.entry7, %for.body.i
  %statement.0.i66.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %34, %if.entry7 ]
  %statement.0.i66 = load ptr, ptr %statement.0.i66.in, align 8
  call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i66)
  %37 = load i64, ptr %memberidx1.i.i.i, align 4
  %38 = add nsw i64 %37, 1
  store i64 %38, ptr %memberidx1.i.i.i, align 4
  %39 = load ptr, ptr %memberidx2.i.i.i, align 8
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %39, i64 %37
  %40 = load i64, ptr %memberidx3.i.i.i, align 4
  %41 = icmp sge i64 %37, %40
  br i1 %41, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %if.entry7
  %storemerge64.lcssa = phi i1 [ %36, %if.entry7 ], [ %41, %for.body.i ]
  store i1 %storemerge64.lcssa, ptr %33, align 1
  call void @free(ptr nonnull %33)
  store i1 %31, ptr %memberidx.i46, align 1
  %42 = load ptr, ptr %memberidx6, align 8
  %memberidx.i42 = getelementptr inbounds %Block, ptr %42, i64 0, i32 1
  %43 = load i1, ptr %memberidx.i42, align 1
  %memberidx1.i43 = getelementptr inbounds %Block, ptr %42, i64 0, i32 2
  %44 = load i1, ptr %memberidx1.i43, align 1
  %45 = or i1 %43, %44
  %memberidx2.i44 = getelementptr inbounds %Block, ptr %42, i64 0, i32 3
  %46 = load i1, ptr %memberidx2.i44, align 1
  %47 = or i1 %45, %46
  store i1 %47, ptr %else_terminated, align 1
  br label %ifend9

ifend9:                                           ; preds = %ifend, %CodeGen_codegen_block.exit
  %48 = load i1, ptr %else_terminated, align 1
  br i1 %48, label %else13, label %if.entry12

if.entry12:                                       ; preds = %ifend9
  %49 = call ptr @LLVMBuildBr(ptr %1, ptr %11)
  br label %ifend14

else13:                                           ; preds = %ifend9
  br i1 %28, label %if.entry15, label %ifend14

ifend14:                                          ; preds = %if.entry15, %else13, %if.entry12
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %11)
  ret void

if.entry15:                                       ; preds = %else13
  call void @LLVMDeleteBasicBlock(ptr %11)
  br label %ifend14
}

define internal fastcc void @Map_string_LLVMValueRef__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_LLVMValueRef____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_LLVMValueRef__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

define internal fastcc ptr @CodeGen_store_array_elements(ptr nocapture %0, ptr %1, ptr %2, ptr nocapture readonly %3) unnamed_addr {
for.entry:
  %next_args = alloca [1 x ptr], align 8
  %4 = call ptr @LLVMIntType(i64 64)
  %5 = call ptr @LLVMConstInt(ptr %4, i64 1, i1 false)
  store ptr %5, ptr %next_args, align 8
  %6 = call ptr @LLVMTypeOf(ptr %2)
  %memberidx = getelementptr inbounds %ArrayExpression, ptr %3, i64 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @malloc(i32 25)
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 2
  %10 = load i64, ptr %memberidx1.i, align 4
  store i1 false, ptr %8, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %8, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %8, i64 0, i32 3
  store ptr %9, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %8, i64 0, i32 2
  store i64 %10, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i, align 4
  %11 = icmp slt i64 %10, 1
  br i1 %11, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %for.body
  %value.019.in = phi ptr [ %ptridx.i15, %for.body ], [ %9, %for.entry ]
  %addr.018 = phi ptr [ %14, %for.body ], [ %2, %for.entry ]
  %value.019 = load ptr, ptr %value.019.in, align 8
  %12 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %value.019)
  %13 = call ptr @LLVMBuildStore(ptr %1, ptr %12, ptr %addr.018)
  %14 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %6, ptr %addr.018, ptr nonnull %next_args, i64 1, ptr nonnull @28)
  %15 = load i64, ptr %memberidx1.i.i, align 4
  %16 = add nsw i64 %15, 1
  store i64 %16, ptr %memberidx1.i.i, align 4
  %ptridx.i15 = getelementptr inbounds ptr, ptr %9, i64 %15
  %17 = icmp sge i64 %15, %10
  br i1 %17, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.entry
  %storemerge.lcssa = phi i1 [ %11, %for.entry ], [ %17, %for.body ]
  %addr.0.lcssa = phi ptr [ %2, %for.entry ], [ %14, %for.body ]
  store i1 %storemerge.lcssa, ptr %8, align 1
  tail call void @free(ptr nonnull %8)
  ret ptr %addr.0.lcssa
}

define internal fastcc ptr @CodeGen_codegen_type(ptr nocapture %0, ptr %1, i1 %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %5 = load i64, ptr %1, align 4
  switch i64 %5, label %ifend55 [
    i64 10, label %if.entry
    i64 0, label %if.entry2
    i64 1, label %if.entry6
    i64 2, label %if.entry10
    i64 3, label %if.entry14
    i64 4, label %if.entry18
    i64 6, label %if.entry22
    i64 5, label %if.entry26
    i64 7, label %if.entry30
    i64 8, label %if.entry34
    i64 9, label %if.entry38
    i64 13, label %if.entry42
    i64 14, label %if.entry47
    i64 19, label %if.entry53
  ]

common.ret:                                       ; preds = %if.entry72, %for.end, %true_block75, %true_block, %if.entry86, %ifend84, %if.entry47, %if.entry42, %if.entry38, %if.entry34, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %7, %if.entry2 ], [ %8, %if.entry6 ], [ %9, %if.entry10 ], [ %10, %if.entry14 ], [ %11, %if.entry18 ], [ %12, %if.entry22 ], [ %13, %if.entry26 ], [ %14, %if.entry30 ], [ %15, %if.entry34 ], [ %16, %if.entry38 ], [ %19, %if.entry42 ], [ %23, %if.entry47 ], [ null, %ifend84 ], [ %88, %if.entry86 ], [ %46, %true_block ], [ %63, %true_block75 ], [ %45, %for.end ], [ %62, %if.entry72 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %6 = call ptr @LLVMVoidType()
  br label %common.ret

if.entry2:                                        ; preds = %3
  %7 = call ptr @LLVMInt1Type()
  br label %common.ret

if.entry6:                                        ; preds = %3
  %8 = call ptr @LLVMIntType(i64 4)
  br label %common.ret

if.entry10:                                       ; preds = %3
  %9 = call ptr @LLVMInt8Type()
  br label %common.ret

if.entry14:                                       ; preds = %3
  %10 = call ptr @LLVMInt16Type()
  br label %common.ret

if.entry18:                                       ; preds = %3
  %11 = call ptr @LLVMInt32Type()
  br label %common.ret

if.entry22:                                       ; preds = %3
  %12 = call ptr @LLVMIntType(i64 64)
  br label %common.ret

if.entry26:                                       ; preds = %3
  %13 = call ptr @LLVMInt64Type()
  br label %common.ret

if.entry30:                                       ; preds = %3
  %14 = call ptr @LLVMInt128Type()
  br label %common.ret

if.entry34:                                       ; preds = %3
  %15 = call ptr @LLVMFloatType()
  br label %common.ret

if.entry38:                                       ; preds = %3
  %16 = call ptr @LLVMDoubleType()
  br label %common.ret

if.entry42:                                       ; preds = %3
  %memberidx45 = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %17 = load ptr, ptr %memberidx45, align 8
  %18 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %17, i1 true)
  %19 = call ptr @LLVMPointerType(ptr %18, i64 0)
  br label %common.ret

if.entry47:                                       ; preds = %3
  %memberidx50 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  %20 = load ptr, ptr %memberidx50, align 8
  %21 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %20, i1 true)
  %memberidx51 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 2
  %22 = load i64, ptr %memberidx51, align 4
  %23 = call ptr @LLVMArrayType(ptr %21, i64 %22)
  br label %common.ret

if.entry53:                                       ; preds = %3
  %memberidx56 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 3
  %24 = load ptr, ptr %memberidx56, align 8
  br label %ifend55

ifend55:                                          ; preds = %3, %if.entry53
  %tt.0 = phi ptr [ %24, %if.entry53 ], [ %1, %3 ]
  %25 = load i64, ptr %tt.0, align 4
  switch i64 %25, label %ifend70 [
    i64 15, label %if.entry57
    i64 11, label %if.entry68
  ]

if.entry57:                                       ; preds = %ifend55
  %memberidx60 = getelementptr inbounds %FunctionType, ptr %tt.0, i64 0, i32 1
  %26 = load ptr, ptr %memberidx60, align 8
  %memberidx61 = getelementptr inbounds %Array_Type_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx61, align 4
  %28 = alloca ptr, i64 %27, align 8
  %idx = alloca i64, align 8
  store i64 0, ptr %idx, align 8
  %29 = call ptr @malloc(i32 25)
  %memberidx.i127 = getelementptr inbounds %Array_Type_, ptr %26, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i127, align 8
  %31 = load i64, ptr %memberidx61, align 4
  store i1 false, ptr %29, align 1
  %memberidx1.i.i128 = getelementptr inbounds %ArrayIterator_Type_, ptr %29, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i128, align 4
  %memberidx2.i.i129 = getelementptr inbounds %ArrayIterator_Type_, ptr %29, i64 0, i32 3
  store ptr %30, ptr %memberidx2.i.i129, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Type_, ptr %29, i64 0, i32 2
  store i64 %31, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i128, align 4
  %32 = icmp slt i64 %31, 1
  %idx.promoted = load i64, ptr %idx, align 8
  br i1 %32, label %for.end, label %for.body

for.body:                                         ; preds = %if.entry57, %for.body
  %storemerge151.in = phi ptr [ %ptridx.i, %for.body ], [ %30, %if.entry57 ]
  %33 = phi i64 [ %34, %for.body ], [ %idx.promoted, %if.entry57 ]
  %storemerge151 = load ptr, ptr %storemerge151.in, align 8
  %34 = add nsw i64 %33, 1
  %ptridx = getelementptr inbounds ptr, ptr %28, i64 %33
  %35 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %storemerge151, i1 true)
  store ptr %35, ptr %ptridx, align 8
  %36 = load i64, ptr %memberidx1.i.i128, align 4
  %37 = add nsw i64 %36, 1
  store i64 %37, ptr %memberidx1.i.i128, align 4
  %38 = load ptr, ptr %memberidx2.i.i129, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %38, i64 %36
  %39 = load i64, ptr %memberidx3.i.i, align 4
  %40 = icmp sge i64 %36, %39
  br i1 %40, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.entry57
  %.lcssa = phi i64 [ %idx.promoted, %if.entry57 ], [ %34, %for.body ]
  %storemerge149.lcssa = phi i1 [ %32, %if.entry57 ], [ %40, %for.body ]
  store i1 %storemerge149.lcssa, ptr %29, align 1
  store i64 %.lcssa, ptr %idx, align 8
  tail call void @free(ptr nonnull %29)
  %memberidx64 = getelementptr inbounds %FunctionType, ptr %tt.0, i64 0, i32 2
  %41 = load ptr, ptr %memberidx64, align 8
  %42 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %41, i1 true)
  %43 = load ptr, ptr %memberidx60, align 8
  %memberidx66 = getelementptr inbounds %Array_Type_, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx66, align 4
  %45 = call ptr @LLVMFunctionType(ptr %42, ptr nonnull %28, i64 %44, i1 false)
  br i1 %2, label %true_block, label %common.ret

true_block:                                       ; preds = %for.end
  %46 = call ptr @LLVMPointerType(ptr %45, i64 0)
  br label %common.ret

if.entry68:                                       ; preds = %ifend55
  %memberidx71 = getelementptr inbounds %ObjectType, ptr %tt.0, i64 0, i32 1
  %47 = load ptr, ptr %memberidx71, align 8
  %48 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %47)
  %.not.i = icmp eq ptr %48, null
  br i1 %.not.i, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %if.entry68
  %memberidx.i130 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %49 = load ptr, ptr %memberidx.i130, align 8
  %memberidx.i.i131 = getelementptr inbounds %Program, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i.i131, align 8
  %51 = load i64, ptr %47, align 4
  %memberidx.i.i.i132 = getelementptr inbounds %Array_Module_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i.i132, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i133 = getelementptr inbounds %Module, ptr %53, i64 0, i32 4
  %54 = load ptr, ptr %memberidx2.i.i133, align 8
  %memberidx3.i.i134 = getelementptr inbounds %TypeId, ptr %47, i64 0, i32 2
  %55 = load i64, ptr %memberidx3.i.i134, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %57)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %57)
  %58 = load ptr, ptr %57, align 8
  %59 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %58)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry68, %ifend.i
  %common.ret.op.i = phi ptr [ %59, %ifend.i ], [ %48, %if.entry68 ]
  %.not118 = icmp eq ptr %common.ret.op.i, null
  br i1 %.not118, label %ifend70, label %if.entry72

ifend70:                                          ; preds = %ifend55, %CodeGen_get_or_codegen_class_from_typeid.exit
  %60 = load i64, ptr %tt.0, align 4
  %61 = icmp eq i64 %60, 12
  br i1 %61, label %if.entry82, label %ifend84

if.entry72:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %62 = load ptr, ptr %common.ret.op.i, align 8
  br i1 %2, label %true_block75, label %common.ret

true_block75:                                     ; preds = %if.entry72
  %63 = call ptr @LLVMPointerType(ptr %62, i64 0)
  br label %common.ret

if.entry82:                                       ; preds = %ifend70
  %memberidx85 = getelementptr inbounds %EnumType, ptr %tt.0, i64 0, i32 1
  %64 = load ptr, ptr %memberidx85, align 8
  %65 = call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %64)
  %.not.i135 = icmp eq ptr %65, null
  br i1 %.not.i135, label %ifend.i146, label %CodeGen_get_or_codegen_enum_from_typeid.exit

ifend.i146:                                       ; preds = %if.entry82
  %memberidx.i138 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %66 = load ptr, ptr %memberidx.i138, align 8
  %memberidx.i.i139 = getelementptr inbounds %Program, ptr %66, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i.i139, align 8
  %68 = load i64, ptr %64, align 4
  %memberidx.i.i.i140 = getelementptr inbounds %Array_Module_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i.i.i140, align 8
  %ptridx.i.i.i141 = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i.i.i141, align 8
  %memberidx2.i.i142 = getelementptr inbounds %Module, ptr %70, i64 0, i32 7
  %71 = load ptr, ptr %memberidx2.i.i142, align 8
  %memberidx3.i.i143 = getelementptr inbounds %TypeId, ptr %64, i64 0, i32 2
  %72 = load i64, ptr %memberidx3.i.i143, align 4
  %memberidx.i5.i.i144 = getelementptr inbounds %Array_Enum_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i5.i.i144, align 8
  %ptridx.i6.i.i145 = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i6.i.i145, align 8
  call fastcc void @CodeGen_declare_enum(ptr %0, ptr %74)
  %75 = load ptr, ptr %74, align 8
  %76 = call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %75)
  br label %CodeGen_get_or_codegen_enum_from_typeid.exit

CodeGen_get_or_codegen_enum_from_typeid.exit:     ; preds = %if.entry82, %ifend.i146
  %common.ret.op.i136 = phi ptr [ %76, %ifend.i146 ], [ %65, %if.entry82 ]
  %.not = icmp eq ptr %common.ret.op.i136, null
  br i1 %.not, label %ifend84, label %if.entry86

ifend84:                                          ; preds = %CodeGen_get_or_codegen_enum_from_typeid.exit, %ifend70
  %77 = call ptr @malloc(i32 32)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %77, ptr noundef nonnull align 8 dereferenceable(32) @216, i64 32, i1 false)
  %78 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %78, align 8
  %memberidx.i.i119 = getelementptr inbounds %string, ptr %78, i64 0, i32 1
  store ptr %77, ptr %memberidx.i.i119, align 8
  %memberidx1.i.i120 = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i120, align 4
  %memberidx2.i.i121 = getelementptr inbounds %string, ptr %78, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i121, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %79 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %80 = call ptr %79(ptr nonnull %78)
  %81 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @210, ptr %80)
  %82 = load ptr, ptr %4, align 8
  %83 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %83, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %83, i64 0, i32 1
  store ptr %82, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %83, i64 0, i32 2
  store i64 %81, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %83, i64 0, i32 3
  store i64 %81, ptr %memberidx2.i.i, align 4
  call void @free(ptr %80)
  %84 = load ptr, ptr %83, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i64 0, i32 3
  %85 = load ptr, ptr %memberidx.i.i.i, align 8
  %86 = call ptr %85(ptr nonnull %83)
  %87 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %86, i64 %87)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %common.ret

if.entry86:                                       ; preds = %CodeGen_get_or_codegen_enum_from_typeid.exit
  %88 = load ptr, ptr %common.ret.op.i136, align 8
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_var_access_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call fastcc ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %5)
  %memberidx1 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %7, i1 true)
  %9 = icmp eq ptr %6, null
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %10 = call ptr @malloc(i32 50)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(50) %10, ptr noundef nonnull align 8 dereferenceable(50) @238, i64 50, i1 false)
  %11 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 2
  store i64 50, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 3
  store i64 50, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %12 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %13 = call ptr %12(ptr nonnull %11)
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @210, ptr %13)
  %15 = load ptr, ptr %4, align 8
  %16 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i.i18 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i.i18, align 8
  %memberidx1.i.i19 = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 %14, ptr %memberidx1.i.i19, align 4
  %memberidx2.i.i20 = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 %14, ptr %memberidx2.i.i20, align 4
  call void @free(ptr %13)
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i64 0, i32 3
  %18 = load ptr, ptr %memberidx.i.i.i, align 8
  %19 = call ptr %18(ptr nonnull %16)
  %20 = load i64, ptr %memberidx1.i.i19, align 4
  call void @write(i64 1, ptr %19, i64 %20)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %21 = load ptr, ptr %memberidx, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %common.ret, label %ifend6

common.ret:                                       ; preds = %ifend, %ifend10, %if.entry8
  %common.ret.op = phi ptr [ %25, %if.entry8 ], [ %26, %ifend10 ], [ %6, %ifend ]
  ret ptr %common.ret.op

ifend6:                                           ; preds = %ifend
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %24 = load i1, ptr %memberidx7, align 1
  br i1 %24, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend6
  %25 = call ptr @LLVMGetInitializer(ptr %6)
  br label %common.ret

ifend10:                                          ; preds = %ifend6
  %26 = call ptr @LLVMBuildLoad2(ptr %1, ptr %8, ptr %6, ptr nonnull @28)
  br label %common.ret
}

define internal fastcc void @Map_string_int__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_int_, ptr %15, i64 0, i32 1
  %17 = load i64, ptr %memberidx20, align 4
  call fastcc void @Map_string_int____setitem__(ptr nonnull %0, ptr %16, i64 %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_int____setitem__(ptr nocapture %0, ptr %1, i64 %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_int__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_int__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_int_, ptr %35, i64 0, i32 1
  store i64 %2, ptr %memberidx1.i, align 4
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_int__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

define internal fastcc void @CodeGen_codegen_class(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
for.entry:
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %8)
  %memberidx1 = getelementptr inbounds %Class, ptr %1, i64 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr @malloc(i32 25)
  %memberidx.i = getelementptr inbounds %Array_ClassMethod_, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Array_ClassMethod_, ptr %10, i64 0, i32 2
  %13 = load i64, ptr %memberidx1.i, align 4
  store i1 false, ptr %11, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %11, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %11, i64 0, i32 3
  store ptr %12, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %11, i64 0, i32 2
  store i64 %13, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i, align 4
  %14 = icmp slt i64 %13, 1
  %method.0239 = load ptr, ptr %12, align 8
  store i1 %14, ptr %11, align 1
  br i1 %14, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx5 = getelementptr inbounds %CGClassType, ptr %9, i64 0, i32 3
  %memberidx8 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx.i151 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %memberidx24 = getelementptr inbounds %CGClassType, ptr %9, i64 0, i32 4
  %memberidx30 = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %memberidx42 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 10
  %memberidx.i205 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %memberidx55 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %memberidx.i211 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.incr
  %method.0240 = phi ptr [ %method.0239, %for.body.lr.ph ], [ %method.0, %for.incr ]
  %memberidx3 = getelementptr inbounds %ClassMethod, ptr %method.0240, i64 0, i32 7
  %15 = load i1, ptr %memberidx3, align 1
  br i1 %15, label %for.incr, label %ifend

for.incr:                                         ; preds = %for.body, %CodeGen_codegen_block.exit
  %16 = load i64, ptr %memberidx1.i.i, align 4
  %17 = add nsw i64 %16, 1
  store i64 %17, ptr %memberidx1.i.i, align 4
  %18 = load ptr, ptr %memberidx2.i.i, align 8
  %ptridx.i96 = getelementptr inbounds ptr, ptr %18, i64 %16
  %19 = load i64, ptr %memberidx3.i.i, align 4
  %20 = icmp sge i64 %16, %19
  %method.0 = load ptr, ptr %ptridx.i96, align 8
  store i1 %20, ptr %11, align 1
  br i1 %20, label %for.end, label %for.body

for.end:                                          ; preds = %for.incr, %for.entry
  tail call void @free(ptr nonnull %11)
  ret void

ifend:                                            ; preds = %for.body
  %21 = load ptr, ptr %method.0240, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %memberidx.i98 = getelementptr inbounds %PropId, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i98, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %23 = load i64, ptr %22, align 4
  %memberidx1.i.i99 = getelementptr inbounds %TypeId, ptr %22, i64 0, i32 1
  %24 = load i64, ptr %memberidx1.i.i99, align 4
  %memberidx2.i.i100 = getelementptr inbounds %TypeId, ptr %22, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i.i100, align 4
  %26 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @215, i64 %23, i64 %24, i64 %25)
  %27 = load ptr, ptr %6, align 8
  %28 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %28, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 1
  store ptr %27, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 2
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 3
  store i64 %26, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %29 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %30 = call ptr %29(ptr nonnull %28)
  %31 = load i64, ptr %21, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %21, i64 0, i32 2
  %32 = load i64, ptr %memberidx3.i, align 4
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %7, ptr nonnull @231, ptr %30, i64 %31, i64 %32)
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %30)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  %llvm_fnc = alloca ptr, align 8
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %35)
  %memberidx.i102 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %36, i64 0, i32 1
  %38 = load i64, ptr %memberidx.i102, align 4
  %39 = srem i64 %37, %38
  %40 = load ptr, ptr %36, align 8
  %ptridx.i103 = getelementptr inbounds ptr, ptr %40, i64 %39
  %41 = load ptr, ptr %ptridx.i103, align 8
  %.not.i = icmp eq ptr %41, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %ifend, %else.i
  %hash.0.i = phi i64 [ %55, %else.i ], [ %39, %ifend ]
  %42 = load ptr, ptr %36, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %42, i64 %hash.0.i
  %43 = load ptr, ptr %ptridx3.i, align 8
  %44 = load ptr, ptr %43, align 8
  %memberidx.i.i104 = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  %45 = load i64, ptr %memberidx.i.i104, align 4
  %46 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i = icmp eq i64 %45, %46
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i106 = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  %47 = load ptr, ptr %memberidx2.i.i106, align 8
  %48 = load ptr, ptr %memberidx.i.i, align 8
  %49 = call i64 @memcmp(ptr %47, ptr %48, i64 %45)
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %ifend
  %hash.1.i = phi i64 [ %39, %ifend ], [ %hash.0.i, %ifend.i.i ], [ %55, %else.i ]
  %51 = load ptr, ptr %36, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %51, i64 %hash.1.i
  %52 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %52, null
  br i1 %.not29.i, label %Map_string_LLVMValueRef____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %53 = add nsw i64 %hash.0.i, 1
  %54 = load i64, ptr %memberidx.i102, align 4
  %55 = srem i64 %53, %54
  %56 = load ptr, ptr %36, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %57, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %52, i64 0, i32 1
  %58 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %58, %if.entry10.i ], [ null, %while.end.i ]
  store ptr %common.ret.op.i, ptr %llvm_fnc, align 8
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %method.0240, i64 0, i32 3
  %59 = load ptr, ptr %memberidx6, align 8
  %60 = call ptr @malloc(i32 11)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %60, ptr noundef nonnull align 8 dereferenceable(11) @133, i64 11, i1 false)
  %61 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i108 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i108, align 8
  %memberidx1.i.i109 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i109, align 4
  %memberidx2.i.i110 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i110, align 4
  %memberidx.i111 = getelementptr inbounds %string, ptr %59, i64 0, i32 2
  %62 = load i64, ptr %memberidx.i111, align 4
  %.not.i113 = icmp eq i64 %62, 11
  br i1 %.not.i113, label %ifend.i, label %string___eq__.exit

ifend.i:                                          ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %memberidx2.i115 = getelementptr inbounds %string, ptr %59, i64 0, i32 1
  %63 = load ptr, ptr %memberidx2.i115, align 8
  %64 = call i64 @memcmp(ptr %63, ptr %60, i64 %62)
  %65 = icmp eq i64 %64, 0
  br label %string___eq__.exit

string___eq__.exit:                               ; preds = %Map_string_LLVMValueRef____getitem__.exit, %ifend.i
  %common.ret.op.i114 = phi i1 [ %65, %ifend.i ], [ false, %Map_string_LLVMValueRef____getitem__.exit ]
  %66 = load ptr, ptr %0, align 8
  %67 = load ptr, ptr %memberidx8, align 8
  %68 = load ptr, ptr %67, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i64 0, i32 5
  %69 = load ptr, ptr %memberidx9, align 8
  %70 = call ptr %69(ptr nonnull %67)
  %71 = load ptr, ptr %memberidx6, align 8
  %72 = load ptr, ptr %71, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %72, i64 0, i32 5
  %73 = load ptr, ptr %memberidx11, align 8
  %74 = call ptr %73(ptr nonnull %71)
  %75 = alloca ptr, align 8
  %76 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %75, ptr nonnull @88, ptr %70, ptr %74)
  %77 = load ptr, ptr %75, align 8
  %78 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %78, align 8
  %memberidx.i117 = getelementptr inbounds %string, ptr %78, i64 0, i32 1
  store ptr %77, ptr %memberidx.i117, align 8
  %memberidx1.i118 = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  store i64 %76, ptr %memberidx1.i118, align 4
  %memberidx2.i119 = getelementptr inbounds %string, ptr %78, i64 0, i32 3
  store i64 %76, ptr %memberidx2.i119, align 4
  tail call void @free(ptr %70)
  tail call void @free(ptr %74)
  %79 = load ptr, ptr %78, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %79, i64 0, i32 5
  %80 = load ptr, ptr %memberidx12, align 8
  %81 = call ptr %80(ptr nonnull %78)
  %82 = call ptr @LLVMGetNamedFunction(ptr %66, ptr %81)
  store ptr %82, ptr %llvm_fnc, align 8
  %83 = call ptr @LLVMAppendBasicBlock(ptr %82, ptr nonnull @28)
  %func_builder = alloca ptr, align 8
  %84 = call ptr @LLVMCreateBuilder()
  store ptr %84, ptr %func_builder, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %84, ptr %83)
  %offset = alloca i64, align 8
  store i64 0, ptr %offset, align 8
  %memberidx13 = getelementptr inbounds %ClassMethod, ptr %method.0240, i64 0, i32 1
  %85 = load i1, ptr %memberidx13, align 1
  br i1 %85, label %for.entry43, label %if.entry14

if.entry14:                                       ; preds = %string___eq__.exit
  %86 = load ptr, ptr %9, align 8
  %87 = call ptr @LLVMPointerType(ptr %86, i64 0)
  %88 = call ptr @LLVMGetParam(ptr %82, i64 0)
  %89 = call ptr @LLVMBuildAlloca(ptr %84, ptr %87, ptr nonnull @72)
  %90 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %ClassMethod, ptr %method.0240, i64 0, i32 8
  %91 = load ptr, ptr %memberidx19, align 8
  %memberidx.i120 = getelementptr inbounds %Program, ptr %90, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i120, align 8
  %93 = load i64, ptr %91, align 4
  %memberidx.i.i121 = getelementptr inbounds %Array_Module_, ptr %92, i64 0, i32 1
  %94 = load ptr, ptr %memberidx.i.i121, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %94, i64 %93
  %95 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i122 = getelementptr inbounds %Module, ptr %95, i64 0, i32 8
  %96 = load ptr, ptr %memberidx2.i122, align 8
  %memberidx3.i123 = getelementptr inbounds %ScopeId, ptr %91, i64 0, i32 1
  %97 = load i64, ptr %memberidx3.i123, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %96, i64 0, i32 1
  %98 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %98, i64 %97
  %99 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx20 = getelementptr inbounds %Scope, ptr %99, i64 0, i32 1
  %100 = load ptr, ptr %memberidx20, align 8
  %101 = call ptr @malloc(i32 4)
  store i32 1936287860, ptr %101, align 8
  %102 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i124 = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %101, ptr %memberidx.i.i124, align 8
  %memberidx1.i.i125 = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i125, align 4
  %memberidx2.i.i126 = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i126, align 4
  %103 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr nonnull %102)
  %memberidx.i127 = getelementptr inbounds %Map_string_VarId_, ptr %100, i64 0, i32 1
  %104 = load i64, ptr %memberidx.i127, align 4
  %105 = srem i64 %103, %104
  %106 = load ptr, ptr %100, align 8
  %ptridx.i128 = getelementptr inbounds ptr, ptr %106, i64 %105
  %107 = load ptr, ptr %ptridx.i128, align 8
  %.not.i129 = icmp eq ptr %107, null
  br i1 %.not.i129, label %while.end.i144, label %while.entry.i135

while.entry.i135:                                 ; preds = %if.entry14, %else.i147
  %hash.0.i130 = phi i64 [ %121, %else.i147 ], [ %105, %if.entry14 ]
  %108 = load ptr, ptr %100, align 8
  %ptridx3.i131 = getelementptr inbounds ptr, ptr %108, i64 %hash.0.i130
  %109 = load ptr, ptr %ptridx3.i131, align 8
  %110 = load ptr, ptr %109, align 8
  %memberidx.i.i132 = getelementptr inbounds %string, ptr %110, i64 0, i32 2
  %111 = load i64, ptr %memberidx.i.i132, align 4
  %112 = load i64, ptr %memberidx1.i.i125, align 4
  %.not.i.i134 = icmp eq i64 %111, %112
  br i1 %.not.i.i134, label %ifend.i.i138, label %else.i147

ifend.i.i138:                                     ; preds = %while.entry.i135
  %memberidx2.i.i136 = getelementptr inbounds %string, ptr %110, i64 0, i32 1
  %113 = load ptr, ptr %memberidx2.i.i136, align 8
  %114 = load ptr, ptr %memberidx.i.i124, align 8
  %115 = call i64 @memcmp(ptr %113, ptr %114, i64 %111)
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %while.end.i144, label %else.i147

while.end.i144:                                   ; preds = %else.i147, %ifend.i.i138, %if.entry14
  %hash.1.i141 = phi i64 [ %105, %if.entry14 ], [ %hash.0.i130, %ifend.i.i138 ], [ %121, %else.i147 ]
  %117 = load ptr, ptr %100, align 8
  %ptridx9.i142 = getelementptr inbounds ptr, ptr %117, i64 %hash.1.i141
  %118 = load ptr, ptr %ptridx9.i142, align 8
  %.not29.i143 = icmp eq ptr %118, null
  br i1 %.not29.i143, label %Map_string_VarId____getitem__.exit, label %if.entry10.i150

else.i147:                                        ; preds = %while.entry.i135, %ifend.i.i138
  %119 = add nsw i64 %hash.0.i130, 1
  %120 = load i64, ptr %memberidx.i127, align 4
  %121 = srem i64 %119, %120
  %122 = load ptr, ptr %100, align 8
  %ptridx7.i145 = getelementptr inbounds ptr, ptr %122, i64 %121
  %123 = load ptr, ptr %ptridx7.i145, align 8
  %.not30.i146 = icmp eq ptr %123, null
  br i1 %.not30.i146, label %while.end.i144, label %while.entry.i135

if.entry10.i150:                                  ; preds = %while.end.i144
  %memberidx15.i149 = getelementptr inbounds %MapEntry_string_VarId_, ptr %118, i64 0, i32 1
  %124 = load ptr, ptr %memberidx15.i149, align 8
  br label %Map_string_VarId____getitem__.exit

Map_string_VarId____getitem__.exit:               ; preds = %while.end.i144, %if.entry10.i150
  %common.ret.op.i148 = phi ptr [ %124, %if.entry10.i150 ], [ null, %while.end.i144 ]
  %125 = call ptr @LLVMBuildStore(ptr %84, ptr %88, ptr %89)
  %126 = load ptr, ptr %memberidx.i151, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %memberidx.i.i152 = getelementptr inbounds %VarId, ptr %common.ret.op.i148, i64 0, i32 1
  %127 = load i64, ptr %memberidx.i.i152, align 4
  %128 = load i64, ptr %common.ret.op.i148, align 4
  %memberidx2.i.i153 = getelementptr inbounds %VarId, ptr %common.ret.op.i148, i64 0, i32 2
  %129 = load i64, ptr %memberidx2.i.i153, align 4
  %130 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @215, i64 %127, i64 %128, i64 %129)
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %132, align 8
  %memberidx.i.i.i154 = getelementptr inbounds %string, ptr %132, i64 0, i32 1
  store ptr %131, ptr %memberidx.i.i.i154, align 8
  %memberidx1.i.i.i155 = getelementptr inbounds %string, ptr %132, i64 0, i32 2
  store i64 %130, ptr %memberidx1.i.i.i155, align 4
  %memberidx2.i.i.i156 = getelementptr inbounds %string, ptr %132, i64 0, i32 3
  store i64 %130, ptr %memberidx2.i.i.i156, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %126, ptr nonnull %132, ptr %89)
  br i1 %common.ret.op.i114, label %if.entry21, label %ifend23

if.entry21:                                       ; preds = %Map_string_VarId____getitem__.exit
  %133 = load ptr, ptr %memberidx24, align 8
  %.not = icmp eq ptr %133, null
  br i1 %.not, label %ifend27, label %if.entry25

ifend23:                                          ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit, %Map_string_VarId____getitem__.exit191, %ifend27, %Map_string_VarId____getitem__.exit
  store i64 1, ptr %offset, align 8
  br label %for.entry43

if.entry25:                                       ; preds = %if.entry21
  %index = alloca [1 x ptr], align 8
  %134 = call ptr @LLVMIntType(i64 64)
  %135 = call ptr @LLVMConstInt(ptr %134, i64 0, i1 false)
  store ptr %135, ptr %index, align 8
  %136 = call ptr @LLVMBuildInBoundsGEP2(ptr %84, ptr %87, ptr %88, ptr nonnull %index, i64 1, ptr nonnull @28)
  %137 = load ptr, ptr %memberidx24, align 8
  %138 = call ptr @LLVMBuildStore(ptr %84, ptr %137, ptr %136)
  br label %ifend27

ifend27:                                          ; preds = %if.entry21, %if.entry25
  %139 = load ptr, ptr %memberidx30, align 8
  %.not91 = icmp eq ptr %139, null
  br i1 %.not91, label %ifend23, label %if.entry31

if.entry31:                                       ; preds = %ifend27
  %140 = load ptr, ptr %memberidx18, align 8
  %141 = load ptr, ptr %memberidx19, align 8
  %memberidx.i157 = getelementptr inbounds %Program, ptr %140, i64 0, i32 1
  %142 = load ptr, ptr %memberidx.i157, align 8
  %143 = load i64, ptr %141, align 4
  %memberidx.i.i158 = getelementptr inbounds %Array_Module_, ptr %142, i64 0, i32 1
  %144 = load ptr, ptr %memberidx.i.i158, align 8
  %ptridx.i.i159 = getelementptr inbounds ptr, ptr %144, i64 %143
  %145 = load ptr, ptr %ptridx.i.i159, align 8
  %memberidx2.i160 = getelementptr inbounds %Module, ptr %145, i64 0, i32 8
  %146 = load ptr, ptr %memberidx2.i160, align 8
  %memberidx3.i161 = getelementptr inbounds %ScopeId, ptr %141, i64 0, i32 1
  %147 = load i64, ptr %memberidx3.i161, align 4
  %memberidx.i5.i162 = getelementptr inbounds %Array_Scope_, ptr %146, i64 0, i32 1
  %148 = load ptr, ptr %memberidx.i5.i162, align 8
  %ptridx.i6.i163 = getelementptr inbounds ptr, ptr %148, i64 %147
  %149 = load ptr, ptr %ptridx.i6.i163, align 8
  %memberidx36 = getelementptr inbounds %Scope, ptr %149, i64 0, i32 1
  %150 = load ptr, ptr %memberidx36, align 8
  %151 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %151, ptr noundef nonnull align 8 dereferenceable(5) @137, i64 5, i1 false)
  %152 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %152, align 8
  %memberidx.i.i164 = getelementptr inbounds %string, ptr %152, i64 0, i32 1
  store ptr %151, ptr %memberidx.i.i164, align 8
  %memberidx1.i.i165 = getelementptr inbounds %string, ptr %152, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i165, align 4
  %memberidx2.i.i166 = getelementptr inbounds %string, ptr %152, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i166, align 4
  %153 = call fastcc i64 @Map_string_VarId__hash_fnc(ptr nonnull %152)
  %memberidx.i167 = getelementptr inbounds %Map_string_VarId_, ptr %150, i64 0, i32 1
  %154 = load i64, ptr %memberidx.i167, align 4
  %155 = srem i64 %153, %154
  %156 = load ptr, ptr %150, align 8
  %ptridx.i168 = getelementptr inbounds ptr, ptr %156, i64 %155
  %157 = load ptr, ptr %ptridx.i168, align 8
  %.not.i169 = icmp eq ptr %157, null
  br i1 %.not.i169, label %while.end.i184, label %while.entry.i175

while.entry.i175:                                 ; preds = %if.entry31, %else.i187
  %hash.0.i170 = phi i64 [ %171, %else.i187 ], [ %155, %if.entry31 ]
  %158 = load ptr, ptr %150, align 8
  %ptridx3.i171 = getelementptr inbounds ptr, ptr %158, i64 %hash.0.i170
  %159 = load ptr, ptr %ptridx3.i171, align 8
  %160 = load ptr, ptr %159, align 8
  %memberidx.i.i172 = getelementptr inbounds %string, ptr %160, i64 0, i32 2
  %161 = load i64, ptr %memberidx.i.i172, align 4
  %162 = load i64, ptr %memberidx1.i.i165, align 4
  %.not.i.i174 = icmp eq i64 %161, %162
  br i1 %.not.i.i174, label %ifend.i.i178, label %else.i187

ifend.i.i178:                                     ; preds = %while.entry.i175
  %memberidx2.i.i176 = getelementptr inbounds %string, ptr %160, i64 0, i32 1
  %163 = load ptr, ptr %memberidx2.i.i176, align 8
  %164 = load ptr, ptr %memberidx.i.i164, align 8
  %165 = call i64 @memcmp(ptr %163, ptr %164, i64 %161)
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %while.end.i184, label %else.i187

while.end.i184:                                   ; preds = %else.i187, %ifend.i.i178, %if.entry31
  %hash.1.i181 = phi i64 [ %155, %if.entry31 ], [ %hash.0.i170, %ifend.i.i178 ], [ %171, %else.i187 ]
  %167 = load ptr, ptr %150, align 8
  %ptridx9.i182 = getelementptr inbounds ptr, ptr %167, i64 %hash.1.i181
  %168 = load ptr, ptr %ptridx9.i182, align 8
  %.not29.i183 = icmp eq ptr %168, null
  br i1 %.not29.i183, label %Map_string_VarId____getitem__.exit191, label %if.entry10.i190

else.i187:                                        ; preds = %while.entry.i175, %ifend.i.i178
  %169 = add nsw i64 %hash.0.i170, 1
  %170 = load i64, ptr %memberidx.i167, align 4
  %171 = srem i64 %169, %170
  %172 = load ptr, ptr %150, align 8
  %ptridx7.i185 = getelementptr inbounds ptr, ptr %172, i64 %171
  %173 = load ptr, ptr %ptridx7.i185, align 8
  %.not30.i186 = icmp eq ptr %173, null
  br i1 %.not30.i186, label %while.end.i184, label %while.entry.i175

if.entry10.i190:                                  ; preds = %while.end.i184
  %memberidx15.i189 = getelementptr inbounds %MapEntry_string_VarId_, ptr %168, i64 0, i32 1
  %174 = load ptr, ptr %memberidx15.i189, align 8
  br label %Map_string_VarId____getitem__.exit191

Map_string_VarId____getitem__.exit191:            ; preds = %while.end.i184, %if.entry10.i190
  %common.ret.op.i188 = phi ptr [ %174, %if.entry10.i190 ], [ null, %while.end.i184 ]
  %.not92 = icmp eq ptr %common.ret.op.i188, null
  br i1 %.not92, label %ifend23, label %if.entry37

if.entry37:                                       ; preds = %Map_string_VarId____getitem__.exit191
  %memberidx40 = getelementptr inbounds %ObjectType, ptr %139, i64 0, i32 1
  %175 = load ptr, ptr %memberidx40, align 8
  %176 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr nonnull %0, ptr %175)
  %.not.i218 = icmp eq ptr %176, null
  br i1 %.not.i218, label %ifend.i225, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i225:                                       ; preds = %if.entry37
  %177 = load ptr, ptr %memberidx18, align 8
  %memberidx.i.i221 = getelementptr inbounds %Program, ptr %177, i64 0, i32 1
  %178 = load ptr, ptr %memberidx.i.i221, align 8
  %179 = load i64, ptr %175, align 4
  %memberidx.i.i.i222 = getelementptr inbounds %Array_Module_, ptr %178, i64 0, i32 1
  %180 = load ptr, ptr %memberidx.i.i.i222, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %180, i64 %179
  %181 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i223 = getelementptr inbounds %Module, ptr %181, i64 0, i32 4
  %182 = load ptr, ptr %memberidx2.i.i223, align 8
  %memberidx3.i.i224 = getelementptr inbounds %TypeId, ptr %175, i64 0, i32 2
  %183 = load i64, ptr %memberidx3.i.i224, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %182, i64 0, i32 1
  %184 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %184, i64 %183
  %185 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %185)
  call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %185)
  %186 = load ptr, ptr %185, align 8
  %187 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr nonnull %0, ptr %186)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry37, %ifend.i225
  %common.ret.op.i219 = phi ptr [ %187, %ifend.i225 ], [ %176, %if.entry37 ]
  %memberidx41 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i219, i64 0, i32 6
  %188 = load ptr, ptr %memberidx41, align 8
  %189 = call ptr @LLVMBuildAlloca(ptr %84, ptr %87, ptr nonnull @137)
  %190 = call ptr @LLVMBuildStore(ptr %84, ptr %188, ptr %189)
  %191 = load ptr, ptr %memberidx.i151, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i.i193 = getelementptr inbounds %VarId, ptr %common.ret.op.i188, i64 0, i32 1
  %192 = load i64, ptr %memberidx.i.i193, align 4
  %193 = load i64, ptr %common.ret.op.i188, align 4
  %memberidx2.i.i194 = getelementptr inbounds %VarId, ptr %common.ret.op.i188, i64 0, i32 2
  %194 = load i64, ptr %memberidx2.i.i194, align 4
  %195 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @215, i64 %192, i64 %193, i64 %194)
  %196 = load ptr, ptr %4, align 8
  %197 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %197, align 8
  %memberidx.i.i.i195 = getelementptr inbounds %string, ptr %197, i64 0, i32 1
  store ptr %196, ptr %memberidx.i.i.i195, align 8
  %memberidx1.i.i.i196 = getelementptr inbounds %string, ptr %197, i64 0, i32 2
  store i64 %195, ptr %memberidx1.i.i.i196, align 4
  %memberidx2.i.i.i197 = getelementptr inbounds %string, ptr %197, i64 0, i32 3
  store i64 %195, ptr %memberidx2.i.i.i197, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %191, ptr nonnull %197, ptr %189)
  %198 = load ptr, ptr %memberidx42, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %199 = load i64, ptr %memberidx.i.i193, align 4
  %200 = load i64, ptr %common.ret.op.i188, align 4
  %201 = load i64, ptr %memberidx2.i.i194, align 4
  %202 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @215, i64 %199, i64 %200, i64 %201)
  %203 = load ptr, ptr %3, align 8
  %204 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %204, align 8
  %memberidx.i.i200 = getelementptr inbounds %string, ptr %204, i64 0, i32 1
  store ptr %203, ptr %memberidx.i.i200, align 8
  %memberidx1.i.i201 = getelementptr inbounds %string, ptr %204, i64 0, i32 2
  store i64 %202, ptr %memberidx1.i.i201, align 4
  %memberidx2.i.i202 = getelementptr inbounds %string, ptr %204, i64 0, i32 3
  store i64 %202, ptr %memberidx2.i.i202, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %198, ptr nonnull %204, ptr %88)
  br label %ifend23

for.entry43:                                      ; preds = %ifend23, %string___eq__.exit
  %memberidx48 = getelementptr inbounds %ClassMethod, ptr %method.0240, i64 0, i32 6
  %205 = load ptr, ptr %memberidx48, align 8
  %memberidx49235 = getelementptr inbounds %Array_FunctionArg_, ptr %205, i64 0, i32 2
  %206 = load i64, ptr %memberidx49235, align 4
  %207 = icmp sgt i64 %206, 0
  br i1 %207, label %for.body45.lr.ph, label %for.end47

for.body45.lr.ph:                                 ; preds = %for.entry43
  %208 = load ptr, ptr %llvm_fnc, align 8
  %209 = load i64, ptr %offset, align 8
  %210 = load ptr, ptr %func_builder, align 8
  br label %for.body45

for.body45:                                       ; preds = %for.body45.lr.ph, %for.body45
  %211 = phi ptr [ %205, %for.body45.lr.ph ], [ %233, %for.body45 ]
  %storemerge236 = phi i64 [ 0, %for.body45.lr.ph ], [ %232, %for.body45 ]
  %memberidx.i203 = getelementptr inbounds %Array_FunctionArg_, ptr %211, i64 0, i32 1
  %212 = load ptr, ptr %memberidx.i203, align 8
  %ptridx.i204 = getelementptr inbounds ptr, ptr %212, i64 %storemerge236
  %213 = load ptr, ptr %ptridx.i204, align 8
  %214 = add nsw i64 %209, %storemerge236
  %215 = call ptr @LLVMGetParam(ptr %208, i64 %214)
  %memberidx51 = getelementptr inbounds %Expression, ptr %213, i64 0, i32 3
  %216 = load ptr, ptr %memberidx51, align 8
  %217 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %216, i1 true)
  %memberidx52 = getelementptr inbounds %FunctionArg, ptr %213, i64 0, i32 5
  %218 = load ptr, ptr %memberidx52, align 8
  %219 = load ptr, ptr %218, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %219, i64 0, i32 5
  %220 = load ptr, ptr %memberidx53, align 8
  %221 = call ptr %220(ptr nonnull %218)
  %222 = call ptr @LLVMBuildAlloca(ptr %210, ptr %217, ptr %221)
  %223 = call ptr @LLVMBuildStore(ptr %210, ptr %215, ptr %222)
  %memberidx54 = getelementptr inbounds %FunctionArg, ptr %213, i64 0, i32 4
  %224 = load ptr, ptr %memberidx54, align 8
  %225 = load ptr, ptr %memberidx.i205, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %memberidx.i.i206 = getelementptr inbounds %VarId, ptr %224, i64 0, i32 1
  %226 = load i64, ptr %memberidx.i.i206, align 4
  %227 = load i64, ptr %224, align 4
  %memberidx2.i.i207 = getelementptr inbounds %VarId, ptr %224, i64 0, i32 2
  %228 = load i64, ptr %memberidx2.i.i207, align 4
  %229 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @215, i64 %226, i64 %227, i64 %228)
  %230 = load ptr, ptr %2, align 8
  %231 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %231, align 8
  %memberidx.i.i.i208 = getelementptr inbounds %string, ptr %231, i64 0, i32 1
  store ptr %230, ptr %memberidx.i.i.i208, align 8
  %memberidx1.i.i.i209 = getelementptr inbounds %string, ptr %231, i64 0, i32 2
  store i64 %229, ptr %memberidx1.i.i.i209, align 4
  %memberidx2.i.i.i210 = getelementptr inbounds %string, ptr %231, i64 0, i32 3
  store i64 %229, ptr %memberidx2.i.i.i210, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %225, ptr nonnull %231, ptr %222)
  %232 = add nuw nsw i64 %storemerge236, 1
  %233 = load ptr, ptr %memberidx48, align 8
  %memberidx49 = getelementptr inbounds %Array_FunctionArg_, ptr %233, i64 0, i32 2
  %234 = load i64, ptr %memberidx49, align 4
  %235 = icmp slt i64 %232, %234
  br i1 %235, label %for.body45, label %for.end47

for.end47:                                        ; preds = %for.body45, %for.entry43
  %236 = load ptr, ptr %memberidx55, align 8
  %237 = load ptr, ptr %llvm_fnc, align 8
  store ptr %237, ptr %memberidx55, align 8
  %238 = load ptr, ptr %func_builder, align 8
  %memberidx57 = getelementptr inbounds %ClassMethod, ptr %method.0240, i64 0, i32 5
  %239 = load ptr, ptr %memberidx57, align 8
  %240 = load i1, ptr %memberidx.i211, align 1
  store i1 false, ptr %memberidx.i211, align 1
  %241 = load ptr, ptr %239, align 8
  %242 = call ptr @malloc(i32 25)
  %memberidx.i.i212 = getelementptr inbounds %Array_Statement_, ptr %241, i64 0, i32 1
  %243 = load ptr, ptr %memberidx.i.i212, align 8
  %memberidx1.i.i213 = getelementptr inbounds %Array_Statement_, ptr %241, i64 0, i32 2
  %244 = load i64, ptr %memberidx1.i.i213, align 4
  store i1 false, ptr %242, align 1
  %memberidx1.i.i.i214 = getelementptr inbounds %ArrayIterator_Statement_, ptr %242, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i214, align 4
  %memberidx2.i.i.i215 = getelementptr inbounds %ArrayIterator_Statement_, ptr %242, i64 0, i32 3
  store ptr %243, ptr %memberidx2.i.i.i215, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %242, i64 0, i32 2
  store i64 %244, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i214, align 4
  %245 = icmp slt i64 %244, 1
  br i1 %245, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %for.end47, %for.body.i
  %statement.0.i238.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %243, %for.end47 ]
  %statement.0.i238 = load ptr, ptr %statement.0.i238.in, align 8
  call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %238, ptr %statement.0.i238)
  %246 = load i64, ptr %memberidx1.i.i.i214, align 4
  %247 = add nsw i64 %246, 1
  store i64 %247, ptr %memberidx1.i.i.i214, align 4
  %248 = load ptr, ptr %memberidx2.i.i.i215, align 8
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %248, i64 %246
  %249 = load i64, ptr %memberidx3.i.i.i, align 4
  %250 = icmp sge i64 %246, %249
  br i1 %250, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %for.end47
  %storemerge234.lcssa = phi i1 [ %245, %for.end47 ], [ %250, %for.body.i ]
  store i1 %storemerge234.lcssa, ptr %242, align 1
  call void @free(ptr nonnull %242)
  store i1 %240, ptr %memberidx.i211, align 1
  store ptr %236, ptr %memberidx55, align 8
  call void @LLVMDisposeBuilder(ptr %238)
  br label %for.incr
}

define internal fastcc ptr @CodeGen_codegen_string_to_cstring(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx2 = getelementptr inbounds %Program, ptr %4, i64 0, i32 1
  %5 = load ptr, ptr %memberidx2, align 8
  %memberidx.i36 = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i36, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx3 = getelementptr inbounds %Module, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load i64, ptr %8, align 4
  %ptridx.i.i35 = getelementptr inbounds ptr, ptr %6, i64 %9
  %10 = load ptr, ptr %ptridx.i.i35, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 8
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %8, i64 0, i32 1
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx4 = getelementptr inbounds %Scope, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %16, ptr noundef nonnull align 8 dereferenceable(6) @164, i64 6, i1 false)
  %17 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %17, align 8
  %memberidx.i.i30 = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  store ptr %16, ptr %memberidx.i.i30, align 8
  %memberidx1.i.i31 = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i31, align 4
  %memberidx2.i.i32 = getelementptr inbounds %string, ptr %17, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i32, align 4
  %18 = call fastcc i64 @Map_string_ClassId__hash_fnc(ptr nonnull %17)
  %memberidx.i21 = getelementptr inbounds %Map_string_ClassId_, ptr %15, i64 0, i32 1
  %19 = load i64, ptr %memberidx.i21, align 4
  %20 = srem i64 %18, %19
  %21 = load ptr, ptr %15, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %22, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %3, %else.i
  %hash.0.i = phi i64 [ %36, %else.i ], [ %20, %3 ]
  %23 = load ptr, ptr %15, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %23, i64 %hash.0.i
  %24 = load ptr, ptr %ptridx3.i, align 8
  %25 = load ptr, ptr %24, align 8
  %memberidx.i.i22 = getelementptr inbounds %string, ptr %25, i64 0, i32 2
  %26 = load i64, ptr %memberidx.i.i22, align 4
  %27 = load i64, ptr %memberidx1.i.i31, align 4
  %.not.i.i24 = icmp eq i64 %26, %27
  br i1 %.not.i.i24, label %ifend.i.i27, label %else.i

ifend.i.i27:                                      ; preds = %while.entry.i
  %memberidx2.i.i25 = getelementptr inbounds %string, ptr %25, i64 0, i32 1
  %28 = load ptr, ptr %memberidx2.i.i25, align 8
  %29 = load ptr, ptr %memberidx.i.i30, align 8
  %30 = call i64 @memcmp(ptr %28, ptr %29, i64 %26)
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i27, %3
  %hash.1.i = phi i64 [ %20, %3 ], [ %hash.0.i, %ifend.i.i27 ], [ %36, %else.i ]
  %32 = load ptr, ptr %15, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %32, i64 %hash.1.i
  %33 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %33, null
  br i1 %.not29.i, label %Map_string_ClassId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i27
  %34 = add nsw i64 %hash.0.i, 1
  %35 = load i64, ptr %memberidx.i21, align 4
  %36 = srem i64 %34, %35
  %37 = load ptr, ptr %15, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %38, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_ClassId_, ptr %33, i64 0, i32 1
  %39 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_ClassId____getitem__.exit

Map_string_ClassId____getitem__.exit:             ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i29 = phi ptr [ %39, %if.entry10.i ], [ null, %while.end.i ]
  %40 = alloca %ObjectType, align 8
  store i64 11, ptr %40, align 8
  %memberidx.i20 = getelementptr inbounds %ObjectType, ptr %40, i64 0, i32 1
  store ptr %common.ret.op.i29, ptr %memberidx.i20, align 8
  %41 = load ptr, ptr %memberidx, align 8
  %42 = call ptr @malloc(i32 10)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %42, ptr noundef nonnull align 8 dereferenceable(10) @246, i64 10, i1 false)
  %43 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %43, align 8
  %memberidx.i.i17 = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  store ptr %42, ptr %memberidx.i.i17, align 8
  %memberidx1.i.i18 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i18, align 4
  %memberidx2.i.i19 = getelementptr inbounds %string, ptr %43, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i19, align 4
  %44 = call fastcc ptr @get_class_from_type(ptr %41, ptr nonnull %40)
  %45 = icmp eq ptr %44, null
  br i1 %45, label %get_class_prop_type_with_name.exit, label %ifend.i

ifend.i:                                          ; preds = %Map_string_ClassId____getitem__.exit
  %memberidx.i = getelementptr inbounds %Class, ptr %44, i64 0, i32 6
  %46 = load ptr, ptr %memberidx.i, align 8
  %47 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr nonnull %43)
  %memberidx.i.i14 = getelementptr inbounds %Map_string_PropId_, ptr %46, i64 0, i32 1
  %48 = load i64, ptr %memberidx.i.i14, align 4
  %49 = srem i64 %47, %48
  %50 = load ptr, ptr %46, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %50, i64 %49
  %51 = load ptr, ptr %ptridx.i.i, align 8
  %.not.i.i = icmp eq ptr %51, null
  br i1 %.not.i.i, label %while.end.i.i, label %while.entry.i.i

while.entry.i.i:                                  ; preds = %ifend.i, %else.i.i
  %hash.0.i.i = phi i64 [ %65, %else.i.i ], [ %49, %ifend.i ]
  %52 = load ptr, ptr %46, align 8
  %ptridx3.i.i = getelementptr inbounds ptr, ptr %52, i64 %hash.0.i.i
  %53 = load ptr, ptr %ptridx3.i.i, align 8
  %54 = load ptr, ptr %53, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %54, i64 0, i32 2
  %55 = load i64, ptr %memberidx.i.i.i, align 4
  %56 = load i64, ptr %memberidx1.i.i18, align 4
  %.not.i.i.i = icmp eq i64 %55, %56
  br i1 %.not.i.i.i, label %ifend.i.i.i, label %else.i.i

ifend.i.i.i:                                      ; preds = %while.entry.i.i
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %54, i64 0, i32 1
  %57 = load ptr, ptr %memberidx2.i.i.i, align 8
  %58 = load ptr, ptr %memberidx.i.i17, align 8
  %59 = call i64 @memcmp(ptr %57, ptr %58, i64 %55)
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %while.end.i.i, label %else.i.i

while.end.i.i:                                    ; preds = %else.i.i, %ifend.i.i.i, %ifend.i
  %hash.1.i.i = phi i64 [ %49, %ifend.i ], [ %hash.0.i.i, %ifend.i.i.i ], [ %65, %else.i.i ]
  %61 = load ptr, ptr %46, align 8
  %ptridx9.i.i = getelementptr inbounds ptr, ptr %61, i64 %hash.1.i.i
  %62 = load ptr, ptr %ptridx9.i.i, align 8
  %.not29.i.i = icmp eq ptr %62, null
  br i1 %.not29.i.i, label %Map_string_PropId____getitem__.exit.i, label %if.entry10.i.i

else.i.i:                                         ; preds = %while.entry.i.i, %ifend.i.i.i
  %63 = add nsw i64 %hash.0.i.i, 1
  %64 = load i64, ptr %memberidx.i.i14, align 4
  %65 = srem i64 %63, %64
  %66 = load ptr, ptr %46, align 8
  %ptridx7.i.i = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx7.i.i, align 8
  %.not30.i.i = icmp eq ptr %67, null
  br i1 %.not30.i.i, label %while.end.i.i, label %while.entry.i.i

if.entry10.i.i:                                   ; preds = %while.end.i.i
  %memberidx15.i.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %62, i64 0, i32 1
  %68 = load ptr, ptr %memberidx15.i.i, align 8
  br label %Map_string_PropId____getitem__.exit.i

Map_string_PropId____getitem__.exit.i:            ; preds = %if.entry10.i.i, %while.end.i.i
  %common.ret.op.i.i = phi ptr [ %68, %if.entry10.i.i ], [ null, %while.end.i.i ]
  %69 = icmp eq ptr %common.ret.op.i.i, null
  br i1 %69, label %get_class_prop_type_with_name.exit, label %ifend3.i

ifend3.i:                                         ; preds = %Map_string_PropId____getitem__.exit.i
  %memberidx.i.i6.i = getelementptr inbounds %PropId, ptr %common.ret.op.i.i, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i.i6.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %71 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %72 = load i64, ptr %70, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %74, i64 0, i32 4
  %75 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %70, i64 0, i32 2
  %76 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %75, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %77, i64 %76
  %78 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %79 = load i64, ptr %common.ret.op.i.i, align 4
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %if.entry.i.i, label %ifend.i.i

if.entry.i.i:                                     ; preds = %ifend3.i
  %memberidx1.i.i15 = getelementptr inbounds %Class, ptr %78, i64 0, i32 5
  %81 = load ptr, ptr %memberidx1.i.i15, align 8
  %memberidx2.i.i16 = getelementptr inbounds %PropId, ptr %common.ret.op.i.i, i64 0, i32 2
  %82 = load i64, ptr %memberidx2.i.i16, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %83, i64 %82
  %84 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ClassMethod, ptr %84, i64 0, i32 4
  br label %get_class_prop_type.exit.i

ifend.i.i:                                        ; preds = %ifend3.i
  %memberidx4.i.i = getelementptr inbounds %Class, ptr %78, i64 0, i32 4
  %85 = load ptr, ptr %memberidx4.i.i, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %common.ret.op.i.i, i64 0, i32 2
  %86 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %85, i64 0, i32 1
  %87 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %87, i64 %86
  %88 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %88, i64 0, i32 4
  br label %get_class_prop_type.exit.i

get_class_prop_type.exit.i:                       ; preds = %ifend.i.i, %if.entry.i.i
  %common.ret.op.in.i.i = phi ptr [ %memberidx3.i.i, %if.entry.i.i ], [ %memberidx6.i.i, %ifend.i.i ]
  %common.ret.op.i7.i = load ptr, ptr %common.ret.op.in.i.i, align 8
  br label %get_class_prop_type_with_name.exit

get_class_prop_type_with_name.exit:               ; preds = %Map_string_ClassId____getitem__.exit, %Map_string_PropId____getitem__.exit.i, %get_class_prop_type.exit.i
  %common.ret.op.i = phi ptr [ %common.ret.op.i7.i, %get_class_prop_type.exit.i ], [ null, %Map_string_ClassId____getitem__.exit ], [ null, %Map_string_PropId____getitem__.exit.i ]
  %89 = call ptr @malloc(i32 10)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %89, ptr noundef nonnull align 8 dereferenceable(10) @246, i64 10, i1 false)
  %90 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i, align 4
  %91 = call fastcc ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr nonnull %40, ptr nonnull %90, ptr null)
  %args = alloca [1 x ptr], align 8
  store ptr %2, ptr %args, align 8
  %92 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i, i1 false)
  %93 = call ptr @LLVMBuildCall2(ptr %1, ptr %92, ptr %91, ptr nonnull %args, i64 1, ptr nonnull @28)
  ret ptr %93
}

define internal fastcc void @CodeGen_codegen_statement(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %4 = load i64, ptr %2, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @CodeGen_codegen_if_stmt(ptr %0, ptr %1, ptr nonnull %2)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %6 = load i64, ptr %2, align 4
  %7 = icmp eq i64 %6, 3
  br i1 %7, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  call fastcc void @CodeGen_codegen_for_stmt(ptr %0, ptr %1, ptr nonnull %2)
  br label %ifend4

ifend4:                                           ; preds = %ifend, %if.entry2
  %8 = load i64, ptr %2, align 4
  %9 = icmp eq i64 %8, 4
  br i1 %9, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %memberidx.i66 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i66, align 8
  %11 = call ptr @LLVMAppendBasicBlock(ptr %10, ptr nonnull @255)
  %12 = load ptr, ptr %memberidx.i66, align 8
  %13 = call ptr @LLVMAppendBasicBlock(ptr %12, ptr nonnull @256)
  %memberidx2.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i67 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %15 = load ptr, ptr %memberidx3.i67, align 8
  store ptr %13, ptr %memberidx2.i, align 8
  store ptr %11, ptr %memberidx3.i67, align 8
  %memberidx6.i = getelementptr inbounds %WhileStatement, ptr %2, i64 0, i32 1
  %16 = load ptr, ptr %memberidx6.i, align 8
  %17 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %16)
  %18 = call ptr @LLVMBuildCondBr(ptr %1, ptr %17, ptr %11, ptr %13)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %11)
  %memberidx7.i = getelementptr inbounds %WhileStatement, ptr %2, i64 0, i32 2
  %19 = load ptr, ptr %memberidx7.i, align 8
  %memberidx.i70 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %20 = load i1, ptr %memberidx.i70, align 1
  store i1 false, ptr %memberidx.i70, align 1
  %21 = load ptr, ptr %19, align 8
  %22 = call ptr @malloc(i32 25)
  %memberidx.i.i71 = getelementptr inbounds %Array_Statement_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i.i71, align 8
  %memberidx1.i.i72 = getelementptr inbounds %Array_Statement_, ptr %21, i64 0, i32 2
  %24 = load i64, ptr %memberidx1.i.i72, align 4
  store i1 false, ptr %22, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 3
  store ptr %23, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 2
  store i64 %24, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %25 = icmp slt i64 %24, 1
  br i1 %25, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %if.entry6, %for.body.i
  %statement.0.i75.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %23, %if.entry6 ]
  %statement.0.i75 = load ptr, ptr %statement.0.i75.in, align 8
  call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i75)
  %26 = load i64, ptr %memberidx1.i.i.i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %memberidx1.i.i.i, align 4
  %28 = load ptr, ptr %memberidx2.i.i.i, align 8
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %28, i64 %26
  %29 = load i64, ptr %memberidx3.i.i.i, align 4
  %30 = icmp sge i64 %26, %29
  br i1 %30, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %if.entry6
  %storemerge.lcssa = phi i1 [ %25, %if.entry6 ], [ %30, %for.body.i ]
  store i1 %storemerge.lcssa, ptr %22, align 1
  call void @free(ptr nonnull %22)
  store i1 %20, ptr %memberidx.i70, align 1
  %31 = load ptr, ptr %memberidx7.i, align 8
  %memberidx.i.i = getelementptr inbounds %Block, ptr %31, i64 0, i32 1
  %32 = load i1, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %Block, ptr %31, i64 0, i32 2
  %33 = load i1, ptr %memberidx1.i.i, align 1
  %34 = or i1 %32, %33
  %memberidx2.i.i = getelementptr inbounds %Block, ptr %31, i64 0, i32 3
  %35 = load i1, ptr %memberidx2.i.i, align 1
  %36 = or i1 %34, %35
  br i1 %36, label %CodeGen_codegen_while_stmt.exit, label %if.entry.i68

if.entry.i68:                                     ; preds = %CodeGen_codegen_block.exit
  %37 = load ptr, ptr %memberidx6.i, align 8
  %38 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %37)
  %39 = call ptr @LLVMBuildCondBr(ptr %1, ptr %38, ptr %11, ptr %13)
  br label %CodeGen_codegen_while_stmt.exit

CodeGen_codegen_while_stmt.exit:                  ; preds = %CodeGen_codegen_block.exit, %if.entry.i68
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %13)
  store ptr %14, ptr %memberidx2.i, align 8
  store ptr %15, ptr %memberidx3.i67, align 8
  br label %ifend8

ifend8:                                           ; preds = %ifend4, %CodeGen_codegen_while_stmt.exit
  %40 = load i64, ptr %2, align 4
  %41 = icmp eq i64 %40, 5
  br i1 %41, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %42 = load ptr, ptr %memberidx13, align 8
  %43 = call ptr @LLVMBuildBr(ptr %1, ptr %42)
  br label %ifend12

ifend12:                                          ; preds = %ifend8, %if.entry10
  %44 = load i64, ptr %2, align 4
  %45 = icmp eq i64 %44, 6
  br i1 %45, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %ifend12
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %46 = load ptr, ptr %memberidx18, align 8
  %47 = call ptr @LLVMBuildBr(ptr %1, ptr %46)
  br label %ifend17

ifend17:                                          ; preds = %ifend12, %if.entry15
  %48 = load i64, ptr %2, align 4
  %49 = icmp eq i64 %48, 1
  br i1 %49, label %if.entry20, label %ifend22

if.entry20:                                       ; preds = %ifend17
  call fastcc void @CodeGen_codegen_var_declaration(ptr %0, ptr %1, ptr nonnull %2)
  br label %ifend22

ifend22:                                          ; preds = %ifend17, %if.entry20
  %50 = load i64, ptr %2, align 4
  %51 = icmp eq i64 %50, 2
  br i1 %51, label %if.entry24, label %ifend26

if.entry24:                                       ; preds = %ifend22
  call fastcc void @CodeGen_codegen_const_declaration(ptr %0, ptr %1, ptr nonnull %2)
  br label %ifend26

ifend26:                                          ; preds = %ifend22, %if.entry24
  %52 = load i64, ptr %2, align 4
  %53 = icmp eq i64 %52, 7
  br i1 %53, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend26
  %memberidx.i = getelementptr inbounds %ReturnStatement, ptr %2, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i, align 8
  %.not.i = icmp eq ptr %54, null
  br i1 %.not.i, label %ifend.i, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry28
  %55 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %54)
  %56 = load ptr, ptr %memberidx.i, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %56, i64 0, i32 3
  %57 = load ptr, ptr %memberidx3.i, align 8
  %58 = load i64, ptr %57, align 4
  %.not12.i = icmp eq i64 %58, 10
  br i1 %.not12.i, label %ifend.i, label %if.entry5.i

ifend.i:                                          ; preds = %if.entry.i, %if.entry28
  %59 = call ptr @LLVMBuildRetVoid(ptr %1)
  br label %ifend30

if.entry5.i:                                      ; preds = %if.entry.i
  %60 = call ptr @LLVMBuildRet(ptr %1, ptr %55)
  br label %ifend30

ifend30:                                          ; preds = %if.entry5.i, %ifend.i, %ifend26
  %61 = load i64, ptr %2, align 4
  %62 = icmp eq i64 %61, 8
  br i1 %62, label %if.entry32, label %ifend34

if.entry32:                                       ; preds = %ifend30
  %63 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %2)
  br label %ifend34

ifend34:                                          ; preds = %ifend30, %if.entry32
  ret void
}

define internal fastcc void @Map_string_CGClassType__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_CGClassType____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_CGClassType____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_CGClassType__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_CGClassType__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_CGClassType__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_LLVMValueRef__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_LLVMValueRef__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @CodeGen_get_string_val(ptr nocapture %0, ptr %1, ptr %2, ptr %3, ptr nocapture %4, i64 %5) unnamed_addr {
  %7 = load i64, ptr %3, align 4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend3, %if.entry.i, %Map_string_LLVMValueRef____getitem__.exit, %if.entry.i128, %Map_string_LLVMValueRef____getitem__.exit226, %CodeGen_get_or_codegen_enum_from_typeid.exit, %Array_LLVMValueRef____sl__.exit102, %Array_LLVMValueRef____sl__.exit151, %CodeGen_createGlobalLLVMString.exit167
  %common.ret.op = phi ptr [ %71, %CodeGen_createGlobalLLVMString.exit167 ], [ %87, %Array_LLVMValueRef____sl__.exit151 ], [ %206, %Array_LLVMValueRef____sl__.exit102 ], [ %296, %CodeGen_get_or_codegen_enum_from_typeid.exit ], [ %150, %if.entry.i128 ], [ %common.ret.op.i223, %Map_string_LLVMValueRef____getitem__.exit226 ], [ %277, %if.entry.i ], [ %common.ret.op.i201, %Map_string_LLVMValueRef____getitem__.exit ], [ %2, %ifend3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %6
  %9 = call ptr @malloc(i32 4)
  store i32 1702195828, ptr %9, align 8
  %10 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %10, align 8
  %memberidx.i.i177 = getelementptr inbounds %string, ptr %10, i64 0, i32 1
  store ptr %9, ptr %memberidx.i.i177, align 8
  %memberidx1.i.i178 = getelementptr inbounds %string, ptr %10, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i178, align 4
  %memberidx2.i.i179 = getelementptr inbounds %string, ptr %10, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i179, align 4
  %memberidx.i171 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %11 = load ptr, ptr %memberidx.i171, align 8
  %12 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %10)
  %memberidx.i252 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %11, i64 0, i32 1
  %13 = load i64, ptr %memberidx.i252, align 4
  %14 = srem i64 %12, %13
  %15 = load ptr, ptr %11, align 8
  %ptridx.i253 = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i253, align 8
  %.not.i254 = icmp eq ptr %16, null
  br i1 %.not.i254, label %while.end.i269, label %while.entry.i260

while.entry.i260:                                 ; preds = %if.entry, %else.i272
  %hash.0.i255 = phi i64 [ %30, %else.i272 ], [ %14, %if.entry ]
  %17 = load ptr, ptr %11, align 8
  %ptridx3.i256 = getelementptr inbounds ptr, ptr %17, i64 %hash.0.i255
  %18 = load ptr, ptr %ptridx3.i256, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx.i.i257 = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i257, align 4
  %21 = load i64, ptr %memberidx1.i.i178, align 4
  %.not.i.i259 = icmp eq i64 %20, %21
  br i1 %.not.i.i259, label %ifend.i.i263, label %else.i272

ifend.i.i263:                                     ; preds = %while.entry.i260
  %memberidx2.i.i261 = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i261, align 8
  %23 = load ptr, ptr %memberidx.i.i177, align 8
  %24 = call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.i269, label %else.i272

while.end.i269:                                   ; preds = %else.i272, %ifend.i.i263, %if.entry
  %hash.1.i266 = phi i64 [ %14, %if.entry ], [ %hash.0.i255, %ifend.i.i263 ], [ %30, %else.i272 ]
  %26 = load ptr, ptr %11, align 8
  %ptridx9.i267 = getelementptr inbounds ptr, ptr %26, i64 %hash.1.i266
  %27 = load ptr, ptr %ptridx9.i267, align 8
  %.not29.i268 = icmp eq ptr %27, null
  br i1 %.not29.i268, label %Map_string_LLVMValueRef____getitem__.exit276, label %if.entry10.i275

else.i272:                                        ; preds = %while.entry.i260, %ifend.i.i263
  %28 = add nsw i64 %hash.0.i255, 1
  %29 = load i64, ptr %memberidx.i252, align 4
  %30 = srem i64 %28, %29
  %31 = load ptr, ptr %11, align 8
  %ptridx7.i270 = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx7.i270, align 8
  %.not30.i271 = icmp eq ptr %32, null
  br i1 %.not30.i271, label %while.end.i269, label %while.entry.i260

if.entry10.i275:                                  ; preds = %while.end.i269
  %memberidx15.i274 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %27, i64 0, i32 1
  %33 = load ptr, ptr %memberidx15.i274, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit276

Map_string_LLVMValueRef____getitem__.exit276:     ; preds = %while.end.i269, %if.entry10.i275
  %common.ret.op.i273 = phi ptr [ %33, %if.entry10.i275 ], [ null, %while.end.i269 ]
  %34 = icmp eq ptr %common.ret.op.i273, null
  br i1 %34, label %if.entry.i173, label %CodeGen_createGlobalLLVMString.exit176

if.entry.i173:                                    ; preds = %Map_string_LLVMValueRef____getitem__.exit276
  %35 = load ptr, ptr %10, align 8
  %memberidx1.i172 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i64 0, i32 5
  %36 = load ptr, ptr %memberidx1.i172, align 8
  %37 = call ptr %36(ptr nonnull %10)
  %38 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %37, ptr nonnull @28)
  %39 = load ptr, ptr %memberidx.i171, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %39, ptr nonnull %10, ptr %38)
  br label %CodeGen_createGlobalLLVMString.exit176

CodeGen_createGlobalLLVMString.exit176:           ; preds = %Map_string_LLVMValueRef____getitem__.exit276, %if.entry.i173
  %str.0.i174 = phi ptr [ %38, %if.entry.i173 ], [ %common.ret.op.i273, %Map_string_LLVMValueRef____getitem__.exit276 ]
  %40 = call ptr @malloc(i32 5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %40, ptr noundef nonnull align 8 dereferenceable(5) @84, i64 5, i1 false)
  %41 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %41, align 8
  %memberidx.i.i168 = getelementptr inbounds %string, ptr %41, i64 0, i32 1
  store ptr %40, ptr %memberidx.i.i168, align 8
  %memberidx1.i.i169 = getelementptr inbounds %string, ptr %41, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i169, align 4
  %memberidx2.i.i170 = getelementptr inbounds %string, ptr %41, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i170, align 4
  %42 = load ptr, ptr %memberidx.i171, align 8
  %43 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %41)
  %memberidx.i227 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %42, i64 0, i32 1
  %44 = load i64, ptr %memberidx.i227, align 4
  %45 = srem i64 %43, %44
  %46 = load ptr, ptr %42, align 8
  %ptridx.i228 = getelementptr inbounds ptr, ptr %46, i64 %45
  %47 = load ptr, ptr %ptridx.i228, align 8
  %.not.i229 = icmp eq ptr %47, null
  br i1 %.not.i229, label %while.end.i244, label %while.entry.i235

while.entry.i235:                                 ; preds = %CodeGen_createGlobalLLVMString.exit176, %else.i247
  %hash.0.i230 = phi i64 [ %61, %else.i247 ], [ %45, %CodeGen_createGlobalLLVMString.exit176 ]
  %48 = load ptr, ptr %42, align 8
  %ptridx3.i231 = getelementptr inbounds ptr, ptr %48, i64 %hash.0.i230
  %49 = load ptr, ptr %ptridx3.i231, align 8
  %50 = load ptr, ptr %49, align 8
  %memberidx.i.i232 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  %51 = load i64, ptr %memberidx.i.i232, align 4
  %52 = load i64, ptr %memberidx1.i.i169, align 4
  %.not.i.i234 = icmp eq i64 %51, %52
  br i1 %.not.i.i234, label %ifend.i.i238, label %else.i247

ifend.i.i238:                                     ; preds = %while.entry.i235
  %memberidx2.i.i236 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  %53 = load ptr, ptr %memberidx2.i.i236, align 8
  %54 = load ptr, ptr %memberidx.i.i168, align 8
  %55 = call i64 @memcmp(ptr %53, ptr %54, i64 %51)
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %while.end.i244, label %else.i247

while.end.i244:                                   ; preds = %else.i247, %ifend.i.i238, %CodeGen_createGlobalLLVMString.exit176
  %hash.1.i241 = phi i64 [ %45, %CodeGen_createGlobalLLVMString.exit176 ], [ %hash.0.i230, %ifend.i.i238 ], [ %61, %else.i247 ]
  %57 = load ptr, ptr %42, align 8
  %ptridx9.i242 = getelementptr inbounds ptr, ptr %57, i64 %hash.1.i241
  %58 = load ptr, ptr %ptridx9.i242, align 8
  %.not29.i243 = icmp eq ptr %58, null
  br i1 %.not29.i243, label %Map_string_LLVMValueRef____getitem__.exit251, label %if.entry10.i250

else.i247:                                        ; preds = %while.entry.i235, %ifend.i.i238
  %59 = add nsw i64 %hash.0.i230, 1
  %60 = load i64, ptr %memberidx.i227, align 4
  %61 = srem i64 %59, %60
  %62 = load ptr, ptr %42, align 8
  %ptridx7.i245 = getelementptr inbounds ptr, ptr %62, i64 %61
  %63 = load ptr, ptr %ptridx7.i245, align 8
  %.not30.i246 = icmp eq ptr %63, null
  br i1 %.not30.i246, label %while.end.i244, label %while.entry.i235

if.entry10.i250:                                  ; preds = %while.end.i244
  %memberidx15.i249 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %58, i64 0, i32 1
  %64 = load ptr, ptr %memberidx15.i249, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit251

Map_string_LLVMValueRef____getitem__.exit251:     ; preds = %while.end.i244, %if.entry10.i250
  %common.ret.op.i248 = phi ptr [ %64, %if.entry10.i250 ], [ null, %while.end.i244 ]
  %65 = icmp eq ptr %common.ret.op.i248, null
  br i1 %65, label %if.entry.i164, label %CodeGen_createGlobalLLVMString.exit167

if.entry.i164:                                    ; preds = %Map_string_LLVMValueRef____getitem__.exit251
  %66 = load ptr, ptr %41, align 8
  %memberidx1.i163 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i64 0, i32 5
  %67 = load ptr, ptr %memberidx1.i163, align 8
  %68 = call ptr %67(ptr nonnull %41)
  %69 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %68, ptr nonnull @28)
  %70 = load ptr, ptr %memberidx.i171, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %70, ptr nonnull %41, ptr %69)
  br label %CodeGen_createGlobalLLVMString.exit167

CodeGen_createGlobalLLVMString.exit167:           ; preds = %Map_string_LLVMValueRef____getitem__.exit251, %if.entry.i164
  %str.0.i165 = phi ptr [ %69, %if.entry.i164 ], [ %common.ret.op.i248, %Map_string_LLVMValueRef____getitem__.exit251 ]
  %71 = call ptr @LLVMBuildSelect(ptr %1, ptr %2, ptr %str.0.i174, ptr %str.0.i165, ptr nonnull @28)
  br label %common.ret

ifend:                                            ; preds = %6
  %72 = call fastcc i1 @is_object(ptr nonnull %3)
  br i1 %72, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %ifend
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %73 = load ptr, ptr %memberidx, align 8
  %74 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %74, ptr noundef nonnull align 8 dereferenceable(6) @164, i64 6, i1 false)
  %75 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %75, align 8
  %memberidx.i.i159 = getelementptr inbounds %string, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i.i159, align 8
  %memberidx1.i.i160 = getelementptr inbounds %string, ptr %75, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i160, align 4
  %memberidx2.i.i161 = getelementptr inbounds %string, ptr %75, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i161, align 4
  %76 = call fastcc i1 @is_object(ptr nonnull %3)
  br i1 %76, label %ifend.i156, label %ifend6

ifend.i156:                                       ; preds = %if.entry1
  %77 = call fastcc ptr @get_class_from_type(ptr %73, ptr nonnull %3)
  %memberidx.i153 = getelementptr inbounds %Class, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i153, align 8
  %memberidx.i.i154 = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  %79 = load i64, ptr %memberidx.i.i154, align 4
  %.not.i.i = icmp eq i64 %79, 6
  br i1 %.not.i.i, label %ifend.i.i, label %string___eq__.exit.i

ifend.i.i:                                        ; preds = %ifend.i156
  %memberidx2.i.i157 = getelementptr inbounds %string, ptr %78, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i157, align 8
  %81 = call i64 @memcmp(ptr %80, ptr %74, i64 %79)
  %82 = icmp eq i64 %81, 0
  br label %string___eq__.exit.i

string___eq__.exit.i:                             ; preds = %ifend.i.i, %ifend.i156
  %common.ret.op.i.i = phi i1 [ %82, %ifend.i.i ], [ false, %ifend.i156 ]
  %83 = load ptr, ptr %77, align 8
  %84 = load i64, ptr %83, align 4
  %85 = icmp eq i64 %84, 1
  %86 = and i1 %common.ret.op.i.i, %85
  br i1 %86, label %if.entry4, label %ifend6

ifend3:                                           ; preds = %ifend
  switch i64 %7, label %common.ret [
    i64 15, label %if.entry35
    i64 12, label %if.entry39
  ]

if.entry4:                                        ; preds = %string___eq__.exit.i
  %87 = call fastcc ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %2)
  %memberidx.i142 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %88 = load i64, ptr %memberidx.i142, align 4
  %memberidx1.i143 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %89 = load i64, ptr %memberidx1.i143, align 4
  %.not.i144 = icmp slt i64 %88, %89
  br i1 %.not.i144, label %Array_LLVMValueRef____sl__.exit151, label %if.entry.i147

if.entry.i147:                                    ; preds = %if.entry4
  %90 = shl i64 %89, 1
  store i64 %90, ptr %memberidx1.i143, align 4
  %memberidx2.i.i146 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %91 = load ptr, ptr %memberidx2.i.i146, align 8
  %92 = shl i64 %89, 4
  %93 = call ptr @realloc(ptr %91, i64 %92)
  store ptr %93, ptr %memberidx2.i.i146, align 8
  br label %Array_LLVMValueRef____sl__.exit151

Array_LLVMValueRef____sl__.exit151:               ; preds = %if.entry4, %if.entry.i147
  %94 = load i64, ptr %memberidx.i142, align 4
  %95 = add nsw i64 %94, 1
  store i64 %95, ptr %memberidx.i142, align 4
  %memberidx4.i148 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %96 = load ptr, ptr %memberidx4.i148, align 8
  %ptridx.i149 = getelementptr inbounds ptr, ptr %96, i64 %94
  store ptr %87, ptr %ptridx.i149, align 8
  br label %common.ret

ifend6:                                           ; preds = %if.entry1, %string___eq__.exit.i
  %97 = load ptr, ptr %memberidx, align 8
  %98 = call fastcc ptr @get_class_from_type(ptr %97, ptr nonnull %3)
  %99 = alloca %StringBuilder, align 8
  %memberidx8 = getelementptr inbounds %Class, ptr %98, i64 0, i32 1
  %100 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %string, ptr %100, i64 0, i32 2
  %101 = load i64, ptr %memberidx9, align 4
  %102 = add nsw i64 %101, 14
  store ptr @VTableStringBuilder, ptr %99, align 8
  %memberidx.i138 = getelementptr inbounds %StringBuilder, ptr %99, i64 0, i32 2
  store i64 %102, ptr %memberidx.i138, align 8
  %memberidx1.i139 = getelementptr inbounds %StringBuilder, ptr %99, i64 0, i32 1
  %103 = trunc i64 %102 to i32
  %104 = call ptr @malloc(i32 %103)
  store ptr %104, ptr %memberidx1.i139, align 8
  %memberidx3.i140 = getelementptr inbounds %StringBuilder, ptr %99, i64 0, i32 3
  store ptr %104, ptr %memberidx3.i140, align 8
  %memberidx5.i141 = getelementptr inbounds %StringBuilder, ptr %99, i64 0, i32 4
  store i64 0, ptr %memberidx5.i141, align 8
  %105 = load ptr, ptr %99, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %105, i64 0, i32 1
  %106 = load ptr, ptr %memberidx10, align 8
  %107 = load ptr, ptr %memberidx8, align 8
  %108 = load ptr, ptr %107, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %108, i64 0, i32 5
  %109 = load ptr, ptr %memberidx12, align 8
  %110 = call ptr %109(ptr nonnull %107)
  %111 = alloca ptr, align 8
  %112 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %111, ptr nonnull @219, ptr %110)
  %113 = load ptr, ptr %111, align 8
  %114 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %114, align 8
  %memberidx.i135 = getelementptr inbounds %string, ptr %114, i64 0, i32 1
  store ptr %113, ptr %memberidx.i135, align 8
  %memberidx1.i136 = getelementptr inbounds %string, ptr %114, i64 0, i32 2
  store i64 %112, ptr %memberidx1.i136, align 4
  %memberidx2.i137 = getelementptr inbounds %string, ptr %114, i64 0, i32 3
  store i64 %112, ptr %memberidx2.i137, align 4
  tail call void @free(ptr %110)
  call void %106(ptr nonnull %99, ptr nonnull %114)
  %115 = icmp eq i64 %5, 3
  br i1 %115, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend6
  %116 = load ptr, ptr %99, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %116, i64 0, i32 1
  %117 = load ptr, ptr %memberidx16, align 8
  %118 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %118, ptr noundef nonnull align 8 dereferenceable(6) @220, i64 6, i1 false)
  %119 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %119, align 8
  %memberidx.i.i132 = getelementptr inbounds %string, ptr %119, i64 0, i32 1
  store ptr %118, ptr %memberidx.i.i132, align 8
  %memberidx1.i.i133 = getelementptr inbounds %string, ptr %119, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i133, align 4
  %memberidx2.i.i134 = getelementptr inbounds %string, ptr %119, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i134, align 4
  call void %117(ptr nonnull %99, ptr nonnull %119)
  %120 = load ptr, ptr %99, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %120, i64 0, i32 3
  %121 = load ptr, ptr %memberidx17, align 8
  %122 = call ptr %121(ptr nonnull %99)
  %memberidx.i126 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %123 = load ptr, ptr %memberidx.i126, align 8
  %124 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %122)
  %memberidx.i202 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %123, i64 0, i32 1
  %125 = load i64, ptr %memberidx.i202, align 4
  %126 = srem i64 %124, %125
  %127 = load ptr, ptr %123, align 8
  %ptridx.i203 = getelementptr inbounds ptr, ptr %127, i64 %126
  %128 = load ptr, ptr %ptridx.i203, align 8
  %.not.i204 = icmp eq ptr %128, null
  br i1 %.not.i204, label %while.end.i219, label %while.entry.i210.preheader

while.entry.i210.preheader:                       ; preds = %if.entry13
  %memberidx1.i.i208 = getelementptr inbounds %string, ptr %122, i64 0, i32 2
  %memberidx3.i.i212 = getelementptr inbounds %string, ptr %122, i64 0, i32 1
  br label %while.entry.i210

while.entry.i210:                                 ; preds = %while.entry.i210.preheader, %else.i222
  %hash.0.i205 = phi i64 [ %142, %else.i222 ], [ %126, %while.entry.i210.preheader ]
  %129 = load ptr, ptr %123, align 8
  %ptridx3.i206 = getelementptr inbounds ptr, ptr %129, i64 %hash.0.i205
  %130 = load ptr, ptr %ptridx3.i206, align 8
  %131 = load ptr, ptr %130, align 8
  %memberidx.i.i207 = getelementptr inbounds %string, ptr %131, i64 0, i32 2
  %132 = load i64, ptr %memberidx.i.i207, align 4
  %133 = load i64, ptr %memberidx1.i.i208, align 4
  %.not.i.i209 = icmp eq i64 %132, %133
  br i1 %.not.i.i209, label %ifend.i.i213, label %else.i222

ifend.i.i213:                                     ; preds = %while.entry.i210
  %memberidx2.i.i211 = getelementptr inbounds %string, ptr %131, i64 0, i32 1
  %134 = load ptr, ptr %memberidx2.i.i211, align 8
  %135 = load ptr, ptr %memberidx3.i.i212, align 8
  %136 = call i64 @memcmp(ptr %134, ptr %135, i64 %132)
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %while.end.i219, label %else.i222

while.end.i219:                                   ; preds = %else.i222, %ifend.i.i213, %if.entry13
  %hash.1.i216 = phi i64 [ %126, %if.entry13 ], [ %hash.0.i205, %ifend.i.i213 ], [ %142, %else.i222 ]
  %138 = load ptr, ptr %123, align 8
  %ptridx9.i217 = getelementptr inbounds ptr, ptr %138, i64 %hash.1.i216
  %139 = load ptr, ptr %ptridx9.i217, align 8
  %.not29.i218 = icmp eq ptr %139, null
  br i1 %.not29.i218, label %Map_string_LLVMValueRef____getitem__.exit226, label %if.entry10.i225

else.i222:                                        ; preds = %while.entry.i210, %ifend.i.i213
  %140 = add nsw i64 %hash.0.i205, 1
  %141 = load i64, ptr %memberidx.i202, align 4
  %142 = srem i64 %140, %141
  %143 = load ptr, ptr %123, align 8
  %ptridx7.i220 = getelementptr inbounds ptr, ptr %143, i64 %142
  %144 = load ptr, ptr %ptridx7.i220, align 8
  %.not30.i221 = icmp eq ptr %144, null
  br i1 %.not30.i221, label %while.end.i219, label %while.entry.i210

if.entry10.i225:                                  ; preds = %while.end.i219
  %memberidx15.i224 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %139, i64 0, i32 1
  %145 = load ptr, ptr %memberidx15.i224, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit226

Map_string_LLVMValueRef____getitem__.exit226:     ; preds = %while.end.i219, %if.entry10.i225
  %common.ret.op.i223 = phi ptr [ %145, %if.entry10.i225 ], [ null, %while.end.i219 ]
  %146 = icmp eq ptr %common.ret.op.i223, null
  br i1 %146, label %if.entry.i128, label %common.ret

if.entry.i128:                                    ; preds = %Map_string_LLVMValueRef____getitem__.exit226
  %147 = load ptr, ptr %122, align 8
  %memberidx1.i127 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %147, i64 0, i32 5
  %148 = load ptr, ptr %memberidx1.i127, align 8
  %149 = call ptr %148(ptr nonnull %122)
  %150 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %149, ptr nonnull @28)
  %151 = load ptr, ptr %memberidx.i126, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %151, ptr nonnull %122, ptr %150)
  br label %common.ret

ifend15:                                          ; preds = %ifend6
  %memberidx18 = getelementptr inbounds %Class, ptr %98, i64 0, i32 6
  %152 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Map_string_PropId_, ptr %152, i64 0, i32 2
  %153 = load i64, ptr %memberidx19, align 4
  %154 = alloca ptr, i64 %153, align 8
  %idx = alloca i64, align 8
  store i64 0, ptr %idx, align 8
  %155 = call ptr @malloc(i32 25)
  %156 = load ptr, ptr %152, align 8
  %memberidx1.i122 = getelementptr inbounds %Map_string_PropId_, ptr %152, i64 0, i32 1
  %157 = load i64, ptr %memberidx1.i122, align 4
  %158 = load i64, ptr %memberidx19, align 4
  store i1 false, ptr %155, align 1
  %memberidx1.i.i124 = getelementptr inbounds %MapIterator_string_PropId_, ptr %155, i64 0, i32 1
  store ptr %156, ptr %memberidx1.i.i124, align 8
  %memberidx2.i.i125 = getelementptr inbounds %MapIterator_string_PropId_, ptr %155, i64 0, i32 2
  store i64 %157, ptr %memberidx2.i.i125, align 4
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %155, i64 0, i32 3
  store i64 %158, ptr %memberidx3.i.i, align 4
  %159 = add nsw i64 %157, -1
  store i64 %159, ptr %memberidx2.i.i125, align 4
  %160 = icmp sgt i64 %157, 0
  br i1 %160, label %while.entry.i116.preheader, label %MapIterator_string_PropId__next.exit121

while.entry.i116.preheader:                       ; preds = %ifend15
  %memberidx1.i.i124.promoted = load ptr, ptr %memberidx1.i.i124, align 8
  br label %while.entry.i116

while.entry.i116:                                 ; preds = %while.entry.i116.preheader, %ifend.i120
  %161 = phi ptr [ %memberidx1.i.i124.promoted, %while.entry.i116.preheader ], [ %incdec.ptr.i114, %ifend.i120 ]
  %incdec.ptr.i114 = getelementptr inbounds ptr, ptr %161, i64 1
  %162 = load ptr, ptr %161, align 8
  %.not.i115 = icmp eq ptr %162, null
  br i1 %.not.i115, label %ifend.i120, label %MapIterator_string_PropId__next.exit121.loopexit

ifend.i120:                                       ; preds = %while.entry.i116
  %163 = load i64, ptr %memberidx2.i.i125, align 4
  %164 = add nsw i64 %163, -1
  store i64 %164, ptr %memberidx2.i.i125, align 4
  %165 = icmp sgt i64 %163, 0
  br i1 %165, label %while.entry.i116, label %MapIterator_string_PropId__next.exit121.loopexit

MapIterator_string_PropId__next.exit121.loopexit: ; preds = %ifend.i120, %while.entry.i116
  store ptr %incdec.ptr.i114, ptr %memberidx1.i.i124, align 8
  br label %MapIterator_string_PropId__next.exit121

MapIterator_string_PropId__next.exit121:          ; preds = %MapIterator_string_PropId__next.exit121.loopexit, %ifend15
  %.pn.in = getelementptr inbounds %MapIterator_string_PropId_, ptr %155, i64 0, i32 1
  %memberidx3.i.i.promoted = load i64, ptr %memberidx3.i.i, align 4
  %.pn.in.promoted = load ptr, ptr %.pn.in, align 8
  %idx.promoted = load i64, ptr %idx, align 8
  %storemerge289293 = add nsw i64 %memberidx3.i.i.promoted, -1
  %storemerge288294 = icmp slt i64 %memberidx3.i.i.promoted, 1
  br i1 %storemerge288294, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit121
  %166 = add nsw i64 %5, 1
  %memberidx.i86 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %memberidx1.i87 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %memberidx2.i.i90 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %memberidx4.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit
  %storemerge289298 = phi i64 [ %storemerge289293, %for.body.lr.ph ], [ %storemerge289, %MapIterator_string_PropId__next.exit ]
  %.pn292297 = phi ptr [ %.pn.in.promoted, %for.body.lr.ph ], [ %.pn291, %MapIterator_string_PropId__next.exit ]
  %167 = phi i64 [ %idx.promoted, %for.body.lr.ph ], [ %225, %MapIterator_string_PropId__next.exit ]
  %storemerge299.in = getelementptr inbounds ptr, ptr %.pn292297, i64 -1
  %storemerge299 = load ptr, ptr %storemerge299.in, align 8
  %168 = load ptr, ptr %memberidx, align 8
  %memberidx23 = getelementptr inbounds %MapEntry_string_PropId_, ptr %storemerge299, i64 0, i32 1
  %169 = load ptr, ptr %memberidx23, align 8
  %memberidx.i.i106 = getelementptr inbounds %PropId, ptr %169, i64 0, i32 1
  %170 = load ptr, ptr %memberidx.i.i106, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %168, i64 0, i32 1
  %171 = load ptr, ptr %memberidx.i.i.i, align 8
  %172 = load i64, ptr %170, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %171, i64 0, i32 1
  %173 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %173, i64 %172
  %174 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %174, i64 0, i32 4
  %175 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %170, i64 0, i32 2
  %176 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %175, i64 0, i32 1
  %177 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %177, i64 %176
  %178 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %179 = load i64, ptr %169, align 4
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %if.entry.i109, label %ifend.i111

if.entry.i109:                                    ; preds = %for.body
  %memberidx1.i107 = getelementptr inbounds %Class, ptr %178, i64 0, i32 5
  %181 = load ptr, ptr %memberidx1.i107, align 8
  %memberidx2.i108 = getelementptr inbounds %PropId, ptr %169, i64 0, i32 2
  %182 = load i64, ptr %memberidx2.i108, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %181, i64 0, i32 1
  %183 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %183, i64 %182
  %184 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %184, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i111:                                       ; preds = %for.body
  %memberidx4.i110 = getelementptr inbounds %Class, ptr %178, i64 0, i32 4
  %185 = load ptr, ptr %memberidx4.i110, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %169, i64 0, i32 2
  %186 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %185, i64 0, i32 1
  %187 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %187, i64 %186
  %188 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %188, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i109, %ifend.i111
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i109 ], [ %memberidx6.i, %ifend.i111 ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %189 = load ptr, ptr %storemerge299, align 8
  %190 = call fastcc ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr nonnull %3, ptr %189, ptr null)
  %191 = call fastcc ptr @CodeGen_get_string_val(ptr %0, ptr %1, ptr %190, ptr %common.ret.op.i, ptr %4, i64 %166)
  %192 = call fastcc i1 @is_object(ptr %common.ret.op.i)
  %193 = call ptr @LLVMTypeOf(ptr %191)
  %194 = call i64 @LLVMGetTypeKind(ptr %193)
  %195 = icmp ne i64 %194, 12
  %196 = call i1 @LLVMIsGlobalConstant(ptr %191)
  %197 = or i1 %192, %196
  %198 = or i1 %195, %197
  br i1 %198, label %ifend27, label %if.entry25

for.end:                                          ; preds = %MapIterator_string_PropId__next.exit, %MapIterator_string_PropId__next.exit121
  %.lcssa = phi i64 [ %idx.promoted, %MapIterator_string_PropId__next.exit121 ], [ %225, %MapIterator_string_PropId__next.exit ]
  %.pn292.lcssa = phi ptr [ %.pn.in.promoted, %MapIterator_string_PropId__next.exit121 ], [ %.pn291, %MapIterator_string_PropId__next.exit ]
  %storemerge288.lcssa = phi i1 [ %storemerge288294, %MapIterator_string_PropId__next.exit121 ], [ true, %MapIterator_string_PropId__next.exit ]
  %storemerge289.lcssa = phi i64 [ %storemerge289293, %MapIterator_string_PropId__next.exit121 ], [ -1, %MapIterator_string_PropId__next.exit ]
  store i64 %storemerge289.lcssa, ptr %memberidx3.i.i, align 4
  store i1 %storemerge288.lcssa, ptr %155, align 1
  store ptr %.pn292.lcssa, ptr %.pn.in, align 8
  store i64 %.lcssa, ptr %idx, align 8
  tail call void @free(ptr nonnull %155)
  %199 = load ptr, ptr %99, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %199, i64 0, i32 1
  %200 = load ptr, ptr %memberidx32, align 8
  %201 = call ptr @malloc(i32 1)
  store i8 125, ptr %201, align 8
  %202 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %202, align 8
  %memberidx.i.i103 = getelementptr inbounds %string, ptr %202, i64 0, i32 1
  store ptr %201, ptr %memberidx.i.i103, align 8
  %memberidx1.i.i104 = getelementptr inbounds %string, ptr %202, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i104, align 4
  %memberidx2.i.i105 = getelementptr inbounds %string, ptr %202, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i105, align 4
  call void %200(ptr nonnull %99, ptr nonnull %202)
  %203 = load ptr, ptr %99, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %203, i64 0, i32 3
  %204 = load ptr, ptr %memberidx34, align 8
  %205 = call ptr %204(ptr nonnull %99)
  %206 = call fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr %205, ptr nonnull %154, i64 %153, ptr null)
  %memberidx.i93 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %207 = load i64, ptr %memberidx.i93, align 4
  %memberidx1.i94 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %208 = load i64, ptr %memberidx1.i94, align 4
  %.not.i95 = icmp slt i64 %207, %208
  br i1 %.not.i95, label %Array_LLVMValueRef____sl__.exit102, label %if.entry.i98

if.entry.i98:                                     ; preds = %for.end
  %209 = shl i64 %208, 1
  store i64 %209, ptr %memberidx1.i94, align 4
  %memberidx2.i.i97 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %210 = load ptr, ptr %memberidx2.i.i97, align 8
  %211 = shl i64 %208, 4
  %212 = call ptr @realloc(ptr %210, i64 %211)
  store ptr %212, ptr %memberidx2.i.i97, align 8
  br label %Array_LLVMValueRef____sl__.exit102

Array_LLVMValueRef____sl__.exit102:               ; preds = %for.end, %if.entry.i98
  %213 = load i64, ptr %memberidx.i93, align 4
  %214 = add nsw i64 %213, 1
  store i64 %214, ptr %memberidx.i93, align 4
  %memberidx4.i99 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %215 = load ptr, ptr %memberidx4.i99, align 8
  %ptridx.i100 = getelementptr inbounds ptr, ptr %215, i64 %213
  store ptr %206, ptr %ptridx.i100, align 8
  br label %common.ret

if.entry25:                                       ; preds = %get_class_prop_type.exit
  %216 = load i64, ptr %memberidx.i86, align 4
  %217 = load i64, ptr %memberidx1.i87, align 4
  %.not.i88 = icmp slt i64 %216, %217
  br i1 %.not.i88, label %Array_LLVMValueRef____sl__.exit, label %if.entry.i91

if.entry.i91:                                     ; preds = %if.entry25
  %218 = shl i64 %217, 1
  store i64 %218, ptr %memberidx1.i87, align 4
  %219 = load ptr, ptr %memberidx2.i.i90, align 8
  %220 = shl i64 %217, 4
  %221 = call ptr @realloc(ptr %219, i64 %220)
  store ptr %221, ptr %memberidx2.i.i90, align 8
  br label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %if.entry25, %if.entry.i91
  %222 = load i64, ptr %memberidx.i86, align 4
  %223 = add nsw i64 %222, 1
  store i64 %223, ptr %memberidx.i86, align 4
  %224 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %224, i64 %222
  store ptr %191, ptr %ptridx.i, align 8
  br label %ifend27

ifend27:                                          ; preds = %get_class_prop_type.exit, %Array_LLVMValueRef____sl__.exit
  %225 = add nsw i64 %167, 1
  %ptridx = getelementptr inbounds ptr, ptr %154, i64 %167
  store ptr %191, ptr %ptridx, align 8
  %226 = load ptr, ptr %99, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %226, i64 0, i32 1
  %227 = load ptr, ptr %memberidx28, align 8
  %228 = load ptr, ptr %storemerge299, align 8
  %229 = load ptr, ptr %228, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %229, i64 0, i32 5
  %230 = load ptr, ptr %memberidx30, align 8
  %231 = call ptr %230(ptr nonnull %228)
  %232 = call fastcc ptr @get_format_from_type(ptr %common.ret.op.i)
  %233 = load ptr, ptr %232, align 8
  %memberidx31 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %233, i64 0, i32 5
  %234 = load ptr, ptr %memberidx31, align 8
  %235 = call ptr %234(ptr nonnull %232)
  %236 = alloca ptr, align 8
  %237 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %236, ptr nonnull @223, ptr %231, ptr %235)
  %238 = load ptr, ptr %236, align 8
  %239 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %239, align 8
  %memberidx.i83 = getelementptr inbounds %string, ptr %239, i64 0, i32 1
  store ptr %238, ptr %memberidx.i83, align 8
  %memberidx1.i84 = getelementptr inbounds %string, ptr %239, i64 0, i32 2
  store i64 %237, ptr %memberidx1.i84, align 4
  %memberidx2.i85 = getelementptr inbounds %string, ptr %239, i64 0, i32 3
  store i64 %237, ptr %memberidx2.i85, align 4
  tail call void @free(ptr %231)
  tail call void @free(ptr %235)
  call void %227(ptr nonnull %99, ptr nonnull %239)
  %240 = load i64, ptr %memberidx2.i.i125, align 4
  %241 = add nsw i64 %240, -1
  store i64 %241, ptr %memberidx2.i.i125, align 4
  %242 = icmp sgt i64 %240, 0
  br i1 %242, label %while.entry.i, label %MapIterator_string_PropId__next.exit

while.entry.i:                                    ; preds = %ifend27, %ifend.i
  %243 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %.pn292297, %ifend27 ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %243, i64 1
  %244 = load ptr, ptr %243, align 8
  %.not.i = icmp eq ptr %244, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit

ifend.i:                                          ; preds = %while.entry.i
  %245 = load i64, ptr %memberidx2.i.i125, align 4
  %246 = add nsw i64 %245, -1
  store i64 %246, ptr %memberidx2.i.i125, align 4
  %247 = icmp sgt i64 %245, 0
  br i1 %247, label %while.entry.i, label %MapIterator_string_PropId__next.exit

MapIterator_string_PropId__next.exit:             ; preds = %while.entry.i, %ifend.i, %ifend27
  %.pn291 = phi ptr [ %.pn292297, %ifend27 ], [ %incdec.ptr.i, %ifend.i ], [ %incdec.ptr.i, %while.entry.i ]
  %storemerge289 = add nsw i64 %storemerge289298, -1
  %storemerge288 = icmp slt i64 %storemerge289298, 1
  br i1 %storemerge288, label %for.end, label %for.body

if.entry35:                                       ; preds = %ifend3
  %248 = call ptr @malloc(i32 10)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %248, ptr noundef nonnull align 8 dereferenceable(10) @224, i64 10, i1 false)
  %249 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %249, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %249, i64 0, i32 1
  store ptr %248, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %249, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %249, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %250 = load ptr, ptr %memberidx.i, align 8
  %251 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %249)
  %memberidx.i189 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %250, i64 0, i32 1
  %252 = load i64, ptr %memberidx.i189, align 4
  %253 = srem i64 %251, %252
  %254 = load ptr, ptr %250, align 8
  %ptridx.i190 = getelementptr inbounds ptr, ptr %254, i64 %253
  %255 = load ptr, ptr %ptridx.i190, align 8
  %.not.i191 = icmp eq ptr %255, null
  br i1 %.not.i191, label %while.end.i, label %while.entry.i195

while.entry.i195:                                 ; preds = %if.entry35, %else.i
  %hash.0.i = phi i64 [ %269, %else.i ], [ %253, %if.entry35 ]
  %256 = load ptr, ptr %250, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %256, i64 %hash.0.i
  %257 = load ptr, ptr %ptridx3.i, align 8
  %258 = load ptr, ptr %257, align 8
  %memberidx.i.i192 = getelementptr inbounds %string, ptr %258, i64 0, i32 2
  %259 = load i64, ptr %memberidx.i.i192, align 4
  %260 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i194 = icmp eq i64 %259, %260
  br i1 %.not.i.i194, label %ifend.i.i198, label %else.i

ifend.i.i198:                                     ; preds = %while.entry.i195
  %memberidx2.i.i196 = getelementptr inbounds %string, ptr %258, i64 0, i32 1
  %261 = load ptr, ptr %memberidx2.i.i196, align 8
  %262 = load ptr, ptr %memberidx.i.i, align 8
  %263 = call i64 @memcmp(ptr %261, ptr %262, i64 %259)
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i198, %if.entry35
  %hash.1.i = phi i64 [ %253, %if.entry35 ], [ %hash.0.i, %ifend.i.i198 ], [ %269, %else.i ]
  %265 = load ptr, ptr %250, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %265, i64 %hash.1.i
  %266 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %266, null
  br i1 %.not29.i, label %Map_string_LLVMValueRef____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i195, %ifend.i.i198
  %267 = add nsw i64 %hash.0.i, 1
  %268 = load i64, ptr %memberidx.i189, align 4
  %269 = srem i64 %267, %268
  %270 = load ptr, ptr %250, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %270, i64 %269
  %271 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %271, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i195

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %266, i64 0, i32 1
  %272 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i201 = phi ptr [ %272, %if.entry10.i ], [ null, %while.end.i ]
  %273 = icmp eq ptr %common.ret.op.i201, null
  br i1 %273, label %if.entry.i, label %common.ret

if.entry.i:                                       ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %274 = load ptr, ptr %249, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %274, i64 0, i32 5
  %275 = load ptr, ptr %memberidx1.i, align 8
  %276 = call ptr %275(ptr nonnull %249)
  %277 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %276, ptr nonnull @28)
  %278 = load ptr, ptr %memberidx.i, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %278, ptr nonnull %249, ptr %277)
  br label %common.ret

if.entry39:                                       ; preds = %ifend3
  %memberidx42 = getelementptr inbounds %EnumType, ptr %3, i64 0, i32 1
  %279 = load ptr, ptr %memberidx42, align 8
  %280 = call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %279)
  %.not.i180 = icmp eq ptr %280, null
  br i1 %.not.i180, label %ifend.i188, label %CodeGen_get_or_codegen_enum_from_typeid.exit

ifend.i188:                                       ; preds = %if.entry39
  %memberidx.i183 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %281 = load ptr, ptr %memberidx.i183, align 8
  %memberidx.i.i184 = getelementptr inbounds %Program, ptr %281, i64 0, i32 1
  %282 = load ptr, ptr %memberidx.i.i184, align 8
  %283 = load i64, ptr %279, align 4
  %memberidx.i.i.i185 = getelementptr inbounds %Array_Module_, ptr %282, i64 0, i32 1
  %284 = load ptr, ptr %memberidx.i.i.i185, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %284, i64 %283
  %285 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i186 = getelementptr inbounds %Module, ptr %285, i64 0, i32 7
  %286 = load ptr, ptr %memberidx2.i.i186, align 8
  %memberidx3.i.i187 = getelementptr inbounds %TypeId, ptr %279, i64 0, i32 2
  %287 = load i64, ptr %memberidx3.i.i187, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Enum_, ptr %286, i64 0, i32 1
  %288 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %288, i64 %287
  %289 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_enum(ptr %0, ptr %289)
  %290 = load ptr, ptr %289, align 8
  %291 = call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %290)
  br label %CodeGen_get_or_codegen_enum_from_typeid.exit

CodeGen_get_or_codegen_enum_from_typeid.exit:     ; preds = %if.entry39, %ifend.i188
  %common.ret.op.i181 = phi ptr [ %291, %ifend.i188 ], [ %280, %if.entry39 ]
  %memberidx43 = getelementptr inbounds %CGEnumType, ptr %common.ret.op.i181, i64 0, i32 2
  %292 = load ptr, ptr %memberidx43, align 8
  %indices = alloca [1 x ptr], align 8
  store ptr %2, ptr %indices, align 8
  %293 = call ptr @LLVMTypeOf(ptr %292)
  %294 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %293, ptr %292, ptr nonnull %indices, i64 1, ptr nonnull @28)
  %295 = call ptr @LLVMTypeOf(ptr %294)
  %296 = call ptr @LLVMBuildLoad2(ptr %1, ptr %295, ptr %294, ptr nonnull @28)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_var_expr_mem(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %1, i64 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %4)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %7 = call ptr @malloc(i32 45)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(45) %7, ptr noundef nonnull align 8 dereferenceable(45) @228, i64 45, i1 false)
  %8 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 45, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 45, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %10 = call ptr %9(ptr nonnull %8)
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @210, ptr %10)
  %12 = load ptr, ptr %3, align 8
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i2 = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i2, align 8
  %memberidx1.i.i3 = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i.i3, align 4
  %memberidx2.i.i4 = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i.i4, align 4
  call void @free(ptr %10)
  %14 = load ptr, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 3
  %15 = load ptr, ptr %memberidx.i.i.i, align 8
  %16 = call ptr %15(ptr nonnull %13)
  %17 = load i64, ptr %memberidx1.i.i3, align 4
  call void @write(i64 1, ptr %16, i64 %17)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret ptr %5
}

define internal fastcc ptr @CodeGen_get_index_expr_mem(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %IndexExpression, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %IndexExpression, ptr %2, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 13
  br i1 %9, label %true_block, label %false_block

true_block:                                       ; preds = %3
  %memberidx3 = getelementptr inbounds %PointerType, ptr %7, i64 0, i32 1
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %10, i1 true)
  br label %end

false_block:                                      ; preds = %3
  %12 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %7, i1 true)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %11, %true_block ], [ %12, %false_block ]
  %13 = load i64, ptr %7, align 4
  %14 = icmp eq i64 %13, 14
  br i1 %14, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %CodeGen_get_expr_mem.exit
  %common.ret.op = phi ptr [ %24, %CodeGen_get_expr_mem.exit ], [ %27, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %end
  %indices = alloca [2 x ptr], align 8
  %15 = call ptr @LLVMIntType(i64 64)
  %16 = call ptr @LLVMConstInt(ptr %15, i64 0, i1 false)
  store ptr %16, ptr %indices, align 8
  %17 = getelementptr inbounds ptr, ptr %indices, i64 1
  store ptr %5, ptr %17, align 8
  %18 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Expression, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  switch i64 %19, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry
  %20 = call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr %18)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry
  %21 = call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr %18)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry
  %22 = call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %18, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry
  %23 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %18)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %20, %if.entry.i ], [ %21, %if.entry2.i ], [ %22, %if.entry6.i ], [ %23, %ifend8.i ]
  %24 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %ternary, ptr %common.ret.op.i, ptr nonnull %indices, i64 2, ptr nonnull @229)
  br label %common.ret

ifend:                                            ; preds = %end
  %indices_1 = alloca [1 x ptr], align 8
  store ptr %5, ptr %indices_1, align 8
  %25 = load ptr, ptr %memberidx1, align 8
  %26 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %25)
  %27 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %ternary, ptr %26, ptr nonnull %indices_1, i64 1, ptr nonnull @230)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_member_expr_mem(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %PropId, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %8)
  %.not.i97 = icmp eq ptr %9, null
  br i1 %.not.i97, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %4
  %memberidx.i99 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %10 = load ptr, ptr %memberidx.i99, align 8
  %memberidx.i.i100 = getelementptr inbounds %Program, ptr %10, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i100, align 8
  %12 = load i64, ptr %8, align 4
  %memberidx.i.i.i101 = getelementptr inbounds %Array_Module_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i.i101, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i102 = getelementptr inbounds %Module, ptr %14, i64 0, i32 4
  %15 = load ptr, ptr %memberidx2.i.i102, align 8
  %memberidx3.i.i103 = getelementptr inbounds %TypeId, ptr %8, i64 0, i32 2
  %16 = load i64, ptr %memberidx3.i.i103, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %18)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %18)
  %19 = load ptr, ptr %18, align 8
  %20 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %19)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %4, %ifend.i
  %common.ret.op.i98 = phi ptr [ %20, %ifend.i ], [ %9, %4 ]
  %21 = load ptr, ptr %memberidx, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i = getelementptr inbounds %PropId, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %23 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %22, i64 0, i32 1
  %24 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %22, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i.i, align 4
  %26 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @215, i64 %23, i64 %24, i64 %25)
  %27 = load ptr, ptr %5, align 8
  %28 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %28, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 1
  store ptr %27, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 2
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %28, i64 0, i32 3
  store i64 %26, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %29 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %30 = call ptr %29(ptr nonnull %28)
  %31 = load i64, ptr %21, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %21, i64 0, i32 2
  %32 = load i64, ptr %memberidx3.i, align 4
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @231, ptr %30, i64 %31, i64 %32)
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %30)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %36 = load ptr, ptr %common.ret.op.i98, align 8
  %memberidx4 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 3
  %37 = load ptr, ptr %memberidx4, align 8
  %38 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %35)
  %memberidx.i44 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %37, i64 0, i32 1
  %39 = load i64, ptr %memberidx.i44, align 4
  %40 = srem i64 %38, %39
  %41 = load ptr, ptr %37, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %42, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit, %else.i
  %hash.0.i = phi i64 [ %56, %else.i ], [ %40, %CodeGen_get_or_codegen_class_from_typeid.exit ]
  %43 = load ptr, ptr %37, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %43, i64 %hash.0.i
  %44 = load ptr, ptr %ptridx3.i, align 8
  %45 = load ptr, ptr %44, align 8
  %memberidx.i.i45 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  %46 = load i64, ptr %memberidx.i.i45, align 4
  %47 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i = icmp eq i64 %46, %47
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i47 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i47, align 8
  %49 = load ptr, ptr %memberidx.i.i, align 8
  %50 = call i64 @memcmp(ptr %48, ptr %49, i64 %46)
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %CodeGen_get_or_codegen_class_from_typeid.exit
  %hash.1.i = phi i64 [ %40, %CodeGen_get_or_codegen_class_from_typeid.exit ], [ %hash.0.i, %ifend.i.i ], [ %56, %else.i ]
  %52 = load ptr, ptr %37, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %52, i64 %hash.1.i
  %53 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %53, null
  br i1 %.not29.i, label %Map_string_LLVMValueRef____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %54 = add nsw i64 %hash.0.i, 1
  %55 = load i64, ptr %memberidx.i44, align 4
  %56 = srem i64 %54, %55
  %57 = load ptr, ptr %37, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %58, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %53, i64 0, i32 1
  %59 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %59, %if.entry10.i ], [ null, %while.end.i ]
  %.not = icmp eq ptr %common.ret.op.i, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %Map_string_LLVMValueRef____getitem__.exit, %ifend12
  %common.ret.op = phi ptr [ %129, %ifend12 ], [ %common.ret.op.i, %Map_string_LLVMValueRef____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %60 = icmp eq ptr %3, null
  br i1 %60, label %if.entry5, label %ifend7

if.entry5:                                        ; preds = %ifend
  %memberidx8 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 4
  %61 = load ptr, ptr %memberidx8, align 8
  %62 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %61)
  br label %ifend7

ifend7:                                           ; preds = %ifend, %if.entry5
  %ptr.0 = phi ptr [ %62, %if.entry5 ], [ %3, %ifend ]
  %indices_buffer = alloca [2 x ptr], align 8
  %63 = call ptr @LLVMInt32Type()
  %64 = call ptr @LLVMConstInt(ptr %63, i64 0, i1 false)
  store ptr %64, ptr %indices_buffer, align 8
  %65 = getelementptr inbounds ptr, ptr %indices_buffer, i64 1
  store ptr null, ptr %65, align 8
  %memberidx9 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %66 = load ptr, ptr %memberidx9, align 8
  %67 = load i64, ptr %66, align 4
  %68 = icmp eq i64 %67, 15
  br i1 %68, label %else11, label %if.entry10

if.entry10:                                       ; preds = %ifend7
  %memberidx13 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 5
  %69 = load ptr, ptr %memberidx13, align 8
  %70 = icmp ne ptr %69, null
  %. = zext i1 %70 to i64
  %arrayidx = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 1
  %71 = call ptr @LLVMInt32Type()
  %memberidx14 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 2
  %72 = load ptr, ptr %memberidx14, align 8
  %73 = call fastcc i64 @Map_string_int__hash_fnc(ptr nonnull %35)
  %memberidx.i48 = getelementptr inbounds %Map_string_int_, ptr %72, i64 0, i32 1
  %74 = load i64, ptr %memberidx.i48, align 4
  %75 = srem i64 %73, %74
  %76 = load ptr, ptr %72, align 8
  %ptridx.i49 = getelementptr inbounds ptr, ptr %76, i64 %75
  %77 = load ptr, ptr %ptridx.i49, align 8
  %.not.i50 = icmp eq ptr %77, null
  br i1 %.not.i50, label %while.end.i65, label %while.entry.i56

while.entry.i56:                                  ; preds = %if.entry10, %else.i68
  %hash.0.i51 = phi i64 [ %91, %else.i68 ], [ %75, %if.entry10 ]
  %78 = load ptr, ptr %72, align 8
  %ptridx3.i52 = getelementptr inbounds ptr, ptr %78, i64 %hash.0.i51
  %79 = load ptr, ptr %ptridx3.i52, align 8
  %80 = load ptr, ptr %79, align 8
  %memberidx.i.i53 = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx.i.i53, align 4
  %82 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i55 = icmp eq i64 %81, %82
  br i1 %.not.i.i55, label %ifend.i.i59, label %else.i68

ifend.i.i59:                                      ; preds = %while.entry.i56
  %memberidx2.i.i57 = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i.i57, align 8
  %84 = load ptr, ptr %memberidx.i.i, align 8
  %85 = call i64 @memcmp(ptr %83, ptr %84, i64 %81)
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %while.end.i65, label %else.i68

while.end.i65:                                    ; preds = %else.i68, %ifend.i.i59, %if.entry10
  %hash.1.i62 = phi i64 [ %75, %if.entry10 ], [ %hash.0.i51, %ifend.i.i59 ], [ %91, %else.i68 ]
  %87 = load ptr, ptr %72, align 8
  %ptridx9.i63 = getelementptr inbounds ptr, ptr %87, i64 %hash.1.i62
  %88 = load ptr, ptr %ptridx9.i63, align 8
  %.not29.i64 = icmp eq ptr %88, null
  br i1 %.not29.i64, label %Map_string_int____getitem__.exit, label %if.entry10.i71

else.i68:                                         ; preds = %while.entry.i56, %ifend.i.i59
  %89 = add nsw i64 %hash.0.i51, 1
  %90 = load i64, ptr %memberidx.i48, align 4
  %91 = srem i64 %89, %90
  %92 = load ptr, ptr %72, align 8
  %ptridx7.i66 = getelementptr inbounds ptr, ptr %92, i64 %91
  %93 = load ptr, ptr %ptridx7.i66, align 8
  %.not30.i67 = icmp eq ptr %93, null
  br i1 %.not30.i67, label %while.end.i65, label %while.entry.i56

if.entry10.i71:                                   ; preds = %while.end.i65
  %memberidx15.i70 = getelementptr inbounds %MapEntry_string_int_, ptr %88, i64 0, i32 1
  %94 = load i64, ptr %memberidx15.i70, align 4
  br label %Map_string_int____getitem__.exit

Map_string_int____getitem__.exit:                 ; preds = %while.end.i65, %if.entry10.i71
  %common.ret.op.i69 = phi i64 [ %94, %if.entry10.i71 ], [ 0, %while.end.i65 ]
  %95 = add nsw i64 %common.ret.op.i69, %.
  %96 = call ptr @LLVMConstInt(ptr %71, i64 %95, i1 false)
  store ptr %96, ptr %arrayidx, align 8
  br label %ifend12

else11:                                           ; preds = %ifend7
  %arrayidx15 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 1
  %97 = call ptr @LLVMInt32Type()
  %98 = call ptr @LLVMConstInt(ptr %97, i64 0, i1 false)
  store ptr %98, ptr %arrayidx15, align 8
  %99 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %36, ptr %ptr.0, ptr nonnull %indices_buffer, i64 2, ptr nonnull @28)
  %memberidx18 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 5
  %100 = load ptr, ptr %memberidx18, align 8
  %101 = call ptr @LLVMPointerType(ptr %100, i64 0)
  %102 = call ptr @LLVMBuildLoad2(ptr %1, ptr %101, ptr %99, ptr nonnull @28)
  %103 = call ptr @LLVMInt32Type()
  %memberidx20 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98, i64 0, i32 1
  %104 = load ptr, ptr %memberidx20, align 8
  %105 = call fastcc i64 @Map_string_int__hash_fnc(ptr nonnull %35)
  %memberidx.i72 = getelementptr inbounds %Map_string_int_, ptr %104, i64 0, i32 1
  %106 = load i64, ptr %memberidx.i72, align 4
  %107 = srem i64 %105, %106
  %108 = load ptr, ptr %104, align 8
  %ptridx.i73 = getelementptr inbounds ptr, ptr %108, i64 %107
  %109 = load ptr, ptr %ptridx.i73, align 8
  %.not.i74 = icmp eq ptr %109, null
  br i1 %.not.i74, label %while.end.i89, label %while.entry.i80

while.entry.i80:                                  ; preds = %else11, %else.i92
  %hash.0.i75 = phi i64 [ %123, %else.i92 ], [ %107, %else11 ]
  %110 = load ptr, ptr %104, align 8
  %ptridx3.i76 = getelementptr inbounds ptr, ptr %110, i64 %hash.0.i75
  %111 = load ptr, ptr %ptridx3.i76, align 8
  %112 = load ptr, ptr %111, align 8
  %memberidx.i.i77 = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  %113 = load i64, ptr %memberidx.i.i77, align 4
  %114 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i79 = icmp eq i64 %113, %114
  br i1 %.not.i.i79, label %ifend.i.i83, label %else.i92

ifend.i.i83:                                      ; preds = %while.entry.i80
  %memberidx2.i.i81 = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  %115 = load ptr, ptr %memberidx2.i.i81, align 8
  %116 = load ptr, ptr %memberidx.i.i, align 8
  %117 = call i64 @memcmp(ptr %115, ptr %116, i64 %113)
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %while.end.i89, label %else.i92

while.end.i89:                                    ; preds = %else.i92, %ifend.i.i83, %else11
  %hash.1.i86 = phi i64 [ %107, %else11 ], [ %hash.0.i75, %ifend.i.i83 ], [ %123, %else.i92 ]
  %119 = load ptr, ptr %104, align 8
  %ptridx9.i87 = getelementptr inbounds ptr, ptr %119, i64 %hash.1.i86
  %120 = load ptr, ptr %ptridx9.i87, align 8
  %.not29.i88 = icmp eq ptr %120, null
  br i1 %.not29.i88, label %Map_string_int____getitem__.exit96, label %if.entry10.i95

else.i92:                                         ; preds = %while.entry.i80, %ifend.i.i83
  %121 = add nsw i64 %hash.0.i75, 1
  %122 = load i64, ptr %memberidx.i72, align 4
  %123 = srem i64 %121, %122
  %124 = load ptr, ptr %104, align 8
  %ptridx7.i90 = getelementptr inbounds ptr, ptr %124, i64 %123
  %125 = load ptr, ptr %ptridx7.i90, align 8
  %.not30.i91 = icmp eq ptr %125, null
  br i1 %.not30.i91, label %while.end.i89, label %while.entry.i80

if.entry10.i95:                                   ; preds = %while.end.i89
  %memberidx15.i94 = getelementptr inbounds %MapEntry_string_int_, ptr %120, i64 0, i32 1
  %126 = load i64, ptr %memberidx15.i94, align 4
  br label %Map_string_int____getitem__.exit96

Map_string_int____getitem__.exit96:               ; preds = %while.end.i89, %if.entry10.i95
  %common.ret.op.i93 = phi i64 [ %126, %if.entry10.i95 ], [ 0, %while.end.i89 ]
  %127 = call ptr @LLVMConstInt(ptr %103, i64 %common.ret.op.i93, i1 false)
  store ptr %127, ptr %arrayidx15, align 8
  %128 = load ptr, ptr %memberidx18, align 8
  br label %ifend12

ifend12:                                          ; preds = %Map_string_int____getitem__.exit96, %Map_string_int____getitem__.exit
  %struct_type.0 = phi ptr [ %36, %Map_string_int____getitem__.exit ], [ %128, %Map_string_int____getitem__.exit96 ]
  %ptr.1 = phi ptr [ %ptr.0, %Map_string_int____getitem__.exit ], [ %102, %Map_string_int____getitem__.exit96 ]
  %129 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %struct_type.0, ptr %ptr.1, ptr nonnull %indices_buffer, i64 2, ptr nonnull @232)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_builtin_array(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
end:
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %GenericType, ptr %2, i64 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %5, i1 false)
  %memberidx1 = getelementptr inbounds %GenericType, ptr %2, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %9, i1 true)
  %11 = call ptr @LLVMBuildMalloc(ptr %1, ptr %6, ptr nonnull @28)
  %memberidx2 = getelementptr inbounds %ArrayExpression, ptr %3, i64 0, i32 4
  %12 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx3, align 4
  %14 = call i64 @llvm.smax.i64(i64 %13, i64 1)
  %15 = call ptr @LLVMIntType(i64 64)
  %16 = call ptr @LLVMConstInt(ptr %15, i64 %14, i1 false)
  %17 = call ptr @LLVMIntType(i64 64)
  %18 = call ptr @LLVMConstInt(ptr %17, i64 %13, i1 false)
  %args = alloca [2 x ptr], align 8
  store ptr %11, ptr %args, align 8
  %19 = getelementptr inbounds ptr, ptr %args, i64 1
  %20 = call ptr @LLVMSizeOf(ptr %10)
  %21 = call ptr @LLVMConstMul(ptr %16, ptr %20)
  store ptr %21, ptr %19, align 8
  %memberidx.i32 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %22 = load ptr, ptr %memberidx.i32, align 8
  %23 = call fastcc ptr @get_class_from_type(ptr %22, ptr %5)
  %memberidx1.i = getelementptr inbounds %ObjectType, ptr %5, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1.i, align 8
  %25 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %24)
  %.not.i33 = icmp eq ptr %25, null
  br i1 %.not.i33, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %end
  %26 = load ptr, ptr %memberidx.i32, align 8
  %memberidx.i.i36 = getelementptr inbounds %Program, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i.i36, align 8
  %28 = load i64, ptr %24, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i37 = getelementptr inbounds %Module, ptr %30, i64 0, i32 4
  %31 = load ptr, ptr %memberidx2.i.i37, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %24, i64 0, i32 2
  %32 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %34)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %34)
  %35 = load ptr, ptr %34, align 8
  %36 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %35)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %end, %ifend.i
  %common.ret.op.i = phi ptr [ %36, %ifend.i ], [ %25, %end ]
  %memberidx2.i = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 6
  %37 = load ptr, ptr %memberidx2.i, align 8
  %.not.i = icmp eq ptr %37, null
  br i1 %.not.i, label %else.i, label %if.entry.i

if.entry.i:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %38 = call ptr @LLVM_GetFunctionType(ptr nonnull %37)
  %39 = call ptr @LLVMBuildCall2(ptr %1, ptr %38, ptr nonnull %37, ptr nonnull %args, i64 2, ptr nonnull @28)
  br label %CodeGen_build_constructor_call.exit

else.i:                                           ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %40 = call ptr @malloc(i32 47)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(47) %40, ptr noundef nonnull align 8 dereferenceable(47) @257, i64 47, i1 false)
  %41 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %41, align 8
  %memberidx.i.i38 = getelementptr inbounds %string, ptr %41, i64 0, i32 1
  store ptr %40, ptr %memberidx.i.i38, align 8
  %memberidx1.i.i39 = getelementptr inbounds %string, ptr %41, i64 0, i32 2
  store i64 47, ptr %memberidx1.i.i39, align 4
  %memberidx2.i.i40 = getelementptr inbounds %string, ptr %41, i64 0, i32 3
  store i64 47, ptr %memberidx2.i.i40, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %42 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %43 = call ptr %42(ptr nonnull %41)
  %44 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @210, ptr %43)
  %45 = load ptr, ptr %4, align 8
  %46 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i42 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i42, align 8
  %memberidx1.i.i43 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 %44, ptr %memberidx1.i.i43, align 4
  %memberidx2.i.i44 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 %44, ptr %memberidx2.i.i44, align 4
  call void @free(ptr %43)
  %47 = load ptr, ptr %46, align 8
  %memberidx.i.i.i45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %47, i64 0, i32 3
  %48 = load ptr, ptr %memberidx.i.i.i45, align 8
  %49 = call ptr %48(ptr nonnull %46)
  %50 = load i64, ptr %memberidx1.i.i43, align 4
  call void @write(i64 1, ptr %49, i64 %50)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %CodeGen_build_constructor_call.exit

CodeGen_build_constructor_call.exit:              ; preds = %if.entry.i, %else.i
  %51 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %51, ptr noundef nonnull align 8 dereferenceable(6) @233, i64 6, i1 false)
  %52 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %52, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  store ptr %51, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %53 = call fastcc ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %11, ptr %5, ptr nonnull %52)
  %54 = call ptr @LLVMPointerType(ptr %10, i64 0)
  %55 = call ptr @LLVMBuildLoad2(ptr %1, ptr %54, ptr %53, ptr nonnull @28)
  %56 = call fastcc ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %55, ptr %3)
  %57 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %57, ptr noundef nonnull align 8 dereferenceable(6) @234, i64 6, i1 false)
  %58 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %58, align 8
  %memberidx.i.i29 = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  store ptr %57, ptr %memberidx.i.i29, align 8
  %memberidx1.i.i30 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i30, align 4
  %memberidx2.i.i31 = getelementptr inbounds %string, ptr %58, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i31, align 4
  %59 = call fastcc ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %11, ptr %5, ptr nonnull %58)
  %60 = call ptr @LLVMBuildStore(ptr %1, ptr %18, ptr %59)
  ret ptr %11
}

define internal fastcc void @CodeGen_declare_class(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = tail call ptr @malloc(i32 56)
  %5 = call ptr @malloc(i32 24)
  %6 = call ptr @malloc(i32 2048)
  store ptr %6, ptr %5, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %2, %for.body.i.i
  %i.0.i.i75 = phi i64 [ 0, %2 ], [ %8, %for.body.i.i ]
  %7 = load ptr, ptr %5, align 8
  %ptridx.i.i67 = getelementptr inbounds ptr, ptr %7, i64 %i.0.i.i75
  store ptr null, ptr %ptridx.i.i67, align 8
  %8 = add nuw nsw i64 %i.0.i.i75, 1
  %9 = icmp ult i64 %i.0.i.i75, 255
  br i1 %9, label %for.body.i.i, label %Map_string_int__constructor.exit.i

Map_string_int__constructor.exit.i:               ; preds = %for.body.i.i
  %memberidx.i66 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 1
  %memberidx2.i.i68 = getelementptr inbounds %Map_string_int_, ptr %5, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i68, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_int_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %5, ptr %memberidx.i66, align 8
  %10 = call ptr @malloc(i32 24)
  %11 = call ptr @malloc(i32 2048)
  store ptr %11, ptr %10, align 8
  br label %for.body.i12.i

for.body.i12.i:                                   ; preds = %Map_string_int__constructor.exit.i, %for.body.i12.i
  %i.0.i9.i74 = phi i64 [ 0, %Map_string_int__constructor.exit.i ], [ %13, %for.body.i12.i ]
  %12 = load ptr, ptr %10, align 8
  %ptridx.i11.i = getelementptr inbounds ptr, ptr %12, i64 %i.0.i9.i74
  store ptr null, ptr %ptridx.i11.i, align 8
  %13 = add nuw nsw i64 %i.0.i9.i74, 1
  %14 = icmp ult i64 %i.0.i9.i74, 255
  br i1 %14, label %for.body.i12.i, label %Map_string_int__constructor.exit15.i

Map_string_int__constructor.exit15.i:             ; preds = %for.body.i12.i
  %memberidx1.i69 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 2
  %memberidx2.i13.i = getelementptr inbounds %Map_string_int_, ptr %10, i64 0, i32 1
  store i64 256, ptr %memberidx2.i13.i, align 4
  %memberidx3.i14.i = getelementptr inbounds %Map_string_int_, ptr %10, i64 0, i32 2
  store i64 0, ptr %memberidx3.i14.i, align 4
  store ptr %10, ptr %memberidx1.i69, align 8
  %15 = call ptr @malloc(i32 24)
  %16 = call ptr @malloc(i32 2048)
  store ptr %16, ptr %15, align 8
  br label %for.body.i19.i

for.body.i19.i:                                   ; preds = %Map_string_int__constructor.exit15.i, %for.body.i19.i
  %i.0.i16.i73 = phi i64 [ 0, %Map_string_int__constructor.exit15.i ], [ %18, %for.body.i19.i ]
  %17 = load ptr, ptr %15, align 8
  %ptridx.i18.i = getelementptr inbounds ptr, ptr %17, i64 %i.0.i16.i73
  store ptr null, ptr %ptridx.i18.i, align 8
  %18 = add nuw nsw i64 %i.0.i16.i73, 1
  %19 = icmp ult i64 %i.0.i16.i73, 255
  br i1 %19, label %for.body.i19.i, label %CGClassType_constructor.exit

CGClassType_constructor.exit:                     ; preds = %for.body.i19.i
  %memberidx2.i70 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 3
  %memberidx2.i20.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %15, i64 0, i32 1
  store i64 256, ptr %memberidx2.i20.i, align 4
  %memberidx3.i21.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %15, i64 0, i32 2
  store i64 0, ptr %memberidx3.i21.i, align 4
  store ptr %15, ptr %memberidx2.i70, align 8
  %memberidx3.i71 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx3.i71, i8 0, i64 16, i1 false)
  %20 = load ptr, ptr %0, align 8
  %21 = call ptr @LLVMGetModuleContext(ptr %20)
  %memberidx2 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i64 0, i32 5
  %24 = load ptr, ptr %memberidx3, align 8
  %25 = call ptr %24(ptr nonnull %22)
  %26 = call ptr @LLVMStructCreateNamed(ptr %21, ptr %25)
  store ptr %26, ptr %4, align 8
  %27 = load ptr, ptr %1, align 8
  %memberidx.i62 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %28 = load ptr, ptr %memberidx.i62, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %29 = load i64, ptr %27, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 1
  %30 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i63 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i.i63, align 4
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @215, i64 %29, i64 %30, i64 %31)
  %33 = load ptr, ptr %3, align 8
  %34 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %34, align 8
  %memberidx.i.i.i64 = getelementptr inbounds %string, ptr %34, i64 0, i32 1
  store ptr %33, ptr %memberidx.i.i.i64, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %34, i64 0, i32 2
  store i64 %32, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i65 = getelementptr inbounds %string, ptr %34, i64 0, i32 3
  store i64 %32, ptr %memberidx2.i.i.i65, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call fastcc void @Map_string_CGClassType____setitem__(ptr %28, ptr nonnull %34, ptr nonnull %4)
  %35 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %35, align 8
  %memberidx.i59 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %35, i64 0, i32 2
  store i64 0, ptr %memberidx.i59, align 4
  %memberidx1.i60 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %35, i64 0, i32 3
  store i64 8, ptr %memberidx1.i60, align 4
  %memberidx2.i61 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %35, i64 0, i32 1
  %36 = call ptr @malloc(i32 64)
  store ptr %36, ptr %memberidx2.i61, align 8
  store i64 0, ptr %memberidx.i59, align 4
  call fastcc void @CodeGen_declare_static_props(ptr nonnull %0, ptr nonnull %4, ptr nonnull %1)
  call fastcc void @CodeGen_declare_class_props(ptr nonnull %0, ptr nonnull %4, ptr nonnull %1, ptr nonnull %35)
  %37 = load ptr, ptr %4, align 8
  %38 = load ptr, ptr %memberidx2.i61, align 8
  %39 = load i64, ptr %memberidx.i59, align 4
  call void @LLVMStructSetBody(ptr %37, ptr %38, i64 %39, i1 true)
  call void @free(ptr %38)
  tail call void @free(ptr %35)
  %memberidx10 = getelementptr inbounds %Class, ptr %1, i64 0, i32 3
  %40 = load ptr, ptr %memberidx10, align 8
  %.not = icmp eq ptr %40, null
  br i1 %.not, label %else, label %if.entry

if.entry:                                         ; preds = %CGClassType_constructor.exit
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %41 = load ptr, ptr %memberidx11, align 8
  %memberidx.i.i54 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i.i54, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i.i, align 8
  %44 = load i64, ptr %42, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %46, i64 0, i32 4
  %47 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %42, i64 0, i32 2
  %48 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %51 = load i64, ptr %40, align 4
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry
  %memberidx1.i55 = getelementptr inbounds %Class, ptr %50, i64 0, i32 5
  %53 = load ptr, ptr %memberidx1.i55, align 8
  %memberidx2.i56 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 2
  %54 = load i64, ptr %memberidx2.i56, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %56, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %if.entry
  %memberidx4.i = getelementptr inbounds %Class, ptr %50, i64 0, i32 4
  %57 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %40, i64 0, i32 2
  %58 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %58
  %60 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i57 = getelementptr inbounds %ClassField, ptr %60, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i57, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %61, align 8
  %memberidx.i51 = getelementptr inbounds %Array_Type_, ptr %61, i64 0, i32 2
  store i64 0, ptr %memberidx.i51, align 4
  %memberidx1.i52 = getelementptr inbounds %Array_Type_, ptr %61, i64 0, i32 3
  store i64 8, ptr %memberidx1.i52, align 4
  %memberidx2.i53 = getelementptr inbounds %Array_Type_, ptr %61, i64 0, i32 1
  %62 = call ptr @malloc(i32 64)
  store ptr %62, ptr %memberidx2.i53, align 8
  %63 = tail call ptr @malloc(i32 16)
  %64 = load ptr, ptr %1, align 8
  store i64 11, ptr %63, align 4
  %memberidx.i50 = getelementptr inbounds %ObjectType, ptr %63, i64 0, i32 1
  store ptr %64, ptr %memberidx.i50, align 8
  store ptr %63, ptr %62, align 8
  store i64 1, ptr %memberidx.i51, align 4
  %memberidx16 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 1
  %65 = load ptr, ptr %memberidx16, align 8
  %66 = load i64, ptr %memberidx1.i52, align 4
  %67 = add i64 %66, -1
  %memberidx2.i49 = getelementptr inbounds %Array_Type_, ptr %65, i64 0, i32 2
  %68 = load i64, ptr %memberidx2.i49, align 4
  %69 = icmp slt i64 %67, %68
  br i1 %69, label %while.entry.i, label %Array_Type____adda__.exit

while.entry.i:                                    ; preds = %get_class_prop_type.exit, %while.entry.i
  %70 = load i64, ptr %memberidx1.i52, align 4
  %71 = shl i64 %70, 1
  store i64 %71, ptr %memberidx1.i52, align 4
  %72 = load ptr, ptr %memberidx2.i53, align 8
  %73 = shl i64 %70, 4
  %74 = call ptr @realloc(ptr %72, i64 %73)
  store ptr %74, ptr %memberidx2.i53, align 8
  %75 = load i64, ptr %memberidx1.i52, align 4
  %76 = load i64, ptr %memberidx.i51, align 4
  %77 = sub i64 %75, %76
  %78 = load i64, ptr %memberidx2.i49, align 4
  %79 = icmp slt i64 %77, %78
  br i1 %79, label %while.entry.i, label %Array_Type____adda__.exit

Array_Type____adda__.exit:                        ; preds = %while.entry.i, %get_class_prop_type.exit
  %80 = load ptr, ptr %memberidx2.i53, align 8
  %81 = load i64, ptr %memberidx.i51, align 4
  %82 = getelementptr inbounds ptr, ptr %80, i64 %81
  %memberidx8.i = getelementptr inbounds %Array_Type_, ptr %65, i64 0, i32 1
  %83 = load ptr, ptr %memberidx8.i, align 8
  %84 = load i64, ptr %memberidx2.i49, align 4
  %85 = shl i64 %84, 3
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %82, ptr align 8 %83, i64 %85, i1 false)
  %86 = load i64, ptr %memberidx.i51, align 4
  %87 = load i64, ptr %memberidx2.i49, align 4
  %88 = add nsw i64 %87, %86
  store i64 %88, ptr %memberidx.i51, align 4
  %89 = load ptr, ptr %memberidx16, align 8
  %memberidx.i46 = getelementptr inbounds %Array_Type_, ptr %89, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i46, align 8
  call void @free(ptr %90)
  tail call void @free(ptr %89)
  store ptr %61, ptr %memberidx16, align 8
  %91 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %common.ret.op.i, i1 false)
  %memberidx19 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 6
  %92 = load ptr, ptr %memberidx2, align 8
  %93 = load ptr, ptr %92, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %93, i64 0, i32 5
  %94 = load ptr, ptr %memberidx21, align 8
  %95 = call ptr %94(ptr nonnull %92)
  %96 = alloca ptr, align 8
  %97 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %96, ptr nonnull @260, ptr %95)
  %98 = load ptr, ptr %96, align 8
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i, align 8
  %memberidx1.i45 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 %97, ptr %memberidx1.i45, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 %97, ptr %memberidx2.i, align 4
  tail call void @free(ptr %95)
  %100 = load ptr, ptr %0, align 8
  %101 = load ptr, ptr %99, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %101, i64 0, i32 5
  %102 = load ptr, ptr %memberidx1.i, align 8
  %103 = call ptr %102(ptr nonnull %99)
  %104 = call ptr @LLVMAddFunction(ptr %100, ptr %103, ptr %91)
  store ptr %104, ptr %memberidx19, align 8
  br label %ifend

else:                                             ; preds = %CGClassType_constructor.exit
  %memberidx22 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 6
  store ptr null, ptr %memberidx22, align 8
  br label %ifend

ifend:                                            ; preds = %else, %Array_Type____adda__.exit
  ret void
}

define internal fastcc void @CodeGen_codegen_del_call(ptr nocapture %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %func_ty = alloca ptr, align 8
  %5 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %5, ptr noundef nonnull align 8 dereferenceable(7) @119, i64 7, i1 false)
  %6 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %5, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i, align 4
  %7 = call fastcc ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr nonnull %6, ptr nonnull %func_ty)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %common.ret, label %ifend

common.ret:                                       ; preds = %4, %ifend
  ret void

ifend:                                            ; preds = %4
  %args = alloca [1 x ptr], align 8
  store ptr %2, ptr %args, align 8
  %9 = load ptr, ptr %func_ty, align 8
  %10 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %9, i1 false)
  %11 = call ptr @LLVMBuildCall2(ptr %1, ptr %10, ptr nonnull %7, ptr nonnull %args, i64 1, ptr nonnull @28)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_class_from_typeid(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %4 = load ptr, ptr %memberidx, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %5 = load i64, ptr %1, align 4
  %memberidx1.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 1
  %6 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i, align 4
  %8 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @215, i64 %5, i64 %6, i64 %7)
  %9 = load ptr, ptr %3, align 8
  %10 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %10, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 1
  store ptr %9, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 2
  store i64 %8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 3
  store i64 %8, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %11 = call fastcc i64 @Map_string_CGClassType__hash_fnc(ptr nonnull %10)
  %memberidx.i = getelementptr inbounds %Map_string_CGClassType_, ptr %4, i64 0, i32 1
  %12 = load i64, ptr %memberidx.i, align 4
  %13 = srem i64 %11, %12
  %14 = load ptr, ptr %4, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %15, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %2, %else.i
  %hash.0.i = phi i64 [ %29, %else.i ], [ %13, %2 ]
  %16 = load ptr, ptr %4, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %16, i64 %hash.0.i
  %17 = load ptr, ptr %ptridx3.i, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i.i1 = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i.i1, align 4
  %20 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %19, %20
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i3 = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i.i3, align 8
  %22 = load ptr, ptr %memberidx.i.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %2
  %hash.1.i = phi i64 [ %13, %2 ], [ %hash.0.i, %ifend.i.i ], [ %29, %else.i ]
  %25 = load ptr, ptr %4, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %25, i64 %hash.1.i
  %26 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %26, null
  br i1 %.not29.i, label %Map_string_CGClassType____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %27 = add nsw i64 %hash.0.i, 1
  %28 = load i64, ptr %memberidx.i, align 4
  %29 = srem i64 %27, %28
  %30 = load ptr, ptr %4, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %31, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %26, i64 0, i32 1
  %32 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_CGClassType____getitem__.exit

Map_string_CGClassType____getitem__.exit:         ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %32, %if.entry10.i ], [ null, %while.end.i ]
  ret ptr %common.ret.op.i
}

define internal fastcc ptr @CodeGen_get_enum_from_typeid(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 9
  %4 = load ptr, ptr %memberidx, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %5 = load i64, ptr %1, align 4
  %memberidx1.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 1
  %6 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i, align 4
  %8 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @215, i64 %5, i64 %6, i64 %7)
  %9 = load ptr, ptr %3, align 8
  %10 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %10, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 1
  store ptr %9, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 2
  store i64 %8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %10, i64 0, i32 3
  store i64 %8, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %11 = call fastcc i64 @Map_string_CGEnumType__hash_fnc(ptr nonnull %10)
  %memberidx.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %4, i64 0, i32 1
  %12 = load i64, ptr %memberidx.i, align 4
  %13 = srem i64 %11, %12
  %14 = load ptr, ptr %4, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %15, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %2, %else.i
  %hash.0.i = phi i64 [ %29, %else.i ], [ %13, %2 ]
  %16 = load ptr, ptr %4, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %16, i64 %hash.0.i
  %17 = load ptr, ptr %ptridx3.i, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i.i1 = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i.i1, align 4
  %20 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %19, %20
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i3 = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i.i3, align 8
  %22 = load ptr, ptr %memberidx.i.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %2
  %hash.1.i = phi i64 [ %13, %2 ], [ %hash.0.i, %ifend.i.i ], [ %29, %else.i ]
  %25 = load ptr, ptr %4, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %25, i64 %hash.1.i
  %26 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %26, null
  br i1 %.not29.i, label %Map_string_CGEnumType____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %27 = add nsw i64 %hash.0.i, 1
  %28 = load i64, ptr %memberidx.i, align 4
  %29 = srem i64 %27, %28
  %30 = load ptr, ptr %4, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %31, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %26, i64 0, i32 1
  %32 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_CGEnumType____getitem__.exit

Map_string_CGEnumType____getitem__.exit:          ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %32, %if.entry10.i ], [ null, %while.end.i ]
  ret ptr %common.ret.op.i
}

define internal fastcc ptr @CodeGen_get_member_mem_with_name(ptr nocapture %0, ptr %1, ptr %2, ptr nocapture readonly %3, ptr %4) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call fastcc ptr @get_class_from_type(ptr %6, ptr %3)
  %memberidx1 = getelementptr inbounds %Class, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %4)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %8, i64 0, i32 1
  %10 = load i64, ptr %memberidx.i, align 4
  %11 = srem i64 %9, %10
  %12 = load ptr, ptr %8, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %12, i64 %11
  %13 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %13, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %5
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %27, %else.i ], [ %11, %while.entry.i.preheader ]
  %14 = load ptr, ptr %8, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %14, i64 %hash.0.i
  %15 = load ptr, ptr %ptridx3.i, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx.i.i, align 4
  %18 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %17, %18
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  %19 = load ptr, ptr %memberidx2.i.i, align 8
  %20 = load ptr, ptr %memberidx3.i.i, align 8
  %21 = call i64 @memcmp(ptr %19, ptr %20, i64 %17)
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %5
  %hash.1.i = phi i64 [ %11, %5 ], [ %hash.0.i, %ifend.i.i ], [ %27, %else.i ]
  %23 = load ptr, ptr %8, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %23, i64 %hash.1.i
  %24 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %24, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %25 = add nsw i64 %hash.0.i, 1
  %26 = load i64, ptr %memberidx.i, align 4
  %27 = srem i64 %25, %26
  %28 = load ptr, ptr %8, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %28, i64 %27
  %29 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %29, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %24, i64 0, i32 1
  %30 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %30, %if.entry10.i ], [ null, %while.end.i ]
  %31 = icmp eq ptr %common.ret.op.i, null
  br i1 %31, label %common.ret, label %ifend

common.ret:                                       ; preds = %Map_string_PropId____getitem__.exit, %get_class_prop_type.exit
  %common.ret.op = phi ptr [ %53, %get_class_prop_type.exit ], [ null, %Map_string_PropId____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %32 = load ptr, ptr %memberidx, align 8
  %memberidx.i.i11 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i11, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i.i, align 8
  %35 = load i64, ptr %33, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %36, i64 %35
  %37 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %37, i64 0, i32 4
  %38 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %33, i64 0, i32 2
  %39 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %38, i64 0, i32 1
  %40 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %40, i64 %39
  %41 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %42 = load i64, ptr %common.ret.op.i, align 4
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i = getelementptr inbounds %Class, ptr %41, i64 0, i32 5
  %44 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %45 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %44, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %46, i64 %45
  %47 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %47, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %41, i64 0, i32 4
  %48 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %49 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %50, i64 %49
  %51 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %51, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i12 = load ptr, ptr %common.ret.op.in.i, align 8
  %52 = alloca %MemberExpression, align 8
  store i64 8, ptr %52, align 8
  %memberidx.i.i13 = getelementptr inbounds %Expression, ptr %52, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i13, align 4
  %memberidx1.i.i14 = getelementptr inbounds %Expression, ptr %52, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i14, align 8
  %memberidx.i15 = getelementptr inbounds %MemberExpression, ptr %52, i64 0, i32 4
  store ptr null, ptr %memberidx.i15, align 8
  %memberidx1.i16 = getelementptr inbounds %MemberExpression, ptr %52, i64 0, i32 5
  store ptr %common.ret.op.i, ptr %memberidx1.i16, align 8
  %memberidx2.i17 = getelementptr inbounds %Expression, ptr %52, i64 0, i32 3
  store ptr %common.ret.op.i12, ptr %memberidx2.i17, align 8
  %53 = call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr nonnull %52, ptr %2)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_member_with_name(ptr nocapture %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr writeonly %5) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call fastcc ptr @get_class_from_type(ptr %7, ptr %3)
  %memberidx1 = getelementptr inbounds %Class, ptr %8, i64 0, i32 6
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call fastcc i64 @Map_string_PropId__hash_fnc(ptr %4)
  %memberidx.i = getelementptr inbounds %Map_string_PropId_, ptr %9, i64 0, i32 1
  %11 = load i64, ptr %memberidx.i, align 4
  %12 = srem i64 %10, %11
  %13 = load ptr, ptr %9, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %14, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %6
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i
  %hash.0.i = phi i64 [ %28, %else.i ], [ %12, %while.entry.i.preheader ]
  %15 = load ptr, ptr %9, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %15, i64 %hash.0.i
  %16 = load ptr, ptr %ptridx3.i, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx.i.i, align 4
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %18, %19
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  %20 = load ptr, ptr %memberidx2.i.i, align 8
  %21 = load ptr, ptr %memberidx3.i.i, align 8
  %22 = call i64 @memcmp(ptr %20, ptr %21, i64 %18)
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %6
  %hash.1.i = phi i64 [ %12, %6 ], [ %hash.0.i, %ifend.i.i ], [ %28, %else.i ]
  %24 = load ptr, ptr %9, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %24, i64 %hash.1.i
  %25 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %25, null
  br i1 %.not29.i, label %Map_string_PropId____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %26 = add nsw i64 %hash.0.i, 1
  %27 = load i64, ptr %memberidx.i, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %9, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %30, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_PropId_, ptr %25, i64 0, i32 1
  %31 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_PropId____getitem__.exit

Map_string_PropId____getitem__.exit:              ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %31, %if.entry10.i ], [ null, %while.end.i ]
  %32 = icmp eq ptr %common.ret.op.i, null
  br i1 %32, label %common.ret, label %ifend

common.ret:                                       ; preds = %Map_string_PropId____getitem__.exit, %ifend5
  %common.ret.op = phi ptr [ %55, %ifend5 ], [ null, %Map_string_PropId____getitem__.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_PropId____getitem__.exit
  %33 = load ptr, ptr %memberidx, align 8
  %memberidx.i.i13 = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i13, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i.i, align 8
  %36 = load i64, ptr %34, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %38, i64 0, i32 4
  %39 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %34, i64 0, i32 2
  %40 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %43 = load i64, ptr %common.ret.op.i, align 4
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i = getelementptr inbounds %Class, ptr %42, i64 0, i32 5
  %45 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %46 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %48, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %42, i64 0, i32 4
  %49 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %common.ret.op.i, i64 0, i32 2
  %50 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %51, i64 %50
  %52 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %52, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i14 = load ptr, ptr %common.ret.op.in.i, align 8
  %.not = icmp eq ptr %5, null
  br i1 %.not, label %ifend5, label %if.entry3

if.entry3:                                        ; preds = %get_class_prop_type.exit
  store ptr %common.ret.op.i14, ptr %5, align 8
  br label %ifend5

ifend5:                                           ; preds = %get_class_prop_type.exit, %if.entry3
  %53 = alloca %Expression, align 8
  store i64 8, ptr %53, align 8
  %memberidx.i15 = getelementptr inbounds %Expression, ptr %53, i64 0, i32 2
  store i64 7, ptr %memberidx.i15, align 4
  %memberidx1.i16 = getelementptr inbounds %Expression, ptr %53, i64 0, i32 1
  store i1 false, ptr %memberidx1.i16, align 8
  %memberidx6 = getelementptr inbounds %Expression, ptr %53, i64 0, i32 3
  store ptr %3, ptr %memberidx6, align 8
  %54 = alloca %MemberExpression, align 8
  store i64 8, ptr %54, align 8
  %memberidx.i.i17 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i17, align 4
  %memberidx1.i.i18 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i18, align 8
  %memberidx.i19 = getelementptr inbounds %MemberExpression, ptr %54, i64 0, i32 4
  store ptr %53, ptr %memberidx.i19, align 8
  %memberidx1.i20 = getelementptr inbounds %MemberExpression, ptr %54, i64 0, i32 5
  store ptr %common.ret.op.i, ptr %memberidx1.i20, align 8
  %memberidx2.i21 = getelementptr inbounds %Expression, ptr %54, i64 0, i32 3
  store ptr %common.ret.op.i14, ptr %memberidx2.i21, align 8
  %55 = call fastcc ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr nonnull %54, ptr %2)
  br label %common.ret
}

define internal fastcc void @CodeGen_codegen_for_stmt(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMAppendBasicBlock(ptr %4, ptr nonnull @250)
  %6 = call ptr @LLVMBuildBr(ptr %1, ptr %5)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %5)
  %memberidx1 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %.not = icmp eq ptr %7, null
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr nonnull %7)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %memberidx3 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 2
  %8 = load ptr, ptr %memberidx3, align 8
  %.not87 = icmp eq ptr %8, null
  br i1 %.not87, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend
  call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr nonnull %8)
  br label %ifend6

ifend6:                                           ; preds = %ifend, %if.entry4
  %9 = load ptr, ptr %memberidx, align 8
  %10 = call ptr @LLVMAppendBasicBlock(ptr %9, ptr nonnull @251)
  %11 = load ptr, ptr %memberidx, align 8
  %12 = call ptr @LLVMAppendBasicBlock(ptr %11, ptr nonnull @252)
  %13 = load ptr, ptr %memberidx, align 8
  %14 = call ptr @LLVMAppendBasicBlock(ptr %13, ptr nonnull @253)
  %15 = load ptr, ptr %memberidx, align 8
  %16 = call ptr @LLVMAppendBasicBlock(ptr %15, ptr nonnull @254)
  %memberidx12 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %17 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %18 = load ptr, ptr %memberidx13, align 8
  store ptr %16, ptr %memberidx12, align 8
  store ptr %14, ptr %memberidx13, align 8
  %19 = call ptr @LLVMBuildBr(ptr %1, ptr %10)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %10)
  %condition = alloca ptr, align 8
  %20 = call ptr @LLVMInt1Type()
  %21 = call ptr @LLVMConstInt(ptr %20, i64 1, i1 false)
  store ptr %21, ptr %condition, align 8
  %memberidx16 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 3
  %22 = load ptr, ptr %memberidx16, align 8
  %.not88 = icmp eq ptr %22, null
  br i1 %.not88, label %ifend19, label %if.entry17

if.entry17:                                       ; preds = %ifend6
  %23 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %22)
  store ptr %23, ptr %condition, align 8
  br label %ifend19

ifend19:                                          ; preds = %ifend6, %if.entry17
  %24 = load ptr, ptr %condition, align 8
  %25 = call ptr @LLVMBuildCondBr(ptr %1, ptr %24, ptr %12, ptr %16)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %12)
  %memberidx21 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 5
  %26 = load ptr, ptr %memberidx21, align 8
  %memberidx.i98 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %27 = load i1, ptr %memberidx.i98, align 1
  store i1 false, ptr %memberidx.i98, align 1
  %28 = load ptr, ptr %26, align 8
  %29 = call ptr @malloc(i32 25)
  %memberidx.i.i99 = getelementptr inbounds %Array_Statement_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %Array_Statement_, ptr %28, i64 0, i32 2
  %31 = load i64, ptr %memberidx1.i.i100, align 4
  store i1 false, ptr %29, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 3
  store ptr %30, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 2
  store i64 %31, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %32 = icmp slt i64 %31, 1
  br i1 %32, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %ifend19, %for.body.i
  %statement.0.i107.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %30, %ifend19 ]
  %statement.0.i107 = load ptr, ptr %statement.0.i107.in, align 8
  call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i107)
  %33 = load i64, ptr %memberidx1.i.i.i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx1.i.i.i, align 4
  %35 = load ptr, ptr %memberidx2.i.i.i, align 8
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %35, i64 %33
  %36 = load i64, ptr %memberidx3.i.i.i, align 4
  %37 = icmp sge i64 %33, %36
  br i1 %37, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %ifend19
  %storemerge.lcssa = phi i1 [ %32, %ifend19 ], [ %37, %for.body.i ]
  store i1 %storemerge.lcssa, ptr %29, align 1
  call void @free(ptr nonnull %29)
  store i1 %27, ptr %memberidx.i98, align 1
  %38 = load ptr, ptr %memberidx21, align 8
  %memberidx.i = getelementptr inbounds %Block, ptr %38, i64 0, i32 1
  %39 = load i1, ptr %memberidx.i, align 1
  %memberidx1.i = getelementptr inbounds %Block, ptr %38, i64 0, i32 2
  %40 = load i1, ptr %memberidx1.i, align 1
  %41 = or i1 %39, %40
  %memberidx2.i = getelementptr inbounds %Block, ptr %38, i64 0, i32 3
  %42 = load i1, ptr %memberidx2.i, align 1
  %43 = or i1 %41, %42
  br i1 %43, label %ifend25, label %if.entry23

if.entry23:                                       ; preds = %CodeGen_codegen_block.exit
  %44 = call ptr @LLVMBuildBr(ptr %1, ptr %14)
  br label %ifend25

ifend25:                                          ; preds = %CodeGen_codegen_block.exit, %if.entry23
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %14)
  %memberidx26 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 4
  %45 = load ptr, ptr %memberidx26, align 8
  %.not89 = icmp eq ptr %45, null
  br i1 %.not89, label %ifend29, label %if.entry27

if.entry27:                                       ; preds = %ifend25
  call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr nonnull %45)
  br label %ifend29

ifend29:                                          ; preds = %ifend25, %if.entry27
  %46 = call ptr @LLVMBuildBr(ptr %1, ptr %10)
  store ptr %17, ptr %memberidx12, align 8
  store ptr %18, ptr %memberidx13, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %16)
  %47 = load ptr, ptr %memberidx1, align 8
  %.not90 = icmp eq ptr %47, null
  br i1 %.not90, label %ifend36, label %if.entry34

if.entry34:                                       ; preds = %ifend29
  %memberidx38 = getelementptr inbounds %VarDeclaration, ptr %47, i64 0, i32 2
  %48 = load ptr, ptr %memberidx38, align 8
  %49 = alloca %VarAccessExpression, align 8
  %memberidx39 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %50 = load ptr, ptr %memberidx39, align 8
  %memberidx.i91 = getelementptr inbounds %Program, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %VarId, ptr %48, i64 0, i32 1
  %52 = load i64, ptr %memberidx1.i92, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i93 = getelementptr inbounds %Module, ptr %54, i64 0, i32 2
  %55 = load ptr, ptr %memberidx2.i93, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %48, i64 0, i32 2
  %56 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Var_, ptr %55, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i6.i, align 8
  %59 = load ptr, ptr %58, align 8
  store i64 8, ptr %49, align 8
  %memberidx.i.i94 = getelementptr inbounds %Expression, ptr %49, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i94, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %49, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 8
  %memberidx.i95 = getelementptr inbounds %VarAccessExpression, ptr %49, i64 0, i32 4
  store ptr %48, ptr %memberidx.i95, align 8
  %memberidx1.i96 = getelementptr inbounds %Expression, ptr %49, i64 0, i32 3
  store ptr %59, ptr %memberidx1.i96, align 8
  %60 = load i64, ptr %48, align 4
  %61 = icmp eq i64 %60, 2
  store i1 %61, ptr %memberidx1.i.i, align 8
  %62 = call fastcc ptr @CodeGen_codegen_var_access_exp(ptr %0, ptr %1, ptr nonnull %49)
  %63 = call ptr @LLVMBuildFree(ptr %1, ptr %62)
  br label %ifend36

ifend36:                                          ; preds = %ifend29, %if.entry34
  ret void
}

define internal fastcc ptr @CodeGen_codegen_member_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 4
  %10 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = call fastcc i1 @is_object(ptr %11)
  br i1 %12, label %if.entry, label %ifend

if.entry:                                         ; preds = %4
  %13 = call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %2, ptr %3)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %14 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %15 = load ptr, ptr %memberidx3, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %14, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i.i, align 8
  %18 = load i64, ptr %16, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %20, i64 0, i32 4
  %21 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %16, i64 0, i32 2
  %22 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %25 = load i64, ptr %15, align 4
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry
  %memberidx1.i = getelementptr inbounds %Class, ptr %24, i64 0, i32 5
  %27 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %15, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %30, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i:                                          ; preds = %if.entry
  %memberidx4.i = getelementptr inbounds %Class, ptr %24, i64 0, i32 4
  %31 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %15, i64 0, i32 2
  %32 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %34, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load i64, ptr %common.ret.op.in.i, align 4
  %35 = icmp eq i64 %common.ret.op.i, 1
  %memberidx4 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %36 = load ptr, ptr %memberidx4, align 8
  %37 = load i64, ptr %36, align 4
  %38 = icmp eq i64 %37, 15
  %39 = and i1 %35, %38
  br i1 %39, label %common.ret, label %ifend7

ifend:                                            ; preds = %4
  %memberidx10 = getelementptr inbounds %VarAccessExpression, ptr %10, i64 0, i32 4
  %40 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %41 = load ptr, ptr %memberidx11, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  %memberidx.i = getelementptr inbounds %PropId, ptr %41, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %43 = load i64, ptr %42, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %42, i64 0, i32 1
  %44 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %42, i64 0, i32 2
  %45 = load i64, ptr %memberidx2.i.i, align 4
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %8, ptr nonnull @215, i64 %43, i64 %44, i64 %45)
  %47 = load ptr, ptr %8, align 8
  %48 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i.i.i51 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i.i.i51, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 %46, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i52 = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 %46, ptr %memberidx2.i.i.i52, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  %49 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %50 = call ptr %49(ptr nonnull %48)
  %51 = load i64, ptr %41, align 4
  %memberidx3.i54 = getelementptr inbounds %PropId, ptr %41, i64 0, i32 2
  %52 = load i64, ptr %memberidx3.i54, align 4
  %53 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %9, ptr nonnull @231, ptr %50, i64 %51, i64 %52)
  %54 = load ptr, ptr %9, align 8
  %55 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %55, align 8
  %memberidx.i.i55 = getelementptr inbounds %string, ptr %55, i64 0, i32 1
  store ptr %54, ptr %memberidx.i.i55, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %55, i64 0, i32 2
  store i64 %53, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %55, i64 0, i32 3
  store i64 %53, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %50)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  %56 = load i64, ptr %40, align 4
  switch i64 %56, label %common.ret [
    i64 3, label %if.entry13
    i64 4, label %if.entry29
  ]

common.ret:                                       ; preds = %ifend22, %get_class_prop_visibility.exit, %if.entry10.i119, %while.end.i113, %ifend, %ifend26, %ifend7
  %common.ret.op = phi ptr [ %58, %ifend7 ], [ %123, %ifend26 ], [ null, %ifend ], [ %171, %if.entry10.i119 ], [ null, %while.end.i113 ], [ %13, %get_class_prop_visibility.exit ], [ %common.ret.op.i73, %ifend22 ]
  ret ptr %common.ret.op

ifend7:                                           ; preds = %get_class_prop_visibility.exit
  %57 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %36, i1 true)
  %58 = call ptr @LLVMBuildLoad2(ptr %1, ptr %57, ptr %13, ptr nonnull @28)
  br label %common.ret

if.entry13:                                       ; preds = %ifend
  %59 = call ptr @malloc(i32 24)
  %memberidx.i56 = getelementptr inbounds %VarId, ptr %40, i64 0, i32 1
  %60 = load i64, ptr %memberidx.i56, align 4
  %memberidx1.i57 = getelementptr inbounds %VarId, ptr %40, i64 0, i32 2
  %61 = load i64, ptr %memberidx1.i57, align 4
  store i64 %60, ptr %59, align 4
  %memberidx1.i.i.i58 = getelementptr inbounds %TypeId, ptr %59, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i58, align 4
  %memberidx2.i.i.i59 = getelementptr inbounds %TypeId, ptr %59, i64 0, i32 2
  store i64 %61, ptr %memberidx2.i.i.i59, align 4
  %62 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr nonnull %59)
  %.not.i130 = icmp eq ptr %62, null
  br i1 %.not.i130, label %ifend.i141, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i141:                                       ; preds = %if.entry13
  %memberidx.i133 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %63 = load ptr, ptr %memberidx.i133, align 8
  %memberidx.i.i134 = getelementptr inbounds %Program, ptr %63, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i.i134, align 8
  %memberidx.i.i.i135 = getelementptr inbounds %Array_Module_, ptr %64, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i.i.i135, align 8
  %ptridx.i.i.i136 = getelementptr inbounds ptr, ptr %65, i64 %60
  %66 = load ptr, ptr %ptridx.i.i.i136, align 8
  %memberidx2.i.i137 = getelementptr inbounds %Module, ptr %66, i64 0, i32 4
  %67 = load ptr, ptr %memberidx2.i.i137, align 8
  %memberidx.i5.i.i139 = getelementptr inbounds %Array_Class_, ptr %67, i64 0, i32 1
  %68 = load ptr, ptr %memberidx.i5.i.i139, align 8
  %ptridx.i6.i.i140 = getelementptr inbounds ptr, ptr %68, i64 %61
  %69 = load ptr, ptr %ptridx.i6.i.i140, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %69)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %69)
  %70 = load ptr, ptr %69, align 8
  %71 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %70)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry13, %ifend.i141
  %common.ret.op.i131 = phi ptr [ %71, %ifend.i141 ], [ %62, %if.entry13 ]
  %72 = icmp eq ptr %common.ret.op.i131, null
  br i1 %72, label %if.entry16, label %ifend18

if.entry16:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %73 = call ptr @malloc(i32 51)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(51) %73, ptr noundef nonnull align 8 dereferenceable(51) @243, i64 51, i1 false)
  %74 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %74, align 8
  %memberidx.i.i60 = getelementptr inbounds %string, ptr %74, i64 0, i32 1
  store ptr %73, ptr %memberidx.i.i60, align 8
  %memberidx1.i.i61 = getelementptr inbounds %string, ptr %74, i64 0, i32 2
  store i64 51, ptr %memberidx1.i.i61, align 4
  %memberidx2.i.i62 = getelementptr inbounds %string, ptr %74, i64 0, i32 3
  store i64 51, ptr %memberidx2.i.i62, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %75 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %76 = call ptr %75(ptr nonnull %74)
  %77 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %7, ptr nonnull @210, ptr %76)
  %78 = load ptr, ptr %7, align 8
  %79 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %79, align 8
  %memberidx.i.i64 = getelementptr inbounds %string, ptr %79, i64 0, i32 1
  store ptr %78, ptr %memberidx.i.i64, align 8
  %memberidx1.i.i65 = getelementptr inbounds %string, ptr %79, i64 0, i32 2
  store i64 %77, ptr %memberidx1.i.i65, align 4
  %memberidx2.i.i66 = getelementptr inbounds %string, ptr %79, i64 0, i32 3
  store i64 %77, ptr %memberidx2.i.i66, align 4
  call void @free(ptr %76)
  %80 = load ptr, ptr %79, align 8
  %memberidx.i.i.i67 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %80, i64 0, i32 3
  %81 = load ptr, ptr %memberidx.i.i.i67, align 8
  %82 = call ptr %81(ptr nonnull %79)
  %83 = load i64, ptr %memberidx1.i.i65, align 4
  call void @write(i64 1, ptr %82, i64 %83)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  br label %ifend18

ifend18:                                          ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit, %if.entry16
  %memberidx19 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i131, i64 0, i32 3
  %84 = load ptr, ptr %memberidx19, align 8
  %85 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %55)
  %memberidx.i69 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %84, i64 0, i32 1
  %86 = load i64, ptr %memberidx.i69, align 4
  %87 = srem i64 %85, %86
  %88 = load ptr, ptr %84, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %88, i64 %87
  %89 = load ptr, ptr %ptridx.i, align 8
  %.not.i = icmp eq ptr %89, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %ifend18, %else.i
  %hash.0.i = phi i64 [ %103, %else.i ], [ %87, %ifend18 ]
  %90 = load ptr, ptr %84, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %90, i64 %hash.0.i
  %91 = load ptr, ptr %ptridx3.i, align 8
  %92 = load ptr, ptr %91, align 8
  %memberidx.i.i70 = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  %93 = load i64, ptr %memberidx.i.i70, align 4
  %94 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i = icmp eq i64 %93, %94
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i72 = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i.i72, align 8
  %96 = load ptr, ptr %memberidx.i.i55, align 8
  %97 = call i64 @memcmp(ptr %95, ptr %96, i64 %93)
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %ifend18
  %hash.1.i = phi i64 [ %87, %ifend18 ], [ %hash.0.i, %ifend.i.i ], [ %103, %else.i ]
  %99 = load ptr, ptr %84, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %99, i64 %hash.1.i
  %100 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %100, null
  br i1 %.not29.i, label %Map_string_LLVMValueRef____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %101 = add nsw i64 %hash.0.i, 1
  %102 = load i64, ptr %memberidx.i69, align 4
  %103 = srem i64 %101, %102
  %104 = load ptr, ptr %84, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %104, i64 %103
  %105 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %105, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %100, i64 0, i32 1
  %106 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i73 = phi ptr [ %106, %if.entry10.i ], [ null, %while.end.i ]
  %107 = icmp eq ptr %common.ret.op.i73, null
  br i1 %107, label %if.entry20, label %ifend22

if.entry20:                                       ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %108 = call ptr @malloc(i32 59)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(59) %108, ptr noundef nonnull align 8 dereferenceable(59) @244, i64 59, i1 false)
  %109 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %109, align 8
  %memberidx.i.i74 = getelementptr inbounds %string, ptr %109, i64 0, i32 1
  store ptr %108, ptr %memberidx.i.i74, align 8
  %memberidx1.i.i75 = getelementptr inbounds %string, ptr %109, i64 0, i32 2
  store i64 59, ptr %memberidx1.i.i75, align 4
  %memberidx2.i.i76 = getelementptr inbounds %string, ptr %109, i64 0, i32 3
  store i64 59, ptr %memberidx2.i.i76, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %110 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %111 = call ptr %110(ptr nonnull %109)
  %112 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @210, ptr %111)
  %113 = load ptr, ptr %6, align 8
  %114 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %114, align 8
  %memberidx.i.i78 = getelementptr inbounds %string, ptr %114, i64 0, i32 1
  store ptr %113, ptr %memberidx.i.i78, align 8
  %memberidx1.i.i79 = getelementptr inbounds %string, ptr %114, i64 0, i32 2
  store i64 %112, ptr %memberidx1.i.i79, align 4
  %memberidx2.i.i80 = getelementptr inbounds %string, ptr %114, i64 0, i32 3
  store i64 %112, ptr %memberidx2.i.i80, align 4
  call void @free(ptr %111)
  %115 = load ptr, ptr %114, align 8
  %memberidx.i.i.i81 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %115, i64 0, i32 3
  %116 = load ptr, ptr %memberidx.i.i.i81, align 8
  %117 = call ptr %116(ptr nonnull %114)
  %118 = load i64, ptr %memberidx1.i.i79, align 4
  call void @write(i64 1, ptr %117, i64 %118)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  br label %ifend22

ifend22:                                          ; preds = %Map_string_LLVMValueRef____getitem__.exit, %if.entry20
  %memberidx23 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %119 = load ptr, ptr %memberidx23, align 8
  %120 = load i64, ptr %119, align 4
  %121 = icmp eq i64 %120, 15
  br i1 %121, label %common.ret, label %ifend26

ifend26:                                          ; preds = %ifend22
  %122 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %119, i1 true)
  %123 = call ptr @LLVMBuildLoad2(ptr %1, ptr %122, ptr %common.ret.op.i73, ptr nonnull @28)
  br label %common.ret

if.entry29:                                       ; preds = %ifend
  %124 = call ptr @malloc(i32 24)
  %memberidx.i83 = getelementptr inbounds %VarId, ptr %40, i64 0, i32 1
  %125 = load i64, ptr %memberidx.i83, align 4
  %memberidx1.i84 = getelementptr inbounds %VarId, ptr %40, i64 0, i32 2
  %126 = load i64, ptr %memberidx1.i84, align 4
  store i64 %125, ptr %124, align 4
  %memberidx1.i.i.i85 = getelementptr inbounds %TypeId, ptr %124, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i.i85, align 4
  %memberidx2.i.i.i86 = getelementptr inbounds %TypeId, ptr %124, i64 0, i32 2
  store i64 %126, ptr %memberidx2.i.i.i86, align 4
  %127 = call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr nonnull %124)
  %.not.i121 = icmp eq ptr %127, null
  br i1 %.not.i121, label %ifend.i129, label %CodeGen_get_or_codegen_enum_from_typeid.exit

ifend.i129:                                       ; preds = %if.entry29
  %memberidx.i124 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %128 = load ptr, ptr %memberidx.i124, align 8
  %memberidx.i.i125 = getelementptr inbounds %Program, ptr %128, i64 0, i32 1
  %129 = load ptr, ptr %memberidx.i.i125, align 8
  %memberidx.i.i.i126 = getelementptr inbounds %Array_Module_, ptr %129, i64 0, i32 1
  %130 = load ptr, ptr %memberidx.i.i.i126, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %130, i64 %125
  %131 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i127 = getelementptr inbounds %Module, ptr %131, i64 0, i32 7
  %132 = load ptr, ptr %memberidx2.i.i127, align 8
  %memberidx.i5.i.i = getelementptr inbounds %Array_Enum_, ptr %132, i64 0, i32 1
  %133 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %133, i64 %126
  %134 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_enum(ptr %0, ptr %134)
  %135 = load ptr, ptr %134, align 8
  %136 = call fastcc ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %135)
  br label %CodeGen_get_or_codegen_enum_from_typeid.exit

CodeGen_get_or_codegen_enum_from_typeid.exit:     ; preds = %if.entry29, %ifend.i129
  %common.ret.op.i122 = phi ptr [ %136, %ifend.i129 ], [ %127, %if.entry29 ]
  %137 = icmp eq ptr %common.ret.op.i122, null
  br i1 %137, label %if.entry32, label %ifend34

if.entry32:                                       ; preds = %CodeGen_get_or_codegen_enum_from_typeid.exit
  %138 = call ptr @malloc(i32 50)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(50) %138, ptr noundef nonnull align 8 dereferenceable(50) @245, i64 50, i1 false)
  %139 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %139, align 8
  %memberidx.i.i87 = getelementptr inbounds %string, ptr %139, i64 0, i32 1
  store ptr %138, ptr %memberidx.i.i87, align 8
  %memberidx1.i.i88 = getelementptr inbounds %string, ptr %139, i64 0, i32 2
  store i64 50, ptr %memberidx1.i.i88, align 4
  %memberidx2.i.i89 = getelementptr inbounds %string, ptr %139, i64 0, i32 3
  store i64 50, ptr %memberidx2.i.i89, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %140 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %141 = call ptr %140(ptr nonnull %139)
  %142 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @210, ptr %141)
  %143 = load ptr, ptr %5, align 8
  %144 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %144, align 8
  %memberidx.i.i91 = getelementptr inbounds %string, ptr %144, i64 0, i32 1
  store ptr %143, ptr %memberidx.i.i91, align 8
  %memberidx1.i.i92 = getelementptr inbounds %string, ptr %144, i64 0, i32 2
  store i64 %142, ptr %memberidx1.i.i92, align 4
  %memberidx2.i.i93 = getelementptr inbounds %string, ptr %144, i64 0, i32 3
  store i64 %142, ptr %memberidx2.i.i93, align 4
  call void @free(ptr %141)
  %145 = load ptr, ptr %144, align 8
  %memberidx.i.i.i94 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %145, i64 0, i32 3
  %146 = load ptr, ptr %memberidx.i.i.i94, align 8
  %147 = call ptr %146(ptr nonnull %144)
  %148 = load i64, ptr %memberidx1.i.i92, align 4
  call void @write(i64 1, ptr %147, i64 %148)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  br label %ifend34

ifend34:                                          ; preds = %CodeGen_get_or_codegen_enum_from_typeid.exit, %if.entry32
  %memberidx35 = getelementptr inbounds %CGEnumType, ptr %common.ret.op.i122, i64 0, i32 1
  %149 = load ptr, ptr %memberidx35, align 8
  %150 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %55)
  %memberidx.i96 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %149, i64 0, i32 1
  %151 = load i64, ptr %memberidx.i96, align 4
  %152 = srem i64 %150, %151
  %153 = load ptr, ptr %149, align 8
  %ptridx.i97 = getelementptr inbounds ptr, ptr %153, i64 %152
  %154 = load ptr, ptr %ptridx.i97, align 8
  %.not.i98 = icmp eq ptr %154, null
  br i1 %.not.i98, label %while.end.i113, label %while.entry.i104

while.entry.i104:                                 ; preds = %ifend34, %else.i116
  %hash.0.i99 = phi i64 [ %168, %else.i116 ], [ %152, %ifend34 ]
  %155 = load ptr, ptr %149, align 8
  %ptridx3.i100 = getelementptr inbounds ptr, ptr %155, i64 %hash.0.i99
  %156 = load ptr, ptr %ptridx3.i100, align 8
  %157 = load ptr, ptr %156, align 8
  %memberidx.i.i101 = getelementptr inbounds %string, ptr %157, i64 0, i32 2
  %158 = load i64, ptr %memberidx.i.i101, align 4
  %159 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i103 = icmp eq i64 %158, %159
  br i1 %.not.i.i103, label %ifend.i.i107, label %else.i116

ifend.i.i107:                                     ; preds = %while.entry.i104
  %memberidx2.i.i105 = getelementptr inbounds %string, ptr %157, i64 0, i32 1
  %160 = load ptr, ptr %memberidx2.i.i105, align 8
  %161 = load ptr, ptr %memberidx.i.i55, align 8
  %162 = call i64 @memcmp(ptr %160, ptr %161, i64 %158)
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %while.end.i113, label %else.i116

while.end.i113:                                   ; preds = %else.i116, %ifend.i.i107, %ifend34
  %hash.1.i110 = phi i64 [ %152, %ifend34 ], [ %hash.0.i99, %ifend.i.i107 ], [ %168, %else.i116 ]
  %164 = load ptr, ptr %149, align 8
  %ptridx9.i111 = getelementptr inbounds ptr, ptr %164, i64 %hash.1.i110
  %165 = load ptr, ptr %ptridx9.i111, align 8
  %.not29.i112 = icmp eq ptr %165, null
  br i1 %.not29.i112, label %common.ret, label %if.entry10.i119

else.i116:                                        ; preds = %while.entry.i104, %ifend.i.i107
  %166 = add nsw i64 %hash.0.i99, 1
  %167 = load i64, ptr %memberidx.i96, align 4
  %168 = srem i64 %166, %167
  %169 = load ptr, ptr %149, align 8
  %ptridx7.i114 = getelementptr inbounds ptr, ptr %169, i64 %168
  %170 = load ptr, ptr %ptridx7.i114, align 8
  %.not30.i115 = icmp eq ptr %170, null
  br i1 %.not30.i115, label %while.end.i113, label %while.entry.i104

if.entry10.i119:                                  ; preds = %while.end.i113
  %memberidx15.i118 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %165, i64 0, i32 1
  %171 = load ptr, ptr %memberidx15.i118, align 8
  br label %common.ret
}

define internal fastcc void @CodeGen_declare_static_props(ptr nocapture %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Class, ptr %2, i64 0, i32 7
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @malloc(i32 25)
  %7 = load ptr, ptr %5, align 8
  %memberidx1.i48 = getelementptr inbounds %Map_string_PropId_, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %memberidx1.i48, align 4
  %memberidx2.i49 = getelementptr inbounds %Map_string_PropId_, ptr %5, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i49, align 4
  store i1 false, ptr %6, align 1
  %memberidx1.i.i50 = getelementptr inbounds %MapIterator_string_PropId_, ptr %6, i64 0, i32 1
  store ptr %7, ptr %memberidx1.i.i50, align 8
  %memberidx2.i.i51 = getelementptr inbounds %MapIterator_string_PropId_, ptr %6, i64 0, i32 2
  store i64 %8, ptr %memberidx2.i.i51, align 4
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %6, i64 0, i32 3
  store i64 %9, ptr %memberidx3.i.i, align 4
  %10 = add nsw i64 %8, -1
  store i64 %10, ptr %memberidx2.i.i51, align 4
  %11 = icmp sgt i64 %8, 0
  br i1 %11, label %while.entry.i42.preheader, label %MapIterator_string_PropId__next.exit47

while.entry.i42.preheader:                        ; preds = %for.entry
  %memberidx1.i.i50.promoted = load ptr, ptr %memberidx1.i.i50, align 8
  br label %while.entry.i42

while.entry.i42:                                  ; preds = %while.entry.i42.preheader, %ifend.i46
  %12 = phi ptr [ %memberidx1.i.i50.promoted, %while.entry.i42.preheader ], [ %incdec.ptr.i40, %ifend.i46 ]
  %incdec.ptr.i40 = getelementptr inbounds ptr, ptr %12, i64 1
  %13 = load ptr, ptr %12, align 8
  %.not.i41 = icmp eq ptr %13, null
  br i1 %.not.i41, label %ifend.i46, label %MapIterator_string_PropId__next.exit47.loopexit

ifend.i46:                                        ; preds = %while.entry.i42
  %14 = load i64, ptr %memberidx2.i.i51, align 4
  %15 = add nsw i64 %14, -1
  store i64 %15, ptr %memberidx2.i.i51, align 4
  %16 = icmp sgt i64 %14, 0
  br i1 %16, label %while.entry.i42, label %MapIterator_string_PropId__next.exit47.loopexit

MapIterator_string_PropId__next.exit47.loopexit:  ; preds = %ifend.i46, %while.entry.i42
  store ptr %incdec.ptr.i40, ptr %memberidx1.i.i50, align 8
  br label %MapIterator_string_PropId__next.exit47

MapIterator_string_PropId__next.exit47:           ; preds = %MapIterator_string_PropId__next.exit47.loopexit, %for.entry
  %storemerge5253 = add nsw i64 %9, -1
  %storemerge54 = icmp slt i64 %9, 1
  br i1 %storemerge54, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit47
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx5 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %memberidx11 = getelementptr inbounds %Class, ptr %2, i64 0, i32 4
  %memberidx14 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 3
  %memberidx1.i.i50.promoted57 = load ptr, ptr %memberidx1.i.i50, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit
  %incdec.ptr.i.lcssa59 = phi ptr [ %memberidx1.i.i50.promoted57, %for.body.lr.ph ], [ %incdec.ptr.i.lcssa58, %MapIterator_string_PropId__next.exit ]
  %storemerge5255 = phi i64 [ %storemerge5253, %for.body.lr.ph ], [ %storemerge52, %MapIterator_string_PropId__next.exit ]
  %entry.0.in = getelementptr inbounds ptr, ptr %incdec.ptr.i.lcssa59, i64 -1
  %entry.0 = load ptr, ptr %entry.0.in, align 8
  %memberidx2 = getelementptr inbounds %MapEntry_string_PropId_, ptr %entry.0, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = load ptr, ptr %entry.0, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i32 = getelementptr inbounds %PropId, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i32, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %20 = load i64, ptr %19, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %19, i64 0, i32 1
  %21 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %19, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i.i, align 4
  %23 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @215, i64 %20, i64 %21, i64 %22)
  %24 = load ptr, ptr %3, align 8
  %25 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %25, align 8
  %memberidx.i.i.i33 = getelementptr inbounds %string, ptr %25, i64 0, i32 1
  store ptr %24, ptr %memberidx.i.i.i33, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %25, i64 0, i32 2
  store i64 %23, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i34 = getelementptr inbounds %string, ptr %25, i64 0, i32 3
  store i64 %23, ptr %memberidx2.i.i.i34, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %26 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %27 = call ptr %26(ptr nonnull %25)
  %28 = load i64, ptr %17, align 4
  %memberidx3.i36 = getelementptr inbounds %PropId, ptr %17, i64 0, i32 2
  %29 = load i64, ptr %memberidx3.i36, align 4
  %30 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @231, ptr %27, i64 %28, i64 %29)
  %31 = load ptr, ptr %4, align 8
  %32 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %32, align 8
  %memberidx.i.i37 = getelementptr inbounds %string, ptr %32, i64 0, i32 1
  store ptr %31, ptr %memberidx.i.i37, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %32, i64 0, i32 2
  store i64 %30, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %32, i64 0, i32 3
  store i64 %30, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %27)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %33 = load ptr, ptr %memberidx4, align 8
  %34 = load ptr, ptr %memberidx.i32, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i.i, align 8
  %36 = load i64, ptr %34, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %38, i64 0, i32 4
  %39 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %34, i64 0, i32 2
  %40 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %43 = load i64, ptr %17, align 4
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %if.entry.i, label %ifend.i31

if.entry.i:                                       ; preds = %for.body
  %memberidx1.i29 = getelementptr inbounds %Class, ptr %42, i64 0, i32 5
  %45 = load ptr, ptr %memberidx1.i29, align 8
  %46 = load i64, ptr %memberidx3.i36, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %48, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i31:                                        ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %42, i64 0, i32 4
  %49 = load ptr, ptr %memberidx4.i, align 8
  %50 = load i64, ptr %memberidx3.i36, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %51, i64 %50
  %52 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %52, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i31
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i31 ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %53 = call fastcc i1 @is_object(ptr %common.ret.op.i)
  %54 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i, i1 %53)
  %55 = load ptr, ptr %memberidx5, align 8
  %56 = load ptr, ptr %55, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx6, align 8
  %58 = call ptr %57(ptr nonnull %55)
  %59 = load ptr, ptr %18, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 5
  %60 = load ptr, ptr %memberidx7, align 8
  %61 = call ptr %60(ptr nonnull %18)
  %62 = alloca ptr, align 8
  %63 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %62, ptr nonnull @88, ptr %58, ptr %61)
  %64 = load ptr, ptr %62, align 8
  %65 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %65, align 8
  %memberidx.i26 = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  store ptr %64, ptr %memberidx.i26, align 8
  %memberidx1.i27 = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  store i64 %63, ptr %memberidx1.i27, align 4
  %memberidx2.i28 = getelementptr inbounds %string, ptr %65, i64 0, i32 3
  store i64 %63, ptr %memberidx2.i28, align 4
  tail call void @free(ptr %58)
  tail call void @free(ptr %61)
  %static_prop_value = alloca ptr, align 8
  store ptr null, ptr %static_prop_value, align 8
  %66 = load i64, ptr %17, align 4
  %67 = icmp eq i64 %66, 0
  %68 = load ptr, ptr %0, align 8
  %69 = load ptr, ptr %65, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %69, i64 0, i32 5
  %70 = load ptr, ptr %memberidx1.i, align 8
  %71 = call ptr %70(ptr nonnull %65)
  br i1 %67, label %if.entry, label %else

for.cond.for.end_crit_edge:                       ; preds = %MapIterator_string_PropId__next.exit
  store ptr %incdec.ptr.i.lcssa58, ptr %memberidx1.i.i50, align 8
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %MapIterator_string_PropId__next.exit47
  %storemerge.lcssa = phi i1 [ true, %for.cond.for.end_crit_edge ], [ %storemerge54, %MapIterator_string_PropId__next.exit47 ]
  %storemerge52.lcssa = phi i64 [ -1, %for.cond.for.end_crit_edge ], [ %storemerge5253, %MapIterator_string_PropId__next.exit47 ]
  store i64 %storemerge52.lcssa, ptr %memberidx3.i.i, align 4
  store i1 %storemerge.lcssa, ptr %6, align 1
  tail call void @free(ptr nonnull %6)
  ret void

if.entry:                                         ; preds = %get_class_prop_type.exit
  %72 = call ptr @LLVMAddFunction(ptr %68, ptr %71, ptr %54)
  store ptr %72, ptr %static_prop_value, align 8
  br label %ifend

else:                                             ; preds = %get_class_prop_type.exit
  %73 = call ptr @LLVMAddGlobal(ptr %68, ptr %54, ptr %71)
  store ptr %73, ptr %static_prop_value, align 8
  %74 = load ptr, ptr %memberidx11, align 8
  %75 = load i64, ptr %memberidx3.i36, align 4
  %memberidx.i25 = getelementptr inbounds %Array_ClassField_, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i25, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %76, i64 %75
  %77 = load ptr, ptr %ptridx.i, align 8
  %memberidx13 = getelementptr inbounds %ClassField, ptr %77, i64 0, i32 5
  %78 = load ptr, ptr %memberidx13, align 8
  %79 = call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr null, ptr %78)
  call void @LLVMSetInitializer(ptr %73, ptr %79)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %80 = load ptr, ptr %memberidx14, align 8
  %81 = load ptr, ptr %static_prop_value, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %80, ptr nonnull %32, ptr %81)
  %82 = load i64, ptr %memberidx2.i.i51, align 4
  %83 = add nsw i64 %82, -1
  store i64 %83, ptr %memberidx2.i.i51, align 4
  %84 = icmp sgt i64 %82, 0
  br i1 %84, label %while.entry.i, label %MapIterator_string_PropId__next.exit

while.entry.i:                                    ; preds = %ifend, %ifend.i
  %85 = phi ptr [ %incdec.ptr.i, %ifend.i ], [ %incdec.ptr.i.lcssa59, %ifend ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %85, i64 1
  %86 = load ptr, ptr %85, align 8
  %.not.i = icmp eq ptr %86, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit

ifend.i:                                          ; preds = %while.entry.i
  %87 = load i64, ptr %memberidx2.i.i51, align 4
  %88 = add nsw i64 %87, -1
  store i64 %88, ptr %memberidx2.i.i51, align 4
  %89 = icmp sgt i64 %87, 0
  br i1 %89, label %while.entry.i, label %MapIterator_string_PropId__next.exit

MapIterator_string_PropId__next.exit:             ; preds = %while.entry.i, %ifend.i, %ifend
  %incdec.ptr.i.lcssa58 = phi ptr [ %incdec.ptr.i.lcssa59, %ifend ], [ %incdec.ptr.i, %ifend.i ], [ %incdec.ptr.i, %while.entry.i ]
  %storemerge52 = add nsw i64 %storemerge5255, -1
  %storemerge = icmp slt i64 %storemerge5255, 1
  br i1 %storemerge, label %for.cond.for.end_crit_edge, label %for.body
}

define internal fastcc void @CodeGen_codegen_function(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Function, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 5
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr %7(ptr nonnull %5)
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds %Function, ptr %1, i64 0, i32 4
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %10, i1 false)
  %12 = call ptr @LLVMAddFunction(ptr %9, ptr %8, ptr %11)
  %13 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %14 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i.i = getelementptr inbounds %VarId, ptr %13, i64 0, i32 1
  %15 = load i64, ptr %memberidx.i.i, align 4
  %16 = load i64, ptr %13, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %13, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i.i, align 4
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @215, i64 %15, i64 %16, i64 %17)
  %19 = load ptr, ptr %4, align 8
  %20 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %14, ptr nonnull %20, ptr %12)
  %memberidx5 = getelementptr inbounds %Function, ptr %1, i64 0, i32 6
  %21 = load i1, ptr %memberidx5, align 1
  br i1 %21, label %if.entry, label %ifend

common.ret:                                       ; preds = %CodeGen_codegen_block.exit, %if.entry
  ret void

if.entry:                                         ; preds = %2
  call void @LLVMSetLinkage(ptr %12, i64 0)
  br label %common.ret

ifend:                                            ; preds = %2
  %22 = call ptr @LLVMCreateBuilder()
  %23 = call ptr @LLVMAppendBasicBlock(ptr %12, ptr nonnull @28)
  call void @LLVMPositionBuilderAtEnd(ptr %22, ptr %23)
  %memberidx6 = getelementptr inbounds %Function, ptr %1, i64 0, i32 2
  %24 = load ptr, ptr %memberidx6, align 8
  %memberidx750 = getelementptr inbounds %Array_FunctionArg_, ptr %24, i64 0, i32 2
  %25 = load i64, ptr %memberidx750, align 4
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %for.body, label %for.end

for.body:                                         ; preds = %ifend, %for.body
  %27 = phi ptr [ %48, %for.body ], [ %24, %ifend ]
  %storemerge51 = phi i64 [ %47, %for.body ], [ 0, %ifend ]
  %memberidx.i35 = getelementptr inbounds %Array_FunctionArg_, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i35, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %28, i64 %storemerge51
  %29 = load ptr, ptr %ptridx.i, align 8
  %30 = call ptr @LLVMGetParam(ptr %12, i64 %storemerge51)
  %memberidx9 = getelementptr inbounds %Expression, ptr %29, i64 0, i32 3
  %31 = load ptr, ptr %memberidx9, align 8
  %32 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %31, i1 true)
  %memberidx10 = getelementptr inbounds %FunctionArg, ptr %29, i64 0, i32 5
  %33 = load ptr, ptr %memberidx10, align 8
  %34 = load ptr, ptr %33, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 5
  %35 = load ptr, ptr %memberidx11, align 8
  %36 = call ptr %35(ptr nonnull %33)
  %37 = call ptr @LLVMBuildAlloca(ptr %22, ptr %32, ptr %36)
  %38 = call ptr @LLVMBuildStore(ptr %22, ptr %30, ptr %37)
  %memberidx12 = getelementptr inbounds %FunctionArg, ptr %29, i64 0, i32 4
  %39 = load ptr, ptr %memberidx12, align 8
  %40 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %memberidx.i.i37 = getelementptr inbounds %VarId, ptr %39, i64 0, i32 1
  %41 = load i64, ptr %memberidx.i.i37, align 4
  %42 = load i64, ptr %39, align 4
  %memberidx2.i.i38 = getelementptr inbounds %VarId, ptr %39, i64 0, i32 2
  %43 = load i64, ptr %memberidx2.i.i38, align 4
  %44 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @215, i64 %41, i64 %42, i64 %43)
  %45 = load ptr, ptr %3, align 8
  %46 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i.i39 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i.i39, align 8
  %memberidx1.i.i.i40 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 %44, ptr %memberidx1.i.i.i40, align 4
  %memberidx2.i.i.i41 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 %44, ptr %memberidx2.i.i.i41, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %40, ptr nonnull %46, ptr %37)
  %47 = add nuw nsw i64 %storemerge51, 1
  %48 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_FunctionArg_, ptr %48, i64 0, i32 2
  %49 = load i64, ptr %memberidx7, align 4
  %50 = icmp slt i64 %47, %49
  br i1 %50, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %ifend
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %51 = load ptr, ptr %memberidx13, align 8
  store ptr %12, ptr %memberidx13, align 8
  %memberidx15 = getelementptr inbounds %Function, ptr %1, i64 0, i32 3
  %52 = load ptr, ptr %memberidx15, align 8
  %memberidx.i42 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %53 = load i1, ptr %memberidx.i42, align 1
  store i1 false, ptr %memberidx.i42, align 1
  %54 = load ptr, ptr %52, align 8
  %55 = call ptr @malloc(i32 25)
  %memberidx.i.i43 = getelementptr inbounds %Array_Statement_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i43, align 8
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %54, i64 0, i32 2
  %57 = load i64, ptr %memberidx1.i.i, align 4
  store i1 false, ptr %55, align 1
  %memberidx1.i.i.i44 = getelementptr inbounds %ArrayIterator_Statement_, ptr %55, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i44, align 4
  %memberidx2.i.i.i45 = getelementptr inbounds %ArrayIterator_Statement_, ptr %55, i64 0, i32 3
  store ptr %56, ptr %memberidx2.i.i.i45, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %55, i64 0, i32 2
  store i64 %57, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i44, align 4
  %58 = icmp slt i64 %57, 1
  br i1 %58, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %for.end, %for.body.i
  %statement.0.i49.in = phi ptr [ %ptridx.i14.i, %for.body.i ], [ %56, %for.end ]
  %statement.0.i49 = load ptr, ptr %statement.0.i49.in, align 8
  call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %22, ptr %statement.0.i49)
  %59 = load i64, ptr %memberidx1.i.i.i44, align 4
  %60 = add nsw i64 %59, 1
  store i64 %60, ptr %memberidx1.i.i.i44, align 4
  %61 = load ptr, ptr %memberidx2.i.i.i45, align 8
  %ptridx.i14.i = getelementptr inbounds ptr, ptr %61, i64 %59
  %62 = load i64, ptr %memberidx3.i.i.i, align 4
  %63 = icmp sge i64 %59, %62
  br i1 %63, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %for.end
  %storemerge47.lcssa = phi i1 [ %58, %for.end ], [ %63, %for.body.i ]
  store i1 %storemerge47.lcssa, ptr %55, align 1
  call void @free(ptr nonnull %55)
  store i1 %53, ptr %memberidx.i42, align 1
  call void @LLVMDisposeBuilder(ptr %22)
  store ptr %51, ptr %memberidx13, align 8
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @Array_LLVMTypeRef__pop(ptr nocapture %0) #7 {
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add nsw i64 %2, -1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_LLVMTypeRef__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ -1, %ifend ], [ %i.06, %for.body ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc void @CodeGen_declare_class_props(ptr nocapture %0, ptr nocapture %1, ptr %2, ptr nocapture %3) unnamed_addr {
for.entry:
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 1
  %8 = call ptr @malloc(i32 64)
  store ptr %8, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %9, align 8
  %memberidx.i115 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 2
  store i64 0, ptr %memberidx.i115, align 4
  %memberidx1.i116 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 3
  store i64 8, ptr %memberidx1.i116, align 4
  %memberidx2.i117 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 1
  %10 = call ptr @malloc(i32 64)
  store ptr %10, ptr %memberidx2.i117, align 8
  store i64 0, ptr %memberidx.i115, align 4
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %11, align 8
  %memberidx.i118 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 2
  store i64 0, ptr %memberidx.i118, align 4
  %memberidx1.i119 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 3
  store i64 8, ptr %memberidx1.i119, align 4
  %memberidx2.i120 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 1
  %12 = call ptr @malloc(i32 64)
  store ptr %12, ptr %memberidx2.i120, align 8
  store i64 0, ptr %memberidx.i118, align 4
  %memberidx6 = getelementptr inbounds %Class, ptr %2, i64 0, i32 6
  %13 = load ptr, ptr %memberidx6, align 8
  %14 = call ptr @malloc(i32 25)
  %15 = load ptr, ptr %13, align 8
  %memberidx1.i121 = getelementptr inbounds %Map_string_PropId_, ptr %13, i64 0, i32 1
  %16 = load i64, ptr %memberidx1.i121, align 4
  %memberidx2.i122 = getelementptr inbounds %Map_string_PropId_, ptr %13, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i122, align 4
  store i1 false, ptr %14, align 1
  %memberidx1.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %14, i64 0, i32 1
  store ptr %15, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %14, i64 0, i32 2
  store i64 %16, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %MapIterator_string_PropId_, ptr %14, i64 0, i32 3
  store i64 %17, ptr %memberidx3.i.i, align 4
  %18 = add nsw i64 %16, -1
  store i64 %18, ptr %memberidx2.i.i, align 4
  %19 = icmp sgt i64 %16, 0
  br i1 %19, label %while.entry.i.preheader, label %MapIterator_string_PropId__next.exit

while.entry.i.preheader:                          ; preds = %for.entry
  %memberidx1.i.i.promoted311 = load ptr, ptr %memberidx1.i.i, align 8
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %ifend.i
  %20 = phi ptr [ %memberidx1.i.i.promoted311, %while.entry.i.preheader ], [ %incdec.ptr.i, %ifend.i ]
  %incdec.ptr.i = getelementptr inbounds ptr, ptr %20, i64 1
  %21 = load ptr, ptr %20, align 8
  %.not.i = icmp eq ptr %21, null
  br i1 %.not.i, label %ifend.i, label %MapIterator_string_PropId__next.exit.loopexit

ifend.i:                                          ; preds = %while.entry.i
  %22 = load i64, ptr %memberidx2.i.i, align 4
  %23 = add nsw i64 %22, -1
  store i64 %23, ptr %memberidx2.i.i, align 4
  %24 = icmp sgt i64 %22, 0
  br i1 %24, label %while.entry.i, label %MapIterator_string_PropId__next.exit.loopexit

MapIterator_string_PropId__next.exit.loopexit:    ; preds = %ifend.i, %while.entry.i
  store ptr %incdec.ptr.i, ptr %memberidx1.i.i, align 8
  br label %MapIterator_string_PropId__next.exit

MapIterator_string_PropId__next.exit:             ; preds = %MapIterator_string_PropId__next.exit.loopexit, %for.entry
  %storemerge294309 = add nsw i64 %17, -1
  store i64 %storemerge294309, ptr %memberidx3.i.i, align 4
  %storemerge310 = icmp slt i64 %17, 1
  store i1 %storemerge310, ptr %14, align 1
  br i1 %storemerge310, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %MapIterator_string_PropId__next.exit
  %memberidx10 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx25 = getelementptr inbounds %Class, ptr %2, i64 0, i32 5
  %memberidx31 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %memberidx51 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 1
  %memberidx38 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 3
  %memberidx13 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %MapIterator_string_PropId__next.exit167
  %.pn = load ptr, ptr %memberidx1.i.i, align 8
  %entry.0.in = getelementptr inbounds ptr, ptr %.pn, i64 -1
  %entry.0 = load ptr, ptr %entry.0.in, align 8
  %prop_id = alloca ptr, align 8
  %memberidx8 = getelementptr inbounds %MapEntry_string_PropId_, ptr %entry.0, i64 0, i32 1
  %25 = load ptr, ptr %memberidx8, align 8
  store ptr %25, ptr %prop_id, align 8
  %26 = load ptr, ptr %entry.0, align 8
  %prop_owner = alloca ptr, align 8
  store ptr %2, ptr %prop_owner, align 8
  %prop_id_key = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i125 = getelementptr inbounds %PropId, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i125, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %28 = load i64, ptr %27, align 4
  %memberidx1.i.i126 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 1
  %29 = load i64, ptr %memberidx1.i.i126, align 4
  %memberidx2.i.i127 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i.i127, align 4
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @215, i64 %28, i64 %29, i64 %30)
  %32 = load ptr, ptr %5, align 8
  %33 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 %31, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 %31, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %34 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %35 = call ptr %34(ptr nonnull %33)
  %36 = load i64, ptr %25, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %25, i64 0, i32 2
  %37 = load i64, ptr %memberidx3.i, align 4
  %38 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @231, ptr %35, i64 %36, i64 %37)
  %39 = load ptr, ptr %6, align 8
  %40 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %40, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  store ptr %39, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  store i64 %38, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %40, i64 0, i32 3
  store i64 %38, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %35)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  store ptr %40, ptr %prop_id_key, align 8
  %41 = load ptr, ptr %memberidx10, align 8
  %42 = load ptr, ptr %memberidx.i125, align 8
  %memberidx.i.i.i130 = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i.i130, align 8
  %44 = load i64, ptr %42, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i131 = getelementptr inbounds %Module, ptr %46, i64 0, i32 4
  %47 = load ptr, ptr %memberidx2.i.i.i131, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %42, i64 0, i32 2
  %48 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %51 = load i64, ptr %25, align 4
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %if.entry.i, label %ifend.i135

if.entry.i:                                       ; preds = %for.body
  %memberidx1.i132 = getelementptr inbounds %Class, ptr %50, i64 0, i32 5
  %53 = load ptr, ptr %memberidx1.i132, align 8
  %54 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i134 = getelementptr inbounds %ClassMethod, ptr %56, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i135:                                       ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %50, i64 0, i32 4
  %57 = load ptr, ptr %memberidx4.i, align 8
  %58 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %58
  %60 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %60, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i135
  %common.ret.op.in.i = phi ptr [ %memberidx3.i134, %if.entry.i ], [ %memberidx6.i, %ifend.i135 ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %prop_index = alloca i64, align 8
  br i1 %52, label %if.entry.i151, label %ifend.i157

if.entry.i151:                                    ; preds = %get_class_prop_type.exit
  %memberidx1.i146 = getelementptr inbounds %Class, ptr %50, i64 0, i32 5
  %61 = load ptr, ptr %memberidx1.i146, align 8
  %62 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i12.i148 = getelementptr inbounds %Array_ClassMethod_, ptr %61, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i12.i148, align 8
  %ptridx.i13.i149 = getelementptr inbounds ptr, ptr %63, i64 %62
  %64 = load ptr, ptr %ptridx.i13.i149, align 8
  %memberidx3.i150 = getelementptr inbounds %ClassMethod, ptr %64, i64 0, i32 9
  br label %get_vtable_index.exit

ifend.i157:                                       ; preds = %get_class_prop_type.exit
  %memberidx4.i152 = getelementptr inbounds %Class, ptr %50, i64 0, i32 4
  %65 = load ptr, ptr %memberidx4.i152, align 8
  %66 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i11.i154 = getelementptr inbounds %Array_ClassField_, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i11.i154, align 8
  %ptridx.i.i155 = getelementptr inbounds ptr, ptr %67, i64 %66
  %68 = load ptr, ptr %ptridx.i.i155, align 8
  %memberidx6.i156 = getelementptr inbounds %ClassField, ptr %68, i64 0, i32 6
  br label %get_vtable_index.exit

get_vtable_index.exit:                            ; preds = %if.entry.i151, %ifend.i157
  %common.ret.op.in.i144 = phi ptr [ %memberidx3.i150, %if.entry.i151 ], [ %memberidx6.i156, %ifend.i157 ]
  %common.ret.op.i145 = load i64, ptr %common.ret.op.in.i144, align 4
  store i64 %common.ret.op.i145, ptr %prop_index, align 8
  %69 = icmp eq i64 %51, 1
  br i1 %69, label %if.entry, label %else

for.incr:                                         ; preds = %resize_type_array.exit, %resize_type_array.exit265, %if.entry35
  %70 = load i64, ptr %memberidx2.i.i, align 4
  %71 = add nsw i64 %70, -1
  store i64 %71, ptr %memberidx2.i.i, align 4
  %72 = icmp sgt i64 %70, 0
  br i1 %72, label %while.entry.i162.preheader, label %MapIterator_string_PropId__next.exit167

while.entry.i162.preheader:                       ; preds = %for.incr
  %memberidx1.i.i.promoted = load ptr, ptr %memberidx1.i.i, align 8
  br label %while.entry.i162

while.entry.i162:                                 ; preds = %while.entry.i162.preheader, %ifend.i166
  %73 = phi ptr [ %memberidx1.i.i.promoted, %while.entry.i162.preheader ], [ %incdec.ptr.i160, %ifend.i166 ]
  %incdec.ptr.i160 = getelementptr inbounds ptr, ptr %73, i64 1
  %74 = load ptr, ptr %73, align 8
  %.not.i161 = icmp eq ptr %74, null
  br i1 %.not.i161, label %ifend.i166, label %MapIterator_string_PropId__next.exit167.loopexit

ifend.i166:                                       ; preds = %while.entry.i162
  %75 = load i64, ptr %memberidx2.i.i, align 4
  %76 = add nsw i64 %75, -1
  store i64 %76, ptr %memberidx2.i.i, align 4
  %77 = icmp sgt i64 %75, 0
  br i1 %77, label %while.entry.i162, label %MapIterator_string_PropId__next.exit167.loopexit

MapIterator_string_PropId__next.exit167.loopexit: ; preds = %ifend.i166, %while.entry.i162
  store ptr %incdec.ptr.i160, ptr %memberidx1.i.i, align 8
  br label %MapIterator_string_PropId__next.exit167

MapIterator_string_PropId__next.exit167:          ; preds = %MapIterator_string_PropId__next.exit167.loopexit, %for.incr
  %78 = load i64, ptr %memberidx3.i.i, align 4
  %storemerge294 = add nsw i64 %78, -1
  store i64 %storemerge294, ptr %memberidx3.i.i, align 4
  %storemerge = icmp slt i64 %78, 1
  store i1 %storemerge, ptr %14, align 1
  br i1 %storemerge, label %for.end, label %for.body

for.end:                                          ; preds = %MapIterator_string_PropId__next.exit167, %MapIterator_string_PropId__next.exit
  tail call void @free(ptr nonnull %14)
  %79 = load i64, ptr %memberidx.i115, align 4
  %80 = icmp sgt i64 %79, 0
  br i1 %80, label %if.entry59, label %ifend61

if.entry:                                         ; preds = %get_vtable_index.exit
  %81 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i, i1 true)
  %82 = load ptr, ptr %memberidx13, align 8
  call fastcc void @Map_string_int____setitem__(ptr %82, ptr nonnull %40, i64 %common.ret.op.i145)
  %83 = load i64, ptr %memberidx.i118, align 4
  %.not.i169304 = icmp sgt i64 %83, %common.ret.op.i145
  br i1 %.not.i169304, label %resize_type_array.exit, label %for.body.i.lr.ph

for.body.i.lr.ph:                                 ; preds = %if.entry
  %memberidx.i118.promoted = load i64, ptr %memberidx.i118, align 4
  %memberidx1.i119.promoted = load i64, ptr %memberidx1.i119, align 4
  %memberidx2.i120.promoted = load ptr, ptr %memberidx2.i120, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.lr.ph, %Array_LLVMTypeRef____sl__.exit.i
  %84 = phi ptr [ %memberidx2.i120.promoted, %for.body.i.lr.ph ], [ %90, %Array_LLVMTypeRef____sl__.exit.i ]
  %85 = phi i64 [ %memberidx1.i119.promoted, %for.body.i.lr.ph ], [ %91, %Array_LLVMTypeRef____sl__.exit.i ]
  %86 = phi i64 [ %memberidx.i118.promoted, %for.body.i.lr.ph ], [ %92, %Array_LLVMTypeRef____sl__.exit.i ]
  %i.0.i305 = phi i64 [ %83, %for.body.i.lr.ph ], [ %93, %Array_LLVMTypeRef____sl__.exit.i ]
  %.not.i.i = icmp slt i64 %86, %85
  br i1 %.not.i.i, label %Array_LLVMTypeRef____sl__.exit.i, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %for.body.i
  %87 = shl i64 %85, 1
  %88 = shl i64 %85, 4
  %89 = call ptr @realloc(ptr %84, i64 %88)
  br label %Array_LLVMTypeRef____sl__.exit.i

Array_LLVMTypeRef____sl__.exit.i:                 ; preds = %if.entry.i.i, %for.body.i
  %90 = phi ptr [ %89, %if.entry.i.i ], [ %84, %for.body.i ]
  %91 = phi i64 [ %87, %if.entry.i.i ], [ %85, %for.body.i ]
  %92 = add nsw i64 %86, 1
  %ptridx.i.i174 = getelementptr inbounds ptr, ptr %90, i64 %86
  store ptr null, ptr %ptridx.i.i174, align 8
  %93 = add nsw i64 %i.0.i305, 1
  %.not.i169.not = icmp slt i64 %i.0.i305, %common.ret.op.i145
  br i1 %.not.i169.not, label %for.body.i, label %for.cond.i.resize_type_array.exit_crit_edge

for.cond.i.resize_type_array.exit_crit_edge:      ; preds = %Array_LLVMTypeRef____sl__.exit.i
  store i64 %92, ptr %memberidx.i118, align 4
  store i64 %91, ptr %memberidx1.i119, align 4
  store ptr %90, ptr %memberidx2.i120, align 8
  br label %resize_type_array.exit

resize_type_array.exit:                           ; preds = %for.cond.i.resize_type_array.exit_crit_edge, %if.entry
  %94 = load ptr, ptr %memberidx2.i120, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %94, i64 %common.ret.op.i145
  store ptr %81, ptr %ptridx.i, align 8
  br label %for.incr

else:                                             ; preds = %get_vtable_index.exit
  %llvm_method_val = alloca ptr, align 8
  store ptr null, ptr %llvm_method_val, align 8
  %llvm_method_type = alloca ptr, align 8
  store ptr null, ptr %llvm_method_type, align 8
  %95 = load ptr, ptr %2, align 8
  %96 = icmp eq ptr %42, %95
  br i1 %96, label %if.entry16, label %else17

if.entry16:                                       ; preds = %else
  %97 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %97, align 8
  %memberidx.i176 = getelementptr inbounds %Array_Type_, ptr %97, i64 0, i32 2
  store i64 0, ptr %memberidx.i176, align 4
  %memberidx1.i177 = getelementptr inbounds %Array_Type_, ptr %97, i64 0, i32 3
  store i64 8, ptr %memberidx1.i177, align 4
  %memberidx2.i178 = getelementptr inbounds %Array_Type_, ptr %97, i64 0, i32 1
  %98 = call ptr @malloc(i32 64)
  store ptr %98, ptr %memberidx2.i178, align 8
  %99 = tail call ptr @malloc(i32 16)
  %100 = load ptr, ptr %2, align 8
  store i64 11, ptr %99, align 4
  %memberidx.i179 = getelementptr inbounds %ObjectType, ptr %99, i64 0, i32 1
  store ptr %100, ptr %memberidx.i179, align 8
  store ptr %99, ptr %98, align 8
  store i64 1, ptr %memberidx.i176, align 4
  %memberidx22 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 1
  %101 = load ptr, ptr %memberidx22, align 8
  %102 = load i64, ptr %memberidx1.i177, align 4
  %103 = add i64 %102, -1
  %memberidx2.i182 = getelementptr inbounds %Array_Type_, ptr %101, i64 0, i32 2
  %104 = load i64, ptr %memberidx2.i182, align 4
  %105 = icmp slt i64 %103, %104
  br i1 %105, label %while.entry.i185, label %Array_Type____adda__.exit

while.entry.i185:                                 ; preds = %if.entry16, %while.entry.i185
  %106 = load i64, ptr %memberidx1.i177, align 4
  %107 = shl i64 %106, 1
  store i64 %107, ptr %memberidx1.i177, align 4
  %108 = load ptr, ptr %memberidx2.i178, align 8
  %109 = shl i64 %106, 4
  %110 = call ptr @realloc(ptr %108, i64 %109)
  store ptr %110, ptr %memberidx2.i178, align 8
  %111 = load i64, ptr %memberidx1.i177, align 4
  %112 = load i64, ptr %memberidx.i176, align 4
  %113 = sub i64 %111, %112
  %114 = load i64, ptr %memberidx2.i182, align 4
  %115 = icmp slt i64 %113, %114
  br i1 %115, label %while.entry.i185, label %Array_Type____adda__.exit

Array_Type____adda__.exit:                        ; preds = %while.entry.i185, %if.entry16
  %116 = load ptr, ptr %memberidx2.i178, align 8
  %117 = load i64, ptr %memberidx.i176, align 4
  %118 = getelementptr inbounds ptr, ptr %116, i64 %117
  %memberidx8.i187 = getelementptr inbounds %Array_Type_, ptr %101, i64 0, i32 1
  %119 = load ptr, ptr %memberidx8.i187, align 8
  %120 = load i64, ptr %memberidx2.i182, align 4
  %121 = shl i64 %120, 3
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %118, ptr align 8 %119, i64 %121, i1 false)
  %122 = load i64, ptr %memberidx.i176, align 4
  %123 = load i64, ptr %memberidx2.i182, align 4
  %124 = add nsw i64 %123, %122
  store i64 %124, ptr %memberidx.i176, align 4
  %125 = load ptr, ptr %memberidx22, align 8
  %memberidx.i188 = getelementptr inbounds %Array_Type_, ptr %125, i64 0, i32 1
  %126 = load ptr, ptr %memberidx.i188, align 8
  call void @free(ptr %126)
  tail call void @free(ptr %125)
  store ptr %97, ptr %memberidx22, align 8
  %127 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i, i1 false)
  store ptr %127, ptr %llvm_method_type, align 8
  %128 = load ptr, ptr %memberidx25, align 8
  %129 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i189 = getelementptr inbounds %Array_ClassMethod_, ptr %128, i64 0, i32 1
  %130 = load ptr, ptr %memberidx.i189, align 8
  %ptridx.i190 = getelementptr inbounds ptr, ptr %130, i64 %129
  %131 = load ptr, ptr %ptridx.i190, align 8
  %memberidx27 = getelementptr inbounds %ClassMethod, ptr %131, i64 0, i32 7
  %132 = load i1, ptr %memberidx27, align 1
  br i1 %132, label %ifend30, label %if.entry28

else17:                                           ; preds = %else
  %133 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i, i1 false)
  store ptr %133, ptr %llvm_method_type, align 8
  %134 = load ptr, ptr %memberidx10, align 8
  %135 = load ptr, ptr %memberidx.i125, align 8
  %memberidx.i.i192 = getelementptr inbounds %Program, ptr %134, i64 0, i32 1
  %136 = load ptr, ptr %memberidx.i.i192, align 8
  %137 = load i64, ptr %135, align 4
  %memberidx.i.i.i193 = getelementptr inbounds %Array_Module_, ptr %136, i64 0, i32 1
  %138 = load ptr, ptr %memberidx.i.i.i193, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %138, i64 %137
  %139 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i194 = getelementptr inbounds %Module, ptr %139, i64 0, i32 4
  %140 = load ptr, ptr %memberidx2.i.i194, align 8
  %memberidx3.i.i195 = getelementptr inbounds %TypeId, ptr %135, i64 0, i32 2
  %141 = load i64, ptr %memberidx3.i.i195, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %140, i64 0, i32 1
  %142 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %142, i64 %141
  %143 = load ptr, ptr %ptridx.i6.i.i, align 8
  store ptr %143, ptr %prop_owner, align 8
  %144 = load ptr, ptr %0, align 8
  %memberidx41 = getelementptr inbounds %Class, ptr %143, i64 0, i32 1
  %145 = load ptr, ptr %memberidx41, align 8
  %146 = load ptr, ptr %145, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %146, i64 0, i32 5
  %147 = load ptr, ptr %memberidx42, align 8
  %148 = call ptr %147(ptr nonnull %145)
  %149 = load ptr, ptr %26, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %149, i64 0, i32 5
  %150 = load ptr, ptr %memberidx43, align 8
  %151 = call ptr %150(ptr nonnull %26)
  %152 = alloca ptr, align 8
  %153 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %152, ptr nonnull @88, ptr %148, ptr %151)
  %154 = load ptr, ptr %152, align 8
  %155 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %155, align 8
  %memberidx.i196 = getelementptr inbounds %string, ptr %155, i64 0, i32 1
  store ptr %154, ptr %memberidx.i196, align 8
  %memberidx1.i197 = getelementptr inbounds %string, ptr %155, i64 0, i32 2
  store i64 %153, ptr %memberidx1.i197, align 4
  %memberidx2.i198 = getelementptr inbounds %string, ptr %155, i64 0, i32 3
  store i64 %153, ptr %memberidx2.i198, align 4
  tail call void @free(ptr %148)
  tail call void @free(ptr %151)
  %156 = load ptr, ptr %155, align 8
  %memberidx44 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %156, i64 0, i32 5
  %157 = load ptr, ptr %memberidx44, align 8
  %158 = call ptr %157(ptr nonnull %155)
  %159 = call ptr @LLVMGetNamedFunction(ptr %144, ptr %158)
  store ptr %159, ptr %llvm_method_val, align 8
  %160 = icmp eq ptr %159, null
  br i1 %160, label %if.entry45, label %ifend18

ifend18:                                          ; preds = %if.entry45, %else17, %get_class_prop_visibility.exit
  %161 = load ptr, ptr %memberidx51, align 8
  %162 = load ptr, ptr %prop_id_key, align 8
  %163 = load i64, ptr %prop_index, align 8
  call fastcc void @Map_string_int____setitem__(ptr %161, ptr %162, i64 %163)
  %164 = load ptr, ptr %prop_owner, align 8
  %memberidx52 = getelementptr inbounds %Class, ptr %164, i64 0, i32 5
  %165 = load ptr, ptr %memberidx52, align 8
  %166 = load ptr, ptr %prop_id, align 8
  %memberidx53 = getelementptr inbounds %PropId, ptr %166, i64 0, i32 2
  %167 = load i64, ptr %memberidx53, align 4
  %memberidx.i199 = getelementptr inbounds %Array_ClassMethod_, ptr %165, i64 0, i32 1
  %168 = load ptr, ptr %memberidx.i199, align 8
  %ptridx.i200 = getelementptr inbounds ptr, ptr %168, i64 %167
  %169 = load ptr, ptr %ptridx.i200, align 8
  %memberidx54 = getelementptr inbounds %ClassMethod, ptr %169, i64 0, i32 7
  %170 = load i1, ptr %memberidx54, align 1
  br i1 %170, label %ifend57, label %if.entry55

if.entry28:                                       ; preds = %Array_Type____adda__.exit
  %171 = load ptr, ptr %memberidx31, align 8
  %172 = load ptr, ptr %171, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %172, i64 0, i32 5
  %173 = load ptr, ptr %memberidx32, align 8
  %174 = call ptr %173(ptr nonnull %171)
  %175 = load ptr, ptr %26, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %175, i64 0, i32 5
  %176 = load ptr, ptr %memberidx33, align 8
  %177 = call ptr %176(ptr nonnull %26)
  %178 = alloca ptr, align 8
  %179 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %178, ptr nonnull @88, ptr %174, ptr %177)
  %180 = load ptr, ptr %178, align 8
  %181 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %181, align 8
  %memberidx.i201 = getelementptr inbounds %string, ptr %181, i64 0, i32 1
  store ptr %180, ptr %memberidx.i201, align 8
  %memberidx1.i202 = getelementptr inbounds %string, ptr %181, i64 0, i32 2
  store i64 %179, ptr %memberidx1.i202, align 4
  %memberidx2.i203 = getelementptr inbounds %string, ptr %181, i64 0, i32 3
  store i64 %179, ptr %memberidx2.i203, align 4
  tail call void @free(ptr %174)
  tail call void @free(ptr %177)
  %182 = load ptr, ptr %0, align 8
  %183 = load ptr, ptr %181, align 8
  %memberidx1.i204 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %183, i64 0, i32 5
  %184 = load ptr, ptr %memberidx1.i204, align 8
  %185 = call ptr %184(ptr nonnull %181)
  %186 = call ptr @LLVMAddFunction(ptr %182, ptr %185, ptr %127)
  store ptr %186, ptr %llvm_method_val, align 8
  br label %ifend30

ifend30:                                          ; preds = %Array_Type____adda__.exit, %if.entry28
  %187 = load ptr, ptr %memberidx10, align 8
  %188 = load ptr, ptr %memberidx.i125, align 8
  %memberidx.i.i.i206 = getelementptr inbounds %Program, ptr %187, i64 0, i32 1
  %189 = load ptr, ptr %memberidx.i.i.i206, align 8
  %190 = load i64, ptr %188, align 4
  %memberidx.i.i.i.i207 = getelementptr inbounds %Array_Module_, ptr %189, i64 0, i32 1
  %191 = load ptr, ptr %memberidx.i.i.i.i207, align 8
  %ptridx.i.i.i.i208 = getelementptr inbounds ptr, ptr %191, i64 %190
  %192 = load ptr, ptr %ptridx.i.i.i.i208, align 8
  %memberidx2.i.i.i209 = getelementptr inbounds %Module, ptr %192, i64 0, i32 4
  %193 = load ptr, ptr %memberidx2.i.i.i209, align 8
  %memberidx3.i.i.i210 = getelementptr inbounds %TypeId, ptr %188, i64 0, i32 2
  %194 = load i64, ptr %memberidx3.i.i.i210, align 4
  %memberidx.i5.i.i.i211 = getelementptr inbounds %Array_Class_, ptr %193, i64 0, i32 1
  %195 = load ptr, ptr %memberidx.i5.i.i.i211, align 8
  %ptridx.i6.i.i.i212 = getelementptr inbounds ptr, ptr %195, i64 %194
  %196 = load ptr, ptr %ptridx.i6.i.i.i212, align 8
  %197 = load i64, ptr %25, align 4
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %if.entry.i220, label %ifend.i226

if.entry.i220:                                    ; preds = %ifend30
  %memberidx1.i215 = getelementptr inbounds %Class, ptr %196, i64 0, i32 5
  %199 = load ptr, ptr %memberidx1.i215, align 8
  %200 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i12.i217 = getelementptr inbounds %Array_ClassMethod_, ptr %199, i64 0, i32 1
  %201 = load ptr, ptr %memberidx.i12.i217, align 8
  %ptridx.i13.i218 = getelementptr inbounds ptr, ptr %201, i64 %200
  %202 = load ptr, ptr %ptridx.i13.i218, align 8
  %memberidx3.i219 = getelementptr inbounds %ClassMethod, ptr %202, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i226:                                       ; preds = %ifend30
  %memberidx4.i221 = getelementptr inbounds %Class, ptr %196, i64 0, i32 4
  %203 = load ptr, ptr %memberidx4.i221, align 8
  %204 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i11.i223 = getelementptr inbounds %Array_ClassField_, ptr %203, i64 0, i32 1
  %205 = load ptr, ptr %memberidx.i11.i223, align 8
  %ptridx.i.i224 = getelementptr inbounds ptr, ptr %205, i64 %204
  %206 = load ptr, ptr %ptridx.i.i224, align 8
  %memberidx6.i225 = getelementptr inbounds %ClassField, ptr %206, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i220, %ifend.i226
  %common.ret.op.in.i213 = phi ptr [ %memberidx3.i219, %if.entry.i220 ], [ %memberidx6.i225, %ifend.i226 ]
  %common.ret.op.i214 = load i64, ptr %common.ret.op.in.i213, align 4
  %207 = icmp eq i64 %common.ret.op.i214, 1
  br i1 %207, label %if.entry35, label %ifend18

if.entry35:                                       ; preds = %get_class_prop_visibility.exit
  %208 = load ptr, ptr %memberidx38, align 8
  %209 = load ptr, ptr %llvm_method_val, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %208, ptr nonnull %40, ptr %209)
  br label %for.incr

if.entry45:                                       ; preds = %else17
  %210 = load ptr, ptr %memberidx41, align 8
  %211 = load ptr, ptr %210, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %211, i64 0, i32 5
  %212 = load ptr, ptr %memberidx49, align 8
  %213 = call ptr %212(ptr nonnull %210)
  %214 = load ptr, ptr %26, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %214, i64 0, i32 5
  %215 = load ptr, ptr %memberidx50, align 8
  %216 = call ptr %215(ptr nonnull %26)
  %217 = alloca ptr, align 8
  %218 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %217, ptr nonnull @258, ptr %213, ptr %216)
  %219 = load ptr, ptr %217, align 8
  %220 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %220, align 8
  %memberidx.i227 = getelementptr inbounds %string, ptr %220, i64 0, i32 1
  store ptr %219, ptr %memberidx.i227, align 8
  %memberidx1.i228 = getelementptr inbounds %string, ptr %220, i64 0, i32 2
  store i64 %218, ptr %memberidx1.i228, align 4
  %memberidx2.i229 = getelementptr inbounds %string, ptr %220, i64 0, i32 3
  store i64 %218, ptr %memberidx2.i229, align 4
  tail call void @free(ptr %213)
  tail call void @free(ptr %216)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %221 = load ptr, ptr %220, align 8
  %memberidx.i230 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %221, i64 0, i32 5
  %222 = load ptr, ptr %memberidx.i230, align 8
  %223 = call ptr %222(ptr nonnull %220)
  %224 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @210, ptr %223)
  %225 = load ptr, ptr %4, align 8
  %226 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %226, align 8
  %memberidx.i.i231 = getelementptr inbounds %string, ptr %226, i64 0, i32 1
  store ptr %225, ptr %memberidx.i.i231, align 8
  %memberidx1.i.i232 = getelementptr inbounds %string, ptr %226, i64 0, i32 2
  store i64 %224, ptr %memberidx1.i.i232, align 4
  %memberidx2.i.i233 = getelementptr inbounds %string, ptr %226, i64 0, i32 3
  store i64 %224, ptr %memberidx2.i.i233, align 4
  call void @free(ptr %223)
  %227 = load ptr, ptr %226, align 8
  %memberidx.i.i.i234 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %227, i64 0, i32 3
  %228 = load ptr, ptr %memberidx.i.i.i234, align 8
  %229 = call ptr %228(ptr nonnull %226)
  %230 = load i64, ptr %memberidx1.i.i232, align 4
  call void @write(i64 1, ptr %229, i64 %230)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend18

if.entry55:                                       ; preds = %ifend18
  %231 = load i64, ptr %memberidx.i, align 4
  %.not.i238295 = icmp sgt i64 %231, %163
  br i1 %.not.i238295, label %resize_value_array.exit, label %for.body.i243.lr.ph

for.body.i243.lr.ph:                              ; preds = %if.entry55
  %memberidx.i.promoted = load i64, ptr %memberidx.i, align 4
  %memberidx1.i.promoted = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i.promoted = load ptr, ptr %memberidx2.i, align 8
  br label %for.body.i243

for.body.i243:                                    ; preds = %for.body.i243.lr.ph, %Array_LLVMValueRef____sl__.exit.i
  %232 = phi ptr [ %memberidx2.i.promoted, %for.body.i243.lr.ph ], [ %238, %Array_LLVMValueRef____sl__.exit.i ]
  %233 = phi i64 [ %memberidx1.i.promoted, %for.body.i243.lr.ph ], [ %239, %Array_LLVMValueRef____sl__.exit.i ]
  %234 = phi i64 [ %memberidx.i.promoted, %for.body.i243.lr.ph ], [ %240, %Array_LLVMValueRef____sl__.exit.i ]
  %i.0.i237296 = phi i64 [ %231, %for.body.i243.lr.ph ], [ %241, %Array_LLVMValueRef____sl__.exit.i ]
  %.not.i.i242 = icmp slt i64 %234, %233
  br i1 %.not.i.i242, label %Array_LLVMValueRef____sl__.exit.i, label %if.entry.i.i246

if.entry.i.i246:                                  ; preds = %for.body.i243
  %235 = shl i64 %233, 1
  %236 = shl i64 %233, 4
  %237 = call ptr @realloc(ptr %232, i64 %236)
  br label %Array_LLVMValueRef____sl__.exit.i

Array_LLVMValueRef____sl__.exit.i:                ; preds = %if.entry.i.i246, %for.body.i243
  %238 = phi ptr [ %237, %if.entry.i.i246 ], [ %232, %for.body.i243 ]
  %239 = phi i64 [ %235, %if.entry.i.i246 ], [ %233, %for.body.i243 ]
  %240 = add nsw i64 %234, 1
  %ptridx.i.i248 = getelementptr inbounds ptr, ptr %238, i64 %234
  store ptr null, ptr %ptridx.i.i248, align 8
  %241 = add nsw i64 %i.0.i237296, 1
  %.not.i238.not = icmp slt i64 %i.0.i237296, %163
  br i1 %.not.i238.not, label %for.body.i243, label %for.cond.i239.resize_value_array.exit_crit_edge

for.cond.i239.resize_value_array.exit_crit_edge:  ; preds = %Array_LLVMValueRef____sl__.exit.i
  store i64 %240, ptr %memberidx.i, align 4
  store i64 %239, ptr %memberidx1.i, align 4
  store ptr %238, ptr %memberidx2.i, align 8
  br label %resize_value_array.exit

resize_value_array.exit:                          ; preds = %for.cond.i239.resize_value_array.exit_crit_edge, %if.entry55
  %242 = load ptr, ptr %llvm_method_val, align 8
  %243 = load ptr, ptr %memberidx2.i, align 8
  %ptridx.i250 = getelementptr inbounds ptr, ptr %243, i64 %163
  store ptr %242, ptr %ptridx.i250, align 8
  br label %ifend57

ifend57:                                          ; preds = %ifend18, %resize_value_array.exit
  %244 = load i64, ptr %memberidx.i115, align 4
  %.not.i253299 = icmp sgt i64 %244, %163
  br i1 %.not.i253299, label %resize_type_array.exit265, label %for.body.i258.lr.ph

for.body.i258.lr.ph:                              ; preds = %ifend57
  %memberidx.i115.promoted = load i64, ptr %memberidx.i115, align 4
  %memberidx1.i116.promoted = load i64, ptr %memberidx1.i116, align 4
  %memberidx2.i117.promoted = load ptr, ptr %memberidx2.i117, align 8
  br label %for.body.i258

for.body.i258:                                    ; preds = %for.body.i258.lr.ph, %Array_LLVMTypeRef____sl__.exit.i264
  %245 = phi ptr [ %memberidx2.i117.promoted, %for.body.i258.lr.ph ], [ %251, %Array_LLVMTypeRef____sl__.exit.i264 ]
  %246 = phi i64 [ %memberidx1.i116.promoted, %for.body.i258.lr.ph ], [ %252, %Array_LLVMTypeRef____sl__.exit.i264 ]
  %247 = phi i64 [ %memberidx.i115.promoted, %for.body.i258.lr.ph ], [ %253, %Array_LLVMTypeRef____sl__.exit.i264 ]
  %i.0.i252300 = phi i64 [ %244, %for.body.i258.lr.ph ], [ %254, %Array_LLVMTypeRef____sl__.exit.i264 ]
  %.not.i.i257 = icmp slt i64 %247, %246
  br i1 %.not.i.i257, label %Array_LLVMTypeRef____sl__.exit.i264, label %if.entry.i.i261

if.entry.i.i261:                                  ; preds = %for.body.i258
  %248 = shl i64 %246, 1
  %249 = shl i64 %246, 4
  %250 = call ptr @realloc(ptr %245, i64 %249)
  br label %Array_LLVMTypeRef____sl__.exit.i264

Array_LLVMTypeRef____sl__.exit.i264:              ; preds = %if.entry.i.i261, %for.body.i258
  %251 = phi ptr [ %250, %if.entry.i.i261 ], [ %245, %for.body.i258 ]
  %252 = phi i64 [ %248, %if.entry.i.i261 ], [ %246, %for.body.i258 ]
  %253 = add nsw i64 %247, 1
  %ptridx.i.i263 = getelementptr inbounds ptr, ptr %251, i64 %247
  store ptr null, ptr %ptridx.i.i263, align 8
  %254 = add nsw i64 %i.0.i252300, 1
  %.not.i253.not = icmp slt i64 %i.0.i252300, %163
  br i1 %.not.i253.not, label %for.body.i258, label %for.cond.i254.resize_type_array.exit265_crit_edge

for.cond.i254.resize_type_array.exit265_crit_edge: ; preds = %Array_LLVMTypeRef____sl__.exit.i264
  store i64 %253, ptr %memberidx.i115, align 4
  store i64 %252, ptr %memberidx1.i116, align 4
  store ptr %251, ptr %memberidx2.i117, align 8
  br label %resize_type_array.exit265

resize_type_array.exit265:                        ; preds = %for.cond.i254.resize_type_array.exit265_crit_edge, %ifend57
  %255 = load ptr, ptr %llvm_method_type, align 8
  %256 = call ptr @LLVMPointerType(ptr %255, i64 0)
  %257 = load ptr, ptr %memberidx2.i117, align 8
  %ptridx.i267 = getelementptr inbounds ptr, ptr %257, i64 %163
  store ptr %256, ptr %ptridx.i267, align 8
  br label %for.incr

if.entry59:                                       ; preds = %for.end
  %258 = load ptr, ptr %memberidx2.i117, align 8
  %259 = call ptr @LLVMStructType(ptr %258, i64 %79, i1 true)
  %memberidx64 = getelementptr inbounds %Class, ptr %2, i64 0, i32 10
  %260 = load i1, ptr %memberidx64, align 1
  br i1 %260, label %ifend67, label %if.entry65

ifend61:                                          ; preds = %for.end, %Array_LLVMTypeRef____sl__.exit
  %memberidx.i268 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 3
  %261 = load i64, ptr %memberidx.i268, align 4
  %memberidx1.i269 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 2
  %262 = load i64, ptr %memberidx1.i269, align 4
  %263 = sub i64 %261, %262
  %264 = load i64, ptr %memberidx.i118, align 4
  %265 = icmp slt i64 %263, %264
  br i1 %265, label %while.entry.i273.preheader, label %Array_LLVMTypeRef____adda__.exit

while.entry.i273.preheader:                       ; preds = %ifend61
  %memberidx2.i.i272 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  br label %while.entry.i273

while.entry.i273:                                 ; preds = %while.entry.i273.preheader, %while.entry.i273
  %266 = load i64, ptr %memberidx.i268, align 4
  %267 = shl i64 %266, 1
  store i64 %267, ptr %memberidx.i268, align 4
  %268 = load ptr, ptr %memberidx2.i.i272, align 8
  %269 = shl i64 %266, 4
  %270 = call ptr @realloc(ptr %268, i64 %269)
  store ptr %270, ptr %memberidx2.i.i272, align 8
  %271 = load i64, ptr %memberidx.i268, align 4
  %272 = load i64, ptr %memberidx1.i269, align 4
  %273 = sub i64 %271, %272
  %274 = icmp slt i64 %273, %264
  br i1 %274, label %while.entry.i273, label %Array_LLVMTypeRef____adda__.exit

Array_LLVMTypeRef____adda__.exit:                 ; preds = %while.entry.i273, %ifend61
  %memberidx6.i274 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  %275 = load ptr, ptr %memberidx6.i274, align 8
  %276 = load i64, ptr %memberidx1.i269, align 4
  %277 = getelementptr inbounds ptr, ptr %275, i64 %276
  %278 = load ptr, ptr %memberidx2.i120, align 8
  %279 = shl i64 %264, 3
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %277, ptr align 8 %278, i64 %279, i1 false)
  %280 = load i64, ptr %memberidx1.i269, align 4
  %281 = add nsw i64 %280, %264
  store i64 %281, ptr %memberidx1.i269, align 4
  call void @free(ptr %278)
  tail call void @free(ptr %11)
  %282 = load ptr, ptr %memberidx2.i117, align 8
  call void @free(ptr %282)
  tail call void @free(ptr %9)
  %283 = load ptr, ptr %memberidx2.i, align 8
  call void @free(ptr %283)
  tail call void @free(ptr %7)
  ret void

if.entry65:                                       ; preds = %if.entry59
  %memberidx68 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 4
  %284 = load ptr, ptr %0, align 8
  %memberidx70 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %285 = load ptr, ptr %memberidx70, align 8
  %286 = load ptr, ptr %285, align 8
  %memberidx71 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %286, i64 0, i32 5
  %287 = load ptr, ptr %memberidx71, align 8
  %288 = call ptr %287(ptr nonnull %285)
  %289 = alloca ptr, align 8
  %290 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %289, ptr nonnull @259, ptr %288)
  %291 = load ptr, ptr %289, align 8
  %292 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %292, align 8
  %memberidx.i279 = getelementptr inbounds %string, ptr %292, i64 0, i32 1
  store ptr %291, ptr %memberidx.i279, align 8
  %memberidx1.i280 = getelementptr inbounds %string, ptr %292, i64 0, i32 2
  store i64 %290, ptr %memberidx1.i280, align 4
  %memberidx2.i281 = getelementptr inbounds %string, ptr %292, i64 0, i32 3
  store i64 %290, ptr %memberidx2.i281, align 4
  tail call void @free(ptr %288)
  %293 = load ptr, ptr %292, align 8
  %memberidx72 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %293, i64 0, i32 5
  %294 = load ptr, ptr %memberidx72, align 8
  %295 = call ptr %294(ptr nonnull %292)
  %296 = call ptr @LLVMAddGlobal(ptr %284, ptr %259, ptr %295)
  store ptr %296, ptr %memberidx68, align 8
  %297 = load ptr, ptr %memberidx2.i, align 8
  %298 = load i64, ptr %memberidx.i, align 4
  %299 = call ptr @LLVMConstStruct(ptr %297, i64 %298, i1 true)
  %300 = load ptr, ptr %memberidx68, align 8
  call void @LLVMSetInitializer(ptr %300, ptr %299)
  br label %ifend67

ifend67:                                          ; preds = %if.entry59, %if.entry65
  %memberidx76 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 5
  store ptr %259, ptr %memberidx76, align 8
  %301 = call ptr @LLVMPointerType(ptr %259, i64 0)
  %memberidx.i282 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 2
  %302 = load i64, ptr %memberidx.i282, align 4
  %memberidx1.i283 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 3
  %303 = load i64, ptr %memberidx1.i283, align 4
  %.not.i284 = icmp slt i64 %302, %303
  br i1 %.not.i284, label %Array_LLVMTypeRef____sl__.exit, label %if.entry.i287

if.entry.i287:                                    ; preds = %ifend67
  %304 = shl i64 %303, 1
  store i64 %304, ptr %memberidx1.i283, align 4
  %memberidx2.i.i286 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  %305 = load ptr, ptr %memberidx2.i.i286, align 8
  %306 = shl i64 %303, 4
  %307 = call ptr @realloc(ptr %305, i64 %306)
  store ptr %307, ptr %memberidx2.i.i286, align 8
  br label %Array_LLVMTypeRef____sl__.exit

Array_LLVMTypeRef____sl__.exit:                   ; preds = %ifend67, %if.entry.i287
  %308 = load i64, ptr %memberidx.i282, align 4
  %309 = add nsw i64 %308, 1
  store i64 %309, ptr %memberidx.i282, align 4
  %memberidx4.i288 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  %310 = load ptr, ptr %memberidx4.i288, align 8
  %ptridx.i289 = getelementptr inbounds ptr, ptr %310, i64 %308
  store ptr %301, ptr %ptridx.i289, align 8
  br label %ifend61
}

define internal fastcc ptr @CodeGen_get_or_codegen_var(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i.i = getelementptr inbounds %VarId, ptr %1, i64 0, i32 1
  %8 = load i64, ptr %memberidx.i.i, align 4
  %9 = load i64, ptr %1, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %1, i64 0, i32 2
  %10 = load i64, ptr %memberidx2.i.i, align 4
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @215, i64 %8, i64 %9, i64 %10)
  %12 = load ptr, ptr %6, align 8
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %14 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %13)
  %memberidx.i124 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 1
  %15 = load i64, ptr %memberidx.i124, align 4
  %16 = srem i64 %14, %15
  %17 = load ptr, ptr %7, align 8
  %ptridx.i125 = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i125, align 8
  %.not.i = icmp eq ptr %18, null
  br i1 %.not.i, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %2, %else.i
  %hash.0.i = phi i64 [ %32, %else.i ], [ %16, %2 ]
  %19 = load ptr, ptr %7, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %19, i64 %hash.0.i
  %20 = load ptr, ptr %ptridx3.i, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx.i.i126 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx.i.i126, align 4
  %23 = load i64, ptr %memberidx1.i.i.i, align 4
  %.not.i.i = icmp eq i64 %22, %23
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i128 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  %24 = load ptr, ptr %memberidx2.i.i128, align 8
  %25 = load ptr, ptr %memberidx.i.i.i, align 8
  %26 = call i64 @memcmp(ptr %24, ptr %25, i64 %22)
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %2
  %hash.1.i = phi i64 [ %16, %2 ], [ %hash.0.i, %ifend.i.i ], [ %32, %else.i ]
  %28 = load ptr, ptr %7, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %28, i64 %hash.1.i
  %29 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %29, null
  br i1 %.not29.i, label %Map_string_LLVMValueRef____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %30 = add nsw i64 %hash.0.i, 1
  %31 = load i64, ptr %memberidx.i124, align 4
  %32 = srem i64 %30, %31
  %33 = load ptr, ptr %7, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %34, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %29, i64 0, i32 1
  %35 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %35, %if.entry10.i ], [ null, %while.end.i ]
  %.not = icmp eq ptr %common.ret.op.i, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %if.entry10.i203, %while.end.i197, %if.entry10.i178, %while.end.i172, %if.entry10.i153, %while.end.i147, %Map_string_LLVMValueRef____getitem__.exit, %for.end43, %ifend18
  %common.ret.op = phi ptr [ null, %ifend18 ], [ null, %for.end43 ], [ %common.ret.op.i, %Map_string_LLVMValueRef____getitem__.exit ], [ %86, %if.entry10.i153 ], [ null, %while.end.i147 ], [ %134, %if.entry10.i178 ], [ null, %while.end.i172 ], [ %180, %if.entry10.i203 ], [ null, %while.end.i197 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %36 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %36, i64 0, i32 1
  %37 = load ptr, ptr %memberidx1, align 8
  %38 = load i64, ptr %memberidx.i.i, align 4
  %memberidx.i71 = getelementptr inbounds %Array_Module_, ptr %37, i64 0, i32 1
  %39 = load ptr, ptr %memberidx.i71, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %39, i64 %38
  %40 = load ptr, ptr %ptridx.i, align 8
  %41 = load i64, ptr %1, align 4
  %42 = icmp eq i64 %41, 2
  br i1 %42, label %for.entry, label %ifend6

ifend6:                                           ; preds = %ifend, %for.end
  %43 = load i64, ptr %1, align 4
  %44 = icmp eq i64 %43, 1
  br i1 %44, label %for.entry19, label %ifend18

for.entry:                                        ; preds = %ifend
  %memberidx7 = getelementptr inbounds %Module, ptr %40, i64 0, i32 9
  %45 = load ptr, ptr %memberidx7, align 8
  %46 = call ptr @malloc(i32 25)
  %memberidx.i72 = getelementptr inbounds %Array_ConstDeclaration_, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i72, align 8
  %memberidx1.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %45, i64 0, i32 2
  %48 = load i64, ptr %memberidx1.i, align 4
  store i1 false, ptr %46, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %46, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i73 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %46, i64 0, i32 3
  store ptr %47, ptr %memberidx2.i.i73, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %46, i64 0, i32 2
  store i64 %48, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i, align 4
  %49 = icmp slt i64 %48, 1
  br i1 %49, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %50 = load i64, ptr %memberidx2.i.i, align 4
  %storemerge70230256 = load ptr, ptr %47, align 8
  %memberidx9257 = getelementptr inbounds %ConstDeclaration, ptr %storemerge70230256, i64 0, i32 2
  %51 = load ptr, ptr %memberidx9257, align 8
  %memberidx10258 = getelementptr inbounds %VarId, ptr %51, i64 0, i32 2
  %52 = load i64, ptr %memberidx10258, align 4
  %53 = icmp eq i64 %52, %50
  br i1 %53, label %if.entry12, label %ifend14.preheader

ifend14.preheader:                                ; preds = %for.body.lr.ph
  %memberidx1.i.i.promoted = load i64, ptr %memberidx1.i.i, align 4
  br label %ifend14

for.body:                                         ; preds = %ifend14
  %54 = load ptr, ptr %memberidx2.i.i73, align 8
  %ptridx.i84 = getelementptr inbounds ptr, ptr %54, i64 %87
  %storemerge70230 = load ptr, ptr %ptridx.i84, align 8
  %memberidx9 = getelementptr inbounds %ConstDeclaration, ptr %storemerge70230, i64 0, i32 2
  %55 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %VarId, ptr %55, i64 0, i32 2
  %56 = load i64, ptr %memberidx10, align 4
  %57 = icmp eq i64 %56, %50
  br i1 %57, label %if.entry12.loopexit, label %ifend14

for.end.loopexit:                                 ; preds = %ifend14
  store i64 %88, ptr %memberidx1.i.i, align 4
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.entry
  %storemerge214.lcssa = phi i1 [ %49, %for.entry ], [ %90, %for.end.loopexit ]
  store i1 %storemerge214.lcssa, ptr %46, align 1
  tail call void @free(ptr nonnull %46)
  br label %ifend6

if.entry12.loopexit:                              ; preds = %for.body
  store i64 %88, ptr %memberidx1.i.i, align 4
  br label %if.entry12

if.entry12:                                       ; preds = %if.entry12.loopexit, %for.body.lr.ph
  %storemerge214229.lcssa = phi i1 [ %49, %for.body.lr.ph ], [ %90, %if.entry12.loopexit ]
  %storemerge70230.lcssa = phi ptr [ %storemerge70230256, %for.body.lr.ph ], [ %storemerge70230, %if.entry12.loopexit ]
  store i1 %storemerge214229.lcssa, ptr %46, align 1
  call fastcc void @CodeGen_codegen_const_declaration(ptr %0, ptr null, ptr %storemerge70230.lcssa)
  %58 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %59 = load i64, ptr %memberidx.i.i, align 4
  %60 = load i64, ptr %1, align 4
  %61 = load i64, ptr %memberidx2.i.i, align 4
  %62 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @215, i64 %59, i64 %60, i64 %61)
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %64, align 8
  %memberidx.i.i.i79 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  store ptr %63, ptr %memberidx.i.i.i79, align 8
  %memberidx1.i.i.i80 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  store i64 %62, ptr %memberidx1.i.i.i80, align 4
  %memberidx2.i.i.i81 = getelementptr inbounds %string, ptr %64, i64 0, i32 3
  store i64 %62, ptr %memberidx2.i.i.i81, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %65 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %64)
  %memberidx.i130 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %58, i64 0, i32 1
  %66 = load i64, ptr %memberidx.i130, align 4
  %67 = srem i64 %65, %66
  %68 = load ptr, ptr %58, align 8
  %ptridx.i131 = getelementptr inbounds ptr, ptr %68, i64 %67
  %69 = load ptr, ptr %ptridx.i131, align 8
  %.not.i132 = icmp eq ptr %69, null
  br i1 %.not.i132, label %while.end.i147, label %while.entry.i138

while.entry.i138:                                 ; preds = %if.entry12, %else.i150
  %hash.0.i133 = phi i64 [ %83, %else.i150 ], [ %67, %if.entry12 ]
  %70 = load ptr, ptr %58, align 8
  %ptridx3.i134 = getelementptr inbounds ptr, ptr %70, i64 %hash.0.i133
  %71 = load ptr, ptr %ptridx3.i134, align 8
  %72 = load ptr, ptr %71, align 8
  %memberidx.i.i135 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  %73 = load i64, ptr %memberidx.i.i135, align 4
  %74 = load i64, ptr %memberidx1.i.i.i80, align 4
  %.not.i.i137 = icmp eq i64 %73, %74
  br i1 %.not.i.i137, label %ifend.i.i141, label %else.i150

ifend.i.i141:                                     ; preds = %while.entry.i138
  %memberidx2.i.i139 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  %75 = load ptr, ptr %memberidx2.i.i139, align 8
  %76 = load ptr, ptr %memberidx.i.i.i79, align 8
  %77 = call i64 @memcmp(ptr %75, ptr %76, i64 %73)
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %while.end.i147, label %else.i150

while.end.i147:                                   ; preds = %else.i150, %ifend.i.i141, %if.entry12
  %hash.1.i144 = phi i64 [ %67, %if.entry12 ], [ %hash.0.i133, %ifend.i.i141 ], [ %83, %else.i150 ]
  %79 = load ptr, ptr %58, align 8
  %ptridx9.i145 = getelementptr inbounds ptr, ptr %79, i64 %hash.1.i144
  %80 = load ptr, ptr %ptridx9.i145, align 8
  %.not29.i146 = icmp eq ptr %80, null
  br i1 %.not29.i146, label %common.ret, label %if.entry10.i153

else.i150:                                        ; preds = %while.entry.i138, %ifend.i.i141
  %81 = add nsw i64 %hash.0.i133, 1
  %82 = load i64, ptr %memberidx.i130, align 4
  %83 = srem i64 %81, %82
  %84 = load ptr, ptr %58, align 8
  %ptridx7.i148 = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx7.i148, align 8
  %.not30.i149 = icmp eq ptr %85, null
  br i1 %.not30.i149, label %while.end.i147, label %while.entry.i138

if.entry10.i153:                                  ; preds = %while.end.i147
  %memberidx15.i152 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %80, i64 0, i32 1
  %86 = load ptr, ptr %memberidx15.i152, align 8
  br label %common.ret

ifend14:                                          ; preds = %ifend14.preheader, %for.body
  %87 = phi i64 [ %memberidx1.i.i.promoted, %ifend14.preheader ], [ %88, %for.body ]
  %88 = add nsw i64 %87, 1
  %89 = load i64, ptr %memberidx3.i.i, align 4
  %90 = icmp sge i64 %87, %89
  br i1 %90, label %for.end.loopexit, label %for.body

ifend18:                                          ; preds = %ifend6, %for.end25
  %91 = load i64, ptr %1, align 4
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %for.entry37, label %common.ret

for.entry19:                                      ; preds = %ifend6
  %memberidx21 = getelementptr inbounds %Module, ptr %40, i64 0, i32 10
  %93 = load ptr, ptr %memberidx21, align 8
  %94 = call ptr @malloc(i32 25)
  %memberidx.i86 = getelementptr inbounds %Array_VarDeclaration_, ptr %93, i64 0, i32 1
  %95 = load ptr, ptr %memberidx.i86, align 8
  %memberidx1.i87 = getelementptr inbounds %Array_VarDeclaration_, ptr %93, i64 0, i32 2
  %96 = load i64, ptr %memberidx1.i87, align 4
  store i1 false, ptr %94, align 1
  %memberidx1.i.i88 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %94, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i88, align 4
  %memberidx2.i.i89 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %94, i64 0, i32 3
  store ptr %95, ptr %memberidx2.i.i89, align 8
  %memberidx3.i.i90 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %94, i64 0, i32 2
  store i64 %96, ptr %memberidx3.i.i90, align 4
  store i64 1, ptr %memberidx1.i.i88, align 4
  %97 = icmp slt i64 %96, 1
  br i1 %97, label %for.end25, label %for.body23.lr.ph

for.body23.lr.ph:                                 ; preds = %for.entry19
  %98 = load i64, ptr %memberidx2.i.i, align 4
  %storemerge69225251 = load ptr, ptr %95, align 8
  %memberidx27252 = getelementptr inbounds %VarDeclaration, ptr %storemerge69225251, i64 0, i32 2
  %99 = load ptr, ptr %memberidx27252, align 8
  %memberidx28253 = getelementptr inbounds %VarId, ptr %99, i64 0, i32 2
  %100 = load i64, ptr %memberidx28253, align 4
  %101 = icmp eq i64 %100, %98
  br i1 %101, label %if.entry30, label %ifend32.preheader

ifend32.preheader:                                ; preds = %for.body23.lr.ph
  %memberidx1.i.i88.promoted = load i64, ptr %memberidx1.i.i88, align 4
  br label %ifend32

for.body23:                                       ; preds = %ifend32
  %102 = load ptr, ptr %memberidx2.i.i89, align 8
  %ptridx.i103 = getelementptr inbounds ptr, ptr %102, i64 %135
  %storemerge69225 = load ptr, ptr %ptridx.i103, align 8
  %memberidx27 = getelementptr inbounds %VarDeclaration, ptr %storemerge69225, i64 0, i32 2
  %103 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %VarId, ptr %103, i64 0, i32 2
  %104 = load i64, ptr %memberidx28, align 4
  %105 = icmp eq i64 %104, %98
  br i1 %105, label %if.entry30.loopexit, label %ifend32

for.end25.loopexit:                               ; preds = %ifend32
  store i64 %136, ptr %memberidx1.i.i88, align 4
  br label %for.end25

for.end25:                                        ; preds = %for.end25.loopexit, %for.entry19
  %storemerge213.lcssa = phi i1 [ %97, %for.entry19 ], [ %138, %for.end25.loopexit ]
  store i1 %storemerge213.lcssa, ptr %94, align 1
  tail call void @free(ptr nonnull %94)
  br label %ifend18

if.entry30.loopexit:                              ; preds = %for.body23
  store i64 %136, ptr %memberidx1.i.i88, align 4
  br label %if.entry30

if.entry30:                                       ; preds = %if.entry30.loopexit, %for.body23.lr.ph
  %storemerge213224.lcssa = phi i1 [ %97, %for.body23.lr.ph ], [ %138, %if.entry30.loopexit ]
  %storemerge69225.lcssa = phi ptr [ %storemerge69225251, %for.body23.lr.ph ], [ %storemerge69225, %if.entry30.loopexit ]
  store i1 %storemerge213224.lcssa, ptr %94, align 1
  call fastcc void @CodeGen_codegen_var_declaration(ptr %0, ptr null, ptr %storemerge69225.lcssa)
  %106 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %107 = load i64, ptr %memberidx.i.i, align 4
  %108 = load i64, ptr %1, align 4
  %109 = load i64, ptr %memberidx2.i.i, align 4
  %110 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @215, i64 %107, i64 %108, i64 %109)
  %111 = load ptr, ptr %4, align 8
  %112 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i.i.i98 = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i.i.i98, align 8
  %memberidx1.i.i.i99 = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 %110, ptr %memberidx1.i.i.i99, align 4
  %memberidx2.i.i.i100 = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 %110, ptr %memberidx2.i.i.i100, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %113 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %112)
  %memberidx.i155 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %106, i64 0, i32 1
  %114 = load i64, ptr %memberidx.i155, align 4
  %115 = srem i64 %113, %114
  %116 = load ptr, ptr %106, align 8
  %ptridx.i156 = getelementptr inbounds ptr, ptr %116, i64 %115
  %117 = load ptr, ptr %ptridx.i156, align 8
  %.not.i157 = icmp eq ptr %117, null
  br i1 %.not.i157, label %while.end.i172, label %while.entry.i163

while.entry.i163:                                 ; preds = %if.entry30, %else.i175
  %hash.0.i158 = phi i64 [ %131, %else.i175 ], [ %115, %if.entry30 ]
  %118 = load ptr, ptr %106, align 8
  %ptridx3.i159 = getelementptr inbounds ptr, ptr %118, i64 %hash.0.i158
  %119 = load ptr, ptr %ptridx3.i159, align 8
  %120 = load ptr, ptr %119, align 8
  %memberidx.i.i160 = getelementptr inbounds %string, ptr %120, i64 0, i32 2
  %121 = load i64, ptr %memberidx.i.i160, align 4
  %122 = load i64, ptr %memberidx1.i.i.i99, align 4
  %.not.i.i162 = icmp eq i64 %121, %122
  br i1 %.not.i.i162, label %ifend.i.i166, label %else.i175

ifend.i.i166:                                     ; preds = %while.entry.i163
  %memberidx2.i.i164 = getelementptr inbounds %string, ptr %120, i64 0, i32 1
  %123 = load ptr, ptr %memberidx2.i.i164, align 8
  %124 = load ptr, ptr %memberidx.i.i.i98, align 8
  %125 = call i64 @memcmp(ptr %123, ptr %124, i64 %121)
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %while.end.i172, label %else.i175

while.end.i172:                                   ; preds = %else.i175, %ifend.i.i166, %if.entry30
  %hash.1.i169 = phi i64 [ %115, %if.entry30 ], [ %hash.0.i158, %ifend.i.i166 ], [ %131, %else.i175 ]
  %127 = load ptr, ptr %106, align 8
  %ptridx9.i170 = getelementptr inbounds ptr, ptr %127, i64 %hash.1.i169
  %128 = load ptr, ptr %ptridx9.i170, align 8
  %.not29.i171 = icmp eq ptr %128, null
  br i1 %.not29.i171, label %common.ret, label %if.entry10.i178

else.i175:                                        ; preds = %while.entry.i163, %ifend.i.i166
  %129 = add nsw i64 %hash.0.i158, 1
  %130 = load i64, ptr %memberidx.i155, align 4
  %131 = srem i64 %129, %130
  %132 = load ptr, ptr %106, align 8
  %ptridx7.i173 = getelementptr inbounds ptr, ptr %132, i64 %131
  %133 = load ptr, ptr %ptridx7.i173, align 8
  %.not30.i174 = icmp eq ptr %133, null
  br i1 %.not30.i174, label %while.end.i172, label %while.entry.i163

if.entry10.i178:                                  ; preds = %while.end.i172
  %memberidx15.i177 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %128, i64 0, i32 1
  %134 = load ptr, ptr %memberidx15.i177, align 8
  br label %common.ret

ifend32:                                          ; preds = %ifend32.preheader, %for.body23
  %135 = phi i64 [ %memberidx1.i.i88.promoted, %ifend32.preheader ], [ %136, %for.body23 ]
  %136 = add nsw i64 %135, 1
  %137 = load i64, ptr %memberidx3.i.i90, align 4
  %138 = icmp sge i64 %135, %137
  br i1 %138, label %for.end25.loopexit, label %for.body23

for.entry37:                                      ; preds = %ifend18
  %memberidx39 = getelementptr inbounds %Module, ptr %40, i64 0, i32 5
  %139 = load ptr, ptr %memberidx39, align 8
  %140 = call ptr @malloc(i32 25)
  %memberidx.i105 = getelementptr inbounds %Array_Function_, ptr %139, i64 0, i32 1
  %141 = load ptr, ptr %memberidx.i105, align 8
  %memberidx1.i106 = getelementptr inbounds %Array_Function_, ptr %139, i64 0, i32 2
  %142 = load i64, ptr %memberidx1.i106, align 4
  store i1 false, ptr %140, align 1
  %memberidx1.i.i107 = getelementptr inbounds %ArrayIterator_Function_, ptr %140, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i107, align 4
  %memberidx2.i.i108 = getelementptr inbounds %ArrayIterator_Function_, ptr %140, i64 0, i32 3
  store ptr %141, ptr %memberidx2.i.i108, align 8
  %memberidx3.i.i109 = getelementptr inbounds %ArrayIterator_Function_, ptr %140, i64 0, i32 2
  store i64 %142, ptr %memberidx3.i.i109, align 4
  store i64 1, ptr %memberidx1.i.i107, align 4
  %143 = icmp slt i64 %142, 1
  br i1 %143, label %for.end43, label %for.body41.lr.ph

for.body41.lr.ph:                                 ; preds = %for.entry37
  %144 = load i64, ptr %memberidx2.i.i, align 4
  %storemerge221248 = load ptr, ptr %141, align 8
  %145 = load ptr, ptr %storemerge221248, align 8
  %memberidx46249 = getelementptr inbounds %VarId, ptr %145, i64 0, i32 2
  %146 = load i64, ptr %memberidx46249, align 4
  %147 = icmp eq i64 %146, %144
  br i1 %147, label %if.entry48, label %ifend50.preheader

ifend50.preheader:                                ; preds = %for.body41.lr.ph
  %memberidx1.i.i107.promoted = load i64, ptr %memberidx1.i.i107, align 4
  br label %ifend50

for.body41:                                       ; preds = %ifend50
  %148 = load ptr, ptr %memberidx2.i.i108, align 8
  %ptridx.i122 = getelementptr inbounds ptr, ptr %148, i64 %181
  %storemerge221 = load ptr, ptr %ptridx.i122, align 8
  %149 = load ptr, ptr %storemerge221, align 8
  %memberidx46 = getelementptr inbounds %VarId, ptr %149, i64 0, i32 2
  %150 = load i64, ptr %memberidx46, align 4
  %151 = icmp eq i64 %150, %144
  br i1 %151, label %if.entry48.loopexit, label %ifend50

for.end43.loopexit:                               ; preds = %ifend50
  store i64 %182, ptr %memberidx1.i.i107, align 4
  br label %for.end43

for.end43:                                        ; preds = %for.end43.loopexit, %for.entry37
  %storemerge212.lcssa = phi i1 [ %143, %for.entry37 ], [ %184, %for.end43.loopexit ]
  store i1 %storemerge212.lcssa, ptr %140, align 1
  tail call void @free(ptr nonnull %140)
  br label %common.ret

if.entry48.loopexit:                              ; preds = %for.body41
  store i64 %182, ptr %memberidx1.i.i107, align 4
  br label %if.entry48

if.entry48:                                       ; preds = %if.entry48.loopexit, %for.body41.lr.ph
  %storemerge212220.lcssa = phi i1 [ %143, %for.body41.lr.ph ], [ %184, %if.entry48.loopexit ]
  %storemerge221.lcssa = phi ptr [ %storemerge221248, %for.body41.lr.ph ], [ %storemerge221, %if.entry48.loopexit ]
  store i1 %storemerge212220.lcssa, ptr %140, align 1
  call fastcc void @CodeGen_codegen_function(ptr %0, ptr nonnull %storemerge221.lcssa)
  %152 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %153 = load i64, ptr %memberidx.i.i, align 4
  %154 = load i64, ptr %1, align 4
  %155 = load i64, ptr %memberidx2.i.i, align 4
  %156 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @215, i64 %153, i64 %154, i64 %155)
  %157 = load ptr, ptr %3, align 8
  %158 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %158, align 8
  %memberidx.i.i.i117 = getelementptr inbounds %string, ptr %158, i64 0, i32 1
  store ptr %157, ptr %memberidx.i.i.i117, align 8
  %memberidx1.i.i.i118 = getelementptr inbounds %string, ptr %158, i64 0, i32 2
  store i64 %156, ptr %memberidx1.i.i.i118, align 4
  %memberidx2.i.i.i119 = getelementptr inbounds %string, ptr %158, i64 0, i32 3
  store i64 %156, ptr %memberidx2.i.i.i119, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %159 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %158)
  %memberidx.i180 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %152, i64 0, i32 1
  %160 = load i64, ptr %memberidx.i180, align 4
  %161 = srem i64 %159, %160
  %162 = load ptr, ptr %152, align 8
  %ptridx.i181 = getelementptr inbounds ptr, ptr %162, i64 %161
  %163 = load ptr, ptr %ptridx.i181, align 8
  %.not.i182 = icmp eq ptr %163, null
  br i1 %.not.i182, label %while.end.i197, label %while.entry.i188

while.entry.i188:                                 ; preds = %if.entry48, %else.i200
  %hash.0.i183 = phi i64 [ %177, %else.i200 ], [ %161, %if.entry48 ]
  %164 = load ptr, ptr %152, align 8
  %ptridx3.i184 = getelementptr inbounds ptr, ptr %164, i64 %hash.0.i183
  %165 = load ptr, ptr %ptridx3.i184, align 8
  %166 = load ptr, ptr %165, align 8
  %memberidx.i.i185 = getelementptr inbounds %string, ptr %166, i64 0, i32 2
  %167 = load i64, ptr %memberidx.i.i185, align 4
  %168 = load i64, ptr %memberidx1.i.i.i118, align 4
  %.not.i.i187 = icmp eq i64 %167, %168
  br i1 %.not.i.i187, label %ifend.i.i191, label %else.i200

ifend.i.i191:                                     ; preds = %while.entry.i188
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %166, i64 0, i32 1
  %169 = load ptr, ptr %memberidx2.i.i189, align 8
  %170 = load ptr, ptr %memberidx.i.i.i117, align 8
  %171 = call i64 @memcmp(ptr %169, ptr %170, i64 %167)
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %while.end.i197, label %else.i200

while.end.i197:                                   ; preds = %else.i200, %ifend.i.i191, %if.entry48
  %hash.1.i194 = phi i64 [ %161, %if.entry48 ], [ %hash.0.i183, %ifend.i.i191 ], [ %177, %else.i200 ]
  %173 = load ptr, ptr %152, align 8
  %ptridx9.i195 = getelementptr inbounds ptr, ptr %173, i64 %hash.1.i194
  %174 = load ptr, ptr %ptridx9.i195, align 8
  %.not29.i196 = icmp eq ptr %174, null
  br i1 %.not29.i196, label %common.ret, label %if.entry10.i203

else.i200:                                        ; preds = %while.entry.i188, %ifend.i.i191
  %175 = add nsw i64 %hash.0.i183, 1
  %176 = load i64, ptr %memberidx.i180, align 4
  %177 = srem i64 %175, %176
  %178 = load ptr, ptr %152, align 8
  %ptridx7.i198 = getelementptr inbounds ptr, ptr %178, i64 %177
  %179 = load ptr, ptr %ptridx7.i198, align 8
  %.not30.i199 = icmp eq ptr %179, null
  br i1 %.not30.i199, label %while.end.i197, label %while.entry.i188

if.entry10.i203:                                  ; preds = %while.end.i197
  %memberidx15.i202 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %174, i64 0, i32 1
  %180 = load ptr, ptr %memberidx15.i202, align 8
  br label %common.ret

ifend50:                                          ; preds = %ifend50.preheader, %for.body41
  %181 = phi i64 [ %memberidx1.i.i107.promoted, %ifend50.preheader ], [ %182, %for.body41 ]
  %182 = add nsw i64 %181, 1
  %183 = load i64, ptr %memberidx3.i.i109, align 4
  %184 = icmp sge i64 %181, %183
  br i1 %184, label %for.end43.loopexit, label %for.body41
}

define internal fastcc void @CodeGen_declare_enum(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = tail call ptr @malloc(i32 24)
  %7 = call ptr @malloc(i32 24)
  %8 = call ptr @malloc(i32 2048)
  store ptr %8, ptr %7, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %2, %for.body.i.i
  %i.0.i.i71 = phi i64 [ 0, %2 ], [ %10, %for.body.i.i ]
  %9 = load ptr, ptr %7, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %i.0.i.i71
  store ptr null, ptr %ptridx.i.i, align 8
  %10 = add nuw nsw i64 %i.0.i.i71, 1
  %11 = icmp ult i64 %i.0.i.i71, 255
  br i1 %11, label %for.body.i.i, label %CGEnumType_constructor.exit

CGEnumType_constructor.exit:                      ; preds = %for.body.i.i
  %memberidx.i64 = getelementptr inbounds %CGEnumType, ptr %6, i64 0, i32 1
  %memberidx2.i.i65 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 1
  store i64 256, ptr %memberidx2.i.i65, align 4
  %memberidx3.i.i66 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i66, align 4
  store ptr %7, ptr %memberidx.i64, align 8
  %memberidx = getelementptr inbounds %Enum, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx1, align 4
  %14 = icmp sgt i64 %13, 0
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %CGEnumType_constructor.exit
  %memberidx.i63 = getelementptr inbounds %Array_EnumField_, ptr %12, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i63, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx4 = getelementptr inbounds %EnumField, ptr %16, i64 0, i32 2
  %17 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %17, i64 0, i32 3
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %18, i1 true)
  br label %ifend

else:                                             ; preds = %CGEnumType_constructor.exit
  %20 = call ptr @LLVMIntType(i64 64)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %storemerge = phi ptr [ %20, %else ], [ %19, %if.entry ]
  store ptr %storemerge, ptr %6, align 8
  %21 = load ptr, ptr %memberidx, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumField_, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx8, align 4
  %23 = alloca ptr, i64 %22, align 8
  %idx = alloca i64, align 8
  store i64 0, ptr %idx, align 8
  %24 = call ptr @malloc(i32 25)
  %memberidx.i59 = getelementptr inbounds %Array_EnumField_, ptr %21, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i59, align 8
  %26 = load i64, ptr %memberidx8, align 4
  store i1 false, ptr %24, align 1
  %memberidx1.i.i61 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %24, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i61, align 4
  %memberidx2.i.i62 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %24, i64 0, i32 3
  store ptr %25, ptr %memberidx2.i.i62, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_EnumField_, ptr %24, i64 0, i32 2
  store i64 %26, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i61, align 4
  %27 = icmp slt i64 %26, 1
  %idx.promoted = load i64, ptr %idx, align 8
  br i1 %27, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %ifend
  %memberidx14 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %storemerge4169.in = phi ptr [ %25, %for.body.lr.ph ], [ %ptridx.i, %for.body ]
  %28 = phi i64 [ %idx.promoted, %for.body.lr.ph ], [ %67, %for.body ]
  %storemerge4169 = load ptr, ptr %storemerge4169.in, align 8
  %29 = load ptr, ptr %storemerge4169, align 8
  %30 = load ptr, ptr %memberidx.i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i48 = getelementptr inbounds %PropId, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i48, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %32 = load i64, ptr %31, align 4
  %memberidx1.i.i49 = getelementptr inbounds %TypeId, ptr %31, i64 0, i32 1
  %33 = load i64, ptr %memberidx1.i.i49, align 4
  %memberidx2.i.i50 = getelementptr inbounds %TypeId, ptr %31, i64 0, i32 2
  %34 = load i64, ptr %memberidx2.i.i50, align 4
  %35 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @215, i64 %32, i64 %33, i64 %34)
  %36 = load ptr, ptr %3, align 8
  %37 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %37, align 8
  %memberidx.i.i.i51 = getelementptr inbounds %string, ptr %37, i64 0, i32 1
  store ptr %36, ptr %memberidx.i.i.i51, align 8
  %memberidx1.i.i.i52 = getelementptr inbounds %string, ptr %37, i64 0, i32 2
  store i64 %35, ptr %memberidx1.i.i.i52, align 4
  %memberidx2.i.i.i53 = getelementptr inbounds %string, ptr %37, i64 0, i32 3
  store i64 %35, ptr %memberidx2.i.i.i53, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %38 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %39 = call ptr %38(ptr nonnull %37)
  %40 = load i64, ptr %29, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %29, i64 0, i32 2
  %41 = load i64, ptr %memberidx3.i, align 4
  %42 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @231, ptr %39, i64 %40, i64 %41)
  %43 = load ptr, ptr %4, align 8
  %44 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 %42, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 %42, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %39)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %memberidx13 = getelementptr inbounds %EnumField, ptr %storemerge4169, i64 0, i32 2
  %45 = load ptr, ptr %memberidx13, align 8
  %46 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr null, ptr %45)
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %30, ptr nonnull %44, ptr %46)
  %47 = load ptr, ptr %memberidx14, align 8
  %48 = load ptr, ptr %47, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %48, i64 0, i32 5
  %49 = load ptr, ptr %memberidx15, align 8
  %50 = call ptr %49(ptr nonnull %47)
  %memberidx16 = getelementptr inbounds %EnumField, ptr %storemerge4169, i64 0, i32 1
  %51 = load ptr, ptr %memberidx16, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 5
  %53 = load ptr, ptr %memberidx17, align 8
  %54 = call ptr %53(ptr nonnull %51)
  %55 = alloca ptr, align 8
  %56 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %55, ptr nonnull @261, ptr %50, ptr %54)
  %57 = load ptr, ptr %55, align 8
  %58 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %58, align 8
  %memberidx.i45 = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  store ptr %57, ptr %memberidx.i45, align 8
  %memberidx1.i46 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  store i64 %56, ptr %memberidx1.i46, align 4
  %memberidx2.i47 = getelementptr inbounds %string, ptr %58, i64 0, i32 3
  store i64 %56, ptr %memberidx2.i47, align 4
  tail call void @free(ptr %50)
  tail call void @free(ptr %54)
  %59 = load ptr, ptr %58, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 5
  %60 = load ptr, ptr %memberidx18, align 8
  %61 = call ptr %60(ptr nonnull %58)
  %62 = load i64, ptr %memberidx1.i46, align 4
  %63 = call ptr @LLVMConstString(ptr %61, i64 %62, i1 false)
  %64 = load ptr, ptr %0, align 8
  %65 = call ptr @LLVMTypeOf(ptr %63)
  %66 = call ptr @LLVMAddGlobal(ptr %64, ptr %65, ptr nonnull @28)
  call void @LLVMSetInitializer(ptr %66, ptr %63)
  %67 = add nsw i64 %28, 1
  %ptridx = getelementptr inbounds ptr, ptr %23, i64 %28
  store ptr %66, ptr %ptridx, align 8
  %68 = load i64, ptr %memberidx1.i.i61, align 4
  %69 = add nsw i64 %68, 1
  store i64 %69, ptr %memberidx1.i.i61, align 4
  %70 = load ptr, ptr %memberidx2.i.i62, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %70, i64 %68
  %71 = load i64, ptr %memberidx3.i.i, align 4
  %72 = icmp sge i64 %68, %71
  br i1 %72, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %ifend
  %.lcssa = phi i64 [ %idx.promoted, %ifend ], [ %67, %for.body ]
  %storemerge67.lcssa = phi i1 [ %27, %ifend ], [ %72, %for.body ]
  store i1 %storemerge67.lcssa, ptr %24, align 1
  store i64 %.lcssa, ptr %idx, align 8
  tail call void @free(ptr nonnull %24)
  %73 = call ptr @LLVMInt8Type()
  %74 = call ptr @LLVMPointerType(ptr %73, i64 0)
  %75 = call ptr @LLVMConstArray(ptr %74, ptr nonnull %23, i64 %.lcssa)
  %76 = load ptr, ptr %0, align 8
  %77 = call ptr @LLVMTypeOf(ptr %75)
  %memberidx22 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 1
  %78 = load ptr, ptr %memberidx22, align 8
  %79 = load ptr, ptr %78, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %79, i64 0, i32 5
  %80 = load ptr, ptr %memberidx23, align 8
  %81 = call ptr %80(ptr nonnull %78)
  %82 = alloca ptr, align 8
  %83 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %82, ptr nonnull @262, ptr %81)
  %84 = load ptr, ptr %82, align 8
  %85 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %85, align 8
  %memberidx.i42 = getelementptr inbounds %string, ptr %85, i64 0, i32 1
  store ptr %84, ptr %memberidx.i42, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %85, i64 0, i32 2
  store i64 %83, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %85, i64 0, i32 3
  store i64 %83, ptr %memberidx2.i, align 4
  tail call void @free(ptr %81)
  %86 = load ptr, ptr %85, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %86, i64 0, i32 5
  %87 = load ptr, ptr %memberidx24, align 8
  %88 = call ptr %87(ptr nonnull %85)
  %89 = call ptr @LLVMAddGlobal(ptr %76, ptr %77, ptr %88)
  call void @LLVMSetInitializer(ptr %89, ptr %75)
  %memberidx25 = getelementptr inbounds %CGEnumType, ptr %6, i64 0, i32 2
  store ptr %89, ptr %memberidx25, align 8
  %90 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 9
  %91 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %92 = load i64, ptr %90, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %90, i64 0, i32 1
  %93 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %90, i64 0, i32 2
  %94 = load i64, ptr %memberidx2.i.i, align 4
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @215, i64 %92, i64 %93, i64 %94)
  %96 = load ptr, ptr %5, align 8
  %97 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 %95, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 %95, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call fastcc void @Map_string_CGEnumType____setitem__(ptr %91, ptr nonnull %97, ptr nonnull %6)
  ret void
}

define internal fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr nocapture readonly %0, ptr %1, ptr %2, ptr nocapture readonly %3, i64 %4, ptr writeonly %5) unnamed_addr {
  %7 = call ptr @LLVMInt8Type()
  %8 = call ptr @LLVMPointerType(ptr %7, i64 0)
  %9 = call ptr @LLVMIntType(i64 64)
  %10 = call ptr @LLVMBuildAlloca(ptr %1, ptr %8, ptr nonnull @28)
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %11 = load ptr, ptr %memberidx.i, align 8
  %12 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %2)
  %memberidx.i25 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %11, i64 0, i32 1
  %13 = load i64, ptr %memberidx.i25, align 4
  %14 = srem i64 %12, %13
  %15 = load ptr, ptr %11, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i, align 8
  %.not.i26 = icmp eq ptr %16, null
  br i1 %.not.i26, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %6
  %memberidx1.i.i28 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  %memberidx3.i.i = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i30
  %hash.0.i = phi i64 [ %30, %else.i30 ], [ %14, %while.entry.i.preheader ]
  %17 = load ptr, ptr %11, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %17, i64 %hash.0.i
  %18 = load ptr, ptr %ptridx3.i, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx.i.i27 = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i27, align 4
  %21 = load i64, ptr %memberidx1.i.i28, align 4
  %.not.i.i = icmp eq i64 %20, %21
  br i1 %.not.i.i, label %ifend.i.i, label %else.i30

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i29 = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i29, align 8
  %23 = load ptr, ptr %memberidx3.i.i, align 8
  %24 = call i64 @memcmp(ptr %22, ptr %23, i64 %20)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %while.end.i, label %else.i30

while.end.i:                                      ; preds = %else.i30, %ifend.i.i, %6
  %hash.1.i = phi i64 [ %14, %6 ], [ %hash.0.i, %ifend.i.i ], [ %30, %else.i30 ]
  %26 = load ptr, ptr %11, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %26, i64 %hash.1.i
  %27 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %27, null
  br i1 %.not29.i, label %Map_string_LLVMValueRef____getitem__.exit, label %if.entry10.i

else.i30:                                         ; preds = %while.entry.i, %ifend.i.i
  %28 = add nsw i64 %hash.0.i, 1
  %29 = load i64, ptr %memberidx.i25, align 4
  %30 = srem i64 %28, %29
  %31 = load ptr, ptr %11, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %32, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %27, i64 0, i32 1
  %33 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %33, %if.entry10.i ], [ null, %while.end.i ]
  %34 = icmp eq ptr %common.ret.op.i, null
  br i1 %34, label %if.entry.i, label %CodeGen_createGlobalLLVMString.exit

if.entry.i:                                       ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %35 = load ptr, ptr %2, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i64 0, i32 5
  %36 = load ptr, ptr %memberidx1.i, align 8
  %37 = call ptr %36(ptr nonnull %2)
  %38 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %37, ptr nonnull @28)
  %39 = load ptr, ptr %memberidx.i, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %39, ptr nonnull %2, ptr %38)
  br label %CodeGen_createGlobalLLVMString.exit

CodeGen_createGlobalLLVMString.exit:              ; preds = %Map_string_LLVMValueRef____getitem__.exit, %if.entry.i
  %str.0.i = phi ptr [ %38, %if.entry.i ], [ %common.ret.op.i, %Map_string_LLVMValueRef____getitem__.exit ]
  %40 = add nsw i64 %4, 2
  %41 = alloca ptr, i64 %40, align 8
  store ptr %10, ptr %41, align 8
  %ptridx1 = getelementptr inbounds ptr, ptr %41, i64 1
  store ptr %str.0.i, ptr %ptridx1, align 8
  %42 = getelementptr inbounds ptr, ptr %41, i64 2
  %43 = shl i64 %4, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2147483648 %42, ptr align 8 %3, i64 %43, i1 false)
  %arg_types = alloca [2 x ptr], align 8
  store ptr %8, ptr %arg_types, align 8
  %44 = getelementptr inbounds ptr, ptr %arg_types, i64 1
  store ptr %8, ptr %44, align 8
  %45 = load ptr, ptr %0, align 8
  %46 = call ptr @malloc(i32 8)
  store i64 7382647088337679201, ptr %46, align 8
  %47 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i, align 4
  %48 = call ptr @malloc(i32 16)
  %memberidx1.i.i21 = getelementptr inbounds %IntrinsicResult, ptr %48, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %48, i8 0, i64 16, i1 false)
  %49 = call ptr @LLVMFunctionType(ptr %9, ptr nonnull %arg_types, i64 2, i1 true)
  store ptr %49, ptr %memberidx1.i.i21, align 8
  %50 = load ptr, ptr %47, align 8
  %memberidx1.i23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i64 0, i32 5
  %51 = load ptr, ptr %memberidx1.i23, align 8
  %52 = call ptr %51(ptr nonnull %47)
  %53 = call ptr @LLVMGetNamedFunction(ptr %45, ptr %52)
  %.not.i = icmp eq ptr %53, null
  br i1 %.not.i, label %else.i, label %get_intrinsic.exit

else.i:                                           ; preds = %CodeGen_createGlobalLLVMString.exit
  %54 = call ptr @LLVMAddFunction(ptr %45, ptr %52, ptr %49)
  br label %get_intrinsic.exit

get_intrinsic.exit:                               ; preds = %CodeGen_createGlobalLLVMString.exit, %else.i
  %storemerge.i = phi ptr [ %54, %else.i ], [ %53, %CodeGen_createGlobalLLVMString.exit ]
  store ptr %storemerge.i, ptr %48, align 8
  %55 = call ptr @LLVMBuildCall2(ptr %1, ptr %49, ptr %storemerge.i, ptr nonnull %41, i64 %40, ptr nonnull @28)
  %.not = icmp eq ptr %5, null
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %get_intrinsic.exit
  store ptr %55, ptr %5, align 8
  br label %ifend

ifend:                                            ; preds = %get_intrinsic.exit, %if.entry
  %56 = call ptr @LLVMBuildLoad2(ptr %1, ptr %8, ptr %10, ptr nonnull @28)
  ret ptr %56
}

define internal fastcc ptr @CodeGen_codegen_string(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %6 = alloca %StringBuilder, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_int_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3, align 4
  %10 = shl i64 %9, 1
  %11 = add nsw i64 %10, %7
  store ptr @VTableStringBuilder, ptr %6, align 8
  %memberidx.i102 = getelementptr inbounds %StringBuilder, ptr %6, i64 0, i32 2
  store i64 %11, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %StringBuilder, ptr %6, i64 0, i32 1
  %12 = trunc i64 %11 to i32
  %13 = call ptr @malloc(i32 %12)
  store ptr %13, ptr %memberidx1.i103, align 8
  %memberidx3.i = getelementptr inbounds %StringBuilder, ptr %6, i64 0, i32 3
  store ptr %13, ptr %memberidx3.i, align 8
  %memberidx5.i104 = getelementptr inbounds %StringBuilder, ptr %6, i64 0, i32 4
  store i64 0, ptr %memberidx5.i104, align 8
  %14 = load ptr, ptr %5, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 3
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = call ptr %15(ptr nonnull %5)
  %17 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %17, align 8
  %memberidx.i99 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i64 0, i32 2
  store i64 0, ptr %memberidx.i99, align 4
  %memberidx1.i100 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i64 0, i32 3
  store i64 8, ptr %memberidx1.i100, align 4
  %memberidx2.i101 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i64 0, i32 1
  %18 = call ptr @malloc(i32 64)
  store ptr %18, ptr %memberidx2.i101, align 8
  store i64 0, ptr %memberidx.i99, align 4
  %memberidx7 = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 6
  %19 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_Expression_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx8, align 4
  %21 = alloca ptr, i64 %20, align 8
  %22 = icmp sgt i64 %20, 0
  br i1 %22, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.0143 = phi i64 [ %39, %for.body ], [ 0, %for.entry ]
  %chars.0142 = phi ptr [ %36, %for.body ], [ %16, %for.entry ]
  %curr_ind.0141 = phi i64 [ %30, %for.body ], [ 0, %for.entry ]
  %23 = load ptr, ptr %memberidx7, align 8
  %memberidx.i97 = getelementptr inbounds %Array_Expression_, ptr %23, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i97, align 8
  %ptridx.i98 = getelementptr inbounds ptr, ptr %24, i64 %i.0143
  %25 = load ptr, ptr %ptridx.i98, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx10, align 8
  %27 = call fastcc ptr @get_format_from_type(ptr %26)
  %28 = load ptr, ptr %memberidx2, align 8
  %memberidx.i95 = getelementptr inbounds %Array_int_, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i95, align 8
  %ptridx.i96 = getelementptr inbounds i64, ptr %29, i64 %i.0143
  %30 = load i64, ptr %ptridx.i96, align 4
  %31 = sub i64 %30, %curr_ind.0141
  %32 = load ptr, ptr %6, align 8
  %33 = load ptr, ptr %32, align 8
  call void %33(ptr nonnull %6, ptr %chars.0142, i64 %31)
  %34 = load ptr, ptr %6, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 1
  %35 = load ptr, ptr %memberidx13, align 8
  call void %35(ptr nonnull %6, ptr %27)
  %36 = getelementptr inbounds i8, ptr %chars.0142, i64 %31
  %37 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %25)
  %ptridx = getelementptr inbounds ptr, ptr %21, i64 %i.0143
  %38 = call fastcc ptr @CodeGen_get_string_val(ptr %0, ptr %1, ptr %37, ptr %26, ptr nonnull %17, i64 0)
  store ptr %38, ptr %ptridx, align 8
  %39 = add nuw nsw i64 %i.0143, 1
  %40 = icmp slt i64 %39, %20
  br i1 %40, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %curr_ind.0.lcssa = phi i64 [ 0, %for.entry ], [ %30, %for.body ]
  %chars.0.lcssa = phi ptr [ %16, %for.entry ], [ %36, %for.body ]
  %41 = load ptr, ptr %6, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = load i64, ptr %memberidx1, align 4
  %44 = sub i64 %43, %curr_ind.0.lcssa
  call void %42(ptr nonnull %6, ptr %chars.0.lcssa, i64 %44)
  %45 = load ptr, ptr %6, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %45, i64 0, i32 3
  %46 = load ptr, ptr %memberidx16, align 8
  %47 = call ptr %46(ptr nonnull %6)
  %str_len = alloca ptr, align 8
  %memberidx17 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  %48 = load i64, ptr %memberidx17, align 4
  %49 = call ptr @LLVMIntType(i64 64)
  %50 = call ptr @LLVMConstInt(ptr %49, i64 %48, i1 false)
  store ptr %50, ptr %str_len, align 8
  %str = alloca ptr, align 8
  %51 = icmp sgt i64 %20, 0
  br i1 %51, label %true_block, label %false_block

true_block:                                       ; preds = %for.end
  %52 = call fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr %47, ptr nonnull %21, i64 %20, ptr nonnull %str_len)
  br label %end

false_block:                                      ; preds = %for.end
  %memberidx.i93 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %53 = load ptr, ptr %memberidx.i93, align 8
  %54 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr %47)
  %memberidx.i109 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %53, i64 0, i32 1
  %55 = load i64, ptr %memberidx.i109, align 4
  %56 = srem i64 %54, %55
  %57 = load ptr, ptr %53, align 8
  %ptridx.i110 = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i110, align 8
  %.not.i111 = icmp eq ptr %58, null
  br i1 %.not.i111, label %while.end.i, label %while.entry.i.preheader

while.entry.i.preheader:                          ; preds = %false_block
  %memberidx3.i.i115 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %else.i116
  %hash.0.i = phi i64 [ %72, %else.i116 ], [ %56, %while.entry.i.preheader ]
  %59 = load ptr, ptr %53, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %59, i64 %hash.0.i
  %60 = load ptr, ptr %ptridx3.i, align 8
  %61 = load ptr, ptr %60, align 8
  %memberidx.i.i112 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  %62 = load i64, ptr %memberidx.i.i112, align 4
  %63 = load i64, ptr %memberidx17, align 4
  %.not.i.i = icmp eq i64 %62, %63
  br i1 %.not.i.i, label %ifend.i.i, label %else.i116

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i114 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  %64 = load ptr, ptr %memberidx2.i.i114, align 8
  %65 = load ptr, ptr %memberidx3.i.i115, align 8
  %66 = call i64 @memcmp(ptr %64, ptr %65, i64 %62)
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %while.end.i, label %else.i116

while.end.i:                                      ; preds = %else.i116, %ifend.i.i, %false_block
  %hash.1.i = phi i64 [ %56, %false_block ], [ %hash.0.i, %ifend.i.i ], [ %72, %else.i116 ]
  %68 = load ptr, ptr %53, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %68, i64 %hash.1.i
  %69 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %69, null
  br i1 %.not29.i, label %Map_string_LLVMValueRef____getitem__.exit, label %if.entry10.i

else.i116:                                        ; preds = %while.entry.i, %ifend.i.i
  %70 = add nsw i64 %hash.0.i, 1
  %71 = load i64, ptr %memberidx.i109, align 4
  %72 = srem i64 %70, %71
  %73 = load ptr, ptr %53, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %74, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %69, i64 0, i32 1
  %75 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %75, %if.entry10.i ], [ null, %while.end.i ]
  %76 = icmp eq ptr %common.ret.op.i, null
  br i1 %76, label %if.entry.i, label %end

if.entry.i:                                       ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %77 = load ptr, ptr %47, align 8
  %memberidx1.i94 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %77, i64 0, i32 5
  %78 = load ptr, ptr %memberidx1.i94, align 8
  %79 = call ptr %78(ptr nonnull %47)
  %80 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %79, ptr nonnull @28)
  %81 = load ptr, ptr %memberidx.i93, align 8
  call fastcc void @Map_string_LLVMValueRef____setitem__(ptr %81, ptr nonnull %47, ptr %80)
  br label %end

end:                                              ; preds = %if.entry.i, %Map_string_LLVMValueRef____getitem__.exit, %true_block
  %ternary = phi ptr [ %52, %true_block ], [ %80, %if.entry.i ], [ %common.ret.op.i, %Map_string_LLVMValueRef____getitem__.exit ]
  store ptr %ternary, ptr %str, align 8
  %memberidx18 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %82 = load ptr, ptr %memberidx18, align 8
  %83 = call fastcc i1 @is_object(ptr %82)
  br i1 %83, label %if.entry, label %for.entry32

if.entry:                                         ; preds = %end
  %84 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %82, i1 false)
  %85 = call i1 @LLVMIsConstant(ptr %ternary)
  %86 = call i1 @LLVMIsGlobalConstant(ptr %ternary)
  %87 = and i1 %85, %86
  br i1 %87, label %if.entry20, label %else21

if.entry20:                                       ; preds = %if.entry
  %88 = load ptr, ptr %0, align 8
  %89 = call ptr @LLVMGetNamedFunction(ptr %88, ptr nonnull @225)
  %90 = icmp eq ptr %89, null
  br i1 %90, label %if.entry24, label %ifend26

else21:                                           ; preds = %if.entry
  %91 = call ptr @LLVMBuildMalloc(ptr %1, ptr %84, ptr nonnull @28)
  %args28 = alloca [3 x ptr], align 8
  store ptr %91, ptr %args28, align 8
  %92 = getelementptr inbounds ptr, ptr %args28, i64 1
  store ptr %ternary, ptr %92, align 8
  %93 = getelementptr inbounds ptr, ptr %args28, i64 2
  %94 = load ptr, ptr %str_len, align 8
  store ptr %94, ptr %93, align 8
  %95 = load ptr, ptr %memberidx18, align 8
  %memberidx.i105 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %96 = load ptr, ptr %memberidx.i105, align 8
  %97 = call fastcc ptr @get_class_from_type(ptr %96, ptr %95)
  %memberidx1.i106 = getelementptr inbounds %ObjectType, ptr %95, i64 0, i32 1
  %98 = load ptr, ptr %memberidx1.i106, align 8
  %99 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %98)
  %.not.i117 = icmp eq ptr %99, null
  br i1 %.not.i117, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %else21
  %100 = load ptr, ptr %memberidx.i105, align 8
  %memberidx.i.i121 = getelementptr inbounds %Program, ptr %100, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i.i121, align 8
  %102 = load i64, ptr %98, align 4
  %memberidx.i.i.i122 = getelementptr inbounds %Array_Module_, ptr %101, i64 0, i32 1
  %103 = load ptr, ptr %memberidx.i.i.i122, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %103, i64 %102
  %104 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i123 = getelementptr inbounds %Module, ptr %104, i64 0, i32 4
  %105 = load ptr, ptr %memberidx2.i.i123, align 8
  %memberidx3.i.i124 = getelementptr inbounds %TypeId, ptr %98, i64 0, i32 2
  %106 = load i64, ptr %memberidx3.i.i124, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %105, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %107, i64 %106
  %108 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %108)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %108)
  %109 = load ptr, ptr %108, align 8
  %110 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %109)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %else21, %ifend.i
  %common.ret.op.i118 = phi ptr [ %110, %ifend.i ], [ %99, %else21 ]
  %memberidx2.i107 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i118, i64 0, i32 6
  %111 = load ptr, ptr %memberidx2.i107, align 8
  %.not.i = icmp eq ptr %111, null
  br i1 %.not.i, label %else.i, label %if.entry.i108

if.entry.i108:                                    ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %112 = call ptr @LLVM_GetFunctionType(ptr nonnull %111)
  %113 = call ptr @LLVMBuildCall2(ptr %1, ptr %112, ptr nonnull %111, ptr nonnull %args28, i64 3, ptr nonnull @28)
  br label %CodeGen_build_constructor_call.exit

else.i:                                           ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %114 = call ptr @malloc(i32 47)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(47) %114, ptr noundef nonnull align 8 dereferenceable(47) @257, i64 47, i1 false)
  %115 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %115, align 8
  %memberidx.i.i125 = getelementptr inbounds %string, ptr %115, i64 0, i32 1
  store ptr %114, ptr %memberidx.i.i125, align 8
  %memberidx1.i.i126 = getelementptr inbounds %string, ptr %115, i64 0, i32 2
  store i64 47, ptr %memberidx1.i.i126, align 4
  %memberidx2.i.i127 = getelementptr inbounds %string, ptr %115, i64 0, i32 3
  store i64 47, ptr %memberidx2.i.i127, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %116 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %117 = call ptr %116(ptr nonnull %115)
  %118 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @210, ptr %117)
  %119 = load ptr, ptr %3, align 8
  %120 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %120, align 8
  %memberidx.i.i129 = getelementptr inbounds %string, ptr %120, i64 0, i32 1
  store ptr %119, ptr %memberidx.i.i129, align 8
  %memberidx1.i.i130 = getelementptr inbounds %string, ptr %120, i64 0, i32 2
  store i64 %118, ptr %memberidx1.i.i130, align 4
  %memberidx2.i.i131 = getelementptr inbounds %string, ptr %120, i64 0, i32 3
  store i64 %118, ptr %memberidx2.i.i131, align 4
  call void @free(ptr %117)
  %121 = load ptr, ptr %120, align 8
  %memberidx.i.i.i132 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %121, i64 0, i32 3
  %122 = load ptr, ptr %memberidx.i.i.i132, align 8
  %123 = call ptr %122(ptr nonnull %120)
  %124 = load i64, ptr %memberidx1.i.i130, align 4
  call void @write(i64 1, ptr %123, i64 %124)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  br label %CodeGen_build_constructor_call.exit

CodeGen_build_constructor_call.exit:              ; preds = %if.entry.i108, %else.i
  store ptr %91, ptr %str, align 8
  br label %for.entry32

if.entry24:                                       ; preds = %if.entry20
  %125 = call ptr @malloc(i32 54)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %125, ptr noundef nonnull align 8 dereferenceable(54) @226, i64 54, i1 false)
  %126 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %126, align 8
  %memberidx.i.i90 = getelementptr inbounds %string, ptr %126, i64 0, i32 1
  store ptr %125, ptr %memberidx.i.i90, align 8
  %memberidx1.i.i91 = getelementptr inbounds %string, ptr %126, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i91, align 4
  %memberidx2.i.i92 = getelementptr inbounds %string, ptr %126, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i92, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %127 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %128 = call ptr %127(ptr nonnull %126)
  %129 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @210, ptr %128)
  %130 = load ptr, ptr %4, align 8
  %131 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %131, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %131, i64 0, i32 1
  store ptr %130, ptr %memberidx.i.i, align 8
  %memberidx1.i.i88 = getelementptr inbounds %string, ptr %131, i64 0, i32 2
  store i64 %129, ptr %memberidx1.i.i88, align 4
  %memberidx2.i.i89 = getelementptr inbounds %string, ptr %131, i64 0, i32 3
  store i64 %129, ptr %memberidx2.i.i89, align 4
  call void @free(ptr %128)
  %132 = load ptr, ptr %131, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %132, i64 0, i32 3
  %133 = load ptr, ptr %memberidx.i.i.i, align 8
  %134 = call ptr %133(ptr nonnull %131)
  %135 = load i64, ptr %memberidx1.i.i88, align 4
  call void @write(i64 1, ptr %134, i64 %135)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend26

ifend26:                                          ; preds = %if.entry20, %if.entry24
  %args = alloca [2 x ptr], align 8
  store ptr %ternary, ptr %args, align 8
  %136 = getelementptr inbounds ptr, ptr %args, i64 1
  %137 = load ptr, ptr %str_len, align 8
  store ptr %137, ptr %136, align 8
  %138 = call ptr @LLVM_GetFunctionType(ptr %89)
  %139 = call ptr @LLVMBuildCall2(ptr %1, ptr %138, ptr %89, ptr nonnull %args, i64 2, ptr nonnull @28)
  store ptr %139, ptr %str, align 8
  br label %for.entry32

for.entry32:                                      ; preds = %ifend26, %CodeGen_build_constructor_call.exit, %end
  %140 = call ptr @malloc(i32 25)
  %141 = load ptr, ptr %memberidx2.i101, align 8
  %142 = load i64, ptr %memberidx.i99, align 4
  store i1 false, ptr %140, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %140, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %140, i64 0, i32 3
  store ptr %141, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %140, i64 0, i32 2
  store i64 %142, ptr %memberidx3.i.i, align 4
  store i64 1, ptr %memberidx1.i.i, align 4
  %143 = icmp slt i64 %142, 1
  br i1 %143, label %for.end36, label %for.body34

for.body34:                                       ; preds = %for.entry32, %for.body34
  %storemerge140.in = phi ptr [ %ptridx.i, %for.body34 ], [ %141, %for.entry32 ]
  %storemerge140 = load ptr, ptr %storemerge140.in, align 8
  %144 = call ptr @LLVMBuildFree(ptr %1, ptr %storemerge140)
  %145 = load i64, ptr %memberidx1.i.i, align 4
  %146 = add nsw i64 %145, 1
  store i64 %146, ptr %memberidx1.i.i, align 4
  %147 = load ptr, ptr %memberidx2.i.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %147, i64 %145
  %148 = load i64, ptr %memberidx3.i.i, align 4
  %149 = icmp sge i64 %145, %148
  br i1 %149, label %for.end36, label %for.body34

for.end36:                                        ; preds = %for.body34, %for.entry32
  %storemerge138.lcssa = phi i1 [ %143, %for.entry32 ], [ %149, %for.body34 ]
  store i1 %storemerge138.lcssa, ptr %140, align 1
  tail call void @free(ptr nonnull %140)
  call void @free(ptr %141)
  tail call void @free(ptr %17)
  %150 = load ptr, ptr %str, align 8
  ret ptr %150
}

define internal fastcc ptr @CodeGen_codegen_expression(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %incomming_vals.i = alloca [2 x ptr], align 8
  %blocks.i = alloca [2 x ptr], align 8
  %memberidx = getelementptr inbounds %Expression, ptr %2, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  switch i64 %4, label %common.ret [
    i64 4, label %if.entry
    i64 0, label %if.entry2
    i64 1, label %if.entry6
    i64 5, label %if.entry10
    i64 2, label %if.entry14
    i64 7, label %if.entry18
    i64 8, label %if.entry22
    i64 9, label %if.entry26
    i64 14, label %if.entry30
    i64 13, label %if.entry2.i
    i64 12, label %if.entry38
    i64 11, label %if.entry42
    i64 15, label %if.entry46
    i64 10, label %if.entry50
    i64 6, label %if.entry54
    i64 16, label %if.entry58
  ]

common.ret:                                       ; preds = %3, %false_block43.i, %true_block42.i, %false_block39.i, %true_block38.i, %false_block31.i, %true_block30.i, %false_block27.i, %true_block26.i, %false_block15.i, %true_block14.i, %false_block7.i, %true_block6.i, %false_block.i, %true_block.i, %if.entry58, %if.entry54, %if.entry46, %if.entry42, %if.entry38, %if.entry2.i, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %7, %if.entry ], [ %11, %if.entry2 ], [ %15, %if.entry6 ], [ %18, %if.entry10 ], [ %19, %if.entry14 ], [ %20, %if.entry18 ], [ %21, %if.entry22 ], [ %22, %if.entry26 ], [ %23, %if.entry30 ], [ %27, %if.entry2.i ], [ %28, %if.entry38 ], [ %29, %if.entry42 ], [ %48, %if.entry46 ], [ %89, %if.entry54 ], [ %90, %if.entry58 ], [ %68, %true_block.i ], [ %69, %false_block.i ], [ %75, %true_block6.i ], [ %76, %false_block7.i ], [ %78, %true_block14.i ], [ %79, %false_block15.i ], [ %81, %true_block26.i ], [ %82, %false_block27.i ], [ %83, %true_block30.i ], [ %84, %false_block31.i ], [ %85, %true_block38.i ], [ %86, %false_block39.i ], [ %87, %true_block42.i ], [ %88, %false_block43.i ], [ null, %3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx.i = getelementptr inbounds %BooleanExpression, ptr %2, i64 0, i32 4
  %5 = load i1, ptr %memberidx.i, align 1
  %6 = call ptr @LLVMInt1Type()
  %..i.i = zext i1 %5 to i64
  %7 = call ptr @LLVMConstInt(ptr %6, i64 %..i.i, i1 false)
  br label %common.ret

if.entry2:                                        ; preds = %3
  %memberidx.i118 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %8 = load ptr, ptr %memberidx.i118, align 8
  %9 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  %memberidx1.i = getelementptr inbounds %IntExpression, ptr %2, i64 0, i32 4
  %10 = load i64, ptr %memberidx1.i, align 4
  %11 = call ptr @LLVMConstInt(ptr %9, i64 %10, i1 true)
  br label %common.ret

if.entry6:                                        ; preds = %3
  %memberidx.i119 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %12 = load ptr, ptr %memberidx.i119, align 8
  %13 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %12, i1 true)
  %memberidx1.i120 = getelementptr inbounds %FloatExpression, ptr %2, i64 0, i32 4
  %14 = load double, ptr %memberidx1.i120, align 8
  %15 = call ptr @LLVMConstReal(ptr %13, double %14)
  br label %common.ret

if.entry10:                                       ; preds = %3
  %memberidx.i121 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %16 = load ptr, ptr %memberidx.i121, align 8
  %17 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %18 = call ptr @LLVMConstNull(ptr %17)
  br label %common.ret

if.entry14:                                       ; preds = %3
  %19 = call fastcc ptr @CodeGen_codegen_string(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry18:                                       ; preds = %3
  %20 = call fastcc ptr @CodeGen_codegen_var_access_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry22:                                       ; preds = %3
  %21 = call fastcc ptr @CodeGen_codegen_bin_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry26:                                       ; preds = %3
  %22 = call fastcc ptr @CodeGen_codegen_unary_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry30:                                       ; preds = %3
  %23 = call fastcc ptr @CodeGen_codegen_call_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry2.i:                                      ; preds = %3
  %24 = call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr %2)
  %memberidx.i122 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %25 = load ptr, ptr %memberidx.i122, align 8
  %26 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %25, i1 true)
  %27 = call ptr @LLVMBuildLoad2(ptr %1, ptr %26, ptr %24, ptr nonnull @28)
  br label %common.ret

if.entry38:                                       ; preds = %3
  %28 = call fastcc ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr %2, ptr null)
  br label %common.ret

if.entry42:                                       ; preds = %3
  %29 = call fastcc ptr @CodeGen_codegen_new_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry46:                                       ; preds = %3
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %incomming_vals.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %blocks.i)
  %memberidx.i123 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i123, align 8
  %31 = call ptr @LLVMAppendBasicBlock(ptr %30, ptr nonnull @239)
  %32 = load ptr, ptr %memberidx.i123, align 8
  %33 = call ptr @LLVMAppendBasicBlock(ptr %32, ptr nonnull @240)
  %34 = load ptr, ptr %memberidx.i123, align 8
  %35 = call ptr @LLVMAppendBasicBlock(ptr %34, ptr nonnull @241)
  %memberidx3.i = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 4
  %36 = load ptr, ptr %memberidx3.i, align 8
  %37 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %36)
  %38 = call ptr @LLVMBuildCondBr(ptr %1, ptr %37, ptr %31, ptr %33)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %31)
  %memberidx4.i = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 5
  %39 = load ptr, ptr %memberidx4.i, align 8
  %40 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %39)
  %41 = call ptr @LLVMBuildBr(ptr %1, ptr %35)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %33)
  %memberidx5.i = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 6
  %42 = load ptr, ptr %memberidx5.i, align 8
  %43 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %42)
  %44 = call ptr @LLVMBuildBr(ptr %1, ptr %35)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %35)
  %45 = load ptr, ptr %memberidx4.i, align 8
  %memberidx7.i = getelementptr inbounds %Expression, ptr %45, i64 0, i32 3
  %46 = load ptr, ptr %memberidx7.i, align 8
  %47 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %46, i1 true)
  %48 = call ptr @LLVMBuildPhi(ptr %1, ptr %47, ptr nonnull @242)
  store ptr %40, ptr %incomming_vals.i, align 8
  %49 = getelementptr inbounds ptr, ptr %incomming_vals.i, i64 1
  store ptr %43, ptr %49, align 8
  store ptr %31, ptr %blocks.i, align 8
  %50 = getelementptr inbounds ptr, ptr %blocks.i, i64 1
  store ptr %33, ptr %50, align 8
  call void @LLVMAddIncoming(ptr %48, ptr nonnull %incomming_vals.i, ptr nonnull %blocks.i, i64 2)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %incomming_vals.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %blocks.i)
  br label %common.ret

if.entry50:                                       ; preds = %3
  %memberidx.i124 = getelementptr inbounds %TypeCastExpression, ptr %2, i64 0, i32 4
  %51 = load ptr, ptr %memberidx.i124, align 8
  %memberidx1.i125 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %52 = load ptr, ptr %memberidx1.i125, align 8
  %53 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %51)
  %54 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %52, i1 true)
  %55 = call i1 @LLVMIsConstant(ptr %53)
  %56 = load i64, ptr %52, align 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry50
  br i1 %55, label %true_block.i, label %false_block.i

ifend.i:                                          ; preds = %if.entry50
  %memberidx2.i = getelementptr inbounds %Expression, ptr %51, i64 0, i32 3
  %58 = load ptr, ptr %memberidx2.i, align 8
  %59 = load i64, ptr %58, align 4
  %60 = add i64 %59, -1
  %61 = icmp ult i64 %60, 7
  %62 = and i64 %56, -2
  %63 = icmp eq i64 %62, 8
  %64 = and i1 %63, %61
  br i1 %64, label %if.entry3.i, label %else4.i

true_block.i:                                     ; preds = %if.entry.i
  %65 = call i1 @LLVMIsNull(ptr %53)
  %66 = xor i1 %65, true
  %67 = call ptr @LLVMInt1Type()
  %..i.i126 = zext i1 %66 to i64
  %68 = call ptr @LLVMConstInt(ptr %67, i64 %..i.i126, i1 false)
  br label %common.ret

false_block.i:                                    ; preds = %if.entry.i
  %69 = call ptr @LLVMBuildIsNotNull(ptr %1, ptr %53, ptr nonnull @28)
  br label %common.ret

if.entry3.i:                                      ; preds = %ifend.i
  br i1 %55, label %true_block6.i, label %false_block7.i

else4.i:                                          ; preds = %ifend.i
  %70 = and i64 %59, -2
  %71 = icmp eq i64 %70, 8
  %72 = add i64 %56, -1
  %73 = icmp ult i64 %72, 7
  %74 = and i1 %73, %71
  br i1 %74, label %if.entry11.i, label %else12.i

true_block6.i:                                    ; preds = %if.entry3.i
  %75 = call ptr @LLVMConstSIToFP(ptr %53, ptr %54)
  br label %common.ret

false_block7.i:                                   ; preds = %if.entry3.i
  %76 = call ptr @LLVMBuildSIToFP(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret

if.entry11.i:                                     ; preds = %else4.i
  br i1 %55, label %true_block14.i, label %false_block15.i

else12.i:                                         ; preds = %else4.i
  %77 = and i1 %73, %61
  br i1 %77, label %if.entry19.i, label %else20.i

true_block14.i:                                   ; preds = %if.entry11.i
  %78 = call ptr @LLVMConstFPToSI(ptr %53, ptr %54)
  br label %common.ret

false_block15.i:                                  ; preds = %if.entry11.i
  %79 = call ptr @LLVMBuildFPToSI(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret

if.entry19.i:                                     ; preds = %else12.i
  %.not.i = icmp eq i64 %56, 7
  br i1 %.not.i, label %ifend25.i, label %if.entry23.i

else20.i:                                         ; preds = %else12.i
  %80 = and i1 %63, %71
  br i1 %80, label %if.entry35.i, label %ifend37.i

if.entry23.i:                                     ; preds = %if.entry19.i
  br i1 %55, label %true_block26.i, label %false_block27.i

ifend25.i:                                        ; preds = %if.entry19.i
  br i1 %55, label %true_block30.i, label %false_block31.i

true_block26.i:                                   ; preds = %if.entry23.i
  %81 = call ptr @LLVMConstIntCast(ptr %53, ptr %54, i1 true)
  br label %common.ret

false_block27.i:                                  ; preds = %if.entry23.i
  %82 = call ptr @LLVMBuildIntCast2(ptr %1, ptr %53, ptr %54, i1 true, ptr nonnull @28)
  br label %common.ret

true_block30.i:                                   ; preds = %ifend25.i
  %83 = call ptr @LLVMConstSExt(ptr %53, ptr %54)
  br label %common.ret

false_block31.i:                                  ; preds = %ifend25.i
  %84 = call ptr @LLVMBuildSExt(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret

if.entry35.i:                                     ; preds = %else20.i
  br i1 %55, label %true_block38.i, label %false_block39.i

ifend37.i:                                        ; preds = %else20.i
  br i1 %55, label %true_block42.i, label %false_block43.i

true_block38.i:                                   ; preds = %if.entry35.i
  %85 = call ptr @LLVMConstFPCast(ptr %53, ptr %54)
  br label %common.ret

false_block39.i:                                  ; preds = %if.entry35.i
  %86 = call ptr @LLVMBuildFPCast(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret

true_block42.i:                                   ; preds = %ifend37.i
  %87 = call ptr @LLVMConstBitCast(ptr %53, ptr %54)
  br label %common.ret

false_block43.i:                                  ; preds = %ifend37.i
  %88 = call ptr @LLVMBuildBitCast(ptr %1, ptr %53, ptr %54, ptr nonnull @28)
  br label %common.ret

if.entry54:                                       ; preds = %3
  %89 = call fastcc ptr @CodeGen_codegen_array_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

if.entry58:                                       ; preds = %3
  %90 = call fastcc ptr @CodeGen_codegen_intrinsic_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret
}

define internal fastcc void @Map_string_CGEnumType__resize(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 1
  %1 = load i64, ptr %memberidx, align 4
  %2 = alloca ptr, i64 %1, align 8
  %3 = load ptr, ptr %0, align 8
  %4 = shl i64 %1, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %2, ptr align 8 %3, i64 %4, i1 false)
  %5 = shl i64 %1, 1
  store i64 %5, ptr %memberidx, align 4
  %memberidx6 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  %6 = shl i64 %1, 4
  %7 = call ptr @realloc(ptr %3, i64 %6)
  store ptr %7, ptr %0, align 8
  %8 = load i64, ptr %memberidx, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.body, %for.entry
  %10 = icmp sgt i64 %1, 0
  br i1 %10, label %for.body15, label %for.end17

for.body:                                         ; preds = %for.entry, %for.body
  %i.037 = phi i64 [ %12, %for.body ], [ 0, %for.entry ]
  %11 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %11, i64 %i.037
  store ptr null, ptr %ptridx, align 8
  %12 = add nuw nsw i64 %i.037, 1
  %13 = load i64, ptr %memberidx, align 4
  %14 = icmp slt i64 %12, %13
  br i1 %14, label %for.body, label %for.cond14.preheader

for.body15:                                       ; preds = %for.cond14.preheader, %ifend
  %storemerge36 = phi i64 [ %18, %ifend ], [ 0, %for.cond14.preheader ]
  %ptridx18 = getelementptr inbounds ptr, ptr %2, i64 %storemerge36
  %15 = load ptr, ptr %ptridx18, align 8
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry

for.end17:                                        ; preds = %ifend, %for.cond14.preheader
  ret void

if.entry:                                         ; preds = %for.body15
  %16 = load ptr, ptr %15, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx20, align 8
  call fastcc void @Map_string_CGEnumType____setitem__(ptr nonnull %0, ptr %16, ptr %17)
  br label %ifend

ifend:                                            ; preds = %for.body15, %if.entry
  %18 = add nuw nsw i64 %storemerge36, 1
  %19 = icmp slt i64 %18, %1
  br i1 %19, label %for.body15, label %for.end17
}

define internal fastcc void @Map_string_CGEnumType____setitem__(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call fastcc void @Map_string_CGEnumType__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call fastcc i64 @Map_string_CGEnumType__hash_fnc(ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 8
  %should_add = alloca i1, align 1
  store i1 true, ptr %should_add, align 1
  %13 = load ptr, ptr %0, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %ifend
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %hash.promoted = load i64, ptr %hash, align 8
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend9
  %15 = phi i64 [ %hash.promoted, %while.entry.preheader ], [ %28, %ifend9 ]
  %16 = load ptr, ptr %0, align 8
  %ptridx5 = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx5, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  %20 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %19, %20
  br i1 %.not.i, label %ifend.i, label %ifend9

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load ptr, ptr %memberidx3.i, align 8
  %23 = call i64 @memcmp(ptr %21, ptr %22, i64 %19)
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %if.entry7, label %ifend9

while.end.loopexit:                               ; preds = %ifend9
  store i64 %28, ptr %hash, align 8
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.entry7, %ifend
  %25 = load i1, ptr %should_add, align 1
  br i1 %25, label %if.entry13, label %ifend15

if.entry7:                                        ; preds = %ifend.i
  store i64 %15, ptr %hash, align 8
  store i1 false, ptr %should_add, align 1
  br label %while.end

ifend9:                                           ; preds = %while.entry, %ifend.i
  %26 = add nsw i64 %15, 1
  %27 = load i64, ptr %memberidx1, align 4
  %28 = srem i64 %26, %27
  %29 = load ptr, ptr %0, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx12, align 8
  %.not33 = icmp eq ptr %30, null
  br i1 %.not33, label %while.end.loopexit, label %while.entry

if.entry13:                                       ; preds = %while.end
  %31 = load i64, ptr %memberidx, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %memberidx, align 4
  br label %ifend15

ifend15:                                          ; preds = %while.end, %if.entry13
  %33 = load i64, ptr %hash, align 8
  %34 = load ptr, ptr %0, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = tail call ptr @malloc(i32 16)
  store ptr %1, ptr %35, align 8
  %memberidx1.i = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %35, i64 0, i32 1
  store ptr %2, ptr %memberidx1.i, align 8
  store ptr %35, ptr %ptridx19, align 8
  ret void
}

define internal fastcc i64 @Map_string_CGEnumType__hash_fnc(ptr %0) unnamed_addr {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1, i64 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr nonnull %0)
  %4 = alloca ptr, align 8
  %5 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %3)
  %6 = load ptr, ptr %4, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %5, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %5, ptr %memberidx2.i, align 4
  tail call void @free(ptr %3)
  %8 = load i64, ptr %memberidx1.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %for.body
  %i.02 = phi i64 [ %16, %for.body ], [ 0, %for.entry ]
  %hash.01 = phi i64 [ %15, %for.body ], [ 0, %for.entry ]
  %10 = shl i64 %hash.01, 1
  %11 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr nonnull %7, i64 %i.02)
  %14 = sext i8 %13 to i64
  %15 = add nsw i64 %10, %14
  %16 = add nuw nsw i64 %i.02, 1
  %17 = load i64, ptr %memberidx1.i, align 4
  %18 = icmp slt i64 %16, %17
  br i1 %18, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.entry
  %hash.0.lcssa = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %19 = load ptr, ptr %memberidx.i, align 8
  call void @free(ptr %19)
  tail call void @free(ptr %7)
  %20 = call i64 @llvm.abs.i64(i64 %hash.0.lcssa, i1 false)
  ret i64 %20
}

define internal fastcc ptr @CodeGen_codegen_bin_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %args.i = alloca [2 x ptr], align 8
  %4 = alloca ptr, align 8
  %arg_types.i = alloca [2 x ptr], align 8
  %5 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 5
  %6 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load i64, ptr %8, align 4
  %memberidx4 = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 6
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = load i64, ptr %11, align 4
  %.not = icmp eq i64 %9, %12
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  switch i64 %6, label %ifend15 [
    i64 11, label %if.entry7
    i64 12, label %if.entry10
    i64 19, label %if.entry13
  ]

ifend:                                            ; preds = %3
  %13 = icmp eq i64 %6, 19
  br i1 %13, label %if.entry13, label %ifend15

common.ret:                                       ; preds = %true_block181, %false_block182, %true_block174, %false_block175, %true_block167, %false_block168, %true_block157, %false_block158, %true_block146, %false_block147, %true_block121, %false_block122, %true_block114, %false_block115, %true_block107, %false_block108, %true_block100, %false_block101, %true_block93, %false_block94, %true_block86, %false_block87, %true_block79, %false_block80, %true_block66, %false_block67, %true_block59, %false_block60, %true_block52, %false_block53, %true_block25, %false_block26, %if.entry140, %if.entry137, %if.entry134, %if.entry131, %if.entry128, %if.entry73, %if.entry70, %ifend48, %end41, %CodeGen_codegen_pow_expr.exit, %if.entry22, %CodeGen_get_expr_mem.exit, %if.entry10, %if.entry7
  %common.ret.op = phi ptr [ %15, %if.entry7 ], [ %17, %if.entry10 ], [ %24, %CodeGen_get_expr_mem.exit ], [ %47, %if.entry22 ], [ %68, %CodeGen_codegen_pow_expr.exit ], [ %86, %end41 ], [ null, %ifend48 ], [ %106, %if.entry70 ], [ %107, %if.entry73 ], [ %127, %if.entry128 ], [ %128, %if.entry131 ], [ %129, %if.entry134 ], [ %130, %if.entry137 ], [ %131, %if.entry140 ], [ %48, %true_block25 ], [ %49, %false_block26 ], [ %100, %true_block52 ], [ %101, %false_block53 ], [ %102, %true_block59 ], [ %103, %false_block60 ], [ %104, %true_block66 ], [ %105, %false_block67 ], [ %111, %true_block79 ], [ %112, %false_block80 ], [ %114, %true_block86 ], [ %115, %false_block87 ], [ %116, %true_block93 ], [ %117, %false_block94 ], [ %118, %true_block100 ], [ %119, %false_block101 ], [ %120, %true_block107 ], [ %121, %false_block108 ], [ %122, %true_block114 ], [ %123, %false_block115 ], [ %124, %true_block121 ], [ %125, %false_block122 ], [ %135, %true_block146 ], [ %136, %false_block147 ], [ %137, %true_block157 ], [ %138, %false_block158 ], [ %139, %true_block167 ], [ %140, %false_block168 ], [ %141, %true_block174 ], [ %142, %false_block175 ], [ %143, %true_block181 ], [ %144, %false_block182 ]
  ret ptr %common.ret.op

if.entry7:                                        ; preds = %if.entry
  %14 = call ptr @LLVMInt1Type()
  %15 = call ptr @LLVMConstInt(ptr %14, i64 0, i1 false)
  br label %common.ret

if.entry10:                                       ; preds = %if.entry
  %16 = call ptr @LLVMInt1Type()
  %17 = call ptr @LLVMConstInt(ptr %16, i64 1, i1 false)
  br label %common.ret

if.entry13:                                       ; preds = %if.entry, %ifend
  %memberidx.i280 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 2
  %18 = load i64, ptr %memberidx.i280, align 4
  switch i64 %18, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry13
  %19 = call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr %7)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry13
  %20 = call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr %7)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry13
  %21 = call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %7, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry13
  %22 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %7)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %19, %if.entry.i ], [ %20, %if.entry2.i ], [ %21, %if.entry6.i ], [ %22, %ifend8.i ]
  %23 = load ptr, ptr %memberidx4, align 8
  %24 = call fastcc ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %common.ret.op.i, ptr %23)
  br label %common.ret

ifend15:                                          ; preds = %if.entry, %ifend
  %25 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %7)
  %26 = load ptr, ptr %memberidx4, align 8
  %27 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %26)
  %28 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %Expression, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx.i, align 4
  %30 = icmp eq i64 %29, 5
  %31 = icmp eq i64 %6, 11
  %32 = icmp eq i64 %6, 12
  %33 = add i64 %6, -11
  %34 = icmp ult i64 %33, 2
  %35 = and i1 %34, %30
  br i1 %35, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend15
  %36 = call i1 @LLVMIsConstant(ptr %25)
  br i1 %36, label %if.entry22, label %ifend24

ifend21:                                          ; preds = %ifend15
  %37 = load ptr, ptr %memberidx1, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %38 = load ptr, ptr %memberidx30, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 3
  %39 = load ptr, ptr %memberidx32, align 8
  %40 = load i64, ptr %39, align 4
  %41 = add i64 %40, -1
  %42 = icmp ult i64 %41, 9
  %43 = icmp eq i64 %6, 6
  %44 = and i1 %43, %42
  br i1 %44, label %if.entry33, label %ifend35

if.entry22:                                       ; preds = %if.entry19
  %45 = call i1 @LLVMIsNull(ptr %25)
  %46 = call ptr @LLVMInt1Type()
  %..i = zext i1 %45 to i64
  %47 = call ptr @LLVMConstInt(ptr %46, i64 %..i, i1 false)
  br label %common.ret

ifend24:                                          ; preds = %if.entry19
  br i1 %31, label %true_block25, label %false_block26

true_block25:                                     ; preds = %ifend24
  %48 = call ptr @LLVMBuildIsNull(ptr %1, ptr %25, ptr nonnull @28)
  br label %common.ret

false_block26:                                    ; preds = %ifend24
  %49 = call ptr @LLVMBuildIsNotNull(ptr %1, ptr %25, ptr nonnull @28)
  br label %common.ret

if.entry33:                                       ; preds = %ifend21
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %args.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %arg_types.i)
  store ptr %25, ptr %args.i, align 8
  %50 = getelementptr inbounds ptr, ptr %args.i, i64 1
  store ptr %27, ptr %50, align 8
  %51 = call fastcc ptr @dump_type(ptr nonnull %39, i1 true)
  %52 = load ptr, ptr %51, align 8
  %memberidx.i274 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 5
  %53 = load ptr, ptr %memberidx.i274, align 8
  %54 = call ptr %53(ptr nonnull %51)
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @235, ptr %54)
  %56 = load ptr, ptr %4, align 8
  %57 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i275 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i275, align 8
  %memberidx1.i.i276 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i.i276, align 4
  %memberidx2.i.i277 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i.i277, align 4
  call void @free(ptr %54)
  %58 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %39, i1 true)
  store ptr %58, ptr %arg_types.i, align 8
  %59 = getelementptr inbounds ptr, ptr %arg_types.i, i64 1
  store ptr %58, ptr %59, align 8
  %60 = load ptr, ptr %0, align 8
  %61 = call ptr @malloc(i32 16)
  %memberidx1.i.i.i278 = getelementptr inbounds %IntrinsicResult, ptr %61, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %61, i8 0, i64 16, i1 false)
  %62 = call ptr @LLVMFunctionType(ptr %58, ptr nonnull %arg_types.i, i64 2, i1 false)
  store ptr %62, ptr %memberidx1.i.i.i278, align 8
  %63 = load ptr, ptr %57, align 8
  %memberidx1.i13.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i64 0, i32 5
  %64 = load ptr, ptr %memberidx1.i13.i, align 8
  %65 = call ptr %64(ptr nonnull %57)
  %66 = call ptr @LLVMGetNamedFunction(ptr %60, ptr %65)
  %.not.i.i = icmp eq ptr %66, null
  br i1 %.not.i.i, label %else.i.i, label %CodeGen_codegen_pow_expr.exit

else.i.i:                                         ; preds = %if.entry33
  %67 = call ptr @LLVMAddFunction(ptr %60, ptr %65, ptr %62)
  br label %CodeGen_codegen_pow_expr.exit

CodeGen_codegen_pow_expr.exit:                    ; preds = %if.entry33, %else.i.i
  %storemerge.i.i = phi ptr [ %67, %else.i.i ], [ %66, %if.entry33 ]
  store ptr %storemerge.i.i, ptr %61, align 8
  %68 = call ptr @LLVMBuildCall2(ptr %1, ptr %62, ptr %storemerge.i.i, ptr nonnull %args.i, i64 2, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %args.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %arg_types.i)
  br label %common.ret

ifend35:                                          ; preds = %ifend21
  %69 = load i64, ptr %38, align 4
  %70 = icmp eq i64 %69, 13
  br i1 %70, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %ifend35
  %indices = alloca [1 x ptr], align 8
  %71 = icmp eq i64 %6, 1
  br i1 %71, label %end41, label %false_block40

ifend38:                                          ; preds = %ifend35
  %72 = call i1 @LLVMIsConstant(ptr %25)
  %73 = call i1 @LLVMIsConstant(ptr %27)
  %74 = and i1 %72, %73
  %75 = load i64, ptr %39, align 4
  %76 = call fastcc i1 @is_object(ptr nonnull %38)
  %77 = call fastcc i1 @is_object(ptr nonnull %39)
  %78 = and i1 %76, %77
  %79 = and i1 %34, %78
  %80 = freeze i1 %79
  br i1 %80, label %if.entry46, label %switch.early.test

switch.early.test:                                ; preds = %ifend38
  switch i64 %75, label %else47 [
    i64 12, label %if.entry46
    i64 7, label %if.entry46
    i64 6, label %if.entry46
    i64 5, label %if.entry46
    i64 4, label %if.entry46
    i64 3, label %if.entry46
    i64 2, label %if.entry46
    i64 1, label %if.entry46
  ]

false_block40:                                    ; preds = %if.entry36
  %81 = call i1 @LLVMIsConstant(ptr %27)
  br i1 %81, label %true_block.i, label %false_block.i

true_block.i:                                     ; preds = %false_block40
  %82 = call ptr @LLVMConstNeg(ptr %27)
  br label %end41

false_block.i:                                    ; preds = %false_block40
  %83 = call ptr @LLVMBuildNeg(ptr %1, ptr %27, ptr nonnull @28)
  br label %end41

end41:                                            ; preds = %if.entry36, %false_block.i, %true_block.i
  %ternary42 = phi ptr [ %82, %true_block.i ], [ %83, %false_block.i ], [ %27, %if.entry36 ]
  store ptr %ternary42, ptr %indices, align 8
  %memberidx43 = getelementptr inbounds %PointerType, ptr %38, i64 0, i32 1
  %84 = load ptr, ptr %memberidx43, align 8
  %85 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %84, i1 true)
  %86 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %85, ptr %25, ptr nonnull %indices, i64 1, ptr nonnull @28)
  br label %common.ret

if.entry46:                                       ; preds = %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %ifend38
  switch i64 %6, label %else74 [
    i64 1, label %if.entry49
    i64 2, label %if.entry56
    i64 3, label %if.entry63
    i64 4, label %if.entry70
    i64 5, label %if.entry73
  ]

else47:                                           ; preds = %switch.early.test
  %87 = and i64 %75, -2
  %88 = icmp eq i64 %87, 8
  br i1 %88, label %if.entry125, label %else126

ifend48:                                          ; preds = %else84, %else172, %else126, %else144
  %89 = call ptr @malloc(i32 33)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %89, ptr noundef nonnull align 8 dereferenceable(33) @236, i64 33, i1 false)
  %90 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %91 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %92 = call ptr %91(ptr nonnull %90)
  %93 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @210, ptr %92)
  %94 = load ptr, ptr %5, align 8
  %95 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %95, align 8
  %memberidx.i.i271 = getelementptr inbounds %string, ptr %95, i64 0, i32 1
  store ptr %94, ptr %memberidx.i.i271, align 8
  %memberidx1.i.i272 = getelementptr inbounds %string, ptr %95, i64 0, i32 2
  store i64 %93, ptr %memberidx1.i.i272, align 4
  %memberidx2.i.i273 = getelementptr inbounds %string, ptr %95, i64 0, i32 3
  store i64 %93, ptr %memberidx2.i.i273, align 4
  call void @free(ptr %92)
  %96 = load ptr, ptr %95, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %96, i64 0, i32 3
  %97 = load ptr, ptr %memberidx.i.i.i, align 8
  %98 = call ptr %97(ptr nonnull %95)
  %99 = load i64, ptr %memberidx1.i.i272, align 4
  call void @write(i64 1, ptr %98, i64 %99)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  br label %common.ret

if.entry49:                                       ; preds = %if.entry46
  br i1 %74, label %true_block52, label %false_block53

true_block52:                                     ; preds = %if.entry49
  %100 = call ptr @LLVMConstNSWAdd(ptr %25, ptr %27)
  br label %common.ret

false_block53:                                    ; preds = %if.entry49
  %101 = call ptr @LLVMBuildNSWAdd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry56:                                       ; preds = %if.entry46
  br i1 %74, label %true_block59, label %false_block60

true_block59:                                     ; preds = %if.entry56
  %102 = call ptr @LLVMConstSub(ptr %25, ptr %27)
  br label %common.ret

false_block60:                                    ; preds = %if.entry56
  %103 = call ptr @LLVMBuildSub(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry63:                                       ; preds = %if.entry46
  br i1 %74, label %true_block66, label %false_block67

true_block66:                                     ; preds = %if.entry63
  %104 = call ptr @LLVMConstMul(ptr %25, ptr %27)
  br label %common.ret

false_block67:                                    ; preds = %if.entry63
  %105 = call ptr @LLVMBuildMul(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry70:                                       ; preds = %if.entry46
  %106 = call ptr @LLVMBuildSDiv(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry73:                                       ; preds = %if.entry46
  %107 = call ptr @LLVMBuildSRem(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

else74:                                           ; preds = %if.entry46
  %108 = add i64 %6, -7
  %109 = icmp ult i64 %108, 4
  br i1 %109, label %if.entry76, label %else77

if.entry76:                                       ; preds = %else74
  %110 = add i64 %6, 31
  br i1 %74, label %true_block79, label %false_block80

else77:                                           ; preds = %else74
  br i1 %34, label %if.entry83, label %else84

true_block79:                                     ; preds = %if.entry76
  %111 = call ptr @LLVMConstICmp(i64 %110, ptr %25, ptr %27)
  br label %common.ret

false_block80:                                    ; preds = %if.entry76
  %112 = call ptr @LLVMBuildICmp(ptr %1, i64 %110, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry83:                                       ; preds = %else77
  %113 = add i64 %6, 21
  br i1 %74, label %true_block86, label %false_block87

else84:                                           ; preds = %else77
  switch i64 %6, label %ifend48 [
    i64 13, label %if.entry90
    i64 14, label %if.entry97
    i64 15, label %if.entry104
    i64 16, label %if.entry111
    i64 17, label %if.entry118
  ]

true_block86:                                     ; preds = %if.entry83
  %114 = call ptr @LLVMConstICmp(i64 %113, ptr %25, ptr %27)
  br label %common.ret

false_block87:                                    ; preds = %if.entry83
  %115 = call ptr @LLVMBuildICmp(ptr %1, i64 %113, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry90:                                       ; preds = %else84
  br i1 %74, label %true_block93, label %false_block94

true_block93:                                     ; preds = %if.entry90
  %116 = call ptr @LLVMConstShl(ptr %25, ptr %27)
  br label %common.ret

false_block94:                                    ; preds = %if.entry90
  %117 = call ptr @LLVMBuildShl(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry97:                                       ; preds = %else84
  br i1 %74, label %true_block100, label %false_block101

true_block100:                                    ; preds = %if.entry97
  %118 = call ptr @LLVMConstLShr(ptr %25, ptr %27)
  br label %common.ret

false_block101:                                   ; preds = %if.entry97
  %119 = call ptr @LLVMBuildLShr(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry104:                                      ; preds = %else84
  br i1 %74, label %true_block107, label %false_block108

true_block107:                                    ; preds = %if.entry104
  %120 = call ptr @LLVMConstOr(ptr %25, ptr %27)
  br label %common.ret

false_block108:                                   ; preds = %if.entry104
  %121 = call ptr @LLVMBuildOr(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry111:                                      ; preds = %else84
  br i1 %74, label %true_block114, label %false_block115

true_block114:                                    ; preds = %if.entry111
  %122 = call ptr @LLVMConstAnd(ptr %25, ptr %27)
  br label %common.ret

false_block115:                                   ; preds = %if.entry111
  %123 = call ptr @LLVMBuildAnd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry118:                                      ; preds = %else84
  br i1 %74, label %true_block121, label %false_block122

true_block121:                                    ; preds = %if.entry118
  %124 = call ptr @LLVMConstXor(ptr %25, ptr %27)
  br label %common.ret

false_block122:                                   ; preds = %if.entry118
  %125 = call ptr @LLVMBuildXor(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry125:                                      ; preds = %else47
  switch i64 %6, label %else141 [
    i64 1, label %if.entry128
    i64 2, label %if.entry131
    i64 3, label %if.entry134
    i64 4, label %if.entry137
    i64 5, label %if.entry140
  ]

else126:                                          ; preds = %else47
  %126 = icmp eq i64 %75, 0
  br i1 %126, label %if.entry161, label %ifend48

if.entry128:                                      ; preds = %if.entry125
  %127 = call ptr @LLVMBuildFAdd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry131:                                      ; preds = %if.entry125
  %128 = call ptr @LLVMBuildFSub(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry134:                                      ; preds = %if.entry125
  %129 = call ptr @LLVMBuildFMul(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry137:                                      ; preds = %if.entry125
  %130 = call ptr @LLVMBuildFDiv(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry140:                                      ; preds = %if.entry125
  %131 = call ptr @LLVMBuildFRem(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

else141:                                          ; preds = %if.entry125
  %132 = add i64 %6, -7
  %133 = icmp ult i64 %132, 4
  br i1 %133, label %if.entry143, label %else144

if.entry143:                                      ; preds = %else141
  %134 = add i64 %6, -5
  br i1 %74, label %true_block146, label %false_block147

else144:                                          ; preds = %else141
  br i1 %34, label %if.entry150, label %ifend48

true_block146:                                    ; preds = %if.entry143
  %135 = call ptr @LLVMConstFCmp(i64 %134, ptr %25, ptr %27)
  br label %common.ret

false_block147:                                   ; preds = %if.entry143
  %136 = call ptr @LLVMBuildFCmp(ptr %1, i64 %134, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry150:                                      ; preds = %else144
  %. = select i1 %32, i64 6, i64 1
  br i1 %74, label %true_block157, label %false_block158

true_block157:                                    ; preds = %if.entry150
  %137 = call ptr @LLVMConstFCmp(i64 %., ptr %25, ptr %27)
  br label %common.ret

false_block158:                                   ; preds = %if.entry150
  %138 = call ptr @LLVMBuildFCmp(ptr %1, i64 %., ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry161:                                      ; preds = %else126
  switch i64 %6, label %else172 [
    i64 16, label %if.entry164
    i64 11, label %if.entry164
    i64 15, label %if.entry171
  ]

if.entry164:                                      ; preds = %if.entry161, %if.entry161
  br i1 %74, label %true_block167, label %false_block168

true_block167:                                    ; preds = %if.entry164
  %139 = call ptr @LLVMConstAnd(ptr %25, ptr %27)
  br label %common.ret

false_block168:                                   ; preds = %if.entry164
  %140 = call ptr @LLVMBuildAnd(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry171:                                      ; preds = %if.entry161
  br i1 %74, label %true_block174, label %false_block175

else172:                                          ; preds = %if.entry161
  br i1 %32, label %if.entry178, label %ifend48

true_block174:                                    ; preds = %if.entry171
  %141 = call ptr @LLVMConstOr(ptr %25, ptr %27)
  br label %common.ret

false_block175:                                   ; preds = %if.entry171
  %142 = call ptr @LLVMBuildOr(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret

if.entry178:                                      ; preds = %else172
  br i1 %74, label %true_block181, label %false_block182

true_block181:                                    ; preds = %if.entry178
  %143 = call ptr @LLVMConstXor(ptr %25, ptr %27)
  br label %common.ret

false_block182:                                   ; preds = %if.entry178
  %144 = call ptr @LLVMBuildXor(ptr %1, ptr %25, ptr %27, ptr nonnull @28)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_call_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %5, align 8
  %memberidx.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 1
  %6 = call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %CallExpression, ptr %2, i64 0, i32 4
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 12
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %10 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %MemberExpression, ptr %7, i64 0, i32 5
  %11 = load ptr, ptr %memberidx6, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %11, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %10, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i.i, align 8
  %14 = load i64, ptr %12, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %16, i64 0, i32 4
  %17 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %12, i64 0, i32 2
  %18 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i57 = getelementptr inbounds %Class, ptr %20, i64 0, i32 5
  %21 = load ptr, ptr %memberidx.i57, align 8
  %memberidx1.i58 = getelementptr inbounds %PropId, ptr %11, i64 0, i32 2
  %22 = load i64, ptr %memberidx1.i58, align 4
  %memberidx.i3.i = getelementptr inbounds %Array_ClassMethod_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i3.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx7 = getelementptr inbounds %ClassMethod, ptr %24, i64 0, i32 1
  %25 = load i1, ptr %memberidx7, align 1
  br i1 %25, label %ifend, label %if.entry8

ifend:                                            ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit, %if.entry, %3
  %func.0 = phi ptr [ %41, %CodeGen_get_or_codegen_class_from_typeid.exit ], [ null, %if.entry ], [ null, %3 ]
  %26 = icmp eq ptr %func.0, null
  br i1 %26, label %if.entry14, label %for.entry

if.entry8:                                        ; preds = %if.entry
  %27 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr nonnull %12)
  %.not.i102 = icmp eq ptr %27, null
  br i1 %.not.i102, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %if.entry8
  %28 = load ptr, ptr %memberidx5, align 8
  %memberidx.i.i106 = getelementptr inbounds %Program, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i.i106, align 8
  %30 = load i64, ptr %12, align 4
  %memberidx.i.i.i107 = getelementptr inbounds %Array_Module_, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i.i.i107, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i108 = getelementptr inbounds %Module, ptr %32, i64 0, i32 4
  %33 = load ptr, ptr %memberidx2.i.i108, align 8
  %34 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %36)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %36)
  %37 = load ptr, ptr %36, align 8
  %38 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %37)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry8, %ifend.i
  %memberidx13 = getelementptr inbounds %MemberExpression, ptr %7, i64 0, i32 4
  %39 = load ptr, ptr %memberidx13, align 8
  %40 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %39)
  %41 = call fastcc ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr %7, ptr %40)
  store i64 1, ptr %memberidx.i, align 4
  %42 = load ptr, ptr %memberidx2.i, align 8
  store ptr %40, ptr %42, align 8
  br label %ifend

if.entry14:                                       ; preds = %ifend
  %43 = load ptr, ptr %memberidx2, align 8
  %memberidx18 = getelementptr inbounds %Expression, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx18, align 4
  %45 = icmp eq i64 %44, 7
  br i1 %45, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %if.entry14
  %memberidx23 = getelementptr inbounds %VarAccessExpression, ptr %43, i64 0, i32 4
  %46 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 10
  %47 = load ptr, ptr %memberidx24, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i62 = getelementptr inbounds %VarId, ptr %46, i64 0, i32 1
  %48 = load i64, ptr %memberidx.i62, align 4
  %49 = load i64, ptr %46, align 4
  %memberidx2.i63 = getelementptr inbounds %VarId, ptr %46, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i63, align 4
  %51 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @215, i64 %48, i64 %49, i64 %50)
  %52 = load ptr, ptr %4, align 8
  %53 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %53, align 8
  %memberidx.i.i64 = getelementptr inbounds %string, ptr %53, i64 0, i32 1
  store ptr %52, ptr %memberidx.i.i64, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %53, i64 0, i32 2
  store i64 %51, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i65 = getelementptr inbounds %string, ptr %53, i64 0, i32 3
  store i64 %51, ptr %memberidx2.i.i65, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %54 = call fastcc i64 @Map_string_LLVMValueRef__hash_fnc(ptr nonnull %53)
  %memberidx.i66 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %47, i64 0, i32 1
  %55 = load i64, ptr %memberidx.i66, align 4
  %56 = srem i64 %54, %55
  %57 = load ptr, ptr %47, align 8
  %ptridx.i67 = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i67, align 8
  %.not.i68 = icmp eq ptr %58, null
  br i1 %.not.i68, label %while.end.i, label %while.entry.i

while.entry.i:                                    ; preds = %if.entry19, %else.i
  %hash.0.i = phi i64 [ %72, %else.i ], [ %56, %if.entry19 ]
  %59 = load ptr, ptr %47, align 8
  %ptridx3.i = getelementptr inbounds ptr, ptr %59, i64 %hash.0.i
  %60 = load ptr, ptr %ptridx3.i, align 8
  %61 = load ptr, ptr %60, align 8
  %memberidx.i.i69 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  %62 = load i64, ptr %memberidx.i.i69, align 4
  %63 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %62, %63
  br i1 %.not.i.i, label %ifend.i.i, label %else.i

ifend.i.i:                                        ; preds = %while.entry.i
  %memberidx2.i.i71 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  %64 = load ptr, ptr %memberidx2.i.i71, align 8
  %65 = load ptr, ptr %memberidx.i.i64, align 8
  %66 = call i64 @memcmp(ptr %64, ptr %65, i64 %62)
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %while.end.i, label %else.i

while.end.i:                                      ; preds = %else.i, %ifend.i.i, %if.entry19
  %hash.1.i = phi i64 [ %56, %if.entry19 ], [ %hash.0.i, %ifend.i.i ], [ %72, %else.i ]
  %68 = load ptr, ptr %47, align 8
  %ptridx9.i = getelementptr inbounds ptr, ptr %68, i64 %hash.1.i
  %69 = load ptr, ptr %ptridx9.i, align 8
  %.not29.i = icmp eq ptr %69, null
  br i1 %.not29.i, label %Map_string_LLVMValueRef____getitem__.exit, label %if.entry10.i

else.i:                                           ; preds = %while.entry.i, %ifend.i.i
  %70 = add nsw i64 %hash.0.i, 1
  %71 = load i64, ptr %memberidx.i66, align 4
  %72 = srem i64 %70, %71
  %73 = load ptr, ptr %47, align 8
  %ptridx7.i = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx7.i, align 8
  %.not30.i = icmp eq ptr %74, null
  br i1 %.not30.i, label %while.end.i, label %while.entry.i

if.entry10.i:                                     ; preds = %while.end.i
  %memberidx15.i = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %69, i64 0, i32 1
  %75 = load ptr, ptr %memberidx15.i, align 8
  br label %Map_string_LLVMValueRef____getitem__.exit

Map_string_LLVMValueRef____getitem__.exit:        ; preds = %while.end.i, %if.entry10.i
  %common.ret.op.i = phi ptr [ %75, %if.entry10.i ], [ null, %while.end.i ]
  %.not = icmp eq ptr %common.ret.op.i, null
  br i1 %.not, label %ifend21, label %if.entry25

ifend21:                                          ; preds = %Array_LLVMValueRef____sl__.exit80, %Map_string_LLVMValueRef____getitem__.exit, %if.entry14
  %76 = load ptr, ptr %memberidx2, align 8
  %77 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %76)
  br label %for.entry

if.entry25:                                       ; preds = %Map_string_LLVMValueRef____getitem__.exit
  %78 = load i64, ptr %memberidx.i, align 4
  %79 = load i64, ptr %memberidx1.i, align 4
  %.not.i74 = icmp slt i64 %78, %79
  br i1 %.not.i74, label %Array_LLVMValueRef____sl__.exit80, label %if.entry.i77

if.entry.i77:                                     ; preds = %if.entry25
  %80 = shl i64 %79, 1
  store i64 %80, ptr %memberidx1.i, align 4
  %81 = load ptr, ptr %memberidx2.i, align 8
  %82 = shl i64 %79, 4
  %83 = call ptr @realloc(ptr %81, i64 %82)
  store ptr %83, ptr %memberidx2.i, align 8
  br label %Array_LLVMValueRef____sl__.exit80

Array_LLVMValueRef____sl__.exit80:                ; preds = %if.entry25, %if.entry.i77
  %84 = add nsw i64 %78, 1
  store i64 %84, ptr %memberidx.i, align 4
  %85 = load ptr, ptr %memberidx2.i, align 8
  %ptridx.i79 = getelementptr inbounds ptr, ptr %85, i64 %78
  store ptr %common.ret.op.i, ptr %ptridx.i79, align 8
  br label %ifend21

for.entry:                                        ; preds = %ifend21, %ifend
  %func.1 = phi ptr [ %77, %ifend21 ], [ %func.0, %ifend ]
  %memberidx29 = getelementptr inbounds %CallExpression, ptr %2, i64 0, i32 5
  %86 = load ptr, ptr %memberidx29, align 8
  %87 = call ptr @malloc(i32 25)
  %memberidx.i81 = getelementptr inbounds %Array_Expression_, ptr %86, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i81, align 8
  %memberidx1.i82 = getelementptr inbounds %Array_Expression_, ptr %86, i64 0, i32 2
  %89 = load i64, ptr %memberidx1.i82, align 4
  store i1 false, ptr %87, align 1
  %memberidx1.i.i83 = getelementptr inbounds %ArrayIterator_Expression_, ptr %87, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i83, align 4
  %memberidx2.i.i84 = getelementptr inbounds %ArrayIterator_Expression_, ptr %87, i64 0, i32 3
  store ptr %88, ptr %memberidx2.i.i84, align 8
  %memberidx3.i.i85 = getelementptr inbounds %ArrayIterator_Expression_, ptr %87, i64 0, i32 2
  store i64 %89, ptr %memberidx3.i.i85, align 4
  store i64 1, ptr %memberidx1.i.i83, align 4
  %90 = icmp slt i64 %89, 1
  br i1 %90, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %Array_LLVMValueRef____sl__.exit97
  %storemerge114.in = phi ptr [ %ptridx.i100, %Array_LLVMValueRef____sl__.exit97 ], [ %88, %for.entry ]
  %storemerge114 = load ptr, ptr %storemerge114.in, align 8
  %91 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %storemerge114)
  %92 = load i64, ptr %memberidx.i, align 4
  %93 = load i64, ptr %memberidx1.i, align 4
  %.not.i91 = icmp slt i64 %92, %93
  br i1 %.not.i91, label %Array_LLVMValueRef____sl__.exit97, label %if.entry.i94

if.entry.i94:                                     ; preds = %for.body
  %94 = shl i64 %93, 1
  store i64 %94, ptr %memberidx1.i, align 4
  %95 = load ptr, ptr %memberidx2.i, align 8
  %96 = shl i64 %93, 4
  %97 = call ptr @realloc(ptr %95, i64 %96)
  store ptr %97, ptr %memberidx2.i, align 8
  br label %Array_LLVMValueRef____sl__.exit97

Array_LLVMValueRef____sl__.exit97:                ; preds = %for.body, %if.entry.i94
  %98 = add nsw i64 %92, 1
  store i64 %98, ptr %memberidx.i, align 4
  %99 = load ptr, ptr %memberidx2.i, align 8
  %ptridx.i96 = getelementptr inbounds ptr, ptr %99, i64 %92
  store ptr %91, ptr %ptridx.i96, align 8
  %100 = load i64, ptr %memberidx1.i.i83, align 4
  %101 = add nsw i64 %100, 1
  store i64 %101, ptr %memberidx1.i.i83, align 4
  %102 = load ptr, ptr %memberidx2.i.i84, align 8
  %ptridx.i100 = getelementptr inbounds ptr, ptr %102, i64 %100
  %103 = load i64, ptr %memberidx3.i.i85, align 4
  %104 = icmp sge i64 %100, %103
  br i1 %104, label %for.end, label %for.body

for.end:                                          ; preds = %Array_LLVMValueRef____sl__.exit97, %for.entry
  %storemerge112.lcssa = phi i1 [ %90, %for.entry ], [ %104, %Array_LLVMValueRef____sl__.exit97 ]
  store i1 %storemerge112.lcssa, ptr %87, align 1
  tail call void @free(ptr nonnull %87)
  %105 = load ptr, ptr %memberidx2, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %105, i64 0, i32 3
  %106 = load ptr, ptr %memberidx32, align 8
  %107 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %106, i1 false)
  %108 = load ptr, ptr %memberidx2.i, align 8
  %109 = load i64, ptr %memberidx.i, align 4
  %110 = call ptr @LLVMBuildCall2(ptr %1, ptr %107, ptr %func.1, ptr %108, i64 %109, ptr nonnull @28)
  ret ptr %110
}

define internal fastcc ptr @CodeGen_codegen_unary_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %UnaryExpression, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpression, ptr %2, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %5)
  switch i64 %4, label %ifend20 [
    i64 1, label %if.entry
    i64 6, label %if.entry7
    i64 7, label %if.entry18
  ]

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call fastcc i1 @is_object(ptr %7)
  br i1 %8, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %if.entry
  call fastcc void @CodeGen_codegen_del_call(ptr %0, ptr %1, ptr %6, ptr %7)
  br label %ifend5

common.ret:                                       ; preds = %CodeGen_get_expr_mem.exit, %ifend20, %false_block.i, %true_block.i, %true_block, %false_block, %ifend35, %if.entry15, %ifend5
  %common.ret.op = phi ptr [ null, %ifend5 ], [ %20, %if.entry15 ], [ %ternary51, %ifend35 ], [ %23, %true_block ], [ %24, %false_block ], [ %16, %true_block.i ], [ %17, %false_block.i ], [ %6, %ifend20 ], [ %common.ret.op.i, %CodeGen_get_expr_mem.exit ]
  ret ptr %common.ret.op

ifend5:                                           ; preds = %if.entry, %if.entry3
  %9 = call ptr @LLVMBuildFree(ptr %1, ptr %6)
  br label %common.ret

if.entry7:                                        ; preds = %3
  %memberidx10 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %10 = load ptr, ptr %memberidx10, align 8
  %11 = load i64, ptr %10, align 4
  %12 = add i64 %11, -1
  %13 = icmp ult i64 %12, 7
  br i1 %13, label %if.entry11, label %else12

ifend9:                                           ; preds = %else12
  %14 = icmp eq i64 %4, 7
  br i1 %14, label %if.entry18, label %ifend20

if.entry11:                                       ; preds = %if.entry7
  %15 = call i1 @LLVMIsConstant(ptr %6)
  br i1 %15, label %true_block.i, label %false_block.i

true_block.i:                                     ; preds = %if.entry11
  %16 = call ptr @LLVMConstNeg(ptr %6)
  br label %common.ret

false_block.i:                                    ; preds = %if.entry11
  %17 = call ptr @LLVMBuildNeg(ptr %1, ptr %6, ptr nonnull @28)
  br label %common.ret

else12:                                           ; preds = %if.entry7
  %18 = and i64 %11, -2
  %19 = icmp eq i64 %18, 8
  br i1 %19, label %if.entry15, label %ifend9

if.entry15:                                       ; preds = %else12
  %20 = call ptr @LLVMBuildFNeg(ptr %1, ptr %6, ptr nonnull @28)
  br label %common.ret

if.entry18:                                       ; preds = %3, %ifend9
  %21 = call i1 @LLVMIsConstant(ptr %6)
  br i1 %21, label %true_block, label %false_block

ifend20:                                          ; preds = %3, %ifend9
  %22 = icmp eq i64 %4, 8
  switch i64 %4, label %common.ret [
    i64 8, label %if.entry21
    i64 5, label %if.entry21
    i64 4, label %if.entry21
    i64 3, label %if.entry21
    i64 2, label %if.entry21
  ]

true_block:                                       ; preds = %if.entry18
  %23 = call ptr @LLVMConstNot(ptr %6)
  br label %common.ret

false_block:                                      ; preds = %if.entry18
  %24 = call ptr @LLVMBuildNot(ptr %1, ptr %6, ptr nonnull @28)
  br label %common.ret

if.entry21:                                       ; preds = %ifend20, %ifend20, %ifend20, %ifend20, %ifend20
  %memberidx.i = getelementptr inbounds %Expression, ptr %5, i64 0, i32 2
  %25 = load i64, ptr %memberidx.i, align 4
  switch i64 %25, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry21
  %26 = call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr %5)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry21
  %27 = call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr %5)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry21
  %28 = call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %5, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry21
  %29 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %5)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %26, %if.entry.i ], [ %27, %if.entry2.i ], [ %28, %if.entry6.i ], [ %29, %ifend8.i ]
  br i1 %22, label %common.ret, label %ifend26

ifend26:                                          ; preds = %CodeGen_get_expr_mem.exit
  %memberidx27 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %30 = load ptr, ptr %memberidx27, align 8
  %31 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %30, i1 true)
  %32 = icmp eq i64 %4, 2
  %33 = icmp eq i64 %4, 4
  %34 = or i1 %32, %33
  %. = select i1 %34, i64 1, i64 -1
  %new_value = alloca ptr, align 8
  store ptr null, ptr %new_value, align 8
  %35 = load ptr, ptr %memberidx27, align 8
  %36 = load i64, ptr %35, align 4
  %37 = icmp eq i64 %36, 13
  br i1 %37, label %if.entry33, label %else34

if.entry33:                                       ; preds = %ifend26
  %memberidx37 = getelementptr inbounds %PointerType, ptr %35, i64 0, i32 1
  %38 = load ptr, ptr %memberidx37, align 8
  %39 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %38, i1 true)
  %indices = alloca [1 x ptr], align 8
  %40 = call ptr @LLVMIntType(i64 64)
  %41 = call ptr @LLVMConstInt(ptr %40, i64 %., i1 false)
  store ptr %41, ptr %indices, align 8
  %42 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %39, ptr %6, ptr nonnull %indices, i64 1, ptr nonnull @237)
  store ptr %42, ptr %new_value, align 8
  br label %ifend35

else34:                                           ; preds = %ifend26
  %43 = add i64 %36, -1
  %44 = icmp ult i64 %43, 9
  br i1 %44, label %if.entry40, label %ifend35

ifend35:                                          ; preds = %end45, %else34, %if.entry33
  %45 = load ptr, ptr %new_value, align 8
  %46 = call ptr @LLVMBuildStore(ptr %1, ptr %45, ptr %common.ret.op.i)
  %47 = icmp sgt i64 %4, 2
  %ternary51 = select i1 %47, ptr %6, ptr %45
  br label %common.ret

if.entry40:                                       ; preds = %else34
  %48 = icmp ult i64 %43, 7
  br i1 %48, label %true_block43, label %false_block44

true_block43:                                     ; preds = %if.entry40
  %49 = call ptr @LLVMConstInt(ptr %31, i64 %., i1 false)
  br label %end45

false_block44:                                    ; preds = %if.entry40
  %50 = sitofp i64 %. to double
  %51 = call ptr @LLVMConstReal(ptr %31, double %50)
  br label %end45

end45:                                            ; preds = %false_block44, %true_block43
  %ternary47 = phi ptr [ %49, %true_block43 ], [ %51, %false_block44 ]
  %52 = call ptr @LLVMBuildNSWAdd(ptr %1, ptr %6, ptr %ternary47, ptr nonnull @28)
  store ptr %52, ptr %new_value, align 8
  br label %ifend35
}

define internal fastcc ptr @CodeGen_codegen_new_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 6
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 13
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %9 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %5, i1 true)
  %memberidx2 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 4
  %10 = load ptr, ptr %memberidx2, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %10, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %12)
  %memberidx3 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 5
  %14 = load i1, ptr %memberidx3, align 1
  br i1 %14, label %if.entry4, label %else5

else:                                             ; preds = %3
  %15 = call fastcc i1 @is_object(ptr %5)
  br i1 %15, label %if.entry7, label %ifend

ifend:                                            ; preds = %else.i, %if.entry.i, %else, %if.entry4, %else5
  %ptr.0 = phi ptr [ %16, %if.entry4 ], [ %17, %else5 ], [ null, %else ], [ %ptr.1, %if.entry.i ], [ %ptr.1, %else.i ]
  ret ptr %ptr.0

if.entry4:                                        ; preds = %if.entry
  %16 = call ptr @LLVMBuildArrayMalloc(ptr %1, ptr %9, ptr %13, ptr nonnull @28)
  br label %ifend

else5:                                            ; preds = %if.entry
  %17 = call ptr @LLVMBuildArrayAlloca(ptr %1, ptr %9, ptr %13, ptr nonnull @28)
  br label %ifend

if.entry7:                                        ; preds = %else
  %memberidx10 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 4
  %18 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Array_Expression_, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx11, align 4
  %20 = add nsw i64 %19, 1
  %21 = alloca ptr, i64 %20, align 8
  %22 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %5, i1 false)
  %memberidx12 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 5
  %23 = load i1, ptr %memberidx12, align 1
  br i1 %23, label %if.entry13, label %else14

if.entry13:                                       ; preds = %if.entry7
  %24 = call ptr @LLVMBuildMalloc(ptr %1, ptr %22, ptr nonnull @28)
  br label %ifend15

else14:                                           ; preds = %if.entry7
  %25 = call ptr @LLVMBuildAlloca(ptr %1, ptr %22, ptr nonnull @28)
  br label %ifend15

ifend15:                                          ; preds = %else14, %if.entry13
  %ptr.1 = phi ptr [ %24, %if.entry13 ], [ %25, %else14 ]
  store ptr %ptr.1, ptr %21, align 8
  %26 = load ptr, ptr %memberidx10, align 8
  %27 = call ptr @malloc(i32 25)
  %memberidx.i.i = getelementptr inbounds %Array_Expression_, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Array_Expression_, ptr %26, i64 0, i32 2
  %29 = load i64, ptr %memberidx1.i.i, align 4
  store i1 false, ptr %27, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 3
  store ptr %28, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %27, i64 0, i32 2
  store i64 %29, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %30 = icmp slt i64 %29, 1
  br i1 %30, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

for.body.i:                                       ; preds = %ifend15, %for.body.i
  %item.0.i58.in = phi ptr [ %ptridx.i7.i, %for.body.i ], [ %28, %ifend15 ]
  %start.0.i57 = phi i64 [ %31, %for.body.i ], [ 1, %ifend15 ]
  %item.0.i58 = load ptr, ptr %item.0.i58.in, align 8
  %31 = add nuw nsw i64 %start.0.i57, 1
  %ptridx.i = getelementptr inbounds ptr, ptr %21, i64 %start.0.i57
  %32 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %item.0.i58)
  store ptr %32, ptr %ptridx.i, align 8
  %33 = load i64, ptr %memberidx1.i.i.i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %memberidx1.i.i.i, align 4
  %35 = load ptr, ptr %memberidx2.i.i.i, align 8
  %ptridx.i7.i = getelementptr inbounds ptr, ptr %35, i64 %33
  %36 = load i64, ptr %memberidx3.i.i.i, align 4
  %37 = icmp sge i64 %33, %36
  br i1 %37, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

CodeGen_evaluate_expression_list.exit:            ; preds = %for.body.i, %ifend15
  %storemerge.lcssa = phi i1 [ %30, %ifend15 ], [ %37, %for.body.i ]
  store i1 %storemerge.lcssa, ptr %27, align 1
  call void @free(ptr nonnull %27)
  %memberidx.i40 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %38 = load ptr, ptr %memberidx.i40, align 8
  %39 = call fastcc ptr @get_class_from_type(ptr %38, ptr %5)
  %memberidx1.i = getelementptr inbounds %ObjectType, ptr %5, i64 0, i32 1
  %40 = load ptr, ptr %memberidx1.i, align 8
  %41 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %40)
  %.not.i41 = icmp eq ptr %41, null
  br i1 %.not.i41, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %CodeGen_evaluate_expression_list.exit
  %42 = load ptr, ptr %memberidx.i40, align 8
  %memberidx.i.i44 = getelementptr inbounds %Program, ptr %42, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i44, align 8
  %44 = load i64, ptr %40, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i45 = getelementptr inbounds %Module, ptr %46, i64 0, i32 4
  %47 = load ptr, ptr %memberidx2.i.i45, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %40, i64 0, i32 2
  %48 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr %0, ptr %50)
  call fastcc void @CodeGen_codegen_class(ptr %0, ptr %50)
  %51 = load ptr, ptr %50, align 8
  %52 = call fastcc ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %51)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %CodeGen_evaluate_expression_list.exit, %ifend.i
  %common.ret.op.i = phi ptr [ %52, %ifend.i ], [ %41, %CodeGen_evaluate_expression_list.exit ]
  %memberidx2.i = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 6
  %53 = load ptr, ptr %memberidx2.i, align 8
  %.not.i = icmp eq ptr %53, null
  br i1 %.not.i, label %else.i, label %if.entry.i

if.entry.i:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %54 = call ptr @LLVM_GetFunctionType(ptr nonnull %53)
  %55 = call ptr @LLVMBuildCall2(ptr %1, ptr %54, ptr nonnull %53, ptr nonnull %21, i64 %20, ptr nonnull @28)
  br label %ifend

else.i:                                           ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %56 = call ptr @malloc(i32 47)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(47) %56, ptr noundef nonnull align 8 dereferenceable(47) @257, i64 47, i1 false)
  %57 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i46 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i46, align 8
  %memberidx1.i.i47 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 47, ptr %memberidx1.i.i47, align 4
  %memberidx2.i.i48 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 47, ptr %memberidx2.i.i48, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %58 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %59 = call ptr %58(ptr nonnull %57)
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @210, ptr %59)
  %61 = load ptr, ptr %4, align 8
  %62 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i.i50 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i.i50, align 8
  %memberidx1.i.i51 = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i.i51, align 4
  %memberidx2.i.i52 = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 %60, ptr %memberidx2.i.i52, align 4
  call void @free(ptr %59)
  %63 = load ptr, ptr %62, align 8
  %memberidx.i.i.i53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i64 0, i32 3
  %64 = load ptr, ptr %memberidx.i.i.i53, align 8
  %65 = call ptr %64(ptr nonnull %62)
  %66 = load i64, ptr %memberidx1.i.i51, align 4
  call void @write(i64 1, ptr %65, i64 %66)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend
}

define internal fastcc ptr @CodeGen_codegen_intrinsic_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %arg_types.i118 = alloca [3 x ptr], align 8
  %arg_types.i107 = alloca [2 x ptr], align 8
  %arg_types.i = alloca [1 x ptr], align 8
  %args.i = alloca [1 x ptr], align 8
  %memberidx = getelementptr inbounds %IntrinsicCall, ptr %2, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %5, 3
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %cbuff = alloca ptr, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %2, i64 0, i32 5
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %9)
  %11 = call fastcc ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %10)
  store ptr %11, ptr %cbuff, align 8
  %value = alloca ptr, align 8
  store ptr null, ptr %value, align 8
  switch i64 %5, label %ifend10 [
    i64 0, label %if.entry2
    i64 1, label %if.entry5
    i64 2, label %if.entry8
  ]

ifend:                                            ; preds = %3
  %memberidx11 = getelementptr inbounds %IntrinsicCall, ptr %2, i64 0, i32 5
  %12 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx12, align 4
  %14 = alloca ptr, i64 %13, align 8
  %15 = call ptr @malloc(i32 25)
  %memberidx.i.i138 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i.i138, align 8
  %17 = load i64, ptr %memberidx12, align 4
  store i1 false, ptr %15, align 1
  %memberidx1.i.i.i140 = getelementptr inbounds %ArrayIterator_Expression_, ptr %15, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i140, align 4
  %memberidx2.i.i.i141 = getelementptr inbounds %ArrayIterator_Expression_, ptr %15, i64 0, i32 3
  store ptr %16, ptr %memberidx2.i.i.i141, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %15, i64 0, i32 2
  store i64 %17, ptr %memberidx3.i.i.i, align 4
  store i64 1, ptr %memberidx1.i.i.i140, align 4
  %18 = icmp slt i64 %17, 1
  br i1 %18, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

for.body.i:                                       ; preds = %ifend, %for.body.i
  %item.0.i150.in = phi ptr [ %ptridx.i7.i, %for.body.i ], [ %16, %ifend ]
  %start.0.i149 = phi i64 [ %19, %for.body.i ], [ 0, %ifend ]
  %item.0.i150 = load ptr, ptr %item.0.i150.in, align 8
  %19 = add nuw nsw i64 %start.0.i149, 1
  %ptridx.i = getelementptr inbounds ptr, ptr %14, i64 %start.0.i149
  %20 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %item.0.i150)
  store ptr %20, ptr %ptridx.i, align 8
  %21 = load i64, ptr %memberidx1.i.i.i140, align 4
  %22 = add nsw i64 %21, 1
  store i64 %22, ptr %memberidx1.i.i.i140, align 4
  %23 = load ptr, ptr %memberidx2.i.i.i141, align 8
  %ptridx.i7.i = getelementptr inbounds ptr, ptr %23, i64 %21
  %24 = load i64, ptr %memberidx3.i.i.i, align 4
  %25 = icmp sge i64 %21, %24
  br i1 %25, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

CodeGen_evaluate_expression_list.exit:            ; preds = %for.body.i, %ifend
  %storemerge.lcssa = phi i1 [ %18, %ifend ], [ %25, %for.body.i ]
  store i1 %storemerge.lcssa, ptr %15, align 1
  call void @free(ptr nonnull %15)
  %26 = load ptr, ptr %memberidx11, align 8
  %memberidx.i80 = getelementptr inbounds %Array_Expression_, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i80, align 8
  %28 = load ptr, ptr %27, align 8
  %memberidx15 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 3
  %29 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %PointerType, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx16, align 8
  %31 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %30, i1 true)
  %32 = call ptr @LLVMSizeOf(ptr %31)
  %33 = icmp eq i64 %5, 6
  br i1 %33, label %if.entry17, label %ifend19

if.entry2:                                        ; preds = %if.entry
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %args.i)
  %34 = call ptr @LLVMInt8Type()
  %35 = call ptr @LLVMPointerType(ptr %34, i64 0)
  store ptr %35, ptr %arg_types.i, align 8
  store ptr %11, ptr %args.i, align 8
  %36 = call ptr @LLVMDoubleType()
  %37 = load ptr, ptr %0, align 8
  %38 = call ptr @malloc(i32 4)
  store i32 1718580321, ptr %38, align 8
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i, align 4
  %40 = call ptr @malloc(i32 16)
  %memberidx1.i.i7.i = getelementptr inbounds %IntrinsicResult, ptr %40, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %40, i8 0, i64 16, i1 false)
  %41 = call ptr @LLVMFunctionType(ptr %36, ptr nonnull %arg_types.i, i64 1, i1 false)
  store ptr %41, ptr %memberidx1.i.i7.i, align 8
  %42 = load ptr, ptr %39, align 8
  %memberidx1.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 5
  %43 = load ptr, ptr %memberidx1.i.i, align 8
  %44 = call ptr %43(ptr nonnull %39)
  %45 = call ptr @LLVMGetNamedFunction(ptr %37, ptr %44)
  %.not.i.i = icmp eq ptr %45, null
  br i1 %.not.i.i, label %else.i.i, label %CodeGen_codegen_atof_call.exit

else.i.i:                                         ; preds = %if.entry2
  %46 = call ptr @LLVMAddFunction(ptr %37, ptr %44, ptr %41)
  br label %CodeGen_codegen_atof_call.exit

CodeGen_codegen_atof_call.exit:                   ; preds = %if.entry2, %else.i.i
  %storemerge.i.i = phi ptr [ %46, %else.i.i ], [ %45, %if.entry2 ]
  store ptr %storemerge.i.i, ptr %40, align 8
  %47 = call ptr @LLVMBuildCall2(ptr %1, ptr %41, ptr %storemerge.i.i, ptr nonnull %args.i, i64 1, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %args.i)
  store ptr %47, ptr %value, align 8
  switch i64 %5, label %ifend10 [
    i64 1, label %if.entry5
    i64 2, label %if.entry8
  ]

if.entry5:                                        ; preds = %if.entry, %CodeGen_codegen_atof_call.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %args.i)
  %48 = call ptr @LLVMInt8Type()
  %49 = call ptr @LLVMPointerType(ptr %48, i64 0)
  store ptr %49, ptr %arg_types.i, align 8
  store ptr %11, ptr %args.i, align 8
  %50 = call ptr @LLVMInt32Type()
  %51 = load ptr, ptr %0, align 8
  %52 = call ptr @malloc(i32 4)
  store i32 1768911969, ptr %52, align 8
  %53 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %53, align 8
  %memberidx.i.i.i83 = getelementptr inbounds %string, ptr %53, i64 0, i32 1
  store ptr %52, ptr %memberidx.i.i.i83, align 8
  %memberidx1.i.i.i84 = getelementptr inbounds %string, ptr %53, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i84, align 4
  %memberidx2.i.i.i85 = getelementptr inbounds %string, ptr %53, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i85, align 4
  %54 = call ptr @malloc(i32 16)
  %memberidx1.i.i7.i86 = getelementptr inbounds %IntrinsicResult, ptr %54, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %54, i8 0, i64 16, i1 false)
  %55 = call ptr @LLVMFunctionType(ptr %50, ptr nonnull %arg_types.i, i64 1, i1 false)
  store ptr %55, ptr %memberidx1.i.i7.i86, align 8
  %56 = load ptr, ptr %53, align 8
  %memberidx1.i.i88 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx1.i.i88, align 8
  %58 = call ptr %57(ptr nonnull %53)
  %59 = call ptr @LLVMGetNamedFunction(ptr %51, ptr %58)
  %.not.i.i89 = icmp eq ptr %59, null
  br i1 %.not.i.i89, label %else.i.i91, label %CodeGen_codegen_atoi_call.exit

else.i.i91:                                       ; preds = %if.entry5
  %60 = call ptr @LLVMAddFunction(ptr %51, ptr %58, ptr %55)
  br label %CodeGen_codegen_atoi_call.exit

CodeGen_codegen_atoi_call.exit:                   ; preds = %if.entry5, %else.i.i91
  %storemerge.i.i92 = phi ptr [ %60, %else.i.i91 ], [ %59, %if.entry5 ]
  store ptr %storemerge.i.i92, ptr %54, align 8
  %61 = call ptr @LLVMBuildCall2(ptr %1, ptr %55, ptr %storemerge.i.i92, ptr nonnull %args.i, i64 1, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %args.i)
  store ptr %61, ptr %value, align 8
  %62 = icmp eq i64 %5, 2
  br i1 %62, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %if.entry, %CodeGen_codegen_atof_call.exit, %CodeGen_codegen_atoi_call.exit
  %63 = load ptr, ptr %cbuff, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %args.i)
  %64 = call ptr @LLVMInt8Type()
  %65 = call ptr @LLVMPointerType(ptr %64, i64 0)
  store ptr %65, ptr %arg_types.i, align 8
  store ptr %63, ptr %args.i, align 8
  %66 = call ptr @LLVMInt64Type()
  %67 = load ptr, ptr %0, align 8
  %68 = call ptr @malloc(i32 4)
  store i32 1819243617, ptr %68, align 8
  %69 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %69, align 8
  %memberidx.i.i.i96 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  store ptr %68, ptr %memberidx.i.i.i96, align 8
  %memberidx1.i.i.i97 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i97, align 4
  %memberidx2.i.i.i98 = getelementptr inbounds %string, ptr %69, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i98, align 4
  %70 = call ptr @malloc(i32 16)
  %memberidx1.i.i7.i99 = getelementptr inbounds %IntrinsicResult, ptr %70, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %70, i8 0, i64 16, i1 false)
  %71 = call ptr @LLVMFunctionType(ptr %66, ptr nonnull %arg_types.i, i64 1, i1 false)
  store ptr %71, ptr %memberidx1.i.i7.i99, align 8
  %72 = load ptr, ptr %69, align 8
  %memberidx1.i.i101 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %72, i64 0, i32 5
  %73 = load ptr, ptr %memberidx1.i.i101, align 8
  %74 = call ptr %73(ptr nonnull %69)
  %75 = call ptr @LLVMGetNamedFunction(ptr %67, ptr %74)
  %.not.i.i102 = icmp eq ptr %75, null
  br i1 %.not.i.i102, label %else.i.i104, label %CodeGen_codegen_atol_call.exit

else.i.i104:                                      ; preds = %if.entry8
  %76 = call ptr @LLVMAddFunction(ptr %67, ptr %74, ptr %71)
  br label %CodeGen_codegen_atol_call.exit

CodeGen_codegen_atol_call.exit:                   ; preds = %if.entry8, %else.i.i104
  %storemerge.i.i105 = phi ptr [ %76, %else.i.i104 ], [ %75, %if.entry8 ]
  store ptr %storemerge.i.i105, ptr %70, align 8
  %77 = call ptr @LLVMBuildCall2(ptr %1, ptr %71, ptr %storemerge.i.i105, ptr nonnull %args.i, i64 1, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %arg_types.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %args.i)
  store ptr %77, ptr %value, align 8
  br label %ifend10

common.ret:                                       ; preds = %ifend42, %if.entry40, %if.entry34, %if.entry27, %CodeGen_codegen_memcmp_call.exit, %CodeGen_codegen_realloc_call.exit, %ifend10
  %common.ret.op = phi ptr [ %80, %ifend10 ], [ %97, %CodeGen_codegen_realloc_call.exit ], [ %116, %CodeGen_codegen_memcmp_call.exit ], [ %125, %if.entry27 ], [ %131, %if.entry34 ], [ %135, %if.entry40 ], [ null, %ifend42 ]
  ret ptr %common.ret.op

ifend10:                                          ; preds = %if.entry, %CodeGen_codegen_atof_call.exit, %CodeGen_codegen_atoi_call.exit, %CodeGen_codegen_atol_call.exit
  %78 = load ptr, ptr %cbuff, align 8
  %79 = call ptr @LLVMBuildFree(ptr %1, ptr %78)
  %80 = load ptr, ptr %value, align 8
  br label %common.ret

if.entry17:                                       ; preds = %CodeGen_evaluate_expression_list.exit
  %ptridx = getelementptr inbounds ptr, ptr %14, i64 1
  %81 = load ptr, ptr %ptridx, align 8
  %82 = call ptr @LLVMBuildMul(ptr %1, ptr %81, ptr %32, ptr nonnull @28)
  store ptr %82, ptr %ptridx, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %arg_types.i107)
  %83 = call ptr @LLVMInt8Type()
  %84 = call ptr @LLVMPointerType(ptr %83, i64 0)
  store ptr %84, ptr %arg_types.i107, align 8
  %85 = getelementptr inbounds ptr, ptr %arg_types.i107, i64 1
  %86 = call ptr @LLVMIntType(i64 64)
  store ptr %86, ptr %85, align 8
  %87 = load ptr, ptr %0, align 8
  %88 = call ptr @malloc(i32 7)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %88, ptr noundef nonnull align 8 dereferenceable(7) @217, i64 7, i1 false)
  %89 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %89, align 8
  %memberidx.i.i.i108 = getelementptr inbounds %string, ptr %89, i64 0, i32 1
  store ptr %88, ptr %memberidx.i.i.i108, align 8
  %memberidx1.i.i.i109 = getelementptr inbounds %string, ptr %89, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i109, align 4
  %memberidx2.i.i.i110 = getelementptr inbounds %string, ptr %89, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i110, align 4
  %90 = call ptr @malloc(i32 16)
  %memberidx1.i.i6.i = getelementptr inbounds %IntrinsicResult, ptr %90, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %90, i8 0, i64 16, i1 false)
  %91 = call ptr @LLVMFunctionType(ptr %84, ptr nonnull %arg_types.i107, i64 2, i1 false)
  store ptr %91, ptr %memberidx1.i.i6.i, align 8
  %92 = load ptr, ptr %89, align 8
  %memberidx1.i.i112 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i64 0, i32 5
  %93 = load ptr, ptr %memberidx1.i.i112, align 8
  %94 = call ptr %93(ptr nonnull %89)
  %95 = call ptr @LLVMGetNamedFunction(ptr %87, ptr %94)
  %.not.i.i113 = icmp eq ptr %95, null
  br i1 %.not.i.i113, label %else.i.i115, label %CodeGen_codegen_realloc_call.exit

else.i.i115:                                      ; preds = %if.entry17
  %96 = call ptr @LLVMAddFunction(ptr %87, ptr %94, ptr %91)
  br label %CodeGen_codegen_realloc_call.exit

CodeGen_codegen_realloc_call.exit:                ; preds = %if.entry17, %else.i.i115
  %storemerge.i.i116 = phi ptr [ %96, %else.i.i115 ], [ %95, %if.entry17 ]
  store ptr %storemerge.i.i116, ptr %90, align 8
  %97 = call ptr @LLVMBuildCall2(ptr %1, ptr %91, ptr %storemerge.i.i116, ptr nonnull %14, i64 2, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %arg_types.i107)
  br label %common.ret

ifend19:                                          ; preds = %CodeGen_evaluate_expression_list.exit
  %ptridx21 = getelementptr inbounds ptr, ptr %14, i64 2
  %98 = load ptr, ptr %ptridx21, align 8
  %99 = call ptr @LLVMBuildMul(ptr %1, ptr %98, ptr %32, ptr nonnull @28)
  store ptr %99, ptr %ptridx21, align 8
  %100 = icmp eq i64 %5, 7
  br i1 %100, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %ifend19
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %arg_types.i118)
  %101 = call ptr @LLVMInt8Type()
  %102 = call ptr @LLVMPointerType(ptr %101, i64 0)
  %103 = call ptr @LLVMIntType(i64 64)
  store ptr %102, ptr %arg_types.i118, align 8
  %104 = getelementptr inbounds ptr, ptr %arg_types.i118, i64 1
  store ptr %102, ptr %104, align 8
  %105 = getelementptr inbounds ptr, ptr %arg_types.i118, i64 2
  store ptr %103, ptr %105, align 8
  %106 = load ptr, ptr %0, align 8
  %107 = call ptr @malloc(i32 6)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %107, ptr noundef nonnull align 8 dereferenceable(6) @218, i64 6, i1 false)
  %108 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %108, align 8
  %memberidx.i.i.i119 = getelementptr inbounds %string, ptr %108, i64 0, i32 1
  store ptr %107, ptr %memberidx.i.i.i119, align 8
  %memberidx1.i.i.i120 = getelementptr inbounds %string, ptr %108, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i.i120, align 4
  %memberidx2.i.i.i121 = getelementptr inbounds %string, ptr %108, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i.i121, align 4
  %109 = call ptr @malloc(i32 16)
  %memberidx1.i.i7.i122 = getelementptr inbounds %IntrinsicResult, ptr %109, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %109, i8 0, i64 16, i1 false)
  %110 = call ptr @LLVMFunctionType(ptr %103, ptr nonnull %arg_types.i118, i64 3, i1 false)
  store ptr %110, ptr %memberidx1.i.i7.i122, align 8
  %111 = load ptr, ptr %108, align 8
  %memberidx1.i.i124 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %111, i64 0, i32 5
  %112 = load ptr, ptr %memberidx1.i.i124, align 8
  %113 = call ptr %112(ptr nonnull %108)
  %114 = call ptr @LLVMGetNamedFunction(ptr %106, ptr %113)
  %.not.i.i125 = icmp eq ptr %114, null
  br i1 %.not.i.i125, label %else.i.i127, label %CodeGen_codegen_memcmp_call.exit

else.i.i127:                                      ; preds = %if.entry23
  %115 = call ptr @LLVMAddFunction(ptr %106, ptr %113, ptr %110)
  br label %CodeGen_codegen_memcmp_call.exit

CodeGen_codegen_memcmp_call.exit:                 ; preds = %if.entry23, %else.i.i127
  %storemerge.i.i128 = phi ptr [ %115, %else.i.i127 ], [ %114, %if.entry23 ]
  store ptr %storemerge.i.i128, ptr %109, align 8
  %116 = call ptr @LLVMBuildCall2(ptr %1, ptr %110, ptr %storemerge.i.i128, ptr nonnull %14, i64 3, ptr nonnull @28)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %arg_types.i118)
  br label %common.ret

ifend25:                                          ; preds = %ifend19
  %117 = load ptr, ptr %14, align 8
  %118 = call i64 @LLVMGetAlignment(ptr %117)
  %119 = icmp eq i64 %5, 5
  br i1 %119, label %if.entry27, label %ifend29

if.entry27:                                       ; preds = %ifend25
  %120 = load ptr, ptr %14, align 8
  %ptridx31 = getelementptr inbounds ptr, ptr %14, i64 1
  %121 = load ptr, ptr %ptridx31, align 8
  %122 = call ptr @LLVMInt8Type()
  %123 = call ptr @LLVMBuildIntCast2(ptr %1, ptr %121, ptr %122, i1 false, ptr nonnull @28)
  %124 = load ptr, ptr %ptridx21, align 8
  %125 = call ptr @LLVMBuildMemSet(ptr %1, ptr %120, ptr %123, ptr %124, i64 %118)
  br label %common.ret

ifend29:                                          ; preds = %ifend25
  %ptridx33 = getelementptr inbounds ptr, ptr %14, i64 1
  %126 = load ptr, ptr %ptridx33, align 8
  %127 = call i64 @LLVMGetAlignment(ptr %126)
  switch i64 %5, label %ifend42 [
    i64 3, label %if.entry34
    i64 4, label %if.entry40
  ]

if.entry34:                                       ; preds = %ifend29
  %128 = load ptr, ptr %14, align 8
  %129 = load ptr, ptr %ptridx33, align 8
  %130 = load ptr, ptr %ptridx21, align 8
  %131 = call ptr @LLVMBuildMemCpy(ptr %1, ptr %128, i64 %118, ptr %129, i64 %127, ptr %130)
  br label %common.ret

if.entry40:                                       ; preds = %ifend29
  %132 = load ptr, ptr %14, align 8
  %133 = load ptr, ptr %ptridx33, align 8
  %134 = load ptr, ptr %ptridx21, align 8
  %135 = call ptr @LLVMBuildMemMove(ptr %1, ptr %132, i64 %118, ptr %133, i64 %127, ptr %134)
  br label %common.ret

ifend42:                                          ; preds = %ifend29
  %136 = call ptr @malloc(i32 21)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(21) %136, ptr noundef nonnull align 8 dereferenceable(21) @247, i64 21, i1 false)
  %137 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %137, align 8
  %memberidx.i.i130 = getelementptr inbounds %string, ptr %137, i64 0, i32 1
  store ptr %136, ptr %memberidx.i.i130, align 8
  %memberidx1.i.i131 = getelementptr inbounds %string, ptr %137, i64 0, i32 2
  store i64 21, ptr %memberidx1.i.i131, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %137, i64 0, i32 3
  store i64 21, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %138 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %139 = call ptr %138(ptr nonnull %137)
  %140 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @210, ptr %139)
  %141 = load ptr, ptr %4, align 8
  %142 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %142, align 8
  %memberidx.i.i133 = getelementptr inbounds %string, ptr %142, i64 0, i32 1
  store ptr %141, ptr %memberidx.i.i133, align 8
  %memberidx1.i.i134 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  store i64 %140, ptr %memberidx1.i.i134, align 4
  %memberidx2.i.i135 = getelementptr inbounds %string, ptr %142, i64 0, i32 3
  store i64 %140, ptr %memberidx2.i.i135, align 4
  call void @free(ptr %139)
  %143 = load ptr, ptr %142, align 8
  %memberidx.i.i.i136 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %143, i64 0, i32 3
  %144 = load ptr, ptr %memberidx.i.i.i136, align 8
  %145 = call ptr %144(ptr nonnull %142)
  %146 = load i64, ptr %memberidx1.i.i134, align 4
  call void @write(i64 1, ptr %145, i64 %146)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %common.ret
}

declare ptr @LLVMModuleCreateWithName(ptr) local_unnamed_addr

declare i1 @LLVMIsConstant(ptr) local_unnamed_addr

declare ptr @LLVMConstNeg(ptr) local_unnamed_addr

declare ptr @LLVMBuildNeg(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstInt(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMInt1Type() local_unnamed_addr

declare ptr @LLVMIntType(i64) local_unnamed_addr

declare ptr @LLVMVoidType() local_unnamed_addr

declare ptr @LLVMInt8Type() local_unnamed_addr

declare ptr @LLVMInt16Type() local_unnamed_addr

declare ptr @LLVMInt32Type() local_unnamed_addr

declare ptr @LLVMInt64Type() local_unnamed_addr

declare ptr @LLVMInt128Type() local_unnamed_addr

declare ptr @LLVMFloatType() local_unnamed_addr

declare ptr @LLVMDoubleType() local_unnamed_addr

declare ptr @LLVMPointerType(ptr, i64) local_unnamed_addr

declare ptr @LLVMArrayType(ptr, i64) local_unnamed_addr

declare ptr @LLVMFunctionType(ptr, ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMBuildRet(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildRetVoid(ptr) local_unnamed_addr

declare ptr @LLVMConstReal(ptr, double) local_unnamed_addr

declare ptr @LLVMAddFunction(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildCall2(ptr, ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVMBuildGlobalString(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildAlloca(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildLoad2(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSelect(ptr, ptr, ptr, ptr, ptr) local_unnamed_addr

declare i64 @LLVMGetTypeKind(ptr) local_unnamed_addr

declare ptr @LLVMTypeOf(ptr) local_unnamed_addr

declare i1 @LLVMIsGlobalConstant(ptr) local_unnamed_addr

define internal fastcc noalias ptr @get_format_from_type(ptr nocapture readonly %0) unnamed_addr {
  %2 = load i64, ptr %0, align 4
  %3 = add i64 %2, -1
  %4 = icmp ult i64 %3, 7
  br i1 %4, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  switch i64 %2, label %ifend7 [
    i64 7, label %if.entry1
    i64 5, label %if.entry5
  ]

ifend:                                            ; preds = %1
  switch i64 %2, label %ifend18 [
    i64 8, label %if.entry9
    i64 9, label %if.entry13
    i64 13, label %if.entry16
  ]

common.ret:                                       ; preds = %ifend18, %if.entry16, %if.entry13, %if.entry9, %ifend7, %if.entry5, %if.entry1
  %.sink46 = phi ptr [ %12, %ifend18 ], [ %11, %if.entry16 ], [ %10, %if.entry13 ], [ %9, %if.entry9 ], [ %8, %ifend7 ], [ %7, %if.entry5 ], [ %6, %if.entry1 ]
  %.sink44 = phi i64 [ 2, %ifend18 ], [ 4, %if.entry16 ], [ 3, %if.entry13 ], [ 2, %if.entry9 ], [ 2, %ifend7 ], [ 3, %if.entry5 ], [ 4, %if.entry1 ]
  %5 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %5, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  store ptr %.sink46, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  store i64 %.sink44, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 3
  store i64 %.sink44, ptr %memberidx2.i.i, align 4
  ret ptr %5

if.entry1:                                        ; preds = %if.entry
  %6 = call ptr @malloc(i32 4)
  store i32 1684827173, ptr %6, align 8
  br label %common.ret

if.entry5:                                        ; preds = %if.entry
  %7 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %7, ptr noundef nonnull align 8 dereferenceable(3) @221, i64 3, i1 false)
  br label %common.ret

ifend7:                                           ; preds = %if.entry
  %8 = call ptr @malloc(i32 2)
  store i16 25637, ptr %8, align 8
  br label %common.ret

if.entry9:                                        ; preds = %ifend
  %9 = call ptr @malloc(i32 2)
  store i16 26149, ptr %9, align 8
  br label %common.ret

if.entry13:                                       ; preds = %ifend
  %10 = call ptr @malloc(i32 3)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %10, ptr noundef nonnull align 8 dereferenceable(3) @222, i64 3, i1 false)
  br label %common.ret

if.entry16:                                       ; preds = %ifend
  %11 = call ptr @malloc(i32 4)
  store i32 1478850608, ptr %11, align 8
  br label %common.ret

ifend18:                                          ; preds = %ifend
  %12 = call ptr @malloc(i32 2)
  store i16 29477, ptr %12, align 8
  br label %common.ret
}

declare ptr @LLVMBuildInBoundsGEP2(ptr, ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVM_GetFunctionType(ptr) local_unnamed_addr

declare ptr @LLVMBuildMalloc(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFree(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildStore(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstArray(ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMConstMul(ptr, ptr) local_unnamed_addr

declare ptr @LLVMSizeOf(ptr) local_unnamed_addr

declare i1 @LLVMIsNull(ptr) local_unnamed_addr

declare ptr @LLVMBuildIsNull(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildIsNotNull(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNSWAdd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildNSWAdd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstSub(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSub(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildMul(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSDiv(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSRem(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstICmp(i64, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildICmp(ptr, i64, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstShl(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildShl(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstLShr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildLShr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstOr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildOr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstAnd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildAnd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstXor(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildXor(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFAdd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFSub(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFMul(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFDiv(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFRem(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstFCmp(i64, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFCmp(ptr, i64, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstSIToFP(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSIToFP(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstFPToSI(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFPToSI(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstIntCast(ptr, ptr, i1) local_unnamed_addr

declare ptr @LLVMBuildIntCast2(ptr, ptr, ptr, i1, ptr) local_unnamed_addr

declare ptr @LLVMConstSExt(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSExt(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstFPCast(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFPCast(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstBitCast(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildBitCast(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFNeg(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNot(ptr) local_unnamed_addr

declare ptr @LLVMBuildNot(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetInitializer(ptr) local_unnamed_addr

declare ptr @LLVMConstNull(ptr) local_unnamed_addr

declare ptr @LLVMAppendBasicBlock(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildCondBr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMPositionBuilderAtEnd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildBr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildPhi(ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMAddIncoming(ptr, ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMBuildArrayMalloc(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildArrayAlloca(ptr, ptr, ptr, ptr) local_unnamed_addr

declare i64 @LLVMGetAlignment(ptr) local_unnamed_addr

declare ptr @LLVMBuildMemSet(ptr, ptr, ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMBuildMemCpy(ptr, ptr, i64, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVMBuildMemMove(ptr, ptr, i64, ptr, i64, ptr) local_unnamed_addr

declare void @LLVMDeleteBasicBlock(ptr) local_unnamed_addr

declare ptr @LLVMAddGlobal(ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMSetInitializer(ptr, ptr) local_unnamed_addr

declare void @LLVMSetGlobalConstant(ptr, i1) local_unnamed_addr

declare void @LLVMSetLinkage(ptr, i64) local_unnamed_addr

declare ptr @LLVMCreateBuilder() local_unnamed_addr

declare ptr @LLVMGetParam(ptr, i64) local_unnamed_addr

declare void @LLVMDisposeBuilder(ptr) local_unnamed_addr

declare ptr @LLVMStructType(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMConstStruct(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMStructCreateNamed(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetModuleContext(ptr) local_unnamed_addr

declare void @LLVMStructSetBody(ptr, ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMConstString(ptr, i64, i1) local_unnamed_addr

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #14

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.smax.i64(i64, i64) #14

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #15

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #15

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.smin.i64(i64, i64) #16

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #17

attributes #0 = { nofree norecurse nosync nounwind readonly }
attributes #1 = { argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn }
attributes #2 = { mustprogress nofree norecurse nosync nounwind readonly willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("realloc") allocsize(1) "alloc-family"="malloc" }
attributes #5 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("free") "alloc-family"="malloc" }
attributes #6 = { argmemonly mustprogress nofree nounwind readonly willreturn }
attributes #7 = { mustprogress nofree norecurse nosync nounwind willreturn }
attributes #8 = { nofree }
attributes #9 = { nofree nounwind }
attributes #10 = { mustprogress nofree nounwind readonly willreturn }
attributes #11 = { mustprogress nounwind willreturn }
attributes #12 = { nofree nosync nounwind readonly }
attributes #13 = { argmemonly nofree nosync nounwind readonly }
attributes #14 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #15 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #16 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #17 = { argmemonly nocallback nofree nounwind willreturn writeonly }
