; ModuleID = 'src/main.flo'
source_filename = "src/main.flo"

%string = type <{ ptr, ptr, i64, i64 }>
%Array_string_ = type <{ ptr, ptr, i64, i64 }>
%Range = type <{ ptr, i64, i64 }>
%Compiler = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Lexer = type <{ ptr, i8, ptr, ptr, i64, i64, i64 }>
%Parser = type <{ ptr, ptr, ptr, ptr, i64 }>
%TypeChecker = type <{ ptr, ptr, i64, ptr, ptr, ptr, ptr, ptr, i1, i1, ptr }>
%CodeGen = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i1, ptr, ptr }>
%Array_FloError_ = type <{ ptr, ptr, i64, i64 }>
%FloFile = type <{ ptr, ptr }>
%FloRange = type <{ i64, i64, i64, i64 }>
%FloError = type <{ i64, ptr, ptr }>
%FileId = type <{ i64 }>
%Array_FloFile_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_FileId_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_FileId_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_FileId__ = type <{ ptr, ptr, i64, i64 }>
%File = type <{ ptr, i64 }>
%Token = type <{ i64, ptr }>
%Array_Token_ = type <{ ptr, ptr, i64, i64 }>
%Array_Array_Token__ = type <{ ptr, ptr, i64, i64 }>
%Array_int_ = type <{ ptr, ptr, i64, i64 }>
%StrToken = type <{ i64, ptr, ptr, ptr, ptr }>
%StringBuilder = type <{ ptr, ptr, i64, ptr, i64 }>
%IntToken = type <{ i64, ptr, i64 }>
%IdentifierToken = type <{ i64, ptr, ptr }>
%CharToken = type <{ i64, ptr, i8 }>
%FloatToken = type <{ i64, ptr, double }>
%StatementNode = type <{ ptr, i64 }>
%Array_StatementNode_ = type <{ ptr, ptr, i64, i64 }>
%BlockNode = type <{ ptr, ptr }>
%ExpressionNode = type <{ ptr, i64, i64 }>
%TypeNode = type <{ ptr, i64 }>
%ArgNode = type <{ ptr, ptr, ptr }>
%Array_ArgNode_ = type <{ ptr, ptr, i64, i64 }>
%MethodNode = type <{ ptr, ptr, ptr, i64, ptr, i1, i1 }>
%Array_MethodNode_ = type <{ ptr, ptr, i64, i64 }>
%FieldNode = type <{ ptr, i64, ptr, ptr }>
%Array_FieldNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_TypeNode_ = type <{ ptr, ptr, i64, i64 }>
%RecordTypeNode = type <{ ptr, i64, ptr, ptr }>
%Array_GenericParameterNode_ = type <{ ptr, ptr, i64, i64 }>
%ClassDeclarationNode = type <{ ptr, ptr, ptr, ptr, ptr }>
%PointerTypeNode = type <{ ptr, i64, ptr }>
%ArrayTypeNode = type <{ ptr, i64, ptr, ptr }>
%Array_IdentifierToken_ = type <{ ptr, ptr, i64, i64 }>
%Array_ImportNode_ = type <{ ptr, ptr, i64, i64 }>
%VarDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%Array_VarDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%EnumNodeField = type <{ ptr, ptr }>
%Array_EnumNodeField_ = type <{ ptr, ptr, i64, i64 }>
%EnumNode = type <{ ptr, ptr, ptr }>
%Array_EnumNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_TypeAliasNode_ = type <{ ptr, ptr, i64, i64 }>
%ConstDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%Array_ConstDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%Array_ClassDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%FunctionDeclarationNode = type <{ ptr, ptr, ptr, ptr, i1 }>
%Array_FunctionDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%ModuleAST = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_ExpressionNode_ = type <{ ptr, ptr, i64, i64 }>
%StringExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%IfStatementNode = type <{ ptr, i64, ptr, ptr, ptr }>
%WhileStatementNode = type <{ ptr, i64, ptr, ptr }>
%ForStatementNode = type <{ ptr, i64, ptr, ptr, ptr, ptr, i64, ptr, ptr }>
%NewExpressionNode = type <{ ptr, i64, i64, ptr, i1, ptr }>
%ReturnStatementNode = type <{ ptr, i64, ptr }>
%TypeAliasNode = type <{ ptr, ptr }>
%IntExpressionNode = type <{ ptr, i64, i64, ptr }>
%FloatExpressionNode = type <{ ptr, i64, i64, ptr }>
%CharExpressionNode = type <{ ptr, i64, i64, ptr }>
%VarAccessExpressionNode = type <{ ptr, i64, i64, ptr }>
%UnaryExpressionNode = type <{ ptr, i64, i64, i64, ptr }>
%FunctionTypeNode = type <{ ptr, i64, ptr, ptr }>
%GenericParameterNode = type <{ ptr }>
%ImportNode = type <{ ptr, ptr }>
%ArrayExpressionNode = type <{ ptr, i64, i64, ptr }>
%ExpressionIndexNode = type <{ ptr, i64, i64, ptr, ptr }>
%CallExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%MemberExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%BinaryExpressionNode = type <{ ptr, i64, i64, ptr, i64, ptr }>
%TypeCastExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%TernaryExpressionNode = type <{ ptr, i64, i64, ptr, ptr, ptr }>
%Module = type <{ i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%ScopeId = type <{ i64, i64 }>
%VarId = type <{ i64, i64, i64 }>
%Map_string_VarId_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_VarId_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_VarId__ = type <{ ptr, ptr, i64, i64 }>
%TypeId = type <{ i64, i64, i64 }>
%Map_string_EnumId_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_EnumId_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_EnumId__ = type <{ ptr, ptr, i64, i64 }>
%Type = type <{ i64 }>
%Map_string_Type_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_Type_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_Type__ = type <{ ptr, ptr, i64, i64 }>
%Map_string_ClassId_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_ClassId_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_ClassId__ = type <{ ptr, ptr, i64, i64 }>
%Scope = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_Scope_ = type <{ ptr, ptr, i64, i64 }>
%VarDeclaration = type <{ i64, ptr, ptr, i1 }>
%Array_VarDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%Expression = type <{ i64, i1, i64, ptr }>
%Var = type <{ ptr, ptr, ptr }>
%Array_Var_ = type <{ ptr, ptr, i64, i64 }>
%ConstDeclaration = type <{ i64, ptr, ptr, i1 }>
%Array_ConstDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%PropId = type <{ i64, ptr, i64 }>
%Map_string_PropId_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_PropId_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_PropId__ = type <{ ptr, ptr, i64, i64 }>
%EnumField = type <{ ptr, ptr, ptr }>
%Array_EnumField_ = type <{ ptr, ptr, i64, i64 }>
%Enum = type <{ ptr, ptr, ptr, ptr }>
%Array_Enum_ = type <{ ptr, ptr, i64, i64 }>
%Const = type <{ ptr, ptr, ptr }>
%Array_Const_ = type <{ ptr, ptr, i64, i64 }>
%Array_FunctionArg_ = type <{ ptr, ptr, i64, i64 }>
%Array_Statement_ = type <{ ptr, ptr, i64, i64 }>
%Block = type <{ ptr, i1, i1, i1 }>
%Array_Type_ = type <{ ptr, ptr, i64, i64 }>
%FunctionType = type <{ i64, ptr, ptr, i1 }>
%ClassMethod = type <{ ptr, i1, i64, ptr, ptr, ptr, ptr, i1, ptr, i64 }>
%Array_ClassMethod_ = type <{ ptr, ptr, i64, i64 }>
%ClassField = type <{ ptr, i1, i64, ptr, ptr, ptr, i64 }>
%Array_ClassField_ = type <{ ptr, ptr, i64, i64 }>
%Class = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, i1 }>
%Array_Class_ = type <{ ptr, ptr, i64, i64 }>
%Function = type <{ ptr, ptr, ptr, ptr, ptr, ptr, i1 }>
%Array_Function_ = type <{ ptr, ptr, i64, i64 }>
%Program = type <{ i1, ptr }>
%Array_Module_ = type <{ ptr, ptr, i64, i64 }>
%ConstId = type <{ i64, i64, i64 }>
%ClassVarId = type <{ i64, i64, i64 }>
%EnumVarId = type <{ i64, i64, i64 }>
%StringExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%Array_Expression_ = type <{ ptr, ptr, i64, i64 }>
%IntrinsicCall = type <{ i64, i1, i64, ptr, i64, ptr }>
%TypeCastExpression = type <{ i64, i1, i64, ptr, ptr }>
%FunctionArg = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%ReturnStatement = type <{ i64, ptr }>
%ObjectType = type <{ i64, ptr }>
%EnumType = type <{ i64, ptr }>
%MemberExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%CallExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%WhileStatement = type <{ i64, ptr, ptr }>
%BinaryExpression = type <{ i64, i1, i64, ptr, ptr, i64, ptr }>
%BooleanType = type <{ i64 }>
%NewExpression = type <{ i64, i1, i64, ptr, ptr, i1, ptr }>
%Statement = type <{ i64 }>
%PointerType = type <{ i64, ptr }>
%ArrayType = type <{ i64, ptr, i64 }>
%ForStatement = type <{ i64, ptr, ptr, ptr, ptr }>
%GenericType = type <{ i64, ptr, ptr, ptr }>
%UnaryExpression = type <{ i64, i1, i64, ptr, i64, ptr }>
%TernaryExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%IfStatement = type <{ i64, ptr, ptr, ptr }>
%Generic = type <{ i64, ptr }>
%EnumId = type <{ i64, i64, i64 }>
%ClassId = type <{ i64, i64, i64 }>
%IndexExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%Map_string_Generic_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_Generic_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_Generic__ = type <{ ptr, ptr, i64, i64 }>
%VarAccessExpression = type <{ i64, i1, i64, ptr, ptr }>
%ArrayExpression = type <{ i64, i1, i64, ptr, ptr }>
%IntExpression = type <{ i64, i1, i64, ptr, i64 }>
%FloatExpression = type <{ i64, i1, i64, ptr, double }>
%BooleanExpression = type <{ i64, i1, i64, ptr, i1 }>
%NullExpression = type <{ i64, i1, i64, ptr }>
%Array_LLVMValueRef_ = type <{ ptr, ptr, i64, i64 }>
%Array_LLVMTypeRef_ = type <{ ptr, ptr, i64, i64 }>
%IntrinsicResult = type <{ ptr, ptr }>
%Map_string_LLVMValueRef_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_LLVMValueRef_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_LLVMValueRef__ = type <{ ptr, ptr, i64, i64 }>
%CGEnumType = type <{ ptr, ptr }>
%Map_string_int_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_int_ = type <{ ptr, ptr, i64, i1 }>
%Array_Bucket_string_int__ = type <{ ptr, ptr, i64, i64 }>
%CGClassType = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Map_string_CGClassType_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_CGClassType_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_CGClassType__ = type <{ ptr, ptr, i64, i64 }>
%GeneratedModule = type <{ ptr, ptr, ptr }>
%Map_string_CGEnumType_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_CGEnumType_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Bucket_string_CGEnumType__ = type <{ ptr, ptr, i64, i64 }>

@VTablestring = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @string___add__, ptr @string___adda__, ptr @string___getitem__, ptr @string___ne__, ptr @string___eq__, ptr @string_find, ptr @string___in__, ptr @string_substring, ptr @string_get_byte, ptr @string_get_bytes, ptr @string_replace, ptr @string_to_cstring, ptr @string_ends_with, ptr @string_starts_with }>
@VTableArray_string_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_string__resize, ptr @Array_string__swap, ptr @Array_string____sl__, ptr @Array_string____setitem__, ptr @Array_string__append, ptr @Array_string____getitem__, ptr @Array_string____eq__, ptr @Array_string____in__, ptr @Array_string__find }>
@VTableRange = global <{ ptr }> <{ ptr @Range___in__ }>
@STDOUT = constant i64 1
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [28 x i8] c"Usage: %s <path> [OPTIONS]\0A\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"OPTIONS:\00", align 1
@3 = private unnamed_addr constant [38 x i8] c" -h, --help\09\09\09Show this help message.\00", align 1
@4 = private unnamed_addr constant [41 x i8] c" --print-tokens\09\09\09Print generated Tokens\00", align 1
@5 = private unnamed_addr constant [36 x i8] c" --print-ast\09\09\09Print generated AST.\00", align 1
@6 = private unnamed_addr constant [40 x i8] c" --emit-llvm\09\09\09Print generated LLVM-IR.\00", align 1
@7 = private unnamed_addr constant [43 x i8] c" -o <file>\09\09\09Place the output into <file>.\00", align 1
@8 = private unnamed_addr constant [46 x i8] c" -target\09\09\09Compile to specific target triple.\00", align 1
@9 = private unnamed_addr constant [33 x i8] c" -I\09\09\09Specify runtime directory.\00", align 1
@10 = private unnamed_addr constant [93 x i8] c" -O OPT_LEVEL\0A \09\09\09\09Specify the compiler's optimization level which is a\0A \09\09\09\09value from 0-3.\00", align 1
@11 = private unnamed_addr constant [31 x i8] c" -v, --version\09\09\09Show version.\00", align 1
@12 = private unnamed_addr constant [8 x i8] c"\1B[1;31m\00", align 1
@13 = private unnamed_addr constant [5 x i8] c"\1B[0m\00", align 1
@14 = private unnamed_addr constant [22 x i8] c"[Illegal Character]: \00", align 1
@15 = private unnamed_addr constant [17 x i8] c"[Syntax Error]: \00", align 1
@16 = private unnamed_addr constant [13 x i8] c"[IO Error]: \00", align 1
@17 = private unnamed_addr constant [15 x i8] c"[Type Error]: \00", align 1
@18 = private unnamed_addr constant [15 x i8] c"[Name Error]: \00", align 1
@19 = private unnamed_addr constant [10 x i8] c"[Error]: \00", align 1
@20 = private unnamed_addr constant [35 x i8] c"Missing value after '%s' argument.\00", align 1
@21 = private unnamed_addr constant [3 x i8] c"-v\00", align 1
@22 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@23 = private unnamed_addr constant [20 x i8] c"v0.01@test.selfhost\00", align 1
@24 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@25 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@VTableArray_FloError_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_FloError__resize, ptr @Array_FloError__swap, ptr @Array_FloError____sl__, ptr @Array_FloError____setitem__, ptr @Array_FloError__append, ptr @Array_FloError____getitem__, ptr @Array_FloError____eq__, ptr @Array_FloError____in__, ptr @Array_FloError__find }>
@VTableArray_FloFile_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_FloFile__resize, ptr @Array_FloFile__swap, ptr @Array_FloFile____sl__, ptr @Array_FloFile____setitem__, ptr @Array_FloFile__append, ptr @Array_FloFile____getitem__, ptr @Array_FloFile____eq__, ptr @Array_FloFile____in__, ptr @Array_FloFile__find }>
@VTableBucket_string_FileId_ = global <{ ptr }> <{ ptr @Bucket_string_FileId__set }>
@VTableArray_Bucket_string_FileId__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_FileId___resize, ptr @Array_Bucket_string_FileId___swap, ptr @Array_Bucket_string_FileId_____sl__, ptr @Array_Bucket_string_FileId_____setitem__, ptr @Array_Bucket_string_FileId___append, ptr @Array_Bucket_string_FileId_____getitem__, ptr @Array_Bucket_string_FileId_____eq__, ptr @Array_Bucket_string_FileId_____in__, ptr @Array_Bucket_string_FileId___find }>
@VTableMap_string_FileId_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_FileId__set, ptr @Map_string_FileId__get, ptr @Map_string_FileId__get_buckets }>
@26 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@VTableCompiler = global <{ ptr, ptr, ptr, ptr, ptr }> <{ ptr @Compiler_set_std_path, ptr @Compiler_register_file, ptr @Compiler_set_current_file, ptr @Compiler_print_errors, ptr @Compiler_add_builtins }>
@27 = private unnamed_addr constant [9 x i8] c"./flolib\00", align 1
@28 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@29 = private unnamed_addr constant [13 x i8] c"builtins.flo\00", align 1
@30 = private unnamed_addr constant [5 x i8] c"@flo\00", align 1
@31 = private unnamed_addr constant [9 x i8] c"packages\00", align 1
@32 = private unnamed_addr constant [5 x i8] c".flo\00", align 1
@VTableFile = global <{ ptr, ptr }> <{ ptr @File_read_all, ptr @File_close }>
@33 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@F_OK = constant i64 0
@34 = private unnamed_addr constant [19 x i8] c"File '%s', line %d\00", align 1
@35 = private unnamed_addr constant [2 x i8] c" \00", align 1
@36 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@37 = private unnamed_addr constant [3 x i8] c"-I\00", align 1
@38 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@39 = private unnamed_addr constant [32 x i8] c"No such file or directory: '%s'\00", align 1
@VTableArray_Token_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Token__resize, ptr @Array_Token__swap, ptr @Array_Token____sl__, ptr @Array_Token____setitem__, ptr @Array_Token__append, ptr @Array_Token____getitem__, ptr @Array_Token____eq__, ptr @Array_Token____in__, ptr @Array_Token__find }>
@VTableArray_Array_Token__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Array_Token___resize, ptr @Array_Array_Token___swap, ptr @Array_Array_Token_____sl__, ptr @Array_Array_Token_____setitem__, ptr @Array_Array_Token___append, ptr @Array_Array_Token_____getitem__, ptr @Array_Array_Token_____eq__, ptr @Array_Array_Token_____in__, ptr @Array_Array_Token___find }>
@VTableArray_int_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_int__resize, ptr @Array_int__swap, ptr @Array_int____sl__, ptr @Array_int____setitem__, ptr @Array_int__append, ptr @Array_int____getitem__, ptr @Array_int____eq__, ptr @Array_int____in__, ptr @Array_int__find }>
@VTableLexer = global <{ ptr, ptr }> <{ ptr @Lexer_lex_token, ptr @Lexer_tokenize }>
@40 = private unnamed_addr constant [4 x i8] c"and\00", align 1
@41 = private unnamed_addr constant [3 x i8] c"or\00", align 1
@42 = private unnamed_addr constant [4 x i8] c"xor\00", align 1
@43 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@44 = private unnamed_addr constant [4 x i8] c"let\00", align 1
@45 = private unnamed_addr constant [3 x i8] c"if\00", align 1
@46 = private unnamed_addr constant [5 x i8] c"else\00", align 1
@47 = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@48 = private unnamed_addr constant [3 x i8] c"i4\00", align 1
@49 = private unnamed_addr constant [3 x i8] c"i8\00", align 1
@50 = private unnamed_addr constant [4 x i8] c"i16\00", align 1
@51 = private unnamed_addr constant [4 x i8] c"i32\00", align 1
@52 = private unnamed_addr constant [4 x i8] c"i64\00", align 1
@53 = private unnamed_addr constant [5 x i8] c"i128\00", align 1
@54 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@55 = private unnamed_addr constant [4 x i8] c"f16\00", align 1
@56 = private unnamed_addr constant [4 x i8] c"f32\00", align 1
@57 = private unnamed_addr constant [4 x i8] c"f64\00", align 1
@58 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@59 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@60 = private unnamed_addr constant [4 x i8] c"for\00", align 1
@61 = private unnamed_addr constant [6 x i8] c"while\00", align 1
@62 = private unnamed_addr constant [4 x i8] c"fnc\00", align 1
@63 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@64 = private unnamed_addr constant [9 x i8] c"continue\00", align 1
@65 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@66 = private unnamed_addr constant [7 x i8] c"import\00", align 1
@67 = private unnamed_addr constant [8 x i8] c"private\00", align 1
@68 = private unnamed_addr constant [7 x i8] c"public\00", align 1
@69 = private unnamed_addr constant [10 x i8] c"protected\00", align 1
@70 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@71 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@72 = private unnamed_addr constant [5 x i8] c"enum\00", align 1
@73 = private unnamed_addr constant [4 x i8] c"new\00", align 1
@74 = private unnamed_addr constant [3 x i8] c"as\00", align 1
@VTableStringBuilder = global <{ ptr, ptr, ptr, ptr }> <{ ptr @StringBuilder_add_bytes_length, ptr @StringBuilder_append_string, ptr @StringBuilder_add_byte, ptr @StringBuilder_get_string }>
@75 = private unnamed_addr constant [4 x i8] c"033\00", align 1
@76 = private unnamed_addr constant [4 x i8] c"x1b\00", align 1
@77 = private unnamed_addr constant [2 x i8] c"\1B\00", align 1
@78 = private unnamed_addr constant [6 x i8] c"u001b\00", align 1
@79 = private unnamed_addr constant [24 x i8] c"Illegal character: '%s'\00", align 1
@80 = private unnamed_addr constant [15 x i8] c"--print-tokens\00", align 1
@81 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@82 = private unnamed_addr constant [3 x i8] c" {\00", align 1
@83 = private unnamed_addr constant [4 x i8] c"COL\00", align 1
@84 = private unnamed_addr constant [8 x i8] c"SEMICOL\00", align 1
@85 = private unnamed_addr constant [6 x i8] c"COMMA\00", align 1
@86 = private unnamed_addr constant [5 x i8] c"PLUS\00", align 1
@87 = private unnamed_addr constant [10 x i8] c"PLUS_PLUS\00", align 1
@88 = private unnamed_addr constant [6 x i8] c"MINUS\00", align 1
@89 = private unnamed_addr constant [12 x i8] c"MINUS_MINUS\00", align 1
@90 = private unnamed_addr constant [5 x i8] c"MULT\00", align 1
@91 = private unnamed_addr constant [4 x i8] c"DIV\00", align 1
@92 = private unnamed_addr constant [5 x i8] c"LPAR\00", align 1
@93 = private unnamed_addr constant [5 x i8] c"RPAR\00", align 1
@94 = private unnamed_addr constant [4 x i8] c"MOD\00", align 1
@95 = private unnamed_addr constant [7 x i8] c"LBRACE\00", align 1
@96 = private unnamed_addr constant [7 x i8] c"RBRACE\00", align 1
@97 = private unnamed_addr constant [9 x i8] c"LBRACKET\00", align 1
@98 = private unnamed_addr constant [9 x i8] c"RBRACKET\00", align 1
@99 = private unnamed_addr constant [4 x i8] c"INT\00", align 1
@100 = private unnamed_addr constant [6 x i8] c"FLOAT\00", align 1
@101 = private unnamed_addr constant [3 x i8] c"LN\00", align 1
@102 = private unnamed_addr constant [4 x i8] c"STR\00", align 1
@103 = private unnamed_addr constant [5 x i8] c"CHAR\00", align 1
@104 = private unnamed_addr constant [4 x i8] c"POW\00", align 1
@105 = private unnamed_addr constant [5 x i8] c"QUES\00", align 1
@106 = private unnamed_addr constant [4 x i8] c"AMP\00", align 1
@107 = private unnamed_addr constant [3 x i8] c"EQ\00", align 1
@108 = private unnamed_addr constant [4 x i8] c"EEQ\00", align 1
@109 = private unnamed_addr constant [4 x i8] c"NEQ\00", align 1
@110 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@111 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@112 = private unnamed_addr constant [4 x i8] c"LTE\00", align 1
@113 = private unnamed_addr constant [4 x i8] c"GTE\00", align 1
@114 = private unnamed_addr constant [6 x i8] c"ARROW\00", align 1
@115 = private unnamed_addr constant [4 x i8] c"EOF\00", align 1
@116 = private unnamed_addr constant [4 x i8] c"NOT\00", align 1
@117 = private unnamed_addr constant [3 x i8] c"SL\00", align 1
@118 = private unnamed_addr constant [3 x i8] c"SR\00", align 1
@119 = private unnamed_addr constant [4 x i8] c"DOT\00", align 1
@120 = private unnamed_addr constant [8 x i8] c"DOT_DOT\00", align 1
@121 = private unnamed_addr constant [12 x i8] c"DOT_DOT_DOT\00", align 1
@122 = private unnamed_addr constant [10 x i8] c"IDENTIFER\00", align 1
@123 = private unnamed_addr constant [7 x i8] c"AND_KW\00", align 1
@124 = private unnamed_addr constant [6 x i8] c"OR_KW\00", align 1
@125 = private unnamed_addr constant [7 x i8] c"XOR_KW\00", align 1
@126 = private unnamed_addr constant [9 x i8] c"CONST_KW\00", align 1
@127 = private unnamed_addr constant [6 x i8] c"IF_KW\00", align 1
@128 = private unnamed_addr constant [8 x i8] c"ELSE_KW\00", align 1
@129 = private unnamed_addr constant [8 x i8] c"BOOL_KW\00", align 1
@130 = private unnamed_addr constant [6 x i8] c"I4_KW\00", align 1
@131 = private unnamed_addr constant [6 x i8] c"I8_KW\00", align 1
@132 = private unnamed_addr constant [7 x i8] c"I16_KW\00", align 1
@133 = private unnamed_addr constant [7 x i8] c"I32_KW\00", align 1
@134 = private unnamed_addr constant [7 x i8] c"I64_KW\00", align 1
@135 = private unnamed_addr constant [8 x i8] c"I128_KW\00", align 1
@136 = private unnamed_addr constant [7 x i8] c"INT_KW\00", align 1
@137 = private unnamed_addr constant [7 x i8] c"F16_KW\00", align 1
@138 = private unnamed_addr constant [7 x i8] c"F32_KW\00", align 1
@139 = private unnamed_addr constant [7 x i8] c"F64_KW\00", align 1
@140 = private unnamed_addr constant [9 x i8] c"FLOAT_KW\00", align 1
@141 = private unnamed_addr constant [8 x i8] c"VOID_KW\00", align 1
@142 = private unnamed_addr constant [7 x i8] c"FOR_KW\00", align 1
@143 = private unnamed_addr constant [9 x i8] c"WHILE_KW\00", align 1
@144 = private unnamed_addr constant [7 x i8] c"FNC_KW\00", align 1
@145 = private unnamed_addr constant [9 x i8] c"BREAK_KW\00", align 1
@146 = private unnamed_addr constant [12 x i8] c"CONTINUE_KW\00", align 1
@147 = private unnamed_addr constant [10 x i8] c"RETURN_KW\00", align 1
@148 = private unnamed_addr constant [10 x i8] c"IMPORT_KW\00", align 1
@149 = private unnamed_addr constant [11 x i8] c"PRIVATE_KW\00", align 1
@150 = private unnamed_addr constant [10 x i8] c"PUBLIC_KW\00", align 1
@151 = private unnamed_addr constant [13 x i8] c"PROTECTED_KW\00", align 1
@152 = private unnamed_addr constant [6 x i8] c"IN_KW\00", align 1
@153 = private unnamed_addr constant [9 x i8] c"CLASS_KW\00", align 1
@154 = private unnamed_addr constant [8 x i8] c"ENUM_KW\00", align 1
@155 = private unnamed_addr constant [7 x i8] c"NEW_KW\00", align 1
@156 = private unnamed_addr constant [6 x i8] c"AS_KW\00", align 1
@157 = private unnamed_addr constant [7 x i8] c"LET_KW\00", align 1
@158 = private unnamed_addr constant [12 x i8] c"  type: %s,\00", align 1
@159 = private unnamed_addr constant [15 x i8] c"  range: %d-%d\00", align 1
@160 = private unnamed_addr constant [12 x i8] c"  value: %s\00", align 1
@161 = private unnamed_addr constant [12 x i8] c"  value: \\n\00", align 1
@162 = private unnamed_addr constant [4 x i8] c" },\00", align 1
@163 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@VTableArray_StatementNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_StatementNode__resize, ptr @Array_StatementNode__swap, ptr @Array_StatementNode____sl__, ptr @Array_StatementNode____setitem__, ptr @Array_StatementNode__append, ptr @Array_StatementNode____getitem__, ptr @Array_StatementNode____eq__, ptr @Array_StatementNode____in__, ptr @Array_StatementNode__find }>
@VTableArray_ArgNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_ArgNode__resize, ptr @Array_ArgNode__swap, ptr @Array_ArgNode____sl__, ptr @Array_ArgNode____setitem__, ptr @Array_ArgNode__append, ptr @Array_ArgNode____getitem__, ptr @Array_ArgNode____eq__, ptr @Array_ArgNode____in__, ptr @Array_ArgNode__find }>
@VTableArray_MethodNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_MethodNode__resize, ptr @Array_MethodNode__swap, ptr @Array_MethodNode____sl__, ptr @Array_MethodNode____setitem__, ptr @Array_MethodNode__append, ptr @Array_MethodNode____getitem__, ptr @Array_MethodNode____eq__, ptr @Array_MethodNode____in__, ptr @Array_MethodNode__find }>
@VTableArray_FieldNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_FieldNode__resize, ptr @Array_FieldNode__swap, ptr @Array_FieldNode____sl__, ptr @Array_FieldNode____setitem__, ptr @Array_FieldNode__append, ptr @Array_FieldNode____getitem__, ptr @Array_FieldNode____eq__, ptr @Array_FieldNode____in__, ptr @Array_FieldNode__find }>
@VTableArray_TypeNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_TypeNode__resize, ptr @Array_TypeNode__swap, ptr @Array_TypeNode____sl__, ptr @Array_TypeNode____setitem__, ptr @Array_TypeNode__append, ptr @Array_TypeNode____getitem__, ptr @Array_TypeNode____eq__, ptr @Array_TypeNode____in__, ptr @Array_TypeNode__find }>
@VTableArray_GenericParameterNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_GenericParameterNode__resize, ptr @Array_GenericParameterNode__swap, ptr @Array_GenericParameterNode____sl__, ptr @Array_GenericParameterNode____setitem__, ptr @Array_GenericParameterNode__append, ptr @Array_GenericParameterNode____getitem__, ptr @Array_GenericParameterNode____eq__, ptr @Array_GenericParameterNode____in__, ptr @Array_GenericParameterNode__find }>
@VTableArray_IdentifierToken_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_IdentifierToken__resize, ptr @Array_IdentifierToken__swap, ptr @Array_IdentifierToken____sl__, ptr @Array_IdentifierToken____setitem__, ptr @Array_IdentifierToken__append, ptr @Array_IdentifierToken____getitem__, ptr @Array_IdentifierToken____eq__, ptr @Array_IdentifierToken____in__, ptr @Array_IdentifierToken__find }>
@VTableArray_ImportNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_ImportNode__resize, ptr @Array_ImportNode__swap, ptr @Array_ImportNode____sl__, ptr @Array_ImportNode____setitem__, ptr @Array_ImportNode__append, ptr @Array_ImportNode____getitem__, ptr @Array_ImportNode____eq__, ptr @Array_ImportNode____in__, ptr @Array_ImportNode__find }>
@VTableArray_VarDeclarationStatement_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_VarDeclarationStatement__resize, ptr @Array_VarDeclarationStatement__swap, ptr @Array_VarDeclarationStatement____sl__, ptr @Array_VarDeclarationStatement____setitem__, ptr @Array_VarDeclarationStatement__append, ptr @Array_VarDeclarationStatement____getitem__, ptr @Array_VarDeclarationStatement____eq__, ptr @Array_VarDeclarationStatement____in__, ptr @Array_VarDeclarationStatement__find }>
@VTableArray_EnumNodeField_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_EnumNodeField__resize, ptr @Array_EnumNodeField__swap, ptr @Array_EnumNodeField____sl__, ptr @Array_EnumNodeField____setitem__, ptr @Array_EnumNodeField__append, ptr @Array_EnumNodeField____getitem__, ptr @Array_EnumNodeField____eq__, ptr @Array_EnumNodeField____in__, ptr @Array_EnumNodeField__find }>
@VTableArray_EnumNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_EnumNode__resize, ptr @Array_EnumNode__swap, ptr @Array_EnumNode____sl__, ptr @Array_EnumNode____setitem__, ptr @Array_EnumNode__append, ptr @Array_EnumNode____getitem__, ptr @Array_EnumNode____eq__, ptr @Array_EnumNode____in__, ptr @Array_EnumNode__find }>
@VTableArray_TypeAliasNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_TypeAliasNode__resize, ptr @Array_TypeAliasNode__swap, ptr @Array_TypeAliasNode____sl__, ptr @Array_TypeAliasNode____setitem__, ptr @Array_TypeAliasNode__append, ptr @Array_TypeAliasNode____getitem__, ptr @Array_TypeAliasNode____eq__, ptr @Array_TypeAliasNode____in__, ptr @Array_TypeAliasNode__find }>
@VTableArray_ConstDeclarationStatement_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_ConstDeclarationStatement__resize, ptr @Array_ConstDeclarationStatement__swap, ptr @Array_ConstDeclarationStatement____sl__, ptr @Array_ConstDeclarationStatement____setitem__, ptr @Array_ConstDeclarationStatement__append, ptr @Array_ConstDeclarationStatement____getitem__, ptr @Array_ConstDeclarationStatement____eq__, ptr @Array_ConstDeclarationStatement____in__, ptr @Array_ConstDeclarationStatement__find }>
@VTableArray_ClassDeclarationNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_ClassDeclarationNode__resize, ptr @Array_ClassDeclarationNode__swap, ptr @Array_ClassDeclarationNode____sl__, ptr @Array_ClassDeclarationNode____setitem__, ptr @Array_ClassDeclarationNode__append, ptr @Array_ClassDeclarationNode____getitem__, ptr @Array_ClassDeclarationNode____eq__, ptr @Array_ClassDeclarationNode____in__, ptr @Array_ClassDeclarationNode__find }>
@VTableArray_FunctionDeclarationNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_FunctionDeclarationNode__resize, ptr @Array_FunctionDeclarationNode__swap, ptr @Array_FunctionDeclarationNode____sl__, ptr @Array_FunctionDeclarationNode____setitem__, ptr @Array_FunctionDeclarationNode__append, ptr @Array_FunctionDeclarationNode____getitem__, ptr @Array_FunctionDeclarationNode____eq__, ptr @Array_FunctionDeclarationNode____in__, ptr @Array_FunctionDeclarationNode__find }>
@VTableArray_ExpressionNode_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_ExpressionNode__resize, ptr @Array_ExpressionNode__swap, ptr @Array_ExpressionNode____sl__, ptr @Array_ExpressionNode____setitem__, ptr @Array_ExpressionNode__append, ptr @Array_ExpressionNode____getitem__, ptr @Array_ExpressionNode____eq__, ptr @Array_ExpressionNode____in__, ptr @Array_ExpressionNode__find }>
@VTableParser = global <{ ptr }> <{ ptr @Parser_parse }>
@164 = private unnamed_addr constant [23 x i8] c"Expected an Identifier\00", align 1
@165 = private unnamed_addr constant [13 x i8] c"Expected '='\00", align 1
@166 = private unnamed_addr constant [13 x i8] c"Expected ':'\00", align 1
@167 = private unnamed_addr constant [13 x i8] c"Expected '('\00", align 1
@168 = private unnamed_addr constant [13 x i8] c"Expected ')'\00", align 1
@169 = private unnamed_addr constant [13 x i8] c"Expected '{'\00", align 1
@170 = private unnamed_addr constant [13 x i8] c"Expected '}'\00", align 1
@171 = private unnamed_addr constant [13 x i8] c"Expected ','\00", align 1
@172 = private unnamed_addr constant [13 x i8] c"Expected '<'\00", align 1
@173 = private unnamed_addr constant [13 x i8] c"Expected '>'\00", align 1
@174 = private unnamed_addr constant [14 x i8] c"Expected '=>'\00", align 1
@175 = private unnamed_addr constant [27 x i8] c"Expected a type definition\00", align 1
@176 = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@177 = private unnamed_addr constant [29 x i8] c"Expected an Expression value\00", align 1
@178 = private unnamed_addr constant [29 x i8] c"'%s' has no type information\00", align 1
@179 = private unnamed_addr constant [5 x i8] c"this\00", align 1
@180 = private unnamed_addr constant [20 x i8] c"Expected ':' or '('\00", align 1
@181 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@182 = private unnamed_addr constant [80 x i8] c"Illegal expression expected: 'fnc', 'class', 'enum', 'import', 'const' or 'let'\00", align 1
@VTableBucket_string_VarId_ = global <{ ptr }> <{ ptr @Bucket_string_VarId__set }>
@VTableArray_Bucket_string_VarId__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_VarId___resize, ptr @Array_Bucket_string_VarId___swap, ptr @Array_Bucket_string_VarId_____sl__, ptr @Array_Bucket_string_VarId_____setitem__, ptr @Array_Bucket_string_VarId___append, ptr @Array_Bucket_string_VarId_____getitem__, ptr @Array_Bucket_string_VarId_____eq__, ptr @Array_Bucket_string_VarId_____in__, ptr @Array_Bucket_string_VarId___find }>
@VTableMap_string_VarId_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_VarId__set, ptr @Map_string_VarId__get, ptr @Map_string_VarId__get_buckets }>
@VTableBucket_string_EnumId_ = global <{ ptr }> <{ ptr @Bucket_string_EnumId__set }>
@VTableArray_Bucket_string_EnumId__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_EnumId___resize, ptr @Array_Bucket_string_EnumId___swap, ptr @Array_Bucket_string_EnumId_____sl__, ptr @Array_Bucket_string_EnumId_____setitem__, ptr @Array_Bucket_string_EnumId___append, ptr @Array_Bucket_string_EnumId_____getitem__, ptr @Array_Bucket_string_EnumId_____eq__, ptr @Array_Bucket_string_EnumId_____in__, ptr @Array_Bucket_string_EnumId___find }>
@VTableMap_string_EnumId_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_EnumId__set, ptr @Map_string_EnumId__get, ptr @Map_string_EnumId__get_buckets }>
@VTableBucket_string_Type_ = global <{ ptr }> <{ ptr @Bucket_string_Type__set }>
@VTableArray_Bucket_string_Type__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_Type___resize, ptr @Array_Bucket_string_Type___swap, ptr @Array_Bucket_string_Type_____sl__, ptr @Array_Bucket_string_Type_____setitem__, ptr @Array_Bucket_string_Type___append, ptr @Array_Bucket_string_Type_____getitem__, ptr @Array_Bucket_string_Type_____eq__, ptr @Array_Bucket_string_Type_____in__, ptr @Array_Bucket_string_Type___find }>
@VTableMap_string_Type_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_Type__set, ptr @Map_string_Type__get, ptr @Map_string_Type__get_buckets }>
@VTableBucket_string_ClassId_ = global <{ ptr }> <{ ptr @Bucket_string_ClassId__set }>
@VTableArray_Bucket_string_ClassId__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_ClassId___resize, ptr @Array_Bucket_string_ClassId___swap, ptr @Array_Bucket_string_ClassId_____sl__, ptr @Array_Bucket_string_ClassId_____setitem__, ptr @Array_Bucket_string_ClassId___append, ptr @Array_Bucket_string_ClassId_____getitem__, ptr @Array_Bucket_string_ClassId_____eq__, ptr @Array_Bucket_string_ClassId_____in__, ptr @Array_Bucket_string_ClassId___find }>
@VTableMap_string_ClassId_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_ClassId__set, ptr @Map_string_ClassId__get, ptr @Map_string_ClassId__get_buckets }>
@VTableArray_Scope_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Scope__resize, ptr @Array_Scope__swap, ptr @Array_Scope____sl__, ptr @Array_Scope____setitem__, ptr @Array_Scope__append, ptr @Array_Scope____getitem__, ptr @Array_Scope____eq__, ptr @Array_Scope____in__, ptr @Array_Scope__find }>
@VTableArray_VarDeclaration_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_VarDeclaration__resize, ptr @Array_VarDeclaration__swap, ptr @Array_VarDeclaration____sl__, ptr @Array_VarDeclaration____setitem__, ptr @Array_VarDeclaration__append, ptr @Array_VarDeclaration____getitem__, ptr @Array_VarDeclaration____eq__, ptr @Array_VarDeclaration____in__, ptr @Array_VarDeclaration__find }>
@VTableArray_Var_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Var__resize, ptr @Array_Var__swap, ptr @Array_Var____sl__, ptr @Array_Var____setitem__, ptr @Array_Var__append, ptr @Array_Var____getitem__, ptr @Array_Var____eq__, ptr @Array_Var____in__, ptr @Array_Var__find }>
@VTableArray_ConstDeclaration_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_ConstDeclaration__resize, ptr @Array_ConstDeclaration__swap, ptr @Array_ConstDeclaration____sl__, ptr @Array_ConstDeclaration____setitem__, ptr @Array_ConstDeclaration__append, ptr @Array_ConstDeclaration____getitem__, ptr @Array_ConstDeclaration____eq__, ptr @Array_ConstDeclaration____in__, ptr @Array_ConstDeclaration__find }>
@VTableBucket_string_PropId_ = global <{ ptr }> <{ ptr @Bucket_string_PropId__set }>
@VTableArray_Bucket_string_PropId__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_PropId___resize, ptr @Array_Bucket_string_PropId___swap, ptr @Array_Bucket_string_PropId_____sl__, ptr @Array_Bucket_string_PropId_____setitem__, ptr @Array_Bucket_string_PropId___append, ptr @Array_Bucket_string_PropId_____getitem__, ptr @Array_Bucket_string_PropId_____eq__, ptr @Array_Bucket_string_PropId_____in__, ptr @Array_Bucket_string_PropId___find }>
@VTableMap_string_PropId_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_PropId__set, ptr @Map_string_PropId__get, ptr @Map_string_PropId__get_buckets }>
@VTableArray_EnumField_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_EnumField__resize, ptr @Array_EnumField__swap, ptr @Array_EnumField____sl__, ptr @Array_EnumField____setitem__, ptr @Array_EnumField__append, ptr @Array_EnumField____getitem__, ptr @Array_EnumField____eq__, ptr @Array_EnumField____in__, ptr @Array_EnumField__find }>
@VTableArray_Enum_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Enum__resize, ptr @Array_Enum__swap, ptr @Array_Enum____sl__, ptr @Array_Enum____setitem__, ptr @Array_Enum__append, ptr @Array_Enum____getitem__, ptr @Array_Enum____eq__, ptr @Array_Enum____in__, ptr @Array_Enum__find }>
@VTableArray_Const_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Const__resize, ptr @Array_Const__swap, ptr @Array_Const____sl__, ptr @Array_Const____setitem__, ptr @Array_Const__append, ptr @Array_Const____getitem__, ptr @Array_Const____eq__, ptr @Array_Const____in__, ptr @Array_Const__find }>
@VTableArray_FunctionArg_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_FunctionArg__resize, ptr @Array_FunctionArg__swap, ptr @Array_FunctionArg____sl__, ptr @Array_FunctionArg____setitem__, ptr @Array_FunctionArg__append, ptr @Array_FunctionArg____getitem__, ptr @Array_FunctionArg____eq__, ptr @Array_FunctionArg____in__, ptr @Array_FunctionArg__find }>
@VTableArray_Statement_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Statement__resize, ptr @Array_Statement__swap, ptr @Array_Statement____sl__, ptr @Array_Statement____setitem__, ptr @Array_Statement__append, ptr @Array_Statement____getitem__, ptr @Array_Statement____eq__, ptr @Array_Statement____in__, ptr @Array_Statement__find }>
@VTableArray_Type_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Type__resize, ptr @Array_Type__swap, ptr @Array_Type____sl__, ptr @Array_Type____setitem__, ptr @Array_Type__append, ptr @Array_Type____getitem__, ptr @Array_Type____eq__, ptr @Array_Type____in__, ptr @Array_Type__find }>
@VTableArray_ClassMethod_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_ClassMethod__resize, ptr @Array_ClassMethod__swap, ptr @Array_ClassMethod____sl__, ptr @Array_ClassMethod____setitem__, ptr @Array_ClassMethod__append, ptr @Array_ClassMethod____getitem__, ptr @Array_ClassMethod____eq__, ptr @Array_ClassMethod____in__, ptr @Array_ClassMethod__find }>
@VTableArray_ClassField_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_ClassField__resize, ptr @Array_ClassField__swap, ptr @Array_ClassField____sl__, ptr @Array_ClassField____setitem__, ptr @Array_ClassField__append, ptr @Array_ClassField____getitem__, ptr @Array_ClassField____eq__, ptr @Array_ClassField____in__, ptr @Array_ClassField__find }>
@VTableArray_Class_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Class__resize, ptr @Array_Class__swap, ptr @Array_Class____sl__, ptr @Array_Class____setitem__, ptr @Array_Class__append, ptr @Array_Class____getitem__, ptr @Array_Class____eq__, ptr @Array_Class____in__, ptr @Array_Class__find }>
@VTableArray_Function_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Function__resize, ptr @Array_Function__swap, ptr @Array_Function____sl__, ptr @Array_Function____setitem__, ptr @Array_Function__append, ptr @Array_Function____getitem__, ptr @Array_Function____eq__, ptr @Array_Function____in__, ptr @Array_Function__find }>
@VTableArray_Expression_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Expression__resize, ptr @Array_Expression__swap, ptr @Array_Expression____sl__, ptr @Array_Expression____setitem__, ptr @Array_Expression__append, ptr @Array_Expression____getitem__, ptr @Array_Expression____eq__, ptr @Array_Expression____in__, ptr @Array_Expression__find }>
@VTableArray_Module_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Module__resize, ptr @Array_Module__swap, ptr @Array_Module____sl__, ptr @Array_Module____setitem__, ptr @Array_Module__append, ptr @Array_Module____getitem__, ptr @Array_Module____eq__, ptr @Array_Module____in__, ptr @Array_Module__find }>
@VTableBucket_string_Generic_ = global <{ ptr }> <{ ptr @Bucket_string_Generic__set }>
@VTableArray_Bucket_string_Generic__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_Generic___resize, ptr @Array_Bucket_string_Generic___swap, ptr @Array_Bucket_string_Generic_____sl__, ptr @Array_Bucket_string_Generic_____setitem__, ptr @Array_Bucket_string_Generic___append, ptr @Array_Bucket_string_Generic_____getitem__, ptr @Array_Bucket_string_Generic_____eq__, ptr @Array_Bucket_string_Generic_____in__, ptr @Array_Bucket_string_Generic___find }>
@VTableMap_string_Generic_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_Generic__set, ptr @Map_string_Generic__get, ptr @Map_string_Generic__get_buckets }>
@VTableTypeChecker = global <{ ptr }> <{ ptr @TypeChecker_check }>
@183 = private unnamed_addr constant [3 x i8] c", \00", align 1
@184 = private unnamed_addr constant [11 x i8] c"(%s) => %s\00", align 1
@185 = private unnamed_addr constant [4 x i8] c"%s*\00", align 1
@186 = private unnamed_addr constant [7 x i8] c"%s[%d]\00", align 1
@187 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@188 = private unnamed_addr constant [2 x i8] c">\00", align 1
@WORD_SIZE = constant i64 64
@189 = private unnamed_addr constant [4 x i8] c"i%d\00", align 1
@190 = private unnamed_addr constant [4 x i8] c"f%d\00", align 1
@191 = private unnamed_addr constant [7 x i8] c"record\00", align 1
@192 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@193 = private unnamed_addr constant [13 x i8] c"__generics__\00", align 1
@194 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@195 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@196 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@197 = private unnamed_addr constant [68 x i8] c"Name '%s' has already been used for another type. consider renaming\00", align 1
@198 = private unnamed_addr constant [41 x i8] c"Generic expects %d parameters but got %d\00", align 1
@199 = private unnamed_addr constant [4 x i8] c"%s_\00", align 1
@200 = private unnamed_addr constant [6 x i8] c"%s_%s\00", align 1
@201 = private unnamed_addr constant [55 x i8] c"Initilializer for global variable has to be a constant\00", align 1
@202 = private unnamed_addr constant [56 x i8] c"Expected type of '%s' but got type of '%s' on signature\00", align 1
@203 = private unnamed_addr constant [52 x i8] c"Import statement path can't be a a formatted string\00", align 1
@204 = private unnamed_addr constant [28 x i8] c"%s not found in module \22\22%s\00", align 1
@205 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@206 = private unnamed_addr constant [37 x i8] c"Illegal re-declaration of const '%s'\00", align 1
@207 = private unnamed_addr constant [48 x i8] c"Illegal re-declaration of type '%s' as function\00", align 1
@208 = private unnamed_addr constant [53 x i8] c"Expected an int type for enum type but got type '%s'\00", align 1
@209 = private unnamed_addr constant [38 x i8] c"Enum initializer has to be a constant\00", align 1
@210 = private unnamed_addr constant [36 x i8] c"Expected type '%s' but got type '%s\00", align 1
@211 = private unnamed_addr constant [7 x i8] c"__eq__\00", align 1
@212 = private unnamed_addr constant [8 x i8] c"__add__\00", align 1
@213 = private unnamed_addr constant [8 x i8] c"__sub__\00", align 1
@214 = private unnamed_addr constant [8 x i8] c"__mul__\00", align 1
@215 = private unnamed_addr constant [8 x i8] c"__div__\00", align 1
@216 = private unnamed_addr constant [7 x i8] c"__or__\00", align 1
@217 = private unnamed_addr constant [9 x i8] c"__adda__\00", align 1
@218 = private unnamed_addr constant [9 x i8] c"__suba__\00", align 1
@219 = private unnamed_addr constant [9 x i8] c"__mula__\00", align 1
@220 = private unnamed_addr constant [9 x i8] c"__diva__\00", align 1
@221 = private unnamed_addr constant [8 x i8] c"__ora__\00", align 1
@222 = private unnamed_addr constant [9 x i8] c"__anda__\00", align 1
@223 = private unnamed_addr constant [9 x i8] c"__xora__\00", align 1
@224 = private unnamed_addr constant [12 x i8] c"__getitem__\00", align 1
@225 = private unnamed_addr constant [12 x i8] c"__setitem__\00", align 1
@226 = private unnamed_addr constant [7 x i8] c"__sl__\00", align 1
@227 = private unnamed_addr constant [7 x i8] c"__sr__\00", align 1
@228 = private unnamed_addr constant [8 x i8] c"__sla__\00", align 1
@229 = private unnamed_addr constant [8 x i8] c"__sra__\00", align 1
@230 = private unnamed_addr constant [7 x i8] c"__in__\00", align 1
@231 = private unnamed_addr constant [7 x i8] c"__lt__\00", align 1
@232 = private unnamed_addr constant [7 x i8] c"__lg__\00", align 1
@233 = private unnamed_addr constant [7 x i8] c"__ne__\00", align 1
@234 = private unnamed_addr constant [7 x i8] c"__le__\00", align 1
@235 = private unnamed_addr constant [7 x i8] c"__ge__\00", align 1
@236 = private unnamed_addr constant [8 x i8] c"__pow__\00", align 1
@237 = private unnamed_addr constant [8 x i8] c"__mod__\00", align 1
@238 = private unnamed_addr constant [9 x i8] c"__powa__\00", align 1
@239 = private unnamed_addr constant [9 x i8] c"__moda__\00", align 1
@240 = private unnamed_addr constant [76 x i8] c" is reserved only for operator overloads and cannot be used as a field name\00", align 1
@241 = private unnamed_addr constant [36 x i8] c"Field %s in class %s already exists\00", align 1
@242 = private unnamed_addr constant [89 x i8] c"Signature of inherited field %s in class %s does not match expected parent signature '%s\00", align 1
@243 = private unnamed_addr constant [49 x i8] c"Expected inherited field %s in class %s to be %s\00", align 1
@244 = private unnamed_addr constant [68 x i8] c"Expected type '%s' but got type '%s' on static field initialization\00", align 1
@245 = private unnamed_addr constant [46 x i8] c"Static field initializer has to be a constant\00", align 1
@246 = private unnamed_addr constant [65 x i8] c"Expected %d arguments for binary operator overload %s but got %d\00", align 1
@247 = private unnamed_addr constant [45 x i8] c"Binary operator overload %s cannot be static\00", align 1
@248 = private unnamed_addr constant [37 x i8] c"Method %s in class %s already exists\00", align 1
@249 = private unnamed_addr constant [91 x i8] c"Signature of inherited method %s in class %s does not match expected parent signature '%s'\00", align 1
@250 = private unnamed_addr constant [50 x i8] c"Expected inherited method %s in class %s to be %s\00", align 1
@251 = private unnamed_addr constant [32 x i8] c"Static method can't be abstract\00", align 1
@252 = private unnamed_addr constant [12 x i8] c"constructor\00", align 1
@253 = private unnamed_addr constant [34 x i8] c"Class constructor can't be static\00", align 1
@254 = private unnamed_addr constant [36 x i8] c"Class constructor can't be abstract\00", align 1
@255 = private unnamed_addr constant [59 x i8] c"Can't have a abstract private method use protected instead\00", align 1
@256 = private unnamed_addr constant [6 x i8] c"super\00", align 1
@257 = private unnamed_addr constant [42 x i8] c"Can only inherit from class not type '%s'\00", align 1
@258 = private unnamed_addr constant [81 x i8] c"Class with constructor must implement all it's methods missing %s implementation\00", align 1
@259 = private unnamed_addr constant [39 x i8] c"Method missing ending return statement\00", align 1
@260 = private unnamed_addr constant [41 x i8] c"Function missing ending return statement\00", align 1
@261 = private unnamed_addr constant [17 x i8] c"length is an int\00", align 1
@262 = private unnamed_addr constant [31 x i8] c"length is a non-constant value\00", align 1
@263 = private unnamed_addr constant [32 x i8] c"length should be greater than 0\00", align 1
@264 = private unnamed_addr constant [20 x i8] c"Undefined type '%s'\00", align 1
@265 = private unnamed_addr constant [48 x i8] c"Expected element type of '%s' but got type '%s'\00", align 1
@266 = private unnamed_addr constant [38 x i8] c"Cannot create array without type hint\00", align 1
@267 = private unnamed_addr constant [24 x i8] c"Undefined variable '%s'\00", align 1
@268 = private unnamed_addr constant [34 x i8] c"Cannot assign a value to a record\00", align 1
@269 = private unnamed_addr constant [36 x i8] c"Cannot assign a value to a constant\00", align 1
@270 = private unnamed_addr constant [52 x i8] c"Illegal assignment of variable of type '%s' to '%s'\00", align 1
@271 = private unnamed_addr constant [7 x i8] c"__gt__\00", align 1
@272 = private unnamed_addr constant [8 x i8] c"__and__\00", align 1
@273 = private unnamed_addr constant [8 x i8] c"__xor__\00", align 1
@274 = private unnamed_addr constant [37 x i8] c"Expected type '%s' but got type '%s'\00", align 1
@275 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@276 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@277 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@278 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@279 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@280 = private unnamed_addr constant [3 x i8] c">=\00", align 1
@281 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@282 = private unnamed_addr constant [3 x i8] c"==\00", align 1
@283 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@284 = private unnamed_addr constant [3 x i8] c"<<\00", align 1
@285 = private unnamed_addr constant [3 x i8] c">>\00", align 1
@286 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@287 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@288 = private unnamed_addr constant [55 x i8] c"Unsupported binary operator overload for operator '%s'\00", align 1
@289 = private unnamed_addr constant [108 x i8] c"No binary operator overload for '%s' in object of class '%s' please implement the method %s to support this\00", align 1
@290 = private unnamed_addr constant [114 x i8] c"No operator overload for index set operator on %s object please implement method __setitem__ to use in this class\00", align 1
@291 = private unnamed_addr constant [6 x i8] c"Range\00", align 1
@292 = private unnamed_addr constant [58 x i8] c"Illegal binary operation '%s' between types '%s' and '%s'\00", align 1
@293 = private unnamed_addr constant [8 x i8] c"++(pre)\00", align 1
@294 = private unnamed_addr constant [8 x i8] c"--(pre)\00", align 1
@295 = private unnamed_addr constant [9 x i8] c"(post)++\00", align 1
@296 = private unnamed_addr constant [9 x i8] c"(post)--\00", align 1
@297 = private unnamed_addr constant [2 x i8] c"!\00", align 1
@298 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@299 = private unnamed_addr constant [39 x i8] c"Illegal unary operation %s on constant\00", align 1
@300 = private unnamed_addr constant [40 x i8] c"Illegal unary operation %s on type '%s'\00", align 1
@301 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@302 = private unnamed_addr constant [30 x i8] c"Cannot cast type '%s' to '%s'\00", align 1
@303 = private unnamed_addr constant [45 x i8] c"Cannot construct an object of abstract class\00", align 1
@304 = private unnamed_addr constant [55 x i8] c"Expected %d argument(s) on constructor call but got %d\00", align 1
@305 = private unnamed_addr constant [71 x i8] c"Expected type '%s' but got type '%s' as constructor call argument (%d)\00", align 1
@306 = private unnamed_addr constant [68 x i8] c"New operator expects 1 argument for pointers but got %d argument(s)\00", align 1
@307 = private unnamed_addr constant [23 x i8] c"Type {\0A 'kind': %s, \0A}\00", align 1
@308 = private unnamed_addr constant [74 x i8] c"New operator for pointers expects argument of type '%s' but got type '%s'\00", align 1
@309 = private unnamed_addr constant [76 x i8] c"Property '%s' is defined as private and only accessible within the class %s\00", align 1
@310 = private unnamed_addr constant [71 x i8] c"Property '%s' is defined as %s and only accessible within the class %s\00", align 1
@311 = private unnamed_addr constant [52 x i8] c"Property '%s' doesn't exist in object of class '%s'\00", align 1
@312 = private unnamed_addr constant [50 x i8] c"Property '%s' is not a static member in class '%s\00", align 1
@313 = private unnamed_addr constant [40 x i8] c"'%s' is not an element of enum the '%s'\00", align 1
@314 = private unnamed_addr constant [10 x i8] c"copy_from\00", align 1
@315 = private unnamed_addr constant [10 x i8] c"move_from\00", align 1
@316 = private unnamed_addr constant [10 x i8] c"fill_with\00", align 1
@317 = private unnamed_addr constant [7 x i8] c"resize\00", align 1
@318 = private unnamed_addr constant [8 x i8] c"compare\00", align 1
@319 = private unnamed_addr constant [28 x i8] c"intrinsic %s is not defined\00", align 1
@320 = private unnamed_addr constant [38 x i8] c"Cannot get property '%s' of type '%s'\00", align 1
@321 = private unnamed_addr constant [53 x i8] c"Expected type '%s' from first case but got type '%s'\00", align 1
@322 = private unnamed_addr constant [122 x i8] c"No operator overload for indexing operator on %s object please implement method __getitem__ to use indexing in this class\00", align 1
@323 = private unnamed_addr constant [35 x i8] c"Expected an integer type for index\00", align 1
@324 = private unnamed_addr constant [39 x i8] c"Cannot index into a value of type '%s'\00", align 1
@325 = private unnamed_addr constant [47 x i8] c"Expected a function type for call but got '%s'\00", align 1
@326 = private unnamed_addr constant [52 x i8] c"Expected %d argument(s) on function call but got %d\00", align 1
@327 = private unnamed_addr constant [63 x i8] c"Expected type '%s' but got type '%s' as function call argument\00", align 1
@328 = private unnamed_addr constant [66 x i8] c"Expected argument 1 to be of type to be of a pointer but got '%s'\00", align 1
@329 = private unnamed_addr constant [49 x i8] c"Expected 2 arguments on function call but got %d\00", align 1
@330 = private unnamed_addr constant [63 x i8] c"Expected an int of but got type '%s' as function call argument\00", align 1
@331 = private unnamed_addr constant [49 x i8] c"Expected 3 arguments on function call but got %d\00", align 1
@332 = private unnamed_addr constant [66 x i8] c"Expected type '%s' of but got type '%s' as function call argument\00", align 1
@333 = private unnamed_addr constant [26 x i8] c"Variable '%s' has no type\00", align 1
@334 = private unnamed_addr constant [70 x i8] c"Cannot declare a value as null without any type hint for future usage\00", align 1
@335 = private unnamed_addr constant [61 x i8] c"Expected type '%s' but got type '%s' on variable declaration\00", align 1
@336 = private unnamed_addr constant [57 x i8] c"Illegal re-declaration of already declared variable '%s'\00", align 1
@337 = private unnamed_addr constant [49 x i8] c"Cannot assign a non-constant value to a constant\00", align 1
@338 = private unnamed_addr constant [30 x i8] c"Illegal break outside of loop\00", align 1
@339 = private unnamed_addr constant [33 x i8] c"Illegal continue outside of loop\00", align 1
@340 = private unnamed_addr constant [55 x i8] c"Function with void return type cannot return any value\00", align 1
@341 = private unnamed_addr constant [57 x i8] c"Expected return type of '%s' but got return type of '%s'\00", align 1
@342 = private unnamed_addr constant [33 x i8] c"Function return type is not void\00", align 1
@VTableArray_LLVMValueRef_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_LLVMValueRef__resize, ptr @Array_LLVMValueRef__swap, ptr @Array_LLVMValueRef____sl__, ptr @Array_LLVMValueRef____setitem__, ptr @Array_LLVMValueRef__append, ptr @Array_LLVMValueRef____getitem__, ptr @Array_LLVMValueRef____eq__, ptr @Array_LLVMValueRef____in__, ptr @Array_LLVMValueRef__find }>
@VTableBucket_string_LLVMValueRef_ = global <{ ptr }> <{ ptr @Bucket_string_LLVMValueRef__set }>
@VTableArray_Bucket_string_LLVMValueRef__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_LLVMValueRef___resize, ptr @Array_Bucket_string_LLVMValueRef___swap, ptr @Array_Bucket_string_LLVMValueRef_____sl__, ptr @Array_Bucket_string_LLVMValueRef_____setitem__, ptr @Array_Bucket_string_LLVMValueRef___append, ptr @Array_Bucket_string_LLVMValueRef_____getitem__, ptr @Array_Bucket_string_LLVMValueRef_____eq__, ptr @Array_Bucket_string_LLVMValueRef_____in__, ptr @Array_Bucket_string_LLVMValueRef___find }>
@VTableMap_string_LLVMValueRef_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_LLVMValueRef__set, ptr @Map_string_LLVMValueRef__get, ptr @Map_string_LLVMValueRef__get_buckets }>
@VTableBucket_string_int_ = global <{ ptr }> <{ ptr @Bucket_string_int__set }>
@VTableArray_Bucket_string_int__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_int___resize, ptr @Array_Bucket_string_int___swap, ptr @Array_Bucket_string_int_____sl__, ptr @Array_Bucket_string_int_____setitem__, ptr @Array_Bucket_string_int___append, ptr @Array_Bucket_string_int_____getitem__, ptr @Array_Bucket_string_int_____eq__, ptr @Array_Bucket_string_int_____in__, ptr @Array_Bucket_string_int___find }>
@VTableMap_string_int_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_int__set, ptr @Map_string_int__get, ptr @Map_string_int__get_buckets }>
@VTableBucket_string_CGClassType_ = global <{ ptr }> <{ ptr @Bucket_string_CGClassType__set }>
@VTableArray_Bucket_string_CGClassType__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_CGClassType___resize, ptr @Array_Bucket_string_CGClassType___swap, ptr @Array_Bucket_string_CGClassType_____sl__, ptr @Array_Bucket_string_CGClassType_____setitem__, ptr @Array_Bucket_string_CGClassType___append, ptr @Array_Bucket_string_CGClassType_____getitem__, ptr @Array_Bucket_string_CGClassType_____eq__, ptr @Array_Bucket_string_CGClassType_____in__, ptr @Array_Bucket_string_CGClassType___find }>
@VTableMap_string_CGClassType_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_CGClassType__set, ptr @Map_string_CGClassType__get, ptr @Map_string_CGClassType__get_buckets }>
@VTableArray_LLVMTypeRef_ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_LLVMTypeRef__resize, ptr @Array_LLVMTypeRef__swap, ptr @Array_LLVMTypeRef____sl__, ptr @Array_LLVMTypeRef____setitem__, ptr @Array_LLVMTypeRef__append, ptr @Array_LLVMTypeRef____getitem__, ptr @Array_LLVMTypeRef____eq__, ptr @Array_LLVMTypeRef____in__, ptr @Array_LLVMTypeRef__find }>
@VTableGeneratedModule = global <{ ptr, ptr, ptr, ptr, ptr }> <{ ptr @GeneratedModule_run_passes, ptr @GeneratedModule_exec, ptr @GeneratedModule_write_object, ptr @GeneratedModule_print, ptr @GeneratedModule_llvm_shutdown }>
@343 = private unnamed_addr constant [10 x i8] c"Panic: %s\00", align 1
@344 = private unnamed_addr constant [10 x i8] c"error: %s\00", align 1
@345 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@346 = private unnamed_addr constant [49 x i8] c"Main function not found in module; can't execute\00", align 1
@347 = private unnamed_addr constant [8 x i8] c"generic\00", align 1
@348 = private unnamed_addr constant [10 x i8] c"output.ll\00", align 1
@VTableBucket_string_CGEnumType_ = global <{ ptr }> <{ ptr @Bucket_string_CGEnumType__set }>
@VTableArray_Bucket_string_CGEnumType__ = global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @Array_Bucket_string_CGEnumType___resize, ptr @Array_Bucket_string_CGEnumType___swap, ptr @Array_Bucket_string_CGEnumType_____sl__, ptr @Array_Bucket_string_CGEnumType_____setitem__, ptr @Array_Bucket_string_CGEnumType___append, ptr @Array_Bucket_string_CGEnumType_____getitem__, ptr @Array_Bucket_string_CGEnumType_____eq__, ptr @Array_Bucket_string_CGEnumType_____in__, ptr @Array_Bucket_string_CGEnumType___find }>
@VTableMap_string_CGEnumType_ = global <{ ptr, ptr, ptr }> <{ ptr @Map_string_CGEnumType__set, ptr @Map_string_CGEnumType__get, ptr @Map_string_CGEnumType__get_buckets }>
@VTableCodeGen = global <{ ptr }> <{ ptr @CodeGen_codegen }>
@349 = private unnamed_addr constant [9 x i8] c"%d;%d;%d\00", align 1
@350 = private unnamed_addr constant [33 x i8] c"Type could not be code generated\00", align 1
@351 = private unnamed_addr constant [5 x i8] c"atof\00", align 1
@352 = private unnamed_addr constant [5 x i8] c"atoi\00", align 1
@353 = private unnamed_addr constant [5 x i8] c"atol\00", align 1
@354 = private unnamed_addr constant [8 x i8] c"realloc\00", align 1
@355 = private unnamed_addr constant [7 x i8] c"memcmp\00", align 1
@356 = private unnamed_addr constant [9 x i8] c"asprintf\00", align 1
@357 = private unnamed_addr constant [6 x i8] c"%s {\0A\00", align 1
@358 = private unnamed_addr constant [7 x i8] c" ... }\00", align 1
@359 = private unnamed_addr constant [4 x i8] c"lld\00", align 1
@360 = private unnamed_addr constant [3 x i8] c"ld\00", align 1
@361 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@362 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@363 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@364 = private unnamed_addr constant [5 x i8] c"0x%X\00", align 1
@365 = private unnamed_addr constant [13 x i8] c" '%s': %s, \0A\00", align 1
@366 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@367 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@368 = private unnamed_addr constant [18 x i8] c"string_from_bytes\00", align 1
@369 = private unnamed_addr constant [55 x i8] c"Could not find function 'string.from_bytes' in program\00", align 1
@370 = private unnamed_addr constant [46 x i8] c"This should never happen! (get_expr_mem: var)\00", align 1
@371 = private unnamed_addr constant [9 x i8] c"arrayidx\00", align 1
@372 = private unnamed_addr constant [7 x i8] c"ptridx\00", align 1
@373 = private unnamed_addr constant [9 x i8] c"%s;%d;%d\00", align 1
@374 = private unnamed_addr constant [10 x i8] c"memberidx\00", align 1
@375 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@376 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@377 = private unnamed_addr constant [12 x i8] c"llvm.pow.%s\00", align 1
@378 = private unnamed_addr constant [23 x i8] c"Unknown case! %s %s %s\00", align 1
@379 = private unnamed_addr constant [11 x i8] c"incdec.ptr\00", align 1
@380 = private unnamed_addr constant [51 x i8] c"This should never happen; (codegen_var_access_exp)\00", align 1
@381 = private unnamed_addr constant [11 x i8] c"true_block\00", align 1
@382 = private unnamed_addr constant [12 x i8] c"false_block\00", align 1
@383 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@384 = private unnamed_addr constant [8 x i8] c"ternary\00", align 1
@385 = private unnamed_addr constant [52 x i8] c"this should not happen; (codegen_member_exp); class\00", align 1
@386 = private unnamed_addr constant [60 x i8] c"This should never happen; (codegen_member_expr; class prop)\00", align 1
@387 = private unnamed_addr constant [51 x i8] c"this should not happen; (codegen_member_exp); enum\00", align 1
@388 = private unnamed_addr constant [11 x i8] c"to_cstring\00", align 1
@389 = private unnamed_addr constant [22 x i8] c"instrinsic not found!\00", align 1
@390 = private unnamed_addr constant [9 x i8] c"if.entry\00", align 1
@391 = private unnamed_addr constant [6 x i8] c"ifend\00", align 1
@392 = private unnamed_addr constant [10 x i8] c"for.entry\00", align 1
@393 = private unnamed_addr constant [9 x i8] c"for.cond\00", align 1
@394 = private unnamed_addr constant [9 x i8] c"for.body\00", align 1
@395 = private unnamed_addr constant [9 x i8] c"for.incr\00", align 1
@396 = private unnamed_addr constant [8 x i8] c"for.end\00", align 1
@397 = private unnamed_addr constant [12 x i8] c"while.entry\00", align 1
@398 = private unnamed_addr constant [10 x i8] c"while.end\00", align 1
@399 = private unnamed_addr constant [48 x i8] c"Could not find constructor for constructor call\00", align 1
@400 = private unnamed_addr constant [76 x i8] c"This should not happen: could not find function %s_%s (declare_class_props)\00", align 1
@401 = private unnamed_addr constant [9 x i8] c"VTable%s\00", align 1
@402 = private unnamed_addr constant [15 x i8] c"%s_constructor\00", align 1
@403 = private unnamed_addr constant [3 x i8] c"-O\00", align 1
@404 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@405 = private unnamed_addr constant [12 x i8] c"--emit-llvm\00", align 1
@406 = private unnamed_addr constant [3 x i8] c"-o\00", align 1
@407 = private unnamed_addr constant [4 x i8] c"a.o\00", align 1
@408 = private unnamed_addr constant [8 x i8] c"-target\00", align 1
@409 = private unnamed_addr constant [25 x i8] c"No input file specified.\00", align 1

define ptr @string_from_cstring(ptr %0) {
  %2 = call i64 @strlen(ptr %0)
  %3 = trunc i64 %2 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  %5 = mul i64 %2, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %0, i64 %5, i1 false)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %6, ptr %4, i64 %2)
  ret ptr %6
}

define ptr @string_from_bytes(ptr %0, i64 %1) {
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  %5 = mul i64 %1, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %0, i64 %5, i1 false)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %6, ptr %4, i64 %1)
  ret ptr %6
}

define i64 @string_find(ptr %0, ptr %1, i64 %2) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ %2, %for.entry ], [ %14, %ifend ]
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp slt i64 %i.0, %3
  br i1 %4, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %string, ptr %1, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i8, ptr %5, align 1
  %memberidx2 = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %ptridx3 = getelementptr inbounds i8, ptr %7, i64 %i.0
  %8 = load i8, ptr %ptridx3, align 1
  %9 = icmp eq i8 %6, %8
  br i1 %9, label %if.entry, label %ifend

common.ret:                                       ; preds = %while.entry, %for.cond, %if.entry12
  %common.ret.op = phi i64 [ %i.0, %if.entry12 ], [ -1, %for.cond ], [ -1, %while.entry ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  %x = alloca i64, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %1, i32 0, i32 2
  %10 = load i64, ptr %memberidx4, align 4
  %11 = sub i64 %10, 1
  store i64 %11, ptr %x, align 4
  %matches = alloca i1, align 1
  store i1 true, ptr %matches, align 1
  %12 = load i64, ptr %x, align 4
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %while.entry, label %while.end

ifend:                                            ; preds = %while.end, %for.body
  %14 = add i64 %i.0, 1
  br label %for.cond

while.entry:                                      ; preds = %ifend11, %if.entry
  %15 = load i64, ptr %x, align 4
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx6 = getelementptr inbounds i8, ptr %16, i64 %15
  %17 = load i8, ptr %ptridx6, align 1
  %18 = add i64 %15, %i.0
  %19 = load ptr, ptr %memberidx2, align 8
  %ptridx8 = getelementptr inbounds i8, ptr %19, i64 %18
  %20 = load i8, ptr %ptridx8, align 1
  %21 = icmp ne i8 %17, %20
  br i1 %21, label %common.ret, label %ifend11

while.end:                                        ; preds = %ifend11, %if.entry
  %22 = load i1, ptr %matches, align 1
  br i1 %22, label %if.entry12, label %ifend

ifend11:                                          ; preds = %while.entry
  %23 = add i64 %15, -1
  store i64 %23, ptr %x, align 4
  %24 = icmp sgt i64 %23, 0
  br i1 %24, label %while.entry, label %while.end

if.entry12:                                       ; preds = %while.end
  br label %common.ret
}

define ptr @string_substring(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 %1
  call void @string_constructor(ptr %4, ptr %6, i64 %2)
  ret ptr %4
}

define ptr @string_replace(ptr %0, ptr %1, ptr %2) {
  %4 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call i64 %5(ptr %0, ptr %1, i64 0)
  %7 = icmp sge i64 %6, 0
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %30, %if.entry ], [ %0, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %nlen = alloca i64, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %string, ptr %1, i32 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = sub i64 %8, %9
  %memberidx3 = getelementptr inbounds %string, ptr %2, i32 0, i32 2
  %11 = load i64, ptr %memberidx3, align 4
  %12 = add i64 %10, %11
  store i64 %12, ptr %nlen, align 4
  %nbuff = alloca ptr, align 8
  %13 = trunc i64 %12 to i32
  %mallocsize = mul i32 %13, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %14 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %14, ptr %nbuff, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = mul i64 %6, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr align 8 %15, i64 %16, i1 false)
  %17 = load ptr, ptr %nbuff, align 8
  %ptridx = getelementptr inbounds i8, ptr %17, i64 %6
  %memberidx6 = getelementptr inbounds %string, ptr %2, i32 0, i32 1
  %18 = load ptr, ptr %memberidx6, align 8
  %19 = load i64, ptr %memberidx3, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 536870912 %ptridx, ptr align 8 %18, i64 %20, i1 false)
  %21 = load i64, ptr %memberidx3, align 4
  %22 = add i64 %6, %21
  %23 = load ptr, ptr %nbuff, align 8
  %ptridx9 = getelementptr inbounds i8, ptr %23, i64 %22
  %24 = load i64, ptr %memberidx2, align 4
  %25 = add i64 %6, %24
  %26 = load ptr, ptr %memberidx4, align 8
  %ptridx14 = getelementptr inbounds i8, ptr %26, i64 %25
  %27 = load i64, ptr %memberidx1, align 4
  %28 = sub i64 %27, %25
  %29 = mul i64 %28, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 536870912 %ptridx9, ptr align 536870912 %ptridx14, i64 %29, i1 false)
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %31 = load ptr, ptr %nbuff, align 8
  %32 = load i64, ptr %nlen, align 4
  call void @string_constructor(ptr %30, ptr %31, i64 %32)
  br label %common.ret

ifend:                                            ; preds = %3
  br label %common.ret
}

define ptr @string_get_bytes(ptr %0) {
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  ret ptr %2
}

define ptr @string_to_cstring(ptr %0) {
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  %memberidx1 = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %memberidx, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %6, i64 %8, i1 false)
  %9 = load i64, ptr %memberidx, align 4
  %ptridx = getelementptr inbounds i8, ptr %5, i64 %9
  store i8 0, ptr %ptridx, align 1
  ret ptr %5
}

define ptr @string___adda__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = add i64 %3, %4
  %memberidx2 = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = mul i64 %5, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %8 = call ptr @realloc(ptr %6, i64 %7)
  store ptr %8, ptr %memberidx2, align 8
  %9 = load i64, ptr %memberidx, align 4
  %10 = getelementptr inbounds i8, ptr %8, i64 %9
  %memberidx6 = getelementptr inbounds %string, ptr %1, i32 0, i32 1
  %11 = load ptr, ptr %memberidx6, align 8
  %12 = load i64, ptr %memberidx1, align 4
  %13 = mul i64 %12, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 536870912 %10, ptr align 8 %11, i64 %13, i1 false)
  store i64 %5, ptr %memberidx, align 4
  ret ptr %0
}

define i8 @string_get_byte(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds i8, ptr %3, i64 %1
  %4 = load i8, ptr %ptridx, align 1
  ret i8 %4
}

define ptr @string___add__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = add i64 %3, %4
  %6 = trunc i64 %5 to i32
  %mallocsize = mul i32 %6, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %7 = tail call ptr @malloc(i32 %mallocsize)
  %memberidx2 = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load i64, ptr %memberidx, align 4
  %10 = mul i64 %9, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %8, i64 %10, i1 false)
  %11 = load i64, ptr %memberidx, align 4
  %12 = getelementptr inbounds i8, ptr %7, i64 %11
  %memberidx5 = getelementptr inbounds %string, ptr %1, i32 0, i32 1
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = load i64, ptr %memberidx1, align 4
  %15 = mul i64 %14, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %13, i64 %15, i1 false)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %16, ptr %7, i64 %5)
  ret ptr %16
}

define ptr @string___getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %ptridx1 = getelementptr inbounds i8, ptr %4, i64 %1
  %5 = load i8, ptr %ptridx1, align 1
  store i8 %5, ptr %3, align 1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %6, ptr %3, i64 2)
  ret ptr %6
}

define i1 @string___eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %10, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %memberidx2 = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %1, i32 0, i32 1
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = mul i64 %3, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %9 = call i64 @memcmp(ptr %6, ptr %7, i64 %8)
  %10 = icmp eq i64 %9, 0
  br label %common.ret
}

define i1 @string___in__(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call i64 %4(ptr %0, ptr %1, i64 0)
  %6 = icmp ne i64 %5, -1
  ret i1 %6
}

define i1 @string___ne__(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call i1 %4(ptr %0, ptr %1)
  %6 = xor i1 %5, true
  ret i1 %6
}

define i1 @string_ends_with(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp slt i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %14, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %end_buff = alloca ptr, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 %3
  %8 = sub i64 0, %4
  %9 = getelementptr inbounds i8, ptr %7, i64 %8
  store ptr %9, ptr %end_buff, align 8
  %memberidx5 = getelementptr inbounds %string, ptr %1, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %11 = load i64, ptr %memberidx1, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %13 = call i64 @memcmp(ptr %9, ptr %10, i64 %12)
  %14 = icmp eq i64 %13, 0
  br label %common.ret
}

define i1 @string_starts_with(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp slt i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %10, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %memberidx2 = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %1, i32 0, i32 1
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = mul i64 %4, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %9 = call i64 @memcmp(ptr %6, ptr %7, i64 %8)
  %10 = icmp eq i64 %9, 0
  br label %common.ret
}

define void @string_constructor(ptr %0, ptr %1, i64 %2) {
  store ptr @VTablestring, ptr %0, align 8
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  store i64 %2, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %string, ptr %0, i32 0, i32 3
  store i64 %2, ptr %memberidx2, align 4
  ret void
}

declare noalias ptr @malloc(i32)

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

declare ptr @realloc(ptr, i64)

declare i64 @memcmp(ptr, ptr, i64)

declare i64 @strlen(ptr)

define i64 @Array_string__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %9, %ifend ]
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call i1 %7(ptr %5, ptr %1)
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %9 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_string__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_string____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_string__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_string__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_string____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_string____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_string____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend8, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %11, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 3
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr %15(ptr %1, i64 %16)
  %18 = call i1 %13(ptr %11, ptr %17)
  br i1 %18, label %common.ret, label %ifend8

ifend8:                                           ; preds = %for.body
  %19 = load i64, ptr %i, align 4
  %20 = add i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_string____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = call i1 %8(ptr %6, ptr %1)
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_string__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_string_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define i1 @Range___in__(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %Range, ptr %0, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp sge i64 %1, %3
  %memberidx1 = getelementptr inbounds %Range, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx1, align 4
  %6 = icmp slt i64 %1, %5
  %7 = and i1 %4, %6
  ret i1 %7
}

define void @Range_constructor(ptr %0, i64 %1, i64 %2) {
  store ptr @VTableRange, ptr %0, align 8
  %memberidx = getelementptr inbounds %Range, ptr %0, i32 0, i32 1
  store i64 %1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Range, ptr %0, i32 0, i32 2
  store i64 %2, ptr %memberidx1, align 4
  ret void
}

define ptr @parse_args(i64 %0, ptr %1) {
for.entry:
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_string_, ptr null, i32 1) to i32))
  call void @Array_string__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_string_, ptr %2, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %for.body ]
  %3 = icmp slt i64 %i.0, %0
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %2, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %1, i64 %i.0
  %6 = load ptr, ptr %ptridx, align 8
  %7 = call ptr @string_from_cstring(ptr %6)
  call void %5(ptr %2, ptr %7)
  %8 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret ptr %2
}

define void @help(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %0)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @1, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  call void @println(ptr %8)
  %9 = call ptr @string_from_bytes(ptr @2, i64 8)
  call void @println(ptr %9)
  %10 = call ptr @string_from_bytes(ptr @3, i64 37)
  call void @println(ptr %10)
  %11 = call ptr @string_from_bytes(ptr @4, i64 40)
  call void @println(ptr %11)
  %12 = call ptr @string_from_bytes(ptr @5, i64 35)
  call void @println(ptr %12)
  %13 = call ptr @string_from_bytes(ptr @6, i64 39)
  call void @println(ptr %13)
  %14 = call ptr @string_from_bytes(ptr @7, i64 42)
  call void @println(ptr %14)
  %15 = call ptr @string_from_bytes(ptr @8, i64 45)
  call void @println(ptr %15)
  %16 = call ptr @string_from_bytes(ptr @9, i64 32)
  call void @println(ptr %16)
  %17 = call ptr @string_from_bytes(ptr @10, i64 92)
  call void @println(ptr %17)
  %18 = call ptr @string_from_bytes(ptr @11, i64 30)
  call void @println(ptr %18)
  ret void
}

define void @println(ptr %0) {
  call void @print(ptr %0)
  call void @write(i64 1, ptr @0, i64 1)
  ret void
}

define void @print(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 9
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %0)
  %memberidx1 = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx1, align 4
  call void @write(i64 1, ptr %4, i64 %5)
  ret void
}

declare void @write(i64, ptr, i64)

declare i64 @asprintf(ptr, ptr, ...)

define i1 @flag(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 7
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call i1 %4(ptr %0, ptr %1)
  ret i1 %5
}

define ptr @flag_value_or(ptr %0, ptr %1, ptr %2) {
  %4 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 8
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call i64 %5(ptr %0, ptr %1)
  %7 = icmp ne i64 %6, -1
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = add i64 %6, 1
  %10 = icmp sgt i64 %8, %9
  br i1 %10, label %if.entry2, label %else3

common.ret:                                       ; preds = %if.entry2, %ifend
  %common.ret.op = phi ptr [ %2, %ifend ], [ %13, %if.entry2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3, %else3
  br label %common.ret

if.entry2:                                        ; preds = %if.entry
  %11 = load ptr, ptr %0, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = call ptr %12(ptr %0, i64 %9)
  br label %common.ret

else3:                                            ; preds = %if.entry
  %14 = load ptr, ptr %1, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 11
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = call ptr %15(ptr %1)
  %17 = alloca ptr, align 8
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr %17, ptr @20, ptr %16)
  %19 = load ptr, ptr %17, align 8
  %20 = call ptr @string_from_bytes(ptr %19, i64 %18)
  call void @print_message_error(i64 4, ptr %20)
  br label %ifend
}

define void @print_message_error(i64 %0, ptr %1) {
  call void @change_print_color(i64 0)
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %4 = call ptr @string_from_bytes(ptr @14, i64 21)
  call void @print(ptr %4)
  br label %ifend

else:                                             ; preds = %2
  %5 = icmp eq i64 %0, 2
  br i1 %5, label %if.entry1, label %else2

ifend:                                            ; preds = %if.entry10, %else11, %if.entry7, %if.entry4, %if.entry1, %if.entry
  call void @change_print_color(i64 1)
  call void @println(ptr %1)
  ret void

if.entry1:                                        ; preds = %else
  %6 = call ptr @string_from_bytes(ptr @15, i64 16)
  call void @print(ptr %6)
  br label %ifend

else2:                                            ; preds = %else
  %7 = icmp eq i64 %0, 3
  br i1 %7, label %if.entry4, label %else5

if.entry4:                                        ; preds = %else2
  %8 = call ptr @string_from_bytes(ptr @16, i64 12)
  call void @print(ptr %8)
  br label %ifend

else5:                                            ; preds = %else2
  %9 = icmp eq i64 %0, 5
  br i1 %9, label %if.entry7, label %else8

if.entry7:                                        ; preds = %else5
  %10 = call ptr @string_from_bytes(ptr @17, i64 14)
  call void @print(ptr %10)
  br label %ifend

else8:                                            ; preds = %else5
  %11 = icmp eq i64 %0, 1
  br i1 %11, label %if.entry10, label %else11

if.entry10:                                       ; preds = %else8
  %12 = call ptr @string_from_bytes(ptr @18, i64 14)
  call void @print(ptr %12)
  br label %ifend

else11:                                           ; preds = %else8
  %13 = call ptr @string_from_bytes(ptr @19, i64 9)
  call void @print(ptr %13)
  br label %ifend
}

define void @change_print_color(i64 %0) {
  %2 = icmp eq i64 %0, 0
  br i1 %2, label %true_block, label %false_block

true_block:                                       ; preds = %1
  %3 = call ptr @string_from_bytes(ptr @12, i64 7)
  br label %end

false_block:                                      ; preds = %1
  %4 = call ptr @string_from_bytes(ptr @13, i64 4)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %3, %true_block ], [ %4, %false_block ]
  call void @print(ptr %ternary)
  ret void
}

define i64 @main(i64 %0, ptr %1) {
  %3 = icmp sge i64 %0, 2
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %args = alloca ptr, align 8
  %4 = call ptr @parse_args(i64 %0, ptr %1)
  store ptr %4, ptr %args, align 8
  %5 = call ptr @string_from_bytes(ptr @21, i64 2)
  %6 = call i1 @flag(ptr %4, ptr %5)
  %7 = load ptr, ptr %args, align 8
  %8 = call ptr @string_from_bytes(ptr @22, i64 9)
  %9 = call i1 @flag(ptr %7, ptr %8)
  %10 = or i1 %6, %9
  br i1 %10, label %if.entry1, label %ifend3

common.ret:                                       ; preds = %ifend38, %ifend31, %ifend20, %if.entry18, %if.entry4, %if.entry1, %ifend49, %else
  %common.ret.op = phi i64 [ 1, %else ], [ %code.0, %ifend49 ], [ 0, %if.entry1 ], [ 0, %if.entry4 ], [ 1, %if.entry18 ], [ 1, %ifend20 ], [ 1, %ifend31 ], [ 1, %ifend38 ]
  ret i64 %common.ret.op

else:                                             ; preds = %2
  %11 = call ptr @string_from_bytes(ptr @409, i64 24)
  call void @print_message_error(i64 4, ptr %11)
  br label %common.ret

if.entry1:                                        ; preds = %if.entry
  %12 = call ptr @string_from_bytes(ptr @23, i64 19)
  call void @println(ptr %12)
  br label %common.ret

ifend3:                                           ; preds = %if.entry
  %13 = load ptr, ptr %args, align 8
  %14 = call ptr @string_from_bytes(ptr @24, i64 2)
  %15 = call i1 @flag(ptr %13, ptr %14)
  %16 = load ptr, ptr %args, align 8
  %17 = call ptr @string_from_bytes(ptr @25, i64 6)
  %18 = call i1 @flag(ptr %16, ptr %17)
  %19 = or i1 %15, %18
  br i1 %19, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend3
  %20 = load ptr, ptr %args, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 5
  %22 = load ptr, ptr %memberidx, align 8
  %23 = call ptr %22(ptr %20, i64 0)
  call void @help(ptr %23)
  br label %common.ret

ifend6:                                           ; preds = %ifend3
  %filename = alloca ptr, align 8
  %24 = load ptr, ptr %args, align 8
  %25 = load ptr, ptr %24, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %25, i32 0, i32 5
  %26 = load ptr, ptr %memberidx7, align 8
  %27 = call ptr %26(ptr %24, i64 1)
  store ptr %27, ptr %filename, align 8
  %compiler = alloca ptr, align 8
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Compiler, ptr null, i32 1) to i32))
  call void @Compiler_constructor(ptr %28)
  store ptr %28, ptr %compiler, align 8
  %29 = load ptr, ptr %args, align 8
  %30 = call ptr @string_from_bytes(ptr @37, i64 2)
  %31 = call i1 @flag(ptr %29, ptr %30)
  br i1 %31, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend6
  %rt_path = alloca ptr, align 8
  %32 = load ptr, ptr %args, align 8
  %33 = call ptr @string_from_bytes(ptr @37, i64 2)
  %34 = call ptr @string_from_bytes(ptr @38, i64 0)
  %35 = call ptr @flag_value_or(ptr %32, ptr %33, ptr %34)
  store ptr %35, ptr %rt_path, align 8
  %36 = load ptr, ptr %35, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 3
  %37 = load ptr, ptr %memberidx11, align 8
  %38 = call ptr @string_from_bytes(ptr @38, i64 0)
  %39 = call i1 %37(ptr %35, ptr %38)
  br i1 %39, label %if.entry12, label %ifend10

ifend10:                                          ; preds = %if.entry12, %if.entry8, %ifend6
  %file_id = alloca ptr, align 8
  %40 = load ptr, ptr %compiler, align 8
  %41 = load ptr, ptr %40, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %41, i32 0, i32 1
  %42 = load ptr, ptr %memberidx16, align 8
  %43 = load ptr, ptr %filename, align 8
  %44 = call ptr %42(ptr %40, ptr %43)
  store ptr %44, ptr %file_id, align 8
  %45 = load ptr, ptr %compiler, align 8
  %46 = load ptr, ptr %45, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx17, align 8
  %48 = call i1 %47(ptr %45, ptr %44)
  %49 = xor i1 %48, true
  br i1 %49, label %if.entry18, label %ifend20

if.entry12:                                       ; preds = %if.entry8
  %50 = load ptr, ptr %compiler, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %rt_path, align 8
  call void %52(ptr %50, ptr %53)
  br label %ifend10

if.entry18:                                       ; preds = %ifend10
  %54 = load ptr, ptr %filename, align 8
  %55 = load ptr, ptr %54, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %55, i32 0, i32 11
  %56 = load ptr, ptr %memberidx21, align 8
  %57 = call ptr %56(ptr %54)
  %58 = alloca ptr, align 8
  %59 = call i64 (ptr, ptr, ...) @asprintf(ptr %58, ptr @39, ptr %57)
  %60 = load ptr, ptr %58, align 8
  %61 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %61, ptr %60, i64 %59)
  call void @print_message_error(i64 3, ptr %61)
  br label %common.ret

ifend20:                                          ; preds = %ifend10
  %lexer = alloca ptr, align 8
  %62 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Lexer, ptr null, i32 1) to i32))
  call void @Lexer_constructor(ptr %62)
  store ptr %62, ptr %lexer, align 8
  %tokens = alloca ptr, align 8
  %63 = load ptr, ptr %62, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr }>, ptr %63, i32 0, i32 1
  %64 = load ptr, ptr %memberidx22, align 8
  %65 = load ptr, ptr %compiler, align 8
  %memberidx23 = getelementptr inbounds %Compiler, ptr %65, i32 0, i32 3
  %66 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Compiler, ptr %65, i32 0, i32 6
  %67 = load ptr, ptr %memberidx24, align 8
  %68 = call ptr %64(ptr %62, ptr %66, ptr %67)
  store ptr %68, ptr %tokens, align 8
  %69 = load ptr, ptr %compiler, align 8
  %70 = load ptr, ptr %69, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %70, i32 0, i32 3
  %71 = load ptr, ptr %memberidx25, align 8
  %72 = call i1 %71(ptr %69)
  br i1 %72, label %common.ret, label %ifend28

ifend28:                                          ; preds = %ifend20
  %73 = load ptr, ptr %args, align 8
  %74 = call ptr @string_from_bytes(ptr @80, i64 14)
  %75 = call i1 @flag(ptr %73, ptr %74)
  br i1 %75, label %if.entry29, label %ifend31

if.entry29:                                       ; preds = %ifend28
  %76 = load ptr, ptr %tokens, align 8
  %77 = load ptr, ptr %compiler, align 8
  %memberidx32 = getelementptr inbounds %Compiler, ptr %77, i32 0, i32 3
  %78 = load ptr, ptr %memberidx32, align 8
  call void @print_tokens(ptr %76, ptr %78)
  br label %ifend31

ifend31:                                          ; preds = %ifend28, %if.entry29
  %parser = alloca ptr, align 8
  %79 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Parser, ptr null, i32 1) to i32))
  call void @Parser_constructor(ptr %79)
  store ptr %79, ptr %parser, align 8
  %module_node = alloca ptr, align 8
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = load ptr, ptr %tokens, align 8
  %83 = load ptr, ptr %compiler, align 8
  %memberidx34 = getelementptr inbounds %Compiler, ptr %83, i32 0, i32 6
  %84 = load ptr, ptr %memberidx34, align 8
  %85 = call ptr %81(ptr %79, ptr %82, ptr %84)
  store ptr %85, ptr %module_node, align 8
  %86 = load ptr, ptr %compiler, align 8
  %87 = load ptr, ptr %86, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %87, i32 0, i32 3
  %88 = load ptr, ptr %memberidx35, align 8
  %89 = call i1 %88(ptr %86)
  br i1 %89, label %common.ret, label %ifend38

ifend38:                                          ; preds = %ifend31
  %typechecker = alloca ptr, align 8
  %90 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeChecker, ptr null, i32 1) to i32))
  call void @TypeChecker_constructor(ptr %90)
  store ptr %90, ptr %typechecker, align 8
  %program = alloca ptr, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %module_node, align 8
  %94 = load ptr, ptr %compiler, align 8
  %95 = load ptr, ptr %filename, align 8
  %96 = call ptr %92(ptr %90, ptr %93, ptr %94, ptr %95)
  store ptr %96, ptr %program, align 8
  %97 = load ptr, ptr %compiler, align 8
  %98 = load ptr, ptr %97, align 8
  %memberidx40 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %98, i32 0, i32 3
  %99 = load ptr, ptr %memberidx40, align 8
  %100 = call i1 %99(ptr %97)
  br i1 %100, label %common.ret, label %ifend43

ifend43:                                          ; preds = %ifend38
  %codegen = alloca ptr, align 8
  %101 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CodeGen, ptr null, i32 1) to i32))
  call void @CodeGen_constructor(ptr %101)
  store ptr %101, ptr %codegen, align 8
  %flo_module = alloca ptr, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %program, align 8
  %105 = call ptr %103(ptr %101, ptr %104)
  store ptr %105, ptr %flo_module, align 8
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %args, align 8
  %109 = call ptr @string_from_bytes(ptr @403, i64 2)
  %110 = call ptr @string_from_bytes(ptr @404, i64 1)
  %111 = call ptr @flag_value_or(ptr %108, ptr %109, ptr %110)
  %112 = load ptr, ptr %111, align 8
  %memberidx46 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %112, i32 0, i32 11
  %113 = load ptr, ptr %memberidx46, align 8
  %114 = call ptr %113(ptr %111)
  %115 = call i64 @atol(ptr %114)
  tail call void @free(ptr %114)
  call void %107(ptr %105, i64 %115)
  %116 = load ptr, ptr %args, align 8
  %117 = call ptr @string_from_bytes(ptr @405, i64 11)
  %118 = call i1 @flag(ptr %116, ptr %117)
  br i1 %118, label %if.entry47, label %else48

if.entry47:                                       ; preds = %ifend43
  %119 = load ptr, ptr %flo_module, align 8
  %120 = load ptr, ptr %119, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %120, i32 0, i32 3
  %121 = load ptr, ptr %memberidx50, align 8
  call void %121(ptr %119)
  br label %ifend49

else48:                                           ; preds = %ifend43
  %122 = load ptr, ptr %args, align 8
  %123 = call ptr @string_from_bytes(ptr @406, i64 2)
  %124 = call i1 @flag(ptr %122, ptr %123)
  br i1 %124, label %if.entry51, label %else52

ifend49:                                          ; preds = %if.entry51, %else52, %if.entry47
  %code.0 = phi i64 [ 0, %if.entry47 ], [ 0, %if.entry51 ], [ %142, %else52 ]
  %125 = load ptr, ptr %flo_module, align 8
  %126 = load ptr, ptr %125, align 8
  %memberidx56 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %126, i32 0, i32 4
  %127 = load ptr, ptr %memberidx56, align 8
  call void %127(ptr %125)
  br label %common.ret

if.entry51:                                       ; preds = %else48
  %128 = load ptr, ptr %flo_module, align 8
  %129 = load ptr, ptr %128, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %129, i32 0, i32 2
  %130 = load ptr, ptr %memberidx54, align 8
  %131 = load ptr, ptr %args, align 8
  %132 = call ptr @string_from_bytes(ptr @406, i64 2)
  %133 = call ptr @string_from_bytes(ptr @407, i64 3)
  %134 = call ptr @flag_value_or(ptr %131, ptr %132, ptr %133)
  %135 = load ptr, ptr %args, align 8
  %136 = call ptr @string_from_bytes(ptr @408, i64 7)
  %137 = call ptr @string_from_bytes(ptr @38, i64 0)
  %138 = call ptr @flag_value_or(ptr %135, ptr %136, ptr %137)
  call void %130(ptr %128, ptr %134, ptr %138)
  br label %ifend49

else52:                                           ; preds = %else48
  %139 = load ptr, ptr %flo_module, align 8
  %140 = load ptr, ptr %139, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %140, i32 0, i32 1
  %141 = load ptr, ptr %memberidx55, align 8
  %142 = call i64 %141(ptr %139)
  br label %ifend49
}

define i1 @Compiler_print_errors(ptr %0) {
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 6
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx1, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %if.entry, label %common.ret

common.ret:                                       ; preds = %1, %if.entry
  %common.ret.op = phi i1 [ true, %if.entry ], [ false, %1 ]
  ret i1 %common.ret.op

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %2, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx3, align 8
  %7 = call ptr %6(ptr %2, i64 0)
  %memberidx4 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 5
  %8 = load ptr, ptr %memberidx4, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 1
  %11 = load ptr, ptr %memberidx6, align 8
  %12 = load i64, ptr %11, align 4
  %13 = call ptr %10(ptr %8, i64 %12)
  %memberidx8 = getelementptr inbounds %FloFile, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 3
  %15 = load ptr, ptr %memberidx9, align 8
  call void @print_error(ptr %7, ptr %14, ptr %15)
  br label %common.ret
}

define void @Compiler_set_std_path(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 4
  %3 = call ptr @string_from_bytes(ptr @29, i64 12)
  %4 = call ptr @Path_join(ptr %1, ptr %3)
  store ptr %4, ptr %memberidx1, align 8
  ret void
}

define ptr @FloRange_merge(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %4 = load i64, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %FloRange, ptr %1, i32 0, i32 1
  %5 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %FloRange, ptr %0, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %FloRange, ptr %1, i32 0, i32 3
  %7 = load i64, ptr %memberidx3, align 4
  call void @FloRange_constructor(ptr %3, i64 %4, i64 %5, i64 %6, i64 %7)
  ret ptr %3
}

define void @FloRange_constructor(ptr %0, i64 %1, i64 %2, i64 %3, i64 %4) {
  store i64 %1, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %FloRange, ptr %0, i32 0, i32 1
  store i64 %2, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %FloRange, ptr %0, i32 0, i32 2
  store i64 %3, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %FloRange, ptr %0, i32 0, i32 3
  store i64 %4, ptr %memberidx3, align 4
  ret void
}

define void @FloError_constructor(ptr %0, i64 %1, ptr %2, ptr %3) {
  store i64 %1, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %FloError, ptr %0, i32 0, i32 2
  store ptr %3, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %FloError, ptr %0, i32 0, i32 1
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define i64 @Array_FloError__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FloError__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_FloError____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_FloError__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_FloError__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_FloError____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_FloError____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_FloError____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_FloError____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FloError__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_FloError_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Compiler_find_module_path(ptr %0, ptr %1) {
  %3 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 10
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @string_from_bytes(ptr @30, i64 4)
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @string_from_bytes(ptr @31, i64 8)
  %8 = call ptr @Path_join(ptr %6, ptr %7)
  %9 = call ptr %4(ptr %1, ptr %5, ptr %8)
  %10 = load ptr, ptr %9, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 12
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = call ptr @string_from_bytes(ptr @32, i64 4)
  %13 = call i1 %11(ptr %9, ptr %12)
  %14 = xor i1 %13, true
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %15 = load ptr, ptr %9, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = call ptr @string_from_bytes(ptr @32, i64 4)
  %18 = call ptr %16(ptr %9, ptr %17)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %19 = call ptr @Path_abspath(ptr %9)
  ret ptr %19
}

define void @FileId_constructor(ptr %0, i64 %1) {
  store i64 %1, ptr %0, align 4
  ret void
}

define ptr @Compiler_register_file(ptr %0, ptr %1) {
  %3 = call ptr @Compiler_find_module_path(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 7
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %4, ptr %3)
  %8 = icmp ne ptr %7, null
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %7, %if.entry ], [ %9, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  br label %common.ret

ifend:                                            ; preds = %2
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FileId, ptr null, i32 1) to i32))
  %memberidx2 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 5
  %10 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_FloFile_, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx3, align 4
  call void @FileId_constructor(ptr %9, i64 %11)
  %12 = load ptr, ptr %memberidx, align 8
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  call void %14(ptr %12, ptr %3, ptr %9)
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx7, align 8
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloFile, ptr null, i32 1) to i32))
  call void @FloFile_constructor(ptr %18, ptr %3, ptr %1)
  call void %17(ptr %15, ptr %18)
  br label %common.ret
}

define i1 @Compiler_set_current_file(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i64, ptr %1, align 4
  %7 = call ptr %5(ptr %3, i64 %6)
  %8 = load ptr, ptr %7, align 8
  %9 = call i1 @File_exists(ptr %8)
  %10 = xor i1 %9, true
  br i1 %10, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ true, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %file = alloca ptr, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = call ptr @File_open_for_reading(ptr %11)
  store ptr %12, ptr %file, align 8
  %memberidx5 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 3
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr %14(ptr %12)
  store ptr %15, ptr %memberidx5, align 8
  %memberidx7 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx7, align 8
  %16 = load ptr, ptr %file, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr }>, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx8, align 8
  call void %18(ptr %16)
  br label %common.ret
}

define void @FloFile_constructor(ptr %0, ptr %1, ptr %2) {
  store ptr %1, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %FloFile, ptr %0, i32 0, i32 1
  store ptr %2, ptr %memberidx1, align 8
  ret void
}

define i64 @Array_FloFile__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FloFile__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_FloFile____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_FloFile__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_FloFile__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_FloFile____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_FloFile____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_FloFile____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_FloFile____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FloFile__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_FloFile_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Compiler_add_builtins(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr %3(ptr %0, ptr %4)
  ret ptr %5
}

define void @Map_string_FileId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_FileId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_FileId__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_FileId_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_FileId_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_FileId_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_FileId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_FileId_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_FileId_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_FileId_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_FileId__constructor(ptr %0) {
  store ptr @VTableBucket_string_FileId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_FileId_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_FileId___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_FileId___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_FileId_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_FileId___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_FileId___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_FileId_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_FileId_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_FileId_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_FileId_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_FileId___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_FileId__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_FileId__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_FileId__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_FileId___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_FileId_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_FileId__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_FileId_, ptr null, i32 1) to i32))
  call void @Bucket_string_FileId__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_FileId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_FileId_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_FileId__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_FileId__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_FileId_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_FileId_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_FileId_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_FileId_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_FileId_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_FileId__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_FileId__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_FileId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_FileId_, ptr null, i32 1) to i32))
  call void @Bucket_string_FileId__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @Compiler_constructor(ptr %0) {
  store ptr @VTableCompiler, ptr %0, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 5
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FloFile_, ptr null, i32 1) to i32))
  call void @Array_FloFile__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %2, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %2, ptr %memberidx, align 8
  %memberidx3 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 1
  store ptr null, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 3
  store ptr null, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 6
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FloError_, ptr null, i32 1) to i32))
  call void @Array_FloError__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx6 = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 1
  %memberidx7 = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  store ptr %3, ptr %memberidx5, align 8
  %memberidx8 = getelementptr inbounds %Compiler, ptr %0, i32 0, i32 7
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_FileId_, ptr null, i32 1) to i32))
  call void @Map_string_FileId__constructor(ptr %4)
  store ptr %4, ptr %memberidx8, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call ptr @string_from_bytes(ptr @27, i64 8)
  call void %6(ptr %0, ptr %7)
  ret void
}

define ptr @Path_abspath(ptr %0) {
  %buf = alloca [400 x i8], align 1
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %0)
  %5 = call ptr @realpath(ptr %4, ptr %buf)
  %6 = call ptr @string_from_cstring(ptr %buf)
  ret ptr %6
}

define ptr @Path_join(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 11
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr %4(ptr %0)
  %6 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 11
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr %7(ptr %1)
  %9 = alloca ptr, align 8
  %10 = call i64 (ptr, ptr, ...) @asprintf(ptr %9, ptr @28, ptr %5, ptr %8)
  %11 = load ptr, ptr %9, align 8
  %12 = call ptr @string_from_bytes(ptr %11, i64 %10)
  ret ptr %12
}

define ptr @Path_dirname(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %0)
  %5 = call ptr @dirname(ptr %4)
  %6 = call ptr @string_from_cstring(ptr %5)
  ret ptr %6
}

declare ptr @realpath(ptr, ptr)

declare ptr @dirname(ptr)

define i1 @File_exists(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %0)
  %5 = call i64 @access(ptr %4, i64 0)
  %6 = icmp eq i64 %5, 0
  ret i1 %6
}

define ptr @File_open_for_reading(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %0)
  %5 = call i64 @fopen(ptr %4, ptr @33)
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %1, %ifend
  %common.ret.op = phi ptr [ %7, %ifend ], [ null, %1 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %1
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%File, ptr null, i32 1) to i32))
  call void @File_constructor(ptr %7, i64 %5)
  br label %common.ret
}

define ptr @File_read_all(ptr %0) {
  %2 = tail call ptr @malloc(i32 0)
  br label %while.entry

while.entry:                                      ; preds = %ifend, %1
  %size.0 = phi i64 [ 0, %1 ], [ %8, %ifend ]
  %allocated_mem.0 = phi ptr [ %2, %1 ], [ %10, %ifend ]
  %buffer = alloca [1024 x i8], align 1
  %read_len = alloca i64, align 8
  %memberidx = getelementptr inbounds %File, ptr %0, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = call i64 @fread(ptr %buffer, i64 1, i64 1024, i64 %3)
  store i64 %4, ptr %read_len, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %while.entry
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %6, ptr %allocated_mem.0, i64 %size.0)
  ret ptr %6

ifend:                                            ; preds = %while.entry
  %prev_size = alloca i64, align 8
  store i64 %size.0, ptr %prev_size, align 4
  %7 = load i64, ptr %read_len, align 4
  %8 = add i64 %size.0, %7
  %9 = mul i64 %8, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %10 = call ptr @realloc(ptr %allocated_mem.0, i64 %9)
  %11 = load i64, ptr %prev_size, align 4
  %12 = getelementptr inbounds i8, ptr %10, i64 %11
  %13 = load i64, ptr %read_len, align 4
  %14 = mul i64 %13, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 536870912 %12, ptr align 536870912 %buffer, i64 %14, i1 false)
  br label %while.entry
}

define void @File_close(ptr %0) {
  %memberidx = getelementptr inbounds %File, ptr %0, i32 0, i32 1
  %2 = load i64, ptr %memberidx, align 4
  call void @fclose(i64 %2)
  ret void
}

define void @File_constructor(ptr %0, i64 %1) {
  store ptr @VTableFile, ptr %0, align 8
  %memberidx = getelementptr inbounds %File, ptr %0, i32 0, i32 1
  store i64 %1, ptr %memberidx, align 4
  ret void
}

declare i64 @fopen(ptr, ptr)

declare i64 @fread(ptr, i64, i64, i64)

declare i64 @access(ptr, i64)

declare void @fclose(i64)

define void @print_error(ptr %0, ptr %1, ptr %2) {
  %4 = load i64, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %FloError, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @print_message_error(i64 %4, ptr %5)
  %6 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 11
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr %7(ptr %1)
  %memberidx3 = getelementptr inbounds %FloError, ptr %0, i32 0, i32 2
  %9 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %FloRange, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr %11, ptr @34, ptr %8, i64 %10)
  %13 = load ptr, ptr %11, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %14, ptr %13, i64 %12)
  call void @println(ptr %14)
  %15 = load ptr, ptr %memberidx3, align 8
  call void @print_error_line(ptr %2, ptr %15)
  ret void
}

define void @print_error_line(ptr %0, ptr %1) {
for.entry:
  %memberidx = getelementptr inbounds %FloRange, ptr %1, i32 0, i32 1
  %2 = load i64, ptr %memberidx, align 4
  %3 = call i64 @get_next_line_index(ptr %0, i64 %2)
  %4 = load i64, ptr %1, align 4
  %memberidx2 = getelementptr inbounds %FloRange, ptr %1, i32 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = sub i64 %4, %5
  %7 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 7
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = sub i64 %3, %6
  %10 = call ptr %8(ptr %0, i64 %6, i64 %9)
  call void @println(ptr %10)
  %11 = load i64, ptr %memberidx2, align 4
  %12 = load i64, ptr %memberidx, align 4
  %13 = load i64, ptr %1, align 4
  %14 = sub i64 %12, %13
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %15 = icmp slt i64 %i.0, %11
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = call ptr @string_from_bytes(ptr @35, i64 1)
  call void @print(ptr %16)
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @change_print_color(i64 0)
  br label %for.cond8

for.cond8:                                        ; preds = %for.body9, %for.end
  %i.1 = phi i64 [ 0, %for.end ], [ %20, %for.body9 ]
  %18 = icmp slt i64 %i.1, %14
  br i1 %18, label %for.body9, label %for.end11

for.body9:                                        ; preds = %for.cond8
  %19 = call ptr @string_from_bytes(ptr @36, i64 1)
  call void @print(ptr %19)
  %20 = add i64 %i.1, 1
  br label %for.cond8

for.end11:                                        ; preds = %for.cond8
  call void @change_print_color(i64 1)
  %21 = call ptr @string_from_bytes(ptr @0, i64 1)
  call void @print(ptr %21)
  ret void
}

define i64 @get_next_line_index(ptr %0, i64 %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 8
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call i8 %4(ptr %0, i64 %1)
  %6 = icmp ne i8 %5, 10
  %memberidx1 = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  %8 = icmp slt i64 %1, %7
  %9 = and i1 %6, %8
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %start.0 = phi i64 [ %1, %2 ], [ %10, %while.entry ]
  %10 = add i64 %start.0, 1
  %11 = load ptr, ptr %0, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 8
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i8 %12(ptr %0, i64 %10)
  %14 = icmp ne i8 %13, 10
  %15 = load i64, ptr %memberidx1, align 4
  %16 = icmp slt i64 %10, %15
  %17 = and i1 %14, %16
  br i1 %17, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  %start.1 = phi i64 [ %10, %while.entry ], [ %1, %2 ]
  ret i64 %start.1
}

define void @Lexer_advance(ptr %0) {
  %2 = call i1 @Lexer_eof(ptr %0)
  br i1 %2, label %common.ret, label %ifend

common.ret:                                       ; preds = %if.entry6, %else7, %1
  ret void

ifend:                                            ; preds = %1
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 2
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 8
  %5 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 4
  %6 = load i64, ptr %memberidx3, align 4
  %7 = add i64 %6, 1
  store i64 %7, ptr %memberidx3, align 4
  %8 = call i8 %5(ptr %3, i64 %7)
  store i8 %8, ptr %memberidx, align 1
  %9 = icmp eq i8 %8, 10
  br i1 %9, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  %memberidx9 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 5
  store i64 0, ptr %memberidx9, align 4
  %memberidx10 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 6
  %10 = load i64, ptr %memberidx10, align 4
  %11 = add i64 %10, 1
  store i64 %11, ptr %memberidx10, align 4
  br label %common.ret

else7:                                            ; preds = %ifend
  %memberidx12 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 5
  %12 = load i64, ptr %memberidx12, align 4
  %13 = add i64 %12, 1
  store i64 %13, ptr %memberidx12, align 4
  br label %common.ret
}

define i1 @Lexer_skip_comment(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 42
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = call i1 @Lexer_eof(ptr %0)
  %5 = xor i1 %4, true
  br i1 %5, label %while.entry, label %while.end

else:                                             ; preds = %1
  %6 = call i8 @Lexer_peek(ptr %0, i64 1)
  %7 = icmp eq i8 %6, 47
  br i1 %7, label %if.entry4, label %common.ret

common.ret:                                       ; preds = %if.entry4, %while.entry7, %else, %while.end
  %common.ret.op = phi i1 [ true, %while.end ], [ false, %else ], [ true, %while.entry7 ], [ true, %if.entry4 ]
  ret i1 %common.ret.op

while.entry:                                      ; preds = %ifend3, %if.entry
  %8 = call i8 @Lexer_peek(ptr %0, i64 1)
  %9 = icmp eq i8 %8, 42
  %10 = call i8 @Lexer_peek(ptr %0, i64 2)
  %11 = icmp eq i8 %10, 47
  %12 = and i1 %9, %11
  br i1 %12, label %while.end, label %ifend3

while.end:                                        ; preds = %while.entry, %ifend3, %if.entry
  call void @Lexer_advance(ptr %0)
  call void @Lexer_advance(ptr %0)
  br label %common.ret

ifend3:                                           ; preds = %while.entry
  call void @Lexer_advance(ptr %0)
  %13 = call i1 @Lexer_eof(ptr %0)
  %14 = xor i1 %13, true
  br i1 %14, label %while.entry, label %while.end

if.entry4:                                        ; preds = %else
  call void @Lexer_advance(ptr %0)
  %15 = call i8 @Lexer_peek(ptr %0, i64 1)
  %16 = icmp ne i8 %15, 10
  %17 = call i1 @Lexer_eof(ptr %0)
  %18 = xor i1 %17, true
  %19 = and i1 %16, %18
  br i1 %19, label %while.entry7, label %common.ret

while.entry7:                                     ; preds = %while.entry7, %if.entry4
  call void @Lexer_advance(ptr %0)
  %20 = call i8 @Lexer_peek(ptr %0, i64 1)
  %21 = icmp ne i8 %20, 10
  %22 = call i1 @Lexer_eof(ptr %0)
  %23 = xor i1 %22, true
  %24 = and i1 %21, %23
  br i1 %24, label %while.entry7, label %common.ret
}

define void @Token_constructor(ptr %0, i64 %1, ptr %2) {
  store i64 %1, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %Token, ptr %0, i32 0, i32 1
  store ptr %2, ptr %memberidx1, align 8
  ret void
}

define ptr @Lexer_eq_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 61
  br i1 %3, label %if.entry, label %else

common.ret:                                       ; preds = %if.entry1, %ifend3, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %10, %ifend3 ], [ %8, %if.entry1 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 37, ptr %5)
  br label %common.ret

else:                                             ; preds = %1
  %6 = call i8 @Lexer_peek(ptr %0, i64 1)
  %7 = icmp eq i8 %6, 62
  br i1 %7, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %else
  call void @Lexer_advance(ptr %0)
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %9 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %8, i64 43, ptr %9)
  br label %common.ret

ifend3:                                           ; preds = %else
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %11 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %10, i64 36, ptr %11)
  br label %common.ret
}

define ptr @Lexer_neq_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 61
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %6, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 38, ptr %5)
  br label %common.ret

ifend:                                            ; preds = %1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %6, i64 45, ptr %7)
  br label %common.ret
}

define i64 @Array_Token__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Token__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Token____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Token__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Token__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Token____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Token____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Token____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Token____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Token__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Token_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define i64 @Array_Array_Token___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %9, %ifend ]
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 6
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call i1 %7(ptr %5, ptr %1)
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %9 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Array_Token___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Array_Token_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Array_Token___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Array_Token___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Array_Token_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Array_Token_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Array_Token_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Array_Token_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 6
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = call i1 %8(ptr %6, ptr %1)
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Array_Token___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Array_Token__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define i64 @Array_int__find(ptr %0, i64 %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds i64, ptr %4, i64 %i.0
  %5 = load i64, ptr %ptridx, align 4
  %6 = icmp eq i64 %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_int__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_int____sl__(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds i64, ptr %10, i64 %8
  store i64 %1, ptr %ptridx, align 4
  ret void
}

define void @Array_int__append(ptr %0, i64 %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, i64 %1)
  ret void
}

define void @Array_int__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca i64, align 8
  %memberidx4 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds i64, ptr %15, i64 %1
  %16 = load i64, ptr %ptridx, align 4
  store i64 %16, ptr %tmp, align 4
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds i64, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds i64, ptr %17, i64 %2
  %18 = load i64, ptr %ptridx8, align 4
  store i64 %18, ptr %ptridx6, align 4
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds i64, ptr %19, i64 %2
  %20 = load i64, ptr %tmp, align 4
  store i64 %20, ptr %ptridx10, align 4
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_int____setitem__(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds i64, ptr %9, i64 %1
  store i64 %2, ptr %ptridx, align 4
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define i64 @Array_int____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi i64 [ %9, %if.entry ], [ 0, %2 ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds i64, ptr %8, i64 %1
  %9 = load i64, ptr %ptridx, align 4
  br label %common.ret
}

define i1 @Array_int____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_int_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call i64 %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call i64 %13(ptr %1, i64 %14)
  %16 = icmp ne i64 %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_int____in__(ptr %0, i64 %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call i64 %5(ptr %0, i64 %i.0)
  %7 = icmp eq i64 %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_int__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_int_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_int_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @StrToken_constructor(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  call void @Token_constructor(ptr %0, i64 32, ptr %4)
  %memberidx = getelementptr inbounds %StrToken, ptr %0, i32 0, i32 2
  store ptr %3, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StrToken, ptr %0, i32 0, i32 3
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %StrToken, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx2, align 8
  ret void
}

define ptr @Lexer_string_token(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Array_Token__, ptr null, i32 1) to i32))
  call void @Array_Array_Token___constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %2, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_int_, ptr null, i32 1) to i32))
  call void @Array_int__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_int_, ptr %3, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_int_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringBuilder, ptr null, i32 1) to i32))
  call void @StringBuilder_constructor(ptr %4, i64 1)
  %5 = call i1 @Lexer_eof(ptr %0)
  %6 = xor i1 %5, true
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend15, %1
  %escape_next.0 = phi i1 [ false, %1 ], [ %escape_next.0, %ifend15 ], [ %28, %ifend8 ]
  %length.0 = phi i64 [ 2, %1 ], [ %length.0, %ifend15 ], [ %27, %ifend8 ]
  %memberidx4 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 1
  %7 = load i8, ptr %memberidx4, align 1
  %8 = icmp eq i8 %7, 34
  %9 = xor i1 %escape_next.0, true
  %10 = and i1 %8, %9
  br i1 %10, label %while.end, label %ifend

while.end:                                        ; preds = %while.entry, %ifend8, %1
  %length.1 = phi i64 [ %length.0, %while.entry ], [ %27, %ifend8 ], [ 2, %1 ]
  %range = alloca ptr, align 8
  %11 = call ptr @Lexer_get_range(ptr %0, i64 %length.1)
  store ptr %11, ptr %range, align 8
  %value = alloca ptr, align 8
  %12 = load ptr, ptr %4, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 3
  %13 = load ptr, ptr %memberidx39, align 8
  %14 = call ptr %13(ptr %4)
  %15 = call ptr @unescape(ptr %14)
  store ptr %15, ptr %value, align 8
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StrToken, ptr null, i32 1) to i32))
  %17 = load ptr, ptr %value, align 8
  %18 = load ptr, ptr %range, align 8
  call void @StrToken_constructor(ptr %16, ptr %2, ptr %3, ptr %17, ptr %18)
  ret ptr %16

ifend:                                            ; preds = %while.entry
  %19 = icmp eq i8 %7, 36
  %20 = and i1 %19, %9
  br i1 %20, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend
  %21 = load ptr, ptr %3, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx9, align 8
  %23 = sub i64 %length.0, 2
  call void %22(ptr %3, i64 %23)
  call void @Lexer_advance(ptr %0)
  %token_group = alloca ptr, align 8
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Token_, ptr null, i32 1) to i32))
  call void @Array_Token__constructor(ptr %24, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx10 = getelementptr inbounds %Array_Token_, ptr %24, i32 0, i32 1
  %memberidx11 = getelementptr inbounds %Array_Token_, ptr %24, i32 0, i32 2
  store i64 0, ptr %memberidx11, align 4
  store ptr %24, ptr %token_group, align 8
  %active_open_pars = alloca i64, align 8
  store i64 0, ptr %active_open_pars, align 4
  %25 = load i8, ptr %memberidx4, align 1
  %26 = icmp eq i8 %25, 40
  br i1 %26, label %if.entry13, label %else14

ifend8:                                           ; preds = %ifend
  %27 = add i64 %length.0, 1
  %28 = icmp eq i8 %7, 92
  %29 = load ptr, ptr %4, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %29, i32 0, i32 2
  %30 = load ptr, ptr %memberidx37, align 8
  call void %30(ptr %4, i8 %7)
  call void @Lexer_advance(ptr %0)
  %31 = call i1 @Lexer_eof(ptr %0)
  %32 = xor i1 %31, true
  br i1 %32, label %while.entry, label %while.end

if.entry13:                                       ; preds = %if.entry6
  call void @Lexer_advance(ptr %0)
  %33 = load i8, ptr %memberidx4, align 1
  %34 = icmp ne i8 %33, 41
  %35 = load i64, ptr %active_open_pars, align 4
  %36 = icmp ne i64 %35, 0
  %37 = or i1 %34, %36
  %38 = call i1 @Lexer_eof(ptr %0)
  %39 = xor i1 %38, true
  %40 = and i1 %37, %39
  br i1 %40, label %while.entry16, label %ifend15

else14:                                           ; preds = %if.entry6
  %41 = load ptr, ptr %token_group, align 8
  %42 = load ptr, ptr %41, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i32 0, i32 2
  %43 = load ptr, ptr %memberidx30, align 8
  %44 = load ptr, ptr %0, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call ptr %45(ptr %0)
  call void %43(ptr %41, ptr %46)
  br label %ifend15

ifend15:                                          ; preds = %if.entry13, %ifend26, %else14
  call void @Lexer_advance(ptr %0)
  %47 = load ptr, ptr %token_group, align 8
  %48 = load ptr, ptr %47, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %48, i32 0, i32 2
  %49 = load ptr, ptr %memberidx32, align 8
  %50 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %51 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %memberidx33 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 5
  %52 = load i64, ptr %memberidx33, align 4
  %memberidx34 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 6
  %53 = load i64, ptr %memberidx34, align 4
  call void @FloRange_constructor(ptr %51, i64 0, i64 0, i64 %52, i64 %53)
  call void @Token_constructor(ptr %50, i64 44, ptr %51)
  call void %49(ptr %47, ptr %50)
  %54 = load ptr, ptr %2, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i32 0, i32 2
  %55 = load ptr, ptr %memberidx35, align 8
  %56 = load ptr, ptr %token_group, align 8
  call void %55(ptr %2, ptr %56)
  br label %while.entry

while.entry16:                                    ; preds = %ifend26, %if.entry13
  %57 = load i8, ptr %memberidx4, align 1
  %58 = icmp eq i8 %57, 40
  br i1 %58, label %if.entry20, label %ifend22

if.entry20:                                       ; preds = %while.entry16
  %59 = load i64, ptr %active_open_pars, align 4
  %60 = add i64 %59, 1
  store i64 %60, ptr %active_open_pars, align 4
  br label %ifend22

ifend22:                                          ; preds = %while.entry16, %if.entry20
  %61 = load i8, ptr %memberidx4, align 1
  %62 = icmp eq i8 %61, 41
  br i1 %62, label %if.entry24, label %ifend26

if.entry24:                                       ; preds = %ifend22
  %63 = load i64, ptr %active_open_pars, align 4
  %64 = add i64 %63, -1
  store i64 %64, ptr %active_open_pars, align 4
  br label %ifend26

ifend26:                                          ; preds = %ifend22, %if.entry24
  %65 = load ptr, ptr %token_group, align 8
  %66 = load ptr, ptr %65, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i32 0, i32 2
  %67 = load ptr, ptr %memberidx27, align 8
  %68 = load ptr, ptr %0, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = call ptr %69(ptr %0)
  call void %67(ptr %65, ptr %70)
  call void @Lexer_advance(ptr %0)
  %71 = load i8, ptr %memberidx4, align 1
  %72 = icmp ne i8 %71, 41
  %73 = load i64, ptr %active_open_pars, align 4
  %74 = icmp ne i64 %73, 0
  %75 = or i1 %72, %74
  %76 = call i1 @Lexer_eof(ptr %0)
  %77 = xor i1 %76, true
  %78 = and i1 %75, %77
  br i1 %78, label %while.entry16, label %ifend15
}

define i8 @Lexer_peek(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 4
  %3 = load i64, ptr %memberidx, align 4
  %4 = add i64 %3, %1
  %memberidx1 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp slt i64 %4, %6
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi i8 [ %10, %if.entry ], [ 0, %2 ]
  ret i8 %common.ret.op

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %5, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 8
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = call i8 %9(ptr %5, i64 %4)
  br label %common.ret
}

define ptr @Lexer_get_range(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = sub i64 %4, %1
  %6 = add i64 %5, 1
  %7 = add i64 %4, 1
  %memberidx2 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 5
  %8 = load i64, ptr %memberidx2, align 4
  %9 = sub i64 %8, %1
  %memberidx3 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 6
  %10 = load i64, ptr %memberidx3, align 4
  call void @FloRange_constructor(ptr %3, i64 %6, i64 %7, i64 %9, i64 %10)
  ret ptr %3
}

define ptr @Lexer_mult_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 61
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %6, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 10, ptr %5)
  br label %common.ret

ifend:                                            ; preds = %1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %6, i64 4, ptr %7)
  br label %common.ret
}

define ptr @Lexer_div_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 61
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %6, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 13, ptr %5)
  br label %common.ret

ifend:                                            ; preds = %1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %6, i64 7, ptr %7)
  br label %common.ret
}

define ptr @Lexer_lt_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 61
  br i1 %3, label %if.entry, label %else

common.ret:                                       ; preds = %ifend6, %if.entry4, %ifend3, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %10, %ifend3 ], [ %12, %if.entry4 ], [ %14, %ifend6 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 41, ptr %5)
  br label %common.ret

else:                                             ; preds = %1
  %6 = call i8 @Lexer_peek(ptr %0, i64 1)
  %7 = icmp eq i8 %6, 60
  br i1 %7, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %else
  call void @Lexer_advance(ptr %0)
  %8 = call i8 @Lexer_peek(ptr %0, i64 1)
  %9 = icmp eq i8 %8, 61
  br i1 %9, label %if.entry4, label %ifend6

ifend3:                                           ; preds = %else
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %11 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %10, i64 40, ptr %11)
  br label %common.ret

if.entry4:                                        ; preds = %if.entry1
  call void @Lexer_advance(ptr %0)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %13 = call ptr @Lexer_get_range(ptr %0, i64 3)
  call void @Token_constructor(ptr %12, i64 20, ptr %13)
  br label %common.ret

ifend6:                                           ; preds = %if.entry1
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %15 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %14, i64 46, ptr %15)
  br label %common.ret
}

define void @IntToken_constructor(ptr %0, i64 %1, ptr %2) {
  call void @Token_constructor(ptr %0, i64 29, ptr %2)
  %memberidx = getelementptr inbounds %IntToken, ptr %0, i32 0, i32 2
  store i64 %1, ptr %memberidx, align 4
  ret void
}

define ptr @Lexer_base_int_token(ptr %0, i64 %1) {
  call void @Lexer_advance(ptr %0)
  %3 = call i8 @Lexer_peek(ptr %0, i64 1)
  %4 = call i8 @capitalize(i8 %3)
  %5 = call i1 @in_base_range(i8 %4, i64 %1)
  %6 = call i1 @Lexer_eof(ptr %0)
  %7 = xor i1 %6, true
  %8 = and i1 %5, %7
  br i1 %8, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %length.0 = phi i64 [ 3, %2 ], [ %19, %ifend ]
  %value.0 = phi i64 [ 0, %2 ], [ %18, %ifend ]
  %current_char.0 = phi i8 [ %4, %2 ], [ %21, %ifend ]
  %9 = mul i64 %value.0, %1
  %add = alloca i8, align 1
  %10 = sub i8 %current_char.0, 48
  store i8 %10, ptr %add, align 1
  %11 = icmp sge i8 %current_char.0, 65
  br i1 %11, label %if.entry, label %ifend

while.end:                                        ; preds = %ifend, %2
  %length.1 = phi i64 [ %19, %ifend ], [ 3, %2 ]
  %value.1 = phi i64 [ %18, %ifend ], [ 0, %2 ]
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntToken, ptr null, i32 1) to i32))
  %13 = call ptr @Lexer_get_range(ptr %0, i64 %length.1)
  call void @IntToken_constructor(ptr %12, i64 %value.1, ptr %13)
  ret ptr %12

if.entry:                                         ; preds = %while.entry
  %14 = sub i8 %current_char.0, 65
  %15 = add i8 %14, 10
  store i8 %15, ptr %add, align 1
  br label %ifend

ifend:                                            ; preds = %while.entry, %if.entry
  %16 = load i8, ptr %add, align 1
  %17 = sext i8 %16 to i64
  %18 = add i64 %9, %17
  %19 = add i64 %length.0, 1
  call void @Lexer_advance(ptr %0)
  %20 = call i8 @Lexer_peek(ptr %0, i64 1)
  %21 = call i8 @capitalize(i8 %20)
  %22 = call i1 @in_base_range(i8 %21, i64 %1)
  %23 = call i1 @Lexer_eof(ptr %0)
  %24 = xor i1 %23, true
  %25 = and i1 %22, %24
  br i1 %25, label %while.entry, label %while.end
}

define ptr @Lexer_identifier_token(ptr %0) {
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 4
  %2 = load i64, ptr %memberidx, align 4
  %3 = call i8 @Lexer_peek(ptr %0, i64 1)
  %4 = call i8 @Lexer_peek(ptr %0, i64 1)
  %5 = call i1 @is_identifier_char(i8 %4)
  %6 = call i1 @is_number_char(i8 %4)
  %7 = or i1 %5, %6
  %8 = call i1 @Lexer_eof(ptr %0)
  %9 = xor i1 %8, true
  %10 = and i1 %7, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %length.0 = phi i64 [ 1, %1 ], [ %11, %while.entry ]
  %11 = add i64 %length.0, 1
  call void @Lexer_advance(ptr %0)
  %12 = call i8 @Lexer_peek(ptr %0, i64 1)
  %13 = call i1 @is_identifier_char(i8 %12)
  %14 = call i1 @is_number_char(i8 %12)
  %15 = or i1 %13, %14
  %16 = call i1 @Lexer_eof(ptr %0)
  %17 = xor i1 %16, true
  %18 = and i1 %15, %17
  br i1 %18, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %length.1 = phi i64 [ %11, %while.entry ], [ 1, %1 ]
  %value = alloca ptr, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 2
  %19 = load ptr, ptr %memberidx1, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %20, i32 0, i32 7
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = call ptr %21(ptr %19, i64 %2, i64 %length.1)
  store ptr %22, ptr %value, align 8
  %range = alloca ptr, align 8
  %23 = call ptr @Lexer_get_range(ptr %0, i64 %length.1)
  store ptr %23, ptr %range, align 8
  %keyword = alloca i64, align 8
  store i64 0, ptr %keyword, align 4
  %24 = load ptr, ptr %value, align 8
  %25 = call i64 @string_to_kw_token(ptr %24)
  store i64 %25, ptr %keyword, align 4
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %if.entry, label %ifend

if.entry:                                         ; preds = %while.end
  %27 = call i8 @Lexer_peek(ptr %0, i64 1)
  %28 = icmp eq i8 %27, 61
  br i1 %28, label %if.entry3, label %ifend5

common.ret:                                       ; preds = %ifend5, %ifend
  %common.ret.op = phi ptr [ %29, %ifend ], [ %34, %ifend5 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %while.end
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IdentifierToken, ptr null, i32 1) to i32))
  %30 = load ptr, ptr %value, align 8
  %31 = load ptr, ptr %range, align 8
  call void @IdentifierToken_constructor(ptr %29, ptr %30, ptr %31)
  br label %common.ret

if.entry3:                                        ; preds = %if.entry
  %32 = load i64, ptr %keyword, align 4
  %33 = icmp eq i64 %32, 52
  br i1 %33, label %if.entry6, label %ifend8

ifend5:                                           ; preds = %if.entry12, %ifend11, %if.entry
  %34 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %35 = load i64, ptr %keyword, align 4
  %36 = load ptr, ptr %range, align 8
  call void @Token_constructor(ptr %34, i64 %35, ptr %36)
  br label %common.ret

if.entry6:                                        ; preds = %if.entry3
  call void @Lexer_advance(ptr %0)
  store i64 16, ptr %keyword, align 4
  br label %ifend8

ifend8:                                           ; preds = %if.entry3, %if.entry6
  %37 = load i64, ptr %keyword, align 4
  %38 = icmp eq i64 %37, 53
  br i1 %38, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend8
  call void @Lexer_advance(ptr %0)
  store i64 17, ptr %keyword, align 4
  br label %ifend11

ifend11:                                          ; preds = %ifend8, %if.entry9
  %39 = load i64, ptr %keyword, align 4
  %40 = icmp eq i64 %39, 54
  br i1 %40, label %if.entry12, label %ifend5

if.entry12:                                       ; preds = %ifend11
  call void @Lexer_advance(ptr %0)
  store i64 18, ptr %keyword, align 4
  br label %ifend5
}

define void @CharToken_constructor(ptr %0, i8 %1, ptr %2) {
  call void @Token_constructor(ptr %0, i64 33, ptr %2)
  %memberidx = getelementptr inbounds %CharToken, ptr %0, i32 0, i32 2
  store i8 %1, ptr %memberidx, align 1
  ret void
}

define ptr @Lexer_char_token(ptr %0) {
  call void @Lexer_advance(ptr %0)
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 1
  %2 = load i8, ptr %memberidx, align 1
  %3 = icmp eq i8 %2, 92
  br i1 %3, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = load i8, ptr %memberidx, align 1
  %5 = call i8 @get_escape_char(i8 %4)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %length.0 = phi i64 [ 5, %if.entry ], [ 3, %1 ]
  %value.0 = phi i8 [ %5, %if.entry ], [ %2, %1 ]
  call void @Lexer_advance(ptr %0)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CharToken, ptr null, i32 1) to i32))
  %7 = call ptr @Lexer_get_range(ptr %0, i64 %length.0)
  call void @CharToken_constructor(ptr %6, i8 %value.0, ptr %7)
  ret ptr %6
}

define ptr @Lexer_plus_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 43
  br i1 %3, label %if.entry, label %else

common.ret:                                       ; preds = %if.entry1, %ifend3, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %10, %ifend3 ], [ %8, %if.entry1 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 21, ptr %5)
  br label %common.ret

else:                                             ; preds = %1
  %6 = call i8 @Lexer_peek(ptr %0, i64 1)
  %7 = icmp eq i8 %6, 61
  br i1 %7, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %else
  call void @Lexer_advance(ptr %0)
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %9 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %8, i64 12, ptr %9)
  br label %common.ret

ifend3:                                           ; preds = %else
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %11 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %10, i64 6, ptr %11)
  br label %common.ret
}

define ptr @Lexer_minus_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 45
  br i1 %3, label %if.entry, label %else

common.ret:                                       ; preds = %if.entry1, %ifend3, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %10, %ifend3 ], [ %8, %if.entry1 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 22, ptr %5)
  br label %common.ret

else:                                             ; preds = %1
  %6 = call i8 @Lexer_peek(ptr %0, i64 1)
  %7 = icmp eq i8 %6, 61
  br i1 %7, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %else
  call void @Lexer_advance(ptr %0)
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %9 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %8, i64 11, ptr %9)
  br label %common.ret

ifend3:                                           ; preds = %else
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %11 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %10, i64 5, ptr %11)
  br label %common.ret
}

define ptr @Lexer_pow_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 61
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %6, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 15, ptr %5)
  br label %common.ret

ifend:                                            ; preds = %1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %6, i64 9, ptr %7)
  br label %common.ret
}

define ptr @Lexer_numeric_token(ptr %0) {
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 1
  %2 = load i8, ptr %memberidx, align 1
  %3 = icmp eq i8 %2, 48
  %4 = call i8 @Lexer_peek(ptr %0, i64 1)
  %5 = icmp eq i8 %4, 98
  %6 = and i1 %3, %5
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %true_block, %false_block, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %7, %if.entry ], [ %13, %if.entry2 ], [ %19, %if.entry6 ], [ %49, %true_block ], [ %56, %false_block ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %7 = call ptr @Lexer_base_int_token(ptr %0, i64 2)
  br label %common.ret

ifend:                                            ; preds = %1
  %8 = load i8, ptr %memberidx, align 1
  %9 = icmp eq i8 %8, 48
  %10 = call i8 @Lexer_peek(ptr %0, i64 1)
  %11 = icmp eq i8 %10, 111
  %12 = and i1 %9, %11
  br i1 %12, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %13 = call ptr @Lexer_base_int_token(ptr %0, i64 8)
  br label %common.ret

ifend4:                                           ; preds = %ifend
  %14 = load i8, ptr %memberidx, align 1
  %15 = icmp eq i8 %14, 48
  %16 = call i8 @Lexer_peek(ptr %0, i64 1)
  %17 = icmp eq i8 %16, 120
  %18 = and i1 %15, %17
  br i1 %18, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %19 = call ptr @Lexer_base_int_token(ptr %0, i64 16)
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  %20 = call i8 @Lexer_peek(ptr %0, i64 1)
  %21 = call i1 @is_number_char(i8 %20)
  %22 = icmp eq i8 %20, 46
  %23 = or i1 %21, %22
  %24 = call i1 @Lexer_eof(ptr %0)
  %25 = xor i1 %24, true
  %26 = and i1 %23, %25
  br i1 %26, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend15, %ifend8
  %length.0 = phi i64 [ 1, %ifend8 ], [ %41, %ifend15 ]
  %is_float.0 = phi i1 [ false, %ifend8 ], [ %is_float.2, %ifend15 ]
  %next_char.0 = phi i8 [ %20, %ifend8 ], [ %42, %ifend15 ]
  %27 = icmp eq i8 %next_char.0, 46
  %28 = call i8 @Lexer_peek(ptr %0, i64 2)
  %29 = call i1 @is_number_char(i8 %28)
  %30 = xor i1 %29, true
  %31 = or i1 %is_float.0, %30
  %32 = and i1 %27, %31
  br i1 %32, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend15, %ifend8
  %length.1 = phi i64 [ %length.0, %while.entry ], [ %41, %ifend15 ], [ 1, %ifend8 ]
  %is_float.1 = phi i1 [ %is_float.0, %while.entry ], [ %is_float.2, %ifend15 ], [ false, %ifend8 ]
  %range = alloca ptr, align 8
  %33 = call ptr @Lexer_get_range(ptr %0, i64 %length.1)
  store ptr %33, ptr %range, align 8
  %str_value = alloca ptr, align 8
  %memberidx16 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 2
  %34 = load ptr, ptr %memberidx16, align 8
  %35 = load ptr, ptr %34, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i32 0, i32 7
  %36 = load ptr, ptr %memberidx17, align 8
  %37 = load i64, ptr %33, align 4
  %38 = call ptr %36(ptr %34, i64 %37, i64 %length.1)
  store ptr %38, ptr %str_value, align 8
  br i1 %is_float.1, label %true_block, label %false_block

ifend11:                                          ; preds = %while.entry
  %39 = load i8, ptr %memberidx, align 1
  %40 = icmp eq i8 %39, 46
  br i1 %40, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend11
  br label %ifend15

ifend15:                                          ; preds = %ifend11, %if.entry13
  %is_float.2 = phi i1 [ true, %if.entry13 ], [ %is_float.0, %ifend11 ]
  %41 = add i64 %length.0, 1
  call void @Lexer_advance(ptr %0)
  %42 = call i8 @Lexer_peek(ptr %0, i64 1)
  %43 = call i1 @is_number_char(i8 %42)
  %44 = icmp eq i8 %42, 46
  %45 = or i1 %43, %44
  %46 = call i1 @Lexer_eof(ptr %0)
  %47 = xor i1 %46, true
  %48 = and i1 %45, %47
  br i1 %48, label %while.entry, label %while.end

true_block:                                       ; preds = %while.end
  %49 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloatToken, ptr null, i32 1) to i32))
  %50 = load ptr, ptr %str_value, align 8
  %51 = load ptr, ptr %50, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i32 0, i32 11
  %52 = load ptr, ptr %memberidx19, align 8
  %53 = call ptr %52(ptr %50)
  %54 = call double @atof(ptr %53)
  tail call void @free(ptr %53)
  %55 = load ptr, ptr %range, align 8
  call void @FloatToken_constructor(ptr %49, double %54, ptr %55)
  br label %common.ret

false_block:                                      ; preds = %while.end
  %56 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntToken, ptr null, i32 1) to i32))
  %57 = load ptr, ptr %str_value, align 8
  %58 = load ptr, ptr %57, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i32 0, i32 11
  %59 = load ptr, ptr %memberidx20, align 8
  %60 = call ptr %59(ptr %57)
  %61 = call i64 @atol(ptr %60)
  tail call void @free(ptr %60)
  %62 = load ptr, ptr %range, align 8
  call void @IntToken_constructor(ptr %56, i64 %61, ptr %62)
  br label %common.ret
}

define i1 @Lexer_eof(ptr %0) {
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 4
  %2 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 2
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx2, align 4
  %5 = icmp sge i64 %2, %4
  ret i1 %5
}

define ptr @Lexer_tokenize(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 3
  store ptr %2, ptr %memberidx1, align 8
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Token_, ptr null, i32 1) to i32))
  call void @Array_Token__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %4, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_Token_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %5 = call i1 @Lexer_eof(ptr %0)
  %6 = xor i1 %5, true
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx5 = getelementptr inbounds %Array_FloError_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx5, align 4
  %9 = icmp eq i64 %8, 0
  %10 = and i1 %6, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %3
  %11 = load ptr, ptr %4, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx6, align 8
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr %14(ptr %0)
  call void %12(ptr %4, ptr %15)
  call void @Lexer_advance(ptr %0)
  %16 = call i1 @Lexer_eof(ptr %0)
  %17 = xor i1 %16, true
  %18 = load ptr, ptr %memberidx1, align 8
  %memberidx9 = getelementptr inbounds %Array_FloError_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx9, align 4
  %20 = icmp eq i64 %19, 0
  %21 = and i1 %17, %20
  br i1 %21, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %3
  %22 = load ptr, ptr %4, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %memberidx10, align 8
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %memberidx11 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 5
  %26 = load i64, ptr %memberidx11, align 4
  %memberidx12 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 6
  %27 = load i64, ptr %memberidx12, align 4
  call void @FloRange_constructor(ptr %25, i64 0, i64 0, i64 %26, i64 %27)
  call void @Token_constructor(ptr %24, i64 44, ptr %25)
  call void %23(ptr %4, ptr %24)
  ret ptr %4
}

define ptr @Lexer_mod_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 61
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %6, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 14, ptr %5)
  br label %common.ret

ifend:                                            ; preds = %1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %6, i64 8, ptr %7)
  br label %common.ret
}

define ptr @Lexer_gt_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 61
  br i1 %3, label %if.entry, label %else

common.ret:                                       ; preds = %ifend6, %if.entry4, %ifend3, %if.entry
  %common.ret.op = phi ptr [ %4, %if.entry ], [ %10, %ifend3 ], [ %12, %if.entry4 ], [ %14, %ifend6 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %5 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %4, i64 42, ptr %5)
  br label %common.ret

else:                                             ; preds = %1
  %6 = call i8 @Lexer_peek(ptr %0, i64 1)
  %7 = icmp eq i8 %6, 62
  br i1 %7, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %else
  call void @Lexer_advance(ptr %0)
  %8 = call i8 @Lexer_peek(ptr %0, i64 1)
  %9 = icmp eq i8 %8, 61
  br i1 %9, label %if.entry4, label %ifend6

ifend3:                                           ; preds = %else
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %11 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %10, i64 39, ptr %11)
  br label %common.ret

if.entry4:                                        ; preds = %if.entry1
  call void @Lexer_advance(ptr %0)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %13 = call ptr @Lexer_get_range(ptr %0, i64 3)
  call void @Token_constructor(ptr %12, i64 19, ptr %13)
  br label %common.ret

ifend6:                                           ; preds = %if.entry1
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %15 = call ptr @Lexer_get_range(ptr %0, i64 2)
  call void @Token_constructor(ptr %14, i64 47, ptr %15)
  br label %common.ret
}

define ptr @Lexer_dot_token(ptr %0) {
  %2 = call i8 @Lexer_peek(ptr %0, i64 1)
  %3 = icmp eq i8 %2, 46
  br i1 %3, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %4 = call i8 @Lexer_peek(ptr %0, i64 1)
  %5 = icmp eq i8 %4, 46
  br i1 %5, label %if.entry1, label %ifend

ifend:                                            ; preds = %if.entry1, %if.entry, %1
  %token.0 = phi i64 [ 50, %if.entry1 ], [ 49, %if.entry ], [ 48, %1 ]
  %length.0 = phi i64 [ 3, %if.entry1 ], [ 2, %if.entry ], [ 1, %1 ]
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = call ptr @Lexer_get_range(ptr %0, i64 %length.0)
  call void @Token_constructor(ptr %6, i64 %token.0, ptr %7)
  ret ptr %6

if.entry1:                                        ; preds = %if.entry
  call void @Lexer_advance(ptr %0)
  br label %ifend
}

define ptr @Lexer_lex_token(ptr %0) {
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 1
  %2 = load i8, ptr %memberidx, align 1
  %3 = icmp eq i8 %2, 32
  %4 = icmp eq i8 %2, 9
  %5 = or i1 %3, %4
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend91, %if.entry89, %if.entry86, %if.entry83, %if.entry80, %if.entry77, %if.entry74, %if.entry71, %if.entry68, %if.entry65, %if.entry62, %if.entry59, %if.entry56, %if.entry53, %if.entry50, %if.entry47, %if.entry44, %ifend42, %if.entry40, %if.entry34, %if.entry31, %if.entry28, %if.entry25, %if.entry22, %if.entry19, %if.entry16, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry
  %common.ret.op = phi ptr [ %8, %if.entry ], [ %10, %if.entry4 ], [ %12, %if.entry7 ], [ %14, %if.entry10 ], [ %16, %if.entry13 ], [ %19, %if.entry16 ], [ %22, %if.entry19 ], [ %25, %if.entry22 ], [ %27, %if.entry25 ], [ %29, %if.entry28 ], [ %31, %if.entry31 ], [ %33, %if.entry34 ], [ %39, %if.entry40 ], [ %40, %ifend42 ], [ %41, %if.entry44 ], [ %44, %if.entry47 ], [ %47, %if.entry50 ], [ %50, %if.entry53 ], [ %53, %if.entry56 ], [ %56, %if.entry59 ], [ %61, %if.entry62 ], [ %64, %if.entry65 ], [ %66, %if.entry68 ], [ %69, %if.entry71 ], [ %72, %if.entry74 ], [ %74, %if.entry77 ], [ %76, %if.entry80 ], [ %78, %if.entry83 ], [ %80, %if.entry86 ], [ %82, %if.entry89 ], [ null, %ifend91 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Lexer_advance(ptr %0)
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call ptr %7(ptr %0)
  br label %common.ret

ifend:                                            ; preds = %1
  %9 = call i1 @is_identifier_char(i8 %2)
  br i1 %9, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %10 = call ptr @Lexer_identifier_token(ptr %0)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %11 = icmp eq i8 %2, 34
  br i1 %11, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %ifend6
  %12 = call ptr @Lexer_string_token(ptr %0)
  br label %common.ret

ifend9:                                           ; preds = %ifend6
  %13 = call i1 @is_number_char(i8 %2)
  br i1 %13, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend9
  %14 = call ptr @Lexer_numeric_token(ptr %0)
  br label %common.ret

ifend12:                                          ; preds = %ifend9
  %15 = icmp eq i8 %2, 58
  br i1 %15, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend12
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %17 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %16, i64 1, ptr %17)
  br label %common.ret

ifend15:                                          ; preds = %ifend12
  %18 = icmp eq i8 %2, 59
  br i1 %18, label %if.entry16, label %ifend18

if.entry16:                                       ; preds = %ifend15
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %20 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %19, i64 2, ptr %20)
  br label %common.ret

ifend18:                                          ; preds = %ifend15
  %21 = icmp eq i8 %2, 44
  br i1 %21, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend18
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %23 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %22, i64 3, ptr %23)
  br label %common.ret

ifend21:                                          ; preds = %ifend18
  %24 = icmp eq i8 %2, 43
  br i1 %24, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend21
  %25 = call ptr @Lexer_plus_token(ptr %0)
  br label %common.ret

ifend24:                                          ; preds = %ifend21
  %26 = icmp eq i8 %2, 45
  br i1 %26, label %if.entry25, label %ifend27

if.entry25:                                       ; preds = %ifend24
  %27 = call ptr @Lexer_minus_token(ptr %0)
  br label %common.ret

ifend27:                                          ; preds = %ifend24
  %28 = icmp eq i8 %2, 42
  br i1 %28, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend27
  %29 = call ptr @Lexer_mult_token(ptr %0)
  br label %common.ret

ifend30:                                          ; preds = %ifend27
  %30 = icmp eq i8 %2, 37
  br i1 %30, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend30
  %31 = call ptr @Lexer_mod_token(ptr %0)
  br label %common.ret

ifend33:                                          ; preds = %ifend30
  %32 = icmp eq i8 %2, 94
  br i1 %32, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend33
  %33 = call ptr @Lexer_pow_token(ptr %0)
  br label %common.ret

ifend36:                                          ; preds = %ifend33
  %34 = icmp eq i8 %2, 47
  br i1 %34, label %if.entry37, label %ifend39

if.entry37:                                       ; preds = %ifend36
  %35 = call i1 @Lexer_skip_comment(ptr %0)
  br i1 %35, label %if.entry40, label %ifend42

ifend39:                                          ; preds = %ifend36
  %36 = icmp eq i8 %2, 40
  br i1 %36, label %if.entry44, label %ifend46

if.entry40:                                       ; preds = %if.entry37
  call void @Lexer_advance(ptr %0)
  %37 = load ptr, ptr %0, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr %38(ptr %0)
  br label %common.ret

ifend42:                                          ; preds = %if.entry37
  %40 = call ptr @Lexer_div_token(ptr %0)
  br label %common.ret

if.entry44:                                       ; preds = %ifend39
  %41 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %42 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %41, i64 23, ptr %42)
  br label %common.ret

ifend46:                                          ; preds = %ifend39
  %43 = icmp eq i8 %2, 41
  br i1 %43, label %if.entry47, label %ifend49

if.entry47:                                       ; preds = %ifend46
  %44 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %45 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %44, i64 24, ptr %45)
  br label %common.ret

ifend49:                                          ; preds = %ifend46
  %46 = icmp eq i8 %2, 123
  br i1 %46, label %if.entry50, label %ifend52

if.entry50:                                       ; preds = %ifend49
  %47 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %48 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %47, i64 25, ptr %48)
  br label %common.ret

ifend52:                                          ; preds = %ifend49
  %49 = icmp eq i8 %2, 125
  br i1 %49, label %if.entry53, label %ifend55

if.entry53:                                       ; preds = %ifend52
  %50 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %51 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %50, i64 26, ptr %51)
  br label %common.ret

ifend55:                                          ; preds = %ifend52
  %52 = icmp eq i8 %2, 91
  br i1 %52, label %if.entry56, label %ifend58

if.entry56:                                       ; preds = %ifend55
  %53 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %54 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %53, i64 27, ptr %54)
  br label %common.ret

ifend58:                                          ; preds = %ifend55
  %55 = icmp eq i8 %2, 93
  br i1 %55, label %if.entry59, label %ifend61

if.entry59:                                       ; preds = %ifend58
  %56 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %57 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %56, i64 28, ptr %57)
  br label %common.ret

ifend61:                                          ; preds = %ifend58
  %58 = icmp eq i8 %2, 10
  %59 = icmp eq i8 %2, 13
  %60 = or i1 %58, %59
  br i1 %60, label %if.entry62, label %ifend64

if.entry62:                                       ; preds = %ifend61
  %61 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %62 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %61, i64 31, ptr %62)
  br label %common.ret

ifend64:                                          ; preds = %ifend61
  %63 = icmp eq i8 %2, 39
  br i1 %63, label %if.entry65, label %ifend67

if.entry65:                                       ; preds = %ifend64
  %64 = call ptr @Lexer_char_token(ptr %0)
  br label %common.ret

ifend67:                                          ; preds = %ifend64
  %65 = icmp eq i8 %2, 63
  br i1 %65, label %if.entry68, label %ifend70

if.entry68:                                       ; preds = %ifend67
  %66 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %67 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %66, i64 34, ptr %67)
  br label %common.ret

ifend70:                                          ; preds = %ifend67
  %68 = icmp eq i8 %2, 38
  br i1 %68, label %if.entry71, label %ifend73

if.entry71:                                       ; preds = %ifend70
  %69 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %70 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @Token_constructor(ptr %69, i64 35, ptr %70)
  br label %common.ret

ifend73:                                          ; preds = %ifend70
  %71 = icmp eq i8 %2, 61
  br i1 %71, label %if.entry74, label %ifend76

if.entry74:                                       ; preds = %ifend73
  %72 = call ptr @Lexer_eq_token(ptr %0)
  br label %common.ret

ifend76:                                          ; preds = %ifend73
  %73 = icmp eq i8 %2, 33
  br i1 %73, label %if.entry77, label %ifend79

if.entry77:                                       ; preds = %ifend76
  %74 = call ptr @Lexer_neq_token(ptr %0)
  br label %common.ret

ifend79:                                          ; preds = %ifend76
  %75 = icmp eq i8 %2, 62
  br i1 %75, label %if.entry80, label %ifend82

if.entry80:                                       ; preds = %ifend79
  %76 = call ptr @Lexer_gt_token(ptr %0)
  br label %common.ret

ifend82:                                          ; preds = %ifend79
  %77 = icmp eq i8 %2, 60
  br i1 %77, label %if.entry83, label %ifend85

if.entry83:                                       ; preds = %ifend82
  %78 = call ptr @Lexer_lt_token(ptr %0)
  br label %common.ret

ifend85:                                          ; preds = %ifend82
  %79 = icmp eq i8 %2, 46
  br i1 %79, label %if.entry86, label %ifend88

if.entry86:                                       ; preds = %ifend85
  %80 = call ptr @Lexer_dot_token(ptr %0)
  br label %common.ret

ifend88:                                          ; preds = %ifend85
  %81 = icmp eq i8 %2, 0
  br i1 %81, label %if.entry89, label %ifend91

if.entry89:                                       ; preds = %ifend88
  %82 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %83 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %memberidx92 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 5
  %84 = load i64, ptr %memberidx92, align 4
  %memberidx93 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 6
  %85 = load i64, ptr %memberidx93, align 4
  call void @FloRange_constructor(ptr %83, i64 0, i64 0, i64 %84, i64 %85)
  call void @Token_constructor(ptr %82, i64 44, ptr %83)
  br label %common.ret

ifend91:                                          ; preds = %ifend88
  %memberidx94 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 3
  %86 = load ptr, ptr %memberidx94, align 8
  %87 = load ptr, ptr %86, align 8
  %memberidx95 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %87, i32 0, i32 2
  %88 = load ptr, ptr %memberidx95, align 8
  %89 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloError, ptr null, i32 1) to i32))
  %memberidx96 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 2
  %90 = load ptr, ptr %memberidx96, align 8
  %91 = load ptr, ptr %90, align 8
  %memberidx97 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %91, i32 0, i32 7
  %92 = load ptr, ptr %memberidx97, align 8
  %memberidx98 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 4
  %93 = load i64, ptr %memberidx98, align 4
  %94 = call ptr %92(ptr %90, i64 %93, i64 1)
  %95 = load ptr, ptr %94, align 8
  %memberidx99 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %95, i32 0, i32 11
  %96 = load ptr, ptr %memberidx99, align 8
  %97 = call ptr %96(ptr %94)
  %98 = alloca ptr, align 8
  %99 = call i64 (ptr, ptr, ...) @asprintf(ptr %98, ptr @79, ptr %97)
  %100 = load ptr, ptr %98, align 8
  %101 = call ptr @string_from_bytes(ptr %100, i64 %99)
  %102 = call ptr @Lexer_get_range(ptr %0, i64 1)
  call void @FloError_constructor(ptr %89, i64 0, ptr %101, ptr %102)
  call void %88(ptr %86, ptr %89)
  br label %common.ret
}

define void @Lexer_constructor(ptr %0) {
  store ptr @VTableLexer, ptr %0, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 4
  store i64 -1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 6
  store i64 1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Lexer, ptr %0, i32 0, i32 5
  store i64 0, ptr %memberidx2, align 4
  ret void
}

define i1 @in_base_range(i8 %0, i64 %1) {
  %3 = icmp slt i64 %1, 10
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi i1 [ %8, %if.entry ], [ %18, %ifend ]
  ret i1 %common.ret.op

if.entry:                                         ; preds = %2
  %4 = icmp sge i8 %0, 48
  %5 = sext i8 %0 to i64
  %6 = add i64 %1, 48
  %7 = icmp sle i64 %5, %6
  %8 = and i1 %4, %7
  br label %common.ret

ifend:                                            ; preds = %2
  %9 = icmp sge i8 %0, 48
  %10 = sext i8 %0 to i64
  %11 = add i64 %1, 48
  %12 = icmp sle i64 %10, %11
  %13 = and i1 %9, %12
  %14 = icmp sge i8 %0, 65
  %15 = add i64 %1, 65
  %16 = icmp sle i64 %10, %15
  %17 = and i1 %14, %16
  %18 = or i1 %13, %17
  br label %common.ret
}

define i8 @capitalize(i8 %0) {
common.ret:
  %1 = icmp sge i8 %0, 97
  %2 = icmp sle i8 %0, 122
  %3 = and i1 %1, %2
  %4 = sub i8 %0, 32
  %common.ret.op = select i1 %3, i8 %4, i8 %0
  ret i8 %common.ret.op
}

define i1 @is_number_char(i8 %0) {
  %2 = icmp sge i8 %0, 48
  %3 = icmp sle i8 %0, 57
  %4 = and i1 %2, %3
  ret i1 %4
}

define void @FloatToken_constructor(ptr %0, double %1, ptr %2) {
  call void @Token_constructor(ptr %0, i64 30, ptr %2)
  %memberidx = getelementptr inbounds %FloatToken, ptr %0, i32 0, i32 2
  store double %1, ptr %memberidx, align 8
  ret void
}

declare double @atof(ptr)

declare void @free(ptr)

declare i64 @atol(ptr)

define i1 @is_identifier_char(i8 %0) {
  %2 = icmp sge i8 %0, 65
  %3 = icmp sle i8 %0, 90
  %4 = and i1 %2, %3
  %5 = icmp sge i8 %0, 97
  %6 = icmp sle i8 %0, 122
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  %9 = icmp eq i8 %0, 95
  %10 = or i1 %8, %9
  ret i1 %10
}

define i64 @string_to_kw_token(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @string_from_bytes(ptr @40, i64 3)
  %5 = call i1 %3(ptr %0, ptr %4)
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend132, %ifend128, %ifend124, %ifend120, %ifend116, %ifend112, %ifend108, %ifend104, %ifend100, %ifend96, %ifend92, %ifend88, %ifend84, %ifend80, %ifend76, %ifend72, %ifend68, %ifend64, %ifend60, %ifend56, %ifend52, %ifend48, %ifend44, %ifend40, %ifend36, %ifend32, %ifend28, %ifend24, %ifend20, %ifend16, %ifend12, %ifend8, %ifend4, %ifend, %1
  %common.ret.op = phi i64 [ 52, %1 ], [ 53, %ifend ], [ 54, %ifend4 ], [ 55, %ifend8 ], [ 56, %ifend12 ], [ 57, %ifend16 ], [ 58, %ifend20 ], [ 59, %ifend24 ], [ 60, %ifend28 ], [ 61, %ifend32 ], [ 62, %ifend36 ], [ 63, %ifend40 ], [ 64, %ifend44 ], [ 65, %ifend48 ], [ 66, %ifend52 ], [ 67, %ifend56 ], [ 68, %ifend60 ], [ 69, %ifend64 ], [ 70, %ifend68 ], [ 71, %ifend72 ], [ 72, %ifend76 ], [ 73, %ifend80 ], [ 74, %ifend84 ], [ 75, %ifend88 ], [ 76, %ifend92 ], [ 77, %ifend96 ], [ 78, %ifend100 ], [ 79, %ifend104 ], [ 80, %ifend108 ], [ 81, %ifend112 ], [ 82, %ifend116 ], [ 83, %ifend120 ], [ 84, %ifend124 ], [ 85, %ifend128 ], [ %spec.select, %ifend132 ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %1
  %6 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr @string_from_bytes(ptr @41, i64 2)
  %9 = call i1 %7(ptr %0, ptr %8)
  br i1 %9, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %10 = load ptr, ptr %0, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 4
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = call ptr @string_from_bytes(ptr @42, i64 3)
  %13 = call i1 %11(ptr %0, ptr %12)
  br i1 %13, label %common.ret, label %ifend8

ifend8:                                           ; preds = %ifend4
  %14 = load ptr, ptr %0, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 4
  %15 = load ptr, ptr %memberidx9, align 8
  %16 = call ptr @string_from_bytes(ptr @43, i64 5)
  %17 = call i1 %15(ptr %0, ptr %16)
  br i1 %17, label %common.ret, label %ifend12

ifend12:                                          ; preds = %ifend8
  %18 = load ptr, ptr %0, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i32 0, i32 4
  %19 = load ptr, ptr %memberidx13, align 8
  %20 = call ptr @string_from_bytes(ptr @44, i64 3)
  %21 = call i1 %19(ptr %0, ptr %20)
  br i1 %21, label %common.ret, label %ifend16

ifend16:                                          ; preds = %ifend12
  %22 = load ptr, ptr %0, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i32 0, i32 4
  %23 = load ptr, ptr %memberidx17, align 8
  %24 = call ptr @string_from_bytes(ptr @45, i64 2)
  %25 = call i1 %23(ptr %0, ptr %24)
  br i1 %25, label %common.ret, label %ifend20

ifend20:                                          ; preds = %ifend16
  %26 = load ptr, ptr %0, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx21, align 8
  %28 = call ptr @string_from_bytes(ptr @46, i64 4)
  %29 = call i1 %27(ptr %0, ptr %28)
  br i1 %29, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend20
  %30 = load ptr, ptr %0, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i32 0, i32 4
  %31 = load ptr, ptr %memberidx25, align 8
  %32 = call ptr @string_from_bytes(ptr @47, i64 4)
  %33 = call i1 %31(ptr %0, ptr %32)
  br i1 %33, label %common.ret, label %ifend28

ifend28:                                          ; preds = %ifend24
  %34 = load ptr, ptr %0, align 8
  %memberidx29 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i32 0, i32 4
  %35 = load ptr, ptr %memberidx29, align 8
  %36 = call ptr @string_from_bytes(ptr @48, i64 2)
  %37 = call i1 %35(ptr %0, ptr %36)
  br i1 %37, label %common.ret, label %ifend32

ifend32:                                          ; preds = %ifend28
  %38 = load ptr, ptr %0, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %38, i32 0, i32 4
  %39 = load ptr, ptr %memberidx33, align 8
  %40 = call ptr @string_from_bytes(ptr @49, i64 2)
  %41 = call i1 %39(ptr %0, ptr %40)
  br i1 %41, label %common.ret, label %ifend36

ifend36:                                          ; preds = %ifend32
  %42 = load ptr, ptr %0, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i32 0, i32 4
  %43 = load ptr, ptr %memberidx37, align 8
  %44 = call ptr @string_from_bytes(ptr @50, i64 3)
  %45 = call i1 %43(ptr %0, ptr %44)
  br i1 %45, label %common.ret, label %ifend40

ifend40:                                          ; preds = %ifend36
  %46 = load ptr, ptr %0, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 4
  %47 = load ptr, ptr %memberidx41, align 8
  %48 = call ptr @string_from_bytes(ptr @51, i64 3)
  %49 = call i1 %47(ptr %0, ptr %48)
  br i1 %49, label %common.ret, label %ifend44

ifend44:                                          ; preds = %ifend40
  %50 = load ptr, ptr %0, align 8
  %memberidx45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i32 0, i32 4
  %51 = load ptr, ptr %memberidx45, align 8
  %52 = call ptr @string_from_bytes(ptr @52, i64 3)
  %53 = call i1 %51(ptr %0, ptr %52)
  br i1 %53, label %common.ret, label %ifend48

ifend48:                                          ; preds = %ifend44
  %54 = load ptr, ptr %0, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i32 0, i32 4
  %55 = load ptr, ptr %memberidx49, align 8
  %56 = call ptr @string_from_bytes(ptr @53, i64 4)
  %57 = call i1 %55(ptr %0, ptr %56)
  br i1 %57, label %common.ret, label %ifend52

ifend52:                                          ; preds = %ifend48
  %58 = load ptr, ptr %0, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i32 0, i32 4
  %59 = load ptr, ptr %memberidx53, align 8
  %60 = call ptr @string_from_bytes(ptr @54, i64 3)
  %61 = call i1 %59(ptr %0, ptr %60)
  br i1 %61, label %common.ret, label %ifend56

ifend56:                                          ; preds = %ifend52
  %62 = load ptr, ptr %0, align 8
  %memberidx57 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i32 0, i32 4
  %63 = load ptr, ptr %memberidx57, align 8
  %64 = call ptr @string_from_bytes(ptr @55, i64 3)
  %65 = call i1 %63(ptr %0, ptr %64)
  br i1 %65, label %common.ret, label %ifend60

ifend60:                                          ; preds = %ifend56
  %66 = load ptr, ptr %0, align 8
  %memberidx61 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i32 0, i32 4
  %67 = load ptr, ptr %memberidx61, align 8
  %68 = call ptr @string_from_bytes(ptr @56, i64 3)
  %69 = call i1 %67(ptr %0, ptr %68)
  br i1 %69, label %common.ret, label %ifend64

ifend64:                                          ; preds = %ifend60
  %70 = load ptr, ptr %0, align 8
  %memberidx65 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i32 0, i32 4
  %71 = load ptr, ptr %memberidx65, align 8
  %72 = call ptr @string_from_bytes(ptr @57, i64 3)
  %73 = call i1 %71(ptr %0, ptr %72)
  br i1 %73, label %common.ret, label %ifend68

ifend68:                                          ; preds = %ifend64
  %74 = load ptr, ptr %0, align 8
  %memberidx69 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %74, i32 0, i32 4
  %75 = load ptr, ptr %memberidx69, align 8
  %76 = call ptr @string_from_bytes(ptr @58, i64 5)
  %77 = call i1 %75(ptr %0, ptr %76)
  br i1 %77, label %common.ret, label %ifend72

ifend72:                                          ; preds = %ifend68
  %78 = load ptr, ptr %0, align 8
  %memberidx73 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %78, i32 0, i32 4
  %79 = load ptr, ptr %memberidx73, align 8
  %80 = call ptr @string_from_bytes(ptr @59, i64 4)
  %81 = call i1 %79(ptr %0, ptr %80)
  br i1 %81, label %common.ret, label %ifend76

ifend76:                                          ; preds = %ifend72
  %82 = load ptr, ptr %0, align 8
  %memberidx77 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %82, i32 0, i32 4
  %83 = load ptr, ptr %memberidx77, align 8
  %84 = call ptr @string_from_bytes(ptr @60, i64 3)
  %85 = call i1 %83(ptr %0, ptr %84)
  br i1 %85, label %common.ret, label %ifend80

ifend80:                                          ; preds = %ifend76
  %86 = load ptr, ptr %0, align 8
  %memberidx81 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %86, i32 0, i32 4
  %87 = load ptr, ptr %memberidx81, align 8
  %88 = call ptr @string_from_bytes(ptr @61, i64 5)
  %89 = call i1 %87(ptr %0, ptr %88)
  br i1 %89, label %common.ret, label %ifend84

ifend84:                                          ; preds = %ifend80
  %90 = load ptr, ptr %0, align 8
  %memberidx85 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %90, i32 0, i32 4
  %91 = load ptr, ptr %memberidx85, align 8
  %92 = call ptr @string_from_bytes(ptr @62, i64 3)
  %93 = call i1 %91(ptr %0, ptr %92)
  br i1 %93, label %common.ret, label %ifend88

ifend88:                                          ; preds = %ifend84
  %94 = load ptr, ptr %0, align 8
  %memberidx89 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %94, i32 0, i32 4
  %95 = load ptr, ptr %memberidx89, align 8
  %96 = call ptr @string_from_bytes(ptr @63, i64 5)
  %97 = call i1 %95(ptr %0, ptr %96)
  br i1 %97, label %common.ret, label %ifend92

ifend92:                                          ; preds = %ifend88
  %98 = load ptr, ptr %0, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %98, i32 0, i32 4
  %99 = load ptr, ptr %memberidx93, align 8
  %100 = call ptr @string_from_bytes(ptr @64, i64 8)
  %101 = call i1 %99(ptr %0, ptr %100)
  br i1 %101, label %common.ret, label %ifend96

ifend96:                                          ; preds = %ifend92
  %102 = load ptr, ptr %0, align 8
  %memberidx97 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %102, i32 0, i32 4
  %103 = load ptr, ptr %memberidx97, align 8
  %104 = call ptr @string_from_bytes(ptr @65, i64 6)
  %105 = call i1 %103(ptr %0, ptr %104)
  br i1 %105, label %common.ret, label %ifend100

ifend100:                                         ; preds = %ifend96
  %106 = load ptr, ptr %0, align 8
  %memberidx101 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %106, i32 0, i32 4
  %107 = load ptr, ptr %memberidx101, align 8
  %108 = call ptr @string_from_bytes(ptr @66, i64 6)
  %109 = call i1 %107(ptr %0, ptr %108)
  br i1 %109, label %common.ret, label %ifend104

ifend104:                                         ; preds = %ifend100
  %110 = load ptr, ptr %0, align 8
  %memberidx105 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %110, i32 0, i32 4
  %111 = load ptr, ptr %memberidx105, align 8
  %112 = call ptr @string_from_bytes(ptr @67, i64 7)
  %113 = call i1 %111(ptr %0, ptr %112)
  br i1 %113, label %common.ret, label %ifend108

ifend108:                                         ; preds = %ifend104
  %114 = load ptr, ptr %0, align 8
  %memberidx109 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %114, i32 0, i32 4
  %115 = load ptr, ptr %memberidx109, align 8
  %116 = call ptr @string_from_bytes(ptr @68, i64 6)
  %117 = call i1 %115(ptr %0, ptr %116)
  br i1 %117, label %common.ret, label %ifend112

ifend112:                                         ; preds = %ifend108
  %118 = load ptr, ptr %0, align 8
  %memberidx113 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %118, i32 0, i32 4
  %119 = load ptr, ptr %memberidx113, align 8
  %120 = call ptr @string_from_bytes(ptr @69, i64 9)
  %121 = call i1 %119(ptr %0, ptr %120)
  br i1 %121, label %common.ret, label %ifend116

ifend116:                                         ; preds = %ifend112
  %122 = load ptr, ptr %0, align 8
  %memberidx117 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %122, i32 0, i32 4
  %123 = load ptr, ptr %memberidx117, align 8
  %124 = call ptr @string_from_bytes(ptr @70, i64 2)
  %125 = call i1 %123(ptr %0, ptr %124)
  br i1 %125, label %common.ret, label %ifend120

ifend120:                                         ; preds = %ifend116
  %126 = load ptr, ptr %0, align 8
  %memberidx121 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %126, i32 0, i32 4
  %127 = load ptr, ptr %memberidx121, align 8
  %128 = call ptr @string_from_bytes(ptr @71, i64 5)
  %129 = call i1 %127(ptr %0, ptr %128)
  br i1 %129, label %common.ret, label %ifend124

ifend124:                                         ; preds = %ifend120
  %130 = load ptr, ptr %0, align 8
  %memberidx125 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %130, i32 0, i32 4
  %131 = load ptr, ptr %memberidx125, align 8
  %132 = call ptr @string_from_bytes(ptr @72, i64 4)
  %133 = call i1 %131(ptr %0, ptr %132)
  br i1 %133, label %common.ret, label %ifend128

ifend128:                                         ; preds = %ifend124
  %134 = load ptr, ptr %0, align 8
  %memberidx129 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %134, i32 0, i32 4
  %135 = load ptr, ptr %memberidx129, align 8
  %136 = call ptr @string_from_bytes(ptr @73, i64 3)
  %137 = call i1 %135(ptr %0, ptr %136)
  br i1 %137, label %common.ret, label %ifend132

ifend132:                                         ; preds = %ifend128
  %138 = load ptr, ptr %0, align 8
  %memberidx133 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %138, i32 0, i32 4
  %139 = load ptr, ptr %memberidx133, align 8
  %140 = call ptr @string_from_bytes(ptr @74, i64 2)
  %141 = call i1 %139(ptr %0, ptr %140)
  %spec.select = select i1 %141, i64 86, i64 0
  br label %common.ret
}

define void @IdentifierToken_constructor(ptr %0, ptr %1, ptr %2) {
  call void @Token_constructor(ptr %0, i64 51, ptr %2)
  %memberidx = getelementptr inbounds %IdentifierToken, ptr %0, i32 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  ret void
}

define void @StringBuilder_resize(ptr %0) {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  %memberidx5 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 3
  %memberidx7 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 4
  %7 = load i64, ptr %memberidx7, align 4
  %8 = getelementptr inbounds i8, ptr %6, i64 %7
  store ptr %8, ptr %memberidx5, align 8
  ret void
}

define void @StringBuilder_add_byte(ptr %0, i8 %1) {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  %5 = sub i64 %3, %4
  %6 = icmp sle i64 %5, 1
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  call void @StringBuilder_resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  store i8 %1, ptr %7, align 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 1
  store ptr %9, ptr %memberidx2, align 8
  %10 = load i64, ptr %memberidx1, align 4
  %11 = add i64 %10, 1
  store i64 %11, ptr %memberidx1, align 4
  ret void
}

define void @StringBuilder_add_bytes_length(ptr %0, ptr %1, i64 %2) {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 4
  %5 = load i64, ptr %memberidx1, align 4
  %6 = sub i64 %4, %5
  %7 = icmp sle i64 %6, %2
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @StringBuilder_resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = mul i64 %2, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %1, i64 %9, i1 false)
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 %2
  store ptr %11, ptr %memberidx2, align 8
  %12 = load i64, ptr %memberidx1, align 4
  %13 = add i64 %12, %2
  store i64 %13, ptr %memberidx1, align 4
  ret void
}

define void @StringBuilder_append_string(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 9
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %1)
  %memberidx2 = getelementptr inbounds %string, ptr %1, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void %4(ptr %0, ptr %7, i64 %8)
  ret void
}

define ptr @StringBuilder_get_string(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  call void @string_constructor(ptr %2, ptr %3, i64 %4)
  ret ptr %2
}

define void @StringBuilder_constructor(ptr %0, i64 %1) {
  store ptr @VTableStringBuilder, ptr %0, align 8
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 2
  store i64 %1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx1, align 8
  %memberidx3 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 3
  store ptr %4, ptr %memberidx3, align 8
  %memberidx5 = getelementptr inbounds %StringBuilder, ptr %0, i32 0, i32 4
  store i64 0, ptr %memberidx5, align 4
  ret void
}

define ptr @unescape(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringBuilder, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %string, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  call void @StringBuilder_constructor(ptr %1, i64 %2)
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %9, %for.incr ]
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp slt i64 %i.0, %3
  br i1 %4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load ptr, ptr %0, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 8
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = call i8 %6(ptr %0, i64 %i.0)
  %8 = icmp eq i8 %7, 92
  br i1 %8, label %if.entry, label %ifend

for.incr:                                         ; preds = %ifend, %if.entry16, %if.entry8
  %i.1 = phi i64 [ %13, %if.entry8 ], [ %44, %if.entry16 ], [ %i.2, %ifend ]
  %9 = add i64 %i.1, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load ptr, ptr %1, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx22, align 8
  %12 = call ptr %11(ptr %1)
  ret ptr %12

if.entry:                                         ; preds = %for.body
  %13 = add i64 %i.0, 3
  %14 = load i64, ptr %memberidx, align 4
  %15 = icmp slt i64 %13, %14
  br i1 %15, label %if.entry4, label %ifend6

ifend:                                            ; preds = %for.body, %ifend6
  %char.0 = phi i8 [ %32, %ifend6 ], [ %7, %for.body ]
  %i.2 = phi i64 [ %30, %ifend6 ], [ %i.0, %for.body ]
  %16 = load ptr, ptr %1, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx21, align 8
  call void %17(ptr %1, i8 %char.0)
  br label %for.incr

if.entry4:                                        ; preds = %if.entry
  %18 = load ptr, ptr %0, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i32 0, i32 9
  %19 = load ptr, ptr %memberidx7, align 8
  %20 = call ptr %19(ptr %0)
  %21 = getelementptr inbounds i8, ptr %20, i64 %i.0
  %22 = getelementptr inbounds i8, ptr %21, i64 1
  %23 = call i64 @memcmp(ptr %22, ptr @75, i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 3))
  %24 = icmp eq i64 %23, 0
  %25 = call i64 @memcmp(ptr %22, ptr @76, i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 3))
  %26 = icmp eq i64 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %if.entry8, label %ifend10

ifend6:                                           ; preds = %if.entry13, %ifend10, %if.entry
  %28 = load ptr, ptr %0, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 8
  %29 = load ptr, ptr %memberidx20, align 8
  %30 = add i64 %i.0, 1
  %31 = call i8 %29(ptr %0, i64 %30)
  %32 = call i8 @get_escape_char(i8 %31)
  br label %ifend

if.entry8:                                        ; preds = %if.entry4
  %33 = load ptr, ptr %1, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %33, i32 0, i32 1
  %34 = load ptr, ptr %memberidx11, align 8
  %35 = call ptr @string_from_bytes(ptr @77, i64 1)
  call void %34(ptr %1, ptr %35)
  br label %for.incr

ifend10:                                          ; preds = %if.entry4
  %36 = add i64 %i.0, 6
  %37 = load i64, ptr %memberidx, align 4
  %38 = icmp slt i64 %36, %37
  br i1 %38, label %if.entry13, label %ifend6

if.entry13:                                       ; preds = %ifend10
  %39 = call i64 @memcmp(ptr %22, ptr @78, i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %if.entry16, label %ifend6

if.entry16:                                       ; preds = %if.entry13
  %41 = load ptr, ptr %1, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %41, i32 0, i32 1
  %42 = load ptr, ptr %memberidx19, align 8
  %43 = call ptr @string_from_bytes(ptr @77, i64 1)
  call void %42(ptr %1, ptr %43)
  %44 = add i64 %i.0, 5
  br label %for.incr
}

define i8 @get_escape_char(i8 %0) {
  %2 = icmp eq i8 %0, 97
  br i1 %2, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend27, %ifend24, %ifend21, %ifend18, %ifend15, %ifend12, %ifend9, %ifend6, %ifend3, %ifend, %1
  %common.ret.op = phi i8 [ 7, %1 ], [ 8, %ifend ], [ 9, %ifend3 ], [ 12, %ifend6 ], [ 10, %ifend9 ], [ 13, %ifend12 ], [ 11, %ifend15 ], [ 0, %ifend18 ], [ 39, %ifend21 ], [ 34, %ifend24 ], [ %0, %ifend27 ]
  ret i8 %common.ret.op

ifend:                                            ; preds = %1
  %3 = icmp eq i8 %0, 98
  br i1 %3, label %common.ret, label %ifend3

ifend3:                                           ; preds = %ifend
  %4 = icmp eq i8 %0, 116
  br i1 %4, label %common.ret, label %ifend6

ifend6:                                           ; preds = %ifend3
  %5 = icmp eq i8 %0, 102
  br i1 %5, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend6
  %6 = icmp eq i8 %0, 110
  br i1 %6, label %common.ret, label %ifend12

ifend12:                                          ; preds = %ifend9
  %7 = icmp eq i8 %0, 114
  br i1 %7, label %common.ret, label %ifend15

ifend15:                                          ; preds = %ifend12
  %8 = icmp eq i8 %0, 118
  br i1 %8, label %common.ret, label %ifend18

ifend18:                                          ; preds = %ifend15
  %9 = icmp eq i8 %0, 48
  br i1 %9, label %common.ret, label %ifend21

ifend21:                                          ; preds = %ifend18
  %10 = icmp eq i8 %0, 39
  br i1 %10, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend21
  %11 = icmp eq i8 %0, 34
  br i1 %11, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend24
  %12 = icmp eq i8 %0, 92
  br label %common.ret
}

define void @print_tokens(ptr %0, ptr %1) {
for.entry:
  %2 = call ptr @string_from_bytes(ptr @81, i64 1)
  call void @println(ptr %2)
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %41, %ifend ]
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp slt i64 %i.0, %3
  br i1 %4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %token = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %0, i64 %i.0)
  store ptr %7, ptr %token, align 8
  %8 = call ptr @string_from_bytes(ptr @82, i64 2)
  call void @println(ptr %8)
  %9 = load ptr, ptr %token, align 8
  %10 = load i64, ptr %9, align 4
  %11 = call ptr @token_str(i64 %10)
  %12 = load ptr, ptr %11, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 11
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = call ptr %13(ptr %11)
  %15 = alloca ptr, align 8
  %16 = call i64 (ptr, ptr, ...) @asprintf(ptr %15, ptr @158, ptr %14)
  %17 = load ptr, ptr %15, align 8
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %18, ptr %17, i64 %16)
  call void @println(ptr %18)
  %19 = load ptr, ptr %token, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = load i64, ptr %20, align 4
  %memberidx7 = getelementptr inbounds %FloRange, ptr %20, i32 0, i32 1
  %22 = load i64, ptr %memberidx7, align 4
  %23 = alloca ptr, align 8
  %24 = call i64 (ptr, ptr, ...) @asprintf(ptr %23, ptr @159, i64 %21, i64 %22)
  %25 = load ptr, ptr %23, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %26, ptr %25, i64 %24)
  call void @println(ptr %26)
  %27 = load ptr, ptr %token, align 8
  %28 = load i64, ptr %27, align 4
  %29 = icmp ne i64 %28, 31
  br i1 %29, label %if.entry, label %else

for.end:                                          ; preds = %for.cond
  %30 = call ptr @string_from_bytes(ptr @163, i64 1)
  call void @println(ptr %30)
  ret void

if.entry:                                         ; preds = %for.body
  %31 = call ptr @token_value(ptr %27, ptr %1)
  %32 = load ptr, ptr %31, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 11
  %33 = load ptr, ptr %memberidx9, align 8
  %34 = call ptr %33(ptr %31)
  %35 = alloca ptr, align 8
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr %35, ptr @160, ptr %34)
  %37 = load ptr, ptr %35, align 8
  %38 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %38, ptr %37, i64 %36)
  call void @println(ptr %38)
  br label %ifend

else:                                             ; preds = %for.body
  %39 = call ptr @string_from_bytes(ptr @161, i64 11)
  call void @println(ptr %39)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %40 = call ptr @string_from_bytes(ptr @162, i64 3)
  call void @println(ptr %40)
  %41 = add i64 %i.0, 1
  br label %for.cond
}

define ptr @token_str(i64 %0) {
  %2 = icmp eq i64 %0, 1
  br i1 %2, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend222, %if.entry220, %if.entry217, %if.entry214, %if.entry211, %if.entry208, %if.entry205, %if.entry202, %if.entry199, %if.entry196, %if.entry193, %if.entry190, %if.entry187, %if.entry184, %if.entry181, %if.entry178, %if.entry175, %if.entry172, %if.entry169, %if.entry166, %if.entry163, %if.entry160, %if.entry157, %if.entry154, %if.entry151, %if.entry148, %if.entry145, %if.entry142, %if.entry139, %if.entry136, %if.entry133, %if.entry130, %if.entry127, %if.entry124, %if.entry121, %if.entry118, %if.entry115, %if.entry112, %if.entry109, %if.entry106, %if.entry103, %if.entry100, %if.entry97, %if.entry94, %if.entry91, %if.entry88, %if.entry85, %if.entry82, %if.entry79, %if.entry76, %if.entry73, %if.entry70, %if.entry67, %if.entry64, %if.entry61, %if.entry58, %if.entry55, %if.entry52, %if.entry49, %if.entry46, %if.entry43, %if.entry40, %if.entry37, %if.entry34, %if.entry31, %if.entry28, %if.entry25, %if.entry22, %if.entry19, %if.entry16, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %5, %if.entry1 ], [ %7, %if.entry4 ], [ %9, %if.entry7 ], [ %11, %if.entry10 ], [ %13, %if.entry13 ], [ %15, %if.entry16 ], [ %17, %if.entry19 ], [ %19, %if.entry22 ], [ %21, %if.entry25 ], [ %23, %if.entry28 ], [ %25, %if.entry31 ], [ %27, %if.entry34 ], [ %29, %if.entry37 ], [ %31, %if.entry40 ], [ %33, %if.entry43 ], [ %35, %if.entry46 ], [ %37, %if.entry49 ], [ %39, %if.entry52 ], [ %41, %if.entry55 ], [ %43, %if.entry58 ], [ %45, %if.entry61 ], [ %47, %if.entry64 ], [ %49, %if.entry67 ], [ %51, %if.entry70 ], [ %53, %if.entry73 ], [ %55, %if.entry76 ], [ %57, %if.entry79 ], [ %59, %if.entry82 ], [ %61, %if.entry85 ], [ %63, %if.entry88 ], [ %65, %if.entry91 ], [ %67, %if.entry94 ], [ %69, %if.entry97 ], [ %71, %if.entry100 ], [ %73, %if.entry103 ], [ %75, %if.entry106 ], [ %77, %if.entry109 ], [ %79, %if.entry112 ], [ %81, %if.entry115 ], [ %83, %if.entry118 ], [ %85, %if.entry121 ], [ %87, %if.entry124 ], [ %89, %if.entry127 ], [ %91, %if.entry130 ], [ %93, %if.entry133 ], [ %95, %if.entry136 ], [ %97, %if.entry139 ], [ %99, %if.entry142 ], [ %101, %if.entry145 ], [ %103, %if.entry148 ], [ %105, %if.entry151 ], [ %107, %if.entry154 ], [ %109, %if.entry157 ], [ %111, %if.entry160 ], [ %113, %if.entry163 ], [ %115, %if.entry166 ], [ %117, %if.entry169 ], [ %119, %if.entry172 ], [ %121, %if.entry175 ], [ %123, %if.entry178 ], [ %125, %if.entry181 ], [ %127, %if.entry184 ], [ %129, %if.entry187 ], [ %131, %if.entry190 ], [ %133, %if.entry193 ], [ %135, %if.entry196 ], [ %137, %if.entry199 ], [ %139, %if.entry202 ], [ %141, %if.entry205 ], [ %143, %if.entry208 ], [ %145, %if.entry211 ], [ %147, %if.entry214 ], [ %149, %if.entry217 ], [ %151, %if.entry220 ], [ %152, %ifend222 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %3 = call ptr @string_from_bytes(ptr @83, i64 3)
  br label %common.ret

ifend:                                            ; preds = %1
  %4 = icmp eq i64 %0, 2
  br i1 %4, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %ifend
  %5 = call ptr @string_from_bytes(ptr @84, i64 7)
  br label %common.ret

ifend3:                                           ; preds = %ifend
  %6 = icmp eq i64 %0, 3
  br i1 %6, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend3
  %7 = call ptr @string_from_bytes(ptr @85, i64 5)
  br label %common.ret

ifend6:                                           ; preds = %ifend3
  %8 = icmp eq i64 %0, 6
  br i1 %8, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %ifend6
  %9 = call ptr @string_from_bytes(ptr @86, i64 4)
  br label %common.ret

ifend9:                                           ; preds = %ifend6
  %10 = icmp eq i64 %0, 21
  br i1 %10, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend9
  %11 = call ptr @string_from_bytes(ptr @87, i64 9)
  br label %common.ret

ifend12:                                          ; preds = %ifend9
  %12 = icmp eq i64 %0, 5
  br i1 %12, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend12
  %13 = call ptr @string_from_bytes(ptr @88, i64 5)
  br label %common.ret

ifend15:                                          ; preds = %ifend12
  %14 = icmp eq i64 %0, 22
  br i1 %14, label %if.entry16, label %ifend18

if.entry16:                                       ; preds = %ifend15
  %15 = call ptr @string_from_bytes(ptr @89, i64 11)
  br label %common.ret

ifend18:                                          ; preds = %ifend15
  %16 = icmp eq i64 %0, 4
  br i1 %16, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend18
  %17 = call ptr @string_from_bytes(ptr @90, i64 4)
  br label %common.ret

ifend21:                                          ; preds = %ifend18
  %18 = icmp eq i64 %0, 7
  br i1 %18, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend21
  %19 = call ptr @string_from_bytes(ptr @91, i64 3)
  br label %common.ret

ifend24:                                          ; preds = %ifend21
  %20 = icmp eq i64 %0, 23
  br i1 %20, label %if.entry25, label %ifend27

if.entry25:                                       ; preds = %ifend24
  %21 = call ptr @string_from_bytes(ptr @92, i64 4)
  br label %common.ret

ifend27:                                          ; preds = %ifend24
  %22 = icmp eq i64 %0, 24
  br i1 %22, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend27
  %23 = call ptr @string_from_bytes(ptr @93, i64 4)
  br label %common.ret

ifend30:                                          ; preds = %ifend27
  %24 = icmp eq i64 %0, 8
  br i1 %24, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend30
  %25 = call ptr @string_from_bytes(ptr @94, i64 3)
  br label %common.ret

ifend33:                                          ; preds = %ifend30
  %26 = icmp eq i64 %0, 25
  br i1 %26, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend33
  %27 = call ptr @string_from_bytes(ptr @95, i64 6)
  br label %common.ret

ifend36:                                          ; preds = %ifend33
  %28 = icmp eq i64 %0, 26
  br i1 %28, label %if.entry37, label %ifend39

if.entry37:                                       ; preds = %ifend36
  %29 = call ptr @string_from_bytes(ptr @96, i64 6)
  br label %common.ret

ifend39:                                          ; preds = %ifend36
  %30 = icmp eq i64 %0, 27
  br i1 %30, label %if.entry40, label %ifend42

if.entry40:                                       ; preds = %ifend39
  %31 = call ptr @string_from_bytes(ptr @97, i64 8)
  br label %common.ret

ifend42:                                          ; preds = %ifend39
  %32 = icmp eq i64 %0, 28
  br i1 %32, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %ifend42
  %33 = call ptr @string_from_bytes(ptr @98, i64 8)
  br label %common.ret

ifend45:                                          ; preds = %ifend42
  %34 = icmp eq i64 %0, 29
  br i1 %34, label %if.entry46, label %ifend48

if.entry46:                                       ; preds = %ifend45
  %35 = call ptr @string_from_bytes(ptr @99, i64 3)
  br label %common.ret

ifend48:                                          ; preds = %ifend45
  %36 = icmp eq i64 %0, 30
  br i1 %36, label %if.entry49, label %ifend51

if.entry49:                                       ; preds = %ifend48
  %37 = call ptr @string_from_bytes(ptr @100, i64 5)
  br label %common.ret

ifend51:                                          ; preds = %ifend48
  %38 = icmp eq i64 %0, 31
  br i1 %38, label %if.entry52, label %ifend54

if.entry52:                                       ; preds = %ifend51
  %39 = call ptr @string_from_bytes(ptr @101, i64 2)
  br label %common.ret

ifend54:                                          ; preds = %ifend51
  %40 = icmp eq i64 %0, 32
  br i1 %40, label %if.entry55, label %ifend57

if.entry55:                                       ; preds = %ifend54
  %41 = call ptr @string_from_bytes(ptr @102, i64 3)
  br label %common.ret

ifend57:                                          ; preds = %ifend54
  %42 = icmp eq i64 %0, 33
  br i1 %42, label %if.entry58, label %ifend60

if.entry58:                                       ; preds = %ifend57
  %43 = call ptr @string_from_bytes(ptr @103, i64 4)
  br label %common.ret

ifend60:                                          ; preds = %ifend57
  %44 = icmp eq i64 %0, 9
  br i1 %44, label %if.entry61, label %ifend63

if.entry61:                                       ; preds = %ifend60
  %45 = call ptr @string_from_bytes(ptr @104, i64 3)
  br label %common.ret

ifend63:                                          ; preds = %ifend60
  %46 = icmp eq i64 %0, 34
  br i1 %46, label %if.entry64, label %ifend66

if.entry64:                                       ; preds = %ifend63
  %47 = call ptr @string_from_bytes(ptr @105, i64 4)
  br label %common.ret

ifend66:                                          ; preds = %ifend63
  %48 = icmp eq i64 %0, 35
  br i1 %48, label %if.entry67, label %ifend69

if.entry67:                                       ; preds = %ifend66
  %49 = call ptr @string_from_bytes(ptr @106, i64 3)
  br label %common.ret

ifend69:                                          ; preds = %ifend66
  %50 = icmp eq i64 %0, 36
  br i1 %50, label %if.entry70, label %ifend72

if.entry70:                                       ; preds = %ifend69
  %51 = call ptr @string_from_bytes(ptr @107, i64 2)
  br label %common.ret

ifend72:                                          ; preds = %ifend69
  %52 = icmp eq i64 %0, 37
  br i1 %52, label %if.entry73, label %ifend75

if.entry73:                                       ; preds = %ifend72
  %53 = call ptr @string_from_bytes(ptr @108, i64 3)
  br label %common.ret

ifend75:                                          ; preds = %ifend72
  %54 = icmp eq i64 %0, 38
  br i1 %54, label %if.entry76, label %ifend78

if.entry76:                                       ; preds = %ifend75
  %55 = call ptr @string_from_bytes(ptr @109, i64 3)
  br label %common.ret

ifend78:                                          ; preds = %ifend75
  %56 = icmp eq i64 %0, 39
  br i1 %56, label %if.entry79, label %ifend81

if.entry79:                                       ; preds = %ifend78
  %57 = call ptr @string_from_bytes(ptr @110, i64 2)
  br label %common.ret

ifend81:                                          ; preds = %ifend78
  %58 = icmp eq i64 %0, 40
  br i1 %58, label %if.entry82, label %ifend84

if.entry82:                                       ; preds = %ifend81
  %59 = call ptr @string_from_bytes(ptr @111, i64 2)
  br label %common.ret

ifend84:                                          ; preds = %ifend81
  %60 = icmp eq i64 %0, 41
  br i1 %60, label %if.entry85, label %ifend87

if.entry85:                                       ; preds = %ifend84
  %61 = call ptr @string_from_bytes(ptr @112, i64 3)
  br label %common.ret

ifend87:                                          ; preds = %ifend84
  %62 = icmp eq i64 %0, 42
  br i1 %62, label %if.entry88, label %ifend90

if.entry88:                                       ; preds = %ifend87
  %63 = call ptr @string_from_bytes(ptr @113, i64 3)
  br label %common.ret

ifend90:                                          ; preds = %ifend87
  %64 = icmp eq i64 %0, 43
  br i1 %64, label %if.entry91, label %ifend93

if.entry91:                                       ; preds = %ifend90
  %65 = call ptr @string_from_bytes(ptr @114, i64 5)
  br label %common.ret

ifend93:                                          ; preds = %ifend90
  %66 = icmp eq i64 %0, 44
  br i1 %66, label %if.entry94, label %ifend96

if.entry94:                                       ; preds = %ifend93
  %67 = call ptr @string_from_bytes(ptr @115, i64 3)
  br label %common.ret

ifend96:                                          ; preds = %ifend93
  %68 = icmp eq i64 %0, 45
  br i1 %68, label %if.entry97, label %ifend99

if.entry97:                                       ; preds = %ifend96
  %69 = call ptr @string_from_bytes(ptr @116, i64 3)
  br label %common.ret

ifend99:                                          ; preds = %ifend96
  %70 = icmp eq i64 %0, 46
  br i1 %70, label %if.entry100, label %ifend102

if.entry100:                                      ; preds = %ifend99
  %71 = call ptr @string_from_bytes(ptr @117, i64 2)
  br label %common.ret

ifend102:                                         ; preds = %ifend99
  %72 = icmp eq i64 %0, 47
  br i1 %72, label %if.entry103, label %ifend105

if.entry103:                                      ; preds = %ifend102
  %73 = call ptr @string_from_bytes(ptr @118, i64 2)
  br label %common.ret

ifend105:                                         ; preds = %ifend102
  %74 = icmp eq i64 %0, 48
  br i1 %74, label %if.entry106, label %ifend108

if.entry106:                                      ; preds = %ifend105
  %75 = call ptr @string_from_bytes(ptr @119, i64 3)
  br label %common.ret

ifend108:                                         ; preds = %ifend105
  %76 = icmp eq i64 %0, 49
  br i1 %76, label %if.entry109, label %ifend111

if.entry109:                                      ; preds = %ifend108
  %77 = call ptr @string_from_bytes(ptr @120, i64 7)
  br label %common.ret

ifend111:                                         ; preds = %ifend108
  %78 = icmp eq i64 %0, 50
  br i1 %78, label %if.entry112, label %ifend114

if.entry112:                                      ; preds = %ifend111
  %79 = call ptr @string_from_bytes(ptr @121, i64 11)
  br label %common.ret

ifend114:                                         ; preds = %ifend111
  %80 = icmp eq i64 %0, 51
  br i1 %80, label %if.entry115, label %ifend117

if.entry115:                                      ; preds = %ifend114
  %81 = call ptr @string_from_bytes(ptr @122, i64 9)
  br label %common.ret

ifend117:                                         ; preds = %ifend114
  %82 = icmp eq i64 %0, 52
  br i1 %82, label %if.entry118, label %ifend120

if.entry118:                                      ; preds = %ifend117
  %83 = call ptr @string_from_bytes(ptr @123, i64 6)
  br label %common.ret

ifend120:                                         ; preds = %ifend117
  %84 = icmp eq i64 %0, 53
  br i1 %84, label %if.entry121, label %ifend123

if.entry121:                                      ; preds = %ifend120
  %85 = call ptr @string_from_bytes(ptr @124, i64 5)
  br label %common.ret

ifend123:                                         ; preds = %ifend120
  %86 = icmp eq i64 %0, 54
  br i1 %86, label %if.entry124, label %ifend126

if.entry124:                                      ; preds = %ifend123
  %87 = call ptr @string_from_bytes(ptr @125, i64 6)
  br label %common.ret

ifend126:                                         ; preds = %ifend123
  %88 = icmp eq i64 %0, 55
  br i1 %88, label %if.entry127, label %ifend129

if.entry127:                                      ; preds = %ifend126
  %89 = call ptr @string_from_bytes(ptr @126, i64 8)
  br label %common.ret

ifend129:                                         ; preds = %ifend126
  %90 = icmp eq i64 %0, 57
  br i1 %90, label %if.entry130, label %ifend132

if.entry130:                                      ; preds = %ifend129
  %91 = call ptr @string_from_bytes(ptr @127, i64 5)
  br label %common.ret

ifend132:                                         ; preds = %ifend129
  %92 = icmp eq i64 %0, 58
  br i1 %92, label %if.entry133, label %ifend135

if.entry133:                                      ; preds = %ifend132
  %93 = call ptr @string_from_bytes(ptr @128, i64 7)
  br label %common.ret

ifend135:                                         ; preds = %ifend132
  %94 = icmp eq i64 %0, 59
  br i1 %94, label %if.entry136, label %ifend138

if.entry136:                                      ; preds = %ifend135
  %95 = call ptr @string_from_bytes(ptr @129, i64 7)
  br label %common.ret

ifend138:                                         ; preds = %ifend135
  %96 = icmp eq i64 %0, 60
  br i1 %96, label %if.entry139, label %ifend141

if.entry139:                                      ; preds = %ifend138
  %97 = call ptr @string_from_bytes(ptr @130, i64 5)
  br label %common.ret

ifend141:                                         ; preds = %ifend138
  %98 = icmp eq i64 %0, 61
  br i1 %98, label %if.entry142, label %ifend144

if.entry142:                                      ; preds = %ifend141
  %99 = call ptr @string_from_bytes(ptr @131, i64 5)
  br label %common.ret

ifend144:                                         ; preds = %ifend141
  %100 = icmp eq i64 %0, 62
  br i1 %100, label %if.entry145, label %ifend147

if.entry145:                                      ; preds = %ifend144
  %101 = call ptr @string_from_bytes(ptr @132, i64 6)
  br label %common.ret

ifend147:                                         ; preds = %ifend144
  %102 = icmp eq i64 %0, 63
  br i1 %102, label %if.entry148, label %ifend150

if.entry148:                                      ; preds = %ifend147
  %103 = call ptr @string_from_bytes(ptr @133, i64 6)
  br label %common.ret

ifend150:                                         ; preds = %ifend147
  %104 = icmp eq i64 %0, 64
  br i1 %104, label %if.entry151, label %ifend153

if.entry151:                                      ; preds = %ifend150
  %105 = call ptr @string_from_bytes(ptr @134, i64 6)
  br label %common.ret

ifend153:                                         ; preds = %ifend150
  %106 = icmp eq i64 %0, 65
  br i1 %106, label %if.entry154, label %ifend156

if.entry154:                                      ; preds = %ifend153
  %107 = call ptr @string_from_bytes(ptr @135, i64 7)
  br label %common.ret

ifend156:                                         ; preds = %ifend153
  %108 = icmp eq i64 %0, 66
  br i1 %108, label %if.entry157, label %ifend159

if.entry157:                                      ; preds = %ifend156
  %109 = call ptr @string_from_bytes(ptr @136, i64 6)
  br label %common.ret

ifend159:                                         ; preds = %ifend156
  %110 = icmp eq i64 %0, 67
  br i1 %110, label %if.entry160, label %ifend162

if.entry160:                                      ; preds = %ifend159
  %111 = call ptr @string_from_bytes(ptr @137, i64 6)
  br label %common.ret

ifend162:                                         ; preds = %ifend159
  %112 = icmp eq i64 %0, 68
  br i1 %112, label %if.entry163, label %ifend165

if.entry163:                                      ; preds = %ifend162
  %113 = call ptr @string_from_bytes(ptr @138, i64 6)
  br label %common.ret

ifend165:                                         ; preds = %ifend162
  %114 = icmp eq i64 %0, 69
  br i1 %114, label %if.entry166, label %ifend168

if.entry166:                                      ; preds = %ifend165
  %115 = call ptr @string_from_bytes(ptr @139, i64 6)
  br label %common.ret

ifend168:                                         ; preds = %ifend165
  %116 = icmp eq i64 %0, 70
  br i1 %116, label %if.entry169, label %ifend171

if.entry169:                                      ; preds = %ifend168
  %117 = call ptr @string_from_bytes(ptr @140, i64 8)
  br label %common.ret

ifend171:                                         ; preds = %ifend168
  %118 = icmp eq i64 %0, 71
  br i1 %118, label %if.entry172, label %ifend174

if.entry172:                                      ; preds = %ifend171
  %119 = call ptr @string_from_bytes(ptr @141, i64 7)
  br label %common.ret

ifend174:                                         ; preds = %ifend171
  %120 = icmp eq i64 %0, 72
  br i1 %120, label %if.entry175, label %ifend177

if.entry175:                                      ; preds = %ifend174
  %121 = call ptr @string_from_bytes(ptr @142, i64 6)
  br label %common.ret

ifend177:                                         ; preds = %ifend174
  %122 = icmp eq i64 %0, 73
  br i1 %122, label %if.entry178, label %ifend180

if.entry178:                                      ; preds = %ifend177
  %123 = call ptr @string_from_bytes(ptr @143, i64 8)
  br label %common.ret

ifend180:                                         ; preds = %ifend177
  %124 = icmp eq i64 %0, 74
  br i1 %124, label %if.entry181, label %ifend183

if.entry181:                                      ; preds = %ifend180
  %125 = call ptr @string_from_bytes(ptr @144, i64 6)
  br label %common.ret

ifend183:                                         ; preds = %ifend180
  %126 = icmp eq i64 %0, 75
  br i1 %126, label %if.entry184, label %ifend186

if.entry184:                                      ; preds = %ifend183
  %127 = call ptr @string_from_bytes(ptr @145, i64 8)
  br label %common.ret

ifend186:                                         ; preds = %ifend183
  %128 = icmp eq i64 %0, 76
  br i1 %128, label %if.entry187, label %ifend189

if.entry187:                                      ; preds = %ifend186
  %129 = call ptr @string_from_bytes(ptr @146, i64 11)
  br label %common.ret

ifend189:                                         ; preds = %ifend186
  %130 = icmp eq i64 %0, 77
  br i1 %130, label %if.entry190, label %ifend192

if.entry190:                                      ; preds = %ifend189
  %131 = call ptr @string_from_bytes(ptr @147, i64 9)
  br label %common.ret

ifend192:                                         ; preds = %ifend189
  %132 = icmp eq i64 %0, 78
  br i1 %132, label %if.entry193, label %ifend195

if.entry193:                                      ; preds = %ifend192
  %133 = call ptr @string_from_bytes(ptr @148, i64 9)
  br label %common.ret

ifend195:                                         ; preds = %ifend192
  %134 = icmp eq i64 %0, 79
  br i1 %134, label %if.entry196, label %ifend198

if.entry196:                                      ; preds = %ifend195
  %135 = call ptr @string_from_bytes(ptr @149, i64 10)
  br label %common.ret

ifend198:                                         ; preds = %ifend195
  %136 = icmp eq i64 %0, 80
  br i1 %136, label %if.entry199, label %ifend201

if.entry199:                                      ; preds = %ifend198
  %137 = call ptr @string_from_bytes(ptr @150, i64 9)
  br label %common.ret

ifend201:                                         ; preds = %ifend198
  %138 = icmp eq i64 %0, 81
  br i1 %138, label %if.entry202, label %ifend204

if.entry202:                                      ; preds = %ifend201
  %139 = call ptr @string_from_bytes(ptr @151, i64 12)
  br label %common.ret

ifend204:                                         ; preds = %ifend201
  %140 = icmp eq i64 %0, 82
  br i1 %140, label %if.entry205, label %ifend207

if.entry205:                                      ; preds = %ifend204
  %141 = call ptr @string_from_bytes(ptr @152, i64 5)
  br label %common.ret

ifend207:                                         ; preds = %ifend204
  %142 = icmp eq i64 %0, 83
  br i1 %142, label %if.entry208, label %ifend210

if.entry208:                                      ; preds = %ifend207
  %143 = call ptr @string_from_bytes(ptr @153, i64 8)
  br label %common.ret

ifend210:                                         ; preds = %ifend207
  %144 = icmp eq i64 %0, 84
  br i1 %144, label %if.entry211, label %ifend213

if.entry211:                                      ; preds = %ifend210
  %145 = call ptr @string_from_bytes(ptr @154, i64 7)
  br label %common.ret

ifend213:                                         ; preds = %ifend210
  %146 = icmp eq i64 %0, 85
  br i1 %146, label %if.entry214, label %ifend216

if.entry214:                                      ; preds = %ifend213
  %147 = call ptr @string_from_bytes(ptr @155, i64 6)
  br label %common.ret

ifend216:                                         ; preds = %ifend213
  %148 = icmp eq i64 %0, 86
  br i1 %148, label %if.entry217, label %ifend219

if.entry217:                                      ; preds = %ifend216
  %149 = call ptr @string_from_bytes(ptr @156, i64 5)
  br label %common.ret

ifend219:                                         ; preds = %ifend216
  %150 = icmp eq i64 %0, 56
  br i1 %150, label %if.entry220, label %ifend222

if.entry220:                                      ; preds = %ifend219
  %151 = call ptr @string_from_bytes(ptr @157, i64 6)
  br label %common.ret

ifend222:                                         ; preds = %ifend219
  %152 = call ptr @string_from_bytes(ptr @38, i64 0)
  br label %common.ret
}

define ptr @token_value(ptr %0, ptr %1) {
  %3 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 7
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i64, ptr %5, align 4
  %memberidx4 = getelementptr inbounds %FloRange, ptr %5, i32 0, i32 1
  %7 = load i64, ptr %memberidx4, align 4
  %8 = sub i64 %7, %6
  %9 = call ptr %4(ptr %1, i64 %6, i64 %8)
  ret ptr %9
}

define i64 @Parser_is_assign_op(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 36
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend51, %ifend46, %ifend41, %ifend36, %ifend31, %ifend26, %ifend21, %ifend16, %ifend11, %ifend6, %ifend, %1
  %common.ret.op = phi i64 [ 19, %1 ], [ 22, %ifend ], [ 21, %ifend6 ], [ 20, %ifend11 ], [ 23, %ifend16 ], [ 24, %ifend21 ], [ 25, %ifend26 ], [ 26, %ifend31 ], [ 27, %ifend36 ], [ 28, %ifend41 ], [ 29, %ifend46 ], [ %spec.select, %ifend51 ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %1
  %5 = icmp eq i64 %3, 10
  br i1 %5, label %common.ret, label %ifend6

ifend6:                                           ; preds = %ifend
  %6 = icmp eq i64 %3, 11
  br i1 %6, label %common.ret, label %ifend11

ifend11:                                          ; preds = %ifend6
  %7 = icmp eq i64 %3, 12
  br i1 %7, label %common.ret, label %ifend16

ifend16:                                          ; preds = %ifend11
  %8 = icmp eq i64 %3, 13
  br i1 %8, label %common.ret, label %ifend21

ifend21:                                          ; preds = %ifend16
  %9 = icmp eq i64 %3, 14
  br i1 %9, label %common.ret, label %ifend26

ifend26:                                          ; preds = %ifend21
  %10 = icmp eq i64 %3, 15
  br i1 %10, label %common.ret, label %ifend31

ifend31:                                          ; preds = %ifend26
  %11 = icmp eq i64 %3, 16
  br i1 %11, label %common.ret, label %ifend36

ifend36:                                          ; preds = %ifend31
  %12 = icmp eq i64 %3, 17
  br i1 %12, label %common.ret, label %ifend41

ifend41:                                          ; preds = %ifend36
  %13 = icmp eq i64 %3, 18
  br i1 %13, label %common.ret, label %ifend46

ifend46:                                          ; preds = %ifend41
  %14 = icmp eq i64 %3, 20
  br i1 %14, label %common.ret, label %ifend51

ifend51:                                          ; preds = %ifend46
  %15 = icmp eq i64 %3, 19
  %spec.select = select i1 %15, i64 30, i64 0
  br label %common.ret
}

define void @Parser_advance(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 4
  %2 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx2, align 4
  %5 = icmp slt i64 %2, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx3 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %6 = load ptr, ptr %3, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx5, align 8
  %8 = add i64 %2, 1
  store i64 %8, ptr %memberidx, align 4
  %9 = call ptr %7(ptr %3, i64 %8)
  store ptr %9, ptr %memberidx3, align 8
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  ret void
}

define void @StatementNode_constructor(ptr %0, i64 %1, ptr %2) {
  call void @Node_constructor(ptr %0, ptr %2)
  %memberidx = getelementptr inbounds %StatementNode, ptr %0, i32 0, i32 1
  store i64 %1, ptr %memberidx, align 4
  ret void
}

define void @Node_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  ret void
}

define i64 @Array_StatementNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_StatementNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_StatementNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_StatementNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_StatementNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_StatementNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_StatementNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_StatementNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_StatementNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_StatementNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_StatementNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @BlockNode_constructor(ptr %0, ptr %1) {
  call void @Node_constructor(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %BlockNode, ptr %0, i32 0, i32 1
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_StatementNode_, ptr null, i32 1) to i32))
  call void @Array_StatementNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %3, ptr %memberidx, align 8
  ret void
}

define ptr @Parser_parse_block(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BlockNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @BlockNode_constructor(ptr %2, ptr %4)
  call void @Parser_new_lines(ptr %0)
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 25
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  call void @Parser_advance(ptr %0)
  call void @Parser_new_lines(ptr %0)
  %8 = call i1 @Parser_can_parse(ptr %0)
  %9 = load ptr, ptr %memberidx, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp ne i64 %10, 26
  %12 = and i1 %8, %11
  br i1 %12, label %while.entry, label %while.end

else:                                             ; preds = %1
  %memberidx10 = getelementptr inbounds %BlockNode, ptr %2, i32 0, i32 1
  %13 = load ptr, ptr %memberidx10, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx11, align 8
  %16 = call ptr @Parser_parse_statement(ptr %0)
  call void %15(ptr %13, ptr %16)
  br label %ifend

ifend:                                            ; preds = %else, %while.end
  ret ptr %2

while.entry:                                      ; preds = %while.entry, %if.entry
  %memberidx6 = getelementptr inbounds %BlockNode, ptr %2, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %memberidx7, align 8
  %20 = call ptr @Parser_parse_statement(ptr %0)
  call void %19(ptr %17, ptr %20)
  call void @Parser_new_lines(ptr %0)
  %21 = call i1 @Parser_can_parse(ptr %0)
  %22 = load ptr, ptr %memberidx, align 8
  %23 = load i64, ptr %22, align 4
  %24 = icmp ne i64 %23, 26
  %25 = and i1 %21, %24
  br i1 %25, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %if.entry
  %26 = call ptr @Parser_eat(ptr %0, i64 26)
  br label %ifend
}

define void @ExpressionNode_constructor(ptr %0, i64 %1, ptr %2) {
  call void @StatementNode_constructor(ptr %0, i64 8, ptr %2)
  %memberidx = getelementptr inbounds %ExpressionNode, ptr %0, i32 0, i32 2
  store i64 %1, ptr %memberidx, align 4
  ret void
}

define void @TypeNode_constructor(ptr %0, i64 %1, ptr %2) {
  call void @Node_constructor(ptr %0, ptr %2)
  %memberidx = getelementptr inbounds %TypeNode, ptr %0, i32 0, i32 1
  store i64 %1, ptr %memberidx, align 4
  ret void
}

define void @ArgNode_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %ArgNode, ptr %0, i32 0, i32 1
  store ptr null, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ArgNode, ptr %0, i32 0, i32 2
  store ptr null, ptr %memberidx2, align 8
  ret void
}

define i64 @Array_ArgNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ArgNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_ArgNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_ArgNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_ArgNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_ArgNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_ArgNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_ArgNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_ArgNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ArgNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_ArgNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @MethodNode_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %MethodNode, ptr %0, i32 0, i32 1
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ArgNode_, ptr null, i32 1) to i32))
  call void @Array_ArgNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %3, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %MethodNode, ptr %0, i32 0, i32 5
  store i1 true, ptr %memberidx4, align 1
  %memberidx5 = getelementptr inbounds %MethodNode, ptr %0, i32 0, i32 6
  store i1 false, ptr %memberidx5, align 1
  ret void
}

define i64 @Array_MethodNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_MethodNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_MethodNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_MethodNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_MethodNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_MethodNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_MethodNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_MethodNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_MethodNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_MethodNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_MethodNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @FieldNode_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %FieldNode, ptr %0, i32 0, i32 2
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define i64 @Array_FieldNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FieldNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_FieldNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_FieldNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_FieldNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_FieldNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_FieldNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_FieldNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_FieldNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FieldNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_FieldNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define i64 @Array_TypeNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_TypeNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_TypeNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_TypeNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_TypeNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_TypeNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_TypeNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_TypeNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_TypeNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_TypeNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_TypeNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @RecordTypeNode_constructor(ptr %0, ptr %1, ptr %2) {
  call void @TypeNode_constructor(ptr %0, i64 18, ptr %2)
  %memberidx = getelementptr inbounds %RecordTypeNode, ptr %0, i32 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %RecordTypeNode, ptr %0, i32 0, i32 3
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_TypeNode_, ptr null, i32 1) to i32))
  call void @Array_TypeNode__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %4, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_TypeNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %4, ptr %memberidx1, align 8
  ret void
}

define void @GenericParameterNode_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  ret void
}

define i64 @Array_GenericParameterNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_GenericParameterNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_GenericParameterNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_GenericParameterNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_GenericParameterNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_GenericParameterNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_GenericParameterNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_GenericParameterNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_GenericParameterNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_GenericParameterNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_GenericParameterNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @ClassDeclarationNode_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %0, i32 0, i32 3
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FieldNode_, ptr null, i32 1) to i32))
  call void @Array_FieldNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %3, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %ClassDeclarationNode, ptr %0, i32 0, i32 4
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_MethodNode_, ptr null, i32 1) to i32))
  call void @Array_MethodNode__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx5 = getelementptr inbounds %Array_MethodNode_, ptr %4, i32 0, i32 1
  %memberidx6 = getelementptr inbounds %Array_MethodNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  store ptr %4, ptr %memberidx4, align 8
  %memberidx7 = getelementptr inbounds %ClassDeclarationNode, ptr %0, i32 0, i32 1
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_GenericParameterNode_, ptr null, i32 1) to i32))
  call void @Array_GenericParameterNode__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx8 = getelementptr inbounds %Array_GenericParameterNode_, ptr %5, i32 0, i32 1
  %memberidx9 = getelementptr inbounds %Array_GenericParameterNode_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx9, align 4
  store ptr %5, ptr %memberidx7, align 8
  %memberidx10 = getelementptr inbounds %ClassDeclarationNode, ptr %0, i32 0, i32 2
  store ptr null, ptr %memberidx10, align 8
  ret void
}

define ptr @Parser_parse_class(ptr %0) {
  call void @Parser_advance(ptr %0)
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassDeclarationNode, ptr null, i32 1) to i32))
  %3 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @ClassDeclarationNode_constructor(ptr %2, ptr %3)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 40
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  call void @Parser_parse_generic_parameters(ptr %0, ptr %7)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %8 = load ptr, ptr %memberidx, align 8
  %9 = load i64, ptr %8, align 4
  %10 = icmp eq i64 %9, 23
  br i1 %10, label %if.entry5, label %ifend7

if.entry5:                                        ; preds = %ifend
  call void @Parser_advance(ptr %0)
  %memberidx8 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i32 0, i32 2
  %11 = call ptr @Parser_parse_object_type(ptr %0)
  store ptr %11, ptr %memberidx8, align 8
  %12 = call ptr @Parser_eat(ptr %0, i64 24)
  br label %ifend7

ifend7:                                           ; preds = %ifend, %if.entry5
  call void @Parser_new_lines(ptr %0)
  call void @Parser_parse_class_block(ptr %0, ptr %2)
  ret ptr %2
}

define ptr @Parser_parse_type(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @TypeNode_constructor(ptr %2, i64 12, ptr %4)
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 51
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %8 = call ptr @Parser_parse_object_type(ptr %0)
  br label %ifend

else:                                             ; preds = %1
  %9 = icmp eq i64 %6, 23
  br i1 %9, label %if.entry6, label %else7

ifend:                                            ; preds = %if.entry6, %else7, %if.entry
  %type_node.0 = phi ptr [ %8, %if.entry ], [ %17, %if.entry6 ], [ %18, %else7 ]
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, 27
  %13 = icmp eq i64 %11, 4
  %14 = or i1 %12, %13
  %15 = call i1 @Parser_can_parse(ptr %0)
  %16 = and i1 %14, %15
  br i1 %16, label %while.entry, label %while.end

if.entry6:                                        ; preds = %else
  %17 = call ptr @Parser_parse_function_type(ptr %0)
  br label %ifend

else7:                                            ; preds = %else
  %18 = call ptr @Parser_parse_primitive_type(ptr %0)
  br label %ifend

while.entry:                                      ; preds = %ifend17, %ifend
  %type_node.1 = phi ptr [ %type_node.0, %ifend ], [ %type_node.3, %ifend17 ]
  %19 = load ptr, ptr %memberidx, align 8
  %20 = load i64, ptr %19, align 4
  %21 = icmp eq i64 %20, 27
  br i1 %21, label %if.entry15, label %else16

while.end:                                        ; preds = %ifend17, %ifend
  %type_node.2 = phi ptr [ %type_node.3, %ifend17 ], [ %type_node.0, %ifend ]
  ret ptr %type_node.2

if.entry15:                                       ; preds = %while.entry
  call void @Parser_advance(ptr %0)
  %22 = load ptr, ptr %memberidx, align 8
  %23 = load i64, ptr %22, align 4
  %24 = icmp eq i64 %23, 28
  br i1 %24, label %if.entry20, label %else21

else16:                                           ; preds = %while.entry
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PointerTypeNode, ptr null, i32 1) to i32))
  %26 = load ptr, ptr %type_node.1, align 8
  %27 = call ptr @Parser_eat(ptr %0, i64 4)
  %memberidx36 = getelementptr inbounds %Token, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx36, align 8
  %29 = call ptr @FloRange_merge(ptr %26, ptr %28)
  call void @PointerTypeNode_constructor(ptr %25, ptr %type_node.1, ptr %29)
  br label %ifend17

ifend17:                                          ; preds = %else16, %ifend22
  %type_node.3 = phi ptr [ %type_node.4, %ifend22 ], [ %25, %else16 ]
  %30 = load ptr, ptr %memberidx, align 8
  %31 = load i64, ptr %30, align 4
  %32 = icmp eq i64 %31, 27
  %33 = icmp eq i64 %31, 4
  %34 = or i1 %32, %33
  %35 = call i1 @Parser_can_parse(ptr %0)
  %36 = and i1 %34, %35
  br i1 %36, label %while.entry, label %while.end

if.entry20:                                       ; preds = %if.entry15
  %rec_node = alloca ptr, align 8
  %37 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%RecordTypeNode, ptr null, i32 1) to i32))
  %38 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IdentifierToken, ptr null, i32 1) to i32))
  %39 = call ptr @string_from_bytes(ptr @176, i64 5)
  %40 = load ptr, ptr %memberidx, align 8
  %memberidx24 = getelementptr inbounds %Token, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx24, align 8
  call void @IdentifierToken_constructor(ptr %38, ptr %39, ptr %41)
  %42 = load ptr, ptr %memberidx, align 8
  %memberidx26 = getelementptr inbounds %Token, ptr %42, i32 0, i32 1
  %43 = load ptr, ptr %memberidx26, align 8
  call void @RecordTypeNode_constructor(ptr %37, ptr %38, ptr %43)
  store ptr %37, ptr %rec_node, align 8
  %memberidx27 = getelementptr inbounds %RecordTypeNode, ptr %37, i32 0, i32 3
  %44 = load ptr, ptr %memberidx27, align 8
  %45 = load ptr, ptr %44, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i32 0, i32 2
  %46 = load ptr, ptr %memberidx28, align 8
  call void %46(ptr %44, ptr %type_node.1)
  %47 = load ptr, ptr %rec_node, align 8
  br label %ifend22

else21:                                           ; preds = %if.entry15
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayTypeNode, ptr null, i32 1) to i32))
  %49 = call ptr @Parser_parse_expression(ptr %0)
  %50 = load ptr, ptr %memberidx, align 8
  %memberidx30 = getelementptr inbounds %Token, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx30, align 8
  call void @ArrayTypeNode_constructor(ptr %48, ptr %type_node.1, ptr %49, ptr %51)
  br label %ifend22

ifend22:                                          ; preds = %else21, %if.entry20
  %type_node.4 = phi ptr [ %47, %if.entry20 ], [ %48, %else21 ]
  %52 = load ptr, ptr %type_node.4, align 8
  %53 = load ptr, ptr %memberidx, align 8
  %memberidx34 = getelementptr inbounds %Token, ptr %53, i32 0, i32 1
  %54 = load ptr, ptr %memberidx34, align 8
  %55 = call ptr @FloRange_merge(ptr %52, ptr %54)
  store ptr %55, ptr %type_node.4, align 8
  %56 = call ptr @Parser_eat(ptr %0, i64 28)
  br label %ifend17
}

define i64 @Parser_is_term_expr_op(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 4
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend7, %ifend4, %ifend, %1
  %common.ret.op = phi i64 [ 3, %1 ], [ 4, %ifend ], [ 5, %ifend4 ], [ %spec.select, %ifend7 ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %1
  %5 = icmp eq i64 %3, 7
  br i1 %5, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %6 = icmp eq i64 %3, 8
  br i1 %6, label %common.ret, label %ifend7

ifend7:                                           ; preds = %ifend4
  %7 = icmp eq i64 %3, 9
  %spec.select = select i1 %7, i64 6, i64 0
  br label %common.ret
}

define i64 @Parser_is_arith_expr_op(ptr %0) {
common.ret:
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %1 = load ptr, ptr %memberidx, align 8
  %2 = load i64, ptr %1, align 4
  %3 = icmp eq i64 %2, 6
  %4 = icmp eq i64 %2, 5
  %spec.select = select i1 %4, i64 2, i64 0
  %common.ret.op = select i1 %3, i64 1, i64 %spec.select
  ret i64 %common.ret.op
}

define i64 @Parser_is_bitshift_expr_op(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 46
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend4, %ifend, %1
  %common.ret.op = phi i64 [ 13, %1 ], [ 14, %ifend ], [ %spec.select, %ifend4 ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %1
  %5 = icmp eq i64 %3, 47
  br i1 %5, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %6 = icmp eq i64 %3, 54
  %spec.select = select i1 %6, i64 17, i64 0
  br label %common.ret
}

define void @Parser_new_lines(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 31
  %5 = call i1 @Parser_can_parse(ptr %0)
  %6 = and i1 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  call void @Parser_advance(ptr %0)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 31
  %10 = call i1 @Parser_can_parse(ptr %0)
  %11 = and i1 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  ret void
}

define i64 @Parser_is_comp_expr_op(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 39
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend13, %ifend10, %ifend7, %ifend4, %ifend, %1
  %common.ret.op = phi i64 [ 7, %1 ], [ 9, %ifend ], [ 8, %ifend4 ], [ 10, %ifend7 ], [ 11, %ifend10 ], [ %spec.select, %ifend13 ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %1
  %5 = icmp eq i64 %3, 40
  br i1 %5, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %6 = icmp eq i64 %3, 42
  br i1 %6, label %common.ret, label %ifend7

ifend7:                                           ; preds = %ifend4
  %7 = icmp eq i64 %3, 41
  br i1 %7, label %common.ret, label %ifend10

ifend10:                                          ; preds = %ifend7
  %8 = icmp eq i64 %3, 37
  br i1 %8, label %common.ret, label %ifend13

ifend13:                                          ; preds = %ifend10
  %9 = icmp eq i64 %3, 38
  %spec.select = select i1 %9, i64 12, i64 0
  br label %common.ret
}

define i64 @Parser_is_logic_expr_op(ptr %0) {
common.ret:
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %1 = load ptr, ptr %memberidx, align 8
  %2 = load i64, ptr %1, align 4
  %3 = icmp eq i64 %2, 53
  %4 = icmp eq i64 %2, 52
  %spec.select = select i1 %4, i64 16, i64 0
  %common.ret.op = select i1 %3, i64 15, i64 %spec.select
  ret i64 %common.ret.op
}

define i64 @Array_IdentifierToken__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_IdentifierToken__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_IdentifierToken____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_IdentifierToken__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_IdentifierToken__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_IdentifierToken____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_IdentifierToken____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_IdentifierToken____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_IdentifierToken_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_IdentifierToken____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_IdentifierToken__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_IdentifierToken_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @ImportNode_constructor(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_IdentifierToken_, ptr null, i32 1) to i32))
  call void @Array_IdentifierToken__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_IdentifierToken_, ptr %2, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_IdentifierToken_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %2, ptr %0, align 8
  ret void
}

define i64 @Array_ImportNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ImportNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_ImportNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_ImportNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_ImportNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_ImportNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_ImportNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_ImportNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_ImportNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ImportNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_ImportNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @VarDeclarationStatement_constructor(ptr %0, ptr %1) {
  call void @StatementNode_constructor(ptr %0, i64 1, ptr %1)
  %memberidx = getelementptr inbounds %VarDeclarationStatement, ptr %0, i32 0, i32 3
  store ptr null, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %VarDeclarationStatement, ptr %0, i32 0, i32 4
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define i64 @Array_VarDeclarationStatement__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_VarDeclarationStatement__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_VarDeclarationStatement____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_VarDeclarationStatement__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_VarDeclarationStatement__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_VarDeclarationStatement____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_VarDeclarationStatement____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_VarDeclarationStatement____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_VarDeclarationStatement____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_VarDeclarationStatement__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_VarDeclarationStatement_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @EnumNodeField_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %EnumNodeField, ptr %0, i32 0, i32 1
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define i64 @Array_EnumNodeField__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_EnumNodeField__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_EnumNodeField____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_EnumNodeField__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_EnumNodeField__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_EnumNodeField____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_EnumNodeField____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_EnumNodeField____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_EnumNodeField____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_EnumNodeField__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_EnumNodeField_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @EnumNode_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %EnumNode, ptr %0, i32 0, i32 1
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumNodeField_, ptr null, i32 1) to i32))
  call void @Array_EnumNodeField__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %3, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %EnumNode, ptr %0, i32 0, i32 2
  store ptr null, ptr %memberidx4, align 8
  ret void
}

define i64 @Array_EnumNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_EnumNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_EnumNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_EnumNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_EnumNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_EnumNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_EnumNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_EnumNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_EnumNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_EnumNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_EnumNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @TypeAliasNode_constructor(ptr %0, ptr %1) {
  store ptr %1, ptr %0, align 8
  ret void
}

define i64 @Array_TypeAliasNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_TypeAliasNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_TypeAliasNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_TypeAliasNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_TypeAliasNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_TypeAliasNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_TypeAliasNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_TypeAliasNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_TypeAliasNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_TypeAliasNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_TypeAliasNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @ConstDeclarationStatement_constructor(ptr %0, ptr %1) {
  call void @StatementNode_constructor(ptr %0, i64 2, ptr %1)
  %memberidx = getelementptr inbounds %ConstDeclarationStatement, ptr %0, i32 0, i32 3
  store ptr null, ptr %memberidx, align 8
  ret void
}

define i64 @Array_ConstDeclarationStatement__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ConstDeclarationStatement__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_ConstDeclarationStatement____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_ConstDeclarationStatement__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_ConstDeclarationStatement__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_ConstDeclarationStatement____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_ConstDeclarationStatement____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_ConstDeclarationStatement____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_ConstDeclarationStatement____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ConstDeclarationStatement__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_ConstDeclarationStatement_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define i64 @Array_ClassDeclarationNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ClassDeclarationNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_ClassDeclarationNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_ClassDeclarationNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_ClassDeclarationNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_ClassDeclarationNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_ClassDeclarationNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_ClassDeclarationNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_ClassDeclarationNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ClassDeclarationNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_ClassDeclarationNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @FunctionDeclarationNode_constructor(ptr %0) {
  %memberidx = getelementptr inbounds %FunctionDeclarationNode, ptr %0, i32 0, i32 1
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ArgNode_, ptr null, i32 1) to i32))
  call void @Array_ArgNode__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %2, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %2, ptr %memberidx, align 8
  %memberidx3 = getelementptr inbounds %FunctionDeclarationNode, ptr %0, i32 0, i32 4
  store i1 false, ptr %memberidx3, align 1
  ret void
}

define i64 @Array_FunctionDeclarationNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FunctionDeclarationNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_FunctionDeclarationNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_FunctionDeclarationNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_FunctionDeclarationNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_FunctionDeclarationNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_FunctionDeclarationNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_FunctionDeclarationNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_FunctionDeclarationNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FunctionDeclarationNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_FunctionDeclarationNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @ModuleAST_constructor(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FunctionDeclarationNode_, ptr null, i32 1) to i32))
  call void @Array_FunctionDeclarationNode__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %2, ptr %0, align 8
  %memberidx3 = getelementptr inbounds %ModuleAST, ptr %0, i32 0, i32 1
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassDeclarationNode_, ptr null, i32 1) to i32))
  call void @Array_ClassDeclarationNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 1
  %memberidx5 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx5, align 4
  store ptr %3, ptr %memberidx3, align 8
  %memberidx6 = getelementptr inbounds %ModuleAST, ptr %0, i32 0, i32 3
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ImportNode_, ptr null, i32 1) to i32))
  call void @Array_ImportNode__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx7 = getelementptr inbounds %Array_ImportNode_, ptr %4, i32 0, i32 1
  %memberidx8 = getelementptr inbounds %Array_ImportNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx8, align 4
  store ptr %4, ptr %memberidx6, align 8
  %memberidx9 = getelementptr inbounds %ModuleAST, ptr %0, i32 0, i32 4
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ConstDeclarationStatement_, ptr null, i32 1) to i32))
  call void @Array_ConstDeclarationStatement__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx10 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %5, i32 0, i32 1
  %memberidx11 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx11, align 4
  store ptr %5, ptr %memberidx9, align 8
  %memberidx12 = getelementptr inbounds %ModuleAST, ptr %0, i32 0, i32 5
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_VarDeclarationStatement_, ptr null, i32 1) to i32))
  call void @Array_VarDeclarationStatement__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx13 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %6, i32 0, i32 1
  %memberidx14 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx14, align 4
  store ptr %6, ptr %memberidx12, align 8
  %memberidx15 = getelementptr inbounds %ModuleAST, ptr %0, i32 0, i32 2
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumNode_, ptr null, i32 1) to i32))
  call void @Array_EnumNode__constructor(ptr %7, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx16 = getelementptr inbounds %Array_EnumNode_, ptr %7, i32 0, i32 1
  %memberidx17 = getelementptr inbounds %Array_EnumNode_, ptr %7, i32 0, i32 2
  store i64 0, ptr %memberidx17, align 4
  store ptr %7, ptr %memberidx15, align 8
  %memberidx18 = getelementptr inbounds %ModuleAST, ptr %0, i32 0, i32 6
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_TypeAliasNode_, ptr null, i32 1) to i32))
  call void @Array_TypeAliasNode__constructor(ptr %8, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx19 = getelementptr inbounds %Array_TypeAliasNode_, ptr %8, i32 0, i32 1
  %memberidx20 = getelementptr inbounds %Array_TypeAliasNode_, ptr %8, i32 0, i32 2
  store i64 0, ptr %memberidx20, align 4
  store ptr %8, ptr %memberidx18, align 8
  ret void
}

define ptr @Parser_parse(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx1, align 8
  call void @Parser_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ModuleAST, ptr null, i32 1) to i32))
  call void @ModuleAST_constructor(ptr %4)
  call void @Parser_new_lines(ptr %0)
  %5 = call i1 @Parser_can_parse(ptr %0)
  br i1 %5, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %3
  %memberidx2 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 74
  br i1 %8, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %3
  ret ptr %4

if.entry:                                         ; preds = %while.entry
  call void @Parser_advance(ptr %0)
  %9 = load ptr, ptr %4, align 8
  %10 = load ptr, ptr %9, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = call ptr @Parser_parse_function(ptr %0)
  call void %11(ptr %9, ptr %12)
  br label %ifend

else:                                             ; preds = %while.entry
  %13 = icmp eq i64 %7, 83
  br i1 %13, label %if.entry8, label %else9

ifend:                                            ; preds = %if.entry46, %else47, %if.entry36, %if.entry29, %if.entry22, %if.entry15, %if.entry8, %if.entry
  call void @Parser_new_lines(ptr %0)
  %14 = call i1 @Parser_can_parse(ptr %0)
  br i1 %14, label %while.entry, label %while.end

if.entry8:                                        ; preds = %else
  %memberidx11 = getelementptr inbounds %ModuleAST, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %memberidx11, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx12, align 8
  %18 = call ptr @Parser_parse_class(ptr %0)
  call void %17(ptr %15, ptr %18)
  br label %ifend

else9:                                            ; preds = %else
  %19 = icmp eq i64 %7, 84
  br i1 %19, label %if.entry15, label %else16

if.entry15:                                       ; preds = %else9
  %memberidx18 = getelementptr inbounds %ModuleAST, ptr %4, i32 0, i32 2
  %20 = load ptr, ptr %memberidx18, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx19, align 8
  %23 = call ptr @Parser_parse_enum(ptr %0)
  call void %22(ptr %20, ptr %23)
  br label %ifend

else16:                                           ; preds = %else9
  %24 = icmp eq i64 %7, 78
  br i1 %24, label %if.entry22, label %else23

if.entry22:                                       ; preds = %else16
  %memberidx25 = getelementptr inbounds %ModuleAST, ptr %4, i32 0, i32 3
  %25 = load ptr, ptr %memberidx25, align 8
  %26 = load ptr, ptr %25, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %memberidx26, align 8
  %28 = call ptr @Parser_parse_import(ptr %0)
  call void %27(ptr %25, ptr %28)
  br label %ifend

else23:                                           ; preds = %else16
  %29 = icmp eq i64 %7, 55
  br i1 %29, label %if.entry29, label %else30

if.entry29:                                       ; preds = %else23
  %memberidx32 = getelementptr inbounds %ModuleAST, ptr %4, i32 0, i32 4
  %30 = load ptr, ptr %memberidx32, align 8
  %31 = load ptr, ptr %30, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i32 0, i32 2
  %32 = load ptr, ptr %memberidx33, align 8
  %33 = call ptr @Parser_parse_const_declaration_statement(ptr %0)
  call void %32(ptr %30, ptr %33)
  br label %ifend

else30:                                           ; preds = %else23
  %34 = icmp eq i64 %7, 56
  br i1 %34, label %if.entry36, label %else37

if.entry36:                                       ; preds = %else30
  %memberidx39 = getelementptr inbounds %ModuleAST, ptr %4, i32 0, i32 5
  %35 = load ptr, ptr %memberidx39, align 8
  %36 = load ptr, ptr %35, align 8
  %memberidx40 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 2
  %37 = load ptr, ptr %memberidx40, align 8
  %38 = call ptr @Parser_parse_variable_declaration_statement(ptr %0)
  call void %37(ptr %35, ptr %38)
  br label %ifend

else37:                                           ; preds = %else30
  %39 = icmp eq i64 %7, 51
  %memberidx44 = getelementptr inbounds %IdentifierToken, ptr %6, i32 0, i32 2
  %40 = load ptr, ptr %memberidx44, align 8
  %41 = load ptr, ptr %40, align 8
  %memberidx45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i32 0, i32 4
  %42 = load ptr, ptr %memberidx45, align 8
  %43 = call ptr @string_from_bytes(ptr @181, i64 4)
  %44 = call i1 %42(ptr %40, ptr %43)
  %45 = and i1 %39, %44
  br i1 %45, label %if.entry46, label %else47

if.entry46:                                       ; preds = %else37
  %memberidx49 = getelementptr inbounds %ModuleAST, ptr %4, i32 0, i32 6
  %46 = load ptr, ptr %memberidx49, align 8
  %47 = load ptr, ptr %46, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %47, i32 0, i32 2
  %48 = load ptr, ptr %memberidx50, align 8
  %49 = call ptr @Parser_parse_type_alias(ptr %0)
  call void %48(ptr %46, ptr %49)
  br label %ifend

else47:                                           ; preds = %else37
  %50 = call ptr @string_from_bytes(ptr @182, i64 79)
  call void @Parser_error(ptr %0, ptr %50)
  br label %ifend
}

define ptr @Parser_peek(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 4
  %3 = load i64, ptr %memberidx, align 4
  %4 = add i64 %3, %1
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp slt i64 %4, %6
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %10, %if.entry ], [ %14, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %5, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = call ptr %9(ptr %5, i64 %4)
  br label %common.ret

ifend:                                            ; preds = %2
  %11 = load ptr, ptr %5, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx6, align 8
  %13 = sub i64 %6, 1
  %14 = call ptr %12(ptr %5, i64 %13)
  br label %common.ret
}

define i64 @Array_ExpressionNode__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ExpressionNode__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_ExpressionNode____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_ExpressionNode__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_ExpressionNode__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_ExpressionNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_ExpressionNode____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_ExpressionNode____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_ExpressionNode____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ExpressionNode__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_ExpressionNode_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Parser_parse_expression_list(ptr %0, ptr %1) {
  call void @Parser_new_lines(ptr %0)
  %3 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @Parser_parse_expression(ptr %0)
  call void %4(ptr %1, ptr %5)
  call void @Parser_new_lines(ptr %0)
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 3
  %9 = call i1 @Parser_can_parse(ptr %0)
  %10 = and i1 %8, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  call void @Parser_advance(ptr %0)
  call void @Parser_new_lines(ptr %0)
  %11 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = call ptr @Parser_parse_expression(ptr %0)
  call void %12(ptr %1, ptr %13)
  %14 = load ptr, ptr %memberidx1, align 8
  %15 = load i64, ptr %14, align 4
  %16 = icmp eq i64 %15, 3
  %17 = call i1 @Parser_can_parse(ptr %0)
  %18 = and i1 %16, %17
  br i1 %18, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  call void @Parser_new_lines(ptr %0)
  ret void
}

define void @StringExpressionNode_constructor(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Token, ptr %1, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  call void @ExpressionNode_constructor(ptr %0, i64 2, ptr %4)
  %memberidx1 = getelementptr inbounds %StringExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %StringExpressionNode, ptr %0, i32 0, i32 4
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define ptr @Parser_parse_string(ptr %0) {
for.entry:
  %1 = call ptr @Parser_eat(ptr %0, i64 32)
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Parser, ptr null, i32 1) to i32))
  call void @Parser_constructor(ptr %2)
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 2
  %3 = load ptr, ptr %memberidx1, align 8
  store ptr %3, ptr %memberidx, align 8
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx4 = getelementptr inbounds %StrToken, ptr %1, i32 0, i32 4
  %5 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_Array_Token__, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp slt i64 %i.0, %6
  %8 = call i1 @Parser_can_parse(ptr %0)
  %9 = and i1 %7, %8
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %memberidx6 = getelementptr inbounds %Parser, ptr %2, i32 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = load ptr, ptr %10, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx8, align 8
  %13 = call ptr %12(ptr %10, i64 %i.0)
  store ptr %13, ptr %memberidx6, align 8
  %memberidx9 = getelementptr inbounds %Parser, ptr %2, i32 0, i32 4
  store i64 -1, ptr %memberidx9, align 4
  call void @Parser_advance(ptr %2)
  %14 = load ptr, ptr %4, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx10, align 8
  %16 = call ptr @Parser_parse_expression(ptr %2)
  call void %15(ptr %4, ptr %16)
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringExpressionNode, ptr null, i32 1) to i32))
  call void @StringExpressionNode_constructor(ptr %18, ptr %1, ptr %4)
  ret ptr %18
}

define ptr @Parser_parse_primitive_type(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @TypeNode_constructor(ptr %2, i64 12, ptr %4)
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 59
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %memberidx4 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 0, ptr %memberidx4, align 4
  br label %ifend

else:                                             ; preds = %1
  %8 = icmp eq i64 %6, 60
  br i1 %8, label %if.entry7, label %else8

ifend:                                            ; preds = %if.entry73, %else68, %if.entry67, %if.entry61, %if.entry55, %if.entry49, %if.entry43, %if.entry37, %if.entry31, %if.entry25, %if.entry19, %if.entry13, %if.entry7, %if.entry
  call void @Parser_advance(ptr %0)
  ret ptr %2

if.entry7:                                        ; preds = %else
  %memberidx10 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 1, ptr %memberidx10, align 4
  br label %ifend

else8:                                            ; preds = %else
  %9 = icmp eq i64 %6, 61
  br i1 %9, label %if.entry13, label %else14

if.entry13:                                       ; preds = %else8
  %memberidx16 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 2, ptr %memberidx16, align 4
  br label %ifend

else14:                                           ; preds = %else8
  %10 = icmp eq i64 %6, 62
  br i1 %10, label %if.entry19, label %else20

if.entry19:                                       ; preds = %else14
  %memberidx22 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 3, ptr %memberidx22, align 4
  br label %ifend

else20:                                           ; preds = %else14
  %11 = icmp eq i64 %6, 63
  br i1 %11, label %if.entry25, label %else26

if.entry25:                                       ; preds = %else20
  %memberidx28 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 4, ptr %memberidx28, align 4
  br label %ifend

else26:                                           ; preds = %else20
  %12 = icmp eq i64 %6, 64
  br i1 %12, label %if.entry31, label %else32

if.entry31:                                       ; preds = %else26
  %memberidx34 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 5, ptr %memberidx34, align 4
  br label %ifend

else32:                                           ; preds = %else26
  %13 = icmp eq i64 %6, 65
  br i1 %13, label %if.entry37, label %else38

if.entry37:                                       ; preds = %else32
  %memberidx40 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 6, ptr %memberidx40, align 4
  br label %ifend

else38:                                           ; preds = %else32
  %14 = icmp eq i64 %6, 66
  br i1 %14, label %if.entry43, label %else44

if.entry43:                                       ; preds = %else38
  %memberidx46 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 7, ptr %memberidx46, align 4
  br label %ifend

else44:                                           ; preds = %else38
  %15 = icmp eq i64 %6, 67
  br i1 %15, label %if.entry49, label %else50

if.entry49:                                       ; preds = %else44
  %memberidx52 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 8, ptr %memberidx52, align 4
  br label %ifend

else50:                                           ; preds = %else44
  %16 = icmp eq i64 %6, 68
  br i1 %16, label %if.entry55, label %else56

if.entry55:                                       ; preds = %else50
  %memberidx58 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 9, ptr %memberidx58, align 4
  br label %ifend

else56:                                           ; preds = %else50
  %17 = icmp eq i64 %6, 69
  br i1 %17, label %if.entry61, label %else62

if.entry61:                                       ; preds = %else56
  %memberidx64 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 10, ptr %memberidx64, align 4
  br label %ifend

else62:                                           ; preds = %else56
  %18 = icmp eq i64 %6, 70
  br i1 %18, label %if.entry67, label %else68

if.entry67:                                       ; preds = %else62
  %memberidx70 = getelementptr inbounds %TypeNode, ptr %2, i32 0, i32 1
  store i64 11, ptr %memberidx70, align 4
  br label %ifend

else68:                                           ; preds = %else62
  %19 = icmp ne i64 %6, 71
  br i1 %19, label %if.entry73, label %ifend

if.entry73:                                       ; preds = %else68
  %20 = call ptr @string_from_bytes(ptr @175, i64 26)
  call void @Parser_error(ptr %0, ptr %20)
  br label %ifend
}

define void @IfStatementNode_constructor(ptr %0, ptr %1) {
  call void @StatementNode_constructor(ptr %0, i64 0, ptr %1)
  %memberidx = getelementptr inbounds %IfStatementNode, ptr %0, i32 0, i32 4
  store ptr null, ptr %memberidx, align 8
  ret void
}

define ptr @Parser_parse_if_statement(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IfStatementNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @IfStatementNode_constructor(ptr %2, ptr %4)
  call void @Parser_advance(ptr %0)
  %memberidx2 = getelementptr inbounds %IfStatementNode, ptr %2, i32 0, i32 2
  %5 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %5, ptr %memberidx2, align 8
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @FloRange_merge(ptr %6, ptr %7)
  store ptr %8, ptr %2, align 8
  %memberidx7 = getelementptr inbounds %IfStatementNode, ptr %2, i32 0, i32 3
  %9 = call ptr @Parser_parse_block(ptr %0)
  store ptr %9, ptr %memberidx7, align 8
  call void @Parser_new_lines(ptr %0)
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, 58
  br i1 %12, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @Parser_advance(ptr %0)
  %memberidx10 = getelementptr inbounds %IfStatementNode, ptr %2, i32 0, i32 4
  %13 = call ptr @Parser_parse_block(ptr %0)
  store ptr %13, ptr %memberidx10, align 8
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  ret ptr %2
}

define void @WhileStatementNode_constructor(ptr %0, ptr %1) {
  call void @StatementNode_constructor(ptr %0, i64 4, ptr %1)
  ret void
}

define ptr @Parser_parse_while_statement(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%WhileStatementNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @WhileStatementNode_constructor(ptr %2, ptr %4)
  call void @Parser_advance(ptr %0)
  %memberidx2 = getelementptr inbounds %WhileStatementNode, ptr %2, i32 0, i32 2
  %5 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %5, ptr %memberidx2, align 8
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @FloRange_merge(ptr %6, ptr %7)
  store ptr %8, ptr %2, align 8
  %memberidx7 = getelementptr inbounds %WhileStatementNode, ptr %2, i32 0, i32 3
  %9 = call ptr @Parser_parse_block(ptr %0)
  store ptr %9, ptr %memberidx7, align 8
  ret ptr %2
}

define void @ForStatementNode_constructor(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %ForStatementNode, ptr %0, i32 0, i32 2
  store ptr null, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ForStatementNode, ptr %0, i32 0, i32 3
  store ptr null, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ForStatementNode, ptr %0, i32 0, i32 4
  store ptr null, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %ForStatementNode, ptr %0, i32 0, i32 6
  store i64 0, ptr %memberidx3, align 4
  call void @StatementNode_constructor(ptr %0, i64 3, ptr %1)
  ret void
}

define ptr @Parser_parse_for_statement(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ForStatementNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @ForStatementNode_constructor(ptr %2, ptr %4)
  call void @Parser_advance(ptr %0)
  %5 = call ptr @Parser_peek(ptr %0, i64 1)
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 82
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %8 = load ptr, ptr %memberidx, align 8
  %9 = load i64, ptr %8, align 4
  %10 = icmp ne i64 %9, 2
  br i1 %10, label %if.entry5, label %ifend7

else:                                             ; preds = %1
  %memberidx21 = getelementptr inbounds %ForStatementNode, ptr %2, i32 0, i32 6
  store i64 1, ptr %memberidx21, align 4
  %memberidx22 = getelementptr inbounds %ForStatementNode, ptr %2, i32 0, i32 7
  %11 = call ptr @Parser_eat(ptr %0, i64 51)
  store ptr %11, ptr %memberidx22, align 8
  %12 = call ptr @Parser_eat(ptr %0, i64 82)
  %memberidx23 = getelementptr inbounds %ForStatementNode, ptr %2, i32 0, i32 5
  %13 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %13, ptr %memberidx23, align 8
  br label %ifend

ifend:                                            ; preds = %if.entry17, %ifend13, %else
  %14 = load ptr, ptr %2, align 8
  %15 = load ptr, ptr %memberidx, align 8
  %memberidx27 = getelementptr inbounds %Token, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx27, align 8
  %17 = call ptr @FloRange_merge(ptr %14, ptr %16)
  store ptr %17, ptr %2, align 8
  %18 = call i1 @Parser_can_parse(ptr %0)
  br i1 %18, label %if.entry28, label %ifend30

if.entry5:                                        ; preds = %if.entry
  %memberidx8 = getelementptr inbounds %ForStatementNode, ptr %2, i32 0, i32 2
  %19 = call ptr @Parser_parse_statement(ptr %0)
  store ptr %19, ptr %memberidx8, align 8
  br label %ifend7

ifend7:                                           ; preds = %if.entry, %if.entry5
  %20 = call ptr @Parser_eat(ptr %0, i64 2)
  %21 = load ptr, ptr %memberidx, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp ne i64 %22, 2
  br i1 %23, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend7
  %memberidx14 = getelementptr inbounds %ForStatementNode, ptr %2, i32 0, i32 3
  %24 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %24, ptr %memberidx14, align 8
  br label %ifend13

ifend13:                                          ; preds = %ifend7, %if.entry11
  %25 = call ptr @Parser_eat(ptr %0, i64 2)
  %26 = load ptr, ptr %memberidx, align 8
  %27 = load i64, ptr %26, align 4
  %28 = icmp ne i64 %27, 25
  br i1 %28, label %if.entry17, label %ifend

if.entry17:                                       ; preds = %ifend13
  %memberidx20 = getelementptr inbounds %ForStatementNode, ptr %2, i32 0, i32 4
  %29 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %29, ptr %memberidx20, align 8
  br label %ifend

if.entry28:                                       ; preds = %ifend
  %memberidx31 = getelementptr inbounds %ForStatementNode, ptr %2, i32 0, i32 8
  %30 = call ptr @Parser_parse_block(ptr %0)
  store ptr %30, ptr %memberidx31, align 8
  br label %ifend30

ifend30:                                          ; preds = %ifend, %if.entry28
  ret ptr %2
}

define ptr @Parser_parse_variable_declaration_statement(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarDeclarationStatement, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @VarDeclarationStatement_constructor(ptr %2, ptr %4)
  call void @Parser_advance(ptr %0)
  %memberidx2 = getelementptr inbounds %VarDeclarationStatement, ptr %2, i32 0, i32 2
  %5 = call ptr @Parser_eat(ptr %0, i64 51)
  store ptr %5, ptr %memberidx2, align 8
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @Parser_advance(ptr %0)
  %memberidx5 = getelementptr inbounds %VarDeclarationStatement, ptr %2, i32 0, i32 3
  %9 = call ptr @Parser_parse_type(ptr %0)
  store ptr %9, ptr %memberidx5, align 8
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %end_range = alloca ptr, align 8
  %10 = load ptr, ptr %memberidx, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx7, align 8
  store ptr %11, ptr %end_range, align 8
  %12 = load ptr, ptr %memberidx, align 8
  %13 = load i64, ptr %12, align 4
  %14 = icmp eq i64 %13, 36
  br i1 %14, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend
  call void @Parser_advance(ptr %0)
  %memberidx13 = getelementptr inbounds %VarDeclarationStatement, ptr %2, i32 0, i32 4
  %15 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %15, ptr %memberidx13, align 8
  %16 = load ptr, ptr %15, align 8
  store ptr %16, ptr %end_range, align 8
  br label %ifend12

else11:                                           ; preds = %ifend
  %memberidx16 = getelementptr inbounds %VarDeclarationStatement, ptr %2, i32 0, i32 3
  %17 = load ptr, ptr %memberidx16, align 8
  %18 = icmp ne ptr %17, null
  %19 = icmp eq i64 %13, 23
  %20 = and i1 %18, %19
  br i1 %20, label %if.entry19, label %ifend12

ifend12:                                          ; preds = %ifend30, %else11, %if.entry10
  %21 = load ptr, ptr %2, align 8
  %22 = load ptr, ptr %end_range, align 8
  %23 = call ptr @FloRange_merge(ptr %21, ptr %22)
  store ptr %23, ptr %2, align 8
  ret ptr %2

if.entry19:                                       ; preds = %else11
  %new_node = alloca ptr, align 8
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NewExpressionNode, ptr null, i32 1) to i32))
  %25 = load ptr, ptr %memberidx16, align 8
  %26 = load ptr, ptr %25, align 8
  call void @NewExpressionNode_constructor(ptr %24, ptr %25, ptr %26)
  store ptr %24, ptr %new_node, align 8
  %memberidx25 = getelementptr inbounds %NewExpressionNode, ptr %24, i32 0, i32 4
  store i1 false, ptr %memberidx25, align 1
  call void @Parser_advance(ptr %0)
  %27 = load ptr, ptr %memberidx, align 8
  %28 = load i64, ptr %27, align 4
  %29 = icmp ne i64 %28, 24
  br i1 %29, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %if.entry19
  %30 = load ptr, ptr %new_node, align 8
  %memberidx31 = getelementptr inbounds %NewExpressionNode, ptr %30, i32 0, i32 5
  %31 = load ptr, ptr %memberidx31, align 8
  call void @Parser_parse_expression_list(ptr %0, ptr %31)
  br label %ifend30

ifend30:                                          ; preds = %if.entry19, %if.entry28
  %32 = load ptr, ptr %new_node, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @Parser_eat(ptr %0, i64 24)
  %memberidx34 = getelementptr inbounds %Token, ptr %34, i32 0, i32 1
  %35 = load ptr, ptr %memberidx34, align 8
  %36 = call ptr @FloRange_merge(ptr %33, ptr %35)
  store ptr %36, ptr %32, align 8
  %memberidx35 = getelementptr inbounds %VarDeclarationStatement, ptr %2, i32 0, i32 4
  %37 = load ptr, ptr %new_node, align 8
  store ptr %37, ptr %memberidx35, align 8
  br label %ifend12
}

define void @ReturnStatementNode_constructor(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %ReturnStatementNode, ptr %0, i32 0, i32 2
  store ptr null, ptr %memberidx, align 8
  call void @StatementNode_constructor(ptr %0, i64 7, ptr %1)
  ret void
}

define ptr @Parser_parse_return_statement(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ReturnStatementNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @ReturnStatementNode_constructor(ptr %2, ptr %4)
  call void @Parser_advance(ptr %0)
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 31
  %8 = call i1 @Parser_can_parse(ptr %0)
  %9 = and i1 %7, %8
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp ne i64 %11, 26
  %13 = and i1 %9, %12
  br i1 %13, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %value = alloca ptr, align 8
  %14 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %14, ptr %value, align 8
  %15 = load ptr, ptr %2, align 8
  %16 = load ptr, ptr %14, align 8
  %17 = call ptr @FloRange_merge(ptr %15, ptr %16)
  store ptr %17, ptr %2, align 8
  %memberidx9 = getelementptr inbounds %ReturnStatementNode, ptr %2, i32 0, i32 2
  %18 = load ptr, ptr %value, align 8
  store ptr %18, ptr %memberidx9, align 8
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  ret ptr %2
}

define ptr @Parser_parse_statement(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load i64, ptr %2, align 4
  %5 = icmp eq i64 %4, 57
  br i1 %5, label %if.entry, label %else

common.ret:                                       ; preds = %if.entry36, %if.entry31, %if.entry26, %if.entry21, %if.entry16, %if.entry11, %if.entry6, %ifend38, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %21, %ifend38 ], [ %8, %if.entry6 ], [ %10, %if.entry11 ], [ %12, %if.entry16 ], [ %14, %if.entry21 ], [ %16, %if.entry26 ], [ %18, %if.entry31 ], [ %20, %if.entry36 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %6 = call ptr @Parser_parse_if_statement(ptr %0)
  br label %common.ret

else:                                             ; preds = %1
  %7 = icmp eq i64 %4, 73
  br i1 %7, label %if.entry6, label %else7

if.entry6:                                        ; preds = %else
  %8 = call ptr @Parser_parse_while_statement(ptr %0)
  br label %common.ret

else7:                                            ; preds = %else
  %9 = icmp eq i64 %4, 72
  br i1 %9, label %if.entry11, label %else12

if.entry11:                                       ; preds = %else7
  %10 = call ptr @Parser_parse_for_statement(ptr %0)
  br label %common.ret

else12:                                           ; preds = %else7
  %11 = icmp eq i64 %4, 77
  br i1 %11, label %if.entry16, label %else17

if.entry16:                                       ; preds = %else12
  %12 = call ptr @Parser_parse_return_statement(ptr %0)
  br label %common.ret

else17:                                           ; preds = %else12
  %13 = icmp eq i64 %4, 56
  br i1 %13, label %if.entry21, label %else22

if.entry21:                                       ; preds = %else17
  %14 = call ptr @Parser_parse_variable_declaration_statement(ptr %0)
  br label %common.ret

else22:                                           ; preds = %else17
  %15 = icmp eq i64 %4, 55
  br i1 %15, label %if.entry26, label %else27

if.entry26:                                       ; preds = %else22
  %16 = call ptr @Parser_parse_const_declaration_statement(ptr %0)
  br label %common.ret

else27:                                           ; preds = %else22
  %17 = icmp eq i64 %4, 76
  br i1 %17, label %if.entry31, label %else32

if.entry31:                                       ; preds = %else27
  call void @Parser_advance(ptr %0)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StatementNode, ptr null, i32 1) to i32))
  call void @StatementNode_constructor(ptr %18, i64 5, ptr %3)
  br label %common.ret

else32:                                           ; preds = %else27
  %19 = icmp eq i64 %4, 75
  br i1 %19, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %else32
  call void @Parser_advance(ptr %0)
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StatementNode, ptr null, i32 1) to i32))
  call void @StatementNode_constructor(ptr %20, i64 6, ptr %3)
  br label %common.ret

ifend38:                                          ; preds = %else32
  %21 = call ptr @Parser_parse_expression(ptr %0)
  br label %common.ret
}

define void @Parser_parse_args(ptr %0, ptr %1) {
  %3 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @Parser_parse_arg(ptr %0)
  call void %4(ptr %1, ptr %5)
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 3
  %9 = call i1 @Parser_can_parse(ptr %0)
  %10 = and i1 %8, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %11 = call ptr @Parser_eat(ptr %0, i64 3)
  %12 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = call ptr @Parser_parse_arg(ptr %0)
  call void %13(ptr %1, ptr %14)
  %15 = load ptr, ptr %memberidx1, align 8
  %16 = load i64, ptr %15, align 4
  %17 = icmp eq i64 %16, 3
  %18 = call i1 @Parser_can_parse(ptr %0)
  %19 = and i1 %17, %18
  br i1 %19, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define i64 @Parser_parse_access_modifier(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 80
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend6, %ifend, %1
  %common.ret.op = phi i64 [ 2, %1 ], [ 1, %ifend ], [ %spec.select, %ifend6 ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %1
  %5 = icmp eq i64 %3, 79
  br i1 %5, label %common.ret, label %ifend6

ifend6:                                           ; preds = %ifend
  %6 = icmp eq i64 %3, 81
  %spec.select = select i1 %6, i64 3, i64 0
  br label %common.ret
}

define ptr @Parser_parse_const_declaration_statement(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ConstDeclarationStatement, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @ConstDeclarationStatement_constructor(ptr %2, ptr %4)
  call void @Parser_advance(ptr %0)
  %memberidx2 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i32 0, i32 2
  %5 = call ptr @Parser_eat(ptr %0, i64 51)
  store ptr %5, ptr %memberidx2, align 8
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @Parser_advance(ptr %0)
  %memberidx5 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i32 0, i32 3
  %9 = call ptr @Parser_parse_type(ptr %0)
  store ptr %9, ptr %memberidx5, align 8
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %10 = call ptr @Parser_eat(ptr %0, i64 36)
  %memberidx6 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i32 0, i32 4
  %11 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %11, ptr %memberidx6, align 8
  %12 = load ptr, ptr %2, align 8
  %13 = load ptr, ptr %11, align 8
  %14 = call ptr @FloRange_merge(ptr %12, ptr %13)
  store ptr %14, ptr %2, align 8
  ret ptr %2
}

define ptr @Parser_parse_type_alias(ptr %0) {
  call void @Parser_advance(ptr %0)
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeAliasNode, ptr null, i32 1) to i32))
  %3 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @TypeAliasNode_constructor(ptr %2, ptr %3)
  %4 = call ptr @Parser_eat(ptr %0, i64 36)
  %memberidx = getelementptr inbounds %TypeAliasNode, ptr %2, i32 0, i32 1
  %5 = call ptr @Parser_parse_type(ptr %0)
  store ptr %5, ptr %memberidx, align 8
  ret ptr %2
}

define void @Parser_parse_type_list(ptr %0, ptr %1) {
  %3 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @Parser_parse_type(ptr %0)
  call void %4(ptr %1, ptr %5)
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 3
  %9 = call i1 @Parser_can_parse(ptr %0)
  %10 = and i1 %8, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  call void @Parser_advance(ptr %0)
  %11 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = call ptr @Parser_parse_type(ptr %0)
  call void %12(ptr %1, ptr %13)
  %14 = load ptr, ptr %memberidx1, align 8
  %15 = load i64, ptr %14, align 4
  %16 = icmp eq i64 %15, 3
  %17 = call i1 @Parser_can_parse(ptr %0)
  %18 = and i1 %16, %17
  br i1 %18, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define ptr @Parser_parse_lhs_expression_allow_call(ptr %0) {
  %2 = call ptr @Parser_parse_atom(ptr %0)
  %3 = call i1 @Parser_can_parse(ptr %0)
  br i1 %3, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %expression.0 = phi ptr [ %2, %1 ], [ %expression.2, %ifend ]
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 23
  br i1 %6, label %if.entry, label %else

while.end:                                        ; preds = %else5, %ifend, %1
  %expression.1 = phi ptr [ %expression.2, %ifend ], [ %expression.0, %else5 ], [ %2, %1 ]
  ret ptr %expression.1

if.entry:                                         ; preds = %while.entry
  %7 = call ptr @Parser_parse_call_expression(ptr %0, ptr %expression.0)
  br label %ifend

else:                                             ; preds = %while.entry
  %8 = icmp eq i64 %5, 27
  br i1 %8, label %if.entry4, label %else5

ifend:                                            ; preds = %if.entry4, %if.entry9, %if.entry
  %expression.2 = phi ptr [ %7, %if.entry ], [ %10, %if.entry4 ], [ %12, %if.entry9 ]
  %9 = call i1 @Parser_can_parse(ptr %0)
  br i1 %9, label %while.entry, label %while.end

if.entry4:                                        ; preds = %else
  %10 = call ptr @Parser_parse_index_expression(ptr %0, ptr %expression.0)
  br label %ifend

else5:                                            ; preds = %else
  %11 = icmp eq i64 %5, 48
  br i1 %11, label %if.entry9, label %while.end

if.entry9:                                        ; preds = %else5
  %12 = call ptr @Parser_parse_member_expression(ptr %0, ptr %expression.0)
  br label %ifend
}

define ptr @Parser_parse_atom(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 32
  br i1 %4, label %if.entry, label %else

common.ret:                                       ; preds = %if.entry34, %if.entry29, %if.entry24, %if.entry19, %if.entry14, %if.entry9, %if.entry4, %else35, %if.entry
  %common.ret.op = phi ptr [ %5, %if.entry ], [ %27, %else35 ], [ %7, %if.entry4 ], [ %10, %if.entry9 ], [ %13, %if.entry14 ], [ %16, %if.entry19 ], [ %19, %if.entry24 ], [ %21, %if.entry29 ], [ %25, %if.entry34 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %5 = call ptr @Parser_parse_string(ptr %0)
  br label %common.ret

else:                                             ; preds = %1
  %6 = icmp eq i64 %3, 29
  br i1 %6, label %if.entry4, label %else5

if.entry4:                                        ; preds = %else
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpressionNode, ptr null, i32 1) to i32))
  %8 = call ptr @Parser_eat(ptr %0, i64 29)
  call void @IntExpressionNode_constructor(ptr %7, ptr %8)
  br label %common.ret

else5:                                            ; preds = %else
  %9 = icmp eq i64 %3, 30
  br i1 %9, label %if.entry9, label %else10

if.entry9:                                        ; preds = %else5
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloatExpressionNode, ptr null, i32 1) to i32))
  %11 = call ptr @Parser_eat(ptr %0, i64 30)
  call void @FloatExpressionNode_constructor(ptr %10, ptr %11)
  br label %common.ret

else10:                                           ; preds = %else5
  %12 = icmp eq i64 %3, 33
  br i1 %12, label %if.entry14, label %else15

if.entry14:                                       ; preds = %else10
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CharExpressionNode, ptr null, i32 1) to i32))
  %14 = call ptr @Parser_eat(ptr %0, i64 33)
  call void @CharExpressionNode_constructor(ptr %13, ptr %14)
  br label %common.ret

else15:                                           ; preds = %else10
  %15 = icmp eq i64 %3, 51
  br i1 %15, label %if.entry19, label %else20

if.entry19:                                       ; preds = %else15
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarAccessExpressionNode, ptr null, i32 1) to i32))
  %17 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @VarAccessExpressionNode_constructor(ptr %16, ptr %17)
  br label %common.ret

else20:                                           ; preds = %else15
  %18 = icmp eq i64 %3, 27
  br i1 %18, label %if.entry24, label %else25

if.entry24:                                       ; preds = %else20
  %19 = call ptr @Parser_parse_array_expression(ptr %0)
  br label %common.ret

else25:                                           ; preds = %else20
  %20 = icmp eq i64 %3, 85
  br i1 %20, label %if.entry29, label %else30

if.entry29:                                       ; preds = %else25
  %21 = call ptr @Parser_parse_new_expression(ptr %0)
  br label %common.ret

else30:                                           ; preds = %else25
  %22 = icmp eq i64 %3, 23
  br i1 %22, label %if.entry34, label %else35

if.entry34:                                       ; preds = %else30
  call void @Parser_advance(ptr %0)
  %expression = alloca ptr, align 8
  %23 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %23, ptr %expression, align 8
  %24 = call ptr @Parser_eat(ptr %0, i64 24)
  %25 = load ptr, ptr %expression, align 8
  br label %common.ret

else35:                                           ; preds = %else30
  %26 = call ptr @string_from_bytes(ptr @177, i64 28)
  call void @Parser_error(ptr %0, ptr %26)
  %27 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ExpressionNode, ptr null, i32 1) to i32))
  %28 = load ptr, ptr %memberidx, align 8
  %memberidx38 = getelementptr inbounds %Token, ptr %28, i32 0, i32 1
  %29 = load ptr, ptr %memberidx38, align 8
  call void @ExpressionNode_constructor(ptr %27, i64 7, ptr %29)
  br label %common.ret
}

define ptr @Parser_parse_arg(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArgNode, ptr null, i32 1) to i32))
  %3 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @ArgNode_constructor(ptr %2, ptr %3)
  %4 = call i1 @Parser_can_parse(ptr %0)
  %5 = xor i1 %4, true
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend19, %if.entry6, %if.entry
  ret ptr %2

if.entry:                                         ; preds = %1
  br label %common.ret

ifend:                                            ; preds = %1
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  call void @Parser_advance(ptr %0)
  %memberidx5 = getelementptr inbounds %ArgNode, ptr %2, i32 0, i32 1
  %9 = call ptr @Parser_parse_type(ptr %0)
  store ptr %9, ptr %memberidx5, align 8
  %10 = call i1 @Parser_can_parse(ptr %0)
  %11 = xor i1 %10, true
  br i1 %11, label %if.entry6, label %ifend4

ifend4:                                           ; preds = %if.entry2, %ifend
  %12 = load ptr, ptr %memberidx, align 8
  %13 = load i64, ptr %12, align 4
  %14 = icmp eq i64 %13, 36
  br i1 %14, label %if.entry11, label %ifend13

if.entry6:                                        ; preds = %if.entry2
  br label %common.ret

if.entry11:                                       ; preds = %ifend4
  call void @Parser_advance(ptr %0)
  %memberidx14 = getelementptr inbounds %ArgNode, ptr %2, i32 0, i32 2
  %15 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %15, ptr %memberidx14, align 8
  br label %ifend13

ifend13:                                          ; preds = %ifend4, %if.entry11
  %memberidx15 = getelementptr inbounds %ArgNode, ptr %2, i32 0, i32 1
  %16 = load ptr, ptr %memberidx15, align 8
  %17 = icmp eq ptr %16, null
  %memberidx16 = getelementptr inbounds %ArgNode, ptr %2, i32 0, i32 2
  %18 = load ptr, ptr %memberidx16, align 8
  %19 = icmp eq ptr %18, null
  %20 = and i1 %17, %19
  br i1 %20, label %if.entry17, label %ifend19

if.entry17:                                       ; preds = %ifend13
  %21 = load ptr, ptr %2, align 8
  %memberidx21 = getelementptr inbounds %IdentifierToken, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx21, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 11
  %24 = load ptr, ptr %memberidx22, align 8
  %25 = call ptr %24(ptr %22)
  %26 = alloca ptr, align 8
  %27 = call i64 (ptr, ptr, ...) @asprintf(ptr %26, ptr @178, ptr %25)
  %28 = load ptr, ptr %26, align 8
  %29 = call ptr @string_from_bytes(ptr %28, i64 %27)
  call void @Parser_error(ptr %0, ptr %29)
  %memberidx23 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 2
  %30 = load ptr, ptr %memberidx23, align 8
  %31 = load ptr, ptr %30, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i32 0, i32 5
  %32 = load ptr, ptr %memberidx24, align 8
  %memberidx26 = getelementptr inbounds %Array_FloError_, ptr %30, i32 0, i32 2
  %33 = load i64, ptr %memberidx26, align 4
  %34 = sub i64 %33, 1
  %35 = call ptr %32(ptr %30, i64 %34)
  %memberidx27 = getelementptr inbounds %FloError, ptr %35, i32 0, i32 2
  %36 = load ptr, ptr %2, align 8
  %memberidx29 = getelementptr inbounds %Token, ptr %36, i32 0, i32 1
  %37 = load ptr, ptr %memberidx29, align 8
  store ptr %37, ptr %memberidx27, align 8
  br label %ifend19

ifend19:                                          ; preds = %ifend13, %if.entry17
  br label %common.ret
}

define ptr @Parser_parse_object_type(ptr %0) {
  %2 = call ptr @Parser_eat(ptr %0, i64 51)
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%RecordTypeNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Token, ptr %2, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  call void @RecordTypeNode_constructor(ptr %3, ptr %2, ptr %4)
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 40
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @Parser_advance(ptr %0)
  %memberidx3 = getelementptr inbounds %RecordTypeNode, ptr %3, i32 0, i32 3
  %8 = load ptr, ptr %memberidx3, align 8
  call void @Parser_parse_type_list(ptr %0, ptr %8)
  %9 = load ptr, ptr %3, align 8
  %10 = call ptr @Parser_eat(ptr %0, i64 39)
  %memberidx6 = getelementptr inbounds %Token, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx6, align 8
  %12 = call ptr @FloRange_merge(ptr %9, ptr %11)
  store ptr %12, ptr %3, align 8
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  ret ptr %3
}

define ptr @Parser_parse_unary_expression_pre(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = call i64 @Parser_is_unary_op(ptr %0)
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %8, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %6 = call ptr @Parser_parse_unary_expression_post(ptr %0)
  br label %common.ret

ifend:                                            ; preds = %1
  call void @Parser_advance(ptr %0)
  %expression = alloca ptr, align 8
  %7 = call ptr @Parser_parse_unary_expression_pre(ptr %0)
  store ptr %7, ptr %expression, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpressionNode, ptr null, i32 1) to i32))
  %9 = load ptr, ptr %expression, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = call ptr @FloRange_merge(ptr %3, ptr %10)
  call void @UnaryExpressionNode_constructor(ptr %8, i64 %4, ptr %9, ptr %11)
  br label %common.ret
}

define ptr @Parser_parse_unary_expression_post(ptr %0) {
  %2 = call ptr @Parser_parse_lhs_expression_allow_call(ptr %0)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, 21
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %1
  br label %ifend

else:                                             ; preds = %1
  %6 = icmp eq i64 %4, 22
  br i1 %6, label %if.entry3, label %else4

common.ret:                                       ; preds = %else4, %ifend
  %common.ret.op = phi ptr [ %7, %ifend ], [ %2, %else4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %if.entry3, %if.entry
  %op.0 = phi i64 [ 3, %if.entry ], [ 4, %if.entry3 ]
  call void @Parser_advance(ptr %0)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpressionNode, ptr null, i32 1) to i32))
  %8 = load ptr, ptr %2, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %9 = load ptr, ptr %memberidx7, align 8
  %10 = call ptr @FloRange_merge(ptr %8, ptr %9)
  call void @UnaryExpressionNode_constructor(ptr %7, i64 %op.0, ptr %2, ptr %10)
  br label %common.ret

if.entry3:                                        ; preds = %else
  br label %ifend

else4:                                            ; preds = %else
  br label %common.ret
}

define ptr @Parser_parse_enum(ptr %0) {
  call void @Parser_advance(ptr %0)
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumNode, ptr null, i32 1) to i32))
  %3 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @EnumNode_constructor(ptr %2, ptr %3)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 23
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @Parser_advance(ptr %0)
  %memberidx2 = getelementptr inbounds %EnumNode, ptr %2, i32 0, i32 2
  %7 = call ptr @Parser_parse_type(ptr %0)
  store ptr %7, ptr %memberidx2, align 8
  %8 = call ptr @Parser_eat(ptr %0, i64 24)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  call void @Parser_new_lines(ptr %0)
  %9 = call ptr @Parser_eat(ptr %0, i64 25)
  call void @Parser_new_lines(ptr %0)
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, 51
  br i1 %12, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend9, %ifend
  %enum_field = alloca ptr, align 8
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumNodeField, ptr null, i32 1) to i32))
  %14 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @EnumNodeField_constructor(ptr %13, ptr %14)
  store ptr %13, ptr %enum_field, align 8
  %15 = load ptr, ptr %memberidx, align 8
  %16 = load i64, ptr %15, align 4
  %17 = icmp eq i64 %16, 36
  br i1 %17, label %if.entry7, label %ifend9

while.end:                                        ; preds = %ifend9, %ifend
  %18 = call ptr @Parser_eat(ptr %0, i64 26)
  ret ptr %2

if.entry7:                                        ; preds = %while.entry
  call void @Parser_advance(ptr %0)
  %19 = load ptr, ptr %enum_field, align 8
  %memberidx10 = getelementptr inbounds %EnumNodeField, ptr %19, i32 0, i32 1
  %20 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %20, ptr %memberidx10, align 8
  br label %ifend9

ifend9:                                           ; preds = %while.entry, %if.entry7
  %memberidx11 = getelementptr inbounds %EnumNode, ptr %2, i32 0, i32 1
  %21 = load ptr, ptr %memberidx11, align 8
  %22 = load ptr, ptr %21, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %memberidx12, align 8
  %24 = load ptr, ptr %enum_field, align 8
  call void %23(ptr %21, ptr %24)
  call void @Parser_new_lines(ptr %0)
  %25 = load ptr, ptr %memberidx, align 8
  %26 = load i64, ptr %25, align 4
  %27 = icmp eq i64 %26, 51
  br i1 %27, label %while.entry, label %while.end
}

define void @Parser_parse_class_block(ptr %0, ptr %1) {
  %3 = call ptr @Parser_eat(ptr %0, i64 25)
  call void @Parser_new_lines(ptr %0)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp ne i64 %5, 26
  %7 = call i1 @Parser_can_parse(ptr %0)
  %8 = and i1 %6, %7
  br i1 %8, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend5, %2
  %access_modifier = alloca i64, align 8
  %9 = call i64 @Parser_parse_access_modifier(ptr %0)
  store i64 %9, ptr %access_modifier, align 4
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %if.entry, label %else

common.ret:                                       ; preds = %else18, %while.end
  ret void

while.end:                                        ; preds = %ifend5, %2
  %11 = call ptr @Parser_eat(ptr %0, i64 26)
  br label %common.ret

if.entry:                                         ; preds = %while.entry
  store i64 2, ptr %access_modifier, align 4
  br label %ifend

else:                                             ; preds = %while.entry
  call void @Parser_advance(ptr %0)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %12 = call ptr @Parser_peek(ptr %0, i64 1)
  %13 = load i64, ptr %12, align 4
  %14 = icmp eq i64 %13, 1
  br i1 %14, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %field = alloca ptr, align 8
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FieldNode, ptr null, i32 1) to i32))
  %16 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @FieldNode_constructor(ptr %15, ptr %16)
  store ptr %15, ptr %field, align 8
  %17 = call ptr @Parser_eat(ptr %0, i64 1)
  %18 = load ptr, ptr %field, align 8
  %memberidx6 = getelementptr inbounds %FieldNode, ptr %18, i32 0, i32 3
  %19 = call ptr @Parser_parse_type(ptr %0)
  store ptr %19, ptr %memberidx6, align 8
  %20 = load ptr, ptr %memberidx, align 8
  %21 = load i64, ptr %20, align 4
  %22 = icmp eq i64 %21, 36
  br i1 %22, label %if.entry9, label %ifend11

else4:                                            ; preds = %ifend
  %23 = call ptr @Parser_peek(ptr %0, i64 1)
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 23
  br i1 %25, label %if.entry17, label %else18

ifend5:                                           ; preds = %if.entry17, %ifend11
  call void @Parser_new_lines(ptr %0)
  %26 = load ptr, ptr %memberidx, align 8
  %27 = load i64, ptr %26, align 4
  %28 = icmp ne i64 %27, 26
  %29 = call i1 @Parser_can_parse(ptr %0)
  %30 = and i1 %28, %29
  br i1 %30, label %while.entry, label %while.end

if.entry9:                                        ; preds = %if.entry3
  call void @Parser_advance(ptr %0)
  %31 = load ptr, ptr %field, align 8
  %memberidx12 = getelementptr inbounds %FieldNode, ptr %31, i32 0, i32 2
  %32 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %32, ptr %memberidx12, align 8
  br label %ifend11

ifend11:                                          ; preds = %if.entry3, %if.entry9
  %33 = load ptr, ptr %field, align 8
  %memberidx13 = getelementptr inbounds %FieldNode, ptr %33, i32 0, i32 1
  %34 = load i64, ptr %access_modifier, align 4
  store i64 %34, ptr %memberidx13, align 4
  %memberidx14 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i32 0, i32 3
  %35 = load ptr, ptr %memberidx14, align 8
  %36 = load ptr, ptr %35, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 2
  %37 = load ptr, ptr %memberidx15, align 8
  %38 = load ptr, ptr %field, align 8
  call void %37(ptr %35, ptr %38)
  br label %ifend5

if.entry17:                                       ; preds = %else4
  %method = alloca ptr, align 8
  %39 = call ptr @Parser_parse_method(ptr %0)
  store ptr %39, ptr %method, align 8
  %memberidx20 = getelementptr inbounds %MethodNode, ptr %39, i32 0, i32 3
  %40 = load i64, ptr %access_modifier, align 4
  store i64 %40, ptr %memberidx20, align 4
  %memberidx21 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i32 0, i32 4
  %41 = load ptr, ptr %memberidx21, align 8
  %42 = load ptr, ptr %41, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i32 0, i32 2
  %43 = load ptr, ptr %memberidx22, align 8
  %44 = load ptr, ptr %method, align 8
  call void %43(ptr %41, ptr %44)
  br label %ifend5

else18:                                           ; preds = %else4
  %45 = call ptr @string_from_bytes(ptr @180, i64 19)
  call void @Parser_error(ptr %0, ptr %45)
  br label %common.ret
}

define ptr @Parser_parse_method(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MethodNode, ptr null, i32 1) to i32))
  %3 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @MethodNode_constructor(ptr %2, ptr %3)
  %4 = call ptr @Parser_eat(ptr %0, i64 23)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 24
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %5, i32 0, i32 2
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 4
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = call ptr @string_from_bytes(ptr @179, i64 4)
  %12 = call i1 %10(ptr %8, ptr %11)
  br i1 %12, label %if.entry5, label %ifend

ifend:                                            ; preds = %if.entry5, %if.entry, %1
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp ne i64 %14, 24
  br i1 %15, label %if.entry11, label %ifend13

if.entry5:                                        ; preds = %if.entry
  %memberidx8 = getelementptr inbounds %MethodNode, ptr %2, i32 0, i32 5
  store i1 false, ptr %memberidx8, align 1
  call void @Parser_advance(ptr %0)
  br label %ifend

if.entry11:                                       ; preds = %ifend
  %memberidx14 = getelementptr inbounds %MethodNode, ptr %2, i32 0, i32 5
  %16 = load i1, ptr %memberidx14, align 1
  %17 = xor i1 %16, true
  br i1 %17, label %if.entry15, label %ifend17

ifend13:                                          ; preds = %ifend, %ifend17
  %18 = call ptr @Parser_eat(ptr %0, i64 24)
  %19 = load ptr, ptr %memberidx, align 8
  %20 = load i64, ptr %19, align 4
  %21 = icmp eq i64 %20, 1
  br i1 %21, label %if.entry21, label %else22

if.entry15:                                       ; preds = %if.entry11
  %22 = call ptr @Parser_eat(ptr %0, i64 3)
  br label %ifend17

ifend17:                                          ; preds = %if.entry11, %if.entry15
  %memberidx18 = getelementptr inbounds %MethodNode, ptr %2, i32 0, i32 1
  %23 = load ptr, ptr %memberidx18, align 8
  call void @Parser_parse_args(ptr %0, ptr %23)
  br label %ifend13

if.entry21:                                       ; preds = %ifend13
  call void @Parser_advance(ptr %0)
  %memberidx24 = getelementptr inbounds %MethodNode, ptr %2, i32 0, i32 4
  %24 = call ptr @Parser_parse_type(ptr %0)
  store ptr %24, ptr %memberidx24, align 8
  br label %ifend23

else22:                                           ; preds = %ifend13
  %memberidx25 = getelementptr inbounds %MethodNode, ptr %2, i32 0, i32 4
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeNode, ptr null, i32 1) to i32))
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  call void @FloRange_constructor(ptr %26, i64 0, i64 0, i64 0, i64 0)
  call void @TypeNode_constructor(ptr %25, i64 12, ptr %26)
  store ptr %25, ptr %memberidx25, align 8
  br label %ifend23

ifend23:                                          ; preds = %else22, %if.entry21
  %27 = load ptr, ptr %memberidx, align 8
  %28 = load i64, ptr %27, align 4
  %29 = icmp eq i64 %28, 25
  br i1 %29, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend23
  %memberidx31 = getelementptr inbounds %MethodNode, ptr %2, i32 0, i32 2
  %30 = call ptr @Parser_parse_block(ptr %0)
  store ptr %30, ptr %memberidx31, align 8
  br label %ifend30

else29:                                           ; preds = %ifend23
  %memberidx32 = getelementptr inbounds %MethodNode, ptr %2, i32 0, i32 6
  store i1 true, ptr %memberidx32, align 1
  br label %ifend30

ifend30:                                          ; preds = %else29, %if.entry28
  ret ptr %2
}

define void @FunctionTypeNode_constructor(ptr %0, ptr %1) {
  call void @TypeNode_constructor(ptr %0, i64 17, ptr %1)
  %memberidx = getelementptr inbounds %FunctionTypeNode, ptr %0, i32 0, i32 2
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_TypeNode_, ptr null, i32 1) to i32))
  call void @Array_TypeNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %3, ptr %memberidx, align 8
  ret void
}

define ptr @Parser_parse_function_type(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionTypeNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @FunctionTypeNode_constructor(ptr %2, ptr %4)
  call void @Parser_advance(ptr %0)
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 24
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx4 = getelementptr inbounds %FunctionTypeNode, ptr %2, i32 0, i32 2
  %8 = load ptr, ptr %memberidx4, align 8
  call void @Parser_parse_type_list(ptr %0, ptr %8)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %9 = call ptr @Parser_eat(ptr %0, i64 24)
  %10 = call ptr @Parser_eat(ptr %0, i64 43)
  %memberidx5 = getelementptr inbounds %FunctionTypeNode, ptr %2, i32 0, i32 3
  %11 = call ptr @Parser_parse_type(ptr %0)
  store ptr %11, ptr %memberidx5, align 8
  %12 = load ptr, ptr %2, align 8
  %13 = load ptr, ptr %11, align 8
  %14 = call ptr @FloRange_merge(ptr %12, ptr %13)
  store ptr %14, ptr %2, align 8
  ret ptr %2
}

define void @Parser_parse_generic_parameters(ptr %0, ptr %1) {
  call void @Parser_advance(ptr %0)
  %3 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%GenericParameterNode, ptr null, i32 1) to i32))
  %6 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @GenericParameterNode_constructor(ptr %5, ptr %6)
  call void %4(ptr %1, ptr %5)
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 3
  %10 = call i1 @Parser_can_parse(ptr %0)
  %11 = and i1 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  call void @Parser_advance(ptr %0)
  %12 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%GenericParameterNode, ptr null, i32 1) to i32))
  %15 = call ptr @Parser_eat(ptr %0, i64 51)
  call void @GenericParameterNode_constructor(ptr %14, ptr %15)
  call void %13(ptr %1, ptr %14)
  %16 = load ptr, ptr %memberidx1, align 8
  %17 = load i64, ptr %16, align 4
  %18 = icmp eq i64 %17, 3
  %19 = call i1 @Parser_can_parse(ptr %0)
  %20 = and i1 %18, %19
  br i1 %20, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  %21 = call ptr @Parser_eat(ptr %0, i64 39)
  ret void
}

define ptr @Parser_parse_function(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionDeclarationNode, ptr null, i32 1) to i32))
  call void @FunctionDeclarationNode_constructor(ptr %2)
  %3 = call ptr @Parser_eat(ptr %0, i64 51)
  store ptr %3, ptr %2, align 8
  %4 = call ptr @Parser_eat(ptr %0, i64 23)
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 24
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx3 = getelementptr inbounds %FunctionDeclarationNode, ptr %2, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  call void @Parser_parse_args(ptr %0, ptr %8)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %9 = call ptr @Parser_eat(ptr %0, i64 24)
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, 1
  br i1 %12, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  call void @Parser_advance(ptr %0)
  %memberidx9 = getelementptr inbounds %FunctionDeclarationNode, ptr %2, i32 0, i32 3
  %13 = call ptr @Parser_parse_type(ptr %0)
  store ptr %13, ptr %memberidx9, align 8
  br label %ifend8

else7:                                            ; preds = %ifend
  %memberidx10 = getelementptr inbounds %FunctionDeclarationNode, ptr %2, i32 0, i32 3
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeNode, ptr null, i32 1) to i32))
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  call void @FloRange_constructor(ptr %15, i64 0, i64 0, i64 0, i64 0)
  call void @TypeNode_constructor(ptr %14, i64 12, ptr %15)
  store ptr %14, ptr %memberidx10, align 8
  br label %ifend8

ifend8:                                           ; preds = %else7, %if.entry6
  %16 = load ptr, ptr %memberidx1, align 8
  %17 = load i64, ptr %16, align 4
  %18 = icmp eq i64 %17, 25
  br i1 %18, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend8
  %memberidx16 = getelementptr inbounds %FunctionDeclarationNode, ptr %2, i32 0, i32 2
  %19 = call ptr @Parser_parse_block(ptr %0)
  store ptr %19, ptr %memberidx16, align 8
  br label %ifend15

else14:                                           ; preds = %ifend8
  %memberidx17 = getelementptr inbounds %FunctionDeclarationNode, ptr %2, i32 0, i32 4
  store i1 true, ptr %memberidx17, align 1
  br label %ifend15

ifend15:                                          ; preds = %else14, %if.entry13
  ret ptr %2
}

define ptr @Parser_parse_import(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ImportNode, ptr null, i32 1) to i32))
  call void @ImportNode_constructor(ptr %2)
  call void @Parser_advance(ptr %0)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, 51
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx3, align 8
  call void %8(ptr %6, ptr %3)
  call void @Parser_advance(ptr %0)
  %9 = load ptr, ptr %memberidx, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp eq i64 %10, 3
  %12 = call i1 @Parser_can_parse(ptr %0)
  %13 = and i1 %11, %12
  br i1 %13, label %while.entry, label %while.end

ifend:                                            ; preds = %1, %while.end
  %memberidx11 = getelementptr inbounds %ImportNode, ptr %2, i32 0, i32 1
  %14 = call ptr @Parser_eat(ptr %0, i64 32)
  store ptr %14, ptr %memberidx11, align 8
  ret ptr %2

while.entry:                                      ; preds = %while.entry, %if.entry
  call void @Parser_advance(ptr %0)
  %15 = load ptr, ptr %2, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx8, align 8
  %18 = call ptr @Parser_eat(ptr %0, i64 51)
  call void %17(ptr %15, ptr %18)
  %19 = load ptr, ptr %memberidx, align 8
  %20 = load i64, ptr %19, align 4
  %21 = icmp eq i64 %20, 3
  %22 = call i1 @Parser_can_parse(ptr %0)
  %23 = and i1 %21, %22
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %if.entry
  %24 = call ptr @Parser_eat(ptr %0, i64 82)
  br label %ifend
}

define ptr @Parser_eat(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %1, %4
  br i1 %5, label %if.entry, label %else

common.ret:                                       ; preds = %ifend4, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %9, %ifend4 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  call void @Parser_advance(ptr %0)
  br label %common.ret

else:                                             ; preds = %2
  %6 = icmp eq i64 %1, 51
  br i1 %6, label %if.entry2, label %else3

if.entry2:                                        ; preds = %else
  %7 = call ptr @string_from_bytes(ptr @164, i64 22)
  call void @Parser_error(ptr %0, ptr %7)
  br label %ifend4

else3:                                            ; preds = %else
  %8 = icmp eq i64 %1, 36
  br i1 %8, label %if.entry5, label %else6

ifend4:                                           ; preds = %if.entry32, %else30, %if.entry29, %if.entry26, %if.entry23, %if.entry20, %if.entry17, %if.entry14, %if.entry11, %if.entry8, %if.entry5, %if.entry2
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %memberidx35 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %memberidx35, align 8
  call void @Token_constructor(ptr %9, i64 44, ptr %10)
  br label %common.ret

if.entry5:                                        ; preds = %else3
  %11 = call ptr @string_from_bytes(ptr @165, i64 12)
  call void @Parser_error(ptr %0, ptr %11)
  br label %ifend4

else6:                                            ; preds = %else3
  %12 = icmp eq i64 %1, 1
  br i1 %12, label %if.entry8, label %else9

if.entry8:                                        ; preds = %else6
  %13 = call ptr @string_from_bytes(ptr @166, i64 12)
  call void @Parser_error(ptr %0, ptr %13)
  br label %ifend4

else9:                                            ; preds = %else6
  %14 = icmp eq i64 %1, 23
  br i1 %14, label %if.entry11, label %else12

if.entry11:                                       ; preds = %else9
  %15 = call ptr @string_from_bytes(ptr @167, i64 12)
  call void @Parser_error(ptr %0, ptr %15)
  br label %ifend4

else12:                                           ; preds = %else9
  %16 = icmp eq i64 %1, 24
  br i1 %16, label %if.entry14, label %else15

if.entry14:                                       ; preds = %else12
  %17 = call ptr @string_from_bytes(ptr @168, i64 12)
  call void @Parser_error(ptr %0, ptr %17)
  br label %ifend4

else15:                                           ; preds = %else12
  %18 = icmp eq i64 %1, 25
  br i1 %18, label %if.entry17, label %else18

if.entry17:                                       ; preds = %else15
  %19 = call ptr @string_from_bytes(ptr @169, i64 12)
  call void @Parser_error(ptr %0, ptr %19)
  br label %ifend4

else18:                                           ; preds = %else15
  %20 = icmp eq i64 %1, 26
  br i1 %20, label %if.entry20, label %else21

if.entry20:                                       ; preds = %else18
  %21 = call ptr @string_from_bytes(ptr @170, i64 12)
  call void @Parser_error(ptr %0, ptr %21)
  br label %ifend4

else21:                                           ; preds = %else18
  %22 = icmp eq i64 %1, 3
  br i1 %22, label %if.entry23, label %else24

if.entry23:                                       ; preds = %else21
  %23 = call ptr @string_from_bytes(ptr @171, i64 12)
  call void @Parser_error(ptr %0, ptr %23)
  br label %ifend4

else24:                                           ; preds = %else21
  %24 = icmp eq i64 %1, 40
  br i1 %24, label %if.entry26, label %else27

if.entry26:                                       ; preds = %else24
  %25 = call ptr @string_from_bytes(ptr @172, i64 12)
  call void @Parser_error(ptr %0, ptr %25)
  br label %ifend4

else27:                                           ; preds = %else24
  %26 = icmp eq i64 %1, 39
  br i1 %26, label %if.entry29, label %else30

if.entry29:                                       ; preds = %else27
  %27 = call ptr @string_from_bytes(ptr @173, i64 12)
  call void @Parser_error(ptr %0, ptr %27)
  br label %ifend4

else30:                                           ; preds = %else27
  %28 = icmp eq i64 %1, 43
  br i1 %28, label %if.entry32, label %ifend4

if.entry32:                                       ; preds = %else30
  %29 = call ptr @string_from_bytes(ptr @174, i64 13)
  call void @Parser_error(ptr %0, ptr %29)
  br label %ifend4
}

define i64 @Parser_is_unary_op(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 21
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend7, %ifend4, %ifend, %1
  %common.ret.op = phi i64 [ 1, %1 ], [ 2, %ifend ], [ 5, %ifend4 ], [ %spec.select, %ifend7 ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %1
  %5 = icmp eq i64 %3, 22
  br i1 %5, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %6 = icmp eq i64 %3, 5
  br i1 %6, label %common.ret, label %ifend7

ifend7:                                           ; preds = %ifend4
  %7 = icmp eq i64 %3, 35
  %spec.select = select i1 %7, i64 7, i64 0
  br label %common.ret
}

define void @ArrayExpressionNode_constructor(ptr %0, ptr %1) {
  call void @ExpressionNode_constructor(ptr %0, i64 6, ptr %1)
  %memberidx = getelementptr inbounds %ArrayExpressionNode, ptr %0, i32 0, i32 3
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %3, ptr %memberidx, align 8
  ret void
}

define ptr @Parser_parse_array_expression(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayExpressionNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  call void @ArrayExpressionNode_constructor(ptr %2, ptr %4)
  call void @Parser_advance(ptr %0)
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 28
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx4 = getelementptr inbounds %ArrayExpressionNode, ptr %2, i32 0, i32 3
  %8 = load ptr, ptr %memberidx4, align 8
  call void @Parser_parse_expression_list(ptr %0, ptr %8)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %9 = load ptr, ptr %2, align 8
  %10 = call ptr @Parser_eat(ptr %0, i64 28)
  %memberidx7 = getelementptr inbounds %Token, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx7, align 8
  %12 = call ptr @FloRange_merge(ptr %9, ptr %11)
  store ptr %12, ptr %2, align 8
  ret ptr %2
}

define void @NewExpressionNode_constructor(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %NewExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %NewExpressionNode, ptr %0, i32 0, i32 4
  store i1 true, ptr %memberidx1, align 1
  call void @ExpressionNode_constructor(ptr %0, i64 11, ptr %2)
  %memberidx2 = getelementptr inbounds %NewExpressionNode, ptr %0, i32 0, i32 5
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 1
  %memberidx4 = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx4, align 4
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Parser_parse_new_expression(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  call void @Parser_advance(ptr %0)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NewExpressionNode, ptr null, i32 1) to i32))
  %5 = call ptr @Parser_parse_type(ptr %0)
  call void @NewExpressionNode_constructor(ptr %4, ptr %5, ptr %3)
  %6 = call ptr @Parser_eat(ptr %0, i64 23)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp ne i64 %8, 24
  %10 = call i1 @Parser_can_parse(ptr %0)
  %11 = and i1 %9, %10
  br i1 %11, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx4 = getelementptr inbounds %NewExpressionNode, ptr %4, i32 0, i32 5
  %12 = load ptr, ptr %memberidx4, align 8
  call void @Parser_parse_expression_list(ptr %0, ptr %12)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %13 = load ptr, ptr %4, align 8
  %14 = call ptr @Parser_eat(ptr %0, i64 24)
  %memberidx7 = getelementptr inbounds %Token, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx7, align 8
  %16 = call ptr @FloRange_merge(ptr %13, ptr %15)
  store ptr %16, ptr %4, align 8
  ret ptr %4
}

define void @ExpressionIndexNode_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %ExpressionIndexNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ExpressionIndexNode, ptr %0, i32 0, i32 4
  store ptr %2, ptr %memberidx1, align 8
  call void @ExpressionNode_constructor(ptr %0, i64 13, ptr %3)
  ret void
}

define ptr @Parser_parse_index_expression(ptr %0, ptr %1) {
  %3 = call ptr @Parser_eat(ptr %0, i64 27)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ExpressionIndexNode, ptr null, i32 1) to i32))
  %5 = call ptr @Parser_parse_expression(ptr %0)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  call void @ExpressionIndexNode_constructor(ptr %4, ptr %1, ptr %5, ptr %7)
  %8 = load ptr, ptr %1, align 8
  %9 = call ptr @Parser_eat(ptr %0, i64 28)
  %memberidx4 = getelementptr inbounds %Token, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = call ptr @FloRange_merge(ptr %8, ptr %10)
  store ptr %11, ptr %4, align 8
  ret ptr %4
}

define void @CallExpressionNode_constructor(ptr %0, ptr %1, ptr %2) {
  call void @ExpressionNode_constructor(ptr %0, i64 14, ptr %2)
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CallExpressionNode, ptr %0, i32 0, i32 4
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %4, ptr %memberidx1, align 8
  ret void
}

define ptr @Parser_parse_call_expression(ptr %0, ptr %1) {
  %3 = call ptr @Parser_eat(ptr %0, i64 23)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpressionNode, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  call void @CallExpressionNode_constructor(ptr %4, ptr %1, ptr %6)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp ne i64 %8, 24
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %memberidx4 = getelementptr inbounds %CallExpressionNode, ptr %4, i32 0, i32 4
  %10 = load ptr, ptr %memberidx4, align 8
  call void @Parser_parse_expression_list(ptr %0, ptr %10)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %11 = load ptr, ptr %1, align 8
  %12 = call ptr @Parser_eat(ptr %0, i64 24)
  %memberidx7 = getelementptr inbounds %Token, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx7, align 8
  %14 = call ptr @FloRange_merge(ptr %11, ptr %13)
  store ptr %14, ptr %4, align 8
  ret ptr %4
}

define void @MemberExpressionNode_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  call void @ExpressionNode_constructor(ptr %0, i64 12, ptr %3)
  %memberidx = getelementptr inbounds %MemberExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %MemberExpressionNode, ptr %0, i32 0, i32 4
  store ptr %2, ptr %memberidx1, align 8
  ret void
}

define ptr @Parser_parse_member_expression(ptr %0, ptr %1) {
  %3 = call ptr @Parser_eat(ptr %0, i64 48)
  %4 = call ptr @Parser_eat(ptr %0, i64 51)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpressionNode, ptr null, i32 1) to i32))
  %6 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr @FloRange_merge(ptr %6, ptr %7)
  call void @MemberExpressionNode_constructor(ptr %5, ptr %1, ptr %4, ptr %8)
  ret ptr %5
}

define ptr @Parser_parse_term_expression(ptr %0) {
  %2 = call ptr @Parser_parse_unary_expression_pre(ptr %0)
  %3 = call i64 @Parser_is_term_expr_op(ptr %0)
  %4 = icmp ne i64 %3, 0
  %5 = call i1 @Parser_can_parse(ptr %0)
  %6 = and i1 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %unary.0 = phi ptr [ %2, %1 ], [ %7, %while.entry ]
  %op.0 = phi i64 [ %3, %1 ], [ %9, %while.entry ]
  call void @Parser_advance(ptr %0)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %8 = call ptr @Parser_parse_unary_expression_pre(ptr %0)
  call void @BinaryExpressionNode_constructor(ptr %7, ptr %unary.0, i64 %op.0, ptr %8)
  %9 = call i64 @Parser_is_term_expr_op(ptr %0)
  %10 = icmp ne i64 %9, 0
  %11 = call i1 @Parser_can_parse(ptr %0)
  %12 = and i1 %10, %11
  br i1 %12, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %unary.1 = phi ptr [ %7, %while.entry ], [ %2, %1 ]
  ret ptr %unary.1
}

define ptr @Parser_parse_arithmetic_expression(ptr %0) {
  %2 = call ptr @Parser_parse_term_expression(ptr %0)
  %3 = call i64 @Parser_is_arith_expr_op(ptr %0)
  %4 = icmp ne i64 %3, 0
  %5 = call i1 @Parser_can_parse(ptr %0)
  %6 = and i1 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %term.0 = phi ptr [ %2, %1 ], [ %7, %while.entry ]
  %op.0 = phi i64 [ %3, %1 ], [ %9, %while.entry ]
  call void @Parser_advance(ptr %0)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %8 = call ptr @Parser_parse_term_expression(ptr %0)
  call void @BinaryExpressionNode_constructor(ptr %7, ptr %term.0, i64 %op.0, ptr %8)
  %9 = call i64 @Parser_is_arith_expr_op(ptr %0)
  %10 = icmp ne i64 %9, 0
  %11 = call i1 @Parser_can_parse(ptr %0)
  %12 = and i1 %10, %11
  br i1 %12, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %term.1 = phi ptr [ %7, %while.entry ], [ %2, %1 ]
  ret ptr %term.1
}

define ptr @Parser_parse_bitshift_expression(ptr %0) {
  %2 = call ptr @Parser_parse_arithmetic_expression(ptr %0)
  %3 = call i64 @Parser_is_bitshift_expr_op(ptr %0)
  %4 = icmp ne i64 %3, 0
  %5 = call i1 @Parser_can_parse(ptr %0)
  %6 = and i1 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %arith.0 = phi ptr [ %2, %1 ], [ %7, %while.entry ]
  %op.0 = phi i64 [ %3, %1 ], [ %9, %while.entry ]
  call void @Parser_advance(ptr %0)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %8 = call ptr @Parser_parse_arithmetic_expression(ptr %0)
  call void @BinaryExpressionNode_constructor(ptr %7, ptr %arith.0, i64 %op.0, ptr %8)
  %9 = call i64 @Parser_is_bitshift_expr_op(ptr %0)
  %10 = icmp ne i64 %9, 0
  %11 = call i1 @Parser_can_parse(ptr %0)
  %12 = and i1 %10, %11
  br i1 %12, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %arith.1 = phi ptr [ %7, %while.entry ], [ %2, %1 ]
  ret ptr %arith.1
}

define ptr @Parser_parse_comparasion_expression(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load i64, ptr %2, align 4
  %5 = icmp eq i64 %4, 45
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %while.end, %if.entry
  %common.ret.op = phi ptr [ %7, %if.entry ], [ %24, %while.end ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Parser_advance(ptr %0)
  %comp_val = alloca ptr, align 8
  %6 = call ptr @Parser_parse_comparasion_expression(ptr %0)
  store ptr %6, ptr %comp_val, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpressionNode, ptr null, i32 1) to i32))
  %8 = load ptr, ptr %comp_val, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = call ptr @FloRange_merge(ptr %3, ptr %9)
  call void @UnaryExpressionNode_constructor(ptr %7, i64 6, ptr %8, ptr %10)
  br label %common.ret

ifend:                                            ; preds = %1
  %bit = alloca ptr, align 8
  %11 = call ptr @Parser_parse_bitshift_expression(ptr %0)
  store ptr %11, ptr %bit, align 8
  %op = alloca i64, align 8
  %12 = call i64 @Parser_is_comp_expr_op(ptr %0)
  store i64 %12, ptr %op, align 4
  %13 = icmp ne i64 %12, 0
  %14 = call i1 @Parser_can_parse(ptr %0)
  %15 = and i1 %13, %14
  br i1 %15, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %ifend
  call void @Parser_advance(ptr %0)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %17 = load ptr, ptr %bit, align 8
  %18 = load i64, ptr %op, align 4
  %19 = call ptr @Parser_parse_bitshift_expression(ptr %0)
  call void @BinaryExpressionNode_constructor(ptr %16, ptr %17, i64 %18, ptr %19)
  store ptr %16, ptr %bit, align 8
  %20 = call i64 @Parser_is_comp_expr_op(ptr %0)
  store i64 %20, ptr %op, align 4
  %21 = icmp ne i64 %20, 0
  %22 = call i1 @Parser_can_parse(ptr %0)
  %23 = and i1 %21, %22
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %ifend
  %24 = load ptr, ptr %bit, align 8
  br label %common.ret
}

define ptr @Parser_parse_bit_expression(ptr %0) {
  %2 = call ptr @Parser_parse_comparasion_expression(ptr %0)
  %3 = call i64 @Parser_is_logic_expr_op(ptr %0)
  %4 = icmp ne i64 %3, 0
  %5 = call i1 @Parser_can_parse(ptr %0)
  %6 = and i1 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %cmp.0 = phi ptr [ %2, %1 ], [ %7, %while.entry ]
  %op.0 = phi i64 [ %3, %1 ], [ %9, %while.entry ]
  call void @Parser_advance(ptr %0)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %8 = call ptr @Parser_parse_comparasion_expression(ptr %0)
  call void @BinaryExpressionNode_constructor(ptr %7, ptr %cmp.0, i64 %op.0, ptr %8)
  %9 = call i64 @Parser_is_logic_expr_op(ptr %0)
  %10 = icmp ne i64 %9, 0
  %11 = call i1 @Parser_can_parse(ptr %0)
  %12 = and i1 %10, %11
  br i1 %12, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %cmp.1 = phi ptr [ %7, %while.entry ], [ %2, %1 ]
  ret ptr %cmp.1
}

define ptr @Parser_parse_range_expression(ptr %0) {
  %2 = call ptr @Parser_parse_bit_expression(ptr %0)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp ne i64 %4, 49
  %6 = call i1 @Parser_can_parse(ptr %0)
  %7 = xor i1 %6, true
  %8 = or i1 %5, %7
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %2, %if.entry ], [ %9, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  br label %common.ret

ifend:                                            ; preds = %1
  call void @Parser_advance(ptr %0)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %10 = call ptr @Parser_parse_expression(ptr %0)
  call void @BinaryExpressionNode_constructor(ptr %9, ptr %2, i64 31, ptr %10)
  br label %common.ret
}

define ptr @Parser_parse_typecast_expression(ptr %0) {
  %2 = call ptr @Parser_parse_range_expression(ptr %0)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp ne i64 %4, 86
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %2, %if.entry ], [ %6, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  br label %common.ret

ifend:                                            ; preds = %1
  call void @Parser_advance(ptr %0)
  %node = alloca ptr, align 8
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeCastExpressionNode, ptr null, i32 1) to i32))
  %7 = call ptr @Parser_parse_type(ptr %0)
  call void @TypeCastExpressionNode_constructor(ptr %6, ptr %2, ptr %7)
  store ptr %6, ptr %node, align 8
  br label %common.ret
}

define ptr @Parser_parse_ternary_expression(ptr %0) {
  %2 = call ptr @Parser_parse_typecast_expression(ptr %0)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp ne i64 %4, 34
  %6 = call i1 @Parser_can_parse(ptr %0)
  %7 = xor i1 %6, true
  %8 = or i1 %5, %7
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %2, %if.entry ], [ %12, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  br label %common.ret

ifend:                                            ; preds = %1
  call void @Parser_advance(ptr %0)
  %is_true = alloca ptr, align 8
  %9 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %9, ptr %is_true, align 8
  %10 = call ptr @Parser_eat(ptr %0, i64 1)
  %is_false = alloca ptr, align 8
  %11 = call ptr @Parser_parse_expression(ptr %0)
  store ptr %11, ptr %is_false, align 8
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TernaryExpressionNode, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %is_true, align 8
  %14 = load ptr, ptr %is_false, align 8
  call void @TernaryExpressionNode_constructor(ptr %12, ptr %2, ptr %13, ptr %14)
  br label %common.ret
}

define ptr @Parser_parse_expression(ptr %0) {
  %2 = call ptr @Parser_parse_ternary_expression(ptr %0)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, 82
  %6 = call i1 @Parser_can_parse(ptr %0)
  %7 = and i1 %5, %6
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend4, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %8, %if.entry ], [ %2, %if.entry2 ], [ %15, %ifend4 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  call void @Parser_advance(ptr %0)
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %9 = call ptr @Parser_parse_expression(ptr %0)
  call void @BinaryExpressionNode_constructor(ptr %8, ptr %2, i64 18, ptr %9)
  br label %common.ret

ifend:                                            ; preds = %1
  %op = alloca i64, align 8
  %10 = call i64 @Parser_is_assign_op(ptr %0)
  store i64 %10, ptr %op, align 4
  %11 = icmp eq i64 %10, 0
  %12 = call i1 @Parser_can_parse(ptr %0)
  %13 = xor i1 %12, true
  %14 = or i1 %11, %13
  br i1 %14, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  br label %common.ret

ifend4:                                           ; preds = %ifend
  call void @Parser_advance(ptr %0)
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %16 = load i64, ptr %op, align 4
  %17 = call ptr @Parser_parse_expression(ptr %0)
  call void @BinaryExpressionNode_constructor(ptr %15, ptr %2, i64 %16, ptr %17)
  br label %common.ret
}

define void @Parser_error(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloError, ptr null, i32 1) to i32))
  %memberidx2 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  call void @FloError_constructor(ptr %6, i64 2, ptr %1, ptr %8)
  call void %5(ptr %3, ptr %6)
  ret void
}

define i1 @Parser_can_parse(ptr %0) {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 3
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp ne i64 %3, 44
  %memberidx2 = getelementptr inbounds %Parser, ptr %0, i32 0, i32 2
  %5 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx3, align 4
  %7 = icmp eq i64 %6, 0
  %8 = and i1 %4, %7
  ret i1 %8
}

define void @Parser_constructor(ptr %0) {
  store ptr @VTableParser, ptr %0, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i32 0, i32 4
  store i64 -1, ptr %memberidx, align 4
  ret void
}

define void @ArrayTypeNode_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  call void @TypeNode_constructor(ptr %0, i64 16, ptr %3)
  %memberidx = getelementptr inbounds %ArrayTypeNode, ptr %0, i32 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ArrayTypeNode, ptr %0, i32 0, i32 3
  store ptr %2, ptr %memberidx1, align 8
  ret void
}

define void @PointerTypeNode_constructor(ptr %0, ptr %1, ptr %2) {
  call void @TypeNode_constructor(ptr %0, i64 15, ptr %2)
  %memberidx = getelementptr inbounds %PointerTypeNode, ptr %0, i32 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  ret void
}

define void @IntExpressionNode_constructor(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Token, ptr %1, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  call void @ExpressionNode_constructor(ptr %0, i64 0, ptr %3)
  %memberidx1 = getelementptr inbounds %IntExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx1, align 8
  ret void
}

define void @FloatExpressionNode_constructor(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Token, ptr %1, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  call void @ExpressionNode_constructor(ptr %0, i64 1, ptr %3)
  %memberidx1 = getelementptr inbounds %FloatExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx1, align 8
  ret void
}

define void @CharExpressionNode_constructor(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Token, ptr %1, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  call void @ExpressionNode_constructor(ptr %0, i64 3, ptr %3)
  %memberidx1 = getelementptr inbounds %CharExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx1, align 8
  ret void
}

define void @VarAccessExpressionNode_constructor(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Token, ptr %1, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  call void @ExpressionNode_constructor(ptr %0, i64 7, ptr %3)
  %memberidx1 = getelementptr inbounds %VarAccessExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx1, align 8
  ret void
}

define void @UnaryExpressionNode_constructor(ptr %0, i64 %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %UnaryExpressionNode, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpressionNode, ptr %0, i32 0, i32 4
  store ptr %2, ptr %memberidx1, align 8
  call void @ExpressionNode_constructor(ptr %0, i64 9, ptr %3)
  ret void
}

define void @BinaryExpressionNode_constructor(ptr %0, ptr %1, i64 %2, ptr %3) {
  %5 = load ptr, ptr %1, align 8
  %6 = load ptr, ptr %3, align 8
  %7 = call ptr @FloRange_merge(ptr %5, ptr %6)
  call void @ExpressionNode_constructor(ptr %0, i64 8, ptr %7)
  %memberidx2 = getelementptr inbounds %BinaryExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %BinaryExpressionNode, ptr %0, i32 0, i32 4
  store i64 %2, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %BinaryExpressionNode, ptr %0, i32 0, i32 5
  store ptr %3, ptr %memberidx4, align 8
  ret void
}

define void @TypeCastExpressionNode_constructor(ptr %0, ptr %1, ptr %2) {
  %4 = load ptr, ptr %1, align 8
  %5 = load ptr, ptr %2, align 8
  %6 = call ptr @FloRange_merge(ptr %4, ptr %5)
  call void @ExpressionNode_constructor(ptr %0, i64 10, ptr %6)
  %memberidx2 = getelementptr inbounds %TypeCastExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %TypeCastExpressionNode, ptr %0, i32 0, i32 4
  store ptr %2, ptr %memberidx3, align 8
  ret void
}

define void @TernaryExpressionNode_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %5 = load ptr, ptr %1, align 8
  %6 = load ptr, ptr %3, align 8
  %7 = call ptr @FloRange_merge(ptr %5, ptr %6)
  call void @ExpressionNode_constructor(ptr %0, i64 15, ptr %7)
  %memberidx2 = getelementptr inbounds %TernaryExpressionNode, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %TernaryExpressionNode, ptr %0, i32 0, i32 4
  store ptr %2, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %TernaryExpressionNode, ptr %0, i32 0, i32 5
  store ptr %3, ptr %memberidx4, align 8
  %8 = load ptr, ptr %2, align 8
  %9 = load ptr, ptr %3, align 8
  %10 = call ptr @FloRange_merge(ptr %8, ptr %9)
  store ptr %10, ptr %0, align 8
  ret void
}

define void @TypeChecker_load_builtins_module(ptr %0) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 7
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %2, i32 0, i32 4
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = call ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %3, ptr null)
  ret void
}

define void @TypeChecker_load_generic_module(ptr %0) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 7
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load ptr, ptr %2, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr @string_from_bytes(ptr @193, i64 12)
  %6 = call ptr %4(ptr %2, ptr %5)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ModuleAST, ptr null, i32 1) to i32))
  call void @ModuleAST_constructor(ptr %7)
  %8 = call ptr @string_from_bytes(ptr @193, i64 12)
  %9 = call ptr @TypeChecker_check_module(ptr %0, ptr %7, ptr %8)
  call void @TypeChecker_switch_to_generic_module(ptr %0)
  %10 = call ptr @TypeChecker_get_module(ptr %0, i64 0)
  call void @TypeChecker_import_all_from_module(ptr %0, ptr %10)
  ret void
}

define void @TypeChecker_switch_to_generic_module(ptr %0) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  store i64 1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %2 = call ptr @TypeChecker_get_module(ptr %0, i64 1)
  %memberidx2 = getelementptr inbounds %Module, ptr %2, i32 0, i32 7
  %3 = load ptr, ptr %memberidx2, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx3, align 8
  %6 = call ptr %5(ptr %3, i64 0)
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define void @ScopeId_constructor(ptr %0, i64 %1, i64 %2) {
  store i64 %1, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %ScopeId, ptr %0, i32 0, i32 1
  store i64 %2, ptr %memberidx1, align 4
  ret void
}

define void @VarId_constructor(ptr %0, i64 %1, i64 %2, i64 %3) {
  store i64 %1, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %VarId, ptr %0, i32 0, i32 1
  store i64 %2, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %VarId, ptr %0, i32 0, i32 2
  store i64 %3, ptr %memberidx2, align 4
  ret void
}

define void @Map_string_VarId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_VarId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_VarId__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_VarId_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_VarId_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_VarId_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_VarId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_VarId_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_VarId_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_VarId_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_VarId__constructor(ptr %0) {
  store ptr @VTableBucket_string_VarId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_VarId_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_VarId___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_VarId___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_VarId_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_VarId___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_VarId___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_VarId_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_VarId_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_VarId_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_VarId_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_VarId___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_VarId__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_VarId__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_VarId__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_VarId___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_VarId_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_VarId__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_VarId_, ptr null, i32 1) to i32))
  call void @Bucket_string_VarId__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_VarId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_VarId_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_VarId__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_VarId__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_VarId_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_VarId_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_VarId_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_VarId_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_VarId_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_VarId__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_VarId__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_VarId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_VarId_, ptr null, i32 1) to i32))
  call void @Bucket_string_VarId__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @EnumId_constructor(ptr %0, i64 %1, i64 %2) {
  call void @TypeId_constructor(ptr %0, i64 %1, i64 1, i64 %2)
  ret void
}

define void @TypeId_constructor(ptr %0, i64 %1, i64 %2, i64 %3) {
  store i64 %1, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %TypeId, ptr %0, i32 0, i32 1
  store i64 %2, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %TypeId, ptr %0, i32 0, i32 2
  store i64 %3, ptr %memberidx2, align 4
  ret void
}

define void @Map_string_EnumId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_EnumId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_EnumId__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_EnumId_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_EnumId_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_EnumId_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_EnumId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_EnumId_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_EnumId_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_EnumId_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_EnumId__constructor(ptr %0) {
  store ptr @VTableBucket_string_EnumId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_EnumId_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_EnumId___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_EnumId___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_EnumId_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_EnumId___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_EnumId___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_EnumId_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_EnumId_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_EnumId_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_EnumId_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_EnumId___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_EnumId__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_EnumId__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_EnumId__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_EnumId___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_EnumId_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_EnumId__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_EnumId_, ptr null, i32 1) to i32))
  call void @Bucket_string_EnumId__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_EnumId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_EnumId_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_EnumId__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_EnumId__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_EnumId_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_EnumId_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_EnumId_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_EnumId_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_EnumId_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_EnumId__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_EnumId__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_EnumId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_EnumId_, ptr null, i32 1) to i32))
  call void @Bucket_string_EnumId__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define ptr @Type_unknown() {
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %1, i64 21)
  ret ptr %1
}

define void @Type_constructor(ptr %0, i64 %1) {
  store i64 %1, ptr %0, align 4
  ret void
}

define void @Map_string_Type__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_Type__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_Type__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_Type_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_Type_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_Type_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_Type__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_Type_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_Type_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_Type_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_Type__constructor(ptr %0) {
  store ptr @VTableBucket_string_Type_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_Type_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_Type___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_Type___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_Type_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_Type___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_Type___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_Type_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_Type_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_Type_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_Type_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_Type___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_Type__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_Type__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_Type__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_Type___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_Type_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_Type__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_Type_, ptr null, i32 1) to i32))
  call void @Bucket_string_Type__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_Type_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_Type_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_Type__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_Type__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_Type_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_Type_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_Type_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_Type_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_Type_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_Type__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_Type__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_Type_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_Type_, ptr null, i32 1) to i32))
  call void @Bucket_string_Type__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @ClassId_constructor(ptr %0, i64 %1, i64 %2) {
  call void @TypeId_constructor(ptr %0, i64 %1, i64 0, i64 %2)
  ret void
}

define void @Map_string_ClassId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_ClassId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_ClassId__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_ClassId_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_ClassId_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_ClassId_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_ClassId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_ClassId_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_ClassId_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_ClassId_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_ClassId__constructor(ptr %0) {
  store ptr @VTableBucket_string_ClassId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_ClassId_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_ClassId___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_ClassId___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_ClassId_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_ClassId___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_ClassId___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_ClassId_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_ClassId_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_ClassId_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_ClassId_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_ClassId___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_ClassId__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_ClassId__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_ClassId__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_ClassId___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_ClassId_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_ClassId__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_ClassId_, ptr null, i32 1) to i32))
  call void @Bucket_string_ClassId__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_ClassId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_ClassId_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_ClassId__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_ClassId__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_ClassId_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_ClassId_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_ClassId_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_ClassId_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_ClassId_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_ClassId__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_ClassId__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_ClassId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_ClassId_, ptr null, i32 1) to i32))
  call void @Bucket_string_ClassId__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @Scope_constructor(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ScopeId, ptr null, i32 1) to i32))
  call void @ScopeId_constructor(ptr %4, i64 %1, i64 %2)
  store ptr %4, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %0, i32 0, i32 1
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_VarId_, ptr null, i32 1) to i32))
  call void @Map_string_VarId__constructor(ptr %5)
  store ptr %5, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Scope, ptr %0, i32 0, i32 2
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_ClassId_, ptr null, i32 1) to i32))
  call void @Map_string_ClassId__constructor(ptr %6)
  store ptr %6, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Scope, ptr %0, i32 0, i32 3
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_VarId_, ptr null, i32 1) to i32))
  call void @Map_string_VarId__constructor(ptr %7)
  store ptr %7, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Scope, ptr %0, i32 0, i32 4
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_EnumId_, ptr null, i32 1) to i32))
  call void @Map_string_EnumId__constructor(ptr %8)
  store ptr %8, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %0, i32 0, i32 6
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_Type_, ptr null, i32 1) to i32))
  call void @Map_string_Type__constructor(ptr %9)
  store ptr %9, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Scope, ptr %0, i32 0, i32 5
  store ptr null, ptr %memberidx6, align 8
  ret void
}

define i64 @Array_Scope__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Scope__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Scope____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Scope__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Scope__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Scope____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Scope____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Scope____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Scope____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Scope__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Scope_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @VarDeclaration_constructor(ptr %0, ptr %1, ptr %2) {
  call void @Statement_constructor(ptr %0, i64 1)
  %memberidx = getelementptr inbounds %VarDeclaration, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %VarDeclaration, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %VarDeclaration, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx2, align 1
  ret void
}

define void @Statement_constructor(ptr %0, i64 %1) {
  store i64 %1, ptr %0, align 4
  ret void
}

define i64 @Array_VarDeclaration__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_VarDeclaration__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_VarDeclaration____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_VarDeclaration__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_VarDeclaration__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_VarDeclaration____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_VarDeclaration____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_VarDeclaration____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_VarDeclaration____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_VarDeclaration__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_VarDeclaration_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Expression_constructor(ptr %0, i64 %1) {
  call void @Statement_constructor(ptr %0, i64 8)
  %memberidx = getelementptr inbounds %Expression, ptr %0, i32 0, i32 2
  store i64 %1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  store i1 false, ptr %memberidx1, align 1
  ret void
}

define void @Var_constructor(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Var, ptr %0, i32 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  store ptr %2, ptr %0, align 8
  ret void
}

define i64 @Array_Var__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Var__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Var____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Var__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Var__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Var____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Var____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Var____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Var____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Var__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Var_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @ConstId_constructor(ptr %0, i64 %1, i64 %2) {
  call void @VarId_constructor(ptr %0, i64 2, i64 %1, i64 %2)
  ret void
}

define void @ConstDeclaration_constructor(ptr %0, ptr %1, ptr %2) {
  call void @Statement_constructor(ptr %0, i64 2)
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ConstDeclaration, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ConstDeclaration, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx2, align 1
  ret void
}

define i64 @Array_ConstDeclaration__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ConstDeclaration__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_ConstDeclaration____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_ConstDeclaration__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_ConstDeclaration__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_ConstDeclaration____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_ConstDeclaration____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_ConstDeclaration____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_ConstDeclaration____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ConstDeclaration__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_ConstDeclaration_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @PropId_constructor(ptr %0, i64 %1, ptr %2, i64 %3) {
  store i64 %1, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %PropId, ptr %0, i32 0, i32 1
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %PropId, ptr %0, i32 0, i32 2
  store i64 %3, ptr %memberidx2, align 4
  ret void
}

define void @Map_string_PropId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_PropId__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_PropId__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_PropId_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_PropId_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_PropId_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_PropId__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_PropId_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_PropId_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_PropId_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_PropId__constructor(ptr %0) {
  store ptr @VTableBucket_string_PropId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_PropId_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_PropId___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_PropId___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_PropId_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_PropId___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_PropId___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_PropId_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_PropId_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_PropId_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_PropId_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_PropId___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_PropId__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_PropId__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_PropId__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_PropId___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_PropId_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_PropId__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_PropId_, ptr null, i32 1) to i32))
  call void @Bucket_string_PropId__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_PropId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_PropId_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_PropId__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_PropId__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_PropId_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_PropId_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_PropId_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_PropId_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_PropId_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_PropId__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_PropId__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_PropId_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_PropId_, ptr null, i32 1) to i32))
  call void @Bucket_string_PropId__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @EnumField_constructor(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %EnumField, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  ret void
}

define i64 @Array_EnumField__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_EnumField__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_EnumField____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_EnumField__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_EnumField__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_EnumField____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_EnumField____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_EnumField____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_EnumField____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_EnumField__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_EnumField_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Enum_constructor(ptr %0) {
  %memberidx = getelementptr inbounds %Enum, ptr %0, i32 0, i32 2
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumField_, ptr null, i32 1) to i32))
  call void @Array_EnumField__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %2, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %2, ptr %memberidx, align 8
  ret void
}

define i64 @Array_Enum__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Enum__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Enum____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Enum__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Enum__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Enum____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Enum____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Enum____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Enum____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Enum__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Enum_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Const_constructor(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Const, ptr %0, i32 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  store ptr %2, ptr %0, align 8
  ret void
}

define i64 @Array_Const__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Const__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Const____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Const__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Const__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Const____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Const____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Const____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Const____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Const__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Const_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @FunctionArg_constructor(ptr %0) {
  call void @Expression_constructor(ptr %0, i64 7)
  ret void
}

define i64 @Array_FunctionArg__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FunctionArg__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_FunctionArg____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_FunctionArg__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_FunctionArg__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_FunctionArg____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_FunctionArg____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_FunctionArg____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_FunctionArg____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_FunctionArg__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_FunctionArg_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define i64 @Array_Statement__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Statement__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Statement____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Statement__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Statement__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Statement____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Statement____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Statement____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Statement____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Statement__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Statement_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Block_constructor(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Statement_, ptr null, i32 1) to i32))
  call void @Array_Statement__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %2, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %2, ptr %0, align 8
  %memberidx3 = getelementptr inbounds %Block, ptr %0, i32 0, i32 1
  store i1 false, ptr %memberidx3, align 1
  %memberidx4 = getelementptr inbounds %Block, ptr %0, i32 0, i32 2
  store i1 false, ptr %memberidx4, align 1
  %memberidx5 = getelementptr inbounds %Block, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx5, align 1
  ret void
}

define i64 @Array_Type__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Type__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Type____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Type__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Type__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Type____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Type____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Type____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Type____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Type__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Type_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @FunctionType_constructor(ptr %0, ptr %1, ptr %2) {
  call void @Type_constructor(ptr %0, i64 17)
  %memberidx = getelementptr inbounds %FunctionType, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx1, align 8
  ret void
}

define void @ClassMethod_constructor(ptr %0) {
  %memberidx = getelementptr inbounds %ClassMethod, ptr %0, i32 0, i32 7
  store i1 false, ptr %memberidx, align 1
  ret void
}

define i64 @Array_ClassMethod__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ClassMethod__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_ClassMethod____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_ClassMethod__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_ClassMethod__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_ClassMethod____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_ClassMethod____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_ClassMethod____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_ClassMethod____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ClassMethod__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_ClassMethod_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @ClassField_constructor(ptr %0) {
  %memberidx = getelementptr inbounds %ClassField, ptr %0, i32 0, i32 1
  store i1 false, ptr %memberidx, align 1
  ret void
}

define i64 @Array_ClassField__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ClassField__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_ClassField____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_ClassField__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_ClassField__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_ClassField____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_ClassField____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_ClassField____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_ClassField____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_ClassField__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_ClassField_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Class_constructor(ptr %0) {
  %memberidx = getelementptr inbounds %Class, ptr %0, i32 0, i32 3
  store ptr null, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %0, i32 0, i32 9
  store i64 0, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Class, ptr %0, i32 0, i32 8
  store i64 0, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Class, ptr %0, i32 0, i32 4
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassField_, ptr null, i32 1) to i32))
  call void @Array_ClassField__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx4 = getelementptr inbounds %Array_ClassField_, ptr %2, i32 0, i32 1
  %memberidx5 = getelementptr inbounds %Array_ClassField_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx5, align 4
  store ptr %2, ptr %memberidx3, align 8
  %memberidx6 = getelementptr inbounds %Class, ptr %0, i32 0, i32 5
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassMethod_, ptr null, i32 1) to i32))
  call void @Array_ClassMethod__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx7 = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 1
  %memberidx8 = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx8, align 4
  store ptr %3, ptr %memberidx6, align 8
  %memberidx9 = getelementptr inbounds %Class, ptr %0, i32 0, i32 10
  store i1 false, ptr %memberidx9, align 1
  ret void
}

define i64 @Array_Class__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Class__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Class____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Class__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Class__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Class____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Class____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Class____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Class____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Class__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Class_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Function_constructor(ptr %0) {
  %memberidx = getelementptr inbounds %Function, ptr %0, i32 0, i32 6
  store i1 false, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Function__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Function__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Function____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Function__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Function__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Function____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Function____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Function____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Function____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Function__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Function_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Module_constructor(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Module, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Module, ptr %0, i32 0, i32 5
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Function_, ptr null, i32 1) to i32))
  call void @Array_Function__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %3, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %Module, ptr %0, i32 0, i32 2
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Var_, ptr null, i32 1) to i32))
  call void @Array_Var__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx5 = getelementptr inbounds %Array_Var_, ptr %4, i32 0, i32 1
  %memberidx6 = getelementptr inbounds %Array_Var_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  store ptr %4, ptr %memberidx4, align 8
  %memberidx7 = getelementptr inbounds %Module, ptr %0, i32 0, i32 4
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Class_, ptr null, i32 1) to i32))
  call void @Array_Class__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx8 = getelementptr inbounds %Array_Class_, ptr %5, i32 0, i32 1
  %memberidx9 = getelementptr inbounds %Array_Class_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx9, align 4
  store ptr %5, ptr %memberidx7, align 8
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Function_, ptr null, i32 1) to i32))
  call void @Array_Function__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx11 = getelementptr inbounds %Array_Function_, ptr %6, i32 0, i32 1
  %memberidx12 = getelementptr inbounds %Array_Function_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx12, align 4
  store ptr %6, ptr %memberidx1, align 8
  %memberidx13 = getelementptr inbounds %Module, ptr %0, i32 0, i32 6
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Enum_, ptr null, i32 1) to i32))
  call void @Array_Enum__constructor(ptr %7, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx14 = getelementptr inbounds %Array_Enum_, ptr %7, i32 0, i32 1
  %memberidx15 = getelementptr inbounds %Array_Enum_, ptr %7, i32 0, i32 2
  store i64 0, ptr %memberidx15, align 4
  store ptr %7, ptr %memberidx13, align 8
  %memberidx16 = getelementptr inbounds %Module, ptr %0, i32 0, i32 7
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Scope_, ptr null, i32 1) to i32))
  call void @Array_Scope__constructor(ptr %8, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx17 = getelementptr inbounds %Array_Scope_, ptr %8, i32 0, i32 1
  %memberidx18 = getelementptr inbounds %Array_Scope_, ptr %8, i32 0, i32 2
  store i64 0, ptr %memberidx18, align 4
  store ptr %8, ptr %memberidx16, align 8
  %memberidx19 = getelementptr inbounds %Module, ptr %0, i32 0, i32 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ConstDeclaration_, ptr null, i32 1) to i32))
  call void @Array_ConstDeclaration__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx20 = getelementptr inbounds %Array_ConstDeclaration_, ptr %9, i32 0, i32 1
  %memberidx21 = getelementptr inbounds %Array_ConstDeclaration_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx21, align 4
  store ptr %9, ptr %memberidx19, align 8
  %memberidx22 = getelementptr inbounds %Module, ptr %0, i32 0, i32 9
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_VarDeclaration_, ptr null, i32 1) to i32))
  call void @Array_VarDeclaration__constructor(ptr %10, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx23 = getelementptr inbounds %Array_VarDeclaration_, ptr %10, i32 0, i32 1
  %memberidx24 = getelementptr inbounds %Array_VarDeclaration_, ptr %10, i32 0, i32 2
  store i64 0, ptr %memberidx24, align 4
  store ptr %10, ptr %memberidx22, align 8
  %memberidx25 = getelementptr inbounds %Module, ptr %0, i32 0, i32 3
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Const_, ptr null, i32 1) to i32))
  call void @Array_Const__constructor(ptr %11, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx26 = getelementptr inbounds %Array_Const_, ptr %11, i32 0, i32 1
  %memberidx27 = getelementptr inbounds %Array_Const_, ptr %11, i32 0, i32 2
  store i64 0, ptr %memberidx27, align 4
  store ptr %11, ptr %memberidx25, align 8
  ret void
}

define ptr @TypeChecker_check_module(ptr %0, ptr %1, ptr %2) {
for.entry:
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 9
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Module, ptr null, i32 1) to i32))
  call void @Module_constructor(ptr %5, ptr %2)
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Program, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_Module_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx6, align 4
  store i64 %8, ptr %memberidx1, align 4
  %9 = load ptr, ptr %memberidx4, align 8
  %memberidx8 = getelementptr inbounds %Program, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx8, align 8
  %11 = load ptr, ptr %10, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx9, align 8
  call void %12(ptr %10, ptr %5)
  %13 = call ptr @TypeChecker_create_scope(ptr %0)
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ConstId, ptr null, i32 1) to i32))
  call void @ConstId_constructor(ptr %14, i64 -1, i64 -1)
  %memberidx10 = getelementptr inbounds %Scope, ptr %13, i32 0, i32 1
  %15 = load ptr, ptr %memberidx10, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call ptr @string_from_bytes(ptr @194, i64 4)
  call void %17(ptr %15, ptr %18, ptr %14)
  %19 = load ptr, ptr %memberidx10, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr @string_from_bytes(ptr @195, i64 5)
  call void %21(ptr %19, ptr %22, ptr %14)
  %23 = load ptr, ptr %memberidx10, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr @string_from_bytes(ptr @196, i64 4)
  call void %25(ptr %23, ptr %26, ptr %14)
  %27 = load ptr, ptr %13, align 8
  store ptr %27, ptr %memberidx2, align 8
  %memberidx18 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 5
  store ptr null, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 3
  store ptr null, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 4
  store ptr null, ptr %memberidx20, align 8
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %35, %ifend ]
  %memberidx21 = getelementptr inbounds %ModuleAST, ptr %1, i32 0, i32 3
  %28 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Array_ImportNode_, ptr %28, i32 0, i32 2
  %29 = load i64, ptr %memberidx22, align 4
  %30 = icmp slt i64 %i.0, %29
  br i1 %30, label %for.body, label %for.entry25

for.body:                                         ; preds = %for.cond
  %31 = load ptr, ptr %28, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i32 0, i32 5
  %32 = load ptr, ptr %memberidx24, align 8
  %33 = call ptr %32(ptr %28, i64 %i.0)
  call void @TypeChecker_check_module_import(ptr %0, ptr %33)
  %34 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %34, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend132, %for.end89, %for.end38, %for.body, %if.entry59
  %common.ret.op = phi ptr [ null, %if.entry59 ], [ null, %for.body ], [ null, %for.end38 ], [ null, %for.end89 ], [ %spec.select, %ifend132 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %for.body
  %35 = add i64 %i.0, 1
  br label %for.cond

for.entry25:                                      ; preds = %for.cond
  br label %for.cond26

for.cond26:                                       ; preds = %for.body27, %for.entry25
  %i.1 = phi i64 [ 0, %for.entry25 ], [ %42, %for.body27 ]
  %memberidx30 = getelementptr inbounds %ModuleAST, ptr %1, i32 0, i32 2
  %36 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %Array_EnumNode_, ptr %36, i32 0, i32 2
  %37 = load i64, ptr %memberidx31, align 4
  %38 = icmp slt i64 %i.1, %37
  br i1 %38, label %for.body27, label %for.entry34

for.body27:                                       ; preds = %for.cond26
  %39 = load ptr, ptr %36, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i32 0, i32 5
  %40 = load ptr, ptr %memberidx33, align 8
  %41 = call ptr %40(ptr %36, i64 %i.1)
  call void @TypeChecker_declare_enum_within_module(ptr %0, ptr %41)
  %42 = add i64 %i.1, 1
  br label %for.cond26

for.entry34:                                      ; preds = %for.cond26
  br label %for.cond35

for.cond35:                                       ; preds = %for.body36, %for.entry34
  %i.2 = phi i64 [ 0, %for.entry34 ], [ %49, %for.body36 ]
  %memberidx39 = getelementptr inbounds %ModuleAST, ptr %1, i32 0, i32 1
  %43 = load ptr, ptr %memberidx39, align 8
  %memberidx40 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %43, i32 0, i32 2
  %44 = load i64, ptr %memberidx40, align 4
  %45 = icmp slt i64 %i.2, %44
  br i1 %45, label %for.body36, label %for.end38

for.body36:                                       ; preds = %for.cond35
  %46 = load ptr, ptr %43, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 5
  %47 = load ptr, ptr %memberidx42, align 8
  %48 = call ptr %47(ptr %43, i64 %i.2)
  call void @TypeChecker_declare_class_within_module(ptr %0, ptr %48)
  %49 = add i64 %i.2, 1
  br label %for.cond35

for.end38:                                        ; preds = %for.cond35
  %50 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %50, label %common.ret, label %for.entry46

for.entry46:                                      ; preds = %for.end38
  br label %for.cond47

for.cond47:                                       ; preds = %ifend61, %for.entry46
  %i.3 = phi i64 [ 0, %for.entry46 ], [ %81, %ifend61 ]
  %memberidx51 = getelementptr inbounds %ModuleAST, ptr %1, i32 0, i32 6
  %51 = load ptr, ptr %memberidx51, align 8
  %memberidx52 = getelementptr inbounds %Array_TypeAliasNode_, ptr %51, i32 0, i32 2
  %52 = load i64, ptr %memberidx52, align 4
  %53 = icmp slt i64 %i.3, %52
  br i1 %53, label %for.body48, label %for.entry67

for.body48:                                       ; preds = %for.cond47
  %type_alias_node = alloca ptr, align 8
  %54 = load ptr, ptr %51, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i32 0, i32 5
  %55 = load ptr, ptr %memberidx54, align 8
  %56 = call ptr %55(ptr %51, i64 %i.3)
  store ptr %56, ptr %type_alias_node, align 8
  %ty = alloca ptr, align 8
  %memberidx55 = getelementptr inbounds %TypeAliasNode, ptr %56, i32 0, i32 1
  %57 = load ptr, ptr %memberidx55, align 8
  %58 = call ptr @TypeChecker_check_type(ptr %0, ptr %57)
  store ptr %58, ptr %ty, align 8
  %identifer_tok = alloca ptr, align 8
  %59 = load ptr, ptr %type_alias_node, align 8
  %60 = load ptr, ptr %59, align 8
  store ptr %60, ptr %identifer_tok, align 8
  %alias_name = alloca ptr, align 8
  %memberidx57 = getelementptr inbounds %IdentifierToken, ptr %60, i32 0, i32 2
  %61 = load ptr, ptr %memberidx57, align 8
  store ptr %61, ptr %alias_name, align 8
  %62 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %61)
  %63 = load i64, ptr %62, align 4
  %64 = icmp ne i64 %63, 21
  br i1 %64, label %if.entry59, label %ifend61

if.entry59:                                       ; preds = %for.body48
  %65 = load ptr, ptr %alias_name, align 8
  %66 = load ptr, ptr %65, align 8
  %memberidx62 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i32 0, i32 11
  %67 = load ptr, ptr %memberidx62, align 8
  %68 = call ptr %67(ptr %65)
  %69 = alloca ptr, align 8
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr %69, ptr @197, ptr %68)
  %71 = load ptr, ptr %69, align 8
  %72 = call ptr @string_from_bytes(ptr %71, i64 %70)
  %73 = load ptr, ptr %type_alias_node, align 8
  %74 = load ptr, ptr %73, align 8
  %memberidx64 = getelementptr inbounds %Token, ptr %74, i32 0, i32 1
  %75 = load ptr, ptr %memberidx64, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %72, ptr %75)
  br label %common.ret

ifend61:                                          ; preds = %for.body48
  %memberidx65 = getelementptr inbounds %Scope, ptr %13, i32 0, i32 6
  %76 = load ptr, ptr %memberidx65, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %alias_name, align 8
  %80 = load ptr, ptr %ty, align 8
  call void %78(ptr %76, ptr %79, ptr %80)
  %81 = add i64 %i.3, 1
  br label %for.cond47

for.entry67:                                      ; preds = %for.cond47
  br label %for.cond68

for.cond68:                                       ; preds = %for.body69, %for.entry67
  %i.4 = phi i64 [ 0, %for.entry67 ], [ %88, %for.body69 ]
  %memberidx72 = getelementptr inbounds %ModuleAST, ptr %1, i32 0, i32 4
  %82 = load ptr, ptr %memberidx72, align 8
  %memberidx73 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %82, i32 0, i32 2
  %83 = load i64, ptr %memberidx73, align 4
  %84 = icmp slt i64 %i.4, %83
  br i1 %84, label %for.body69, label %for.entry76

for.body69:                                       ; preds = %for.cond68
  %85 = load ptr, ptr %82, align 8
  %memberidx75 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %85, i32 0, i32 5
  %86 = load ptr, ptr %memberidx75, align 8
  %87 = call ptr %86(ptr %82, i64 %i.4)
  call void @TypeChecker_declare_global_const(ptr %0, ptr %87)
  %88 = add i64 %i.4, 1
  br label %for.cond68

for.entry76:                                      ; preds = %for.cond68
  br label %for.cond77

for.cond77:                                       ; preds = %for.body78, %for.entry76
  %i.5 = phi i64 [ 0, %for.entry76 ], [ %95, %for.body78 ]
  %memberidx81 = getelementptr inbounds %ModuleAST, ptr %1, i32 0, i32 5
  %89 = load ptr, ptr %memberidx81, align 8
  %memberidx82 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %89, i32 0, i32 2
  %90 = load i64, ptr %memberidx82, align 4
  %91 = icmp slt i64 %i.5, %90
  br i1 %91, label %for.body78, label %for.entry85

for.body78:                                       ; preds = %for.cond77
  %92 = load ptr, ptr %89, align 8
  %memberidx84 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i32 0, i32 5
  %93 = load ptr, ptr %memberidx84, align 8
  %94 = call ptr %93(ptr %89, i64 %i.5)
  call void @TypeChecker_declare_global_var(ptr %0, ptr %94)
  %95 = add i64 %i.5, 1
  br label %for.cond77

for.entry85:                                      ; preds = %for.cond77
  br label %for.cond86

for.cond86:                                       ; preds = %for.body87, %for.entry85
  %i.6 = phi i64 [ 0, %for.entry85 ], [ %102, %for.body87 ]
  %96 = load ptr, ptr %1, align 8
  %memberidx91 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %96, i32 0, i32 2
  %97 = load i64, ptr %memberidx91, align 4
  %98 = icmp slt i64 %i.6, %97
  br i1 %98, label %for.body87, label %for.end89

for.body87:                                       ; preds = %for.cond86
  %99 = load ptr, ptr %96, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %99, i32 0, i32 5
  %100 = load ptr, ptr %memberidx93, align 8
  %101 = call ptr %100(ptr %96, i64 %i.6)
  call void @TypeChecker_declare_function_within_module(ptr %0, ptr %101)
  %102 = add i64 %i.6, 1
  br label %for.cond86

for.end89:                                        ; preds = %for.cond86
  %103 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %103, label %common.ret, label %for.entry97

for.entry97:                                      ; preds = %for.end89
  br label %for.cond98

for.cond98:                                       ; preds = %for.body99, %for.entry97
  %i.7 = phi i64 [ 0, %for.entry97 ], [ %115, %for.body99 ]
  %104 = load ptr, ptr %memberidx30, align 8
  %memberidx103 = getelementptr inbounds %Array_EnumNode_, ptr %104, i32 0, i32 2
  %105 = load i64, ptr %memberidx103, align 4
  %106 = icmp slt i64 %i.7, %105
  br i1 %106, label %for.body99, label %for.entry108

for.body99:                                       ; preds = %for.cond98
  %memberidx104 = getelementptr inbounds %Module, ptr %5, i32 0, i32 6
  %107 = load ptr, ptr %memberidx104, align 8
  %108 = load ptr, ptr %107, align 8
  %memberidx105 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %108, i32 0, i32 5
  %109 = load ptr, ptr %memberidx105, align 8
  %110 = call ptr %109(ptr %107, i64 %i.7)
  %111 = load ptr, ptr %memberidx30, align 8
  %112 = load ptr, ptr %111, align 8
  %memberidx107 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %112, i32 0, i32 5
  %113 = load ptr, ptr %memberidx107, align 8
  %114 = call ptr %113(ptr %111, i64 %i.7)
  call void @TypeChecker_check_enum_body(ptr %0, ptr %110, ptr %114)
  %115 = add i64 %i.7, 1
  br label %for.cond98

for.entry108:                                     ; preds = %for.cond98
  br label %for.cond109

for.cond109:                                      ; preds = %for.body110, %for.entry108
  %i.8 = phi i64 [ 0, %for.entry108 ], [ %122, %for.body110 ]
  %116 = load ptr, ptr %memberidx39, align 8
  %memberidx114 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %116, i32 0, i32 2
  %117 = load i64, ptr %memberidx114, align 4
  %118 = icmp slt i64 %i.8, %117
  br i1 %118, label %for.body110, label %for.entry117

for.body110:                                      ; preds = %for.cond109
  %119 = load ptr, ptr %116, align 8
  %memberidx116 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %119, i32 0, i32 5
  %120 = load ptr, ptr %memberidx116, align 8
  %121 = call ptr %120(ptr %116, i64 %i.8)
  call void @TypeChecker_check_class_body(ptr %0, ptr %121)
  %122 = add i64 %i.8, 1
  br label %for.cond109

for.entry117:                                     ; preds = %for.cond109
  br label %for.cond118

for.cond118:                                      ; preds = %for.body119, %for.entry117
  %i.9 = phi i64 [ 0, %for.entry117 ], [ %134, %for.body119 ]
  %123 = load ptr, ptr %1, align 8
  %memberidx123 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %123, i32 0, i32 2
  %124 = load i64, ptr %memberidx123, align 4
  %125 = icmp slt i64 %i.9, %124
  br i1 %125, label %for.body119, label %for.end121

for.body119:                                      ; preds = %for.cond118
  %memberidx124 = getelementptr inbounds %Module, ptr %5, i32 0, i32 5
  %126 = load ptr, ptr %memberidx124, align 8
  %127 = load ptr, ptr %126, align 8
  %memberidx125 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %127, i32 0, i32 5
  %128 = load ptr, ptr %memberidx125, align 8
  %129 = call ptr %128(ptr %126, i64 %i.9)
  %130 = load ptr, ptr %1, align 8
  %131 = load ptr, ptr %130, align 8
  %memberidx127 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %131, i32 0, i32 5
  %132 = load ptr, ptr %memberidx127, align 8
  %133 = call ptr %132(ptr %130, i64 %i.9)
  call void @TypeChecker_check_function_body(ptr %0, ptr %129, ptr %133)
  %134 = add i64 %i.9, 1
  br label %for.cond118

for.end121:                                       ; preds = %for.cond118
  %135 = load i1, ptr %memberidx, align 1
  %136 = load i64, ptr %memberidx1, align 4
  %137 = icmp ne i64 %136, 0
  %138 = and i1 %135, %137
  br i1 %138, label %if.entry130, label %ifend132

if.entry130:                                      ; preds = %for.end121
  call void @TypeChecker_switch_to_generic_module(ptr %0)
  call void @TypeChecker_import_all_from_module(ptr %0, ptr %5)
  br label %ifend132

ifend132:                                         ; preds = %for.end121, %if.entry130
  store ptr %4, ptr %memberidx2, align 8
  store i64 %3, ptr %memberidx1, align 4
  %139 = call i1 @TypeChecker_has_errored(ptr %0)
  %spec.select = select i1 %139, ptr null, ptr %5
  br label %common.ret
}

define void @TypeChecker_add_imported_typealias_to_module(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @TypeChecker_get_current_module_global_scope(ptr %0)
  %memberidx = getelementptr inbounds %Scope, ptr %4, i32 0, i32 6
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %5, ptr %1, ptr %2)
  ret void
}

define void @TypeChecker_add_imported_var_to_module(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @TypeChecker_get_current_module_global_scope(ptr %0)
  %memberidx = getelementptr inbounds %Scope, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %5, ptr %1, ptr %2)
  ret void
}

define void @TypeChecker_add_imported_fnc_to_module(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @TypeChecker_get_current_module_global_scope(ptr %0)
  %memberidx = getelementptr inbounds %Scope, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %5, ptr %1, ptr %2)
  ret void
}

define void @TypeChecker_add_imported_class_to_module(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @TypeChecker_get_current_module_global_scope(ptr %0)
  %memberidx = getelementptr inbounds %Scope, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %5, ptr %1, ptr %2)
  %memberidx2 = getelementptr inbounds %Scope, ptr %4, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassVarId, ptr null, i32 1) to i32))
  call void @ClassVarId_constructor(ptr %11, ptr %2)
  call void %10(ptr %8, ptr %1, ptr %11)
  ret void
}

define void @TypeChecker_add_imported_enum_to_module(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @TypeChecker_get_current_module_global_scope(ptr %0)
  %memberidx = getelementptr inbounds %Scope, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %5, ptr %1, ptr %2)
  %memberidx2 = getelementptr inbounds %Scope, ptr %4, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumVarId, ptr null, i32 1) to i32))
  call void @EnumVarId_constructor(ptr %11, ptr %2)
  call void %10(ptr %8, ptr %1, ptr %11)
  ret void
}

define void @TypeChecker_import_all_from_module(ptr %0, ptr %1) {
for.entry:
  %memberidx = getelementptr inbounds %Module, ptr %1, i32 0, i32 7
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load ptr, ptr %2, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 5
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr %4(ptr %2, i64 0)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %memberidx2 = getelementptr inbounds %Module, ptr %1, i32 0, i32 9
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclaration_, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx3, align 4
  %8 = icmp slt i64 %i.0, %7
  br i1 %8, label %for.body, label %for.entry8

for.body:                                         ; preds = %for.cond
  %var_ = alloca ptr, align 8
  %9 = load ptr, ptr %6, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx5, align 8
  %11 = call ptr %10(ptr %6, i64 %i.0)
  store ptr %11, ptr %var_, align 8
  %memberidx6 = getelementptr inbounds %VarDeclaration, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %VarDeclaration, ptr %11, i32 0, i32 2
  %13 = load ptr, ptr %memberidx7, align 8
  call void @TypeChecker_add_imported_var_to_module(ptr %0, ptr %12, ptr %13)
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry8:                                       ; preds = %for.cond
  br label %for.cond9

for.cond9:                                        ; preds = %for.body10, %for.entry8
  %i.1 = phi i64 [ 0, %for.entry8 ], [ %23, %for.body10 ]
  %memberidx13 = getelementptr inbounds %Module, ptr %1, i32 0, i32 8
  %15 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Array_ConstDeclaration_, ptr %15, i32 0, i32 2
  %16 = load i64, ptr %memberidx14, align 4
  %17 = icmp slt i64 %i.1, %16
  br i1 %17, label %for.body10, label %for.entry19

for.body10:                                       ; preds = %for.cond9
  %const_ = alloca ptr, align 8
  %18 = load ptr, ptr %15, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i32 0, i32 5
  %19 = load ptr, ptr %memberidx16, align 8
  %20 = call ptr %19(ptr %15, i64 %i.1)
  store ptr %20, ptr %const_, align 8
  %memberidx17 = getelementptr inbounds %ConstDeclaration, ptr %20, i32 0, i32 1
  %21 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %ConstDeclaration, ptr %20, i32 0, i32 2
  %22 = load ptr, ptr %memberidx18, align 8
  call void @TypeChecker_add_imported_var_to_module(ptr %0, ptr %21, ptr %22)
  %23 = add i64 %i.1, 1
  br label %for.cond9

for.entry19:                                      ; preds = %for.cond9
  br label %for.cond20

for.cond20:                                       ; preds = %for.body21, %for.entry19
  %i.2 = phi i64 [ 0, %for.entry19 ], [ %32, %for.body21 ]
  %memberidx24 = getelementptr inbounds %Module, ptr %1, i32 0, i32 5
  %24 = load ptr, ptr %memberidx24, align 8
  %memberidx25 = getelementptr inbounds %Array_Function_, ptr %24, i32 0, i32 2
  %25 = load i64, ptr %memberidx25, align 4
  %26 = icmp slt i64 %i.2, %25
  br i1 %26, label %for.body21, label %for.entry30

for.body21:                                       ; preds = %for.cond20
  %function = alloca ptr, align 8
  %27 = load ptr, ptr %24, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i32 0, i32 5
  %28 = load ptr, ptr %memberidx27, align 8
  %29 = call ptr %28(ptr %24, i64 %i.2)
  store ptr %29, ptr %function, align 8
  %memberidx28 = getelementptr inbounds %Function, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx28, align 8
  %31 = load ptr, ptr %29, align 8
  call void @TypeChecker_add_imported_fnc_to_module(ptr %0, ptr %30, ptr %31)
  %32 = add i64 %i.2, 1
  br label %for.cond20

for.entry30:                                      ; preds = %for.cond20
  br label %for.cond31

for.cond31:                                       ; preds = %for.body32, %for.entry30
  %i.3 = phi i64 [ 0, %for.entry30 ], [ %41, %for.body32 ]
  %memberidx35 = getelementptr inbounds %Module, ptr %1, i32 0, i32 4
  %33 = load ptr, ptr %memberidx35, align 8
  %memberidx36 = getelementptr inbounds %Array_Class_, ptr %33, i32 0, i32 2
  %34 = load i64, ptr %memberidx36, align 4
  %35 = icmp slt i64 %i.3, %34
  br i1 %35, label %for.body32, label %for.entry41

for.body32:                                       ; preds = %for.cond31
  %class_ = alloca ptr, align 8
  %36 = load ptr, ptr %33, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 5
  %37 = load ptr, ptr %memberidx38, align 8
  %38 = call ptr %37(ptr %33, i64 %i.3)
  store ptr %38, ptr %class_, align 8
  %memberidx39 = getelementptr inbounds %Class, ptr %38, i32 0, i32 1
  %39 = load ptr, ptr %memberidx39, align 8
  %40 = load ptr, ptr %38, align 8
  call void @TypeChecker_add_imported_class_to_module(ptr %0, ptr %39, ptr %40)
  %41 = add i64 %i.3, 1
  br label %for.cond31

for.entry41:                                      ; preds = %for.cond31
  br label %for.cond42

for.cond42:                                       ; preds = %for.body43, %for.entry41
  %i.4 = phi i64 [ 0, %for.entry41 ], [ %50, %for.body43 ]
  %memberidx46 = getelementptr inbounds %Module, ptr %1, i32 0, i32 6
  %42 = load ptr, ptr %memberidx46, align 8
  %memberidx47 = getelementptr inbounds %Array_Enum_, ptr %42, i32 0, i32 2
  %43 = load i64, ptr %memberidx47, align 4
  %44 = icmp slt i64 %i.4, %43
  br i1 %44, label %for.body43, label %for.end45

for.body43:                                       ; preds = %for.cond42
  %enum_ = alloca ptr, align 8
  %45 = load ptr, ptr %42, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i32 0, i32 5
  %46 = load ptr, ptr %memberidx49, align 8
  %47 = call ptr %46(ptr %42, i64 %i.4)
  store ptr %47, ptr %enum_, align 8
  %memberidx50 = getelementptr inbounds %Enum, ptr %47, i32 0, i32 1
  %48 = load ptr, ptr %memberidx50, align 8
  %49 = load ptr, ptr %47, align 8
  call void @TypeChecker_add_imported_enum_to_module(ptr %0, ptr %48, ptr %49)
  %50 = add i64 %i.4, 1
  br label %for.cond42

for.end45:                                        ; preds = %for.cond42
  %type_buckets = alloca ptr, align 8
  %memberidx52 = getelementptr inbounds %Scope, ptr %5, i32 0, i32 6
  %51 = load ptr, ptr %memberidx52, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %52, i32 0, i32 2
  %53 = load ptr, ptr %memberidx53, align 8
  %54 = call ptr %53(ptr %51)
  store ptr %54, ptr %type_buckets, align 8
  br label %for.cond55

for.cond55:                                       ; preds = %for.body56, %for.end45
  %i.5 = phi i64 [ 0, %for.end45 ], [ %63, %for.body56 ]
  %55 = load ptr, ptr %type_buckets, align 8
  %memberidx59 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %55, i32 0, i32 2
  %56 = load i64, ptr %memberidx59, align 4
  %57 = icmp slt i64 %i.5, %56
  br i1 %57, label %for.body56, label %for.end58

for.body56:                                       ; preds = %for.cond55
  %type_bucket = alloca ptr, align 8
  %58 = load ptr, ptr %55, align 8
  %memberidx60 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i32 0, i32 5
  %59 = load ptr, ptr %memberidx60, align 8
  %60 = call ptr %59(ptr %55, i64 %i.5)
  store ptr %60, ptr %type_bucket, align 8
  %memberidx61 = getelementptr inbounds %Bucket_string_Type_, ptr %60, i32 0, i32 1
  %61 = load ptr, ptr %memberidx61, align 8
  %memberidx62 = getelementptr inbounds %Bucket_string_Type_, ptr %60, i32 0, i32 2
  %62 = load ptr, ptr %memberidx62, align 8
  call void @TypeChecker_add_imported_typealias_to_module(ptr %0, ptr %61, ptr %62)
  %63 = add i64 %i.5, 1
  br label %for.cond55

for.end58:                                        ; preds = %for.cond55
  ret void
}

define ptr @TypeChecker_check_typecast_expr(ptr %0, ptr %1) {
  %3 = call ptr @Type_unknown()
  %memberidx = getelementptr inbounds %TypeCastExpressionNode, ptr %1, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @TypeChecker_check_expression(ptr %0, ptr %3, ptr %4)
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %TypeCastExpressionNode, ptr %1, i32 0, i32 4
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr @TypeChecker_check_type(ptr %0, ptr %7)
  %9 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend45, %if.entry43, %if.entry4
  %common.ret.op = phi ptr [ %13, %if.entry4 ], [ null, %if.entry43 ], [ %67, %ifend45 ], [ null, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr @string_from_bytes(ptr @301, i64 6)
  %12 = call i1 @is_buitin(ptr %10, ptr %8, ptr %11)
  br i1 %12, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringExpression, ptr null, i32 1) to i32))
  %14 = call ptr @string_from_bytes(ptr @38, i64 0)
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_int_, ptr null, i32 1) to i32))
  call void @Array_int__constructor(ptr %15, i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64))
  %memberidx7 = getelementptr inbounds %Array_int_, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx7, align 8
  store i64 0, ptr %16, align 4
  %memberidx8 = getelementptr inbounds %Array_int_, ptr %15, i32 0, i32 2
  store i64 1, ptr %memberidx8, align 4
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %17, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx9 = getelementptr inbounds %Array_Expression_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx9, align 8
  store ptr %5, ptr %18, align 8
  %memberidx10 = getelementptr inbounds %Array_Expression_, ptr %17, i32 0, i32 2
  store i64 1, ptr %memberidx10, align 4
  call void @StringExpression_constructor(ptr %13, ptr %14, ptr %15, ptr %17, ptr %8)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %is_valid_cast = alloca i1, align 1
  store i1 false, ptr %is_valid_cast, align 1
  %19 = call i1 @is_numeric(ptr %8)
  %20 = call i1 @is_numeric(ptr %6)
  %21 = and i1 %19, %20
  br i1 %21, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend6
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend13

ifend13:                                          ; preds = %ifend6, %if.entry11
  %22 = call i1 @is_int(ptr %8)
  %23 = load i64, ptr %6, align 4
  %24 = icmp eq i64 %23, 14
  %25 = and i1 %22, %24
  br i1 %25, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %ifend13
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend17

ifend17:                                          ; preds = %ifend13, %if.entry15
  %26 = call i1 @is_int(ptr %6)
  %27 = load i64, ptr %8, align 4
  %28 = icmp eq i64 %27, 14
  %29 = and i1 %26, %28
  br i1 %29, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend17
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend21

ifend21:                                          ; preds = %ifend17, %if.entry19
  %30 = call i1 @is_numeric(ptr %8)
  %31 = load ptr, ptr %memberidx3, align 8
  %32 = call ptr @string_from_bytes(ptr @301, i64 6)
  %33 = call i1 @is_buitin(ptr %31, ptr %6, ptr %32)
  %34 = and i1 %30, %33
  br i1 %34, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %ifend21
  %call = alloca ptr, align 8
  store ptr null, ptr %call, align 8
  %35 = call i1 @is_float(ptr %8)
  br i1 %35, label %if.entry26, label %else27

ifend25:                                          ; preds = %ifend21, %ifend28
  %exp.0 = phi ptr [ %46, %ifend28 ], [ %5, %ifend21 ]
  %36 = call i1 @is_object(ptr %8)
  %37 = call i1 @is_object(ptr %6)
  %38 = and i1 %36, %37
  br i1 %38, label %if.entry37, label %ifend39

if.entry26:                                       ; preds = %if.entry23
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicCall, ptr null, i32 1) to i32))
  call void @IntrinsicCall_constructor(ptr %39, i64 0)
  store ptr %39, ptr %call, align 8
  br label %ifend28

else27:                                           ; preds = %if.entry23
  %40 = load i64, ptr %8, align 4
  %41 = icmp slt i64 %40, 5
  %42 = icmp eq i64 %40, 7
  br i1 %41, label %if.entry31, label %else32

ifend28:                                          ; preds = %if.entry31, %else32, %if.entry26
  %43 = load ptr, ptr %call, align 8
  %memberidx34 = getelementptr inbounds %IntrinsicCall, ptr %43, i32 0, i32 5
  %44 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %44, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx35 = getelementptr inbounds %Array_Expression_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx35, align 8
  store ptr %5, ptr %45, align 8
  %memberidx36 = getelementptr inbounds %Array_Expression_, ptr %44, i32 0, i32 2
  store i64 1, ptr %memberidx36, align 4
  store ptr %44, ptr %memberidx34, align 8
  %46 = load ptr, ptr %call, align 8
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend25

if.entry31:                                       ; preds = %else27
  %47 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicCall, ptr null, i32 1) to i32))
  call void @IntrinsicCall_constructor(ptr %47, i64 1)
  store ptr %47, ptr %call, align 8
  br label %ifend28

else32:                                           ; preds = %else27
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicCall, ptr null, i32 1) to i32))
  call void @IntrinsicCall_constructor(ptr %48, i64 2)
  store ptr %48, ptr %call, align 8
  br label %ifend28

if.entry37:                                       ; preds = %ifend25
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend39

ifend39:                                          ; preds = %ifend25, %if.entry37
  %49 = call i1 @is_pointer(ptr %8)
  %50 = call i1 @is_pointer(ptr %6)
  %51 = and i1 %49, %50
  br i1 %51, label %if.entry40, label %ifend42

if.entry40:                                       ; preds = %ifend39
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend42

ifend42:                                          ; preds = %ifend39, %if.entry40
  %52 = load i1, ptr %is_valid_cast, align 1
  %53 = xor i1 %52, true
  br i1 %53, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %ifend42
  %54 = call ptr @TypeChecker_dump_type(ptr %0, ptr %6)
  %55 = load ptr, ptr %54, align 8
  %memberidx46 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %55, i32 0, i32 11
  %56 = load ptr, ptr %memberidx46, align 8
  %57 = call ptr %56(ptr %54)
  %58 = call ptr @TypeChecker_dump_type(ptr %0, ptr %8)
  %59 = load ptr, ptr %58, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i32 0, i32 11
  %60 = load ptr, ptr %memberidx47, align 8
  %61 = call ptr %60(ptr %58)
  %62 = alloca ptr, align 8
  %63 = call i64 (ptr, ptr, ...) @asprintf(ptr %62, ptr @302, ptr %57, ptr %61)
  %64 = load ptr, ptr %62, align 8
  %65 = call ptr @string_from_bytes(ptr %64, i64 %63)
  %66 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %65, ptr %66)
  br label %common.ret

ifend45:                                          ; preds = %ifend42
  %67 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeCastExpression, ptr null, i32 1) to i32))
  call void @TypeCastExpression_constructor(ptr %67, ptr %exp.0, ptr %8)
  br label %common.ret
}

define i64 @Array_Expression__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Expression__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Expression____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Expression__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Expression__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Expression____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Expression____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Expression____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Expression____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Expression__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Expression_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_fill_in_call_args(ptr %0, ptr %1, ptr %2, ptr %3) {
for.entry:
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %4, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %end, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %23, %end ]
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp slt i64 %i.0, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %expected_type = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %FunctionType, ptr %1, i32 0, i32 1
  %7 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx4, align 4
  %9 = icmp sgt i64 %8, %i.0
  br i1 %9, label %true_block, label %false_block

for.end:                                          ; preds = %for.cond
  %10 = call i1 @TypeChecker_has_errored(ptr %0)
  %11 = icmp eq ptr %2, null
  %12 = or i1 %10, %11
  br i1 %12, label %if.entry, label %ifend

true_block:                                       ; preds = %for.body
  %13 = load ptr, ptr %7, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 5
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call ptr %14(ptr %7, i64 %i.0)
  br label %end

false_block:                                      ; preds = %for.body
  %16 = call ptr @Type_unknown()
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %15, %true_block ], [ %16, %false_block ]
  store ptr %ternary, ptr %expected_type, align 8
  %17 = load ptr, ptr %4, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %memberidx7, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx8, align 8
  %21 = call ptr %20(ptr %3, i64 %i.0)
  %22 = call ptr @TypeChecker_check_expression(ptr %0, ptr %ternary, ptr %21)
  call void %18(ptr %4, ptr %22)
  %23 = add i64 %i.0, 1
  br label %for.cond

common.ret:                                       ; preds = %ifend13, %if.entry
  ret ptr %4

if.entry:                                         ; preds = %for.end
  br label %common.ret

ifend:                                            ; preds = %for.end
  %memberidx9 = getelementptr inbounds %Array_FunctionArg_, ptr %2, i32 0, i32 2
  %24 = load i64, ptr %memberidx9, align 4
  %25 = load i64, ptr %memberidx2, align 4
  %26 = icmp sgt i64 %24, %25
  br i1 %26, label %for.entry14, label %ifend13

ifend13:                                          ; preds = %for.cond16, %ifend
  br label %common.ret

for.entry14:                                      ; preds = %ifend
  br label %for.cond16

for.cond16:                                       ; preds = %ifend25, %for.entry14
  %i.1 = phi i64 [ %25, %for.entry14 ], [ %36, %ifend25 ]
  %27 = load i64, ptr %memberidx9, align 4
  %28 = icmp slt i64 %i.1, %27
  br i1 %28, label %for.body17, label %ifend13

for.body17:                                       ; preds = %for.cond16
  %arg = alloca ptr, align 8
  %29 = load ptr, ptr %2, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %29, i32 0, i32 5
  %30 = load ptr, ptr %memberidx21, align 8
  %31 = call ptr %30(ptr %2, i64 %i.1)
  store ptr %31, ptr %arg, align 8
  %memberidx22 = getelementptr inbounds %FunctionArg, ptr %31, i32 0, i32 6
  %32 = load ptr, ptr %memberidx22, align 8
  %33 = icmp ne ptr %32, null
  br i1 %33, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %for.body17
  %34 = load ptr, ptr %4, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i32 0, i32 2
  %35 = load ptr, ptr %memberidx26, align 8
  call void %35(ptr %4, ptr %32)
  br label %ifend25

ifend25:                                          ; preds = %for.body17, %if.entry23
  %36 = add i64 %i.1, 1
  br label %for.cond16
}

define void @TypeChecker_add_inherited_props_to_class(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Class, ptr %1, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call i1 @is_object(ptr %4)
  %6 = xor i1 %5, true
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %7 = call ptr @TypeChecker_dump_type(ptr %0, ptr %4)
  %8 = load ptr, ptr %7, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 11
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call ptr %9(ptr %7)
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr %11, ptr @257, ptr %10)
  %13 = load ptr, ptr %11, align 8
  %14 = call ptr @string_from_bytes(ptr %13, i64 %12)
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i32 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %15, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %14, ptr %16)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %parent_class = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %17 = load ptr, ptr %memberidx4, align 8
  %18 = call ptr @get_class_from_type(ptr %17, ptr %4)
  store ptr %18, ptr %parent_class, align 8
  %parent_bucket_props = alloca ptr, align 8
  %memberidx5 = getelementptr inbounds %Class, ptr %18, i32 0, i32 6
  %19 = load ptr, ptr %memberidx5, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx6, align 8
  %22 = call ptr %21(ptr %19)
  store ptr %22, ptr %parent_bucket_props, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %ifend
  %23 = load i64, ptr %i, align 4
  %24 = load ptr, ptr %parent_bucket_props, align 8
  %memberidx7 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %24, i32 0, i32 2
  %25 = load i64, ptr %memberidx7, align 4
  %26 = icmp slt i64 %23, %25
  br i1 %26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %parent_prop_name = alloca ptr, align 8
  %27 = load ptr, ptr %24, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i32 0, i32 5
  %28 = load ptr, ptr %memberidx8, align 8
  %29 = call ptr %28(ptr %24, i64 %23)
  %memberidx9 = getelementptr inbounds %Bucket_string_PropId_, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx9, align 8
  store ptr %30, ptr %parent_prop_name, align 8
  %parent_prop_id = alloca ptr, align 8
  %31 = load ptr, ptr %parent_bucket_props, align 8
  %32 = load ptr, ptr %31, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 5
  %33 = load ptr, ptr %memberidx10, align 8
  %34 = load i64, ptr %i, align 4
  %35 = call ptr %33(ptr %31, i64 %34)
  %memberidx11 = getelementptr inbounds %Bucket_string_PropId_, ptr %35, i32 0, i32 2
  %36 = load ptr, ptr %memberidx11, align 8
  store ptr %36, ptr %parent_prop_id, align 8
  %parent_prop_type = alloca ptr, align 8
  %37 = load ptr, ptr %memberidx4, align 8
  %38 = call ptr @get_class_prop_type(ptr %37, ptr %36)
  store ptr %38, ptr %parent_prop_type, align 8
  %child_prop_id = alloca ptr, align 8
  %memberidx13 = getelementptr inbounds %Class, ptr %1, i32 0, i32 6
  %39 = load ptr, ptr %memberidx13, align 8
  %40 = load ptr, ptr %39, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx14, align 8
  %42 = load ptr, ptr %parent_prop_name, align 8
  %43 = call ptr %41(ptr %39, ptr %42)
  store ptr %43, ptr %child_prop_id, align 8
  %parent_prop_visibility = alloca i64, align 8
  %44 = load ptr, ptr %memberidx4, align 8
  %45 = load ptr, ptr %parent_prop_id, align 8
  %46 = call i64 @get_class_prop_visibility(ptr %44, ptr %45)
  store i64 %46, ptr %parent_prop_visibility, align 4
  %parent_prop_is_static = alloca i1, align 1
  %47 = load ptr, ptr %memberidx4, align 8
  %48 = load ptr, ptr %parent_prop_id, align 8
  %49 = call i1 @is_class_prop_static(ptr %47, ptr %48)
  store i1 %49, ptr %parent_prop_is_static, align 1
  br i1 %49, label %for.incr, label %ifend19

for.incr:                                         ; preds = %ifend36, %ifend19, %for.body
  %50 = load i64, ptr %i, align 4
  %51 = add i64 %50, 1
  store i64 %51, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void

ifend19:                                          ; preds = %for.body
  %52 = load i64, ptr %parent_prop_visibility, align 4
  %53 = icmp eq i64 %52, 1
  %54 = load ptr, ptr %parent_prop_type, align 8
  %55 = load i64, ptr %54, align 4
  %56 = icmp eq i64 %55, 17
  %57 = and i1 %53, %56
  %.not = xor i1 %57, true
  %58 = load ptr, ptr %child_prop_id, align 8
  %59 = icmp eq ptr %58, null
  %or.cond = select i1 %.not, i1 %59, i1 false
  br i1 %or.cond, label %if.entry24, label %for.incr

if.entry24:                                       ; preds = %ifend19
  %60 = load ptr, ptr %parent_prop_id, align 8
  %61 = load i64, ptr %60, align 4
  %62 = icmp eq i64 %61, 1
  br i1 %62, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %if.entry24
  %memberidx31 = getelementptr inbounds %Class, ptr %1, i32 0, i32 9
  %63 = load i64, ptr %memberidx31, align 4
  %64 = add i64 %63, 1
  store i64 %64, ptr %memberidx31, align 4
  br label %ifend30

ifend30:                                          ; preds = %if.entry24, %if.entry28
  %65 = load ptr, ptr %parent_prop_id, align 8
  %66 = load i64, ptr %65, align 4
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend30
  %memberidx37 = getelementptr inbounds %Class, ptr %1, i32 0, i32 8
  %68 = load i64, ptr %memberidx37, align 4
  %69 = add i64 %68, 1
  store i64 %69, ptr %memberidx37, align 4
  br label %ifend36

ifend36:                                          ; preds = %ifend30, %if.entry34
  %70 = load ptr, ptr %memberidx13, align 8
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %parent_prop_name, align 8
  %74 = load ptr, ptr %parent_prop_id, align 8
  call void %72(ptr %70, ptr %73, ptr %74)
  br label %for.incr
}

define ptr @TypeChecker_check_member_access(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @get_class_from_prop_id(ptr %3, ptr %1)
  %5 = call ptr @string_from_bytes(ptr @38, i64 0)
  %6 = load i64, ptr %1, align 4
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %method = alloca ptr, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %4, i32 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %11 = load i64, ptr %memberidx4, align 4
  %12 = call ptr %10(ptr %8, i64 %11)
  store ptr %12, ptr %method, align 8
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx5, align 4
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %12, i32 0, i32 3
  %14 = load ptr, ptr %memberidx6, align 8
  br label %ifend

else:                                             ; preds = %2
  %field = alloca ptr, align 8
  %memberidx7 = getelementptr inbounds %Class, ptr %4, i32 0, i32 4
  %15 = load ptr, ptr %memberidx7, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 5
  %17 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %18 = load i64, ptr %memberidx9, align 4
  %19 = call ptr %17(ptr %15, i64 %18)
  store ptr %19, ptr %field, align 8
  %memberidx10 = getelementptr inbounds %ClassField, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx10, align 4
  %memberidx11 = getelementptr inbounds %ClassField, ptr %19, i32 0, i32 3
  %21 = load ptr, ptr %memberidx11, align 8
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %visibility.0 = phi i64 [ %13, %if.entry ], [ %20, %else ]
  %member_name.0 = phi ptr [ %14, %if.entry ], [ %21, %else ]
  %memberidx12 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 3
  %22 = load ptr, ptr %memberidx12, align 8
  %23 = icmp ne ptr %22, null
  br i1 %23, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend
  %24 = load i64, ptr %22, align 4
  %25 = load ptr, ptr %4, align 8
  %26 = load i64, ptr %25, align 4
  %27 = icmp ne i64 %24, %26
  %memberidx21 = getelementptr inbounds %TypeId, ptr %25, i32 0, i32 2
  %28 = load i64, ptr %memberidx21, align 4
  %memberidx23 = getelementptr inbounds %TypeId, ptr %22, i32 0, i32 2
  %29 = load i64, ptr %memberidx23, align 4
  %30 = icmp ne i64 %28, %29
  %31 = or i1 %27, %30
  %32 = icmp eq i64 %visibility.0, 1
  %or.cond = select i1 %31, i1 %32, i1 false
  br i1 %or.cond, label %if.entry27, label %common.ret

else14:                                           ; preds = %ifend
  %33 = icmp ne i64 %visibility.0, 2
  br i1 %33, label %if.entry33, label %common.ret

common.ret:                                       ; preds = %else14, %if.entry13, %if.entry33, %if.entry27
  %common.ret.op = phi ptr [ %44, %if.entry27 ], [ %59, %if.entry33 ], [ null, %if.entry13 ], [ null, %else14 ]
  ret ptr %common.ret.op

if.entry27:                                       ; preds = %if.entry13
  %34 = load ptr, ptr %member_name.0, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i32 0, i32 11
  %35 = load ptr, ptr %memberidx30, align 8
  %36 = call ptr %35(ptr %member_name.0)
  %memberidx31 = getelementptr inbounds %Class, ptr %4, i32 0, i32 1
  %37 = load ptr, ptr %memberidx31, align 8
  %38 = load ptr, ptr %37, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %38, i32 0, i32 11
  %39 = load ptr, ptr %memberidx32, align 8
  %40 = call ptr %39(ptr %37)
  %41 = alloca ptr, align 8
  %42 = call i64 (ptr, ptr, ...) @asprintf(ptr %41, ptr @309, ptr %36, ptr %40)
  %43 = load ptr, ptr %41, align 8
  %44 = call ptr @string_from_bytes(ptr %43, i64 %42)
  br label %common.ret

if.entry33:                                       ; preds = %else14
  %45 = load ptr, ptr %member_name.0, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i32 0, i32 11
  %46 = load ptr, ptr %memberidx36, align 8
  %47 = call ptr %46(ptr %member_name.0)
  %48 = call ptr @dump_access(i64 %visibility.0)
  %49 = load ptr, ptr %48, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %49, i32 0, i32 11
  %50 = load ptr, ptr %memberidx37, align 8
  %51 = call ptr %50(ptr %48)
  %memberidx38 = getelementptr inbounds %Class, ptr %4, i32 0, i32 1
  %52 = load ptr, ptr %memberidx38, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i32 0, i32 11
  %54 = load ptr, ptr %memberidx39, align 8
  %55 = call ptr %54(ptr %52)
  %56 = alloca ptr, align 8
  %57 = call i64 (ptr, ptr, ...) @asprintf(ptr %56, ptr @310, ptr %47, ptr %51, ptr %55)
  %58 = load ptr, ptr %56, align 8
  %59 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %59, ptr %58, i64 %57)
  br label %common.ret
}

define void @ReturnStatement_constructor(ptr %0) {
  call void @Statement_constructor(ptr %0, i64 7)
  %memberidx = getelementptr inbounds %ReturnStatement, ptr %0, i32 0, i32 1
  store ptr null, ptr %memberidx, align 8
  ret void
}

define ptr @TypeChecker_check_can_return(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %ReturnStatementNode, ptr %1, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @TypeChecker_get_current_function_type(ptr %0)
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ReturnStatement, ptr null, i32 1) to i32))
  call void @ReturnStatement_constructor(ptr %6)
  %7 = icmp ne ptr %3, null
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %rt_value = alloca ptr, align 8
  %8 = call ptr @TypeChecker_check_expression(ptr %0, ptr %5, ptr %3)
  store ptr %8, ptr %rt_value, align 8
  %9 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %9, label %common.ret, label %ifend4

else:                                             ; preds = %2
  %10 = load i64, ptr %5, align 4
  %11 = icmp ne i64 %10, 12
  br i1 %11, label %if.entry20, label %ifend

common.ret:                                       ; preds = %if.entry, %if.entry20, %if.entry11, %if.entry6, %ifend
  %common.ret.op = phi ptr [ %6, %ifend ], [ null, %if.entry6 ], [ null, %if.entry11 ], [ null, %if.entry20 ], [ null, %if.entry ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else, %ifend13
  br label %common.ret

ifend4:                                           ; preds = %if.entry
  %12 = load i64, ptr %5, align 4
  %13 = icmp eq i64 %12, 12
  br i1 %13, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %14 = call ptr @string_from_bytes(ptr @340, i64 54)
  %15 = load ptr, ptr %3, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %14, ptr %15)
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  %16 = load ptr, ptr %rt_value, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %memberidx10, align 8
  %18 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %5, ptr %17)
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend8
  %20 = call ptr @TypeChecker_dump_type(ptr %0, ptr %5)
  %21 = load ptr, ptr %20, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 11
  %22 = load ptr, ptr %memberidx14, align 8
  %23 = call ptr %22(ptr %20)
  %24 = load ptr, ptr %rt_value, align 8
  %memberidx15 = getelementptr inbounds %Expression, ptr %24, i32 0, i32 3
  %25 = load ptr, ptr %memberidx15, align 8
  %26 = call ptr @TypeChecker_dump_type(ptr %0, ptr %25)
  %27 = load ptr, ptr %26, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i32 0, i32 11
  %28 = load ptr, ptr %memberidx16, align 8
  %29 = call ptr %28(ptr %26)
  %30 = alloca ptr, align 8
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr %30, ptr @341, ptr %23, ptr %29)
  %32 = load ptr, ptr %30, align 8
  %33 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %33, ptr %32, i64 %31)
  %34 = load ptr, ptr %3, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %33, ptr %34)
  br label %common.ret

ifend13:                                          ; preds = %ifend8
  %memberidx18 = getelementptr inbounds %ReturnStatement, ptr %6, i32 0, i32 1
  %35 = load ptr, ptr %rt_value, align 8
  store ptr %35, ptr %memberidx18, align 8
  br label %ifend

if.entry20:                                       ; preds = %else
  %36 = call ptr @string_from_bytes(ptr @342, i64 32)
  %37 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %36, ptr %37)
  br label %common.ret
}

define void @TypeChecker_declare_global_const(ptr %0, ptr %1) {
  %3 = call ptr @TypeChecker_check_const_declaration(ptr %0, ptr %1)
  %4 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  ret void

ifend:                                            ; preds = %2
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %3, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  %5 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx1 = getelementptr inbounds %Module, ptr %5, i32 0, i32 8
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx2, align 8
  call void %8(ptr %6, ptr %3)
  br label %common.ret
}

define ptr @TypeChecker_check_var_declaration(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %VarDeclarationStatement, ptr %1, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call i1 @TypeChecker_is_constant_in_scope(ptr %0, ptr %4)
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %end20, %end, %ifend54, %if.entry52, %if.entry38, %if.entry32, %if.entry12, %if.entry
  %common.ret.op = phi ptr [ null, %if.entry ], [ null, %if.entry12 ], [ null, %if.entry32 ], [ null, %if.entry38 ], [ null, %if.entry52 ], [ %94, %ifend54 ], [ null, %end ], [ null, %end20 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %4, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 11
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr %7(ptr %4)
  %9 = alloca ptr, align 8
  %10 = call i64 (ptr, ptr, ...) @asprintf(ptr %9, ptr @206, ptr %8)
  %11 = load ptr, ptr %9, align 8
  %12 = call ptr @string_from_bytes(ptr %11, i64 %10)
  %13 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %12, ptr %14)
  br label %common.ret

ifend:                                            ; preds = %2
  %current_scope = alloca ptr, align 8
  %15 = call ptr @TypeChecker_get_current_scope(ptr %0)
  store ptr %15, ptr %current_scope, align 8
  %var_type = alloca ptr, align 8
  %memberidx5 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i32 0, i32 3
  %16 = load ptr, ptr %memberidx5, align 8
  %17 = icmp ne ptr %16, null
  br i1 %17, label %true_block, label %false_block

true_block:                                       ; preds = %ifend
  %18 = call ptr @TypeChecker_check_type(ptr %0, ptr %16)
  br label %end

false_block:                                      ; preds = %ifend
  %19 = call ptr @Type_unknown()
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %18, %true_block ], [ %19, %false_block ]
  store ptr %ternary, ptr %var_type, align 8
  %20 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %20, label %common.ret, label %ifend9

ifend9:                                           ; preds = %end
  %memberidx10 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i32 0, i32 4
  %21 = load ptr, ptr %memberidx10, align 8
  %22 = icmp eq ptr %21, null
  %23 = load ptr, ptr %var_type, align 8
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 21
  %26 = and i1 %22, %25
  br i1 %26, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %ifend9
  %27 = load ptr, ptr %4, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i32 0, i32 11
  %28 = load ptr, ptr %memberidx15, align 8
  %29 = call ptr %28(ptr %4)
  %30 = alloca ptr, align 8
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr %30, ptr @333, ptr %29)
  %32 = load ptr, ptr %30, align 8
  %33 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %33, ptr %32, i64 %31)
  %34 = load ptr, ptr %memberidx, align 8
  %memberidx17 = getelementptr inbounds %Token, ptr %34, i32 0, i32 1
  %35 = load ptr, ptr %memberidx17, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %33, ptr %35)
  br label %common.ret

ifend14:                                          ; preds = %ifend9
  %value = alloca ptr, align 8
  %36 = icmp ne ptr %21, null
  br i1 %36, label %true_block18, label %end20

true_block18:                                     ; preds = %ifend14
  %37 = call ptr @TypeChecker_check_expression(ptr %0, ptr %23, ptr %21)
  br label %end20

end20:                                            ; preds = %ifend14, %true_block18
  %ternary23 = phi ptr [ %37, %true_block18 ], [ null, %ifend14 ]
  store ptr %ternary23, ptr %value, align 8
  %38 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %38, label %common.ret, label %ifend26

ifend26:                                          ; preds = %end20
  %39 = load ptr, ptr %value, align 8
  %40 = icmp ne ptr %39, null
  br i1 %40, label %if.entry27, label %ifend29

if.entry27:                                       ; preds = %ifend26
  %41 = call i1 @is_null(ptr %39)
  %42 = load ptr, ptr %value, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %42, i32 0, i32 3
  %43 = load ptr, ptr %memberidx30, align 8
  %44 = load i64, ptr %43, align 4
  %45 = icmp eq i64 %44, 21
  %46 = and i1 %41, %45
  br i1 %46, label %if.entry32, label %ifend34

ifend29:                                          ; preds = %if.entry46, %ifend40, %ifend26
  %47 = load ptr, ptr %current_scope, align 8
  %memberidx50 = getelementptr inbounds %Scope, ptr %47, i32 0, i32 1
  %48 = load ptr, ptr %memberidx50, align 8
  %49 = load ptr, ptr %48, align 8
  %memberidx51 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx51, align 8
  %51 = call ptr %50(ptr %48, ptr %4)
  %52 = icmp ne ptr %51, null
  br i1 %52, label %if.entry52, label %ifend54

if.entry32:                                       ; preds = %if.entry27
  %53 = call ptr @string_from_bytes(ptr @334, i64 69)
  %54 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %53, ptr %54)
  br label %common.ret

ifend34:                                          ; preds = %if.entry27
  %55 = load ptr, ptr %var_type, align 8
  %56 = load i64, ptr %55, align 4
  %57 = icmp ne i64 %56, 21
  %58 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %55, ptr %43)
  %59 = xor i1 %58, true
  %60 = and i1 %57, %59
  br i1 %60, label %if.entry38, label %ifend40

if.entry38:                                       ; preds = %ifend34
  %61 = load ptr, ptr %var_type, align 8
  %62 = call ptr @TypeChecker_dump_type(ptr %0, ptr %61)
  %63 = load ptr, ptr %62, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i32 0, i32 11
  %64 = load ptr, ptr %memberidx41, align 8
  %65 = call ptr %64(ptr %62)
  %66 = load ptr, ptr %value, align 8
  %memberidx42 = getelementptr inbounds %Expression, ptr %66, i32 0, i32 3
  %67 = load ptr, ptr %memberidx42, align 8
  %68 = call ptr @TypeChecker_dump_type(ptr %0, ptr %67)
  %69 = load ptr, ptr %68, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %69, i32 0, i32 11
  %70 = load ptr, ptr %memberidx43, align 8
  %71 = call ptr %70(ptr %68)
  %72 = alloca ptr, align 8
  %73 = call i64 (ptr, ptr, ...) @asprintf(ptr %72, ptr @335, ptr %65, ptr %71)
  %74 = load ptr, ptr %72, align 8
  %75 = call ptr @string_from_bytes(ptr %74, i64 %73)
  %76 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %75, ptr %76)
  br label %common.ret

ifend40:                                          ; preds = %ifend34
  %77 = load ptr, ptr %var_type, align 8
  %78 = load i64, ptr %77, align 4
  %79 = icmp eq i64 %78, 21
  br i1 %79, label %if.entry46, label %ifend29

if.entry46:                                       ; preds = %ifend40
  %80 = load ptr, ptr %value, align 8
  %memberidx49 = getelementptr inbounds %Expression, ptr %80, i32 0, i32 3
  %81 = load ptr, ptr %memberidx49, align 8
  store ptr %81, ptr %var_type, align 8
  br label %ifend29

if.entry52:                                       ; preds = %ifend29
  %82 = load ptr, ptr %4, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %82, i32 0, i32 11
  %83 = load ptr, ptr %memberidx55, align 8
  %84 = call ptr %83(ptr %4)
  %85 = alloca ptr, align 8
  %86 = call i64 (ptr, ptr, ...) @asprintf(ptr %85, ptr @336, ptr %84)
  %87 = load ptr, ptr %85, align 8
  %88 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %88, ptr %87, i64 %86)
  %89 = load ptr, ptr %memberidx, align 8
  %memberidx57 = getelementptr inbounds %Token, ptr %89, i32 0, i32 1
  %90 = load ptr, ptr %memberidx57, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %88, ptr %90)
  br label %common.ret

ifend54:                                          ; preds = %ifend29
  %var = alloca ptr, align 8
  %91 = load ptr, ptr %value, align 8
  %92 = load ptr, ptr %var_type, align 8
  %93 = call ptr @TypeChecker_declare_var_within_current_scope(ptr %0, ptr %4, ptr %91, ptr %92)
  store ptr %93, ptr %var, align 8
  %94 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarDeclaration, ptr null, i32 1) to i32))
  %95 = load ptr, ptr %var, align 8
  %memberidx58 = getelementptr inbounds %Var, ptr %95, i32 0, i32 1
  %96 = load ptr, ptr %memberidx58, align 8
  call void @VarDeclaration_constructor(ptr %94, ptr %4, ptr %96)
  br label %common.ret
}

define ptr @TypeChecker_check_const_declaration(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr @TypeChecker_get_current_scope(ptr %0)
  %6 = call i1 @TypeChecker_is_constant_in_scope(ptr %0, ptr %4)
  %memberidx2 = getelementptr inbounds %Scope, ptr %5, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = call ptr %9(ptr %7, ptr %4)
  %11 = icmp ne ptr %10, null
  %12 = or i1 %6, %11
  br i1 %12, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend11, %end, %ifend31, %if.entry29, %if.entry23, %if.entry17, %if.entry
  %common.ret.op = phi ptr [ null, %if.entry ], [ null, %if.entry17 ], [ null, %if.entry23 ], [ null, %if.entry29 ], [ %65, %ifend31 ], [ null, %end ], [ null, %ifend11 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %13 = load ptr, ptr %4, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 11
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = call ptr %14(ptr %4)
  %16 = alloca ptr, align 8
  %17 = call i64 (ptr, ptr, ...) @asprintf(ptr %16, ptr @206, ptr %15)
  %18 = load ptr, ptr %16, align 8
  %19 = call ptr @string_from_bytes(ptr %18, i64 %17)
  %20 = load ptr, ptr %memberidx, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %20, i32 0, i32 1
  %21 = load ptr, ptr %memberidx6, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %19, ptr %21)
  br label %common.ret

ifend:                                            ; preds = %2
  %const_type = alloca ptr, align 8
  %memberidx7 = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i32 0, i32 3
  %22 = load ptr, ptr %memberidx7, align 8
  %23 = icmp ne ptr %22, null
  br i1 %23, label %true_block, label %false_block

true_block:                                       ; preds = %ifend
  %24 = call ptr @TypeChecker_check_type(ptr %0, ptr %22)
  br label %end

false_block:                                      ; preds = %ifend
  %25 = call ptr @Type_unknown()
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %24, %true_block ], [ %25, %false_block ]
  store ptr %ternary, ptr %const_type, align 8
  %26 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %26, label %common.ret, label %ifend11

ifend11:                                          ; preds = %end
  %value = alloca ptr, align 8
  %27 = load ptr, ptr %const_type, align 8
  %memberidx12 = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i32 0, i32 4
  %28 = load ptr, ptr %memberidx12, align 8
  %29 = call ptr @TypeChecker_check_expression(ptr %0, ptr %27, ptr %28)
  store ptr %29, ptr %value, align 8
  %30 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %30, label %common.ret, label %ifend15

ifend15:                                          ; preds = %ifend11
  %31 = load ptr, ptr %value, align 8
  %memberidx16 = getelementptr inbounds %Expression, ptr %31, i32 0, i32 1
  %32 = load i1, ptr %memberidx16, align 1
  %33 = xor i1 %32, true
  br i1 %33, label %if.entry17, label %ifend19

if.entry17:                                       ; preds = %ifend15
  %34 = call ptr @string_from_bytes(ptr @337, i64 48)
  %35 = load ptr, ptr %memberidx12, align 8
  %36 = load ptr, ptr %35, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %34, ptr %36)
  br label %common.ret

ifend19:                                          ; preds = %ifend15
  %37 = call i1 @is_null(ptr %31)
  %38 = load ptr, ptr %const_type, align 8
  %39 = load i64, ptr %38, align 4
  %40 = icmp eq i64 %39, 21
  %41 = and i1 %37, %40
  br i1 %41, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %ifend19
  %42 = call ptr @string_from_bytes(ptr @334, i64 69)
  %43 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %42, ptr %43)
  br label %common.ret

ifend25:                                          ; preds = %ifend19
  %44 = icmp ne i64 %39, 21
  %45 = load ptr, ptr %value, align 8
  %memberidx28 = getelementptr inbounds %Expression, ptr %45, i32 0, i32 3
  %46 = load ptr, ptr %memberidx28, align 8
  %47 = icmp ne ptr %38, %46
  %48 = and i1 %44, %47
  br i1 %48, label %if.entry29, label %ifend31

if.entry29:                                       ; preds = %ifend25
  %49 = call ptr @TypeChecker_dump_type(ptr %0, ptr %38)
  %50 = load ptr, ptr %49, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i32 0, i32 11
  %51 = load ptr, ptr %memberidx32, align 8
  %52 = call ptr %51(ptr %49)
  %53 = load ptr, ptr %value, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %53, i32 0, i32 3
  %54 = load ptr, ptr %memberidx33, align 8
  %55 = call ptr @TypeChecker_dump_type(ptr %0, ptr %54)
  %56 = load ptr, ptr %55, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i32 0, i32 11
  %57 = load ptr, ptr %memberidx34, align 8
  %58 = call ptr %57(ptr %55)
  %59 = alloca ptr, align 8
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr %59, ptr @335, ptr %52, ptr %58)
  %61 = load ptr, ptr %59, align 8
  %62 = call ptr @string_from_bytes(ptr %61, i64 %60)
  %63 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %62, ptr %63)
  br label %common.ret

ifend31:                                          ; preds = %ifend25
  %constant = alloca ptr, align 8
  %64 = call ptr @TypeChecker_declare_const_within_current_scope(ptr %0, ptr %4, ptr %45, ptr %46)
  store ptr %64, ptr %constant, align 8
  %65 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ConstDeclaration, ptr null, i32 1) to i32))
  %66 = load ptr, ptr %constant, align 8
  %memberidx37 = getelementptr inbounds %Const, ptr %66, i32 0, i32 1
  %67 = load ptr, ptr %memberidx37, align 8
  call void @ConstDeclaration_constructor(ptr %65, ptr %4, ptr %67)
  br label %common.ret
}

define ptr @TypeChecker_get_current_scope(ptr %0) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = call ptr @get_scope(ptr %2, ptr %3)
  ret ptr %4
}

define i1 @TypeChecker_is_constant_in_scope(ptr %0, ptr %1) {
  %3 = call ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %1)
  %4 = icmp ne ptr %3, null
  br i1 %4, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %5 = load i64, ptr %3, align 4
  %6 = icmp eq i64 %5, 2
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %is_constant.0 = phi i1 [ %6, %if.entry ], [ false, %2 ]
  ret i1 %is_constant.0
}

define ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %1) {
  %3 = call ptr @TypeChecker_get_current_scope(ptr %0)
  br i1 true, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend7, %2
  %current_scope.0 = phi ptr [ %3, %2 ], [ %23, %ifend7 ]
  %memberidx = getelementptr inbounds %Scope, ptr %current_scope.0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %4, ptr %1)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %if.entry, label %ifend

while.end:                                        ; preds = %ifend, %ifend7, %2
  %value.0 = phi ptr [ %value.1, %ifend ], [ %value.1, %ifend7 ], [ null, %2 ]
  %9 = icmp eq ptr %value.0, null
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %10 = load ptr, ptr %memberidx10, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp ne i64 %11, 0
  %13 = and i1 %9, %12
  br i1 %13, label %if.entry12, label %ifend14

if.entry:                                         ; preds = %while.entry
  %memberidx2 = getelementptr inbounds %Scope, ptr %current_scope.0, i32 0, i32 3
  %14 = load ptr, ptr %memberidx2, align 8
  %15 = load ptr, ptr %14, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = call ptr %16(ptr %14, ptr %1)
  br label %ifend

ifend:                                            ; preds = %while.entry, %if.entry
  %value.1 = phi ptr [ %17, %if.entry ], [ %7, %while.entry ]
  %memberidx4 = getelementptr inbounds %Scope, ptr %current_scope.0, i32 0, i32 5
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = icmp eq ptr %18, null
  %20 = icmp ne ptr %value.1, null
  %21 = or i1 %19, %20
  br i1 %21, label %while.end, label %ifend7

ifend7:                                           ; preds = %ifend
  %memberidx8 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call ptr @get_scope(ptr %22, ptr %18)
  %24 = icmp eq ptr %value.1, null
  br i1 %24, label %while.entry, label %while.end

if.entry12:                                       ; preds = %while.end
  %previous_scope = alloca ptr, align 8
  store ptr %10, ptr %previous_scope, align 8
  %memberidx17 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %25 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Program, ptr %25, i32 0, i32 1
  %26 = load ptr, ptr %memberidx18, align 8
  %27 = load ptr, ptr %26, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i32 0, i32 5
  %28 = load ptr, ptr %memberidx19, align 8
  %29 = call ptr %28(ptr %26, i64 0)
  %memberidx20 = getelementptr inbounds %Module, ptr %29, i32 0, i32 7
  %30 = load ptr, ptr %memberidx20, align 8
  %31 = load ptr, ptr %30, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i32 0, i32 5
  %32 = load ptr, ptr %memberidx21, align 8
  %33 = call ptr %32(ptr %30, i64 0)
  %34 = load ptr, ptr %33, align 8
  store ptr %34, ptr %memberidx10, align 8
  %35 = call ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %1)
  %36 = load ptr, ptr %previous_scope, align 8
  store ptr %36, ptr %memberidx10, align 8
  %37 = icmp ne ptr %35, null
  br i1 %37, label %if.entry24, label %ifend14

ifend14:                                          ; preds = %if.entry43, %ifend41, %if.entry12, %while.end
  %value.2 = phi ptr [ %35, %if.entry43 ], [ %35, %ifend41 ], [ %35, %if.entry12 ], [ %value.0, %while.end ]
  ret ptr %value.2

if.entry24:                                       ; preds = %if.entry12
  %38 = load ptr, ptr %memberidx17, align 8
  store i1 true, ptr %38, align 1
  %39 = load i64, ptr %35, align 4
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %if.entry30, label %ifend32

if.entry30:                                       ; preds = %if.entry24
  call void @TypeChecker_add_imported_fnc_to_module(ptr %0, ptr %1, ptr %35)
  br label %ifend32

ifend32:                                          ; preds = %if.entry24, %if.entry30
  %41 = load i64, ptr %35, align 4
  %42 = icmp eq i64 %41, 1
  %43 = icmp eq i64 %41, 2
  %44 = or i1 %42, %43
  br i1 %44, label %if.entry35, label %ifend37

if.entry35:                                       ; preds = %ifend32
  call void @TypeChecker_add_imported_var_to_module(ptr %0, ptr %1, ptr %35)
  br label %ifend37

ifend37:                                          ; preds = %ifend32, %if.entry35
  %45 = load i64, ptr %35, align 4
  %46 = icmp eq i64 %45, 3
  br i1 %46, label %if.entry39, label %ifend41

if.entry39:                                       ; preds = %ifend37
  %47 = call ptr @ClassVarId_to_classId(ptr %35)
  call void @TypeChecker_add_imported_class_to_module(ptr %0, ptr %1, ptr %47)
  br label %ifend41

ifend41:                                          ; preds = %ifend37, %if.entry39
  %48 = load i64, ptr %35, align 4
  %49 = icmp eq i64 %48, 4
  br i1 %49, label %if.entry43, label %ifend14

if.entry43:                                       ; preds = %ifend41
  %50 = call ptr @EnumVarId_to_enumId(ptr %35)
  call void @TypeChecker_add_imported_enum_to_module(ptr %0, ptr %1, ptr %50)
  br label %ifend14
}

define ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %1) {
  %3 = call ptr @TypeChecker_get_current_scope(ptr %0)
  br label %while.entry

while.entry:                                      ; preds = %ifend15, %2
  %current_scope.0 = phi ptr [ %3, %2 ], [ %29, %ifend15 ]
  %aliased_ty = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %current_scope.0, i32 0, i32 6
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %4, ptr %1)
  store ptr %7, ptr %aliased_ty, align 8
  %8 = icmp ne ptr %7, null
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend34, %ifend22, %if.entry9, %if.entry4, %if.entry
  %common.ret.op = phi ptr [ %7, %if.entry ], [ %14, %if.entry4 ], [ %21, %if.entry9 ], [ %43, %ifend22 ], [ %49, %ifend34 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %while.entry
  br label %common.ret

ifend:                                            ; preds = %while.entry
  %class_id = alloca ptr, align 8
  %memberidx2 = getelementptr inbounds %Scope, ptr %current_scope.0, i32 0, i32 2
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load ptr, ptr %9, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = call ptr %11(ptr %9, ptr %1)
  store ptr %12, ptr %class_id, align 8
  %13 = icmp ne ptr %12, null
  br i1 %13, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  %15 = load ptr, ptr %class_id, align 8
  call void @ObjectType_constructor(ptr %14, ptr %15)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %enum_id = alloca ptr, align 8
  %memberidx7 = getelementptr inbounds %Scope, ptr %current_scope.0, i32 0, i32 4
  %16 = load ptr, ptr %memberidx7, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx8, align 8
  %19 = call ptr %18(ptr %16, ptr %1)
  store ptr %19, ptr %enum_id, align 8
  %20 = icmp ne ptr %19, null
  br i1 %20, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend6
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumType, ptr null, i32 1) to i32))
  %22 = load ptr, ptr %enum_id, align 8
  call void @EnumType_constructor(ptr %21, ptr %22)
  br label %common.ret

ifend11:                                          ; preds = %ifend6
  %memberidx12 = getelementptr inbounds %Scope, ptr %current_scope.0, i32 0, i32 5
  %23 = load ptr, ptr %memberidx12, align 8
  %24 = icmp eq ptr %23, null
  br i1 %24, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend11
  %memberidx18 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %25 = load ptr, ptr %memberidx18, align 8
  %26 = load i64, ptr %25, align 4
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %if.entry20, label %ifend22

ifend15:                                          ; preds = %ifend11
  %memberidx16 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %28 = load ptr, ptr %memberidx16, align 8
  %29 = call ptr @get_scope(ptr %28, ptr %23)
  br label %while.entry

if.entry20:                                       ; preds = %if.entry13
  %previous_scope = alloca ptr, align 8
  store ptr %25, ptr %previous_scope, align 8
  %memberidx25 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %30 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Program, ptr %30, i32 0, i32 1
  %31 = load ptr, ptr %memberidx26, align 8
  %32 = load ptr, ptr %31, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 5
  %33 = load ptr, ptr %memberidx27, align 8
  %34 = call ptr %33(ptr %31, i64 0)
  %memberidx28 = getelementptr inbounds %Module, ptr %34, i32 0, i32 7
  %35 = load ptr, ptr %memberidx28, align 8
  %36 = load ptr, ptr %35, align 8
  %memberidx29 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 5
  %37 = load ptr, ptr %memberidx29, align 8
  %38 = call ptr %37(ptr %35, i64 0)
  %39 = load ptr, ptr %38, align 8
  store ptr %39, ptr %memberidx18, align 8
  %builtin_type = alloca ptr, align 8
  %40 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %1)
  store ptr %40, ptr %builtin_type, align 8
  %41 = load i64, ptr %40, align 4
  %42 = icmp ne i64 %41, 21
  br i1 %42, label %if.entry32, label %ifend34

ifend22:                                          ; preds = %if.entry13
  %43 = call ptr @Type_unknown()
  br label %common.ret

if.entry32:                                       ; preds = %if.entry20
  %44 = load ptr, ptr %memberidx25, align 8
  store i1 true, ptr %44, align 1
  %45 = load ptr, ptr %builtin_type, align 8
  %46 = load i64, ptr %45, align 4
  %47 = icmp eq i64 %46, 13
  br i1 %47, label %if.entry38, label %else39

ifend34:                                          ; preds = %if.entry38, %else39, %if.entry20
  %48 = load ptr, ptr %previous_scope, align 8
  store ptr %48, ptr %memberidx18, align 8
  %49 = load ptr, ptr %builtin_type, align 8
  br label %common.ret

if.entry38:                                       ; preds = %if.entry32
  %memberidx41 = getelementptr inbounds %ObjectType, ptr %45, i32 0, i32 1
  %50 = load ptr, ptr %memberidx41, align 8
  call void @TypeChecker_add_imported_class_to_module(ptr %0, ptr %1, ptr %50)
  br label %ifend34

else39:                                           ; preds = %if.entry32
  %memberidx42 = getelementptr inbounds %EnumType, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %memberidx42, align 8
  call void @TypeChecker_add_imported_enum_to_module(ptr %0, ptr %1, ptr %51)
  br label %ifend34
}

define ptr @TypeChecker_create_child_scope_within_current_scope(ptr %0) {
  %2 = call ptr @TypeChecker_create_scope(ptr %0)
  %memberidx = getelementptr inbounds %Scope, ptr %2, i32 0, i32 5
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %3 = load ptr, ptr %memberidx1, align 8
  store ptr %3, ptr %memberidx, align 8
  ret ptr %2
}

define ptr @TypeChecker_declare_var_within_current_scope(ptr %0, ptr %1, ptr %2, ptr %3) {
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Var, ptr null, i32 1) to i32))
  call void @Var_constructor(ptr %5, ptr %2, ptr %3)
  %6 = call ptr @TypeChecker_get_current_module(ptr %0)
  %7 = call ptr @TypeChecker_get_current_scope(ptr %0)
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarId, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %9 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %6, i32 0, i32 2
  %10 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx2, align 4
  call void @VarId_constructor(ptr %8, i64 1, i64 %9, i64 %11)
  %memberidx3 = getelementptr inbounds %Var, ptr %5, i32 0, i32 1
  store ptr %8, ptr %memberidx3, align 8
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx5, align 8
  call void %14(ptr %12, ptr %5)
  %memberidx6 = getelementptr inbounds %Scope, ptr %7, i32 0, i32 1
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %15, ptr %1, ptr %8)
  ret ptr %5
}

define ptr @TypeChecker_declare_const_within_current_scope(ptr %0, ptr %1, ptr %2, ptr %3) {
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Const, ptr null, i32 1) to i32))
  call void @Const_constructor(ptr %5, ptr %2, ptr %3)
  %6 = call ptr @TypeChecker_get_current_module(ptr %0)
  %7 = call ptr @TypeChecker_get_current_scope(ptr %0)
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ConstId, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %9 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %6, i32 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx2, align 4
  call void @ConstId_constructor(ptr %8, i64 %9, i64 %11)
  %memberidx3 = getelementptr inbounds %Const, ptr %5, i32 0, i32 1
  store ptr %8, ptr %memberidx3, align 8
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx5, align 8
  call void %14(ptr %12, ptr %5)
  %memberidx6 = getelementptr inbounds %Scope, ptr %7, i32 0, i32 1
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %15, ptr %1, ptr %8)
  ret ptr %5
}

define ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = call ptr @get_class_from_type(ptr %5, ptr %6)
  %memberidx3 = getelementptr inbounds %Class, ptr %7, i32 0, i32 6
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = call ptr @string_from_bytes(ptr @225, i64 11)
  %12 = call ptr %10(ptr %8, ptr %11)
  %13 = icmp eq ptr %12, null
  br i1 %13, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend20, %ifend, %ifend33, %if.entry31, %if.entry18, %if.entry
  %common.ret.op = phi ptr [ null, %if.entry ], [ null, %if.entry18 ], [ null, %if.entry31 ], [ %92, %ifend33 ], [ null, %ifend ], [ null, %ifend20 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx5 = getelementptr inbounds %Class, ptr %7, i32 0, i32 1
  %14 = load ptr, ptr %memberidx5, align 8
  %15 = load ptr, ptr %14, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i32 0, i32 11
  %16 = load ptr, ptr %memberidx6, align 8
  %17 = call ptr %16(ptr %14)
  %18 = alloca ptr, align 8
  %19 = call i64 (ptr, ptr, ...) @asprintf(ptr %18, ptr @290, ptr %17)
  %20 = load ptr, ptr %18, align 8
  %21 = call ptr @string_from_bytes(ptr %20, i64 %19)
  %22 = load ptr, ptr %4, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %21, ptr %22)
  br label %common.ret

ifend:                                            ; preds = %3
  %method_type = alloca ptr, align 8
  %23 = load ptr, ptr %memberidx1, align 8
  %24 = call ptr @get_class_prop_type(ptr %23, ptr %12)
  store ptr %24, ptr %method_type, align 8
  %arg1_type = alloca ptr, align 8
  %memberidx9 = getelementptr inbounds %FunctionType, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx9, align 8
  %26 = load ptr, ptr %25, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %26, i32 0, i32 5
  %27 = load ptr, ptr %memberidx10, align 8
  %28 = call ptr %27(ptr %25, i64 0)
  store ptr %28, ptr %arg1_type, align 8
  %arg2_type = alloca ptr, align 8
  %29 = load ptr, ptr %method_type, align 8
  %memberidx11 = getelementptr inbounds %FunctionType, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx11, align 8
  %31 = load ptr, ptr %30, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i32 0, i32 5
  %32 = load ptr, ptr %memberidx12, align 8
  %33 = call ptr %32(ptr %30, i64 1)
  store ptr %33, ptr %arg2_type, align 8
  %34 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %34, label %common.ret, label %ifend15

ifend15:                                          ; preds = %ifend
  %index = alloca ptr, align 8
  %35 = load ptr, ptr %arg1_type, align 8
  %memberidx16 = getelementptr inbounds %ExpressionIndexNode, ptr %4, i32 0, i32 4
  %36 = load ptr, ptr %memberidx16, align 8
  %37 = call ptr @TypeChecker_check_expression(ptr %0, ptr %35, ptr %36)
  store ptr %37, ptr %index, align 8
  %38 = load ptr, ptr %arg1_type, align 8
  %memberidx17 = getelementptr inbounds %Expression, ptr %37, i32 0, i32 3
  %39 = load ptr, ptr %memberidx17, align 8
  %40 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %38, ptr %39)
  %41 = xor i1 %40, true
  br i1 %41, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend15
  %42 = load ptr, ptr %arg1_type, align 8
  %43 = call ptr @TypeChecker_dump_type(ptr %0, ptr %42)
  %44 = load ptr, ptr %43, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %44, i32 0, i32 11
  %45 = load ptr, ptr %memberidx21, align 8
  %46 = call ptr %45(ptr %43)
  %47 = load ptr, ptr %index, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %47, i32 0, i32 3
  %48 = load ptr, ptr %memberidx22, align 8
  %49 = call ptr @TypeChecker_dump_type(ptr %0, ptr %48)
  %50 = load ptr, ptr %49, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i32 0, i32 11
  %51 = load ptr, ptr %memberidx23, align 8
  %52 = call ptr %51(ptr %49)
  %53 = alloca ptr, align 8
  %54 = call i64 (ptr, ptr, ...) @asprintf(ptr %53, ptr @274, ptr %46, ptr %52)
  %55 = load ptr, ptr %53, align 8
  %56 = call ptr @string_from_bytes(ptr %55, i64 %54)
  %57 = load ptr, ptr %memberidx16, align 8
  %58 = load ptr, ptr %57, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %56, ptr %58)
  br label %common.ret

ifend20:                                          ; preds = %ifend15
  %value = alloca ptr, align 8
  %59 = load ptr, ptr %arg2_type, align 8
  %memberidx26 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 5
  %60 = load ptr, ptr %memberidx26, align 8
  %61 = call ptr @TypeChecker_check_expression(ptr %0, ptr %59, ptr %60)
  store ptr %61, ptr %value, align 8
  %62 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %62, label %common.ret, label %ifend29

ifend29:                                          ; preds = %ifend20
  %63 = load ptr, ptr %arg1_type, align 8
  %64 = load ptr, ptr %index, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %64, i32 0, i32 3
  %65 = load ptr, ptr %memberidx30, align 8
  %66 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %63, ptr %65)
  %67 = xor i1 %66, true
  br i1 %67, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend29
  %68 = load ptr, ptr %arg2_type, align 8
  %69 = call ptr @TypeChecker_dump_type(ptr %0, ptr %68)
  %70 = load ptr, ptr %69, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i32 0, i32 11
  %71 = load ptr, ptr %memberidx34, align 8
  %72 = call ptr %71(ptr %69)
  %73 = load ptr, ptr %value, align 8
  %memberidx35 = getelementptr inbounds %Expression, ptr %73, i32 0, i32 3
  %74 = load ptr, ptr %memberidx35, align 8
  %75 = call ptr @TypeChecker_dump_type(ptr %0, ptr %74)
  %76 = load ptr, ptr %75, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %76, i32 0, i32 11
  %77 = load ptr, ptr %memberidx36, align 8
  %78 = call ptr %77(ptr %75)
  %79 = alloca ptr, align 8
  %80 = call i64 (ptr, ptr, ...) @asprintf(ptr %79, ptr @274, ptr %72, ptr %78)
  %81 = load ptr, ptr %79, align 8
  %82 = call ptr @string_from_bytes(ptr %81, i64 %80)
  %83 = load ptr, ptr %memberidx26, align 8
  %84 = load ptr, ptr %83, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %82, ptr %84)
  br label %common.ret

ifend33:                                          ; preds = %ifend29
  %member_expr = alloca ptr, align 8
  %85 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %86 = load ptr, ptr %method_type, align 8
  call void @MemberExpression_constructor(ptr %85, ptr %1, ptr %12, ptr %86)
  store ptr %85, ptr %member_expr, align 8
  %args = alloca ptr, align 8
  %87 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %87, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx39 = getelementptr inbounds %Array_Expression_, ptr %87, i32 0, i32 1
  %88 = load ptr, ptr %memberidx39, align 8
  %89 = load ptr, ptr %index, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr inbounds ptr, ptr %88, i64 1
  %91 = load ptr, ptr %value, align 8
  store ptr %91, ptr %90, align 8
  %memberidx40 = getelementptr inbounds %Array_Expression_, ptr %87, i32 0, i32 2
  store i64 2, ptr %memberidx40, align 4
  store ptr %87, ptr %args, align 8
  %92 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %93 = load ptr, ptr %member_expr, align 8
  %94 = load ptr, ptr %args, align 8
  %95 = load ptr, ptr %method_type, align 8
  %memberidx41 = getelementptr inbounds %FunctionType, ptr %95, i32 0, i32 2
  %96 = load ptr, ptr %memberidx41, align 8
  call void @CallExpression_constructor(ptr %92, ptr %93, ptr %94, ptr %96)
  br label %common.ret
}

define void @WhileStatement_constructor(ptr %0, ptr %1, ptr %2) {
  call void @Statement_constructor(ptr %0, i64 4)
  %memberidx = getelementptr inbounds %WhileStatement, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %WhileStatement, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx1, align 8
  ret void
}

define ptr @TypeChecker_check_while_statment(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %WhileStatementNode, ptr %1, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @TypeChecker_check_condition(ptr %0, ptr %3)
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 8
  %5 = load i1, ptr %memberidx1, align 1
  store i1 true, ptr %memberidx1, align 1
  %memberidx3 = getelementptr inbounds %WhileStatementNode, ptr %1, i32 0, i32 3
  %6 = load ptr, ptr %memberidx3, align 8
  %7 = call ptr @TypeChecker_check_block(ptr %0, ptr %6)
  store i1 %5, ptr %memberidx1, align 1
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%WhileStatement, ptr null, i32 1) to i32))
  call void @WhileStatement_constructor(ptr %8, ptr %4, ptr %7)
  ret ptr %8
}

define i64 @Array_Module__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Module__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Module____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Module__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Module__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Module____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Module____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Module____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Module____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Module__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Module_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @Program_constructor(ptr %0) {
  store i1 false, ptr %0, align 1
  %memberidx1 = getelementptr inbounds %Program, ptr %0, i32 0, i32 1
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Module_, ptr null, i32 1) to i32))
  call void @Array_Module__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %2, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_Module_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %2, ptr %memberidx1, align 8
  ret void
}

define ptr @TypeChecker_check(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 7
  store ptr %2, ptr %memberidx, align 8
  call void @TypeChecker_load_builtins_module(ptr %0)
  %5 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %4, %ifend
  %common.ret.op = phi ptr [ %7, %ifend ], [ null, %4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %4
  call void @TypeChecker_load_generic_module(ptr %0)
  %6 = call ptr @TypeChecker_check_module(ptr %0, ptr %1, ptr %3)
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  br label %common.ret
}

define void @BinaryExpression_constructor(ptr %0, ptr %1, i64 %2, ptr %3, ptr %4, i1 %5) {
  call void @Expression_constructor(ptr %0, i64 8)
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %0, i32 0, i32 5
  store i64 %2, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %BinaryExpression, ptr %0, i32 0, i32 6
  store ptr %3, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %4, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  store i1 %5, ptr %memberidx4, align 1
  ret void
}

define ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp sge i64 %4, 19
  %6 = icmp sle i64 %4, 30
  %7 = and i1 %5, %6
  %8 = icmp eq i64 %4, 19
  %memberidx1 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 3
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ExpressionNode, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp eq i64 %10, 13
  %12 = and i1 %8, %11
  br i1 %12, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %possible_obj = alloca ptr, align 8
  %13 = call ptr @Type_unknown()
  %14 = load ptr, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %ExpressionIndexNode, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = call ptr @TypeChecker_check_expression(ptr %0, ptr %13, ptr %15)
  store ptr %16, ptr %possible_obj, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %memberidx5, align 8
  %18 = call i1 @is_object(ptr %17)
  br i1 %18, label %if.entry6, label %ifend

ifend:                                            ; preds = %if.entry, %3
  %left = alloca ptr, align 8
  %19 = load ptr, ptr %memberidx1, align 8
  %20 = call ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %19)
  store ptr %20, ptr %left, align 8
  %21 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %21, label %common.ret, label %ifend12

common.ret:                                       ; preds = %ifend25, %ifend16, %ifend, %ifend104, %if.entry102, %if.entry94, %if.entry88, %if.entry84, %ifend77, %ifend66, %ifend58, %if.entry31, %if.entry23, %if.entry14, %if.entry6
  %common.ret.op = phi ptr [ %23, %if.entry6 ], [ %32, %if.entry14 ], [ %45, %if.entry23 ], [ %54, %if.entry31 ], [ %97, %ifend58 ], [ %108, %ifend66 ], [ %125, %ifend77 ], [ %133, %if.entry84 ], [ %139, %if.entry88 ], [ %156, %if.entry94 ], [ %169, %if.entry102 ], [ null, %ifend104 ], [ null, %ifend ], [ null, %ifend16 ], [ null, %ifend25 ]
  ret ptr %common.ret.op

if.entry6:                                        ; preds = %if.entry
  %22 = load ptr, ptr %possible_obj, align 8
  %23 = call ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %22, ptr %2)
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %24 = load ptr, ptr %left, align 8
  %memberidx13 = getelementptr inbounds %Expression, ptr %24, i32 0, i32 3
  %25 = load ptr, ptr %memberidx13, align 8
  %26 = call i1 @is_object(ptr %25)
  %27 = xor i1 %7, true
  %28 = and i1 %26, %27
  %29 = icmp ne i64 %4, 18
  %30 = and i1 %28, %29
  br i1 %30, label %if.entry14, label %ifend16

if.entry14:                                       ; preds = %ifend12
  %31 = load ptr, ptr %left, align 8
  %32 = call ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %31, ptr %2, ptr null)
  br label %common.ret

ifend16:                                          ; preds = %ifend12
  %right = alloca ptr, align 8
  %33 = load ptr, ptr %left, align 8
  %memberidx17 = getelementptr inbounds %Expression, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 5
  %35 = load ptr, ptr %memberidx18, align 8
  %36 = call ptr @TypeChecker_check_expression(ptr %0, ptr %34, ptr %35)
  store ptr %36, ptr %right, align 8
  %37 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %37, label %common.ret, label %ifend21

ifend21:                                          ; preds = %ifend16
  %38 = load ptr, ptr %right, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %38, i32 0, i32 3
  %39 = load ptr, ptr %memberidx22, align 8
  %40 = call i1 @is_object(ptr %39)
  %41 = icmp eq i64 %4, 18
  %42 = and i1 %40, %41
  br i1 %42, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %ifend21
  %43 = load ptr, ptr %right, align 8
  %44 = load ptr, ptr %left, align 8
  %45 = call ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %43, ptr %2, ptr %44)
  br label %common.ret

ifend25:                                          ; preds = %ifend21
  %46 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %46, label %common.ret, label %ifend28

ifend28:                                          ; preds = %ifend25
  %is_const = alloca i1, align 1
  %47 = load ptr, ptr %left, align 8
  %memberidx29 = getelementptr inbounds %Expression, ptr %47, i32 0, i32 1
  %48 = load i1, ptr %memberidx29, align 1
  %49 = load ptr, ptr %right, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %49, i32 0, i32 1
  %50 = load i1, ptr %memberidx30, align 1
  %51 = and i1 %48, %50
  store i1 %51, ptr %is_const, align 1
  br i1 %7, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend28
  %52 = load ptr, ptr %left, align 8
  %53 = load ptr, ptr %right, align 8
  %54 = call ptr @TypeChecker_check_assignment(ptr %0, ptr %52, ptr %53, ptr %2)
  br label %common.ret

ifend33:                                          ; preds = %ifend28
  %55 = load ptr, ptr %left, align 8
  %memberidx34 = getelementptr inbounds %Expression, ptr %55, i32 0, i32 3
  %56 = load ptr, ptr %memberidx34, align 8
  %57 = load i64, ptr %56, align 4
  %58 = icmp eq i64 %57, 21
  %59 = load ptr, ptr %right, align 8
  %memberidx36 = getelementptr inbounds %Expression, ptr %59, i32 0, i32 3
  %60 = load ptr, ptr %memberidx36, align 8
  %61 = load i64, ptr %60, align 4
  %62 = icmp ne i64 %61, 21
  %63 = and i1 %58, %62
  br i1 %63, label %if.entry38, label %ifend40

if.entry38:                                       ; preds = %ifend33
  store ptr %60, ptr %memberidx34, align 8
  br label %ifend40

ifend40:                                          ; preds = %ifend33, %if.entry38
  %64 = load ptr, ptr %left, align 8
  %memberidx43 = getelementptr inbounds %Expression, ptr %64, i32 0, i32 3
  %65 = load ptr, ptr %memberidx43, align 8
  %66 = call i1 @is_numeric(ptr %65)
  %67 = load ptr, ptr %right, align 8
  %memberidx44 = getelementptr inbounds %Expression, ptr %67, i32 0, i32 3
  %68 = load ptr, ptr %memberidx44, align 8
  %69 = call i1 @is_numeric(ptr %68)
  %70 = and i1 %66, %69
  br i1 %70, label %if.entry45, label %else46

if.entry45:                                       ; preds = %ifend40
  %71 = icmp eq i64 %4, 6
  br i1 %71, label %if.entry48, label %ifend50

else46:                                           ; preds = %ifend40
  %72 = load ptr, ptr %left, align 8
  %memberidx79 = getelementptr inbounds %Expression, ptr %72, i32 0, i32 3
  %73 = load ptr, ptr %memberidx79, align 8
  %74 = call i1 @is_bool(ptr %73)
  %75 = load ptr, ptr %right, align 8
  %memberidx80 = getelementptr inbounds %Expression, ptr %75, i32 0, i32 3
  %76 = load ptr, ptr %memberidx80, align 8
  %77 = call i1 @is_bool(ptr %76)
  %78 = and i1 %74, %77
  br i1 %78, label %if.entry81, label %ifend47

ifend47:                                          ; preds = %if.entry81, %else46, %ifend62
  %79 = icmp sge i64 %4, 7
  %80 = icmp sle i64 %4, 12
  %81 = and i1 %79, %80
  br i1 %81, label %if.entry88, label %ifend90

if.entry48:                                       ; preds = %if.entry45
  %82 = load ptr, ptr %left, align 8
  %memberidx51 = getelementptr inbounds %Expression, ptr %82, i32 0, i32 3
  %83 = load ptr, ptr %memberidx51, align 8
  %84 = call i1 @is_int(ptr %83)
  br i1 %84, label %if.entry52, label %ifend54

ifend50:                                          ; preds = %if.entry45
  %85 = icmp sge i64 %4, 1
  %86 = icmp sle i64 %4, 10
  %87 = and i1 %85, %86
  br i1 %87, label %if.entry60, label %ifend62

if.entry52:                                       ; preds = %if.entry48
  %88 = load ptr, ptr %left, align 8
  %89 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %89, i64 11)
  %90 = call ptr @cast_exp_to_type(ptr %88, ptr %89)
  store ptr %90, ptr %left, align 8
  br label %ifend54

ifend54:                                          ; preds = %if.entry48, %if.entry52
  %91 = load ptr, ptr %right, align 8
  %memberidx55 = getelementptr inbounds %Expression, ptr %91, i32 0, i32 3
  %92 = load ptr, ptr %memberidx55, align 8
  %93 = call i1 @is_int(ptr %92)
  br i1 %93, label %if.entry56, label %ifend58

if.entry56:                                       ; preds = %ifend54
  %94 = load ptr, ptr %right, align 8
  %95 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %95, i64 11)
  %96 = call ptr @cast_exp_to_type(ptr %94, ptr %95)
  store ptr %96, ptr %right, align 8
  br label %ifend58

ifend58:                                          ; preds = %ifend54, %if.entry56
  %97 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %98 = load ptr, ptr %left, align 8
  %99 = load ptr, ptr %right, align 8
  %memberidx59 = getelementptr inbounds %Expression, ptr %98, i32 0, i32 3
  %100 = load ptr, ptr %memberidx59, align 8
  call void @BinaryExpression_constructor(ptr %97, ptr %98, i64 %4, ptr %99, ptr %100, i1 false)
  br label %common.ret

if.entry60:                                       ; preds = %ifend50
  call void @check_cast_lower_bits(ptr %left, ptr %right)
  %exp_type = alloca ptr, align 8
  %101 = load ptr, ptr %left, align 8
  %memberidx63 = getelementptr inbounds %Expression, ptr %101, i32 0, i32 3
  %102 = load ptr, ptr %memberidx63, align 8
  store ptr %102, ptr %exp_type, align 8
  %103 = icmp sge i64 %4, 7
  br i1 %103, label %if.entry64, label %ifend66

ifend62:                                          ; preds = %ifend50
  %104 = icmp sge i64 %4, 13
  %105 = icmp sle i64 %4, 17
  %106 = and i1 %104, %105
  br i1 %106, label %if.entry67, label %ifend47

if.entry64:                                       ; preds = %if.entry60
  %107 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %107)
  store ptr %107, ptr %exp_type, align 8
  br label %ifend66

ifend66:                                          ; preds = %if.entry60, %if.entry64
  %108 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %109 = load ptr, ptr %left, align 8
  %110 = load ptr, ptr %right, align 8
  %111 = load ptr, ptr %exp_type, align 8
  %112 = load i1, ptr %is_const, align 1
  call void @BinaryExpression_constructor(ptr %108, ptr %109, i64 %4, ptr %110, ptr %111, i1 %112)
  br label %common.ret

if.entry67:                                       ; preds = %ifend62
  %113 = load ptr, ptr %left, align 8
  %memberidx70 = getelementptr inbounds %Expression, ptr %113, i32 0, i32 3
  %114 = load ptr, ptr %memberidx70, align 8
  %115 = call i1 @is_float(ptr %114)
  br i1 %115, label %if.entry71, label %ifend73

if.entry71:                                       ; preds = %if.entry67
  %116 = load ptr, ptr %left, align 8
  %117 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %117, i64 7)
  %118 = call ptr @cast_exp_to_type(ptr %116, ptr %117)
  store ptr %118, ptr %left, align 8
  br label %ifend73

ifend73:                                          ; preds = %if.entry67, %if.entry71
  %119 = load ptr, ptr %right, align 8
  %memberidx74 = getelementptr inbounds %Expression, ptr %119, i32 0, i32 3
  %120 = load ptr, ptr %memberidx74, align 8
  %121 = call i1 @is_float(ptr %120)
  br i1 %121, label %if.entry75, label %ifend77

if.entry75:                                       ; preds = %ifend73
  %122 = load ptr, ptr %right, align 8
  %123 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %123, i64 7)
  %124 = call ptr @cast_exp_to_type(ptr %122, ptr %123)
  store ptr %124, ptr %right, align 8
  br label %ifend77

ifend77:                                          ; preds = %ifend73, %if.entry75
  %125 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %126 = load ptr, ptr %left, align 8
  %127 = load ptr, ptr %right, align 8
  %memberidx78 = getelementptr inbounds %Expression, ptr %126, i32 0, i32 3
  %128 = load ptr, ptr %memberidx78, align 8
  %129 = load i1, ptr %is_const, align 1
  call void @BinaryExpression_constructor(ptr %125, ptr %126, i64 %4, ptr %127, ptr %128, i1 %129)
  br label %common.ret

if.entry81:                                       ; preds = %else46
  %130 = icmp sge i64 %4, 15
  %131 = icmp sle i64 %4, 16
  %132 = and i1 %130, %131
  br i1 %132, label %if.entry84, label %ifend47

if.entry84:                                       ; preds = %if.entry81
  %133 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %134 = load ptr, ptr %left, align 8
  %135 = load ptr, ptr %right, align 8
  %memberidx87 = getelementptr inbounds %Expression, ptr %134, i32 0, i32 3
  %136 = load ptr, ptr %memberidx87, align 8
  %137 = load i1, ptr %is_const, align 1
  call void @BinaryExpression_constructor(ptr %133, ptr %134, i64 %4, ptr %135, ptr %136, i1 %137)
  br label %common.ret

if.entry88:                                       ; preds = %ifend47
  %boolean_type = alloca ptr, align 8
  %138 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %138)
  store ptr %138, ptr %boolean_type, align 8
  %139 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %140 = load ptr, ptr %left, align 8
  %141 = load ptr, ptr %right, align 8
  %142 = load ptr, ptr %boolean_type, align 8
  %143 = load i1, ptr %is_const, align 1
  call void @BinaryExpression_constructor(ptr %139, ptr %140, i64 %4, ptr %141, ptr %142, i1 %143)
  br label %common.ret

ifend90:                                          ; preds = %ifend47
  %144 = icmp eq i64 %4, 1
  %145 = icmp eq i64 %4, 2
  %146 = or i1 %144, %145
  %147 = load ptr, ptr %left, align 8
  %memberidx91 = getelementptr inbounds %Expression, ptr %147, i32 0, i32 3
  %148 = load ptr, ptr %memberidx91, align 8
  %149 = call i1 @is_pointer(ptr %148)
  %150 = and i1 %146, %149
  %151 = load ptr, ptr %right, align 8
  %memberidx92 = getelementptr inbounds %Expression, ptr %151, i32 0, i32 3
  %152 = load ptr, ptr %memberidx92, align 8
  %153 = load i64, ptr %152, align 4
  %154 = icmp eq i64 %153, 7
  %155 = and i1 %150, %154
  br i1 %155, label %if.entry94, label %ifend96

if.entry94:                                       ; preds = %ifend90
  %156 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %157 = load ptr, ptr %left, align 8
  %158 = load ptr, ptr %right, align 8
  %memberidx97 = getelementptr inbounds %Expression, ptr %157, i32 0, i32 3
  %159 = load ptr, ptr %memberidx97, align 8
  call void @BinaryExpression_constructor(ptr %156, ptr %157, i64 %4, ptr %158, ptr %159, i1 false)
  br label %common.ret

ifend96:                                          ; preds = %ifend90
  %160 = icmp eq i64 %4, 31
  %161 = load ptr, ptr %left, align 8
  %memberidx98 = getelementptr inbounds %Expression, ptr %161, i32 0, i32 3
  %162 = load ptr, ptr %memberidx98, align 8
  %163 = load i64, ptr %162, align 4
  %164 = icmp eq i64 %163, 7
  %165 = and i1 %160, %164
  %166 = and i1 %165, %154
  br i1 %166, label %if.entry102, label %ifend104

if.entry102:                                      ; preds = %ifend96
  %range_type = alloca ptr, align 8
  %167 = call ptr @string_from_bytes(ptr @291, i64 5)
  %168 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %167)
  store ptr %168, ptr %range_type, align 8
  %169 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NewExpression, ptr null, i32 1) to i32))
  %170 = load ptr, ptr %range_type, align 8
  %171 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %171, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx105 = getelementptr inbounds %Array_Expression_, ptr %171, i32 0, i32 1
  %172 = load ptr, ptr %memberidx105, align 8
  %173 = load ptr, ptr %left, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr inbounds ptr, ptr %172, i64 1
  %175 = load ptr, ptr %right, align 8
  store ptr %175, ptr %174, align 8
  %memberidx106 = getelementptr inbounds %Array_Expression_, ptr %171, i32 0, i32 2
  store i64 2, ptr %memberidx106, align 4
  call void @NewExpression_constructor(ptr %169, ptr %170, ptr %170, ptr %171, i1 true)
  br label %common.ret

ifend104:                                         ; preds = %ifend96
  %176 = call ptr @dump_bin_op(i64 %4)
  %177 = load ptr, ptr %176, align 8
  %memberidx107 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %177, i32 0, i32 11
  %178 = load ptr, ptr %memberidx107, align 8
  %179 = call ptr %178(ptr %176)
  %180 = load ptr, ptr %left, align 8
  %memberidx108 = getelementptr inbounds %Expression, ptr %180, i32 0, i32 3
  %181 = load ptr, ptr %memberidx108, align 8
  %182 = call ptr @TypeChecker_dump_type(ptr %0, ptr %181)
  %183 = load ptr, ptr %182, align 8
  %memberidx109 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %183, i32 0, i32 11
  %184 = load ptr, ptr %memberidx109, align 8
  %185 = call ptr %184(ptr %182)
  %186 = load ptr, ptr %right, align 8
  %memberidx110 = getelementptr inbounds %Expression, ptr %186, i32 0, i32 3
  %187 = load ptr, ptr %memberidx110, align 8
  %188 = call ptr @TypeChecker_dump_type(ptr %0, ptr %187)
  %189 = load ptr, ptr %188, align 8
  %memberidx111 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %189, i32 0, i32 11
  %190 = load ptr, ptr %memberidx111, align 8
  %191 = call ptr %190(ptr %188)
  %192 = alloca ptr, align 8
  %193 = call i64 (ptr, ptr, ...) @asprintf(ptr %192, ptr @292, ptr %179, ptr %185, ptr %191)
  %194 = load ptr, ptr %192, align 8
  %195 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %195, ptr %194, i64 %193)
  %196 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %195, ptr %196)
  br label %common.ret
}

define void @CallExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  call void @Expression_constructor(ptr %0, i64 14)
  %memberidx = getelementptr inbounds %CallExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CallExpression, ptr %0, i32 0, i32 5
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %3, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_check_call_expr(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @Type_unknown()
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @TypeChecker_check_expression(ptr %0, ptr %4, ptr %5)
  %7 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %if.entry24, %else25, %ifend11, %3, %ifend23, %if.entry9, %if.entry4
  %common.ret.op = phi ptr [ %14, %if.entry4 ], [ null, %if.entry9 ], [ %36, %ifend23 ], [ null, %3 ], [ null, %ifend11 ], [ null, %else25 ], [ null, %if.entry24 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = icmp eq i64 %8, 16
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, 21
  %13 = and i1 %9, %12
  br i1 %13, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %14 = call ptr @TypeChecker_check_intrinsic_call(ptr %0, ptr %6, ptr %2)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %15 = icmp ne i64 %11, 17
  br i1 %15, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend6
  %16 = call ptr @TypeChecker_dump_type(ptr %0, ptr %10)
  %17 = load ptr, ptr %16, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i32 0, i32 11
  %18 = load ptr, ptr %memberidx13, align 8
  %19 = call ptr %18(ptr %16)
  %20 = alloca ptr, align 8
  %21 = call i64 (ptr, ptr, ...) @asprintf(ptr %20, ptr @325, ptr %19)
  %22 = load ptr, ptr %20, align 8
  %23 = call ptr @string_from_bytes(ptr %22, i64 %21)
  %24 = load ptr, ptr %memberidx, align 8
  %25 = load ptr, ptr %24, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %23, ptr %25)
  br label %common.ret

ifend11:                                          ; preds = %ifend6
  %func_ty = alloca ptr, align 8
  store ptr %10, ptr %func_ty, align 8
  %func_args = alloca ptr, align 8
  %26 = call ptr @TypeChecker_get_func_args_from_expression(ptr %0, ptr %6)
  store ptr %26, ptr %func_args, align 8
  %args = alloca ptr, align 8
  %27 = load ptr, ptr %func_ty, align 8
  %memberidx17 = getelementptr inbounds %CallExpressionNode, ptr %2, i32 0, i32 4
  %28 = load ptr, ptr %memberidx17, align 8
  %29 = call ptr @TypeChecker_fill_in_call_args(ptr %0, ptr %27, ptr %26, ptr %28)
  store ptr %29, ptr %args, align 8
  %30 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %30, label %common.ret, label %ifend20

ifend20:                                          ; preds = %ifend11
  %index = alloca i64, align 8
  %31 = load ptr, ptr %func_ty, align 8
  %32 = load ptr, ptr %args, align 8
  %33 = call i64 @TypeChecker_check_function_call_args_match(ptr %0, ptr %31, ptr %32)
  store i64 %33, ptr %index, align 4
  %34 = icmp sge i64 %33, -1
  br i1 %34, label %if.entry21, label %ifend23

if.entry21:                                       ; preds = %ifend20
  %35 = icmp eq i64 %33, -1
  br i1 %35, label %if.entry24, label %else25

ifend23:                                          ; preds = %ifend20
  %36 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %37 = load ptr, ptr %args, align 8
  %38 = load ptr, ptr %func_ty, align 8
  %memberidx40 = getelementptr inbounds %FunctionType, ptr %38, i32 0, i32 2
  %39 = load ptr, ptr %memberidx40, align 8
  call void @CallExpression_constructor(ptr %36, ptr %6, ptr %37, ptr %39)
  br label %common.ret

if.entry24:                                       ; preds = %if.entry21
  %40 = load ptr, ptr %func_ty, align 8
  %memberidx27 = getelementptr inbounds %FunctionType, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Array_Type_, ptr %41, i32 0, i32 2
  %42 = load i64, ptr %memberidx28, align 4
  %43 = load ptr, ptr %args, align 8
  %memberidx29 = getelementptr inbounds %Array_Expression_, ptr %43, i32 0, i32 2
  %44 = load i64, ptr %memberidx29, align 4
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr %45, ptr @326, i64 %42, i64 %44)
  %47 = load ptr, ptr %45, align 8
  %48 = call ptr @string_from_bytes(ptr %47, i64 %46)
  %49 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %48, ptr %49)
  br label %common.ret

else25:                                           ; preds = %if.entry21
  %50 = load ptr, ptr %func_ty, align 8
  %memberidx31 = getelementptr inbounds %FunctionType, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx31, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i32 0, i32 5
  %53 = load ptr, ptr %memberidx32, align 8
  %54 = call ptr %53(ptr %51, i64 %33)
  %55 = call ptr @TypeChecker_dump_type(ptr %0, ptr %54)
  %56 = load ptr, ptr %55, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i32 0, i32 11
  %57 = load ptr, ptr %memberidx33, align 8
  %58 = call ptr %57(ptr %55)
  %59 = load ptr, ptr %args, align 8
  %60 = load ptr, ptr %59, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %60, i32 0, i32 5
  %61 = load ptr, ptr %memberidx34, align 8
  %62 = load i64, ptr %index, align 4
  %63 = call ptr %61(ptr %59, i64 %62)
  %memberidx35 = getelementptr inbounds %Expression, ptr %63, i32 0, i32 3
  %64 = load ptr, ptr %memberidx35, align 8
  %65 = call ptr @TypeChecker_dump_type(ptr %0, ptr %64)
  %66 = load ptr, ptr %65, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i32 0, i32 11
  %67 = load ptr, ptr %memberidx36, align 8
  %68 = call ptr %67(ptr %65)
  %69 = alloca ptr, align 8
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr %69, ptr @327, ptr %58, ptr %68)
  %71 = load ptr, ptr %69, align 8
  %72 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %72, ptr %71, i64 %70)
  %73 = load ptr, ptr %memberidx17, align 8
  %74 = load ptr, ptr %73, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %74, i32 0, i32 5
  %75 = load ptr, ptr %memberidx38, align 8
  %76 = load i64, ptr %index, align 4
  %77 = call ptr %75(ptr %73, i64 %76)
  %78 = load ptr, ptr %77, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %72, ptr %78)
  br label %common.ret
}

define ptr @TypeChecker_get_current_class(ptr %0) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = call ptr @get_class(ptr %2, ptr %3)
  ret ptr %4
}

define ptr @TypeChecker_check_can_break(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 8
  %3 = load i1, ptr %memberidx, align 1
  %4 = xor i1 %3, true
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ null, %if.entry ], [ %7, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %5 = call ptr @string_from_bytes(ptr @338, i64 29)
  %6 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %5, ptr %6)
  br label %common.ret

ifend:                                            ; preds = %2
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Statement, ptr null, i32 1) to i32))
  call void @Statement_constructor(ptr %7, i64 6)
  br label %common.ret
}

define ptr @TypeChecker_get_class_from_var_id(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %VarId, ptr %1, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = call ptr @TypeChecker_get_module(ptr %0, i64 %3)
  %memberidx1 = getelementptr inbounds %Module, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 2
  %8 = load i64, ptr %memberidx3, align 4
  %9 = call ptr %7(ptr %5, i64 %8)
  ret ptr %9
}

define ptr @TypeChecker_get_enum_from_var_id(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %VarId, ptr %1, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = call ptr @TypeChecker_get_module(ptr %0, i64 %3)
  %memberidx1 = getelementptr inbounds %Module, ptr %4, i32 0, i32 6
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 2
  %8 = load i64, ptr %memberidx3, align 4
  %9 = call ptr %7(ptr %5, i64 %8)
  ret ptr %9
}

define ptr @TypeChecker_check_type(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %TypeNode, ptr %1, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.end68, %ifend93, %if.entry91, %if.entry86, %ifend55, %for.end, %ifend36, %if.entry34, %if.entry28, %if.entry22, %if.entry12, %if.entry8, %if.entry3, %if.entry
  %common.ret.op = phi ptr [ %5, %if.entry ], [ %9, %if.entry3 ], [ %12, %if.entry8 ], [ %14, %if.entry12 ], [ null, %if.entry22 ], [ null, %if.entry28 ], [ null, %if.entry34 ], [ %47, %ifend36 ], [ %68, %for.end ], [ %78, %ifend55 ], [ %110, %if.entry86 ], [ null, %if.entry91 ], [ %81, %ifend93 ], [ null, %for.end68 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %5, i64 0)
  br label %common.ret

ifend:                                            ; preds = %2
  %6 = icmp sge i64 %3, 1
  %7 = icmp sle i64 %3, 11
  %8 = and i1 %6, %7
  br i1 %8, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Type_constructor(ptr %9, i64 %10)
  br label %common.ret

ifend5:                                           ; preds = %ifend
  %11 = icmp eq i64 %3, 12
  br i1 %11, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend5
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %12, i64 12)
  br label %common.ret

ifend10:                                          ; preds = %ifend5
  %13 = icmp eq i64 %3, 15
  br i1 %13, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %ifend10
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PointerType, ptr null, i32 1) to i32))
  %memberidx15 = getelementptr inbounds %PointerTypeNode, ptr %1, i32 0, i32 2
  %15 = load ptr, ptr %memberidx15, align 8
  %16 = call ptr @TypeChecker_check_type(ptr %0, ptr %15)
  call void @PointerType_constructor(ptr %14, ptr %16)
  br label %common.ret

ifend14:                                          ; preds = %ifend10
  %17 = icmp eq i64 %3, 16
  br i1 %17, label %if.entry17, label %ifend19

if.entry17:                                       ; preds = %ifend14
  %array_node = alloca ptr, align 8
  store ptr %1, ptr %array_node, align 8
  %len_expr = alloca ptr, align 8
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %18, i64 7)
  %19 = load ptr, ptr %array_node, align 8
  %memberidx20 = getelementptr inbounds %ArrayTypeNode, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %memberidx20, align 8
  %21 = call ptr @TypeChecker_check_expression(ptr %0, ptr %18, ptr %20)
  store ptr %21, ptr %len_expr, align 8
  %memberidx21 = getelementptr inbounds %Expression, ptr %21, i32 0, i32 3
  %22 = load ptr, ptr %memberidx21, align 8
  %23 = call i1 @is_int(ptr %22)
  %24 = xor i1 %23, true
  br i1 %24, label %if.entry22, label %ifend24

ifend19:                                          ; preds = %ifend14
  %25 = icmp eq i64 %3, 17
  br i1 %25, label %if.entry41, label %ifend43

if.entry22:                                       ; preds = %if.entry17
  %26 = call ptr @string_from_bytes(ptr @261, i64 16)
  %27 = load ptr, ptr %array_node, align 8
  %memberidx25 = getelementptr inbounds %ArrayTypeNode, ptr %27, i32 0, i32 3
  %28 = load ptr, ptr %memberidx25, align 8
  %29 = load ptr, ptr %28, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %26, ptr %29)
  br label %common.ret

ifend24:                                          ; preds = %if.entry17
  %30 = load ptr, ptr %len_expr, align 8
  %memberidx27 = getelementptr inbounds %Expression, ptr %30, i32 0, i32 1
  %31 = load i1, ptr %memberidx27, align 1
  %32 = xor i1 %31, true
  br i1 %32, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend24
  %33 = call ptr @string_from_bytes(ptr @262, i64 30)
  %34 = load ptr, ptr %array_node, align 8
  %memberidx31 = getelementptr inbounds %ArrayTypeNode, ptr %34, i32 0, i32 3
  %35 = load ptr, ptr %memberidx31, align 8
  %36 = load ptr, ptr %35, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %33, ptr %36)
  br label %common.ret

ifend30:                                          ; preds = %ifend24
  %length = alloca i64, align 8
  %memberidx33 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %37 = load ptr, ptr %memberidx33, align 8
  %38 = call i64 @evaluate_const_int_expression(ptr %37, ptr %30)
  store i64 %38, ptr %length, align 4
  %39 = icmp slt i64 %38, 0
  br i1 %39, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend30
  %40 = call ptr @string_from_bytes(ptr @263, i64 31)
  %41 = load ptr, ptr %array_node, align 8
  %memberidx37 = getelementptr inbounds %ArrayTypeNode, ptr %41, i32 0, i32 3
  %42 = load ptr, ptr %memberidx37, align 8
  %43 = load ptr, ptr %42, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %40, ptr %43)
  br label %common.ret

ifend36:                                          ; preds = %ifend30
  %element_type = alloca ptr, align 8
  %44 = load ptr, ptr %array_node, align 8
  %memberidx39 = getelementptr inbounds %ArrayTypeNode, ptr %44, i32 0, i32 2
  %45 = load ptr, ptr %memberidx39, align 8
  %46 = call ptr @TypeChecker_check_type(ptr %0, ptr %45)
  store ptr %46, ptr %element_type, align 8
  %47 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayType, ptr null, i32 1) to i32))
  %48 = load ptr, ptr %element_type, align 8
  %49 = load i64, ptr %length, align 4
  call void @ArrayType_constructor(ptr %47, ptr %48, i64 %49)
  br label %common.ret

if.entry41:                                       ; preds = %ifend19
  %fnc_node = alloca ptr, align 8
  store ptr %1, ptr %fnc_node, align 8
  %arg_types = alloca ptr, align 8
  %50 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %50, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx44 = getelementptr inbounds %Array_Type_, ptr %50, i32 0, i32 1
  %memberidx45 = getelementptr inbounds %Array_Type_, ptr %50, i32 0, i32 2
  store i64 0, ptr %memberidx45, align 4
  store ptr %50, ptr %arg_types, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

ifend43:                                          ; preds = %ifend19
  %51 = icmp eq i64 %3, 18
  br i1 %51, label %if.entry53, label %ifend55

for.cond:                                         ; preds = %for.body, %if.entry41
  %52 = load i64, ptr %i, align 4
  %53 = load ptr, ptr %fnc_node, align 8
  %memberidx46 = getelementptr inbounds %FunctionTypeNode, ptr %53, i32 0, i32 2
  %54 = load ptr, ptr %memberidx46, align 8
  %memberidx47 = getelementptr inbounds %Array_TypeNode_, ptr %54, i32 0, i32 2
  %55 = load i64, ptr %memberidx47, align 4
  %56 = icmp slt i64 %52, %55
  br i1 %56, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %57 = load ptr, ptr %arg_types, align 8
  %58 = load ptr, ptr %57, align 8
  %memberidx48 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i32 0, i32 2
  %59 = load ptr, ptr %memberidx48, align 8
  %60 = load ptr, ptr %54, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %60, i32 0, i32 5
  %61 = load ptr, ptr %memberidx50, align 8
  %62 = call ptr %61(ptr %54, i64 %52)
  %63 = call ptr @TypeChecker_check_type(ptr %0, ptr %62)
  call void %59(ptr %57, ptr %63)
  %64 = load i64, ptr %i, align 4
  %65 = add i64 %64, 1
  store i64 %65, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %return_type = alloca ptr, align 8
  %memberidx51 = getelementptr inbounds %FunctionTypeNode, ptr %53, i32 0, i32 3
  %66 = load ptr, ptr %memberidx51, align 8
  %67 = call ptr @TypeChecker_check_type(ptr %0, ptr %66)
  store ptr %67, ptr %return_type, align 8
  %68 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionType, ptr null, i32 1) to i32))
  %69 = load ptr, ptr %arg_types, align 8
  %70 = load ptr, ptr %return_type, align 8
  call void @FunctionType_constructor(ptr %68, ptr %69, ptr %70)
  br label %common.ret

if.entry53:                                       ; preds = %ifend43
  %record_type = alloca ptr, align 8
  store ptr %1, ptr %record_type, align 8
  %types = alloca ptr, align 8
  %71 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %71, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx56 = getelementptr inbounds %Array_Type_, ptr %71, i32 0, i32 1
  %memberidx57 = getelementptr inbounds %Array_Type_, ptr %71, i32 0, i32 2
  store i64 0, ptr %memberidx57, align 4
  store ptr %71, ptr %types, align 8
  %identifer_tok = alloca ptr, align 8
  %72 = load ptr, ptr %record_type, align 8
  %memberidx58 = getelementptr inbounds %RecordTypeNode, ptr %72, i32 0, i32 2
  %73 = load ptr, ptr %memberidx58, align 8
  store ptr %73, ptr %identifer_tok, align 8
  %74 = load ptr, ptr %record_type, align 8
  %memberidx59 = getelementptr inbounds %RecordTypeNode, ptr %74, i32 0, i32 3
  %75 = load ptr, ptr %memberidx59, align 8
  %memberidx60 = getelementptr inbounds %Array_TypeNode_, ptr %75, i32 0, i32 2
  %76 = load i64, ptr %memberidx60, align 4
  %77 = icmp sgt i64 %76, 0
  br i1 %77, label %for.entry64, label %ifend63

ifend55:                                          ; preds = %ifend43
  %78 = call ptr @Type_unknown()
  br label %common.ret

ifend63:                                          ; preds = %ifend80, %if.entry53
  %found_type = alloca ptr, align 8
  %79 = load ptr, ptr %identifer_tok, align 8
  %memberidx89 = getelementptr inbounds %IdentifierToken, ptr %79, i32 0, i32 2
  %80 = load ptr, ptr %memberidx89, align 8
  %81 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %80)
  store ptr %81, ptr %found_type, align 8
  %82 = load i64, ptr %81, align 4
  %83 = icmp eq i64 %82, 21
  br i1 %83, label %if.entry91, label %ifend93

for.entry64:                                      ; preds = %if.entry53
  %j = alloca i64, align 8
  store i64 0, ptr %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.body66, %for.entry64
  %84 = load i64, ptr %j, align 4
  %85 = load ptr, ptr %record_type, align 8
  %memberidx69 = getelementptr inbounds %RecordTypeNode, ptr %85, i32 0, i32 3
  %86 = load ptr, ptr %memberidx69, align 8
  %memberidx70 = getelementptr inbounds %Array_TypeNode_, ptr %86, i32 0, i32 2
  %87 = load i64, ptr %memberidx70, align 4
  %88 = icmp slt i64 %84, %87
  br i1 %88, label %for.body66, label %for.end68

for.body66:                                       ; preds = %for.cond65
  %89 = load ptr, ptr %types, align 8
  %90 = load ptr, ptr %89, align 8
  %memberidx71 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %90, i32 0, i32 2
  %91 = load ptr, ptr %memberidx71, align 8
  %92 = load ptr, ptr %86, align 8
  %memberidx73 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i32 0, i32 5
  %93 = load ptr, ptr %memberidx73, align 8
  %94 = call ptr %93(ptr %86, i64 %84)
  %95 = call ptr @TypeChecker_check_type(ptr %0, ptr %94)
  call void %91(ptr %89, ptr %95)
  %96 = load i64, ptr %j, align 4
  %97 = add i64 %96, 1
  store i64 %97, ptr %j, align 4
  br label %for.cond65

for.end68:                                        ; preds = %for.cond65
  %98 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %98, label %common.ret, label %ifend76

ifend76:                                          ; preds = %for.end68
  %generic_type = alloca ptr, align 8
  %99 = load ptr, ptr %identifer_tok, align 8
  %memberidx77 = getelementptr inbounds %IdentifierToken, ptr %99, i32 0, i32 2
  %100 = load ptr, ptr %memberidx77, align 8
  %101 = load ptr, ptr %types, align 8
  %102 = call ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr %100, ptr %101)
  store ptr %102, ptr %generic_type, align 8
  %103 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %103, label %if.entry78, label %ifend80

if.entry78:                                       ; preds = %ifend76
  %memberidx81 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 7
  %104 = load ptr, ptr %memberidx81, align 8
  %memberidx82 = getelementptr inbounds %Compiler, ptr %104, i32 0, i32 6
  %105 = load ptr, ptr %memberidx82, align 8
  %106 = load ptr, ptr %105, align 8
  %memberidx83 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %106, i32 0, i32 5
  %107 = load ptr, ptr %memberidx83, align 8
  %108 = call ptr %107(ptr %105, i64 0)
  %memberidx84 = getelementptr inbounds %FloError, ptr %108, i32 0, i32 2
  %109 = load ptr, ptr %1, align 8
  store ptr %109, ptr %memberidx84, align 8
  br label %ifend80

ifend80:                                          ; preds = %ifend76, %if.entry78
  %110 = load ptr, ptr %generic_type, align 8
  %111 = icmp ne ptr %110, null
  br i1 %111, label %if.entry86, label %ifend63

if.entry86:                                       ; preds = %ifend80
  br label %common.ret

if.entry91:                                       ; preds = %ifend63
  %112 = load ptr, ptr %identifer_tok, align 8
  %memberidx94 = getelementptr inbounds %IdentifierToken, ptr %112, i32 0, i32 2
  %113 = load ptr, ptr %memberidx94, align 8
  %114 = load ptr, ptr %113, align 8
  %memberidx95 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %114, i32 0, i32 11
  %115 = load ptr, ptr %memberidx95, align 8
  %116 = call ptr %115(ptr %113)
  %117 = alloca ptr, align 8
  %118 = call i64 (ptr, ptr, ...) @asprintf(ptr %117, ptr @264, ptr %116)
  %119 = load ptr, ptr %117, align 8
  %120 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %120, ptr %119, i64 %118)
  %121 = load ptr, ptr %identifer_tok, align 8
  %memberidx96 = getelementptr inbounds %Token, ptr %121, i32 0, i32 1
  %122 = load ptr, ptr %memberidx96, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %120, ptr %122)
  br label %common.ret

ifend93:                                          ; preds = %ifend63
  br label %common.ret
}

define void @ForStatement_constructor(ptr %0) {
  call void @Statement_constructor(ptr %0, i64 3)
  %memberidx = getelementptr inbounds %ForStatement, ptr %0, i32 0, i32 1
  store ptr null, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ForStatement, ptr %0, i32 0, i32 2
  store ptr null, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ForStatement, ptr %0, i32 0, i32 3
  store ptr null, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_check_for_statement(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ForStatement, ptr null, i32 1) to i32))
  call void @ForStatement_constructor(ptr %3)
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 8
  %4 = load i1, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %ForStatementNode, ptr %1, i32 0, i32 6
  %5 = load i64, ptr %memberidx1, align 4
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %ForStatementNode, ptr %1, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = icmp ne ptr %7, null
  br i1 %8, label %if.entry3, label %ifend5

ifend:                                            ; preds = %if.entry15, %ifend11, %2
  store i1 true, ptr %memberidx, align 1
  %memberidx21 = getelementptr inbounds %ForStatement, ptr %3, i32 0, i32 4
  %memberidx22 = getelementptr inbounds %ForStatementNode, ptr %1, i32 0, i32 8
  %9 = load ptr, ptr %memberidx22, align 8
  %10 = call ptr @TypeChecker_check_block(ptr %0, ptr %9)
  store ptr %10, ptr %memberidx21, align 8
  store i1 %4, ptr %memberidx, align 1
  ret ptr %3

if.entry3:                                        ; preds = %if.entry
  %memberidx6 = getelementptr inbounds %ForStatement, ptr %3, i32 0, i32 1
  %11 = call ptr @TypeChecker_check_statement(ptr %0, ptr %7)
  store ptr %11, ptr %memberidx6, align 8
  br label %ifend5

ifend5:                                           ; preds = %if.entry, %if.entry3
  %memberidx8 = getelementptr inbounds %ForStatementNode, ptr %1, i32 0, i32 3
  %12 = load ptr, ptr %memberidx8, align 8
  %13 = icmp ne ptr %12, null
  br i1 %13, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend5
  %memberidx12 = getelementptr inbounds %ForStatement, ptr %3, i32 0, i32 2
  %14 = call ptr @TypeChecker_check_condition(ptr %0, ptr %12)
  store ptr %14, ptr %memberidx12, align 8
  br label %ifend11

ifend11:                                          ; preds = %ifend5, %if.entry9
  %memberidx14 = getelementptr inbounds %ForStatementNode, ptr %1, i32 0, i32 4
  %15 = load ptr, ptr %memberidx14, align 8
  %16 = icmp ne ptr %15, null
  br i1 %16, label %if.entry15, label %ifend

if.entry15:                                       ; preds = %ifend11
  %memberidx18 = getelementptr inbounds %ForStatement, ptr %3, i32 0, i32 3
  %17 = call ptr @Type_unknown()
  %18 = load ptr, ptr %memberidx14, align 8
  %19 = call ptr @TypeChecker_check_expression(ptr %0, ptr %17, ptr %18)
  store ptr %19, ptr %memberidx18, align 8
  br label %ifend
}

define ptr @TypeChecker_check_statement(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %StatementNode, ptr %1, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend28, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %5, %if.entry ], [ %7, %if.entry2 ], [ %9, %if.entry6 ], [ %11, %if.entry10 ], [ %13, %if.entry14 ], [ %15, %if.entry18 ], [ %17, %if.entry22 ], [ %19, %if.entry26 ], [ %22, %if.entry30 ], [ null, %ifend28 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %5 = call ptr @TypeChecker_check_if_stamement(ptr %0, ptr %1)
  br label %common.ret

ifend:                                            ; preds = %2
  %6 = icmp eq i64 %3, 1
  br i1 %6, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %7 = call ptr @TypeChecker_check_var_declaration(ptr %0, ptr %1)
  br label %common.ret

ifend4:                                           ; preds = %ifend
  %8 = icmp eq i64 %3, 2
  br i1 %8, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %9 = call ptr @TypeChecker_check_const_declaration(ptr %0, ptr %1)
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  %10 = icmp eq i64 %3, 3
  br i1 %10, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %11 = call ptr @TypeChecker_check_for_statement(ptr %0, ptr %1)
  br label %common.ret

ifend12:                                          ; preds = %ifend8
  %12 = icmp eq i64 %3, 4
  br i1 %12, label %if.entry14, label %ifend16

if.entry14:                                       ; preds = %ifend12
  %13 = call ptr @TypeChecker_check_while_statment(ptr %0, ptr %1)
  br label %common.ret

ifend16:                                          ; preds = %ifend12
  %14 = icmp eq i64 %3, 5
  br i1 %14, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend16
  %15 = call ptr @TypeChecker_check_can_continue(ptr %0, ptr %1)
  br label %common.ret

ifend20:                                          ; preds = %ifend16
  %16 = icmp eq i64 %3, 6
  br i1 %16, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend20
  %17 = call ptr @TypeChecker_check_can_break(ptr %0, ptr %1)
  br label %common.ret

ifend24:                                          ; preds = %ifend20
  %18 = icmp eq i64 %3, 7
  br i1 %18, label %if.entry26, label %ifend28

if.entry26:                                       ; preds = %ifend24
  %19 = call ptr @TypeChecker_check_can_return(ptr %0, ptr %1)
  br label %common.ret

ifend28:                                          ; preds = %ifend24
  %20 = icmp eq i64 %3, 8
  br i1 %20, label %if.entry30, label %common.ret

if.entry30:                                       ; preds = %ifend28
  %21 = call ptr @Type_unknown()
  %22 = call ptr @TypeChecker_check_expression(ptr %0, ptr %21, ptr %1)
  br label %common.ret
}

define i1 @TypeChecker_types_are_eq(ptr %0, ptr %1, ptr %2) {
  %4 = load i64, ptr %1, align 4
  %5 = load i64, ptr %2, align 4
  %6 = icmp ne i64 %4, %5
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body87, %for.cond86, %ifend77, %if.entry69, %ifend65, %ifend55, %if.entry42, %for.body, %ifend12, %if.entry3, %3, %if.entry63, %if.entry58, %if.entry36, %if.entry28
  %common.ret.op = phi i1 [ %45, %if.entry28 ], [ %50, %if.entry36 ], [ %74, %if.entry58 ], [ %80, %if.entry63 ], [ false, %3 ], [ false, %if.entry3 ], [ false, %ifend12 ], [ false, %for.body ], [ true, %if.entry42 ], [ false, %ifend55 ], [ true, %ifend65 ], [ false, %if.entry69 ], [ false, %ifend77 ], [ true, %for.cond86 ], [ false, %for.body87 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %3
  %7 = icmp eq i64 %4, 17
  br i1 %7, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %t1_fnc_type = alloca ptr, align 8
  store ptr %1, ptr %t1_fnc_type, align 8
  %t2_fnc_type = alloca ptr, align 8
  store ptr %2, ptr %t2_fnc_type, align 8
  %8 = load ptr, ptr %t1_fnc_type, align 8
  %memberidx6 = getelementptr inbounds %FunctionType, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_Type_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx7, align 4
  %memberidx8 = getelementptr inbounds %FunctionType, ptr %2, i32 0, i32 1
  %11 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Type_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx9, align 4
  %13 = icmp ne i64 %10, %12
  br i1 %13, label %common.ret, label %ifend12

ifend5:                                           ; preds = %for.cond, %ifend
  %14 = load i64, ptr %1, align 4
  %15 = icmp eq i64 %14, 16
  br i1 %15, label %if.entry28, label %ifend30

ifend12:                                          ; preds = %if.entry3
  %memberidx13 = getelementptr inbounds %FunctionType, ptr %2, i32 0, i32 2
  %16 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %FunctionType, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %memberidx14, align 8
  %18 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %16, ptr %17)
  %19 = xor i1 %18, true
  br i1 %19, label %common.ret, label %for.entry

for.entry:                                        ; preds = %ifend12
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend26, %for.entry
  %20 = load i64, ptr %i, align 4
  %21 = load ptr, ptr %t1_fnc_type, align 8
  %memberidx18 = getelementptr inbounds %FunctionType, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Array_Type_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx19, align 4
  %24 = icmp slt i64 %20, %23
  br i1 %24, label %for.body, label %ifend5

for.body:                                         ; preds = %for.cond
  %25 = load ptr, ptr %22, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %25, i32 0, i32 5
  %26 = load ptr, ptr %memberidx21, align 8
  %27 = call ptr %26(ptr %22, i64 %20)
  %28 = load ptr, ptr %t2_fnc_type, align 8
  %memberidx22 = getelementptr inbounds %FunctionType, ptr %28, i32 0, i32 1
  %29 = load ptr, ptr %memberidx22, align 8
  %30 = load ptr, ptr %29, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i32 0, i32 5
  %31 = load ptr, ptr %memberidx23, align 8
  %32 = load i64, ptr %i, align 4
  %33 = call ptr %31(ptr %29, i64 %32)
  %34 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %27, ptr %33)
  %35 = xor i1 %34, true
  br i1 %35, label %common.ret, label %ifend26

ifend26:                                          ; preds = %for.body
  %36 = load i64, ptr %i, align 4
  %37 = add i64 %36, 1
  store i64 %37, ptr %i, align 4
  br label %for.cond

if.entry28:                                       ; preds = %ifend5
  %t1_arr_type = alloca ptr, align 8
  store ptr %1, ptr %t1_arr_type, align 8
  %t2_arr_type = alloca ptr, align 8
  store ptr %2, ptr %t2_arr_type, align 8
  %38 = load ptr, ptr %t1_arr_type, align 8
  %memberidx31 = getelementptr inbounds %ArrayType, ptr %38, i32 0, i32 2
  %39 = load i64, ptr %memberidx31, align 4
  %memberidx32 = getelementptr inbounds %ArrayType, ptr %2, i32 0, i32 2
  %40 = load i64, ptr %memberidx32, align 4
  %41 = icmp eq i64 %39, %40
  %memberidx33 = getelementptr inbounds %ArrayType, ptr %38, i32 0, i32 1
  %42 = load ptr, ptr %memberidx33, align 8
  %memberidx34 = getelementptr inbounds %ArrayType, ptr %2, i32 0, i32 1
  %43 = load ptr, ptr %memberidx34, align 8
  %44 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %42, ptr %43)
  %45 = and i1 %41, %44
  br label %common.ret

ifend30:                                          ; preds = %ifend5
  %46 = icmp eq i64 %14, 15
  br i1 %46, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %ifend30
  %t1_ptr_type = alloca ptr, align 8
  store ptr %1, ptr %t1_ptr_type, align 8
  %t2_ptr_type = alloca ptr, align 8
  store ptr %2, ptr %t2_ptr_type, align 8
  %47 = load ptr, ptr %t1_ptr_type, align 8
  %memberidx39 = getelementptr inbounds %PointerType, ptr %47, i32 0, i32 1
  %48 = load ptr, ptr %memberidx39, align 8
  %memberidx40 = getelementptr inbounds %PointerType, ptr %2, i32 0, i32 1
  %49 = load ptr, ptr %memberidx40, align 8
  %50 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %48, ptr %49)
  br label %common.ret

ifend38:                                          ; preds = %ifend30
  %51 = icmp eq i64 %14, 13
  br i1 %51, label %if.entry42, label %ifend44

if.entry42:                                       ; preds = %ifend38
  %t1_obj_type = alloca ptr, align 8
  store ptr %1, ptr %t1_obj_type, align 8
  %t2_obj_type = alloca ptr, align 8
  store ptr %2, ptr %t2_obj_type, align 8
  %t1_obj_typeid = alloca ptr, align 8
  %52 = load ptr, ptr %t1_obj_type, align 8
  %memberidx45 = getelementptr inbounds %ObjectType, ptr %52, i32 0, i32 1
  %53 = load ptr, ptr %memberidx45, align 8
  store ptr %53, ptr %t1_obj_typeid, align 8
  %t2_obj_typeid = alloca ptr, align 8
  %54 = load ptr, ptr %t2_obj_type, align 8
  %memberidx46 = getelementptr inbounds %ObjectType, ptr %54, i32 0, i32 1
  %55 = load ptr, ptr %memberidx46, align 8
  store ptr %55, ptr %t2_obj_typeid, align 8
  %56 = load ptr, ptr %t1_obj_typeid, align 8
  %memberidx47 = getelementptr inbounds %TypeId, ptr %56, i32 0, i32 1
  %57 = load i64, ptr %memberidx47, align 4
  %memberidx48 = getelementptr inbounds %TypeId, ptr %55, i32 0, i32 1
  %58 = load i64, ptr %memberidx48, align 4
  %59 = icmp eq i64 %57, %58
  %60 = load i64, ptr %56, align 4
  %61 = load i64, ptr %55, align 4
  %62 = icmp eq i64 %60, %61
  %63 = and i1 %59, %62
  %memberidx51 = getelementptr inbounds %TypeId, ptr %56, i32 0, i32 2
  %64 = load i64, ptr %memberidx51, align 4
  %memberidx52 = getelementptr inbounds %TypeId, ptr %55, i32 0, i32 2
  %65 = load i64, ptr %memberidx52, align 4
  %66 = icmp eq i64 %64, %65
  %67 = and i1 %63, %66
  br i1 %67, label %common.ret, label %ifend55

ifend44:                                          ; preds = %ifend38
  %68 = icmp eq i64 %14, 14
  br i1 %68, label %if.entry63, label %ifend65

ifend55:                                          ; preds = %if.entry42
  %t2_class = alloca ptr, align 8
  %memberidx56 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %69 = load ptr, ptr %memberidx56, align 8
  %70 = call ptr @get_class(ptr %69, ptr %55)
  store ptr %70, ptr %t2_class, align 8
  %memberidx57 = getelementptr inbounds %Class, ptr %70, i32 0, i32 2
  %71 = load ptr, ptr %memberidx57, align 8
  %72 = icmp ne ptr %71, null
  br i1 %72, label %if.entry58, label %common.ret

if.entry58:                                       ; preds = %ifend55
  %73 = load ptr, ptr %t1_obj_type, align 8
  %74 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %73, ptr %71)
  br label %common.ret

if.entry63:                                       ; preds = %ifend44
  %t1_enum_type = alloca ptr, align 8
  store ptr %1, ptr %t1_enum_type, align 8
  %t2_enum_type = alloca ptr, align 8
  store ptr %2, ptr %t2_enum_type, align 8
  %t1_enum_typeid = alloca ptr, align 8
  %75 = load ptr, ptr %t1_enum_type, align 8
  %memberidx66 = getelementptr inbounds %EnumType, ptr %75, i32 0, i32 1
  %76 = load ptr, ptr %memberidx66, align 8
  store ptr %76, ptr %t1_enum_typeid, align 8
  %t2_enum_typeid = alloca ptr, align 8
  %77 = load ptr, ptr %t2_enum_type, align 8
  %memberidx67 = getelementptr inbounds %EnumType, ptr %77, i32 0, i32 1
  %78 = load ptr, ptr %memberidx67, align 8
  store ptr %78, ptr %t2_enum_typeid, align 8
  %79 = load ptr, ptr %t1_enum_typeid, align 8
  %80 = icmp eq ptr %79, %78
  br label %common.ret

ifend65:                                          ; preds = %ifend44
  %81 = icmp eq i64 %14, 20
  br i1 %81, label %if.entry69, label %common.ret

if.entry69:                                       ; preds = %ifend65
  %t1_gen_type = alloca ptr, align 8
  store ptr %1, ptr %t1_gen_type, align 8
  %t2_gen_type = alloca ptr, align 8
  store ptr %2, ptr %t2_gen_type, align 8
  %82 = load ptr, ptr %t1_gen_type, align 8
  %memberidx72 = getelementptr inbounds %GenericType, ptr %82, i32 0, i32 1
  %83 = load ptr, ptr %memberidx72, align 8
  %84 = load ptr, ptr %83, align 8
  %memberidx73 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i32 0, i32 3
  %85 = load ptr, ptr %memberidx73, align 8
  %memberidx74 = getelementptr inbounds %GenericType, ptr %2, i32 0, i32 1
  %86 = load ptr, ptr %memberidx74, align 8
  %87 = call i1 %85(ptr %83, ptr %86)
  br i1 %87, label %common.ret, label %ifend77

ifend77:                                          ; preds = %if.entry69
  %88 = load ptr, ptr %t1_gen_type, align 8
  %memberidx78 = getelementptr inbounds %GenericType, ptr %88, i32 0, i32 2
  %89 = load ptr, ptr %memberidx78, align 8
  %memberidx79 = getelementptr inbounds %Array_Type_, ptr %89, i32 0, i32 2
  %90 = load i64, ptr %memberidx79, align 4
  %91 = load ptr, ptr %t2_gen_type, align 8
  %memberidx80 = getelementptr inbounds %GenericType, ptr %91, i32 0, i32 2
  %92 = load ptr, ptr %memberidx80, align 8
  %memberidx81 = getelementptr inbounds %Array_Type_, ptr %92, i32 0, i32 2
  %93 = load i64, ptr %memberidx81, align 4
  %94 = icmp ne i64 %90, %93
  br i1 %94, label %common.ret, label %for.entry85

for.entry85:                                      ; preds = %ifend77
  %x = alloca i64, align 8
  store i64 0, ptr %x, align 4
  br label %for.cond86

for.cond86:                                       ; preds = %ifend98, %for.entry85
  %95 = load i64, ptr %x, align 4
  %96 = load ptr, ptr %t1_gen_type, align 8
  %memberidx90 = getelementptr inbounds %GenericType, ptr %96, i32 0, i32 2
  %97 = load ptr, ptr %memberidx90, align 8
  %memberidx91 = getelementptr inbounds %Array_Type_, ptr %97, i32 0, i32 2
  %98 = load i64, ptr %memberidx91, align 4
  %99 = icmp slt i64 %95, %98
  br i1 %99, label %for.body87, label %common.ret

for.body87:                                       ; preds = %for.cond86
  %100 = load ptr, ptr %97, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %100, i32 0, i32 5
  %101 = load ptr, ptr %memberidx93, align 8
  %102 = call ptr %101(ptr %97, i64 %95)
  %103 = load ptr, ptr %t2_gen_type, align 8
  %memberidx94 = getelementptr inbounds %GenericType, ptr %103, i32 0, i32 2
  %104 = load ptr, ptr %memberidx94, align 8
  %105 = load ptr, ptr %104, align 8
  %memberidx95 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %105, i32 0, i32 5
  %106 = load ptr, ptr %memberidx95, align 8
  %107 = load i64, ptr %x, align 4
  %108 = call ptr %106(ptr %104, i64 %107)
  %109 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %102, ptr %108)
  %110 = xor i1 %109, true
  br i1 %110, label %common.ret, label %ifend98

ifend98:                                          ; preds = %for.body87
  %111 = load i64, ptr %x, align 4
  %112 = add i64 %111, 1
  store i64 %112, ptr %x, align 4
  br label %for.cond86
}

define ptr @TypeChecker_create_scope(ptr %0) {
  %2 = call ptr @TypeChecker_get_current_module(ptr %0)
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Scope, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %2, i32 0, i32 7
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  call void @Scope_constructor(ptr %3, i64 %4, i64 %6)
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx4, align 8
  call void %9(ptr %7, ptr %3)
  ret ptr %3
}

define ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %6 = call ptr @bin_op_to_op_overload_name(i64 %5)
  %7 = icmp eq ptr %6, null
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend25, %ifend36, %if.entry34, %if.entry30, %ifend12, %if.entry10, %if.entry
  %common.ret.op = phi ptr [ null, %if.entry ], [ %35, %if.entry10 ], [ null, %ifend12 ], [ %65, %if.entry30 ], [ null, %if.entry34 ], [ %92, %ifend36 ], [ null, %ifend25 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  %8 = call ptr @dump_bin_op(i64 %5)
  %9 = load ptr, ptr %8, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 11
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr %10(ptr %8)
  %12 = alloca ptr, align 8
  %13 = call i64 (ptr, ptr, ...) @asprintf(ptr %12, ptr @288, ptr %11)
  %14 = load ptr, ptr %12, align 8
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %15, ptr %14, i64 %13)
  %16 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %15, ptr %16)
  br label %common.ret

ifend:                                            ; preds = %4
  %owner_class = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %17 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = call ptr @get_class_from_type(ptr %17, ptr %18)
  store ptr %19, ptr %owner_class, align 8
  %prop_id = alloca ptr, align 8
  %memberidx5 = getelementptr inbounds %Class, ptr %19, i32 0, i32 6
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx6, align 8
  %23 = call ptr %22(ptr %20, ptr %6)
  store ptr %23, ptr %prop_id, align 8
  %24 = icmp eq ptr %23, null
  br i1 %24, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %ifend
  %25 = icmp eq i64 %5, 11
  %26 = icmp eq i64 %5, 12
  %27 = or i1 %25, %26
  br i1 %27, label %if.entry10, label %ifend12

ifend9:                                           ; preds = %ifend
  %method_type = alloca ptr, align 8
  %28 = load ptr, ptr %memberidx3, align 8
  %29 = call ptr @get_class_prop_type(ptr %28, ptr %23)
  store ptr %29, ptr %method_type, align 8
  %arg_type = alloca ptr, align 8
  %memberidx21 = getelementptr inbounds %FunctionType, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx21, align 8
  %31 = load ptr, ptr %30, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i32 0, i32 5
  %32 = load ptr, ptr %memberidx22, align 8
  %33 = call ptr %32(ptr %30, i64 0)
  store ptr %33, ptr %arg_type, align 8
  %34 = icmp eq ptr %3, null
  br i1 %34, label %if.entry23, label %ifend25

if.entry10:                                       ; preds = %if.entry7
  %35 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %36 = load ptr, ptr %memberidx4, align 8
  %memberidx14 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 5
  %37 = load ptr, ptr %memberidx14, align 8
  %38 = call ptr @TypeChecker_check_expression(ptr %0, ptr %36, ptr %37)
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %39)
  call void @BinaryExpression_constructor(ptr %35, ptr %1, i64 %5, ptr %38, ptr %39, i1 false)
  br label %common.ret

ifend12:                                          ; preds = %if.entry7
  %40 = call ptr @dump_bin_op(i64 %5)
  %41 = load ptr, ptr %40, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i32 0, i32 11
  %42 = load ptr, ptr %memberidx15, align 8
  %43 = call ptr %42(ptr %40)
  %44 = load ptr, ptr %owner_class, align 8
  %memberidx16 = getelementptr inbounds %Class, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx16, align 8
  %46 = load ptr, ptr %45, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 11
  %47 = load ptr, ptr %memberidx17, align 8
  %48 = call ptr %47(ptr %45)
  %49 = load ptr, ptr %6, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %49, i32 0, i32 11
  %50 = load ptr, ptr %memberidx18, align 8
  %51 = call ptr %50(ptr %6)
  %52 = alloca ptr, align 8
  %53 = call i64 (ptr, ptr, ...) @asprintf(ptr %52, ptr @289, ptr %43, ptr %48, ptr %51)
  %54 = load ptr, ptr %52, align 8
  %55 = call ptr @string_from_bytes(ptr %54, i64 %53)
  %56 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %55, ptr %56)
  br label %common.ret

if.entry23:                                       ; preds = %ifend9
  %memberidx26 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 5
  %57 = load ptr, ptr %memberidx26, align 8
  %58 = call ptr @TypeChecker_check_expression(ptr %0, ptr %33, ptr %57)
  br label %ifend25

ifend25:                                          ; preds = %ifend9, %if.entry23
  %right.0 = phi ptr [ %58, %if.entry23 ], [ %3, %ifend9 ]
  %59 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %59, label %common.ret, label %ifend29

ifend29:                                          ; preds = %ifend25
  %60 = call i1 @is_null(ptr %right.0)
  %61 = icmp eq i64 %5, 11
  %62 = icmp eq i64 %5, 12
  %63 = or i1 %61, %62
  %64 = and i1 %60, %63
  br i1 %64, label %if.entry30, label %ifend32

if.entry30:                                       ; preds = %ifend29
  %65 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %66 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %66)
  call void @BinaryExpression_constructor(ptr %65, ptr %1, i64 %5, ptr %right.0, ptr %66, i1 false)
  br label %common.ret

ifend32:                                          ; preds = %ifend29
  %67 = load ptr, ptr %arg_type, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %right.0, i32 0, i32 3
  %68 = load ptr, ptr %memberidx33, align 8
  %69 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %67, ptr %68)
  %70 = xor i1 %69, true
  br i1 %70, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend32
  %71 = load ptr, ptr %arg_type, align 8
  %72 = call ptr @TypeChecker_dump_type(ptr %0, ptr %71)
  %73 = load ptr, ptr %72, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %73, i32 0, i32 11
  %74 = load ptr, ptr %memberidx37, align 8
  %75 = call ptr %74(ptr %72)
  %76 = load ptr, ptr %memberidx33, align 8
  %77 = call ptr @TypeChecker_dump_type(ptr %0, ptr %76)
  %78 = load ptr, ptr %77, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %78, i32 0, i32 11
  %79 = load ptr, ptr %memberidx39, align 8
  %80 = call ptr %79(ptr %77)
  %81 = alloca ptr, align 8
  %82 = call i64 (ptr, ptr, ...) @asprintf(ptr %81, ptr @274, ptr %75, ptr %80)
  %83 = load ptr, ptr %81, align 8
  %84 = call ptr @string_from_bytes(ptr %83, i64 %82)
  %memberidx40 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 5
  %85 = load ptr, ptr %memberidx40, align 8
  %86 = load ptr, ptr %85, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %84, ptr %86)
  br label %common.ret

ifend36:                                          ; preds = %ifend32
  %member_exp = alloca ptr, align 8
  %87 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %88 = load ptr, ptr %prop_id, align 8
  %89 = load ptr, ptr %method_type, align 8
  call void @MemberExpression_constructor(ptr %87, ptr %1, ptr %88, ptr %89)
  store ptr %87, ptr %member_exp, align 8
  %args = alloca ptr, align 8
  %90 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %90, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx42 = getelementptr inbounds %Array_Expression_, ptr %90, i32 0, i32 1
  %91 = load ptr, ptr %memberidx42, align 8
  store ptr %right.0, ptr %91, align 8
  %memberidx43 = getelementptr inbounds %Array_Expression_, ptr %90, i32 0, i32 2
  store i64 1, ptr %memberidx43, align 4
  store ptr %90, ptr %args, align 8
  %92 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %93 = load ptr, ptr %member_exp, align 8
  %94 = load ptr, ptr %args, align 8
  %95 = load ptr, ptr %method_type, align 8
  %memberidx44 = getelementptr inbounds %FunctionType, ptr %95, i32 0, i32 2
  %96 = load ptr, ptr %memberidx44, align 8
  call void @CallExpression_constructor(ptr %92, ptr %93, ptr %94, ptr %96)
  br label %common.ret
}

define void @UnaryExpression_constructor(ptr %0, i64 %1, ptr %2, ptr %3, i1 %4) {
  call void @Expression_constructor(ptr %0, i64 9)
  %memberidx = getelementptr inbounds %UnaryExpression, ptr %0, i32 0, i32 4
  store i64 %1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpression, ptr %0, i32 0, i32 5
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %3, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  store i1 %4, ptr %memberidx3, align 1
  ret void
}

define ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %UnaryExpressionNode, ptr %2, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpressionNode, ptr %2, i32 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %5)
  %7 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %if.entry31, %ifend30, %ifend24, %if.entry22, %if.entry13, %if.entry7
  %common.ret.op = phi ptr [ %14, %if.entry7 ], [ %25, %if.entry13 ], [ null, %if.entry22 ], [ %46, %ifend24 ], [ null, %ifend30 ], [ %63, %if.entry31 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %ty = alloca ptr, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  store ptr %8, ptr %ty, align 8
  %is_const = alloca i1, align 1
  %memberidx3 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 1
  %9 = load i1, ptr %memberidx3, align 1
  store i1 %9, ptr %is_const, align 1
  %10 = icmp eq i64 %4, 5
  br i1 %10, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %11 = load ptr, ptr %ty, align 8
  %12 = call i1 @is_numeric(ptr %11)
  br i1 %12, label %if.entry7, label %ifend6

ifend6:                                           ; preds = %if.entry4, %ifend
  %13 = icmp eq i64 %4, 6
  br i1 %13, label %if.entry10, label %ifend12

if.entry7:                                        ; preds = %if.entry4
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %15 = load ptr, ptr %ty, align 8
  %16 = load i1, ptr %is_const, align 1
  call void @UnaryExpression_constructor(ptr %14, i64 %4, ptr %6, ptr %15, i1 %16)
  br label %common.ret

if.entry10:                                       ; preds = %ifend6
  %17 = load ptr, ptr %ty, align 8
  %18 = call i1 @is_bool(ptr %17)
  %19 = load ptr, ptr %ty, align 8
  %20 = call i1 @is_numeric(ptr %19)
  %21 = or i1 %18, %20
  br i1 %21, label %if.entry13, label %ifend12

ifend12:                                          ; preds = %if.entry10, %ifend6
  %22 = icmp sge i64 %4, 1
  %23 = icmp sle i64 %4, 4
  %24 = and i1 %22, %23
  br i1 %24, label %if.entry16, label %ifend18

if.entry13:                                       ; preds = %if.entry10
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %26 = load ptr, ptr %ty, align 8
  %27 = load i1, ptr %is_const, align 1
  call void @UnaryExpression_constructor(ptr %25, i64 %4, ptr %6, ptr %26, i1 %27)
  br label %common.ret

if.entry16:                                       ; preds = %ifend12
  %28 = load ptr, ptr %ty, align 8
  %29 = call i1 @is_numeric(ptr %28)
  %30 = load ptr, ptr %ty, align 8
  %31 = call i1 @is_pointer(ptr %30)
  %32 = or i1 %29, %31
  br i1 %32, label %if.entry19, label %ifend18

ifend18:                                          ; preds = %if.entry16, %ifend12
  %33 = icmp eq i64 %4, 7
  br i1 %33, label %if.entry28, label %ifend30

if.entry19:                                       ; preds = %if.entry16
  %34 = call i1 @check_is_var(ptr %6)
  %35 = xor i1 %34, true
  br i1 %35, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %if.entry19
  %36 = call ptr @dump_unary_op(i64 %4)
  %37 = load ptr, ptr %36, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i32 0, i32 11
  %38 = load ptr, ptr %memberidx25, align 8
  %39 = call ptr %38(ptr %36)
  %40 = alloca ptr, align 8
  %41 = call i64 (ptr, ptr, ...) @asprintf(ptr %40, ptr @299, ptr %39)
  %42 = load ptr, ptr %40, align 8
  %43 = call ptr @string_from_bytes(ptr %42, i64 %41)
  %44 = load ptr, ptr %memberidx1, align 8
  %45 = load ptr, ptr %44, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %43, ptr %45)
  br label %common.ret

ifend24:                                          ; preds = %if.entry19
  %46 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %47 = load ptr, ptr %ty, align 8
  call void @UnaryExpression_constructor(ptr %46, i64 %4, ptr %6, ptr %47, i1 false)
  br label %common.ret

if.entry28:                                       ; preds = %ifend18
  %48 = call i1 @check_is_var(ptr %6)
  br i1 %48, label %if.entry31, label %ifend30

ifend30:                                          ; preds = %if.entry28, %ifend18
  %49 = call ptr @dump_unary_op(i64 %4)
  %50 = load ptr, ptr %49, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i32 0, i32 11
  %51 = load ptr, ptr %memberidx35, align 8
  %52 = call ptr %51(ptr %49)
  %53 = load ptr, ptr %ty, align 8
  %54 = call ptr @TypeChecker_dump_type(ptr %0, ptr %53)
  %55 = load ptr, ptr %54, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %55, i32 0, i32 11
  %56 = load ptr, ptr %memberidx36, align 8
  %57 = call ptr %56(ptr %54)
  %58 = alloca ptr, align 8
  %59 = call i64 (ptr, ptr, ...) @asprintf(ptr %58, ptr @300, ptr %52, ptr %57)
  %60 = load ptr, ptr %58, align 8
  %61 = call ptr @string_from_bytes(ptr %60, i64 %59)
  %62 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %61, ptr %62)
  br label %common.ret

if.entry31:                                       ; preds = %if.entry28
  %63 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %64 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PointerType, ptr null, i32 1) to i32))
  %65 = load ptr, ptr %memberidx2, align 8
  call void @PointerType_constructor(ptr %64, ptr %65)
  call void @UnaryExpression_constructor(ptr %63, i64 %4, ptr %6, ptr %64, i1 false)
  br label %common.ret
}

define void @NewExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3, i1 %4) {
  call void @Expression_constructor(ptr %0, i64 11)
  %memberidx = getelementptr inbounds %NewExpression, ptr %0, i32 0, i32 6
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %NewExpression, ptr %0, i32 0, i32 5
  store i1 %4, ptr %memberidx1, align 1
  %memberidx2 = getelementptr inbounds %NewExpression, ptr %0, i32 0, i32 4
  store ptr %3, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %2, ptr %memberidx3, align 8
  ret void
}

define ptr @TypeChecker_check_new_expr(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %NewExpressionNode, ptr %1, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @TypeChecker_check_type(ptr %0, ptr %3)
  %5 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend4, %2, %if.entry34, %if.entry27, %if.entry17, %ifend13
  %common.ret.op = phi ptr [ %20, %ifend13 ], [ null, %if.entry17 ], [ null, %if.entry27 ], [ null, %if.entry34 ], [ null, %2 ], [ null, %ifend4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %value_type = alloca ptr, align 8
  store ptr %4, ptr %value_type, align 8
  %6 = load i64, ptr %4, align 4
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %memberidx5 = getelementptr inbounds %GenericType, ptr %4, i32 0, i32 3
  %8 = load ptr, ptr %memberidx5, align 8
  store ptr %8, ptr %value_type, align 8
  br label %ifend4

ifend4:                                           ; preds = %ifend, %if.entry2
  %args = alloca ptr, align 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx6 = getelementptr inbounds %Array_Expression_, ptr %9, i32 0, i32 1
  %memberidx7 = getelementptr inbounds %Array_Expression_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  store ptr %9, ptr %args, align 8
  %10 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %10, label %common.ret, label %ifend10

ifend10:                                          ; preds = %ifend4
  %11 = call i1 @is_object(ptr %4)
  br i1 %11, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend10
  %msg = alloca ptr, align 8
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %12 = load ptr, ptr %memberidx14, align 8
  %13 = call ptr @get_class_from_type(ptr %12, ptr %4)
  %14 = load ptr, ptr %13, align 8
  %memberidx16 = getelementptr inbounds %NewExpressionNode, ptr %1, i32 0, i32 5
  %15 = load ptr, ptr %memberidx16, align 8
  %16 = call ptr @TypeChecker_check_constructor_call(ptr %0, ptr %14, ptr %15, ptr %args)
  store ptr %16, ptr %msg, align 8
  %17 = icmp ne ptr %16, null
  br i1 %17, label %if.entry17, label %ifend13

else12:                                           ; preds = %ifend10
  %18 = load i64, ptr %4, align 4
  %19 = icmp eq i64 %18, 15
  br i1 %19, label %if.entry22, label %ifend13

ifend13:                                          ; preds = %ifend36, %else12, %if.entry11
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NewExpression, ptr null, i32 1) to i32))
  %21 = load ptr, ptr %value_type, align 8
  %22 = load ptr, ptr %args, align 8
  %memberidx44 = getelementptr inbounds %NewExpressionNode, ptr %1, i32 0, i32 4
  %23 = load i1, ptr %memberidx44, align 1
  call void @NewExpression_constructor(ptr %20, ptr %21, ptr %4, ptr %22, i1 %23)
  br label %common.ret

if.entry17:                                       ; preds = %if.entry11
  %24 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %16, ptr %24)
  br label %common.ret

if.entry22:                                       ; preds = %else12
  %argno = alloca i64, align 8
  %memberidx25 = getelementptr inbounds %NewExpressionNode, ptr %1, i32 0, i32 5
  %25 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Array_ExpressionNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx26, align 4
  store i64 %26, ptr %argno, align 4
  %27 = icmp ne i64 %26, 1
  br i1 %27, label %if.entry27, label %ifend29

if.entry27:                                       ; preds = %if.entry22
  %28 = alloca ptr, align 8
  %29 = call i64 (ptr, ptr, ...) @asprintf(ptr %28, ptr @306, i64 %26)
  %30 = load ptr, ptr %28, align 8
  %31 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %31, ptr %30, i64 %29)
  %32 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %31, ptr %32)
  br label %common.ret

ifend29:                                          ; preds = %if.entry22
  %int_ty = alloca ptr, align 8
  %33 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %33, i64 7)
  store ptr %33, ptr %int_ty, align 8
  %arg = alloca ptr, align 8
  %34 = load ptr, ptr %memberidx25, align 8
  %35 = load ptr, ptr %34, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i32 0, i32 5
  %36 = load ptr, ptr %memberidx32, align 8
  %37 = call ptr %36(ptr %34, i64 0)
  %38 = call ptr @TypeChecker_check_expression(ptr %0, ptr %33, ptr %37)
  store ptr %38, ptr %arg, align 8
  %39 = load ptr, ptr %int_ty, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %38, i32 0, i32 3
  %40 = load ptr, ptr %memberidx33, align 8
  %41 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %39, ptr %40)
  %42 = xor i1 %41, true
  br i1 %42, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend29
  %43 = load ptr, ptr %int_ty, align 8
  %44 = call ptr @TypeChecker_dump_type(ptr %0, ptr %43)
  %45 = load ptr, ptr %44, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i32 0, i32 11
  %46 = load ptr, ptr %memberidx37, align 8
  %47 = call ptr %46(ptr %44)
  %48 = load ptr, ptr %arg, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %48, i32 0, i32 3
  %49 = load ptr, ptr %memberidx38, align 8
  %50 = load i64, ptr %49, align 4
  %51 = alloca ptr, align 8
  %52 = call i64 (ptr, ptr, ...) @asprintf(ptr %51, ptr @307, i64 %50)
  %53 = load ptr, ptr %51, align 8
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr %54, ptr @308, ptr %47, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %57, ptr %56, i64 %55)
  %58 = load ptr, ptr %memberidx25, align 8
  %59 = load ptr, ptr %58, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i32 0, i32 5
  %60 = load ptr, ptr %memberidx41, align 8
  %61 = call ptr %60(ptr %58, i64 0)
  %62 = load ptr, ptr %61, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %57, ptr %62)
  br label %common.ret

ifend36:                                          ; preds = %ifend29
  %63 = load ptr, ptr %args, align 8
  %64 = load ptr, ptr %63, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i32 0, i32 2
  %65 = load ptr, ptr %memberidx43, align 8
  %66 = load ptr, ptr %arg, align 8
  call void %65(ptr %63, ptr %66)
  br label %ifend13
}

define void @TernaryExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  call void @Expression_constructor(ptr %0, i64 15)
  %memberidx = getelementptr inbounds %TernaryExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %TernaryExpression, ptr %0, i32 0, i32 5
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %TernaryExpression, ptr %0, i32 0, i32 6
  store ptr %3, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  %memberidx4 = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %memberidx4, align 8
  store ptr %5, ptr %memberidx3, align 8
  ret void
}

define ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %TernaryExpressionNode, ptr %2, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @TypeChecker_check_condition(ptr %0, ptr %4)
  %6 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend4, %ifend, %3, %ifend13, %if.entry11
  %common.ret.op = phi ptr [ null, %if.entry11 ], [ %35, %ifend13 ], [ null, %3 ], [ null, %ifend ], [ null, %ifend4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %is_true = alloca ptr, align 8
  %memberidx1 = getelementptr inbounds %TernaryExpressionNode, ptr %2, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %7)
  store ptr %8, ptr %is_true, align 8
  %9 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %9, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %is_true_ty = alloca ptr, align 8
  %10 = load ptr, ptr %is_true, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx5, align 8
  store ptr %11, ptr %is_true_ty, align 8
  %is_false = alloca ptr, align 8
  %memberidx6 = getelementptr inbounds %TernaryExpressionNode, ptr %2, i32 0, i32 5
  %12 = load ptr, ptr %memberidx6, align 8
  %13 = call ptr @TypeChecker_check_expression(ptr %0, ptr %11, ptr %12)
  store ptr %13, ptr %is_false, align 8
  %14 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %14, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend4
  %is_false_ty = alloca ptr, align 8
  %15 = load ptr, ptr %is_false, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %15, i32 0, i32 3
  %16 = load ptr, ptr %memberidx10, align 8
  store ptr %16, ptr %is_false_ty, align 8
  %17 = load ptr, ptr %is_true_ty, align 8
  %18 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %17, ptr %16)
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend9
  %20 = load ptr, ptr %is_true_ty, align 8
  %21 = call ptr @TypeChecker_dump_type(ptr %0, ptr %20)
  %22 = load ptr, ptr %21, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i32 0, i32 11
  %23 = load ptr, ptr %memberidx14, align 8
  %24 = call ptr %23(ptr %21)
  %25 = load ptr, ptr %is_false_ty, align 8
  %26 = call ptr @TypeChecker_dump_type(ptr %0, ptr %25)
  %27 = load ptr, ptr %26, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i32 0, i32 11
  %28 = load ptr, ptr %memberidx15, align 8
  %29 = call ptr %28(ptr %26)
  %30 = alloca ptr, align 8
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr %30, ptr @321, ptr %24, ptr %29)
  %32 = load ptr, ptr %30, align 8
  %33 = call ptr @string_from_bytes(ptr %32, i64 %31)
  %34 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %33, ptr %34)
  br label %common.ret

ifend13:                                          ; preds = %ifend9
  %35 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TernaryExpression, ptr null, i32 1) to i32))
  %36 = load ptr, ptr %is_true, align 8
  %37 = load ptr, ptr %is_false, align 8
  call void @TernaryExpression_constructor(ptr %35, ptr %5, ptr %36, ptr %37)
  br label %common.ret
}

define ptr @TypeChecker_dump_type(ptr %0, ptr %1) {
  %3 = load i64, ptr %1, align 4
  %4 = icmp eq i64 %3, 17
  br i1 %4, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %fnc_ty = alloca ptr, align 8
  store ptr %1, ptr %fnc_ty, align 8
  %args_tys_str = alloca ptr, align 8
  %5 = call ptr @string_from_bytes(ptr @38, i64 0)
  store ptr %5, ptr %args_tys_str, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

ifend:                                            ; preds = %2
  %6 = icmp eq i64 %3, 15
  br i1 %6, label %if.entry16, label %ifend18

for.cond:                                         ; preds = %ifend10, %if.entry
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %fnc_ty, align 8
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %7, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %args_tys_str, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = load ptr, ptr %9, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %memberidx5, align 8
  %17 = call ptr %16(ptr %9, i64 %7)
  %18 = call ptr @TypeChecker_dump_type(ptr %0, ptr %17)
  %19 = call ptr %14(ptr %12, ptr %18)
  %20 = load i64, ptr %i, align 4
  %21 = load ptr, ptr %fnc_ty, align 8
  %memberidx6 = getelementptr inbounds %FunctionType, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_Type_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx7, align 4
  %24 = sub i64 %23, 1
  %25 = icmp slt i64 %20, %24
  br i1 %25, label %if.entry8, label %ifend10

common.ret:                                       ; preds = %for.end51, %ifend44, %if.entry35, %if.entry28, %if.entry22, %if.entry16, %for.end
  %common.ret.op = phi ptr [ %39, %for.end ], [ %55, %if.entry16 ], [ %59, %if.entry22 ], [ %64, %if.entry28 ], [ %76, %if.entry35 ], [ %83, %ifend44 ], [ %103, %for.end51 ]
  ret ptr %common.ret.op

for.end:                                          ; preds = %for.cond
  %26 = load ptr, ptr %args_tys_str, align 8
  %27 = load ptr, ptr %26, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i32 0, i32 11
  %28 = load ptr, ptr %memberidx12, align 8
  %29 = call ptr %28(ptr %26)
  %30 = load ptr, ptr %fnc_ty, align 8
  %memberidx13 = getelementptr inbounds %FunctionType, ptr %30, i32 0, i32 2
  %31 = load ptr, ptr %memberidx13, align 8
  %32 = call ptr @TypeChecker_dump_type(ptr %0, ptr %31)
  %33 = load ptr, ptr %32, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %33, i32 0, i32 11
  %34 = load ptr, ptr %memberidx14, align 8
  %35 = call ptr %34(ptr %32)
  %36 = alloca ptr, align 8
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr %36, ptr @184, ptr %29, ptr %35)
  %38 = load ptr, ptr %36, align 8
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %39, ptr %38, i64 %37)
  br label %common.ret

if.entry8:                                        ; preds = %for.body
  %40 = load ptr, ptr %args_tys_str, align 8
  %41 = load ptr, ptr %40, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i32 0, i32 1
  %42 = load ptr, ptr %memberidx11, align 8
  %43 = call ptr @string_from_bytes(ptr @183, i64 2)
  %44 = call ptr %42(ptr %40, ptr %43)
  br label %ifend10

ifend10:                                          ; preds = %for.body, %if.entry8
  %45 = load i64, ptr %i, align 4
  %46 = add i64 %45, 1
  store i64 %46, ptr %i, align 4
  br label %for.cond

if.entry16:                                       ; preds = %ifend
  %memberidx19 = getelementptr inbounds %PointerType, ptr %1, i32 0, i32 1
  %47 = load ptr, ptr %memberidx19, align 8
  %48 = call ptr @TypeChecker_dump_type(ptr %0, ptr %47)
  %49 = load ptr, ptr %48, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %49, i32 0, i32 11
  %50 = load ptr, ptr %memberidx20, align 8
  %51 = call ptr %50(ptr %48)
  %52 = alloca ptr, align 8
  %53 = call i64 (ptr, ptr, ...) @asprintf(ptr %52, ptr @185, ptr %51)
  %54 = load ptr, ptr %52, align 8
  %55 = call ptr @string_from_bytes(ptr %54, i64 %53)
  br label %common.ret

ifend18:                                          ; preds = %ifend
  %56 = icmp eq i64 %3, 13
  br i1 %56, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend18
  %memberidx25 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %57 = load ptr, ptr %memberidx25, align 8
  %58 = call ptr @get_class_from_type(ptr %57, ptr %1)
  %memberidx26 = getelementptr inbounds %Class, ptr %58, i32 0, i32 1
  %59 = load ptr, ptr %memberidx26, align 8
  br label %common.ret

ifend24:                                          ; preds = %ifend18
  %60 = icmp eq i64 %3, 14
  br i1 %60, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend24
  %memberidx31 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %61 = load ptr, ptr %memberidx31, align 8
  %memberidx32 = getelementptr inbounds %EnumType, ptr %1, i32 0, i32 1
  %62 = load ptr, ptr %memberidx32, align 8
  %63 = call ptr @get_enum(ptr %61, ptr %62)
  %memberidx33 = getelementptr inbounds %Enum, ptr %63, i32 0, i32 1
  %64 = load ptr, ptr %memberidx33, align 8
  br label %common.ret

ifend30:                                          ; preds = %ifend24
  %65 = icmp eq i64 %3, 16
  br i1 %65, label %if.entry35, label %ifend37

if.entry35:                                       ; preds = %ifend30
  %arr_ty = alloca ptr, align 8
  store ptr %1, ptr %arr_ty, align 8
  %memberidx38 = getelementptr inbounds %ArrayType, ptr %1, i32 0, i32 1
  %66 = load ptr, ptr %memberidx38, align 8
  %67 = call ptr @TypeChecker_dump_type(ptr %0, ptr %66)
  %68 = load ptr, ptr %67, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i32 0, i32 11
  %69 = load ptr, ptr %memberidx39, align 8
  %70 = call ptr %69(ptr %67)
  %71 = load ptr, ptr %arr_ty, align 8
  %memberidx40 = getelementptr inbounds %ArrayType, ptr %71, i32 0, i32 2
  %72 = load i64, ptr %memberidx40, align 4
  %73 = alloca ptr, align 8
  %74 = call i64 (ptr, ptr, ...) @asprintf(ptr %73, ptr @186, ptr %70, i64 %72)
  %75 = load ptr, ptr %73, align 8
  %76 = call ptr @string_from_bytes(ptr %75, i64 %74)
  br label %common.ret

ifend37:                                          ; preds = %ifend30
  %77 = icmp eq i64 %3, 20
  br i1 %77, label %if.entry42, label %ifend44

if.entry42:                                       ; preds = %ifend37
  %gen_ty = alloca ptr, align 8
  store ptr %1, ptr %gen_ty, align 8
  %s = alloca ptr, align 8
  %memberidx45 = getelementptr inbounds %GenericType, ptr %1, i32 0, i32 1
  %78 = load ptr, ptr %memberidx45, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @string_from_bytes(ptr @187, i64 1)
  %82 = call ptr %80(ptr %78, ptr %81)
  store ptr %82, ptr %s, align 8
  %x = alloca i64, align 8
  store i64 0, ptr %x, align 4
  br label %for.cond48

ifend44:                                          ; preds = %ifend37
  %83 = call ptr @dump_type(ptr %1, i1 false)
  br label %common.ret

for.cond48:                                       ; preds = %for.body49, %if.entry42
  %84 = load i64, ptr %x, align 4
  %85 = load ptr, ptr %gen_ty, align 8
  %memberidx52 = getelementptr inbounds %GenericType, ptr %85, i32 0, i32 2
  %86 = load ptr, ptr %memberidx52, align 8
  %memberidx53 = getelementptr inbounds %Array_Type_, ptr %86, i32 0, i32 2
  %87 = load i64, ptr %memberidx53, align 4
  %88 = icmp slt i64 %84, %87
  br i1 %88, label %for.body49, label %for.end51

for.body49:                                       ; preds = %for.cond48
  %89 = load ptr, ptr %s, align 8
  %90 = load ptr, ptr %89, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %90, i32 0, i32 1
  %91 = load ptr, ptr %memberidx54, align 8
  %92 = load ptr, ptr %86, align 8
  %memberidx56 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i32 0, i32 5
  %93 = load ptr, ptr %memberidx56, align 8
  %94 = call ptr %93(ptr %86, i64 %84)
  %95 = call ptr @TypeChecker_dump_type(ptr %0, ptr %94)
  %96 = call ptr %91(ptr %89, ptr %95)
  %97 = load i64, ptr %x, align 4
  %98 = add i64 %97, 1
  store i64 %98, ptr %x, align 4
  br label %for.cond48

for.end51:                                        ; preds = %for.cond48
  %99 = load ptr, ptr %s, align 8
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %100, align 8
  %102 = call ptr @string_from_bytes(ptr @188, i64 1)
  %103 = call ptr %101(ptr %99, ptr %102)
  br label %common.ret
}

define void @IfStatement_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  call void @Statement_constructor(ptr %0, i64 0)
  %memberidx = getelementptr inbounds %IfStatement, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IfStatement, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %IfStatement, ptr %0, i32 0, i32 3
  store ptr %3, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_check_if_stamement(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %IfStatementNode, ptr %1, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @TypeChecker_check_condition(ptr %0, ptr %3)
  %memberidx1 = getelementptr inbounds %IfStatementNode, ptr %1, i32 0, i32 3
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @TypeChecker_check_block(ptr %0, ptr %5)
  %memberidx2 = getelementptr inbounds %IfStatementNode, ptr %1, i32 0, i32 4
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = icmp ne ptr %7, null
  br i1 %8, label %true_block, label %end

true_block:                                       ; preds = %2
  %9 = call ptr @TypeChecker_check_block(ptr %0, ptr %7)
  br label %end

end:                                              ; preds = %2, %true_block
  %ternary = phi ptr [ %9, %true_block ], [ null, %2 ]
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IfStatement, ptr null, i32 1) to i32))
  call void @IfStatement_constructor(ptr %10, ptr %4, ptr %6, ptr %ternary)
  ret ptr %10
}

define ptr @TypeChecker_get_module(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = call ptr %6(ptr %4, i64 %1)
  ret ptr %7
}

define ptr @TypeChecker_get_current_module(ptr %0) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = call ptr @TypeChecker_get_module(ptr %0, i64 %2)
  ret ptr %3
}

define void @GenericType_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  call void @Type_constructor(ptr %0, i64 20)
  %memberidx = getelementptr inbounds %GenericType, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GenericType, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %GenericType, ptr %0, i32 0, i32 3
  store ptr %3, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 10
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %4, ptr %1)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %ifend34, %if.entry6
  %common.ret.op = phi ptr [ null, %if.entry6 ], [ %113, %ifend34 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %generic_params = alloca ptr, align 8
  %memberidx2 = getelementptr inbounds %Generic, ptr %7, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %ClassDeclarationNode, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx3, align 8
  store ptr %10, ptr %generic_params, align 8
  %memberidx4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx4, align 4
  %memberidx5 = getelementptr inbounds %Array_Type_, ptr %2, i32 0, i32 2
  %12 = load i64, ptr %memberidx5, align 4
  %13 = icmp ne i64 %11, %12
  br i1 %13, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend
  %buckets = alloca ptr, align 8
  %14 = load ptr, ptr %memberidx, align 8
  %15 = load ptr, ptr %14, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %15, i32 0, i32 2
  %16 = load ptr, ptr %memberidx10, align 8
  %17 = call ptr %16(ptr %14)
  store ptr %17, ptr %buckets, align 8
  %18 = load ptr, ptr %generic_params, align 8
  %memberidx11 = getelementptr inbounds %Array_GenericParameterNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx11, align 4
  %20 = load i64, ptr %memberidx5, align 4
  %21 = alloca ptr, align 8
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr %21, ptr @198, i64 %19, i64 %20)
  %23 = load ptr, ptr %21, align 8
  %24 = call ptr @string_from_bytes(ptr %23, i64 %22)
  call void @TypeChecker_error(ptr %0, i64 5, ptr %24, ptr null)
  br label %common.ret

ifend8:                                           ; preds = %ifend
  %module_id = alloca i64, align 8
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %25 = load i64, ptr %memberidx13, align 4
  store i64 %25, ptr %module_id, align 4
  %scope_id = alloca ptr, align 8
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %26 = load ptr, ptr %memberidx14, align 8
  store ptr %26, ptr %scope_id, align 8
  call void @TypeChecker_switch_to_generic_module(ptr %0)
  %generic_scope = alloca ptr, align 8
  %27 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %0)
  store ptr %27, ptr %generic_scope, align 8
  %param_strings = alloca ptr, align 8
  %28 = call ptr @string_from_bytes(ptr @38, i64 0)
  store ptr %28, ptr %param_strings, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %end, %ifend8
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %generic_params, align 8
  %memberidx15 = getelementptr inbounds %Array_GenericParameterNode_, ptr %30, i32 0, i32 2
  %31 = load i64, ptr %memberidx15, align 4
  %32 = icmp slt i64 %29, %31
  br i1 %32, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %param_name = alloca ptr, align 8
  %33 = load ptr, ptr %30, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %33, i32 0, i32 5
  %34 = load ptr, ptr %memberidx16, align 8
  %35 = call ptr %34(ptr %30, i64 %29)
  %36 = load ptr, ptr %35, align 8
  %memberidx18 = getelementptr inbounds %IdentifierToken, ptr %36, i32 0, i32 2
  %37 = load ptr, ptr %memberidx18, align 8
  store ptr %37, ptr %param_name, align 8
  %param_type = alloca ptr, align 8
  %38 = load ptr, ptr %2, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %38, i32 0, i32 5
  %39 = load ptr, ptr %memberidx19, align 8
  %40 = load i64, ptr %i, align 4
  %41 = call ptr %39(ptr %2, i64 %40)
  %42 = load i64, ptr %41, align 4
  %43 = icmp eq i64 %42, 20
  br i1 %43, label %true_block, label %false_block

for.end:                                          ; preds = %for.cond
  %instantiated_generic_name = alloca ptr, align 8
  %44 = load ptr, ptr %1, align 8
  %memberidx29 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %44, i32 0, i32 11
  %45 = load ptr, ptr %memberidx29, align 8
  %46 = call ptr %45(ptr %1)
  %47 = load ptr, ptr %param_strings, align 8
  %48 = load ptr, ptr %47, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %48, i32 0, i32 11
  %49 = load ptr, ptr %memberidx30, align 8
  %50 = call ptr %49(ptr %47)
  %51 = alloca ptr, align 8
  %52 = call i64 (ptr, ptr, ...) @asprintf(ptr %51, ptr @200, ptr %46, ptr %50)
  %53 = load ptr, ptr %51, align 8
  %54 = call ptr @string_from_bytes(ptr %53, i64 %52)
  store ptr %54, ptr %instantiated_generic_name, align 8
  %possible_type = alloca ptr, align 8
  %55 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %54)
  store ptr %55, ptr %possible_type, align 8
  %56 = load i64, ptr %55, align 4
  %57 = icmp eq i64 %56, 21
  br i1 %57, label %if.entry32, label %ifend34

true_block:                                       ; preds = %for.body
  %58 = load ptr, ptr %2, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i32 0, i32 5
  %59 = load ptr, ptr %memberidx21, align 8
  %60 = load i64, ptr %i, align 4
  %61 = call ptr %59(ptr %2, i64 %60)
  %memberidx22 = getelementptr inbounds %GenericType, ptr %61, i32 0, i32 3
  %62 = load ptr, ptr %memberidx22, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %63 = load ptr, ptr %2, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i32 0, i32 5
  %64 = load ptr, ptr %memberidx23, align 8
  %65 = load i64, ptr %i, align 4
  %66 = call ptr %64(ptr %2, i64 %65)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %62, %true_block ], [ %66, %false_block ]
  store ptr %ternary, ptr %param_type, align 8
  %67 = load ptr, ptr %param_strings, align 8
  %68 = load ptr, ptr %67, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i32 0, i32 1
  %69 = load ptr, ptr %memberidx24, align 8
  %70 = call ptr @TypeChecker_dump_type(ptr %0, ptr %ternary)
  %71 = load ptr, ptr %70, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %71, i32 0, i32 11
  %72 = load ptr, ptr %memberidx25, align 8
  %73 = call ptr %72(ptr %70)
  %74 = alloca ptr, align 8
  %75 = call i64 (ptr, ptr, ...) @asprintf(ptr %74, ptr @199, ptr %73)
  %76 = load ptr, ptr %74, align 8
  %77 = call ptr @string_from_bytes(ptr %76, i64 %75)
  %78 = call ptr %69(ptr %67, ptr %77)
  %79 = load ptr, ptr %generic_scope, align 8
  %memberidx26 = getelementptr inbounds %Scope, ptr %79, i32 0, i32 6
  %80 = load ptr, ptr %memberidx26, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %param_name, align 8
  %84 = load ptr, ptr %2, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i32 0, i32 5
  %85 = load ptr, ptr %memberidx28, align 8
  %86 = load i64, ptr %i, align 4
  %87 = call ptr %85(ptr %2, i64 %86)
  call void %82(ptr %80, ptr %83, ptr %87)
  %88 = load i64, ptr %i, align 4
  %89 = add i64 %88, 1
  store i64 %89, ptr %i, align 4
  br label %for.cond

if.entry32:                                       ; preds = %for.end
  %new_identok = alloca ptr, align 8
  %90 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IdentifierToken, ptr null, i32 1) to i32))
  %91 = load ptr, ptr %instantiated_generic_name, align 8
  %92 = load ptr, ptr %memberidx2, align 8
  %93 = load ptr, ptr %92, align 8
  %memberidx37 = getelementptr inbounds %Token, ptr %93, i32 0, i32 1
  %94 = load ptr, ptr %memberidx37, align 8
  call void @IdentifierToken_constructor(ptr %90, ptr %91, ptr %94)
  store ptr %90, ptr %new_identok, align 8
  %instantiated_generic_class = alloca ptr, align 8
  %95 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassDeclarationNode, ptr null, i32 1) to i32))
  %96 = load ptr, ptr %new_identok, align 8
  call void @ClassDeclarationNode_constructor(ptr %95, ptr %96)
  store ptr %95, ptr %instantiated_generic_class, align 8
  %memberidx38 = getelementptr inbounds %ClassDeclarationNode, ptr %95, i32 0, i32 2
  %97 = load ptr, ptr %memberidx2, align 8
  %memberidx40 = getelementptr inbounds %ClassDeclarationNode, ptr %97, i32 0, i32 2
  %98 = load ptr, ptr %memberidx40, align 8
  store ptr %98, ptr %memberidx38, align 8
  %99 = load ptr, ptr %instantiated_generic_class, align 8
  %memberidx41 = getelementptr inbounds %ClassDeclarationNode, ptr %99, i32 0, i32 3
  %100 = load ptr, ptr %memberidx2, align 8
  %memberidx43 = getelementptr inbounds %ClassDeclarationNode, ptr %100, i32 0, i32 3
  %101 = load ptr, ptr %memberidx43, align 8
  store ptr %101, ptr %memberidx41, align 8
  %102 = load ptr, ptr %instantiated_generic_class, align 8
  %memberidx44 = getelementptr inbounds %ClassDeclarationNode, ptr %102, i32 0, i32 4
  %103 = load ptr, ptr %memberidx2, align 8
  %memberidx46 = getelementptr inbounds %ClassDeclarationNode, ptr %103, i32 0, i32 4
  %104 = load ptr, ptr %memberidx46, align 8
  store ptr %104, ptr %memberidx44, align 8
  %105 = load ptr, ptr %generic_scope, align 8
  %106 = load ptr, ptr %105, align 8
  store ptr %106, ptr %memberidx14, align 8
  %107 = load ptr, ptr %instantiated_generic_class, align 8
  call void @TypeChecker_declare_class_within_module(ptr %0, ptr %107)
  %108 = load ptr, ptr %instantiated_generic_class, align 8
  call void @TypeChecker_check_class_body(ptr %0, ptr %108)
  %109 = load ptr, ptr %instantiated_generic_name, align 8
  %110 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %109)
  store ptr %110, ptr %possible_type, align 8
  br label %ifend34

ifend34:                                          ; preds = %for.end, %if.entry32
  %111 = load i64, ptr %module_id, align 4
  store i64 %111, ptr %memberidx13, align 4
  %112 = load ptr, ptr %scope_id, align 8
  store ptr %112, ptr %memberidx14, align 8
  %generic_ty = alloca ptr, align 8
  %113 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%GenericType, ptr null, i32 1) to i32))
  %114 = load ptr, ptr %possible_type, align 8
  call void @GenericType_constructor(ptr %113, ptr %1, ptr %2, ptr %114)
  store ptr %113, ptr %generic_ty, align 8
  br label %common.ret
}

define void @TypeChecker_declare_enum_within_module(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Enum, ptr null, i32 1) to i32))
  call void @Enum_constructor(ptr %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @TypeChecker_get_current_module_global_scope(ptr %0)
  %memberidx2 = getelementptr inbounds %Enum, ptr %3, i32 0, i32 1
  store ptr %5, ptr %memberidx2, align 8
  %7 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %5)
  %8 = load i64, ptr %7, align 4
  %9 = icmp ne i64 %8, 21
  br i1 %9, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  ret void

if.entry:                                         ; preds = %2
  %10 = load ptr, ptr %5, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 11
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = call ptr %11(ptr %5)
  %13 = alloca ptr, align 8
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr %13, ptr @197, ptr %12)
  %15 = load ptr, ptr %13, align 8
  %16 = call ptr @string_from_bytes(ptr %15, i64 %14)
  %17 = load ptr, ptr %1, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx6, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %16, ptr %18)
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx7 = getelementptr inbounds %Enum, ptr %3, i32 0, i32 3
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_PropId_, ptr null, i32 1) to i32))
  call void @Map_string_PropId__constructor(ptr %19)
  store ptr %19, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Enum, ptr %3, i32 0, i32 2
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumField_, ptr null, i32 1) to i32))
  call void @Array_EnumField__constructor(ptr %20, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx9 = getelementptr inbounds %Array_EnumField_, ptr %20, i32 0, i32 1
  %memberidx10 = getelementptr inbounds %Array_EnumField_, ptr %20, i32 0, i32 2
  store i64 0, ptr %memberidx10, align 4
  store ptr %20, ptr %memberidx8, align 8
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumId, ptr null, i32 1) to i32))
  %memberidx12 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %22 = load i64, ptr %memberidx12, align 4
  %23 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx13 = getelementptr inbounds %Module, ptr %23, i32 0, i32 6
  %24 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Array_Enum_, ptr %24, i32 0, i32 2
  %25 = load i64, ptr %memberidx14, align 4
  call void @EnumId_constructor(ptr %21, i64 %22, i64 %25)
  store ptr %21, ptr %3, align 8
  %26 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx15 = getelementptr inbounds %Module, ptr %26, i32 0, i32 6
  %27 = load ptr, ptr %memberidx15, align 8
  %28 = load ptr, ptr %27, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 2
  %29 = load ptr, ptr %memberidx16, align 8
  call void %29(ptr %27, ptr %3)
  %memberidx17 = getelementptr inbounds %Scope, ptr %6, i32 0, i32 4
  %30 = load ptr, ptr %memberidx17, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %memberidx2, align 8
  %34 = load ptr, ptr %3, align 8
  call void %32(ptr %30, ptr %33, ptr %34)
  %memberidx21 = getelementptr inbounds %Scope, ptr %6, i32 0, i32 1
  %35 = load ptr, ptr %memberidx21, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %memberidx2, align 8
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumVarId, ptr null, i32 1) to i32))
  %40 = load ptr, ptr %3, align 8
  call void @EnumVarId_constructor(ptr %39, ptr %40)
  call void %37(ptr %35, ptr %38, ptr %39)
  br label %common.ret
}

define void @TypeChecker_declare_class_within_module(ptr %0, ptr %1) {
  %3 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %4)
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 21
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 10
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = call ptr %10(ptr %8, ptr %4)
  %12 = icmp ne ptr %11, null
  %13 = or i1 %7, %12
  br i1 %13, label %if.entry, label %ifend

common.ret:                                       ; preds = %if.entry18, %ifend20, %if.entry10, %if.entry
  ret void

if.entry:                                         ; preds = %2
  %14 = load ptr, ptr %4, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 11
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = call ptr %15(ptr %4)
  %17 = alloca ptr, align 8
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr %17, ptr @197, ptr %16)
  %19 = load ptr, ptr %17, align 8
  %20 = call ptr @string_from_bytes(ptr %19, i64 %18)
  %21 = load ptr, ptr %1, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx7, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %20, ptr %22)
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx8 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i32 0, i32 1
  %23 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_GenericParameterNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx9, align 4
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 9
  store i1 true, ptr %memberidx13, align 1
  %26 = load ptr, ptr %memberidx3, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Generic, ptr null, i32 1) to i32))
  %memberidx16 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %30 = load i64, ptr %memberidx16, align 4
  call void @Generic_constructor(ptr %29, i64 %30, ptr %1)
  call void %28(ptr %26, ptr %4, ptr %29)
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %declared_class = alloca ptr, align 8
  %31 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Class, ptr null, i32 1) to i32))
  call void @Class_constructor(ptr %31)
  store ptr %31, ptr %declared_class, align 8
  %module_scope = alloca ptr, align 8
  %32 = call ptr @TypeChecker_get_current_module_global_scope(ptr %0)
  store ptr %32, ptr %module_scope, align 8
  %memberidx17 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i32 0, i32 2
  %33 = load ptr, ptr %memberidx17, align 8
  %34 = icmp ne ptr %33, null
  br i1 %34, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend12
  %35 = load ptr, ptr %declared_class, align 8
  %memberidx21 = getelementptr inbounds %Class, ptr %35, i32 0, i32 2
  %36 = call ptr @TypeChecker_check_type(ptr %0, ptr %33)
  store ptr %36, ptr %memberidx21, align 8
  %37 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %37, label %common.ret, label %ifend20

else19:                                           ; preds = %ifend12
  %38 = load ptr, ptr %declared_class, align 8
  %memberidx26 = getelementptr inbounds %Class, ptr %38, i32 0, i32 2
  store ptr null, ptr %memberidx26, align 8
  br label %ifend20

ifend20:                                          ; preds = %if.entry18, %else19
  %39 = load ptr, ptr %declared_class, align 8
  %memberidx27 = getelementptr inbounds %Class, ptr %39, i32 0, i32 6
  %40 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_PropId_, ptr null, i32 1) to i32))
  call void @Map_string_PropId__constructor(ptr %40)
  store ptr %40, ptr %memberidx27, align 8
  %41 = load ptr, ptr %declared_class, align 8
  %memberidx28 = getelementptr inbounds %Class, ptr %41, i32 0, i32 7
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_PropId_, ptr null, i32 1) to i32))
  call void @Map_string_PropId__constructor(ptr %42)
  store ptr %42, ptr %memberidx28, align 8
  %43 = load ptr, ptr %declared_class, align 8
  %memberidx29 = getelementptr inbounds %Class, ptr %43, i32 0, i32 1
  store ptr %4, ptr %memberidx29, align 8
  %44 = load ptr, ptr %declared_class, align 8
  %45 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassId, ptr null, i32 1) to i32))
  %memberidx31 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %46 = load i64, ptr %memberidx31, align 4
  %47 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx32 = getelementptr inbounds %Module, ptr %47, i32 0, i32 4
  %48 = load ptr, ptr %memberidx32, align 8
  %memberidx33 = getelementptr inbounds %Array_Class_, ptr %48, i32 0, i32 2
  %49 = load i64, ptr %memberidx33, align 4
  call void @ClassId_constructor(ptr %45, i64 %46, i64 %49)
  store ptr %45, ptr %44, align 8
  %50 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx34 = getelementptr inbounds %Module, ptr %50, i32 0, i32 4
  %51 = load ptr, ptr %memberidx34, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i32 0, i32 2
  %53 = load ptr, ptr %memberidx35, align 8
  %54 = load ptr, ptr %declared_class, align 8
  call void %53(ptr %51, ptr %54)
  %55 = load ptr, ptr %module_scope, align 8
  %memberidx36 = getelementptr inbounds %Scope, ptr %55, i32 0, i32 2
  %56 = load ptr, ptr %memberidx36, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %declared_class, align 8
  %60 = load ptr, ptr %59, align 8
  call void %58(ptr %56, ptr %4, ptr %60)
  %61 = load ptr, ptr %module_scope, align 8
  %memberidx39 = getelementptr inbounds %Scope, ptr %61, i32 0, i32 1
  %62 = load ptr, ptr %memberidx39, align 8
  %63 = load ptr, ptr %62, align 8
  %64 = load ptr, ptr %63, align 8
  %65 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassVarId, ptr null, i32 1) to i32))
  %66 = load ptr, ptr %declared_class, align 8
  %67 = load ptr, ptr %66, align 8
  call void @ClassVarId_constructor(ptr %65, ptr %67)
  call void %64(ptr %62, ptr %4, ptr %65)
  br label %common.ret
}

define void @TypeChecker_declare_function_within_module(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Function, ptr null, i32 1) to i32))
  call void @Function_constructor(ptr %3)
  %memberidx = getelementptr inbounds %Function, ptr %3, i32 0, i32 6
  %memberidx1 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i32 0, i32 4
  %4 = load i1, ptr %memberidx1, align 1
  store i1 %4, ptr %memberidx, align 1
  %5 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Function, ptr %3, i32 0, i32 1
  store ptr %6, ptr %memberidx4, align 8
  %7 = call i1 @TypeChecker_is_constant_in_scope(ptr %0, ptr %6)
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend11, %ifend26, %if.entry9, %if.entry
  ret void

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %6, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 11
  %9 = load ptr, ptr %memberidx5, align 8
  %10 = call ptr %9(ptr %6)
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr %11, ptr @206, ptr %10)
  %13 = load ptr, ptr %11, align 8
  %14 = call ptr @string_from_bytes(ptr %13, i64 %12)
  %15 = load ptr, ptr %1, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx7, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %14, ptr %16)
  br label %common.ret

ifend:                                            ; preds = %2
  %17 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %6)
  %18 = load i64, ptr %17, align 4
  %19 = icmp ne i64 %18, 21
  br i1 %19, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend
  %20 = load ptr, ptr %6, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %20, i32 0, i32 11
  %21 = load ptr, ptr %memberidx12, align 8
  %22 = call ptr %21(ptr %6)
  %23 = alloca ptr, align 8
  %24 = call i64 (ptr, ptr, ...) @asprintf(ptr %23, ptr @207, ptr %22)
  %25 = load ptr, ptr %23, align 8
  %26 = call ptr @string_from_bytes(ptr %25, i64 %24)
  %27 = load ptr, ptr %1, align 8
  %memberidx14 = getelementptr inbounds %Token, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx14, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %26, ptr %28)
  br label %common.ret

ifend11:                                          ; preds = %ifend
  %fnc_scope = alloca ptr, align 8
  %29 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %0)
  store ptr %29, ptr %fnc_scope, align 8
  %memberidx15 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %30 = load ptr, ptr %29, align 8
  store ptr %30, ptr %memberidx15, align 8
  %memberidx17 = getelementptr inbounds %Function, ptr %3, i32 0, i32 2
  %31 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FunctionArg_, ptr null, i32 1) to i32))
  call void @Array_FunctionArg__constructor(ptr %31, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx18 = getelementptr inbounds %Array_FunctionArg_, ptr %31, i32 0, i32 1
  %memberidx19 = getelementptr inbounds %Array_FunctionArg_, ptr %31, i32 0, i32 2
  store i64 0, ptr %memberidx19, align 4
  store ptr %31, ptr %memberidx17, align 8
  %memberidx20 = getelementptr inbounds %Function, ptr %3, i32 0, i32 4
  %memberidx21 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i32 0, i32 1
  %32 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i32 0, i32 3
  %33 = load ptr, ptr %memberidx22, align 8
  %34 = call ptr @TypeChecker_init_function_signature(ptr %0, ptr %32, ptr %33, ptr %31)
  store ptr %34, ptr %memberidx20, align 8
  %35 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %35, label %common.ret, label %ifend26

ifend26:                                          ; preds = %ifend11
  %36 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarId, ptr null, i32 1) to i32))
  %memberidx28 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  %37 = load i64, ptr %memberidx28, align 4
  %38 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx29 = getelementptr inbounds %Module, ptr %38, i32 0, i32 5
  %39 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds %Array_Function_, ptr %39, i32 0, i32 2
  %40 = load i64, ptr %memberidx30, align 4
  call void @VarId_constructor(ptr %36, i64 0, i64 %37, i64 %40)
  store ptr %36, ptr %3, align 8
  %41 = load ptr, ptr %fnc_scope, align 8
  %memberidx32 = getelementptr inbounds %Scope, ptr %41, i32 0, i32 5
  %42 = load ptr, ptr %memberidx32, align 8
  store ptr %42, ptr %memberidx15, align 8
  %memberidx33 = getelementptr inbounds %Function, ptr %3, i32 0, i32 5
  %43 = load ptr, ptr %fnc_scope, align 8
  %44 = load ptr, ptr %43, align 8
  store ptr %44, ptr %memberidx33, align 8
  %module_scope = alloca ptr, align 8
  %45 = call ptr @TypeChecker_get_current_module_global_scope(ptr %0)
  store ptr %45, ptr %module_scope, align 8
  %46 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx35 = getelementptr inbounds %Module, ptr %46, i32 0, i32 5
  %47 = load ptr, ptr %memberidx35, align 8
  %48 = load ptr, ptr %47, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %48, i32 0, i32 2
  %49 = load ptr, ptr %memberidx36, align 8
  call void %49(ptr %47, ptr %3)
  %50 = load ptr, ptr %module_scope, align 8
  %memberidx37 = getelementptr inbounds %Scope, ptr %50, i32 0, i32 3
  %51 = load ptr, ptr %memberidx37, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %memberidx4, align 8
  %55 = load ptr, ptr %3, align 8
  call void %53(ptr %51, ptr %54, ptr %55)
  br label %common.ret
}

define ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = call ptr @bin_op_to_op_overload_name(i64 %4)
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr @get_class_from_type(ptr %6, ptr %7)
  %memberidx3 = getelementptr inbounds %Class, ptr %8, i32 0, i32 6
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %9, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = call ptr %11(ptr %9, ptr %5)
  %13 = icmp eq ptr %12, null
  br i1 %13, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %3, %ifend15, %if.entry13
  %common.ret.op = phi ptr [ null, %if.entry13 ], [ %50, %ifend15 ], [ null, %3 ], [ null, %ifend ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %method_type = alloca ptr, align 8
  %14 = load ptr, ptr %memberidx1, align 8
  %15 = call ptr @get_class_prop_type(ptr %14, ptr %12)
  store ptr %15, ptr %method_type, align 8
  %arg_type = alloca ptr, align 8
  %memberidx6 = getelementptr inbounds %FunctionType, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx6, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i32 0, i32 5
  %18 = load ptr, ptr %memberidx7, align 8
  %19 = call ptr %18(ptr %16, i64 0)
  store ptr %19, ptr %arg_type, align 8
  %right = alloca ptr, align 8
  %memberidx8 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 5
  %20 = load ptr, ptr %memberidx8, align 8
  %21 = call ptr @TypeChecker_check_expression(ptr %0, ptr %19, ptr %20)
  store ptr %21, ptr %right, align 8
  %22 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %22, label %common.ret, label %ifend11

ifend11:                                          ; preds = %ifend
  %23 = load ptr, ptr %arg_type, align 8
  %24 = load ptr, ptr %right, align 8
  %memberidx12 = getelementptr inbounds %Expression, ptr %24, i32 0, i32 3
  %25 = load ptr, ptr %memberidx12, align 8
  %26 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %23, ptr %25)
  %27 = xor i1 %26, true
  br i1 %27, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend11
  %28 = load ptr, ptr %arg_type, align 8
  %29 = call ptr @TypeChecker_dump_type(ptr %0, ptr %28)
  %30 = load ptr, ptr %29, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i32 0, i32 11
  %31 = load ptr, ptr %memberidx16, align 8
  %32 = call ptr %31(ptr %29)
  %33 = load ptr, ptr %right, align 8
  %memberidx17 = getelementptr inbounds %Expression, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx17, align 8
  %35 = call ptr @TypeChecker_dump_type(ptr %0, ptr %34)
  %36 = load ptr, ptr %35, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 11
  %37 = load ptr, ptr %memberidx18, align 8
  %38 = call ptr %37(ptr %35)
  %39 = alloca ptr, align 8
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr %39, ptr @274, ptr %32, ptr %38)
  %41 = load ptr, ptr %39, align 8
  %42 = call ptr @string_from_bytes(ptr %41, i64 %40)
  %43 = load ptr, ptr %memberidx8, align 8
  %44 = load ptr, ptr %43, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %42, ptr %44)
  br label %common.ret

ifend15:                                          ; preds = %ifend11
  %member_exp = alloca ptr, align 8
  %45 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %46 = load ptr, ptr %method_type, align 8
  call void @MemberExpression_constructor(ptr %45, ptr %1, ptr %12, ptr %46)
  store ptr %45, ptr %member_exp, align 8
  %args = alloca ptr, align 8
  %47 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %47, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx21 = getelementptr inbounds %Array_Expression_, ptr %47, i32 0, i32 1
  %48 = load ptr, ptr %memberidx21, align 8
  %49 = load ptr, ptr %right, align 8
  store ptr %49, ptr %48, align 8
  %memberidx22 = getelementptr inbounds %Array_Expression_, ptr %47, i32 0, i32 2
  store i64 1, ptr %memberidx22, align 4
  store ptr %47, ptr %args, align 8
  %50 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %51 = load ptr, ptr %member_exp, align 8
  %52 = load ptr, ptr %args, align 8
  %53 = load ptr, ptr %method_type, align 8
  %memberidx23 = getelementptr inbounds %FunctionType, ptr %53, i32 0, i32 2
  %54 = load ptr, ptr %memberidx23, align 8
  call void @CallExpression_constructor(ptr %50, ptr %51, ptr %52, ptr %54)
  br label %common.ret
}

define ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @get_class_from_type(ptr %4, ptr %5)
  %memberidx2 = getelementptr inbounds %Class, ptr %6, i32 0, i32 6
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = call ptr @string_from_bytes(ptr @224, i64 11)
  %11 = call ptr %9(ptr %7, ptr %10)
  %12 = icmp eq ptr %11, null
  br i1 %12, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend14, %if.entry12, %if.entry
  %common.ret.op = phi ptr [ null, %if.entry ], [ null, %if.entry12 ], [ %56, %ifend14 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx4 = getelementptr inbounds %Class, ptr %6, i32 0, i32 1
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 11
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = call ptr %15(ptr %13)
  %17 = alloca ptr, align 8
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr %17, ptr @322, ptr %16)
  %19 = load ptr, ptr %17, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %20, ptr %19, i64 %18)
  %21 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %20, ptr %21)
  br label %common.ret

ifend:                                            ; preds = %3
  %method_type = alloca ptr, align 8
  %22 = load ptr, ptr %memberidx, align 8
  %23 = call ptr @get_class_prop_type(ptr %22, ptr %11)
  store ptr %23, ptr %method_type, align 8
  %arg_type = alloca ptr, align 8
  %memberidx8 = getelementptr inbounds %FunctionType, ptr %23, i32 0, i32 1
  %24 = load ptr, ptr %memberidx8, align 8
  %25 = load ptr, ptr %24, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %25, i32 0, i32 5
  %26 = load ptr, ptr %memberidx9, align 8
  %27 = call ptr %26(ptr %24, i64 0)
  store ptr %27, ptr %arg_type, align 8
  %index = alloca ptr, align 8
  %memberidx10 = getelementptr inbounds %ExpressionIndexNode, ptr %2, i32 0, i32 4
  %28 = load ptr, ptr %memberidx10, align 8
  %29 = call ptr @TypeChecker_check_expression(ptr %0, ptr %27, ptr %28)
  store ptr %29, ptr %index, align 8
  %30 = load ptr, ptr %arg_type, align 8
  %memberidx11 = getelementptr inbounds %Expression, ptr %29, i32 0, i32 3
  %31 = load ptr, ptr %memberidx11, align 8
  %32 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %30, ptr %31)
  %33 = xor i1 %32, true
  br i1 %33, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %ifend
  %34 = load ptr, ptr %arg_type, align 8
  %35 = call ptr @TypeChecker_dump_type(ptr %0, ptr %34)
  %36 = load ptr, ptr %35, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 11
  %37 = load ptr, ptr %memberidx15, align 8
  %38 = call ptr %37(ptr %35)
  %39 = load ptr, ptr %index, align 8
  %memberidx16 = getelementptr inbounds %Expression, ptr %39, i32 0, i32 3
  %40 = load ptr, ptr %memberidx16, align 8
  %41 = call ptr @TypeChecker_dump_type(ptr %0, ptr %40)
  %42 = load ptr, ptr %41, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i32 0, i32 11
  %43 = load ptr, ptr %memberidx17, align 8
  %44 = call ptr %43(ptr %41)
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr %45, ptr @274, ptr %38, ptr %44)
  %47 = load ptr, ptr %45, align 8
  %48 = call ptr @string_from_bytes(ptr %47, i64 %46)
  %49 = load ptr, ptr %memberidx10, align 8
  %50 = load ptr, ptr %49, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %48, ptr %50)
  br label %common.ret

ifend14:                                          ; preds = %ifend
  %member_expr = alloca ptr, align 8
  %51 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %52 = load ptr, ptr %method_type, align 8
  call void @MemberExpression_constructor(ptr %51, ptr %1, ptr %11, ptr %52)
  store ptr %51, ptr %member_expr, align 8
  %args = alloca ptr, align 8
  %53 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %53, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx20 = getelementptr inbounds %Array_Expression_, ptr %53, i32 0, i32 1
  %54 = load ptr, ptr %memberidx20, align 8
  %55 = load ptr, ptr %index, align 8
  store ptr %55, ptr %54, align 8
  %memberidx21 = getelementptr inbounds %Array_Expression_, ptr %53, i32 0, i32 2
  store i64 1, ptr %memberidx21, align 4
  store ptr %53, ptr %args, align 8
  %56 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %57 = load ptr, ptr %member_expr, align 8
  %58 = load ptr, ptr %args, align 8
  %59 = load ptr, ptr %method_type, align 8
  %memberidx22 = getelementptr inbounds %FunctionType, ptr %59, i32 0, i32 2
  %60 = load ptr, ptr %memberidx22, align 8
  call void @CallExpression_constructor(ptr %56, ptr %57, ptr %58, ptr %60)
  br label %common.ret
}

define void @IndexExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  call void @Expression_constructor(ptr %0, i64 13)
  %memberidx = getelementptr inbounds %IndexExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IndexExpression, ptr %0, i32 0, i32 5
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %3, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_check_index_expr(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @Type_unknown()
  %memberidx = getelementptr inbounds %ExpressionIndexNode, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @TypeChecker_check_expression(ptr %0, ptr %4, ptr %5)
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call i1 @is_object(ptr %7)
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %else20, %ifend16, %if.entry7, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %if.entry7 ], [ %27, %ifend16 ], [ null, %else20 ], [ null, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %9 = call ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %6, ptr %2)
  br label %common.ret

ifend:                                            ; preds = %3
  %index = alloca ptr, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %10, i64 7)
  %memberidx2 = getelementptr inbounds %ExpressionIndexNode, ptr %2, i32 0, i32 4
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = call ptr @TypeChecker_check_expression(ptr %0, ptr %10, ptr %11)
  store ptr %12, ptr %index, align 8
  %13 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %13, label %common.ret, label %ifend5

ifend5:                                           ; preds = %ifend
  %14 = load ptr, ptr %index, align 8
  %memberidx6 = getelementptr inbounds %Expression, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = call i1 @is_int(ptr %15)
  %17 = xor i1 %16, true
  br i1 %17, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %ifend5
  %18 = call ptr @string_from_bytes(ptr @323, i64 34)
  %19 = load ptr, ptr %memberidx2, align 8
  %20 = load ptr, ptr %19, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %18, ptr %20)
  br label %common.ret

ifend9:                                           ; preds = %ifend5
  %value_type = alloca ptr, align 8
  %21 = call ptr @Type_unknown()
  store ptr %21, ptr %value_type, align 8
  %root_type = alloca ptr, align 8
  %22 = load ptr, ptr %memberidx1, align 8
  store ptr %22, ptr %root_type, align 8
  %23 = load i64, ptr %22, align 4
  %24 = icmp eq i64 %23, 15
  br i1 %24, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend9
  %memberidx17 = getelementptr inbounds %PointerType, ptr %22, i32 0, i32 1
  %25 = load ptr, ptr %memberidx17, align 8
  store ptr %25, ptr %value_type, align 8
  br label %ifend16

else15:                                           ; preds = %ifend9
  %26 = icmp eq i64 %23, 16
  br i1 %26, label %if.entry19, label %else20

ifend16:                                          ; preds = %if.entry19, %if.entry14
  %27 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IndexExpression, ptr null, i32 1) to i32))
  %28 = load ptr, ptr %index, align 8
  %29 = load ptr, ptr %value_type, align 8
  call void @IndexExpression_constructor(ptr %27, ptr %6, ptr %28, ptr %29)
  br label %common.ret

if.entry19:                                       ; preds = %else15
  %memberidx22 = getelementptr inbounds %ArrayType, ptr %22, i32 0, i32 1
  %30 = load ptr, ptr %memberidx22, align 8
  store ptr %30, ptr %value_type, align 8
  br label %ifend16

else20:                                           ; preds = %else15
  %31 = call ptr @TypeChecker_dump_type(ptr %0, ptr %22)
  %32 = load ptr, ptr %31, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 11
  %33 = load ptr, ptr %memberidx23, align 8
  %34 = call ptr %33(ptr %31)
  %35 = alloca ptr, align 8
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr %35, ptr @324, ptr %34)
  %37 = load ptr, ptr %35, align 8
  %38 = call ptr @string_from_bytes(ptr %37, i64 %36)
  %39 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %38, ptr %39)
  br label %common.ret
}

define ptr @TypeChecker_check_block(ptr %0, ptr %1) {
  %3 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %3, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %2, %for.end
  %common.ret.op = phi ptr [ %18, %for.end ], [ null, %2 ], [ null, %for.body ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %block = alloca ptr, align 8
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Block, ptr null, i32 1) to i32))
  call void @Block_constructor(ptr %4)
  store ptr %4, ptr %block, align 8
  %new_scope = alloca ptr, align 8
  %5 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %0)
  store ptr %5, ptr %new_scope, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %6 = load ptr, ptr %5, align 8
  store ptr %6, ptr %memberidx, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend40, %ifend
  %7 = load i64, ptr %i, align 4
  %memberidx2 = getelementptr inbounds %BlockNode, ptr %1, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_StatementNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx3, align 4
  %10 = icmp slt i64 %7, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %stmt = alloca ptr, align 8
  %11 = load ptr, ptr %8, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = call ptr %12(ptr %8, i64 %7)
  %14 = call ptr @TypeChecker_check_statement(ptr %0, ptr %13)
  store ptr %14, ptr %stmt, align 8
  %15 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %15, label %common.ret, label %ifend8

for.end:                                          ; preds = %if.entry38, %if.entry33, %if.entry28, %if.entry12, %for.cond
  %16 = load ptr, ptr %new_scope, align 8
  %memberidx43 = getelementptr inbounds %Scope, ptr %16, i32 0, i32 5
  %17 = load ptr, ptr %memberidx43, align 8
  store ptr %17, ptr %memberidx, align 8
  %18 = load ptr, ptr %block, align 8
  br label %common.ret

ifend8:                                           ; preds = %for.body
  %19 = load ptr, ptr %block, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = load ptr, ptr %stmt, align 8
  call void %22(ptr %20, ptr %23)
  %24 = load ptr, ptr %stmt, align 8
  %25 = load i64, ptr %24, align 4
  %26 = icmp eq i64 %25, 7
  br i1 %26, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %ifend8
  %27 = load ptr, ptr %block, align 8
  %memberidx15 = getelementptr inbounds %Block, ptr %27, i32 0, i32 1
  store i1 true, ptr %memberidx15, align 1
  br label %for.end

ifend14:                                          ; preds = %ifend8
  %28 = icmp eq i64 %25, 0
  br i1 %28, label %if.entry17, label %ifend19

if.entry17:                                       ; preds = %ifend14
  %if_stmt = alloca ptr, align 8
  store ptr %24, ptr %if_stmt, align 8
  %memberidx20 = getelementptr inbounds %IfStatement, ptr %24, i32 0, i32 3
  %29 = load ptr, ptr %memberidx20, align 8
  %30 = icmp ne ptr %29, null
  br i1 %30, label %if.entry21, label %ifend19

ifend19:                                          ; preds = %if.entry21, %if.entry17, %ifend14
  %31 = load ptr, ptr %stmt, align 8
  %32 = load i64, ptr %31, align 4
  %33 = icmp eq i64 %32, 5
  br i1 %33, label %if.entry33, label %ifend35

if.entry21:                                       ; preds = %if.entry17
  %memberidx24 = getelementptr inbounds %IfStatement, ptr %24, i32 0, i32 2
  %34 = load ptr, ptr %memberidx24, align 8
  %memberidx25 = getelementptr inbounds %Block, ptr %34, i32 0, i32 1
  %35 = load i1, ptr %memberidx25, align 1
  %memberidx27 = getelementptr inbounds %Block, ptr %29, i32 0, i32 1
  %36 = load i1, ptr %memberidx27, align 1
  %37 = and i1 %35, %36
  br i1 %37, label %if.entry28, label %ifend19

if.entry28:                                       ; preds = %if.entry21
  %38 = load ptr, ptr %block, align 8
  %memberidx31 = getelementptr inbounds %Block, ptr %38, i32 0, i32 1
  store i1 true, ptr %memberidx31, align 1
  br label %for.end

if.entry33:                                       ; preds = %ifend19
  %39 = load ptr, ptr %block, align 8
  %memberidx36 = getelementptr inbounds %Block, ptr %39, i32 0, i32 2
  store i1 true, ptr %memberidx36, align 1
  br label %for.end

ifend35:                                          ; preds = %ifend19
  %40 = icmp eq i64 %32, 6
  br i1 %40, label %if.entry38, label %ifend40

if.entry38:                                       ; preds = %ifend35
  %41 = load ptr, ptr %block, align 8
  %memberidx41 = getelementptr inbounds %Block, ptr %41, i32 0, i32 3
  store i1 true, ptr %memberidx41, align 1
  br label %for.end

ifend40:                                          ; preds = %ifend35
  %42 = load i64, ptr %i, align 4
  %43 = add i64 %42, 1
  store i64 %43, ptr %i, align 4
  br label %for.cond
}

define i1 @TypeChecker_has_errored(ptr %0) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 7
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %2, i32 0, i32 6
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx2, align 4
  %5 = icmp sgt i64 %4, 0
  ret i1 %5
}

define ptr @TypeChecker_check_can_continue(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 8
  %3 = load i1, ptr %memberidx, align 1
  %4 = xor i1 %3, true
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ null, %if.entry ], [ %7, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %5 = call ptr @string_from_bytes(ptr @339, i64 32)
  %6 = load ptr, ptr %1, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %5, ptr %6)
  br label %common.ret

ifend:                                            ; preds = %2
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Statement, ptr null, i32 1) to i32))
  call void @Statement_constructor(ptr %7, i64 5)
  br label %common.ret
}

define void @Generic_constructor(ptr %0, i64 %1, ptr %2) {
  store i64 %1, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %Generic, ptr %0, i32 0, i32 1
  store ptr %2, ptr %memberidx1, align 8
  ret void
}

define void @Map_string_Generic__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_Generic__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_Generic__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_Generic_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_Generic_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_Generic_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_Generic__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_Generic_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_Generic_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_Generic_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_Generic__constructor(ptr %0) {
  store ptr @VTableBucket_string_Generic_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_Generic_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_Generic___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_Generic___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_Generic_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_Generic___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_Generic___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_Generic_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_Generic_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_Generic_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_Generic_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_Generic___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_Generic__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_Generic__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_Generic__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_Generic___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_Generic_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_Generic__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_Generic_, ptr null, i32 1) to i32))
  call void @Bucket_string_Generic__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_Generic_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_Generic_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_Generic__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_Generic__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_Generic_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_Generic_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_Generic_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_Generic_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_Generic_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_Generic__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_Generic__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_Generic_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_Generic_, ptr null, i32 1) to i32))
  call void @Bucket_string_Generic__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @TypeChecker_check_class_body(ptr %0, ptr %1) {
  %3 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %4)
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 21
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend59, %ifend13, %ifend10, %2, %else74, %for.end45, %if.entry34
  ret void

ifend:                                            ; preds = %2
  %declared_class = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = call ptr @get_class_from_type(ptr %8, ptr %5)
  store ptr %9, ptr %declared_class, align 8
  %outer_class = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 3
  %10 = load ptr, ptr %memberidx4, align 8
  store ptr %10, ptr %outer_class, align 8
  %11 = load ptr, ptr %declared_class, align 8
  %12 = load ptr, ptr %11, align 8
  store ptr %12, ptr %memberidx4, align 8
  %13 = load ptr, ptr %declared_class, align 8
  %memberidx7 = getelementptr inbounds %Class, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx7, align 8
  %15 = icmp ne ptr %14, null
  br i1 %15, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend
  call void @TypeChecker_add_inherited_props_to_class(ptr %0, ptr %13, ptr %1)
  br label %ifend10

ifend10:                                          ; preds = %ifend, %if.entry8
  %16 = load ptr, ptr %declared_class, align 8
  call void @TypeChecker_declare_class_fields(ptr %0, ptr %16, ptr %1)
  %17 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %17, label %common.ret, label %ifend13

ifend13:                                          ; preds = %ifend10
  %18 = load ptr, ptr %declared_class, align 8
  call void @TypeChecker_declare_class_methods(ptr %0, ptr %18, ptr %1)
  %19 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %19, label %common.ret, label %ifend16

ifend16:                                          ; preds = %ifend13
  %prop_buckets = alloca ptr, align 8
  %20 = load ptr, ptr %declared_class, align 8
  %memberidx17 = getelementptr inbounds %Class, ptr %20, i32 0, i32 6
  %21 = load ptr, ptr %memberidx17, align 8
  %22 = load ptr, ptr %21, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %memberidx18, align 8
  %24 = call ptr %23(ptr %21)
  store ptr %24, ptr %prop_buckets, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend27, %ifend16
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %prop_buckets, align 8
  %memberidx19 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %26, i32 0, i32 2
  %27 = load i64, ptr %memberidx19, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.entry41

for.body:                                         ; preds = %for.cond
  %prop_id = alloca ptr, align 8
  %29 = load ptr, ptr %26, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %29, i32 0, i32 5
  %30 = load ptr, ptr %memberidx20, align 8
  %31 = call ptr %30(ptr %26, i64 %25)
  %memberidx21 = getelementptr inbounds %Bucket_string_PropId_, ptr %31, i32 0, i32 2
  %32 = load ptr, ptr %memberidx21, align 8
  store ptr %32, ptr %prop_id, align 8
  %prop_name = alloca ptr, align 8
  %33 = load ptr, ptr %prop_buckets, align 8
  %34 = load ptr, ptr %33, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i32 0, i32 5
  %35 = load ptr, ptr %memberidx22, align 8
  %36 = load i64, ptr %i, align 4
  %37 = call ptr %35(ptr %33, i64 %36)
  %memberidx23 = getelementptr inbounds %Bucket_string_PropId_, ptr %37, i32 0, i32 1
  %38 = load ptr, ptr %memberidx23, align 8
  store ptr %38, ptr %prop_name, align 8
  %39 = load ptr, ptr %prop_id, align 8
  %40 = load i64, ptr %39, align 4
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %if.entry25, label %ifend27

if.entry25:                                       ; preds = %for.body
  %prop_method = alloca ptr, align 8
  %42 = load ptr, ptr %memberidx3, align 8
  %43 = call ptr @get_method(ptr %42, ptr %39)
  store ptr %43, ptr %prop_method, align 8
  %memberidx29 = getelementptr inbounds %ClassMethod, ptr %43, i32 0, i32 7
  %44 = load i1, ptr %memberidx29, align 1
  br i1 %44, label %if.entry30, label %ifend27

ifend27:                                          ; preds = %if.entry25, %for.body
  %45 = load i64, ptr %i, align 4
  %46 = add i64 %45, 1
  store i64 %46, ptr %i, align 4
  br label %for.cond

if.entry30:                                       ; preds = %if.entry25
  %47 = load ptr, ptr %declared_class, align 8
  %memberidx33 = getelementptr inbounds %Class, ptr %47, i32 0, i32 3
  %48 = load ptr, ptr %memberidx33, align 8
  %49 = icmp ne ptr %48, null
  br i1 %49, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %if.entry30
  %50 = load ptr, ptr %prop_name, align 8
  %51 = load ptr, ptr %50, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i32 0, i32 11
  %52 = load ptr, ptr %memberidx37, align 8
  %53 = call ptr %52(ptr %50)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr %54, ptr @258, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = call ptr @string_from_bytes(ptr %56, i64 %55)
  %58 = load ptr, ptr %1, align 8
  %memberidx39 = getelementptr inbounds %Token, ptr %58, i32 0, i32 1
  %59 = load ptr, ptr %memberidx39, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %57, ptr %59)
  br label %common.ret

ifend36:                                          ; preds = %if.entry30
  %memberidx40 = getelementptr inbounds %Class, ptr %47, i32 0, i32 10
  store i1 true, ptr %memberidx40, align 1
  br label %for.entry41

for.entry41:                                      ; preds = %for.cond, %ifend36
  store i64 0, ptr %i, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.incr44, %for.entry41
  %60 = load i64, ptr %i, align 4
  %61 = load ptr, ptr %declared_class, align 8
  %memberidx46 = getelementptr inbounds %Class, ptr %61, i32 0, i32 5
  %62 = load ptr, ptr %memberidx46, align 8
  %memberidx47 = getelementptr inbounds %Array_ClassMethod_, ptr %62, i32 0, i32 2
  %63 = load i64, ptr %memberidx47, align 4
  %64 = icmp slt i64 %60, %63
  br i1 %64, label %for.body43, label %for.end45

for.body43:                                       ; preds = %for.cond42
  %method = alloca ptr, align 8
  %65 = load ptr, ptr %62, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %65, i32 0, i32 5
  %66 = load ptr, ptr %memberidx49, align 8
  %67 = call ptr %66(ptr %62, i64 %60)
  store ptr %67, ptr %method, align 8
  %memberidx50 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 5
  %68 = load ptr, ptr %67, align 8
  store ptr %68, ptr %memberidx50, align 8
  %method_node = alloca ptr, align 8
  %memberidx52 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i32 0, i32 4
  %69 = load ptr, ptr %memberidx52, align 8
  %70 = load ptr, ptr %69, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i32 0, i32 5
  %71 = load ptr, ptr %memberidx53, align 8
  %72 = load i64, ptr %i, align 4
  %73 = call ptr %71(ptr %69, i64 %72)
  store ptr %73, ptr %method_node, align 8
  %memberidx54 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %74 = load ptr, ptr %method, align 8
  %memberidx55 = getelementptr inbounds %ClassMethod, ptr %74, i32 0, i32 8
  %75 = load ptr, ptr %memberidx55, align 8
  store ptr %75, ptr %memberidx54, align 8
  %76 = load ptr, ptr %method, align 8
  %memberidx56 = getelementptr inbounds %ClassMethod, ptr %76, i32 0, i32 7
  %77 = load i1, ptr %memberidx56, align 1
  br i1 %77, label %for.incr44, label %ifend59

for.incr44:                                       ; preds = %for.body43, %ifend69
  %78 = load i64, ptr %i, align 4
  %79 = add i64 %78, 1
  store i64 %79, ptr %i, align 4
  br label %for.cond42

for.end45:                                        ; preds = %for.cond42
  %80 = load ptr, ptr %outer_class, align 8
  store ptr %80, ptr %memberidx4, align 8
  br label %common.ret

ifend59:                                          ; preds = %for.body43
  %memberidx60 = getelementptr inbounds %ClassMethod, ptr %76, i32 0, i32 5
  %81 = load ptr, ptr %method_node, align 8
  %memberidx61 = getelementptr inbounds %MethodNode, ptr %81, i32 0, i32 2
  %82 = load ptr, ptr %memberidx61, align 8
  %83 = call ptr @TypeChecker_check_block(ptr %0, ptr %82)
  store ptr %83, ptr %memberidx60, align 8
  %84 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %84, label %common.ret, label %ifend64

ifend64:                                          ; preds = %ifend59
  %85 = load ptr, ptr %method, align 8
  %memberidx65 = getelementptr inbounds %ClassMethod, ptr %85, i32 0, i32 5
  %86 = load ptr, ptr %memberidx65, align 8
  %memberidx66 = getelementptr inbounds %Block, ptr %86, i32 0, i32 1
  %87 = load i1, ptr %memberidx66, align 1
  %88 = xor i1 %87, true
  br i1 %88, label %if.entry67, label %ifend69

if.entry67:                                       ; preds = %ifend64
  %memberidx70 = getelementptr inbounds %ClassMethod, ptr %85, i32 0, i32 4
  %89 = load ptr, ptr %memberidx70, align 8
  %memberidx71 = getelementptr inbounds %FunctionType, ptr %89, i32 0, i32 2
  %90 = load ptr, ptr %memberidx71, align 8
  %91 = load i64, ptr %90, align 4
  %92 = icmp eq i64 %91, 12
  br i1 %92, label %if.entry73, label %else74

ifend69:                                          ; preds = %ifend64, %if.entry73
  store ptr null, ptr %memberidx50, align 8
  %93 = load ptr, ptr %memberidx3, align 8
  %94 = load ptr, ptr %method, align 8
  %memberidx84 = getelementptr inbounds %ClassMethod, ptr %94, i32 0, i32 8
  %95 = load ptr, ptr %memberidx84, align 8
  %96 = call ptr @get_scope(ptr %93, ptr %95)
  %memberidx85 = getelementptr inbounds %Scope, ptr %96, i32 0, i32 5
  %97 = load ptr, ptr %memberidx85, align 8
  store ptr %97, ptr %memberidx54, align 8
  br label %for.incr44

if.entry73:                                       ; preds = %if.entry67
  %98 = load ptr, ptr %86, align 8
  %99 = load ptr, ptr %98, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %99, i32 0, i32 2
  %100 = load ptr, ptr %memberidx78, align 8
  %101 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ReturnStatement, ptr null, i32 1) to i32))
  call void @ReturnStatement_constructor(ptr %101)
  call void %100(ptr %98, ptr %101)
  br label %ifend69

else74:                                           ; preds = %if.entry67
  %102 = call ptr @string_from_bytes(ptr @259, i64 38)
  %103 = load ptr, ptr %method_node, align 8
  %memberidx79 = getelementptr inbounds %MethodNode, ptr %103, i32 0, i32 4
  %104 = load ptr, ptr %memberidx79, align 8
  %105 = load ptr, ptr %104, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %102, ptr %105)
  br label %common.ret
}

define ptr @TypeChecker_check_condition(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %3)
  %4 = call ptr @Type_unknown()
  %5 = call ptr @TypeChecker_check_expression(ptr %0, ptr %4, ptr %1)
  %6 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %true_block, %false_block, %2
  %common.ret.op = phi ptr [ null, %2 ], [ %10, %true_block ], [ %5, %false_block ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call i1 @is_bool(ptr %7)
  %9 = xor i1 %8, true
  br i1 %9, label %true_block, label %false_block

true_block:                                       ; preds = %ifend
  %10 = call ptr @cast_exp_to_type(ptr %5, ptr %3)
  br label %common.ret

false_block:                                      ; preds = %ifend
  br label %common.ret
}

define ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 7
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = icmp ne ptr %2, null
  %7 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 13
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = call ptr @string_from_bytes(ptr @205, i64 1)
  %10 = call i1 %8(ptr %1, ptr %9)
  %11 = xor i1 %10, true
  %12 = and i1 %6, %11
  br i1 %12, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %13 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx3 = getelementptr inbounds %Module, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = call ptr @Path_dirname(ptr %14)
  %16 = call ptr @Path_join(ptr %15, ptr %1)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %filepath.0 = phi ptr [ %16, %if.entry ], [ %1, %3 ]
  %file_id = alloca ptr, align 8
  %17 = load ptr, ptr %memberidx, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx5, align 8
  %20 = call ptr %19(ptr %17, ptr %filepath.0)
  store ptr %20, ptr %file_id, align 8
  %21 = load i64, ptr %20, align 4
  %memberidx7 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %22 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Program, ptr %22, i32 0, i32 1
  %23 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Module_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx9, align 4
  %25 = icmp slt i64 %21, %24
  br i1 %25, label %if.entry10, label %ifend12

common.ret:                                       ; preds = %ifend33, %ifend27, %ifend18, %ifend36, %if.entry16, %if.entry10
  %common.ret.op = phi ptr [ %26, %if.entry10 ], [ null, %if.entry16 ], [ %62, %ifend36 ], [ null, %ifend18 ], [ null, %ifend27 ], [ null, %ifend33 ]
  ret ptr %common.ret.op

if.entry10:                                       ; preds = %ifend
  %26 = call ptr @TypeChecker_get_module(ptr %0, i64 %21)
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %27 = load ptr, ptr %memberidx, align 8
  %28 = load ptr, ptr %27, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 2
  %29 = load ptr, ptr %memberidx15, align 8
  %30 = call i1 %29(ptr %27, ptr %20)
  %31 = xor i1 %30, true
  br i1 %31, label %if.entry16, label %ifend18

if.entry16:                                       ; preds = %ifend12
  %32 = load ptr, ptr %1, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 11
  %33 = load ptr, ptr %memberidx19, align 8
  %34 = call ptr %33(ptr %1)
  %35 = alloca ptr, align 8
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr %35, ptr @39, ptr %34)
  %37 = load ptr, ptr %35, align 8
  %38 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %38, ptr %37, i64 %36)
  call void @TypeChecker_error(ptr %0, i64 3, ptr %38, ptr %2)
  br label %common.ret

ifend18:                                          ; preds = %ifend12
  %lexer = alloca ptr, align 8
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Lexer, ptr null, i32 1) to i32))
  call void @Lexer_constructor(ptr %39)
  store ptr %39, ptr %lexer, align 8
  %tokens = alloca ptr, align 8
  %40 = load ptr, ptr %39, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr }>, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx20, align 8
  %42 = load ptr, ptr %memberidx, align 8
  %memberidx22 = getelementptr inbounds %Compiler, ptr %42, i32 0, i32 3
  %43 = load ptr, ptr %memberidx22, align 8
  %memberidx24 = getelementptr inbounds %Compiler, ptr %42, i32 0, i32 6
  %44 = load ptr, ptr %memberidx24, align 8
  %45 = call ptr %41(ptr %39, ptr %43, ptr %44)
  store ptr %45, ptr %tokens, align 8
  %46 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %46, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend18
  %parser = alloca ptr, align 8
  %47 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Parser, ptr null, i32 1) to i32))
  call void @Parser_constructor(ptr %47)
  store ptr %47, ptr %parser, align 8
  %module_node = alloca ptr, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %tokens, align 8
  %51 = load ptr, ptr %memberidx, align 8
  %memberidx30 = getelementptr inbounds %Compiler, ptr %51, i32 0, i32 6
  %52 = load ptr, ptr %memberidx30, align 8
  %53 = call ptr %49(ptr %47, ptr %50, ptr %52)
  store ptr %53, ptr %module_node, align 8
  %54 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %54, label %common.ret, label %ifend33

ifend33:                                          ; preds = %ifend27
  %module = alloca ptr, align 8
  %55 = load ptr, ptr %module_node, align 8
  %56 = call ptr @TypeChecker_check_module(ptr %0, ptr %55, ptr %filepath.0)
  store ptr %56, ptr %module, align 8
  %57 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %57, label %common.ret, label %ifend36

ifend36:                                          ; preds = %ifend33
  %58 = load ptr, ptr %memberidx, align 8
  %59 = load ptr, ptr %58, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %59, i32 0, i32 2
  %60 = load ptr, ptr %memberidx38, align 8
  %61 = call i1 %60(ptr %58, ptr %5)
  %62 = load ptr, ptr %module, align 8
  br label %common.ret
}

define void @TypeChecker_declare_class_fields(ptr %0, ptr %1, ptr %2) {
for.entry:
  %memberidx = getelementptr inbounds %Class, ptr %1, i32 0, i32 9
  %3 = load i64, ptr %memberidx, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend67, %for.entry
  %current_vtable_index.0 = phi i64 [ %3, %for.entry ], [ %current_vtable_index.1, %ifend67 ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %138, %ifend67 ]
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i32 0, i32 3
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp slt i64 %i.0, %5
  br i1 %6, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %field_node = alloca ptr, align 8
  %7 = load ptr, ptr %4, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx4, align 8
  %9 = call ptr %8(ptr %4, i64 %i.0)
  store ptr %9, ptr %field_node, align 8
  %field = alloca ptr, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassField, ptr null, i32 1) to i32))
  call void @ClassField_constructor(ptr %10)
  store ptr %10, ptr %field, align 8
  %memberidx5 = getelementptr inbounds %ClassField, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %field_node, align 8
  %12 = load ptr, ptr %11, align 8
  %memberidx7 = getelementptr inbounds %IdentifierToken, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx7, align 8
  store ptr %13, ptr %memberidx5, align 8
  %14 = load ptr, ptr %field, align 8
  %memberidx8 = getelementptr inbounds %ClassField, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx8, align 8
  %16 = call i1 @is_operator_overload_name(ptr %15)
  br i1 %16, label %if.entry, label %ifend

common.ret:                                       ; preds = %if.entry65, %ifend, %for.cond, %if.entry89, %if.entry54, %if.entry43, %if.entry31
  ret void

if.entry:                                         ; preds = %for.body
  %17 = load ptr, ptr %field, align 8
  %memberidx9 = getelementptr inbounds %ClassField, ptr %17, i32 0, i32 3
  %18 = load ptr, ptr %memberidx9, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr @string_from_bytes(ptr @240, i64 75)
  %22 = call ptr %20(ptr %18, ptr %21)
  %23 = load ptr, ptr %field_node, align 8
  %24 = load ptr, ptr %23, align 8
  %memberidx12 = getelementptr inbounds %Token, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx12, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %22, ptr %25)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %26 = load ptr, ptr %field, align 8
  %memberidx13 = getelementptr inbounds %ClassField, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %field_node, align 8
  %memberidx14 = getelementptr inbounds %FieldNode, ptr %27, i32 0, i32 1
  %28 = load i64, ptr %memberidx14, align 4
  store i64 %28, ptr %memberidx13, align 4
  %29 = load ptr, ptr %field, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PropId, ptr null, i32 1) to i32))
  %31 = load ptr, ptr %1, align 8
  call void @PropId_constructor(ptr %30, i64 1, ptr %31, i64 %i.0)
  store ptr %30, ptr %29, align 8
  %32 = load ptr, ptr %field, align 8
  %memberidx17 = getelementptr inbounds %ClassField, ptr %32, i32 0, i32 4
  %33 = load ptr, ptr %field_node, align 8
  %memberidx18 = getelementptr inbounds %FieldNode, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx18, align 8
  %35 = call ptr @TypeChecker_check_type(ptr %0, ptr %34)
  store ptr %35, ptr %memberidx17, align 8
  %36 = load ptr, ptr %field, align 8
  %memberidx19 = getelementptr inbounds %ClassField, ptr %36, i32 0, i32 6
  store i64 %current_vtable_index.0, ptr %memberidx19, align 4
  %37 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %37, label %common.ret, label %ifend22

ifend22:                                          ; preds = %ifend
  %possible_prop_id = alloca ptr, align 8
  %memberidx23 = getelementptr inbounds %Class, ptr %1, i32 0, i32 6
  %38 = load ptr, ptr %memberidx23, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %39, i32 0, i32 1
  %40 = load ptr, ptr %memberidx24, align 8
  %41 = load ptr, ptr %field, align 8
  %memberidx25 = getelementptr inbounds %ClassField, ptr %41, i32 0, i32 3
  %42 = load ptr, ptr %memberidx25, align 8
  %43 = call ptr %40(ptr %38, ptr %42)
  store ptr %43, ptr %possible_prop_id, align 8
  %44 = icmp ne ptr %43, null
  br i1 %44, label %if.entry26, label %ifend28

if.entry26:                                       ; preds = %ifend22
  %memberidx29 = getelementptr inbounds %PropId, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %memberidx29, align 8
  %46 = load ptr, ptr %1, align 8
  %47 = icmp eq ptr %45, %46
  br i1 %47, label %if.entry31, label %ifend33

ifend28:                                          ; preds = %ifend45, %ifend22
  %48 = load ptr, ptr %field_node, align 8
  %memberidx64 = getelementptr inbounds %FieldNode, ptr %48, i32 0, i32 2
  %49 = load ptr, ptr %memberidx64, align 8
  %50 = icmp ne ptr %49, null
  br i1 %50, label %if.entry65, label %else66

if.entry31:                                       ; preds = %if.entry26
  %51 = load ptr, ptr %field, align 8
  %memberidx34 = getelementptr inbounds %ClassField, ptr %51, i32 0, i32 3
  %52 = load ptr, ptr %memberidx34, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i32 0, i32 11
  %54 = load ptr, ptr %memberidx35, align 8
  %55 = call ptr %54(ptr %52)
  %memberidx36 = getelementptr inbounds %Class, ptr %1, i32 0, i32 1
  %56 = load ptr, ptr %memberidx36, align 8
  %57 = load ptr, ptr %56, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %57, i32 0, i32 11
  %58 = load ptr, ptr %memberidx37, align 8
  %59 = call ptr %58(ptr %56)
  %60 = alloca ptr, align 8
  %61 = call i64 (ptr, ptr, ...) @asprintf(ptr %60, ptr @241, ptr %55, ptr %59)
  %62 = load ptr, ptr %60, align 8
  %63 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %63, ptr %62, i64 %61)
  %64 = load ptr, ptr %field_node, align 8
  %65 = load ptr, ptr %64, align 8
  %memberidx39 = getelementptr inbounds %Token, ptr %65, i32 0, i32 1
  %66 = load ptr, ptr %memberidx39, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %63, ptr %66)
  br label %common.ret

ifend33:                                          ; preds = %if.entry26
  %parent_prop_type = alloca ptr, align 8
  %memberidx40 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %67 = load ptr, ptr %memberidx40, align 8
  %68 = call ptr @get_class_prop_type(ptr %67, ptr %43)
  store ptr %68, ptr %parent_prop_type, align 8
  %parent_prop_visibility = alloca i64, align 8
  %69 = load ptr, ptr %memberidx40, align 8
  %70 = load ptr, ptr %possible_prop_id, align 8
  %71 = call i64 @get_class_prop_visibility(ptr %69, ptr %70)
  store i64 %71, ptr %parent_prop_visibility, align 4
  %72 = load ptr, ptr %parent_prop_type, align 8
  %73 = load ptr, ptr %field, align 8
  %memberidx42 = getelementptr inbounds %ClassField, ptr %73, i32 0, i32 4
  %74 = load ptr, ptr %memberidx42, align 8
  %75 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %72, ptr %74)
  %76 = xor i1 %75, true
  br i1 %76, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %ifend33
  %77 = load ptr, ptr %field, align 8
  %memberidx46 = getelementptr inbounds %ClassField, ptr %77, i32 0, i32 3
  %78 = load ptr, ptr %memberidx46, align 8
  %79 = load ptr, ptr %78, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %79, i32 0, i32 11
  %80 = load ptr, ptr %memberidx47, align 8
  %81 = call ptr %80(ptr %78)
  %memberidx48 = getelementptr inbounds %Class, ptr %1, i32 0, i32 1
  %82 = load ptr, ptr %memberidx48, align 8
  %83 = load ptr, ptr %82, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %83, i32 0, i32 11
  %84 = load ptr, ptr %memberidx49, align 8
  %85 = call ptr %84(ptr %82)
  %86 = load ptr, ptr %parent_prop_type, align 8
  %87 = call ptr @TypeChecker_dump_type(ptr %0, ptr %86)
  %88 = load ptr, ptr %87, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %88, i32 0, i32 11
  %89 = load ptr, ptr %memberidx50, align 8
  %90 = call ptr %89(ptr %87)
  %91 = alloca ptr, align 8
  %92 = call i64 (ptr, ptr, ...) @asprintf(ptr %91, ptr @242, ptr %81, ptr %85, ptr %90)
  %93 = load ptr, ptr %91, align 8
  %94 = call ptr @string_from_bytes(ptr %93, i64 %92)
  %95 = load ptr, ptr %field_node, align 8
  %96 = load ptr, ptr %95, align 8
  %memberidx52 = getelementptr inbounds %Token, ptr %96, i32 0, i32 1
  %97 = load ptr, ptr %memberidx52, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %94, ptr %97)
  br label %common.ret

ifend45:                                          ; preds = %ifend33
  %98 = load ptr, ptr %field, align 8
  %memberidx53 = getelementptr inbounds %ClassField, ptr %98, i32 0, i32 2
  %99 = load i64, ptr %memberidx53, align 4
  %100 = load i64, ptr %parent_prop_visibility, align 4
  %101 = icmp ne i64 %99, %100
  br i1 %101, label %if.entry54, label %ifend28

if.entry54:                                       ; preds = %ifend45
  %memberidx57 = getelementptr inbounds %ClassField, ptr %98, i32 0, i32 3
  %102 = load ptr, ptr %memberidx57, align 8
  %103 = load ptr, ptr %102, align 8
  %memberidx58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %103, i32 0, i32 11
  %104 = load ptr, ptr %memberidx58, align 8
  %105 = call ptr %104(ptr %102)
  %memberidx59 = getelementptr inbounds %Class, ptr %1, i32 0, i32 1
  %106 = load ptr, ptr %memberidx59, align 8
  %107 = load ptr, ptr %106, align 8
  %memberidx60 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %107, i32 0, i32 11
  %108 = load ptr, ptr %memberidx60, align 8
  %109 = call ptr %108(ptr %106)
  %110 = load i64, ptr %parent_prop_visibility, align 4
  %111 = call ptr @dump_access(i64 %110)
  %112 = load ptr, ptr %111, align 8
  %memberidx61 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %112, i32 0, i32 11
  %113 = load ptr, ptr %memberidx61, align 8
  %114 = call ptr %113(ptr %111)
  %115 = alloca ptr, align 8
  %116 = call i64 (ptr, ptr, ...) @asprintf(ptr %115, ptr @243, ptr %105, ptr %109, ptr %114)
  %117 = load ptr, ptr %115, align 8
  %118 = call ptr @string_from_bytes(ptr %117, i64 %116)
  %119 = load ptr, ptr %field_node, align 8
  %120 = load ptr, ptr %119, align 8
  %memberidx63 = getelementptr inbounds %Token, ptr %120, i32 0, i32 1
  %121 = load ptr, ptr %memberidx63, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %118, ptr %121)
  br label %common.ret

if.entry65:                                       ; preds = %ifend28
  %122 = load ptr, ptr %field, align 8
  %memberidx68 = getelementptr inbounds %ClassField, ptr %122, i32 0, i32 5
  %memberidx69 = getelementptr inbounds %ClassField, ptr %122, i32 0, i32 4
  %123 = load ptr, ptr %memberidx69, align 8
  %124 = call ptr @TypeChecker_check_expression(ptr %0, ptr %123, ptr %49)
  store ptr %124, ptr %memberidx68, align 8
  %125 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %125, label %common.ret, label %ifend73

else66:                                           ; preds = %ifend28
  %126 = load ptr, ptr %field, align 8
  %memberidx99 = getelementptr inbounds %ClassField, ptr %126, i32 0, i32 1
  store i1 false, ptr %memberidx99, align 1
  %127 = load ptr, ptr %memberidx23, align 8
  %128 = load ptr, ptr %127, align 8
  %129 = load ptr, ptr %128, align 8
  %130 = load ptr, ptr %field, align 8
  %memberidx102 = getelementptr inbounds %ClassField, ptr %130, i32 0, i32 3
  %131 = load ptr, ptr %memberidx102, align 8
  %132 = load ptr, ptr %130, align 8
  call void %129(ptr %127, ptr %131, ptr %132)
  %133 = add i64 %current_vtable_index.0, 1
  br label %ifend67

ifend67:                                          ; preds = %else66, %ifend91
  %current_vtable_index.1 = phi i64 [ %current_vtable_index.0, %ifend91 ], [ %133, %else66 ]
  %memberidx104 = getelementptr inbounds %Class, ptr %1, i32 0, i32 4
  %134 = load ptr, ptr %memberidx104, align 8
  %135 = load ptr, ptr %134, align 8
  %memberidx105 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %135, i32 0, i32 2
  %136 = load ptr, ptr %memberidx105, align 8
  %137 = load ptr, ptr %field, align 8
  call void %136(ptr %134, ptr %137)
  %138 = add i64 %i.0, 1
  br label %for.cond

ifend73:                                          ; preds = %if.entry65
  %139 = load ptr, ptr %field, align 8
  %memberidx74 = getelementptr inbounds %ClassField, ptr %139, i32 0, i32 4
  %140 = load ptr, ptr %memberidx74, align 8
  %memberidx75 = getelementptr inbounds %ClassField, ptr %139, i32 0, i32 5
  %141 = load ptr, ptr %memberidx75, align 8
  %memberidx76 = getelementptr inbounds %Expression, ptr %141, i32 0, i32 3
  %142 = load ptr, ptr %memberidx76, align 8
  %143 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %140, ptr %142)
  %144 = xor i1 %143, true
  br i1 %144, label %if.entry77, label %ifend79

if.entry77:                                       ; preds = %ifend73
  %145 = load ptr, ptr %field, align 8
  %memberidx80 = getelementptr inbounds %ClassField, ptr %145, i32 0, i32 4
  %146 = load ptr, ptr %memberidx80, align 8
  %147 = call ptr @TypeChecker_dump_type(ptr %0, ptr %146)
  %148 = load ptr, ptr %147, align 8
  %memberidx81 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %148, i32 0, i32 11
  %149 = load ptr, ptr %memberidx81, align 8
  %150 = call ptr %149(ptr %147)
  %151 = load ptr, ptr %field, align 8
  %memberidx82 = getelementptr inbounds %ClassField, ptr %151, i32 0, i32 5
  %152 = load ptr, ptr %memberidx82, align 8
  %memberidx83 = getelementptr inbounds %Expression, ptr %152, i32 0, i32 3
  %153 = load ptr, ptr %memberidx83, align 8
  %154 = call ptr @TypeChecker_dump_type(ptr %0, ptr %153)
  %155 = load ptr, ptr %154, align 8
  %memberidx84 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %155, i32 0, i32 11
  %156 = load ptr, ptr %memberidx84, align 8
  %157 = call ptr %156(ptr %154)
  %158 = alloca ptr, align 8
  %159 = call i64 (ptr, ptr, ...) @asprintf(ptr %158, ptr @244, ptr %150, ptr %157)
  %160 = load ptr, ptr %158, align 8
  %161 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %161, ptr %160, i64 %159)
  %162 = load ptr, ptr %field_node, align 8
  %memberidx85 = getelementptr inbounds %FieldNode, ptr %162, i32 0, i32 2
  %163 = load ptr, ptr %memberidx85, align 8
  %164 = load ptr, ptr %163, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %161, ptr %164)
  br label %ifend79

ifend79:                                          ; preds = %ifend73, %if.entry77
  %165 = load ptr, ptr %field, align 8
  %memberidx87 = getelementptr inbounds %ClassField, ptr %165, i32 0, i32 5
  %166 = load ptr, ptr %memberidx87, align 8
  %memberidx88 = getelementptr inbounds %Expression, ptr %166, i32 0, i32 1
  %167 = load i1, ptr %memberidx88, align 1
  %168 = xor i1 %167, true
  br i1 %168, label %if.entry89, label %ifend91

if.entry89:                                       ; preds = %ifend79
  %169 = call ptr @string_from_bytes(ptr @245, i64 45)
  %170 = load ptr, ptr %field_node, align 8
  %memberidx92 = getelementptr inbounds %FieldNode, ptr %170, i32 0, i32 2
  %171 = load ptr, ptr %memberidx92, align 8
  %172 = load ptr, ptr %171, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %169, ptr %172)
  br label %common.ret

ifend91:                                          ; preds = %ifend79
  %memberidx94 = getelementptr inbounds %ClassField, ptr %165, i32 0, i32 1
  store i1 true, ptr %memberidx94, align 1
  %memberidx95 = getelementptr inbounds %Class, ptr %1, i32 0, i32 7
  %173 = load ptr, ptr %memberidx95, align 8
  %174 = load ptr, ptr %173, align 8
  %175 = load ptr, ptr %174, align 8
  %176 = load ptr, ptr %field, align 8
  %memberidx97 = getelementptr inbounds %ClassField, ptr %176, i32 0, i32 3
  %177 = load ptr, ptr %memberidx97, align 8
  %178 = load ptr, ptr %176, align 8
  call void %175(ptr %173, ptr %177, ptr %178)
  br label %ifend67
}

define ptr @TypeChecker_get_current_module_global_scope(ptr %0) {
  %2 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx = getelementptr inbounds %Module, ptr %2, i32 0, i32 7
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %3, i64 0)
  ret ptr %6
}

define ptr @TypeChecker_get_current_function_type(ptr %0) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %3 = icmp ne ptr %2, null
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %5, %if.entry ], [ %7, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr @get_class_prop_type(ptr %4, ptr %2)
  br label %common.ret

ifend:                                            ; preds = %1
  %6 = call ptr @TypeChecker_get_current_function(ptr %0)
  %memberidx3 = getelementptr inbounds %Function, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx3, align 8
  br label %common.ret
}

define ptr @TypeChecker_get_current_function(ptr %0) {
  %2 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx = getelementptr inbounds %Module, ptr %2, i32 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 4
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx3, align 4
  %8 = call ptr %5(ptr %3, i64 %7)
  ret ptr %8
}

define void @TypeChecker_check_module_import(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %ImportNode, ptr %1, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StrToken, ptr %3, i32 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp sgt i64 %5, 0
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %else17, %ifend, %else52, %if.entry
  ret void

if.entry:                                         ; preds = %2
  %7 = call ptr @string_from_bytes(ptr @203, i64 51)
  %8 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx4, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %7, ptr %9)
  br label %common.ret

ifend:                                            ; preds = %2
  %path = alloca ptr, align 8
  %memberidx6 = getelementptr inbounds %StrToken, ptr %3, i32 0, i32 2
  %10 = load ptr, ptr %memberidx6, align 8
  store ptr %10, ptr %path, align 8
  %module = alloca ptr, align 8
  %11 = load ptr, ptr %memberidx, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx8, align 8
  %13 = call ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %10, ptr %12)
  store ptr %13, ptr %module, align 8
  %14 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %14, label %common.ret, label %ifend11

ifend11:                                          ; preds = %ifend
  %global_module_scope = alloca ptr, align 8
  %15 = load ptr, ptr %module, align 8
  %memberidx12 = getelementptr inbounds %Module, ptr %15, i32 0, i32 7
  %16 = load ptr, ptr %memberidx12, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i32 0, i32 5
  %18 = load ptr, ptr %memberidx13, align 8
  %19 = call ptr %18(ptr %16, i64 0)
  store ptr %19, ptr %global_module_scope, align 8
  %20 = load ptr, ptr %1, align 8
  %memberidx15 = getelementptr inbounds %Array_IdentifierToken_, ptr %20, i32 0, i32 2
  %21 = load i64, ptr %memberidx15, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.entry, label %else17

else17:                                           ; preds = %ifend11
  %23 = load ptr, ptr %module, align 8
  call void @TypeChecker_import_all_from_module(ptr %0, ptr %23)
  br label %common.ret

for.entry:                                        ; preds = %ifend11
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %24 = load i64, ptr %i, align 4
  %25 = load ptr, ptr %1, align 8
  %memberidx20 = getelementptr inbounds %Array_IdentifierToken_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx20, align 4
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %name_to_import = alloca ptr, align 8
  %28 = load ptr, ptr %25, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 5
  %29 = load ptr, ptr %memberidx22, align 8
  %30 = call ptr %29(ptr %25, i64 %24)
  %memberidx23 = getelementptr inbounds %IdentifierToken, ptr %30, i32 0, i32 2
  %31 = load ptr, ptr %memberidx23, align 8
  store ptr %31, ptr %name_to_import, align 8
  %renamed_name = alloca ptr, align 8
  store ptr %31, ptr %renamed_name, align 8
  %memberidx24 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 10
  %32 = load ptr, ptr %memberidx24, align 8
  %33 = load ptr, ptr %32, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %33, i32 0, i32 1
  %34 = load ptr, ptr %memberidx25, align 8
  %35 = load ptr, ptr %name_to_import, align 8
  %36 = call ptr %34(ptr %32, ptr %35)
  %37 = icmp ne ptr %36, null
  br i1 %37, label %for.incr, label %ifend28

for.incr:                                         ; preds = %for.body, <badref>, %if.entry51, %if.entry46, %if.entry41, %if.entry36, %if.entry31
  %38 = load i64, ptr %i, align 4
  %39 = add i64 %38, 1
  store i64 %39, ptr %i, align 4
  br label %for.cond

ifend28:                                          ; preds = %for.body
  %class_id = alloca ptr, align 8
  %40 = load ptr, ptr %global_module_scope, align 8
  %memberidx29 = getelementptr inbounds %Scope, ptr %40, i32 0, i32 2
  %41 = load ptr, ptr %memberidx29, align 8
  %42 = load ptr, ptr %41, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %42, i32 0, i32 1
  %43 = load ptr, ptr %memberidx30, align 8
  %44 = load ptr, ptr %name_to_import, align 8
  %45 = call ptr %43(ptr %41, ptr %44)
  store ptr %45, ptr %class_id, align 8
  %46 = icmp ne ptr %45, null
  br i1 %46, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend28
  %47 = load ptr, ptr %renamed_name, align 8
  call void @TypeChecker_add_imported_class_to_module(ptr %0, ptr %47, ptr %45)
  br label %for.incr

ifend33:                                          ; preds = %ifend28
  %enum_id = alloca ptr, align 8
  %48 = load ptr, ptr %global_module_scope, align 8
  %memberidx34 = getelementptr inbounds %Scope, ptr %48, i32 0, i32 4
  %49 = load ptr, ptr %memberidx34, align 8
  %50 = load ptr, ptr %49, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx35, align 8
  %52 = load ptr, ptr %name_to_import, align 8
  %53 = call ptr %51(ptr %49, ptr %52)
  store ptr %53, ptr %enum_id, align 8
  %54 = icmp ne ptr %53, null
  br i1 %54, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %ifend33
  %55 = load ptr, ptr %renamed_name, align 8
  call void @TypeChecker_add_imported_enum_to_module(ptr %0, ptr %55, ptr %53)
  br label %for.incr

ifend38:                                          ; preds = %ifend33
  %var_id = alloca ptr, align 8
  %56 = load ptr, ptr %global_module_scope, align 8
  %memberidx39 = getelementptr inbounds %Scope, ptr %56, i32 0, i32 1
  %57 = load ptr, ptr %memberidx39, align 8
  %58 = load ptr, ptr %57, align 8
  %memberidx40 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %58, i32 0, i32 1
  %59 = load ptr, ptr %memberidx40, align 8
  %60 = load ptr, ptr %name_to_import, align 8
  %61 = call ptr %59(ptr %57, ptr %60)
  store ptr %61, ptr %var_id, align 8
  %62 = icmp ne ptr %61, null
  br i1 %62, label %if.entry41, label %ifend43

if.entry41:                                       ; preds = %ifend38
  %63 = load ptr, ptr %renamed_name, align 8
  call void @TypeChecker_add_imported_var_to_module(ptr %0, ptr %63, ptr %61)
  br label %for.incr

ifend43:                                          ; preds = %ifend38
  %func_id = alloca ptr, align 8
  %64 = load ptr, ptr %global_module_scope, align 8
  %memberidx44 = getelementptr inbounds %Scope, ptr %64, i32 0, i32 3
  %65 = load ptr, ptr %memberidx44, align 8
  %66 = load ptr, ptr %65, align 8
  %memberidx45 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %66, i32 0, i32 1
  %67 = load ptr, ptr %memberidx45, align 8
  %68 = load ptr, ptr %name_to_import, align 8
  %69 = call ptr %67(ptr %65, ptr %68)
  store ptr %69, ptr %func_id, align 8
  %70 = icmp ne ptr %69, null
  br i1 %70, label %if.entry46, label %ifend48

if.entry46:                                       ; preds = %ifend43
  %71 = load ptr, ptr %renamed_name, align 8
  call void @TypeChecker_add_imported_fnc_to_module(ptr %0, ptr %71, ptr %69)
  br label %for.incr

ifend48:                                          ; preds = %ifend43
  %type_alias = alloca ptr, align 8
  %72 = load ptr, ptr %global_module_scope, align 8
  %memberidx49 = getelementptr inbounds %Scope, ptr %72, i32 0, i32 6
  %73 = load ptr, ptr %memberidx49, align 8
  %74 = load ptr, ptr %73, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %74, i32 0, i32 1
  %75 = load ptr, ptr %memberidx50, align 8
  %76 = load ptr, ptr %name_to_import, align 8
  %77 = call ptr %75(ptr %73, ptr %76)
  store ptr %77, ptr %type_alias, align 8
  %78 = icmp ne ptr %77, null
  br i1 %78, label %if.entry51, label %else52

if.entry51:                                       ; preds = %ifend48
  %79 = load ptr, ptr %renamed_name, align 8
  call void @TypeChecker_add_imported_typealias_to_module(ptr %0, ptr %79, ptr %77)
  br label %for.incr

else52:                                           ; preds = %ifend48
  %80 = load ptr, ptr %name_to_import, align 8
  %81 = load ptr, ptr %80, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %81, i32 0, i32 11
  %82 = load ptr, ptr %memberidx54, align 8
  %83 = call ptr %82(ptr %80)
  %84 = load ptr, ptr %path, align 8
  %85 = load ptr, ptr %84, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %85, i32 0, i32 11
  %86 = load ptr, ptr %memberidx55, align 8
  %87 = call ptr %86(ptr %84)
  %88 = alloca ptr, align 8
  %89 = call i64 (ptr, ptr, ...) @asprintf(ptr %88, ptr @204, ptr %83, ptr %87)
  %90 = load ptr, ptr %88, align 8
  %91 = call ptr @string_from_bytes(ptr %90, i64 %89)
  %92 = load ptr, ptr %1, align 8
  %93 = load ptr, ptr %92, align 8
  %memberidx57 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %93, i32 0, i32 5
  %94 = load ptr, ptr %memberidx57, align 8
  %95 = load i64, ptr %i, align 4
  %96 = call ptr %94(ptr %92, i64 %95)
  %memberidx58 = getelementptr inbounds %Token, ptr %96, i32 0, i32 1
  %97 = load ptr, ptr %memberidx58, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %91, ptr %97)
  br label %common.ret
}

define void @MemberExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  call void @Expression_constructor(ptr %0, i64 12)
  %memberidx = getelementptr inbounds %MemberExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %MemberExpression, ptr %0, i32 0, i32 5
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %3, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_check_member_expr(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @Type_unknown()
  %memberidx = getelementptr inbounds %MemberExpressionNode, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @TypeChecker_check_expression(ptr %0, ptr %4, ptr %5)
  %7 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %else84, %ifend69, %else64, %if.entry54, %if.entry46, %if.entry38, %if.entry21, %if.entry13, %ifend6
  %common.ret.op = phi ptr [ %20, %ifend6 ], [ null, %if.entry13 ], [ null, %if.entry21 ], [ null, %if.entry38 ], [ null, %if.entry46 ], [ null, %if.entry54 ], [ null, %else64 ], [ %146, %ifend69 ], [ null, %else84 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %prop_owner_type = alloca ptr, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %8 = load ptr, ptr %memberidx1, align 8
  store ptr %8, ptr %prop_owner_type, align 8
  %prop_name = alloca ptr, align 8
  %memberidx2 = getelementptr inbounds %MemberExpressionNode, ptr %2, i32 0, i32 4
  %9 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %memberidx3, align 8
  store ptr %10, ptr %prop_name, align 8
  %prop_ty = alloca ptr, align 8
  %11 = call ptr @Type_unknown()
  store ptr %11, ptr %prop_ty, align 8
  %parent_class = alloca ptr, align 8
  store ptr null, ptr %parent_class, align 8
  %prop_id = alloca ptr, align 8
  store ptr null, ptr %prop_id, align 8
  %err_msg = alloca ptr, align 8
  store ptr null, ptr %err_msg, align 8
  %12 = load ptr, ptr %prop_owner_type, align 8
  %13 = call i1 @is_object(ptr %12)
  br i1 %13, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %14 = load ptr, ptr %prop_owner_type, align 8
  %15 = load i64, ptr %14, align 4
  %16 = icmp eq i64 %15, 20
  br i1 %16, label %while.entry, label %while.end

else5:                                            ; preds = %ifend
  %17 = load ptr, ptr %prop_owner_type, align 8
  %18 = load i64, ptr %17, align 4
  %19 = icmp eq i64 %18, 18
  br i1 %19, label %if.entry28, label %else29

ifend6:                                           ; preds = %ifend48, %ifend56, %ifend23
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %21 = load ptr, ptr %prop_id, align 8
  %22 = load ptr, ptr %prop_ty, align 8
  call void @MemberExpression_constructor(ptr %20, ptr %6, ptr %21, ptr %22)
  br label %common.ret

while.entry:                                      ; preds = %while.entry, %if.entry4
  %23 = load ptr, ptr %prop_owner_type, align 8
  %memberidx8 = getelementptr inbounds %GenericType, ptr %23, i32 0, i32 3
  %24 = load ptr, ptr %memberidx8, align 8
  store ptr %24, ptr %prop_owner_type, align 8
  %25 = load i64, ptr %24, align 4
  %26 = icmp eq i64 %25, 20
  br i1 %26, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %if.entry4
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %27 = load ptr, ptr %memberidx10, align 8
  %28 = load ptr, ptr %prop_owner_type, align 8
  %29 = call ptr @get_class_from_type(ptr %27, ptr %28)
  store ptr %29, ptr %parent_class, align 8
  %memberidx11 = getelementptr inbounds %Class, ptr %29, i32 0, i32 6
  %30 = load ptr, ptr %memberidx11, align 8
  %31 = load ptr, ptr %30, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %31, i32 0, i32 1
  %32 = load ptr, ptr %memberidx12, align 8
  %33 = load ptr, ptr %prop_name, align 8
  %34 = call ptr %32(ptr %30, ptr %33)
  store ptr %34, ptr %prop_id, align 8
  %35 = icmp eq ptr %34, null
  br i1 %35, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %while.end
  %36 = load ptr, ptr %prop_name, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i32 0, i32 11
  %38 = load ptr, ptr %memberidx16, align 8
  %39 = call ptr %38(ptr %36)
  %40 = load ptr, ptr %parent_class, align 8
  %memberidx17 = getelementptr inbounds %Class, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx17, align 8
  %42 = load ptr, ptr %41, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i32 0, i32 11
  %43 = load ptr, ptr %memberidx18, align 8
  %44 = call ptr %43(ptr %41)
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr %45, ptr @311, ptr %39, ptr %44)
  %47 = load ptr, ptr %45, align 8
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %48, ptr %47, i64 %46)
  %49 = load ptr, ptr %memberidx2, align 8
  %memberidx20 = getelementptr inbounds %Token, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx20, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %48, ptr %50)
  br label %common.ret

ifend15:                                          ; preds = %while.end
  %51 = call ptr @TypeChecker_check_member_access(ptr %0, ptr %34)
  store ptr %51, ptr %err_msg, align 8
  %52 = icmp ne ptr %51, null
  br i1 %52, label %if.entry21, label %ifend23

if.entry21:                                       ; preds = %ifend15
  %53 = load ptr, ptr %memberidx2, align 8
  %memberidx25 = getelementptr inbounds %Token, ptr %53, i32 0, i32 1
  %54 = load ptr, ptr %memberidx25, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %51, ptr %54)
  br label %common.ret

ifend23:                                          ; preds = %ifend15
  %55 = load ptr, ptr %memberidx10, align 8
  %56 = load ptr, ptr %prop_id, align 8
  %57 = call ptr @get_class_prop_type(ptr %55, ptr %56)
  store ptr %57, ptr %prop_ty, align 8
  br label %ifend6

if.entry28:                                       ; preds = %else5
  %var_id = alloca ptr, align 8
  %memberidx31 = getelementptr inbounds %VarAccessExpression, ptr %6, i32 0, i32 4
  %58 = load ptr, ptr %memberidx31, align 8
  store ptr %58, ptr %var_id, align 8
  %59 = load i64, ptr %58, align 4
  %60 = icmp eq i64 %59, 3
  br i1 %60, label %if.entry33, label %else34

else29:                                           ; preds = %else5
  %61 = call i1 @is_pointer(ptr %17)
  br i1 %61, label %if.entry63, label %else64

if.entry33:                                       ; preds = %if.entry28
  %62 = call ptr @TypeChecker_get_class_from_var_id(ptr %0, ptr %58)
  store ptr %62, ptr %parent_class, align 8
  %memberidx36 = getelementptr inbounds %Class, ptr %62, i32 0, i32 7
  %63 = load ptr, ptr %memberidx36, align 8
  %64 = load ptr, ptr %63, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %64, i32 0, i32 1
  %65 = load ptr, ptr %memberidx37, align 8
  %66 = load ptr, ptr %prop_name, align 8
  %67 = call ptr %65(ptr %63, ptr %66)
  store ptr %67, ptr %prop_id, align 8
  %68 = icmp eq ptr %67, null
  br i1 %68, label %if.entry38, label %ifend40

else34:                                           ; preds = %if.entry28
  %parent_enum = alloca ptr, align 8
  %69 = call ptr @TypeChecker_get_enum_from_var_id(ptr %0, ptr %58)
  store ptr %69, ptr %parent_enum, align 8
  %memberidx52 = getelementptr inbounds %Enum, ptr %69, i32 0, i32 3
  %70 = load ptr, ptr %memberidx52, align 8
  %71 = load ptr, ptr %70, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %71, i32 0, i32 1
  %72 = load ptr, ptr %memberidx53, align 8
  %73 = load ptr, ptr %prop_name, align 8
  %74 = call ptr %72(ptr %70, ptr %73)
  store ptr %74, ptr %prop_id, align 8
  %75 = icmp eq ptr %74, null
  br i1 %75, label %if.entry54, label %ifend56

if.entry38:                                       ; preds = %if.entry33
  %76 = load ptr, ptr %prop_name, align 8
  %77 = load ptr, ptr %76, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %77, i32 0, i32 11
  %78 = load ptr, ptr %memberidx41, align 8
  %79 = call ptr %78(ptr %76)
  %80 = load ptr, ptr %parent_class, align 8
  %memberidx42 = getelementptr inbounds %Class, ptr %80, i32 0, i32 1
  %81 = load ptr, ptr %memberidx42, align 8
  %82 = load ptr, ptr %81, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %82, i32 0, i32 11
  %83 = load ptr, ptr %memberidx43, align 8
  %84 = call ptr %83(ptr %81)
  %85 = alloca ptr, align 8
  %86 = call i64 (ptr, ptr, ...) @asprintf(ptr %85, ptr @312, ptr %79, ptr %84)
  %87 = load ptr, ptr %85, align 8
  %88 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %88, ptr %87, i64 %86)
  %89 = load ptr, ptr %memberidx2, align 8
  %memberidx45 = getelementptr inbounds %Token, ptr %89, i32 0, i32 1
  %90 = load ptr, ptr %memberidx45, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %88, ptr %90)
  br label %common.ret

ifend40:                                          ; preds = %if.entry33
  %91 = call ptr @TypeChecker_check_member_access(ptr %0, ptr %67)
  store ptr %91, ptr %err_msg, align 8
  %92 = icmp ne ptr %91, null
  br i1 %92, label %if.entry46, label %ifend48

if.entry46:                                       ; preds = %ifend40
  %93 = load ptr, ptr %memberidx2, align 8
  %memberidx50 = getelementptr inbounds %Token, ptr %93, i32 0, i32 1
  %94 = load ptr, ptr %memberidx50, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %91, ptr %94)
  br label %common.ret

ifend48:                                          ; preds = %ifend40
  %memberidx51 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %95 = load ptr, ptr %memberidx51, align 8
  %96 = load ptr, ptr %prop_id, align 8
  %97 = call ptr @get_class_prop_type(ptr %95, ptr %96)
  store ptr %97, ptr %prop_ty, align 8
  br label %ifend6

if.entry54:                                       ; preds = %else34
  %98 = load ptr, ptr %prop_name, align 8
  %99 = load ptr, ptr %98, align 8
  %memberidx57 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %99, i32 0, i32 11
  %100 = load ptr, ptr %memberidx57, align 8
  %101 = call ptr %100(ptr %98)
  %102 = load ptr, ptr %parent_enum, align 8
  %memberidx58 = getelementptr inbounds %Enum, ptr %102, i32 0, i32 1
  %103 = load ptr, ptr %memberidx58, align 8
  %104 = load ptr, ptr %103, align 8
  %memberidx59 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %104, i32 0, i32 11
  %105 = load ptr, ptr %memberidx59, align 8
  %106 = call ptr %105(ptr %103)
  %107 = alloca ptr, align 8
  %108 = call i64 (ptr, ptr, ...) @asprintf(ptr %107, ptr @313, ptr %101, ptr %106)
  %109 = load ptr, ptr %107, align 8
  %110 = call ptr @string_from_bytes(ptr %109, i64 %108)
  %111 = load ptr, ptr %memberidx2, align 8
  %memberidx61 = getelementptr inbounds %Token, ptr %111, i32 0, i32 1
  %112 = load ptr, ptr %memberidx61, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %110, ptr %112)
  br label %common.ret

ifend56:                                          ; preds = %else34
  %113 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumType, ptr null, i32 1) to i32))
  %114 = load ptr, ptr %parent_enum, align 8
  %115 = load ptr, ptr %114, align 8
  call void @EnumType_constructor(ptr %113, ptr %115)
  store ptr %113, ptr %prop_ty, align 8
  br label %ifend6

if.entry63:                                       ; preds = %else29
  %mem_intrinsic = alloca i64, align 8
  store i64 3, ptr %mem_intrinsic, align 4
  %116 = load ptr, ptr %prop_name, align 8
  %117 = load ptr, ptr %116, align 8
  %memberidx66 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %117, i32 0, i32 4
  %118 = load ptr, ptr %memberidx66, align 8
  %119 = call ptr @string_from_bytes(ptr @314, i64 9)
  %120 = call i1 %118(ptr %116, ptr %119)
  br i1 %120, label %if.entry67, label %else68

else64:                                           ; preds = %else29
  %121 = load ptr, ptr %prop_name, align 8
  %122 = load ptr, ptr %121, align 8
  %memberidx91 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %122, i32 0, i32 11
  %123 = load ptr, ptr %memberidx91, align 8
  %124 = call ptr %123(ptr %121)
  %125 = load ptr, ptr %memberidx1, align 8
  %126 = call ptr @TypeChecker_dump_type(ptr %0, ptr %125)
  %127 = load ptr, ptr %126, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %127, i32 0, i32 11
  %128 = load ptr, ptr %memberidx93, align 8
  %129 = call ptr %128(ptr %126)
  %130 = alloca ptr, align 8
  %131 = call i64 (ptr, ptr, ...) @asprintf(ptr %130, ptr @320, ptr %124, ptr %129)
  %132 = load ptr, ptr %130, align 8
  %133 = call ptr @string_from_bytes(ptr %132, i64 %131)
  %134 = load ptr, ptr %memberidx, align 8
  %135 = load ptr, ptr %134, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %133, ptr %135)
  br label %common.ret

if.entry67:                                       ; preds = %if.entry63
  store i64 3, ptr %mem_intrinsic, align 4
  br label %ifend69

else68:                                           ; preds = %if.entry63
  %136 = load ptr, ptr %prop_name, align 8
  %137 = load ptr, ptr %136, align 8
  %memberidx70 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %137, i32 0, i32 4
  %138 = load ptr, ptr %memberidx70, align 8
  %139 = call ptr @string_from_bytes(ptr @315, i64 9)
  %140 = call i1 %138(ptr %136, ptr %139)
  br i1 %140, label %if.entry71, label %else72

ifend69:                                          ; preds = %if.entry79, %if.entry83, %if.entry75, %if.entry71, %if.entry67
  %intrinsic_call = alloca ptr, align 8
  %141 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicCall, ptr null, i32 1) to i32))
  %142 = load i64, ptr %mem_intrinsic, align 4
  call void @IntrinsicCall_constructor(ptr %141, i64 %142)
  store ptr %141, ptr %intrinsic_call, align 8
  %memberidx89 = getelementptr inbounds %IntrinsicCall, ptr %141, i32 0, i32 5
  %143 = load ptr, ptr %memberidx89, align 8
  %144 = load ptr, ptr %143, align 8
  %memberidx90 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %144, i32 0, i32 2
  %145 = load ptr, ptr %memberidx90, align 8
  call void %145(ptr %143, ptr %6)
  %146 = load ptr, ptr %intrinsic_call, align 8
  br label %common.ret

if.entry71:                                       ; preds = %else68
  store i64 4, ptr %mem_intrinsic, align 4
  br label %ifend69

else72:                                           ; preds = %else68
  %147 = load ptr, ptr %prop_name, align 8
  %148 = load ptr, ptr %147, align 8
  %memberidx74 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %148, i32 0, i32 4
  %149 = load ptr, ptr %memberidx74, align 8
  %150 = call ptr @string_from_bytes(ptr @316, i64 9)
  %151 = call i1 %149(ptr %147, ptr %150)
  br i1 %151, label %if.entry75, label %else76

if.entry75:                                       ; preds = %else72
  store i64 5, ptr %mem_intrinsic, align 4
  br label %ifend69

else76:                                           ; preds = %else72
  %152 = load ptr, ptr %prop_name, align 8
  %153 = load ptr, ptr %152, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %153, i32 0, i32 4
  %154 = load ptr, ptr %memberidx78, align 8
  %155 = call ptr @string_from_bytes(ptr @317, i64 6)
  %156 = call i1 %154(ptr %152, ptr %155)
  br i1 %156, label %if.entry79, label %else80

if.entry79:                                       ; preds = %else76
  store i64 6, ptr %mem_intrinsic, align 4
  br label %ifend69

else80:                                           ; preds = %else76
  %157 = load ptr, ptr %prop_name, align 8
  %158 = load ptr, ptr %157, align 8
  %memberidx82 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %158, i32 0, i32 4
  %159 = load ptr, ptr %memberidx82, align 8
  %160 = call ptr @string_from_bytes(ptr @318, i64 7)
  %161 = call i1 %159(ptr %157, ptr %160)
  br i1 %161, label %if.entry83, label %else84

if.entry83:                                       ; preds = %else80
  store i64 7, ptr %mem_intrinsic, align 4
  br label %ifend69

else84:                                           ; preds = %else80
  %162 = load ptr, ptr %prop_name, align 8
  %163 = load ptr, ptr %162, align 8
  %memberidx86 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %163, i32 0, i32 11
  %164 = load ptr, ptr %memberidx86, align 8
  %165 = call ptr %164(ptr %162)
  %166 = alloca ptr, align 8
  %167 = call i64 (ptr, ptr, ...) @asprintf(ptr %166, ptr @319, ptr %165)
  %168 = load ptr, ptr %166, align 8
  %169 = call ptr @string_from_bytes(ptr %168, i64 %167)
  %170 = load ptr, ptr %memberidx2, align 8
  %memberidx88 = getelementptr inbounds %Token, ptr %170, i32 0, i32 1
  %171 = load ptr, ptr %memberidx88, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %169, ptr %171)
  br label %common.ret
}

define ptr @TypeChecker_check_assignment(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %3, i32 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp ne i64 %5, 19
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %4
  %memberidx1 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call i1 @is_object(ptr %7)
  br i1 %8, label %if.entry2, label %ifend4

ifend:                                            ; preds = %4, %ifend4
  %right.0 = phi ptr [ %18, %ifend4 ], [ %2, %4 ]
  %memberidx9 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %9 = load ptr, ptr %memberidx9, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp eq i64 %10, 18
  br i1 %11, label %if.entry11, label %ifend13

if.entry2:                                        ; preds = %if.entry
  %exp = alloca ptr, align 8
  %12 = call ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr %3)
  store ptr %12, ptr %exp, align 8
  %13 = icmp ne ptr %12, null
  %14 = call i1 @TypeChecker_has_errored(ptr %0)
  %15 = or i1 %13, %14
  br i1 %15, label %if.entry5, label %ifend4

ifend4:                                           ; preds = %if.entry2, %if.entry
  %16 = load ptr, ptr %memberidx1, align 8
  %17 = call ptr @lower_bin_assign_node(ptr %3)
  %18 = call ptr @TypeChecker_check_bin_expr(ptr %0, ptr %16, ptr %17)
  br label %ifend

common.ret:                                       ; preds = %ifend23, %if.entry21, %if.entry15, %if.entry11, %if.entry5
  %common.ret.op = phi ptr [ %19, %if.entry5 ], [ null, %if.entry11 ], [ null, %if.entry15 ], [ null, %if.entry21 ], [ %45, %ifend23 ]
  ret ptr %common.ret.op

if.entry5:                                        ; preds = %if.entry2
  %19 = load ptr, ptr %exp, align 8
  br label %common.ret

if.entry11:                                       ; preds = %ifend
  %20 = call ptr @string_from_bytes(ptr @268, i64 33)
  %21 = load ptr, ptr %3, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %20, ptr %21)
  br label %common.ret

ifend13:                                          ; preds = %ifend
  %22 = call i1 @check_is_var(ptr %1)
  %23 = xor i1 %22, true
  br i1 %23, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %ifend13
  %24 = call ptr @string_from_bytes(ptr @269, i64 35)
  %25 = load ptr, ptr %3, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %24, ptr %25)
  br label %common.ret

ifend17:                                          ; preds = %ifend13
  %26 = load ptr, ptr %memberidx9, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %right.0, i32 0, i32 3
  %27 = load ptr, ptr %memberidx20, align 8
  %28 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %26, ptr %27)
  %29 = xor i1 %28, true
  br i1 %29, label %if.entry21, label %ifend23

if.entry21:                                       ; preds = %ifend17
  %30 = load ptr, ptr %memberidx20, align 8
  %31 = call ptr @TypeChecker_dump_type(ptr %0, ptr %30)
  %32 = load ptr, ptr %31, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 11
  %33 = load ptr, ptr %memberidx25, align 8
  %34 = call ptr %33(ptr %31)
  %35 = load ptr, ptr %memberidx9, align 8
  %36 = call ptr @TypeChecker_dump_type(ptr %0, ptr %35)
  %37 = load ptr, ptr %36, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i32 0, i32 11
  %38 = load ptr, ptr %memberidx27, align 8
  %39 = call ptr %38(ptr %36)
  %40 = alloca ptr, align 8
  %41 = call i64 (ptr, ptr, ...) @asprintf(ptr %40, ptr @270, ptr %34, ptr %39)
  %42 = load ptr, ptr %40, align 8
  %43 = call ptr @string_from_bytes(ptr %42, i64 %41)
  %44 = load ptr, ptr %3, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %43, ptr %44)
  br label %common.ret

ifend23:                                          ; preds = %ifend17
  %45 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %46 = load ptr, ptr %memberidx20, align 8
  call void @BinaryExpression_constructor(ptr %45, ptr %1, i64 19, ptr %right.0, ptr %46, i1 false)
  br label %common.ret
}

define ptr @TypeChecker_init_function_signature(ptr %0, ptr %1, ptr %2, ptr %3) {
for.entry:
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend13, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %46, %ifend13 ]
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %1, i32 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp slt i64 %i.0, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arg = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = call ptr %8(ptr %1, i64 %i.0)
  store ptr %9, ptr %arg, align 8
  %fnc_arg = alloca ptr, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionArg, ptr null, i32 1) to i32))
  call void @FunctionArg_constructor(ptr %10)
  store ptr %10, ptr %fnc_arg, align 8
  %memberidx4 = getelementptr inbounds %FunctionArg, ptr %10, i32 0, i32 5
  %11 = load ptr, ptr %arg, align 8
  %12 = load ptr, ptr %11, align 8
  %memberidx6 = getelementptr inbounds %IdentifierToken, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx6, align 8
  store ptr %13, ptr %memberidx4, align 8
  %14 = load ptr, ptr %fnc_arg, align 8
  %memberidx7 = getelementptr inbounds %FunctionArg, ptr %14, i32 0, i32 6
  store ptr null, ptr %memberidx7, align 8
  %arg_type = alloca ptr, align 8
  %15 = call ptr @Type_unknown()
  store ptr %15, ptr %arg_type, align 8
  %16 = load ptr, ptr %arg, align 8
  %memberidx8 = getelementptr inbounds %ArgNode, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx8, align 8
  %18 = icmp ne ptr %17, null
  br i1 %18, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  %ret_type = alloca ptr, align 8
  %19 = call ptr @TypeChecker_check_type(ptr %0, ptr %2)
  store ptr %19, ptr %ret_type, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionType, ptr null, i32 1) to i32))
  %21 = load ptr, ptr %ret_type, align 8
  call void @FunctionType_constructor(ptr %20, ptr %4, ptr %21)
  ret ptr %20

if.entry:                                         ; preds = %for.body
  %22 = call ptr @TypeChecker_check_type(ptr %0, ptr %17)
  store ptr %22, ptr %arg_type, align 8
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %23 = load ptr, ptr %arg, align 8
  %memberidx10 = getelementptr inbounds %ArgNode, ptr %23, i32 0, i32 2
  %24 = load ptr, ptr %memberidx10, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend
  %26 = load ptr, ptr %fnc_arg, align 8
  %memberidx14 = getelementptr inbounds %FunctionArg, ptr %26, i32 0, i32 6
  %27 = load ptr, ptr %arg_type, align 8
  %28 = call ptr @TypeChecker_check_expression(ptr %0, ptr %27, ptr %24)
  store ptr %28, ptr %memberidx14, align 8
  %29 = load ptr, ptr %arg_type, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp eq i64 %30, 21
  br i1 %31, label %if.entry17, label %else18

ifend13:                                          ; preds = %if.entry24, %else18, %if.entry17, %ifend
  %32 = load ptr, ptr %3, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 2
  %33 = load ptr, ptr %memberidx33, align 8
  %34 = load ptr, ptr %fnc_arg, align 8
  call void %33(ptr %3, ptr %34)
  %35 = load ptr, ptr %fnc_arg, align 8
  %memberidx34 = getelementptr inbounds %Expression, ptr %35, i32 0, i32 3
  %36 = load ptr, ptr %arg_type, align 8
  store ptr %36, ptr %memberidx34, align 8
  %var = alloca ptr, align 8
  %37 = load ptr, ptr %fnc_arg, align 8
  %memberidx35 = getelementptr inbounds %FunctionArg, ptr %37, i32 0, i32 5
  %38 = load ptr, ptr %memberidx35, align 8
  %39 = load ptr, ptr %arg_type, align 8
  %40 = call ptr @TypeChecker_declare_var_within_current_scope(ptr %0, ptr %38, ptr %37, ptr %39)
  store ptr %40, ptr %var, align 8
  %41 = load ptr, ptr %fnc_arg, align 8
  %memberidx36 = getelementptr inbounds %FunctionArg, ptr %41, i32 0, i32 4
  %memberidx37 = getelementptr inbounds %Var, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %memberidx37, align 8
  store ptr %42, ptr %memberidx36, align 8
  %43 = load ptr, ptr %4, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %43, i32 0, i32 2
  %44 = load ptr, ptr %memberidx38, align 8
  %45 = load ptr, ptr %arg_type, align 8
  call void %44(ptr %4, ptr %45)
  %46 = add i64 %i.0, 1
  br label %for.cond

if.entry17:                                       ; preds = %if.entry11
  %47 = load ptr, ptr %fnc_arg, align 8
  %memberidx20 = getelementptr inbounds %FunctionArg, ptr %47, i32 0, i32 6
  %48 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %Expression, ptr %48, i32 0, i32 3
  %49 = load ptr, ptr %memberidx21, align 8
  store ptr %49, ptr %arg_type, align 8
  br label %ifend13

else18:                                           ; preds = %if.entry11
  %50 = load ptr, ptr %fnc_arg, align 8
  %memberidx22 = getelementptr inbounds %FunctionArg, ptr %50, i32 0, i32 6
  %51 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Expression, ptr %51, i32 0, i32 3
  %52 = load ptr, ptr %memberidx23, align 8
  %53 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %29, ptr %52)
  %54 = xor i1 %53, true
  br i1 %54, label %if.entry24, label %ifend13

if.entry24:                                       ; preds = %else18
  %55 = load ptr, ptr %arg_type, align 8
  %56 = call ptr @TypeChecker_dump_type(ptr %0, ptr %55)
  %57 = load ptr, ptr %56, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %57, i32 0, i32 11
  %58 = load ptr, ptr %memberidx27, align 8
  %59 = call ptr %58(ptr %56)
  %60 = load ptr, ptr %fnc_arg, align 8
  %memberidx28 = getelementptr inbounds %FunctionArg, ptr %60, i32 0, i32 6
  %61 = load ptr, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %Expression, ptr %61, i32 0, i32 3
  %62 = load ptr, ptr %memberidx29, align 8
  %63 = call ptr @TypeChecker_dump_type(ptr %0, ptr %62)
  %64 = load ptr, ptr %63, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i32 0, i32 11
  %65 = load ptr, ptr %memberidx30, align 8
  %66 = call ptr %65(ptr %63)
  %67 = alloca ptr, align 8
  %68 = call i64 (ptr, ptr, ...) @asprintf(ptr %67, ptr @202, ptr %59, ptr %66)
  %69 = load ptr, ptr %67, align 8
  %70 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %70, ptr %69, i64 %68)
  %71 = load ptr, ptr %arg, align 8
  %memberidx31 = getelementptr inbounds %ArgNode, ptr %71, i32 0, i32 2
  %72 = load ptr, ptr %memberidx31, align 8
  %73 = load ptr, ptr %72, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %70, ptr %73)
  br label %ifend13
}

define ptr @TypeChecker_check_constructor_call(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @get_class(ptr %5, ptr %1)
  %memberidx1 = getelementptr inbounds %Class, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = icmp eq ptr %7, null
  br i1 %8, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %else14, %if.entry13, %ifend12, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %ifend12 ], [ %33, %if.entry13 ], [ %57, %else14 ], [ null, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  %9 = call ptr @string_from_bytes(ptr @303, i64 44)
  br label %common.ret

ifend:                                            ; preds = %4
  %constructor = alloca ptr, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %6, i32 0, i32 5
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = load ptr, ptr %10, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %PropId, ptr %7, i32 0, i32 2
  %13 = load i64, ptr %memberidx4, align 4
  %14 = call ptr %12(ptr %10, i64 %13)
  store ptr %14, ptr %constructor, align 8
  %construct_type = alloca ptr, align 8
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %14, i32 0, i32 4
  %15 = load ptr, ptr %memberidx5, align 8
  store ptr %15, ptr %construct_type, align 8
  %checked_args = alloca ptr, align 8
  %16 = load ptr, ptr %constructor, align 8
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %16, i32 0, i32 6
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = call ptr @TypeChecker_fill_in_call_args(ptr %0, ptr %15, ptr %17, ptr %2)
  store ptr %18, ptr %checked_args, align 8
  %19 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %19, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend
  %index = alloca i64, align 8
  %20 = load ptr, ptr %construct_type, align 8
  %21 = load ptr, ptr %checked_args, align 8
  %22 = call i64 @TypeChecker_check_function_call_args_match(ptr %0, ptr %20, ptr %21)
  store i64 %22, ptr %index, align 4
  %23 = icmp sge i64 %22, -1
  br i1 %23, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend9
  %24 = icmp eq i64 %22, -1
  br i1 %24, label %if.entry13, label %else14

ifend12:                                          ; preds = %ifend9
  %25 = load ptr, ptr %checked_args, align 8
  store ptr %25, ptr %3, align 8
  br label %common.ret

if.entry13:                                       ; preds = %if.entry10
  %26 = load ptr, ptr %construct_type, align 8
  %memberidx16 = getelementptr inbounds %FunctionType, ptr %26, i32 0, i32 1
  %27 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %Array_Type_, ptr %27, i32 0, i32 2
  %28 = load i64, ptr %memberidx17, align 4
  %memberidx18 = getelementptr inbounds %Array_ExpressionNode_, ptr %2, i32 0, i32 2
  %29 = load i64, ptr %memberidx18, align 4
  %30 = alloca ptr, align 8
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr %30, ptr @304, i64 %28, i64 %29)
  %32 = load ptr, ptr %30, align 8
  %33 = call ptr @string_from_bytes(ptr %32, i64 %31)
  br label %common.ret

else14:                                           ; preds = %if.entry10
  %34 = load ptr, ptr %construct_type, align 8
  %memberidx19 = getelementptr inbounds %FunctionType, ptr %34, i32 0, i32 1
  %35 = load ptr, ptr %memberidx19, align 8
  %36 = load ptr, ptr %35, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 5
  %37 = load ptr, ptr %memberidx20, align 8
  %38 = call ptr %37(ptr %35, i64 %22)
  %39 = call ptr @TypeChecker_dump_type(ptr %0, ptr %38)
  %40 = load ptr, ptr %39, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %40, i32 0, i32 11
  %41 = load ptr, ptr %memberidx21, align 8
  %42 = call ptr %41(ptr %39)
  %43 = load ptr, ptr %checked_args, align 8
  %44 = load ptr, ptr %43, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %44, i32 0, i32 5
  %45 = load ptr, ptr %memberidx22, align 8
  %46 = load i64, ptr %index, align 4
  %47 = call ptr %45(ptr %43, i64 %46)
  %memberidx23 = getelementptr inbounds %Expression, ptr %47, i32 0, i32 3
  %48 = load ptr, ptr %memberidx23, align 8
  %49 = call ptr @TypeChecker_dump_type(ptr %0, ptr %48)
  %50 = load ptr, ptr %49, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i32 0, i32 11
  %51 = load ptr, ptr %memberidx24, align 8
  %52 = call ptr %51(ptr %49)
  %53 = load i64, ptr %index, align 4
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr %54, ptr @305, ptr %42, ptr %52, i64 %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %57, ptr %56, i64 %55)
  br label %common.ret
}

define void @TypeChecker_declare_class_methods(ptr %0, ptr %1, ptr %2) {
for.entry:
  %memberidx = getelementptr inbounds %Class, ptr %1, i32 0, i32 8
  %3 = load i64, ptr %memberidx, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend86, %for.entry
  %current_vtable_index.0 = phi i64 [ %3, %for.entry ], [ %current_vtable_index.1, %ifend86 ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %174, %ifend86 ]
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i32 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp slt i64 %i.0, %5
  br i1 %6, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %method = alloca ptr, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassMethod, ptr null, i32 1) to i32))
  call void @ClassMethod_constructor(ptr %7)
  store ptr %7, ptr %method, align 8
  %method_node = alloca ptr, align 8
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = call ptr %10(ptr %8, i64 %i.0)
  store ptr %11, ptr %method_node, align 8
  %name = alloca ptr, align 8
  %12 = load ptr, ptr %11, align 8
  %memberidx6 = getelementptr inbounds %IdentifierToken, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx6, align 8
  store ptr %13, ptr %name, align 8
  %14 = load ptr, ptr %method, align 8
  %memberidx7 = getelementptr inbounds %ClassMethod, ptr %14, i32 0, i32 3
  store ptr %13, ptr %memberidx7, align 8
  %method_scope = alloca ptr, align 8
  %15 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %0)
  store ptr %15, ptr %method_scope, align 8
  %memberidx8 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %16 = load ptr, ptr %15, align 8
  store ptr %16, ptr %memberidx8, align 8
  %17 = load ptr, ptr %method, align 8
  %memberidx10 = getelementptr inbounds %ClassMethod, ptr %17, i32 0, i32 6
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FunctionArg_, ptr null, i32 1) to i32))
  call void @Array_FunctionArg__constructor(ptr %18, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx11 = getelementptr inbounds %Array_FunctionArg_, ptr %18, i32 0, i32 1
  %memberidx12 = getelementptr inbounds %Array_FunctionArg_, ptr %18, i32 0, i32 2
  store i64 0, ptr %memberidx12, align 4
  store ptr %18, ptr %memberidx10, align 8
  %19 = load ptr, ptr %name, align 8
  %20 = call i1 @is_operator_overload_name(ptr %19)
  br i1 %20, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry121, %if.entry109, %if.entry95, %if.entry88, %if.entry69, %if.entry59, %if.entry48, %if.entry25, %if.entry16
  ret void

if.entry:                                         ; preds = %for.body
  %args_num = alloca i64, align 8
  %21 = load ptr, ptr %name, align 8
  %22 = load ptr, ptr %21, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i32 0, i32 4
  %23 = load ptr, ptr %memberidx13, align 8
  %24 = call ptr @string_from_bytes(ptr @225, i64 11)
  %25 = call i1 %23(ptr %21, ptr %24)
  %. = select i1 %25, i64 2, i64 1
  store i64 %., ptr %args_num, align 4
  %26 = load ptr, ptr %method_node, align 8
  %memberidx14 = getelementptr inbounds %MethodNode, ptr %26, i32 0, i32 1
  %27 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %Array_ArgNode_, ptr %27, i32 0, i32 2
  %28 = load i64, ptr %memberidx15, align 4
  %29 = icmp ne i64 %28, %.
  br i1 %29, label %if.entry16, label %ifend18

ifend:                                            ; preds = %ifend18, %for.body
  %30 = load ptr, ptr %method, align 8
  %memberidx31 = getelementptr inbounds %ClassMethod, ptr %30, i32 0, i32 7
  %31 = load ptr, ptr %method_node, align 8
  %memberidx32 = getelementptr inbounds %MethodNode, ptr %31, i32 0, i32 6
  %32 = load i1, ptr %memberidx32, align 1
  store i1 %32, ptr %memberidx31, align 1
  %33 = load ptr, ptr %method, align 8
  %memberidx33 = getelementptr inbounds %ClassMethod, ptr %33, i32 0, i32 1
  %34 = load ptr, ptr %method_node, align 8
  %memberidx34 = getelementptr inbounds %MethodNode, ptr %34, i32 0, i32 5
  %35 = load i1, ptr %memberidx34, align 1
  store i1 %35, ptr %memberidx33, align 1
  %36 = load ptr, ptr %method, align 8
  %memberidx35 = getelementptr inbounds %ClassMethod, ptr %36, i32 0, i32 2
  %37 = load ptr, ptr %method_node, align 8
  %memberidx36 = getelementptr inbounds %MethodNode, ptr %37, i32 0, i32 3
  %38 = load i64, ptr %memberidx36, align 4
  store i64 %38, ptr %memberidx35, align 4
  %39 = load ptr, ptr %method, align 8
  %memberidx37 = getelementptr inbounds %ClassMethod, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %method_node, align 8
  %memberidx38 = getelementptr inbounds %MethodNode, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx38, align 8
  %memberidx39 = getelementptr inbounds %MethodNode, ptr %40, i32 0, i32 4
  %42 = load ptr, ptr %memberidx39, align 8
  %memberidx40 = getelementptr inbounds %ClassMethod, ptr %39, i32 0, i32 6
  %43 = load ptr, ptr %memberidx40, align 8
  %44 = call ptr @TypeChecker_init_function_signature(ptr %0, ptr %41, ptr %42, ptr %43)
  store ptr %44, ptr %memberidx37, align 8
  %possible_prop_id = alloca ptr, align 8
  %memberidx41 = getelementptr inbounds %Class, ptr %1, i32 0, i32 6
  %45 = load ptr, ptr %memberidx41, align 8
  %46 = load ptr, ptr %45, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %46, i32 0, i32 1
  %47 = load ptr, ptr %memberidx42, align 8
  %48 = load ptr, ptr %name, align 8
  %49 = call ptr %47(ptr %45, ptr %48)
  store ptr %49, ptr %possible_prop_id, align 8
  %50 = icmp ne ptr %49, null
  br i1 %50, label %if.entry43, label %else44

if.entry16:                                       ; preds = %if.entry
  %51 = load ptr, ptr %name, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i32 0, i32 11
  %53 = load ptr, ptr %memberidx19, align 8
  %54 = call ptr %53(ptr %51)
  %55 = load ptr, ptr %method_node, align 8
  %memberidx20 = getelementptr inbounds %MethodNode, ptr %55, i32 0, i32 1
  %56 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %Array_ArgNode_, ptr %56, i32 0, i32 2
  %57 = load i64, ptr %memberidx21, align 4
  %58 = alloca ptr, align 8
  %59 = call i64 (ptr, ptr, ...) @asprintf(ptr %58, ptr @246, i64 %., ptr %54, i64 %57)
  %60 = load ptr, ptr %58, align 8
  %61 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %61, ptr %60, i64 %59)
  %62 = load ptr, ptr %method_node, align 8
  %63 = load ptr, ptr %62, align 8
  %memberidx23 = getelementptr inbounds %Token, ptr %63, i32 0, i32 1
  %64 = load ptr, ptr %memberidx23, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %61, ptr %64)
  br label %common.ret

ifend18:                                          ; preds = %if.entry
  %memberidx24 = getelementptr inbounds %MethodNode, ptr %26, i32 0, i32 5
  %65 = load i1, ptr %memberidx24, align 1
  br i1 %65, label %if.entry25, label %ifend

if.entry25:                                       ; preds = %ifend18
  %66 = load ptr, ptr %name, align 8
  %67 = load ptr, ptr %66, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %67, i32 0, i32 11
  %68 = load ptr, ptr %memberidx28, align 8
  %69 = call ptr %68(ptr %66)
  %70 = alloca ptr, align 8
  %71 = call i64 (ptr, ptr, ...) @asprintf(ptr %70, ptr @247, ptr %69)
  %72 = load ptr, ptr %70, align 8
  %73 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %73, ptr %72, i64 %71)
  %74 = load ptr, ptr %method_node, align 8
  %75 = load ptr, ptr %74, align 8
  %memberidx30 = getelementptr inbounds %Token, ptr %75, i32 0, i32 1
  %76 = load ptr, ptr %memberidx30, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %73, ptr %76)
  br label %common.ret

if.entry43:                                       ; preds = %ifend
  %memberidx46 = getelementptr inbounds %PropId, ptr %49, i32 0, i32 1
  %77 = load ptr, ptr %memberidx46, align 8
  %78 = load ptr, ptr %1, align 8
  %79 = icmp eq ptr %77, %78
  br i1 %79, label %if.entry48, label %ifend50

else44:                                           ; preds = %ifend
  %80 = load ptr, ptr %method, align 8
  %memberidx80 = getelementptr inbounds %ClassMethod, ptr %80, i32 0, i32 9
  store i64 %current_vtable_index.0, ptr %memberidx80, align 4
  br label %ifend45

ifend45:                                          ; preds = %else44, %ifend71
  %81 = load ptr, ptr %method, align 8
  %82 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PropId, ptr null, i32 1) to i32))
  %83 = load ptr, ptr %1, align 8
  call void @PropId_constructor(ptr %82, i64 0, ptr %83, i64 %i.0)
  store ptr %82, ptr %81, align 8
  %84 = load ptr, ptr %method_node, align 8
  %memberidx83 = getelementptr inbounds %MethodNode, ptr %84, i32 0, i32 5
  %85 = load i1, ptr %memberidx83, align 1
  br i1 %85, label %if.entry84, label %else85

if.entry48:                                       ; preds = %if.entry43
  %86 = load ptr, ptr %name, align 8
  %87 = load ptr, ptr %86, align 8
  %memberidx51 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %87, i32 0, i32 11
  %88 = load ptr, ptr %memberidx51, align 8
  %89 = call ptr %88(ptr %86)
  %memberidx52 = getelementptr inbounds %Class, ptr %1, i32 0, i32 1
  %90 = load ptr, ptr %memberidx52, align 8
  %91 = load ptr, ptr %90, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %91, i32 0, i32 11
  %92 = load ptr, ptr %memberidx53, align 8
  %93 = call ptr %92(ptr %90)
  %94 = alloca ptr, align 8
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr %94, ptr @248, ptr %89, ptr %93)
  %96 = load ptr, ptr %94, align 8
  %97 = call ptr @string_from_bytes(ptr %96, i64 %95)
  %98 = load ptr, ptr %method_node, align 8
  %99 = load ptr, ptr %98, align 8
  %memberidx55 = getelementptr inbounds %Token, ptr %99, i32 0, i32 1
  %100 = load ptr, ptr %memberidx55, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %97, ptr %100)
  br label %common.ret

ifend50:                                          ; preds = %if.entry43
  %parent_prop_type = alloca ptr, align 8
  %memberidx56 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %101 = load ptr, ptr %memberidx56, align 8
  %102 = call ptr @get_class_prop_type(ptr %101, ptr %49)
  store ptr %102, ptr %parent_prop_type, align 8
  %parent_prop_visibility = alloca i64, align 8
  %103 = load ptr, ptr %memberidx56, align 8
  %104 = load ptr, ptr %possible_prop_id, align 8
  %105 = call i64 @get_class_prop_visibility(ptr %103, ptr %104)
  store i64 %105, ptr %parent_prop_visibility, align 4
  %106 = load ptr, ptr %parent_prop_type, align 8
  %107 = load ptr, ptr %method, align 8
  %memberidx58 = getelementptr inbounds %ClassMethod, ptr %107, i32 0, i32 4
  %108 = load ptr, ptr %memberidx58, align 8
  %109 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %106, ptr %108)
  %110 = xor i1 %109, true
  br i1 %110, label %if.entry59, label %ifend61

if.entry59:                                       ; preds = %ifend50
  %111 = load ptr, ptr %name, align 8
  %112 = load ptr, ptr %111, align 8
  %memberidx62 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %112, i32 0, i32 11
  %113 = load ptr, ptr %memberidx62, align 8
  %114 = call ptr %113(ptr %111)
  %memberidx63 = getelementptr inbounds %Class, ptr %1, i32 0, i32 1
  %115 = load ptr, ptr %memberidx63, align 8
  %116 = load ptr, ptr %115, align 8
  %memberidx64 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %116, i32 0, i32 11
  %117 = load ptr, ptr %memberidx64, align 8
  %118 = call ptr %117(ptr %115)
  %119 = load ptr, ptr %parent_prop_type, align 8
  %120 = call ptr @TypeChecker_dump_type(ptr %0, ptr %119)
  %121 = load ptr, ptr %120, align 8
  %memberidx65 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %121, i32 0, i32 11
  %122 = load ptr, ptr %memberidx65, align 8
  %123 = call ptr %122(ptr %120)
  %124 = alloca ptr, align 8
  %125 = call i64 (ptr, ptr, ...) @asprintf(ptr %124, ptr @249, ptr %114, ptr %118, ptr %123)
  %126 = load ptr, ptr %124, align 8
  %127 = call ptr @string_from_bytes(ptr %126, i64 %125)
  %128 = load ptr, ptr %method_node, align 8
  %129 = load ptr, ptr %128, align 8
  %memberidx67 = getelementptr inbounds %Token, ptr %129, i32 0, i32 1
  %130 = load ptr, ptr %memberidx67, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %127, ptr %130)
  br label %common.ret

ifend61:                                          ; preds = %ifend50
  %131 = load ptr, ptr %method, align 8
  %memberidx68 = getelementptr inbounds %ClassMethod, ptr %131, i32 0, i32 2
  %132 = load i64, ptr %memberidx68, align 4
  %133 = load i64, ptr %parent_prop_visibility, align 4
  %134 = icmp ne i64 %132, %133
  br i1 %134, label %if.entry69, label %ifend71

if.entry69:                                       ; preds = %ifend61
  %135 = load ptr, ptr %name, align 8
  %136 = load ptr, ptr %135, align 8
  %memberidx72 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %136, i32 0, i32 11
  %137 = load ptr, ptr %memberidx72, align 8
  %138 = call ptr %137(ptr %135)
  %memberidx73 = getelementptr inbounds %Class, ptr %1, i32 0, i32 1
  %139 = load ptr, ptr %memberidx73, align 8
  %140 = load ptr, ptr %139, align 8
  %memberidx74 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %140, i32 0, i32 11
  %141 = load ptr, ptr %memberidx74, align 8
  %142 = call ptr %141(ptr %139)
  %143 = load i64, ptr %parent_prop_visibility, align 4
  %144 = call ptr @dump_access(i64 %143)
  %145 = load ptr, ptr %144, align 8
  %memberidx75 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %145, i32 0, i32 11
  %146 = load ptr, ptr %memberidx75, align 8
  %147 = call ptr %146(ptr %144)
  %148 = alloca ptr, align 8
  %149 = call i64 (ptr, ptr, ...) @asprintf(ptr %148, ptr @250, ptr %138, ptr %142, ptr %147)
  %150 = load ptr, ptr %148, align 8
  %151 = call ptr @string_from_bytes(ptr %150, i64 %149)
  %152 = load ptr, ptr %method_node, align 8
  %153 = load ptr, ptr %152, align 8
  %memberidx77 = getelementptr inbounds %Token, ptr %153, i32 0, i32 1
  %154 = load ptr, ptr %memberidx77, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %151, ptr %154)
  br label %common.ret

ifend71:                                          ; preds = %ifend61
  %memberidx78 = getelementptr inbounds %ClassMethod, ptr %131, i32 0, i32 9
  %155 = load ptr, ptr %memberidx56, align 8
  %156 = load ptr, ptr %possible_prop_id, align 8
  %157 = call i64 @get_vtable_index(ptr %155, ptr %156)
  store i64 %157, ptr %memberidx78, align 4
  br label %ifend45

if.entry84:                                       ; preds = %ifend45
  %memberidx87 = getelementptr inbounds %MethodNode, ptr %84, i32 0, i32 6
  %158 = load i1, ptr %memberidx87, align 1
  br i1 %158, label %if.entry88, label %ifend90

else85:                                           ; preds = %ifend45
  %159 = load ptr, ptr %method, align 8
  %memberidx103 = getelementptr inbounds %ClassMethod, ptr %159, i32 0, i32 3
  %160 = load ptr, ptr %memberidx103, align 8
  %161 = load ptr, ptr %160, align 8
  %memberidx104 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %161, i32 0, i32 4
  %162 = load ptr, ptr %memberidx104, align 8
  %163 = call ptr @string_from_bytes(ptr @252, i64 11)
  %164 = call i1 %162(ptr %160, ptr %163)
  br i1 %164, label %if.entry105, label %else106

ifend86:                                          ; preds = %if.entry137, %if.entry131, %ifend107, %ifend97
  %current_vtable_index.1 = phi i64 [ %current_vtable_index.0, %ifend97 ], [ %current_vtable_index.2, %if.entry137 ], [ %current_vtable_index.2, %if.entry131 ], [ %current_vtable_index.2, %ifend107 ]
  %165 = load ptr, ptr %method, align 8
  %memberidx141 = getelementptr inbounds %ClassMethod, ptr %165, i32 0, i32 8
  %166 = load ptr, ptr %method_scope, align 8
  %167 = load ptr, ptr %166, align 8
  store ptr %167, ptr %memberidx141, align 8
  %memberidx143 = getelementptr inbounds %Class, ptr %1, i32 0, i32 5
  %168 = load ptr, ptr %memberidx143, align 8
  %169 = load ptr, ptr %168, align 8
  %memberidx144 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %169, i32 0, i32 2
  %170 = load ptr, ptr %memberidx144, align 8
  %171 = load ptr, ptr %method, align 8
  call void %170(ptr %168, ptr %171)
  %172 = load ptr, ptr %method_scope, align 8
  %memberidx146 = getelementptr inbounds %Scope, ptr %172, i32 0, i32 5
  %173 = load ptr, ptr %memberidx146, align 8
  store ptr %173, ptr %memberidx8, align 8
  %174 = add i64 %i.0, 1
  br label %for.cond

if.entry88:                                       ; preds = %if.entry84
  %175 = call ptr @string_from_bytes(ptr @251, i64 31)
  %176 = load ptr, ptr %method_node, align 8
  %177 = load ptr, ptr %176, align 8
  %memberidx92 = getelementptr inbounds %Token, ptr %177, i32 0, i32 1
  %178 = load ptr, ptr %memberidx92, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %175, ptr %178)
  br label %common.ret

ifend90:                                          ; preds = %if.entry84
  %179 = load ptr, ptr %method, align 8
  %memberidx93 = getelementptr inbounds %ClassMethod, ptr %179, i32 0, i32 3
  %180 = load ptr, ptr %memberidx93, align 8
  %181 = load ptr, ptr %180, align 8
  %memberidx94 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %181, i32 0, i32 4
  %182 = load ptr, ptr %memberidx94, align 8
  %183 = call ptr @string_from_bytes(ptr @252, i64 11)
  %184 = call i1 %182(ptr %180, ptr %183)
  br i1 %184, label %if.entry95, label %ifend97

if.entry95:                                       ; preds = %ifend90
  %185 = call ptr @string_from_bytes(ptr @253, i64 33)
  %186 = load ptr, ptr %method_node, align 8
  %187 = load ptr, ptr %186, align 8
  %memberidx99 = getelementptr inbounds %Token, ptr %187, i32 0, i32 1
  %188 = load ptr, ptr %memberidx99, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %185, ptr %188)
  br label %common.ret

ifend97:                                          ; preds = %ifend90
  %memberidx100 = getelementptr inbounds %Class, ptr %1, i32 0, i32 7
  %189 = load ptr, ptr %memberidx100, align 8
  %190 = load ptr, ptr %189, align 8
  %191 = load ptr, ptr %190, align 8
  %192 = load ptr, ptr %name, align 8
  %193 = load ptr, ptr %method, align 8
  %194 = load ptr, ptr %193, align 8
  call void %191(ptr %189, ptr %192, ptr %194)
  br label %ifend86

if.entry105:                                      ; preds = %else85
  %195 = load ptr, ptr %method_node, align 8
  %memberidx108 = getelementptr inbounds %MethodNode, ptr %195, i32 0, i32 6
  %196 = load i1, ptr %memberidx108, align 1
  br i1 %196, label %if.entry109, label %ifend111

else106:                                          ; preds = %else85
  %197 = load ptr, ptr %method, align 8
  %memberidx116 = getelementptr inbounds %ClassMethod, ptr %197, i32 0, i32 2
  %198 = load i64, ptr %memberidx116, align 4
  %199 = icmp ne i64 %198, 1
  br i1 %199, label %if.entry117, label %else118

ifend107:                                         ; preds = %ifend119, %ifend111
  %current_vtable_index.2 = phi i64 [ %current_vtable_index.0, %ifend111 ], [ %current_vtable_index.3, %ifend119 ]
  %object_type = alloca ptr, align 8
  %200 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  %201 = load ptr, ptr %1, align 8
  call void @ObjectType_constructor(ptr %200, ptr %201)
  store ptr %200, ptr %object_type, align 8
  %this_const = alloca ptr, align 8
  %202 = call ptr @string_from_bytes(ptr @179, i64 4)
  %203 = load ptr, ptr %object_type, align 8
  %204 = call ptr @TypeChecker_declare_const_within_current_scope(ptr %0, ptr %202, ptr null, ptr %203)
  store ptr %204, ptr %this_const, align 8
  %memberidx130 = getelementptr inbounds %Class, ptr %1, i32 0, i32 2
  %205 = load ptr, ptr %memberidx130, align 8
  %206 = icmp ne ptr %205, null
  br i1 %206, label %if.entry131, label %ifend86

if.entry109:                                      ; preds = %if.entry105
  %207 = call ptr @string_from_bytes(ptr @254, i64 35)
  %208 = load ptr, ptr %method_node, align 8
  %209 = load ptr, ptr %208, align 8
  %memberidx113 = getelementptr inbounds %Token, ptr %209, i32 0, i32 1
  %210 = load ptr, ptr %memberidx113, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %207, ptr %210)
  br label %common.ret

ifend111:                                         ; preds = %if.entry105
  %memberidx114 = getelementptr inbounds %Class, ptr %1, i32 0, i32 3
  %211 = load ptr, ptr %method, align 8
  %212 = load ptr, ptr %211, align 8
  store ptr %212, ptr %memberidx114, align 8
  br label %ifend107

if.entry117:                                      ; preds = %else106
  %213 = add i64 %current_vtable_index.0, 1
  br label %ifend119

else118:                                          ; preds = %else106
  %214 = load ptr, ptr %method_node, align 8
  %memberidx120 = getelementptr inbounds %MethodNode, ptr %214, i32 0, i32 6
  %215 = load i1, ptr %memberidx120, align 1
  br i1 %215, label %if.entry121, label %ifend119

ifend119:                                         ; preds = %else118, %if.entry117
  %current_vtable_index.3 = phi i64 [ %213, %if.entry117 ], [ %current_vtable_index.0, %else118 ]
  %216 = load ptr, ptr %memberidx41, align 8
  %217 = load ptr, ptr %216, align 8
  %218 = load ptr, ptr %217, align 8
  %219 = load ptr, ptr %name, align 8
  %220 = load ptr, ptr %method, align 8
  %221 = load ptr, ptr %220, align 8
  call void %218(ptr %216, ptr %219, ptr %221)
  br label %ifend107

if.entry121:                                      ; preds = %else118
  %222 = call ptr @string_from_bytes(ptr @255, i64 58)
  %223 = load ptr, ptr %method_node, align 8
  %224 = load ptr, ptr %223, align 8
  %memberidx125 = getelementptr inbounds %Token, ptr %224, i32 0, i32 1
  %225 = load ptr, ptr %memberidx125, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %222, ptr %225)
  br label %common.ret

if.entry131:                                      ; preds = %ifend107
  %constructor_method = alloca ptr, align 8
  %memberidx134 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %226 = load ptr, ptr %memberidx134, align 8
  %227 = call ptr @get_class_from_type(ptr %226, ptr %205)
  %memberidx136 = getelementptr inbounds %Class, ptr %227, i32 0, i32 3
  %228 = load ptr, ptr %memberidx136, align 8
  store ptr %228, ptr %constructor_method, align 8
  %229 = icmp ne ptr %228, null
  br i1 %229, label %if.entry137, label %ifend86

if.entry137:                                      ; preds = %if.entry131
  %constructor_type = alloca ptr, align 8
  %230 = load ptr, ptr %memberidx134, align 8
  %231 = call ptr @get_class_prop_type(ptr %230, ptr %228)
  store ptr %231, ptr %constructor_type, align 8
  %232 = call ptr @string_from_bytes(ptr @256, i64 5)
  %233 = load ptr, ptr %constructor_type, align 8
  %234 = call ptr @TypeChecker_declare_const_within_current_scope(ptr %0, ptr %232, ptr null, ptr %233)
  br label %ifend86
}

define void @ArrayExpression_constructor(ptr %0, ptr %1) {
  call void @Expression_constructor(ptr %0, i64 6)
  %memberidx = getelementptr inbounds %ArrayExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %1, i32 0, i32 2
  %3 = load i64, ptr %memberidx1, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayType, ptr null, i32 1) to i32))
  %6 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = call ptr %7(ptr %1, i64 0)
  %memberidx4 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = load i64, ptr %memberidx1, align 4
  call void @ArrayType_constructor(ptr %5, ptr %9, i64 %10)
  store ptr %5, ptr %memberidx2, align 8
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret void
}

define void @ArrayType_constructor(ptr %0, ptr %1, i64 %2) {
  call void @Type_constructor(ptr %0, i64 16)
  %memberidx = getelementptr inbounds %ArrayType, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ArrayType, ptr %0, i32 0, i32 2
  store i64 %2, ptr %memberidx1, align 4
  ret void
}

define ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr %2) {
  %4 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %if.entry20, %3, %ifend69, %if.entry57, %else47
  %common.ret.op = phi ptr [ null, %else47 ], [ null, %if.entry57 ], [ %122, %ifend69 ], [ null, %3 ], [ null, %if.entry20 ], [ null, %for.body ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %elements = alloca ptr, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %5, ptr %elements, align 8
  %element_type = alloca ptr, align 8
  %6 = call ptr @Type_unknown()
  store ptr %6, ptr %element_type, align 8
  %is_constant = alloca i1, align 1
  store i1 true, ptr %is_constant, align 1
  %array_type = alloca ptr, align 8
  store ptr %1, ptr %array_type, align 8
  %7 = load i64, ptr %1, align 4
  %8 = icmp eq i64 %7, 16
  br i1 %8, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %memberidx6 = getelementptr inbounds %ArrayType, ptr %1, i32 0, i32 1
  %9 = load ptr, ptr %memberidx6, align 8
  store ptr %9, ptr %element_type, align 8
  br label %ifend5

else4:                                            ; preds = %ifend
  %10 = icmp eq i64 %7, 20
  br i1 %10, label %if.entry8, label %ifend5

ifend5:                                           ; preds = %if.entry13, %if.entry8, %else4, %if.entry3
  %memberidx18 = getelementptr inbounds %ArrayExpressionNode, ptr %2, i32 0, i32 3
  %11 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Array_ExpressionNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx19, align 4
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %if.entry20, label %ifend22

if.entry8:                                        ; preds = %else4
  store i1 false, ptr %is_constant, align 1
  %generic_ty = alloca ptr, align 8
  store ptr %1, ptr %generic_ty, align 8
  %14 = call i1 @is_object(ptr %1)
  %15 = load ptr, ptr %generic_ty, align 8
  %memberidx11 = getelementptr inbounds %GenericType, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx11, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i32 0, i32 4
  %18 = load ptr, ptr %memberidx12, align 8
  %19 = call ptr @string_from_bytes(ptr @176, i64 5)
  %20 = call i1 %18(ptr %16, ptr %19)
  %21 = and i1 %14, %20
  br i1 %21, label %if.entry13, label %ifend5

if.entry13:                                       ; preds = %if.entry8
  %22 = load ptr, ptr %generic_ty, align 8
  %memberidx16 = getelementptr inbounds %GenericType, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %memberidx16, align 8
  %24 = load ptr, ptr %23, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i32 0, i32 5
  %25 = load ptr, ptr %memberidx17, align 8
  %26 = call ptr %25(ptr %23, i64 0)
  store ptr %26, ptr %element_type, align 8
  br label %ifend5

if.entry20:                                       ; preds = %ifend5
  %27 = load ptr, ptr %elements, align 8
  %28 = load ptr, ptr %27, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 2
  %29 = load ptr, ptr %memberidx23, align 8
  %30 = load ptr, ptr %element_type, align 8
  %31 = load ptr, ptr %11, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i32 0, i32 5
  %32 = load ptr, ptr %memberidx25, align 8
  %33 = call ptr %32(ptr %11, i64 0)
  %34 = call ptr @TypeChecker_check_expression(ptr %0, ptr %30, ptr %33)
  call void %29(ptr %27, ptr %34)
  %35 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %35, label %common.ret, label %ifend28

ifend22:                                          ; preds = %for.cond, %ifend5
  %36 = load ptr, ptr %element_type, align 8
  %37 = load i64, ptr %36, align 4
  %38 = icmp eq i64 %37, 21
  br i1 %38, label %if.entry57, label %ifend59

ifend28:                                          ; preds = %if.entry20
  %39 = load i1, ptr %is_constant, align 1
  %40 = load ptr, ptr %elements, align 8
  %41 = load ptr, ptr %40, align 8
  %memberidx29 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i32 0, i32 5
  %42 = load ptr, ptr %memberidx29, align 8
  %43 = call ptr %42(ptr %40, i64 0)
  %memberidx30 = getelementptr inbounds %Expression, ptr %43, i32 0, i32 1
  %44 = load i1, ptr %memberidx30, align 1
  %45 = and i1 %39, %44
  store i1 %45, ptr %is_constant, align 1
  %46 = load ptr, ptr %element_type, align 8
  %47 = load i64, ptr %46, align 4
  %48 = icmp eq i64 %47, 21
  br i1 %48, label %if.entry32, label %for.entry

if.entry32:                                       ; preds = %ifend28
  %49 = load ptr, ptr %elements, align 8
  %50 = load ptr, ptr %49, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i32 0, i32 5
  %51 = load ptr, ptr %memberidx35, align 8
  %52 = call ptr %51(ptr %49, i64 0)
  %memberidx36 = getelementptr inbounds %Expression, ptr %52, i32 0, i32 3
  %53 = load ptr, ptr %memberidx36, align 8
  store ptr %53, ptr %element_type, align 8
  br label %for.entry

for.entry:                                        ; preds = %if.entry32, %ifend28
  %i = alloca i64, align 8
  store i64 1, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.entry46, %for.entry
  %54 = load i64, ptr %i, align 4
  %55 = load ptr, ptr %memberidx18, align 8
  %memberidx38 = getelementptr inbounds %Array_ExpressionNode_, ptr %55, i32 0, i32 2
  %56 = load i64, ptr %memberidx38, align 4
  %57 = icmp slt i64 %54, %56
  br i1 %57, label %for.body, label %ifend22

for.body:                                         ; preds = %for.cond
  %element = alloca ptr, align 8
  %58 = load ptr, ptr %element_type, align 8
  %59 = load ptr, ptr %55, align 8
  %memberidx40 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i32 0, i32 5
  %60 = load ptr, ptr %memberidx40, align 8
  %61 = call ptr %60(ptr %55, i64 %54)
  %62 = call ptr @TypeChecker_check_expression(ptr %0, ptr %58, ptr %61)
  store ptr %62, ptr %element, align 8
  %63 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %63, label %common.ret, label %ifend43

ifend43:                                          ; preds = %for.body
  %64 = load i1, ptr %is_constant, align 1
  %65 = load ptr, ptr %element, align 8
  %memberidx44 = getelementptr inbounds %Expression, ptr %65, i32 0, i32 1
  %66 = load i1, ptr %memberidx44, align 1
  %67 = and i1 %64, %66
  store i1 %67, ptr %is_constant, align 1
  %68 = load ptr, ptr %element_type, align 8
  %69 = load ptr, ptr %element, align 8
  %memberidx45 = getelementptr inbounds %Expression, ptr %69, i32 0, i32 3
  %70 = load ptr, ptr %memberidx45, align 8
  %71 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %68, ptr %70)
  br i1 %71, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend43
  %72 = load ptr, ptr %elements, align 8
  %73 = load ptr, ptr %72, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %73, i32 0, i32 2
  %74 = load ptr, ptr %memberidx49, align 8
  %75 = load ptr, ptr %element, align 8
  call void %74(ptr %72, ptr %75)
  %76 = load i64, ptr %i, align 4
  %77 = add i64 %76, 1
  store i64 %77, ptr %i, align 4
  br label %for.cond

else47:                                           ; preds = %ifend43
  %78 = load ptr, ptr %element_type, align 8
  %79 = call ptr @TypeChecker_dump_type(ptr %0, ptr %78)
  %80 = load ptr, ptr %79, align 8
  %memberidx50 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %80, i32 0, i32 11
  %81 = load ptr, ptr %memberidx50, align 8
  %82 = call ptr %81(ptr %79)
  %83 = load ptr, ptr %element, align 8
  %memberidx51 = getelementptr inbounds %Expression, ptr %83, i32 0, i32 3
  %84 = load ptr, ptr %memberidx51, align 8
  %85 = call ptr @TypeChecker_dump_type(ptr %0, ptr %84)
  %86 = load ptr, ptr %85, align 8
  %memberidx52 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %86, i32 0, i32 11
  %87 = load ptr, ptr %memberidx52, align 8
  %88 = call ptr %87(ptr %85)
  %89 = alloca ptr, align 8
  %90 = call i64 (ptr, ptr, ...) @asprintf(ptr %89, ptr @265, ptr %82, ptr %88)
  %91 = load ptr, ptr %89, align 8
  %92 = call ptr @string_from_bytes(ptr %91, i64 %90)
  %93 = load ptr, ptr %memberidx18, align 8
  %94 = load ptr, ptr %93, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %94, i32 0, i32 5
  %95 = load ptr, ptr %memberidx54, align 8
  %96 = load i64, ptr %i, align 4
  %97 = call ptr %95(ptr %93, i64 %96)
  %98 = load ptr, ptr %97, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %92, ptr %98)
  br label %common.ret

if.entry57:                                       ; preds = %ifend22
  %99 = call ptr @string_from_bytes(ptr @266, i64 37)
  %100 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %99, ptr %100)
  br label %common.ret

ifend59:                                          ; preds = %ifend22
  %101 = load ptr, ptr %array_type, align 8
  %102 = load i64, ptr %101, align 4
  %103 = icmp eq i64 %102, 21
  br i1 %103, label %if.entry62, label %ifend64

if.entry62:                                       ; preds = %ifend59
  %104 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayType, ptr null, i32 1) to i32))
  %105 = load ptr, ptr %element_type, align 8
  %106 = load ptr, ptr %elements, align 8
  %memberidx65 = getelementptr inbounds %Array_Expression_, ptr %106, i32 0, i32 2
  %107 = load i64, ptr %memberidx65, align 4
  call void @ArrayType_constructor(ptr %104, ptr %105, i64 %107)
  store ptr %104, ptr %array_type, align 8
  br label %ifend64

ifend64:                                          ; preds = %ifend59, %if.entry62
  %108 = load ptr, ptr %array_type, align 8
  %109 = load i64, ptr %108, align 4
  %110 = icmp ne i64 %109, 16
  br i1 %110, label %if.entry67, label %ifend69

if.entry67:                                       ; preds = %ifend64
  %generic_array_type = alloca ptr, align 8
  %111 = call ptr @string_from_bytes(ptr @176, i64 5)
  %112 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %112, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx70 = getelementptr inbounds %Array_Type_, ptr %112, i32 0, i32 1
  %113 = load ptr, ptr %memberidx70, align 8
  %114 = load ptr, ptr %element_type, align 8
  store ptr %114, ptr %113, align 8
  %memberidx71 = getelementptr inbounds %Array_Type_, ptr %112, i32 0, i32 2
  store i64 1, ptr %memberidx71, align 4
  %115 = call ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr %111, ptr %112)
  store ptr %115, ptr %generic_array_type, align 8
  %116 = icmp ne ptr %115, null
  br i1 %116, label %if.entry72, label %ifend69

ifend69:                                          ; preds = %if.entry72, %if.entry67, %ifend64
  %arr_exp = alloca ptr, align 8
  %117 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayExpression, ptr null, i32 1) to i32))
  %118 = load ptr, ptr %elements, align 8
  call void @ArrayExpression_constructor(ptr %117, ptr %118)
  store ptr %117, ptr %arr_exp, align 8
  %memberidx75 = getelementptr inbounds %Expression, ptr %117, i32 0, i32 1
  %119 = load i1, ptr %is_constant, align 1
  store i1 %119, ptr %memberidx75, align 1
  %120 = load ptr, ptr %arr_exp, align 8
  %memberidx76 = getelementptr inbounds %Expression, ptr %120, i32 0, i32 3
  %121 = load ptr, ptr %array_type, align 8
  store ptr %121, ptr %memberidx76, align 8
  %122 = load ptr, ptr %arr_exp, align 8
  br label %common.ret

if.entry72:                                       ; preds = %if.entry67
  store ptr %115, ptr %array_type, align 8
  store i1 false, ptr %is_constant, align 1
  br label %ifend69
}

define ptr @TypeChecker_get_func_args_from_expression(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Expression, ptr %1, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 7
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %var_id = alloca ptr, align 8
  %memberidx1 = getelementptr inbounds %VarAccessExpression, ptr %1, i32 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  store ptr %5, ptr %var_id, align 8
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %if.entry3, label %common.ret

else:                                             ; preds = %2
  %8 = icmp eq i64 %3, 12
  br i1 %8, label %if.entry9, label %common.ret

common.ret:                                       ; preds = %else, %if.entry, %if.entry9, %if.entry3
  %common.ret.op = phi ptr [ %11, %if.entry3 ], [ %15, %if.entry9 ], [ null, %if.entry ], [ null, %else ]
  ret ptr %common.ret.op

if.entry3:                                        ; preds = %if.entry
  %memberidx6 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx6, align 8
  %10 = call ptr @get_func(ptr %9, ptr %5)
  %memberidx7 = getelementptr inbounds %Function, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx7, align 8
  br label %common.ret

if.entry9:                                        ; preds = %else
  %prop_id = alloca ptr, align 8
  %memberidx12 = getelementptr inbounds %MemberExpression, ptr %1, i32 0, i32 5
  %12 = load ptr, ptr %memberidx12, align 8
  store ptr %12, ptr %prop_id, align 8
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx13, align 8
  %14 = call ptr @get_method(ptr %13, ptr %12)
  %memberidx14 = getelementptr inbounds %ClassMethod, ptr %14, i32 0, i32 6
  %15 = load ptr, ptr %memberidx14, align 8
  br label %common.ret
}

define void @IntExpression_constructor(ptr %0, i64 %1) {
  call void @Expression_constructor(ptr %0, i64 0)
  %memberidx = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %3, i64 7)
  store ptr %3, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %0, i32 0, i32 4
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  store i1 true, ptr %memberidx2, align 1
  ret void
}

define ptr @TypeChecker_check_int_expression(ptr %0, ptr %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpression, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %IntExpressionNode, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IntToken, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @IntExpression_constructor(ptr %4, i64 %6)
  %7 = call i1 @is_int(ptr %1)
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  store ptr %1, ptr %memberidx2, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret ptr %4
}

define void @FloatExpression_constructor(ptr %0, double %1) {
  call void @Expression_constructor(ptr %0, i64 1)
  %memberidx = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %3, i64 11)
  store ptr %3, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %FloatExpression, ptr %0, i32 0, i32 4
  store double %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  store i1 true, ptr %memberidx2, align 1
  ret void
}

define ptr @TypeChecker_check_float_expression(ptr %0, ptr %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloatExpression, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %FloatExpressionNode, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %FloatToken, ptr %5, i32 0, i32 2
  %6 = load double, ptr %memberidx1, align 8
  call void @FloatExpression_constructor(ptr %4, double %6)
  %7 = call i1 @is_float(ptr %1)
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  store ptr %1, ptr %memberidx2, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret ptr %4
}

define ptr @TypeChecker_check_char_expression(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpression, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %CharExpressionNode, ptr %1, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CharToken, ptr %4, i32 0, i32 2
  %5 = load i8, ptr %memberidx1, align 1
  %6 = sext i8 %5 to i64
  call void @IntExpression_constructor(ptr %3, i64 %6)
  %memberidx2 = getelementptr inbounds %Expression, ptr %3, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  store i64 2, ptr %7, align 4
  ret ptr %3
}

define void @TypeChecker_check_enum_body(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %EnumNode, ptr %2, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = icmp eq ptr %4, null
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %6, i64 7)
  br label %ifend

else:                                             ; preds = %3
  %7 = call ptr @TypeChecker_check_type(ptr %0, ptr %4)
  %8 = call i1 @is_int(ptr %7)
  %9 = xor i1 %8, true
  br i1 %9, label %if.entry2, label %ifend

ifend:                                            ; preds = %if.entry2, %else, %if.entry
  %enum_variant.0 = phi ptr [ %6, %if.entry ], [ %7, %if.entry2 ], [ %7, %else ]
  %next_enum_value = alloca i64, align 8
  store i64 0, ptr %next_enum_value, align 4
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

if.entry2:                                        ; preds = %else
  %10 = call ptr @TypeChecker_dump_type(ptr %0, ptr %7)
  %11 = load ptr, ptr %10, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 11
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = call ptr %12(ptr %10)
  %14 = alloca ptr, align 8
  %15 = call i64 (ptr, ptr, ...) @asprintf(ptr %14, ptr @208, ptr %13)
  %16 = load ptr, ptr %14, align 8
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %17, ptr %16, i64 %15)
  %18 = load ptr, ptr %memberidx, align 8
  %19 = load ptr, ptr %18, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %17, ptr %19)
  br label %ifend

for.cond:                                         ; preds = %ifend19, %ifend
  %20 = load i64, ptr %i, align 4
  %memberidx8 = getelementptr inbounds %EnumNode, ptr %2, i32 0, i32 1
  %21 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNodeField_, ptr %21, i32 0, i32 2
  %22 = load i64, ptr %memberidx9, align 4
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %enum_node_field = alloca ptr, align 8
  %24 = load ptr, ptr %21, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i32 0, i32 5
  %25 = load ptr, ptr %memberidx11, align 8
  %26 = call ptr %25(ptr %21, i64 %20)
  store ptr %26, ptr %enum_node_field, align 8
  %enum_name = alloca ptr, align 8
  %27 = load ptr, ptr %26, align 8
  %memberidx13 = getelementptr inbounds %IdentifierToken, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %memberidx13, align 8
  store ptr %28, ptr %enum_name, align 8
  %enum_field = alloca ptr, align 8
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumField, ptr null, i32 1) to i32))
  %30 = load ptr, ptr %enum_name, align 8
  call void @EnumField_constructor(ptr %29, ptr %30)
  store ptr %29, ptr %enum_field, align 8
  %31 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PropId, ptr null, i32 1) to i32))
  %32 = load ptr, ptr %1, align 8
  %33 = load i64, ptr %i, align 4
  call void @PropId_constructor(ptr %31, i64 1, ptr %32, i64 %33)
  store ptr %31, ptr %29, align 8
  %34 = load ptr, ptr %enum_node_field, align 8
  %memberidx16 = getelementptr inbounds %EnumNodeField, ptr %34, i32 0, i32 1
  %35 = load ptr, ptr %memberidx16, align 8
  %36 = icmp ne ptr %35, null
  br i1 %36, label %if.entry17, label %else18

common.ret:                                       ; preds = %for.cond, %if.entry31, %if.entry24
  ret void

if.entry17:                                       ; preds = %for.body
  %37 = load ptr, ptr %enum_field, align 8
  %memberidx20 = getelementptr inbounds %EnumField, ptr %37, i32 0, i32 2
  %38 = call ptr @TypeChecker_check_expression(ptr %0, ptr %enum_variant.0, ptr %35)
  store ptr %38, ptr %memberidx20, align 8
  %39 = load ptr, ptr %enum_field, align 8
  %memberidx22 = getelementptr inbounds %EnumField, ptr %39, i32 0, i32 2
  %40 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Expression, ptr %40, i32 0, i32 1
  %41 = load i1, ptr %memberidx23, align 1
  %42 = xor i1 %41, true
  br i1 %42, label %if.entry24, label %ifend26

else18:                                           ; preds = %for.body
  %43 = load ptr, ptr %enum_field, align 8
  %memberidx42 = getelementptr inbounds %EnumField, ptr %43, i32 0, i32 2
  %44 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpression, ptr null, i32 1) to i32))
  %45 = load i64, ptr %next_enum_value, align 4
  call void @IntExpression_constructor(ptr %44, i64 %45)
  store ptr %44, ptr %memberidx42, align 8
  %46 = load ptr, ptr %enum_field, align 8
  %memberidx43 = getelementptr inbounds %EnumField, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx43, align 8
  %memberidx44 = getelementptr inbounds %Expression, ptr %47, i32 0, i32 3
  store ptr %enum_variant.0, ptr %memberidx44, align 8
  %48 = load i64, ptr %next_enum_value, align 4
  %49 = add i64 %48, 1
  store i64 %49, ptr %next_enum_value, align 4
  br label %ifend19

ifend19:                                          ; preds = %else18, %ifend33
  %memberidx45 = getelementptr inbounds %Enum, ptr %1, i32 0, i32 3
  %50 = load ptr, ptr %memberidx45, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %enum_name, align 8
  %54 = load ptr, ptr %enum_field, align 8
  %55 = load ptr, ptr %54, align 8
  call void %52(ptr %50, ptr %53, ptr %55)
  %memberidx48 = getelementptr inbounds %Enum, ptr %1, i32 0, i32 2
  %56 = load ptr, ptr %memberidx48, align 8
  %57 = load ptr, ptr %56, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %57, i32 0, i32 2
  %58 = load ptr, ptr %memberidx49, align 8
  %59 = load ptr, ptr %enum_field, align 8
  call void %58(ptr %56, ptr %59)
  %60 = load i64, ptr %i, align 4
  %61 = add i64 %60, 1
  store i64 %61, ptr %i, align 4
  br label %for.cond

if.entry24:                                       ; preds = %if.entry17
  %62 = call ptr @string_from_bytes(ptr @209, i64 37)
  %63 = load ptr, ptr %enum_node_field, align 8
  %memberidx27 = getelementptr inbounds %EnumNodeField, ptr %63, i32 0, i32 1
  %64 = load ptr, ptr %memberidx27, align 8
  %65 = load ptr, ptr %64, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %62, ptr %65)
  br label %common.ret

ifend26:                                          ; preds = %if.entry17
  %memberidx30 = getelementptr inbounds %Expression, ptr %40, i32 0, i32 3
  %66 = load ptr, ptr %memberidx30, align 8
  %67 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %enum_variant.0, ptr %66)
  %68 = xor i1 %67, true
  br i1 %68, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend26
  %69 = call ptr @TypeChecker_dump_type(ptr %0, ptr %enum_variant.0)
  %70 = load ptr, ptr %69, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i32 0, i32 11
  %71 = load ptr, ptr %memberidx34, align 8
  %72 = call ptr %71(ptr %69)
  %73 = load ptr, ptr %enum_field, align 8
  %memberidx35 = getelementptr inbounds %EnumField, ptr %73, i32 0, i32 2
  %74 = load ptr, ptr %memberidx35, align 8
  %memberidx36 = getelementptr inbounds %Expression, ptr %74, i32 0, i32 3
  %75 = load ptr, ptr %memberidx36, align 8
  %76 = call ptr @TypeChecker_dump_type(ptr %0, ptr %75)
  %77 = load ptr, ptr %76, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %77, i32 0, i32 11
  %78 = load ptr, ptr %memberidx37, align 8
  %79 = call ptr %78(ptr %76)
  %80 = alloca ptr, align 8
  %81 = call i64 (ptr, ptr, ...) @asprintf(ptr %80, ptr @210, ptr %72, ptr %79)
  %82 = load ptr, ptr %80, align 8
  %83 = call ptr @string_from_bytes(ptr %82, i64 %81)
  %84 = load ptr, ptr %enum_node_field, align 8
  %memberidx38 = getelementptr inbounds %EnumNodeField, ptr %84, i32 0, i32 1
  %85 = load ptr, ptr %memberidx38, align 8
  %86 = load ptr, ptr %85, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %83, ptr %86)
  br label %common.ret

ifend33:                                          ; preds = %ifend26
  %memberidx40 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %87 = load ptr, ptr %memberidx40, align 8
  %88 = load ptr, ptr %enum_field, align 8
  %memberidx41 = getelementptr inbounds %EnumField, ptr %88, i32 0, i32 2
  %89 = load ptr, ptr %memberidx41, align 8
  %90 = call i64 @evaluate_const_int_expression(ptr %87, ptr %89)
  %91 = add i64 %90, 1
  store i64 %91, ptr %next_enum_value, align 4
  br label %ifend19
}

define void @StringExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  call void @Expression_constructor(ptr %0, i64 2)
  %memberidx = getelementptr inbounds %StringExpression, ptr %0, i32 0, i32 6
  store ptr %3, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StringExpression, ptr %0, i32 0, i32 5
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %4, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %StringExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  store i1 true, ptr %memberidx4, align 1
  ret void
}

define ptr @TypeChecker_check_string_expression(ptr %0, ptr %1, ptr %2) {
for.entry:
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %memberidx2 = getelementptr inbounds %StringExpressionNode, ptr %2, i32 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx3, align 4
  %6 = icmp slt i64 %i.0, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load ptr, ptr %3, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx4, align 8
  %9 = call ptr @Type_unknown()
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = load ptr, ptr %10, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx6, align 8
  %13 = call ptr %12(ptr %10, i64 %i.0)
  %14 = call ptr @TypeChecker_check_expression(ptr %0, ptr %9, ptr %13)
  call void %8(ptr %3, ptr %14)
  %15 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = call i1 @is_i8_ptr(ptr %1)
  %17 = xor i1 %16, true
  br i1 %17, label %if.entry, label %ifend

if.entry:                                         ; preds = %for.end
  %18 = call ptr @string_from_bytes(ptr @301, i64 6)
  %19 = call ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %18)
  br label %ifend

ifend:                                            ; preds = %for.end, %if.entry
  %expected_type.0 = phi ptr [ %19, %if.entry ], [ %1, %for.end ]
  %str_exp = alloca ptr, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringExpression, ptr null, i32 1) to i32))
  %memberidx7 = getelementptr inbounds %StringExpressionNode, ptr %2, i32 0, i32 3
  %21 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %StrToken, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx8, align 8
  %memberidx10 = getelementptr inbounds %StrToken, ptr %21, i32 0, i32 3
  %23 = load ptr, ptr %memberidx10, align 8
  call void @StringExpression_constructor(ptr %20, ptr %22, ptr %23, ptr %3, ptr %expected_type.0)
  store ptr %20, ptr %str_exp, align 8
  %memberidx11 = getelementptr inbounds %Expression, ptr %20, i32 0, i32 3
  store ptr %expected_type.0, ptr %memberidx11, align 8
  %24 = load ptr, ptr %str_exp, align 8
  ret ptr %24
}

define ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %ExpressionNode, ptr %2, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend48, %if.entry50, %if.entry46, %if.entry42, %if.entry38, %if.entry34, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %8, %if.entry2 ], [ %10, %if.entry6 ], [ %12, %if.entry10 ], [ %14, %if.entry14 ], [ %16, %if.entry18 ], [ %18, %if.entry22 ], [ %20, %if.entry26 ], [ %22, %if.entry30 ], [ %24, %if.entry34 ], [ %26, %if.entry38 ], [ %28, %if.entry42 ], [ %30, %if.entry46 ], [ %32, %if.entry50 ], [ null, %ifend48 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %6 = call ptr @TypeChecker_check_int_expression(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend:                                            ; preds = %3
  %7 = icmp eq i64 %4, 1
  br i1 %7, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %8 = call ptr @TypeChecker_check_float_expression(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend4:                                           ; preds = %ifend
  %9 = icmp eq i64 %4, 3
  br i1 %9, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %10 = call ptr @TypeChecker_check_char_expression(ptr %0, ptr %2)
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  %11 = icmp eq i64 %4, 2
  br i1 %11, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %12 = call ptr @TypeChecker_check_string_expression(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend12:                                          ; preds = %ifend8
  %13 = icmp eq i64 %4, 6
  br i1 %13, label %if.entry14, label %ifend16

if.entry14:                                       ; preds = %ifend12
  %14 = call ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend16:                                          ; preds = %ifend12
  %15 = icmp eq i64 %4, 7
  br i1 %15, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend16
  %16 = call ptr @TypeChecker_check_var_access_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend20:                                          ; preds = %ifend16
  %17 = icmp eq i64 %4, 8
  br i1 %17, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend20
  %18 = call ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend24:                                          ; preds = %ifend20
  %19 = icmp eq i64 %4, 9
  br i1 %19, label %if.entry26, label %ifend28

if.entry26:                                       ; preds = %ifend24
  %20 = call ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend28:                                          ; preds = %ifend24
  %21 = icmp eq i64 %4, 15
  br i1 %21, label %if.entry30, label %ifend32

if.entry30:                                       ; preds = %ifend28
  %22 = call ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend32:                                          ; preds = %ifend28
  %23 = icmp eq i64 %4, 10
  br i1 %23, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend32
  %24 = call ptr @TypeChecker_check_typecast_expr(ptr %0, ptr %2)
  br label %common.ret

ifend36:                                          ; preds = %ifend32
  %25 = icmp eq i64 %4, 11
  br i1 %25, label %if.entry38, label %ifend40

if.entry38:                                       ; preds = %ifend36
  %26 = call ptr @TypeChecker_check_new_expr(ptr %0, ptr %2)
  br label %common.ret

ifend40:                                          ; preds = %ifend36
  %27 = icmp eq i64 %4, 12
  br i1 %27, label %if.entry42, label %ifend44

if.entry42:                                       ; preds = %ifend40
  %28 = call ptr @TypeChecker_check_member_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend44:                                          ; preds = %ifend40
  %29 = icmp eq i64 %4, 13
  br i1 %29, label %if.entry46, label %ifend48

if.entry46:                                       ; preds = %ifend44
  %30 = call ptr @TypeChecker_check_index_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend48:                                          ; preds = %ifend44
  %31 = icmp eq i64 %4, 14
  br i1 %31, label %if.entry50, label %common.ret

if.entry50:                                       ; preds = %ifend48
  %32 = call ptr @TypeChecker_check_call_expr(ptr %0, ptr %1, ptr %2)
  br label %common.ret
}

define void @TypeChecker_declare_global_var(ptr %0, ptr %1) {
  %3 = call ptr @TypeChecker_check_var_declaration(ptr %0, ptr %1)
  %4 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend6, %if.entry4
  ret void

ifend:                                            ; preds = %2
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %VarDeclaration, ptr %3, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @get_var(ptr %5, ptr %6)
  %memberidx2 = getelementptr inbounds %Var, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 1
  %9 = load i1, ptr %memberidx3, align 1
  %10 = xor i1 %9, true
  br i1 %10, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %11 = call ptr @string_from_bytes(ptr @201, i64 54)
  %memberidx7 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i32 0, i32 4
  %12 = load ptr, ptr %memberidx7, align 8
  %13 = load ptr, ptr %12, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %11, ptr %13)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %memberidx9 = getelementptr inbounds %VarDeclaration, ptr %3, i32 0, i32 3
  store i1 true, ptr %memberidx9, align 1
  %14 = call ptr @TypeChecker_get_current_module(ptr %0)
  %memberidx10 = getelementptr inbounds %Module, ptr %14, i32 0, i32 9
  %15 = load ptr, ptr %memberidx10, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx11, align 8
  call void %17(ptr %15, ptr %3)
  br label %common.ret
}

define ptr @TypeChecker_check_var_access_expr(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %VarAccessExpressionNode, ptr %2, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr @string_from_bytes(ptr @194, i64 4)
  %9 = call i1 %7(ptr %5, ptr %8)
  br i1 %9, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend17, %ifend13, %if.entry8, %if.entry4, %if.entry
  %common.ret.op = phi ptr [ %10, %if.entry ], [ %15, %if.entry4 ], [ %20, %if.entry8 ], [ null, %ifend13 ], [ %40, %ifend17 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanExpression, ptr null, i32 1) to i32))
  call void @BooleanExpression_constructor(ptr %10, i1 true)
  br label %common.ret

ifend:                                            ; preds = %3
  %11 = load ptr, ptr %5, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = call ptr @string_from_bytes(ptr @195, i64 5)
  %14 = call i1 %12(ptr %5, ptr %13)
  br i1 %14, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanExpression, ptr null, i32 1) to i32))
  call void @BooleanExpression_constructor(ptr %15, i1 false)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %16 = load ptr, ptr %5, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 4
  %17 = load ptr, ptr %memberidx7, align 8
  %18 = call ptr @string_from_bytes(ptr @196, i64 4)
  %19 = call i1 %17(ptr %5, ptr %18)
  br i1 %19, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend6
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NullExpression, ptr null, i32 1) to i32))
  call void @NullExpression_constructor(ptr %20, ptr %1)
  br label %common.ret

ifend10:                                          ; preds = %ifend6
  %current_scope = alloca ptr, align 8
  %21 = call ptr @TypeChecker_get_current_scope(ptr %0)
  store ptr %21, ptr %current_scope, align 8
  %resolved = alloca ptr, align 8
  %22 = call ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %5)
  store ptr %22, ptr %resolved, align 8
  %var_ty = alloca ptr, align 8
  %23 = call ptr @Type_unknown()
  store ptr %23, ptr %var_ty, align 8
  %24 = load ptr, ptr %resolved, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend10
  %var_id = alloca ptr, align 8
  store ptr %24, ptr %var_id, align 8
  %26 = load i64, ptr %24, align 4
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %if.entry15, label %else16

ifend13:                                          ; preds = %ifend10
  %28 = load ptr, ptr %5, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 11
  %29 = load ptr, ptr %memberidx37, align 8
  %30 = call ptr %29(ptr %5)
  %31 = alloca ptr, align 8
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr %31, ptr @267, ptr %30)
  %33 = load ptr, ptr %31, align 8
  %34 = call ptr @string_from_bytes(ptr %33, i64 %32)
  %35 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 1, ptr %34, ptr %35)
  br label %common.ret

if.entry15:                                       ; preds = %if.entry11
  %memberidx18 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %36 = load ptr, ptr %memberidx18, align 8
  %37 = call ptr @get_func(ptr %36, ptr %24)
  %memberidx19 = getelementptr inbounds %Function, ptr %37, i32 0, i32 4
  %38 = load ptr, ptr %memberidx19, align 8
  store ptr %38, ptr %var_ty, align 8
  br label %ifend17

else16:                                           ; preds = %if.entry11
  %39 = icmp eq i64 %26, 1
  br i1 %39, label %if.entry21, label %else22

ifend17:                                          ; preds = %if.entry34, %else28, %if.entry27, %if.entry21, %if.entry15
  %40 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarAccessExpression, ptr null, i32 1) to i32))
  %41 = load ptr, ptr %var_id, align 8
  %42 = load ptr, ptr %var_ty, align 8
  call void @VarAccessExpression_constructor(ptr %40, ptr %41, ptr %42)
  br label %common.ret

if.entry21:                                       ; preds = %else16
  %memberidx24 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %43 = load ptr, ptr %memberidx24, align 8
  %44 = call ptr @get_var(ptr %43, ptr %24)
  %45 = load ptr, ptr %44, align 8
  store ptr %45, ptr %var_ty, align 8
  br label %ifend17

else22:                                           ; preds = %else16
  %46 = icmp eq i64 %26, 2
  br i1 %46, label %if.entry27, label %else28

if.entry27:                                       ; preds = %else22
  %memberidx30 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %47 = load ptr, ptr %memberidx30, align 8
  %48 = call ptr @get_const(ptr %47, ptr %24)
  %49 = load ptr, ptr %48, align 8
  store ptr %49, ptr %var_ty, align 8
  br label %ifend17

else28:                                           ; preds = %else22
  %50 = icmp eq i64 %26, 3
  %51 = icmp eq i64 %26, 4
  %52 = or i1 %50, %51
  br i1 %52, label %if.entry34, label %ifend17

if.entry34:                                       ; preds = %else28
  %53 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %53, i64 18)
  store ptr %53, ptr %var_ty, align 8
  br label %ifend17
}

define void @IntrinsicCall_constructor(ptr %0, i64 %1) {
  call void @Expression_constructor(ptr %0, i64 16)
  %memberidx = getelementptr inbounds %IntrinsicCall, ptr %0, i32 0, i32 4
  store i64 %1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %0, i32 0, i32 5
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %3, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  %4 = call ptr @Type_unknown()
  store ptr %4, ptr %memberidx4, align 8
  ret void
}

define ptr @TypeChecker_check_intrinsic_call(ptr %0, ptr %1, ptr %2) {
for.entry:
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %2, i32 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %1, i32 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp eq i64 %4, 3
  %6 = icmp eq i64 %4, 4
  %7 = or i1 %5, %6
  %8 = icmp eq i64 %4, 7
  %9 = or i1 %7, %8
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %35, %ifend ]
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %expected_type = alloca ptr, align 8
  %12 = icmp eq i64 %i.0, 1
  %13 = and i1 %9, %12
  br i1 %13, label %true_block, label %false_block

for.end:                                          ; preds = %for.cond
  %memberidx9 = getelementptr inbounds %IntrinsicCall, ptr %1, i32 0, i32 5
  %14 = load ptr, ptr %memberidx9, align 8
  %15 = load ptr, ptr %14, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %memberidx10, align 8
  %17 = call ptr %16(ptr %14, i64 0)
  %memberidx11 = getelementptr inbounds %Expression, ptr %17, i32 0, i32 3
  %18 = load ptr, ptr %memberidx11, align 8
  %19 = call i1 @is_pointer(ptr %18)
  %20 = xor i1 %19, true
  br i1 %20, label %if.entry12, label %ifend14

true_block:                                       ; preds = %for.body
  %21 = call ptr @Type_unknown()
  br label %end

false_block:                                      ; preds = %for.body
  %memberidx3 = getelementptr inbounds %IntrinsicCall, ptr %1, i32 0, i32 5
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx4, align 8
  %25 = call ptr %24(ptr %22, i64 0)
  %memberidx5 = getelementptr inbounds %Expression, ptr %25, i32 0, i32 3
  %26 = load ptr, ptr %memberidx5, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %21, %true_block ], [ %26, %false_block ]
  store ptr %ternary, ptr %expected_type, align 8
  %memberidx6 = getelementptr inbounds %IntrinsicCall, ptr %1, i32 0, i32 5
  %27 = load ptr, ptr %memberidx6, align 8
  %28 = load ptr, ptr %27, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 2
  %29 = load ptr, ptr %memberidx7, align 8
  %30 = load ptr, ptr %3, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i32 0, i32 5
  %31 = load ptr, ptr %memberidx8, align 8
  %32 = call ptr %31(ptr %3, i64 %i.0)
  %33 = call ptr @TypeChecker_check_expression(ptr %0, ptr %ternary, ptr %32)
  call void %29(ptr %27, ptr %33)
  %34 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %34, label %common.ret, label %ifend

common.ret:                                       ; preds = %end, %if.entry85, %if.entry71, %if.entry54, %if.entry39, %if.entry26, %ifend23, %if.entry12
  %common.ret.op = phi ptr [ null, %if.entry12 ], [ %1, %ifend23 ], [ null, %if.entry26 ], [ null, %if.entry39 ], [ null, %if.entry54 ], [ null, %if.entry71 ], [ null, %if.entry85 ], [ null, %end ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %end
  %35 = add i64 %i.0, 1
  br label %for.cond

if.entry12:                                       ; preds = %for.end
  %36 = load ptr, ptr %memberidx9, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i32 0, i32 5
  %38 = load ptr, ptr %memberidx16, align 8
  %39 = call ptr %38(ptr %36, i64 0)
  %memberidx17 = getelementptr inbounds %Expression, ptr %39, i32 0, i32 3
  %40 = load ptr, ptr %memberidx17, align 8
  %41 = call ptr @TypeChecker_dump_type(ptr %0, ptr %40)
  %42 = load ptr, ptr %41, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i32 0, i32 11
  %43 = load ptr, ptr %memberidx18, align 8
  %44 = call ptr %43(ptr %41)
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr %45, ptr @328, ptr %44)
  %47 = load ptr, ptr %45, align 8
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %48, ptr %47, i64 %46)
  %memberidx19 = getelementptr inbounds %CallExpressionNode, ptr %2, i32 0, i32 3
  %49 = load ptr, ptr %memberidx19, align 8
  %50 = load ptr, ptr %49, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %48, ptr %50)
  br label %common.ret

ifend14:                                          ; preds = %for.end
  %51 = icmp eq i64 %4, 6
  br i1 %51, label %if.entry21, label %else22

if.entry21:                                       ; preds = %ifend14
  %52 = load ptr, ptr %memberidx9, align 8
  %memberidx25 = getelementptr inbounds %Array_Expression_, ptr %52, i32 0, i32 2
  %53 = load i64, ptr %memberidx25, align 4
  %54 = icmp ne i64 %53, 2
  br i1 %54, label %if.entry26, label %ifend28

else22:                                           ; preds = %ifend14
  %55 = icmp eq i64 %4, 5
  %56 = or i1 %9, %55
  br i1 %56, label %if.entry49, label %ifend23

ifend23:                                          ; preds = %if.entry95, %ifend87, %else22, %ifend28
  br label %common.ret

if.entry26:                                       ; preds = %if.entry21
  %57 = alloca ptr, align 8
  %58 = call i64 (ptr, ptr, ...) @asprintf(ptr %57, ptr @329, i64 %53)
  %59 = load ptr, ptr %57, align 8
  %60 = call ptr @string_from_bytes(ptr %59, i64 %58)
  %61 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %60, ptr %61)
  br label %common.ret

ifend28:                                          ; preds = %if.entry21
  %memberidx32 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %62 = load ptr, ptr %52, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i32 0, i32 5
  %63 = load ptr, ptr %memberidx34, align 8
  %64 = call ptr %63(ptr %52, i64 0)
  %memberidx35 = getelementptr inbounds %Expression, ptr %64, i32 0, i32 3
  %65 = load ptr, ptr %memberidx35, align 8
  store ptr %65, ptr %memberidx32, align 8
  %66 = load ptr, ptr %memberidx9, align 8
  %67 = load ptr, ptr %66, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %67, i32 0, i32 5
  %68 = load ptr, ptr %memberidx37, align 8
  %69 = call ptr %68(ptr %66, i64 1)
  %memberidx38 = getelementptr inbounds %Expression, ptr %69, i32 0, i32 3
  %70 = load ptr, ptr %memberidx38, align 8
  %71 = call i1 @is_int(ptr %70)
  %72 = xor i1 %71, true
  br i1 %72, label %if.entry39, label %ifend23

if.entry39:                                       ; preds = %ifend28
  %73 = load ptr, ptr %memberidx9, align 8
  %74 = load ptr, ptr %73, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %74, i32 0, i32 5
  %75 = load ptr, ptr %memberidx43, align 8
  %76 = call ptr %75(ptr %73, i64 1)
  %memberidx44 = getelementptr inbounds %Expression, ptr %76, i32 0, i32 3
  %77 = load ptr, ptr %memberidx44, align 8
  %78 = call ptr @TypeChecker_dump_type(ptr %0, ptr %77)
  %79 = load ptr, ptr %78, align 8
  %memberidx45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %79, i32 0, i32 11
  %80 = load ptr, ptr %memberidx45, align 8
  %81 = call ptr %80(ptr %78)
  %82 = alloca ptr, align 8
  %83 = call i64 (ptr, ptr, ...) @asprintf(ptr %82, ptr @330, ptr %81)
  %84 = load ptr, ptr %82, align 8
  %85 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %85, ptr %84, i64 %83)
  %86 = load ptr, ptr %memberidx, align 8
  %87 = load ptr, ptr %86, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %87, i32 0, i32 5
  %88 = load ptr, ptr %memberidx47, align 8
  %89 = call ptr %88(ptr %86, i64 0)
  %90 = load ptr, ptr %89, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %85, ptr %90)
  br label %common.ret

if.entry49:                                       ; preds = %else22
  %91 = load ptr, ptr %memberidx9, align 8
  %memberidx53 = getelementptr inbounds %Array_Expression_, ptr %91, i32 0, i32 2
  %92 = load i64, ptr %memberidx53, align 4
  %93 = icmp ne i64 %92, 3
  br i1 %93, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %if.entry49
  %94 = alloca ptr, align 8
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr %94, ptr @331, i64 %92)
  %96 = load ptr, ptr %94, align 8
  %97 = call ptr @string_from_bytes(ptr %96, i64 %95)
  %98 = load ptr, ptr %2, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %97, ptr %98)
  br label %common.ret

ifend56:                                          ; preds = %if.entry49
  %exp_arg2_type = alloca ptr, align 8
  %99 = load ptr, ptr %91, align 8
  %memberidx61 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %99, i32 0, i32 5
  %100 = load ptr, ptr %memberidx61, align 8
  %101 = call ptr %100(ptr %91, i64 0)
  %memberidx62 = getelementptr inbounds %Expression, ptr %101, i32 0, i32 3
  %102 = load ptr, ptr %memberidx62, align 8
  store ptr %102, ptr %exp_arg2_type, align 8
  %memberidx63 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  store ptr %102, ptr %memberidx63, align 8
  br i1 %55, label %if.entry64, label %ifend66

if.entry64:                                       ; preds = %ifend56
  %103 = load ptr, ptr %exp_arg2_type, align 8
  %memberidx67 = getelementptr inbounds %PointerType, ptr %103, i32 0, i32 1
  %104 = load ptr, ptr %memberidx67, align 8
  store ptr %104, ptr %exp_arg2_type, align 8
  br label %ifend66

ifend66:                                          ; preds = %ifend56, %if.entry64
  %105 = load ptr, ptr %exp_arg2_type, align 8
  %106 = load ptr, ptr %memberidx9, align 8
  %107 = load ptr, ptr %106, align 8
  %memberidx69 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %107, i32 0, i32 5
  %108 = load ptr, ptr %memberidx69, align 8
  %109 = call ptr %108(ptr %106, i64 1)
  %memberidx70 = getelementptr inbounds %Expression, ptr %109, i32 0, i32 3
  %110 = load ptr, ptr %memberidx70, align 8
  %111 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %105, ptr %110)
  %112 = xor i1 %111, true
  br i1 %112, label %if.entry71, label %ifend73

if.entry71:                                       ; preds = %ifend66
  %113 = load ptr, ptr %exp_arg2_type, align 8
  %114 = call ptr @TypeChecker_dump_type(ptr %0, ptr %113)
  %115 = load ptr, ptr %114, align 8
  %memberidx74 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %115, i32 0, i32 11
  %116 = load ptr, ptr %memberidx74, align 8
  %117 = call ptr %116(ptr %114)
  %118 = load ptr, ptr %memberidx9, align 8
  %119 = load ptr, ptr %118, align 8
  %memberidx76 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %119, i32 0, i32 5
  %120 = load ptr, ptr %memberidx76, align 8
  %121 = call ptr %120(ptr %118, i64 1)
  %memberidx77 = getelementptr inbounds %Expression, ptr %121, i32 0, i32 3
  %122 = load ptr, ptr %memberidx77, align 8
  %123 = call ptr @TypeChecker_dump_type(ptr %0, ptr %122)
  %124 = load ptr, ptr %123, align 8
  %memberidx78 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %124, i32 0, i32 11
  %125 = load ptr, ptr %memberidx78, align 8
  %126 = call ptr %125(ptr %123)
  %127 = alloca ptr, align 8
  %128 = call i64 (ptr, ptr, ...) @asprintf(ptr %127, ptr @332, ptr %117, ptr %126)
  %129 = load ptr, ptr %127, align 8
  %130 = call ptr @string_from_bytes(ptr %129, i64 %128)
  %131 = load ptr, ptr %memberidx, align 8
  %132 = load ptr, ptr %131, align 8
  %memberidx80 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %132, i32 0, i32 5
  %133 = load ptr, ptr %memberidx80, align 8
  %134 = call ptr %133(ptr %131, i64 0)
  %135 = load ptr, ptr %134, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %130, ptr %135)
  br label %common.ret

ifend73:                                          ; preds = %ifend66
  %136 = load ptr, ptr %memberidx9, align 8
  %137 = load ptr, ptr %136, align 8
  %memberidx83 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %137, i32 0, i32 5
  %138 = load ptr, ptr %memberidx83, align 8
  %139 = call ptr %138(ptr %136, i64 2)
  %memberidx84 = getelementptr inbounds %Expression, ptr %139, i32 0, i32 3
  %140 = load ptr, ptr %memberidx84, align 8
  %141 = call i1 @is_int(ptr %140)
  %142 = xor i1 %141, true
  br i1 %142, label %if.entry85, label %ifend87

if.entry85:                                       ; preds = %ifend73
  %143 = load ptr, ptr %memberidx9, align 8
  %144 = load ptr, ptr %143, align 8
  %memberidx89 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %144, i32 0, i32 5
  %145 = load ptr, ptr %memberidx89, align 8
  %146 = call ptr %145(ptr %143, i64 2)
  %memberidx90 = getelementptr inbounds %Expression, ptr %146, i32 0, i32 3
  %147 = load ptr, ptr %memberidx90, align 8
  %148 = call ptr @TypeChecker_dump_type(ptr %0, ptr %147)
  %149 = load ptr, ptr %148, align 8
  %memberidx91 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %149, i32 0, i32 11
  %150 = load ptr, ptr %memberidx91, align 8
  %151 = call ptr %150(ptr %148)
  %152 = alloca ptr, align 8
  %153 = call i64 (ptr, ptr, ...) @asprintf(ptr %152, ptr @330, ptr %151)
  %154 = load ptr, ptr %152, align 8
  %155 = call ptr @string_from_bytes(ptr %154, i64 %153)
  %156 = load ptr, ptr %memberidx, align 8
  %157 = load ptr, ptr %156, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %157, i32 0, i32 5
  %158 = load ptr, ptr %memberidx93, align 8
  %159 = call ptr %158(ptr %156, i64 1)
  %160 = load ptr, ptr %159, align 8
  call void @TypeChecker_error(ptr %0, i64 5, ptr %155, ptr %160)
  br label %common.ret

ifend87:                                          ; preds = %ifend73
  br i1 %8, label %if.entry95, label %ifend23

if.entry95:                                       ; preds = %ifend87
  %161 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %161, i64 7)
  store ptr %161, ptr %memberidx63, align 8
  br label %ifend23
}

define i64 @TypeChecker_check_function_call_args_match(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %FunctionType, ptr %1, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %2, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp ne i64 %5, %6
  br i1 %7, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.cond, %3, %if.entry8
  %common.ret.op = phi i64 [ %22, %if.entry8 ], [ -1, %3 ], [ -2, %for.cond ]
  ret i64 %common.ret.op

for.entry:                                        ; preds = %3
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend10, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp slt i64 %8, %9
  br i1 %10, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %11 = load ptr, ptr %memberidx, align 8
  %12 = load ptr, ptr %11, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = call ptr %13(ptr %11, i64 %8)
  %15 = load ptr, ptr %2, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %memberidx6, align 8
  %17 = load i64, ptr %i, align 4
  %18 = call ptr %16(ptr %2, i64 %17)
  %memberidx7 = getelementptr inbounds %Expression, ptr %18, i32 0, i32 3
  %19 = load ptr, ptr %memberidx7, align 8
  %20 = call i1 @TypeChecker_types_are_eq(ptr %0, ptr %14, ptr %19)
  %21 = xor i1 %20, true
  br i1 %21, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %for.body
  %22 = load i64, ptr %i, align 4
  br label %common.ret

ifend10:                                          ; preds = %for.body
  %23 = load i64, ptr %i, align 4
  %24 = add i64 %23, 1
  store i64 %24, ptr %i, align 4
  br label %for.cond
}

define void @TypeChecker_error(ptr %0, i64 %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 7
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %5, i32 0, i32 6
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloError, ptr null, i32 1) to i32))
  call void @FloError_constructor(ptr %9, i64 %1, ptr %2, ptr %3)
  call void %8(ptr %6, ptr %9)
  ret void
}

define void @TypeChecker_check_function_body(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Function, ptr %1, i32 0, i32 6
  %4 = load i1, ptr %memberidx, align 1
  br i1 %4, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %3, %else21, %ifend16
  ret void

ifend:                                            ; preds = %3
  %prev_func = alloca ptr, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  store ptr %5, ptr %prev_func, align 8
  %6 = load ptr, ptr %1, align 8
  store ptr %6, ptr %memberidx1, align 8
  %prev_scope = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 6
  %7 = load ptr, ptr %memberidx4, align 8
  store ptr %7, ptr %prev_scope, align 8
  %memberidx6 = getelementptr inbounds %Function, ptr %1, i32 0, i32 5
  %8 = load ptr, ptr %memberidx6, align 8
  store ptr %8, ptr %memberidx4, align 8
  %memberidx7 = getelementptr inbounds %Function, ptr %1, i32 0, i32 3
  %memberidx8 = getelementptr inbounds %FunctionDeclarationNode, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %memberidx8, align 8
  %10 = call ptr @TypeChecker_check_block(ptr %0, ptr %9)
  store ptr %10, ptr %memberidx7, align 8
  %11 = call i1 @TypeChecker_has_errored(ptr %0)
  br i1 %11, label %common.ret, label %ifend11

ifend11:                                          ; preds = %ifend
  %12 = load ptr, ptr %memberidx7, align 8
  %memberidx13 = getelementptr inbounds %Block, ptr %12, i32 0, i32 1
  %13 = load i1, ptr %memberidx13, align 1
  %14 = xor i1 %13, true
  br i1 %14, label %if.entry14, label %ifend16

if.entry14:                                       ; preds = %ifend11
  %memberidx17 = getelementptr inbounds %Function, ptr %1, i32 0, i32 4
  %15 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %FunctionType, ptr %15, i32 0, i32 2
  %16 = load ptr, ptr %memberidx18, align 8
  %17 = load i64, ptr %16, align 4
  %18 = icmp eq i64 %17, 12
  br i1 %18, label %if.entry20, label %else21

ifend16:                                          ; preds = %ifend11, %if.entry20
  %memberidx29 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %19 = load ptr, ptr %memberidx29, align 8
  %20 = load ptr, ptr %memberidx6, align 8
  %21 = call ptr @get_scope(ptr %19, ptr %20)
  %memberidx31 = getelementptr inbounds %Scope, ptr %21, i32 0, i32 5
  %22 = load ptr, ptr %memberidx31, align 8
  store ptr %22, ptr %memberidx4, align 8
  br label %common.ret

if.entry20:                                       ; preds = %if.entry14
  %23 = load ptr, ptr %12, align 8
  %24 = load ptr, ptr %23, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i32 0, i32 2
  %25 = load ptr, ptr %memberidx25, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ReturnStatement, ptr null, i32 1) to i32))
  call void @ReturnStatement_constructor(ptr %26)
  call void %25(ptr %23, ptr %26)
  br label %ifend16

else21:                                           ; preds = %if.entry14
  %27 = call ptr @string_from_bytes(ptr @260, i64 40)
  %memberidx26 = getelementptr inbounds %FunctionDeclarationNode, ptr %2, i32 0, i32 3
  %28 = load ptr, ptr %memberidx26, align 8
  %29 = load ptr, ptr %28, align 8
  call void @TypeChecker_error(ptr %0, i64 4, ptr %27, ptr %29)
  br label %common.ret
}

define void @TypeChecker_constructor(ptr %0) {
  store ptr @VTableTypeChecker, ptr %0, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 2
  store i64 -1, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 8
  store i1 false, ptr %memberidx1, align 1
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 1
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Program, ptr null, i32 1) to i32))
  call void @Program_constructor(ptr %2)
  store ptr %2, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %0, i32 0, i32 10
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_Generic_, ptr null, i32 1) to i32))
  call void @Map_string_Generic__constructor(ptr %3)
  store ptr %3, ptr %memberidx3, align 8
  ret void
}

define ptr @get_scope(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Program, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i64, ptr %1, align 4
  %7 = call ptr %5(ptr %3, i64 %6)
  %memberidx3 = getelementptr inbounds %Module, ptr %7, i32 0, i32 7
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %ScopeId, ptr %1, i32 0, i32 1
  %11 = load i64, ptr %memberidx5, align 4
  %12 = call ptr %10(ptr %8, i64 %11)
  ret ptr %12
}

define ptr @get_class_prop_type(ptr %0, ptr %1) {
  %3 = call ptr @get_class_from_prop_id(ptr %0, ptr %1)
  %4 = load i64, ptr %1, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %11, %if.entry ], [ %17, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx1 = getelementptr inbounds %Class, ptr %3, i32 0, i32 5
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %9 = load i64, ptr %memberidx3, align 4
  %10 = call ptr %8(ptr %6, i64 %9)
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %10, i32 0, i32 4
  %11 = load ptr, ptr %memberidx4, align 8
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx5 = getelementptr inbounds %Class, ptr %3, i32 0, i32 4
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 5
  %14 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %15 = load i64, ptr %memberidx7, align 4
  %16 = call ptr %14(ptr %12, i64 %15)
  %memberidx8 = getelementptr inbounds %ClassField, ptr %16, i32 0, i32 4
  %17 = load ptr, ptr %memberidx8, align 8
  br label %common.ret
}

define ptr @get_class_from_prop_id(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %PropId, ptr %1, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @get_class(ptr %0, ptr %3)
  ret ptr %4
}

define ptr @get_class(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Program, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i64, ptr %1, align 4
  %7 = call ptr %5(ptr %3, i64 %6)
  %memberidx3 = getelementptr inbounds %Module, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %TypeId, ptr %1, i32 0, i32 2
  %11 = load i64, ptr %memberidx5, align 4
  %12 = call ptr %10(ptr %8, i64 %11)
  ret ptr %12
}

define void @PointerType_constructor(ptr %0, ptr %1) {
  call void @Type_constructor(ptr %0, i64 15)
  %memberidx = getelementptr inbounds %PointerType, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  ret void
}

define void @ObjectType_constructor(ptr %0, ptr %1) {
  call void @Type_constructor(ptr %0, i64 13)
  %memberidx = getelementptr inbounds %ObjectType, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  ret void
}

define void @EnumType_constructor(ptr %0, ptr %1) {
  call void @Type_constructor(ptr %0, i64 14)
  %memberidx = getelementptr inbounds %EnumType, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  ret void
}

define ptr @get_class_from_type(ptr %0, ptr %1) {
  %3 = load i64, ptr %1, align 4
  %4 = icmp eq i64 %3, 20
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry3, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %9, %if.entry3 ], [ null, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx1 = getelementptr inbounds %GenericType, ptr %1, i32 0, i32 3
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @get_class_from_type(ptr %0, ptr %5)
  br label %common.ret

ifend:                                            ; preds = %2
  %7 = icmp eq i64 %3, 13
  br i1 %7, label %if.entry3, label %common.ret

if.entry3:                                        ; preds = %ifend
  %memberidx6 = getelementptr inbounds %ObjectType, ptr %1, i32 0, i32 1
  %8 = load ptr, ptr %memberidx6, align 8
  %9 = call ptr @get_class(ptr %0, ptr %8)
  br label %common.ret
}

define ptr @get_enum(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Program, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i64, ptr %1, align 4
  %7 = call ptr %5(ptr %3, i64 %6)
  %memberidx3 = getelementptr inbounds %Module, ptr %7, i32 0, i32 6
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %TypeId, ptr %1, i32 0, i32 2
  %11 = load i64, ptr %memberidx5, align 4
  %12 = call ptr %10(ptr %8, i64 %11)
  ret ptr %12
}

define ptr @dump_type(ptr %0, i1 %1) {
  %3 = load i64, ptr %0, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %true_block45, %false_block46, %true_block, %false_block, %ifend56, %if.entry54, %if.entry50, %if.entry38, %if.entry34, %if.entry30, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %5, %if.entry ], [ %7, %if.entry2 ], [ %9, %if.entry6 ], [ %11, %if.entry10 ], [ %13, %if.entry14 ], [ %15, %if.entry18 ], [ %17, %if.entry22 ], [ %25, %if.entry30 ], [ %27, %if.entry34 ], [ %29, %if.entry38 ], [ %37, %if.entry50 ], [ %39, %if.entry54 ], [ %40, %ifend56 ], [ %23, %true_block ], [ %24, %false_block ], [ %35, %true_block45 ], [ %36, %false_block46 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %5 = call ptr @string_from_bytes(ptr @47, i64 4)
  br label %common.ret

ifend:                                            ; preds = %2
  %6 = icmp eq i64 %3, 1
  br i1 %6, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %7 = call ptr @string_from_bytes(ptr @48, i64 2)
  br label %common.ret

ifend4:                                           ; preds = %ifend
  %8 = icmp eq i64 %3, 2
  br i1 %8, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %9 = call ptr @string_from_bytes(ptr @49, i64 2)
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  %10 = icmp eq i64 %3, 3
  br i1 %10, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %11 = call ptr @string_from_bytes(ptr @50, i64 3)
  br label %common.ret

ifend12:                                          ; preds = %ifend8
  %12 = icmp eq i64 %3, 4
  br i1 %12, label %if.entry14, label %ifend16

if.entry14:                                       ; preds = %ifend12
  %13 = call ptr @string_from_bytes(ptr @51, i64 3)
  br label %common.ret

ifend16:                                          ; preds = %ifend12
  %14 = icmp eq i64 %3, 5
  br i1 %14, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend16
  %15 = call ptr @string_from_bytes(ptr @52, i64 3)
  br label %common.ret

ifend20:                                          ; preds = %ifend16
  %16 = icmp eq i64 %3, 6
  br i1 %16, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend20
  %17 = call ptr @string_from_bytes(ptr @53, i64 4)
  br label %common.ret

ifend24:                                          ; preds = %ifend20
  %18 = icmp eq i64 %3, 7
  br i1 %18, label %if.entry26, label %ifend28

if.entry26:                                       ; preds = %ifend24
  br i1 %1, label %true_block, label %false_block

ifend28:                                          ; preds = %ifend24
  %19 = icmp eq i64 %3, 8
  br i1 %19, label %if.entry30, label %ifend32

true_block:                                       ; preds = %if.entry26
  %20 = alloca ptr, align 8
  %21 = call i64 (ptr, ptr, ...) @asprintf(ptr %20, ptr @189, i64 64)
  %22 = load ptr, ptr %20, align 8
  %23 = call ptr @string_from_bytes(ptr %22, i64 %21)
  br label %common.ret

false_block:                                      ; preds = %if.entry26
  %24 = call ptr @string_from_bytes(ptr @54, i64 3)
  br label %common.ret

if.entry30:                                       ; preds = %ifend28
  %25 = call ptr @string_from_bytes(ptr @55, i64 3)
  br label %common.ret

ifend32:                                          ; preds = %ifend28
  %26 = icmp eq i64 %3, 9
  br i1 %26, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend32
  %27 = call ptr @string_from_bytes(ptr @56, i64 3)
  br label %common.ret

ifend36:                                          ; preds = %ifend32
  %28 = icmp eq i64 %3, 10
  br i1 %28, label %if.entry38, label %ifend40

if.entry38:                                       ; preds = %ifend36
  %29 = call ptr @string_from_bytes(ptr @57, i64 3)
  br label %common.ret

ifend40:                                          ; preds = %ifend36
  %30 = icmp eq i64 %3, 11
  br i1 %30, label %if.entry42, label %ifend44

if.entry42:                                       ; preds = %ifend40
  br i1 %1, label %true_block45, label %false_block46

ifend44:                                          ; preds = %ifend40
  %31 = icmp eq i64 %3, 12
  br i1 %31, label %if.entry50, label %ifend52

true_block45:                                     ; preds = %if.entry42
  %32 = alloca ptr, align 8
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr %32, ptr @190, i64 64)
  %34 = load ptr, ptr %32, align 8
  %35 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %35, ptr %34, i64 %33)
  br label %common.ret

false_block46:                                    ; preds = %if.entry42
  %36 = call ptr @string_from_bytes(ptr @58, i64 5)
  br label %common.ret

if.entry50:                                       ; preds = %ifend44
  %37 = call ptr @string_from_bytes(ptr @59, i64 4)
  br label %common.ret

ifend52:                                          ; preds = %ifend44
  %38 = icmp eq i64 %3, 18
  br i1 %38, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %ifend52
  %39 = call ptr @string_from_bytes(ptr @191, i64 6)
  br label %common.ret

ifend56:                                          ; preds = %ifend52
  %40 = call ptr @string_from_bytes(ptr @192, i64 7)
  br label %common.ret
}

define ptr @ClassVarId_to_classId(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassId, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %VarId, ptr %0, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %VarId, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  call void @ClassId_constructor(ptr %2, i64 %3, i64 %4)
  ret ptr %2
}

define void @ClassVarId_constructor(ptr %0, ptr %1) {
  %3 = load i64, ptr %1, align 4
  %memberidx1 = getelementptr inbounds %TypeId, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  call void @VarId_constructor(ptr %0, i64 3, i64 %3, i64 %4)
  ret void
}

define ptr @EnumVarId_to_enumId(ptr %0) {
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumId, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %VarId, ptr %0, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %VarId, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  call void @EnumId_constructor(ptr %2, i64 %3, i64 %4)
  ret ptr %2
}

define void @EnumVarId_constructor(ptr %0, ptr %1) {
  %3 = load i64, ptr %1, align 4
  %memberidx1 = getelementptr inbounds %TypeId, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  call void @VarId_constructor(ptr %0, i64 4, i64 %3, i64 %4)
  ret void
}

define ptr @get_var(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Program, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  %7 = call ptr %5(ptr %3, i64 %6)
  %memberidx3 = getelementptr inbounds %Module, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 2
  %11 = load i64, ptr %memberidx5, align 4
  %12 = call ptr %10(ptr %8, i64 %11)
  ret ptr %12
}

define i1 @is_int(ptr %0) {
  %2 = load i64, ptr %0, align 4
  %3 = icmp sge i64 %2, 1
  %4 = icmp sle i64 %2, 7
  %5 = and i1 %3, %4
  ret i1 %5
}

define i64 @evaluate_const_int_expression(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Expression, ptr %1, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend74, %if.entry86, %if.entry81, %if.entry76, %if.entry66, %if.entry60, %if.entry54, %if.entry48, %if.entry42, %if.entry36, %if.entry30, %if.entry24, %if.entry18, %if.entry12, %if.entry3, %if.entry
  %common.ret.op = phi i64 [ %5, %if.entry ], [ %8, %if.entry3 ], [ %19, %if.entry12 ], [ %26, %if.entry18 ], [ %33, %if.entry24 ], [ %40, %if.entry30 ], [ %47, %if.entry36 ], [ %54, %if.entry42 ], [ %61, %if.entry48 ], [ %68, %if.entry54 ], [ %75, %if.entry60 ], [ %82, %if.entry66 ], [ %89, %if.entry76 ], [ %93, %if.entry81 ], [ %97, %if.entry86 ], [ -99999999, %ifend74 ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %1, i32 0, i32 4
  %5 = load i64, ptr %memberidx1, align 4
  br label %common.ret

ifend:                                            ; preds = %2
  %6 = icmp eq i64 %3, 1
  br i1 %6, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %memberidx6 = getelementptr inbounds %FloatExpression, ptr %1, i32 0, i32 4
  %7 = load double, ptr %memberidx6, align 8
  %8 = fptosi double %7 to i64
  br label %common.ret

ifend5:                                           ; preds = %ifend
  %9 = icmp eq i64 %3, 8
  br i1 %9, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend5
  %bin_exp = alloca ptr, align 8
  store ptr %1, ptr %bin_exp, align 8
  %memberidx11 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 5
  %10 = load i64, ptr %memberidx11, align 4
  %11 = icmp eq i64 %10, 1
  br i1 %11, label %if.entry12, label %ifend14

ifend10:                                          ; preds = %ifend62, %ifend5
  %12 = load i64, ptr %memberidx, align 4
  %13 = icmp eq i64 %12, 9
  br i1 %13, label %if.entry72, label %ifend74

if.entry12:                                       ; preds = %if.entry8
  %memberidx15 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %14 = load ptr, ptr %memberidx15, align 8
  %15 = call i64 @evaluate_const_int_expression(ptr %0, ptr %14)
  %16 = load ptr, ptr %bin_exp, align 8
  %memberidx16 = getelementptr inbounds %BinaryExpression, ptr %16, i32 0, i32 6
  %17 = load ptr, ptr %memberidx16, align 8
  %18 = call i64 @evaluate_const_int_expression(ptr %0, ptr %17)
  %19 = add i64 %15, %18
  br label %common.ret

ifend14:                                          ; preds = %if.entry8
  %20 = icmp eq i64 %10, 2
  br i1 %20, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend14
  %memberidx21 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %21 = load ptr, ptr %memberidx21, align 8
  %22 = call i64 @evaluate_const_int_expression(ptr %0, ptr %21)
  %23 = load ptr, ptr %bin_exp, align 8
  %memberidx22 = getelementptr inbounds %BinaryExpression, ptr %23, i32 0, i32 6
  %24 = load ptr, ptr %memberidx22, align 8
  %25 = call i64 @evaluate_const_int_expression(ptr %0, ptr %24)
  %26 = sub i64 %22, %25
  br label %common.ret

ifend20:                                          ; preds = %ifend14
  %27 = icmp eq i64 %10, 3
  br i1 %27, label %if.entry24, label %ifend26

if.entry24:                                       ; preds = %ifend20
  %memberidx27 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %28 = load ptr, ptr %memberidx27, align 8
  %29 = call i64 @evaluate_const_int_expression(ptr %0, ptr %28)
  %30 = load ptr, ptr %bin_exp, align 8
  %memberidx28 = getelementptr inbounds %BinaryExpression, ptr %30, i32 0, i32 6
  %31 = load ptr, ptr %memberidx28, align 8
  %32 = call i64 @evaluate_const_int_expression(ptr %0, ptr %31)
  %33 = mul i64 %29, %32
  br label %common.ret

ifend26:                                          ; preds = %ifend20
  %34 = icmp eq i64 %10, 4
  br i1 %34, label %if.entry30, label %ifend32

if.entry30:                                       ; preds = %ifend26
  %memberidx33 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %35 = load ptr, ptr %memberidx33, align 8
  %36 = call i64 @evaluate_const_int_expression(ptr %0, ptr %35)
  %37 = load ptr, ptr %bin_exp, align 8
  %memberidx34 = getelementptr inbounds %BinaryExpression, ptr %37, i32 0, i32 6
  %38 = load ptr, ptr %memberidx34, align 8
  %39 = call i64 @evaluate_const_int_expression(ptr %0, ptr %38)
  %40 = sdiv i64 %36, %39
  br label %common.ret

ifend32:                                          ; preds = %ifend26
  %41 = icmp eq i64 %10, 5
  br i1 %41, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %ifend32
  %memberidx39 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %42 = load ptr, ptr %memberidx39, align 8
  %43 = call i64 @evaluate_const_int_expression(ptr %0, ptr %42)
  %44 = load ptr, ptr %bin_exp, align 8
  %memberidx40 = getelementptr inbounds %BinaryExpression, ptr %44, i32 0, i32 6
  %45 = load ptr, ptr %memberidx40, align 8
  %46 = call i64 @evaluate_const_int_expression(ptr %0, ptr %45)
  %47 = srem i64 %43, %46
  br label %common.ret

ifend38:                                          ; preds = %ifend32
  %48 = icmp eq i64 %10, 13
  br i1 %48, label %if.entry42, label %ifend44

if.entry42:                                       ; preds = %ifend38
  %memberidx45 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %49 = load ptr, ptr %memberidx45, align 8
  %50 = call i64 @evaluate_const_int_expression(ptr %0, ptr %49)
  %51 = load ptr, ptr %bin_exp, align 8
  %memberidx46 = getelementptr inbounds %BinaryExpression, ptr %51, i32 0, i32 6
  %52 = load ptr, ptr %memberidx46, align 8
  %53 = call i64 @evaluate_const_int_expression(ptr %0, ptr %52)
  %54 = shl i64 %50, %53
  br label %common.ret

ifend44:                                          ; preds = %ifend38
  %55 = icmp eq i64 %10, 14
  br i1 %55, label %if.entry48, label %ifend50

if.entry48:                                       ; preds = %ifend44
  %memberidx51 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %56 = load ptr, ptr %memberidx51, align 8
  %57 = call i64 @evaluate_const_int_expression(ptr %0, ptr %56)
  %58 = load ptr, ptr %bin_exp, align 8
  %memberidx52 = getelementptr inbounds %BinaryExpression, ptr %58, i32 0, i32 6
  %59 = load ptr, ptr %memberidx52, align 8
  %60 = call i64 @evaluate_const_int_expression(ptr %0, ptr %59)
  %61 = ashr i64 %57, %60
  br label %common.ret

ifend50:                                          ; preds = %ifend44
  %62 = icmp eq i64 %10, 15
  br i1 %62, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %ifend50
  %memberidx57 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %63 = load ptr, ptr %memberidx57, align 8
  %64 = call i64 @evaluate_const_int_expression(ptr %0, ptr %63)
  %65 = load ptr, ptr %bin_exp, align 8
  %memberidx58 = getelementptr inbounds %BinaryExpression, ptr %65, i32 0, i32 6
  %66 = load ptr, ptr %memberidx58, align 8
  %67 = call i64 @evaluate_const_int_expression(ptr %0, ptr %66)
  %68 = or i64 %64, %67
  br label %common.ret

ifend56:                                          ; preds = %ifend50
  %69 = icmp eq i64 %10, 16
  br i1 %69, label %if.entry60, label %ifend62

if.entry60:                                       ; preds = %ifend56
  %memberidx63 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %70 = load ptr, ptr %memberidx63, align 8
  %71 = call i64 @evaluate_const_int_expression(ptr %0, ptr %70)
  %72 = load ptr, ptr %bin_exp, align 8
  %memberidx64 = getelementptr inbounds %BinaryExpression, ptr %72, i32 0, i32 6
  %73 = load ptr, ptr %memberidx64, align 8
  %74 = call i64 @evaluate_const_int_expression(ptr %0, ptr %73)
  %75 = and i64 %71, %74
  br label %common.ret

ifend62:                                          ; preds = %ifend56
  %76 = icmp eq i64 %10, 17
  br i1 %76, label %if.entry66, label %ifend10

if.entry66:                                       ; preds = %ifend62
  %memberidx69 = getelementptr inbounds %BinaryExpression, ptr %1, i32 0, i32 4
  %77 = load ptr, ptr %memberidx69, align 8
  %78 = call i64 @evaluate_const_int_expression(ptr %0, ptr %77)
  %79 = load ptr, ptr %bin_exp, align 8
  %memberidx70 = getelementptr inbounds %BinaryExpression, ptr %79, i32 0, i32 6
  %80 = load ptr, ptr %memberidx70, align 8
  %81 = call i64 @evaluate_const_int_expression(ptr %0, ptr %80)
  %82 = xor i64 %78, %81
  br label %common.ret

if.entry72:                                       ; preds = %ifend10
  %unary_exp = alloca ptr, align 8
  store ptr %1, ptr %unary_exp, align 8
  %memberidx75 = getelementptr inbounds %UnaryExpression, ptr %1, i32 0, i32 4
  %83 = load i64, ptr %memberidx75, align 4
  %84 = icmp eq i64 %83, 5
  br i1 %84, label %if.entry76, label %ifend78

ifend74:                                          ; preds = %ifend78, %ifend10
  %85 = load i64, ptr %memberidx, align 4
  %86 = icmp eq i64 %85, 7
  br i1 %86, label %if.entry86, label %common.ret

if.entry76:                                       ; preds = %if.entry72
  %memberidx79 = getelementptr inbounds %UnaryExpression, ptr %1, i32 0, i32 5
  %87 = load ptr, ptr %memberidx79, align 8
  %88 = call i64 @evaluate_const_int_expression(ptr %0, ptr %87)
  %89 = sub i64 0, %88
  br label %common.ret

ifend78:                                          ; preds = %if.entry72
  %90 = icmp eq i64 %83, 6
  br i1 %90, label %if.entry81, label %ifend74

if.entry81:                                       ; preds = %ifend78
  %memberidx84 = getelementptr inbounds %UnaryExpression, ptr %1, i32 0, i32 5
  %91 = load ptr, ptr %memberidx84, align 8
  %92 = call i64 @evaluate_const_int_expression(ptr %0, ptr %91)
  %93 = xor i64 %92, -1
  br label %common.ret

if.entry86:                                       ; preds = %ifend74
  %var_exp = alloca ptr, align 8
  store ptr %1, ptr %var_exp, align 8
  %memberidx89 = getelementptr inbounds %VarAccessExpression, ptr %1, i32 0, i32 4
  %94 = load ptr, ptr %memberidx89, align 8
  %95 = call ptr @get_const(ptr %0, ptr %94)
  %memberidx90 = getelementptr inbounds %Const, ptr %95, i32 0, i32 2
  %96 = load ptr, ptr %memberidx90, align 8
  %97 = call i64 @evaluate_const_int_expression(ptr %0, ptr %96)
  br label %common.ret
}

define void @VarAccessExpression_constructor(ptr %0, ptr %1, ptr %2) {
  call void @Expression_constructor(ptr %0, i64 7)
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  %4 = load i64, ptr %1, align 4
  %5 = icmp eq i64 %4, 2
  store i1 %5, ptr %memberidx2, align 1
  ret void
}

define ptr @get_const(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Program, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  %7 = call ptr %5(ptr %3, i64 %6)
  %memberidx3 = getelementptr inbounds %Module, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 2
  %11 = load i64, ptr %memberidx5, align 4
  %12 = call ptr %10(ptr %8, i64 %11)
  ret ptr %12
}

define i1 @is_operator_overload_name(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @string_from_bytes(ptr @211, i64 6)
  %5 = call i1 %3(ptr %0, ptr %4)
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend108, %ifend104, %ifend100, %ifend96, %ifend92, %ifend88, %ifend84, %ifend80, %ifend76, %ifend72, %ifend68, %ifend64, %ifend60, %ifend56, %ifend52, %ifend48, %ifend44, %ifend40, %ifend36, %ifend32, %ifend28, %ifend24, %ifend20, %ifend16, %ifend12, %ifend8, %ifend4, %ifend, %1
  %common.ret.op = phi i1 [ true, %1 ], [ true, %ifend ], [ true, %ifend4 ], [ true, %ifend8 ], [ true, %ifend12 ], [ true, %ifend16 ], [ true, %ifend20 ], [ true, %ifend24 ], [ true, %ifend28 ], [ true, %ifend32 ], [ true, %ifend36 ], [ true, %ifend40 ], [ true, %ifend44 ], [ true, %ifend48 ], [ true, %ifend52 ], [ true, %ifend56 ], [ true, %ifend60 ], [ true, %ifend64 ], [ true, %ifend68 ], [ true, %ifend72 ], [ true, %ifend76 ], [ true, %ifend80 ], [ true, %ifend84 ], [ true, %ifend88 ], [ true, %ifend92 ], [ true, %ifend96 ], [ true, %ifend100 ], [ true, %ifend104 ], [ %117, %ifend108 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %1
  %6 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr @string_from_bytes(ptr @212, i64 7)
  %9 = call i1 %7(ptr %0, ptr %8)
  br i1 %9, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %10 = load ptr, ptr %0, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 4
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = call ptr @string_from_bytes(ptr @213, i64 7)
  %13 = call i1 %11(ptr %0, ptr %12)
  br i1 %13, label %common.ret, label %ifend8

ifend8:                                           ; preds = %ifend4
  %14 = load ptr, ptr %0, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 4
  %15 = load ptr, ptr %memberidx9, align 8
  %16 = call ptr @string_from_bytes(ptr @214, i64 7)
  %17 = call i1 %15(ptr %0, ptr %16)
  br i1 %17, label %common.ret, label %ifend12

ifend12:                                          ; preds = %ifend8
  %18 = load ptr, ptr %0, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i32 0, i32 4
  %19 = load ptr, ptr %memberidx13, align 8
  %20 = call ptr @string_from_bytes(ptr @215, i64 7)
  %21 = call i1 %19(ptr %0, ptr %20)
  br i1 %21, label %common.ret, label %ifend16

ifend16:                                          ; preds = %ifend12
  %22 = load ptr, ptr %0, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i32 0, i32 4
  %23 = load ptr, ptr %memberidx17, align 8
  %24 = call ptr @string_from_bytes(ptr @216, i64 6)
  %25 = call i1 %23(ptr %0, ptr %24)
  br i1 %25, label %common.ret, label %ifend20

ifend20:                                          ; preds = %ifend16
  %26 = load ptr, ptr %0, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx21, align 8
  %28 = call ptr @string_from_bytes(ptr @217, i64 8)
  %29 = call i1 %27(ptr %0, ptr %28)
  br i1 %29, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend20
  %30 = load ptr, ptr %0, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i32 0, i32 4
  %31 = load ptr, ptr %memberidx25, align 8
  %32 = call ptr @string_from_bytes(ptr @218, i64 8)
  %33 = call i1 %31(ptr %0, ptr %32)
  br i1 %33, label %common.ret, label %ifend28

ifend28:                                          ; preds = %ifend24
  %34 = load ptr, ptr %0, align 8
  %memberidx29 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i32 0, i32 4
  %35 = load ptr, ptr %memberidx29, align 8
  %36 = call ptr @string_from_bytes(ptr @219, i64 8)
  %37 = call i1 %35(ptr %0, ptr %36)
  br i1 %37, label %common.ret, label %ifend32

ifend32:                                          ; preds = %ifend28
  %38 = load ptr, ptr %0, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %38, i32 0, i32 4
  %39 = load ptr, ptr %memberidx33, align 8
  %40 = call ptr @string_from_bytes(ptr @220, i64 8)
  %41 = call i1 %39(ptr %0, ptr %40)
  br i1 %41, label %common.ret, label %ifend36

ifend36:                                          ; preds = %ifend32
  %42 = load ptr, ptr %0, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i32 0, i32 4
  %43 = load ptr, ptr %memberidx37, align 8
  %44 = call ptr @string_from_bytes(ptr @221, i64 7)
  %45 = call i1 %43(ptr %0, ptr %44)
  br i1 %45, label %common.ret, label %ifend40

ifend40:                                          ; preds = %ifend36
  %46 = load ptr, ptr %0, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 4
  %47 = load ptr, ptr %memberidx41, align 8
  %48 = call ptr @string_from_bytes(ptr @222, i64 8)
  %49 = call i1 %47(ptr %0, ptr %48)
  br i1 %49, label %common.ret, label %ifend44

ifend44:                                          ; preds = %ifend40
  %50 = load ptr, ptr %0, align 8
  %memberidx45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i32 0, i32 4
  %51 = load ptr, ptr %memberidx45, align 8
  %52 = call ptr @string_from_bytes(ptr @223, i64 8)
  %53 = call i1 %51(ptr %0, ptr %52)
  br i1 %53, label %common.ret, label %ifend48

ifend48:                                          ; preds = %ifend44
  %54 = load ptr, ptr %0, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i32 0, i32 4
  %55 = load ptr, ptr %memberidx49, align 8
  %56 = call ptr @string_from_bytes(ptr @224, i64 11)
  %57 = call i1 %55(ptr %0, ptr %56)
  br i1 %57, label %common.ret, label %ifend52

ifend52:                                          ; preds = %ifend48
  %58 = load ptr, ptr %0, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i32 0, i32 4
  %59 = load ptr, ptr %memberidx53, align 8
  %60 = call ptr @string_from_bytes(ptr @225, i64 11)
  %61 = call i1 %59(ptr %0, ptr %60)
  br i1 %61, label %common.ret, label %ifend56

ifend56:                                          ; preds = %ifend52
  %62 = load ptr, ptr %0, align 8
  %memberidx57 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i32 0, i32 4
  %63 = load ptr, ptr %memberidx57, align 8
  %64 = call ptr @string_from_bytes(ptr @226, i64 6)
  %65 = call i1 %63(ptr %0, ptr %64)
  br i1 %65, label %common.ret, label %ifend60

ifend60:                                          ; preds = %ifend56
  %66 = load ptr, ptr %0, align 8
  %memberidx61 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i32 0, i32 4
  %67 = load ptr, ptr %memberidx61, align 8
  %68 = call ptr @string_from_bytes(ptr @227, i64 6)
  %69 = call i1 %67(ptr %0, ptr %68)
  br i1 %69, label %common.ret, label %ifend64

ifend64:                                          ; preds = %ifend60
  %70 = load ptr, ptr %0, align 8
  %memberidx65 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i32 0, i32 4
  %71 = load ptr, ptr %memberidx65, align 8
  %72 = call ptr @string_from_bytes(ptr @228, i64 7)
  %73 = call i1 %71(ptr %0, ptr %72)
  br i1 %73, label %common.ret, label %ifend68

ifend68:                                          ; preds = %ifend64
  %74 = load ptr, ptr %0, align 8
  %memberidx69 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %74, i32 0, i32 4
  %75 = load ptr, ptr %memberidx69, align 8
  %76 = call ptr @string_from_bytes(ptr @229, i64 7)
  %77 = call i1 %75(ptr %0, ptr %76)
  br i1 %77, label %common.ret, label %ifend72

ifend72:                                          ; preds = %ifend68
  %78 = load ptr, ptr %0, align 8
  %memberidx73 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %78, i32 0, i32 4
  %79 = load ptr, ptr %memberidx73, align 8
  %80 = call ptr @string_from_bytes(ptr @230, i64 6)
  %81 = call i1 %79(ptr %0, ptr %80)
  br i1 %81, label %common.ret, label %ifend76

ifend76:                                          ; preds = %ifend72
  %82 = load ptr, ptr %0, align 8
  %memberidx77 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %82, i32 0, i32 4
  %83 = load ptr, ptr %memberidx77, align 8
  %84 = call ptr @string_from_bytes(ptr @231, i64 6)
  %85 = call i1 %83(ptr %0, ptr %84)
  br i1 %85, label %common.ret, label %ifend80

ifend80:                                          ; preds = %ifend76
  %86 = load ptr, ptr %0, align 8
  %memberidx81 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %86, i32 0, i32 4
  %87 = load ptr, ptr %memberidx81, align 8
  %88 = call ptr @string_from_bytes(ptr @232, i64 6)
  %89 = call i1 %87(ptr %0, ptr %88)
  br i1 %89, label %common.ret, label %ifend84

ifend84:                                          ; preds = %ifend80
  %90 = load ptr, ptr %0, align 8
  %memberidx85 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %90, i32 0, i32 4
  %91 = load ptr, ptr %memberidx85, align 8
  %92 = call ptr @string_from_bytes(ptr @233, i64 6)
  %93 = call i1 %91(ptr %0, ptr %92)
  br i1 %93, label %common.ret, label %ifend88

ifend88:                                          ; preds = %ifend84
  %94 = load ptr, ptr %0, align 8
  %memberidx89 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %94, i32 0, i32 4
  %95 = load ptr, ptr %memberidx89, align 8
  %96 = call ptr @string_from_bytes(ptr @234, i64 6)
  %97 = call i1 %95(ptr %0, ptr %96)
  br i1 %97, label %common.ret, label %ifend92

ifend92:                                          ; preds = %ifend88
  %98 = load ptr, ptr %0, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %98, i32 0, i32 4
  %99 = load ptr, ptr %memberidx93, align 8
  %100 = call ptr @string_from_bytes(ptr @235, i64 6)
  %101 = call i1 %99(ptr %0, ptr %100)
  br i1 %101, label %common.ret, label %ifend96

ifend96:                                          ; preds = %ifend92
  %102 = load ptr, ptr %0, align 8
  %memberidx97 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %102, i32 0, i32 4
  %103 = load ptr, ptr %memberidx97, align 8
  %104 = call ptr @string_from_bytes(ptr @236, i64 7)
  %105 = call i1 %103(ptr %0, ptr %104)
  br i1 %105, label %common.ret, label %ifend100

ifend100:                                         ; preds = %ifend96
  %106 = load ptr, ptr %0, align 8
  %memberidx101 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %106, i32 0, i32 4
  %107 = load ptr, ptr %memberidx101, align 8
  %108 = call ptr @string_from_bytes(ptr @237, i64 7)
  %109 = call i1 %107(ptr %0, ptr %108)
  br i1 %109, label %common.ret, label %ifend104

ifend104:                                         ; preds = %ifend100
  %110 = load ptr, ptr %0, align 8
  %memberidx105 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %110, i32 0, i32 4
  %111 = load ptr, ptr %memberidx105, align 8
  %112 = call ptr @string_from_bytes(ptr @238, i64 8)
  %113 = call i1 %111(ptr %0, ptr %112)
  br i1 %113, label %common.ret, label %ifend108

ifend108:                                         ; preds = %ifend104
  %114 = load ptr, ptr %0, align 8
  %memberidx109 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %114, i32 0, i32 4
  %115 = load ptr, ptr %memberidx109, align 8
  %116 = call ptr @string_from_bytes(ptr @239, i64 8)
  %117 = call i1 %115(ptr %0, ptr %116)
  br label %common.ret
}

define i64 @get_class_prop_visibility(ptr %0, ptr %1) {
  %3 = call ptr @get_class_from_prop_id(ptr %0, ptr %1)
  %4 = load i64, ptr %1, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi i64 [ %11, %if.entry ], [ %17, %ifend ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx1 = getelementptr inbounds %Class, ptr %3, i32 0, i32 5
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %9 = load i64, ptr %memberidx3, align 4
  %10 = call ptr %8(ptr %6, i64 %9)
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx4, align 4
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx5 = getelementptr inbounds %Class, ptr %3, i32 0, i32 4
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 5
  %14 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %15 = load i64, ptr %memberidx7, align 4
  %16 = call ptr %14(ptr %12, i64 %15)
  %memberidx8 = getelementptr inbounds %ClassField, ptr %16, i32 0, i32 2
  %17 = load i64, ptr %memberidx8, align 4
  br label %common.ret
}

define ptr @dump_access(i64 %0) {
  %2 = icmp eq i64 %0, 1
  br i1 %2, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend3, %if.entry1, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %5, %if.entry1 ], [ %6, %ifend3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %3 = call ptr @string_from_bytes(ptr @67, i64 7)
  br label %common.ret

ifend:                                            ; preds = %1
  %4 = icmp eq i64 %0, 2
  br i1 %4, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %ifend
  %5 = call ptr @string_from_bytes(ptr @68, i64 6)
  br label %common.ret

ifend3:                                           ; preds = %ifend
  %6 = call ptr @string_from_bytes(ptr @69, i64 9)
  br label %common.ret
}

define i64 @get_vtable_index(ptr %0, ptr %1) {
  %3 = call ptr @get_class_from_prop_id(ptr %0, ptr %1)
  %4 = load i64, ptr %1, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi i64 [ %11, %if.entry ], [ %17, %ifend ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx1 = getelementptr inbounds %Class, ptr %3, i32 0, i32 5
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %9 = load i64, ptr %memberidx3, align 4
  %10 = call ptr %8(ptr %6, i64 %9)
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %10, i32 0, i32 9
  %11 = load i64, ptr %memberidx4, align 4
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx5 = getelementptr inbounds %Class, ptr %3, i32 0, i32 4
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 5
  %14 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %15 = load i64, ptr %memberidx7, align 4
  %16 = call ptr %14(ptr %12, i64 %15)
  %memberidx8 = getelementptr inbounds %ClassField, ptr %16, i32 0, i32 6
  %17 = load i64, ptr %memberidx8, align 4
  br label %common.ret
}

define i1 @is_object(ptr %0) {
  %2 = load i64, ptr %0, align 4
  %3 = icmp eq i64 %2, 20
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi i1 [ %5, %if.entry ], [ %6, %ifend ]
  ret i1 %common.ret.op

if.entry:                                         ; preds = %1
  %memberidx1 = getelementptr inbounds %GenericType, ptr %0, i32 0, i32 3
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call i1 @is_object(ptr %4)
  br label %common.ret

ifend:                                            ; preds = %1
  %6 = icmp eq i64 %2, 13
  br label %common.ret
}

define i1 @is_class_prop_static(ptr %0, ptr %1) {
  %3 = call ptr @get_class_from_prop_id(ptr %0, ptr %1)
  %4 = load i64, ptr %1, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi i1 [ %11, %if.entry ], [ %17, %ifend ]
  ret i1 %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx1 = getelementptr inbounds %Class, ptr %3, i32 0, i32 5
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %9 = load i64, ptr %memberidx3, align 4
  %10 = call ptr %8(ptr %6, i64 %9)
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %10, i32 0, i32 1
  %11 = load i1, ptr %memberidx4, align 1
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx5 = getelementptr inbounds %Class, ptr %3, i32 0, i32 4
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 5
  %14 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %15 = load i64, ptr %memberidx7, align 4
  %16 = call ptr %14(ptr %12, i64 %15)
  %memberidx8 = getelementptr inbounds %ClassField, ptr %16, i32 0, i32 1
  %17 = load i1, ptr %memberidx8, align 1
  br label %common.ret
}

define ptr @get_method(ptr %0, ptr %1) {
  %3 = call ptr @get_class_from_prop_id(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Class, ptr %3, i32 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %PropId, ptr %1, i32 0, i32 2
  %7 = load i64, ptr %memberidx2, align 4
  %8 = call ptr %6(ptr %4, i64 %7)
  ret ptr %8
}

define void @BooleanExpression_constructor(ptr %0, i1 %1) {
  call void @Expression_constructor(ptr %0, i64 4)
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %3)
  %memberidx = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %3, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %BooleanExpression, ptr %0, i32 0, i32 4
  store i1 %1, ptr %memberidx1, align 1
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  store i1 true, ptr %memberidx2, align 1
  ret void
}

define void @BooleanType_constructor(ptr %0) {
  call void @Type_constructor(ptr %0, i64 0)
  ret void
}

define void @NullExpression_constructor(ptr %0, ptr %1) {
  call void @Expression_constructor(ptr %0, i64 5)
  %memberidx = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  store i1 true, ptr %memberidx1, align 1
  ret void
}

define ptr @get_func(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Program, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  %7 = call ptr %5(ptr %3, i64 %6)
  %memberidx3 = getelementptr inbounds %Module, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 2
  %11 = load i64, ptr %memberidx5, align 4
  %12 = call ptr %10(ptr %8, i64 %11)
  ret ptr %12
}

define ptr @lower_bin_assign_node(ptr %0) {
ifend:
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %0, i32 0, i32 4
  %1 = load i64, ptr %memberidx, align 4
  %2 = icmp eq i64 %1, 20
  %spec.store.select = select i1 %2, i64 1, i64 %1
  %3 = icmp eq i64 %spec.store.select, 21
  %spec.store.select34 = select i1 %3, i64 2, i64 %spec.store.select
  %4 = icmp eq i64 %spec.store.select34, 22
  %spec.store.select30 = select i1 %4, i64 3, i64 %spec.store.select34
  %5 = icmp eq i64 %spec.store.select30, 23
  %spec.store.select37 = select i1 %5, i64 4, i64 %spec.store.select30
  %6 = icmp eq i64 %spec.store.select37, 24
  %spec.store.select31 = select i1 %6, i64 5, i64 %spec.store.select37
  %7 = icmp eq i64 %spec.store.select31, 25
  %spec.store.select35 = select i1 %7, i64 6, i64 %spec.store.select31
  %8 = icmp eq i64 %spec.store.select35, 26
  %spec.store.select32 = select i1 %8, i64 16, i64 %spec.store.select35
  %9 = icmp eq i64 %spec.store.select32, 27
  %spec.store.select38 = select i1 %9, i64 15, i64 %spec.store.select32
  %10 = icmp eq i64 %spec.store.select38, 29
  %spec.store.select33 = select i1 %10, i64 13, i64 %spec.store.select38
  %11 = icmp eq i64 %spec.store.select33, 30
  %spec.store.select36 = select i1 %11, i64 14, i64 %spec.store.select33
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %memberidx28 = getelementptr inbounds %BinaryExpressionNode, ptr %0, i32 0, i32 3
  %13 = load ptr, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %BinaryExpressionNode, ptr %0, i32 0, i32 5
  %14 = load ptr, ptr %memberidx29, align 8
  call void @BinaryExpressionNode_constructor(ptr %12, ptr %13, i64 %spec.store.select36, ptr %14)
  ret ptr %12
}

define i1 @check_is_var(ptr %0) {
  %memberidx = getelementptr inbounds %Expression, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp eq i64 %2, 7
  br i1 %3, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend6, %if.entry4, %if.entry
  %common.ret.op = phi i1 [ %6, %if.entry ], [ %10, %if.entry4 ], [ %11, %ifend6 ]
  ret i1 %common.ret.op

if.entry:                                         ; preds = %1
  %memberidx1 = getelementptr inbounds %VarAccessExpression, ptr %0, i32 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 1
  br label %common.ret

ifend:                                            ; preds = %1
  %7 = icmp eq i64 %2, 12
  br i1 %7, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %prop_id = alloca ptr, align 8
  %memberidx7 = getelementptr inbounds %MemberExpression, ptr %0, i32 0, i32 5
  %8 = load ptr, ptr %memberidx7, align 8
  store ptr %8, ptr %prop_id, align 8
  %9 = load i64, ptr %8, align 4
  %10 = icmp eq i64 %9, 1
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %11 = icmp eq i64 %2, 13
  br label %common.ret
}

define ptr @bin_op_to_op_overload_name(i64 %0) {
  %2 = icmp eq i64 %0, 1
  br i1 %2, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend78, %if.entry79, %if.entry76, %if.entry73, %if.entry70, %if.entry67, %if.entry64, %if.entry61, %if.entry58, %if.entry55, %if.entry52, %if.entry49, %if.entry46, %if.entry43, %if.entry40, %if.entry37, %if.entry34, %if.entry31, %if.entry28, %if.entry25, %if.entry22, %if.entry19, %if.entry16, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %5, %if.entry1 ], [ %7, %if.entry4 ], [ %9, %if.entry7 ], [ %11, %if.entry10 ], [ %13, %if.entry13 ], [ %15, %if.entry16 ], [ %17, %if.entry19 ], [ %19, %if.entry22 ], [ %21, %if.entry25 ], [ %23, %if.entry28 ], [ %25, %if.entry31 ], [ %27, %if.entry34 ], [ %29, %if.entry37 ], [ %31, %if.entry40 ], [ %33, %if.entry43 ], [ %35, %if.entry46 ], [ %37, %if.entry49 ], [ %39, %if.entry52 ], [ %41, %if.entry55 ], [ %43, %if.entry58 ], [ %45, %if.entry61 ], [ %47, %if.entry64 ], [ %49, %if.entry67 ], [ %51, %if.entry70 ], [ %53, %if.entry73 ], [ %55, %if.entry76 ], [ %57, %if.entry79 ], [ null, %ifend78 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %3 = call ptr @string_from_bytes(ptr @212, i64 7)
  br label %common.ret

ifend:                                            ; preds = %1
  %4 = icmp eq i64 %0, 2
  br i1 %4, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %ifend
  %5 = call ptr @string_from_bytes(ptr @213, i64 7)
  br label %common.ret

ifend3:                                           ; preds = %ifend
  %6 = icmp eq i64 %0, 3
  br i1 %6, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend3
  %7 = call ptr @string_from_bytes(ptr @214, i64 7)
  br label %common.ret

ifend6:                                           ; preds = %ifend3
  %8 = icmp eq i64 %0, 4
  br i1 %8, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %ifend6
  %9 = call ptr @string_from_bytes(ptr @215, i64 7)
  br label %common.ret

ifend9:                                           ; preds = %ifend6
  %10 = icmp eq i64 %0, 5
  br i1 %10, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend9
  %11 = call ptr @string_from_bytes(ptr @237, i64 7)
  br label %common.ret

ifend12:                                          ; preds = %ifend9
  %12 = icmp eq i64 %0, 6
  br i1 %12, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend12
  %13 = call ptr @string_from_bytes(ptr @236, i64 7)
  br label %common.ret

ifend15:                                          ; preds = %ifend12
  %14 = icmp eq i64 %0, 20
  br i1 %14, label %if.entry16, label %ifend18

if.entry16:                                       ; preds = %ifend15
  %15 = call ptr @string_from_bytes(ptr @217, i64 8)
  br label %common.ret

ifend18:                                          ; preds = %ifend15
  %16 = icmp eq i64 %0, 21
  br i1 %16, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend18
  %17 = call ptr @string_from_bytes(ptr @218, i64 8)
  br label %common.ret

ifend21:                                          ; preds = %ifend18
  %18 = icmp eq i64 %0, 22
  br i1 %18, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend21
  %19 = call ptr @string_from_bytes(ptr @219, i64 8)
  br label %common.ret

ifend24:                                          ; preds = %ifend21
  %20 = icmp eq i64 %0, 23
  br i1 %20, label %if.entry25, label %ifend27

if.entry25:                                       ; preds = %ifend24
  %21 = call ptr @string_from_bytes(ptr @220, i64 8)
  br label %common.ret

ifend27:                                          ; preds = %ifend24
  %22 = icmp eq i64 %0, 24
  br i1 %22, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend27
  %23 = call ptr @string_from_bytes(ptr @239, i64 8)
  br label %common.ret

ifend30:                                          ; preds = %ifend27
  %24 = icmp eq i64 %0, 25
  br i1 %24, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend30
  %25 = call ptr @string_from_bytes(ptr @238, i64 8)
  br label %common.ret

ifend33:                                          ; preds = %ifend30
  %26 = icmp eq i64 %0, 7
  br i1 %26, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend33
  %27 = call ptr @string_from_bytes(ptr @271, i64 6)
  br label %common.ret

ifend36:                                          ; preds = %ifend33
  %28 = icmp eq i64 %0, 8
  br i1 %28, label %if.entry37, label %ifend39

if.entry37:                                       ; preds = %ifend36
  %29 = call ptr @string_from_bytes(ptr @235, i64 6)
  br label %common.ret

ifend39:                                          ; preds = %ifend36
  %30 = icmp eq i64 %0, 9
  br i1 %30, label %if.entry40, label %ifend42

if.entry40:                                       ; preds = %ifend39
  %31 = call ptr @string_from_bytes(ptr @231, i64 6)
  br label %common.ret

ifend42:                                          ; preds = %ifend39
  %32 = icmp eq i64 %0, 10
  br i1 %32, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %ifend42
  %33 = call ptr @string_from_bytes(ptr @234, i64 6)
  br label %common.ret

ifend45:                                          ; preds = %ifend42
  %34 = icmp eq i64 %0, 11
  br i1 %34, label %if.entry46, label %ifend48

if.entry46:                                       ; preds = %ifend45
  %35 = call ptr @string_from_bytes(ptr @211, i64 6)
  br label %common.ret

ifend48:                                          ; preds = %ifend45
  %36 = icmp eq i64 %0, 12
  br i1 %36, label %if.entry49, label %ifend51

if.entry49:                                       ; preds = %ifend48
  %37 = call ptr @string_from_bytes(ptr @233, i64 6)
  br label %common.ret

ifend51:                                          ; preds = %ifend48
  %38 = icmp eq i64 %0, 13
  br i1 %38, label %if.entry52, label %ifend54

if.entry52:                                       ; preds = %ifend51
  %39 = call ptr @string_from_bytes(ptr @226, i64 6)
  br label %common.ret

ifend54:                                          ; preds = %ifend51
  %40 = icmp eq i64 %0, 14
  br i1 %40, label %if.entry55, label %ifend57

if.entry55:                                       ; preds = %ifend54
  %41 = call ptr @string_from_bytes(ptr @227, i64 6)
  br label %common.ret

ifend57:                                          ; preds = %ifend54
  %42 = icmp eq i64 %0, 29
  br i1 %42, label %if.entry58, label %ifend60

if.entry58:                                       ; preds = %ifend57
  %43 = call ptr @string_from_bytes(ptr @228, i64 7)
  br label %common.ret

ifend60:                                          ; preds = %ifend57
  %44 = icmp eq i64 %0, 30
  br i1 %44, label %if.entry61, label %ifend63

if.entry61:                                       ; preds = %ifend60
  %45 = call ptr @string_from_bytes(ptr @229, i64 7)
  br label %common.ret

ifend63:                                          ; preds = %ifend60
  %46 = icmp eq i64 %0, 15
  br i1 %46, label %if.entry64, label %ifend66

if.entry64:                                       ; preds = %ifend63
  %47 = call ptr @string_from_bytes(ptr @216, i64 6)
  br label %common.ret

ifend66:                                          ; preds = %ifend63
  %48 = icmp eq i64 %0, 16
  br i1 %48, label %if.entry67, label %ifend69

if.entry67:                                       ; preds = %ifend66
  %49 = call ptr @string_from_bytes(ptr @272, i64 7)
  br label %common.ret

ifend69:                                          ; preds = %ifend66
  %50 = icmp eq i64 %0, 17
  br i1 %50, label %if.entry70, label %ifend72

if.entry70:                                       ; preds = %ifend69
  %51 = call ptr @string_from_bytes(ptr @273, i64 7)
  br label %common.ret

ifend72:                                          ; preds = %ifend69
  %52 = icmp eq i64 %0, 26
  br i1 %52, label %if.entry73, label %ifend75

if.entry73:                                       ; preds = %ifend72
  %53 = call ptr @string_from_bytes(ptr @222, i64 8)
  br label %common.ret

ifend75:                                          ; preds = %ifend72
  %54 = icmp eq i64 %0, 28
  br i1 %54, label %if.entry76, label %ifend78

if.entry76:                                       ; preds = %ifend75
  %55 = call ptr @string_from_bytes(ptr @223, i64 8)
  br label %common.ret

ifend78:                                          ; preds = %ifend75
  %56 = icmp eq i64 %0, 18
  br i1 %56, label %if.entry79, label %common.ret

if.entry79:                                       ; preds = %ifend78
  %57 = call ptr @string_from_bytes(ptr @230, i64 6)
  br label %common.ret
}

define ptr @dump_bin_op(i64 %0) {
  %2 = icmp eq i64 %0, 1
  br i1 %2, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend54, %if.entry52, %if.entry49, %if.entry46, %if.entry43, %if.entry40, %if.entry37, %if.entry34, %if.entry31, %if.entry28, %if.entry25, %if.entry22, %if.entry19, %if.entry16, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %5, %if.entry1 ], [ %7, %if.entry4 ], [ %9, %if.entry7 ], [ %11, %if.entry10 ], [ %13, %if.entry13 ], [ %15, %if.entry16 ], [ %17, %if.entry19 ], [ %19, %if.entry22 ], [ %21, %if.entry25 ], [ %23, %if.entry28 ], [ %25, %if.entry31 ], [ %27, %if.entry34 ], [ %29, %if.entry37 ], [ %31, %if.entry40 ], [ %33, %if.entry43 ], [ %35, %if.entry46 ], [ %37, %if.entry49 ], [ %39, %if.entry52 ], [ %40, %ifend54 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %3 = call ptr @string_from_bytes(ptr @275, i64 1)
  br label %common.ret

ifend:                                            ; preds = %1
  %4 = icmp eq i64 %0, 2
  br i1 %4, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %ifend
  %5 = call ptr @string_from_bytes(ptr @276, i64 1)
  br label %common.ret

ifend3:                                           ; preds = %ifend
  %6 = icmp eq i64 %0, 3
  br i1 %6, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend3
  %7 = call ptr @string_from_bytes(ptr @277, i64 1)
  br label %common.ret

ifend6:                                           ; preds = %ifend3
  %8 = icmp eq i64 %0, 4
  br i1 %8, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %ifend6
  %9 = call ptr @string_from_bytes(ptr @278, i64 1)
  br label %common.ret

ifend9:                                           ; preds = %ifend6
  %10 = icmp eq i64 %0, 5
  br i1 %10, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend9
  %11 = call ptr @string_from_bytes(ptr @279, i64 1)
  br label %common.ret

ifend12:                                          ; preds = %ifend9
  %12 = icmp eq i64 %0, 6
  br i1 %12, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend12
  %13 = call ptr @string_from_bytes(ptr @36, i64 1)
  br label %common.ret

ifend15:                                          ; preds = %ifend12
  %14 = icmp eq i64 %0, 7
  br i1 %14, label %if.entry16, label %ifend18

if.entry16:                                       ; preds = %ifend15
  %15 = call ptr @string_from_bytes(ptr @188, i64 1)
  br label %common.ret

ifend18:                                          ; preds = %ifend15
  %16 = icmp eq i64 %0, 8
  br i1 %16, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend18
  %17 = call ptr @string_from_bytes(ptr @280, i64 2)
  br label %common.ret

ifend21:                                          ; preds = %ifend18
  %18 = icmp eq i64 %0, 9
  br i1 %18, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend21
  %19 = call ptr @string_from_bytes(ptr @187, i64 1)
  br label %common.ret

ifend24:                                          ; preds = %ifend21
  %20 = icmp eq i64 %0, 10
  br i1 %20, label %if.entry25, label %ifend27

if.entry25:                                       ; preds = %ifend24
  %21 = call ptr @string_from_bytes(ptr @281, i64 2)
  br label %common.ret

ifend27:                                          ; preds = %ifend24
  %22 = icmp eq i64 %0, 11
  br i1 %22, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend27
  %23 = call ptr @string_from_bytes(ptr @282, i64 2)
  br label %common.ret

ifend30:                                          ; preds = %ifend27
  %24 = icmp eq i64 %0, 12
  br i1 %24, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend30
  %25 = call ptr @string_from_bytes(ptr @283, i64 2)
  br label %common.ret

ifend33:                                          ; preds = %ifend30
  %26 = icmp eq i64 %0, 13
  br i1 %26, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend33
  %27 = call ptr @string_from_bytes(ptr @284, i64 2)
  br label %common.ret

ifend36:                                          ; preds = %ifend33
  %28 = icmp eq i64 %0, 14
  br i1 %28, label %if.entry37, label %ifend39

if.entry37:                                       ; preds = %ifend36
  %29 = call ptr @string_from_bytes(ptr @285, i64 2)
  br label %common.ret

ifend39:                                          ; preds = %ifend36
  %30 = icmp eq i64 %0, 15
  br i1 %30, label %if.entry40, label %ifend42

if.entry40:                                       ; preds = %ifend39
  %31 = call ptr @string_from_bytes(ptr @41, i64 2)
  br label %common.ret

ifend42:                                          ; preds = %ifend39
  %32 = icmp eq i64 %0, 16
  br i1 %32, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %ifend42
  %33 = call ptr @string_from_bytes(ptr @40, i64 3)
  br label %common.ret

ifend45:                                          ; preds = %ifend42
  %34 = icmp eq i64 %0, 17
  br i1 %34, label %if.entry46, label %ifend48

if.entry46:                                       ; preds = %ifend45
  %35 = call ptr @string_from_bytes(ptr @42, i64 3)
  br label %common.ret

ifend48:                                          ; preds = %ifend45
  %36 = icmp eq i64 %0, 18
  br i1 %36, label %if.entry49, label %ifend51

if.entry49:                                       ; preds = %ifend48
  %37 = call ptr @string_from_bytes(ptr @70, i64 2)
  br label %common.ret

ifend51:                                          ; preds = %ifend48
  %38 = icmp eq i64 %0, 19
  br i1 %38, label %if.entry52, label %ifend54

if.entry52:                                       ; preds = %ifend51
  %39 = call ptr @string_from_bytes(ptr @286, i64 1)
  br label %common.ret

ifend54:                                          ; preds = %ifend51
  %40 = call ptr @string_from_bytes(ptr @287, i64 2)
  br label %common.ret
}

define i1 @is_null(ptr %0) {
  %memberidx = getelementptr inbounds %Expression, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp eq i64 %2, 5
  ret i1 %3
}

define i1 @is_numeric(ptr %0) {
  %2 = load i64, ptr %0, align 4
  %3 = icmp sge i64 %2, 1
  %4 = icmp sle i64 %2, 11
  %5 = and i1 %3, %4
  ret i1 %5
}

define ptr @cast_exp_to_type(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeCastExpression, ptr null, i32 1) to i32))
  call void @TypeCastExpression_constructor(ptr %3, ptr %0, ptr %1)
  ret ptr %3
}

define void @TypeCastExpression_constructor(ptr %0, ptr %1, ptr %2) {
  call void @Expression_constructor(ptr %0, i64 10)
  %memberidx = getelementptr inbounds %TypeCastExpression, ptr %0, i32 0, i32 4
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 3
  store ptr %2, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %0, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Expression, ptr %1, i32 0, i32 1
  %4 = load i1, ptr %memberidx3, align 1
  store i1 %4, ptr %memberidx2, align 1
  ret void
}

define void @check_cast_lower_bits(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %3, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = load i64, ptr %4, align 4
  %8 = load i64, ptr %6, align 4
  %9 = icmp ne i64 %7, %8
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %10 = call i1 @is_float(ptr %4)
  %11 = call i1 @is_int(ptr %6)
  %12 = and i1 %10, %11
  br i1 %12, label %if.entry5, label %else6

ifend:                                            ; preds = %if.entry10, %else11, %if.entry5, %2
  ret void

if.entry5:                                        ; preds = %if.entry
  %13 = load ptr, ptr %1, align 8
  %14 = call ptr @cast_exp_to_type(ptr %13, ptr %4)
  store ptr %14, ptr %1, align 8
  br label %ifend

else6:                                            ; preds = %if.entry
  %15 = call i1 @is_int(ptr %4)
  %16 = call i1 @is_float(ptr %6)
  %17 = and i1 %15, %16
  br i1 %17, label %if.entry10, label %else11

if.entry10:                                       ; preds = %else6
  %18 = load ptr, ptr %0, align 8
  %19 = call ptr @cast_exp_to_type(ptr %18, ptr %6)
  store ptr %19, ptr %0, align 8
  br label %ifend

else11:                                           ; preds = %else6
  %20 = call ptr @max_type(ptr %4, ptr %6)
  %21 = load ptr, ptr %0, align 8
  %22 = call ptr @cast_exp_to_type(ptr %21, ptr %20)
  store ptr %22, ptr %0, align 8
  %23 = load ptr, ptr %1, align 8
  %24 = call ptr @cast_exp_to_type(ptr %23, ptr %20)
  store ptr %24, ptr %1, align 8
  br label %ifend
}

define i1 @is_float(ptr %0) {
  %2 = load i64, ptr %0, align 4
  %3 = icmp sge i64 %2, 8
  %4 = icmp sle i64 %2, 11
  %5 = and i1 %3, %4
  ret i1 %5
}

define ptr @max_type(ptr %0, ptr %1) {
end:
  %2 = load i64, ptr %0, align 4
  %3 = load i64, ptr %1, align 4
  %4 = icmp sgt i64 %2, %3
  %ternary = select i1 %4, ptr %0, ptr %1
  ret ptr %ternary
}

define i1 @is_bool(ptr %0) {
  %2 = load i64, ptr %0, align 4
  %3 = icmp eq i64 %2, 0
  ret i1 %3
}

define i1 @is_pointer(ptr %0) {
  %2 = load i64, ptr %0, align 4
  %3 = icmp eq i64 %2, 15
  ret i1 %3
}

define ptr @dump_unary_op(i64 %0) {
  %2 = icmp eq i64 %0, 1
  br i1 %2, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend15, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %5, %if.entry1 ], [ %7, %if.entry4 ], [ %9, %if.entry7 ], [ %11, %if.entry10 ], [ %13, %if.entry13 ], [ %14, %ifend15 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %3 = call ptr @string_from_bytes(ptr @293, i64 7)
  br label %common.ret

ifend:                                            ; preds = %1
  %4 = icmp eq i64 %0, 2
  br i1 %4, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %ifend
  %5 = call ptr @string_from_bytes(ptr @294, i64 7)
  br label %common.ret

ifend3:                                           ; preds = %ifend
  %6 = icmp eq i64 %0, 3
  br i1 %6, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend3
  %7 = call ptr @string_from_bytes(ptr @295, i64 8)
  br label %common.ret

ifend6:                                           ; preds = %ifend3
  %8 = icmp eq i64 %0, 4
  br i1 %8, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %ifend6
  %9 = call ptr @string_from_bytes(ptr @296, i64 8)
  br label %common.ret

ifend9:                                           ; preds = %ifend6
  %10 = icmp eq i64 %0, 5
  br i1 %10, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend9
  %11 = call ptr @string_from_bytes(ptr @276, i64 1)
  br label %common.ret

ifend12:                                          ; preds = %ifend9
  %12 = icmp eq i64 %0, 6
  br i1 %12, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend12
  %13 = call ptr @string_from_bytes(ptr @297, i64 1)
  br label %common.ret

ifend15:                                          ; preds = %ifend12
  %14 = call ptr @string_from_bytes(ptr @298, i64 1)
  br label %common.ret
}

define i1 @is_buitin(ptr %0, ptr %1, ptr %2) {
  %4 = call i1 @is_object(ptr %1)
  %5 = xor i1 %4, true
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %ifend
  %common.ret.op = phi i1 [ %15, %ifend ], [ false, %3 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %3
  %class_obj = alloca ptr, align 8
  %6 = call ptr @get_class_from_type(ptr %0, ptr %1)
  store ptr %6, ptr %class_obj, align 8
  %memberidx = getelementptr inbounds %Class, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 4
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call i1 %9(ptr %7, ptr %2)
  %11 = load ptr, ptr %class_obj, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = load i64, ptr %12, align 4
  %14 = icmp eq i64 %13, 0
  %15 = and i1 %10, %14
  br label %common.ret
}

define i1 @is_i8_ptr(ptr %0) {
  %2 = load i64, ptr %0, align 4
  %3 = icmp eq i64 %2, 15
  br i1 %3, label %if.entry, label %common.ret

common.ret:                                       ; preds = %1, %if.entry
  %common.ret.op = phi i1 [ %6, %if.entry ], [ false, %1 ]
  ret i1 %common.ret.op

if.entry:                                         ; preds = %1
  %memberidx1 = getelementptr inbounds %PointerType, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 2
  br label %common.ret
}

define ptr @CodeGen_neg_int(ptr %0, ptr %1) {
  %3 = call i1 @LLVMIsConstant(ptr %1)
  br i1 %3, label %true_block, label %false_block

true_block:                                       ; preds = %2
  %4 = call ptr @LLVMConstNeg(ptr %1)
  br label %end

false_block:                                      ; preds = %2
  %5 = call ptr @LLVMBuildNeg(ptr %0, ptr %1, ptr @38)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %4, %true_block ], [ %5, %false_block ]
  ret ptr %ternary
}

define void @CodeGen_add_var(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call ptr @create_var_key(ptr %1)
  call void %6(ptr %4, ptr %7, ptr %2)
  ret void
}

define ptr @CodeGen_get_var_from_varid(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @create_var_key(ptr %1)
  %7 = call ptr %5(ptr %3, ptr %6)
  ret ptr %7
}

define ptr @CodeGen_codegen_index_exp(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @CodeGen_get_expr_mem(ptr %0, ptr %1, ptr %2)
  %memberidx = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @CodeGen_codegen_type(ptr %0, ptr %5, i1 true)
  %7 = call ptr @LLVMBuildLoad2(ptr %1, ptr %6, ptr %4, ptr @38)
  ret ptr %7
}

define i64 @Array_LLVMValueRef__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_LLVMValueRef__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_LLVMValueRef____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_LLVMValueRef__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_LLVMValueRef__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_LLVMValueRef____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_LLVMValueRef____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_LLVMValueRef____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_LLVMValueRef____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_LLVMValueRef__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_LLVMValueRef_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @CodeGen_codegen_atol_call(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMInt8TypeInContext(ptr %4)
  %6 = call ptr @LLVMPointerType(ptr %5, i64 0)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @LLVMInt64TypeInContext(ptr %7)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr @string_from_bytes(ptr @353, i64 4)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %11, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx3, align 8
  store ptr %6, ptr %12, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 2
  store i64 1, ptr %memberidx4, align 4
  %13 = call ptr @get_intrinsic(ptr %9, ptr %10, ptr %11, ptr %8, i1 false)
  %memberidx5 = getelementptr inbounds %IntrinsicResult, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx5, align 8
  %15 = load ptr, ptr %13, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 1
  %16 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 2
  %17 = load i64, ptr %memberidx8, align 4
  %18 = call ptr @LLVMBuildCall2(ptr %1, ptr %14, ptr %15, ptr %16, i64 %17, ptr @38)
  ret ptr %18
}

define ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %Expression, ptr %3, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp eq i64 %5, 6
  %memberidx1 = getelementptr inbounds %Expression, ptr %3, i32 0, i32 1
  %7 = load i1, ptr %memberidx1, align 1
  %8 = xor i1 %7, true
  %9 = and i1 %6, %8
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %4
  %arr_expr = alloca ptr, align 8
  store ptr %3, ptr %arr_expr, align 8
  %value_ty = alloca ptr, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %3, i32 0, i32 3
  %10 = load ptr, ptr %memberidx2, align 8
  store ptr %10, ptr %value_ty, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp ne i64 %11, 20
  br i1 %12, label %if.entry4, label %ifend6

else:                                             ; preds = %4
  %13 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %3)
  br label %ifend

common.ret:                                       ; preds = %if.entry4, %ifend
  %common.ret.op = phi ptr [ %value.0, %ifend ], [ %22, %if.entry4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else, %ifend6
  %value.0 = phi ptr [ %24, %ifend6 ], [ %13, %else ]
  %14 = call ptr @LLVMBuildStore(ptr %1, ptr %value.0, ptr %2)
  br label %common.ret

if.entry4:                                        ; preds = %if.entry
  %zero = alloca ptr, align 8
  %15 = call ptr @CodeGen_createLLVMInt(ptr %0, i64 0)
  store ptr %15, ptr %zero, align 8
  %args = alloca [2 x ptr], align 8
  store ptr %15, ptr %args, align 8
  %16 = getelementptr inbounds ptr, ptr %args, i64 1
  %17 = load ptr, ptr %zero, align 8
  store ptr %17, ptr %16, align 8
  %array_type = alloca ptr, align 8
  %18 = load ptr, ptr %value_ty, align 8
  %19 = call ptr @CodeGen_codegen_type(ptr %0, ptr %18, i1 true)
  store ptr %19, ptr %array_type, align 8
  %20 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %19, ptr %2, ptr %args, i64 2, ptr @38)
  %21 = load ptr, ptr %arr_expr, align 8
  %22 = call ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %20, ptr %21)
  br label %common.ret

ifend6:                                           ; preds = %if.entry
  %23 = load ptr, ptr %arr_expr, align 8
  %24 = call ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr %10, ptr %23)
  br label %ifend
}

define ptr @CodeGen_codegen_array_exp(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 20
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.end, %if.entry
  %common.ret.op = phi ptr [ %7, %if.entry ], [ %28, %for.end ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %7 = call ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr %4, ptr %2)
  br label %common.ret

ifend:                                            ; preds = %3
  %elem_ty = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %ArrayType, ptr %4, i32 0, i32 1
  %8 = load ptr, ptr %memberidx4, align 8
  %9 = call ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  store ptr %9, ptr %elem_ty, align 8
  %elems = alloca ptr, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %10, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx5 = getelementptr inbounds %Array_LLVMValueRef_, ptr %10, i32 0, i32 1
  %memberidx6 = getelementptr inbounds %Array_LLVMValueRef_, ptr %10, i32 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  store ptr %10, ptr %elems, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %ifend
  %11 = load i64, ptr %i, align 4
  %memberidx7 = getelementptr inbounds %ArrayExpression, ptr %2, i32 0, i32 4
  %12 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_Expression_, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx8, align 4
  %14 = icmp slt i64 %11, %13
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load ptr, ptr %elems, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx9, align 8
  %18 = load ptr, ptr %12, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i32 0, i32 5
  %19 = load ptr, ptr %memberidx11, align 8
  %20 = call ptr %19(ptr %12, i64 %11)
  %21 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %20)
  call void %17(ptr %15, ptr %21)
  %22 = load i64, ptr %i, align 4
  %23 = add i64 %22, 1
  store i64 %23, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load ptr, ptr %elem_ty, align 8
  %25 = load ptr, ptr %elems, align 8
  %memberidx12 = getelementptr inbounds %Array_LLVMValueRef_, ptr %25, i32 0, i32 1
  %26 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Array_LLVMValueRef_, ptr %25, i32 0, i32 2
  %27 = load i64, ptr %memberidx13, align 4
  %28 = call ptr @LLVMConstArray(ptr %24, ptr %26, i64 %27)
  br label %common.ret
}

define void @CodeGen_codegen_var_declaration(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %VarDeclaration, ptr %2, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @get_var(ptr %5, ptr %4)
  %memberidx2 = getelementptr inbounds %Var, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = load ptr, ptr %6, align 8
  %9 = call ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  %memberidx4 = getelementptr inbounds %VarDeclaration, ptr %2, i32 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = load ptr, ptr %10, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 11
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = call ptr %12(ptr %10)
  %memberidx6 = getelementptr inbounds %VarDeclaration, ptr %2, i32 0, i32 3
  %14 = load i1, ptr %memberidx6, align 1
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %value = alloca ptr, align 8
  %15 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %7)
  store ptr %15, ptr %value, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %16 = load ptr, ptr %memberidx7, align 8
  %17 = call ptr @LLVMAddGlobal(ptr %16, ptr %9, ptr %13)
  %18 = load ptr, ptr %value, align 8
  call void @LLVMSetInitializer(ptr %17, ptr %18)
  br label %ifend

else:                                             ; preds = %3
  %19 = call ptr @LLVMBuildAlloca(ptr %1, ptr %9, ptr %13)
  %20 = icmp ne ptr %7, null
  br i1 %20, label %if.entry8, label %ifend

ifend:                                            ; preds = %if.entry8, %else, %if.entry
  %ptr.0 = phi ptr [ %17, %if.entry ], [ %19, %if.entry8 ], [ %19, %else ]
  call void @CodeGen_add_var(ptr %0, ptr %4, ptr %ptr.0)
  ret void

if.entry8:                                        ; preds = %else
  %21 = call ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %19, ptr %7)
  br label %ifend
}

define void @CodeGen_codegen_const_declaration(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %2, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @get_const(ptr %5, ptr %4)
  %memberidx2 = getelementptr inbounds %Const, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = call ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  %memberidx4 = getelementptr inbounds %ConstDeclaration, ptr %2, i32 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = load ptr, ptr %10, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 11
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = call ptr %12(ptr %10)
  %memberidx6 = getelementptr inbounds %ConstDeclaration, ptr %2, i32 0, i32 3
  %14 = load i1, ptr %memberidx6, align 1
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %value = alloca ptr, align 8
  %15 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %7)
  store ptr %15, ptr %value, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %16 = load ptr, ptr %memberidx7, align 8
  %17 = call ptr @LLVMAddGlobal(ptr %16, ptr %9, ptr %13)
  %18 = load ptr, ptr %value, align 8
  call void @LLVMSetInitializer(ptr %17, ptr %18)
  call void @LLVMSetGlobalConstant(ptr %17, i1 true)
  br label %ifend

else:                                             ; preds = %3
  %19 = call ptr @LLVMBuildAlloca(ptr %1, ptr %9, ptr %13)
  %20 = call ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %19, ptr %7)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %ptr.0 = phi ptr [ %17, %if.entry ], [ %19, %else ]
  call void @CodeGen_add_var(ptr %0, ptr %4, ptr %ptr.0)
  ret void
}

define void @CodeGen_codegen_if_stmt(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %IfStatement, ptr %2, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr @LLVMAppendBasicBlockInContext(ptr %6, ptr %7, ptr @390)
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = call ptr @LLVMAppendBasicBlockInContext(ptr %9, ptr %10, ptr @46)
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call ptr @LLVMAppendBasicBlockInContext(ptr %12, ptr %13, ptr @391)
  %15 = call ptr @LLVMBuildCondBr(ptr %1, ptr %5, ptr %8, ptr %11)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %8)
  %memberidx7 = getelementptr inbounds %IfStatement, ptr %2, i32 0, i32 2
  %16 = load ptr, ptr %memberidx7, align 8
  call void @CodeGen_codegen_block(ptr %0, ptr %1, ptr %16)
  %17 = load ptr, ptr %memberidx7, align 8
  %18 = call i1 @is_terminated(ptr %17)
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %20 = call ptr @LLVMBuildBr(ptr %1, ptr %14)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %11)
  %else_terminated = alloca i1, align 1
  store i1 false, ptr %else_terminated, align 1
  %memberidx9 = getelementptr inbounds %IfStatement, ptr %2, i32 0, i32 3
  %21 = load ptr, ptr %memberidx9, align 8
  %22 = icmp ne ptr %21, null
  br i1 %22, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend
  call void @CodeGen_codegen_block(ptr %0, ptr %1, ptr %21)
  %23 = load ptr, ptr %memberidx9, align 8
  %24 = call i1 @is_terminated(ptr %23)
  store i1 %24, ptr %else_terminated, align 1
  br label %ifend12

ifend12:                                          ; preds = %ifend, %if.entry10
  %25 = load i1, ptr %else_terminated, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %if.entry15, label %else16

if.entry15:                                       ; preds = %ifend12
  %27 = call ptr @LLVMBuildBr(ptr %1, ptr %14)
  br label %ifend17

else16:                                           ; preds = %ifend12
  br i1 %18, label %if.entry18, label %ifend17

ifend17:                                          ; preds = %if.entry18, %else16, %if.entry15
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %14)
  ret void

if.entry18:                                       ; preds = %else16
  call void @LLVMDeleteBasicBlock(ptr %14)
  br label %ifend17
}

define void @Map_string_LLVMValueRef__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_LLVMValueRef__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_LLVMValueRef__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_LLVMValueRef__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_LLVMValueRef__constructor(ptr %0) {
  store ptr @VTableBucket_string_LLVMValueRef_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_LLVMValueRef___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_LLVMValueRef___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_LLVMValueRef_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_LLVMValueRef___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_LLVMValueRef___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_LLVMValueRef_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_LLVMValueRef_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_LLVMValueRef_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_LLVMValueRef_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_LLVMValueRef___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_LLVMValueRef__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_LLVMValueRef__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_LLVMValueRef__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_LLVMValueRef___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_LLVMValueRef__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Bucket_string_LLVMValueRef__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_LLVMValueRef__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_LLVMValueRef__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_LLVMValueRef__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_LLVMValueRef__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_LLVMValueRef_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Bucket_string_LLVMValueRef__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @CGEnumType_constructor(ptr %0) {
  %memberidx = getelementptr inbounds %CGEnumType, ptr %0, i32 0, i32 1
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %2)
  store ptr %2, ptr %memberidx, align 8
  ret void
}

define void @CodeGen_add_enum(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 6
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call ptr @create_type_id_key(ptr %1)
  call void %6(ptr %4, ptr %7, ptr %2)
  ret void
}

define ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %2, ptr %3) {
for.entry:
  %next_args = alloca [1 x ptr], align 8
  %4 = call ptr @CodeGen_createLLVMInt(ptr %0, i64 1)
  store ptr %4, ptr %next_args, align 8
  %5 = call ptr @LLVMTypeOf(ptr %2)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %addr.0 = phi ptr [ %2, %for.entry ], [ %14, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %15, %for.body ]
  %memberidx = getelementptr inbounds %ArrayExpression, ptr %3, i32 0, i32 4
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  %8 = icmp slt i64 %i.0, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %6, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %6, i64 %i.0)
  %12 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %11)
  %13 = call ptr @LLVMBuildStore(ptr %1, ptr %12, ptr %addr.0)
  %14 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %5, ptr %addr.0, ptr %next_args, i64 1, ptr @38)
  %15 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret ptr %addr.0
}

define ptr @CodeGen_codegen_type(ptr %0, ptr %1, i1 %2) {
  %4 = load i64, ptr %1, align 4
  %5 = icmp eq i64 %4, 12
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %true_block96, %false_block97, %true_block, %false_block, %if.entry107, %ifend105, %if.entry64, %if.entry59, %if.entry54, %if.entry48, %if.entry43, %if.entry38, %if.entry33, %if.entry28, %if.entry23, %if.entry18, %if.entry13, %if.entry8, %if.entry3, %if.entry
  %common.ret.op = phi ptr [ %7, %if.entry ], [ %10, %if.entry3 ], [ %13, %if.entry8 ], [ %16, %if.entry13 ], [ %19, %if.entry18 ], [ %22, %if.entry23 ], [ %25, %if.entry28 ], [ %28, %if.entry33 ], [ %31, %if.entry38 ], [ %34, %if.entry43 ], [ %37, %if.entry48 ], [ %42, %if.entry54 ], [ %46, %if.entry59 ], [ %52, %if.entry64 ], [ null, %ifend105 ], [ %92, %if.entry107 ], [ %79, %true_block ], [ %78, %false_block ], [ %86, %true_block96 ], [ %87, %false_block97 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @LLVMVoidTypeInContext(ptr %6)
  br label %common.ret

ifend:                                            ; preds = %3
  %8 = icmp eq i64 %4, 0
  br i1 %8, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %memberidx6 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %9 = load ptr, ptr %memberidx6, align 8
  %10 = call ptr @LLVMInt1TypeInContext(ptr %9)
  br label %common.ret

ifend5:                                           ; preds = %ifend
  %11 = icmp eq i64 %4, 1
  br i1 %11, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend5
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %12 = load ptr, ptr %memberidx11, align 8
  %13 = call ptr @LLVMIntTypeInContext(ptr %12, i64 4)
  br label %common.ret

ifend10:                                          ; preds = %ifend5
  %14 = icmp eq i64 %4, 2
  br i1 %14, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend10
  %memberidx16 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %15 = load ptr, ptr %memberidx16, align 8
  %16 = call ptr @LLVMInt8TypeInContext(ptr %15)
  br label %common.ret

ifend15:                                          ; preds = %ifend10
  %17 = icmp eq i64 %4, 3
  br i1 %17, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend15
  %memberidx21 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %18 = load ptr, ptr %memberidx21, align 8
  %19 = call ptr @LLVMInt16TypeInContext(ptr %18)
  br label %common.ret

ifend20:                                          ; preds = %ifend15
  %20 = icmp eq i64 %4, 4
  br i1 %20, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %ifend20
  %memberidx26 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %21 = load ptr, ptr %memberidx26, align 8
  %22 = call ptr @LLVMInt32TypeInContext(ptr %21)
  br label %common.ret

ifend25:                                          ; preds = %ifend20
  %23 = icmp eq i64 %4, 7
  br i1 %23, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend25
  %memberidx31 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %24 = load ptr, ptr %memberidx31, align 8
  %25 = call ptr @LLVMIntTypeInContext(ptr %24, i64 64)
  br label %common.ret

ifend30:                                          ; preds = %ifend25
  %26 = icmp eq i64 %4, 5
  br i1 %26, label %if.entry33, label %ifend35

if.entry33:                                       ; preds = %ifend30
  %memberidx36 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %27 = load ptr, ptr %memberidx36, align 8
  %28 = call ptr @LLVMInt64TypeInContext(ptr %27)
  br label %common.ret

ifend35:                                          ; preds = %ifend30
  %29 = icmp eq i64 %4, 6
  br i1 %29, label %if.entry38, label %ifend40

if.entry38:                                       ; preds = %ifend35
  %memberidx41 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %30 = load ptr, ptr %memberidx41, align 8
  %31 = call ptr @LLVMInt128TypeInContext(ptr %30)
  br label %common.ret

ifend40:                                          ; preds = %ifend35
  %32 = icmp eq i64 %4, 8
  br i1 %32, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %ifend40
  %memberidx46 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %33 = load ptr, ptr %memberidx46, align 8
  %34 = call ptr @LLVMHalfTypeInContext(ptr %33)
  br label %common.ret

ifend45:                                          ; preds = %ifend40
  %35 = icmp eq i64 %4, 9
  br i1 %35, label %if.entry48, label %ifend50

if.entry48:                                       ; preds = %ifend45
  %memberidx51 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %36 = load ptr, ptr %memberidx51, align 8
  %37 = call ptr @LLVMFloatTypeInContext(ptr %36)
  br label %common.ret

ifend50:                                          ; preds = %ifend45
  %38 = icmp eq i64 %4, 10
  %39 = icmp eq i64 %4, 11
  %40 = or i1 %38, %39
  br i1 %40, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %ifend50
  %memberidx57 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %41 = load ptr, ptr %memberidx57, align 8
  %42 = call ptr @LLVMDoubleTypeInContext(ptr %41)
  br label %common.ret

ifend56:                                          ; preds = %ifend50
  %43 = icmp eq i64 %4, 15
  br i1 %43, label %if.entry59, label %ifend61

if.entry59:                                       ; preds = %ifend56
  %memberidx62 = getelementptr inbounds %PointerType, ptr %1, i32 0, i32 1
  %44 = load ptr, ptr %memberidx62, align 8
  %45 = call ptr @CodeGen_codegen_type(ptr %0, ptr %44, i1 true)
  %46 = call ptr @LLVMPointerType(ptr %45, i64 0)
  br label %common.ret

ifend61:                                          ; preds = %ifend56
  %47 = icmp eq i64 %4, 16
  br i1 %47, label %if.entry64, label %ifend66

if.entry64:                                       ; preds = %ifend61
  %arr_ty = alloca ptr, align 8
  store ptr %1, ptr %arr_ty, align 8
  %element_type = alloca ptr, align 8
  %memberidx67 = getelementptr inbounds %ArrayType, ptr %1, i32 0, i32 1
  %48 = load ptr, ptr %memberidx67, align 8
  %49 = call ptr @CodeGen_codegen_type(ptr %0, ptr %48, i1 true)
  store ptr %49, ptr %element_type, align 8
  %50 = load ptr, ptr %arr_ty, align 8
  %memberidx68 = getelementptr inbounds %ArrayType, ptr %50, i32 0, i32 2
  %51 = load i64, ptr %memberidx68, align 4
  %52 = call ptr @LLVMArrayType(ptr %49, i64 %51)
  br label %common.ret

ifend66:                                          ; preds = %ifend61
  %53 = icmp eq i64 %4, 20
  br i1 %53, label %if.entry70, label %ifend72

if.entry70:                                       ; preds = %ifend66
  %memberidx73 = getelementptr inbounds %GenericType, ptr %1, i32 0, i32 3
  %54 = load ptr, ptr %memberidx73, align 8
  br label %ifend72

ifend72:                                          ; preds = %ifend66, %if.entry70
  %tt.0 = phi ptr [ %54, %if.entry70 ], [ %1, %ifend66 ]
  %55 = load i64, ptr %tt.0, align 4
  %56 = icmp eq i64 %55, 17
  br i1 %56, label %if.entry75, label %ifend77

if.entry75:                                       ; preds = %ifend72
  %param_types = alloca ptr, align 8
  %57 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %57, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx78 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %57, i32 0, i32 1
  %memberidx79 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %57, i32 0, i32 2
  store i64 0, ptr %memberidx79, align 4
  store ptr %57, ptr %param_types, align 8
  %func_ty = alloca ptr, align 8
  store ptr %tt.0, ptr %func_ty, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

ifend77:                                          ; preds = %ifend72
  %58 = icmp eq i64 %55, 13
  br i1 %58, label %if.entry89, label %ifend91

for.cond:                                         ; preds = %for.body, %if.entry75
  %59 = load i64, ptr %i, align 4
  %60 = load ptr, ptr %func_ty, align 8
  %memberidx80 = getelementptr inbounds %FunctionType, ptr %60, i32 0, i32 1
  %61 = load ptr, ptr %memberidx80, align 8
  %memberidx81 = getelementptr inbounds %Array_Type_, ptr %61, i32 0, i32 2
  %62 = load i64, ptr %memberidx81, align 4
  %63 = icmp slt i64 %59, %62
  br i1 %63, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %64 = load ptr, ptr %param_types, align 8
  %65 = load ptr, ptr %64, align 8
  %memberidx82 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %65, i32 0, i32 2
  %66 = load ptr, ptr %memberidx82, align 8
  %67 = load ptr, ptr %61, align 8
  %memberidx84 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %67, i32 0, i32 5
  %68 = load ptr, ptr %memberidx84, align 8
  %69 = call ptr %68(ptr %61, i64 %59)
  %70 = call ptr @CodeGen_codegen_type(ptr %0, ptr %69, i1 true)
  call void %66(ptr %64, ptr %70)
  %71 = load i64, ptr %i, align 4
  %72 = add i64 %71, 1
  store i64 %72, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %ret_type = alloca ptr, align 8
  %memberidx85 = getelementptr inbounds %FunctionType, ptr %60, i32 0, i32 2
  %73 = load ptr, ptr %memberidx85, align 8
  %74 = call ptr @CodeGen_codegen_type(ptr %0, ptr %73, i1 true)
  store ptr %74, ptr %ret_type, align 8
  %llvm_fnty = alloca ptr, align 8
  %75 = load ptr, ptr %param_types, align 8
  %memberidx86 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %75, i32 0, i32 1
  %76 = load ptr, ptr %memberidx86, align 8
  %memberidx87 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %75, i32 0, i32 2
  %77 = load i64, ptr %memberidx87, align 4
  %78 = call ptr @LLVMFunctionType(ptr %74, ptr %76, i64 %77, i1 false)
  store ptr %78, ptr %llvm_fnty, align 8
  br i1 %2, label %true_block, label %false_block

true_block:                                       ; preds = %for.end
  %79 = call ptr @LLVMPointerType(ptr %78, i64 0)
  br label %common.ret

false_block:                                      ; preds = %for.end
  br label %common.ret

if.entry89:                                       ; preds = %ifend77
  %obj_type = alloca ptr, align 8
  %memberidx92 = getelementptr inbounds %ObjectType, ptr %tt.0, i32 0, i32 1
  %80 = load ptr, ptr %memberidx92, align 8
  %81 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %0, ptr %80)
  store ptr %81, ptr %obj_type, align 8
  %82 = icmp ne ptr %81, null
  br i1 %82, label %if.entry93, label %ifend91

ifend91:                                          ; preds = %if.entry89, %ifend77
  %83 = load i64, ptr %tt.0, align 4
  %84 = icmp eq i64 %83, 14
  br i1 %84, label %if.entry103, label %ifend105

if.entry93:                                       ; preds = %if.entry89
  br i1 %2, label %true_block96, label %false_block97

true_block96:                                     ; preds = %if.entry93
  %85 = load ptr, ptr %81, align 8
  %86 = call ptr @LLVMPointerType(ptr %85, i64 0)
  br label %common.ret

false_block97:                                    ; preds = %if.entry93
  %87 = load ptr, ptr %81, align 8
  br label %common.ret

if.entry103:                                      ; preds = %ifend91
  %enum_type = alloca ptr, align 8
  %memberidx106 = getelementptr inbounds %EnumType, ptr %tt.0, i32 0, i32 1
  %88 = load ptr, ptr %memberidx106, align 8
  %89 = call ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %0, ptr %88)
  store ptr %89, ptr %enum_type, align 8
  %90 = icmp ne ptr %89, null
  br i1 %90, label %if.entry107, label %ifend105

ifend105:                                         ; preds = %if.entry103, %ifend91
  %91 = call ptr @string_from_bytes(ptr @350, i64 32)
  call void @panic(ptr %91)
  br label %common.ret

if.entry107:                                      ; preds = %if.entry103
  %92 = load ptr, ptr %89, align 8
  br label %common.ret
}

define ptr @CodeGen_createLLVMInt(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @LLVMIntTypeInContext(ptr %3, i64 64)
  %5 = call ptr @LLVMConstInt(ptr %4, i64 %1, i1 false)
  ret ptr %5
}

define ptr @CodeGen_codegen_var_access_exp(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %2, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %4)
  %memberidx1 = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @CodeGen_codegen_type(ptr %0, ptr %6, i1 true)
  %8 = icmp eq ptr %5, null
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %9 = call ptr @string_from_bytes(ptr @380, i64 50)
  call void @panic(ptr %9)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %if.entry4, label %ifend6

common.ret:                                       ; preds = %ifend10, %if.entry8, %if.entry4
  %common.ret.op = phi ptr [ %5, %if.entry4 ], [ %14, %if.entry8 ], [ %15, %ifend10 ]
  ret ptr %common.ret.op

if.entry4:                                        ; preds = %ifend
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 10
  %13 = load i1, ptr %memberidx7, align 1
  br i1 %13, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend6
  %14 = call ptr @LLVMGetInitializer(ptr %5)
  br label %common.ret

ifend10:                                          ; preds = %ifend6
  %15 = call ptr @LLVMBuildLoad2(ptr %1, ptr %7, ptr %5, ptr @38)
  br label %common.ret
}

define ptr @CodeGen_codegen_typecast_exp(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %TypeCastExpression, ptr %2, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %7 = call ptr @CodeGen_codegen_type(ptr %0, ptr %5, i1 true)
  %8 = call i1 @LLVMIsConstant(ptr %6)
  %9 = call i1 @is_bool(ptr %5)
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  br i1 %8, label %true_block, label %false_block

ifend:                                            ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = call i1 @is_int(ptr %10)
  %12 = call i1 @is_float(ptr %5)
  %13 = and i1 %11, %12
  br i1 %13, label %if.entry3, label %else4

true_block:                                       ; preds = %if.entry
  %14 = call i1 @LLVMIsNull(ptr %6)
  %15 = xor i1 %14, true
  %16 = call ptr @CodeGen_createLLVMBool(ptr %0, i1 %15)
  br label %common.ret

false_block:                                      ; preds = %if.entry
  %17 = call ptr @LLVMBuildIsNotNull(ptr %1, ptr %6, ptr @38)
  br label %common.ret

common.ret:                                       ; preds = %true_block34, %false_block35, %true_block30, %false_block31, %true_block22, %false_block23, %true_block14, %false_block15, %true_block6, %false_block7, %true_block, %false_block
  %common.ret.op = phi ptr [ %16, %true_block ], [ %17, %false_block ], [ %22, %true_block6 ], [ %23, %false_block7 ], [ %28, %true_block14 ], [ %29, %false_block15 ], [ %34, %true_block22 ], [ %35, %false_block23 ], [ %36, %true_block30 ], [ %37, %false_block31 ], [ %38, %true_block34 ], [ %39, %false_block35 ]
  ret ptr %common.ret.op

if.entry3:                                        ; preds = %ifend
  br i1 %8, label %true_block6, label %false_block7

else4:                                            ; preds = %ifend
  %18 = load ptr, ptr %memberidx2, align 8
  %19 = call i1 @is_float(ptr %18)
  %20 = call i1 @is_int(ptr %5)
  %21 = and i1 %19, %20
  br i1 %21, label %if.entry11, label %else12

true_block6:                                      ; preds = %if.entry3
  %22 = call ptr @LLVMConstSIToFP(ptr %6, ptr %7)
  br label %common.ret

false_block7:                                     ; preds = %if.entry3
  %23 = call ptr @LLVMBuildSIToFP(ptr %1, ptr %6, ptr %7, ptr @38)
  br label %common.ret

if.entry11:                                       ; preds = %else4
  br i1 %8, label %true_block14, label %false_block15

else12:                                           ; preds = %else4
  %24 = load ptr, ptr %memberidx2, align 8
  %25 = call i1 @is_int(ptr %24)
  %26 = call i1 @is_int(ptr %5)
  %27 = and i1 %25, %26
  br i1 %27, label %if.entry19, label %else20

true_block14:                                     ; preds = %if.entry11
  %28 = call ptr @LLVMConstFPToSI(ptr %6, ptr %7)
  br label %common.ret

false_block15:                                    ; preds = %if.entry11
  %29 = call ptr @LLVMBuildFPToSI(ptr %1, ptr %6, ptr %7, ptr @38)
  br label %common.ret

if.entry19:                                       ; preds = %else12
  br i1 %8, label %true_block22, label %false_block23

else20:                                           ; preds = %else12
  %30 = load ptr, ptr %memberidx2, align 8
  %31 = call i1 @is_float(ptr %30)
  %32 = call i1 @is_float(ptr %5)
  %33 = and i1 %31, %32
  br i1 %33, label %if.entry27, label %ifend29

true_block22:                                     ; preds = %if.entry19
  %34 = call ptr @LLVMConstIntCast(ptr %6, ptr %7, i1 true)
  br label %common.ret

false_block23:                                    ; preds = %if.entry19
  %35 = call ptr @LLVMBuildIntCast2(ptr %1, ptr %6, ptr %7, i1 true, ptr @38)
  br label %common.ret

if.entry27:                                       ; preds = %else20
  br i1 %8, label %true_block30, label %false_block31

ifend29:                                          ; preds = %else20
  br i1 %8, label %true_block34, label %false_block35

true_block30:                                     ; preds = %if.entry27
  %36 = call ptr @LLVMConstFPCast(ptr %6, ptr %7)
  br label %common.ret

false_block31:                                    ; preds = %if.entry27
  %37 = call ptr @LLVMBuildFPCast(ptr %1, ptr %6, ptr %7, ptr @38)
  br label %common.ret

true_block34:                                     ; preds = %ifend29
  %38 = call ptr @LLVMConstBitCast(ptr %6, ptr %7)
  br label %common.ret

false_block35:                                    ; preds = %ifend29
  %39 = call ptr @LLVMBuildBitCast(ptr %1, ptr %6, ptr %7, ptr @38)
  br label %common.ret
}

define void @Map_string_int__set(ptr %0, ptr %1, i64 %2) {
  %memberidx = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_int__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_int__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_int_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_int_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, i64 %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_int_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_int__set(ptr %0, ptr %1, i64 %2) {
  %memberidx = getelementptr inbounds %Bucket_string_int_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_int_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_int_, ptr %0, i32 0, i32 2
  store i64 %2, ptr %memberidx2, align 4
  ret void
}

define void @Bucket_string_int__constructor(ptr %0) {
  store ptr @VTableBucket_string_int_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_int_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_int___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_int___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_int_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_int___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_int___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_int_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_int_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_int_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_int__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_int_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_int___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_int__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_int__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_int__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_int___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_int__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_int_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_int__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_int_, ptr null, i32 1) to i32))
  call void @Bucket_string_int__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_int__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_int_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_int_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx19, align 4
  call void %18(ptr %0, ptr %22, i64 %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define i64 @Map_string_int__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_int__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_int_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_int_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_int_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_int_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi i64 [ %27, %if.entry14 ], [ 0, %while.end ]
  ret i64 %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_int_, ptr %17, i32 0, i32 2
  %27 = load i64, ptr %memberidx19, align 4
  br label %common.ret
}

define i64 @Map_string_int__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_int__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_int_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_int_, ptr null, i32 1) to i32))
  call void @Bucket_string_int__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_int_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @CGClassType_constructor(ptr %0) {
  %memberidx = getelementptr inbounds %CGClassType, ptr %0, i32 0, i32 1
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_int_, ptr null, i32 1) to i32))
  call void @Map_string_int__constructor(ptr %2)
  store ptr %2, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CGClassType, ptr %0, i32 0, i32 2
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_int_, ptr null, i32 1) to i32))
  call void @Map_string_int__constructor(ptr %3)
  store ptr %3, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %CGClassType, ptr %0, i32 0, i32 3
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %4)
  store ptr %4, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %CGClassType, ptr %0, i32 0, i32 4
  store ptr null, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %CGClassType, ptr %0, i32 0, i32 5
  store ptr null, ptr %memberidx4, align 8
  ret void
}

define void @CodeGen_add_class(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call ptr @create_type_id_key(ptr %1)
  call void %6(ptr %4, ptr %7, ptr %2)
  ret void
}

define void @CodeGen_evaluate_expression_list(ptr %0, ptr %1, ptr %2, ptr %3) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %12, %for.body ]
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp slt i64 %i.0, %4
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load ptr, ptr %2, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load ptr, ptr %3, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr %9(ptr %3, i64 %i.0)
  %11 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %10)
  call void %7(ptr %2, ptr %11)
  %12 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define void @CodeGen_codegen_block(ptr %0, ptr %1, ptr %2) {
for.entry:
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 10
  %3 = load i1, ptr %memberidx, align 1
  store i1 false, ptr %memberidx, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %for.body ]
  %4 = load ptr, ptr %2, align 8
  %memberidx3 = getelementptr inbounds %Array_Statement_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx3, align 4
  %6 = icmp slt i64 %i.0, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load ptr, ptr %4, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx5, align 8
  %9 = call ptr %8(ptr %4, i64 %i.0)
  call void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %9)
  %10 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 %3, ptr %memberidx, align 1
  ret void
}

define ptr @CodeGen_codegen_atof_call(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMInt8TypeInContext(ptr %4)
  %6 = call ptr @LLVMPointerType(ptr %5, i64 0)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @LLVMDoubleTypeInContext(ptr %7)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr @string_from_bytes(ptr @351, i64 4)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %11, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx3, align 8
  store ptr %6, ptr %12, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 2
  store i64 1, ptr %memberidx4, align 4
  %13 = call ptr @get_intrinsic(ptr %9, ptr %10, ptr %11, ptr %8, i1 false)
  %memberidx5 = getelementptr inbounds %IntrinsicResult, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx5, align 8
  %15 = load ptr, ptr %13, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 1
  %16 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 2
  %17 = load i64, ptr %memberidx8, align 4
  %18 = call ptr @LLVMBuildCall2(ptr %1, ptr %14, ptr %15, ptr %16, i64 %17, ptr @38)
  ret ptr %18
}

define void @CodeGen_codegen_class(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %12, %for.incr ]
  %memberidx = getelementptr inbounds %Class, ptr %1, i32 0, i32 5
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx1, align 4
  %4 = icmp slt i64 %i.0, %3
  br i1 %4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %struct_class = alloca ptr, align 8
  %5 = load ptr, ptr %1, align 8
  %6 = call ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %5)
  store ptr %6, ptr %struct_class, align 8
  %method = alloca ptr, align 8
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = call ptr %9(ptr %7, i64 %i.0)
  store ptr %10, ptr %method, align 8
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %10, i32 0, i32 7
  %11 = load i1, ptr %memberidx5, align 1
  br i1 %11, label %for.incr, label %ifend

for.incr:                                         ; preds = %for.body, %for.end56
  %12 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void

ifend:                                            ; preds = %for.body
  %prop_id_key = alloca ptr, align 8
  %13 = load ptr, ptr %10, align 8
  %14 = call ptr @create_prop_key(ptr %13)
  store ptr %14, ptr %prop_id_key, align 8
  %llvm_fnc = alloca ptr, align 8
  %15 = load ptr, ptr %struct_class, align 8
  %memberidx7 = getelementptr inbounds %CGClassType, ptr %15, i32 0, i32 3
  %16 = load ptr, ptr %memberidx7, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx8, align 8
  %19 = call ptr %18(ptr %16, ptr %14)
  store ptr %19, ptr %llvm_fnc, align 8
  %is_constructor = alloca i1, align 1
  %20 = load ptr, ptr %method, align 8
  %memberidx9 = getelementptr inbounds %ClassMethod, ptr %20, i32 0, i32 3
  %21 = load ptr, ptr %memberidx9, align 8
  %22 = load ptr, ptr %21, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i32 0, i32 4
  %23 = load ptr, ptr %memberidx10, align 8
  %24 = call ptr @string_from_bytes(ptr @252, i64 11)
  %25 = call i1 %23(ptr %21, ptr %24)
  store i1 %25, ptr %is_constructor, align 1
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %26 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %Class, ptr %1, i32 0, i32 1
  %27 = load ptr, ptr %memberidx12, align 8
  %28 = load ptr, ptr %27, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 11
  %29 = load ptr, ptr %memberidx13, align 8
  %30 = call ptr %29(ptr %27)
  %31 = load ptr, ptr %method, align 8
  %memberidx14 = getelementptr inbounds %ClassMethod, ptr %31, i32 0, i32 3
  %32 = load ptr, ptr %memberidx14, align 8
  %33 = load ptr, ptr %32, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %33, i32 0, i32 11
  %34 = load ptr, ptr %memberidx15, align 8
  %35 = call ptr %34(ptr %32)
  %36 = alloca ptr, align 8
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr %36, ptr @200, ptr %30, ptr %35)
  %38 = load ptr, ptr %36, align 8
  %39 = call ptr @string_from_bytes(ptr %38, i64 %37)
  %40 = load ptr, ptr %39, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %40, i32 0, i32 11
  %41 = load ptr, ptr %memberidx16, align 8
  %42 = call ptr %41(ptr %39)
  %43 = call ptr @LLVMGetNamedFunction(ptr %26, ptr %42)
  store ptr %43, ptr %llvm_fnc, align 8
  %entry_block = alloca ptr, align 8
  %memberidx17 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %44 = load ptr, ptr %memberidx17, align 8
  %45 = call ptr @LLVMAppendBasicBlockInContext(ptr %44, ptr %43, ptr @38)
  store ptr %45, ptr %entry_block, align 8
  %func_builder = alloca ptr, align 8
  %46 = load ptr, ptr %memberidx17, align 8
  %47 = call ptr @LLVMCreateBuilderInContext(ptr %46)
  store ptr %47, ptr %func_builder, align 8
  %48 = load ptr, ptr %entry_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %47, ptr %48)
  %offset = alloca i64, align 8
  store i64 0, ptr %offset, align 4
  %49 = load ptr, ptr %method, align 8
  %memberidx19 = getelementptr inbounds %ClassMethod, ptr %49, i32 0, i32 1
  %50 = load i1, ptr %memberidx19, align 1
  %51 = xor i1 %50, true
  br i1 %51, label %if.entry20, label %for.entry52

if.entry20:                                       ; preds = %ifend
  %object_type = alloca ptr, align 8
  %52 = load ptr, ptr %struct_class, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @LLVMPointerType(ptr %53, i64 0)
  store ptr %54, ptr %object_type, align 8
  %this_param = alloca ptr, align 8
  %55 = load ptr, ptr %llvm_fnc, align 8
  %56 = call ptr @LLVMGetParam(ptr %55, i64 0)
  store ptr %56, ptr %this_param, align 8
  %this_alloc = alloca ptr, align 8
  %57 = load ptr, ptr %func_builder, align 8
  %58 = load ptr, ptr %object_type, align 8
  %59 = call ptr @LLVMBuildAlloca(ptr %57, ptr %58, ptr @179)
  store ptr %59, ptr %this_alloc, align 8
  %this_id = alloca ptr, align 8
  %memberidx24 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %60 = load ptr, ptr %memberidx24, align 8
  %61 = load ptr, ptr %method, align 8
  %memberidx25 = getelementptr inbounds %ClassMethod, ptr %61, i32 0, i32 8
  %62 = load ptr, ptr %memberidx25, align 8
  %63 = call ptr @get_scope(ptr %60, ptr %62)
  %memberidx26 = getelementptr inbounds %Scope, ptr %63, i32 0, i32 1
  %64 = load ptr, ptr %memberidx26, align 8
  %65 = load ptr, ptr %64, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %65, i32 0, i32 1
  %66 = load ptr, ptr %memberidx27, align 8
  %67 = call ptr @string_from_bytes(ptr @179, i64 4)
  %68 = call ptr %66(ptr %64, ptr %67)
  store ptr %68, ptr %this_id, align 8
  %69 = load ptr, ptr %func_builder, align 8
  %70 = load ptr, ptr %this_param, align 8
  %71 = load ptr, ptr %this_alloc, align 8
  %72 = call ptr @LLVMBuildStore(ptr %69, ptr %70, ptr %71)
  %73 = load ptr, ptr %this_id, align 8
  %74 = load ptr, ptr %this_alloc, align 8
  call void @CodeGen_add_var(ptr %0, ptr %73, ptr %74)
  %75 = load i1, ptr %is_constructor, align 1
  br i1 %75, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %if.entry20
  %76 = load ptr, ptr %struct_class, align 8
  %memberidx31 = getelementptr inbounds %CGClassType, ptr %76, i32 0, i32 4
  %77 = load ptr, ptr %memberidx31, align 8
  %78 = icmp ne ptr %77, null
  br i1 %78, label %if.entry32, label %ifend34

ifend30:                                          ; preds = %if.entry45, %if.entry38, %ifend34, %if.entry20
  store i64 1, ptr %offset, align 4
  br label %for.entry52

if.entry32:                                       ; preds = %if.entry28
  %index = alloca [1 x ptr], align 8
  %79 = call ptr @CodeGen_createLLVMInt(ptr %0, i64 0)
  store ptr %79, ptr %index, align 8
  %vt_ptr = alloca ptr, align 8
  %80 = load ptr, ptr %func_builder, align 8
  %81 = load ptr, ptr %object_type, align 8
  %82 = load ptr, ptr %this_param, align 8
  %83 = call ptr @LLVMBuildInBoundsGEP2(ptr %80, ptr %81, ptr %82, ptr %index, i64 1, ptr @38)
  store ptr %83, ptr %vt_ptr, align 8
  %84 = load ptr, ptr %func_builder, align 8
  %85 = load ptr, ptr %struct_class, align 8
  %memberidx36 = getelementptr inbounds %CGClassType, ptr %85, i32 0, i32 4
  %86 = load ptr, ptr %memberidx36, align 8
  %87 = call ptr @LLVMBuildStore(ptr %84, ptr %86, ptr %83)
  br label %ifend34

ifend34:                                          ; preds = %if.entry28, %if.entry32
  %parent_ty = alloca ptr, align 8
  %memberidx37 = getelementptr inbounds %Class, ptr %1, i32 0, i32 2
  %88 = load ptr, ptr %memberidx37, align 8
  store ptr %88, ptr %parent_ty, align 8
  %89 = icmp ne ptr %88, null
  br i1 %89, label %if.entry38, label %ifend30

if.entry38:                                       ; preds = %ifend34
  %super_id = alloca ptr, align 8
  %90 = load ptr, ptr %memberidx24, align 8
  %91 = load ptr, ptr %method, align 8
  %memberidx42 = getelementptr inbounds %ClassMethod, ptr %91, i32 0, i32 8
  %92 = load ptr, ptr %memberidx42, align 8
  %93 = call ptr @get_scope(ptr %90, ptr %92)
  %memberidx43 = getelementptr inbounds %Scope, ptr %93, i32 0, i32 1
  %94 = load ptr, ptr %memberidx43, align 8
  %95 = load ptr, ptr %94, align 8
  %memberidx44 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %95, i32 0, i32 1
  %96 = load ptr, ptr %memberidx44, align 8
  %97 = call ptr @string_from_bytes(ptr @256, i64 5)
  %98 = call ptr %96(ptr %94, ptr %97)
  store ptr %98, ptr %super_id, align 8
  %99 = icmp ne ptr %98, null
  br i1 %99, label %if.entry45, label %ifend30

if.entry45:                                       ; preds = %if.entry38
  %super_constructor = alloca ptr, align 8
  %100 = load ptr, ptr %parent_ty, align 8
  %memberidx48 = getelementptr inbounds %ObjectType, ptr %100, i32 0, i32 1
  %101 = load ptr, ptr %memberidx48, align 8
  %102 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %0, ptr %101)
  %memberidx49 = getelementptr inbounds %CGClassType, ptr %102, i32 0, i32 6
  %103 = load ptr, ptr %memberidx49, align 8
  store ptr %103, ptr %super_constructor, align 8
  %super_ptr = alloca ptr, align 8
  %104 = load ptr, ptr %func_builder, align 8
  %105 = load ptr, ptr %object_type, align 8
  %106 = call ptr @LLVMBuildAlloca(ptr %104, ptr %105, ptr @256)
  store ptr %106, ptr %super_ptr, align 8
  %107 = load ptr, ptr %func_builder, align 8
  %108 = load ptr, ptr %super_constructor, align 8
  %109 = call ptr @LLVMBuildStore(ptr %107, ptr %108, ptr %106)
  %110 = load ptr, ptr %super_id, align 8
  %111 = load ptr, ptr %super_ptr, align 8
  call void @CodeGen_add_var(ptr %0, ptr %110, ptr %111)
  %memberidx50 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 11
  %112 = load ptr, ptr %memberidx50, align 8
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %113, align 8
  %115 = load ptr, ptr %super_id, align 8
  %116 = call ptr @create_var_key(ptr %115)
  %117 = load ptr, ptr %this_param, align 8
  call void %114(ptr %112, ptr %116, ptr %117)
  br label %ifend30

for.entry52:                                      ; preds = %ifend30, %ifend
  %j = alloca i64, align 8
  store i64 0, ptr %j, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.body54, %for.entry52
  %118 = load i64, ptr %j, align 4
  %119 = load ptr, ptr %method, align 8
  %memberidx57 = getelementptr inbounds %ClassMethod, ptr %119, i32 0, i32 6
  %120 = load ptr, ptr %memberidx57, align 8
  %memberidx58 = getelementptr inbounds %Array_FunctionArg_, ptr %120, i32 0, i32 2
  %121 = load i64, ptr %memberidx58, align 4
  %122 = icmp slt i64 %118, %121
  br i1 %122, label %for.body54, label %for.end56

for.body54:                                       ; preds = %for.cond53
  %arg = alloca ptr, align 8
  %123 = load ptr, ptr %120, align 8
  %memberidx60 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %123, i32 0, i32 5
  %124 = load ptr, ptr %memberidx60, align 8
  %125 = call ptr %124(ptr %120, i64 %118)
  store ptr %125, ptr %arg, align 8
  %param = alloca ptr, align 8
  %126 = load ptr, ptr %llvm_fnc, align 8
  %127 = load i64, ptr %j, align 4
  %128 = load i64, ptr %offset, align 4
  %129 = add i64 %127, %128
  %130 = call ptr @LLVMGetParam(ptr %126, i64 %129)
  store ptr %130, ptr %param, align 8
  %alloc = alloca ptr, align 8
  %131 = load ptr, ptr %func_builder, align 8
  %132 = load ptr, ptr %arg, align 8
  %memberidx61 = getelementptr inbounds %Expression, ptr %132, i32 0, i32 3
  %133 = load ptr, ptr %memberidx61, align 8
  %134 = call ptr @CodeGen_codegen_type(ptr %0, ptr %133, i1 true)
  %135 = load ptr, ptr %arg, align 8
  %memberidx62 = getelementptr inbounds %FunctionArg, ptr %135, i32 0, i32 5
  %136 = load ptr, ptr %memberidx62, align 8
  %137 = load ptr, ptr %136, align 8
  %memberidx63 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %137, i32 0, i32 11
  %138 = load ptr, ptr %memberidx63, align 8
  %139 = call ptr %138(ptr %136)
  %140 = call ptr @LLVMBuildAlloca(ptr %131, ptr %134, ptr %139)
  store ptr %140, ptr %alloc, align 8
  %141 = load ptr, ptr %func_builder, align 8
  %142 = load ptr, ptr %param, align 8
  %143 = call ptr @LLVMBuildStore(ptr %141, ptr %142, ptr %140)
  %144 = load ptr, ptr %arg, align 8
  %memberidx64 = getelementptr inbounds %FunctionArg, ptr %144, i32 0, i32 4
  %145 = load ptr, ptr %memberidx64, align 8
  %146 = load ptr, ptr %alloc, align 8
  call void @CodeGen_add_var(ptr %0, ptr %145, ptr %146)
  %147 = load i64, ptr %j, align 4
  %148 = add i64 %147, 1
  store i64 %148, ptr %j, align 4
  br label %for.cond53

for.end56:                                        ; preds = %for.cond53
  %prev_func = alloca ptr, align 8
  %memberidx65 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 2
  %149 = load ptr, ptr %memberidx65, align 8
  store ptr %149, ptr %prev_func, align 8
  %150 = load ptr, ptr %llvm_fnc, align 8
  store ptr %150, ptr %memberidx65, align 8
  %151 = load ptr, ptr %func_builder, align 8
  %152 = load ptr, ptr %method, align 8
  %memberidx67 = getelementptr inbounds %ClassMethod, ptr %152, i32 0, i32 5
  %153 = load ptr, ptr %memberidx67, align 8
  call void @CodeGen_codegen_block(ptr %0, ptr %151, ptr %153)
  %154 = load ptr, ptr %prev_func, align 8
  store ptr %154, ptr %memberidx65, align 8
  %155 = load ptr, ptr %func_builder, align 8
  call void @LLVMDisposeBuilder(ptr %155)
  br label %for.incr
}

define ptr @CodeGen_createGlobalLLVMString(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %4, ptr %2)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %9 = load ptr, ptr %2, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 11
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = call ptr %10(ptr %2)
  %12 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %11, ptr @38)
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  call void %15(ptr %13, ptr %2, ptr %12)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %str.0 = phi ptr [ %12, %if.entry ], [ %7, %3 ]
  ret ptr %str.0
}

define ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr %7(ptr %5, i64 0)
  %memberidx3 = getelementptr inbounds %Module, ptr %8, i32 0, i32 7
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %9, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 5
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = call ptr %11(ptr %9, i64 0)
  %memberidx5 = getelementptr inbounds %Scope, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = call ptr @string_from_bytes(ptr @301, i64 6)
  %17 = call ptr %15(ptr %13, ptr %16)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  call void @ObjectType_constructor(ptr %18, ptr %17)
  %19 = load ptr, ptr %memberidx, align 8
  %20 = call ptr @string_from_bytes(ptr @388, i64 10)
  %21 = call ptr @get_class_prop_type_with_name(ptr %19, ptr %18, ptr %20)
  %22 = call ptr @string_from_bytes(ptr @388, i64 10)
  %23 = call ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr %18, ptr %22)
  %args = alloca [1 x ptr], align 8
  store ptr %2, ptr %args, align 8
  %24 = call ptr @CodeGen_codegen_type(ptr %0, ptr %21, i1 false)
  %25 = call ptr @LLVMBuildCall2(ptr %1, ptr %24, ptr %23, ptr %args, i64 1, ptr @38)
  ret ptr %25
}

define void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %2) {
  %4 = load i64, ptr %2, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @CodeGen_codegen_if_stmt(ptr %0, ptr %1, ptr %2)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %6 = load i64, ptr %2, align 4
  %7 = icmp eq i64 %6, 3
  br i1 %7, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  call void @CodeGen_codegen_for_stmt(ptr %0, ptr %1, ptr %2)
  br label %ifend4

ifend4:                                           ; preds = %ifend, %if.entry2
  %8 = load i64, ptr %2, align 4
  %9 = icmp eq i64 %8, 4
  br i1 %9, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  call void @CodeGen_codegen_while_stmt(ptr %0, ptr %1, ptr %2)
  br label %ifend8

ifend8:                                           ; preds = %ifend4, %if.entry6
  %10 = load i64, ptr %2, align 4
  %11 = icmp eq i64 %10, 5
  br i1 %11, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 8
  %12 = load ptr, ptr %memberidx13, align 8
  %13 = call ptr @LLVMBuildBr(ptr %1, ptr %12)
  br label %ifend12

ifend12:                                          ; preds = %ifend8, %if.entry10
  %14 = load i64, ptr %2, align 4
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %ifend12
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 7
  %16 = load ptr, ptr %memberidx18, align 8
  %17 = call ptr @LLVMBuildBr(ptr %1, ptr %16)
  br label %ifend17

ifend17:                                          ; preds = %ifend12, %if.entry15
  %18 = load i64, ptr %2, align 4
  %19 = icmp eq i64 %18, 1
  br i1 %19, label %if.entry20, label %ifend22

if.entry20:                                       ; preds = %ifend17
  call void @CodeGen_codegen_var_declaration(ptr %0, ptr %1, ptr %2)
  br label %ifend22

ifend22:                                          ; preds = %ifend17, %if.entry20
  %20 = load i64, ptr %2, align 4
  %21 = icmp eq i64 %20, 2
  br i1 %21, label %if.entry24, label %ifend26

if.entry24:                                       ; preds = %ifend22
  call void @CodeGen_codegen_const_declaration(ptr %0, ptr %1, ptr %2)
  br label %ifend26

ifend26:                                          ; preds = %ifend22, %if.entry24
  %22 = load i64, ptr %2, align 4
  %23 = icmp eq i64 %22, 7
  br i1 %23, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend26
  call void @CodeGen_codegen_return_stmt(ptr %0, ptr %1, ptr %2)
  br label %ifend30

ifend30:                                          ; preds = %ifend26, %if.entry28
  %24 = load i64, ptr %2, align 4
  %25 = icmp eq i64 %24, 8
  br i1 %25, label %if.entry32, label %ifend34

if.entry32:                                       ; preds = %ifend30
  %26 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %2)
  br label %ifend34

ifend34:                                          ; preds = %ifend30, %if.entry32
  ret void
}

define void @CodeGen_codegen_return_stmt(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %ReturnStatement, ptr %2, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = icmp ne ptr %4, null
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %6 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %7 = call ptr @LLVMBuildRet(ptr %1, ptr %6)
  br label %ifend

else:                                             ; preds = %3
  %8 = call ptr @LLVMBuildRetVoid(ptr %1)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret void
}

define void @Map_string_CGClassType__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_CGClassType__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_CGClassType__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_CGClassType__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_CGClassType_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_CGClassType__constructor(ptr %0) {
  store ptr @VTableBucket_string_CGClassType_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_CGClassType_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_CGClassType___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_CGClassType___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_CGClassType_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_CGClassType___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_CGClassType___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_CGClassType_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_CGClassType_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_CGClassType_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_CGClassType_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_CGClassType___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_CGClassType__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_CGClassType__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_CGClassType__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_CGClassType___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_CGClassType__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_CGClassType_, ptr null, i32 1) to i32))
  call void @Bucket_string_CGClassType__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_CGClassType__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_CGClassType__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_CGClassType__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_CGClassType__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_CGClassType_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_CGClassType_, ptr null, i32 1) to i32))
  call void @Bucket_string_CGClassType__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define ptr @CodeGen_get_string_val(ptr %0, ptr %1, ptr %2, ptr %3, i64 %4) {
  %6 = call i1 @is_bool(ptr %3)
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend32, %if.entry30, %for.end, %if.entry10, %if.entry4, %if.entry
  %common.ret.op = phi ptr [ %12, %if.entry ], [ %19, %if.entry4 ], [ %35, %if.entry10 ], [ %88, %for.end ], [ %90, %if.entry30 ], [ %2, %ifend32 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %5
  %true_str = alloca ptr, align 8
  %7 = call ptr @string_from_bytes(ptr @194, i64 4)
  %8 = call ptr @CodeGen_createGlobalLLVMString(ptr %0, ptr %1, ptr %7)
  store ptr %8, ptr %true_str, align 8
  %false_str = alloca ptr, align 8
  %9 = call ptr @string_from_bytes(ptr @195, i64 5)
  %10 = call ptr @CodeGen_createGlobalLLVMString(ptr %0, ptr %1, ptr %9)
  store ptr %10, ptr %false_str, align 8
  %11 = load ptr, ptr %true_str, align 8
  %12 = call ptr @LLVMBuildSelect(ptr %1, ptr %2, ptr %11, ptr %10, ptr @38)
  br label %common.ret

ifend:                                            ; preds = %5
  %13 = call i1 @is_object(ptr %3)
  br i1 %13, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %ifend
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %14 = load ptr, ptr %memberidx, align 8
  %15 = call ptr @string_from_bytes(ptr @301, i64 6)
  %16 = call i1 @is_buitin(ptr %14, ptr %3, ptr %15)
  br i1 %16, label %if.entry4, label %ifend6

ifend3:                                           ; preds = %ifend
  %17 = load i64, ptr %3, align 4
  %18 = icmp eq i64 %17, 17
  br i1 %18, label %if.entry30, label %ifend32

if.entry4:                                        ; preds = %if.entry1
  %19 = call ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend6:                                           ; preds = %if.entry1
  %obj_class = alloca ptr, align 8
  %20 = load ptr, ptr %memberidx, align 8
  %21 = call ptr @get_class_from_type(ptr %20, ptr %3)
  store ptr %21, ptr %obj_class, align 8
  %fmt_str = alloca ptr, align 8
  %memberidx8 = getelementptr inbounds %Class, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 11
  %24 = load ptr, ptr %memberidx9, align 8
  %25 = call ptr %24(ptr %22)
  %26 = alloca ptr, align 8
  %27 = call i64 (ptr, ptr, ...) @asprintf(ptr %26, ptr @357, ptr %25)
  %28 = load ptr, ptr %26, align 8
  %29 = call ptr @string_from_bytes(ptr %28, i64 %27)
  store ptr %29, ptr %fmt_str, align 8
  %30 = icmp eq i64 %4, 3
  br i1 %30, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend6
  %31 = load ptr, ptr %29, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @string_from_bytes(ptr @358, i64 6)
  %34 = call ptr %32(ptr %29, ptr %33)
  %35 = call ptr @CodeGen_createGlobalLLVMString(ptr %0, ptr %1, ptr %34)
  br label %common.ret

ifend12:                                          ; preds = %ifend6
  %fmt_args = alloca ptr, align 8
  %36 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %36, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx14 = getelementptr inbounds %Array_LLVMValueRef_, ptr %36, i32 0, i32 1
  %memberidx15 = getelementptr inbounds %Array_LLVMValueRef_, ptr %36, i32 0, i32 2
  store i64 0, ptr %memberidx15, align 4
  store ptr %36, ptr %fmt_args, align 8
  %field_buckets = alloca ptr, align 8
  %37 = load ptr, ptr %obj_class, align 8
  %memberidx16 = getelementptr inbounds %Class, ptr %37, i32 0, i32 6
  %38 = load ptr, ptr %memberidx16, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %39, i32 0, i32 2
  %40 = load ptr, ptr %memberidx17, align 8
  %41 = call ptr %40(ptr %38)
  store ptr %41, ptr %field_buckets, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %ifend12
  %42 = load i64, ptr %i, align 4
  %43 = load ptr, ptr %field_buckets, align 8
  %memberidx18 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %43, i32 0, i32 2
  %44 = load i64, ptr %memberidx18, align 4
  %45 = icmp slt i64 %42, %44
  br i1 %45, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %field_bucket = alloca ptr, align 8
  %46 = load ptr, ptr %43, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 5
  %47 = load ptr, ptr %memberidx19, align 8
  %48 = call ptr %47(ptr %43, i64 %42)
  store ptr %48, ptr %field_bucket, align 8
  %field_ty = alloca ptr, align 8
  %49 = load ptr, ptr %memberidx, align 8
  %memberidx21 = getelementptr inbounds %Bucket_string_PropId_, ptr %48, i32 0, i32 2
  %50 = load ptr, ptr %memberidx21, align 8
  %51 = call ptr @get_class_prop_type(ptr %49, ptr %50)
  store ptr %51, ptr %field_ty, align 8
  %member_val = alloca ptr, align 8
  %52 = load ptr, ptr %field_bucket, align 8
  %memberidx22 = getelementptr inbounds %Bucket_string_PropId_, ptr %52, i32 0, i32 1
  %53 = load ptr, ptr %memberidx22, align 8
  %54 = call ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr %53)
  store ptr %54, ptr %member_val, align 8
  %55 = load ptr, ptr %fmt_args, align 8
  %56 = load ptr, ptr %55, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i32 0, i32 2
  %57 = load ptr, ptr %memberidx23, align 8
  %58 = load ptr, ptr %field_ty, align 8
  %59 = add i64 %4, 1
  %60 = call ptr @CodeGen_get_string_val(ptr %0, ptr %1, ptr %54, ptr %58, i64 %59)
  call void %57(ptr %55, ptr %60)
  %61 = load ptr, ptr %fmt_str, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i32 0, i32 1
  %63 = load ptr, ptr %memberidx24, align 8
  %64 = load ptr, ptr %field_bucket, align 8
  %memberidx25 = getelementptr inbounds %Bucket_string_PropId_, ptr %64, i32 0, i32 1
  %65 = load ptr, ptr %memberidx25, align 8
  %66 = load ptr, ptr %65, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i32 0, i32 11
  %67 = load ptr, ptr %memberidx26, align 8
  %68 = call ptr %67(ptr %65)
  %69 = load ptr, ptr %field_ty, align 8
  %70 = call ptr @get_format_from_type(ptr %69)
  %71 = load ptr, ptr %70, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %71, i32 0, i32 11
  %72 = load ptr, ptr %memberidx27, align 8
  %73 = call ptr %72(ptr %70)
  %74 = alloca ptr, align 8
  %75 = call i64 (ptr, ptr, ...) @asprintf(ptr %74, ptr @365, ptr %68, ptr %73)
  %76 = load ptr, ptr %74, align 8
  %77 = call ptr @string_from_bytes(ptr %76, i64 %75)
  %78 = call ptr %63(ptr %61, ptr %77)
  %79 = load i64, ptr %i, align 4
  %80 = add i64 %79, 1
  store i64 %80, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %81 = load ptr, ptr %fmt_str, align 8
  %82 = load ptr, ptr %81, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %82, i32 0, i32 1
  %83 = load ptr, ptr %memberidx28, align 8
  %84 = call ptr @string_from_bytes(ptr @366, i64 1)
  %85 = call ptr %83(ptr %81, ptr %84)
  %86 = load ptr, ptr %fmt_str, align 8
  %87 = load ptr, ptr %fmt_args, align 8
  %88 = call ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr %86, ptr %87, ptr null)
  br label %common.ret

if.entry30:                                       ; preds = %ifend3
  %89 = call ptr @string_from_bytes(ptr @367, i64 10)
  %90 = call ptr @CodeGen_createGlobalLLVMString(ptr %0, ptr %1, ptr %89)
  br label %common.ret

ifend32:                                          ; preds = %ifend3
  br label %common.ret
}

define ptr @CodeGen_get_var_expr_mem(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %2, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %4)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %7 = call ptr @string_from_bytes(ptr @370, i64 45)
  call void @panic(ptr %7)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret ptr %5
}

define ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %IndexExpression, ptr %2, i32 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %IndexExpression, ptr %2, i32 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call i1 @is_pointer(ptr %7)
  br i1 %8, label %true_block, label %false_block

true_block:                                       ; preds = %3
  %memberidx3 = getelementptr inbounds %PointerType, ptr %7, i32 0, i32 1
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = call ptr @CodeGen_codegen_type(ptr %0, ptr %9, i1 true)
  br label %end

false_block:                                      ; preds = %3
  %11 = call ptr @CodeGen_codegen_type(ptr %0, ptr %7, i1 true)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %10, %true_block ], [ %11, %false_block ]
  %ind_ptr = alloca ptr, align 8
  store ptr null, ptr %ind_ptr, align 8
  %12 = load i64, ptr %7, align 4
  %13 = icmp eq i64 %12, 16
  br i1 %13, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %18, %if.entry ], [ %21, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %end
  %indices = alloca [2 x ptr], align 8
  %14 = call ptr @CodeGen_createLLVMInt(ptr %0, i64 0)
  store ptr %14, ptr %indices, align 8
  %15 = getelementptr inbounds ptr, ptr %indices, i64 1
  store ptr %5, ptr %15, align 8
  %16 = load ptr, ptr %memberidx1, align 8
  %17 = call ptr @CodeGen_get_expr_mem(ptr %0, ptr %1, ptr %16)
  store ptr %17, ptr %ind_ptr, align 8
  %18 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %ternary, ptr %17, ptr %indices, i64 2, ptr @371)
  br label %common.ret

ifend:                                            ; preds = %end
  %indices_1 = alloca [1 x ptr], align 8
  store ptr %5, ptr %indices_1, align 8
  %19 = load ptr, ptr %memberidx1, align 8
  %20 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %19)
  store ptr %20, ptr %ind_ptr, align 8
  %21 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %ternary, ptr %20, ptr %indices_1, i64 1, ptr @372)
  br label %common.ret
}

define ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %MemberExpression, ptr %2, i32 0, i32 5
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %PropId, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %0, ptr %6)
  %memberidx2 = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load i64, ptr %8, align 4
  %10 = icmp eq i64 %9, 17
  %11 = load ptr, ptr %memberidx, align 8
  %12 = call ptr @create_prop_key(ptr %11)
  %13 = load ptr, ptr %7, align 8
  %memberidx6 = getelementptr inbounds %CGClassType, ptr %7, i32 0, i32 3
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = load ptr, ptr %14, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx7, align 8
  %17 = call ptr %16(ptr %14, ptr %12)
  %18 = icmp ne ptr %17, null
  br i1 %18, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend16, %if.entry
  %common.ret.op = phi ptr [ %17, %if.entry ], [ %64, %ifend16 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  br label %common.ret

ifend:                                            ; preds = %4
  %19 = icmp eq ptr %3, null
  br i1 %19, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend
  %memberidx11 = getelementptr inbounds %MemberExpression, ptr %2, i32 0, i32 4
  %20 = load ptr, ptr %memberidx11, align 8
  %21 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %20)
  br label %ifend10

ifend10:                                          ; preds = %ifend, %if.entry8
  %ptr.0 = phi ptr [ %21, %if.entry8 ], [ %3, %ifend ]
  %indices = alloca ptr, align 8
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %22, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx12 = getelementptr inbounds %Array_LLVMValueRef_, ptr %22, i32 0, i32 1
  %23 = load ptr, ptr %memberidx12, align 8
  %24 = call ptr @LLVMInt32Type()
  %25 = call ptr @LLVMConstInt(ptr %24, i64 0, i1 false)
  store ptr %25, ptr %23, align 8
  %memberidx13 = getelementptr inbounds %Array_LLVMValueRef_, ptr %22, i32 0, i32 2
  store i64 1, ptr %memberidx13, align 4
  store ptr %22, ptr %indices, align 8
  %26 = xor i1 %10, true
  br i1 %26, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend10
  %vtoffset = alloca i64, align 8
  %memberidx17 = getelementptr inbounds %CGClassType, ptr %7, i32 0, i32 5
  %27 = load ptr, ptr %memberidx17, align 8
  %28 = icmp eq ptr %27, null
  %. = select i1 %28, i64 0, i64 1
  store i64 %., ptr %vtoffset, align 4
  %29 = load ptr, ptr %indices, align 8
  %30 = load ptr, ptr %29, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i32 0, i32 2
  %31 = load ptr, ptr %memberidx18, align 8
  %32 = call ptr @LLVMInt32Type()
  %memberidx19 = getelementptr inbounds %CGClassType, ptr %7, i32 0, i32 2
  %33 = load ptr, ptr %memberidx19, align 8
  %34 = load ptr, ptr %33, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %34, i32 0, i32 1
  %35 = load ptr, ptr %memberidx20, align 8
  %36 = call i64 %35(ptr %33, ptr %12)
  %37 = load i64, ptr %vtoffset, align 4
  %38 = add i64 %36, %37
  %39 = call ptr @LLVMConstInt(ptr %32, i64 %38, i1 false)
  call void %31(ptr %29, ptr %39)
  br label %ifend16

else15:                                           ; preds = %ifend10
  %40 = load ptr, ptr %22, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %40, i32 0, i32 2
  %41 = load ptr, ptr %memberidx21, align 8
  %42 = call ptr @LLVMInt32Type()
  %43 = call ptr @LLVMConstInt(ptr %42, i64 0, i1 false)
  call void %41(ptr %22, ptr %43)
  %44 = load ptr, ptr %indices, align 8
  %memberidx22 = getelementptr inbounds %Array_LLVMValueRef_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Array_LLVMValueRef_, ptr %44, i32 0, i32 2
  %46 = load i64, ptr %memberidx23, align 4
  %47 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %13, ptr %ptr.0, ptr %45, i64 %46, ptr @38)
  %memberidx24 = getelementptr inbounds %CGClassType, ptr %7, i32 0, i32 5
  %48 = load ptr, ptr %memberidx24, align 8
  %49 = call ptr @LLVMPointerType(ptr %48, i64 0)
  %50 = call ptr @LLVMBuildLoad2(ptr %1, ptr %49, ptr %47, ptr @38)
  %51 = load ptr, ptr %indices, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i32 0, i32 3
  %53 = load ptr, ptr %memberidx25, align 8
  %54 = call ptr @LLVMInt32Type()
  %memberidx26 = getelementptr inbounds %CGClassType, ptr %7, i32 0, i32 1
  %55 = load ptr, ptr %memberidx26, align 8
  %56 = load ptr, ptr %55, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %56, i32 0, i32 1
  %57 = load ptr, ptr %memberidx27, align 8
  %58 = call i64 %57(ptr %55, ptr %12)
  %59 = call ptr @LLVMConstInt(ptr %54, i64 %58, i1 false)
  call void %53(ptr %51, i64 1, ptr %59)
  %60 = load ptr, ptr %memberidx24, align 8
  br label %ifend16

ifend16:                                          ; preds = %else15, %if.entry14
  %struct_type.0 = phi ptr [ %13, %if.entry14 ], [ %60, %else15 ]
  %ptr.1 = phi ptr [ %ptr.0, %if.entry14 ], [ %50, %else15 ]
  %61 = load ptr, ptr %indices, align 8
  %memberidx29 = getelementptr inbounds %Array_LLVMValueRef_, ptr %61, i32 0, i32 1
  %62 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds %Array_LLVMValueRef_, ptr %61, i32 0, i32 2
  %63 = load i64, ptr %memberidx30, align 4
  %64 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %struct_type.0, ptr %ptr.1, ptr %62, i64 %63, ptr @374)
  br label %common.ret
}

define ptr @CodeGen_codegen_bool(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %BooleanExpression, ptr %1, i32 0, i32 4
  %3 = load i1, ptr %memberidx, align 1
  %4 = call ptr @CodeGen_createLLVMBool(ptr %0, i1 %3)
  ret ptr %4
}

define ptr @CodeGen_get_expr_mem(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Expression, ptr %2, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 7
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend8, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %8, %if.entry2 ], [ %10, %if.entry6 ], [ %11, %ifend8 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %6 = call ptr @CodeGen_get_var_expr_mem(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend:                                            ; preds = %3
  %7 = icmp eq i64 %4, 13
  br i1 %7, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %8 = call ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend4:                                           ; preds = %ifend
  %9 = icmp eq i64 %4, 12
  br i1 %9, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %10 = call ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %2, ptr null)
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  %11 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %2)
  br label %common.ret
}

define ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr %2, ptr %3) {
end:
  %memberidx = getelementptr inbounds %GenericType, ptr %2, i32 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @CodeGen_codegen_type(ptr %0, ptr %4, i1 false)
  %memberidx1 = getelementptr inbounds %GenericType, ptr %2, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = call ptr %8(ptr %6, i64 0)
  %10 = call ptr @CodeGen_codegen_type(ptr %0, ptr %9, i1 true)
  %11 = call ptr @LLVMBuildMalloc(ptr %1, ptr %5, ptr @38)
  %memberidx3 = getelementptr inbounds %ArrayExpression, ptr %3, i32 0, i32 4
  %12 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Expression_, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx4, align 4
  %14 = icmp sgt i64 %13, 0
  %ternary = select i1 %14, i64 %13, i64 1
  %15 = call ptr @CodeGen_createLLVMInt(ptr %0, i64 %ternary)
  %16 = call ptr @CodeGen_createLLVMInt(ptr %0, i64 %13)
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %17, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx5 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  store ptr %11, ptr %18, align 8
  %19 = getelementptr inbounds ptr, ptr %18, i64 1
  %20 = call ptr @LLVMSizeOf(ptr %10)
  %21 = call ptr @LLVMConstMul(ptr %15, ptr %20)
  store ptr %21, ptr %19, align 8
  %memberidx6 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i32 0, i32 2
  store i64 2, ptr %memberidx6, align 4
  call void @CodeGen_build_constructor_call(ptr %0, ptr %1, ptr %4, ptr %17)
  %22 = call ptr @string_from_bytes(ptr @375, i64 6)
  %23 = call ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %11, ptr %4, ptr %22)
  %24 = call ptr @LLVMPointerType(ptr %10, i64 0)
  %25 = call ptr @LLVMBuildLoad2(ptr %1, ptr %24, ptr %23, ptr @38)
  %26 = call ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %25, ptr %3)
  %27 = call ptr @string_from_bytes(ptr @376, i64 6)
  %28 = call ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %11, ptr %4, ptr %27)
  %29 = call ptr @LLVMBuildStore(ptr %1, ptr %16, ptr %28)
  ret ptr %11
}

define void @CodeGen_declare_class(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CGClassType, ptr null, i32 1) to i32))
  call void @CGClassType_constructor(ptr %3)
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %1, i32 0, i32 1
  %5 = load ptr, ptr %memberidx2, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i32 0, i32 11
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = call ptr %7(ptr %5)
  %9 = call ptr @LLVMStructCreateNamed(ptr %4, ptr %8)
  store ptr %9, ptr %3, align 8
  %10 = load ptr, ptr %1, align 8
  call void @CodeGen_add_class(ptr %0, ptr %10, ptr %3)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %11, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx5 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 1
  %memberidx6 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  call void @CodeGen_declare_static_props(ptr %0, ptr %3, ptr %1)
  call void @CodeGen_declare_class_props(ptr %0, ptr %3, ptr %1, ptr %11)
  %12 = load ptr, ptr %3, align 8
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = load i64, ptr %memberidx6, align 4
  call void @LLVMStructSetBody(ptr %12, ptr %13, i64 %14, i1 true)
  %memberidx10 = getelementptr inbounds %Class, ptr %1, i32 0, i32 3
  %15 = load ptr, ptr %memberidx10, align 8
  %16 = icmp ne ptr %15, null
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %constructor_type = alloca ptr, align 8
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %17 = load ptr, ptr %memberidx11, align 8
  %18 = call ptr @get_class_prop_type(ptr %17, ptr %15)
  store ptr %18, ptr %constructor_type, align 8
  %arg_types = alloca ptr, align 8
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %19, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx13 = getelementptr inbounds %Array_Type_, ptr %19, i32 0, i32 1
  %memberidx14 = getelementptr inbounds %Array_Type_, ptr %19, i32 0, i32 2
  store i64 0, ptr %memberidx14, align 4
  store ptr %19, ptr %arg_types, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx15, align 8
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  %23 = load ptr, ptr %1, align 8
  call void @ObjectType_constructor(ptr %22, ptr %23)
  call void %21(ptr %19, ptr %22)
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

else:                                             ; preds = %2
  %memberidx26 = getelementptr inbounds %CGClassType, ptr %3, i32 0, i32 6
  store ptr null, ptr %memberidx26, align 8
  br label %ifend

ifend:                                            ; preds = %else, %for.end
  ret void

for.cond:                                         ; preds = %for.body, %if.entry
  %24 = load i64, ptr %i, align 4
  %25 = load ptr, ptr %constructor_type, align 8
  %memberidx17 = getelementptr inbounds %FunctionType, ptr %25, i32 0, i32 1
  %26 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Array_Type_, ptr %26, i32 0, i32 2
  %27 = load i64, ptr %memberidx18, align 4
  %28 = icmp slt i64 %24, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load ptr, ptr %arg_types, align 8
  %30 = load ptr, ptr %29, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i32 0, i32 2
  %31 = load ptr, ptr %memberidx19, align 8
  %32 = load ptr, ptr %26, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 5
  %33 = load ptr, ptr %memberidx21, align 8
  %34 = call ptr %33(ptr %26, i64 %24)
  call void %31(ptr %29, ptr %34)
  %35 = load i64, ptr %i, align 4
  %36 = add i64 %35, 1
  store i64 %36, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %37 = load ptr, ptr %arg_types, align 8
  store ptr %37, ptr %memberidx17, align 8
  %constructor_llvm_method_type = alloca ptr, align 8
  %38 = load ptr, ptr %constructor_type, align 8
  %39 = call ptr @CodeGen_codegen_type(ptr %0, ptr %38, i1 false)
  store ptr %39, ptr %constructor_llvm_method_type, align 8
  %memberidx23 = getelementptr inbounds %CGClassType, ptr %3, i32 0, i32 6
  %40 = load ptr, ptr %memberidx2, align 8
  %41 = load ptr, ptr %40, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i32 0, i32 11
  %42 = load ptr, ptr %memberidx25, align 8
  %43 = call ptr %42(ptr %40)
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr %44, ptr @402, ptr %43)
  %46 = load ptr, ptr %44, align 8
  %47 = call ptr @string_from_bytes(ptr %46, i64 %45)
  %48 = load ptr, ptr %constructor_llvm_method_type, align 8
  %49 = call ptr @CodeGen_declare_method(ptr %0, ptr %47, ptr %48)
  store ptr %49, ptr %memberidx23, align 8
  br label %ifend
}

define ptr @CodeGen_codegen_memcmp_call(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMInt8TypeInContext(ptr %4)
  %6 = call ptr @LLVMPointerType(ptr %5, i64 0)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @LLVMIntTypeInContext(ptr %7, i64 64)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr @string_from_bytes(ptr @355, i64 6)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %11, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 3))
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx3, align 8
  store ptr %6, ptr %12, align 8
  %13 = getelementptr inbounds ptr, ptr %12, i64 1
  store ptr %6, ptr %13, align 8
  %14 = getelementptr inbounds ptr, ptr %13, i64 1
  store ptr %8, ptr %14, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 2
  store i64 3, ptr %memberidx4, align 4
  %15 = call ptr @get_intrinsic(ptr %9, ptr %10, ptr %11, ptr %8, i1 false)
  %memberidx5 = getelementptr inbounds %IntrinsicResult, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx5, align 8
  %17 = load ptr, ptr %15, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 1
  %18 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 2
  %19 = load i64, ptr %memberidx8, align 4
  %20 = call ptr @LLVMBuildCall2(ptr %1, ptr %16, ptr %17, ptr %18, i64 %19, ptr @38)
  ret ptr %20
}

define ptr @CodeGen_codegen_float(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @CodeGen_codegen_type(ptr %0, ptr %3, i1 true)
  %memberidx1 = getelementptr inbounds %FloatExpression, ptr %1, i32 0, i32 4
  %5 = load double, ptr %memberidx1, align 8
  %6 = call ptr @LLVMConstReal(ptr %4, double %5)
  ret ptr %6
}

define ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @create_type_id_key(ptr %1)
  %7 = call ptr %5(ptr %3, ptr %6)
  ret ptr %7
}

define ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 6
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @create_type_id_key(ptr %1)
  %7 = call ptr %5(ptr %3, ptr %6)
  ret ptr %7
}

define ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %0, ptr %1) {
  %3 = call ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %1)
  %4 = icmp ne ptr %3, null
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %7, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  br label %common.ret

ifend:                                            ; preds = %2
  %class_ = alloca ptr, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @get_class(ptr %5, ptr %1)
  store ptr %6, ptr %class_, align 8
  %7 = call ptr @CodeGen_construct_class(ptr %0, ptr %6)
  br label %common.ret
}

define ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %0, ptr %1) {
  %3 = call ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %1)
  %4 = icmp ne ptr %3, null
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %7, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  br label %common.ret

ifend:                                            ; preds = %2
  %enum_ = alloca ptr, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @get_enum(ptr %5, ptr %1)
  store ptr %6, ptr %enum_, align 8
  %7 = call ptr @CodeGen_construct_enum(ptr %0, ptr %6)
  br label %common.ret
}

define ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr @get_class_from_type(ptr %6, ptr %3)
  %memberidx1 = getelementptr inbounds %Class, ptr %7, i32 0, i32 6
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = call ptr %10(ptr %8, ptr %4)
  %12 = load ptr, ptr %memberidx, align 8
  %13 = call ptr @get_class_prop_type(ptr %12, ptr %11)
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  call void @MemberExpression_constructor(ptr %14, ptr null, ptr %11, ptr %13)
  %15 = call ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %14, ptr %2)
  ret ptr %15
}

define ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  %6 = call ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4)
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @get_class_prop_type_with_name(ptr %7, ptr %3, ptr %4)
  %9 = call ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  %10 = call ptr @LLVMBuildLoad2(ptr %1, ptr %9, ptr %6, ptr @38)
  ret ptr %10
}

define ptr @CodeGen_createLLVMBool(ptr %0, i1 %1) {
end:
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr @LLVMInt1TypeInContext(ptr %2)
  %. = select i1 %1, i64 1, i64 0
  %4 = call ptr @LLVMConstInt(ptr %3, i64 %., i1 false)
  ret ptr %4
}

define void @CodeGen_codegen_for_stmt(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @LLVMAppendBasicBlockInContext(ptr %4, ptr %5, ptr @392)
  %7 = call ptr @LLVMBuildBr(ptr %1, ptr %6)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %6)
  %memberidx2 = getelementptr inbounds %ForStatement, ptr %2, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = icmp ne ptr %8, null
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %8)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %for_cond_block = alloca ptr, align 8
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = call ptr @LLVMAppendBasicBlockInContext(ptr %10, ptr %11, ptr @393)
  store ptr %12, ptr %for_cond_block, align 8
  %for_body_block = alloca ptr, align 8
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load ptr, ptr %memberidx1, align 8
  %15 = call ptr @LLVMAppendBasicBlockInContext(ptr %13, ptr %14, ptr @394)
  store ptr %15, ptr %for_body_block, align 8
  %for_incr_block = alloca ptr, align 8
  %16 = load ptr, ptr %memberidx, align 8
  %17 = load ptr, ptr %memberidx1, align 8
  %18 = call ptr @LLVMAppendBasicBlockInContext(ptr %16, ptr %17, ptr @395)
  store ptr %18, ptr %for_incr_block, align 8
  %for_end_block = alloca ptr, align 8
  %19 = load ptr, ptr %memberidx, align 8
  %20 = load ptr, ptr %memberidx1, align 8
  %21 = call ptr @LLVMAppendBasicBlockInContext(ptr %19, ptr %20, ptr @396)
  store ptr %21, ptr %for_end_block, align 8
  %prev_break_bb = alloca ptr, align 8
  %memberidx12 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 7
  %22 = load ptr, ptr %memberidx12, align 8
  store ptr %22, ptr %prev_break_bb, align 8
  %prev_continue_bb = alloca ptr, align 8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 8
  %23 = load ptr, ptr %memberidx13, align 8
  store ptr %23, ptr %prev_continue_bb, align 8
  %24 = load ptr, ptr %for_end_block, align 8
  store ptr %24, ptr %memberidx12, align 8
  %25 = load ptr, ptr %for_incr_block, align 8
  store ptr %25, ptr %memberidx13, align 8
  %26 = load ptr, ptr %for_cond_block, align 8
  %27 = call ptr @LLVMBuildBr(ptr %1, ptr %26)
  %28 = load ptr, ptr %for_cond_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %28)
  %condition = alloca ptr, align 8
  %29 = call ptr @CodeGen_createLLVMBool(ptr %0, i1 true)
  store ptr %29, ptr %condition, align 8
  %memberidx16 = getelementptr inbounds %ForStatement, ptr %2, i32 0, i32 2
  %30 = load ptr, ptr %memberidx16, align 8
  %31 = icmp ne ptr %30, null
  br i1 %31, label %if.entry17, label %ifend19

if.entry17:                                       ; preds = %ifend
  %32 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %30)
  store ptr %32, ptr %condition, align 8
  br label %ifend19

ifend19:                                          ; preds = %ifend, %if.entry17
  %33 = load ptr, ptr %condition, align 8
  %34 = load ptr, ptr %for_body_block, align 8
  %35 = load ptr, ptr %for_end_block, align 8
  %36 = call ptr @LLVMBuildCondBr(ptr %1, ptr %33, ptr %34, ptr %35)
  %37 = load ptr, ptr %for_body_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %37)
  %memberidx21 = getelementptr inbounds %ForStatement, ptr %2, i32 0, i32 4
  %38 = load ptr, ptr %memberidx21, align 8
  call void @CodeGen_codegen_block(ptr %0, ptr %1, ptr %38)
  %39 = load ptr, ptr %memberidx21, align 8
  %40 = call i1 @is_terminated(ptr %39)
  %41 = xor i1 %40, true
  br i1 %41, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %ifend19
  %42 = load ptr, ptr %for_incr_block, align 8
  %43 = call ptr @LLVMBuildBr(ptr %1, ptr %42)
  br label %ifend25

ifend25:                                          ; preds = %ifend19, %if.entry23
  %44 = load ptr, ptr %for_incr_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %44)
  %memberidx26 = getelementptr inbounds %ForStatement, ptr %2, i32 0, i32 3
  %45 = load ptr, ptr %memberidx26, align 8
  %46 = icmp ne ptr %45, null
  br i1 %46, label %if.entry27, label %ifend29

if.entry27:                                       ; preds = %ifend25
  %47 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %45)
  br label %ifend29

ifend29:                                          ; preds = %ifend25, %if.entry27
  %48 = load ptr, ptr %for_cond_block, align 8
  %49 = call ptr @LLVMBuildBr(ptr %1, ptr %48)
  %50 = load ptr, ptr %prev_break_bb, align 8
  store ptr %50, ptr %memberidx12, align 8
  %51 = load ptr, ptr %prev_continue_bb, align 8
  store ptr %51, ptr %memberidx13, align 8
  %52 = load ptr, ptr %for_end_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %52)
  ret void
}

define ptr @CodeGen_codegen_int(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @CodeGen_codegen_type(ptr %0, ptr %3, i1 true)
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %1, i32 0, i32 4
  %5 = load i64, ptr %memberidx1, align 4
  %6 = call ptr @LLVMConstInt(ptr %4, i64 %5, i1 true)
  ret ptr %6
}

define ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %MemberExpression, ptr %2, i32 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %VarAccessExpression, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = call i1 @is_object(ptr %7)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %4
  %ptr = alloca ptr, align 8
  %9 = call ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %2, ptr %3)
  store ptr %9, ptr %ptr, align 8
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %MemberExpression, ptr %2, i32 0, i32 5
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = call i64 @get_class_prop_visibility(ptr %10, ptr %11)
  %13 = icmp eq i64 %12, 1
  %memberidx6 = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = load i64, ptr %14, align 4
  %16 = icmp eq i64 %15, 17
  %17 = and i1 %13, %16
  br i1 %17, label %if.entry8, label %ifend10

ifend:                                            ; preds = %4
  %prop_id_key = alloca ptr, align 8
  %memberidx12 = getelementptr inbounds %MemberExpression, ptr %2, i32 0, i32 5
  %18 = load ptr, ptr %memberidx12, align 8
  %19 = call ptr @create_prop_key(ptr %18)
  store ptr %19, ptr %prop_id_key, align 8
  %20 = load i64, ptr %6, align 4
  %21 = icmp eq i64 %20, 3
  br i1 %21, label %if.entry14, label %ifend16

common.ret:                                       ; preds = %ifend16, %ifend37, %ifend29, %if.entry27, %ifend10, %if.entry8
  %common.ret.op = phi ptr [ %22, %if.entry8 ], [ %25, %ifend10 ], [ %42, %if.entry27 ], [ %45, %ifend29 ], [ %55, %ifend37 ], [ null, %ifend16 ]
  ret ptr %common.ret.op

if.entry8:                                        ; preds = %if.entry
  %22 = load ptr, ptr %ptr, align 8
  br label %common.ret

ifend10:                                          ; preds = %if.entry
  %23 = call ptr @CodeGen_codegen_type(ptr %0, ptr %14, i1 true)
  %24 = load ptr, ptr %ptr, align 8
  %25 = call ptr @LLVMBuildLoad2(ptr %1, ptr %23, ptr %24, ptr @38)
  br label %common.ret

if.entry14:                                       ; preds = %ifend
  %struct_class = alloca ptr, align 8
  %26 = call ptr @ClassVarId_to_classId(ptr %6)
  %27 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %0, ptr %26)
  store ptr %27, ptr %struct_class, align 8
  %28 = icmp eq ptr %27, null
  br i1 %28, label %if.entry17, label %ifend19

ifend16:                                          ; preds = %ifend
  %29 = icmp eq i64 %20, 4
  br i1 %29, label %if.entry32, label %common.ret

if.entry17:                                       ; preds = %if.entry14
  %30 = call ptr @string_from_bytes(ptr @385, i64 51)
  call void @panic(ptr %30)
  br label %ifend19

ifend19:                                          ; preds = %if.entry14, %if.entry17
  %prop = alloca ptr, align 8
  %31 = load ptr, ptr %struct_class, align 8
  %memberidx20 = getelementptr inbounds %CGClassType, ptr %31, i32 0, i32 3
  %32 = load ptr, ptr %memberidx20, align 8
  %33 = load ptr, ptr %32, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %33, i32 0, i32 1
  %34 = load ptr, ptr %memberidx21, align 8
  %35 = load ptr, ptr %prop_id_key, align 8
  %36 = call ptr %34(ptr %32, ptr %35)
  store ptr %36, ptr %prop, align 8
  %37 = icmp eq ptr %36, null
  br i1 %37, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend19
  %38 = call ptr @string_from_bytes(ptr @386, i64 59)
  call void @panic(ptr %38)
  br label %ifend24

ifend24:                                          ; preds = %ifend19, %if.entry22
  %memberidx25 = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %39 = load ptr, ptr %memberidx25, align 8
  %40 = load i64, ptr %39, align 4
  %41 = icmp eq i64 %40, 17
  br i1 %41, label %if.entry27, label %ifend29

if.entry27:                                       ; preds = %ifend24
  %42 = load ptr, ptr %prop, align 8
  br label %common.ret

ifend29:                                          ; preds = %ifend24
  %43 = call ptr @CodeGen_codegen_type(ptr %0, ptr %39, i1 true)
  %44 = load ptr, ptr %prop, align 8
  %45 = call ptr @LLVMBuildLoad2(ptr %1, ptr %43, ptr %44, ptr @38)
  br label %common.ret

if.entry32:                                       ; preds = %ifend16
  %enum_type = alloca ptr, align 8
  %46 = call ptr @EnumVarId_to_enumId(ptr %6)
  %47 = call ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %0, ptr %46)
  store ptr %47, ptr %enum_type, align 8
  %48 = icmp eq ptr %47, null
  br i1 %48, label %if.entry35, label %ifend37

if.entry35:                                       ; preds = %if.entry32
  %49 = call ptr @string_from_bytes(ptr @387, i64 50)
  call void @panic(ptr %49)
  br label %ifend37

ifend37:                                          ; preds = %if.entry32, %if.entry35
  %50 = load ptr, ptr %enum_type, align 8
  %memberidx38 = getelementptr inbounds %CGEnumType, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx38, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %52, i32 0, i32 1
  %53 = load ptr, ptr %memberidx39, align 8
  %54 = load ptr, ptr %prop_id_key, align 8
  %55 = call ptr %53(ptr %51, ptr %54)
  br label %common.ret
}

define ptr @CodeGen_codegen_atoi_call(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMInt8TypeInContext(ptr %4)
  %6 = call ptr @LLVMPointerType(ptr %5, i64 0)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @LLVMInt32TypeInContext(ptr %7)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr @string_from_bytes(ptr @352, i64 4)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %11, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx3, align 8
  store ptr %6, ptr %12, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 2
  store i64 1, ptr %memberidx4, align 4
  %13 = call ptr @get_intrinsic(ptr %9, ptr %10, ptr %11, ptr %8, i1 false)
  %memberidx5 = getelementptr inbounds %IntrinsicResult, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx5, align 8
  %15 = load ptr, ptr %13, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 1
  %16 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 2
  %17 = load i64, ptr %memberidx8, align 4
  %18 = call ptr @LLVMBuildCall2(ptr %1, ptr %14, ptr %15, ptr %16, i64 %17, ptr @38)
  ret ptr %18
}

define ptr @CodeGen_declare_method(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 11
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %1)
  %8 = call ptr @LLVMAddFunction(ptr %4, ptr %7, ptr %2)
  ret ptr %8
}

define void @CodeGen_declare_static_props(ptr %0, ptr %1, ptr %2) {
for.entry:
  %memberidx = getelementptr inbounds %Class, ptr %2, i32 0, i32 7
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %3)
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %62, %ifend ]
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx2, align 4
  %8 = icmp slt i64 %i.0, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %prop_id = alloca ptr, align 8
  %9 = load ptr, ptr %6, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %6, i64 %i.0)
  %memberidx4 = getelementptr inbounds %Bucket_string_PropId_, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx4, align 8
  store ptr %12, ptr %prop_id, align 8
  %prop_id_key = alloca ptr, align 8
  %13 = call ptr @create_prop_key(ptr %12)
  store ptr %13, ptr %prop_id_key, align 8
  %prop_type = alloca ptr, align 8
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %14 = load ptr, ptr %memberidx5, align 8
  %15 = load ptr, ptr %prop_id, align 8
  %16 = call ptr @get_class_prop_type(ptr %14, ptr %15)
  store ptr %16, ptr %prop_type, align 8
  %static_prop_name = alloca ptr, align 8
  %17 = load ptr, ptr %6, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i32 0, i32 5
  %18 = load ptr, ptr %memberidx6, align 8
  %19 = call ptr %18(ptr %6, i64 %i.0)
  %memberidx7 = getelementptr inbounds %Bucket_string_PropId_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  store ptr %20, ptr %static_prop_name, align 8
  %static_prop_type = alloca ptr, align 8
  %21 = load ptr, ptr %prop_type, align 8
  %22 = call ptr @CodeGen_codegen_type(ptr %0, ptr %21, i1 false)
  store ptr %22, ptr %static_prop_type, align 8
  %static_prop_name_concat = alloca ptr, align 8
  %memberidx8 = getelementptr inbounds %Class, ptr %2, i32 0, i32 1
  %23 = load ptr, ptr %memberidx8, align 8
  %24 = load ptr, ptr %23, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i32 0, i32 11
  %25 = load ptr, ptr %memberidx9, align 8
  %26 = call ptr %25(ptr %23)
  %27 = load ptr, ptr %static_prop_name, align 8
  %28 = load ptr, ptr %27, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %28, i32 0, i32 11
  %29 = load ptr, ptr %memberidx10, align 8
  %30 = call ptr %29(ptr %27)
  %31 = alloca ptr, align 8
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr %31, ptr @200, ptr %26, ptr %30)
  %33 = load ptr, ptr %31, align 8
  %34 = call ptr @string_from_bytes(ptr %33, i64 %32)
  store ptr %34, ptr %static_prop_name_concat, align 8
  %static_prop_value = alloca ptr, align 8
  store ptr null, ptr %static_prop_value, align 8
  %35 = load ptr, ptr %prop_id, align 8
  %36 = load i64, ptr %35, align 4
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %if.entry, label %else

for.end:                                          ; preds = %for.cond
  ret void

if.entry:                                         ; preds = %for.body
  %38 = load ptr, ptr %static_prop_name_concat, align 8
  %39 = load ptr, ptr %static_prop_type, align 8
  %40 = call ptr @CodeGen_declare_method(ptr %0, ptr %38, ptr %39)
  store ptr %40, ptr %static_prop_value, align 8
  br label %ifend

else:                                             ; preds = %for.body
  %memberidx12 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %41 = load ptr, ptr %memberidx12, align 8
  %42 = load ptr, ptr %static_prop_type, align 8
  %43 = load ptr, ptr %static_prop_name_concat, align 8
  %44 = load ptr, ptr %43, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %44, i32 0, i32 11
  %45 = load ptr, ptr %memberidx13, align 8
  %46 = call ptr %45(ptr %43)
  %47 = call ptr @LLVMAddGlobal(ptr %41, ptr %42, ptr %46)
  store ptr %47, ptr %static_prop_value, align 8
  %global_prop_initializer = alloca ptr, align 8
  %memberidx14 = getelementptr inbounds %Class, ptr %2, i32 0, i32 4
  %48 = load ptr, ptr %memberidx14, align 8
  %49 = load ptr, ptr %48, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %49, i32 0, i32 5
  %50 = load ptr, ptr %memberidx15, align 8
  %51 = load ptr, ptr %prop_id, align 8
  %memberidx16 = getelementptr inbounds %PropId, ptr %51, i32 0, i32 2
  %52 = load i64, ptr %memberidx16, align 4
  %53 = call ptr %50(ptr %48, i64 %52)
  %memberidx17 = getelementptr inbounds %ClassField, ptr %53, i32 0, i32 5
  %54 = load ptr, ptr %memberidx17, align 8
  %55 = call ptr @CodeGen_codegen_expression(ptr %0, ptr null, ptr %54)
  store ptr %55, ptr %global_prop_initializer, align 8
  %56 = load ptr, ptr %static_prop_value, align 8
  call void @LLVMSetInitializer(ptr %56, ptr %55)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %memberidx18 = getelementptr inbounds %CGClassType, ptr %1, i32 0, i32 3
  %57 = load ptr, ptr %memberidx18, align 8
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %prop_id_key, align 8
  %61 = load ptr, ptr %static_prop_value, align 8
  call void %59(ptr %57, ptr %60, ptr %61)
  %62 = add i64 %i.0, 1
  br label %for.cond
}

define void @CodeGen_codegen_function(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Function, ptr %1, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 11
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %3)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Function, ptr %1, i32 0, i32 4
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = call ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 false)
  %10 = call ptr @LLVMAddFunction(ptr %7, ptr %6, ptr %9)
  %11 = load ptr, ptr %1, align 8
  call void @CodeGen_add_var(ptr %0, ptr %11, ptr %10)
  %memberidx5 = getelementptr inbounds %Function, ptr %1, i32 0, i32 6
  %12 = load i1, ptr %memberidx5, align 1
  br i1 %12, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.end, %if.entry
  ret void

if.entry:                                         ; preds = %2
  call void @LLVMSetLinkage(ptr %10, i64 0)
  br label %common.ret

ifend:                                            ; preds = %2
  %func_builder = alloca ptr, align 8
  %memberidx6 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %13 = load ptr, ptr %memberidx6, align 8
  %14 = call ptr @LLVMCreateBuilderInContext(ptr %13)
  store ptr %14, ptr %func_builder, align 8
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = call ptr @LLVMAppendBasicBlockInContext(ptr %15, ptr %10, ptr @38)
  call void @LLVMPositionBuilderAtEnd(ptr %14, ptr %16)
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %ifend
  %17 = load i64, ptr %i, align 4
  %memberidx8 = getelementptr inbounds %Function, ptr %1, i32 0, i32 2
  %18 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_FunctionArg_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx9, align 4
  %20 = icmp slt i64 %17, %19
  br i1 %20, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arg = alloca ptr, align 8
  %21 = load ptr, ptr %18, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 5
  %22 = load ptr, ptr %memberidx11, align 8
  %23 = call ptr %22(ptr %18, i64 %17)
  store ptr %23, ptr %arg, align 8
  %param = alloca ptr, align 8
  %24 = load i64, ptr %i, align 4
  %25 = call ptr @LLVMGetParam(ptr %10, i64 %24)
  store ptr %25, ptr %param, align 8
  %alloc = alloca ptr, align 8
  %26 = load ptr, ptr %func_builder, align 8
  %27 = load ptr, ptr %arg, align 8
  %memberidx12 = getelementptr inbounds %Expression, ptr %27, i32 0, i32 3
  %28 = load ptr, ptr %memberidx12, align 8
  %29 = call ptr @CodeGen_codegen_type(ptr %0, ptr %28, i1 true)
  %30 = load ptr, ptr %arg, align 8
  %memberidx13 = getelementptr inbounds %FunctionArg, ptr %30, i32 0, i32 5
  %31 = load ptr, ptr %memberidx13, align 8
  %32 = load ptr, ptr %31, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i32 0, i32 11
  %33 = load ptr, ptr %memberidx14, align 8
  %34 = call ptr %33(ptr %31)
  %35 = call ptr @LLVMBuildAlloca(ptr %26, ptr %29, ptr %34)
  store ptr %35, ptr %alloc, align 8
  %36 = load ptr, ptr %func_builder, align 8
  %37 = load ptr, ptr %param, align 8
  %38 = call ptr @LLVMBuildStore(ptr %36, ptr %37, ptr %35)
  %39 = load ptr, ptr %arg, align 8
  %memberidx15 = getelementptr inbounds %FunctionArg, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %memberidx15, align 8
  %41 = load ptr, ptr %alloc, align 8
  call void @CodeGen_add_var(ptr %0, ptr %40, ptr %41)
  %42 = load i64, ptr %i, align 4
  %43 = add i64 %42, 1
  store i64 %43, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %prev_func = alloca ptr, align 8
  %memberidx16 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 2
  %44 = load ptr, ptr %memberidx16, align 8
  store ptr %44, ptr %prev_func, align 8
  store ptr %10, ptr %memberidx16, align 8
  %45 = load ptr, ptr %func_builder, align 8
  %memberidx18 = getelementptr inbounds %Function, ptr %1, i32 0, i32 3
  %46 = load ptr, ptr %memberidx18, align 8
  call void @CodeGen_codegen_block(ptr %0, ptr %45, ptr %46)
  %47 = load ptr, ptr %func_builder, align 8
  call void @LLVMDisposeBuilder(ptr %47)
  %48 = load ptr, ptr %prev_func, align 8
  store ptr %48, ptr %memberidx16, align 8
  br label %common.ret
}

define i64 @Array_LLVMTypeRef__find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_LLVMTypeRef__resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_LLVMTypeRef____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_LLVMTypeRef__append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_LLVMTypeRef__swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_LLVMTypeRef____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_LLVMTypeRef____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_LLVMTypeRef____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_LLVMTypeRef____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_LLVMTypeRef__constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_LLVMTypeRef_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define void @CodeGen_declare_class_props(ptr %0, ptr %1, ptr %2, ptr %3) {
for.entry:
  %memberidx = getelementptr inbounds %Class, ptr %2, i32 0, i32 6
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr %6(ptr %4)
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %8, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %8, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_LLVMValueRef_, ptr %8, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 1
  %memberidx5 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx5, align 4
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %10, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx6 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %10, i32 0, i32 1
  %memberidx7 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %10, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %32, %for.incr ]
  %memberidx8 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %7, i32 0, i32 2
  %11 = load i64, ptr %memberidx8, align 4
  %12 = icmp slt i64 %i.0, %11
  br i1 %12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %prop_id = alloca ptr, align 8
  %13 = load ptr, ptr %7, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 5
  %14 = load ptr, ptr %memberidx9, align 8
  %15 = call ptr %14(ptr %7, i64 %i.0)
  %memberidx10 = getelementptr inbounds %Bucket_string_PropId_, ptr %15, i32 0, i32 2
  %16 = load ptr, ptr %memberidx10, align 8
  store ptr %16, ptr %prop_id, align 8
  %prop_owner = alloca ptr, align 8
  store ptr %2, ptr %prop_owner, align 8
  %prop_id_key = alloca ptr, align 8
  %17 = load ptr, ptr %prop_id, align 8
  %18 = call ptr @create_prop_key(ptr %17)
  store ptr %18, ptr %prop_id_key, align 8
  %prop_type = alloca ptr, align 8
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %19 = load ptr, ptr %memberidx11, align 8
  %20 = load ptr, ptr %prop_id, align 8
  %21 = call ptr @get_class_prop_type(ptr %19, ptr %20)
  store ptr %21, ptr %prop_type, align 8
  %prop_name = alloca ptr, align 8
  %22 = load ptr, ptr %7, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %22, i32 0, i32 5
  %23 = load ptr, ptr %memberidx12, align 8
  %24 = call ptr %23(ptr %7, i64 %i.0)
  %memberidx13 = getelementptr inbounds %Bucket_string_PropId_, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx13, align 8
  store ptr %25, ptr %prop_name, align 8
  %prop_index = alloca i64, align 8
  %26 = load ptr, ptr %memberidx11, align 8
  %27 = load ptr, ptr %prop_id, align 8
  %28 = call i64 @get_vtable_index(ptr %26, ptr %27)
  store i64 %28, ptr %prop_index, align 4
  %29 = load ptr, ptr %prop_id, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp eq i64 %30, 1
  br i1 %31, label %if.entry, label %else

for.incr:                                         ; preds = %if.entry, %ifend75, %if.entry50
  %32 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %33 = load i64, ptr %memberidx5, align 4
  %34 = icmp sgt i64 %33, 0
  br i1 %34, label %if.entry79, label %for.entry100

if.entry:                                         ; preds = %for.body
  %field_type = alloca ptr, align 8
  %35 = load ptr, ptr %prop_type, align 8
  %36 = call ptr @CodeGen_codegen_type(ptr %0, ptr %35, i1 true)
  store ptr %36, ptr %field_type, align 8
  %memberidx16 = getelementptr inbounds %CGClassType, ptr %1, i32 0, i32 2
  %37 = load ptr, ptr %memberidx16, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %prop_id_key, align 8
  %41 = load i64, ptr %prop_index, align 4
  call void %39(ptr %37, ptr %40, i64 %41)
  %42 = load i64, ptr %prop_index, align 4
  call void @resize_type_array(ptr %10, i64 %42)
  %43 = load ptr, ptr %10, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %43, i32 0, i32 3
  %44 = load ptr, ptr %memberidx18, align 8
  %45 = load i64, ptr %prop_index, align 4
  %46 = load ptr, ptr %field_type, align 8
  call void %44(ptr %10, i64 %45, ptr %46)
  br label %for.incr

else:                                             ; preds = %for.body
  %method_type = alloca ptr, align 8
  %47 = load ptr, ptr %prop_type, align 8
  store ptr %47, ptr %method_type, align 8
  %llvm_method_val = alloca ptr, align 8
  store ptr null, ptr %llvm_method_val, align 8
  %llvm_method_type = alloca ptr, align 8
  store ptr null, ptr %llvm_method_type, align 8
  %48 = load ptr, ptr %prop_id, align 8
  %memberidx19 = getelementptr inbounds %PropId, ptr %48, i32 0, i32 1
  %49 = load ptr, ptr %memberidx19, align 8
  %50 = load ptr, ptr %2, align 8
  %51 = icmp eq ptr %49, %50
  br i1 %51, label %if.entry21, label %else22

if.entry21:                                       ; preds = %else
  %arg_types = alloca ptr, align 8
  %52 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %52, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx24 = getelementptr inbounds %Array_Type_, ptr %52, i32 0, i32 1
  %memberidx25 = getelementptr inbounds %Array_Type_, ptr %52, i32 0, i32 2
  store i64 0, ptr %memberidx25, align 4
  store ptr %52, ptr %arg_types, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i32 0, i32 2
  %54 = load ptr, ptr %memberidx26, align 8
  %55 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  %56 = load ptr, ptr %2, align 8
  call void @ObjectType_constructor(ptr %55, ptr %56)
  call void %54(ptr %52, ptr %55)
  %j = alloca i64, align 8
  store i64 0, ptr %j, align 4
  br label %for.cond29

else22:                                           ; preds = %else
  %57 = load ptr, ptr %method_type, align 8
  %58 = call ptr @CodeGen_codegen_type(ptr %0, ptr %57, i1 false)
  store ptr %58, ptr %llvm_method_type, align 8
  %59 = load ptr, ptr %memberidx11, align 8
  %60 = load ptr, ptr %prop_id, align 8
  %61 = call ptr @get_class_from_prop_id(ptr %59, ptr %60)
  store ptr %61, ptr %prop_owner, align 8
  %memberidx56 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %62 = load ptr, ptr %memberidx56, align 8
  %memberidx57 = getelementptr inbounds %Class, ptr %61, i32 0, i32 1
  %63 = load ptr, ptr %memberidx57, align 8
  %64 = load ptr, ptr %63, align 8
  %memberidx58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i32 0, i32 11
  %65 = load ptr, ptr %memberidx58, align 8
  %66 = call ptr %65(ptr %63)
  %67 = load ptr, ptr %prop_name, align 8
  %68 = load ptr, ptr %67, align 8
  %memberidx59 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i32 0, i32 11
  %69 = load ptr, ptr %memberidx59, align 8
  %70 = call ptr %69(ptr %67)
  %71 = alloca ptr, align 8
  %72 = call i64 (ptr, ptr, ...) @asprintf(ptr %71, ptr @200, ptr %66, ptr %70)
  %73 = load ptr, ptr %71, align 8
  %74 = call ptr @string_from_bytes(ptr %73, i64 %72)
  %75 = load ptr, ptr %74, align 8
  %memberidx60 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %75, i32 0, i32 11
  %76 = load ptr, ptr %memberidx60, align 8
  %77 = call ptr %76(ptr %74)
  %78 = call ptr @LLVMGetNamedFunction(ptr %62, ptr %77)
  store ptr %78, ptr %llvm_method_val, align 8
  %79 = icmp eq ptr %78, null
  br i1 %79, label %if.entry61, label %ifend23

ifend23:                                          ; preds = %if.entry61, %else22, %ifend45
  %memberidx67 = getelementptr inbounds %CGClassType, ptr %1, i32 0, i32 1
  %80 = load ptr, ptr %memberidx67, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %prop_id_key, align 8
  %84 = load i64, ptr %prop_index, align 4
  call void %82(ptr %80, ptr %83, i64 %84)
  %85 = load ptr, ptr %prop_owner, align 8
  %memberidx69 = getelementptr inbounds %Class, ptr %85, i32 0, i32 5
  %86 = load ptr, ptr %memberidx69, align 8
  %87 = load ptr, ptr %86, align 8
  %memberidx70 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %87, i32 0, i32 5
  %88 = load ptr, ptr %memberidx70, align 8
  %89 = load ptr, ptr %prop_id, align 8
  %memberidx71 = getelementptr inbounds %PropId, ptr %89, i32 0, i32 2
  %90 = load i64, ptr %memberidx71, align 4
  %91 = call ptr %88(ptr %86, i64 %90)
  %memberidx72 = getelementptr inbounds %ClassMethod, ptr %91, i32 0, i32 7
  %92 = load i1, ptr %memberidx72, align 1
  %93 = xor i1 %92, true
  br i1 %93, label %if.entry73, label %ifend75

for.cond29:                                       ; preds = %for.body30, %if.entry21
  %94 = load i64, ptr %j, align 4
  %95 = load ptr, ptr %method_type, align 8
  %memberidx33 = getelementptr inbounds %FunctionType, ptr %95, i32 0, i32 1
  %96 = load ptr, ptr %memberidx33, align 8
  %memberidx34 = getelementptr inbounds %Array_Type_, ptr %96, i32 0, i32 2
  %97 = load i64, ptr %memberidx34, align 4
  %98 = icmp slt i64 %94, %97
  br i1 %98, label %for.body30, label %for.end32

for.body30:                                       ; preds = %for.cond29
  %99 = load ptr, ptr %arg_types, align 8
  %100 = load ptr, ptr %99, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %100, i32 0, i32 2
  %101 = load ptr, ptr %memberidx35, align 8
  %102 = load ptr, ptr %96, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %102, i32 0, i32 5
  %103 = load ptr, ptr %memberidx37, align 8
  %104 = call ptr %103(ptr %96, i64 %94)
  call void %101(ptr %99, ptr %104)
  %105 = load i64, ptr %j, align 4
  %106 = add i64 %105, 1
  store i64 %106, ptr %j, align 4
  br label %for.cond29

for.end32:                                        ; preds = %for.cond29
  %107 = load ptr, ptr %arg_types, align 8
  store ptr %107, ptr %memberidx33, align 8
  %108 = load ptr, ptr %method_type, align 8
  %109 = call ptr @CodeGen_codegen_type(ptr %0, ptr %108, i1 false)
  store ptr %109, ptr %llvm_method_type, align 8
  %memberidx39 = getelementptr inbounds %Class, ptr %2, i32 0, i32 5
  %110 = load ptr, ptr %memberidx39, align 8
  %111 = load ptr, ptr %110, align 8
  %memberidx40 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %111, i32 0, i32 5
  %112 = load ptr, ptr %memberidx40, align 8
  %113 = load ptr, ptr %prop_id, align 8
  %memberidx41 = getelementptr inbounds %PropId, ptr %113, i32 0, i32 2
  %114 = load i64, ptr %memberidx41, align 4
  %115 = call ptr %112(ptr %110, i64 %114)
  %memberidx42 = getelementptr inbounds %ClassMethod, ptr %115, i32 0, i32 7
  %116 = load i1, ptr %memberidx42, align 1
  %117 = xor i1 %116, true
  br i1 %117, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %for.end32
  %memberidx46 = getelementptr inbounds %Class, ptr %2, i32 0, i32 1
  %118 = load ptr, ptr %memberidx46, align 8
  %119 = load ptr, ptr %118, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %119, i32 0, i32 11
  %120 = load ptr, ptr %memberidx47, align 8
  %121 = call ptr %120(ptr %118)
  %122 = load ptr, ptr %prop_name, align 8
  %123 = load ptr, ptr %122, align 8
  %memberidx48 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %123, i32 0, i32 11
  %124 = load ptr, ptr %memberidx48, align 8
  %125 = call ptr %124(ptr %122)
  %126 = alloca ptr, align 8
  %127 = call i64 (ptr, ptr, ...) @asprintf(ptr %126, ptr @200, ptr %121, ptr %125)
  %128 = load ptr, ptr %126, align 8
  %129 = call ptr @string_from_bytes(ptr %128, i64 %127)
  %130 = load ptr, ptr %llvm_method_type, align 8
  %131 = call ptr @CodeGen_declare_method(ptr %0, ptr %129, ptr %130)
  store ptr %131, ptr %llvm_method_val, align 8
  br label %ifend45

ifend45:                                          ; preds = %for.end32, %if.entry43
  %132 = load ptr, ptr %memberidx11, align 8
  %133 = load ptr, ptr %prop_id, align 8
  %134 = call i64 @get_class_prop_visibility(ptr %132, ptr %133)
  %135 = icmp eq i64 %134, 1
  br i1 %135, label %if.entry50, label %ifend23

if.entry50:                                       ; preds = %ifend45
  %memberidx53 = getelementptr inbounds %CGClassType, ptr %1, i32 0, i32 3
  %136 = load ptr, ptr %memberidx53, align 8
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %prop_id_key, align 8
  %140 = load ptr, ptr %llvm_method_val, align 8
  call void %138(ptr %136, ptr %139, ptr %140)
  br label %for.incr

if.entry61:                                       ; preds = %else22
  %141 = load ptr, ptr %prop_owner, align 8
  %memberidx64 = getelementptr inbounds %Class, ptr %141, i32 0, i32 1
  %142 = load ptr, ptr %memberidx64, align 8
  %143 = load ptr, ptr %142, align 8
  %memberidx65 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %143, i32 0, i32 11
  %144 = load ptr, ptr %memberidx65, align 8
  %145 = call ptr %144(ptr %142)
  %146 = load ptr, ptr %prop_name, align 8
  %147 = load ptr, ptr %146, align 8
  %memberidx66 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %147, i32 0, i32 11
  %148 = load ptr, ptr %memberidx66, align 8
  %149 = call ptr %148(ptr %146)
  %150 = alloca ptr, align 8
  %151 = call i64 (ptr, ptr, ...) @asprintf(ptr %150, ptr @400, ptr %145, ptr %149)
  %152 = load ptr, ptr %150, align 8
  %153 = call ptr @string_from_bytes(ptr %152, i64 %151)
  call void @panic(ptr %153)
  br label %ifend23

if.entry73:                                       ; preds = %ifend23
  %154 = load i64, ptr %prop_index, align 4
  call void @resize_value_array(ptr %8, i64 %154)
  %155 = load ptr, ptr %8, align 8
  %memberidx76 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %155, i32 0, i32 3
  %156 = load ptr, ptr %memberidx76, align 8
  %157 = load i64, ptr %prop_index, align 4
  %158 = load ptr, ptr %llvm_method_val, align 8
  call void %156(ptr %8, i64 %157, ptr %158)
  br label %ifend75

ifend75:                                          ; preds = %ifend23, %if.entry73
  %159 = load i64, ptr %prop_index, align 4
  call void @resize_type_array(ptr %9, i64 %159)
  %160 = load ptr, ptr %9, align 8
  %memberidx77 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %160, i32 0, i32 3
  %161 = load ptr, ptr %memberidx77, align 8
  %162 = load i64, ptr %prop_index, align 4
  %163 = load ptr, ptr %llvm_method_type, align 8
  %164 = call ptr @LLVMPointerType(ptr %163, i64 0)
  call void %161(ptr %9, i64 %162, ptr %164)
  br label %for.incr

if.entry79:                                       ; preds = %for.end
  %vtable_struct_ty = alloca ptr, align 8
  %memberidx82 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %165 = load ptr, ptr %memberidx82, align 8
  %166 = load ptr, ptr %memberidx4, align 8
  %167 = call ptr @LLVMStructTypeInContext(ptr %165, ptr %166, i64 %33, i1 true)
  store ptr %167, ptr %vtable_struct_ty, align 8
  %memberidx85 = getelementptr inbounds %Class, ptr %2, i32 0, i32 10
  %168 = load i1, ptr %memberidx85, align 1
  %169 = xor i1 %168, true
  br i1 %169, label %if.entry86, label %ifend88

if.entry86:                                       ; preds = %if.entry79
  %memberidx89 = getelementptr inbounds %CGClassType, ptr %1, i32 0, i32 4
  %memberidx90 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %170 = load ptr, ptr %memberidx90, align 8
  %memberidx91 = getelementptr inbounds %Class, ptr %2, i32 0, i32 1
  %171 = load ptr, ptr %memberidx91, align 8
  %172 = load ptr, ptr %171, align 8
  %memberidx92 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %172, i32 0, i32 11
  %173 = load ptr, ptr %memberidx92, align 8
  %174 = call ptr %173(ptr %171)
  %175 = alloca ptr, align 8
  %176 = call i64 (ptr, ptr, ...) @asprintf(ptr %175, ptr @401, ptr %174)
  %177 = load ptr, ptr %175, align 8
  %178 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %178, ptr %177, i64 %176)
  %179 = load ptr, ptr %178, align 8
  %memberidx93 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %179, i32 0, i32 11
  %180 = load ptr, ptr %memberidx93, align 8
  %181 = call ptr %180(ptr %178)
  %182 = call ptr @LLVMAddGlobal(ptr %170, ptr %167, ptr %181)
  store ptr %182, ptr %memberidx89, align 8
  %vtable_intializer = alloca ptr, align 8
  %183 = load ptr, ptr %memberidx82, align 8
  %184 = load ptr, ptr %memberidx2, align 8
  %185 = load i64, ptr %memberidx3, align 4
  %186 = call ptr @LLVMConstStructInContext(ptr %183, ptr %184, i64 %185, i1 true)
  store ptr %186, ptr %vtable_intializer, align 8
  %187 = load ptr, ptr %memberidx89, align 8
  call void @LLVMSetInitializer(ptr %187, ptr %186)
  br label %ifend88

ifend88:                                          ; preds = %if.entry79, %if.entry86
  %memberidx98 = getelementptr inbounds %CGClassType, ptr %1, i32 0, i32 5
  %188 = load ptr, ptr %vtable_struct_ty, align 8
  store ptr %188, ptr %memberidx98, align 8
  %189 = load ptr, ptr %3, align 8
  %memberidx99 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %189, i32 0, i32 2
  %190 = load ptr, ptr %memberidx99, align 8
  %191 = load ptr, ptr %vtable_struct_ty, align 8
  %192 = call ptr @LLVMPointerType(ptr %191, i64 0)
  call void %190(ptr %3, ptr %192)
  br label %for.entry100

for.entry100:                                     ; preds = %ifend88, %for.end
  br label %for.cond101

for.cond101:                                      ; preds = %for.body102, %for.entry100
  %i.1 = phi i64 [ 0, %for.entry100 ], [ %200, %for.body102 ]
  %193 = load i64, ptr %memberidx7, align 4
  %194 = icmp slt i64 %i.1, %193
  br i1 %194, label %for.body102, label %for.end104

for.body102:                                      ; preds = %for.cond101
  %195 = load ptr, ptr %3, align 8
  %memberidx106 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %195, i32 0, i32 2
  %196 = load ptr, ptr %memberidx106, align 8
  %197 = load ptr, ptr %10, align 8
  %memberidx107 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %197, i32 0, i32 5
  %198 = load ptr, ptr %memberidx107, align 8
  %199 = call ptr %198(ptr %10, i64 %i.1)
  call void %196(ptr %3, ptr %199)
  %200 = add i64 %i.1, 1
  br label %for.cond101

for.end104:                                       ; preds = %for.cond101
  ret void
}

define ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %1) {
  %3 = call ptr @CodeGen_get_var_from_varid(ptr %0, ptr %1)
  %4 = icmp ne ptr %3, null
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond42, %ifend21, %if.entry53, %if.entry34, %if.entry15, %if.entry
  %common.ret.op = phi ptr [ %3, %if.entry ], [ %28, %if.entry15 ], [ %46, %if.entry34 ], [ %62, %if.entry53 ], [ null, %ifend21 ], [ null, %for.cond42 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  br label %common.ret

ifend:                                            ; preds = %2
  %module = alloca ptr, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 1
  %9 = load i64, ptr %memberidx3, align 4
  %10 = call ptr %8(ptr %6, i64 %9)
  store ptr %10, ptr %module, align 8
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  %11 = load i64, ptr %1, align 4
  %12 = icmp eq i64 %11, 2
  br i1 %12, label %for.entry, label %ifend7

ifend7:                                           ; preds = %for.cond, %ifend
  %13 = load i64, ptr %1, align 4
  %14 = icmp eq i64 %13, 1
  br i1 %14, label %for.entry22, label %ifend21

for.entry:                                        ; preds = %ifend
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend17, %for.entry
  %15 = load i64, ptr %i, align 4
  %16 = load ptr, ptr %module, align 8
  %memberidx8 = getelementptr inbounds %Module, ptr %16, i32 0, i32 8
  %17 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_ConstDeclaration_, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx9, align 4
  %19 = icmp slt i64 %15, %18
  br i1 %19, label %for.body, label %ifend7

for.body:                                         ; preds = %for.cond
  %global_const = alloca ptr, align 8
  %20 = load ptr, ptr %17, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %20, i32 0, i32 5
  %21 = load ptr, ptr %memberidx11, align 8
  %22 = call ptr %21(ptr %17, i64 %15)
  store ptr %22, ptr %global_const, align 8
  %const_id = alloca ptr, align 8
  %memberidx12 = getelementptr inbounds %ConstDeclaration, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %memberidx12, align 8
  store ptr %23, ptr %const_id, align 8
  %memberidx13 = getelementptr inbounds %VarId, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx13, align 4
  %memberidx14 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 2
  %25 = load i64, ptr %memberidx14, align 4
  %26 = icmp eq i64 %24, %25
  br i1 %26, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %for.body
  %27 = load ptr, ptr %global_const, align 8
  call void @CodeGen_codegen_const_declaration(ptr %0, ptr null, ptr %27)
  %28 = call ptr @CodeGen_get_var_from_varid(ptr %0, ptr %1)
  br label %common.ret

ifend17:                                          ; preds = %for.body
  %29 = load i64, ptr %i, align 4
  %30 = add i64 %29, 1
  store i64 %30, ptr %i, align 4
  br label %for.cond

ifend21:                                          ; preds = %for.cond23, %ifend7
  %31 = load i64, ptr %1, align 4
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %for.entry41, label %common.ret

for.entry22:                                      ; preds = %ifend7
  store i64 0, ptr %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %ifend36, %for.entry22
  %33 = load i64, ptr %i, align 4
  %34 = load ptr, ptr %module, align 8
  %memberidx27 = getelementptr inbounds %Module, ptr %34, i32 0, i32 9
  %35 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Array_VarDeclaration_, ptr %35, i32 0, i32 2
  %36 = load i64, ptr %memberidx28, align 4
  %37 = icmp slt i64 %33, %36
  br i1 %37, label %for.body24, label %ifend21

for.body24:                                       ; preds = %for.cond23
  %global_var = alloca ptr, align 8
  %38 = load ptr, ptr %35, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %38, i32 0, i32 5
  %39 = load ptr, ptr %memberidx30, align 8
  %40 = call ptr %39(ptr %35, i64 %33)
  store ptr %40, ptr %global_var, align 8
  %var_id = alloca ptr, align 8
  %memberidx31 = getelementptr inbounds %VarDeclaration, ptr %40, i32 0, i32 2
  %41 = load ptr, ptr %memberidx31, align 8
  store ptr %41, ptr %var_id, align 8
  %memberidx32 = getelementptr inbounds %VarId, ptr %41, i32 0, i32 2
  %42 = load i64, ptr %memberidx32, align 4
  %memberidx33 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 2
  %43 = load i64, ptr %memberidx33, align 4
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %for.body24
  %45 = load ptr, ptr %global_var, align 8
  call void @CodeGen_codegen_var_declaration(ptr %0, ptr null, ptr %45)
  %46 = call ptr @CodeGen_get_var_from_varid(ptr %0, ptr %1)
  br label %common.ret

ifend36:                                          ; preds = %for.body24
  %47 = load i64, ptr %i, align 4
  %48 = add i64 %47, 1
  store i64 %48, ptr %i, align 4
  br label %for.cond23

for.entry41:                                      ; preds = %ifend21
  store i64 0, ptr %i, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %ifend55, %for.entry41
  %49 = load i64, ptr %i, align 4
  %50 = load ptr, ptr %module, align 8
  %memberidx46 = getelementptr inbounds %Module, ptr %50, i32 0, i32 5
  %51 = load ptr, ptr %memberidx46, align 8
  %memberidx47 = getelementptr inbounds %Array_Function_, ptr %51, i32 0, i32 2
  %52 = load i64, ptr %memberidx47, align 4
  %53 = icmp slt i64 %49, %52
  br i1 %53, label %for.body43, label %common.ret

for.body43:                                       ; preds = %for.cond42
  %function = alloca ptr, align 8
  %54 = load ptr, ptr %51, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i32 0, i32 5
  %55 = load ptr, ptr %memberidx49, align 8
  %56 = call ptr %55(ptr %51, i64 %49)
  store ptr %56, ptr %function, align 8
  %fnc_id = alloca ptr, align 8
  %57 = load ptr, ptr %56, align 8
  store ptr %57, ptr %fnc_id, align 8
  %memberidx51 = getelementptr inbounds %VarId, ptr %57, i32 0, i32 2
  %58 = load i64, ptr %memberidx51, align 4
  %memberidx52 = getelementptr inbounds %VarId, ptr %1, i32 0, i32 2
  %59 = load i64, ptr %memberidx52, align 4
  %60 = icmp eq i64 %58, %59
  br i1 %60, label %if.entry53, label %ifend55

if.entry53:                                       ; preds = %for.body43
  %61 = load ptr, ptr %function, align 8
  call void @CodeGen_codegen_function(ptr %0, ptr %61)
  %62 = call ptr @CodeGen_get_var_from_varid(ptr %0, ptr %1)
  br label %common.ret

ifend55:                                          ; preds = %for.body43
  %63 = load i64, ptr %i, align 4
  %64 = add i64 %63, 1
  store i64 %64, ptr %i, align 4
  br label %for.cond42
}

define void @CodeGen_codegen_while_stmt(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @LLVMAppendBasicBlockInContext(ptr %4, ptr %5, ptr @397)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @LLVMAppendBasicBlockInContext(ptr %7, ptr %8, ptr @398)
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 7
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 8
  %11 = load ptr, ptr %memberidx5, align 8
  store ptr %9, ptr %memberidx4, align 8
  store ptr %6, ptr %memberidx5, align 8
  %memberidx8 = getelementptr inbounds %WhileStatement, ptr %2, i32 0, i32 1
  %12 = load ptr, ptr %memberidx8, align 8
  %13 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %12)
  %14 = call ptr @LLVMBuildCondBr(ptr %1, ptr %13, ptr %6, ptr %9)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %6)
  %memberidx9 = getelementptr inbounds %WhileStatement, ptr %2, i32 0, i32 2
  %15 = load ptr, ptr %memberidx9, align 8
  call void @CodeGen_codegen_block(ptr %0, ptr %1, ptr %15)
  %16 = load ptr, ptr %memberidx9, align 8
  %17 = call i1 @is_terminated(ptr %16)
  %18 = xor i1 %17, true
  br i1 %18, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %19 = load ptr, ptr %memberidx8, align 8
  %20 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %19)
  %21 = call ptr @LLVMBuildCondBr(ptr %1, ptr %20, ptr %6, ptr %9)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %9)
  store ptr %10, ptr %memberidx4, align 8
  store ptr %11, ptr %memberidx5, align 8
  ret void
}

define void @CodeGen_declare_enum(ptr %0, ptr %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CGEnumType, ptr null, i32 1) to i32))
  call void @CGEnumType_constructor(ptr %3)
  %memberidx = getelementptr inbounds %Enum, ptr %1, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %5, 0
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %7 = load ptr, ptr %4, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx4, align 8
  %9 = call ptr %8(ptr %4, i64 0)
  %memberidx5 = getelementptr inbounds %EnumField, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx6, align 8
  %12 = call ptr @CodeGen_codegen_type(ptr %0, ptr %11, i1 true)
  store ptr %12, ptr %3, align 8
  br label %for.entry

else:                                             ; preds = %2
  %memberidx8 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %13 = load ptr, ptr %memberidx8, align 8
  %14 = call ptr @LLVMIntTypeInContext(ptr %13, i64 64)
  store ptr %14, ptr %3, align 8
  br label %for.entry

for.entry:                                        ; preds = %if.entry, %else
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %15 = load i64, ptr %i, align 4
  %16 = load ptr, ptr %memberidx, align 8
  %memberidx10 = getelementptr inbounds %Array_EnumField_, ptr %16, i32 0, i32 2
  %17 = load i64, ptr %memberidx10, align 4
  %18 = icmp slt i64 %15, %17
  br i1 %18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %enum_field = alloca ptr, align 8
  %19 = load ptr, ptr %16, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx12, align 8
  %21 = call ptr %20(ptr %16, i64 %15)
  store ptr %21, ptr %enum_field, align 8
  %prop_id = alloca ptr, align 8
  %22 = load ptr, ptr %21, align 8
  store ptr %22, ptr %prop_id, align 8
  %memberidx14 = getelementptr inbounds %CGEnumType, ptr %3, i32 0, i32 1
  %23 = load ptr, ptr %memberidx14, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr @create_prop_key(ptr %22)
  %27 = load ptr, ptr %enum_field, align 8
  %memberidx16 = getelementptr inbounds %EnumField, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %memberidx16, align 8
  %29 = call ptr @CodeGen_codegen_expression(ptr %0, ptr null, ptr %28)
  call void %25(ptr %23, ptr %26, ptr %29)
  %30 = load i64, ptr %i, align 4
  %31 = add i64 %30, 1
  store i64 %31, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load ptr, ptr %1, align 8
  call void @CodeGen_add_enum(ptr %0, ptr %32, ptr %3)
  ret void
}

define ptr @CodeGen_codegen_assignment(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %2, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @CodeGen_get_expr_mem(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %2, i32 0, i32 6
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %5, ptr %6)
  ret ptr %7
}

define ptr @CodeGen_construct_class(ptr %0, ptr %1) {
  call void @CodeGen_declare_class(ptr %0, ptr %1)
  call void @CodeGen_codegen_class(ptr %0, ptr %1)
  %3 = load ptr, ptr %1, align 8
  %4 = call ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %3)
  ret ptr %4
}

define void @CodeGen_build_constructor_call(ptr %0, ptr %1, ptr %2, ptr %3) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @get_class_from_type(ptr %5, ptr %2)
  %memberidx1 = getelementptr inbounds %ObjectType, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %0, ptr %7)
  %memberidx2 = getelementptr inbounds %CGClassType, ptr %8, i32 0, i32 6
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = icmp ne ptr %9, null
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %4
  %11 = call ptr @LLVM_GetFunctionType(ptr %9)
  %memberidx3 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 1
  %12 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 2
  %13 = load i64, ptr %memberidx4, align 4
  %14 = call ptr @LLVMBuildCall2(ptr %1, ptr %11, ptr %9, ptr %12, i64 %13, ptr @38)
  br label %ifend

else:                                             ; preds = %4
  %15 = call ptr @string_from_bytes(ptr @399, i64 47)
  call void @panic(ptr %15)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret void
}

define ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
for.entry:
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @LLVMInt8TypeInContext(ptr %5)
  %7 = call ptr @LLVMPointerType(ptr %6, i64 0)
  %8 = load ptr, ptr %memberidx, align 8
  %9 = call ptr @LLVMIntTypeInContext(ptr %8, i64 64)
  %10 = call ptr @LLVMBuildAlloca(ptr %1, ptr %7, ptr @38)
  %11 = call ptr @CodeGen_createGlobalLLVMString(ptr %0, ptr %1, ptr %2)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %12, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx2, align 8
  store ptr %10, ptr %13, align 8
  %14 = getelementptr inbounds ptr, ptr %13, i64 1
  store ptr %11, ptr %14, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMValueRef_, ptr %12, i32 0, i32 2
  store i64 2, ptr %memberidx3, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %22, %for.body ]
  %memberidx4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = icmp slt i64 %i.0, %15
  br i1 %16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load ptr, ptr %12, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx6, align 8
  %21 = call ptr %20(ptr %3, i64 %i.0)
  call void %18(ptr %12, ptr %21)
  %22 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %asprintf = alloca ptr, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %23 = load ptr, ptr %memberidx7, align 8
  %24 = call ptr @string_from_bytes(ptr @356, i64 8)
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %25, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx8 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %25, i32 0, i32 1
  %26 = load ptr, ptr %memberidx8, align 8
  store ptr %7, ptr %26, align 8
  %27 = getelementptr inbounds ptr, ptr %26, i64 1
  store ptr %7, ptr %27, align 8
  %memberidx9 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %25, i32 0, i32 2
  store i64 2, ptr %memberidx9, align 4
  %28 = call ptr @get_intrinsic(ptr %23, ptr %24, ptr %25, ptr %9, i1 true)
  store ptr %28, ptr %asprintf, align 8
  %str_len = alloca ptr, align 8
  %memberidx10 = getelementptr inbounds %IntrinsicResult, ptr %28, i32 0, i32 1
  %29 = load ptr, ptr %memberidx10, align 8
  %30 = load ptr, ptr %28, align 8
  %31 = load ptr, ptr %memberidx2, align 8
  %32 = load i64, ptr %memberidx3, align 4
  %33 = call ptr @LLVMBuildCall2(ptr %1, ptr %29, ptr %30, ptr %31, i64 %32, ptr @38)
  store ptr %33, ptr %str_len, align 8
  %34 = icmp ne ptr %4, null
  br i1 %34, label %if.entry, label %ifend

if.entry:                                         ; preds = %for.end
  store ptr %33, ptr %4, align 8
  br label %ifend

ifend:                                            ; preds = %for.end, %if.entry
  %35 = call ptr @LLVMBuildLoad2(ptr %1, ptr %7, ptr %10, ptr @38)
  ret ptr %35
}

define ptr @CodeGen_codegen_string(ptr %0, ptr %1, ptr %2) {
for.entry:
  %memberidx = getelementptr inbounds %StringExpression, ptr %2, i32 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringBuilder, ptr null, i32 1) to i32))
  %memberidx3 = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %6 = load i64, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %StringExpression, ptr %2, i32 0, i32 5
  %7 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_int_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx5, align 4
  %9 = mul i64 %8, 2
  %10 = add i64 %6, %9
  call void @StringBuilder_constructor(ptr %5, i64 %10)
  %11 = load ptr, ptr %3, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 9
  %12 = load ptr, ptr %memberidx6, align 8
  %13 = call ptr %12(ptr %3)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %chars.0 = phi ptr [ %13, %for.entry ], [ %33, %for.body ]
  %curr_ind.0 = phi i64 [ 0, %for.entry ], [ %25, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %40, %for.body ]
  %memberidx7 = getelementptr inbounds %StringExpression, ptr %2, i32 0, i32 6
  %14 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_Expression_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx8, align 4
  %16 = icmp slt i64 %i.0, %15
  br i1 %16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %templ_arg = alloca ptr, align 8
  %17 = load ptr, ptr %14, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i32 0, i32 5
  %18 = load ptr, ptr %memberidx10, align 8
  %19 = call ptr %18(ptr %14, i64 %i.0)
  store ptr %19, ptr %templ_arg, align 8
  %templ_arg_ty = alloca ptr, align 8
  %memberidx11 = getelementptr inbounds %Expression, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %memberidx11, align 8
  store ptr %20, ptr %templ_arg_ty, align 8
  %fmt = alloca ptr, align 8
  %21 = call ptr @get_format_from_type(ptr %20)
  store ptr %21, ptr %fmt, align 8
  %22 = load ptr, ptr %memberidx4, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx13, align 8
  %25 = call i64 %24(ptr %22, i64 %i.0)
  %incr = alloca i64, align 8
  %26 = sub i64 %25, %curr_ind.0
  store i64 %26, ptr %incr, align 4
  %27 = load ptr, ptr %5, align 8
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %5, ptr %chars.0, i64 %26)
  %29 = load ptr, ptr %5, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx15, align 8
  %31 = load ptr, ptr %fmt, align 8
  call void %30(ptr %5, ptr %31)
  %32 = load i64, ptr %incr, align 4
  %33 = getelementptr inbounds i8, ptr %chars.0, i64 %32
  %templ_arg_exp = alloca ptr, align 8
  %34 = load ptr, ptr %templ_arg, align 8
  %35 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %34)
  store ptr %35, ptr %templ_arg_exp, align 8
  %36 = load ptr, ptr %4, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i32 0, i32 2
  %37 = load ptr, ptr %memberidx16, align 8
  %38 = load ptr, ptr %templ_arg_ty, align 8
  %39 = call ptr @CodeGen_get_string_val(ptr %0, ptr %1, ptr %35, ptr %38, i64 0)
  call void %37(ptr %4, ptr %39)
  %40 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %41 = load ptr, ptr %5, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = load i64, ptr %memberidx3, align 4
  %44 = sub i64 %43, %curr_ind.0
  call void %42(ptr %5, ptr %chars.0, i64 %44)
  %45 = load ptr, ptr %5, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %45, i32 0, i32 3
  %46 = load ptr, ptr %memberidx19, align 8
  %47 = call ptr %46(ptr %5)
  %str_len = alloca ptr, align 8
  %memberidx20 = getelementptr inbounds %string, ptr %47, i32 0, i32 2
  %48 = load i64, ptr %memberidx20, align 4
  %49 = call ptr @CodeGen_createLLVMInt(ptr %0, i64 %48)
  store ptr %49, ptr %str_len, align 8
  %str = alloca ptr, align 8
  %50 = load i64, ptr %memberidx2, align 4
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %true_block, label %false_block

true_block:                                       ; preds = %for.end
  %52 = call ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr %47, ptr %4, ptr %str_len)
  br label %end

false_block:                                      ; preds = %for.end
  %53 = call ptr @CodeGen_createGlobalLLVMString(ptr %0, ptr %1, ptr %47)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %52, %true_block ], [ %53, %false_block ]
  store ptr %ternary, ptr %str, align 8
  %str_ty = alloca ptr, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %54 = load ptr, ptr %memberidx22, align 8
  %55 = call ptr @CodeGen_codegen_type(ptr %0, ptr %54, i1 false)
  store ptr %55, ptr %str_ty, align 8
  %56 = load ptr, ptr %memberidx22, align 8
  %57 = call i1 @is_object(ptr %56)
  br i1 %57, label %if.entry, label %ifend

if.entry:                                         ; preds = %end
  %58 = load ptr, ptr %str, align 8
  %59 = call i1 @LLVMIsGlobalConstant(ptr %58)
  br i1 %59, label %if.entry24, label %ifend26

common.ret:                                       ; preds = %ifend30, %ifend26, %ifend
  %common.ret.op = phi ptr [ %60, %ifend ], [ %74, %ifend26 ], [ %88, %ifend30 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %end
  %60 = load ptr, ptr %str, align 8
  br label %common.ret

if.entry24:                                       ; preds = %if.entry
  %func = alloca ptr, align 8
  %memberidx27 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %61 = load ptr, ptr %memberidx27, align 8
  %62 = call ptr @LLVMGetNamedFunction(ptr %61, ptr @368)
  store ptr %62, ptr %func, align 8
  %63 = icmp eq ptr %62, null
  br i1 %63, label %if.entry28, label %ifend30

ifend26:                                          ; preds = %if.entry
  %self = alloca ptr, align 8
  %64 = load ptr, ptr %str_ty, align 8
  %65 = call ptr @LLVMBuildMalloc(ptr %1, ptr %64, ptr @38)
  store ptr %65, ptr %self, align 8
  %66 = load ptr, ptr %memberidx22, align 8
  %67 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %67, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 3))
  %memberidx35 = getelementptr inbounds %Array_LLVMValueRef_, ptr %67, i32 0, i32 1
  %68 = load ptr, ptr %memberidx35, align 8
  %69 = load ptr, ptr %self, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr inbounds ptr, ptr %68, i64 1
  %71 = load ptr, ptr %str, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr inbounds ptr, ptr %70, i64 1
  %73 = load ptr, ptr %str_len, align 8
  store ptr %73, ptr %72, align 8
  %memberidx36 = getelementptr inbounds %Array_LLVMValueRef_, ptr %67, i32 0, i32 2
  store i64 3, ptr %memberidx36, align 4
  call void @CodeGen_build_constructor_call(ptr %0, ptr %1, ptr %66, ptr %67)
  %74 = load ptr, ptr %self, align 8
  br label %common.ret

if.entry28:                                       ; preds = %if.entry24
  %75 = call ptr @string_from_bytes(ptr @369, i64 54)
  call void @panic(ptr %75)
  br label %ifend30

ifend30:                                          ; preds = %if.entry24, %if.entry28
  %args = alloca [2 x ptr], align 8
  %76 = load ptr, ptr %str, align 8
  store ptr %76, ptr %args, align 8
  %77 = getelementptr inbounds ptr, ptr %args, i64 1
  %78 = load ptr, ptr %str_len, align 8
  store ptr %78, ptr %77, align 8
  %arg_types = alloca [2 x ptr], align 8
  %79 = load ptr, ptr %str, align 8
  %80 = call ptr @LLVMTypeOf(ptr %79)
  store ptr %80, ptr %arg_types, align 8
  %81 = getelementptr inbounds ptr, ptr %arg_types, i64 1
  %82 = load ptr, ptr %str_len, align 8
  %83 = call ptr @LLVMTypeOf(ptr %82)
  store ptr %83, ptr %81, align 8
  %fnc_ty = alloca ptr, align 8
  %84 = load ptr, ptr %str_ty, align 8
  %85 = call ptr @LLVMPointerType(ptr %84, i64 0)
  %86 = call ptr @LLVMFunctionType(ptr %85, ptr %arg_types, i64 2, i1 false)
  store ptr %86, ptr %fnc_ty, align 8
  %87 = load ptr, ptr %func, align 8
  %88 = call ptr @LLVMBuildCall2(ptr %1, ptr %86, ptr %87, ptr %args, i64 2, ptr @38)
  br label %common.ret
}

define ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Expression, ptr %2, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 4
  br i1 %5, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend56, %if.entry58, %if.entry54, %if.entry50, %if.entry46, %if.entry42, %if.entry38, %if.entry34, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %6, %if.entry ], [ %8, %if.entry2 ], [ %10, %if.entry6 ], [ %12, %if.entry10 ], [ %14, %if.entry14 ], [ %16, %if.entry18 ], [ %18, %if.entry22 ], [ %20, %if.entry26 ], [ %22, %if.entry30 ], [ %24, %if.entry34 ], [ %26, %if.entry38 ], [ %28, %if.entry42 ], [ %30, %if.entry46 ], [ %32, %if.entry50 ], [ %34, %if.entry54 ], [ %36, %if.entry58 ], [ null, %ifend56 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %6 = call ptr @CodeGen_codegen_bool(ptr %0, ptr %2)
  br label %common.ret

ifend:                                            ; preds = %3
  %7 = icmp eq i64 %4, 0
  br i1 %7, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %8 = call ptr @CodeGen_codegen_int(ptr %0, ptr %2)
  br label %common.ret

ifend4:                                           ; preds = %ifend
  %9 = icmp eq i64 %4, 1
  br i1 %9, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %10 = call ptr @CodeGen_codegen_float(ptr %0, ptr %2)
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  %11 = icmp eq i64 %4, 5
  br i1 %11, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %12 = call ptr @CodeGen_codegen_null(ptr %0, ptr %2)
  br label %common.ret

ifend12:                                          ; preds = %ifend8
  %13 = icmp eq i64 %4, 2
  br i1 %13, label %if.entry14, label %ifend16

if.entry14:                                       ; preds = %ifend12
  %14 = call ptr @CodeGen_codegen_string(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend16:                                          ; preds = %ifend12
  %15 = icmp eq i64 %4, 7
  br i1 %15, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend16
  %16 = call ptr @CodeGen_codegen_var_access_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend20:                                          ; preds = %ifend16
  %17 = icmp eq i64 %4, 8
  br i1 %17, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend20
  %18 = call ptr @CodeGen_codegen_bin_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend24:                                          ; preds = %ifend20
  %19 = icmp eq i64 %4, 9
  br i1 %19, label %if.entry26, label %ifend28

if.entry26:                                       ; preds = %ifend24
  %20 = call ptr @CodeGen_codegen_unary_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend28:                                          ; preds = %ifend24
  %21 = icmp eq i64 %4, 14
  br i1 %21, label %if.entry30, label %ifend32

if.entry30:                                       ; preds = %ifend28
  %22 = call ptr @CodeGen_codegen_call_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend32:                                          ; preds = %ifend28
  %23 = icmp eq i64 %4, 13
  br i1 %23, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend32
  %24 = call ptr @CodeGen_codegen_index_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend36:                                          ; preds = %ifend32
  %25 = icmp eq i64 %4, 12
  br i1 %25, label %if.entry38, label %ifend40

if.entry38:                                       ; preds = %ifend36
  %26 = call ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr %2, ptr null)
  br label %common.ret

ifend40:                                          ; preds = %ifend36
  %27 = icmp eq i64 %4, 11
  br i1 %27, label %if.entry42, label %ifend44

if.entry42:                                       ; preds = %ifend40
  %28 = call ptr @CodeGen_codegen_new_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend44:                                          ; preds = %ifend40
  %29 = icmp eq i64 %4, 15
  br i1 %29, label %if.entry46, label %ifend48

if.entry46:                                       ; preds = %ifend44
  %30 = call ptr @CodeGen_codegen_ternary_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend48:                                          ; preds = %ifend44
  %31 = icmp eq i64 %4, 10
  br i1 %31, label %if.entry50, label %ifend52

if.entry50:                                       ; preds = %ifend48
  %32 = call ptr @CodeGen_codegen_typecast_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend52:                                          ; preds = %ifend48
  %33 = icmp eq i64 %4, 6
  br i1 %33, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %ifend52
  %34 = call ptr @CodeGen_codegen_array_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend56:                                          ; preds = %ifend52
  %35 = icmp eq i64 %4, 16
  br i1 %35, label %if.entry58, label %common.ret

if.entry58:                                       ; preds = %ifend56
  %36 = call ptr @CodeGen_codegen_intrinsic_exp(ptr %0, ptr %1, ptr %2)
  br label %common.ret
}

define void @GeneratedModule_print_errors(ptr %0) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr @string_from_cstring(ptr %2)
  %4 = load ptr, ptr %memberidx, align 8
  call void @LLVMDisposeMessage(ptr %4)
  %5 = load ptr, ptr %3, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 11
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @344, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = call ptr @string_from_bytes(ptr %10, i64 %9)
  call void @panic(ptr %11)
  ret void
}

define i64 @GeneratedModule_exec(ptr %0) {
  call void @LLVMLinkInMCJIT()
  %engine = alloca ptr, align 8
  store ptr null, ptr %engine, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 2
  %3 = call i1 @LLVMCreateExecutionEngineForModule(ptr %engine, ptr %2, ptr %memberidx1)
  br i1 %3, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %main_fnc = alloca ptr, align 8
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMGetNamedFunction(ptr %4, ptr @345)
  store ptr %5, ptr %main_fnc, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry4, label %ifend6

common.ret:                                       ; preds = %ifend14, %if.entry4
  %common.ret.op = phi i64 [ 1, %if.entry4 ], [ %15, %ifend14 ]
  ret i64 %common.ret.op

if.entry4:                                        ; preds = %ifend
  %7 = call ptr @string_from_bytes(ptr @346, i64 48)
  call void @println(ptr %7)
  %8 = load ptr, ptr %engine, align 8
  call void @LLVMDisposeExecutionEngine(ptr %8)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %ret = alloca i64, align 8
  %9 = load ptr, ptr %engine, align 8
  %10 = call i64 @LLVMRunFunctionAsMain(ptr %9, ptr %5, i64 0, ptr null, ptr null)
  store i64 %10, ptr %ret, align 4
  %11 = load ptr, ptr %engine, align 8
  %12 = load ptr, ptr %memberidx, align 8
  %13 = call i1 @LLVMRemoveModule(ptr %11, ptr %12, ptr %memberidx, ptr %memberidx1)
  br i1 %13, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %ifend6
  call void @GeneratedModule_print_errors(ptr %0)
  br label %ifend14

ifend14:                                          ; preds = %ifend6, %if.entry12
  %14 = load ptr, ptr %engine, align 8
  call void @LLVMDisposeExecutionEngine(ptr %14)
  %15 = load i64, ptr %ret, align 4
  br label %common.ret
}

define ptr @GeneratedModule_create_target_machine(ptr %0, ptr %1) {
  %3 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @string_from_bytes(ptr @38, i64 0)
  %6 = call i1 %4(ptr %1, ptr %5)
  br i1 %6, label %true_block, label %false_block

true_block:                                       ; preds = %2
  %7 = call ptr @LLVMGetDefaultTargetTriple()
  br label %end

false_block:                                      ; preds = %2
  %8 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 11
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call ptr %9(ptr %1)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %7, %true_block ], [ %10, %false_block ]
  %target = alloca ptr, align 8
  store ptr null, ptr %target, align 8
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 2
  %11 = call i1 @LLVMGetTargetFromTriple(ptr %ternary, ptr %target, ptr %memberidx2)
  br i1 %11, label %if.entry, label %ifend

if.entry:                                         ; preds = %end
  call void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %end, %if.entry
  %CPU = alloca ptr, align 8
  store ptr @347, ptr %CPU, align 8
  %12 = load ptr, ptr %target, align 8
  %13 = call ptr @LLVMGetHostCPUFeatures()
  %14 = call ptr @LLVMCreateTargetMachine(ptr %12, ptr %ternary, ptr @347, ptr %13, i64 3, i64 0, i64 0)
  ret ptr %14
}

define void @GeneratedModule_write_object(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @GeneratedModule_create_target_machine(ptr %0, ptr %2)
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @LLVMCreateTargetDataLayout(ptr %4)
  call void @LLVMSetDataLayout(ptr %5, ptr %6)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @LLVMGetTargetMachineTriple(ptr %4)
  call void @LLVMSetTarget(ptr %7, ptr %8)
  %9 = load ptr, ptr %memberidx, align 8
  %10 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 11
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = call ptr %11(ptr %1)
  %memberidx4 = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 2
  %13 = call i1 @LLVMTargetMachineEmitToFile(ptr %4, ptr %9, ptr %12, i64 1, ptr %memberidx4)
  br i1 %13, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  call void @LLVMDisposeTargetMachine(ptr %4)
  ret void
}

define void @GeneratedModule_run_passes(ptr %0, i64 %1) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @LLVMCreateFunctionPassManagerForModule(ptr %3)
  %5 = call ptr @LLVMPassManagerBuilderCreate()
  call void @LLVMPassManagerBuilderSetOptLevel(ptr %5, i64 %1)
  call void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr %5, i64 255)
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr @LLVMGetFirstFunction(ptr %6)
  call void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr %5, ptr %4)
  %8 = icmp ne ptr %7, null
  br i1 %8, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %func.0 = phi ptr [ %7, %2 ], [ %10, %while.entry ]
  %9 = call i1 @LLVMRunFunctionPassManager(ptr %4, ptr %func.0)
  %10 = call ptr @LLVMGetNextFunction(ptr %func.0)
  %11 = icmp ne ptr %10, null
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  call void @LLVMDisposePassManager(ptr %4)
  call void @LLVMPassManagerBuilderDispose(ptr %5)
  ret void
}

define void @GeneratedModule_print(ptr %0) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 2
  %3 = call i1 @LLVMPrintModuleToFile(ptr %2, ptr @348, ptr %memberidx1)
  br i1 %3, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  ret void
}

define void @GeneratedModule_llvm_shutdown(ptr %0) {
  call void @LLVMShutdown()
  ret void
}

define void @GeneratedModule_constructor(ptr %0, ptr %1) {
  store ptr @VTableGeneratedModule, ptr %0, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i32 0, i32 2
  store ptr null, ptr %memberidx1, align 8
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call i1 @LLVMVerifyModule(ptr %3, i64 1, ptr %memberidx1)
  br i1 %4, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %5 = load ptr, ptr %0, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx5, align 8
  call void %6(ptr %0)
  call void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  call void @LLVM_InitializeAllTargetInfos()
  call void @LLVM_InitializeAllTargets()
  call void @LLVM_InitializeAllTargetMCs()
  call void @LLVM_InitializeAllAsmParsers()
  call void @LLVM_InitializeAllAsmPrinters()
  ret void
}

declare i1 @LLVMVerifyModule(ptr, i64, ptr)

declare void @LLVM_InitializeAllTargetInfos()

declare void @LLVM_InitializeAllTargets()

declare void @LLVM_InitializeAllTargetMCs()

declare void @LLVM_InitializeAllAsmParsers()

declare void @LLVM_InitializeAllAsmPrinters()

declare void @LLVMDisposeMessage(ptr)

define void @panic(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %0)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @343, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %8, ptr %7, i64 %6)
  call void @println(ptr %8)
  call void @exit(i64 2)
  ret void
}

declare void @exit(i64)

declare ptr @LLVMCreateFunctionPassManagerForModule(ptr)

declare ptr @LLVMPassManagerBuilderCreate()

declare void @LLVMPassManagerBuilderSetOptLevel(ptr, i64)

declare void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr, i64)

declare ptr @LLVMGetFirstFunction(ptr)

declare void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr, ptr)

declare i1 @LLVMRunFunctionPassManager(ptr, ptr)

declare ptr @LLVMGetNextFunction(ptr)

declare void @LLVMDisposePassManager(ptr)

declare void @LLVMPassManagerBuilderDispose(ptr)

declare void @LLVMLinkInMCJIT()

declare i1 @LLVMCreateExecutionEngineForModule(ptr, ptr, ptr)

declare ptr @LLVMGetNamedFunction(ptr, ptr)

declare void @LLVMDisposeExecutionEngine(ptr)

declare i64 @LLVMRunFunctionAsMain(ptr, ptr, i64, ptr, ptr)

declare i1 @LLVMRemoveModule(ptr, ptr, ptr, ptr)

declare ptr @LLVMGetDefaultTargetTriple()

declare i1 @LLVMGetTargetFromTriple(ptr, ptr, ptr)

declare ptr @LLVMCreateTargetMachine(ptr, ptr, ptr, ptr, i64, i64, i64)

declare ptr @LLVMGetHostCPUFeatures()

declare void @LLVMSetDataLayout(ptr, ptr)

declare ptr @LLVMCreateTargetDataLayout(ptr)

declare void @LLVMSetTarget(ptr, ptr)

declare ptr @LLVMGetTargetMachineTriple(ptr)

declare i1 @LLVMTargetMachineEmitToFile(ptr, ptr, ptr, i64, ptr)

declare void @LLVMDisposeTargetMachine(ptr)

declare i1 @LLVMPrintModuleToFile(ptr, ptr, ptr)

declare void @LLVMShutdown()

define ptr @CodeGen_codegen(ptr %0, ptr %1) {
for.entry:
  %memberidx = getelementptr inbounds %Program, ptr %1, i32 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load ptr, ptr %2, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 5
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = call ptr %4(ptr %2, i64 2)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  store ptr %1, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 8
  store ptr null, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 7
  store ptr null, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %6 = call ptr @LLVMContextCreate()
  store ptr %6, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %memberidx7 = getelementptr inbounds %Module, ptr %5, i32 0, i32 1
  %7 = load ptr, ptr %memberidx7, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 11
  %9 = load ptr, ptr %memberidx8, align 8
  %10 = call ptr %9(ptr %7)
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = call ptr @LLVMModuleCreateWithNameInContext(ptr %10, ptr %11)
  store ptr %12, ptr %memberidx6, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %19, %for.body ]
  %memberidx10 = getelementptr inbounds %Module, ptr %5, i32 0, i32 6
  %13 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Array_Enum_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx11, align 4
  %15 = icmp slt i64 %i.0, %14
  br i1 %15, label %for.body, label %for.entry14

for.body:                                         ; preds = %for.cond
  %16 = load ptr, ptr %13, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %16, i32 0, i32 5
  %17 = load ptr, ptr %memberidx13, align 8
  %18 = call ptr %17(ptr %13, i64 %i.0)
  call void @CodeGen_declare_enum(ptr %0, ptr %18)
  %19 = add i64 %i.0, 1
  br label %for.cond

for.entry14:                                      ; preds = %for.cond
  br label %for.cond15

for.cond15:                                       ; preds = %for.body16, %for.entry14
  %i.1 = phi i64 [ 0, %for.entry14 ], [ %26, %for.body16 ]
  %memberidx19 = getelementptr inbounds %Module, ptr %5, i32 0, i32 4
  %20 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Array_Class_, ptr %20, i32 0, i32 2
  %21 = load i64, ptr %memberidx20, align 4
  %22 = icmp slt i64 %i.1, %21
  br i1 %22, label %for.body16, label %for.entry23

for.body16:                                       ; preds = %for.cond15
  %23 = load ptr, ptr %20, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx22, align 8
  %25 = call ptr %24(ptr %20, i64 %i.1)
  call void @CodeGen_declare_class(ptr %0, ptr %25)
  %26 = add i64 %i.1, 1
  br label %for.cond15

for.entry23:                                      ; preds = %for.cond15
  br label %for.cond24

for.cond24:                                       ; preds = %for.body25, %for.entry23
  %i.2 = phi i64 [ 0, %for.entry23 ], [ %33, %for.body25 ]
  %memberidx28 = getelementptr inbounds %Module, ptr %5, i32 0, i32 8
  %27 = load ptr, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %Array_ConstDeclaration_, ptr %27, i32 0, i32 2
  %28 = load i64, ptr %memberidx29, align 4
  %29 = icmp slt i64 %i.2, %28
  br i1 %29, label %for.body25, label %for.entry32

for.body25:                                       ; preds = %for.cond24
  %30 = load ptr, ptr %27, align 8
  %memberidx31 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i32 0, i32 5
  %31 = load ptr, ptr %memberidx31, align 8
  %32 = call ptr %31(ptr %27, i64 %i.2)
  call void @CodeGen_codegen_const_declaration(ptr %0, ptr null, ptr %32)
  %33 = add i64 %i.2, 1
  br label %for.cond24

for.entry32:                                      ; preds = %for.cond24
  br label %for.cond33

for.cond33:                                       ; preds = %for.body34, %for.entry32
  %i.3 = phi i64 [ 0, %for.entry32 ], [ %40, %for.body34 ]
  %memberidx37 = getelementptr inbounds %Module, ptr %5, i32 0, i32 9
  %34 = load ptr, ptr %memberidx37, align 8
  %memberidx38 = getelementptr inbounds %Array_VarDeclaration_, ptr %34, i32 0, i32 2
  %35 = load i64, ptr %memberidx38, align 4
  %36 = icmp slt i64 %i.3, %35
  br i1 %36, label %for.body34, label %for.entry41

for.body34:                                       ; preds = %for.cond33
  %37 = load ptr, ptr %34, align 8
  %memberidx40 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i32 0, i32 5
  %38 = load ptr, ptr %memberidx40, align 8
  %39 = call ptr %38(ptr %34, i64 %i.3)
  call void @CodeGen_codegen_var_declaration(ptr %0, ptr null, ptr %39)
  %40 = add i64 %i.3, 1
  br label %for.cond33

for.entry41:                                      ; preds = %for.cond33
  br label %for.cond42

for.cond42:                                       ; preds = %for.body43, %for.entry41
  %i.4 = phi i64 [ 0, %for.entry41 ], [ %47, %for.body43 ]
  %41 = load ptr, ptr %memberidx19, align 8
  %memberidx47 = getelementptr inbounds %Array_Class_, ptr %41, i32 0, i32 2
  %42 = load i64, ptr %memberidx47, align 4
  %43 = icmp slt i64 %i.4, %42
  br i1 %43, label %for.body43, label %for.entry50

for.body43:                                       ; preds = %for.cond42
  %44 = load ptr, ptr %41, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %44, i32 0, i32 5
  %45 = load ptr, ptr %memberidx49, align 8
  %46 = call ptr %45(ptr %41, i64 %i.4)
  call void @CodeGen_codegen_class(ptr %0, ptr %46)
  %47 = add i64 %i.4, 1
  br label %for.cond42

for.entry50:                                      ; preds = %for.cond42
  br label %for.cond51

for.cond51:                                       ; preds = %for.body52, %for.entry50
  %i.5 = phi i64 [ 0, %for.entry50 ], [ %54, %for.body52 ]
  %memberidx55 = getelementptr inbounds %Module, ptr %5, i32 0, i32 5
  %48 = load ptr, ptr %memberidx55, align 8
  %memberidx56 = getelementptr inbounds %Array_Function_, ptr %48, i32 0, i32 2
  %49 = load i64, ptr %memberidx56, align 4
  %50 = icmp slt i64 %i.5, %49
  br i1 %50, label %for.body52, label %for.end54

for.body52:                                       ; preds = %for.cond51
  %51 = load ptr, ptr %48, align 8
  %memberidx58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i32 0, i32 5
  %52 = load ptr, ptr %memberidx58, align 8
  %53 = call ptr %52(ptr %48, i64 %i.5)
  call void @CodeGen_codegen_function(ptr %0, ptr %53)
  %54 = add i64 %i.5, 1
  br label %for.cond51

for.end54:                                        ; preds = %for.cond51
  %55 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%GeneratedModule, ptr null, i32 1) to i32))
  %56 = load ptr, ptr %memberidx6, align 8
  call void @GeneratedModule_constructor(ptr %55, ptr %56)
  ret ptr %55
}

define ptr @CodeGen_construct_enum(ptr %0, ptr %1) {
  call void @CodeGen_declare_enum(ptr %0, ptr %1)
  %3 = load ptr, ptr %1, align 8
  %4 = call ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %3)
  ret ptr %4
}

define void @Map_string_CGEnumType__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = sitofp i64 %4 to double
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sitofp i64 %6 to double
  %8 = fdiv double %5, %7
  %9 = fcmp ogt double %8, 7.500000e-01
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  call void @Map_string_CGEnumType__resize(ptr %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %hash = alloca i64, align 8
  %10 = call i64 @Map_string_CGEnumType__hash_fnc(ptr %0, ptr %1)
  %11 = load i64, ptr %memberidx1, align 4
  %12 = srem i64 %10, %11
  store i64 %12, ptr %hash, align 4
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %14, i32 0, i32 3
  %15 = load i1, ptr %memberidx4, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend11, %ifend
  %17 = load i64, ptr %hash, align 4
  %18 = load ptr, ptr %memberidx3, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx6, align 8
  %memberidx7 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx8, align 8
  %23 = call i1 %22(ptr %20, ptr %1)
  br i1 %23, label %while.end, label %ifend11

while.end:                                        ; preds = %while.entry, %ifend11, %ifend
  %24 = load i64, ptr %memberidx, align 4
  %25 = add i64 %24, 1
  store i64 %25, ptr %memberidx, align 4
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %memberidx3, align 8
  %ptridx19 = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx19, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %28, ptr %1, ptr %2)
  ret void

ifend11:                                          ; preds = %while.entry
  %31 = load i64, ptr %hash, align 4
  %32 = add i64 %31, 1
  %33 = load i64, ptr %memberidx1, align 4
  %34 = srem i64 %32, %33
  store i64 %34, ptr %hash, align 4
  %35 = load ptr, ptr %memberidx3, align 8
  %ptridx14 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx14, align 8
  %memberidx15 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %36, i32 0, i32 3
  %37 = load i1, ptr %memberidx15, align 1
  %38 = xor i1 %37, true
  br i1 %38, label %while.entry, label %while.end
}

define void @Bucket_string_CGEnumType__set(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %0, i32 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %0, i32 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %0, i32 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

define void @Bucket_string_CGEnumType__constructor(ptr %0) {
  store ptr @VTableBucket_string_CGEnumType_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %0, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  ret void
}

define i64 @Array_Bucket_string_CGEnumType___find(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %7, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.cond, %if.entry
  %common.ret.op = phi i64 [ %i.0, %if.entry ], [ -1, %for.cond ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  br label %common.ret

ifend:                                            ; preds = %for.body
  %7 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_CGEnumType___resize(ptr %0) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx, align 4
  %3 = mul i64 %2, 2
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %6 = call ptr @realloc(ptr %4, i64 %5)
  store ptr %6, ptr %memberidx2, align 8
  ret void
}

define void @Array_Bucket_string_CGEnumType_____sl__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sge i64 %3, %4
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %7 = load ptr, ptr %6, align 8
  call void %7(ptr %0)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  %8 = load i64, ptr %memberidx, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %memberidx, align 4
  %memberidx5 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %1, ptr %ptridx, align 8
  ret void
}

define void @Array_Bucket_string_CGEnumType___append(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, ptr %1)
  ret void
}

define void @Array_Bucket_string_CGEnumType___swap(ptr %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %10 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %9, i64 0, i64 %10)
  %11 = load ptr, ptr %9, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = call i1 %12(ptr %9, i64 %2)
  %14 = and i1 %8, %13
  br i1 %14, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %tmp = alloca ptr, align 8
  %memberidx4 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %15, i64 %1
  %16 = load ptr, ptr %ptridx, align 8
  store ptr %16, ptr %tmp, align 8
  %17 = load ptr, ptr %memberidx4, align 8
  %ptridx6 = getelementptr inbounds ptr, ptr %17, i64 %1
  %ptridx8 = getelementptr inbounds ptr, ptr %17, i64 %2
  %18 = load ptr, ptr %ptridx8, align 8
  store ptr %18, ptr %ptridx6, align 8
  %19 = load ptr, ptr %memberidx4, align 8
  %ptridx10 = getelementptr inbounds ptr, ptr %19, i64 %2
  %20 = load ptr, ptr %tmp, align 8
  store ptr %20, ptr %ptridx10, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define void @Array_Bucket_string_CGEnumType_____setitem__(ptr %0, i64 %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %4, i64 0, i64 %5)
  %6 = load ptr, ptr %4, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = call i1 %7(ptr %4, i64 %1)
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %9, i64 %1
  store ptr %2, ptr %ptridx, align 8
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  ret void
}

define ptr @Array_Bucket_string_CGEnumType_____getitem__(ptr %0, i64 %1) {
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @Range_constructor(ptr %3, i64 0, i64 %4)
  %5 = load ptr, ptr %3, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = call i1 %6(ptr %3, i64 %1)
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %2, %if.entry
  %common.ret.op = phi ptr [ %9, %if.entry ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %8, i64 %1
  %9 = load ptr, ptr %ptridx, align 8
  br label %common.ret
}

define i1 @Array_Bucket_string_CGEnumType_____eq__(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %1, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %3, %4
  br i1 %5, label %common.ret, label %for.entry

common.ret:                                       ; preds = %for.body, %for.cond, %2
  %common.ret.op = phi i1 [ false, %2 ], [ true, %for.cond ], [ false, %for.body ]
  ret i1 %common.ret.op

for.entry:                                        ; preds = %2
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend7, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr %10(ptr %0, i64 %6)
  %12 = load ptr, ptr %1, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx4, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call ptr %13(ptr %1, i64 %14)
  %16 = icmp ne ptr %11, %15
  br i1 %16, label %common.ret, label %ifend7

ifend7:                                           ; preds = %for.body
  %17 = load i64, ptr %i, align 4
  %18 = add i64 %17, 1
  store i64 %18, ptr %i, align 4
  br label %for.cond
}

define i1 @Array_Bucket_string_CGEnumType_____in__(ptr %0, ptr %1) {
for.entry:
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %8, %ifend ]
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %common.ret

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %0, i64 %i.0)
  %7 = icmp eq ptr %6, %1
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %for.cond
  %common.ret.op = phi i1 [ false, %for.cond ], [ true, %for.body ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %for.body
  %8 = add i64 %i.0, 1
  br label %for.cond
}

define void @Array_Bucket_string_CGEnumType___constructor(ptr %0, i64 %1) {
  store ptr @VTableArray_Bucket_string_CGEnumType__, ptr %0, align 8
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 3
  store i64 %1, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i32 0, i32 1
  %3 = trunc i64 %1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %memberidx2, align 8
  ret void
}

define ptr @Map_string_CGEnumType__get_buckets(ptr %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Bucket_string_CGEnumType__, ptr null, i32 1) to i32))
  call void @Array_Bucket_string_CGEnumType___constructor(ptr %1, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %1, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %1, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %ifend, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %10, %ifend ]
  %memberidx2 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 3
  %2 = load i64, ptr %memberidx2, align 4
  %3 = icmp slt i64 %i.0, %2
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %current_bucket = alloca ptr, align 8
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 1
  %4 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.0
  %5 = load ptr, ptr %ptridx, align 8
  store ptr %5, ptr %current_bucket, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %5, i32 0, i32 3
  %6 = load i1, ptr %memberidx4, align 1
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %ifend

for.end:                                          ; preds = %for.cond
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %8 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  call void %9(ptr %1, ptr %5)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %10 = add i64 %i.0, 1
  br label %for.cond
}

define void @Map_string_CGEnumType__resize(ptr %0) {
for.entry:
  %1 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %1, i32 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr %2(ptr %0)
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul i64 %4, 2
  store i64 %5, ptr %memberidx1, align 4
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx4, align 8
  %7 = load i64, ptr %memberidx1, align 4
  %8 = mul i64 %7, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %9 = call ptr @realloc(ptr %6, i64 %8)
  store ptr %9, ptr %memberidx4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %14, %for.body ]
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp slt i64 %i.0, %10
  br i1 %11, label %for.body, label %for.entry9

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %memberidx4, align 8
  %ptridx = getelementptr inbounds ptr, ptr %12, i64 %i.0
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_CGEnumType_, ptr null, i32 1) to i32))
  call void @Bucket_string_CGEnumType__constructor(ptr %13)
  store ptr %13, ptr %ptridx, align 8
  %14 = add i64 %i.0, 1
  br label %for.cond

for.entry9:                                       ; preds = %for.cond
  br label %for.cond10

for.cond10:                                       ; preds = %for.body11, %for.entry9
  %i.1 = phi i64 [ 0, %for.entry9 ], [ %27, %for.body11 ]
  %memberidx14 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %3, i32 0, i32 2
  %15 = load i64, ptr %memberidx14, align 4
  %16 = icmp slt i64 %i.1, %15
  br i1 %16, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %17 = load ptr, ptr %0, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %3, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx16, align 8
  %21 = call ptr %20(ptr %3, i64 %i.1)
  %memberidx17 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %23 = load ptr, ptr %3, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr %24(ptr %3, i64 %i.1)
  %memberidx19 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx19, align 8
  call void %18(ptr %0, ptr %22, ptr %26)
  %27 = add i64 %i.1, 1
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  ret void
}

define ptr @Map_string_CGEnumType__get(ptr %0, ptr %1) {
  %3 = call i64 @Map_string_CGEnumType__hash_fnc(ptr %0, ptr %1)
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = srem i64 %3, %4
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %6, i64 %5
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %else, %2
  %hash.0 = phi i64 [ %5, %2 ], [ %22, %else ]
  %10 = load ptr, ptr %memberidx1, align 8
  %ptridx4 = getelementptr inbounds ptr, ptr %10, i64 %hash.0
  %11 = load ptr, ptr %ptridx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx6, align 8
  %15 = call i1 %14(ptr %12, ptr %1)
  br i1 %15, label %while.end, label %else

while.end:                                        ; preds = %while.entry, %else, %2
  %hash.1 = phi i64 [ %hash.0, %while.entry ], [ %22, %else ], [ %5, %2 ]
  %16 = load ptr, ptr %memberidx1, align 8
  %ptridx12 = getelementptr inbounds ptr, ptr %16, i64 %hash.1
  %17 = load ptr, ptr %ptridx12, align 8
  %memberidx13 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %17, i32 0, i32 3
  %18 = load i1, ptr %memberidx13, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry14, label %common.ret

else:                                             ; preds = %while.entry
  %20 = add i64 %hash.0, 1
  %21 = load i64, ptr %memberidx, align 4
  %22 = srem i64 %20, %21
  %23 = load ptr, ptr %memberidx1, align 8
  %ptridx9 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %24, i32 0, i32 3
  %25 = load i1, ptr %memberidx10, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %while.entry, label %while.end

common.ret:                                       ; preds = %while.end, %if.entry14
  %common.ret.op = phi ptr [ %27, %if.entry14 ], [ null, %while.end ]
  ret ptr %common.ret.op

if.entry14:                                       ; preds = %while.end
  %memberidx19 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %17, i32 0, i32 2
  %27 = load ptr, ptr %memberidx19, align 8
  br label %common.ret
}

define i64 @Map_string_CGEnumType__hash_fnc(ptr %0, ptr %1) {
for.entry:
  %2 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %2, i32 0, i32 11
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr %3(ptr %1)
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @26, ptr %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %hash.0 = phi i64 [ 0, %for.entry ], [ %16, %for.body ]
  %i.0 = phi i64 [ 0, %for.entry ], [ %17, %for.body ]
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %i.0, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = shl i64 %hash.0, 1
  %12 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i32 0, i32 8
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call i8 %13(ptr %8, i64 %i.0)
  %15 = sext i8 %14 to i64
  %16 = add i64 %11, %15
  %17 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = icmp slt i64 %hash.0, 0
  %19 = sub i64 0, %hash.0
  %ternary = select i1 %18, i64 %19, i64 %hash.0
  ret i64 %ternary
}

define void @Map_string_CGEnumType__constructor(ptr %0) {
for.entry:
  store ptr @VTableMap_string_CGEnumType_, ptr %0, align 8
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 1
  %1 = tail call ptr @malloc(i32 mul (i32 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32), i32 256))
  store ptr %1, ptr %memberidx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ 0, %for.entry ], [ %5, %for.body ]
  %2 = icmp slt i64 %i.0, 256
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds ptr, ptr %3, i64 %i.0
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Bucket_string_CGEnumType_, ptr null, i32 1) to i32))
  call void @Bucket_string_CGEnumType__constructor(ptr %4)
  store ptr %4, ptr %ptridx, align 8
  %5 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %memberidx2 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 3
  store i64 256, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define ptr @CodeGen_codegen_pow_expr(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  %args = alloca [2 x ptr], align 8
  store ptr %3, ptr %args, align 8
  %6 = getelementptr inbounds ptr, ptr %args, i64 1
  store ptr %4, ptr %6, align 8
  %7 = call ptr @dump_type(ptr %2, i1 true)
  %8 = load ptr, ptr %7, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 11
  %9 = load ptr, ptr %memberidx, align 8
  %10 = call ptr %9(ptr %7)
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr %11, ptr @377, ptr %10)
  %13 = load ptr, ptr %11, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %14, ptr %13, i64 %12)
  %15 = call ptr @CodeGen_codegen_type(ptr %0, ptr %2, i1 true)
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %16 = load ptr, ptr %memberidx1, align 8
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %17, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx2, align 8
  store ptr %15, ptr %18, align 8
  %19 = getelementptr inbounds ptr, ptr %18, i64 1
  store ptr %15, ptr %19, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %17, i32 0, i32 2
  store i64 2, ptr %memberidx3, align 4
  %20 = call ptr @get_intrinsic(ptr %16, ptr %14, ptr %17, ptr %15, i1 false)
  %memberidx4 = getelementptr inbounds %IntrinsicResult, ptr %20, i32 0, i32 1
  %21 = load ptr, ptr %memberidx4, align 8
  %22 = load ptr, ptr %20, align 8
  %23 = call ptr @LLVMBuildCall2(ptr %1, ptr %21, ptr %22, ptr %args, i64 2, ptr @38)
  ret ptr %23
}

define ptr @CodeGen_codegen_bin_exp(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %2, i32 0, i32 5
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %2, i32 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = load i64, ptr %6, align 4
  %memberidx4 = getelementptr inbounds %BinaryExpression, ptr %2, i32 0, i32 6
  %8 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx5, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp ne i64 %7, %10
  br i1 %11, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %12 = icmp eq i64 %4, 11
  br i1 %12, label %if.entry7, label %else8

ifend:                                            ; preds = %else8, %3
  %13 = icmp eq i64 %4, 19
  br i1 %13, label %if.entry13, label %ifend15

common.ret:                                       ; preds = %true_block181, %false_block182, %true_block174, %false_block175, %true_block167, %false_block168, %true_block157, %false_block158, %true_block146, %false_block147, %true_block121, %false_block122, %true_block114, %false_block115, %true_block107, %false_block108, %true_block100, %false_block101, %true_block93, %false_block94, %true_block86, %false_block87, %true_block79, %false_block80, %true_block66, %false_block67, %true_block59, %false_block60, %true_block52, %false_block53, %true_block25, %false_block26, %if.entry140, %if.entry137, %if.entry134, %if.entry131, %if.entry128, %if.entry73, %if.entry70, %ifend48, %end41, %if.entry33, %end, %if.entry13, %if.entry10, %if.entry7
  %common.ret.op = phi ptr [ %14, %if.entry7 ], [ %16, %if.entry10 ], [ %17, %if.entry13 ], [ %41, %end ], [ %49, %if.entry33 ], [ %78, %end41 ], [ null, %ifend48 ], [ %119, %if.entry70 ], [ %123, %if.entry73 ], [ %193, %if.entry128 ], [ %197, %if.entry131 ], [ %201, %if.entry134 ], [ %205, %if.entry137 ], [ %209, %if.entry140 ], [ %43, %true_block25 ], [ %45, %false_block26 ], [ %97, %true_block52 ], [ %100, %false_block53 ], [ %105, %true_block59 ], [ %108, %false_block60 ], [ %113, %true_block66 ], [ %116, %false_block67 ], [ %135, %true_block79 ], [ %138, %false_block80 ], [ %145, %true_block86 ], [ %148, %false_block87 ], [ %153, %true_block93 ], [ %156, %false_block94 ], [ %161, %true_block100 ], [ %164, %false_block101 ], [ %169, %true_block107 ], [ %172, %false_block108 ], [ %177, %true_block114 ], [ %180, %false_block115 ], [ %184, %true_block121 ], [ %187, %false_block122 ], [ %221, %true_block146 ], [ %224, %false_block147 ], [ %228, %true_block157 ], [ %231, %false_block158 ], [ %238, %true_block167 ], [ %241, %false_block168 ], [ %245, %true_block174 ], [ %248, %false_block175 ], [ %252, %true_block181 ], [ %255, %false_block182 ]
  ret ptr %common.ret.op

if.entry7:                                        ; preds = %if.entry
  %14 = call ptr @CodeGen_createLLVMBool(ptr %0, i1 false)
  br label %common.ret

else8:                                            ; preds = %if.entry
  %15 = icmp eq i64 %4, 12
  br i1 %15, label %if.entry10, label %ifend

if.entry10:                                       ; preds = %else8
  %16 = call ptr @CodeGen_createLLVMBool(ptr %0, i1 true)
  br label %common.ret

if.entry13:                                       ; preds = %ifend
  %17 = call ptr @CodeGen_codegen_assignment(ptr %0, ptr %1, ptr %2)
  br label %common.ret

ifend15:                                          ; preds = %ifend
  %lhs = alloca ptr, align 8
  %18 = load ptr, ptr %memberidx1, align 8
  %19 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %18)
  store ptr %19, ptr %lhs, align 8
  %rhs = alloca ptr, align 8
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %20)
  store ptr %21, ptr %rhs, align 8
  %22 = load ptr, ptr %memberidx4, align 8
  %23 = call i1 @is_null(ptr %22)
  %24 = icmp eq i64 %4, 11
  %25 = icmp eq i64 %4, 12
  %26 = or i1 %24, %25
  %27 = and i1 %23, %26
  br i1 %27, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend15
  %28 = load ptr, ptr %lhs, align 8
  %29 = call i1 @LLVMIsConstant(ptr %28)
  br i1 %29, label %if.entry22, label %ifend24

ifend21:                                          ; preds = %ifend15
  %lty = alloca ptr, align 8
  %30 = load ptr, ptr %memberidx1, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %30, i32 0, i32 3
  %31 = load ptr, ptr %memberidx30, align 8
  store ptr %31, ptr %lty, align 8
  %rty = alloca ptr, align 8
  %32 = load ptr, ptr %memberidx4, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %32, i32 0, i32 3
  %33 = load ptr, ptr %memberidx32, align 8
  store ptr %33, ptr %rty, align 8
  %34 = call i1 @is_numeric(ptr %33)
  %35 = icmp eq i64 %4, 6
  %36 = and i1 %34, %35
  br i1 %36, label %if.entry33, label %ifend35

if.entry22:                                       ; preds = %if.entry19
  br i1 %24, label %true_block, label %false_block

ifend24:                                          ; preds = %if.entry19
  br i1 %24, label %true_block25, label %false_block26

true_block:                                       ; preds = %if.entry22
  %37 = load ptr, ptr %lhs, align 8
  %38 = call i1 @LLVMIsNull(ptr %37)
  br label %end

false_block:                                      ; preds = %if.entry22
  %39 = load ptr, ptr %lhs, align 8
  %40 = call i1 @LLVMIsNull(ptr %39)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi i1 [ %38, %true_block ], [ %40, %false_block ]
  %41 = call ptr @CodeGen_createLLVMBool(ptr %0, i1 %ternary)
  br label %common.ret

true_block25:                                     ; preds = %ifend24
  %42 = load ptr, ptr %lhs, align 8
  %43 = call ptr @LLVMBuildIsNull(ptr %1, ptr %42, ptr @38)
  br label %common.ret

false_block26:                                    ; preds = %ifend24
  %44 = load ptr, ptr %lhs, align 8
  %45 = call ptr @LLVMBuildIsNotNull(ptr %1, ptr %44, ptr @38)
  br label %common.ret

if.entry33:                                       ; preds = %ifend21
  %46 = load ptr, ptr %rty, align 8
  %47 = load ptr, ptr %lhs, align 8
  %48 = load ptr, ptr %rhs, align 8
  %49 = call ptr @CodeGen_codegen_pow_expr(ptr %0, ptr %1, ptr %46, ptr %47, ptr %48)
  br label %common.ret

ifend35:                                          ; preds = %ifend21
  %50 = load ptr, ptr %lty, align 8
  %51 = call i1 @is_pointer(ptr %50)
  br i1 %51, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %ifend35
  %indices = alloca [1 x ptr], align 8
  %52 = icmp eq i64 %4, 1
  br i1 %52, label %true_block39, label %false_block40

ifend38:                                          ; preds = %ifend35
  %ipred = alloca i64, align 8
  store i64 0, ptr %ipred, align 4
  %rpred = alloca i64, align 8
  store i64 0, ptr %rpred, align 4
  %is_const_expr = alloca i1, align 1
  %53 = load ptr, ptr %lhs, align 8
  %54 = call i1 @LLVMIsConstant(ptr %53)
  %55 = load ptr, ptr %rhs, align 8
  %56 = call i1 @LLVMIsConstant(ptr %55)
  %57 = and i1 %54, %56
  store i1 %57, ptr %is_const_expr, align 1
  %58 = load ptr, ptr %rty, align 8
  %59 = call i1 @is_int(ptr %58)
  %60 = load ptr, ptr %lty, align 8
  %61 = call i1 @is_object(ptr %60)
  %62 = load ptr, ptr %rty, align 8
  %63 = call i1 @is_object(ptr %62)
  %64 = and i1 %61, %63
  %65 = and i1 %64, %26
  %66 = or i1 %59, %65
  %67 = load ptr, ptr %rty, align 8
  %68 = load i64, ptr %67, align 4
  %69 = icmp eq i64 %68, 14
  %70 = or i1 %66, %69
  br i1 %70, label %if.entry46, label %else47

true_block39:                                     ; preds = %if.entry36
  %71 = load ptr, ptr %rhs, align 8
  br label %end41

false_block40:                                    ; preds = %if.entry36
  %72 = load ptr, ptr %rhs, align 8
  %73 = call ptr @CodeGen_neg_int(ptr %1, ptr %72)
  br label %end41

end41:                                            ; preds = %false_block40, %true_block39
  %ternary42 = phi ptr [ %71, %true_block39 ], [ %73, %false_block40 ]
  store ptr %ternary42, ptr %indices, align 8
  %pointee_type = alloca ptr, align 8
  %74 = load ptr, ptr %lty, align 8
  %memberidx43 = getelementptr inbounds %PointerType, ptr %74, i32 0, i32 1
  %75 = load ptr, ptr %memberidx43, align 8
  %76 = call ptr @CodeGen_codegen_type(ptr %0, ptr %75, i1 true)
  store ptr %76, ptr %pointee_type, align 8
  %77 = load ptr, ptr %lhs, align 8
  %78 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %76, ptr %77, ptr %indices, i64 1, ptr @38)
  br label %common.ret

if.entry46:                                       ; preds = %ifend38
  %79 = icmp eq i64 %4, 1
  br i1 %79, label %if.entry49, label %else50

else47:                                           ; preds = %ifend38
  %80 = call i1 @is_float(ptr %67)
  br i1 %80, label %if.entry125, label %else126

ifend48:                                          ; preds = %else172, %else126, %else144, %else112
  %81 = load ptr, ptr %lty, align 8
  %82 = load i64, ptr %81, align 4
  %83 = call ptr @dump_bin_op(i64 %4)
  %84 = load ptr, ptr %83, align 8
  %memberidx186 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i32 0, i32 11
  %85 = load ptr, ptr %memberidx186, align 8
  %86 = call ptr %85(ptr %83)
  %87 = load ptr, ptr %rty, align 8
  %88 = load i64, ptr %87, align 4
  %89 = alloca ptr, align 8
  %90 = call i64 (ptr, ptr, ...) @asprintf(ptr %89, ptr @378, i64 %82, ptr %86, i64 %88)
  %91 = load ptr, ptr %89, align 8
  %92 = call ptr @string_from_bytes(ptr %91, i64 %90)
  call void @panic(ptr %92)
  br label %common.ret

if.entry49:                                       ; preds = %if.entry46
  %93 = load i1, ptr %is_const_expr, align 1
  br i1 %93, label %true_block52, label %false_block53

else50:                                           ; preds = %if.entry46
  %94 = icmp eq i64 %4, 2
  br i1 %94, label %if.entry56, label %else57

true_block52:                                     ; preds = %if.entry49
  %95 = load ptr, ptr %lhs, align 8
  %96 = load ptr, ptr %rhs, align 8
  %97 = call ptr @LLVMConstAdd(ptr %95, ptr %96)
  br label %common.ret

false_block53:                                    ; preds = %if.entry49
  %98 = load ptr, ptr %lhs, align 8
  %99 = load ptr, ptr %rhs, align 8
  %100 = call ptr @LLVMBuildAdd(ptr %1, ptr %98, ptr %99, ptr @38)
  br label %common.ret

if.entry56:                                       ; preds = %else50
  %101 = load i1, ptr %is_const_expr, align 1
  br i1 %101, label %true_block59, label %false_block60

else57:                                           ; preds = %else50
  %102 = icmp eq i64 %4, 3
  br i1 %102, label %if.entry63, label %else64

true_block59:                                     ; preds = %if.entry56
  %103 = load ptr, ptr %lhs, align 8
  %104 = load ptr, ptr %rhs, align 8
  %105 = call ptr @LLVMConstSub(ptr %103, ptr %104)
  br label %common.ret

false_block60:                                    ; preds = %if.entry56
  %106 = load ptr, ptr %lhs, align 8
  %107 = load ptr, ptr %rhs, align 8
  %108 = call ptr @LLVMBuildSub(ptr %1, ptr %106, ptr %107, ptr @38)
  br label %common.ret

if.entry63:                                       ; preds = %else57
  %109 = load i1, ptr %is_const_expr, align 1
  br i1 %109, label %true_block66, label %false_block67

else64:                                           ; preds = %else57
  %110 = icmp eq i64 %4, 4
  br i1 %110, label %if.entry70, label %else71

true_block66:                                     ; preds = %if.entry63
  %111 = load ptr, ptr %lhs, align 8
  %112 = load ptr, ptr %rhs, align 8
  %113 = call ptr @LLVMConstMul(ptr %111, ptr %112)
  br label %common.ret

false_block67:                                    ; preds = %if.entry63
  %114 = load ptr, ptr %lhs, align 8
  %115 = load ptr, ptr %rhs, align 8
  %116 = call ptr @LLVMBuildMul(ptr %1, ptr %114, ptr %115, ptr @38)
  br label %common.ret

if.entry70:                                       ; preds = %else64
  %117 = load ptr, ptr %lhs, align 8
  %118 = load ptr, ptr %rhs, align 8
  %119 = call ptr @LLVMBuildSDiv(ptr %1, ptr %117, ptr %118, ptr @38)
  br label %common.ret

else71:                                           ; preds = %else64
  %120 = icmp eq i64 %4, 5
  br i1 %120, label %if.entry73, label %else74

if.entry73:                                       ; preds = %else71
  %121 = load ptr, ptr %lhs, align 8
  %122 = load ptr, ptr %rhs, align 8
  %123 = call ptr @LLVMBuildSRem(ptr %1, ptr %121, ptr %122, ptr @38)
  br label %common.ret

else74:                                           ; preds = %else71
  %124 = icmp sge i64 %4, 7
  %125 = icmp sle i64 %4, 10
  %126 = and i1 %124, %125
  br i1 %126, label %if.entry76, label %else77

if.entry76:                                       ; preds = %else74
  %127 = sub i64 %4, 7
  %128 = add i64 %127, 38
  store i64 %128, ptr %ipred, align 4
  %129 = load i1, ptr %is_const_expr, align 1
  br i1 %129, label %true_block79, label %false_block80

else77:                                           ; preds = %else74
  %130 = icmp sge i64 %4, 11
  %131 = icmp sle i64 %4, 12
  %132 = and i1 %130, %131
  br i1 %132, label %if.entry83, label %else84

true_block79:                                     ; preds = %if.entry76
  %133 = load ptr, ptr %lhs, align 8
  %134 = load ptr, ptr %rhs, align 8
  %135 = call ptr @LLVMConstICmp(i64 %128, ptr %133, ptr %134)
  br label %common.ret

false_block80:                                    ; preds = %if.entry76
  %136 = load ptr, ptr %lhs, align 8
  %137 = load ptr, ptr %rhs, align 8
  %138 = call ptr @LLVMBuildICmp(ptr %1, i64 %128, ptr %136, ptr %137, ptr @38)
  br label %common.ret

if.entry83:                                       ; preds = %else77
  %139 = sub i64 %4, 11
  %140 = add i64 %139, 32
  store i64 %140, ptr %ipred, align 4
  %141 = load i1, ptr %is_const_expr, align 1
  br i1 %141, label %true_block86, label %false_block87

else84:                                           ; preds = %else77
  %142 = icmp eq i64 %4, 13
  br i1 %142, label %if.entry90, label %else91

true_block86:                                     ; preds = %if.entry83
  %143 = load ptr, ptr %lhs, align 8
  %144 = load ptr, ptr %rhs, align 8
  %145 = call ptr @LLVMConstICmp(i64 %140, ptr %143, ptr %144)
  br label %common.ret

false_block87:                                    ; preds = %if.entry83
  %146 = load ptr, ptr %lhs, align 8
  %147 = load ptr, ptr %rhs, align 8
  %148 = call ptr @LLVMBuildICmp(ptr %1, i64 %140, ptr %146, ptr %147, ptr @38)
  br label %common.ret

if.entry90:                                       ; preds = %else84
  %149 = load i1, ptr %is_const_expr, align 1
  br i1 %149, label %true_block93, label %false_block94

else91:                                           ; preds = %else84
  %150 = icmp eq i64 %4, 14
  br i1 %150, label %if.entry97, label %else98

true_block93:                                     ; preds = %if.entry90
  %151 = load ptr, ptr %lhs, align 8
  %152 = load ptr, ptr %rhs, align 8
  %153 = call ptr @LLVMConstShl(ptr %151, ptr %152)
  br label %common.ret

false_block94:                                    ; preds = %if.entry90
  %154 = load ptr, ptr %lhs, align 8
  %155 = load ptr, ptr %rhs, align 8
  %156 = call ptr @LLVMBuildShl(ptr %1, ptr %154, ptr %155, ptr @38)
  br label %common.ret

if.entry97:                                       ; preds = %else91
  %157 = load i1, ptr %is_const_expr, align 1
  br i1 %157, label %true_block100, label %false_block101

else98:                                           ; preds = %else91
  %158 = icmp eq i64 %4, 15
  br i1 %158, label %if.entry104, label %else105

true_block100:                                    ; preds = %if.entry97
  %159 = load ptr, ptr %lhs, align 8
  %160 = load ptr, ptr %rhs, align 8
  %161 = call ptr @LLVMConstAShr(ptr %159, ptr %160)
  br label %common.ret

false_block101:                                   ; preds = %if.entry97
  %162 = load ptr, ptr %lhs, align 8
  %163 = load ptr, ptr %rhs, align 8
  %164 = call ptr @LLVMBuildAShr(ptr %1, ptr %162, ptr %163, ptr @38)
  br label %common.ret

if.entry104:                                      ; preds = %else98
  %165 = load i1, ptr %is_const_expr, align 1
  br i1 %165, label %true_block107, label %false_block108

else105:                                          ; preds = %else98
  %166 = icmp eq i64 %4, 16
  br i1 %166, label %if.entry111, label %else112

true_block107:                                    ; preds = %if.entry104
  %167 = load ptr, ptr %lhs, align 8
  %168 = load ptr, ptr %rhs, align 8
  %169 = call ptr @LLVMConstOr(ptr %167, ptr %168)
  br label %common.ret

false_block108:                                   ; preds = %if.entry104
  %170 = load ptr, ptr %lhs, align 8
  %171 = load ptr, ptr %rhs, align 8
  %172 = call ptr @LLVMBuildOr(ptr %1, ptr %170, ptr %171, ptr @38)
  br label %common.ret

if.entry111:                                      ; preds = %else105
  %173 = load i1, ptr %is_const_expr, align 1
  br i1 %173, label %true_block114, label %false_block115

else112:                                          ; preds = %else105
  %174 = icmp eq i64 %4, 17
  br i1 %174, label %if.entry118, label %ifend48

true_block114:                                    ; preds = %if.entry111
  %175 = load ptr, ptr %lhs, align 8
  %176 = load ptr, ptr %rhs, align 8
  %177 = call ptr @LLVMConstAnd(ptr %175, ptr %176)
  br label %common.ret

false_block115:                                   ; preds = %if.entry111
  %178 = load ptr, ptr %lhs, align 8
  %179 = load ptr, ptr %rhs, align 8
  %180 = call ptr @LLVMBuildAnd(ptr %1, ptr %178, ptr %179, ptr @38)
  br label %common.ret

if.entry118:                                      ; preds = %else112
  %181 = load i1, ptr %is_const_expr, align 1
  br i1 %181, label %true_block121, label %false_block122

true_block121:                                    ; preds = %if.entry118
  %182 = load ptr, ptr %lhs, align 8
  %183 = load ptr, ptr %rhs, align 8
  %184 = call ptr @LLVMConstXor(ptr %182, ptr %183)
  br label %common.ret

false_block122:                                   ; preds = %if.entry118
  %185 = load ptr, ptr %lhs, align 8
  %186 = load ptr, ptr %rhs, align 8
  %187 = call ptr @LLVMBuildXor(ptr %1, ptr %185, ptr %186, ptr @38)
  br label %common.ret

if.entry125:                                      ; preds = %else47
  %188 = icmp eq i64 %4, 1
  br i1 %188, label %if.entry128, label %else129

else126:                                          ; preds = %else47
  %189 = load ptr, ptr %rty, align 8
  %190 = call i1 @is_bool(ptr %189)
  br i1 %190, label %if.entry161, label %ifend48

if.entry128:                                      ; preds = %if.entry125
  %191 = load ptr, ptr %lhs, align 8
  %192 = load ptr, ptr %rhs, align 8
  %193 = call ptr @LLVMBuildFAdd(ptr %1, ptr %191, ptr %192, ptr @38)
  br label %common.ret

else129:                                          ; preds = %if.entry125
  %194 = icmp eq i64 %4, 2
  br i1 %194, label %if.entry131, label %else132

if.entry131:                                      ; preds = %else129
  %195 = load ptr, ptr %lhs, align 8
  %196 = load ptr, ptr %rhs, align 8
  %197 = call ptr @LLVMBuildFSub(ptr %1, ptr %195, ptr %196, ptr @38)
  br label %common.ret

else132:                                          ; preds = %else129
  %198 = icmp eq i64 %4, 3
  br i1 %198, label %if.entry134, label %else135

if.entry134:                                      ; preds = %else132
  %199 = load ptr, ptr %lhs, align 8
  %200 = load ptr, ptr %rhs, align 8
  %201 = call ptr @LLVMBuildFMul(ptr %1, ptr %199, ptr %200, ptr @38)
  br label %common.ret

else135:                                          ; preds = %else132
  %202 = icmp eq i64 %4, 4
  br i1 %202, label %if.entry137, label %else138

if.entry137:                                      ; preds = %else135
  %203 = load ptr, ptr %lhs, align 8
  %204 = load ptr, ptr %rhs, align 8
  %205 = call ptr @LLVMBuildFDiv(ptr %1, ptr %203, ptr %204, ptr @38)
  br label %common.ret

else138:                                          ; preds = %else135
  %206 = icmp eq i64 %4, 5
  br i1 %206, label %if.entry140, label %else141

if.entry140:                                      ; preds = %else138
  %207 = load ptr, ptr %lhs, align 8
  %208 = load ptr, ptr %rhs, align 8
  %209 = call ptr @LLVMBuildFRem(ptr %1, ptr %207, ptr %208, ptr @38)
  br label %common.ret

else141:                                          ; preds = %else138
  %210 = icmp sge i64 %4, 7
  %211 = icmp sle i64 %4, 10
  %212 = and i1 %210, %211
  br i1 %212, label %if.entry143, label %else144

if.entry143:                                      ; preds = %else141
  %213 = sub i64 %4, 7
  %214 = add i64 %213, 2
  store i64 %214, ptr %rpred, align 4
  %215 = load i1, ptr %is_const_expr, align 1
  br i1 %215, label %true_block146, label %false_block147

else144:                                          ; preds = %else141
  %216 = icmp sge i64 %4, 11
  %217 = icmp sle i64 %4, 12
  %218 = and i1 %216, %217
  br i1 %218, label %if.entry150, label %ifend48

true_block146:                                    ; preds = %if.entry143
  %219 = load ptr, ptr %lhs, align 8
  %220 = load ptr, ptr %rhs, align 8
  %221 = call ptr @LLVMConstFCmp(i64 %214, ptr %219, ptr %220)
  br label %common.ret

false_block147:                                   ; preds = %if.entry143
  %222 = load ptr, ptr %lhs, align 8
  %223 = load ptr, ptr %rhs, align 8
  %224 = call ptr @LLVMBuildFCmp(ptr %1, i64 %214, ptr %222, ptr %223, ptr @38)
  br label %common.ret

if.entry150:                                      ; preds = %else144
  %. = select i1 %25, i64 6, i64 1
  store i64 %., ptr %rpred, align 4
  %225 = load i1, ptr %is_const_expr, align 1
  br i1 %225, label %true_block157, label %false_block158

true_block157:                                    ; preds = %if.entry150
  %226 = load ptr, ptr %lhs, align 8
  %227 = load ptr, ptr %rhs, align 8
  %228 = call ptr @LLVMConstFCmp(i64 %., ptr %226, ptr %227)
  br label %common.ret

false_block158:                                   ; preds = %if.entry150
  %229 = load ptr, ptr %lhs, align 8
  %230 = load ptr, ptr %rhs, align 8
  %231 = call ptr @LLVMBuildFCmp(ptr %1, i64 %., ptr %229, ptr %230, ptr @38)
  br label %common.ret

if.entry161:                                      ; preds = %else126
  %232 = icmp eq i64 %4, 16
  %233 = or i1 %232, %24
  br i1 %233, label %if.entry164, label %else165

if.entry164:                                      ; preds = %if.entry161
  %234 = load i1, ptr %is_const_expr, align 1
  br i1 %234, label %true_block167, label %false_block168

else165:                                          ; preds = %if.entry161
  %235 = icmp eq i64 %4, 15
  br i1 %235, label %if.entry171, label %else172

true_block167:                                    ; preds = %if.entry164
  %236 = load ptr, ptr %lhs, align 8
  %237 = load ptr, ptr %rhs, align 8
  %238 = call ptr @LLVMConstAnd(ptr %236, ptr %237)
  br label %common.ret

false_block168:                                   ; preds = %if.entry164
  %239 = load ptr, ptr %lhs, align 8
  %240 = load ptr, ptr %rhs, align 8
  %241 = call ptr @LLVMBuildAnd(ptr %1, ptr %239, ptr %240, ptr @38)
  br label %common.ret

if.entry171:                                      ; preds = %else165
  %242 = load i1, ptr %is_const_expr, align 1
  br i1 %242, label %true_block174, label %false_block175

else172:                                          ; preds = %else165
  br i1 %25, label %if.entry178, label %ifend48

true_block174:                                    ; preds = %if.entry171
  %243 = load ptr, ptr %lhs, align 8
  %244 = load ptr, ptr %rhs, align 8
  %245 = call ptr @LLVMConstOr(ptr %243, ptr %244)
  br label %common.ret

false_block175:                                   ; preds = %if.entry171
  %246 = load ptr, ptr %lhs, align 8
  %247 = load ptr, ptr %rhs, align 8
  %248 = call ptr @LLVMBuildOr(ptr %1, ptr %246, ptr %247, ptr @38)
  br label %common.ret

if.entry178:                                      ; preds = %else172
  %249 = load i1, ptr %is_const_expr, align 1
  br i1 %249, label %true_block181, label %false_block182

true_block181:                                    ; preds = %if.entry178
  %250 = load ptr, ptr %lhs, align 8
  %251 = load ptr, ptr %rhs, align 8
  %252 = call ptr @LLVMConstXor(ptr %250, ptr %251)
  br label %common.ret

false_block182:                                   ; preds = %if.entry178
  %253 = load ptr, ptr %lhs, align 8
  %254 = load ptr, ptr %rhs, align 8
  %255 = call ptr @LLVMBuildXor(ptr %1, ptr %253, ptr %254, ptr @38)
  br label %common.ret
}

define ptr @CodeGen_codegen_call_exp(ptr %0, ptr %1, ptr %2) {
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %5, i32 0, i32 1
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %CallExpression, ptr %2, i32 0, i32 4
  %6 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx5, align 4
  %8 = icmp eq i64 %7, 12
  br i1 %8, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %member_exp = alloca ptr, align 8
  store ptr %6, ptr %member_exp, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 9
  %9 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %MemberExpression, ptr %6, i32 0, i32 5
  %10 = load ptr, ptr %memberidx8, align 8
  %11 = call ptr @get_method(ptr %9, ptr %10)
  %memberidx9 = getelementptr inbounds %ClassMethod, ptr %11, i32 0, i32 1
  %12 = load i1, ptr %memberidx9, align 1
  %13 = xor i1 %12, true
  br i1 %13, label %if.entry10, label %ifend

ifend:                                            ; preds = %if.entry10, %if.entry, %3
  %func.0 = phi ptr [ %23, %if.entry10 ], [ null, %if.entry ], [ null, %3 ]
  %14 = icmp eq ptr %func.0, null
  br i1 %14, label %if.entry19, label %for.entry

if.entry10:                                       ; preds = %if.entry
  %struct_class = alloca ptr, align 8
  %15 = load ptr, ptr %member_exp, align 8
  %memberidx13 = getelementptr inbounds %MemberExpression, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %PropId, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx14, align 8
  %18 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %0, ptr %17)
  store ptr %18, ptr %struct_class, align 8
  %self = alloca ptr, align 8
  %19 = load ptr, ptr %member_exp, align 8
  %memberidx15 = getelementptr inbounds %MemberExpression, ptr %19, i32 0, i32 4
  %20 = load ptr, ptr %memberidx15, align 8
  %21 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %20)
  store ptr %21, ptr %self, align 8
  %22 = load ptr, ptr %member_exp, align 8
  %23 = call ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr %22, ptr %21)
  %24 = load ptr, ptr %4, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i32 0, i32 2
  %25 = load ptr, ptr %memberidx16, align 8
  %26 = load ptr, ptr %self, align 8
  call void %25(ptr %4, ptr %26)
  %27 = load ptr, ptr %5, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %memberidx17, align 8
  %29 = load ptr, ptr %struct_class, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call ptr @LLVMPointerType(ptr %30, i64 0)
  call void %28(ptr %5, ptr %31)
  br label %ifend

if.entry19:                                       ; preds = %ifend
  %32 = load ptr, ptr %memberidx4, align 8
  %memberidx23 = getelementptr inbounds %Expression, ptr %32, i32 0, i32 2
  %33 = load i64, ptr %memberidx23, align 4
  %34 = icmp eq i64 %33, 7
  br i1 %34, label %if.entry24, label %ifend26

if.entry24:                                       ; preds = %if.entry19
  %super_id = alloca ptr, align 8
  %memberidx28 = getelementptr inbounds %VarAccessExpression, ptr %32, i32 0, i32 4
  %35 = load ptr, ptr %memberidx28, align 8
  store ptr %35, ptr %super_id, align 8
  %this_param = alloca ptr, align 8
  %memberidx29 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 11
  %36 = load ptr, ptr %memberidx29, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %37, i32 0, i32 1
  %38 = load ptr, ptr %memberidx30, align 8
  %39 = call ptr @create_var_key(ptr %35)
  %40 = call ptr %38(ptr %36, ptr %39)
  store ptr %40, ptr %this_param, align 8
  %41 = icmp ne ptr %40, null
  br i1 %41, label %if.entry31, label %ifend26

ifend26:                                          ; preds = %if.entry31, %if.entry24, %if.entry19
  %42 = load ptr, ptr %memberidx4, align 8
  %43 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %42)
  br label %for.entry

if.entry31:                                       ; preds = %if.entry24
  %44 = load ptr, ptr %4, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %44, i32 0, i32 2
  %45 = load ptr, ptr %memberidx34, align 8
  call void %45(ptr %4, ptr %40)
  %46 = load ptr, ptr %5, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx35, align 8
  %memberidx36 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %48 = load ptr, ptr %memberidx36, align 8
  %49 = call ptr @LLVMInt8TypeInContext(ptr %48)
  %50 = call ptr @LLVMPointerType(ptr %49, i64 0)
  call void %47(ptr %5, ptr %50)
  br label %ifend26

for.entry:                                        ; preds = %ifend26, %ifend
  %func.1 = phi ptr [ %43, %ifend26 ], [ %func.0, %ifend ]
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %51 = load i64, ptr %i, align 4
  %memberidx38 = getelementptr inbounds %CallExpression, ptr %2, i32 0, i32 5
  %52 = load ptr, ptr %memberidx38, align 8
  %memberidx39 = getelementptr inbounds %Array_Expression_, ptr %52, i32 0, i32 2
  %53 = load i64, ptr %memberidx39, align 4
  %54 = icmp slt i64 %51, %53
  br i1 %54, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arg = alloca ptr, align 8
  %55 = load ptr, ptr %52, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %55, i32 0, i32 5
  %56 = load ptr, ptr %memberidx41, align 8
  %57 = call ptr %56(ptr %52, i64 %51)
  %58 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %57)
  store ptr %58, ptr %arg, align 8
  %59 = load ptr, ptr %4, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i32 0, i32 2
  %60 = load ptr, ptr %memberidx42, align 8
  call void %60(ptr %4, ptr %58)
  %61 = load ptr, ptr %5, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %61, i32 0, i32 2
  %62 = load ptr, ptr %memberidx43, align 8
  %63 = load ptr, ptr %arg, align 8
  %64 = call ptr @LLVMTypeOf(ptr %63)
  call void %62(ptr %5, ptr %64)
  %65 = load i64, ptr %i, align 4
  %66 = add i64 %65, 1
  store i64 %66, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %func_ty = alloca ptr, align 8
  %memberidx44 = getelementptr inbounds %Expression, ptr %2, i32 0, i32 3
  %67 = load ptr, ptr %memberidx44, align 8
  %68 = call ptr @CodeGen_codegen_type(ptr %0, ptr %67, i1 true)
  %69 = load ptr, ptr %memberidx2, align 8
  %70 = load i64, ptr %memberidx3, align 4
  %71 = call ptr @LLVMFunctionType(ptr %68, ptr %69, i64 %70, i1 false)
  store ptr %71, ptr %func_ty, align 8
  %72 = load ptr, ptr %memberidx, align 8
  %73 = load i64, ptr %memberidx1, align 4
  %74 = call ptr @LLVMBuildCall2(ptr %1, ptr %71, ptr %func.1, ptr %72, i64 %73, ptr @38)
  ret ptr %74
}

define ptr @CodeGen_codegen_realloc_call(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMInt8TypeInContext(ptr %4)
  %6 = call ptr @LLVMPointerType(ptr %5, i64 0)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @LLVMIntTypeInContext(ptr %7, i64 64)
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr @string_from_bytes(ptr @354, i64 7)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %11, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx3, align 8
  store ptr %6, ptr %12, align 8
  %13 = getelementptr inbounds ptr, ptr %12, i64 1
  store ptr %8, ptr %13, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 2
  store i64 2, ptr %memberidx4, align 4
  %14 = call ptr @get_intrinsic(ptr %9, ptr %10, ptr %11, ptr %6, i1 false)
  %memberidx5 = getelementptr inbounds %IntrinsicResult, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %14, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 1
  %17 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 2
  %18 = load i64, ptr %memberidx8, align 4
  %19 = call ptr @LLVMBuildCall2(ptr %1, ptr %15, ptr %16, ptr %17, i64 %18, ptr @38)
  ret ptr %19
}

define ptr @CodeGen_codegen_null(ptr %0, ptr %1) {
  %memberidx = getelementptr inbounds %Expression, ptr %1, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @CodeGen_codegen_type(ptr %0, ptr %3, i1 true)
  %5 = call ptr @LLVMConstNull(ptr %4)
  ret ptr %5
}

define ptr @CodeGen_codegen_unary_exp(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %UnaryExpression, ptr %2, i32 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpression, ptr %2, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %5)
  %7 = icmp eq i64 %4, 5
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = call i1 @is_int(ptr %8)
  br i1 %9, label %if.entry3, label %else4

ifend:                                            ; preds = %else4, %3
  %10 = icmp eq i64 %4, 6
  br i1 %10, label %if.entry10, label %ifend12

common.ret:                                       ; preds = %true_block, %false_block, %ifend27, %if.entry16, %ifend15, %if.entry7, %if.entry3
  %common.ret.op = phi ptr [ %11, %if.entry3 ], [ %14, %if.entry7 ], [ %6, %ifend15 ], [ %23, %if.entry16 ], [ %ternary43, %ifend27 ], [ %21, %true_block ], [ %22, %false_block ]
  ret ptr %common.ret.op

if.entry3:                                        ; preds = %if.entry
  %11 = call ptr @CodeGen_neg_int(ptr %1, ptr %6)
  br label %common.ret

else4:                                            ; preds = %if.entry
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call i1 @is_float(ptr %12)
  br i1 %13, label %if.entry7, label %ifend

if.entry7:                                        ; preds = %else4
  %14 = call ptr @LLVMBuildFNeg(ptr %1, ptr %6, ptr @38)
  br label %common.ret

if.entry10:                                       ; preds = %ifend
  %15 = call i1 @LLVMIsConstant(ptr %6)
  br i1 %15, label %true_block, label %false_block

ifend12:                                          ; preds = %ifend
  %16 = icmp sge i64 %4, 1
  %17 = icmp sle i64 %4, 4
  %18 = and i1 %16, %17
  %19 = icmp eq i64 %4, 7
  %20 = or i1 %18, %19
  br i1 %20, label %if.entry13, label %ifend15

true_block:                                       ; preds = %if.entry10
  %21 = call ptr @LLVMConstNot(ptr %6)
  br label %common.ret

false_block:                                      ; preds = %if.entry10
  %22 = call ptr @LLVMBuildNot(ptr %1, ptr %6, ptr @38)
  br label %common.ret

if.entry13:                                       ; preds = %ifend12
  %ptr = alloca ptr, align 8
  %23 = call ptr @CodeGen_get_expr_mem(ptr %0, ptr %1, ptr %5)
  store ptr %23, ptr %ptr, align 8
  br i1 %19, label %if.entry16, label %ifend18

ifend15:                                          ; preds = %ifend12
  br label %common.ret

if.entry16:                                       ; preds = %if.entry13
  br label %common.ret

ifend18:                                          ; preds = %if.entry13
  %alloc_ty = alloca ptr, align 8
  %memberidx19 = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %24 = load ptr, ptr %memberidx19, align 8
  %25 = call ptr @CodeGen_codegen_type(ptr %0, ptr %24, i1 true)
  store ptr %25, ptr %alloc_ty, align 8
  %incr_value = alloca i64, align 8
  %26 = icmp eq i64 %4, 1
  %27 = icmp eq i64 %4, 3
  %28 = or i1 %26, %27
  %. = select i1 %28, i64 1, i64 -1
  store i64 %., ptr %incr_value, align 4
  %new_value = alloca ptr, align 8
  store ptr null, ptr %new_value, align 8
  %29 = load ptr, ptr %memberidx19, align 8
  %30 = call i1 @is_pointer(ptr %29)
  br i1 %30, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend18
  %31 = load ptr, ptr %memberidx19, align 8
  %memberidx29 = getelementptr inbounds %PointerType, ptr %31, i32 0, i32 1
  %32 = load ptr, ptr %memberidx29, align 8
  %33 = call ptr @CodeGen_codegen_type(ptr %0, ptr %32, i1 true)
  store ptr %33, ptr %alloc_ty, align 8
  %indices = alloca [1 x ptr], align 8
  %34 = load i64, ptr %incr_value, align 4
  %35 = call ptr @CodeGen_createLLVMInt(ptr %0, i64 %34)
  store ptr %35, ptr %indices, align 8
  %36 = load ptr, ptr %alloc_ty, align 8
  %37 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %36, ptr %6, ptr %indices, i64 1, ptr @379)
  store ptr %37, ptr %new_value, align 8
  br label %ifend27

else26:                                           ; preds = %ifend18
  %38 = load ptr, ptr %memberidx19, align 8
  %39 = call i1 @is_numeric(ptr %38)
  br i1 %39, label %if.entry32, label %ifend27

ifend27:                                          ; preds = %end37, %else26, %if.entry25
  %40 = load ptr, ptr %new_value, align 8
  %41 = load ptr, ptr %ptr, align 8
  %42 = call ptr @LLVMBuildStore(ptr %1, ptr %40, ptr %41)
  %43 = icmp sge i64 %4, 2
  %44 = load ptr, ptr %new_value, align 8
  %ternary43 = select i1 %43, ptr %6, ptr %44
  br label %common.ret

if.entry32:                                       ; preds = %else26
  %incr_amt = alloca ptr, align 8
  %45 = load ptr, ptr %memberidx19, align 8
  %46 = call i1 @is_int(ptr %45)
  br i1 %46, label %true_block35, label %false_block36

true_block35:                                     ; preds = %if.entry32
  %47 = load ptr, ptr %alloc_ty, align 8
  %48 = load i64, ptr %incr_value, align 4
  %49 = call ptr @LLVMConstInt(ptr %47, i64 %48, i1 false)
  br label %end37

false_block36:                                    ; preds = %if.entry32
  %50 = load ptr, ptr %alloc_ty, align 8
  %51 = load i64, ptr %incr_value, align 4
  %52 = sitofp i64 %51 to double
  %53 = call ptr @LLVMConstReal(ptr %50, double %52)
  br label %end37

end37:                                            ; preds = %false_block36, %true_block35
  %ternary39 = phi ptr [ %49, %true_block35 ], [ %53, %false_block36 ]
  store ptr %ternary39, ptr %incr_amt, align 8
  %54 = call ptr @LLVMBuildAdd(ptr %1, ptr %6, ptr %ternary39, ptr @38)
  store ptr %54, ptr %new_value, align 8
  br label %ifend27
}

define ptr @CodeGen_codegen_ternary_exp(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @LLVMAppendBasicBlockInContext(ptr %4, ptr %5, ptr @381)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @LLVMAppendBasicBlockInContext(ptr %7, ptr %8, ptr @382)
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = call ptr @LLVMAppendBasicBlockInContext(ptr %10, ptr %11, ptr @383)
  %memberidx6 = getelementptr inbounds %TernaryExpression, ptr %2, i32 0, i32 4
  %13 = load ptr, ptr %memberidx6, align 8
  %14 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %13)
  %15 = call ptr @LLVMBuildCondBr(ptr %1, ptr %14, ptr %6, ptr %9)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %6)
  %memberidx7 = getelementptr inbounds %TernaryExpression, ptr %2, i32 0, i32 5
  %16 = load ptr, ptr %memberidx7, align 8
  %17 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %16)
  %18 = call ptr @LLVMBuildBr(ptr %1, ptr %12)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %9)
  %memberidx8 = getelementptr inbounds %TernaryExpression, ptr %2, i32 0, i32 6
  %19 = load ptr, ptr %memberidx8, align 8
  %20 = call ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %19)
  %21 = call ptr @LLVMBuildBr(ptr %1, ptr %12)
  call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %12)
  %22 = load ptr, ptr %memberidx7, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %22, i32 0, i32 3
  %23 = load ptr, ptr %memberidx10, align 8
  %24 = call ptr @CodeGen_codegen_type(ptr %0, ptr %23, i1 true)
  %25 = call ptr @LLVMBuildPhi(ptr %1, ptr %24, ptr @384)
  %incomming_vals = alloca [2 x ptr], align 8
  store ptr %17, ptr %incomming_vals, align 8
  %26 = getelementptr inbounds ptr, ptr %incomming_vals, i64 1
  store ptr %20, ptr %26, align 8
  %blocks = alloca [2 x ptr], align 8
  store ptr %6, ptr %blocks, align 8
  %27 = getelementptr inbounds ptr, ptr %blocks, i64 1
  store ptr %9, ptr %27, align 8
  call void @LLVMAddIncoming(ptr %25, ptr %incomming_vals, ptr %blocks, i64 2)
  ret ptr %25
}

define ptr @CodeGen_codegen_new_exp(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %NewExpression, ptr %2, i32 0, i32 6
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call i1 @is_pointer(ptr %4)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %6, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = call ptr @CodeGen_codegen_type(ptr %0, ptr %4, i1 true)
  %memberidx3 = getelementptr inbounds %NewExpression, ptr %2, i32 0, i32 4
  %8 = load ptr, ptr %memberidx3, align 8
  call void @CodeGen_evaluate_expression_list(ptr %0, ptr %1, ptr %6, ptr %8)
  %memberidx4 = getelementptr inbounds %NewExpression, ptr %2, i32 0, i32 5
  %9 = load i1, ptr %memberidx4, align 1
  br i1 %9, label %if.entry5, label %else6

else:                                             ; preds = %3
  %10 = call i1 @is_object(ptr %4)
  br i1 %10, label %if.entry10, label %ifend

ifend:                                            ; preds = %ifend16, %else, %if.entry5, %else6
  %ptr.0 = phi ptr [ %14, %if.entry5 ], [ %18, %else6 ], [ %ptr.1, %ifend16 ], [ null, %else ]
  ret ptr %ptr.0

if.entry5:                                        ; preds = %if.entry
  %11 = load ptr, ptr %6, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx8, align 8
  %13 = call ptr %12(ptr %6, i64 0)
  %14 = call ptr @LLVMBuildArrayMalloc(ptr %1, ptr %7, ptr %13, ptr @38)
  br label %ifend

else6:                                            ; preds = %if.entry
  %15 = load ptr, ptr %6, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %memberidx9, align 8
  %17 = call ptr %16(ptr %6, i64 0)
  %18 = call ptr @LLVMBuildArrayAlloca(ptr %1, ptr %7, ptr %17, ptr @38)
  br label %ifend

if.entry10:                                       ; preds = %else
  %19 = call ptr @CodeGen_codegen_type(ptr %0, ptr %4, i1 false)
  %memberidx13 = getelementptr inbounds %NewExpression, ptr %2, i32 0, i32 5
  %20 = load i1, ptr %memberidx13, align 1
  br i1 %20, label %if.entry14, label %else15

if.entry14:                                       ; preds = %if.entry10
  %21 = call ptr @LLVMBuildMalloc(ptr %1, ptr %19, ptr @38)
  br label %ifend16

else15:                                           ; preds = %if.entry10
  %22 = call ptr @LLVMBuildAlloca(ptr %1, ptr %19, ptr @38)
  br label %ifend16

ifend16:                                          ; preds = %else15, %if.entry14
  %ptr.1 = phi ptr [ %21, %if.entry14 ], [ %22, %else15 ]
  %23 = load ptr, ptr %6, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i32 0, i32 2
  %24 = load ptr, ptr %memberidx17, align 8
  call void %24(ptr %6, ptr %ptr.1)
  %memberidx18 = getelementptr inbounds %NewExpression, ptr %2, i32 0, i32 4
  %25 = load ptr, ptr %memberidx18, align 8
  call void @CodeGen_evaluate_expression_list(ptr %0, ptr %1, ptr %6, ptr %25)
  call void @CodeGen_build_constructor_call(ptr %0, ptr %1, ptr %4, ptr %6)
  br label %ifend
}

define ptr @CodeGen_codegen_intrinsic_exp(ptr %0, ptr %1, ptr %2) {
  %memberidx = getelementptr inbounds %IntrinsicCall, ptr %2, i32 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 1
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  %memberidx3 = getelementptr inbounds %IntrinsicCall, ptr %2, i32 0, i32 5
  %6 = load ptr, ptr %memberidx3, align 8
  call void @CodeGen_evaluate_expression_list(ptr %0, ptr %1, ptr %5, ptr %6)
  %7 = icmp slt i64 %4, 3
  br i1 %7, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %cbuff = alloca ptr, align 8
  %8 = load ptr, ptr %5, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = call ptr %9(ptr %5, i64 0)
  %11 = call ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %10)
  store ptr %11, ptr %cbuff, align 8
  %value = alloca ptr, align 8
  store ptr null, ptr %value, align 8
  %12 = icmp eq i64 %4, 0
  br i1 %12, label %if.entry5, label %ifend7

ifend:                                            ; preds = %3
  %arg0_pointee_ty = alloca ptr, align 8
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx21, align 8
  %16 = call ptr %15(ptr %13, i64 0)
  %memberidx22 = getelementptr inbounds %Expression, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %PointerType, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx23, align 8
  store ptr %18, ptr %arg0_pointee_ty, align 8
  %arg0_pointee_size = alloca ptr, align 8
  %19 = call ptr @CodeGen_codegen_type(ptr %0, ptr %18, i1 true)
  %20 = call ptr @LLVMSizeOf(ptr %19)
  store ptr %20, ptr %arg0_pointee_size, align 8
  %21 = icmp eq i64 %4, 6
  br i1 %21, label %if.entry24, label %ifend26

if.entry5:                                        ; preds = %if.entry
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %22, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx8 = getelementptr inbounds %Array_LLVMValueRef_, ptr %22, i32 0, i32 1
  %23 = load ptr, ptr %memberidx8, align 8
  %24 = load ptr, ptr %cbuff, align 8
  store ptr %24, ptr %23, align 8
  %memberidx9 = getelementptr inbounds %Array_LLVMValueRef_, ptr %22, i32 0, i32 2
  store i64 1, ptr %memberidx9, align 4
  %25 = call ptr @CodeGen_codegen_atof_call(ptr %0, ptr %1, ptr %22)
  store ptr %25, ptr %value, align 8
  br label %ifend7

ifend7:                                           ; preds = %if.entry, %if.entry5
  %26 = icmp eq i64 %4, 1
  br i1 %26, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend7
  %27 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %27, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx13 = getelementptr inbounds %Array_LLVMValueRef_, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx13, align 8
  %29 = load ptr, ptr %cbuff, align 8
  store ptr %29, ptr %28, align 8
  %memberidx14 = getelementptr inbounds %Array_LLVMValueRef_, ptr %27, i32 0, i32 2
  store i64 1, ptr %memberidx14, align 4
  %30 = call ptr @CodeGen_codegen_atoi_call(ptr %0, ptr %1, ptr %27)
  store ptr %30, ptr %value, align 8
  br label %ifend12

ifend12:                                          ; preds = %ifend7, %if.entry10
  %31 = icmp eq i64 %4, 2
  br i1 %31, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %ifend12
  %32 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %32, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx18 = getelementptr inbounds %Array_LLVMValueRef_, ptr %32, i32 0, i32 1
  %33 = load ptr, ptr %memberidx18, align 8
  %34 = load ptr, ptr %cbuff, align 8
  store ptr %34, ptr %33, align 8
  %memberidx19 = getelementptr inbounds %Array_LLVMValueRef_, ptr %32, i32 0, i32 2
  store i64 1, ptr %memberidx19, align 4
  %35 = call ptr @CodeGen_codegen_atol_call(ptr %0, ptr %1, ptr %32)
  store ptr %35, ptr %value, align 8
  br label %ifend17

common.ret:                                       ; preds = %ifend51, %if.entry49, %if.entry43, %if.entry35, %if.entry31, %if.entry24, %ifend17
  %common.ret.op = phi ptr [ %38, %ifend17 ], [ %45, %if.entry24 ], [ %53, %if.entry31 ], [ %72, %if.entry35 ], [ %89, %if.entry43 ], [ %102, %if.entry49 ], [ null, %ifend51 ]
  ret ptr %common.ret.op

ifend17:                                          ; preds = %ifend12, %if.entry15
  %36 = load ptr, ptr %cbuff, align 8
  %37 = call ptr @LLVMBuildFree(ptr %1, ptr %36)
  %38 = load ptr, ptr %value, align 8
  br label %common.ret

if.entry24:                                       ; preds = %ifend
  %39 = load ptr, ptr %5, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i32 0, i32 3
  %40 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i32 0, i32 5
  %41 = load ptr, ptr %memberidx28, align 8
  %42 = call ptr %41(ptr %5, i64 1)
  %43 = load ptr, ptr %arg0_pointee_size, align 8
  %44 = call ptr @LLVMBuildMul(ptr %1, ptr %42, ptr %43, ptr @38)
  call void %40(ptr %5, i64 1, ptr %44)
  %45 = call ptr @CodeGen_codegen_realloc_call(ptr %0, ptr %1, ptr %5)
  br label %common.ret

ifend26:                                          ; preds = %ifend
  %46 = load ptr, ptr %5, align 8
  %memberidx29 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 3
  %47 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i32 0, i32 5
  %48 = load ptr, ptr %memberidx30, align 8
  %49 = call ptr %48(ptr %5, i64 2)
  %50 = load ptr, ptr %arg0_pointee_size, align 8
  %51 = call ptr @LLVMBuildMul(ptr %1, ptr %49, ptr %50, ptr @38)
  call void %47(ptr %5, i64 2, ptr %51)
  %52 = icmp eq i64 %4, 7
  br i1 %52, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend26
  %53 = call ptr @CodeGen_codegen_memcmp_call(ptr %0, ptr %1, ptr %5)
  br label %common.ret

ifend33:                                          ; preds = %ifend26
  %arg0_align = alloca i64, align 8
  %54 = load ptr, ptr %5, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i32 0, i32 5
  %55 = load ptr, ptr %memberidx34, align 8
  %56 = call ptr %55(ptr %5, i64 0)
  %57 = call i64 @LLVMGetAlignment(ptr %56)
  store i64 %57, ptr %arg0_align, align 4
  %58 = icmp eq i64 %4, 5
  br i1 %58, label %if.entry35, label %ifend37

if.entry35:                                       ; preds = %ifend33
  %59 = load ptr, ptr %5, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i32 0, i32 5
  %60 = load ptr, ptr %memberidx38, align 8
  %61 = call ptr %60(ptr %5, i64 0)
  %62 = load ptr, ptr %5, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i32 0, i32 5
  %63 = load ptr, ptr %memberidx39, align 8
  %64 = call ptr %63(ptr %5, i64 1)
  %memberidx40 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 12
  %65 = load ptr, ptr %memberidx40, align 8
  %66 = call ptr @LLVMInt8TypeInContext(ptr %65)
  %67 = call ptr @LLVMBuildIntCast2(ptr %1, ptr %64, ptr %66, i1 false, ptr @38)
  %68 = load ptr, ptr %5, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i32 0, i32 5
  %69 = load ptr, ptr %memberidx41, align 8
  %70 = call ptr %69(ptr %5, i64 2)
  %71 = load i64, ptr %arg0_align, align 4
  %72 = call ptr @LLVMBuildMemSet(ptr %1, ptr %61, ptr %67, ptr %70, i64 %71)
  br label %common.ret

ifend37:                                          ; preds = %ifend33
  %arg1_align = alloca i64, align 8
  %73 = load ptr, ptr %5, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %73, i32 0, i32 5
  %74 = load ptr, ptr %memberidx42, align 8
  %75 = call ptr %74(ptr %5, i64 1)
  %76 = call i64 @LLVMGetAlignment(ptr %75)
  store i64 %76, ptr %arg1_align, align 4
  %77 = icmp eq i64 %4, 3
  br i1 %77, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %ifend37
  %78 = load ptr, ptr %5, align 8
  %memberidx46 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %78, i32 0, i32 5
  %79 = load ptr, ptr %memberidx46, align 8
  %80 = call ptr %79(ptr %5, i64 0)
  %81 = load i64, ptr %arg0_align, align 4
  %82 = load ptr, ptr %5, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %82, i32 0, i32 5
  %83 = load ptr, ptr %memberidx47, align 8
  %84 = call ptr %83(ptr %5, i64 1)
  %85 = load i64, ptr %arg1_align, align 4
  %86 = load ptr, ptr %5, align 8
  %memberidx48 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %86, i32 0, i32 5
  %87 = load ptr, ptr %memberidx48, align 8
  %88 = call ptr %87(ptr %5, i64 2)
  %89 = call ptr @LLVMBuildMemCpy(ptr %1, ptr %80, i64 %81, ptr %84, i64 %85, ptr %88)
  br label %common.ret

ifend45:                                          ; preds = %ifend37
  %90 = icmp eq i64 %4, 4
  br i1 %90, label %if.entry49, label %ifend51

if.entry49:                                       ; preds = %ifend45
  %91 = load ptr, ptr %5, align 8
  %memberidx52 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %91, i32 0, i32 5
  %92 = load ptr, ptr %memberidx52, align 8
  %93 = call ptr %92(ptr %5, i64 0)
  %94 = load i64, ptr %arg0_align, align 4
  %95 = load ptr, ptr %5, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %95, i32 0, i32 5
  %96 = load ptr, ptr %memberidx53, align 8
  %97 = call ptr %96(ptr %5, i64 1)
  %98 = load i64, ptr %arg1_align, align 4
  %99 = load ptr, ptr %5, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %99, i32 0, i32 5
  %100 = load ptr, ptr %memberidx54, align 8
  %101 = call ptr %100(ptr %5, i64 2)
  %102 = call ptr @LLVMBuildMemMove(ptr %1, ptr %93, i64 %94, ptr %97, i64 %98, ptr %101)
  br label %common.ret

ifend51:                                          ; preds = %ifend45
  %103 = call ptr @string_from_bytes(ptr @389, i64 21)
  call void @panic(ptr %103)
  br label %common.ret
}

define void @CodeGen_constructor(ptr %0) {
  store ptr @VTableCodeGen, ptr %0, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 3
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %2)
  store ptr %2, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 4
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %3)
  store ptr %3, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 5
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_CGClassType_, ptr null, i32 1) to i32))
  call void @Map_string_CGClassType__constructor(ptr %4)
  store ptr %4, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 6
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_CGEnumType_, ptr null, i32 1) to i32))
  call void @Map_string_CGEnumType__constructor(ptr %5)
  store ptr %5, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 11
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %6)
  store ptr %6, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %0, i32 0, i32 10
  store i1 true, ptr %memberidx5, align 1
  ret void
}

declare ptr @LLVMContextCreate()

declare ptr @LLVMModuleCreateWithNameInContext(ptr, ptr)

define ptr @create_var_key(ptr %0) {
  %memberidx = getelementptr inbounds %VarId, ptr %0, i32 0, i32 1
  %2 = load i64, ptr %memberidx, align 4
  %3 = load i64, ptr %0, align 4
  %memberidx2 = getelementptr inbounds %VarId, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx2, align 4
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @349, i64 %2, i64 %3, i64 %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  ret ptr %8
}

define ptr @create_type_id_key(ptr %0) {
  %2 = load i64, ptr %0, align 4
  %memberidx1 = getelementptr inbounds %TypeId, ptr %0, i32 0, i32 1
  %3 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %TypeId, ptr %0, i32 0, i32 2
  %4 = load i64, ptr %memberidx2, align 4
  %5 = alloca ptr, align 8
  %6 = call i64 (ptr, ptr, ...) @asprintf(ptr %5, ptr @349, i64 %2, i64 %3, i64 %4)
  %7 = load ptr, ptr %5, align 8
  %8 = call ptr @string_from_bytes(ptr %7, i64 %6)
  ret ptr %8
}

declare i1 @LLVMIsConstant(ptr)

declare ptr @LLVMConstNeg(ptr)

declare ptr @LLVMBuildNeg(ptr, ptr, ptr)

declare ptr @LLVMConstInt(ptr, i64, i1)

declare ptr @LLVMInt1TypeInContext(ptr)

declare ptr @LLVMIntTypeInContext(ptr, i64)

declare ptr @LLVMVoidTypeInContext(ptr)

declare ptr @LLVMInt8TypeInContext(ptr)

declare ptr @LLVMInt16TypeInContext(ptr)

declare ptr @LLVMInt32TypeInContext(ptr)

declare ptr @LLVMInt64TypeInContext(ptr)

declare ptr @LLVMInt128TypeInContext(ptr)

declare ptr @LLVMHalfTypeInContext(ptr)

declare ptr @LLVMFloatTypeInContext(ptr)

declare ptr @LLVMDoubleTypeInContext(ptr)

declare ptr @LLVMPointerType(ptr, i64)

declare ptr @LLVMArrayType(ptr, i64)

declare ptr @LLVMFunctionType(ptr, ptr, i64, i1)

declare ptr @LLVMBuildRet(ptr, ptr)

declare ptr @LLVMBuildRetVoid(ptr)

declare ptr @LLVMConstReal(ptr, double)

define void @IntrinsicResult_constructor(ptr %0) {
  store ptr null, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicResult, ptr %0, i32 0, i32 1
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define ptr @get_intrinsic(ptr %0, ptr %1, ptr %2, ptr %3, i1 %4) {
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicResult, ptr null, i32 1) to i32))
  call void @IntrinsicResult_constructor(ptr %6)
  %memberidx = getelementptr inbounds %IntrinsicResult, ptr %6, i32 0, i32 1
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %2, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  %9 = call ptr @LLVMFunctionType(ptr %3, ptr %7, i64 %8, i1 %4)
  store ptr %9, ptr %memberidx, align 8
  %10 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i32 0, i32 11
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = call ptr %11(ptr %1)
  %13 = call ptr @LLVMGetNamedFunction(ptr %0, ptr %12)
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %5
  store ptr %13, ptr %6, align 8
  br label %ifend

else:                                             ; preds = %5
  %15 = load ptr, ptr %memberidx, align 8
  %16 = call ptr @LLVMAddFunction(ptr %0, ptr %12, ptr %15)
  store ptr %16, ptr %6, align 8
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret ptr %6
}

declare ptr @LLVMAddFunction(ptr, ptr, ptr)

declare ptr @LLVMBuildCall2(ptr, ptr, ptr, ptr, i64, ptr)

declare ptr @LLVMBuildGlobalString(ptr, ptr, ptr)

declare ptr @LLVMBuildAlloca(ptr, ptr, ptr)

declare ptr @LLVMBuildLoad2(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildSelect(ptr, ptr, ptr, ptr, ptr)

define ptr @get_format_from_type(ptr %0) {
  %2 = call i1 @is_int(ptr %0)
  br i1 %2, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %3 = load i64, ptr %0, align 4
  %4 = icmp eq i64 %3, 6
  br i1 %4, label %if.entry1, label %ifend3

ifend:                                            ; preds = %1
  %5 = load i64, ptr %0, align 4
  %6 = icmp eq i64 %5, 8
  %7 = icmp eq i64 %5, 9
  %8 = or i1 %6, %7
  br i1 %8, label %if.entry10, label %ifend12

common.ret:                                       ; preds = %ifend20, %if.entry18, %if.entry15, %if.entry10, %ifend7, %if.entry5, %if.entry1
  %common.ret.op = phi ptr [ %9, %if.entry1 ], [ %11, %if.entry5 ], [ %12, %ifend7 ], [ %13, %if.entry10 ], [ %17, %if.entry15 ], [ %19, %if.entry18 ], [ %20, %ifend20 ]
  ret ptr %common.ret.op

if.entry1:                                        ; preds = %if.entry
  %9 = call ptr @string_from_bytes(ptr @359, i64 3)
  br label %common.ret

ifend3:                                           ; preds = %if.entry
  %10 = icmp eq i64 %3, 5
  br i1 %10, label %if.entry5, label %ifend7

if.entry5:                                        ; preds = %ifend3
  %11 = call ptr @string_from_bytes(ptr @360, i64 2)
  br label %common.ret

ifend7:                                           ; preds = %ifend3
  %12 = call ptr @string_from_bytes(ptr @361, i64 2)
  br label %common.ret

if.entry10:                                       ; preds = %ifend
  %13 = call ptr @string_from_bytes(ptr @362, i64 2)
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %14 = icmp eq i64 %5, 10
  %15 = icmp eq i64 %5, 11
  %16 = or i1 %14, %15
  br i1 %16, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %ifend12
  %17 = call ptr @string_from_bytes(ptr @363, i64 3)
  br label %common.ret

ifend17:                                          ; preds = %ifend12
  %18 = call i1 @is_pointer(ptr %0)
  br i1 %18, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend17
  %19 = call ptr @string_from_bytes(ptr @364, i64 4)
  br label %common.ret

ifend20:                                          ; preds = %ifend17
  %20 = call ptr @string_from_bytes(ptr @26, i64 2)
  br label %common.ret
}

declare i1 @LLVMIsGlobalConstant(ptr)

declare ptr @LLVMTypeOf(ptr)

declare ptr @LLVMBuildMalloc(ptr, ptr, ptr)

declare ptr @LLVMBuildStore(ptr, ptr, ptr)

declare ptr @LLVMBuildInBoundsGEP2(ptr, ptr, ptr, ptr, i64, ptr)

declare ptr @LLVMConstArray(ptr, ptr, i64)

define ptr @create_prop_key(ptr %0) {
  %memberidx = getelementptr inbounds %PropId, ptr %0, i32 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %3 = call ptr @create_type_id_key(ptr %2)
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 11
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr %5(ptr %3)
  %7 = load i64, ptr %0, align 4
  %memberidx3 = getelementptr inbounds %PropId, ptr %0, i32 0, i32 2
  %8 = load i64, ptr %memberidx3, align 4
  %9 = alloca ptr, align 8
  %10 = call i64 (ptr, ptr, ...) @asprintf(ptr %9, ptr @373, ptr %6, i64 %7, i64 %8)
  %11 = load ptr, ptr %9, align 8
  %12 = call ptr @string_from_bytes(ptr %11, i64 %10)
  ret ptr %12
}

declare ptr @LLVMInt32Type()

define ptr @get_class_prop_type_with_name(ptr %0, ptr %1, ptr %2) {
  %4 = call ptr @get_class_from_type(ptr %0, ptr %1)
  %5 = icmp eq ptr %4, null
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %3, %ifend4
  %common.ret.op = phi ptr [ %11, %ifend4 ], [ null, %3 ], [ null, %ifend ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %prop_id = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Class, ptr %4, i32 0, i32 6
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr %8(ptr %6, ptr %2)
  store ptr %9, ptr %prop_id, align 8
  %10 = icmp eq ptr %9, null
  br i1 %10, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %11 = call ptr @get_class_prop_type(ptr %0, ptr %9)
  br label %common.ret
}

declare ptr @LLVMConstMul(ptr, ptr)

declare ptr @LLVMSizeOf(ptr)

declare i1 @LLVMIsNull(ptr)

declare ptr @LLVMBuildIsNull(ptr, ptr, ptr)

declare ptr @LLVMBuildIsNotNull(ptr, ptr, ptr)

declare ptr @LLVMConstAdd(ptr, ptr)

declare ptr @LLVMBuildAdd(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstSub(ptr, ptr)

declare ptr @LLVMBuildSub(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildMul(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildSDiv(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildSRem(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstICmp(i64, ptr, ptr)

declare ptr @LLVMBuildICmp(ptr, i64, ptr, ptr, ptr)

declare ptr @LLVMConstShl(ptr, ptr)

declare ptr @LLVMBuildShl(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstAShr(ptr, ptr)

declare ptr @LLVMBuildAShr(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstOr(ptr, ptr)

declare ptr @LLVMBuildOr(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstAnd(ptr, ptr)

declare ptr @LLVMBuildAnd(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstXor(ptr, ptr)

declare ptr @LLVMBuildXor(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFAdd(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFSub(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFMul(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFDiv(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFRem(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstFCmp(i64, ptr, ptr)

declare ptr @LLVMBuildFCmp(ptr, i64, ptr, ptr, ptr)

declare ptr @LLVMConstSIToFP(ptr, ptr)

declare ptr @LLVMBuildSIToFP(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstFPToSI(ptr, ptr)

declare ptr @LLVMBuildFPToSI(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstIntCast(ptr, ptr, i1)

declare ptr @LLVMBuildIntCast2(ptr, ptr, ptr, i1, ptr)

declare ptr @LLVMConstFPCast(ptr, ptr)

declare ptr @LLVMBuildFPCast(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstBitCast(ptr, ptr)

declare ptr @LLVMBuildBitCast(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFNeg(ptr, ptr, ptr)

declare ptr @LLVMConstNot(ptr)

declare ptr @LLVMBuildNot(ptr, ptr, ptr)

declare ptr @LLVMGetInitializer(ptr)

declare ptr @LLVMConstNull(ptr)

declare ptr @LLVMAppendBasicBlockInContext(ptr, ptr, ptr)

declare ptr @LLVMBuildCondBr(ptr, ptr, ptr, ptr)

declare void @LLVMPositionBuilderAtEnd(ptr, ptr)

declare ptr @LLVMBuildBr(ptr, ptr)

declare ptr @LLVMBuildPhi(ptr, ptr, ptr)

declare void @LLVMAddIncoming(ptr, ptr, ptr, i64)

declare ptr @LLVMBuildArrayMalloc(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildArrayAlloca(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFree(ptr, ptr)

declare i64 @LLVMGetAlignment(ptr)

declare ptr @LLVMBuildMemSet(ptr, ptr, ptr, ptr, i64)

declare ptr @LLVMBuildMemCpy(ptr, ptr, i64, ptr, i64, ptr)

declare ptr @LLVMBuildMemMove(ptr, ptr, i64, ptr, i64, ptr)

define i1 @is_terminated(ptr %0) {
  %memberidx = getelementptr inbounds %Block, ptr %0, i32 0, i32 1
  %2 = load i1, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Block, ptr %0, i32 0, i32 2
  %3 = load i1, ptr %memberidx1, align 1
  %4 = or i1 %2, %3
  %memberidx2 = getelementptr inbounds %Block, ptr %0, i32 0, i32 3
  %5 = load i1, ptr %memberidx2, align 1
  %6 = or i1 %4, %5
  ret i1 %6
}

declare void @LLVMDeleteBasicBlock(ptr)

declare ptr @LLVM_GetFunctionType(ptr)

declare ptr @LLVMAddGlobal(ptr, ptr, ptr)

declare void @LLVMSetInitializer(ptr, ptr)

declare void @LLVMSetGlobalConstant(ptr, i1)

declare void @LLVMSetLinkage(ptr, i64)

declare ptr @LLVMCreateBuilderInContext(ptr)

declare ptr @LLVMGetParam(ptr, i64)

declare void @LLVMDisposeBuilder(ptr)

define void @resize_type_array(ptr %0, i64 %1) {
for.entry:
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ %2, %for.entry ], [ %6, %for.body ]
  %3 = icmp sle i64 %i.0, %1
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  call void %5(ptr %0, ptr null)
  %6 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define void @resize_value_array(ptr %0, i64 %1) {
for.entry:
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i32 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %for.entry
  %i.0 = phi i64 [ %2, %for.entry ], [ %6, %for.body ]
  %3 = icmp sle i64 %i.0, %1
  br i1 %3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  call void %5(ptr %0, ptr null)
  %6 = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare ptr @LLVMStructTypeInContext(ptr, ptr, i64, i1)

declare ptr @LLVMConstStructInContext(ptr, ptr, i64, i1)

declare ptr @LLVMStructCreateNamed(ptr, ptr)

declare void @LLVMStructSetBody(ptr, ptr, i64, i1)

attributes #0 = { argmemonly nocallback nofree nounwind willreturn }
